1:014d559: /**
1:014d559:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:014d559:  * contributor license agreements.  See the NOTICE file distributed with
1:014d559:  * this work for additional information regarding copyright ownership.
1:014d559:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:014d559:  * (the "License"); you may not use this file except in compliance with
1:014d559:  * the License.  You may obtain a copy of the License at
1:014d559:  *
1:014d559:  *      http://www.apache.org/licenses/LICENSE-2.0
1:014d559:  *
1:014d559:  * Unless required by applicable law or agreed to in writing, software
1:014d559:  * distributed under the License is distributed on an "AS IS" BASIS,
1:014d559:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:014d559:  * See the License for the specific language governing permissions and
1:014d559:  * limitations under the License.
1:014d559:  */
1:014d559: package org.apache.activemq.broker.scheduler;
1:014d559: 
1:014d559: import static org.junit.Assert.assertEquals;
1:014d559: import static org.junit.Assert.assertNotNull;
1:014d559: import static org.junit.Assert.fail;
1:014d559: 
1:014d559: import java.util.ArrayList;
1:014d559: import java.util.List;
1:014d559: 
1:014d559: import javax.jms.Connection;
1:014d559: import javax.jms.ConnectionFactory;
1:014d559: import javax.jms.Message;
1:014d559: import javax.jms.MessageConsumer;
1:014d559: import javax.jms.MessageProducer;
1:014d559: import javax.jms.Session;
1:014d559: 
1:014d559: import org.apache.activemq.ActiveMQConnectionFactory;
1:014d559: import org.apache.activemq.ScheduledMessage;
1:014d559: import org.apache.activemq.broker.BrokerService;
1:014d559: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:014d559: import org.apache.activemq.broker.region.policy.PolicyMap;
1:014d559: import org.apache.activemq.command.ActiveMQQueue;
1:014d559: import org.apache.activemq.command.ActiveMQTextMessage;
1:014d559: import org.junit.After;
1:014d559: import org.junit.Before;
1:014d559: import org.junit.Test;
1:014d559: import org.slf4j.Logger;
1:014d559: import org.slf4j.LoggerFactory;
1:014d559: 
1:014d559: /**
1:014d559:  * Using the broker's scheduler and setting reduceMemoryFootprint="true" causes
1:014d559:  * message properties to be lost.
1:014d559:  */
1:014d559: public class ReduceMemoryFootprintTest {
1:014d559: 
1:014d559:     private static final Logger LOG = LoggerFactory.getLogger(ReduceMemoryFootprintTest.class);
1:014d559: 
1:014d559:     private static final String TEST_AMQ_BROKER_URI = "tcp://localhost:0";
1:014d559:     private static final String TEST_QUEUE_NAME = "Reduce.Memory.Footprint.Test";
1:014d559: 
1:014d559:     private static final String PROP_NAME = "prop_name";
1:014d559:     private static final String PROP_VALUE = "test-value";
1:014d559: 
1:014d559:     private String connectionURI;
1:014d559:     private BrokerService broker;
1:014d559: 
1:014d559:     @Before
1:014d559:     public void setUp() throws Exception {
1:014d559:         // create a broker
1:014d559:         broker = createBroker();
1:014d559:         broker.start();
1:014d559:         broker.waitUntilStarted();
1:014d559: 
1:014d559:         connectionURI = broker.getTransportConnectorByName("openwire").getPublishableConnectString();
1:014d559:     }
1:014d559: 
1:014d559:     @After
1:014d559:     public void tearDown() throws Exception {
1:014d559:         broker.stop();
1:014d559:         broker.waitUntilStopped();
1:014d559:     }
1:014d559: 
1:014d559:     @Test(timeout = 60000)
1:014d559:     public void testPropertyLostNonScheduled() throws Exception {
1:014d559: 
1:014d559:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionURI);
1:014d559:         Connection connection = connectionFactory.createConnection();
1:014d559: 
1:014d559:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:014d559:         MessageProducer producer = session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME));
1:014d559:         connection.start();
1:014d559: 
1:014d559:         String messageText = createMessageText();
1:014d559: 
1:014d559:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:014d559: 
1:014d559:         // Try with non-scheduled
1:014d559:         message.setStringProperty(PROP_NAME, PROP_VALUE);
1:014d559: 
1:014d559:         message.setText(messageText);
1:014d559:         producer.send(message);
1:014d559: 
1:014d559:         session.commit();
1:014d559: 
1:014d559:         LOG.info("Attempting to receive non-scheduled message");
1:014d559:         Message receivedMessage = consumeMessages(connection);
1:014d559: 
1:014d559:         assertNotNull(receivedMessage);
1:014d559:         assertEquals("property should match", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));
1:014d559: 
1:014d559:         connection.close();
1:014d559:     }
1:014d559: 
1:014d559:     @Test(timeout = 60000)
1:014d559:     public void testPropertyLostScheduled() throws Exception {
1:014d559: 
1:014d559:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionURI);
1:014d559:         Connection connection = connectionFactory.createConnection();
1:014d559: 
1:014d559:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:014d559:         MessageProducer producer = session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME));
1:014d559:         connection.start();
1:014d559: 
1:014d559:         String messageText = createMessageText();
1:014d559: 
1:014d559:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:014d559: 
1:014d559:         // Try with scheduled
1:014d559:         message.setStringProperty(PROP_NAME, PROP_VALUE);
1:014d559:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, 1000);
1:014d559: 
1:014d559:         message.setText(messageText);
1:014d559:         producer.send(message);
1:014d559: 
1:014d559:         session.commit();
1:014d559: 
1:014d559:         LOG.info("Attempting to receive scheduled message");
1:014d559:         Message receivedMessage = consumeMessages(connection);
1:014d559: 
1:014d559:         assertNotNull(receivedMessage);
1:014d559:         assertEquals("property should match", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));
1:014d559: 
1:014d559:         connection.close();
1:014d559:     }
1:014d559: 
1:014d559:     private String createMessageText() {
1:014d559:         StringBuffer buffer = new StringBuffer();
1:014d559:         for (int i = 0; i < 50; i++) {
1:014d559:             buffer.append("1234567890");
1:014d559:         }
1:014d559: 
1:014d559:         return buffer.toString();
1:014d559:     }
1:014d559: 
1:014d559:     private Message consumeMessages(Connection connection) {
1:014d559:         Message message = null;
1:014d559: 
1:014d559:         try {
1:014d559:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:014d559:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(TEST_QUEUE_NAME));
1:014d559:             message = consumer.receive(45000);
1:014d559:         } catch (Exception ex) {
1:014d559:             fail("during consume message received exception " + ex.getMessage());
1:014d559:         } finally {
1:014d559:         }
1:014d559: 
1:014d559:         return message;
1:014d559:     }
1:014d559: 
1:014d559:     private BrokerService createBroker() throws Exception {
1:014d559:         BrokerService broker = new BrokerService();
1:014d559: 
1:014d559:         // add the policy entries ~
1:014d559: 
1:014d559:         PolicyMap policyMap = new PolicyMap();
1:014d559:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:014d559:         PolicyEntry pe = new PolicyEntry();
1:014d559: 
1:014d559:         // reduce memory footprint
1:014d559:         pe.setReduceMemoryFootprint(true);
1:014d559:         pe.setOptimizedDispatch(true);
1:014d559: 
1:014d559:         pe.setQueue(">");
1:014d559:         entries.add(pe);
1:014d559:         policyMap.setPolicyEntries(entries);
1:014d559:         broker.setDestinationPolicy(policyMap);
1:014d559: 
1:014d559:         broker.deleteAllMessages();
1:014d559:         broker.setSchedulerSupport(true);
1:014d559: 
1:014d559:         broker.addConnector(TEST_AMQ_BROKER_URI).setName("openwire");
1:014d559: 
1:014d559:         return broker;
1:014d559:     }
1:014d559: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:014d559
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Using the broker's scheduler and setting reduceMemoryFootprint="true" causes
1:  * message properties to be lost.
1:  */
1: public class ReduceMemoryFootprintTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ReduceMemoryFootprintTest.class);
1: 
1:     private static final String TEST_AMQ_BROKER_URI = "tcp://localhost:0";
1:     private static final String TEST_QUEUE_NAME = "Reduce.Memory.Footprint.Test";
1: 
1:     private static final String PROP_NAME = "prop_name";
1:     private static final String PROP_VALUE = "test-value";
1: 
1:     private String connectionURI;
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         // create a broker
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionURI = broker.getTransportConnectorByName("openwire").getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testPropertyLostNonScheduled() throws Exception {
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionURI);
1:         Connection connection = connectionFactory.createConnection();
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME));
1:         connection.start();
1: 
1:         String messageText = createMessageText();
1: 
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1: 
1:         // Try with non-scheduled
1:         message.setStringProperty(PROP_NAME, PROP_VALUE);
1: 
1:         message.setText(messageText);
1:         producer.send(message);
1: 
1:         session.commit();
1: 
1:         LOG.info("Attempting to receive non-scheduled message");
1:         Message receivedMessage = consumeMessages(connection);
1: 
1:         assertNotNull(receivedMessage);
1:         assertEquals("property should match", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testPropertyLostScheduled() throws Exception {
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionURI);
1:         Connection connection = connectionFactory.createConnection();
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue(TEST_QUEUE_NAME));
1:         connection.start();
1: 
1:         String messageText = createMessageText();
1: 
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1: 
1:         // Try with scheduled
1:         message.setStringProperty(PROP_NAME, PROP_VALUE);
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, 1000);
1: 
1:         message.setText(messageText);
1:         producer.send(message);
1: 
1:         session.commit();
1: 
1:         LOG.info("Attempting to receive scheduled message");
1:         Message receivedMessage = consumeMessages(connection);
1: 
1:         assertNotNull(receivedMessage);
1:         assertEquals("property should match", PROP_VALUE, receivedMessage.getStringProperty(PROP_NAME));
1: 
1:         connection.close();
1:     }
1: 
1:     private String createMessageText() {
1:         StringBuffer buffer = new StringBuffer();
1:         for (int i = 0; i < 50; i++) {
1:             buffer.append("1234567890");
1:         }
1: 
1:         return buffer.toString();
1:     }
1: 
1:     private Message consumeMessages(Connection connection) {
1:         Message message = null;
1: 
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(TEST_QUEUE_NAME));
1:             message = consumer.receive(45000);
1:         } catch (Exception ex) {
1:             fail("during consume message received exception " + ex.getMessage());
1:         } finally {
1:         }
1: 
1:         return message;
1:     }
1: 
1:     private BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1: 
1:         // add the policy entries ~
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1:         // reduce memory footprint
1:         pe.setReduceMemoryFootprint(true);
1:         pe.setOptimizedDispatch(true);
1: 
1:         pe.setQueue(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.deleteAllMessages();
1:         broker.setSchedulerSupport(true);
1: 
1:         broker.addConnector(TEST_AMQ_BROKER_URI).setName("openwire");
1: 
1:         return broker;
1:     }
1: }
============================================================================