1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.util;
3:a107823: 
1:eece06b: import org.apache.activemq.console.filter.*;
1:a107823: 
1:eece06b: import javax.management.Attribute;
1:eece06b: import javax.management.AttributeList;
1:0dec0b6: import javax.management.MBeanServerConnection;
1:eece06b: import javax.management.ObjectName;
1:eece06b: import java.util.*;
1:5f1adbe: 
1:5f1adbe: 
1:5f1adbe: public final class JmxMBeansUtil {
1:5f1adbe: 
1:5f1adbe:     private JmxMBeansUtil() {
1:5f1adbe:     }
1:a107823: 
1:0dec0b6:     public static List getAllBrokers(MBeanServerConnection jmxConnection) throws Exception {
1:8ab1c8d:         return (new MBeansObjectNameQueryFilter(jmxConnection)).query("type=Broker,brokerName=*");
3:a107823:     }
1:a107823: 
1:0dec0b6:     public static List getBrokersByName(MBeanServerConnection jmxConnection, String brokerName) throws Exception {
1:8ab1c8d:         return (new MBeansObjectNameQueryFilter(jmxConnection)).query("type=Broker,brokerName=" + brokerName);
1:a107823:     }
1:a107823: 
1:0dec0b6:     public static List getAllBrokers(MBeanServerConnection jmxConnection, Set attributes) throws Exception {
1:8ab1c8d:         return (new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection))).query("type=Broker");
1:a107823:     }
1:a107823: 
1:0dec0b6:     public static List getBrokersByName(MBeanServerConnection jmxConnection, String brokerName, Set attributes) throws Exception {
1:8ab1c8d:         return (new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection))).query("type=Broker,brokerName=" + brokerName);
1:a107823:     }
1:a107823: 
1:bebffd0:     public static List x_queryMBeans(MBeanServerConnection jmxConnection, List queryList) throws Exception {
1:a107823:         // If there is no query defined get all mbeans
1:5f1adbe:         if (queryList == null || queryList.size() == 0) {
1:0dec0b6:             return createMBeansObjectNameQuery(jmxConnection).query("");
1:a107823: 
1:5f1adbe:             // Parse through all the query strings
1:a107823:         } else {
1:0dec0b6:             return createMBeansObjectNameQuery(jmxConnection).query(queryList);
1:a107823:         }
1:a107823:     }
1:a107823: 
1:1787eda:     public static Map<Object, List> queryMBeansAsMap(MBeanServerConnection jmxConnection, List queryList, Set attributes) throws Exception {
1:1787eda:         Map<Object, List> answer = new HashMap<Object, List>();
1:eece06b:         List<AttributeList> mbeans = queryMBeans(jmxConnection, queryList, attributes);
1:eece06b:         for (AttributeList mbean : mbeans) {
1:eece06b:             for(Attribute attr: mbean.asList()) {
1:1787eda:                 if (attr.getName().equals(MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE)) {
1:eece06b:                     answer.put(attr.getValue(), mbean);
1:eece06b:                 }
1:eece06b:             }
1:eece06b:         }
1:eece06b:         return answer;
1:eece06b:     }
1:eece06b: 
1:eece06b: 
1:0dec0b6:     public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList, Set attributes) throws Exception {
1:a107823:         // If there is no query defined get all mbeans
1:5f1adbe:         if (queryList == null || queryList.size() == 0) {
1:0dec0b6:             return createMBeansAttributeQuery(jmxConnection, attributes).query("");
1:a107823: 
1:5f1adbe:             // Parse through all the query strings
1:a107823:         } else {
1:0dec0b6:             return createMBeansAttributeQuery(jmxConnection, attributes).query(queryList);
1:a107823:         }
1:a107823:     }
1:a107823: 
1:0dec0b6:     public static List queryMBeans(MBeanServerConnection jmxConnection, String queryString) throws Exception {
1:0dec0b6:         return createMBeansObjectNameQuery(jmxConnection).query(queryString);
1:a107823:     }
1:a107823: 
1:0dec0b6:     public static List queryMBeans(MBeanServerConnection jmxConnection, String queryString, Set attributes) throws Exception {
1:0dec0b6:         return createMBeansAttributeQuery(jmxConnection, attributes).query(queryString);
1:a107823:     }
1:a107823: 
1:a107823:     public static List filterMBeansView(List mbeans, Set viewFilter) throws Exception {
1:5f1adbe:         return new PropertiesViewFilter(viewFilter, new MapTransformFilter(new StubQueryFilter(mbeans))).query("");
1:a107823:     }
1:a107823: 
1:a107823:     public static String createQueryString(String query, String param) {
1:a107823:         return query.replaceAll("%1", param);
1:a107823:     }
1:a107823: 
1:5f1adbe:     public static String createQueryString(String query, List params) {
1:5f1adbe:         String output = query;
1:5f1adbe:         int count = 1;
1:5f1adbe:         for (Iterator i = params.iterator(); i.hasNext();) {
1:5f1adbe:             output = output.replaceAll("%" + count++, i.next().toString());
1:5f1adbe:         }
1:a107823: 
1:5f1adbe:         return output;
1:5f1adbe:     }
1:a107823: 
1:0dec0b6:     public static QueryFilter createMBeansObjectNameQuery(MBeanServerConnection jmxConnection) {
1:bebffd0:         return new MBeansObjectNameQueryFilter(jmxConnection);
1:a107823:     }
1:a107823: 
1:0dec0b6:     public static QueryFilter createMBeansAttributeQuery(MBeanServerConnection jmxConnection, Set attributes) {
1:5f1adbe:         // Let use be able to accept wildcard queries
1:5f1adbe:         // Use regular expressions to filter the query result
1:5f1adbe:         // Retrieve the attributes needed
1:5f1adbe:         // Retrieve the mbeans object name specified by the query
1:1a1ebd9:         return new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection));
1:a107823:     }
1:a107823: 
1:0dec0b6:     public static QueryFilter createMessageQueryFilter(MBeanServerConnection jmxConnection, ObjectName destName) {
1:0dec0b6:         return new WildcardToMsgSelectorTransformFilter(new MessagesQueryFilter(jmxConnection, destName));
1:a107823:     }
1:a107823: 
1:a107823:     public static List filterMessagesView(List messages, Set groupViews, Set attributeViews) throws Exception {
1:5f1adbe:         return (new PropertiesViewFilter(attributeViews, new GroupPropertiesViewFilter(groupViews, new MapTransformFilter(new StubQueryFilter(messages))))).query("");
1:a107823:     }
1:a107823: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:1787eda
/////////////////////////////////////////////////////////////////////////
1:     public static Map<Object, List> queryMBeansAsMap(MBeanServerConnection jmxConnection, List queryList, Set attributes) throws Exception {
1:         Map<Object, List> answer = new HashMap<Object, List>();
1:                 if (attr.getName().equals(MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE)) {
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:eece06b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.console.filter.*;
1: import javax.management.Attribute;
1: import javax.management.AttributeList;
1: import javax.management.ObjectName;
1: import java.util.*;
/////////////////////////////////////////////////////////////////////////
0:     public static Map<String, List> queryMBeansAsMap(MBeanServerConnection jmxConnection, List queryList, Set attributes) throws Exception {
0:         Map answer = new HashMap<String, List>();
1:         List<AttributeList> mbeans = queryMBeans(jmxConnection, queryList, attributes);
1:         for (AttributeList mbean : mbeans) {
1:             for(Attribute attr: mbean.asList()) {
0:                 if (attr.getName().equals("Name")) {
1:                     answer.put(attr.getValue(), mbean);
1:                 }
1:             }
1:         }
1:         return answer;
1:     }
1: 
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:bebffd0
/////////////////////////////////////////////////////////////////////////
1:     public static List x_queryMBeans(MBeanServerConnection jmxConnection, List queryList) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         return new MBeansObjectNameQueryFilter(jmxConnection);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1a1ebd9
/////////////////////////////////////////////////////////////////////////
1:         return new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection));
commit:8ab1c8d
/////////////////////////////////////////////////////////////////////////
1:         return (new MBeansObjectNameQueryFilter(jmxConnection)).query("type=Broker,brokerName=*");
1:         return (new MBeansObjectNameQueryFilter(jmxConnection)).query("type=Broker,brokerName=" + brokerName);
1:         return (new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection))).query("type=Broker");
1:         return (new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection))).query("type=Broker,brokerName=" + brokerName);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1: import javax.management.MBeanServerConnection;
/////////////////////////////////////////////////////////////////////////
1:     public static List getAllBrokers(MBeanServerConnection jmxConnection) throws Exception {
0:         return (new MBeansObjectNameQueryFilter(jmxConnection)).query("Type=Broker");
1:     public static List getBrokersByName(MBeanServerConnection jmxConnection, String brokerName) throws Exception {
0:         return (new MBeansObjectNameQueryFilter(jmxConnection)).query("Type=Broker,BrokerName=" + brokerName);
1:     public static List getAllBrokers(MBeanServerConnection jmxConnection, Set attributes) throws Exception {
0:         return (new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection))).query("Type=Broker");
1:     public static List getBrokersByName(MBeanServerConnection jmxConnection, String brokerName, Set attributes) throws Exception {
0:         return (new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection))).query("Type=Broker,BrokerName=" + brokerName);
0:     public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList) throws Exception {
1:             return createMBeansObjectNameQuery(jmxConnection).query("");
1:             return createMBeansObjectNameQuery(jmxConnection).query(queryList);
1:     public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList, Set attributes) throws Exception {
1:             return createMBeansAttributeQuery(jmxConnection, attributes).query("");
1:             return createMBeansAttributeQuery(jmxConnection, attributes).query(queryList);
1:     public static List queryMBeans(MBeanServerConnection jmxConnection, String queryString) throws Exception {
1:         return createMBeansObjectNameQuery(jmxConnection).query(queryString);
1:     public static List queryMBeans(MBeanServerConnection jmxConnection, String queryString, Set attributes) throws Exception {
1:         return createMBeansAttributeQuery(jmxConnection, attributes).query(queryString);
/////////////////////////////////////////////////////////////////////////
1:     public static QueryFilter createMBeansObjectNameQuery(MBeanServerConnection jmxConnection) {
0:         return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxConnection)));
1:     public static QueryFilter createMBeansAttributeQuery(MBeanServerConnection jmxConnection, Set attributes) {
0:         return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection))));
1:     public static QueryFilter createMessageQueryFilter(MBeanServerConnection jmxConnection, ObjectName destName) {
1:         return new WildcardToMsgSelectorTransformFilter(new MessagesQueryFilter(jmxConnection, destName));
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
0: import java.util.Set;
0: import javax.management.ObjectName;
0: import javax.management.remote.JMXServiceURL;
1: 
0: import org.apache.activemq.console.filter.GroupPropertiesViewFilter;
0: import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
0: import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
0: import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
0: import org.apache.activemq.console.filter.MapTransformFilter;
0: import org.apache.activemq.console.filter.MessagesQueryFilter;
0: import org.apache.activemq.console.filter.PropertiesViewFilter;
0: import org.apache.activemq.console.filter.QueryFilter;
0: import org.apache.activemq.console.filter.StubQueryFilter;
0: import org.apache.activemq.console.filter.WildcardToMsgSelectorTransformFilter;
0: import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
1: 
1: public final class JmxMBeansUtil {
1: 
1:     private JmxMBeansUtil() {
1:     }
/////////////////////////////////////////////////////////////////////////
1:         if (queryList == null || queryList.size() == 0) {
1:             // Parse through all the query strings
/////////////////////////////////////////////////////////////////////////
1:         if (queryList == null || queryList.size() == 0) {
1:             // Parse through all the query strings
/////////////////////////////////////////////////////////////////////////
1:         return new PropertiesViewFilter(viewFilter, new MapTransformFilter(new StubQueryFilter(mbeans))).query("");
1:     public static String createQueryString(String query, List params) {
1:         String output = query;
1:         int count = 1;
1:         for (Iterator i = params.iterator(); i.hasNext();) {
1:             output = output.replaceAll("%" + count++, i.next().toString());
1:         }
1:         return output;
1:     }
0:         // Let us be able to accept wildcard queries
0:         // Use regular expressions to filter the query results
0:         // Let us retrieve the mbeans object name specified by the query
0:         return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxUrl)));
1:         // Let use be able to accept wildcard queries
1:         // Use regular expressions to filter the query result
1:         // Retrieve the attributes needed
1:         // Retrieve the mbeans object name specified by the query
0:         return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansAttributeQueryFilter(jmxUrl, attributes, new MBeansObjectNameQueryFilter(jmxUrl))));
0:         return new WildcardToMsgSelectorTransformFilter(new MessagesQueryFilter(jmxUrl, destName));
1:         return (new PropertiesViewFilter(attributeViews, new GroupPropertiesViewFilter(groupViews, new MapTransformFilter(new StubQueryFilter(messages))))).query("");
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.util;
1: 
0: import org.apache.activemq.console.filter.*;
1: 
0: import javax.management.remote.JMXServiceURL;
0: import javax.management.ObjectName;
0: import java.util.Set;
0: import java.util.List;
0: import java.util.Iterator;
1: 
0: public class JmxMBeansUtil {
1: 
0:     public static List getAllBrokers(JMXServiceURL jmxUrl) throws Exception {
0:         return (new MBeansObjectNameQueryFilter(jmxUrl)).query("Type=Broker");
1:     }
1: 
0:     public static List getBrokersByName(JMXServiceURL jmxUrl, String brokerName) throws Exception {
0:         return (new MBeansObjectNameQueryFilter(jmxUrl)).query("Type=Broker,BrokerName=" + brokerName);
1:     }
1: 
0:     public static List getAllBrokers(JMXServiceURL jmxUrl, Set attributes) throws Exception {
0:         return (new MBeansAttributeQueryFilter(jmxUrl, attributes, new MBeansObjectNameQueryFilter(jmxUrl))).query("Type=Broker");
1:     }
1: 
0:     public static List getBrokersByName(JMXServiceURL jmxUrl, String brokerName, Set attributes) throws Exception {
0:         return (new MBeansAttributeQueryFilter(jmxUrl, attributes, new MBeansObjectNameQueryFilter(jmxUrl))).query("Type=Broker,BrokerName=" + brokerName);
1:     }
1: 
0:     public static List queryMBeans(JMXServiceURL jmxUrl, List queryList) throws Exception {
1:         // If there is no query defined get all mbeans
0:         if (queryList==null || queryList.size()==0) {
0:             return createMBeansObjectNameQuery(jmxUrl).query("");
1: 
0:         // Parse through all the query strings
1:         } else {
0:             return createMBeansObjectNameQuery(jmxUrl).query(queryList);
1:         }
1:     }
1: 
0:     public static List queryMBeans(JMXServiceURL jmxUrl, List queryList, Set attributes) throws Exception {
1:         // If there is no query defined get all mbeans
0:         if (queryList==null || queryList.size()==0) {
0:             return createMBeansAttributeQuery(jmxUrl, attributes).query("");
1: 
0:         // Parse through all the query strings
1:         } else {
0:             return createMBeansAttributeQuery(jmxUrl, attributes).query(queryList);
1:         }
1:     }
1: 
0:     public static List queryMBeans(JMXServiceURL jmxUrl, String queryString) throws Exception {
0:         return createMBeansObjectNameQuery(jmxUrl).query(queryString);
1:     }
1: 
0:     public static List queryMBeans(JMXServiceURL jmxUrl, String queryString, Set attributes) throws Exception {
0:         return createMBeansAttributeQuery(jmxUrl, attributes).query(queryString);
1:     }
1: 
1:     public static List filterMBeansView(List mbeans, Set viewFilter) throws Exception {
0:         return (new PropertiesViewFilter(viewFilter, new MapTransformFilter(new StubQueryFilter(mbeans))).query(""));
1:     }
1: 
1:     public static String createQueryString(String query, String param) {
1:         return query.replaceAll("%1", param);
1:     }
1: 
0:     public static String createQueryString(String query, List params) {
1: 
0:         int count = 1;
0:         for (Iterator i=params.iterator();i.hasNext();) {
0:             query.replaceAll("%" + count++, i.next().toString());
1:         }
1: 
0:         return query;
1:     }
1: 
0:     public static QueryFilter createMBeansObjectNameQuery(JMXServiceURL jmxUrl) {
0:         return new WildcardToRegExTransformFilter(       // Let us be able to accept wildcard queries
0:             new MBeansRegExQueryFilter(                  // Use regular expressions to filter the query results
0:                 new MBeansObjectNameQueryFilter(jmxUrl)  // Let us retrieve the mbeans object name specified by the query
0:             )
0:         );
1:     }
1: 
0:     public static QueryFilter createMBeansAttributeQuery(JMXServiceURL jmxUrl, Set attributes) {
0:         return new WildcardToRegExTransformFilter(                  // Let use be able to accept wildcard queries
0:             new MBeansRegExQueryFilter(                             // Use regular expressions to filter the query result
0:                 new MBeansAttributeQueryFilter(jmxUrl, attributes,  // Retrieve the attributes needed
0:                     new MBeansObjectNameQueryFilter(jmxUrl)         // Retrieve the mbeans object name specified by the query
0:                 )
0:             )
0:         );
1:     }
1: 
0:     public static QueryFilter createMessageQueryFilter(JMXServiceURL jmxUrl, ObjectName destName) {
0:         return new WildcardToMsgSelectorTransformFilter(
0:             new MessagesQueryFilter(jmxUrl, destName)
0:         );
1:     }
1: 
1:     public static List filterMessagesView(List messages, Set groupViews, Set attributeViews) throws Exception {
0:         return (new PropertiesViewFilter(attributeViews,
0:             new GroupPropertiesViewFilter(groupViews,
0:                 new MapTransformFilter(
0:                     new StubQueryFilter(messages)
0:                 )
0:             )
0:         )).query("");
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:5d41efc
/////////////////////////////////////////////////////////////////////////
0: 	public static String createQueryString(String query, List params) {
0: 		String output = query;
0: 		int count = 1;
0: 		for (Iterator i = params.iterator(); i.hasNext();) {
0: 			output = output.replaceAll("%" + count++, i.next().toString());
0: 		}
0: 		return output;
0: 	}
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:35bfe5c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.console.filter.*;
0: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public static QueryFilter createMessageQueryFilter(JMXServiceURL jmxUrl, ObjectName destName) {
0:         return new WildcardToMsgSelectorTransformFilter(
0:             new MessagesQueryFilter(jmxUrl, destName)
0:         );
0:     }
0: 
0:     public static List filterMessagesView(List messages, Set groupViews, Set attributeViews) throws Exception {
0:         return (new PropertiesViewFilter(attributeViews,
0:             new GroupPropertiesViewFilter(groupViews,
0:                 new MapTransformFilter(
0:                     new StubQueryFilter(messages)
0:                 )
0:             )
0:         )).query("");
0:     }
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.util;
0: import org.apache.activemq.console.filter.QueryFilter;
0: import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
0: import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
0: import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
0: import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
0: import org.apache.activemq.console.filter.PropertiesViewFilter;
0: import org.apache.activemq.console.filter.StubQueryFilter;
0: import org.apache.activemq.console.filter.MapTransformFilter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console;
0: 
0: import org.apache.activemq.broker.console.filter.QueryFilter;
0: import org.apache.activemq.broker.console.filter.MBeansObjectNameQueryFilter;
0: import org.apache.activemq.broker.console.filter.WildcardToRegExTransformFilter;
0: import org.apache.activemq.broker.console.filter.MBeansRegExQueryFilter;
0: import org.apache.activemq.broker.console.filter.MBeansAttributeQueryFilter;
0: import org.apache.activemq.broker.console.filter.PropertiesViewFilter;
0: import org.apache.activemq.broker.console.filter.StubQueryFilter;
0: import org.apache.activemq.broker.console.filter.MapTransformFilter;
0: 
0: import javax.management.remote.JMXServiceURL;
0: import java.util.Set;
0: import java.util.List;
0: import java.util.Iterator;
0: 
0: public class JmxMBeansUtil {
0: 
0:     public static List getAllBrokers(JMXServiceURL jmxUrl) throws Exception {
0:         return (new MBeansObjectNameQueryFilter(jmxUrl)).query("Type=Broker");
0:     }
0: 
0:     public static List getBrokersByName(JMXServiceURL jmxUrl, String brokerName) throws Exception {
0:         return (new MBeansObjectNameQueryFilter(jmxUrl)).query("Type=Broker,BrokerName=" + brokerName);
0:     }
0: 
0:     public static List getAllBrokers(JMXServiceURL jmxUrl, Set attributes) throws Exception {
0:         return (new MBeansAttributeQueryFilter(jmxUrl, attributes, new MBeansObjectNameQueryFilter(jmxUrl))).query("Type=Broker");
0:     }
0: 
0:     public static List getBrokersByName(JMXServiceURL jmxUrl, String brokerName, Set attributes) throws Exception {
0:         return (new MBeansAttributeQueryFilter(jmxUrl, attributes, new MBeansObjectNameQueryFilter(jmxUrl))).query("Type=Broker,BrokerName=" + brokerName);
0:     }
0: 
0:     public static List queryMBeans(JMXServiceURL jmxUrl, List queryList) throws Exception {
0:         // If there is no query defined get all mbeans
0:         if (queryList==null || queryList.size()==0) {
0:             return createMBeansObjectNameQuery(jmxUrl).query("");
0: 
0:         // Parse through all the query strings
0:         } else {
0:             return createMBeansObjectNameQuery(jmxUrl).query(queryList);
0:         }
0:     }
0: 
0:     public static List queryMBeans(JMXServiceURL jmxUrl, List queryList, Set attributes) throws Exception {
0:         // If there is no query defined get all mbeans
0:         if (queryList==null || queryList.size()==0) {
0:             return createMBeansAttributeQuery(jmxUrl, attributes).query("");
0: 
0:         // Parse through all the query strings
0:         } else {
0:             return createMBeansAttributeQuery(jmxUrl, attributes).query(queryList);
0:         }
0:     }
0: 
0:     public static List queryMBeans(JMXServiceURL jmxUrl, String queryString) throws Exception {
0:         return createMBeansObjectNameQuery(jmxUrl).query(queryString);
0:     }
0: 
0:     public static List queryMBeans(JMXServiceURL jmxUrl, String queryString, Set attributes) throws Exception {
0:         return createMBeansAttributeQuery(jmxUrl, attributes).query(queryString);
0:     }
0: 
0:     public static List filterMBeansView(List mbeans, Set viewFilter) throws Exception {
0:         return (new PropertiesViewFilter(viewFilter, new MapTransformFilter(new StubQueryFilter(mbeans))).query(""));
0:     }
0: 
0:     public static String createQueryString(String query, String param) {
0:         return query.replaceAll("%1", param);
0:     }
0: 
0:     public static String createQueryString(String query, List params) {
0: 
0:         int count = 1;
0:         for (Iterator i=params.iterator();i.hasNext();) {
0:             query.replaceAll("%" + count++, i.next().toString());
0:         }
0: 
0:         return query;
0:     }
0: 
0:     public static QueryFilter createMBeansObjectNameQuery(JMXServiceURL jmxUrl) {
0:         return new WildcardToRegExTransformFilter(       // Let us be able to accept wildcard queries
0:             new MBeansRegExQueryFilter(                  // Use regular expressions to filter the query results
0:                 new MBeansObjectNameQueryFilter(jmxUrl)  // Let us retrieve the mbeans object name specified by the query
0:             )
0:         );
0:     }
0: 
0:     public static QueryFilter createMBeansAttributeQuery(JMXServiceURL jmxUrl, Set attributes) {
0:         return new WildcardToRegExTransformFilter(                  // Let use be able to accept wildcard queries
0:             new MBeansRegExQueryFilter(                             // Use regular expressions to filter the query result
0:                 new MBeansAttributeQueryFilter(jmxUrl, attributes,  // Retrieve the attributes needed
0:                     new MBeansObjectNameQueryFilter(jmxUrl)         // Retrieve the mbeans object name specified by the query
0:                 )
0:             )
0:         );
0:     }
0: }
============================================================================