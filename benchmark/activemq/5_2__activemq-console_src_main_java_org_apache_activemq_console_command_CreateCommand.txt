1:3f32507: /*
1:3f32507:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  * this work for additional information regarding copyright ownership.
1:3f32507:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  * (the "License"); you may not use this file except in compliance with
1:3f32507:  * the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  */
1:3f32507: package org.apache.activemq.console.command;
2:3f32507: 
1:3f32507: import org.w3c.dom.Attr;
1:3f32507: import org.w3c.dom.Element;
1:3f32507: import org.xml.sax.SAXException;
1:3f32507: 
1:3f32507: import javax.xml.parsers.DocumentBuilder;
1:3f32507: import javax.xml.parsers.DocumentBuilderFactory;
1:3f32507: import javax.xml.parsers.ParserConfigurationException;
1:3f32507: import javax.xml.transform.*;
1:3f32507: import javax.xml.transform.dom.DOMSource;
1:3f32507: import javax.xml.transform.stream.StreamResult;
1:3f32507: import javax.xml.xpath.XPath;
1:3f32507: import javax.xml.xpath.XPathConstants;
1:3f32507: import javax.xml.xpath.XPathExpressionException;
1:3f32507: import javax.xml.xpath.XPathFactory;
1:3f32507: import java.io.*;
1:3f32507: import java.nio.ByteBuffer;
1:3f32507: import java.nio.channels.FileChannel;
1:3f32507: import java.util.List;
1:3f32507: 
1:3f32507: public class CreateCommand extends AbstractCommand {
1:3f32507: 
1:3f32507:     protected final String[] helpFile = new String[] {
1:3f32507:         "Task Usage: Main create path/to/brokerA [create-options]",
1:3f32507:         "Description:  Creates a runnable broker instance in the specified path.",
1:3f32507:         "",
1:3f32507:         "List Options:",
1:3f32507:         "    --amqconf <file path>   Path to ActiveMQ conf file that will be used in the broker instance. Default is: conf/activemq.xml",
1:3f32507:         "    --version               Display the version information.",
1:3f32507:         "    -h,-?,--help            Display the create broker help information.",
1:3f32507:         ""
1:3f32507:     };
1:3f32507: 
1:3f32507:     protected final String DEFAULT_TARGET_ACTIVEMQ_CONF = "conf/activemq.xml"; // default activemq conf to create in the new broker instance
1:3f32507:     protected final String DEFAULT_BROKERNAME_XPATH = "/beans/broker/@brokerName"; // default broker name xpath to change the broker name
1:3f32507: 
1:3f32507:     protected final String[] BASE_SUB_DIRS = { "bin", "conf" }; // default sub directories that will be created
1:3f32507:     protected final String BROKER_NAME_REGEX = "[$][{]brokerName[}]"; // use to replace broker name property holders
1:3f32507: 
1:3f32507:     protected String amqConf = "conf/activemq.xml"; // default conf if no conf is specified via --amqconf
1:3f32507: 
1:12b26b6:     // default files to create
1:3f32507:     protected String[][] fileWriteMap = {
1:3f32507:         { "winActivemq", "bin/${brokerName}.bat" },
1:3f32507:         { "unixActivemq", "bin/${brokerName}" }
1:3f32507:     };
1:3f32507: 
1:3f32507: 
1:3f32507:     protected String brokerName;
1:3f32507:     protected File amqHome;
1:3f32507:     protected File targetAmqBase;
1:3f32507: 
1:3f32507:     @Override
1:3f32507:     public String getName() {
1:3f32507:         return "create";
1:3f32507:     }
1:3f32507: 
1:3f32507:     @Override
1:3f32507:     public String getOneLineDescription() {
1:3f32507:         return "Creates a runnable broker instance in the specified path.";
1:3f32507:     }
1:3f32507: 
1:3f32507:     protected void runTask(List<String> tokens) throws Exception {
1:3f32507:         context.print("Running create broker task...");
1:3f32507:         amqHome = new File(System.getProperty("activemq.home"));
1:3f32507:         for (String token : tokens) {
1:3f32507: 
1:3f32507:             targetAmqBase = new File(token);
1:3f32507:             brokerName = targetAmqBase.getName();
1:12b26b6: 
1:3f32507: 
1:3f32507:             if (targetAmqBase.exists()) {
1:3f32507:                 BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
1:3f32507:                 String resp;
1:3f32507:                 while (true) {
1:3f32507:                     context.print("Target directory (" + targetAmqBase.getCanonicalPath() + ") already exists. Overwrite (y/n): ");
1:3f32507:                     resp = console.readLine();
1:3f32507:                     if (resp.equalsIgnoreCase("y") || resp.equalsIgnoreCase("yes")) {
1:3f32507:                         break;
1:3f32507:                     } else if (resp.equalsIgnoreCase("n") || resp.equalsIgnoreCase("no")) {
1:3f32507:                         return;
1:3f32507:                     }
1:3f32507:                 }
1:3f32507:             }
1:3f32507: 
1:3f32507:             context.print("Creating directory: " + targetAmqBase.getCanonicalPath());
1:3f32507:             targetAmqBase.mkdirs();
1:3f32507:             createSubDirs(targetAmqBase, BASE_SUB_DIRS);
1:3f32507:             writeFileMapping(targetAmqBase, fileWriteMap);
1:3f32507:             copyActivemqConf(amqHome, targetAmqBase, amqConf);
1:3f32507:             copyConfDirectory(new File(amqHome, "conf"), new File(targetAmqBase, "conf"));
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Handle the --amqconf options.
1:3f32507:      *
1:3f32507:      * @param token  - option token to handle
1:3f32507:      * @param tokens - succeeding command arguments
1:3f32507:      * @throws Exception
1:3f32507:      */
1:3f32507:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:3f32507:         if (token.startsWith("--amqconf")) {
1:3f32507:             // If no amqconf specified, or next token is a new option
1:3f32507:             if (tokens.isEmpty() || tokens.get(0).startsWith("-")) {
1:3f32507:                 context.printException(new IllegalArgumentException("Attributes to amqconf not specified"));
1:3f32507:                 return;
1:3f32507:             }
1:3f32507: 
1:3f32507:             amqConf = tokens.remove(0);
1:3f32507:         } else {
1:3f32507:             // Let super class handle unknown option
1:3f32507:             super.handleOption(token, tokens);
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     protected void createSubDirs(File target, String[] subDirs) throws IOException {
1:3f32507:         File subDirFile;
1:3f32507:         for (String subDir : BASE_SUB_DIRS) {
1:3f32507:             subDirFile = new File(target, subDir);
1:3f32507:             context.print("Creating directory: " + subDirFile.getCanonicalPath());
1:3f32507:             subDirFile.mkdirs();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     protected void writeFileMapping(File targetBase, String[][] fileWriteMapping) throws IOException {
1:3f32507:         for (String[] fileWrite : fileWriteMapping) {
1:3f32507:             File dest = new File(targetBase, resolveParam(BROKER_NAME_REGEX, brokerName, fileWrite[1]));
1:3f32507:             context.print("Creating new file: " + dest.getCanonicalPath());
1:3f32507:             writeFile(fileWrite[0], dest);
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     protected void copyActivemqConf(File srcBase, File targetBase, String activemqConf) throws IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {
1:3f32507:         File src = new File(srcBase, activemqConf);
1:3f32507: 
1:3f32507:         if (!src.exists()) {
1:3f32507:             throw new FileNotFoundException("File: " + src.getCanonicalPath() + " not found.");
1:3f32507:         }
1:3f32507: 
1:3f32507:         File dest = new File(targetBase, DEFAULT_TARGET_ACTIVEMQ_CONF);
1:3f32507:         context.print("Copying from: " + src.getCanonicalPath() + "\n          to: " + dest.getCanonicalPath());
1:3f32507: 
1:3f32507:         DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
1:3f32507:         Element docElem = builder.parse(src).getDocumentElement();
1:3f32507: 
1:3f32507:         XPath xpath = XPathFactory.newInstance().newXPath();
1:3f32507:         Attr brokerNameAttr = (Attr) xpath.evaluate(DEFAULT_BROKERNAME_XPATH, docElem, XPathConstants.NODE);
1:3f32507:         brokerNameAttr.setValue(brokerName);
1:3f32507: 
1:3f32507:         writeToFile(new DOMSource(docElem), dest);
1:3f32507:     }
1:3f32507: 
1:3f32507:     protected void printHelp() {
1:3f32507:         context.printHelp(helpFile);
1:3f32507:     }
1:3f32507: 
1:3f32507:     // write the default files to create (i.e. script files)
1:3f32507:     private void writeFile(String typeName, File dest) throws IOException {
1:3f32507:         String data;
1:3f32507:         if (typeName.equals("winActivemq")) {
1:3f32507:             data = winActivemqData;
1:3f32507:             data = resolveParam("[$][{]activemq.home[}]", amqHome.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
1:3f32507:             data = resolveParam("[$][{]activemq.base[}]", targetAmqBase.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
1:3f32507:         } else if (typeName.equals("unixActivemq")) {
1:3f32507:             data = getUnixActivemqData();
1:3f32507:             data = resolveParam("[$][{]activemq.home[}]", amqHome.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
1:3f32507:             data = resolveParam("[$][{]activemq.base[}]", targetAmqBase.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
1:3f32507:         } else {
1:3f32507:             throw new IllegalStateException("Unknown file type: " + typeName);
1:3f32507:         }
1:3f32507: 
1:3f32507:         ByteBuffer buf = ByteBuffer.allocate(data.length());
1:3f32507:         buf.put(data.getBytes());
1:3f32507:         buf.flip();
1:3f32507: 
1:12b26b6:         try(FileOutputStream fos = new FileOutputStream(dest);
1:12b26b6:             FileChannel destinationChannel = fos.getChannel()) {
1:12b26b6:             destinationChannel.write(buf);
1:12b26b6:         }
1:3f32507: 
1:3f32507:         // Set file permissions available for Java 6.0 only
1:3f32507:         dest.setExecutable(true);
1:3f32507:         dest.setReadable(true);
1:3f32507:         dest.setWritable(true);
1:3f32507:     }
1:3f32507: 
1:3f32507:     // utlity method to write an xml source to file
1:3f32507:     private void writeToFile(Source src, File file) throws TransformerException {
1:3f32507:         TransformerFactory tFactory = TransformerFactory.newInstance();
1:3f32507:         Transformer fileTransformer = tFactory.newTransformer();
1:3f32507: 
1:3f32507:         Result res = new StreamResult(file);
1:3f32507:         fileTransformer.transform(src, res);
1:3f32507:     }
1:3f32507: 
1:3f32507:     // utility method to copy one file to another
1:3f32507:     private void copyFile(File from, File dest) throws IOException {
1:3f32507:         if (!from.exists()) {
1:3f32507:             return;
1:3f32507:         }
1:12b26b6: 
1:12b26b6:         try(FileInputStream fis = new FileInputStream(from);
1:12b26b6:             FileChannel sourceChannel = fis.getChannel();
1:12b26b6:             FileOutputStream fos = new FileOutputStream(dest);
1:12b26b6:             FileChannel destinationChannel = fos.getChannel()) {
1:12b26b6:             sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
1:12b26b6:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     private void copyConfDirectory(File from, File dest) throws IOException {
1:3f32507:         if (from.isDirectory()) {
1:3f32507:             String files[] = from.list();
1:3f32507: 
1:3f32507:             for (String file : files) {
1:3f32507:                 File srcFile = new File(from, file);
1:3f32507:                 if (srcFile.isFile() && !srcFile.getName().equals("activemq.xml")) {
1:3f32507:                     File destFile = new File(dest, file);
1:3f32507:                     context.print("Copying from: " + srcFile.getCanonicalPath() + "\n          to: " + destFile.getCanonicalPath());
1:3f32507:                     copyFile(srcFile, destFile);
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         } else {
1:3f32507:             throw new IOException(from + " is not a directory");
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     // replace a property place holder (paramName) with the paramValue
1:3f32507:     private String resolveParam(String paramName, String paramValue, String target) {
1:3f32507:         return target.replaceAll(paramName, paramValue);
1:3f32507:     }
1:3f32507: 
1:3f32507:     // Embedded windows script data
1:3f32507:     private static final String winActivemqData =
1:3f32507:         "@echo off\n"
1:3f32507:             + "set ACTIVEMQ_HOME=\"${activemq.home}\"\n"
1:3f32507:             + "set ACTIVEMQ_BASE=\"${activemq.base}\"\n"
1:3f32507:             + "\n"
1:3f32507:             + "set PARAM=%1\n"
1:3f32507:             + ":getParam\n"
1:3f32507:             + "shift\n"
1:3f32507:             + "if \"%1\"==\"\" goto end\n"
1:3f32507:             + "set PARAM=%PARAM% %1\n"
1:3f32507:             + "goto getParam\n"
1:3f32507:             + ":end\n"
1:3f32507:             + "\n"
1:3f32507:             + "%ACTIVEMQ_HOME%/bin/activemq %PARAM%";
1:3f32507: 
1:3f32507: 
1:3f32507:    private String getUnixActivemqData() {
1:3f32507:        StringBuffer res = new StringBuffer();
1:3f32507:        res.append("## Figure out the ACTIVEMQ_BASE from the directory this script was run from\n");
1:3f32507:        res.append("PRG=\"$0\"\n");
1:3f32507:        res.append("progname=`basename \"$0\"`\n");
1:3f32507:        res.append("saveddir=`pwd`\n");
1:3f32507:        res.append("# need this for relative symlinks\n");
1:3f32507:        res.append("dirname_prg=`dirname \"$PRG\"`\n");
1:3f32507:        res.append("cd \"$dirname_prg\"\n");
1:3f32507:        res.append("while [ -h \"$PRG\" ] ; do\n");
1:3f32507:        res.append("  ls=`ls -ld \"$PRG\"`\n");
1:3f32507:        res.append("  link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n");
1:3f32507:        res.append("  if expr \"$link\" : '.*/.*' > /dev/null; then\n");
1:3f32507:        res.append("    PRG=\"$link\"\n");
1:3f32507:        res.append("  else\n");
1:3f32507:        res.append("    PRG=`dirname \"$PRG\"`\"/$link\"\n");
1:3f32507:        res.append("  fi\n");
1:3f32507:        res.append("done\n");
1:3f32507:        res.append("ACTIVEMQ_BASE=`dirname \"$PRG\"`/..\n");
1:3f32507:        res.append("cd \"$saveddir\"\n\n");
1:3f32507:        res.append("ACTIVEMQ_BASE=`cd \"$ACTIVEMQ_BASE\" && pwd`\n\n");
1:3f32507:        res.append("## Enable remote debugging\n");
1:3f32507:        res.append("#export ACTIVEMQ_DEBUG_OPTS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005\"\n\n");
1:3f32507:        res.append("## Add system properties for this instance here (if needed), e.g\n");
1:3f32507:        res.append("#export ACTIVEMQ_OPTS_MEMORY=\"-Xms256M -Xmx1G\"\n");
1:3f32507:        res.append("#export ACTIVEMQ_OPTS=\"$ACTIVEMQ_OPTS_MEMORY -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties\"\n\n");
1:3f32507:        res.append("export ACTIVEMQ_HOME=${activemq.home}\n");
1:3f32507:        res.append("export ACTIVEMQ_BASE=$ACTIVEMQ_BASE\n\n");
1:3f32507:        res.append("${ACTIVEMQ_HOME}/bin/activemq \"$@\"");
1:3f32507:        return res.toString();
1:3f32507:    }
1:3f32507: 
1:3f32507: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:     // default files to create
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         try(FileOutputStream fos = new FileOutputStream(dest);
1:             FileChannel destinationChannel = fos.getChannel()) {
1:             destinationChannel.write(buf);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:         try(FileInputStream fis = new FileInputStream(from);
1:             FileChannel sourceChannel = fis.getChannel();
1:             FileOutputStream fos = new FileOutputStream(dest);
1:             FileChannel destinationChannel = fos.getChannel()) {
1:             sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
1:         }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
1: import org.w3c.dom.Attr;
1: import org.w3c.dom.Element;
1: import org.xml.sax.SAXException;
1: 
1: import javax.xml.parsers.DocumentBuilder;
1: import javax.xml.parsers.DocumentBuilderFactory;
1: import javax.xml.parsers.ParserConfigurationException;
1: import javax.xml.transform.*;
1: import javax.xml.transform.dom.DOMSource;
1: import javax.xml.transform.stream.StreamResult;
1: import javax.xml.xpath.XPath;
1: import javax.xml.xpath.XPathConstants;
1: import javax.xml.xpath.XPathExpressionException;
1: import javax.xml.xpath.XPathFactory;
1: import java.io.*;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.util.List;
1: 
1: public class CreateCommand extends AbstractCommand {
1: 
1:     protected final String[] helpFile = new String[] {
1:         "Task Usage: Main create path/to/brokerA [create-options]",
1:         "Description:  Creates a runnable broker instance in the specified path.",
1:         "",
1:         "List Options:",
1:         "    --amqconf <file path>   Path to ActiveMQ conf file that will be used in the broker instance. Default is: conf/activemq.xml",
1:         "    --version               Display the version information.",
1:         "    -h,-?,--help            Display the create broker help information.",
1:         ""
1:     };
1: 
1:     protected final String DEFAULT_TARGET_ACTIVEMQ_CONF = "conf/activemq.xml"; // default activemq conf to create in the new broker instance
1:     protected final String DEFAULT_BROKERNAME_XPATH = "/beans/broker/@brokerName"; // default broker name xpath to change the broker name
1: 
1:     protected final String[] BASE_SUB_DIRS = { "bin", "conf" }; // default sub directories that will be created
1:     protected final String BROKER_NAME_REGEX = "[$][{]brokerName[}]"; // use to replace broker name property holders
1: 
1:     protected String amqConf = "conf/activemq.xml"; // default conf if no conf is specified via --amqconf
1: 
0:     // default files to create 
1:     protected String[][] fileWriteMap = {
1:         { "winActivemq", "bin/${brokerName}.bat" },
1:         { "unixActivemq", "bin/${brokerName}" }
1:     };
1: 
1: 
1:     protected String brokerName;
1:     protected File amqHome;
1:     protected File targetAmqBase;
1: 
1:     @Override
1:     public String getName() {
1:         return "create";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Creates a runnable broker instance in the specified path.";
1:     }
1: 
1:     protected void runTask(List<String> tokens) throws Exception {
1:         context.print("Running create broker task...");
1:         amqHome = new File(System.getProperty("activemq.home"));
1:         for (String token : tokens) {
1: 
1:             targetAmqBase = new File(token);
1:             brokerName = targetAmqBase.getName();
1:             
1: 
1:             if (targetAmqBase.exists()) {
1:                 BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
1:                 String resp;
1:                 while (true) {
1:                     context.print("Target directory (" + targetAmqBase.getCanonicalPath() + ") already exists. Overwrite (y/n): ");
1:                     resp = console.readLine();
1:                     if (resp.equalsIgnoreCase("y") || resp.equalsIgnoreCase("yes")) {
1:                         break;
1:                     } else if (resp.equalsIgnoreCase("n") || resp.equalsIgnoreCase("no")) {
1:                         return;
1:                     }
1:                 }
1:             }
1: 
1:             context.print("Creating directory: " + targetAmqBase.getCanonicalPath());
1:             targetAmqBase.mkdirs();
1:             createSubDirs(targetAmqBase, BASE_SUB_DIRS);
1:             writeFileMapping(targetAmqBase, fileWriteMap);
1:             copyActivemqConf(amqHome, targetAmqBase, amqConf);
1:             copyConfDirectory(new File(amqHome, "conf"), new File(targetAmqBase, "conf"));
1:         }
1:     }
1: 
1:     /**
1:      * Handle the --amqconf options.
1:      *
1:      * @param token  - option token to handle
1:      * @param tokens - succeeding command arguments
1:      * @throws Exception
1:      */
1:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:         if (token.startsWith("--amqconf")) {
1:             // If no amqconf specified, or next token is a new option
1:             if (tokens.isEmpty() || tokens.get(0).startsWith("-")) {
1:                 context.printException(new IllegalArgumentException("Attributes to amqconf not specified"));
1:                 return;
1:             }
1: 
1:             amqConf = tokens.remove(0);
1:         } else {
1:             // Let super class handle unknown option
1:             super.handleOption(token, tokens);
1:         }
1:     }
1: 
1:     protected void createSubDirs(File target, String[] subDirs) throws IOException {
1:         File subDirFile;
1:         for (String subDir : BASE_SUB_DIRS) {
1:             subDirFile = new File(target, subDir);
1:             context.print("Creating directory: " + subDirFile.getCanonicalPath());
1:             subDirFile.mkdirs();
1:         }
1:     }
1: 
1:     protected void writeFileMapping(File targetBase, String[][] fileWriteMapping) throws IOException {
1:         for (String[] fileWrite : fileWriteMapping) {
1:             File dest = new File(targetBase, resolveParam(BROKER_NAME_REGEX, brokerName, fileWrite[1]));
1:             context.print("Creating new file: " + dest.getCanonicalPath());
1:             writeFile(fileWrite[0], dest);
1:         }
1:     }
1: 
1:     protected void copyActivemqConf(File srcBase, File targetBase, String activemqConf) throws IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {
1:         File src = new File(srcBase, activemqConf);
1: 
1:         if (!src.exists()) {
1:             throw new FileNotFoundException("File: " + src.getCanonicalPath() + " not found.");
1:         }
1: 
1:         File dest = new File(targetBase, DEFAULT_TARGET_ACTIVEMQ_CONF);
1:         context.print("Copying from: " + src.getCanonicalPath() + "\n          to: " + dest.getCanonicalPath());
1: 
1:         DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
1:         Element docElem = builder.parse(src).getDocumentElement();
1: 
1:         XPath xpath = XPathFactory.newInstance().newXPath();
1:         Attr brokerNameAttr = (Attr) xpath.evaluate(DEFAULT_BROKERNAME_XPATH, docElem, XPathConstants.NODE);
1:         brokerNameAttr.setValue(brokerName);
1: 
1:         writeToFile(new DOMSource(docElem), dest);
1:     }
1: 
1:     protected void printHelp() {
1:         context.printHelp(helpFile);
1:     }
1: 
1:     // write the default files to create (i.e. script files)
1:     private void writeFile(String typeName, File dest) throws IOException {
1:         String data;
1:         if (typeName.equals("winActivemq")) {
1:             data = winActivemqData;
1:             data = resolveParam("[$][{]activemq.home[}]", amqHome.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
1:             data = resolveParam("[$][{]activemq.base[}]", targetAmqBase.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
1:         } else if (typeName.equals("unixActivemq")) {
1:             data = getUnixActivemqData();
1:             data = resolveParam("[$][{]activemq.home[}]", amqHome.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
1:             data = resolveParam("[$][{]activemq.base[}]", targetAmqBase.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
1:         } else {
1:             throw new IllegalStateException("Unknown file type: " + typeName);
1:         }
1: 
1:         ByteBuffer buf = ByteBuffer.allocate(data.length());
1:         buf.put(data.getBytes());
1:         buf.flip();
1: 
0:         FileChannel destinationChannel = new FileOutputStream(dest).getChannel();
0:         destinationChannel.write(buf);
0:         destinationChannel.close();
1: 
1:         // Set file permissions available for Java 6.0 only
1:         dest.setExecutable(true);
1:         dest.setReadable(true);
1:         dest.setWritable(true);
1:     }
1: 
1:     // utlity method to write an xml source to file
1:     private void writeToFile(Source src, File file) throws TransformerException {
1:         TransformerFactory tFactory = TransformerFactory.newInstance();
1:         Transformer fileTransformer = tFactory.newTransformer();
1: 
1:         Result res = new StreamResult(file);
1:         fileTransformer.transform(src, res);
1:     }
1: 
1:     // utility method to copy one file to another
1:     private void copyFile(File from, File dest) throws IOException {
1:         if (!from.exists()) {
1:             return;
1:         }
0:         FileChannel sourceChannel = new FileInputStream(from).getChannel();
0:         FileChannel destinationChannel = new FileOutputStream(dest).getChannel();
0:         sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
0:         sourceChannel.close();
0:         destinationChannel.close();
1:     }
1: 
1:     private void copyConfDirectory(File from, File dest) throws IOException {
1:         if (from.isDirectory()) {
1:             String files[] = from.list();
1: 
1:             for (String file : files) {
1:                 File srcFile = new File(from, file);
1:                 if (srcFile.isFile() && !srcFile.getName().equals("activemq.xml")) {
1:                     File destFile = new File(dest, file);
1:                     context.print("Copying from: " + srcFile.getCanonicalPath() + "\n          to: " + destFile.getCanonicalPath());
1:                     copyFile(srcFile, destFile);
1:                 }
1:             }
1:         } else {
1:             throw new IOException(from + " is not a directory");
1:         }
1:     }
1: 
1:     // replace a property place holder (paramName) with the paramValue
1:     private String resolveParam(String paramName, String paramValue, String target) {
1:         return target.replaceAll(paramName, paramValue);
1:     }
1: 
1:     // Embedded windows script data
1:     private static final String winActivemqData =
1:         "@echo off\n"
1:             + "set ACTIVEMQ_HOME=\"${activemq.home}\"\n"
1:             + "set ACTIVEMQ_BASE=\"${activemq.base}\"\n"
1:             + "\n"
1:             + "set PARAM=%1\n"
1:             + ":getParam\n"
1:             + "shift\n"
1:             + "if \"%1\"==\"\" goto end\n"
1:             + "set PARAM=%PARAM% %1\n"
1:             + "goto getParam\n"
1:             + ":end\n"
1:             + "\n"
1:             + "%ACTIVEMQ_HOME%/bin/activemq %PARAM%";
1: 
1: 
1:    private String getUnixActivemqData() {
1:        StringBuffer res = new StringBuffer();
1:        res.append("## Figure out the ACTIVEMQ_BASE from the directory this script was run from\n");
1:        res.append("PRG=\"$0\"\n");
1:        res.append("progname=`basename \"$0\"`\n");
1:        res.append("saveddir=`pwd`\n");
1:        res.append("# need this for relative symlinks\n");
1:        res.append("dirname_prg=`dirname \"$PRG\"`\n");
1:        res.append("cd \"$dirname_prg\"\n");
1:        res.append("while [ -h \"$PRG\" ] ; do\n");
1:        res.append("  ls=`ls -ld \"$PRG\"`\n");
1:        res.append("  link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n");
1:        res.append("  if expr \"$link\" : '.*/.*' > /dev/null; then\n");
1:        res.append("    PRG=\"$link\"\n");
1:        res.append("  else\n");
1:        res.append("    PRG=`dirname \"$PRG\"`\"/$link\"\n");
1:        res.append("  fi\n");
1:        res.append("done\n");
1:        res.append("ACTIVEMQ_BASE=`dirname \"$PRG\"`/..\n");
1:        res.append("cd \"$saveddir\"\n\n");
1:        res.append("ACTIVEMQ_BASE=`cd \"$ACTIVEMQ_BASE\" && pwd`\n\n");
1:        res.append("## Enable remote debugging\n");
1:        res.append("#export ACTIVEMQ_DEBUG_OPTS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005\"\n\n");
1:        res.append("## Add system properties for this instance here (if needed), e.g\n");
1:        res.append("#export ACTIVEMQ_OPTS_MEMORY=\"-Xms256M -Xmx1G\"\n");
1:        res.append("#export ACTIVEMQ_OPTS=\"$ACTIVEMQ_OPTS_MEMORY -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties\"\n\n");
1:        res.append("export ACTIVEMQ_HOME=${activemq.home}\n");
1:        res.append("export ACTIVEMQ_BASE=$ACTIVEMQ_BASE\n\n");
1:        res.append("${ACTIVEMQ_HOME}/bin/activemq \"$@\"");
1:        return res.toString();
1:    }
1: 
1: }
author:Christian Posta
-------------------------------------------------------------------------------
commit:02185be
/////////////////////////////////////////////////////////////////////////
0:        res.append("${ACTIVEMQ_HOME}/bin/activemq \"$@\"");
commit:893a1ce
/////////////////////////////////////////////////////////////////////////
0:        res.append("## Enable remote debugging\n");
0:        res.append("#export ACTIVEMQ_DEBUG_OPTS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005\"\n\n");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public String getName() {
0:         return "create";
0:     }
0: 
0:     @Override
0:     public String getOneLineDescription() {
0:         return "Creates a runnable broker instance in the specified path.";
0:     }
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:b7e31ac
/////////////////////////////////////////////////////////////////////////
0: import org.w3c.dom.Attr;
0: import org.w3c.dom.Element;
0: import org.xml.sax.SAXException;
0: import javax.xml.transform.*;
0: import java.io.*;
0: import java.nio.ByteBuffer;
0: import java.nio.channels.FileChannel;
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             copyConfDirectory(new File(amqHome, "conf"), new File(targetAmqBase, "conf"));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             data = getUnixActivemqData();
/////////////////////////////////////////////////////////////////////////
0:         dest.setExecutable(true);
0:         dest.setReadable(true);
0:         dest.setWritable(true);
/////////////////////////////////////////////////////////////////////////
0:     private void copyConfDirectory(File from, File dest) throws IOException {
0:         if (from.isDirectory()) {
0:             String files[] = from.list();
0: 
0:             for (String file : files) {
0:                 File srcFile = new File(from, file);
0:                 if (srcFile.isFile() && !srcFile.getName().equals("activemq.xml")) {
0:                     File destFile = new File(dest, file);
0:                     context.print("Copying from: " + srcFile.getCanonicalPath() + "\n          to: " + destFile.getCanonicalPath());
0:                     copyFile(srcFile, destFile);
0:                 }
0:             }
0:         } else {
0:             throw new IOException(from + " is not a directory");
0:         }
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:    private String getUnixActivemqData() {
0:        StringBuffer res = new StringBuffer();
0:        res.append("## Figure out the ACTIVEMQ_BASE from the directory this script was run from\n");
0:        res.append("PRG=\"$0\"\n");
0:        res.append("progname=`basename \"$0\"`\n");
0:        res.append("saveddir=`pwd`\n");
0:        res.append("# need this for relative symlinks\n");
0:        res.append("dirname_prg=`dirname \"$PRG\"`\n");
0:        res.append("cd \"$dirname_prg\"\n");
0:        res.append("while [ -h \"$PRG\" ] ; do\n");
0:        res.append("  ls=`ls -ld \"$PRG\"`\n");
0:        res.append("  link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n");
0:        res.append("  if expr \"$link\" : '.*/.*' > /dev/null; then\n");
0:        res.append("    PRG=\"$link\"\n");
0:        res.append("  else\n");
0:        res.append("    PRG=`dirname \"$PRG\"`\"/$link\"\n");
0:        res.append("  fi\n");
0:        res.append("done\n");
0:        res.append("ACTIVEMQ_BASE=`dirname \"$PRG\"`/..\n");
0:        res.append("cd \"$saveddir\"\n\n");
0:        res.append("ACTIVEMQ_BASE=`cd \"$ACTIVEMQ_BASE\" && pwd`\n\n");
0:        res.append("## Add system properties for this instance here (if needed), e.g\n");
0:        res.append("#export ACTIVEMQ_OPTS_MEMORY=\"-Xms256M -Xmx1G\"\n");
0:        res.append("#export ACTIVEMQ_OPTS=\"$ACTIVEMQ_OPTS_MEMORY -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties\"\n\n");
0:        res.append("export ACTIVEMQ_HOME=${activemq.home}\n");
0:        res.append("export ACTIVEMQ_BASE=$ACTIVEMQ_BASE\n\n");
0:        res.append("${ACTIVEMQ_HOME}/bin/activemq \"$*\"");
0:        return res.toString();
0:    }
commit:4afb202
/////////////////////////////////////////////////////////////////////////
0:         { "conf/jetty-realm.properties", "conf/jetty-realm.properties" },
commit:e384fb9
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.console.command;
0: 
0: import java.io.BufferedReader;
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileNotFoundException;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.io.InputStreamReader;
0: import java.nio.ByteBuffer;
0: import java.nio.channels.FileChannel;
0: import java.util.List;
0: 
0: import javax.xml.parsers.DocumentBuilder;
0: import javax.xml.parsers.DocumentBuilderFactory;
0: import javax.xml.parsers.ParserConfigurationException;
0: import javax.xml.transform.Result;
0: import javax.xml.transform.Source;
0: import javax.xml.transform.Transformer;
0: import javax.xml.transform.TransformerException;
0: import javax.xml.transform.TransformerFactory;
0: import javax.xml.transform.dom.DOMSource;
0: import javax.xml.transform.stream.StreamResult;
0: import javax.xml.xpath.XPath;
0: import javax.xml.xpath.XPathConstants;
0: import javax.xml.xpath.XPathExpressionException;
0: import javax.xml.xpath.XPathFactory;
0: 
0: import org.w3c.dom.Attr;
0: import org.w3c.dom.Element;
0: import org.xml.sax.SAXException;
0: 
0: public class CreateCommand extends AbstractCommand {
0: 
0:     protected final String[] helpFile = new String[] {
0:         "Task Usage: Main create path/to/brokerA [create-options]",
0:         "Description:  Creates a runnable broker instance in the specified path.",
0:         "",
0:         "List Options:",
0:         "    --amqconf <file path>   Path to ActiveMQ conf file that will be used in the broker instance. Default is: conf/activemq.xml",
0:         "    --version               Display the version information.",
0:         "    -h,-?,--help            Display the create broker help information.",
0:         ""
0:     };
0: 
0:     protected final String DEFAULT_TARGET_ACTIVEMQ_CONF = "conf/activemq.xml"; // default activemq conf to create in the new broker instance
0:     protected final String DEFAULT_BROKERNAME_XPATH = "/beans/broker/@brokerName"; // default broker name xpath to change the broker name
0: 
0:     protected final String[] BASE_SUB_DIRS = { "bin", "conf" }; // default sub directories that will be created
0:     protected final String BROKER_NAME_REGEX = "[$][{]brokerName[}]"; // use to replace broker name property holders
0: 
0:     protected String amqConf = "conf/activemq.xml"; // default conf if no conf is specified via --amqconf
0: 
0:     // default files to copy from activemq home to the new broker instance
0:     protected String[][] fileCopyMap = {
0:         { "conf/log4j.properties", "conf/log4j.properties" },
0:         { "conf/broker.ks", "conf/broker.ks" },
0:         { "conf/broker.ts", "conf/broker.ts" },
0:         { "conf/camel.xml", "conf/camel.xml" },
0:         { "conf/jetty.xml", "conf/jetty.xml" },
0:         { "conf/credentials.properties", "conf/credentials.properties" }
0:     };
0: 
0:     // default files to create 
0:     protected String[][] fileWriteMap = {
0:         { "winActivemq", "bin/${brokerName}.bat" },
0:         { "unixActivemq", "bin/${brokerName}" }
0:     };
0: 
0: 
0:     protected String brokerName;
0:     protected File amqHome;
0:     protected File targetAmqBase;
0: 
0:     protected void runTask(List<String> tokens) throws Exception {
0:         context.print("Running create broker task...");
0:         amqHome = new File(System.getProperty("activemq.home"));
0:         for (String token : tokens) {
0: 
0:             targetAmqBase = new File(token);
0:             brokerName = targetAmqBase.getName();
0:             
0: 
0:             if (targetAmqBase.exists()) {
0:                 BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
0:                 String resp;
0:                 while (true) {
0:                     context.print("Target directory (" + targetAmqBase.getCanonicalPath() + ") already exists. Overwrite (y/n): ");
0:                     resp = console.readLine();
0:                     if (resp.equalsIgnoreCase("y") || resp.equalsIgnoreCase("yes")) {
0:                         break;
0:                     } else if (resp.equalsIgnoreCase("n") || resp.equalsIgnoreCase("no")) {
0:                         return;
0:                     }
0:                 }
0:             }
0: 
0:             context.print("Creating directory: " + targetAmqBase.getCanonicalPath());
0:             targetAmqBase.mkdirs();
0:             createSubDirs(targetAmqBase, BASE_SUB_DIRS);
0:             writeFileMapping(targetAmqBase, fileWriteMap);
0:             copyActivemqConf(amqHome, targetAmqBase, amqConf);
0:             copyFileMapping(amqHome, targetAmqBase, fileCopyMap);
0:         }
0:     }
0: 
0:     /**
0:      * Handle the --amqconf options.
0:      *
0:      * @param token  - option token to handle
0:      * @param tokens - succeeding command arguments
0:      * @throws Exception
0:      */
0:     protected void handleOption(String token, List<String> tokens) throws Exception {
0:         if (token.startsWith("--amqconf")) {
0:             // If no amqconf specified, or next token is a new option
0:             if (tokens.isEmpty() || tokens.get(0).startsWith("-")) {
0:                 context.printException(new IllegalArgumentException("Attributes to amqconf not specified"));
0:                 return;
0:             }
0: 
0:             amqConf = tokens.remove(0);
0:         } else {
0:             // Let super class handle unknown option
0:             super.handleOption(token, tokens);
0:         }
0:     }
0: 
0:     protected void createSubDirs(File target, String[] subDirs) throws IOException {
0:         File subDirFile;
0:         for (String subDir : BASE_SUB_DIRS) {
0:             subDirFile = new File(target, subDir);
0:             context.print("Creating directory: " + subDirFile.getCanonicalPath());
0:             subDirFile.mkdirs();
0:         }
0:     }
0: 
0:     protected void writeFileMapping(File targetBase, String[][] fileWriteMapping) throws IOException {
0:         for (String[] fileWrite : fileWriteMapping) {
0:             File dest = new File(targetBase, resolveParam(BROKER_NAME_REGEX, brokerName, fileWrite[1]));
0:             context.print("Creating new file: " + dest.getCanonicalPath());
0:             writeFile(fileWrite[0], dest);
0:         }
0:     }
0: 
0:     protected void copyFileMapping(File srcBase, File targetBase, String[][] fileMapping) throws IOException {
0:         for (String[] fileMap : fileMapping) {
0:             File src = new File(srcBase, fileMap[0]);
0:             File dest = new File(targetBase, resolveParam(BROKER_NAME_REGEX, brokerName, fileMap[1]));
0:             context.print("Copying from: " + src.getCanonicalPath() + "\n          to: " + dest.getCanonicalPath());
0:             copyFile(src, dest);
0:         }
0:     }
0: 
0:     protected void copyActivemqConf(File srcBase, File targetBase, String activemqConf) throws IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {
0:         File src = new File(srcBase, activemqConf);
0: 
0:         if (!src.exists()) {
0:             throw new FileNotFoundException("File: " + src.getCanonicalPath() + " not found.");
0:         }
0: 
0:         File dest = new File(targetBase, DEFAULT_TARGET_ACTIVEMQ_CONF);
0:         context.print("Copying from: " + src.getCanonicalPath() + "\n          to: " + dest.getCanonicalPath());
0: 
0:         DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
0:         Element docElem = builder.parse(src).getDocumentElement();
0: 
0:         XPath xpath = XPathFactory.newInstance().newXPath();
0:         Attr brokerNameAttr = (Attr) xpath.evaluate(DEFAULT_BROKERNAME_XPATH, docElem, XPathConstants.NODE);
0:         brokerNameAttr.setValue(brokerName);
0: 
0:         writeToFile(new DOMSource(docElem), dest);
0:     }
0: 
0:     protected void printHelp() {
0:         context.printHelp(helpFile);
0:     }
0: 
0:     // write the default files to create (i.e. script files)
0:     private void writeFile(String typeName, File dest) throws IOException {
0:         String data;
0:         if (typeName.equals("winActivemq")) {
0:             data = winActivemqData;
0:             data = resolveParam("[$][{]activemq.home[}]", amqHome.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
0:             data = resolveParam("[$][{]activemq.base[}]", targetAmqBase.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
0:         } else if (typeName.equals("unixActivemq")) {
0:             data = unixActivemqData;
0:             data = resolveParam("[$][{]activemq.home[}]", amqHome.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
0:             data = resolveParam("[$][{]activemq.base[}]", targetAmqBase.getCanonicalPath().replaceAll("[\\\\]", "/"), data);
0:         } else {
0:             throw new IllegalStateException("Unknown file type: " + typeName);
0:         }
0: 
0:         ByteBuffer buf = ByteBuffer.allocate(data.length());
0:         buf.put(data.getBytes());
0:         buf.flip();
0: 
0:         FileChannel destinationChannel = new FileOutputStream(dest).getChannel();
0:         destinationChannel.write(buf);
0:         destinationChannel.close();
0: 
0:         // Set file permissions available for Java 6.0 only
0: //        dest.setExecutable(true);
0: //        dest.setReadable(true);
0: //        dest.setWritable(true);
0:     }
0: 
0:     // utlity method to write an xml source to file
0:     private void writeToFile(Source src, File file) throws TransformerException {
0:         TransformerFactory tFactory = TransformerFactory.newInstance();
0:         Transformer fileTransformer = tFactory.newTransformer();
0: 
0:         Result res = new StreamResult(file);
0:         fileTransformer.transform(src, res);
0:     }
0: 
0:     // utility method to copy one file to another
0:     private void copyFile(File from, File dest) throws IOException {
0:         if (!from.exists()) {
0:             return;
0:         }
0:         FileChannel sourceChannel = new FileInputStream(from).getChannel();
0:         FileChannel destinationChannel = new FileOutputStream(dest).getChannel();
0:         sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
0:         sourceChannel.close();
0:         destinationChannel.close();
0:     }
0: 
0:     // replace a property place holder (paramName) with the paramValue
0:     private String resolveParam(String paramName, String paramValue, String target) {
0:         return target.replaceAll(paramName, paramValue);
0:     }
0: 
0:     // Embedded windows script data
0:     private static final String winActivemqData =
0:         "@echo off\n"
0:             + "set ACTIVEMQ_HOME=\"${activemq.home}\"\n"
0:             + "set ACTIVEMQ_BASE=\"${activemq.base}\"\n"
0:             + "\n"
0:             + "set PARAM=%1\n"
0:             + ":getParam\n"
0:             + "shift\n"
0:             + "if \"%1\"==\"\" goto end\n"
0:             + "set PARAM=%PARAM% %1\n"
0:             + "goto getParam\n"
0:             + ":end\n"
0:             + "\n"
0:             + "%ACTIVEMQ_HOME%/bin/activemq %PARAM%";
0: 
0: 
0:     // Embedded unix script data
0:     private static final String unixActivemqData = "## Figure out the ACTIVEMQ_BASE from the directory this script was run from\n"
0:         + "PRG=\"$0\"\n"
0:         + "progname=`basename \"$0\"`\n"
0:         + "saveddir=`pwd`\n"
0:         + "# need this for relative symlinks\n"
0:         + "dirname_prg=`dirname \"$PRG\"`\n"
0:         + "cd \"$dirname_prg\"\n"
0:         + "while [ -h \"$PRG\" ] ; do\n"
0:         + "  ls=`ls -ld \"$PRG\"`\n"
0:         + "  link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n"
0:         + "  if expr \"$link\" : '.*/.*' > /dev/null; then\n"
0:         + "    PRG=\"$link\"\n"
0:         + "  else\n"
0:         + "    PRG=`dirname \"$PRG\"`\"/$link\"\n"
0:         + "  fi\n"
0:         + "done\n"
0:         + "ACTIVEMQ_BASE=`dirname \"$PRG\"`/..\n"
0:         + "cd \"$saveddir\"\n"
0:         + "\n"
0:         + "ACTIVEMQ_BASE=`cd \"$ACTIVEMQ_BASE\" && pwd`\n\n"
0:         + "export ACTIVEMQ_HOME=${activemq.home}\n"
0:         + "export ACTIVEMQ_BASE=$ACTIVEMQ_BASE\n\n"
0:         + "${ACTIVEMQ_HOME}/bin/activemq \"$*\"";
0: 
0: }
============================================================================