1:946e62d: /*
1:946e62d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:946e62d:  * contributor license agreements.  See the NOTICE file distributed with
1:946e62d:  * this work for additional information regarding copyright ownership.
1:946e62d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:946e62d:  * (the "License"); you may not use this file except in compliance with
1:946e62d:  * the License.  You may obtain a copy of the License at
1:946e62d:  *
1:946e62d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:946e62d:  *
1:946e62d:  * Unless required by applicable law or agreed to in writing, software
1:946e62d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:946e62d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:946e62d:  * See the License for the specific language governing permissions and
1:946e62d:  * limitations under the License.
1:946e62d:  */
1:946e62d: package org.apache.activemq.store.kahadb.disk.journal;
1:946e62d: 
1:946e62d: import static org.junit.Assert.assertTrue;
1:946e62d: 
1:946e62d: import java.io.File;
1:946e62d: import java.util.concurrent.CountDownLatch;
1:62bdbb0: import java.util.concurrent.Executors;
1:946e62d: import java.util.concurrent.TimeUnit;
1:946e62d: 
1:946e62d: import org.apache.activemq.util.ByteSequence;
1:946e62d: import org.apache.activemq.util.IOHelper;
1:946e62d: import org.junit.After;
1:946e62d: import org.junit.Before;
1:946e62d: import org.junit.Test;
1:946e62d: 
1:946e62d: /**
1:946e62d:  * Test the single threaded DataFileAppender class.
1:946e62d:  */
1:946e62d: public class TargetedDataFileAppenderTest {
1:946e62d: 
1:946e62d:     private Journal dataManager;
1:946e62d:     private TargetedDataFileAppender appender;
1:946e62d:     private DataFile dataFile;
1:946e62d:     private File dir;
1:946e62d: 
1:946e62d:     @Before
1:946e62d:     public void setUp() throws Exception {
1:946e62d:         dir = new File("target/tests/TargetedDataFileAppenderTest");
1:946e62d:         dir.mkdirs();
1:946e62d:         dataManager = new Journal();
1:946e62d:         dataManager.setDirectory(dir);
1:946e62d:         dataManager.start();
1:946e62d: 
1:946e62d:         dataFile = dataManager.reserveDataFile();
1:946e62d:         appender = new TargetedDataFileAppender(dataManager, dataFile);
1:946e62d:     }
1:946e62d: 
1:946e62d:     @After
1:946e62d:     public void tearDown() throws Exception {
1:946e62d:         dataManager.close();
1:946e62d:         IOHelper.delete(dir);
1:946e62d:     }
1:946e62d: 
1:946e62d:     @Test
1:946e62d:     public void testWritesAreBatched() throws Exception {
1:946e62d:         final int iterations = 10;
1:946e62d:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:946e62d:         for (int i = 0; i < iterations; i++) {
1:946e62d:             appender.storeItem(data, Journal.USER_RECORD_TYPE, false);
1:946e62d:         }
1:946e62d: 
1:946e62d:         assertTrue("Data file should not be empty", dataFile.getLength() > 0);
1:946e62d:         assertTrue("Data file should be empty", dataFile.getFile().length() == 0);
1:946e62d: 
1:946e62d:         appender.close();
1:946e62d: 
1:946e62d:         // at this point most probably dataManager.getInflightWrites().size() >= 0
1:946e62d:         // as the Thread created in DataFileAppender.enqueue() may not have caught up.
1:946e62d:         assertTrue("Data file should not be empty", dataFile.getLength() > 0);
1:946e62d:         assertTrue("Data file should not be empty", dataFile.getFile().length() > 0);
1:946e62d:     }
1:946e62d: 
1:946e62d:     @Test
1:946e62d:     public void testBatchWritesCompleteAfterClose() throws Exception {
1:946e62d:         final int iterations = 10;
1:946e62d:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:946e62d:         for (int i = 0; i < iterations; i++) {
1:946e62d:             appender.storeItem(data, Journal.USER_RECORD_TYPE, false);
1:946e62d:         }
1:946e62d: 
1:946e62d:         appender.close();
1:946e62d: 
1:946e62d:         // at this point most probably dataManager.getInflightWrites().size() >= 0
1:946e62d:         // as the Thread created in DataFileAppender.enqueue() may not have caught up.
1:946e62d:         assertTrue("Data file should not be empty", dataFile.getLength() > 0);
1:946e62d:         assertTrue("Data file should not be empty", dataFile.getFile().length() > 0);
1:946e62d:     }
1:946e62d: 
1:946e62d:     @Test
1:946e62d:     public void testBatchWriteCallbackCompleteAfterClose() throws Exception {
1:946e62d:         final int iterations = 10;
1:946e62d:         final CountDownLatch latch = new CountDownLatch(iterations);
1:946e62d:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:946e62d:         for (int i = 0; i < iterations; i++) {
1:946e62d:             appender.storeItem(data, Journal.USER_RECORD_TYPE, new Runnable() {
1:946e62d:                 @Override
1:946e62d:                 public void run() {
1:946e62d:                     latch.countDown();
1:946e62d:                 }
1:946e62d:             });
1:946e62d:         }
1:946e62d: 
1:946e62d:         appender.close();
1:946e62d: 
1:946e62d:         // at this point most probably dataManager.getInflightWrites().size() >= 0
1:946e62d:         // as the Thread created in DataFileAppender.enqueue() may not have caught up.
1:946e62d:         assertTrue("queued data is written", latch.await(5, TimeUnit.SECONDS));
1:946e62d:         assertTrue("Data file should not be empty", dataFile.getLength() > 0);
1:946e62d:         assertTrue("Data file should not be empty", dataFile.getFile().length() > 0);
1:946e62d:     }
1:946e62d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:62bdbb0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Executors;
author:Timothy Bish
-------------------------------------------------------------------------------
commit:946e62d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.disk.journal;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test the single threaded DataFileAppender class.
1:  */
1: public class TargetedDataFileAppenderTest {
1: 
1:     private Journal dataManager;
1:     private TargetedDataFileAppender appender;
1:     private DataFile dataFile;
1:     private File dir;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         dir = new File("target/tests/TargetedDataFileAppenderTest");
1:         dir.mkdirs();
1:         dataManager = new Journal();
1:         dataManager.setDirectory(dir);
1:         dataManager.start();
1: 
1:         dataFile = dataManager.reserveDataFile();
1:         appender = new TargetedDataFileAppender(dataManager, dataFile);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         dataManager.close();
1:         IOHelper.delete(dir);
1:     }
1: 
1:     @Test
1:     public void testWritesAreBatched() throws Exception {
1:         final int iterations = 10;
1:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:         for (int i = 0; i < iterations; i++) {
1:             appender.storeItem(data, Journal.USER_RECORD_TYPE, false);
1:         }
1: 
1:         assertTrue("Data file should not be empty", dataFile.getLength() > 0);
1:         assertTrue("Data file should be empty", dataFile.getFile().length() == 0);
1: 
1:         appender.close();
1: 
1:         // at this point most probably dataManager.getInflightWrites().size() >= 0
1:         // as the Thread created in DataFileAppender.enqueue() may not have caught up.
1:         assertTrue("Data file should not be empty", dataFile.getLength() > 0);
1:         assertTrue("Data file should not be empty", dataFile.getFile().length() > 0);
1:     }
1: 
1:     @Test
1:     public void testBatchWritesCompleteAfterClose() throws Exception {
1:         final int iterations = 10;
1:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:         for (int i = 0; i < iterations; i++) {
1:             appender.storeItem(data, Journal.USER_RECORD_TYPE, false);
1:         }
1: 
1:         appender.close();
1: 
1:         // at this point most probably dataManager.getInflightWrites().size() >= 0
1:         // as the Thread created in DataFileAppender.enqueue() may not have caught up.
1:         assertTrue("Data file should not be empty", dataFile.getLength() > 0);
1:         assertTrue("Data file should not be empty", dataFile.getFile().length() > 0);
1:     }
1: 
1:     @Test
1:     public void testBatchWriteCallbackCompleteAfterClose() throws Exception {
1:         final int iterations = 10;
1:         final CountDownLatch latch = new CountDownLatch(iterations);
1:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:         for (int i = 0; i < iterations; i++) {
1:             appender.storeItem(data, Journal.USER_RECORD_TYPE, new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     latch.countDown();
1:                 }
1:             });
1:         }
1: 
1:         appender.close();
1: 
1:         // at this point most probably dataManager.getInflightWrites().size() >= 0
1:         // as the Thread created in DataFileAppender.enqueue() may not have caught up.
1:         assertTrue("queued data is written", latch.await(5, TimeUnit.SECONDS));
1:         assertTrue("Data file should not be empty", dataFile.getLength() > 0);
1:         assertTrue("Data file should not be empty", dataFile.getFile().length() > 0);
1:     }
1: }
============================================================================