1:57f5e7e: /**
1:57f5e7e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57f5e7e:  * contributor license agreements.  See the NOTICE file distributed with
1:57f5e7e:  * this work for additional information regarding copyright ownership.
1:57f5e7e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57f5e7e:  * (the "License"); you may not use this file except in compliance with
1:57f5e7e:  * the License.  You may obtain a copy of the License at
1:57f5e7e:  *
1:57f5e7e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:57f5e7e:  *
1:57f5e7e:  * Unless required by applicable law or agreed to in writing, software
1:57f5e7e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:57f5e7e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:57f5e7e:  * See the License for the specific language governing permissions and
1:57f5e7e:  * limitations under the License.
1:57f5e7e:  */
1:57f5e7e: package org.apache.activemq;
10:57f5e7e: 
1:57f5e7e: import java.io.ByteArrayInputStream;
1:57f5e7e: import java.io.ByteArrayOutputStream;
1:57f5e7e: import java.io.FileInputStream;
1:57f5e7e: import java.io.IOException;
1:57f5e7e: import java.security.KeyStore;
1:aaf0357: import java.security.SecureRandom;
1:57f5e7e: 
1:57f5e7e: import javax.net.ssl.KeyManager;
1:57f5e7e: import javax.net.ssl.KeyManagerFactory;
1:57f5e7e: import javax.net.ssl.TrustManager;
1:57f5e7e: import javax.net.ssl.TrustManagerFactory;
1:57f5e7e: 
1:57f5e7e: import org.apache.activemq.broker.BrokerService;
1:57f5e7e: import org.apache.activemq.broker.SslBrokerService;
1:57f5e7e: import org.apache.commons.logging.Log;
1:57f5e7e: import org.apache.commons.logging.LogFactory;
1:57f5e7e: 
1:57f5e7e: public class ActiveMQSslConnectionFactoryTest extends CombinationTestSupport {
1:57f5e7e:     private static final Log LOG = LogFactory.getLog(ActiveMQSslConnectionFactoryTest.class);
1:57f5e7e: 
1:57f5e7e:     public static final String KEYSTORE_TYPE = "jks";
1:57f5e7e:     public static final String PASSWORD = "password";
1:57f5e7e:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:57f5e7e:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:57f5e7e: 
1:57f5e7e:     private ActiveMQConnection connection;
1:57f5e7e:     private BrokerService broker;
1:57f5e7e: 
1:c7d559f:     @Override
1:57f5e7e:     protected void tearDown() throws Exception {
1:57f5e7e:         // Try our best to close any previously opend connection.
1:57f5e7e:         try {
1:57f5e7e:             connection.close();
1:57f5e7e:         } catch (Throwable ignore) {
1:57f5e7e:         }
1:57f5e7e:         // Try our best to stop any previously started broker.
1:57f5e7e:         try {
1:57f5e7e:             broker.stop();
1:57f5e7e:         } catch (Throwable ignore) {
1:57f5e7e:         }
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e:     public void testCreateTcpConnectionUsingKnownPort() throws Exception {
1:57f5e7e:         // Control case: check that the factory can create an ordinary (non-ssl) connection.
1:57f5e7e:         broker = createBroker("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:57f5e7e: 
1:57f5e7e:         // This should create the connection.
1:016ae05:         ActiveMQSslConnectionFactory cf = getFactory("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:57f5e7e:         connection = (ActiveMQConnection)cf.createConnection();
1:57f5e7e:         assertNotNull(connection);
1:c4cdd51:         connection.start();
1:c4cdd51:         connection.stop();
1:c7d559f:         brokerStop();
1:c4cdd51:     }
1:57f5e7e: 
1:c4cdd51:     public void testCreateFailoverTcpConnectionUsingKnownPort() throws Exception {
1:c4cdd51:         // Control case: check that the factory can create an ordinary (non-ssl) connection.
1:c4cdd51:         broker = createBroker("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:c4cdd51: 
1:c4cdd51:         // This should create the connection.
1:016ae05:         ActiveMQSslConnectionFactory cf = getFactory("failover:(tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true)");
1:c4cdd51:         connection = (ActiveMQConnection)cf.createConnection();
1:c4cdd51:         assertNotNull(connection);
1:c4cdd51:         connection.start();
1:c4cdd51:         connection.stop();
1:c7d559f:         brokerStop();
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e:     public void testCreateSslConnection() throws Exception {
1:57f5e7e:         // Create SSL/TLS connection with trusted cert from truststore.
1:c7d559f:         String sslUri = "ssl://localhost:61611";
1:57f5e7e:         broker = createSslBroker(sslUri);
1:57f5e7e:         assertNotNull(broker);
1:57f5e7e: 
1:57f5e7e:         // This should create the connection.
1:016ae05:         ActiveMQSslConnectionFactory cf = getFactory(sslUri);
1:57f5e7e:         cf.setTrustStore("server.keystore");
1:57f5e7e:         cf.setTrustStorePassword("password");
1:57f5e7e:         connection = (ActiveMQConnection)cf.createConnection();
1:57f5e7e:         LOG.info("Created client connection");
1:57f5e7e:         assertNotNull(connection);
1:c4cdd51:         connection.start();
1:c4cdd51:         connection.stop();
1:c4cdd51:         brokerStop();
1:c4cdd51:     }
1:c4cdd51: 
1:c4cdd51:     public void testFailoverSslConnection() throws Exception {
1:c4cdd51:         // Create SSL/TLS connection with trusted cert from truststore.
1:c7d559f:         String sslUri = "ssl://localhost:61611";
1:c4cdd51:         broker = createSslBroker(sslUri);
1:c4cdd51:         assertNotNull(broker);
1:c4cdd51: 
1:c4cdd51:         // This should create the connection.
1:016ae05:         ActiveMQSslConnectionFactory cf = getFactory("failover:(" + sslUri + ")?maxReconnectAttempts=4");
1:c4cdd51:         cf.setTrustStore("server.keystore");
1:c4cdd51:         cf.setTrustStorePassword("password");
1:c4cdd51:         connection = (ActiveMQConnection)cf.createConnection();
1:c4cdd51:         LOG.info("Created client connection");
1:c4cdd51:         assertNotNull(connection);
1:c4cdd51:         connection.start();
1:c4cdd51:         connection.stop();
1:57f5e7e: 
1:c4cdd51:         brokerStop();
1:57f5e7e:     }
1:57f5e7e: 
1:aaf0357:     public void testFailoverSslConnectionWithKeyAndTrustManagers() throws Exception {
1:aaf0357:         String sslUri = "ssl://localhost:61611";
1:aaf0357:         broker = createSslBroker(sslUri);
1:aaf0357:         assertNotNull(broker);
1:aaf0357: 
1:016ae05:         ActiveMQSslConnectionFactory cf = getFactory("failover:(" + sslUri + ")?maxReconnectAttempts=4");
1:aaf0357:         cf.setKeyAndTrustManagers(getKeyManager(), getTrustManager(), new SecureRandom());
1:aaf0357:         connection = (ActiveMQConnection)cf.createConnection();
1:aaf0357:         LOG.info("Created client connection");
1:aaf0357:         assertNotNull(connection);
1:aaf0357:         connection.start();
1:aaf0357:         connection.stop();
1:aaf0357: 
1:aaf0357:         brokerStop();
1:aaf0357:     }
1:aaf0357: 
1:57f5e7e:     public void testNegativeCreateSslConnectionWithWrongPassword() throws Exception {
1:57f5e7e:         // Create SSL/TLS connection with trusted cert from truststore.
1:c7d559f:         String sslUri = "ssl://localhost:61611";
1:57f5e7e:         broker = createSslBroker(sslUri);
1:57f5e7e:         assertNotNull(broker);
1:57f5e7e: 
1:57f5e7e:         // This should FAIL to connect, due to wrong password.
1:016ae05:         ActiveMQSslConnectionFactory cf = getFactory(sslUri);
1:57f5e7e:         cf.setTrustStore("server.keystore");
1:57f5e7e:         cf.setTrustStorePassword("wrongPassword");
1:57f5e7e:         try {
1:57f5e7e:             connection = (ActiveMQConnection)cf.createConnection();
1:57f5e7e:         }
1:57f5e7e:         catch (javax.jms.JMSException ignore) {
1:c7d559f:             // Expected exception
1:c7d559f:             LOG.info("Expected java.io.Exception [" + ignore + "]");
1:57f5e7e:         }
1:57f5e7e:         assertNull(connection);
1:57f5e7e: 
1:c4cdd51:         brokerStop();
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e:     public void testNegativeCreateSslConnectionWithWrongCert() throws Exception {
1:57f5e7e:         // Create SSL/TLS connection with trusted cert from truststore.
1:c7d559f:         String sslUri = "ssl://localhost:61611";
1:57f5e7e:         broker = createSslBroker(sslUri);
1:57f5e7e:         assertNotNull(broker);
1:57f5e7e: 
1:57f5e7e:         // This should FAIL to connect, due to wrong password.
1:016ae05:         ActiveMQSslConnectionFactory cf = getFactory(sslUri);
1:57f5e7e:         cf.setTrustStore("dummy.keystore");
1:57f5e7e:         cf.setTrustStorePassword("password");
1:57f5e7e:         try {
1:57f5e7e:             connection = (ActiveMQConnection)cf.createConnection();
1:57f5e7e:         }
1:57f5e7e:         catch (javax.jms.JMSException ignore) {
1:c7d559f:             // Expected exception
1:c7d559f:             LOG.info("Expected SSLHandshakeException [" + ignore + "]");
1:57f5e7e:         }
1:57f5e7e:         assertNull(connection);
1:57f5e7e: 
4:57f5e7e:         brokerStop();
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e:     protected BrokerService createBroker(String uri) throws Exception {
1:57f5e7e:         // Start up a broker with a tcp connector.
1:57f5e7e:         BrokerService service = new BrokerService();
1:57f5e7e:         service.setPersistent(false);
1:c4cdd51:         service.setUseJmx(false);
1:c7d559f:         service.addConnector(uri);
1:57f5e7e:         service.start();
1:57f5e7e: 
1:57f5e7e:         return service;
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e:     protected BrokerService createSslBroker(String uri) throws Exception {
1:c7d559f: 
1:57f5e7e:         // http://java.sun.com/javase/javaseforbusiness/docs/TLSReadme.html
1:57f5e7e:         // work around: javax.net.ssl.SSLHandshakeException: renegotiation is not allowed
1:57f5e7e:         //System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
1:c7d559f: 
1:57f5e7e:         SslBrokerService service = new SslBrokerService();
1:57f5e7e:         service.setPersistent(false);
1:c7d559f: 
1:57f5e7e:         KeyManager[] km = getKeyManager();
1:57f5e7e:         TrustManager[] tm = getTrustManager();
1:c7d559f:         service.addSslConnector(uri, km, tm, null);
1:57f5e7e:         service.start();
1:c7d559f: 
1:57f5e7e:         return service;
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e:     protected void brokerStop() throws Exception {
1:57f5e7e:         broker.stop();
1:57f5e7e:     }
1:57f5e7e: 
1:016ae05:     protected ActiveMQSslConnectionFactory getFactory(String uri) {
1:016ae05:         return new ActiveMQSslConnectionFactory(uri);
1:016ae05:     }
1:016ae05: 
1:57f5e7e:     public static TrustManager[] getTrustManager() throws Exception {
1:57f5e7e:         TrustManager[] trustStoreManagers = null;
1:57f5e7e:         KeyStore trustedCertStore = KeyStore.getInstance(ActiveMQSslConnectionFactoryTest.KEYSTORE_TYPE);
1:c7d559f: 
1:57f5e7e:         trustedCertStore.load(new FileInputStream(ActiveMQSslConnectionFactoryTest.TRUST_KEYSTORE), null);
1:c7d559f:         TrustManagerFactory tmf  =
1:57f5e7e:             TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
1:c7d559f: 
1:57f5e7e:         tmf.init(trustedCertStore);
1:57f5e7e:         trustStoreManagers = tmf.getTrustManagers();
1:c7d559f:         return trustStoreManagers;
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e:     public static KeyManager[] getKeyManager() throws Exception {
1:c7d559f:         KeyManagerFactory kmf =
1:c7d559f:             KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
1:57f5e7e:         KeyStore ks = KeyStore.getInstance(ActiveMQSslConnectionFactoryTest.KEYSTORE_TYPE);
1:57f5e7e:         KeyManager[] keystoreManagers = null;
1:c7d559f: 
1:57f5e7e:         byte[] sslCert = loadClientCredential(ActiveMQSslConnectionFactoryTest.SERVER_KEYSTORE);
1:c7d559f: 
1:c7d559f: 
1:57f5e7e:         if (sslCert != null && sslCert.length > 0) {
1:57f5e7e:             ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
1:57f5e7e:             ks.load(bin, ActiveMQSslConnectionFactoryTest.PASSWORD.toCharArray());
1:57f5e7e:             kmf.init(ks, ActiveMQSslConnectionFactoryTest.PASSWORD.toCharArray());
1:57f5e7e:             keystoreManagers = kmf.getKeyManagers();
1:57f5e7e:         }
1:c7d559f:         return keystoreManagers;
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e:     private static byte[] loadClientCredential(String fileName) throws IOException {
1:57f5e7e:         if (fileName == null) {
1:57f5e7e:             return null;
1:57f5e7e:         }
1:57f5e7e:         FileInputStream in = new FileInputStream(fileName);
1:57f5e7e:         ByteArrayOutputStream out = new ByteArrayOutputStream();
1:57f5e7e:         byte[] buf = new byte[512];
1:57f5e7e:         int i = in.read(buf);
1:57f5e7e:         while (i  > 0) {
1:57f5e7e:             out.write(buf, 0, i);
1:57f5e7e:             i = in.read(buf);
1:57f5e7e:         }
1:57f5e7e:         in.close();
1:57f5e7e:         return out.toByteArray();
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:016ae05
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQSslConnectionFactory cf = getFactory("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQSslConnectionFactory cf = getFactory("failover:(tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true)");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQSslConnectionFactory cf = getFactory(sslUri);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQSslConnectionFactory cf = getFactory("failover:(" + sslUri + ")?maxReconnectAttempts=4");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQSslConnectionFactory cf = getFactory("failover:(" + sslUri + ")?maxReconnectAttempts=4");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQSslConnectionFactory cf = getFactory(sslUri);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQSslConnectionFactory cf = getFactory(sslUri);
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQSslConnectionFactory getFactory(String uri) {
1:         return new ActiveMQSslConnectionFactory(uri);
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         brokerStop();
/////////////////////////////////////////////////////////////////////////
1:         brokerStop();
1:         String sslUri = "ssl://localhost:61611";
/////////////////////////////////////////////////////////////////////////
1:         String sslUri = "ssl://localhost:61611";
/////////////////////////////////////////////////////////////////////////
1:         String sslUri = "ssl://localhost:61611";
/////////////////////////////////////////////////////////////////////////
1:             // Expected exception
1:             LOG.info("Expected java.io.Exception [" + ignore + "]");
/////////////////////////////////////////////////////////////////////////
1:         String sslUri = "ssl://localhost:61611";
/////////////////////////////////////////////////////////////////////////
1:             // Expected exception
1:             LOG.info("Expected SSLHandshakeException [" + ignore + "]");
/////////////////////////////////////////////////////////////////////////
1:         service.addConnector(uri);
1: 
1: 
1: 
1:         service.addSslConnector(uri, km, tm, null);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         TrustManagerFactory tmf  =
1: 
1:         return trustStoreManagers;
1:         KeyManagerFactory kmf =
1:             KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
1: 
1: 
1: 
1:         return keystoreManagers;
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:aaf0357
/////////////////////////////////////////////////////////////////////////
1: import java.security.SecureRandom;
/////////////////////////////////////////////////////////////////////////
1:     public void testFailoverSslConnectionWithKeyAndTrustManagers() throws Exception {
1:         String sslUri = "ssl://localhost:61611";
1:         broker = createSslBroker(sslUri);
1:         assertNotNull(broker);
1: 
0:         ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory("failover:(" + sslUri + ")?maxReconnectAttempts=4");
1:         cf.setKeyAndTrustManagers(getKeyManager(), getTrustManager(), new SecureRandom());
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         LOG.info("Created client connection");
1:         assertNotNull(connection);
1:         connection.start();
1:         connection.stop();
1: 
1:         brokerStop();
1:     }
1: 
commit:c4cdd51
/////////////////////////////////////////////////////////////////////////
1:         connection.start();
1:         connection.stop();
1:     	brokerStop();
1:     }
1:     public void testCreateFailoverTcpConnectionUsingKnownPort() throws Exception {
1:         // Control case: check that the factory can create an ordinary (non-ssl) connection.
1:         broker = createBroker("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1: 
1:         // This should create the connection.
0:         ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory("failover:(tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true)");
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertNotNull(connection);
1:         connection.start();
1:         connection.stop();
1:     	brokerStop();
/////////////////////////////////////////////////////////////////////////
1:         connection.start();
1:         connection.stop();
1:         brokerStop();
1:     }
1: 
1:     public void testFailoverSslConnection() throws Exception {
1:         // Create SSL/TLS connection with trusted cert from truststore.
0:     	String sslUri = "ssl://localhost:61611";
1:         broker = createSslBroker(sslUri);
1:         assertNotNull(broker);
1: 
1:         // This should create the connection.
0:         ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory("failover:(" + sslUri + ")?maxReconnectAttempts=4");
1:         cf.setTrustStore("server.keystore");
1:         cf.setTrustStorePassword("password");
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         LOG.info("Created client connection");
1:         assertNotNull(connection);
1:         connection.start();
1:         connection.stop();
/////////////////////////////////////////////////////////////////////////
1:         service.setUseJmx(false);
commit:57f5e7e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.FileInputStream;
1: import java.io.IOException;
0: import java.io.ObjectInputStream;
0: import java.io.ObjectOutputStream;
0: import java.net.URI;
0: import java.net.URISyntaxException;
1: import java.security.KeyStore;
1: 
0: import javax.jms.ExceptionListener;
0: import javax.jms.JMSException;
0: import javax.jms.Session;
1: import javax.net.ssl.KeyManager;
1: import javax.net.ssl.KeyManagerFactory;
1: import javax.net.ssl.TrustManager;
1: import javax.net.ssl.TrustManagerFactory;
1: 
0: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.SslBrokerService;
0: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.commons.logging.Log;
1: import org.apache.commons.logging.LogFactory;
1: 
1: public class ActiveMQSslConnectionFactoryTest extends CombinationTestSupport {
1:     private static final Log LOG = LogFactory.getLog(ActiveMQSslConnectionFactoryTest.class);
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
0:     private TransportConnector connector;
1:     private ActiveMQConnection connection;
1:     private BrokerService broker;
1: 
1:     protected void tearDown() throws Exception {
1:         // Try our best to close any previously opend connection.
1:         try {
1:             connection.close();
1:         } catch (Throwable ignore) {
1:         }
1:         // Try our best to stop any previously started broker.
1:         try {
1:             broker.stop();
1:         } catch (Throwable ignore) {
1:         }
1:     }
1: 
1:     public void testCreateTcpConnectionUsingKnownPort() throws Exception {
1:         // Control case: check that the factory can create an ordinary (non-ssl) connection.
1:         broker = createBroker("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1: 
1:         // This should create the connection.
0:         ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertNotNull(connection);
1: 
1: 	brokerStop();
1:     }
1: 
1:     public void testCreateSslConnection() throws Exception {
1:         // Create SSL/TLS connection with trusted cert from truststore.
0:     	String sslUri = "ssl://localhost:61611";
1:         broker = createSslBroker(sslUri);
1:         assertNotNull(broker);
1: 
1:         // This should create the connection.
0:         ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory(sslUri);
1:         cf.setTrustStore("server.keystore");
1:         cf.setTrustStorePassword("password");
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         LOG.info("Created client connection");
1:         assertNotNull(connection);
1: 
1:         brokerStop();
1:     }
1: 
1:     public void testNegativeCreateSslConnectionWithWrongPassword() throws Exception {
1:         // Create SSL/TLS connection with trusted cert from truststore.
0:     	String sslUri = "ssl://localhost:61611";
1:         broker = createSslBroker(sslUri);
1:         assertNotNull(broker);
1: 
1:         // This should FAIL to connect, due to wrong password.
0:         ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory(sslUri);
1:         cf.setTrustStore("server.keystore");
1:         cf.setTrustStorePassword("wrongPassword");
1:         try {
1:             connection = (ActiveMQConnection)cf.createConnection();
1:         }
1:         catch (javax.jms.JMSException ignore) {
0:         	// Expected exception
0:         	LOG.info("Expected java.io.Exception [" + ignore + "]");
1:         }
1:         assertNull(connection);
1: 
1:         brokerStop();
1:     }
1: 
1:     public void testNegativeCreateSslConnectionWithWrongCert() throws Exception {
1:         // Create SSL/TLS connection with trusted cert from truststore.
0:     	String sslUri = "ssl://localhost:61611";
1:         broker = createSslBroker(sslUri);
1:         assertNotNull(broker);
1: 
1:         // This should FAIL to connect, due to wrong password.
0:         ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory(sslUri);
1:         cf.setTrustStore("dummy.keystore");
1:         cf.setTrustStorePassword("password");
1:         try {
1:             connection = (ActiveMQConnection)cf.createConnection();
1:         }
1:         catch (javax.jms.JMSException ignore) {
0:         	// Expected exception
0:         	LOG.info("Expected SSLHandshakeException [" + ignore + "]");
1:         }
1:         assertNull(connection);
1: 
1:         brokerStop();
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         // Start up a broker with a tcp connector.
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(false);
0:         connector = service.addConnector(uri);
1:         service.start();
1: 
1:         return service;
1:     }
1: 
1:     protected BrokerService createSslBroker(String uri) throws Exception {
1:         
1:         // http://java.sun.com/javase/javaseforbusiness/docs/TLSReadme.html
1:         // work around: javax.net.ssl.SSLHandshakeException: renegotiation is not allowed
1:         //System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
1:         
1:         SslBrokerService service = new SslBrokerService();
1:         service.setPersistent(false);
1:         
1:         KeyManager[] km = getKeyManager();
1:         TrustManager[] tm = getTrustManager();
0:         connector = service.addSslConnector(uri, km, tm, null);
1:         service.start();
1:         
1:         return service;
1:     }
1: 
1:     protected void brokerStop() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     public static TrustManager[] getTrustManager() throws Exception {
1:         TrustManager[] trustStoreManagers = null;
1:         KeyStore trustedCertStore = KeyStore.getInstance(ActiveMQSslConnectionFactoryTest.KEYSTORE_TYPE);
1:         
1:         trustedCertStore.load(new FileInputStream(ActiveMQSslConnectionFactoryTest.TRUST_KEYSTORE), null);
0:         TrustManagerFactory tmf  = 
1:             TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
1:   
1:         tmf.init(trustedCertStore);
1:         trustStoreManagers = tmf.getTrustManagers();
0:         return trustStoreManagers; 
1:     }
1: 
1:     public static KeyManager[] getKeyManager() throws Exception {
0:         KeyManagerFactory kmf = 
0:             KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());  
1:         KeyStore ks = KeyStore.getInstance(ActiveMQSslConnectionFactoryTest.KEYSTORE_TYPE);
1:         KeyManager[] keystoreManagers = null;
1:         
1:         byte[] sslCert = loadClientCredential(ActiveMQSslConnectionFactoryTest.SERVER_KEYSTORE);
1:         
1:        
1:         if (sslCert != null && sslCert.length > 0) {
1:             ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
1:             ks.load(bin, ActiveMQSslConnectionFactoryTest.PASSWORD.toCharArray());
1:             kmf.init(ks, ActiveMQSslConnectionFactoryTest.PASSWORD.toCharArray());
1:             keystoreManagers = kmf.getKeyManagers();
1:         }
0:         return keystoreManagers;          
1:     }
1: 
1:     private static byte[] loadClientCredential(String fileName) throws IOException {
1:         if (fileName == null) {
1:             return null;
1:         }
1:         FileInputStream in = new FileInputStream(fileName);
1:         ByteArrayOutputStream out = new ByteArrayOutputStream();
1:         byte[] buf = new byte[512];
1:         int i = in.read(buf);
1:         while (i  > 0) {
1:             out.write(buf, 0, i);
1:             i = in.read(buf);
1:         }
1:         in.close();
1:         return out.toByteArray();
1:     }
1: 
1: }
============================================================================