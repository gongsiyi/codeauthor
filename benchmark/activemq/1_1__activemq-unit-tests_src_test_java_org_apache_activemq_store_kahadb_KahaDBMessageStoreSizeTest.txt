1:785b16b: /**
1:785b16b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:785b16b:  * contributor license agreements.  See the NOTICE file distributed with
1:785b16b:  * this work for additional information regarding copyright ownership.
1:785b16b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:785b16b:  * (the "License"); you may not use this file except in compliance with
1:785b16b:  * the License.  You may obtain a copy of the License at
1:785b16b:  *
1:785b16b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:785b16b:  *
1:785b16b:  * Unless required by applicable law or agreed to in writing, software
1:785b16b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:785b16b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:785b16b:  * See the License for the specific language governing permissions and
1:785b16b:  * limitations under the License.
1:785b16b:  */
1:785b16b: package org.apache.activemq.store.kahadb;
1:785b16b: 
1:246ccb8: import static org.junit.Assert.assertEquals;
1:246ccb8: 
1:785b16b: import java.io.File;
1:246ccb8: import java.io.IOException;
1:246ccb8: import java.util.Iterator;
1:246ccb8: import java.util.Map.Entry;
1:785b16b: 
1:785b16b: import org.apache.activemq.store.MessageStore;
1:246ccb8: import org.apache.activemq.store.kahadb.MessageDatabase.MessageKeys;
1:246ccb8: import org.apache.activemq.store.kahadb.MessageDatabase.StoredDestination;
1:246ccb8: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:246ccb8: import org.junit.Test;
1:785b16b: 
1:785b16b: /**
1:785b16b:  * This test is for AMQ-5748 to verify that {@link MessageStore} implements correctly
1:785b16b:  * compute the size of the messages in the KahaDB Store.
1:785b16b:  *
1:785b16b:  */
1:785b16b: public class KahaDBMessageStoreSizeTest extends AbstractKahaDBMessageStoreSizeTest {
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     protected void createStore(boolean deleteAllMessages, String directory) throws Exception {
1:785b16b:         KahaDBStore kahaDBStore = new KahaDBStore();
1:785b16b:         store = kahaDBStore;
1:785b16b:         kahaDBStore.setJournalMaxFileLength(1024 * 512);
1:785b16b:         kahaDBStore.setDeleteAllMessages(deleteAllMessages);
1:785b16b:         kahaDBStore.setDirectory(new File(directory));
1:785b16b:         kahaDBStore.start();
1:785b16b:         messageStore = store.createQueueMessageStore(destination);
1:785b16b:         messageStore.start();
1:785b16b:     }
1:785b16b: 
1:246ccb8:     /**
1:246ccb8:      * Make sure that the sizes stored in the KahaDB location index are the same as in
1:246ccb8:      * the message order index.
1:246ccb8:      *
1:246ccb8:      * @throws Exception
1:246ccb8:      */
1:246ccb8:     @Test
1:246ccb8:     public void testLocationIndexMatchesOrderIndex() throws Exception {
1:246ccb8:         final KahaDBStore kahaDbStore = (KahaDBStore) store;
1:246ccb8:         writeMessages();
1:246ccb8: 
1:246ccb8:         //Iterate over the order index and add up the size of the messages to compare
1:246ccb8:         //to the location index
1:246ccb8:         kahaDbStore.indexLock.readLock().lock();
1:246ccb8:         try {
1:246ccb8:             long size = kahaDbStore.pageFile.tx().execute(new Transaction.CallableClosure<Long, IOException>() {
1:246ccb8:                 @Override
1:246ccb8:                 public Long execute(Transaction tx) throws IOException {
1:246ccb8:                     long size = 0;
1:246ccb8: 
1:246ccb8:                     // Iterate through all index entries to get the size of each message
1:246ccb8:                     StoredDestination sd = kahaDbStore.getStoredDestination(kahaDbStore.convert(destination), tx);
1:246ccb8:                     for (Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx); iterator.hasNext();) {
1:246ccb8:                         size += iterator.next().getValue().location.getSize();
1:246ccb8:                     }
1:246ccb8:                    return size;
1:246ccb8:                 }
1:246ccb8:             });
1:246ccb8:             assertEquals("Order index size values don't match message size",
1:246ccb8:                     size, messageStore.getMessageSize());
1:246ccb8:         } finally {
1:246ccb8:             kahaDbStore.indexLock.readLock().unlock();
1:246ccb8:         }
1:246ccb8:     }
1:246ccb8: 
1:785b16b:     @Override
1:785b16b:     protected String getVersion5Dir() {
1:785b16b:         return "src/test/resources/org/apache/activemq/store/kahadb/MessageStoreTest/version5";
1:785b16b:     }
1:785b16b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:246ccb8
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.IOException;
1: import java.util.Iterator;
1: import java.util.Map.Entry;
1: import org.apache.activemq.store.kahadb.MessageDatabase.MessageKeys;
1: import org.apache.activemq.store.kahadb.MessageDatabase.StoredDestination;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Make sure that the sizes stored in the KahaDB location index are the same as in
1:      * the message order index.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testLocationIndexMatchesOrderIndex() throws Exception {
1:         final KahaDBStore kahaDbStore = (KahaDBStore) store;
1:         writeMessages();
1: 
1:         //Iterate over the order index and add up the size of the messages to compare
1:         //to the location index
1:         kahaDbStore.indexLock.readLock().lock();
1:         try {
1:             long size = kahaDbStore.pageFile.tx().execute(new Transaction.CallableClosure<Long, IOException>() {
1:                 @Override
1:                 public Long execute(Transaction tx) throws IOException {
1:                     long size = 0;
1: 
1:                     // Iterate through all index entries to get the size of each message
1:                     StoredDestination sd = kahaDbStore.getStoredDestination(kahaDbStore.convert(destination), tx);
1:                     for (Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx); iterator.hasNext();) {
1:                         size += iterator.next().getValue().location.getSize();
1:                     }
1:                    return size;
1:                 }
1:             });
1:             assertEquals("Order index size values don't match message size",
1:                     size, messageStore.getMessageSize());
1:         } finally {
1:             kahaDbStore.indexLock.readLock().unlock();
1:         }
1:     }
1: 
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.io.File;
1: 
1: import org.apache.activemq.store.MessageStore;
1: 
1: /**
1:  * This test is for AMQ-5748 to verify that {@link MessageStore} implements correctly
1:  * compute the size of the messages in the KahaDB Store.
1:  *
1:  */
1: public class KahaDBMessageStoreSizeTest extends AbstractKahaDBMessageStoreSizeTest {
1: 
1:     @Override
1:     protected void createStore(boolean deleteAllMessages, String directory) throws Exception {
1:         KahaDBStore kahaDBStore = new KahaDBStore();
1:         store = kahaDBStore;
1:         kahaDBStore.setJournalMaxFileLength(1024 * 512);
1:         kahaDBStore.setDeleteAllMessages(deleteAllMessages);
1:         kahaDBStore.setDirectory(new File(directory));
1:         kahaDBStore.start();
1:         messageStore = store.createQueueMessageStore(destination);
1:         messageStore.start();
1:     }
1: 
1:     @Override
1:     protected String getVersion5Dir() {
1:         return "src/test/resources/org/apache/activemq/store/kahadb/MessageStoreTest/version5";
1:     }
1: }
============================================================================