1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.xbean;
2:d29ca2a: 
1:74a7a8b: import java.beans.PropertyEditorManager;
1:74a7a8b: import java.net.URI;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:74a7a8b: import org.apache.xbean.spring.context.ResourceXmlApplicationContext;
1:74a7a8b: import org.apache.xbean.spring.context.impl.URIEditor;
1:d29ca2a: import org.springframework.beans.BeansException;
1:d29ca2a: import org.springframework.beans.factory.DisposableBean;
1:d29ca2a: import org.springframework.beans.factory.FactoryBean;
1:d29ca2a: import org.springframework.beans.factory.InitializingBean;
1:5fbf634: import org.springframework.context.ApplicationContext;
1:5fbf634: import org.springframework.context.ApplicationContextAware;
1:d29ca2a: import org.springframework.core.io.Resource;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A Spring {@link FactoryBean} which creates an embedded broker inside a Spring
1:d29ca2a:  * XML using an external <a href="http://gbean.org/Custom+XML">XBean Spring XML
1:d29ca2a:  * configuration file</a> which provides a much neater and more concise XML
1:d29ca2a:  * format.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:5fbf634: public class BrokerFactoryBean implements FactoryBean, InitializingBean, DisposableBean, ApplicationContextAware {
1:d29ca2a: 
1:d29ca2a:     static {
1:d29ca2a:         PropertyEditorManager.registerEditor(URI.class, URIEditor.class);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private Resource config;
1:d29ca2a:     private XBeanBrokerService broker;
1:230a86c:     private boolean start;
1:d29ca2a:     private ResourceXmlApplicationContext context;
1:5fbf634:     private ApplicationContext parentContext;
1:b4f65ba:     
1:b4f65ba:     private boolean systemExitOnShutdown;
1:b4f65ba:     private int systemExitOnShutdownExitCode;
1:d29ca2a: 
1:d29ca2a:     public BrokerFactoryBean() {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public BrokerFactoryBean(Resource config) {
1:d29ca2a:         this.config = config;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object getObject() throws Exception {
1:d29ca2a:         return broker;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Class getObjectType() {
1:d29ca2a:         return BrokerService.class;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isSingleton() {
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: 
1:5fbf634:     public void setApplicationContext(ApplicationContext parentContext) throws BeansException {
1:5fbf634:         this.parentContext = parentContext;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void afterPropertiesSet() throws Exception {
1:d29ca2a:         if (config == null) {
1:d29ca2a:             throw new IllegalArgumentException("config property must be set");
1:d29ca2a:         }
1:5fbf634:         context = new ResourceXmlApplicationContext(config, parentContext);
1:d29ca2a: 
1:d29ca2a:         try {
1:230a86c:             broker = (XBeanBrokerService)context.getBean("broker");
1:230a86c:         } catch (BeansException e) {
1:c53bb05:             // ignore...
1:230a86c:             // log.trace("No bean named broker available: " + e, e);
1:d29ca2a:         }
1:d29ca2a:         if (broker == null) {
1:d29ca2a:             // lets try find by type
1:d29ca2a:             String[] names = context.getBeanNamesForType(BrokerService.class);
1:d29ca2a:             for (int i = 0; i < names.length; i++) {
1:d29ca2a:                 String name = names[i];
1:230a86c:                 broker = (XBeanBrokerService)context.getBean(name);
1:d29ca2a:                 if (broker != null) {
1:d29ca2a:                     break;
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         if (broker == null) {
1:d29ca2a:             throw new IllegalArgumentException("The configuration has no BrokerService instance for resource: " + config);
1:d29ca2a:         }
1:b4f65ba:         
1:b4f65ba:         if( systemExitOnShutdown ) {
1:b4f65ba:             broker.addShutdownHook(new Runnable(){
1:b4f65ba:                 public void run() {
1:b4f65ba:                     System.exit(systemExitOnShutdownExitCode);
1:b4f65ba:                 }
1:b4f65ba:             });
1:b4f65ba:         }
1:d29ca2a:         if (start) {
1:d29ca2a:             broker.start();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void destroy() throws Exception {
1:d29ca2a:         if (context != null) {
1:d29ca2a:             context.close();
1:d29ca2a:         }
1:d29ca2a:         if (broker != null) {
1:d29ca2a:             broker.stop();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Resource getConfig() {
1:d29ca2a:         return config;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setConfig(Resource config) {
1:d29ca2a:         this.config = config;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public BrokerService getBroker() {
1:d29ca2a:         return broker;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isStart() {
1:d29ca2a:         return start;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setStart(boolean start) {
1:d29ca2a:         this.start = start;
1:d29ca2a:     }
1:d29ca2a: 
1:b4f65ba:     public boolean isSystemExitOnStop() {
1:b4f65ba:         return systemExitOnShutdown;
1:b4f65ba:     }
1:b4f65ba: 
1:b4f65ba:     public void setSystemExitOnStop(boolean systemExitOnStop) {
1:b4f65ba:         this.systemExitOnShutdown = systemExitOnStop;
1:b4f65ba:     }
1:b4f65ba: 
1:b4f65ba:     public boolean isSystemExitOnShutdown() {
1:b4f65ba:         return systemExitOnShutdown;
1:b4f65ba:     }
1:b4f65ba: 
1:b4f65ba:     public void setSystemExitOnShutdown(boolean systemExitOnShutdown) {
1:b4f65ba:         this.systemExitOnShutdown = systemExitOnShutdown;
1:b4f65ba:     }
1:b4f65ba: 
1:b4f65ba:     public int getSystemExitOnShutdownExitCode() {
1:b4f65ba:         return systemExitOnShutdownExitCode;
1:b4f65ba:     }
1:b4f65ba: 
1:b4f65ba:     public void setSystemExitOnShutdownExitCode(int systemExitOnShutdownExitCode) {
1:b4f65ba:         this.systemExitOnShutdownExitCode = systemExitOnShutdownExitCode;
1:b4f65ba:     }
1:b4f65ba: 
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:7c9fec6
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:b4f65ba
/////////////////////////////////////////////////////////////////////////
1:     
1:     private boolean systemExitOnShutdown;
1:     private int systemExitOnShutdownExitCode;
/////////////////////////////////////////////////////////////////////////
1:         
1:         if( systemExitOnShutdown ) {
1:             broker.addShutdownHook(new Runnable(){
1:                 public void run() {
1:                     System.exit(systemExitOnShutdownExitCode);
1:                 }
1:             });
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public boolean isSystemExitOnStop() {
1:         return systemExitOnShutdown;
1:     }
1: 
1:     public void setSystemExitOnStop(boolean systemExitOnStop) {
1:         this.systemExitOnShutdown = systemExitOnStop;
1:     }
1: 
1:     public boolean isSystemExitOnShutdown() {
1:         return systemExitOnShutdown;
1:     }
1: 
1:     public void setSystemExitOnShutdown(boolean systemExitOnShutdown) {
1:         this.systemExitOnShutdown = systemExitOnShutdown;
1:     }
1: 
1:     public int getSystemExitOnShutdownExitCode() {
1:         return systemExitOnShutdownExitCode;
1:     }
1: 
1:     public void setSystemExitOnShutdownExitCode(int systemExitOnShutdownExitCode) {
1:         this.systemExitOnShutdownExitCode = systemExitOnShutdownExitCode;
1:     }
1: 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.beans.PropertyEditorManager;
1: import java.net.URI;
1: 
1: import org.apache.xbean.spring.context.ResourceXmlApplicationContext;
1: import org.apache.xbean.spring.context.impl.URIEditor;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(BrokerFactoryBean.class);
/////////////////////////////////////////////////////////////////////////
1:     private boolean start;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             broker = (XBeanBrokerService)context.getBean("broker");
1:         } catch (BeansException e) {
1:             // log.trace("No bean named broker available: " + e, e);
1:                 broker = (XBeanBrokerService)context.getBean(name);
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:68d245f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.xbean.spring.context.ResourceXmlApplicationContext;
0: import org.apache.xbean.spring.context.impl.URIEditor;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.xbean;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.beans.BeansException;
1: import org.springframework.beans.factory.DisposableBean;
1: import org.springframework.beans.factory.FactoryBean;
1: import org.springframework.beans.factory.InitializingBean;
1: import org.springframework.core.io.Resource;
0: import org.xbean.spring.context.ResourceXmlApplicationContext;
0: import org.xbean.spring.context.impl.URIEditor;
1: 
0: import java.beans.PropertyEditorManager;
0: import java.net.URI;
1: 
1: /**
1:  * A Spring {@link FactoryBean} which creates an embedded broker inside a Spring
1:  * XML using an external <a href="http://gbean.org/Custom+XML">XBean Spring XML
1:  * configuration file</a> which provides a much neater and more concise XML
1:  * format.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class BrokerFactoryBean implements FactoryBean, InitializingBean, DisposableBean {
0:     private static final Log log = LogFactory.getLog(BrokerFactoryBean.class);
1: 
1:     static {
1:         PropertyEditorManager.registerEditor(URI.class, URIEditor.class);
1:     }
1: 
1:     private Resource config;
1:     private XBeanBrokerService broker;
0:     private boolean start = false;
1:     private ResourceXmlApplicationContext context;
1: 
1:     public BrokerFactoryBean() {
1:     }
1: 
1:     public BrokerFactoryBean(Resource config) {
1:         this.config = config;
1:     }
1: 
1:     public Object getObject() throws Exception {
1:         return broker;
1:     }
1: 
1:     public Class getObjectType() {
1:         return BrokerService.class;
1:     }
1: 
1:     public boolean isSingleton() {
1:         return true;
1:     }
1: 
1:     public void afterPropertiesSet() throws Exception {
1:         if (config == null) {
1:             throw new IllegalArgumentException("config property must be set");
1:         }
0:         context = new ResourceXmlApplicationContext(config);
1: 
1:         try {
0:             broker = (XBeanBrokerService) context.getBean("broker");
1:         }
0:         catch (BeansException e) {
0:             log.trace("No bean named broker available: " + e, e);
1:         }
1:         if (broker == null) {
1:             // lets try find by type
1:             String[] names = context.getBeanNamesForType(BrokerService.class);
1:             for (int i = 0; i < names.length; i++) {
1:                 String name = names[i];
0:                 broker = (XBeanBrokerService) context.getBean(name);
1:                 if (broker != null) {
1:                     break;
1:                 }
1:             }
1:         }
1:         if (broker == null) {
1:             throw new IllegalArgumentException("The configuration has no BrokerService instance for resource: " + config);
1:         }
1:         if (start) {
1:             broker.start();
1:         }
1:     }
1: 
1:     public void destroy() throws Exception {
1:         if (context != null) {
1:             context.close();
1:         }
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     public Resource getConfig() {
1:         return config;
1:     }
1: 
1:     public void setConfig(Resource config) {
1:         this.config = config;
1:     }
1: 
1:     public BrokerService getBroker() {
1:         return broker;
1:     }
1: 
1:     public boolean isStart() {
1:         return start;
1:     }
1: 
1:     public void setStart(boolean start) {
1:         this.start = start;
1:     }
1: 
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:35f15ac
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
author:James Strachan
-------------------------------------------------------------------------------
commit:5fbf634
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.context.ApplicationContext;
1: import org.springframework.context.ApplicationContextAware;
/////////////////////////////////////////////////////////////////////////
1: public class BrokerFactoryBean implements FactoryBean, InitializingBean, DisposableBean, ApplicationContextAware {
/////////////////////////////////////////////////////////////////////////
1:     private ApplicationContext parentContext;
/////////////////////////////////////////////////////////////////////////
1:     public void setApplicationContext(ApplicationContext parentContext) throws BeansException {
1:         this.parentContext = parentContext;
0:     }
0:     
1:         context = new ResourceXmlApplicationContext(config, parentContext);
/////////////////////////////////////////////////////////////////////////
0: 
commit:c53bb05
/////////////////////////////////////////////////////////////////////////
1:             // ignore...
0:             //log.trace("No bean named broker available: " + e, e);
============================================================================