1:3a3416c: /**
1:3a3416c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3a3416c:  * contributor license agreements.  See the NOTICE file distributed with
1:3a3416c:  * this work for additional information regarding copyright ownership.
1:3a3416c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3a3416c:  * (the "License"); you may not use this file except in compliance with
1:3a3416c:  * the License.  You may obtain a copy of the License at
1:3a3416c:  *
1:3a3416c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3a3416c:  *
1:3a3416c:  * Unless required by applicable law or agreed to in writing, software
1:3a3416c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3a3416c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a3416c:  * See the License for the specific language governing permissions and
1:3a3416c:  * limitations under the License.
1:3a3416c:  */
1:3a3416c: package org.apache.activemq.camel.component;
1:3a3416c: 
1:3a3416c: import org.apache.camel.Exchange;
1:3a3416c: import org.apache.camel.Processor;
1:3a3416c: import org.apache.camel.builder.RouteBuilder;
1:3a3416c: import org.apache.camel.component.jms.JmsMessage;
1:3a3416c: 
1:3a3416c: /**
1:3a3416c:  * 
1:3a3416c:  */
1:3a3416c: public class ActiveMQJmsHeaderRouteForceTest extends ActiveMQJmsHeaderRouteTest {
1:3a3416c: 
1:3a3416c:     protected RouteBuilder createRouteBuilder() throws Exception {
1:3a3416c:         return new RouteBuilder() {
1:3a3416c:             public void configure() throws Exception {
1:3a3416c:                 // do not map jms message as we want to tamper with the JMS message directly, and not use the Camel API for that
1:3a3416c:                 from("activemq:test.a?mapJmsMessage=false").process(new Processor() {
1:3a3416c:                     public void process(Exchange exchange) throws Exception {
1:3a3416c:                         // lets set the custom JMS headers using the JMS API
1:3a3416c:                         JmsMessage jmsMessage = assertIsInstanceOf(JmsMessage.class, exchange.getIn());
1:3a3416c: 
1:3a3416c:                         jmsMessage.getJmsMessage().setJMSReplyTo(replyQueue);
1:3a3416c:                         jmsMessage.getJmsMessage().setJMSCorrelationID(correlationID);
1:3a3416c:                         jmsMessage.getJmsMessage().setJMSType(messageType);                    }
1:3a3416c:                 // force sending the incoming JMS Message, as we want to tamper with the JMS API directly
1:3a3416c:                 // instead of using the Camel API for setting JMS headers.
1:3a3416c:                 }).to("activemq:test.b?preserveMessageQos=true&forceSendOriginalMessage=true");
1:3a3416c: 
1:3a3416c:                 from("activemq:test.b").to("mock:result");
1:3a3416c:             }
1:3a3416c:         };
1:3a3416c:     }
1:3a3416c: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3a3416c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
1: import org.apache.camel.Exchange;
1: import org.apache.camel.Processor;
1: import org.apache.camel.builder.RouteBuilder;
1: import org.apache.camel.component.jms.JmsMessage;
1: 
1: /**
1:  * 
1:  */
1: public class ActiveMQJmsHeaderRouteForceTest extends ActiveMQJmsHeaderRouteTest {
1: 
1:     protected RouteBuilder createRouteBuilder() throws Exception {
1:         return new RouteBuilder() {
1:             public void configure() throws Exception {
1:                 // do not map jms message as we want to tamper with the JMS message directly, and not use the Camel API for that
1:                 from("activemq:test.a?mapJmsMessage=false").process(new Processor() {
1:                     public void process(Exchange exchange) throws Exception {
1:                         // lets set the custom JMS headers using the JMS API
1:                         JmsMessage jmsMessage = assertIsInstanceOf(JmsMessage.class, exchange.getIn());
1: 
1:                         jmsMessage.getJmsMessage().setJMSReplyTo(replyQueue);
1:                         jmsMessage.getJmsMessage().setJMSCorrelationID(correlationID);
1:                         jmsMessage.getJmsMessage().setJMSType(messageType);                    }
1:                 // force sending the incoming JMS Message, as we want to tamper with the JMS API directly
1:                 // instead of using the Camel API for setting JMS headers.
1:                 }).to("activemq:test.b?preserveMessageQos=true&forceSendOriginalMessage=true");
1: 
1:                 from("activemq:test.b").to("mock:result");
1:             }
1:         };
1:     }
1: }
============================================================================