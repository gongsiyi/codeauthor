1:9287055: /**
1:9287055:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9287055:  * contributor license agreements.  See the NOTICE file distributed with
1:9287055:  * this work for additional information regarding copyright ownership.
1:9287055:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9287055:  * (the "License"); you may not use this file except in compliance with
1:9287055:  * the License.  You may obtain a copy of the License at
1:9287055:  *
1:9287055:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9287055:  *
1:9287055:  * Unless required by applicable law or agreed to in writing, software
1:9287055:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9287055:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9287055:  * See the License for the specific language governing permissions and
1:9287055:  * limitations under the License.
1:9287055:  */
1:9287055: package org.apache.activemq.bugs;
1:9287055: 
1:9287055: import static org.junit.Assert.assertNotNull;
1:9287055: 
1:9287055: import javax.jms.Connection;
1:9287055: import javax.jms.Message;
1:9287055: import javax.jms.MessageConsumer;
1:9287055: import javax.jms.MessageProducer;
1:9287055: import javax.jms.Queue;
1:9287055: import javax.jms.Session;
1:9287055: 
1:9287055: import org.apache.activemq.ActiveMQConnectionFactory;
1:9287055: import org.apache.activemq.broker.BrokerService;
1:9287055: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1:9287055: import org.junit.After;
1:9287055: import org.junit.Before;
1:9287055: import org.junit.Test;
1:9287055: 
1:9287055: public class AMQ6125Test {
1:9287055: 
1:9287055:     private BrokerService broker;
1:9287055: 
1:9287055:     @Before
1:9287055:     public void setUp() throws Exception {
1:9287055:         broker = new BrokerService();
1:9287055:         broker.setPersistent(false);
1:9287055:         broker.setUseJmx(false);
1:9287055:         broker.start();
1:9287055:         broker.waitUntilStarted();
1:9287055:     }
1:9287055: 
1:9287055:     @After
1:9287055:     public void tearDown() throws Exception {
1:9287055:         if (broker != null) {
1:9287055:             broker.stop();
1:9287055:             broker.waitUntilStopped();
1:9287055:         }
1:9287055:     }
1:9287055: 
1:9287055:     @Test
1:9287055:     public void testRollbackWithNoPolicy() throws Exception {
1:9287055:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:9287055:         cf.setRedeliveryPolicyMap(new RedeliveryPolicyMap());
1:9287055:         Connection connection = cf.createConnection();
1:9287055:         connection.start();
1:9287055: 
1:9287055:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:9287055:         Queue queue = session.createTemporaryQueue();
1:9287055:         MessageProducer producer = session.createProducer(queue);
1:9287055: 
1:9287055:         producer.send(session.createMessage());
1:9287055:         session.commit();
1:9287055: 
1:9287055:         MessageConsumer consumer = session.createConsumer(queue);
1:9287055:         Message message = consumer.receive(2000);
1:9287055: 
1:9287055:         assertNotNull(message);
1:9287055: 
1:9287055:         session.rollback();
1:9287055:     }
1:9287055: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9287055
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ6125Test {
1: 
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testRollbackWithNoPolicy() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         cf.setRedeliveryPolicyMap(new RedeliveryPolicyMap());
1:         Connection connection = cf.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Queue queue = session.createTemporaryQueue();
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         producer.send(session.createMessage());
1:         session.commit();
1: 
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message message = consumer.receive(2000);
1: 
1:         assertNotNull(message);
1: 
1:         session.rollback();
1:     }
1: }
============================================================================