1:0640cb7: /**
1:0640cb7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0640cb7:  * contributor license agreements.  See the NOTICE file distributed with
1:0640cb7:  * this work for additional information regarding copyright ownership.
1:0640cb7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0640cb7:  * (the "License"); you may not use this file except in compliance with
1:0640cb7:  * the License.  You may obtain a copy of the License at
1:0640cb7:  *
1:0640cb7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0640cb7:  *
1:0640cb7:  * Unless required by applicable law or agreed to in writing, software
1:0640cb7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0640cb7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0640cb7:  * See the License for the specific language governing permissions and
1:0640cb7:  * limitations under the License.
1:0640cb7:  */
1:0640cb7: package org.apache.activemq.load;
1:0640cb7: 
1:0640cb7: import javax.jms.Connection;
1:0640cb7: import javax.jms.ConnectionFactory;
1:0640cb7: import javax.jms.DeliveryMode;
1:0640cb7: import javax.jms.Destination;
1:0640cb7: import javax.jms.JMSException;
1:0640cb7: import javax.jms.Session;
1:0640cb7: import junit.framework.TestCase;
1:0640cb7: import org.apache.activemq.ActiveMQConnectionFactory;
1:0640cb7: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:0640cb7: 
1:0640cb7: /**
1:b0c2a40:  * 
1:0640cb7:  */
1:0640cb7: public class LoadTest extends TestCase {
1:0640cb7: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(LoadTest.class);
1:0640cb7:     
1:0640cb7:     protected BrokerService broker;
1:0640cb7:     protected String bindAddress="tcp://localhost:61616";
1:0640cb7:     
1:0640cb7:     protected LoadController controller;
1:0640cb7:     protected LoadClient[] clients;
1:0640cb7:     protected ConnectionFactory factory;
1:0640cb7:     protected Destination destination;
1:3d10acc:     protected int numberOfClients = 50;
1:0640cb7:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:0640cb7:     protected int batchSize = 1000;
1:3d10acc:     protected int numberOfBatches = 10;
1:0640cb7:     protected int timeout = Integer.MAX_VALUE;
1:3d10acc:     protected boolean connectionPerMessage = false;
1:0640cb7:     protected Connection managementConnection;
1:0640cb7:     protected Session managementSession;
1:0640cb7: 
1:0640cb7:     /**
1:0640cb7:      * Sets up a test where the producer and consumer have their own connection.
1:0640cb7:      * 
1:0640cb7:      * @see junit.framework.TestCase#setUp()
1:0640cb7:      */
1:0640cb7:     protected void setUp() throws Exception {
1:0640cb7:         if (broker == null) {
1:0640cb7:             broker = createBroker(bindAddress);
1:0640cb7:         }
1:0640cb7:         factory = createConnectionFactory(bindAddress);
1:0640cb7:         managementConnection = factory.createConnection();
1:0640cb7:         managementSession = managementConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0640cb7:         
1:0640cb7:         Destination startDestination = createDestination(managementSession, getClass()+".start");
1:0640cb7:         Destination endDestination = createDestination(managementSession, getClass()+".end");
1:3d10acc:         LOG.info("Running with " + numberOfClients + " clients - sending "
1:3d10acc:                 + numberOfBatches + " batches of " + batchSize + " messages");
1:3d10acc:         controller = new LoadController("Controller",factory);
1:0640cb7:         controller.setBatchSize(batchSize);
1:0640cb7:         controller.setNumberOfBatches(numberOfBatches);
1:0640cb7:         controller.setDeliveryMode(deliveryMode);
1:0640cb7:         controller.setConnectionPerMessage(connectionPerMessage);
1:0640cb7:         controller.setStartDestination(startDestination);
1:3d10acc:         controller.setNextDestination(endDestination);
1:0640cb7:         controller.setTimeout(timeout);
1:0640cb7:         clients = new LoadClient[numberOfClients];
1:0640cb7:         for (int i = 0; i < numberOfClients; i++) {
1:0640cb7:             Destination inDestination = null;
1:0640cb7:             if (i==0) {
1:0640cb7:                 inDestination = startDestination;
1:0640cb7:             }else {
1:0640cb7:                 inDestination = createDestination(managementSession, getClass() + ".client."+(i));
1:0640cb7:             }
1:0640cb7:             Destination outDestination = null;
1:0640cb7:             if (i==(numberOfClients-1)) {
1:0640cb7:                 outDestination = endDestination;
1:0640cb7:             }else {
1:0640cb7:                 outDestination = createDestination(managementSession, getClass() + ".client."+(i+1));
1:0640cb7:             }
1:0640cb7:             LoadClient client = new LoadClient("client("+i+")",factory);
1:0640cb7:             client.setTimeout(timeout);
1:0640cb7:             client.setDeliveryMode(deliveryMode);
1:0640cb7:             client.setConnectionPerMessage(connectionPerMessage);
1:0640cb7:             client.setStartDestination(inDestination);
1:0640cb7:             client.setNextDestination(outDestination);
1:0640cb7:             clients[i] = client;
1:0640cb7:         }
1:0640cb7:         
1:0640cb7:         super.setUp();
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:     protected void tearDown() throws Exception {
1:0640cb7:         super.tearDown();
1:0640cb7:         managementConnection.close();
1:0640cb7:         for (int i = 0; i < numberOfClients; i++) {
1:0640cb7:             clients[i].stop();
1:0640cb7:         }
2:0640cb7:         controller.stop();
1:0640cb7:         if (broker != null) {
1:0640cb7:             broker.stop();
1:0640cb7:             broker = null;
1:0640cb7:         }
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:     protected Destination createDestination(Session s, String destinationName) throws JMSException {
1:0640cb7:         return s.createQueue(destinationName);
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:     /**
1:0640cb7:      * Factory method to create a new broker
1:0640cb7:      * 
1:0640cb7:      * @throws Exception
1:0640cb7:      */
1:0640cb7:     protected BrokerService createBroker(String uri) throws Exception {
1:0640cb7:         BrokerService answer = new BrokerService();
1:0640cb7:         configureBroker(answer,uri);
1:0640cb7:         answer.start();
1:0640cb7:         return answer;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:     
1:0640cb7:     
1:0640cb7:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:0640cb7:         answer.setDeleteAllMessagesOnStartup(true);
1:0640cb7:         answer.addConnector(uri);
1:0640cb7:         answer.setUseShutdownHook(false);
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:0640cb7:         return new ActiveMQConnectionFactory(uri);
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:     public void testLoad() throws JMSException, InterruptedException {
1:0640cb7:         for (int i = 0; i < numberOfClients; i++) {
1:0640cb7:             clients[i].start();
1:0640cb7:         }
1:0640cb7:         controller.start();
1:3d10acc:         assertEquals((batchSize* numberOfBatches),controller.awaitTestComplete());
1:0640cb7:         
1:0640cb7:     }
1:0640cb7: 
1:0640cb7: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(LoadTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:3d10acc
/////////////////////////////////////////////////////////////////////////
1:     protected int numberOfClients = 50;
1:     protected int numberOfBatches = 10;
1:     protected boolean connectionPerMessage = false;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Running with " + numberOfClients + " clients - sending "
1:                 + numberOfBatches + " batches of " + batchSize + " messages");
1:         controller = new LoadController("Controller",factory);
1:         controller.setNextDestination(endDestination);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals((batchSize* numberOfBatches),controller.awaitTestComplete());
commit:0640cb7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.load;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class LoadTest extends TestCase {
1: 
0:     private static final Log LOG = LogFactory.getLog(LoadTest.class);
1:     
1:     protected BrokerService broker;
1:     protected String bindAddress="tcp://localhost:61616";
1:     
1:     protected LoadController controller;
1:     protected LoadClient[] clients;
1:     protected ConnectionFactory factory;
1:     protected Destination destination;
0:     protected int numberOfClients = 10;
1:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:     protected int batchSize = 1000;
0:     protected int numberOfBatches = 4;
1:     protected int timeout = Integer.MAX_VALUE;
0:     protected boolean connectionPerMessage = true;
1:     protected Connection managementConnection;
1:     protected Session managementSession;
1: 
1:     /**
1:      * Sets up a test where the producer and consumer have their own connection.
1:      * 
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker(bindAddress);
1:         }
1:         factory = createConnectionFactory(bindAddress);
1:         managementConnection = factory.createConnection();
1:         managementSession = managementConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         
1:         Destination startDestination = createDestination(managementSession, getClass()+".start");
1:         Destination endDestination = createDestination(managementSession, getClass()+".end");
0:         LOG.info("Running with " + numberOfClients + " clients");
0:         controller = new LoadController(factory);
1:         controller.setBatchSize(batchSize);
1:         controller.setNumberOfBatches(numberOfBatches);
1:         controller.setDeliveryMode(deliveryMode);
1:         controller.setConnectionPerMessage(connectionPerMessage);
1:         controller.setStartDestination(startDestination);
0:         controller.setControlDestination(endDestination);
1:         controller.setTimeout(timeout);
1:         clients = new LoadClient[numberOfClients];
1:         for (int i = 0; i < numberOfClients; i++) {
1:             Destination inDestination = null;
1:             if (i==0) {
1:                 inDestination = startDestination;
1:             }else {
1:                 inDestination = createDestination(managementSession, getClass() + ".client."+(i));
1:             }
1:             Destination outDestination = null;
1:             if (i==(numberOfClients-1)) {
1:                 outDestination = endDestination;
1:             }else {
1:                 outDestination = createDestination(managementSession, getClass() + ".client."+(i+1));
1:             }
1:             LoadClient client = new LoadClient("client("+i+")",factory);
1:             client.setTimeout(timeout);
1:             client.setDeliveryMode(deliveryMode);
1:             client.setConnectionPerMessage(connectionPerMessage);
1:             client.setStartDestination(inDestination);
1:             client.setNextDestination(outDestination);
1:             clients[i] = client;
1:         }
1:         
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         managementConnection.close();
1:         for (int i = 0; i < numberOfClients; i++) {
1:             clients[i].stop();
1:         }
1:         controller.stop();
1:         if (broker != null) {
1:             broker.stop();
1:             broker = null;
1:         }
1:     }
1: 
1:     protected Destination createDestination(Session s, String destinationName) throws JMSException {
1:         return s.createQueue(destinationName);
1:     }
1: 
1:     /**
1:      * Factory method to create a new broker
1:      * 
1:      * @throws Exception
1:      */
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         BrokerService answer = new BrokerService();
1:         configureBroker(answer,uri);
1:         answer.start();
1:         return answer;
1:     }
1: 
1:     
1:     
1:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.addConnector(uri);
1:         answer.setUseShutdownHook(false);
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:         return new ActiveMQConnectionFactory(uri);
1:     }
1: 
1:     public void testLoad() throws JMSException, InterruptedException {
1:         for (int i = 0; i < numberOfClients; i++) {
1:             clients[i].start();
1:         }
1:         controller.start();
1:         controller.stop();
1:         
1:     }
1: 
1: }
============================================================================