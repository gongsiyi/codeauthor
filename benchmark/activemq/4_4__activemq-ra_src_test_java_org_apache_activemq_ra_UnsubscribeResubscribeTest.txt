3:9cc9873: /**
1:9cc9873:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9cc9873:  * contributor license agreements.  See the NOTICE file distributed with
1:9cc9873:  * this work for additional information regarding copyright ownership.
1:9cc9873:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9cc9873:  * (the "License"); you may not use this file except in compliance with
1:9cc9873:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:9cc9873:  *      http://www.apache.org/licenses/LICENSE-2.0
2:9cc9873:  *
1:9cc9873:  * Unless required by applicable law or agreed to in writing, software
1:9cc9873:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9cc9873:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9cc9873:  * See the License for the specific language governing permissions and
1:9cc9873:  * limitations under the License.
3:9cc9873:  */
1:9cc9873: package org.apache.activemq.ra;
4:9cc9873: 
1:ba1bd26: import static org.junit.Assert.assertNotNull;
1:ba1bd26: 
1:9cc9873: import javax.jms.ConnectionFactory;
1:9cc9873: import javax.jms.JMSException;
1:9cc9873: import javax.jms.Message;
1:9cc9873: import javax.jms.MessageProducer;
1:9cc9873: import javax.jms.Session;
1:9cc9873: import javax.jms.Topic;
1:9cc9873: import javax.jms.TopicSubscriber;
1:9cc9873: import javax.resource.ResourceException;
1:9cc9873: import javax.transaction.xa.XAException;
1:9cc9873: 
1:9cc9873: import org.apache.activemq.ActiveMQConnectionFactory;
1:c9b208f: import org.junit.After;
1:ba1bd26: import org.junit.Before;
1:ba1bd26: import org.junit.Test;
1:9cc9873: 
1:ba1bd26: public class UnsubscribeResubscribeTest {
1:9cc9873: 
1:f75857f:     private static final String DEFAULT_HOST = "vm://localhost?broker.persistent=false";
1:9cc9873: 
1:9cc9873:     private ConnectionManagerAdapter connectionManager = new ConnectionManagerAdapter();
1:9cc9873:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:9cc9873:     private ConnectionFactory connectionFactory;
1:9cc9873:     private ManagedConnectionProxy connection;
1:9cc9873:     private ActiveMQManagedConnection managedConnection;
1:9cc9873: 
1:ba1bd26:     @Before
1:ba1bd26:     public void setUp() throws Exception {
1:9cc9873:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
1:9cc9873:         managedConnectionFactory.setServerUrl(DEFAULT_HOST);
1:9cc9873:         managedConnectionFactory.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:9cc9873:         managedConnectionFactory.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:9cc9873:         managedConnectionFactory.setClientid("clientId");
1:9cc9873:     }
1:9cc9873: 
1:c9b208f:     @After
1:c9b208f:     public void tearDown() throws Exception {
1:c9b208f:         if (connection != null) {
1:c9b208f:             connection.close();
1:c9b208f:         }
1:c9b208f:     }
1:c9b208f: 
1:9cc9873:     private void getConnection() throws ResourceException, JMSException {
1:9cc9873:         connectionFactory = (ConnectionFactory)managedConnectionFactory.createConnectionFactory(connectionManager);
1:9cc9873:         connection = (ManagedConnectionProxy)connectionFactory.createConnection();
1:9cc9873:         managedConnection = connection.getManagedConnection();
1:9cc9873:     }
1:9cc9873: 
1:ba1bd26:     @Test(timeout = 60000)
1:9cc9873:     public void testUnsubscribeResubscribe() throws ResourceException, JMSException, XAException {
1:9cc9873:         getConnection();
1:ba1bd26:         assertNotNull(managedConnection);
1:9cc9873:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9cc9873:         Topic topic = session.createTopic("topic");
1:9cc9873:         TopicSubscriber sub = session.createDurableSubscriber(topic, "sub");
1:9cc9873:         Message message = session.createTextMessage("text message");
1:9cc9873:         MessageProducer producer = session.createProducer(topic);
1:9cc9873:         producer.send(message);
1:9cc9873:         sub.close();
1:9cc9873:         session.unsubscribe("sub");
1:9cc9873:         sub = session.createDurableSubscriber(topic, "sub");
1:9cc9873:     }
1:9cc9873: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c9b208f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:     }
1: 
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.junit.Test;
1: public class UnsubscribeResubscribeTest {
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         assertNotNull(managedConnection);
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:f75857f
/////////////////////////////////////////////////////////////////////////
1:     private static final String DEFAULT_HOST = "vm://localhost?broker.persistent=false";
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:9cc9873
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.ra;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: import javax.resource.ResourceException;
1: import javax.transaction.xa.XAException;
1: 
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class UnsubscribeResubscribeTest extends TestCase {
1: 
0:     private static final String DEFAULT_HOST = "vm://localhost";
1: 
1:     private ConnectionManagerAdapter connectionManager = new ConnectionManagerAdapter();
1:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:     private ConnectionFactory connectionFactory;
1:     private ManagedConnectionProxy connection;
1:     private ActiveMQManagedConnection managedConnection;
1: 
1:     /**
0:      * @see junit.framework.TestCase#setUp()
1:      */
0:     protected void setUp() throws Exception {
1: 
1:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
1:         managedConnectionFactory.setServerUrl(DEFAULT_HOST);
1:         managedConnectionFactory.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:         managedConnectionFactory.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:         managedConnectionFactory.setClientid("clientId");
1: 
1:     }
1: 
1:     private void getConnection() throws ResourceException, JMSException {
1:         connectionFactory = (ConnectionFactory)managedConnectionFactory.createConnectionFactory(connectionManager);
1:         connection = (ManagedConnectionProxy)connectionFactory.createConnection();
1:         managedConnection = connection.getManagedConnection();
1:     }
1: 
1:     public void testUnsubscribeResubscribe() throws ResourceException, JMSException, XAException {
1:         getConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("topic");
1:         TopicSubscriber sub = session.createDurableSubscriber(topic, "sub");
1:         Message message = session.createTextMessage("text message");
1:         MessageProducer producer = session.createProducer(topic);
1:         producer.send(message);
1:         sub.close();
1:         session.unsubscribe("sub");
1:         sub = session.createDurableSubscriber(topic, "sub");
1:     }
1: 
1: }
============================================================================