1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.peer;
12:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Map;
1:74a7a8b: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:f812e34: 
1:74a7a8b: import org.apache.activemq.broker.BrokerFactoryHandler;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:d29ca2a: import org.apache.activemq.transport.TransportServer;
1:d29ca2a: import org.apache.activemq.transport.vm.VMTransportFactory;
1:d29ca2a: import org.apache.activemq.util.IOExceptionSupport;
1:d29ca2a: import org.apache.activemq.util.IdGenerator;
1:d29ca2a: import org.apache.activemq.util.IntrospectionSupport;
1:d29ca2a: import org.apache.activemq.util.URISupport;
1:d29ca2a: 
1:d29ca2a: public class PeerTransportFactory extends TransportFactory {
1:d29ca2a: 
1:9ef4259:     public static final ConcurrentMap BROKERS = new ConcurrentHashMap();
1:9ef4259:     public static final ConcurrentMap CONNECTORS = new ConcurrentHashMap();
1:9ef4259:     public static final ConcurrentMap SERVERS = new ConcurrentHashMap();
1:fc00993:     private static final IdGenerator ID_GENERATOR = new IdGenerator("peer-");
1:d29ca2a: 
1:9ef4259:     @Override
1:d29ca2a:     public Transport doConnect(URI location) throws Exception {
1:d29ca2a:         VMTransportFactory vmTransportFactory = createTransportFactory(location);
1:d29ca2a:         return vmTransportFactory.doConnect(location);
1:d29ca2a:     }
1:d29ca2a: 
1:9ef4259:     @Override
1:d29ca2a:     public Transport doCompositeConnect(URI location) throws Exception {
1:d29ca2a:         VMTransportFactory vmTransportFactory = createTransportFactory(location);
1:d29ca2a:         return vmTransportFactory.doCompositeConnect(location);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param location
1:d29ca2a:      * @return the converted URI
1:d29ca2a:      * @throws URISyntaxException
1:d29ca2a:      */
1:d29ca2a:     private VMTransportFactory createTransportFactory(URI location) throws IOException {
1:d29ca2a:         try {
1:d29ca2a:             String group = location.getHost();
1:d29ca2a:             String broker = URISupport.stripPrefix(location.getPath(), "/");
1:f812e34: 
1:f812e34:             if (group == null) {
1:d29ca2a:                 group = "default";
1:d29ca2a:             }
1:f812e34:             if (broker == null || broker.length() == 0) {
1:fc00993:                 broker = ID_GENERATOR.generateSanitizedId();
1:d29ca2a:             }
1:f812e34: 
1:784b93d:             final Map<String, String> brokerOptions = new HashMap<String, String>(URISupport.parseParameters(location));
1:f812e34:             if (!brokerOptions.containsKey("persistent")) {
1:d29ca2a:                 brokerOptions.put("persistent", "false");
1:d29ca2a:             }
1:f812e34: 
1:f812e34:             final URI finalLocation = new URI("vm://" + broker);
1:d29ca2a:             final String finalBroker = broker;
1:d29ca2a:             final String finalGroup = group;
1:d29ca2a:             VMTransportFactory rc = new VMTransportFactory() {
1:9ef4259:                 @Override
1:d29ca2a:                 public Transport doConnect(URI ignore) throws Exception {
1:d29ca2a:                     return super.doConnect(finalLocation);
1:d29ca2a:                 };
1:f812e34: 
1:9ef4259:                 @Override
1:d29ca2a:                 public Transport doCompositeConnect(URI ignore) throws Exception {
1:d29ca2a:                     return super.doCompositeConnect(finalLocation);
1:d29ca2a:                 };
1:d29ca2a:             };
1:f812e34:             rc.setBrokerFactoryHandler(new BrokerFactoryHandler() {
1:9ef4259:                 @Override
1:d29ca2a:                 public BrokerService createBroker(URI brokerURI) throws Exception {
1:d29ca2a:                     BrokerService service = new BrokerService();
1:d29ca2a:                     IntrospectionSupport.setProperties(service, brokerOptions);
1:d29ca2a:                     service.setBrokerName(finalBroker);
1:3b51a69:                     TransportConnector c = service.addConnector("tcp://0.0.0.0:0");
1:4a7e0b3:                     c.setDiscoveryUri(new URI("multicast://default?group=" + finalGroup));
1:4a7e0b3:                     service.addNetworkConnector("multicast://default?group=" + finalGroup);
1:d29ca2a:                     return service;
1:d29ca2a:                 }
1:d29ca2a:             });
1:d29ca2a:             return rc;
1:f812e34: 
1:d29ca2a:         } catch (URISyntaxException e) {
1:d29ca2a:             throw IOExceptionSupport.create(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:9ef4259:     @Override
1:5d99c99:     public TransportServer doBind(URI location) throws IOException {
1:d29ca2a:         throw new IOException("This protocol does not support being bound.");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     public static final ConcurrentMap BROKERS = new ConcurrentHashMap();
1:     public static final ConcurrentMap CONNECTORS = new ConcurrentHashMap();
1:     public static final ConcurrentMap SERVERS = new ConcurrentHashMap();
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
1:                 @Override
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:     public TransportServer doBind(URI location) throws IOException {
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:             final Map<String, String> brokerOptions = new HashMap<String, String>(URISupport.parseParamters(location));
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     public static final ConcurrentHashMap BROKERS = new ConcurrentHashMap();
0:     public static final ConcurrentHashMap CONNECTORS = new ConcurrentHashMap();
0:     public static final ConcurrentHashMap SERVERS = new ConcurrentHashMap();
1:     private static final IdGenerator ID_GENERATOR = new IdGenerator("peer-");
/////////////////////////////////////////////////////////////////////////
1:                 broker = ID_GENERATOR.generateSanitizedId();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import org.apache.activemq.broker.BrokerFactoryHandler;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (group == null) {
1:             if (broker == null || broker.length() == 0) {
1: 
1:             if (!brokerOptions.containsKey("persistent")) {
1: 
1:             final URI finalLocation = new URI("vm://" + broker);
1: 
1:             rc.setBrokerFactoryHandler(new BrokerFactoryHandler() {
0:                     c.setDiscoveryUri(new URI("multicast://" + finalGroup));
0:                     service.addNetworkConnector("multicast://" + finalGroup);
1: 
0:     public TransportServer doBind(String brokerId, URI location) throws IOException {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.peer;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.broker.BrokerFactory.BrokerFactoryHandler;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.vm.VMTransportFactory;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IdGenerator;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: public class PeerTransportFactory extends TransportFactory {
1: 
0:     final public static ConcurrentHashMap brokers = new ConcurrentHashMap();
1: 
0:     final public static ConcurrentHashMap connectors = new ConcurrentHashMap();
1: 
0:     final public static ConcurrentHashMap servers = new ConcurrentHashMap();
1:   
0:     private IdGenerator idGenerator = new IdGenerator("peer-");
1: 
1:     
1:     public Transport doConnect(URI location) throws Exception {
1:         VMTransportFactory vmTransportFactory = createTransportFactory(location);
1:         return vmTransportFactory.doConnect(location);
1:     }
1: 
1:     public Transport doCompositeConnect(URI location) throws Exception {
1:         VMTransportFactory vmTransportFactory = createTransportFactory(location);
1:         return vmTransportFactory.doCompositeConnect(location);
1:     }
1: 
1:     /**
1:      * @param location
1:      * @return the converted URI
1:      * @throws URISyntaxException
1:      */
1:     private VMTransportFactory createTransportFactory(URI location) throws IOException {
1:         try {
1:             String group = location.getHost();
1:             String broker = URISupport.stripPrefix(location.getPath(), "/");
1:             
0:             if( group == null ) {
1:                 group = "default";
1:             }
0:             if (broker == null || broker.length()==0){
0:                 broker = idGenerator.generateSanitizedId();
1:             }
1:             
0:             final Map brokerOptions = new HashMap(URISupport.parseParamters(location));
0:             if (!brokerOptions.containsKey("persistent")){
1:                 brokerOptions.put("persistent", "false");
1:             }
1:                         
0:             final URI finalLocation = new URI("vm://"+broker);
1:             final String finalBroker = broker;
1:             final String finalGroup = group;
1:             VMTransportFactory rc = new VMTransportFactory() {
1:                 public Transport doConnect(URI ignore) throws Exception {
1:                     return super.doConnect(finalLocation);
1:                 };
1:                 public Transport doCompositeConnect(URI ignore) throws Exception {
1:                     return super.doCompositeConnect(finalLocation);
1:                 };
1:             };
0:             rc.setBrokerFactoryHandler(new BrokerFactoryHandler(){
1:                 public BrokerService createBroker(URI brokerURI) throws Exception {
1:                     BrokerService service = new BrokerService();
1:                     IntrospectionSupport.setProperties(service, brokerOptions);
1:                     service.setBrokerName(finalBroker);
0:                     TransportConnector c = service.addConnector("tcp://localhost:0");
0:                     c.setDiscoveryUri(new URI("multicast://"+finalGroup));
0:                     service.addNetworkConnector("multicast://"+finalGroup);
1:                     return service;
1:                 }
1:             });
1:             return rc;
1:             
1:         } catch (URISyntaxException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1: 
0:     public TransportServer doBind(String brokerId,URI location) throws IOException {
1:         throw new IOException("This protocol does not support being bound.");
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:3b51a69
/////////////////////////////////////////////////////////////////////////
1:                     TransportConnector c = service.addConnector("tcp://0.0.0.0:0");
commit:4a7e0b3
/////////////////////////////////////////////////////////////////////////
1:                     c.setDiscoveryUri(new URI("multicast://default?group=" + finalGroup));
1:                     service.addNetworkConnector("multicast://default?group=" + finalGroup);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:784b93d
/////////////////////////////////////////////////////////////////////////
1:             final Map<String, String> brokerOptions = new HashMap<String, String>(URISupport.parseParameters(location));
author:James Strachan
-------------------------------------------------------------------------------
commit:a640190
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerFactoryHandler;
============================================================================