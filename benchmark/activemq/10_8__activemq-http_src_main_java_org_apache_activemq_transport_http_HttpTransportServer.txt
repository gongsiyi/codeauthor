2:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
4:5be5a62:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.transport.http;
1:e0b23f2: 
1:540dd5c: import java.net.InetSocketAddress;
1:540dd5c: import java.net.URI;
1:39da37d: import java.util.Map;
1:540dd5c: 
1:8abcfd1: import org.apache.activemq.command.BrokerInfo;
1:39da37d: import org.apache.activemq.transport.SocketConnectorFactory;
1:cb895f0: import org.apache.activemq.transport.WebTransportServerSupport;
1:8abcfd1: import org.apache.activemq.transport.util.TextWireFormat;
1:8abcfd1: import org.apache.activemq.transport.xstream.XStreamWireFormat;
1:1ccd7bd: import org.apache.activemq.util.ServiceStopper;
1:473b328: import org.eclipse.jetty.security.ConstraintSecurityHandler;
1:e8a06c4: import org.eclipse.jetty.server.Connector;
1:3f82625: import org.eclipse.jetty.server.Handler;
1:e8a06c4: import org.eclipse.jetty.server.Server;
1:29b4db5: import org.eclipse.jetty.server.handler.HandlerWrapper;
1:e778467: import org.eclipse.jetty.servlet.ServletContextHandler;
1:e0b23f2: import org.eclipse.jetty.servlet.ServletHolder;
1:e778467: 
1:cb895f0: public class HttpTransportServer extends WebTransportServerSupport {
1:46e67a1: 
1:40a7d3b:     private TextWireFormat wireFormat;
1:46e67a1:     private final HttpTransportFactory transportFactory;
1:3b4aadc: 
1:ee4c8ee:     public HttpTransportServer(URI uri, HttpTransportFactory factory) {
1:40a7d3b:         super(uri);
1:40a7d3b:         this.bindAddress = uri;
1:ee4c8ee:         this.transportFactory = factory;
1:39da37d:         socketConnectorFactory = new SocketConnectorFactory();
8:40a7d3b:     }
1:39da37d: 
1:46e67a1:     @Override
1:1ccd7bd:     public void setBrokerInfo(BrokerInfo brokerInfo) {
1:1ccd7bd:     }
1:1ccd7bd: 
1:1ccd7bd:     // Properties
1:1ccd7bd:     // -------------------------------------------------------------------------
1:1ccd7bd:     public TextWireFormat getWireFormat() {
1:1ccd7bd:         if (wireFormat == null) {
1:1ccd7bd:             wireFormat = createWireFormat();
1:1ccd7bd:         }
1:1ccd7bd:         return wireFormat;
1:1ccd7bd:     }
1:1ccd7bd: 
1:1ccd7bd:     public void setWireFormat(TextWireFormat wireFormat) {
1:1ccd7bd:         this.wireFormat = wireFormat;
1:1ccd7bd:     }
1:1ccd7bd: 
1:1ccd7bd:     // Implementation methods
1:1ccd7bd:     // -------------------------------------------------------------------------
1:1ccd7bd:     protected TextWireFormat createWireFormat() {
1:1ccd7bd:         return new XStreamWireFormat();
1:1ccd7bd:     }
1:1ccd7bd: 
1:1ccd7bd:     protected void setConnector(Connector connector) {
1:1ccd7bd:         this.connector = connector;
1:1ccd7bd:     }
1:540dd5c: 
1:46e67a1:     @Override
1:1ccd7bd:     protected void doStart() throws Exception {
1:3f82625:         createServer();
1:540dd5c:         if (connector == null) {
1:bc2e2d9:             connector = socketConnectorFactory.createConnector(server);
1:540dd5c:         }
1:540dd5c: 
1:46e67a1:         URI boundTo = bind();
1:cb895f0: 
1:e778467:         ServletContextHandler contextHandler =
1:473b328:             new ServletContextHandler(server, "/", ServletContextHandler.SECURITY);
1:1ccd7bd: 
1:e0b23f2:         ServletHolder holder = new ServletHolder();
1:e0b23f2:         holder.setServlet(new HttpTunnelServlet());
1:e0b23f2:         contextHandler.addServlet(holder, "/");
15:40a7d3b: 
1:540dd5c:         contextHandler.setAttribute("acceptListener", getAcceptListener());
1:540dd5c:         contextHandler.setAttribute("wireFormat", getWireFormat());
1:ee4c8ee:         contextHandler.setAttribute("transportFactory", transportFactory);
1:ee4c8ee:         contextHandler.setAttribute("transportOptions", transportOptions);
1:ef85089: 
1:473b328:         //AMQ-6182 - disabling trace by default
1:473b328:         configureTraceMethod((ConstraintSecurityHandler) contextHandler.getSecurityHandler(),
1:473b328:                 httpOptions.isEnableTrace());
1:473b328: 
1:3f82625:         addGzipHandler(contextHandler);
1:ef85089: 
1:40a7d3b:         server.start();
1:46e67a1: 
1:46e67a1:         // Update the Connect To URI with our actual location in case the configured port
1:46e67a1:         // was set to zero so that we report the actual port we are listening on.
1:46e67a1: 
1:46e67a1:         int port = boundTo.getPort();
1:3f82625:         int p2 = getConnectorLocalPort();
1:3f82625:         if (p2 != -1) {
1:3f82625:             port = p2;
1:46e67a1:         }
1:46e67a1: 
1:46e67a1:         setConnectURI(new URI(boundTo.getScheme(),
1:46e67a1:                               boundTo.getUserInfo(),
1:46e67a1:                               boundTo.getHost(),
1:46e67a1:                               port,
1:46e67a1:                               boundTo.getPath(),
1:46e67a1:                               boundTo.getQuery(),
1:46e67a1:                               boundTo.getFragment()));
1:40a7d3b:     }
1:40a7d3b: 
1:3f82625:     private int getConnectorLocalPort() throws Exception {
1:3f82625:         return (Integer)connector.getClass().getMethod("getLocalPort").invoke(connector);
1:3f82625:     }
1:80f46a8: 
1:3f82625:     private void addGzipHandler(ServletContextHandler contextHandler) throws Exception {
1:29b4db5:         HandlerWrapper handler = null;
1:80f46a8:         try {
1:29b4db5:             handler = (HandlerWrapper) forName("org.eclipse.jetty.servlets.gzip.GzipHandler").newInstance();
1:80f46a8:         } catch (Throwable t) {
1:29b4db5:             handler = (HandlerWrapper) forName("org.eclipse.jetty.server.handler.gzip.GzipHandler").newInstance();
1:80f46a8:         }
1:29b4db5:         contextHandler.insertHandler(handler);
1:3f82625:     }
1:3f82625: 
1:80f46a8:     private Class<?> forName(String name) throws ClassNotFoundException {
1:80f46a8:         Class<?> clazz = null;
1:80f46a8:         ClassLoader loader = Thread.currentThread().getContextClassLoader();
1:80f46a8:         if (loader != null) {
1:80f46a8:             try {
1:80f46a8:                 clazz = loader.loadClass(name);
1:80f46a8:             } catch (ClassNotFoundException e) {
1:80f46a8:                 // ignore
1:80f46a8:             }
1:80f46a8:         }
1:80f46a8:         if (clazz == null) {
1:80f46a8:             clazz = HttpTransportServer.class.getClassLoader().loadClass(name);
1:80f46a8:         }
1:80f46a8: 
1:80f46a8:         return clazz;
1:80f46a8:     }
1:80f46a8: 
1:46e67a1:     @Override
1:1ccd7bd:     protected void doStop(ServiceStopper stopper) throws Exception {
1:40a7d3b:         Server temp = server;
1:40a7d3b:         server = null;
1:40a7d3b:         if (temp != null) {
1:40a7d3b:             temp.stop();
1:3f82625:         }
1:40a7d3b:     }
1:40a7d3b: 
1:46e67a1:     @Override
1:540dd5c:     public InetSocketAddress getSocketAddress() {
1:72f1594:         return null;
1:72f1594:     }
1:72f1594: 
1:39da37d:     @Override
1:39da37d:     public void setTransportOption(Map<String, Object> transportOptions) {
1:39da37d:         socketConnectorFactory.setTransportOptions(transportOptions);
1:39da37d:         super.setTransportOption(transportOptions);
1:39da37d:     }
1:0fffe21: 
1:0fffe21:     @Override
1:0fffe21:     public boolean isSslServer() {
1:0fffe21:         return false;
1:0fffe21:     }
1:40a7d3b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:29b4db5
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.handler.HandlerWrapper;
/////////////////////////////////////////////////////////////////////////
1:         HandlerWrapper handler = null;
1:             handler = (HandlerWrapper) forName("org.eclipse.jetty.servlets.gzip.GzipHandler").newInstance();
1:             handler = (HandlerWrapper) forName("org.eclipse.jetty.server.handler.gzip.GzipHandler").newInstance();
1:         contextHandler.insertHandler(handler);
commit:80f46a8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:         Handler handler = null;
1:         try {
0:             handler = (Handler) forName("org.eclipse.jetty.server.handler.GzipHandler").newInstance();
1:         } catch (Throwable t) {
0:             handler = (Handler) forName("org.eclipse.jetty.servlets.gzip.GzipHandler").newInstance();
1:         }
1:     private Class<?> forName(String name) throws ClassNotFoundException {
1:         Class<?> clazz = null;
1:         ClassLoader loader = Thread.currentThread().getContextClassLoader();
1:         if (loader != null) {
1:             try {
1:                 clazz = loader.loadClass(name);
1:             } catch (ClassNotFoundException e) {
1:                 // ignore
1:             }
1:         }
1:         if (clazz == null) {
1:             clazz = HttpTransportServer.class.getClassLoader().loadClass(name);
1:         }
1: 
1:         return clazz;
1:     }
1: 
commit:473b328
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.security.ConstraintSecurityHandler;
/////////////////////////////////////////////////////////////////////////
1:             new ServletContextHandler(server, "/", ServletContextHandler.SECURITY);
/////////////////////////////////////////////////////////////////////////
1:         //AMQ-6182 - disabling trace by default
1:         configureTraceMethod((ConstraintSecurityHandler) contextHandler.getSecurityHandler(),
1:                 httpOptions.isEnableTrace());
1: 
commit:0f492f3
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.jetty.servlets.gzip.GzipHandler;
/////////////////////////////////////////////////////////////////////////
0:         Handler handler = new GzipHandler();
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:ffa396c
/////////////////////////////////////////////////////////////////////////
commit:3f82625
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.Handler;
/////////////////////////////////////////////////////////////////////////
1:         createServer();
/////////////////////////////////////////////////////////////////////////
1:         addGzipHandler(contextHandler);
/////////////////////////////////////////////////////////////////////////
1:         int p2 = getConnectorLocalPort();
1:         if (p2 != -1) {
1:             port = p2;
/////////////////////////////////////////////////////////////////////////
1:     private int getConnectorLocalPort() throws Exception {
1:         return (Integer)connector.getClass().getMethod("getLocalPort").invoke(connector);
1:     }
1:     private void addGzipHandler(ServletContextHandler contextHandler) throws Exception {
0:         Handler handler = null;
0:         try {
0:             handler = (Handler)Class.forName("org.eclipse.jetty.server.handler.GzipHandler", true, Handler.class.getClassLoader()).newInstance();
0:         } catch (Throwable t) {
0:             handler = (Handler)Class.forName("org.eclipse.jetty.servlets.gzip.GzipHandler", true, Handler.class.getClassLoader()).newInstance();
1:         }
0:         contextHandler.setHandler(handler);
1:     }
1: 
commit:bc2e2d9
/////////////////////////////////////////////////////////////////////////
1:             connector = socketConnectorFactory.createConnector(server);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:46e67a1
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     private static final Logger LOG = LoggerFactory.getLogger(HttpTransportServer.class);
1: 
1:     private final HttpTransportFactory transportFactory;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         URI boundTo = bind();
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Update the Connect To URI with our actual location in case the configured port
1:         // was set to zero so that we report the actual port we are listening on.
1: 
1:         int port = boundTo.getPort();
0:         if (connector.getLocalPort() != -1) {
0:             port = connector.getLocalPort();
1:         }
1: 
1:         setConnectURI(new URI(boundTo.getScheme(),
1:                               boundTo.getUserInfo(),
1:                               boundTo.getHost(),
1:                               port,
1:                               boundTo.getPath(),
1:                               boundTo.getQuery(),
1:                               boundTo.getFragment()));
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:0fffe21
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean isSslServer() {
1:         return false;
1:     }
commit:ef85089
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.jetty.server.handler.GzipHandler;
/////////////////////////////////////////////////////////////////////////
1: 
0:         GzipHandler gzipHandler = new GzipHandler();
0:         contextHandler.setHandler(gzipHandler);
1: 
commit:e778467
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.jetty.server.nio.SelectChannelConnector;
1: import org.eclipse.jetty.servlet.ServletContextHandler;
1: 
/////////////////////////////////////////////////////////////////////////
0:             connector = new SelectChannelConnector();
0:         server.addConnector(connector);
1:         ServletContextHandler contextHandler =
0:             new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY);
0:         contextHandler.addServlet(HttpTunnelServlet.class, "/");
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetSocketAddress;
1: import java.net.URI;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (connector == null) {
1:         }
0:         server.setConnectors(new Connector[] {
0:             connector
0:         });
0:         ContextHandler contextHandler = new ContextHandler();
0:         contextHandler.setContextPath("/");
0:         contextHandler.setServer(server);
0:         server.setHandler(contextHandler);
0:         SessionHandler sessionHandler = new SessionHandler();
0:         contextHandler.setHandler(sessionHandler);
1: 
0:         ServletHandler servletHandler = new ServletHandler();
0:         sessionHandler.setHandler(servletHandler);
0:         servletHandler.setServlets(new ServletHolder[] {
0:             holder
0:         });
0:         servletHandler.setServletMappings(new ServletMapping[] {
0:             mapping
0:         });
1:         contextHandler.setAttribute("acceptListener", getAcceptListener());
1:         contextHandler.setAttribute("wireFormat", getWireFormat());
/////////////////////////////////////////////////////////////////////////
1:     public InetSocketAddress getSocketAddress() {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:72f1594
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetSocketAddress;
/////////////////////////////////////////////////////////////////////////
0:     public InetSocketAddress getSocketAddress() {        
1:         return null;
1:     }
1: 
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.http;
1: import org.apache.activemq.command.BrokerInfo;
0: import org.apache.activemq.transport.TransportServerSupport;
1: import org.apache.activemq.transport.util.TextWireFormat;
1: import org.apache.activemq.transport.xstream.XStreamWireFormat;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:fa29678
/////////////////////////////////////////////////////////////////////////
commit:cb895f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.WebTransportServerSupport;
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
1: public class HttpTransportServer extends WebTransportServerSupport {
/////////////////////////////////////////////////////////////////////////
1: 
0:         URI bind = getBindLocation();
0:         bind();
/////////////////////////////////////////////////////////////////////////
0:         setConnectURI(new URI(bind.getScheme(), bind.getUserInfo(), host, connector.getLocalPort(), bind.getPath(), bind.getQuery(), bind.getFragment()));
commit:39da37d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.SocketConnectorFactory;
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     protected SocketConnectorFactory socketConnectorFactory;
1:         socketConnectorFactory = new SocketConnectorFactory();
/////////////////////////////////////////////////////////////////////////
0:             connector = socketConnectorFactory.createConnector();
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void setTransportOption(Map<String, Object> transportOptions) {
1:         socketConnectorFactory.setTransportOptions(transportOptions);
1:         super.setTransportOption(transportOptions);
1:     }
commit:e0b23f2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.servlet.ServletHolder;
1: 
0: import java.net.InetSocketAddress;
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1:         ServletHolder holder = new ServletHolder();
1:         holder.setServlet(new HttpTunnelServlet());
1:         contextHandler.addServlet(holder, "/");
commit:e8a06c4
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.Connector;
1: import org.eclipse.jetty.server.Server;
0: import org.eclipse.jetty.server.bio.SocketConnector;
0: import org.eclipse.jetty.server.handler.ContextHandler;
0: import org.eclipse.jetty.server.session.SessionHandler;
0: import org.eclipse.jetty.servlet.ServletHandler;
0: import org.eclipse.jetty.servlet.ServletHolder;
0: import org.eclipse.jetty.servlet.ServletMapping;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetSocketAddress;
0: import java.net.URI;
0: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:ee4c8ee
/////////////////////////////////////////////////////////////////////////
0:     private HttpTransportFactory transportFactory;
1:     public HttpTransportServer(URI uri, HttpTransportFactory factory) {
1:         this.transportFactory = factory;
/////////////////////////////////////////////////////////////////////////
1:         contextHandler.setAttribute("transportFactory", transportFactory);
1:         contextHandler.setAttribute("transportOptions", transportOptions);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:081b0e3
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:1ccd7bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
1:     public void setBrokerInfo(BrokerInfo brokerInfo) {
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1:     public TextWireFormat getWireFormat() {
1:         if (wireFormat == null) {
1:             wireFormat = createWireFormat();
1:         }
1:         return wireFormat;
1:     }
1: 
1:     public void setWireFormat(TextWireFormat wireFormat) {
1:         this.wireFormat = wireFormat;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1:     protected TextWireFormat createWireFormat() {
1:         return new XStreamWireFormat();
1:     }
1: 
1:     protected void setConnector(Connector connector) {
1:         this.connector = connector;
1:     }
1:     
1:     protected void doStart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     protected void doStop(ServiceStopper stopper) throws Exception {
/////////////////////////////////////////////////////////////////////////
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.transport.http;
1: 
0: import org.activemq.command.BrokerInfo;
0: import org.activemq.transport.TransportServerSupport;
0: import org.activemq.transport.util.TextWireFormat;
0: import org.activemq.transport.xstream.XStreamWireFormat;
0: import org.mortbay.jetty.Connector;
0: import org.mortbay.jetty.Server;
0: import org.mortbay.jetty.bio.SocketConnector;
0: import org.mortbay.jetty.handler.ContextHandler;
0: import org.mortbay.jetty.nio.SelectChannelConnector;
0: import org.mortbay.jetty.servlet.ServletHandler;
0: import org.mortbay.jetty.servlet.ServletHolder;
0: import org.mortbay.jetty.servlet.ServletMapping;
0: import org.mortbay.jetty.servlet.SessionHandler;
1: 
0: import java.net.URI;
1: 
1: /**
0:  * @version $Revision$
0:  */
0: public class HttpTransportServer extends TransportServerSupport {
0:     private URI bindAddress;
1:     private TextWireFormat wireFormat;
0:     private Server server;
0:     private Connector connector;
1: 
0:     public HttpTransportServer(URI uri) {
1:         super(uri);
1:         this.bindAddress = uri;
1:     }
1: 
0:     public void start() throws Exception {
0:         server = new Server();
0:         if (connector==null)
0:             connector = new SocketConnector();
0:         connector.setHost(bindAddress.getHost());
0:         connector.setPort(bindAddress.getPort());
0:         connector.setServer(server);
0:         server.setConnectors(new Connector[] { connector });
1: 
0:         ContextHandler context_handler = new ContextHandler();
0:         context_handler.setContextPath("/");
0:         context_handler.setServer(server);
0:         server.setHandler(context_handler);
1: 
0:         SessionHandler session_handler = new SessionHandler();
0:         context_handler.setHandler(session_handler);
1:         
0:         ServletHandler servlet_handler = new ServletHandler();
0:         session_handler.setHandler(servlet_handler);
1: 
0:         ServletHolder holder = new ServletHolder();
0:         holder.setName("httpTunnel");
0:         holder.setClassName(HttpTunnelServlet.class.getName());
0:         servlet_handler.setServlets(new ServletHolder[] { holder });
1: 
0:         ServletMapping mapping = new ServletMapping();
0:         mapping.setServletName("httpTunnel");
0:         mapping.setPathSpec("/*");
0:         servlet_handler.setServletMappings(new ServletMapping[] { mapping });
1: 
0:         context_handler.setAttribute("acceptListener", getAcceptListener());
0:         context_handler.setAttribute("wireFormat", getWireFormat());
1:         server.start();
1:     }
1: 
0:     public synchronized void stop() throws Exception {
1:         Server temp = server;
1:         server = null;
1:         if (temp != null) {
1:             temp.stop();
1:         }
1:     }
1: 
0:     // Properties
0:     // -------------------------------------------------------------------------
0:     public TextWireFormat getWireFormat() {
0:         if (wireFormat == null) {
0:             wireFormat = createWireFormat();
1:         }
0:         return wireFormat;
1:     }
1: 
0:     public void setWireFormat(TextWireFormat wireFormat) {
0:         this.wireFormat = wireFormat;
1:     }
1: 
0:     // Implementation methods
0:     // -------------------------------------------------------------------------
0:     protected TextWireFormat createWireFormat() {
0:         return new XStreamWireFormat();
1:     }
1: 
0:     protected void setConnector(Connector connector) {
0:         this.connector = connector;
1:     }
1: 
0:     public void setBrokerInfo(BrokerInfo brokerInfo) {
1:     }
1: }
============================================================================