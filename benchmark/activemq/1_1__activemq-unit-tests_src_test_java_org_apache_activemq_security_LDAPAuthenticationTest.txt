1:0b5231a: /**
1:0b5231a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0b5231a:  * contributor license agreements.  See the NOTICE file distributed with
1:0b5231a:  * this work for additional information regarding copyright ownership.
1:0b5231a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0b5231a:  * (the "License"); you may not use this file except in compliance with
1:0b5231a:  * the License.  You may obtain a copy of the License at
1:0b5231a:  *
1:0b5231a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0b5231a:  *
1:0b5231a:  * Unless required by applicable law or agreed to in writing, software
1:0b5231a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0b5231a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0b5231a:  * See the License for the specific language governing permissions and
1:0b5231a:  * limitations under the License.
1:0b5231a:  */
1:0b5231a: package org.apache.activemq.security;
1:0b5231a: import static org.junit.Assert.assertNotNull;
1:0b5231a: import static org.junit.Assert.fail;
1:0b5231a: 
1:0b5231a: import javax.jms.Connection;
1:0b5231a: import javax.jms.Destination;
1:0b5231a: import javax.jms.JMSException;
1:0b5231a: import javax.jms.Message;
1:0b5231a: import javax.jms.MessageConsumer;
1:0b5231a: import javax.jms.MessageProducer;
1:0b5231a: import javax.jms.Queue;
1:0b5231a: import javax.jms.Session;
1:0b5231a: 
1:0b5231a: import org.apache.activemq.ActiveMQConnectionFactory;
1:0b5231a: import org.apache.activemq.broker.BrokerFactory;
1:0b5231a: import org.apache.activemq.broker.BrokerService;
1:0b5231a: import org.apache.directory.server.annotations.CreateLdapServer;
1:0b5231a: import org.apache.directory.server.annotations.CreateTransport;
1:0b5231a: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1:0b5231a: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1:0b5231a: import org.apache.directory.server.core.integ.FrameworkRunner;
1:0b5231a: import org.apache.directory.server.ldap.LdapServer;
1:0b5231a: import org.junit.After;
1:0b5231a: import org.junit.Before;
1:0b5231a: import org.junit.Test;
1:0b5231a: import org.junit.runner.RunWith;
1:0b5231a: 
1:0b5231a: 
1:0b5231a: @RunWith( FrameworkRunner.class )
1:0b5231a: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP", port=1024)})
1:0b5231a: @ApplyLdifFiles(
1:0b5231a:    "org/apache/activemq/security/activemq.ldif"
1:0b5231a: )
1:0b5231a: public class LDAPAuthenticationTest extends AbstractLdapTestUnit {
1:0b5231a: 
1:0b5231a:     public BrokerService broker;
1:0b5231a: 
1:0b5231a:     public static LdapServer ldapServer;
1:0b5231a: 
1:0b5231a:     @Before
1:0b5231a:     public void setup() throws Exception {
1:0b5231a:         System.setProperty("ldapPort", String.valueOf(getLdapServer().getPort()));
1:0b5231a: 
1:0b5231a:         broker = BrokerFactory.createBroker("xbean:org/apache/activemq/security/activemq-ldap-auth.xml");
1:0b5231a:         broker.start();
1:0b5231a:         broker.waitUntilStarted();
1:0b5231a:     }
1:0b5231a: 
1:0b5231a:     @After
1:0b5231a:     public void shutdown() throws Exception {
1:0b5231a:         broker.stop();
1:0b5231a:         broker.waitUntilStopped();
1:0b5231a:     }
1:0b5231a: 
1:0b5231a:     @Test
1:0b5231a:     public void testWildcard() throws Exception {
1:0b5231a:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:0b5231a:         Connection conn = factory.createQueueConnection("*", "sunflower");
1:0b5231a:         try {
1:0b5231a:             conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0b5231a:         } catch (Exception e) {
1:0b5231a:             e.printStackTrace();
1:0b5231a:             return;
1:0b5231a:         }
1:0b5231a:         fail("Should have failed connecting");
1:0b5231a:     }
1:0b5231a: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:0b5231a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.directory.server.annotations.CreateLdapServer;
1: import org.apache.directory.server.annotations.CreateTransport;
1: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1: import org.apache.directory.server.core.integ.FrameworkRunner;
1: import org.apache.directory.server.ldap.LdapServer;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
1: 
1: @RunWith( FrameworkRunner.class )
1: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP", port=1024)})
1: @ApplyLdifFiles(
1:    "org/apache/activemq/security/activemq.ldif"
1: )
1: public class LDAPAuthenticationTest extends AbstractLdapTestUnit {
1: 
1:     public BrokerService broker;
1: 
1:     public static LdapServer ldapServer;
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         System.setProperty("ldapPort", String.valueOf(getLdapServer().getPort()));
1: 
1:         broker = BrokerFactory.createBroker("xbean:org/apache/activemq/security/activemq-ldap-auth.xml");
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void shutdown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testWildcard() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         Connection conn = factory.createQueueConnection("*", "sunflower");
1:         try {
1:             conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:             return;
1:         }
1:         fail("Should have failed connecting");
1:     }
1: }
============================================================================