1:e34ec0b: /**
1:e34ec0b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e34ec0b:  * contributor license agreements.  See the NOTICE file distributed with
1:e34ec0b:  * this work for additional information regarding copyright ownership.
1:e34ec0b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e34ec0b:  * (the "License"); you may not use this file except in compliance with
1:e34ec0b:  * the License.  You may obtain a copy of the License at
1:e34ec0b:  *
1:e34ec0b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e34ec0b:  *
1:e34ec0b:  * Unless required by applicable law or agreed to in writing, software
1:e34ec0b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e34ec0b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e34ec0b:  * See the License for the specific language governing permissions and
1:e34ec0b:  * limitations under the License.
1:e34ec0b:  */
1:e34ec0b: package org.apache.activemq.console.command;
1:e34ec0b: 
1:e34ec0b: import java.util.ArrayList;
1:e34ec0b: import java.util.Arrays;
1:e34ec0b: import java.util.Collection;
1:e34ec0b: import java.util.List;
1:e34ec0b: 
1:e34ec0b: import junit.framework.TestCase;
1:e34ec0b: 
1:e34ec0b: import org.apache.activemq.broker.BrokerService;
1:e34ec0b: import org.apache.activemq.console.CommandContext;
1:e34ec0b: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1:e34ec0b: import org.slf4j.Logger;
1:e34ec0b: import org.slf4j.LoggerFactory;
1:e34ec0b: import org.springframework.context.support.AbstractApplicationContext;
1:e34ec0b: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:e34ec0b: 
1:bebffd0: public class AMQ3411Test extends TestCase {
1:e34ec0b: 	@SuppressWarnings("unused")
1:e34ec0b: 	private static final Logger LOG = LoggerFactory
1:bebffd0: 			.getLogger(AMQ3411Test.class);
1:e34ec0b: 	private static final Collection<String> DEFAULT_OPTIONS = Arrays
1:e34ec0b: 			.asList(new String[] { "--amqurl", "tcp://localhost:61616", });
1:e34ec0b: 
1:e34ec0b: 	private static final Collection<String> DEFAULT_TOKENS = Arrays
1:e34ec0b: 			.asList(new String[] { "FOO.QUEUE" });
1:e34ec0b: 	protected AbstractApplicationContext context;
1:e34ec0b: 	protected static final String origPassword = "ABCDEFG";
1:e34ec0b: 
1:e34ec0b: 	protected void setUp() throws Exception {
1:e34ec0b: 		super.setUp();
1:e34ec0b: 
1:e34ec0b: 		context = createApplicationContext();
1:e34ec0b: 
1:e34ec0b: 	}
1:e34ec0b: 
1:e34ec0b: 	protected AbstractApplicationContext createApplicationContext() {
1:60646c9: 		return new ClassPathXmlApplicationContext("org/apache/activemq/console/command/activemq.xml");
1:e34ec0b: 	}
1:e34ec0b: 
1:e34ec0b: 	protected void tearDown() throws Exception {
1:e34ec0b: 		BrokerService broker = (BrokerService) context.getBean("localbroker");
1:e34ec0b: 		broker.stop();
1:e34ec0b: 		broker = (BrokerService) context.getBean("default");
1:e34ec0b: 		broker.stop();
1:e34ec0b: 		super.tearDown();
1:e34ec0b: 	}
1:e34ec0b: 
1:e34ec0b: 	public void testNoFactorySet() throws Exception {
1:e34ec0b: 		AmqBrowseCommand command = new AmqBrowseCommand();
1:e34ec0b: 		CommandContext context = new CommandContext();
1:e34ec0b: 
1:e34ec0b: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1:e34ec0b: 
1:e34ec0b: 		command.setCommandContext(context);
1:e34ec0b: 
1:e34ec0b: 		List<String> tokens = new ArrayList<String>();
1:e34ec0b: 		tokens.addAll(DEFAULT_OPTIONS);
1:e34ec0b: 		tokens.addAll(DEFAULT_TOKENS);
1:e34ec0b: 
1:e34ec0b: 		command.execute(tokens);
1:e34ec0b: 
1:e34ec0b: 		assertNotNull(command.getPasswordFactory());
1:e34ec0b: 		assertTrue(command.getPasswordFactory() instanceof DefaultPasswordFactory);
1:e34ec0b: 		assertNull(command.getPassword());
1:e34ec0b: 	}
1:e34ec0b: 
1:e34ec0b: 	public void testUsernamePasswordSet() throws Exception {
1:e34ec0b: 		AmqBrowseCommand command = new AmqBrowseCommand();
1:e34ec0b: 		CommandContext context = new CommandContext();
1:e34ec0b: 
1:e34ec0b: 		String username = "user";
1:e34ec0b: 		String password = "password";
1:e34ec0b: 
1:e34ec0b: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1:e34ec0b: 
1:e34ec0b: 		command.setCommandContext(context);
1:e34ec0b: 
1:e34ec0b: 		List<String> tokens = new ArrayList<String>();
1:e34ec0b: 		tokens.addAll(DEFAULT_OPTIONS);
1:e34ec0b: 		tokens.add("--password");
1:e34ec0b: 		tokens.add(password);
1:e34ec0b: 
1:e34ec0b: 		tokens.add("--user");
1:e34ec0b: 		tokens.add(username);
1:e34ec0b: 		tokens.addAll(DEFAULT_TOKENS);
1:e34ec0b: 
1:e34ec0b: 		command.execute(tokens);
1:e34ec0b: 
1:e34ec0b: 		assertNotNull(command.getPasswordFactory());
1:e34ec0b: 		assertTrue(command.getPasswordFactory() instanceof DefaultPasswordFactory);
1:e34ec0b: 		assertEquals(password, command.getPassword());
1:e34ec0b: 		assertEquals(username, command.getUsername());
1:e34ec0b: 	}
1:e34ec0b: 
1:e34ec0b: 	public void testFactorySet() throws Exception {
1:e34ec0b: 		AmqBrowseCommand command = new AmqBrowseCommand();
1:e34ec0b: 		CommandContext context = new CommandContext();
1:e34ec0b: 
1:e34ec0b: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1:e34ec0b: 
1:e34ec0b: 		command.setCommandContext(context);
1:e34ec0b: 
1:e34ec0b: 		List<String> tokens = new ArrayList<String>();
1:e34ec0b: 		tokens.addAll(DEFAULT_OPTIONS);
1:e34ec0b: 		tokens.add("--passwordFactory");
1:e34ec0b: 		tokens.add(LowercasingPasswordFactory.class.getCanonicalName());
1:e34ec0b: 		tokens.add("--password");
1:e34ec0b: 		tokens.add(origPassword);
1:e34ec0b: 		tokens.addAll(DEFAULT_TOKENS);
1:e34ec0b: 
1:e34ec0b: 		command.execute(tokens);
1:e34ec0b: 		assertNotNull(command.getPasswordFactory());
1:e34ec0b: 		assertTrue(command.getPasswordFactory() instanceof LowercasingPasswordFactory);
1:e34ec0b: 
1:e34ec0b: 		// validate that the factory is indeed being used for the password.
1:e34ec0b: 		assertEquals(origPassword.toLowerCase(), command.getPassword());
1:e34ec0b: 	}
1:e34ec0b: 
1:e34ec0b: 	public void testFactorySetWrong1() throws Exception {
1:e34ec0b: 		AmqBrowseCommand command = new AmqBrowseCommand();
1:e34ec0b: 		CommandContext context = new CommandContext();
1:e34ec0b: 
1:e34ec0b: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1:e34ec0b: 
1:e34ec0b: 		command.setCommandContext(context);
1:e34ec0b: 
1:e34ec0b: 		List<String> tokens = new ArrayList<String>();
1:e34ec0b: 		tokens.addAll(DEFAULT_OPTIONS);
1:e34ec0b: 		tokens.add("--passwordFactory");
1:e34ec0b: 		tokens
1:e34ec0b: 				.add("org.apache.activemq.console.command.TestAMQ3411.DoesntExistFactory");
1:e34ec0b: 		tokens.add("--password");
1:e34ec0b: 		tokens.add(origPassword);
1:e34ec0b: 
1:e34ec0b: 		tokens.addAll(DEFAULT_TOKENS);
1:e34ec0b: 
1:e34ec0b: 		try {
1:e34ec0b: 			command.execute(tokens);
1:e34ec0b: 		} catch (Throwable e) {
1:e34ec0b: 			Throwable cause = e;
1:e34ec0b: 			while (null != cause) {
1:e34ec0b: 				if (cause instanceof java.lang.ClassNotFoundException)
1:e34ec0b: 					return;
1:e34ec0b: 				cause = cause.getCause();
1:e34ec0b: 			}
1:e34ec0b: 			assertFalse(e.toString(), true);
1:e34ec0b: 		}
1:e34ec0b: 		assertFalse("No exception caught", true);
1:e34ec0b: 	}
1:e34ec0b: 
1:e34ec0b: 	public void testFactorySetWrong2() throws Exception {
1:e34ec0b: 		AmqBrowseCommand command = new AmqBrowseCommand();
1:e34ec0b: 		CommandContext context = new CommandContext();
1:e34ec0b: 
1:e34ec0b: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1:e34ec0b: 
1:e34ec0b: 		command.setCommandContext(context);
1:e34ec0b: 
1:e34ec0b: 		List<String> tokens = new ArrayList<String>();
1:e34ec0b: 		tokens.addAll(DEFAULT_OPTIONS);
1:e34ec0b: 		tokens.add("--passwordFactory");
1:e34ec0b: 		tokens.add("java.lang.Object");
1:e34ec0b: 		tokens.add("--password");
1:e34ec0b: 		tokens.add(origPassword);
1:e34ec0b: 		tokens.addAll(DEFAULT_TOKENS);
1:e34ec0b: 
1:e34ec0b: 		try {
1:e34ec0b: 			command.execute(tokens);
1:e34ec0b: 		} catch (Throwable e) {
1:e34ec0b: 			Throwable cause = e;
1:e34ec0b: 			while (null != cause) {
1:e34ec0b: 				if (cause instanceof java.lang.ClassCastException)
1:e34ec0b: 					return;
1:e34ec0b: 				cause = cause.getCause();
1:e34ec0b: 			}
1:e34ec0b: 			assertFalse(e.toString(), true);
1:e34ec0b: 		}
1:e34ec0b: 		assertFalse("No exception caught", true);
1:e34ec0b: 	}
1:e34ec0b: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:bebffd0
/////////////////////////////////////////////////////////////////////////
1: public class AMQ3411Test extends TestCase {
1: 			.getLogger(AMQ3411Test.class);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1: 		return new ClassPathXmlApplicationContext("org/apache/activemq/console/command/activemq.xml");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e34ec0b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.console.CommandContext;
1: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.context.support.AbstractApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
0: public class TestAMQ3411 extends TestCase {
1: 	@SuppressWarnings("unused")
1: 	private static final Logger LOG = LoggerFactory
0: 			.getLogger(TestPurgeCommand.class);
1: 	private static final Collection<String> DEFAULT_OPTIONS = Arrays
1: 			.asList(new String[] { "--amqurl", "tcp://localhost:61616", });
1: 
1: 	private static final Collection<String> DEFAULT_TOKENS = Arrays
1: 			.asList(new String[] { "FOO.QUEUE" });
1: 	protected AbstractApplicationContext context;
1: 	protected static final String origPassword = "ABCDEFG";
1: 
1: 	protected void setUp() throws Exception {
1: 		super.setUp();
1: 
1: 		context = createApplicationContext();
1: 
1: 	}
1: 
1: 	protected AbstractApplicationContext createApplicationContext() {
0: 		return new ClassPathXmlApplicationContext("activemq.xml");
1: 	}
1: 
1: 	protected void tearDown() throws Exception {
1: 		BrokerService broker = (BrokerService) context.getBean("localbroker");
1: 		broker.stop();
1: 		broker = (BrokerService) context.getBean("default");
1: 		broker.stop();
1: 		super.tearDown();
1: 	}
1: 
1: 	public void testNoFactorySet() throws Exception {
1: 		AmqBrowseCommand command = new AmqBrowseCommand();
1: 		CommandContext context = new CommandContext();
1: 
1: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
1: 		command.setCommandContext(context);
1: 
1: 		List<String> tokens = new ArrayList<String>();
1: 		tokens.addAll(DEFAULT_OPTIONS);
1: 		tokens.addAll(DEFAULT_TOKENS);
1: 
1: 		command.execute(tokens);
1: 
1: 		assertNotNull(command.getPasswordFactory());
1: 		assertTrue(command.getPasswordFactory() instanceof DefaultPasswordFactory);
1: 		assertNull(command.getPassword());
1: 	}
1: 
1: 	public void testUsernamePasswordSet() throws Exception {
1: 		AmqBrowseCommand command = new AmqBrowseCommand();
1: 		CommandContext context = new CommandContext();
1: 
1: 		String username = "user";
1: 		String password = "password";
1: 
1: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
1: 		command.setCommandContext(context);
1: 
1: 		List<String> tokens = new ArrayList<String>();
1: 		tokens.addAll(DEFAULT_OPTIONS);
1: 		tokens.add("--password");
1: 		tokens.add(password);
1: 
1: 		tokens.add("--user");
1: 		tokens.add(username);
1: 		tokens.addAll(DEFAULT_TOKENS);
1: 
1: 		command.execute(tokens);
1: 
1: 		assertNotNull(command.getPasswordFactory());
1: 		assertTrue(command.getPasswordFactory() instanceof DefaultPasswordFactory);
1: 		assertEquals(password, command.getPassword());
1: 		assertEquals(username, command.getUsername());
1: 	}
1: 
1: 	public void testFactorySet() throws Exception {
1: 		AmqBrowseCommand command = new AmqBrowseCommand();
1: 		CommandContext context = new CommandContext();
1: 
1: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
1: 		command.setCommandContext(context);
1: 
1: 		List<String> tokens = new ArrayList<String>();
1: 		tokens.addAll(DEFAULT_OPTIONS);
1: 		tokens.add("--passwordFactory");
1: 		tokens.add(LowercasingPasswordFactory.class.getCanonicalName());
1: 		tokens.add("--password");
1: 		tokens.add(origPassword);
1: 		tokens.addAll(DEFAULT_TOKENS);
1: 
1: 		command.execute(tokens);
1: 		assertNotNull(command.getPasswordFactory());
1: 		assertTrue(command.getPasswordFactory() instanceof LowercasingPasswordFactory);
1: 
1: 		// validate that the factory is indeed being used for the password.
1: 		assertEquals(origPassword.toLowerCase(), command.getPassword());
1: 	}
1: 
1: 	public void testFactorySetWrong1() throws Exception {
1: 		AmqBrowseCommand command = new AmqBrowseCommand();
1: 		CommandContext context = new CommandContext();
1: 
1: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
1: 		command.setCommandContext(context);
1: 
1: 		List<String> tokens = new ArrayList<String>();
1: 		tokens.addAll(DEFAULT_OPTIONS);
1: 		tokens.add("--passwordFactory");
1: 		tokens
1: 				.add("org.apache.activemq.console.command.TestAMQ3411.DoesntExistFactory");
1: 		tokens.add("--password");
1: 		tokens.add(origPassword);
1: 
1: 		tokens.addAll(DEFAULT_TOKENS);
1: 
1: 		try {
1: 			command.execute(tokens);
1: 		} catch (Throwable e) {
1: 			Throwable cause = e;
1: 			while (null != cause) {
1: 				if (cause instanceof java.lang.ClassNotFoundException)
1: 					return;
1: 				cause = cause.getCause();
1: 			}
1: 			assertFalse(e.toString(), true);
1: 		}
1: 		assertFalse("No exception caught", true);
1: 	}
1: 
1: 	public void testFactorySetWrong2() throws Exception {
1: 		AmqBrowseCommand command = new AmqBrowseCommand();
1: 		CommandContext context = new CommandContext();
1: 
1: 		context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
1: 		command.setCommandContext(context);
1: 
1: 		List<String> tokens = new ArrayList<String>();
1: 		tokens.addAll(DEFAULT_OPTIONS);
1: 		tokens.add("--passwordFactory");
1: 		tokens.add("java.lang.Object");
1: 		tokens.add("--password");
1: 		tokens.add(origPassword);
1: 		tokens.addAll(DEFAULT_TOKENS);
1: 
1: 		try {
1: 			command.execute(tokens);
1: 		} catch (Throwable e) {
1: 			Throwable cause = e;
1: 			while (null != cause) {
1: 				if (cause instanceof java.lang.ClassCastException)
1: 					return;
1: 				cause = cause.getCause();
1: 			}
1: 			assertFalse(e.toString(), true);
1: 		}
1: 		assertFalse("No exception caught", true);
1: 	}
1: }
============================================================================