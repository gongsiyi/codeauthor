1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.management;
2:d29ca2a: 
1:d29ca2a: import java.util.List;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.ActiveMQMessageConsumer;
1:d29ca2a: import org.apache.activemq.ActiveMQMessageProducer;
1:d29ca2a: import org.apache.activemq.util.IndentPrinter;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Statistics for a JMS session
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class JMSSessionStatsImpl extends StatsImpl {
1:d29ca2a:     private List producers;
1:d29ca2a:     private List consumers;
1:d29ca2a:     private CountStatisticImpl messageCount;
1:d29ca2a:     private CountStatisticImpl pendingMessageCount;
1:d29ca2a:     private CountStatisticImpl expiredMessageCount;
1:d29ca2a:     private TimeStatisticImpl messageWaitTime;
1:d29ca2a:     private CountStatisticImpl durableSubscriptionCount;
1:d29ca2a: 
1:d29ca2a:     private TimeStatisticImpl messageRateTime;
1:d29ca2a: 
1:d29ca2a:     public JMSSessionStatsImpl(List producers, List consumers) {
1:d29ca2a:         this.producers = producers;
1:d29ca2a:         this.consumers = consumers;
1:d29ca2a:         this.messageCount = new CountStatisticImpl("messageCount", "Number of messages exchanged");
1:d29ca2a:         this.pendingMessageCount = new CountStatisticImpl("pendingMessageCount", "Number of pending messages");
1:d29ca2a:         this.expiredMessageCount = new CountStatisticImpl("expiredMessageCount", "Number of expired messages");
1:933eb2f:         this.messageWaitTime = new TimeStatisticImpl("messageWaitTime",
1:933eb2f:                                                      "Time spent by a message before being delivered");
1:933eb2f:         this.durableSubscriptionCount = new CountStatisticImpl("durableSubscriptionCount",
1:933eb2f:                                                                "The number of durable subscriptions");
1:933eb2f:         this.messageWaitTime = new TimeStatisticImpl("messageWaitTime",
1:933eb2f:                                                      "Time spent by a message before being delivered");
1:933eb2f:         this.messageRateTime = new TimeStatisticImpl("messageRateTime",
1:933eb2f:                                                      "Time taken to process a message (thoughtput rate)");
1:d29ca2a: 
1:d29ca2a:         // lets add named stats
1:d29ca2a:         addStatistic("messageCount", messageCount);
1:d29ca2a:         addStatistic("pendingMessageCount", pendingMessageCount);
1:d29ca2a:         addStatistic("expiredMessageCount", expiredMessageCount);
1:d29ca2a:         addStatistic("messageWaitTime", messageWaitTime);
1:d29ca2a:         addStatistic("durableSubscriptionCount", durableSubscriptionCount);
1:d29ca2a:         addStatistic("messageRateTime", messageRateTime);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public JMSProducerStatsImpl[] getProducers() {
1:d29ca2a:         // lets make a snapshot before we process them
1:d29ca2a:         Object[] producerArray = producers.toArray();
1:d29ca2a:         int size = producerArray.length;
1:d29ca2a:         JMSProducerStatsImpl[] answer = new JMSProducerStatsImpl[size];
1:d29ca2a:         for (int i = 0; i < size; i++) {
1:74a7a8b:             ActiveMQMessageProducer producer = (ActiveMQMessageProducer)producerArray[i];
1:d29ca2a:             answer[i] = producer.getProducerStats();
1:d29ca2a:         }
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public JMSConsumerStatsImpl[] getConsumers() {
1:d29ca2a:         // lets make a snapshot before we process them
1:d29ca2a:         Object[] consumerArray = consumers.toArray();
1:d29ca2a:         int size = consumerArray.length;
1:d29ca2a:         JMSConsumerStatsImpl[] answer = new JMSConsumerStatsImpl[size];
1:d29ca2a:         for (int i = 0; i < size; i++) {
1:74a7a8b:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)consumerArray[i];
1:d29ca2a:             answer[i] = consumer.getConsumerStats();
1:d29ca2a:         }
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:74a7a8b: 
1:d29ca2a:     public void reset() {
1:d29ca2a:         super.reset();
1:d29ca2a:         JMSConsumerStatsImpl[] cstats = getConsumers();
1:933eb2f:         int size = cstats.length;
1:933eb2f:         for (int i = 0; i < size; i++) {
1:d29ca2a:             cstats[i].reset();
1:d29ca2a:         }
1:d29ca2a:         JMSProducerStatsImpl[] pstats = getProducers();
1:933eb2f:         size = pstats.length;
1:933eb2f:         for (int i = 0; i < size; i++) {
1:d29ca2a:             pstats[i].reset();
1:d29ca2a:         }
1:d29ca2a:     }
1:74a7a8b: 
1:526cb5b:     /**
1:526cb5b:      * @param enabled the enabled to set
1:526cb5b:      */
1:74a7a8b:     public void setEnabled(boolean enabled) {
1:526cb5b:         super.setEnabled(enabled);
1:526cb5b:         JMSConsumerStatsImpl[] cstats = getConsumers();
1:933eb2f:         int size = cstats.length;
1:933eb2f:         for (int i = 0; i < size; i++) {
1:526cb5b:             cstats[i].setEnabled(enabled);
1:526cb5b:         }
1:526cb5b:         JMSProducerStatsImpl[] pstats = getProducers();
1:933eb2f:         size = pstats.length;
1:933eb2f:         for (int i = 0; i < size; i++) {
1:526cb5b:             pstats[i].setEnabled(enabled);
1:526cb5b:         }
1:74a7a8b: 
1:526cb5b:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getMessageCount() {
1:d29ca2a:         return messageCount;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getPendingMessageCount() {
1:d29ca2a:         return pendingMessageCount;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getExpiredMessageCount() {
1:d29ca2a:         return expiredMessageCount;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TimeStatisticImpl getMessageWaitTime() {
1:d29ca2a:         return messageWaitTime;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getDurableSubscriptionCount() {
1:d29ca2a:         return durableSubscriptionCount;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TimeStatisticImpl getMessageRateTime() {
1:d29ca2a:         return messageRateTime;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String toString() {
1:d29ca2a:         StringBuffer buffer = new StringBuffer(" ");
1:d29ca2a:         buffer.append(messageCount);
1:d29ca2a:         buffer.append(" ");
1:d29ca2a:         buffer.append(messageRateTime);
1:d29ca2a:         buffer.append(" ");
1:d29ca2a:         buffer.append(pendingMessageCount);
1:d29ca2a:         buffer.append(" ");
1:d29ca2a:         buffer.append(expiredMessageCount);
1:d29ca2a:         buffer.append(" ");
1:d29ca2a:         buffer.append(messageWaitTime);
1:d29ca2a:         buffer.append(" ");
1:d29ca2a:         buffer.append(durableSubscriptionCount);
1:d29ca2a: 
1:d29ca2a:         buffer.append(" producers{ ");
1:d29ca2a:         JMSProducerStatsImpl[] producerArray = getProducers();
1:d29ca2a:         for (int i = 0; i < producerArray.length; i++) {
1:d29ca2a:             if (i > 0) {
1:d29ca2a:                 buffer.append(", ");
1:d29ca2a:             }
1:d29ca2a:             buffer.append(Integer.toString(i));
1:d29ca2a:             buffer.append(" = ");
1:d29ca2a:             buffer.append(producerArray[i]);
1:d29ca2a:         }
1:d29ca2a:         buffer.append(" } consumers{ ");
1:d29ca2a:         JMSConsumerStatsImpl[] consumerArray = getConsumers();
1:d29ca2a:         for (int i = 0; i < consumerArray.length; i++) {
1:d29ca2a:             if (i > 0) {
1:d29ca2a:                 buffer.append(", ");
1:d29ca2a:             }
1:d29ca2a:             buffer.append(Integer.toString(i));
1:d29ca2a:             buffer.append(" = ");
1:d29ca2a:             buffer.append(consumerArray[i]);
1:d29ca2a:         }
1:d29ca2a:         buffer.append(" }");
1:d29ca2a:         return buffer.toString();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void dump(IndentPrinter out) {
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(messageCount);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(messageRateTime);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(pendingMessageCount);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(expiredMessageCount);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(messageWaitTime);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(durableSubscriptionCount);
1:d29ca2a:         out.println();
1:d29ca2a: 
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println("producers {");
1:d29ca2a:         out.incrementIndent();
1:d29ca2a:         JMSProducerStatsImpl[] producerArray = getProducers();
1:d29ca2a:         for (int i = 0; i < producerArray.length; i++) {
1:74a7a8b:             JMSProducerStatsImpl producer = (JMSProducerStatsImpl)producerArray[i];
1:d29ca2a:             producer.dump(out);
1:d29ca2a:         }
1:d29ca2a:         out.decrementIndent();
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println("}");
1:d29ca2a: 
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println("consumers {");
1:d29ca2a:         out.incrementIndent();
1:d29ca2a:         JMSConsumerStatsImpl[] consumerArray = getConsumers();
1:d29ca2a:         for (int i = 0; i < consumerArray.length; i++) {
1:74a7a8b:             JMSConsumerStatsImpl consumer = (JMSConsumerStatsImpl)consumerArray[i];
1:d29ca2a:             consumer.dump(out);
1:d29ca2a:         }
1:d29ca2a:         out.decrementIndent();
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println("}");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void onCreateDurableSubscriber() {
1:d29ca2a:         durableSubscriptionCount.increment();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void onRemoveDurableSubscriber() {
1:d29ca2a:         durableSubscriptionCount.decrement();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         this.messageWaitTime = new TimeStatisticImpl("messageWaitTime",
1:                                                      "Time spent by a message before being delivered");
1:         this.durableSubscriptionCount = new CountStatisticImpl("durableSubscriptionCount",
1:                                                                "The number of durable subscriptions");
1:         this.messageWaitTime = new TimeStatisticImpl("messageWaitTime",
1:                                                      "Time spent by a message before being delivered");
1:         this.messageRateTime = new TimeStatisticImpl("messageRateTime",
1:                                                      "Time taken to process a message (thoughtput rate)");
/////////////////////////////////////////////////////////////////////////
1:         int size = cstats.length;
1:         for (int i = 0; i < size; i++) {
1:         size = pstats.length;
1:         for (int i = 0; i < size; i++) {
/////////////////////////////////////////////////////////////////////////
1:         int size = cstats.length;
1:         for (int i = 0; i < size; i++) {
1:         size = pstats.length;
1:         for (int i = 0; i < size; i++) {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessageProducer producer = (ActiveMQMessageProducer)producerArray[i];
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)consumerArray[i];
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setEnabled(boolean enabled) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             JMSProducerStatsImpl producer = (JMSProducerStatsImpl)producerArray[i];
/////////////////////////////////////////////////////////////////////////
1:             JMSConsumerStatsImpl consumer = (JMSConsumerStatsImpl)consumerArray[i];
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.management;
1: 
1: import java.util.List;
0: import javax.management.j2ee.statistics.*;
1: 
1: import org.apache.activemq.ActiveMQMessageConsumer;
1: import org.apache.activemq.ActiveMQMessageProducer;
1: import org.apache.activemq.util.IndentPrinter;
1: 
1: /**
1:  * Statistics for a JMS session
1:  * 
0:  * @version $Revision: 1.2 $
1:  */
1: public class JMSSessionStatsImpl extends StatsImpl {
1:     private List producers;
1:     private List consumers;
1:     private CountStatisticImpl messageCount;
1:     private CountStatisticImpl pendingMessageCount;
1:     private CountStatisticImpl expiredMessageCount;
1:     private TimeStatisticImpl messageWaitTime;
1:     private CountStatisticImpl durableSubscriptionCount;
1: 
1:     private TimeStatisticImpl messageRateTime;
1: 
1:     public JMSSessionStatsImpl(List producers, List consumers) {
1:         this.producers = producers;
1:         this.consumers = consumers;
1:         this.messageCount = new CountStatisticImpl("messageCount", "Number of messages exchanged");
1:         this.pendingMessageCount = new CountStatisticImpl("pendingMessageCount", "Number of pending messages");
1:         this.expiredMessageCount = new CountStatisticImpl("expiredMessageCount", "Number of expired messages");
0:         this.messageWaitTime = new TimeStatisticImpl("messageWaitTime", "Time spent by a message before being delivered");
0:         this.durableSubscriptionCount = new CountStatisticImpl("durableSubscriptionCount", "The number of durable subscriptions");
0:         this.messageWaitTime = new TimeStatisticImpl("messageWaitTime", "Time spent by a message before being delivered");
0:         this.messageRateTime = new TimeStatisticImpl("messageRateTime", "Time taken to process a message (thoughtput rate)");
1: 
1:         // lets add named stats
1:         addStatistic("messageCount", messageCount);
1:         addStatistic("pendingMessageCount", pendingMessageCount);
1:         addStatistic("expiredMessageCount", expiredMessageCount);
1:         addStatistic("messageWaitTime", messageWaitTime);
1:         addStatistic("durableSubscriptionCount", durableSubscriptionCount);
1:         addStatistic("messageRateTime", messageRateTime);
1:     }
1: 
1:     public JMSProducerStatsImpl[] getProducers() {
1:         // lets make a snapshot before we process them
1:         Object[] producerArray = producers.toArray();
1:         int size = producerArray.length;
1:         JMSProducerStatsImpl[] answer = new JMSProducerStatsImpl[size];
1:         for (int i = 0; i < size; i++) {
0:             ActiveMQMessageProducer producer = (ActiveMQMessageProducer) producerArray[i];
1:             answer[i] = producer.getProducerStats();
1:         }
1:         return answer;
1:     }
1: 
1:     public JMSConsumerStatsImpl[] getConsumers() {
1:         // lets make a snapshot before we process them
1:         Object[] consumerArray = consumers.toArray();
1:         int size = consumerArray.length;
1:         JMSConsumerStatsImpl[] answer = new JMSConsumerStatsImpl[size];
1:         for (int i = 0; i < size; i++) {
0:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) consumerArray[i];
1:             answer[i] = consumer.getConsumerStats();
1:         }
1:         return answer;
1:     }
1:     
1:     public void reset() {
1:         super.reset();
1:         JMSConsumerStatsImpl[] cstats = getConsumers();
0:         for (int i = 0, size = cstats.length; i < size; i++) {
1:             cstats[i].reset();
1:         }
1:         JMSProducerStatsImpl[] pstats = getProducers();
0:         for (int i = 0, size = pstats.length; i < size; i++) {
1:             pstats[i].reset();
1:         }
1:     }
1: 
1:     public CountStatisticImpl getMessageCount() {
1:         return messageCount;
1:     }
1: 
1:     public CountStatisticImpl getPendingMessageCount() {
1:         return pendingMessageCount;
1:     }
1: 
1:     public CountStatisticImpl getExpiredMessageCount() {
1:         return expiredMessageCount;
1:     }
1: 
1:     public TimeStatisticImpl getMessageWaitTime() {
1:         return messageWaitTime;
1:     }
1: 
1:     public CountStatisticImpl getDurableSubscriptionCount() {
1:         return durableSubscriptionCount;
1:     }
1: 
1:     public TimeStatisticImpl getMessageRateTime() {
1:         return messageRateTime;
1:     }
1: 
1:     public String toString() {
1:         StringBuffer buffer = new StringBuffer(" ");
1:         buffer.append(messageCount);
1:         buffer.append(" ");
1:         buffer.append(messageRateTime);
1:         buffer.append(" ");
1:         buffer.append(pendingMessageCount);
1:         buffer.append(" ");
1:         buffer.append(expiredMessageCount);
1:         buffer.append(" ");
1:         buffer.append(messageWaitTime);
1:         buffer.append(" ");
1:         buffer.append(durableSubscriptionCount);
1: 
1:         buffer.append(" producers{ ");
1:         JMSProducerStatsImpl[] producerArray = getProducers();
1:         for (int i = 0; i < producerArray.length; i++) {
1:             if (i > 0) {
1:                 buffer.append(", ");
1:             }
1:             buffer.append(Integer.toString(i));
1:             buffer.append(" = ");
1:             buffer.append(producerArray[i]);
1:         }
1:         buffer.append(" } consumers{ ");
1:         JMSConsumerStatsImpl[] consumerArray = getConsumers();
1:         for (int i = 0; i < consumerArray.length; i++) {
1:             if (i > 0) {
1:                 buffer.append(", ");
1:             }
1:             buffer.append(Integer.toString(i));
1:             buffer.append(" = ");
1:             buffer.append(consumerArray[i]);
1:         }
1:         buffer.append(" }");
1:         return buffer.toString();
1:     }
1: 
1:     public void dump(IndentPrinter out) {
1:         out.printIndent();
1:         out.println(messageCount);
1:         out.printIndent();
1:         out.println(messageRateTime);
1:         out.printIndent();
1:         out.println(pendingMessageCount);
1:         out.printIndent();
1:         out.println(expiredMessageCount);
1:         out.printIndent();
1:         out.println(messageWaitTime);
1:         out.printIndent();
1:         out.println(durableSubscriptionCount);
1:         out.println();
1: 
1:         out.printIndent();
1:         out.println("producers {");
1:         out.incrementIndent();
1:         JMSProducerStatsImpl[] producerArray = getProducers();
1:         for (int i = 0; i < producerArray.length; i++) {
0:             JMSProducerStatsImpl producer = (JMSProducerStatsImpl) producerArray[i];
1:             producer.dump(out);
1:         }
1:         out.decrementIndent();
1:         out.printIndent();
1:         out.println("}");
1: 
1:         out.printIndent();
1:         out.println("consumers {");
1:         out.incrementIndent();
1:         JMSConsumerStatsImpl[] consumerArray = getConsumers();
1:         for (int i = 0; i < consumerArray.length; i++) {
0:             JMSConsumerStatsImpl consumer = (JMSConsumerStatsImpl) consumerArray[i];
1:             consumer.dump(out);
1:         }
1:         out.decrementIndent();
1:         out.printIndent();
1:         out.println("}");
1:     }
1: 
1:     public void onCreateDurableSubscriber() {
1:         durableSubscriptionCount.increment();
1:     }
1: 
1:     public void onRemoveDurableSubscriber() {
1:         durableSubscriptionCount.decrement();
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:526cb5b
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @param enabled the enabled to set
1:      */
0:     public void setEnabled(boolean enabled){
1:         super.setEnabled(enabled);
1:         JMSConsumerStatsImpl[] cstats = getConsumers();
0:         for (int i = 0, size = cstats.length; i < size; i++) {
1:             cstats[i].setEnabled(enabled);
1:         }
1:         JMSProducerStatsImpl[] pstats = getProducers();
0:         for (int i = 0, size = pstats.length; i < size; i++) {
1:             pstats[i].setEnabled(enabled);
1:         }
0:         
1:     }
============================================================================