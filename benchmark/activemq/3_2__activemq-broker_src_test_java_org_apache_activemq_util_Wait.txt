1:ca242f4: /**
1:ca242f4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ca242f4:  * contributor license agreements.  See the NOTICE file distributed with
1:ca242f4:  * this work for additional information regarding copyright ownership.
1:ca242f4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ca242f4:  * (the "License"); you may not use this file except in compliance with
1:ca242f4:  * the License.  You may obtain a copy of the License at
1:ca242f4:  *
1:ca242f4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ca242f4:  *
1:ca242f4:  * Unless required by applicable law or agreed to in writing, software
1:ca242f4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ca242f4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ca242f4:  * See the License for the specific language governing permissions and
1:ca242f4:  * limitations under the License.
1:ca242f4:  */
4:ca242f4: 
1:ca242f4: package org.apache.activemq.util;
1:ca242f4: 
1:ca242f4: 
1:f135b7a: import java.util.concurrent.TimeUnit;
1:f135b7a: 
1:ca242f4: public class Wait {
1:94937e8: 
1:ca242f4:     public static final long MAX_WAIT_MILLIS = 30*1000;
1:94937e8:     public static final long SLEEP_MILLIS = 1000;
1:94937e8: 
1:ca242f4:     public interface Condition {
1:ca242f4:         boolean isSatisified() throws Exception;
3:ca242f4:     }
1:ca242f4: 
1:ca242f4:     public static boolean waitFor(Condition condition) throws Exception {
1:ca242f4:         return waitFor(condition, MAX_WAIT_MILLIS);
1:ca242f4:     }
1:f135b7a: 
1:ca242f4:     public static boolean waitFor(final Condition condition, final long duration) throws Exception {
1:edf5f64:         return waitFor(condition, duration, SLEEP_MILLIS);
1:f135b7a:     }
1:f135b7a: 
1:94937e8:     public static boolean waitFor(final Condition condition, final long duration, final long sleepMillis) throws Exception {
1:f135b7a: 
1:ca242f4:         final long expiry = System.currentTimeMillis() + duration;
1:763e331:         boolean conditionSatisified = condition.isSatisified();
1:763e331:         while (!conditionSatisified && System.currentTimeMillis() < expiry) {
1:f135b7a:             TimeUnit.MILLISECONDS.sleep(sleepMillis);
1:763e331:             conditionSatisified = condition.isSatisified();
1:94937e8:         }
1:763e331:         return conditionSatisified;
1:94937e8:     }
1:ca242f4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:94937e8
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static final long SLEEP_MILLIS = 1000;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static boolean waitFor(final Condition condition, final long duration, final long sleepMillis) throws Exception {
1:         }
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
author:Gary Tully
-------------------------------------------------------------------------------
commit:edf5f64
/////////////////////////////////////////////////////////////////////////
1:         return waitFor(condition, duration, SLEEP_MILLIS);
commit:f135b7a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: 
0:     public static final int SLEEP_MILLIS = 1000;
/////////////////////////////////////////////////////////////////////////
1: 
0:         return waitFor(condition, MAX_WAIT_MILLIS, SLEEP_MILLIS);
1:     }
1: 
0:     public static boolean waitFor(final Condition condition, final long duration, final int sleepMillis) throws Exception {
1: 
1:             TimeUnit.MILLISECONDS.sleep(sleepMillis);
commit:763e331
/////////////////////////////////////////////////////////////////////////
1:         boolean conditionSatisified = condition.isSatisified();
1:         while (!conditionSatisified && System.currentTimeMillis() < expiry) {
1:             conditionSatisified = condition.isSatisified();
1:         return conditionSatisified;
commit:ca242f4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.util;
1: 
1: 
1: public class Wait {
1:     
1:     public static final long MAX_WAIT_MILLIS = 30*1000;
1:     
1:     public interface Condition {
1:         boolean isSatisified() throws Exception;
1:     }
1: 
1:     public static boolean waitFor(Condition condition) throws Exception {
1:         return waitFor(condition, MAX_WAIT_MILLIS);
1:     }
1:     
1:     public static boolean waitFor(final Condition condition, final long duration) throws Exception {
1:         final long expiry = System.currentTimeMillis() + duration;
0:         while (!condition.isSatisified() && System.currentTimeMillis() < expiry) {
0:             Thread.sleep(1000);
1:         }   
0:         return condition.isSatisified();
1:     }  
1: }
============================================================================