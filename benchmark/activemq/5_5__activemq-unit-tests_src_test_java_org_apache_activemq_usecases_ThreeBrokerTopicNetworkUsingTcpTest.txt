1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
2:a677c21: 
1:74a7a8b: import java.net.URI;
1:74a7a8b: import java.util.ArrayList;
1:74a7a8b: import java.util.List;
1:74a7a8b: 
1:a677c21: import org.apache.activemq.broker.BrokerService;
1:a677c21: import org.apache.activemq.broker.TransportConnector;
1:a677c21: import org.apache.activemq.network.DemandForwardingBridge;
1:ae73f86: import org.apache.activemq.network.NetworkBridgeConfiguration;
1:a677c21: import org.apache.activemq.transport.TransportFactory;
1:a677c21: 
1:a677c21: /**
1:4743a20:  *
1:a677c21:  */
1:a677c21: public class ThreeBrokerTopicNetworkUsingTcpTest extends ThreeBrokerTopicNetworkTest {
1:933eb2f:     protected List<DemandForwardingBridge> bridges;
1:a677c21: 
1:a677c21:     protected void bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception {
1:4743a20:         List<TransportConnector> remoteTransports = remoteBroker.getTransportConnectors();
1:4743a20:         List<TransportConnector> localTransports = localBroker.getTransportConnectors();
1:a677c21: 
1:933eb2f:         URI remoteURI;
1:933eb2f:         URI localURI;
1:a677c21:         if (!remoteTransports.isEmpty() && !localTransports.isEmpty()) {
1:4743a20:             remoteURI = remoteTransports.get(0).getConnectUri();
1:4743a20:             localURI = localTransports.get(0).getConnectUri();
1:a677c21: 
1:a677c21:             // Ensure that we are connecting using tcp
1:a677c21:             if (remoteURI.toString().startsWith("tcp:") && localURI.toString().startsWith("tcp:")) {
1:ae73f86:                 NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
1:54114cc:                 config.setBrokerName(localBroker.getBrokerName());
1:230a86c:                 DemandForwardingBridge bridge = new DemandForwardingBridge(config, TransportFactory.connect(localURI), TransportFactory.connect(remoteURI));
1:301203e:                 bridge.setBrokerService(localBroker);
1:a677c21:                 bridges.add(bridge);
1:a677c21: 
1:a677c21:                 bridge.start();
1:a677c21:             } else {
1:a677c21:                 throw new Exception("Remote broker or local broker is not using tcp connectors");
1:a677c21:             }
1:a677c21:         } else {
1:a677c21:             throw new Exception("Remote broker or local broker has no registered connectors.");
1:a677c21:         }
1:a677c21: 
1:fc00993:         maxSetupTime = 2000;
1:a677c21:     }
1:a677c21: 
1:4743a20:     @Override
1:a677c21:     public void setUp() throws Exception {
1:a677c21:         super.setUp();
1:a677c21: 
1:933eb2f:         bridges = new ArrayList<DemandForwardingBridge>();
1:a677c21:     }
1:a677c21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:  *
1:         List<TransportConnector> remoteTransports = remoteBroker.getTransportConnectors();
1:         List<TransportConnector> localTransports = localBroker.getTransportConnectors();
1:             remoteURI = remoteTransports.get(0).getConnectUri();
1:             localURI = localTransports.get(0).getConnectUri();
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected List<DemandForwardingBridge> bridges;
1:         URI remoteURI;
1:         URI localURI;
/////////////////////////////////////////////////////////////////////////
1:         bridges = new ArrayList<DemandForwardingBridge>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         maxSetupTime = 2000;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:         List localTransports = localBroker.getTransportConnectors();
0:             localURI = ((TransportConnector)localTransports.get(0)).getConnectUri();
1:                 DemandForwardingBridge bridge = new DemandForwardingBridge(config, TransportFactory.connect(localURI), TransportFactory.connect(remoteURI));
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:301203e
/////////////////////////////////////////////////////////////////////////
1:                 bridge.setBrokerService(localBroker);
author:Robert Davies
-------------------------------------------------------------------------------
commit:54114cc
/////////////////////////////////////////////////////////////////////////
1:                 config.setBrokerName(localBroker.getBrokerName());
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.network.NetworkBridgeConfiguration;
/////////////////////////////////////////////////////////////////////////
1:                 NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
0:                 config.setLocalBrokerName(localBroker.getBrokerName());
0:                 DemandForwardingBridge bridge = new DemandForwardingBridge(config,TransportFactory.connect(localURI),
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.network.DemandForwardingBridge;
1: import org.apache.activemq.transport.TransportFactory;
1: 
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.net.URI;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class ThreeBrokerTopicNetworkUsingTcpTest extends ThreeBrokerTopicNetworkTest {
0:     protected List bridges;
1: 
1:     protected void bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception {
0:         List remoteTransports = remoteBroker.getTransportConnectors();
0:         List localTransports  = localBroker.getTransportConnectors();
1: 
0:         URI remoteURI, localURI;
1:         if (!remoteTransports.isEmpty() && !localTransports.isEmpty()) {
0:             remoteURI = ((TransportConnector)remoteTransports.get(0)).getConnectUri();
0:             localURI  = ((TransportConnector)localTransports.get(0)).getConnectUri();
1: 
1:             // Ensure that we are connecting using tcp
1:             if (remoteURI.toString().startsWith("tcp:") && localURI.toString().startsWith("tcp:")) {
0:                 DemandForwardingBridge bridge = new DemandForwardingBridge(TransportFactory.connect(localURI),
0:                                                                            TransportFactory.connect(remoteURI));
0:                 bridge.setLocalBrokerName(localBroker.getBrokerName());
1:                 bridges.add(bridge);
1: 
1:                 bridge.start();
1:             } else {
1:                 throw new Exception("Remote broker or local broker is not using tcp connectors");
1:             }
1:         } else {
1:             throw new Exception("Remote broker or local broker has no registered connectors.");
1:         }
1: 
0:         MAX_SETUP_TIME = 2000;
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
0:         bridges = new ArrayList();
1:     }
1: }
============================================================================