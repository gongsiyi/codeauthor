2:90b66ce: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:90b66ce:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:90b66ce:  *
1:90b66ce:  * Unless required by applicable law or agreed to in writing, software
1:90b66ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90b66ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90b66ce:  * See the License for the specific language governing permissions and
1:90b66ce:  * limitations under the License.
1:b402c79:  */
1:90b66ce: package org.apache.activemq.web;
1:ebcab05: 
1:540dd5c: import java.util.Collection;
1:540dd5c: 
1:ebcab05: import org.apache.activemq.broker.jmx.*;
1:8a5e197: import org.apache.activemq.command.ActiveMQDestination;
1:b402c79: 
1:90b66ce: /**
1:8a5e197:  * A facade for either a local in JVM broker or a remote broker over JMX
1:0bbc0ac:  *
1:b514d3f:  * 
1:8a5e197:  * 
3:90b66ce:  */
1:8a5e197: public interface BrokerFacade {
1:b402c79: 
1:b514d3f: 	/**
1:b514d3f: 	 * The name of the active broker (f.e. 'localhost' or 'my broker').
1:b514d3f: 	 * 
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	String getBrokerName() throws Exception;
1:17e0b00: 
1:b514d3f: 	/**
1:b514d3f: 	 * Admin view of the broker.
1:b514d3f: 	 * 
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	BrokerViewMBean getBrokerAdmin() throws Exception;
1:5869f75: 
1:b514d3f: 	/**
1:b514d3f: 	 * All queues known to the broker.
1:b514d3f: 	 * 
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	Collection<QueueViewMBean> getQueues() throws Exception;
1:5869f75: 
1:b514d3f: 	/**
1:b514d3f: 	 * All topics known to the broker.
1:b514d3f: 	 * 
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	Collection<TopicViewMBean> getTopics() throws Exception;
15:90b66ce: 
1:b514d3f: 	/**
1:b514d3f: 	 * All active consumers of a queue.
1:b514d3f: 	 * 
1:b514d3f: 	 * @param queueName
1:b514d3f: 	 *            the name of the queue, not <code>null</code>
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	Collection<SubscriptionViewMBean> getQueueConsumers(String queueName)
1:b514d3f: 			throws Exception;
1:90b66ce: 
1:b514d3f: 	/**
1:db1e3fc: 	 * All active producers to a queue.
1:db1e3fc: 	 * 
1:db1e3fc: 	 * @param queueName
1:db1e3fc: 	 *            the name of the queue, not <code>null</code>
1:db1e3fc: 	 * @return not <code>null</code>
1:db1e3fc: 	 * @throws Exception
1:db1e3fc: 	 */
1:db1e3fc: 	Collection<ProducerViewMBean> getQueueProducers(String queueName)
1:db1e3fc: 			throws Exception;
1:db1e3fc: 
1:db1e3fc: 	/**
1:db1e3fc: 	 * All active producers to a topic.
1:db1e3fc: 	 * 
1:db1e3fc: 	 * @param queueName
1:db1e3fc: 	 *            the name of the topic, not <code>null</code>
1:db1e3fc: 	 * @return not <code>null</code>
1:db1e3fc: 	 * @throws Exception
1:db1e3fc: 	 */
1:db1e3fc: 	Collection<ProducerViewMBean> getTopicProducers(String queueName)
1:db1e3fc: 			throws Exception;
1:db1e3fc: 
1:db1e3fc: 	/**
1:ae2504a: 	 * All active non-durable subscribers to a topic.
1:ae2504a: 	 * 
1:ae2504a: 	 * @param queueName
1:ae2504a: 	 *            the name of the topic, not <code>null</code>
1:ae2504a: 	 * @return not <code>null</code>
1:ae2504a: 	 * @throws Exception
1:ae2504a: 	 */
1:ae2504a: 	public Collection<SubscriptionViewMBean> getTopicSubscribers(String topicName)
1:ae2504a: 			throws Exception;
1:ae2504a: 
1:ae2504a: 	/**
1:ae2504a: 	 * All active non-durable subscribers to a topic.
1:ae2504a: 	 * 
1:ae2504a: 	 * @param queueName
1:ae2504a: 	 *            the name of the topic, not <code>null</code>
1:ae2504a: 	 * @return not <code>null</code>
1:ae2504a: 	 * @throws Exception
1:ae2504a: 	 */
1:ae2504a: 	public Collection<SubscriptionViewMBean> getNonDurableTopicSubscribers()
1:ae2504a: 			throws Exception;
1:ae2504a: 
1:ae2504a: 	/**
1:4fc1712: 	 * Active durable subscribers to topics of the broker.
1:b514d3f: 	 * 
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	Collection<DurableSubscriptionViewMBean> getDurableTopicSubscribers()
1:b514d3f: 			throws Exception;
1:4fc1712: 
1:90b66ce: 
1:4fc1712: 	/**
1:4fc1712: 	 * Inactive durable subscribers to topics of the broker.
1:4fc1712: 	 *
1:4fc1712: 	 * @return not <code>null</code>
1:4fc1712: 	 * @throws Exception
1:4fc1712: 	 */
1:4fc1712: 	Collection<DurableSubscriptionViewMBean> getInactiveDurableTopicSubscribers()
1:4fc1712: 			throws Exception;
1:4fc1712: 
1:b514d3f: 	/**
1:b514d3f: 	 * The names of all transport connectors of the broker (f.e. openwire, ssl)
1:b514d3f: 	 * 
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	Collection<String> getConnectors() throws Exception;
1:b514d3f: 
1:b514d3f: 	/**
1:b514d3f: 	 * A transport connectors.
1:b514d3f: 	 * 
1:b514d3f: 	 * @param name
1:b514d3f: 	 *            name of the connector (f.e. openwire)
1:b514d3f: 	 * @return <code>null</code> if not found
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	ConnectorViewMBean getConnector(String name) throws Exception;
1:b514d3f: 
1:b514d3f: 	/**
1:b514d3f: 	 * All connections to all transport connectors of the broker.
1:b514d3f: 	 * 
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	Collection<ConnectionViewMBean> getConnections() throws Exception;
1:b514d3f: 
1:b514d3f: 	/**
1:b514d3f: 	 * The names of all connections to a specific transport connectors of the
1:b514d3f: 	 * broker.
1:b514d3f: 	 * 
1:b514d3f: 	 * @see #getConnection(String)
1:b514d3f: 	 * @param connectorName
1:b514d3f: 	 *            not <code>null</code>
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	Collection<String> getConnections(String connectorName) throws Exception;
1:b514d3f: 
1:b514d3f: 	/**
1:b514d3f: 	 * A specific connection to the broker.
1:b514d3f: 	 * 
1:b514d3f: 	 * @param connectionName
1:b514d3f: 	 *            the name of the connection, not <code>null</code>
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	ConnectionViewMBean getConnection(String connectionName) throws Exception;
1:b514d3f: 	/**
1:b514d3f: 	 * Returns all consumers of a connection.
1:b514d3f: 	 * 
1:b514d3f: 	 * @param connectionName
1:b514d3f: 	 *            the name of the connection, not <code>null</code>
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	Collection<SubscriptionViewMBean> getConsumersOnConnection(
1:b514d3f: 			String connectionName) throws Exception;
1:b514d3f: 	/**
1:b514d3f: 	 * The brokers network connectors.
1:b514d3f: 	 * 
1:b514d3f: 	 * @return not <code>null</code>
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	Collection<NetworkConnectorViewMBean> getNetworkConnectors()
1:b514d3f: 			throws Exception;
1:ebcab05: 
1:ebcab05: 
1:b514d3f: 	/**
1:ebcab05: 	 * The brokers network bridges.
1:ebcab05: 	 *
1:ebcab05: 	 * @return not <code>null</code>
1:ebcab05: 	 * @throws Exception
1:ebcab05: 	 */
1:ebcab05:     Collection<NetworkBridgeViewMBean> getNetworkBridges()
1:ebcab05:             throws Exception;
1:ebcab05: 
1:ebcab05:     /**
1:b514d3f: 	 * Purges the given destination
1:b514d3f: 	 * 
1:b514d3f: 	 * @param destination
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	void purgeQueue(ActiveMQDestination destination) throws Exception;
1:b514d3f: 	/**
1:b514d3f: 	 * Get the view of the queue with the specified name.
1:b514d3f: 	 * 
1:b514d3f: 	 * @param name
1:b514d3f: 	 *            not <code>null</code>
1:b514d3f: 	 * @return <code>null</code> if no queue with this name exists
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	QueueViewMBean getQueue(String name) throws Exception;
1:b514d3f: 	/**
1:b514d3f: 	 * Get the view of the topic with the specified name.
1:b514d3f: 	 * 
1:b514d3f: 	 * @param name
1:b514d3f: 	 *            not <code>null</code>
1:b514d3f: 	 * @return <code>null</code> if no topic with this name exists
1:b514d3f: 	 * @throws Exception
1:b514d3f: 	 */
1:b514d3f: 	TopicViewMBean getTopic(String name) throws Exception;
1:17e0b00: 	
1:17e0b00: 	/**
1:17e0b00: 	 * Get the JobScheduler MBean
1:17e0b00: 	 * @return the jobScheduler or null if not configured
1:17e0b00: 	 * @throws Exception
1:17e0b00: 	 */
1:17e0b00: 	JobSchedulerViewMBean getJobScheduler() throws Exception;
1:17e0b00: 	
1:17e0b00: 	/**
1:17e0b00:      * Get the JobScheduler MBean
1:17e0b00:      * @return the jobScheduler or null if not configured
1:17e0b00:      * @throws Exception
1:17e0b00:      */
1:17e0b00:     Collection<JobFacade> getScheduledJobs() throws Exception;
1:d0a1a00: 
1:d0a1a00:     boolean isJobSchedulerStarted();
1:3c4848b: 
1:db1e3fc: }
============================================================================
author:artnaseef
-------------------------------------------------------------------------------
commit:ae2504a
/////////////////////////////////////////////////////////////////////////
1: 	 * All active non-durable subscribers to a topic.
1: 	 * 
1: 	 * @param queueName
1: 	 *            the name of the topic, not <code>null</code>
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	public Collection<SubscriptionViewMBean> getTopicSubscribers(String topicName)
1: 			throws Exception;
1: 
1: 	/**
1: 	 * All active non-durable subscribers to a topic.
1: 	 * 
1: 	 * @param queueName
1: 	 *            the name of the topic, not <code>null</code>
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	public Collection<SubscriptionViewMBean> getNonDurableTopicSubscribers()
1: 			throws Exception;
1: 
1: 	/**
commit:db1e3fc
/////////////////////////////////////////////////////////////////////////
1: 	 * All active producers to a queue.
1: 	 * 
1: 	 * @param queueName
1: 	 *            the name of the queue, not <code>null</code>
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<ProducerViewMBean> getQueueProducers(String queueName)
1: 			throws Exception;
1: 
1: 	/**
1: 	 * All active producers to a topic.
1: 	 * 
1: 	 * @param queueName
1: 	 *            the name of the topic, not <code>null</code>
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<ProducerViewMBean> getTopicProducers(String queueName)
1: 			throws Exception;
1: 
1: 	/**
/////////////////////////////////////////////////////////////////////////
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:30f531d
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: 
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3c4848b
/////////////////////////////////////////////////////////////////////////
0:     boolean isSlave() throws Exception;
1: 
commit:ebcab05
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.broker.jmx.*;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	 * The brokers network bridges.
1: 	 *
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1:     Collection<NetworkBridgeViewMBean> getNetworkBridges()
1:             throws Exception;
1: 
1:     /**
commit:d0a1a00
/////////////////////////////////////////////////////////////////////////
1:     boolean isJobSchedulerStarted();
1: 
commit:4fc1712
/////////////////////////////////////////////////////////////////////////
1: 	 * Active durable subscribers to topics of the broker.
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/**
1: 	 * Inactive durable subscribers to topics of the broker.
1: 	 *
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<DurableSubscriptionViewMBean> getInactiveDurableTopicSubscribers()
1: 			throws Exception;
1: 
commit:b514d3f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.ConnectionViewMBean;
0: import org.apache.activemq.broker.jmx.ConnectorViewMBean;
0: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
0: import org.apache.activemq.broker.jmx.NetworkConnectorViewMBean;
0: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
1:  * 
1: 	/**
1: 	 * The name of the active broker (f.e. 'localhost' or 'my broker').
1: 	 * 
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	String getBrokerName() throws Exception;
1: 	/**
1: 	 * Admin view of the broker.
1: 	 * 
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	BrokerViewMBean getBrokerAdmin() throws Exception;
1: 	/**
1: 	 * All queues known to the broker.
1: 	 * 
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<QueueViewMBean> getQueues() throws Exception;
1: 	/**
1: 	 * All topics known to the broker.
1: 	 * 
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<TopicViewMBean> getTopics() throws Exception;
1: 	/**
1: 	 * All active consumers of a queue.
1: 	 * 
1: 	 * @param queueName
1: 	 *            the name of the queue, not <code>null</code>
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<SubscriptionViewMBean> getQueueConsumers(String queueName)
1: 			throws Exception;
1: 	/**
0: 	 * All durable subscribers to topics of the broker.
1: 	 * 
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<DurableSubscriptionViewMBean> getDurableTopicSubscribers()
1: 			throws Exception;
1: 	/**
1: 	 * The names of all transport connectors of the broker (f.e. openwire, ssl)
1: 	 * 
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<String> getConnectors() throws Exception;
1: 
1: 	/**
1: 	 * A transport connectors.
1: 	 * 
1: 	 * @param name
1: 	 *            name of the connector (f.e. openwire)
1: 	 * @return <code>null</code> if not found
1: 	 * @throws Exception
1: 	 */
1: 	ConnectorViewMBean getConnector(String name) throws Exception;
1: 
1: 	/**
1: 	 * All connections to all transport connectors of the broker.
1: 	 * 
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<ConnectionViewMBean> getConnections() throws Exception;
1: 
1: 	/**
1: 	 * The names of all connections to a specific transport connectors of the
1: 	 * broker.
1: 	 * 
1: 	 * @see #getConnection(String)
1: 	 * @param connectorName
1: 	 *            not <code>null</code>
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<String> getConnections(String connectorName) throws Exception;
1: 
1: 	/**
1: 	 * A specific connection to the broker.
1: 	 * 
1: 	 * @param connectionName
1: 	 *            the name of the connection, not <code>null</code>
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	ConnectionViewMBean getConnection(String connectionName) throws Exception;
1: 	/**
1: 	 * Returns all consumers of a connection.
1: 	 * 
1: 	 * @param connectionName
1: 	 *            the name of the connection, not <code>null</code>
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<SubscriptionViewMBean> getConsumersOnConnection(
1: 			String connectionName) throws Exception;
1: 	/**
1: 	 * The brokers network connectors.
1: 	 * 
1: 	 * @return not <code>null</code>
1: 	 * @throws Exception
1: 	 */
1: 	Collection<NetworkConnectorViewMBean> getNetworkConnectors()
1: 			throws Exception;
1: 	/**
1: 	 * Purges the given destination
1: 	 * 
1: 	 * @param destination
1: 	 * @throws Exception
1: 	 */
1: 	void purgeQueue(ActiveMQDestination destination) throws Exception;
1: 	/**
1: 	 * Get the view of the queue with the specified name.
1: 	 * 
1: 	 * @param name
1: 	 *            not <code>null</code>
1: 	 * @return <code>null</code> if no queue with this name exists
1: 	 * @throws Exception
1: 	 */
1: 	QueueViewMBean getQueue(String name) throws Exception;
1: 	/**
1: 	 * Get the view of the topic with the specified name.
1: 	 * 
1: 	 * @param name
1: 	 *            not <code>null</code>
1: 	 * @return <code>null</code> if no topic with this name exists
1: 	 * @throws Exception
1: 	 */
1: 	TopicViewMBean getTopic(String name) throws Exception;
0: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:17e0b00
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * Get the JobScheduler MBean
1: 	 * @return the jobScheduler or null if not configured
1: 	 * @throws Exception
1: 	 */
1: 	JobSchedulerViewMBean getJobScheduler() throws Exception;
1: 	
1: 	/**
1:      * Get the JobScheduler MBean
1:      * @return the jobScheduler or null if not configured
1:      * @throws Exception
1:      */
1:     Collection<JobFacade> getScheduledJobs() throws Exception;
1: 
author:James Strachan
-------------------------------------------------------------------------------
commit:5a5056e
commit:5869f75
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.apache.activemq.broker.jmx.TopicViewMBean;
/////////////////////////////////////////////////////////////////////////
1: 
0:     QueueViewMBean getQueue(String name) throws Exception;
1: 
0:     TopicViewMBean getTopic(String name) throws Exception;
commit:8a5e197
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1:  * A facade for either a local in JVM broker or a remote broker over JMX
1:  *
1: public interface BrokerFacade {
0:     BrokerViewMBean getBrokerAdmin() throws Exception;
0:     Collection getQueues() throws Exception;
0:     Collection getTopics() throws Exception;
0:     Collection getDurableTopicSubscribers() throws Exception;
0:      * Purges the given destination
0:      * @param destination
0:      * @throws Exception
0:     void purgeQueue(ActiveMQDestination destination) throws Exception;
commit:b402c79
/////////////////////////////////////////////////////////////////////////
1:     
0:     /*
/////////////////////////////////////////////////////////////////////////
1:     */
0:     public Collection getQueues() throws Exception {
0:         ManagedRegionBroker broker = getManagedBroker();
0:         if (broker == null) {
0:             return new ArrayList();
0:         }
0:         return broker.getQueueRegion().getDestinationMap().values();
0:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:90b66ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
0: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.jmx.BrokerView;
0: import org.apache.activemq.broker.jmx.BrokerViewMBean;
0: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
0: import org.apache.activemq.broker.jmx.ManagedRegionBroker;
0: import org.apache.activemq.broker.jmx.ManagementContext;
0: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.apache.activemq.broker.jmx.TopicViewMBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.management.MBeanServer;
0: import javax.management.MBeanServerInvocationHandler;
0: import javax.management.ObjectName;
1: 
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.List;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
0: public class BrokerFacade {
0:     private static final Log log = LogFactory.getLog(BrokerFacade.class);
1: 
0:     private BrokerService brokerService;
1: 
0:     public BrokerFacade(BrokerService brokerService) {
0:         this.brokerService = brokerService;
0:     }
1: 
0:     public BrokerService getBrokerService() {
0:         return brokerService;
0:     }
1: 
0:     public Broker getBroker() throws Exception {
0:         return brokerService.getBroker();
0:     }
1: 
0:     public ManagementContext getManagementContext() {
0:         return brokerService.getManagementContext();
0:     }
1: 
0:     public BrokerViewMBean getBrokerAdmin() throws Exception {
0:         // TODO could use JMX to look this up
0:         return brokerService.getAdminView();
0:     }
1: 
0:     public ManagedRegionBroker getManagedBroker() throws Exception {
0:         BrokerView adminView = brokerService.getAdminView();
0:         if (adminView == null) {
0:             return null;
0:         }
0:         return adminView.getBroker();
0:     }
1: 
0:     // TODO - we should not have to use JMX to implement the following methods...
0:     public Collection getQueues() throws Exception {
0:         BrokerView broker = brokerService.getAdminView();
0:         if (broker == null) {
0:             return Collections.EMPTY_LIST;
0:         }
0:         ObjectName[] queues = broker.getQueues();
0:         return getManagedObjects(queues, QueueViewMBean.class);
0:     }
1:     
0:     public Collection getTopics() throws Exception {
0:         BrokerView broker = brokerService.getAdminView();
0:         if (broker == null) {
0:             return Collections.EMPTY_LIST;
0:         }
0:         ObjectName[] queues = broker.getTopics();
0:         return getManagedObjects(queues, TopicViewMBean.class);
0:     }
1:     
0:     public Collection getDurableTopicSubscribers() throws Exception {
0:         BrokerView broker = brokerService.getAdminView();
0:         if (broker == null) {
0:             return Collections.EMPTY_LIST;
0:         }
0:         ObjectName[] queues = broker.getDurableTopicSubscribers();
0:         return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
0:     }
1: 
0:     protected Collection getManagedObjects(ObjectName[] names, Class type) {
0:         List answer = new ArrayList();
0:         MBeanServer mbeanServer = getManagementContext().getMBeanServer();
0:         if (mbeanServer != null) {
0:             for (int i = 0; i < names.length; i++) {
0:                 ObjectName name = names[i];
0:                 Object value = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, type, true);
0:                 if (value != null) {
0:                     answer.add(value);
0:                 }
0:             }
0:         }
0:         return answer;
0:     }
1: 
1:     /**
0:      * public Collection getQueues() throws Exception { ManagedRegionBroker
0:      * broker = getManagedBroker(); if (broker == null) { return new
0:      * ArrayList(); } return
0:      * broker.getQueueRegion().getDestinationMap().values(); }
1:      * 
1:      * 
0:      * public Collection getTopics() throws Exception { ManagedRegionBroker
0:      * broker = getManagedBroker(); if (broker == null) { return new
0:      * ArrayList(); } return
0:      * broker.getTopicRegion().getDestinationMap().values(); }
1:      */
1: 
0: }
============================================================================