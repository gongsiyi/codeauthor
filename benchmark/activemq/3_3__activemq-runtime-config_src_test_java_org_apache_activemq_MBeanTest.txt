1:8b8e726: /**
1:8b8e726:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8b8e726:  * contributor license agreements.  See the NOTICE file distributed with
1:8b8e726:  * this work for additional information regarding copyright ownership.
1:8b8e726:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8b8e726:  * (the "License"); you may not use this file except in compliance with
1:8b8e726:  * the License.  You may obtain a copy of the License at
1:8b8e726:  *
1:8b8e726:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8b8e726:  *
1:8b8e726:  * Unless required by applicable law or agreed to in writing, software
1:8b8e726:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8b8e726:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8b8e726:  * See the License for the specific language governing permissions and
1:8b8e726:  * limitations under the License.
1:8b8e726:  */
1:8b8e726: package org.apache.activemq;
3:8b8e726: 
1:8b8e726: import static org.junit.Assert.assertEquals;
1:8b8e726: import static org.junit.Assert.assertNotEquals;
1:8b8e726: import static org.junit.Assert.assertTrue;
1:8b8e726: 
1:43c3cae: import java.util.HashMap;
1:43c3cae: 
1:43c3cae: import javax.management.ObjectName;
1:43c3cae: 
1:43c3cae: import org.apache.activemq.plugin.RuntimeConfigurationBroker;
1:43c3cae: import org.apache.activemq.plugin.jmx.RuntimeConfigurationViewMBean;
1:43c3cae: import org.apache.activemq.util.IntrospectionSupport;
1:43c3cae: import org.junit.Test;
1:43c3cae: 
1:8b8e726: public class MBeanTest extends RuntimeConfigTestSupport {
1:8b8e726: 
1:8b8e726:     @Test
1:8b8e726:     public void testUpdateNow() throws Exception {
1:8b8e726:         final String brokerConfig =  "mBeanTest-manual-broker";
1:8b8e726:         applyNewConfig(brokerConfig, "emptyManualUpdateConfig");
1:8b8e726:         startBroker(brokerConfig);
1:8b8e726:         assertTrue("broker alive", brokerService.isStarted());
1:8b8e726:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1:8b8e726: 
1:8b8e726:         applyNewConfig(brokerConfig, "networkConnectorTest-one-nc", SLEEP);
1:8b8e726: 
1:8b8e726:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1:8b8e726: 
1:8b8e726:         // apply via jmx
1:8b8e726:         ObjectName objectName =
1:8b8e726:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:8b8e726:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:8b8e726:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:8b8e726:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:8b8e726:                         RuntimeConfigurationViewMBean.class, false);
1:8b8e726: 
1:8b8e726:         HashMap<String, String> props = new HashMap<String, String>();
1:8b8e726:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:8b8e726:         LOG.info("mbean attributes before: " + props);
1:8b8e726: 
1:8b8e726:         String result = runtimeConfigurationView.updateNow();
1:8b8e726: 
1:8b8e726:         LOG.info("Result from update: " + result);
1:8b8e726: 
1:634a818:         assertTrue("got sensible result: " + result, result.contains("started"));
1:8b8e726: 
1:8b8e726:         assertEquals("one new network connectors", 1, brokerService.getNetworkConnectors().size());
1:8b8e726: 
1:8b8e726:         HashMap<String, String> propsAfter = new HashMap<String, String>();
1:8b8e726:         IntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);
1:8b8e726: 
1:8b8e726:         LOG.info("mbean attributes after: " + propsAfter);
1:8b8e726:         String propOfInterest = "modified";
1:8b8e726:         assertNotEquals("modified is different", props.get(propOfInterest), propsAfter.get(propOfInterest));
1:8b8e726:     }
1:8b8e726: 
1:8b8e726:     @Test
1:634a818:     public void testUpdateFailedModParseError() throws Exception {
1:8b8e726:         final String brokerConfig =  "mBeanTest-manual-broker";
1:8b8e726:         applyNewConfig(brokerConfig, "emptyManualUpdateConfig");
1:8b8e726:         startBroker(brokerConfig);
1:8b8e726:         assertTrue("broker alive", brokerService.isStarted());
1:8b8e726:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1:8b8e726: 
1:8b8e726:         applyNewConfig(brokerConfig, "parseErrorConfig", SLEEP);
1:8b8e726: 
1:8b8e726:         // apply via jmx
1:8b8e726:         ObjectName objectName =
1:8b8e726:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:8b8e726:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:8b8e726:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:8b8e726:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:8b8e726:                         RuntimeConfigurationViewMBean.class, false);
1:8b8e726: 
1:8b8e726:         HashMap<String, String> props = new HashMap<String, String>();
1:8b8e726:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:8b8e726:         LOG.info("mbean attributes before: " + props);
1:8b8e726: 
1:8b8e726:         String result = runtimeConfigurationView.updateNow();
1:8b8e726:         LOG.info("Result from failed update: " + result);
1:8b8e726: 
1:634a818:         assertTrue("got sensible result: " + result, result.contains("dudElement"));
1:8b8e726: 
1:8b8e726:         HashMap<String, String> propsAfter = new HashMap<String, String>();
1:8b8e726:         IntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);
1:8b8e726: 
1:8b8e726:         LOG.info("mbean attributes after: " + propsAfter);
1:8b8e726:         String propOfInterest = "modified";
1:8b8e726:         assertEquals("modified is same", props.get(propOfInterest), propsAfter.get(propOfInterest));
1:8b8e726: 
1:8b8e726:         // apply good change now
1:8b8e726:         applyNewConfig(brokerConfig, "networkConnectorTest-one-nc", SLEEP);
1:8b8e726: 
1:8b8e726:         result = runtimeConfigurationView.updateNow();
1:8b8e726: 
1:8b8e726:         LOG.info("Result from update: " + result);
1:634a818:         assertTrue("got sensible result: " + result, result.contains("started"));
1:8b8e726:         assertEquals("one new network connectors", 1, brokerService.getNetworkConnectors().size());
1:8b8e726: 
1:8b8e726:         propsAfter = new HashMap<String, String>();
1:8b8e726:         IntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);
1:8b8e726: 
1:8b8e726:         assertNotEquals("modified is different", props.get(propOfInterest), propsAfter.get(propOfInterest));
1:8b8e726: 
1:8b8e726:     }
1:8b8e726: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: 
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.plugin.RuntimeConfigurationBroker;
1: import org.apache.activemq.plugin.jmx.RuntimeConfigurationViewMBean;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.junit.Test;
1: 
author:gtully
-------------------------------------------------------------------------------
commit:634a818
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("got sensible result: " + result, result.contains("started"));
/////////////////////////////////////////////////////////////////////////
1:     public void testUpdateFailedModParseError() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("got sensible result: " + result, result.contains("dudElement"));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("got sensible result: " + result, result.contains("started"));
author:Gary Tully
-------------------------------------------------------------------------------
commit:8b8e726
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import java.util.HashMap;
0: import javax.management.ObjectName;
0: import org.apache.activemq.plugin.RuntimeConfigurationBroker;
0: import org.apache.activemq.plugin.jmx.RuntimeConfigurationView;
0: import org.apache.activemq.plugin.jmx.RuntimeConfigurationViewMBean;
0: import org.apache.activemq.util.IntrospectionSupport;
0: import org.junit.Test;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class MBeanTest extends RuntimeConfigTestSupport {
1: 
1:     @Test
1:     public void testUpdateNow() throws Exception {
1:         final String brokerConfig =  "mBeanTest-manual-broker";
1:         applyNewConfig(brokerConfig, "emptyManualUpdateConfig");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1: 
1:         applyNewConfig(brokerConfig, "networkConnectorTest-one-nc", SLEEP);
1: 
1:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1: 
1:         // apply via jmx
1:         ObjectName objectName =
1:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:                         RuntimeConfigurationViewMBean.class, false);
1: 
1:         HashMap<String, String> props = new HashMap<String, String>();
1:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:         LOG.info("mbean attributes before: " + props);
1: 
1:         String result = runtimeConfigurationView.updateNow();
1: 
1:         LOG.info("Result from update: " + result);
1: 
0:         assertTrue("got sensible result", result.contains("started"));
1: 
1:         assertEquals("one new network connectors", 1, brokerService.getNetworkConnectors().size());
1: 
1:         HashMap<String, String> propsAfter = new HashMap<String, String>();
1:         IntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);
1: 
1:         LOG.info("mbean attributes after: " + propsAfter);
1:         String propOfInterest = "modified";
1:         assertNotEquals("modified is different", props.get(propOfInterest), propsAfter.get(propOfInterest));
1:     }
1: 
1:     @Test
0:     public void testUpdateFailedMod() throws Exception {
1:         final String brokerConfig =  "mBeanTest-manual-broker";
1:         applyNewConfig(brokerConfig, "emptyManualUpdateConfig");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1: 
1:         applyNewConfig(brokerConfig, "parseErrorConfig", SLEEP);
1: 
1:         // apply via jmx
1:         ObjectName objectName =
1:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:                         RuntimeConfigurationViewMBean.class, false);
1: 
1:         HashMap<String, String> props = new HashMap<String, String>();
1:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:         LOG.info("mbean attributes before: " + props);
1: 
1:         String result = runtimeConfigurationView.updateNow();
1:         LOG.info("Result from failed update: " + result);
1: 
0:         assertTrue("got sensible result", result.contains("dudElement"));
1: 
1:         HashMap<String, String> propsAfter = new HashMap<String, String>();
1:         IntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);
1: 
1:         LOG.info("mbean attributes after: " + propsAfter);
1:         String propOfInterest = "modified";
1:         assertEquals("modified is same", props.get(propOfInterest), propsAfter.get(propOfInterest));
1: 
1:         // apply good change now
1:         applyNewConfig(brokerConfig, "networkConnectorTest-one-nc", SLEEP);
1: 
1:         result = runtimeConfigurationView.updateNow();
1: 
1:         LOG.info("Result from update: " + result);
0:         assertTrue("got sensible result", result.contains("started"));
1:         assertEquals("one new network connectors", 1, brokerService.getNetworkConnectors().size());
1: 
1:         propsAfter = new HashMap<String, String>();
1:         IntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);
1: 
1:         assertNotEquals("modified is different", props.get(propOfInterest), propsAfter.get(propOfInterest));
1: 
1:     }
1: }
============================================================================