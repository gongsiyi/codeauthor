1:717345f: /**
1:717345f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:717345f:  * contributor license agreements.  See the NOTICE file distributed with
1:717345f:  * this work for additional information regarding copyright ownership.
1:717345f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:717345f:  * (the "License"); you may not use this file except in compliance with
1:717345f:  * the License.  You may obtain a copy of the License at
1:717345f:  *
1:717345f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:717345f:  *
1:717345f:  * Unless required by applicable law or agreed to in writing, software
1:717345f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:717345f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:717345f:  * See the License for the specific language governing permissions and
1:717345f:  * limitations under the License.
1:717345f:  */
1:717345f: package org.apache.activemq.bugs;
2:717345f: 
1:717345f: import static org.junit.Assert.assertNotNull;
1:717345f: import static org.junit.Assert.assertTrue;
1:717345f: 
1:717345f: import java.io.File;
1:717345f: import java.io.FilenameFilter;
1:717345f: import java.util.Set;
1:717345f: import java.util.concurrent.CountDownLatch;
1:717345f: import java.util.concurrent.TimeUnit;
1:717345f: 
1:717345f: import javax.jms.*;
1:717345f: import javax.management.ObjectName;
1:717345f: 
1:717345f: import org.apache.activemq.ActiveMQConnectionFactory;
1:717345f: import org.apache.activemq.broker.BrokerService;
1:ee08fc1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ee08fc1: import org.apache.activemq.broker.region.policy.PolicyMap;
1:717345f: import org.apache.activemq.leveldb.LevelDBStore;
1:717345f: import org.apache.activemq.leveldb.LevelDBStoreViewMBean;
1:717345f: import org.apache.activemq.util.Wait;
1:717345f: import org.junit.After;
1:717345f: import org.junit.Before;
1:717345f: import org.junit.Rule;
1:717345f: import org.junit.Test;
1:717345f: import org.junit.rules.TestName;
1:717345f: import org.slf4j.Logger;
1:717345f: import org.slf4j.LoggerFactory;
1:717345f: 
1:717345f: public class AMQ4677Test {
1:717345f: 
1:717345f:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4677Test.class);
1:717345f:     private static BrokerService brokerService;
1:717345f: 
1:717345f:     @Rule public TestName name = new TestName();
1:717345f: 
1:717345f:     private File dataDirFile;
1:717345f: 
1:717345f:     @Before
1:717345f:     public void setUp() throws Exception {
1:717345f: 
1:717345f:         dataDirFile = new File("target/LevelDBCleanupTest");
1:717345f: 
1:717345f:         brokerService = new BrokerService();
1:717345f:         brokerService.setBrokerName("LevelDBBroker");
1:717345f:         brokerService.setPersistent(true);
1:717345f:         brokerService.setUseJmx(true);
1:717345f:         brokerService.setAdvisorySupport(false);
1:717345f:         brokerService.setDeleteAllMessagesOnStartup(true);
1:717345f:         brokerService.setDataDirectoryFile(dataDirFile);
1:717345f: 
1:717345f:         LevelDBStore persistenceFactory = new LevelDBStore();
1:717345f:         persistenceFactory.setDirectory(dataDirFile);
1:717345f:         brokerService.setPersistenceAdapter(persistenceFactory);
1:717345f:         brokerService.start();
1:717345f:         brokerService.waitUntilStarted();
1:717345f:     }
1:717345f: 
1:717345f:     @After
1:717345f:     public void tearDown() throws Exception {
1:717345f:         brokerService.stop();
1:717345f:         brokerService.waitUntilStopped();
1:717345f:     }
1:717345f: 
1:717345f:     @Test
1:717345f:     public void testSendAndReceiveAllMessages() throws Exception {
1:717345f:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://LevelDBBroker");
1:717345f: 
1:717345f:         Connection connection = connectionFactory.createConnection();
1:717345f:         connection.setClientID(getClass().getName());
1:717345f:         connection.start();
1:717345f: 
1:717345f:         final Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:717345f:         Destination destination = session.createQueue(name.toString());
1:717345f:         MessageProducer producer = session.createProducer(destination);
1:717345f:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:717345f: 
1:ee08fc1:         final LevelDBStoreViewMBean levelDBView = getLevelDBStoreMBean();
1:717345f:         assertNotNull(levelDBView);
1:717345f:         levelDBView.compact();
1:717345f: 
1:1b08858:         final int SIZE = 10 * 1024;
1:1b08858:         final int MSG_COUNT = 30000;    // very slow consuming 60k messages of size 30k
1:717345f:         final CountDownLatch done = new CountDownLatch(MSG_COUNT);
1:717345f: 
1:717345f:         byte buffer[] = new byte[SIZE];
1:717345f:         for (int i = 0; i < SIZE; ++i) {
1:717345f:             buffer[i] = (byte) 128;
1:717345f:         }
1:717345f: 
1:717345f:         for (int i = 0; i < MSG_COUNT; ++i) {
1:717345f:             BytesMessage message = session.createBytesMessage();
1:717345f:             message.writeBytes(buffer);
1:717345f:             producer.send(message);
1:717345f: 
1:717345f:             if ((i % 1000) == 0) {
1:717345f:                 LOG.info("Sent message #{}", i);
1:717345f:                 session.commit();
1:717345f:             }
1:717345f:         }
1:717345f: 
1:717345f:         session.commit();
1:717345f: 
1:717345f:         LOG.info("Finished sending all messages.");
1:717345f: 
1:717345f:         MessageConsumer consumer = session.createConsumer(destination);
1:717345f:         consumer.setMessageListener(new MessageListener() {
1:717345f: 
1:717345f:             @Override
1:717345f:             public void onMessage(Message message) {
1:717345f:                 if ((done.getCount() % 1000) == 0) {
1:717345f:                     try {
1:717345f:                         LOG.info("Received message #{}", MSG_COUNT - done.getCount());
1:717345f:                         session.commit();
1:717345f:                     } catch (JMSException e) {
1:717345f:                     }
1:717345f:                 }
1:717345f:                 done.countDown();
1:717345f:             }
1:717345f:         });
1:717345f: 
1:ee08fc1:         done.await(15, TimeUnit.MINUTES);
1:717345f:         session.commit();
1:717345f:         LOG.info("Finished receiving all messages.");
1:717345f: 
1:ee08fc1:         assertTrue("Should < 3 logfiles left.", Wait.waitFor(new Wait.Condition() {
1:717345f: 
1:717345f:             @Override
1:717345f:             public boolean isSatisified() throws Exception {
1:ee08fc1:                 levelDBView.compact();
1:ee08fc1:                 return countLogFiles() < 3;
1:717345f:             }
1:ee08fc1:         }, TimeUnit.MINUTES.toMillis(5), (int)TimeUnit.SECONDS.toMillis(30)));
1:717345f: 
1:717345f:         levelDBView.compact();
2:717345f:         LOG.info("Current number of logs {}", countLogFiles());
1:717345f:     }
1:717345f: 
1:717345f:     protected long countLogFiles() {
1:717345f:         String[] logFiles = dataDirFile.list(new FilenameFilter() {
1:717345f: 
1:717345f:             @Override
1:717345f:             public boolean accept(File dir, String name) {
1:717345f:                 if (name.endsWith("log")) {
1:717345f:                     return true;
1:717345f:                 }
1:717345f:                 return false;
1:717345f:             }
1:717345f:         });
1:717345f: 
1:ee08fc1:         LOG.info("Current number of logs {}", logFiles.length);
1:717345f:         return logFiles.length;
1:717345f:     }
1:717345f: 
1:717345f:     protected LevelDBStoreViewMBean getLevelDBStoreMBean() throws Exception {
1:717345f:         ObjectName levelDbViewMBeanQuery = new ObjectName(
1:ee08fc1:             "org.apache.activemq:type=Broker,brokerName=LevelDBBroker,service=PersistenceAdapter,instanceName=LevelDB*");
1:717345f: 
1:717345f:         Set<ObjectName> names = brokerService.getManagementContext().queryNames(null, levelDbViewMBeanQuery);
1:717345f:         if (names.isEmpty() || names.size() > 1) {
1:717345f:             throw new java.lang.IllegalStateException("Can't find levelDB store name.");
1:717345f:         }
1:717345f: 
1:717345f:         LevelDBStoreViewMBean proxy = (LevelDBStoreViewMBean) brokerService.getManagementContext()
1:717345f:                 .newProxyInstance(names.iterator().next(), LevelDBStoreViewMBean.class, true);
1:717345f:         return proxy;
1:717345f:     }
1:717345f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:1b08858
/////////////////////////////////////////////////////////////////////////
1:         final int SIZE = 10 * 1024;
1:         final int MSG_COUNT = 30000;    // very slow consuming 60k messages of size 30k
commit:ee08fc1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         final LevelDBStoreViewMBean levelDBView = getLevelDBStoreMBean();
/////////////////////////////////////////////////////////////////////////
1:         done.await(15, TimeUnit.MINUTES);
1:         assertTrue("Should < 3 logfiles left.", Wait.waitFor(new Wait.Condition() {
1:                 levelDBView.compact();
1:                 return countLogFiles() < 3;
1:         }, TimeUnit.MINUTES.toMillis(5), (int)TimeUnit.SECONDS.toMillis(30)));
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Current number of logs {}", logFiles.length);
1:             "org.apache.activemq:type=Broker,brokerName=LevelDBBroker,service=PersistenceAdapter,instanceName=LevelDB*");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:717345f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.FilenameFilter;
1: import java.util.Set;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.*;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.leveldb.LevelDBStore;
1: import org.apache.activemq.leveldb.LevelDBStoreViewMBean;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4677Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4677Test.class);
1:     private static BrokerService brokerService;
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     private File dataDirFile;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         dataDirFile = new File("target/LevelDBCleanupTest");
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setBrokerName("LevelDBBroker");
1:         brokerService.setPersistent(true);
1:         brokerService.setUseJmx(true);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setDataDirectoryFile(dataDirFile);
1: 
1:         LevelDBStore persistenceFactory = new LevelDBStore();
1:         persistenceFactory.setDirectory(dataDirFile);
1:         brokerService.setPersistenceAdapter(persistenceFactory);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testSendAndReceiveAllMessages() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://LevelDBBroker");
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(getClass().getName());
1:         connection.start();
1: 
1:         final Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.toString());
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
0:         LevelDBStoreViewMBean levelDBView = getLevelDBStoreMBean();
1:         assertNotNull(levelDBView);
1:         levelDBView.compact();
1: 
0:         final int SIZE = 6 * 1024 * 5;
0:         final int MSG_COUNT = 60000;
1:         final CountDownLatch done = new CountDownLatch(MSG_COUNT);
1: 
1:         byte buffer[] = new byte[SIZE];
1:         for (int i = 0; i < SIZE; ++i) {
1:             buffer[i] = (byte) 128;
1:         }
1: 
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeBytes(buffer);
1:             producer.send(message);
1: 
1:             if ((i % 1000) == 0) {
1:                 LOG.info("Sent message #{}", i);
1:                 session.commit();
1:             }
1:         }
1: 
1:         session.commit();
1: 
1:         LOG.info("Finished sending all messages.");
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 if ((done.getCount() % 1000) == 0) {
1:                     try {
1:                         LOG.info("Received message #{}", MSG_COUNT - done.getCount());
1:                         session.commit();
1:                     } catch (JMSException e) {
1:                     }
1:                 }
1:                 done.countDown();
1:             }
1:         });
1: 
0:         done.await(10, TimeUnit.MINUTES);
1:         session.commit();
1:         LOG.info("Finished receiving all messages.");
1: 
1:         LOG.info("Current number of logs {}", countLogFiles());
1: 
0:         assertTrue("Should only have one log file left.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return countLogFiles() == 1;
1:             }
0:         }, TimeUnit.MINUTES.toMillis(5)));
1: 
1:         levelDBView.compact();
1:         LOG.info("Current number of logs {}", countLogFiles());
1:     }
1: 
1:     protected long countLogFiles() {
1:         String[] logFiles = dataDirFile.list(new FilenameFilter() {
1: 
1:             @Override
1:             public boolean accept(File dir, String name) {
1:                 if (name.endsWith("log")) {
1:                     return true;
1:                 }
1:                 return false;
1:             }
1:         });
1: 
1:         return logFiles.length;
1:     }
1: 
1:     protected LevelDBStoreViewMBean getLevelDBStoreMBean() throws Exception {
1:         ObjectName levelDbViewMBeanQuery = new ObjectName(
0:             "org.apache.activemq:type=Broker,brokerName=LevelDBBroker,Service=PersistenceAdapter,InstanceName=LevelDB*");
1: 
1:         Set<ObjectName> names = brokerService.getManagementContext().queryNames(null, levelDbViewMBeanQuery);
1:         if (names.isEmpty() || names.size() > 1) {
1:             throw new java.lang.IllegalStateException("Can't find levelDB store name.");
1:         }
1: 
1:         LevelDBStoreViewMBean proxy = (LevelDBStoreViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(names.iterator().next(), LevelDBStoreViewMBean.class, true);
1:         return proxy;
1:     }
1: }
============================================================================