1:7c63788: /**
1:7c63788:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7c63788:  * contributor license agreements.  See the NOTICE file distributed with
1:7c63788:  * this work for additional information regarding copyright ownership.
1:7c63788:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7c63788:  * (the "License"); you may not use this file except in compliance with
1:7c63788:  * the License.  You may obtain a copy of the License at
1:7c63788:  *
1:7c63788:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7c63788:  *
1:7c63788:  * Unless required by applicable law or agreed to in writing, software
1:7c63788:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7c63788:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7c63788:  * See the License for the specific language governing permissions and
1:7c63788:  * limitations under the License.
1:7c63788:  */
1:7c63788: package org.apache.activemq.partition;
4:7c63788: 
1:9ef4259: import java.net.InetSocketAddress;
1:9ef4259: import java.net.Socket;
1:9ef4259: import java.net.SocketAddress;
1:9ef4259: import java.util.Arrays;
1:9ef4259: import java.util.Collections;
1:9ef4259: import java.util.HashMap;
1:9ef4259: import java.util.HashSet;
1:9ef4259: import java.util.Map;
1:9ef4259: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:9ef4259: 
1:9ef4259: import org.apache.activemq.broker.Broker;
1:9ef4259: import org.apache.activemq.broker.BrokerFilter;
1:9ef4259: import org.apache.activemq.broker.ConnectionContext;
1:9ef4259: import org.apache.activemq.broker.ProducerBrokerExchange;
1:9ef4259: import org.apache.activemq.broker.TransportConnection;
1:9ef4259: import org.apache.activemq.command.ActiveMQDestination;
1:9ef4259: import org.apache.activemq.command.ConnectionControl;
1:9ef4259: import org.apache.activemq.command.ConnectionId;
1:9ef4259: import org.apache.activemq.command.ConnectionInfo;
1:9ef4259: import org.apache.activemq.command.Message;
1:7c63788: import org.apache.activemq.partition.dto.Partitioning;
1:7c63788: import org.apache.activemq.partition.dto.Target;
1:f88f280: import org.apache.activemq.state.ConsumerState;
1:f88f280: import org.apache.activemq.state.SessionState;
1:7c63788: import org.apache.activemq.transport.Transport;
1:7c63788: import org.apache.activemq.util.LRUCache;
1:7c63788: import org.slf4j.Logger;
1:7c63788: import org.slf4j.LoggerFactory;
1:7c63788: 
1:7c63788: /**
1:7c63788:  * A BrokerFilter which partitions client connections over a cluster of brokers.
1:7c63788:  *
1:7c63788:  * It can use a client identifier like client id, authenticated user name, source ip
1:7c63788:  * address or even destination being used by the connection to figure out which
1:7c63788:  * is the best broker in the cluster that the connection should be using and then
1:7c63788:  * redirects failover clients to that broker.
1:7c63788:  */
1:7c63788: public class PartitionBroker extends BrokerFilter {
1:7c63788: 
1:7c63788:     protected static final Logger LOG = LoggerFactory.getLogger(PartitionBroker.class);
1:7c63788:     protected final PartitionBrokerPlugin plugin;
1:7c63788:     protected boolean reloadConfigOnPoll = true;
1:7c63788: 
1:7c63788:     public PartitionBroker(Broker broker, PartitionBrokerPlugin plugin) {
1:7c63788:         super(broker);
1:7c63788:         this.plugin = plugin;
8:7c63788:     }
1:7c63788: 
2:7c63788:     @Override
1:7c63788:     public void start() throws Exception {
1:7c63788:         super.start();
1:7c63788:         getExecutor().execute(new Runnable() {
1:7c63788:             @Override
1:7c63788:             public void run() {
1:7c63788:                 Thread.currentThread().setName("Partition Monitor");
1:7c63788:                 onMonitorStart();
1:7c63788:                 try {
1:7c63788:                     runPartitionMonitor();
1:7c63788:                 } catch (Exception e) {
1:7c63788:                     onMonitorStop();
1:7c63788:                 }
1:7c63788:             }
1:7c63788:         });
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void onMonitorStart() {
1:7c63788:     }
1:7c63788:     protected void onMonitorStop() {
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void runPartitionMonitor() {
1:7c63788:         while( !isStopped() ) {
1:7c63788:             try {
1:7c63788:                 monitorWait();
1:7c63788:             } catch (InterruptedException e) {
1:7c63788:                 break;
1:7c63788:             }
1:7c63788: 
1:7c63788:             if(reloadConfigOnPoll) {
1:7c63788:                 try {
1:7c63788:                     reloadConfiguration();
1:7c63788:                 } catch (Exception e) {
1:7c63788:                     continue;
1:7c63788:                 }
1:7c63788:             }
1:7c63788: 
1:7c63788:             for( ConnectionMonitor monitor: monitors.values()) {
2:7c63788:                 checkTarget(monitor);
1:7c63788:             }
1:7c63788:         }
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void monitorWait() throws InterruptedException {
2:7c63788:         synchronized (this) {
1:7c63788:             this.wait(1000);
1:7c63788:         }
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void monitorWakeup()  {
1:7c63788:         synchronized (this) {
1:7c63788:             this.notifyAll();
1:7c63788:         }
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void reloadConfiguration() throws Exception {
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void checkTarget(ConnectionMonitor monitor) {
1:7c63788: 
1:7c63788:         // can we find a preferred target for the connection?
1:7c63788:         Target targetDTO = pickBestBroker(monitor);
1:7c63788:         if( targetDTO == null || targetDTO.ids==null) {
1:7c63788:             LOG.debug("No partition target found for connection: "+monitor.context.getConnectionId());
1:7c63788:             return;
1:7c63788:         }
1:7c63788: 
1:7c63788:         // Are we one the the targets?
1:7c63788:         if( targetDTO.ids.contains(getBrokerName()) ) {
1:7c63788:             LOG.debug("We are a partition target for connection: "+monitor.context.getConnectionId());
1:7c63788:             return;
1:7c63788:         }
1:7c63788: 
1:7c63788:         // Then we need to move the connection over.
1:7c63788:         String connectionString = getConnectionString(targetDTO.ids);
1:7c63788:         if( connectionString==null ) {
1:7c63788:             LOG.debug("Could not convert to partition targets to connection string: " + targetDTO.ids);
1:25f70ad:             return;
1:7c63788:         }
1:7c63788: 
1:7c63788:         LOG.info("Redirecting connection to: " + connectionString);
1:f88f280:         TransportConnection connection = (TransportConnection)monitor.context.getConnection();
1:7c63788:         ConnectionControl cc = new ConnectionControl();
1:7c63788:         cc.setConnectedBrokers(connectionString);
1:7c63788:         cc.setRebalanceConnection(true);
1:7c63788:         connection.dispatchAsync(cc);
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected String getConnectionString(HashSet<String> ids) {
1:7c63788:         StringBuilder rc = new StringBuilder();
1:7c63788:         for (String id : ids) {
1:25f70ad:             String url = plugin.getBrokerURL(this, id);
1:7c63788:             if( url!=null ) {
1:7c63788:                 if( rc.length()!=0 ) {
1:7c63788:                     rc.append(',');
1:7c63788:                 }
1:7c63788:                 rc.append(url);
1:7c63788:             }
1:7c63788:         }
1:25f70ad:         if( rc.length()==0 )
1:25f70ad:             return null;
1:7c63788:         return rc.toString();
1:7c63788:     }
1:7c63788: 
1:f88f280:     static private class Score {
1:f88f280:         int value;
1:f88f280:     }
1:f88f280: 
1:7c63788:     protected Target pickBestBroker(ConnectionMonitor monitor) {
1:7c63788: 
1:7c63788:         if( getConfig() ==null )
2:7c63788:             return null;
1:7c63788: 
1:7c63788:         if( getConfig().bySourceIp !=null && !getConfig().bySourceIp.isEmpty() ) {
1:7c63788:             TransportConnection connection = (TransportConnection)monitor.context.getConnection();
1:7c63788:             Transport transport = connection.getTransport();
1:7c63788:             Socket socket = transport.narrow(Socket.class);
1:7c63788:             if( socket !=null ) {
1:7c63788:                 SocketAddress address = socket.getRemoteSocketAddress();
1:7c63788:                 if( address instanceof InetSocketAddress) {
1:7c63788:                     String ip = ((InetSocketAddress) address).getAddress().getHostAddress();
1:7c63788:                     Target targetDTO = getConfig().bySourceIp.get(ip);
3:7c63788:                     if( targetDTO!=null ) {
3:7c63788:                         return targetDTO;
1:7c63788:                     }
1:7c63788:                 }
1:7c63788:             }
1:7c63788:         }
1:7c63788: 
1:7c63788:         if( getConfig().byUserName !=null && !getConfig().byUserName.isEmpty() ) {
1:7c63788:             String userName = monitor.context.getUserName();
1:7c63788:             if( userName !=null ) {
1:7c63788:                 Target targetDTO = getConfig().byUserName.get(userName);
1:7c63788:                 if( targetDTO!=null ) {
1:7c63788:                     return targetDTO;
1:7c63788:                 }
1:7c63788:             }
1:7c63788:         }
1:7c63788: 
1:7c63788:         if( getConfig().byClientId !=null && !getConfig().byClientId.isEmpty() ) {
1:7c63788:             String clientId = monitor.context.getClientId();
1:7c63788:             if( clientId!=null ) {
1:7c63788:                 Target targetDTO = getConfig().byClientId.get(clientId);
1:7c63788:                 if( targetDTO!=null ) {
1:7c63788:                     return targetDTO;
1:7c63788:                 }
1:7c63788:             }
1:7c63788:         }
1:7c63788: 
1:7c63788:         if(
1:7c63788:              (getConfig().byQueue !=null && !getConfig().byQueue.isEmpty())
1:7c63788:           || (getConfig().byTopic !=null && !getConfig().byTopic.isEmpty())
1:7c63788:           ) {
1:7c63788: 
1:f88f280:             // Collect the destinations the connection is consuming from...
1:f88f280:             HashSet<ActiveMQDestination> dests = new HashSet<ActiveMQDestination>();
1:f88f280:             for (SessionState session : monitor.context.getConnectionState().getSessionStates()) {
1:f88f280:                 for (ConsumerState consumer : session.getConsumerStates()) {
1:f88f280:                     ActiveMQDestination destination = consumer.getInfo().getDestination();
1:f88f280:                     if( destination.isComposite() ) {
1:f88f280:                         dests.addAll(Arrays.asList(destination.getCompositeDestinations()));
1:f88f280:                     } else {
1:f88f280:                         dests.addAll(Collections.singletonList(destination));
1:7c63788:                     }
1:7c63788:                 }
1:7c63788:             }
1:f88f280: 
1:f88f280:             // Group them by the partitioning target for the destinations and score them..
1:f88f280:             HashMap<Target, Score> targetScores = new HashMap<Target, Score>();
1:f88f280:             for (ActiveMQDestination dest : dests) {
1:f88f280:                 Target target = getTarget(dest);
1:f88f280:                 if( target!=null ) {
1:f88f280:                     Score score = targetScores.get(target);
1:f88f280:                     if( score == null ) {
1:f88f280:                         score = new Score();
1:f88f280:                         targetScores.put(target, score);
1:f88f280:                     }
1:f88f280:                     score.value++;
1:f88f280:                 }
1:f88f280:             }
1:f88f280: 
1:f88f280:             // The target with largest score wins..
1:f88f280:             if( !targetScores.isEmpty() ) {
1:f88f280:                 Target bestTarget = null;
1:f88f280:                 int bestScore=0;
1:f88f280:                 for (Map.Entry<Target, Score> entry : targetScores.entrySet()) {
1:f88f280:                     if( entry.getValue().value > bestScore ) {
1:f88f280:                         bestTarget = entry.getKey();
1:f88f280:                     }
1:f88f280:                 }
1:f88f280:                 return bestTarget;
1:f88f280:             }
1:f88f280: 
1:f88f280:             // If we get here is because there were no consumers, or the destinations for those
1:f88f280:             // consumers did not have an assigned destination..  So partition based on producer
1:f88f280:             // usage.
1:f88f280:             Target best = monitor.findBestProducerTarget(this);
1:f88f280:             if( best!=null ) {
1:f88f280:                 return best;
1:f88f280:             }
1:f88f280:         }
1:f88f280:         return null;
1:f88f280:     }
1:f88f280: 
1:f88f280:     protected Target getTarget(ActiveMQDestination dest) {
1:f88f280:         Partitioning config = getConfig();
1:f88f280:         if( dest.isQueue() && config.byQueue !=null && !config.byQueue.isEmpty() ) {
1:f88f280:             return config.byQueue.get(dest.getPhysicalName());
1:f88f280:         } else if( dest.isTopic() && config.byTopic !=null && !config.byTopic.isEmpty() ) {
1:f88f280:             return config.byTopic.get(dest.getPhysicalName());
1:7c63788:         }
1:7c63788:         return null;
1:7c63788:     }
1:7c63788: 
1:9ef4259:     protected final ConcurrentMap<ConnectionId, ConnectionMonitor> monitors = new ConcurrentHashMap<ConnectionId, ConnectionMonitor>();
1:7c63788: 
1:7c63788:     @Override
1:7c63788:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:25f70ad:         if( info.isFaultTolerant() ) {
1:25f70ad:             ConnectionMonitor monitor = new ConnectionMonitor(context);
1:25f70ad:             monitors.put(info.getConnectionId(), monitor);
1:25f70ad:             super.addConnection(context, info);
1:25f70ad:             checkTarget(monitor);
1:25f70ad:         } else {
1:25f70ad:             super.addConnection(context, info);
1:25f70ad:         }
1:7c63788:     }
1:7c63788: 
1:7c63788:     @Override
1:7c63788:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:7c63788:         super.removeConnection(context, info, error);
1:25f70ad:         if( info.isFaultTolerant() ) {
1:25f70ad:             monitors.remove(info.getConnectionId());
1:25f70ad:         }
1:7c63788:     }
1:7c63788: 
1:7c63788:     @Override
1:7c63788:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:7c63788:         ConnectionMonitor monitor = monitors.get(producerExchange.getConnectionContext().getConnectionId());
1:7c63788:         if( monitor!=null ) {
1:7c63788:             monitor.onSend(producerExchange, messageSend);
1:7c63788:         }
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected Partitioning getConfig() {
1:7c63788:         return plugin.getConfig();
1:7c63788:     }
1:7c63788: 
1:7c63788: 
1:7c63788:     static class Traffic {
1:7c63788:         long messages;
1:7c63788:         long bytes;
1:7c63788:     }
1:7c63788: 
1:f88f280:     static class ConnectionMonitor {
1:7c63788: 
1:f88f280:         final ConnectionContext context;
1:7c63788:         LRUCache<ActiveMQDestination, Traffic> trafficPerDestination =  new LRUCache<ActiveMQDestination, Traffic>();
1:7c63788: 
1:f88f280:         public ConnectionMonitor(ConnectionContext context) {
1:7c63788:             this.context = context;
1:7c63788:         }
1:7c63788: 
1:f88f280:         synchronized public Target findBestProducerTarget(PartitionBroker broker) {
1:f88f280:             Target best = null;
1:7c63788:             long bestSize = 0 ;
1:7c63788:             for (Map.Entry<ActiveMQDestination, Traffic> entry : trafficPerDestination.entrySet()) {
1:7c63788:                 Traffic t = entry.getValue();
1:7c63788:                 // Once we get enough messages...
1:f88f280:                 if( t.messages < broker.plugin.getMinTransferCount()) {
1:7c63788:                     continue;
1:7c63788:                 }
1:7c63788:                 if( t.bytes > bestSize) {
1:7c63788:                     bestSize = t.bytes;
1:f88f280:                     Target target = broker.getTarget(entry.getKey());
1:f88f280:                     if( target!=null ) {
1:f88f280:                         best = target;
1:f88f280:                     }
1:7c63788:                 }
1:7c63788:             }
1:7c63788:             return best;
1:7c63788:         }
1:7c63788: 
1:7c63788:         synchronized public void onSend(ProducerBrokerExchange producerExchange, Message message) {
1:7c63788:             ActiveMQDestination dest = message.getDestination();
2:7c63788:             Traffic traffic = trafficPerDestination.get(dest);
2:7c63788:             if( traffic == null ) {
2:7c63788:                 traffic = new Traffic();
2:7c63788:                 trafficPerDestination.put(dest, traffic);
1:7c63788:             }
2:7c63788:             traffic.messages += 1;
2:7c63788:             traffic.bytes += message.getSize();
1:7c63788:         }
1:7c63788: 
1:7c63788: 
1:7c63788:     }
1:7c63788: 
1:7c63788: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetSocketAddress;
1: import java.net.Socket;
1: import java.net.SocketAddress;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionControl;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected final ConcurrentMap<ConnectionId, ConnectionMonitor> monitors = new ConcurrentHashMap<ConnectionId, ConnectionMonitor>();
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:25f70ad
/////////////////////////////////////////////////////////////////////////
1:             return;
/////////////////////////////////////////////////////////////////////////
1:             String url = plugin.getBrokerURL(this, id);
/////////////////////////////////////////////////////////////////////////
1:         if( rc.length()==0 )
1:             return null;
/////////////////////////////////////////////////////////////////////////
1:         if( info.isFaultTolerant() ) {
1:             ConnectionMonitor monitor = new ConnectionMonitor(context);
1:             monitors.put(info.getConnectionId(), monitor);
1:             super.addConnection(context, info);
1:             checkTarget(monitor);
1:         } else {
1:             super.addConnection(context, info);
1:         }
1:         if( info.isFaultTolerant() ) {
1:             monitors.remove(info.getConnectionId());
1:         }
commit:f88f280
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.state.ConsumerState;
1: import org.apache.activemq.state.SessionState;
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1:         TransportConnection connection = (TransportConnection)monitor.context.getConnection();
/////////////////////////////////////////////////////////////////////////
1:     static private class Score {
1:         int value;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             // Collect the destinations the connection is consuming from...
1:             HashSet<ActiveMQDestination> dests = new HashSet<ActiveMQDestination>();
1:             for (SessionState session : monitor.context.getConnectionState().getSessionStates()) {
1:                 for (ConsumerState consumer : session.getConsumerStates()) {
1:                     ActiveMQDestination destination = consumer.getInfo().getDestination();
1:                     if( destination.isComposite() ) {
1:                         dests.addAll(Arrays.asList(destination.getCompositeDestinations()));
1:                     } else {
1:                         dests.addAll(Collections.singletonList(destination));
1: 
1:             // Group them by the partitioning target for the destinations and score them..
1:             HashMap<Target, Score> targetScores = new HashMap<Target, Score>();
1:             for (ActiveMQDestination dest : dests) {
1:                 Target target = getTarget(dest);
1:                 if( target!=null ) {
1:                     Score score = targetScores.get(target);
1:                     if( score == null ) {
1:                         score = new Score();
1:                         targetScores.put(target, score);
1:                     }
1:                     score.value++;
1:                 }
1:             }
1: 
1:             // The target with largest score wins..
1:             if( !targetScores.isEmpty() ) {
1:                 Target bestTarget = null;
1:                 int bestScore=0;
1:                 for (Map.Entry<Target, Score> entry : targetScores.entrySet()) {
1:                     if( entry.getValue().value > bestScore ) {
1:                         bestTarget = entry.getKey();
1:                     }
1:                 }
1:                 return bestTarget;
1:             }
1: 
1:             // If we get here is because there were no consumers, or the destinations for those
1:             // consumers did not have an assigned destination..  So partition based on producer
1:             // usage.
1:             Target best = monitor.findBestProducerTarget(this);
1:             if( best!=null ) {
1:                 return best;
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     protected Target getTarget(ActiveMQDestination dest) {
1:         Partitioning config = getConfig();
1:         if( dest.isQueue() && config.byQueue !=null && !config.byQueue.isEmpty() ) {
1:             return config.byQueue.get(dest.getPhysicalName());
1:         } else if( dest.isTopic() && config.byTopic !=null && !config.byTopic.isEmpty() ) {
1:             return config.byTopic.get(dest.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     static class ConnectionMonitor {
1:         final ConnectionContext context;
1:         public ConnectionMonitor(ConnectionContext context) {
1:         synchronized public Target findBestProducerTarget(PartitionBroker broker) {
1:             Target best = null;
1:                 if( t.messages < broker.plugin.getMinTransferCount()) {
1:                     Target target = broker.getTarget(entry.getKey());
1:                     if( target!=null ) {
1:                         best = target;
1:                     }
/////////////////////////////////////////////////////////////////////////
commit:7c63788
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.partition;
1: 
0: import org.apache.activemq.broker.*;
0: import org.apache.activemq.command.*;
1: import org.apache.activemq.partition.dto.Partitioning;
1: import org.apache.activemq.partition.dto.Target;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.util.LRUCache;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.net.InetSocketAddress;
0: import java.net.Socket;
0: import java.net.SocketAddress;
0: import java.util.HashSet;
0: import java.util.Map;
0: import java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
1:  * A BrokerFilter which partitions client connections over a cluster of brokers.
1:  *
1:  * It can use a client identifier like client id, authenticated user name, source ip
1:  * address or even destination being used by the connection to figure out which
1:  * is the best broker in the cluster that the connection should be using and then
1:  * redirects failover clients to that broker.
1:  */
1: public class PartitionBroker extends BrokerFilter {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(PartitionBroker.class);
1:     protected final PartitionBrokerPlugin plugin;
1:     protected boolean reloadConfigOnPoll = true;
1: 
1:     public PartitionBroker(Broker broker, PartitionBrokerPlugin plugin) {
1:         super(broker);
1:         this.plugin = plugin;
1:     }
1: 
1:     @Override
1:     public void start() throws Exception {
1:         super.start();
1:         getExecutor().execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 Thread.currentThread().setName("Partition Monitor");
1:                 onMonitorStart();
1:                 try {
1:                     runPartitionMonitor();
1:                 } catch (Exception e) {
1:                     onMonitorStop();
1:                 }
1:             }
1:         });
1:     }
1: 
1:     protected void onMonitorStart() {
1:     }
1:     protected void onMonitorStop() {
1:     }
1: 
1:     protected void runPartitionMonitor() {
1:         while( !isStopped() ) {
1:             try {
1:                 monitorWait();
1:             } catch (InterruptedException e) {
1:                 break;
1:             }
1: 
1:             if(reloadConfigOnPoll) {
1:                 try {
1:                     reloadConfiguration();
1:                 } catch (Exception e) {
1:                     continue;
1:                 }
1:             }
1: 
1:             for( ConnectionMonitor monitor: monitors.values()) {
1:                 checkTarget(monitor);
1:             }
1:         }
1:     }
1: 
1:     protected void monitorWait() throws InterruptedException {
1:         synchronized (this) {
1:             this.wait(1000);
1:         }
1:     }
1: 
1:     protected void monitorWakeup()  {
1:         synchronized (this) {
1:             this.notifyAll();
1:         }
1:     }
1: 
1:     protected void reloadConfiguration() throws Exception {
1:     }
1: 
1:     protected void checkTarget(ConnectionMonitor monitor) {
1: 
1:         // can we find a preferred target for the connection?
1:         Target targetDTO = pickBestBroker(monitor);
1:         if( targetDTO == null || targetDTO.ids==null) {
1:             LOG.debug("No partition target found for connection: "+monitor.context.getConnectionId());
1:             return;
1:         }
1: 
1:         // Are we one the the targets?
1:         if( targetDTO.ids.contains(getBrokerName()) ) {
1:             LOG.debug("We are a partition target for connection: "+monitor.context.getConnectionId());
1:             return;
1:         }
1: 
1:         // Then we need to move the connection over.
1:         String connectionString = getConnectionString(targetDTO.ids);
1:         if( connectionString==null ) {
1:             LOG.debug("Could not convert to partition targets to connection string: " + targetDTO.ids);
1:         }
1: 
1:         LOG.info("Redirecting connection to: " + connectionString);
0:         TransportConnection connection = (TransportConnection)monitor.next;
1:         ConnectionControl cc = new ConnectionControl();
1:         cc.setConnectedBrokers(connectionString);
1:         cc.setRebalanceConnection(true);
1:         connection.dispatchAsync(cc);
1:     }
1: 
1:     protected String getConnectionString(HashSet<String> ids) {
0:         if( getConfig().brokers==null || getConfig().brokers.isEmpty() )
1:             return null;
1:         StringBuilder rc = new StringBuilder();
1:         for (String id : ids) {
0:             String url = getConfig().brokers.get(id);
1:             if( url!=null ) {
1:                 if( rc.length()!=0 ) {
1:                     rc.append(',');
1:                 }
1:                 rc.append(url);
1:             }
1:         }
1:         return rc.toString();
1:     }
1: 
1:     protected Target pickBestBroker(ConnectionMonitor monitor) {
1: 
1:         if( getConfig() ==null )
1:             return null;
1: 
1:         if( getConfig().bySourceIp !=null && !getConfig().bySourceIp.isEmpty() ) {
1:             TransportConnection connection = (TransportConnection)monitor.context.getConnection();
1:             Transport transport = connection.getTransport();
1:             Socket socket = transport.narrow(Socket.class);
1:             if( socket !=null ) {
1:                 SocketAddress address = socket.getRemoteSocketAddress();
1:                 if( address instanceof InetSocketAddress) {
1:                     String ip = ((InetSocketAddress) address).getAddress().getHostAddress();
1:                     Target targetDTO = getConfig().bySourceIp.get(ip);
1:                     if( targetDTO!=null ) {
1:                         return targetDTO;
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         if( getConfig().byUserName !=null && !getConfig().byUserName.isEmpty() ) {
1:             String userName = monitor.context.getUserName();
1:             if( userName !=null ) {
1:                 Target targetDTO = getConfig().byUserName.get(userName);
1:                 if( targetDTO!=null ) {
1:                     return targetDTO;
1:                 }
1:             }
1:         }
1: 
1:         if( getConfig().byClientId !=null && !getConfig().byClientId.isEmpty() ) {
1:             String clientId = monitor.context.getClientId();
1:             if( clientId!=null ) {
1:                 Target targetDTO = getConfig().byClientId.get(clientId);
1:                 if( targetDTO!=null ) {
1:                     return targetDTO;
1:                 }
1:             }
1:         }
1: 
1:         if(
1:              (getConfig().byQueue !=null && !getConfig().byQueue.isEmpty())
1:           || (getConfig().byTopic !=null && !getConfig().byTopic.isEmpty())
1:           ) {
1: 
0:             ActiveMQDestination best = monitor.findMostActiveDestination(plugin);
0:             if( best!=null ) {
0:                 if( getConfig().byQueue !=null && !getConfig().byQueue.isEmpty() && best.isQueue() ) {
0:                     Target targetDTO = getConfig().byQueue.get(best.getPhysicalName());
1:                     if( targetDTO!=null ) {
1:                         return targetDTO;
1:                     }
1:                 }
1: 
0:                 if( getConfig().byTopic !=null && !getConfig().byTopic.isEmpty() && best.isTopic() ) {
0:                     Target targetDTO = getConfig().byTopic.get(best.getPhysicalName());
1:                     if( targetDTO!=null ) {
1:                         return targetDTO;
1:                     }
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1: 
0:     protected final ConcurrentHashMap<ConnectionId, ConnectionMonitor> monitors = new ConcurrentHashMap<ConnectionId, ConnectionMonitor>();
1: 
1:     @Override
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
0:         ConnectionMonitor monitor = new ConnectionMonitor(context);
0:         context.setConnection(monitor);
0:         monitors.put(info.getConnectionId(), monitor);
0:         super.addConnection(context, info);
1:         checkTarget(monitor);
1:     }
1: 
1:     @Override
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:         super.removeConnection(context, info, error);
0:         ConnectionMonitor removed = monitors.remove(info.getConnectionId());
0:         if( removed!=null ) {
0:             context.setConnection(removed.next);
1:         }
1:     }
1: 
1:     @Override
1:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:         ConnectionMonitor monitor = monitors.get(producerExchange.getConnectionContext().getConnectionId());
1:         if( monitor!=null ) {
1:             monitor.onSend(producerExchange, messageSend);
1:         }
1:     }
1: 
1:     protected Partitioning getConfig() {
1:         return plugin.getConfig();
1:     }
1: 
1: 
1:     static class Traffic {
1:         long messages;
1:         long bytes;
1:     }
1: 
0:     static class ConnectionMonitor extends ConnectionProxy {
0:         final ConnectionContext context;
1: 
1:         LRUCache<ActiveMQDestination, Traffic> trafficPerDestination =  new LRUCache<ActiveMQDestination, Traffic>();
1: 
0:         ConnectionMonitor(ConnectionContext context) {
0:             super(context.getConnection());
1:             this.context = context;
1:         }
1: 
0:         synchronized public ActiveMQDestination findMostActiveDestination(PartitionBrokerPlugin plugin) {
0:             ActiveMQDestination best = null;
1:             long bestSize = 0 ;
1:             for (Map.Entry<ActiveMQDestination, Traffic> entry : trafficPerDestination.entrySet()) {
1:                 Traffic t = entry.getValue();
1:                 // Once we get enough messages...
0:                 if( t.messages < plugin.getMinTransferCount()) {
1:                     continue;
1:                 }
1:                 if( t.bytes > bestSize) {
1:                     bestSize = t.bytes;
0:                     best = entry.getKey();
1:                 }
1:             }
1:             return best;
1:         }
1: 
1:         synchronized public void onSend(ProducerBrokerExchange producerExchange, Message message) {
1:             ActiveMQDestination dest = message.getDestination();
1:             Traffic traffic = trafficPerDestination.get(dest);
1:             if( traffic == null ) {
1:                 traffic = new Traffic();
1:                 trafficPerDestination.put(dest, traffic);
1:             }
1:             traffic.messages += 1;
1:             traffic.bytes += message.getSize();
1:         }
1: 
1: 
1:         @Override
0:         public void dispatchAsync(Command command) {
0:             if (command.getClass() == MessageDispatch.class) {
0:                 MessageDispatch md = (MessageDispatch) command;
0:                 Message message = md.getMessage();
1:                 synchronized (this) {
0:                     ActiveMQDestination dest = md.getDestination();
1:                     Traffic traffic = trafficPerDestination.get(dest);
1:                     if( traffic == null ) {
1:                         traffic = new Traffic();
1:                         trafficPerDestination.put(dest, traffic);
1:                     }
1:                     traffic.messages += 1;
1:                     traffic.bytes += message.getSize();
1:                 }
1:             }
0:             super.dispatchAsync(command);
1:         }
1: 
1:     }
1: 
1: }
============================================================================