1:e300b87: /**
1:e300b87:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e300b87:  * contributor license agreements.  See the NOTICE file distributed with
1:e300b87:  * this work for additional information regarding copyright ownership.
1:e300b87:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e300b87:  * (the "License"); you may not use this file except in compliance with
1:e300b87:  * the License.  You may obtain a copy of the License at
1:e300b87:  *
1:e300b87:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e300b87:  *
1:e300b87:  * Unless required by applicable law or agreed to in writing, software
1:e300b87:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e300b87:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e300b87:  * See the License for the specific language governing permissions and
1:e300b87:  * limitations under the License.
1:e300b87:  */
1:e300b87: package org.apache.activemq.bugs;
1:e300b87: 
1:e300b87: import java.util.concurrent.CountDownLatch;
1:e300b87: import java.util.concurrent.TimeUnit;
1:e300b87: import javax.jms.Connection;
1:e300b87: import javax.jms.Message;
1:e300b87: import javax.jms.MessageListener;
1:e300b87: import javax.jms.MessageProducer;
1:e300b87: import javax.jms.Session;
1:e300b87: import javax.jms.TextMessage;
1:e300b87: import javax.jms.Topic;
1:e300b87: import javax.jms.TopicSubscriber;
1:e300b87: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:e300b87: import org.apache.activemq.broker.BrokerService;
1:e300b87: 
1:e300b87: /**
1:b0c2a40:  * 
1:e300b87:  */
1:e300b87: public class JMSDurableTopicNoLocalTest extends EmbeddedBrokerTestSupport {
1:e300b87:     protected String bindAddress;
1:e300b87: 
1:e300b87:     public void testConsumeNoLocal() throws Exception {
1:e300b87:         final String TEST_NAME = getClass().getName();
1:e300b87:         Connection connection = createConnection();
1:e300b87:         connection.setClientID(TEST_NAME);
1:e300b87:         
1:e300b87:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e300b87:         
1:e300b87:         TopicSubscriber subscriber = session.createDurableSubscriber((Topic) destination, "topicUser2", null, true);
1:e300b87:         
1:e300b87:         
1:e300b87:         final CountDownLatch latch = new CountDownLatch(1);
1:e300b87:         subscriber.setMessageListener(new MessageListener() {
1:e300b87:             public void onMessage(Message message) {
1:e300b87:                 System.out.println("Receive a message " + message);
1:e300b87:                 latch.countDown();        
1:e300b87:             }   
1:e300b87:         });
1:e300b87:         
1:e300b87:         connection.start();
1:e300b87:         
1:e300b87:         MessageProducer producer = session.createProducer(destination);
1:e300b87:         TextMessage message = session.createTextMessage("THIS IS A TEST");
1:e300b87:         producer.send(message);
1:e300b87:         producer.close();
1:e300b87:         latch.await(5,TimeUnit.SECONDS);
1:e300b87:         assertEquals(latch.getCount(),1);
1:e300b87:     }
1:e300b87: 
1:e300b87:     @Override
1:e300b87:     protected void setUp() throws Exception {
1:e300b87:         bindAddress = "vm://localhost";
1:e300b87:         useTopic=true;
1:e300b87:         super.setUp();
1:e300b87:     }
1:e300b87: 
1:e300b87:     @Override
1:e300b87:     protected BrokerService createBroker() throws Exception {
1:e300b87:         BrokerService answer = new BrokerService();
1:e300b87:         answer.setUseJmx(false);
1:e300b87:         answer.setPersistent(true);
1:e300b87:         answer.setDeleteAllMessagesOnStartup(true);
1:e300b87:         answer.addConnector(bindAddress);
1:e300b87:         return answer;
1:e300b87:     }
1:e300b87: 
1:e300b87: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:e300b87
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
1: public class JMSDurableTopicNoLocalTest extends EmbeddedBrokerTestSupport {
1:     protected String bindAddress;
1: 
1:     public void testConsumeNoLocal() throws Exception {
1:         final String TEST_NAME = getClass().getName();
1:         Connection connection = createConnection();
1:         connection.setClientID(TEST_NAME);
1:         
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         
1:         TopicSubscriber subscriber = session.createDurableSubscriber((Topic) destination, "topicUser2", null, true);
1:         
1:         
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         subscriber.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
1:                 System.out.println("Receive a message " + message);
1:                 latch.countDown();        
1:             }   
1:         });
1:         
1:         connection.start();
1:         
1:         MessageProducer producer = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage("THIS IS A TEST");
1:         producer.send(message);
1:         producer.close();
1:         latch.await(5,TimeUnit.SECONDS);
1:         assertEquals(latch.getCount(),1);
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         bindAddress = "vm://localhost";
1:         useTopic=true;
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseJmx(false);
1:         answer.setPersistent(true);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: 
1: }
============================================================================