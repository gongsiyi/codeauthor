1:4f108ce: /**
1:4f108ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4f108ce:  * contributor license agreements.  See the NOTICE file distributed with
1:4f108ce:  * this work for additional information regarding copyright ownership.
1:4f108ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4f108ce:  * (the "License"); you may not use this file except in compliance with
1:4f108ce:  * the License.  You may obtain a copy of the License at
1:4f108ce:  *
1:4f108ce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4f108ce:  *
1:4f108ce:  * Unless required by applicable law or agreed to in writing, software
1:4f108ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4f108ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f108ce:  * See the License for the specific language governing permissions and
1:4f108ce:  * limitations under the License.
1:4f108ce:  */
1:1eeae77: package org.apache.activemq.leveldb.test;
2:1eeae77: 
1:b54606b: import java.io.IOException;
1:b54606b: import java.util.ArrayList;
1:b54606b: import javax.jms.JMSException;
1:1eeae77: import org.apache.activemq.broker.ConnectionContext;
1:1eeae77: import org.apache.activemq.command.ActiveMQTextMessage;
1:1eeae77: import org.apache.activemq.command.Message;
1:b54606b: import org.apache.activemq.command.MessageAck;
1:1eeae77: import org.apache.activemq.command.MessageId;
1:1eeae77: import org.apache.activemq.store.MessageRecoveryListener;
1:1eeae77: import org.apache.activemq.store.MessageStore;
1:1eeae77: 
1:1eeae77: /**
1:1eeae77:  */
1:1eeae77: public class ReplicationTestSupport {
1:1eeae77: 
1:1eeae77:     static long id_counter = 0L;
1:4367ec1:     static String payload = createPlayload(1024);
1:4367ec1: 
1:4367ec1:     public static String createPlayload(int size) {
1:4367ec1:         String payload = "";
1:4367ec1:         for (int i = 0; i < size; i++) {
1:1eeae77:             payload += "x";
1:1eeae77:         }
1:4367ec1:         return payload;
1:1eeae77:     }
1:1eeae77: 
1:4367ec1:     static public ActiveMQTextMessage addMessage(MessageStore ms, String id) throws JMSException, IOException {
1:4367ec1:         return addMessage(ms, id, payload);
1:4367ec1:     }
1:4367ec1: 
1:4367ec1:     static public ActiveMQTextMessage addMessage(MessageStore ms, String id, String payload) throws JMSException, IOException {
1:1eeae77:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:1eeae77:         message.setPersistent(true);
1:1eeae77:         message.setResponseRequired(true);
1:4367ec1:         message.setStringProperty("id", id);
1:1eeae77:         message.setText(payload);
1:1eeae77:         id_counter += 1;
1:1eeae77:         MessageId messageId = new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:" + id_counter);
1:1eeae77:         messageId.setBrokerSequenceId(id_counter);
1:1eeae77:         message.setMessageId(messageId);
1:1eeae77:         ms.addMessage(new ConnectionContext(), message);
1:1eeae77:         return message;
1:1eeae77:     }
1:1eeae77: 
1:b54606b:     static public void removeMessage(MessageStore ms, MessageId messageId) throws JMSException, IOException {
1:b54606b:         MessageAck ack = new MessageAck();
1:b54606b:         ack.setAckType(MessageAck.INDIVIDUAL_ACK_TYPE);
1:b54606b:         ack.setFirstMessageId(messageId);
1:b54606b:         ack.setLastMessageId(messageId);
1:b54606b:         ms.removeMessage(new ConnectionContext(), ack);
1:b54606b:     }
1:b54606b: 
1:1eeae77:     static public ArrayList<String> getMessages(MessageStore ms) throws Exception {
1:1eeae77:         final ArrayList<String> rc = new ArrayList<String>();
1:1eeae77:         ms.recover(new MessageRecoveryListener() {
1:1eeae77:             public boolean recoverMessage(Message message) throws Exception {
1:1eeae77:                 rc.add(((ActiveMQTextMessage) message).getStringProperty("id"));
1:1eeae77:                 return true;
1:1eeae77:             }
1:1eeae77: 
1:1eeae77:             public boolean hasSpace() {
1:1eeae77:                 return true;
1:1eeae77:             }
1:1eeae77: 
1:1eeae77:             public boolean recoverMessageReference(MessageId ref) throws Exception {
1:1eeae77:                 return true;
1:1eeae77:             }
1:1eeae77: 
1:1eeae77:             public boolean isDuplicate(MessageId ref) {
1:1eeae77:                 return false;
1:1eeae77:             }
1:1eeae77:         });
1:1eeae77:         return rc;
1:1eeae77:     }
1:1eeae77: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b54606b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import javax.jms.JMSException;
1: import org.apache.activemq.command.MessageAck;
/////////////////////////////////////////////////////////////////////////
1:     static public void removeMessage(MessageStore ms, MessageId messageId) throws JMSException, IOException {
1:         MessageAck ack = new MessageAck();
1:         ack.setAckType(MessageAck.INDIVIDUAL_ACK_TYPE);
1:         ack.setFirstMessageId(messageId);
1:         ack.setLastMessageId(messageId);
1:         ms.removeMessage(new ConnectionContext(), ack);
1:     }
1: 
commit:4f108ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:4367ec1
/////////////////////////////////////////////////////////////////////////
1:     static String payload = createPlayload(1024);
1: 
1:     public static String createPlayload(int size) {
1:         String payload = "";
1:         for (int i = 0; i < size; i++) {
1:         return payload;
1:     static public ActiveMQTextMessage addMessage(MessageStore ms, String id) throws JMSException, IOException {
1:         return addMessage(ms, id, payload);
1:     }
1: 
1:     static public ActiveMQTextMessage addMessage(MessageStore ms, String id, String payload) throws JMSException, IOException {
1:         message.setStringProperty("id", id);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1eeae77
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.leveldb.test;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.MessageRecoveryListener;
1: import org.apache.activemq.store.MessageStore;
1: 
0: import javax.jms.JMSException;
0: import java.io.IOException;
0: import java.util.ArrayList;
1: 
1: /**
1:  */
1: public class ReplicationTestSupport {
1: 
1:     static long id_counter = 0L;
0:     static String payload = "";
0:     {
0:         for (int i = 0; i < 1024; i++) {
1:             payload += "x";
1:         }
1:     }
1: 
0:     static public ActiveMQTextMessage addMessage(MessageStore ms, String body) throws JMSException, IOException {
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setPersistent(true);
1:         message.setResponseRequired(true);
0:         message.setStringProperty("id", body);
1:         message.setText(payload);
1:         id_counter += 1;
1:         MessageId messageId = new MessageId("ID:localhost-56913-1254499826208-0:0:1:1:" + id_counter);
1:         messageId.setBrokerSequenceId(id_counter);
1:         message.setMessageId(messageId);
1:         ms.addMessage(new ConnectionContext(), message);
1:         return message;
1:     }
1: 
1:     static public ArrayList<String> getMessages(MessageStore ms) throws Exception {
1:         final ArrayList<String> rc = new ArrayList<String>();
1:         ms.recover(new MessageRecoveryListener() {
1:             public boolean recoverMessage(Message message) throws Exception {
1:                 rc.add(((ActiveMQTextMessage) message).getStringProperty("id"));
1:                 return true;
1:             }
1: 
1:             public boolean hasSpace() {
1:                 return true;
1:             }
1: 
1:             public boolean recoverMessageReference(MessageId ref) throws Exception {
1:                 return true;
1:             }
1: 
1:             public boolean isDuplicate(MessageId ref) {
1:                 return false;
1:             }
1:         });
1:         return rc;
1:     }
1: }
============================================================================