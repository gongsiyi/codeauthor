1:330e731: /**
1:330e731:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:330e731:  * contributor license agreements.  See the NOTICE file distributed with
1:330e731:  * this work for additional information regarding copyright ownership.
1:330e731:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:330e731:  * (the "License"); you may not use this file except in compliance with
1:330e731:  * the License.  You may obtain a copy of the License at
2:330e731:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:330e731:  *
1:330e731:  * Unless required by applicable law or agreed to in writing, software
1:330e731:  * distributed under the License is distributed on an "AS IS" BASIS,
1:330e731:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:330e731:  * See the License for the specific language governing permissions and
1:330e731:  * limitations under the License.
1:330e731:  */
1:330e731: package org.apache.activemq.util;
6:330e731: 
1:330e731: import java.io.DataOutput;
1:330e731: import java.io.IOException;
1:330e731: import java.io.OutputStream;
1:330e731: import java.io.UTFDataFormatException;
1:230a86c: 
1:330e731: /**
1:330e731:  * Optimized ByteArrayOutputStream
1:b0c2a40:  * 
1:330e731:  * 
1:330e731:  */
1:230a86c: public final class DataByteArrayOutputStream extends OutputStream implements DataOutput {
1:330e731:     private static final int DEFAULT_SIZE = 2048;
1:330e731:     private byte buf[];
1:330e731:     private int pos;
1:330e731: 
1:330e731:     /**
1:230a86c:      * Creates a new byte array output stream, with a buffer capacity of the
1:230a86c:      * specified size, in bytes.
1:330e731:      * 
1:330e731:      * @param size the initial size.
1:330e731:      * @exception IllegalArgumentException if size is negative.
1:330e731:      */
1:230a86c:     public DataByteArrayOutputStream(int size) {
1:230a86c:         if (size < 0) {
1:230a86c:             throw new IllegalArgumentException("Invalid size: " + size);
8:330e731:         }
1:230a86c:         buf = new byte[size];
1:86cbdfd:     }
1:330e731: 
1:330e731:     /**
1:330e731:      * Creates a new byte array output stream.
1:330e731:      */
1:230a86c:     public DataByteArrayOutputStream() {
1:330e731:         this(DEFAULT_SIZE);
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:330e731:      * start using a fresh byte array
1:330e731:      * 
1:330e731:      * @param size
1:330e731:      */
1:230a86c:     public void restart(int size) {
1:230a86c:         buf = new byte[size];
1:230a86c:         pos = 0;
1:330e731:     }
1:230a86c: 
1:330e731:     /**
1:330e731:      * start using a fresh byte array
1:330e731:      */
1:230a86c:     public void restart() {
1:230a86c:         restart(DEFAULT_SIZE);
1:330e731:     }
1:230a86c: 
1:330e731:     /**
1:330e731:      * Get a ByteSequence from the stream
1:230a86c:      * 
1:330e731:      * @return the byte sequence
1:330e731:      */
1:330e731:     public ByteSequence toByteSequence() {
1:330e731:         return new ByteSequence(buf, 0, pos);
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:330e731:      * Writes the specified byte to this byte array output stream.
1:330e731:      * 
1:330e731:      * @param b the byte to be written.
1:330e731:      */
1:230a86c:     public void write(int b) {
1:230a86c:         int newcount = pos + 1;
1:330e731:         ensureEnoughBuffer(newcount);
1:230a86c:         buf[pos] = (byte)b;
1:230a86c:         pos = newcount;
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:230a86c:      * Writes <code>len</code> bytes from the specified byte array starting at
1:230a86c:      * offset <code>off</code> to this byte array output stream.
1:330e731:      * 
1:330e731:      * @param b the data.
1:330e731:      * @param off the start offset in the data.
1:330e731:      * @param len the number of bytes to write.
1:330e731:      */
1:230a86c:     public void write(byte b[], int off, int len) {
1:230a86c:         if (len == 0) {
1:330e731:             return;
1:330e731:         }
1:230a86c:         int newcount = pos + len;
1:330e731:         ensureEnoughBuffer(newcount);
1:230a86c:         System.arraycopy(b, off, buf, pos, len);
1:230a86c:         pos = newcount;
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:330e731:      * @return the underlying byte[] buffer
1:330e731:      */
1:230a86c:     public byte[] getData() {
1:330e731:         return buf;
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:330e731:      * reset the output stream
1:330e731:      */
1:230a86c:     public void reset() {
1:230a86c:         pos = 0;
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:330e731:      * Set the current position for writing
1:330e731:      * 
1:330e731:      * @param offset
1:330e731:      */
1:230a86c:     public void position(int offset) {
1:330e731:         ensureEnoughBuffer(offset);
1:230a86c:         pos = offset;
1:330e731:     }
1:230a86c: 
1:230a86c:     public int size() {
1:330e731:         return pos;
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeBoolean(boolean v) {
1:c636b37:         ensureEnoughBuffer(pos + 1);
1:230a86c:         buf[pos++] = (byte)(v ? 1 : 0);
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeByte(int v) {
1:c636b37:         ensureEnoughBuffer(pos + 1);
1:230a86c:         buf[pos++] = (byte)(v >>> 0);
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeShort(int v) {
1:c636b37:         ensureEnoughBuffer(pos + 2);
1:230a86c:         buf[pos++] = (byte)(v >>> 8);
1:230a86c:         buf[pos++] = (byte)(v >>> 0);
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeChar(int v) {
1:c636b37:         ensureEnoughBuffer(pos + 2);
1:230a86c:         buf[pos++] = (byte)(v >>> 8);
1:230a86c:         buf[pos++] = (byte)(v >>> 0);
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeInt(int v) {
1:c636b37:         ensureEnoughBuffer(pos + 4);
1:230a86c:         buf[pos++] = (byte)(v >>> 24);
1:230a86c:         buf[pos++] = (byte)(v >>> 16);
1:230a86c:         buf[pos++] = (byte)(v >>> 8);
1:230a86c:         buf[pos++] = (byte)(v >>> 0);
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeLong(long v) {
1:c636b37:         ensureEnoughBuffer(pos + 8);
1:230a86c:         buf[pos++] = (byte)(v >>> 56);
1:230a86c:         buf[pos++] = (byte)(v >>> 48);
1:230a86c:         buf[pos++] = (byte)(v >>> 40);
1:230a86c:         buf[pos++] = (byte)(v >>> 32);
1:230a86c:         buf[pos++] = (byte)(v >>> 24);
1:230a86c:         buf[pos++] = (byte)(v >>> 16);
1:230a86c:         buf[pos++] = (byte)(v >>> 8);
1:230a86c:         buf[pos++] = (byte)(v >>> 0);
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeFloat(float v) throws IOException {
1:330e731:         writeInt(Float.floatToIntBits(v));
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeDouble(double v) throws IOException {
1:330e731:         writeLong(Double.doubleToLongBits(v));
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeBytes(String s) {
1:230a86c:         int length = s.length();
1:230a86c:         for (int i = 0; i < length; i++) {
1:230a86c:             write((byte)s.charAt(i));
1:330e731:         }
1:330e731:     }
1:330e731: 
1:230a86c:     public void writeChars(String s) {
1:230a86c:         int length = s.length();
1:230a86c:         for (int i = 0; i < length; i++) {
1:230a86c:             int c = s.charAt(i);
1:230a86c:             write((c >>> 8) & 0xFF);
1:230a86c:             write((c >>> 0) & 0xFF);
1:330e731:         }
1:330e731:     }
1:330e731: 
1:172c290:     public void writeUTF(String text) throws IOException {
1:172c290:         long encodedsize = MarshallingSupport.countUTFBytes(text);
1:933eb2f:         if (encodedsize > 65535) {
1:230a86c:             throw new UTFDataFormatException("encoded string too long: " + encodedsize + " bytes");
1:fc00993:         }
1:172c290:         ensureEnoughBuffer((int)(pos + encodedsize + 2));
1:172c290:         writeShort((int)encodedsize);
1:172c290: 
1:172c290:         byte[] buffer = new byte[(int)encodedsize];
1:172c290:         MarshallingSupport.writeUTFBytesToBuffer(text, (int) encodedsize, buf, pos);
1:172c290:         pos += encodedsize;
1:fc00993:     }
1:330e731: 
1:230a86c:     private void ensureEnoughBuffer(int newcount) {
1:230a86c:         if (newcount > buf.length) {
1:230a86c:             byte newbuf[] = new byte[Math.max(buf.length << 1, newcount)];
1:230a86c:             System.arraycopy(buf, 0, newbuf, 0, pos);
1:230a86c:             buf = newbuf;
1:330e731:         }
1:330e731:     }
1:330e731: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:172c290
/////////////////////////////////////////////////////////////////////////
1:     public void writeUTF(String text) throws IOException {
1:         long encodedsize = MarshallingSupport.countUTFBytes(text);
1:         ensureEnoughBuffer((int)(pos + encodedsize + 2));
1:         writeShort((int)encodedsize);
1: 
1:         byte[] buffer = new byte[(int)encodedsize];
1:         MarshallingSupport.writeUTFBytesToBuffer(text, (int) encodedsize, buf, pos);
1:         pos += encodedsize;
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         if (encodedsize > 65535) {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:         if (encodedsize > 65535){
1:         }
0:             if (!((c >= 0x0001) && (c <= 0x007F))) {
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: public final class DataByteArrayOutputStream extends OutputStream implements DataOutput {
1:      * Creates a new byte array output stream, with a buffer capacity of the
1:      * specified size, in bytes.
1:     public DataByteArrayOutputStream(int size) {
1:         if (size < 0) {
1:             throw new IllegalArgumentException("Invalid size: " + size);
1:         buf = new byte[size];
1:     public DataByteArrayOutputStream() {
/////////////////////////////////////////////////////////////////////////
1:     public void restart(int size) {
1:         buf = new byte[size];
1:         pos = 0;
1: 
1:     public void restart() {
1:         restart(DEFAULT_SIZE);
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:     public void write(int b) {
1:         int newcount = pos + 1;
1:         buf[pos] = (byte)b;
1:         pos = newcount;
1:      * Writes <code>len</code> bytes from the specified byte array starting at
1:      * offset <code>off</code> to this byte array output stream.
1:     public void write(byte b[], int off, int len) {
1:         if (len == 0) {
1:         int newcount = pos + len;
1:         System.arraycopy(b, off, buf, pos, len);
1:         pos = newcount;
1:     public byte[] getData() {
1:     public void reset() {
1:         pos = 0;
/////////////////////////////////////////////////////////////////////////
1:     public void position(int offset) {
1:         pos = offset;
1: 
1:     public int size() {
1:     public void writeBoolean(boolean v) {
1:         buf[pos++] = (byte)(v ? 1 : 0);
1:     public void writeByte(int v) {
1:         buf[pos++] = (byte)(v >>> 0);
1:     public void writeShort(int v) {
1:         buf[pos++] = (byte)(v >>> 8);
1:         buf[pos++] = (byte)(v >>> 0);
1:     public void writeChar(int v) {
1:         buf[pos++] = (byte)(v >>> 8);
1:         buf[pos++] = (byte)(v >>> 0);
1:     public void writeInt(int v) {
1:         buf[pos++] = (byte)(v >>> 24);
1:         buf[pos++] = (byte)(v >>> 16);
1:         buf[pos++] = (byte)(v >>> 8);
1:         buf[pos++] = (byte)(v >>> 0);
1:     public void writeLong(long v) {
1:         buf[pos++] = (byte)(v >>> 56);
1:         buf[pos++] = (byte)(v >>> 48);
1:         buf[pos++] = (byte)(v >>> 40);
1:         buf[pos++] = (byte)(v >>> 32);
1:         buf[pos++] = (byte)(v >>> 24);
1:         buf[pos++] = (byte)(v >>> 16);
1:         buf[pos++] = (byte)(v >>> 8);
1:         buf[pos++] = (byte)(v >>> 0);
1:     public void writeFloat(float v) throws IOException {
1:     public void writeDouble(double v) throws IOException {
1:     public void writeBytes(String s) {
1:         int length = s.length();
1:         for (int i = 0; i < length; i++) {
1:             write((byte)s.charAt(i));
1:     public void writeChars(String s) {
1:         int length = s.length();
1:         for (int i = 0; i < length; i++) {
1:             int c = s.charAt(i);
1:             write((c >>> 8) & 0xFF);
1:             write((c >>> 0) & 0xFF);
0:     public void writeUTF(String str) throws IOException {
0:         int strlen = str.length();
0:         int encodedsize = 0;
0:         for (int i = 0; i < strlen; i++) {
0:             c = str.charAt(i);
0:             if ((c >= 0x0001) && (c <= 0x007F)) {
0:             } else if (c > 0x07FF) {
0:                 encodedsize += 3;
0:             } else {
0:                 encodedsize += 2;
0:         if (encodedsize > 65535)
1:             throw new UTFDataFormatException("encoded string too long: " + encodedsize + " bytes");
0:         ensureEnoughBuffer(pos + encodedsize + 2);
0:         int i = 0;
0:         for (i = 0; i < strlen; i++) {
0:             c = str.charAt(i);
0:             if (!((c >= 0x0001) && (c <= 0x007F)))
0:             buf[pos++] = (byte)c;
0:         for (; i < strlen; i++) {
0:             c = str.charAt(i);
0:             if ((c >= 0x0001) && (c <= 0x007F)) {
0:                 buf[pos++] = (byte)c;
0:             } else if (c > 0x07FF) {
0:                 buf[pos++] = (byte)(0xE0 | ((c >> 12) & 0x0F));
0:                 buf[pos++] = (byte)(0x80 | ((c >> 6) & 0x3F));
0:                 buf[pos++] = (byte)(0x80 | ((c >> 0) & 0x3F));
0:             } else {
0:                 buf[pos++] = (byte)(0xC0 | ((c >> 6) & 0x1F));
0:                 buf[pos++] = (byte)(0x80 | ((c >> 0) & 0x3F));
1:     private void ensureEnoughBuffer(int newcount) {
1:         if (newcount > buf.length) {
1:             byte newbuf[] = new byte[Math.max(buf.length << 1, newcount)];
1:             System.arraycopy(buf, 0, newbuf, 0, pos);
1:             buf = newbuf;
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:c636b37
/////////////////////////////////////////////////////////////////////////
1:         ensureEnoughBuffer(pos + 1);
1:         ensureEnoughBuffer(pos + 1);
1:         ensureEnoughBuffer(pos + 2);
1:         ensureEnoughBuffer(pos + 2);
1:         ensureEnoughBuffer(pos + 4);
/////////////////////////////////////////////////////////////////////////
1:         ensureEnoughBuffer(pos + 8);
/////////////////////////////////////////////////////////////////////////
0:         ensureEnoughBuffer(pos + encodedsize+2);
author:Robert Davies
-------------------------------------------------------------------------------
commit:330e731
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.UTFDataFormatException;
0: import org.apache.activemq.util.ByteSequence;
1: /**
1:  * Optimized ByteArrayOutputStream
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public final class DataByteArrayOutputStream extends OutputStream implements DataOutput{
1:     private static final int DEFAULT_SIZE = 2048;
1:     private byte buf[];
1:     private int pos;
1: 
1:     /**
0:      * Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.
1:      * 
1:      * @param size the initial size.
1:      * @exception IllegalArgumentException if size is negative.
1:      */
0:     public DataByteArrayOutputStream(int size){
0:         if(size<0){
0:             throw new IllegalArgumentException("Invalid size: "+size);
1:         }
0:         buf=new byte[size];
1:     }
1: 
1:     /**
1:      * Creates a new byte array output stream.
1:      */
0:     public DataByteArrayOutputStream(){
1:         this(DEFAULT_SIZE);
1:     }
1: 
1:     /**
1:      * start using a fresh byte array
1:      * 
1:      * @param size
1:      */
0:     public void restart(int size){
0:         buf=new byte[size];
0:         pos=0;
1:     }
1:     
1:     /**
1:      * start using a fresh byte array
1:      */
0:     public void restart(){
0:        restart(DEFAULT_SIZE);
1:     }
1:     
1:     /**
1:      * Get a ByteSequence from the stream
1:      * @return the byte sequence
1:      */
1:     public ByteSequence toByteSequence() {
1:         return new ByteSequence(buf, 0, pos);
1:     }
1: 
1:     /**
1:      * Writes the specified byte to this byte array output stream.
1:      * 
1:      * @param b the byte to be written.
1:      */
0:     public void write(int b){
0:         int newcount=pos+1;
1:         ensureEnoughBuffer(newcount);
0:         buf[pos]=(byte) b;
0:         pos=newcount;
1:     }
1: 
1:     /**
0:      * Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte
0:      * array output stream.
1:      * 
1:      * @param b the data.
1:      * @param off the start offset in the data.
1:      * @param len the number of bytes to write.
1:      */
0:     public void write(byte b[],int off,int len){
0:         if(len==0){
1:             return;
1:         }
0:         int newcount=pos+len;
1:         ensureEnoughBuffer(newcount);
0:         System.arraycopy(b,off,buf,pos,len);
0:         pos=newcount;
1:     }
1: 
1:     /**
1:      * @return the underlying byte[] buffer
1:      */
0:     public byte[] getData(){
1:         return buf;
1:     }
1: 
1:     /**
1:      * reset the output stream
1:      */
0:     public void reset(){
0:         pos=0;
1:     }
1: 
1:     /**
1:      * Set the current position for writing
1:      * 
1:      * @param offset
1:      */
0:     public void position(int offset){
1:         ensureEnoughBuffer(offset);
0:         pos=offset;
1:     }
1:     
0:     public int size(){
1:         return pos;
1:     }
1:     
1:     
1: 
0:     public void writeBoolean(boolean v){
0:         ensureEnoughBuffer(1);
0:         buf[pos++]=(byte) (v?1:0);
1:     }
1: 
0:     public void writeByte(int v){
0:         ensureEnoughBuffer(1);
0:         buf[pos++]=(byte) (v>>>0);
1:     }
1: 
0:     public void writeShort(int v){
0:         ensureEnoughBuffer(2);
0:         buf[pos++]=(byte) (v>>>8);
0:         buf[pos++]=(byte) (v>>>0);
1:     }
1: 
0:     public void writeChar(int v){
0:         ensureEnoughBuffer(2);
0:         buf[pos++]=(byte) (v>>>8);
0:         buf[pos++]=(byte) (v>>>0);
1:     }
1: 
0:     public void writeInt(int v){
0:         ensureEnoughBuffer(4);
0:         buf[pos++]=(byte) (v>>>24);
0:         buf[pos++]=(byte) (v>>>16);
0:         buf[pos++]=(byte) (v>>>8);
0:         buf[pos++]=(byte) (v>>>0);
1:     }
1: 
0:     public void writeLong(long v){
0:         ensureEnoughBuffer(8);
0:         buf[pos++]=(byte) (v>>>56);
0:         buf[pos++]=(byte) (v>>>48);
0:         buf[pos++]=(byte) (v>>>40);
0:         buf[pos++]=(byte) (v>>>32);
0:         buf[pos++]=(byte) (v>>>24);
0:         buf[pos++]=(byte) (v>>>16);
0:         buf[pos++]=(byte) (v>>>8);
0:         buf[pos++]=(byte) (v>>>0);
1:     }
1: 
0:     public void writeFloat(float v) throws IOException{
1:         writeInt(Float.floatToIntBits(v));
1:     }
1: 
0:     public void writeDouble(double v) throws IOException{
1:         writeLong(Double.doubleToLongBits(v));
1:     }
1: 
0:     public void writeBytes(String s){
0:         int length=s.length();
0:         for(int i=0;i<length;i++){
0:             write((byte) s.charAt(i));
1:         }
1:     }
1: 
0:     public void writeChars(String s){
0:         int length=s.length();
0:         for(int i=0;i<length;i++){
0:             int c=s.charAt(i);
0:             write((c>>>8)&0xFF);
0:             write((c>>>0)&0xFF);
1:         }
1:     }
1: 
0:     public void writeUTF(String str) throws IOException{
0:         int strlen=str.length();
0:         int encodedsize=0;
0:         int c;
0:         for(int i=0;i<strlen;i++){
0:             c=str.charAt(i);
0:             if((c>=0x0001)&&(c<=0x007F)){
0:                 encodedsize++;
0:             }else if(c>0x07FF){
0:                 encodedsize+=3;
0:             }else{
0:                 encodedsize+=2;
1:             }
1:         }
0:         if(encodedsize>65535)
0:             throw new UTFDataFormatException("encoded string too long: "+encodedsize+" bytes");
0:         ensureEnoughBuffer(encodedsize+2);
0:         writeShort(encodedsize);
0:         int i=0;
0:         for(i=0;i<strlen;i++){
0:             c=str.charAt(i);
0:             if(!((c>=0x0001)&&(c<=0x007F)))
0:                 break;
0:             buf[pos++]=(byte) c;
1:         }
0:         for(;i<strlen;i++){
0:             c=str.charAt(i);
0:             if((c>=0x0001)&&(c<=0x007F)){
0:                 buf[pos++]=(byte) c;
0:             }else if(c>0x07FF){
0:                 buf[pos++]=(byte) (0xE0|((c>>12)&0x0F));
0:                 buf[pos++]=(byte) (0x80|((c>>6)&0x3F));
0:                 buf[pos++]=(byte) (0x80|((c>>0)&0x3F));
0:             }else{
0:                 buf[pos++]=(byte) (0xC0|((c>>6)&0x1F));
0:                 buf[pos++]=(byte) (0x80|((c>>0)&0x3F));
1:             }
1:         }
1:     }
1: 
0:     private void ensureEnoughBuffer(int newcount){
0:         if(newcount>buf.length){
0:             byte newbuf[]=new byte[Math.max(buf.length<<1,newcount)];
0:             System.arraycopy(buf,0,newbuf,0,pos);
0:             buf=newbuf;
1:         }
1:     }
1: }
============================================================================