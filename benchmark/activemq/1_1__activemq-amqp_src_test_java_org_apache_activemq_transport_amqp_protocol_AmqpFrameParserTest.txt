1:61a3eab: /**
1:61a3eab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:61a3eab:  * contributor license agreements.  See the NOTICE file distributed with
1:61a3eab:  * this work for additional information regarding copyright ownership.
1:61a3eab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:61a3eab:  * (the "License"); you may not use this file except in compliance with
1:61a3eab:  * the License.  You may obtain a copy of the License at
1:61a3eab:  *
1:61a3eab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:61a3eab:  *
1:61a3eab:  * Unless required by applicable law or agreed to in writing, software
1:61a3eab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:61a3eab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:61a3eab:  * See the License for the specific language governing permissions and
1:61a3eab:  * limitations under the License.
1:61a3eab:  */
1:61a3eab: package org.apache.activemq.transport.amqp.protocol;
1:61a3eab: 
1:61a3eab: import static org.junit.Assert.assertEquals;
1:61a3eab: import static org.junit.Assert.assertFalse;
1:61a3eab: import static org.junit.Assert.assertTrue;
1:61a3eab: import static org.junit.Assert.fail;
1:61a3eab: 
1:61a3eab: import java.nio.ByteBuffer;
1:61a3eab: import java.util.ArrayList;
1:61a3eab: import java.util.List;
1:61a3eab: 
1:61a3eab: import org.apache.activemq.transport.amqp.AmqpFrameParser;
1:61a3eab: import org.apache.activemq.transport.amqp.AmqpHeader;
1:61a3eab: import org.apache.activemq.transport.amqp.AmqpWireFormat;
1:61a3eab: import org.fusesource.hawtbuf.Buffer;
1:61a3eab: import org.fusesource.hawtbuf.DataByteArrayOutputStream;
1:61a3eab: import org.junit.Before;
1:61a3eab: import org.junit.Test;
1:61a3eab: import org.slf4j.Logger;
1:61a3eab: import org.slf4j.LoggerFactory;
1:61a3eab: 
1:61a3eab: public class AmqpFrameParserTest {
1:61a3eab: 
1:61a3eab:     private static final Logger LOG = LoggerFactory.getLogger(AmqpFrameParserTest.class);
1:61a3eab: 
1:61a3eab:     private final AmqpWireFormat amqpWireFormat = new AmqpWireFormat();
1:61a3eab: 
1:61a3eab:     private List<Object> frames;
1:61a3eab:     private AmqpFrameParser codec;
1:61a3eab: 
1:61a3eab:     private final int MESSAGE_SIZE = 5 * 1024 * 1024;
1:61a3eab: 
1:61a3eab:     @Before
1:61a3eab:     public void setUp() throws Exception {
1:61a3eab:         frames = new ArrayList<Object>();
1:61a3eab: 
1:61a3eab:         codec = new AmqpFrameParser(new AmqpFrameParser.AMQPFrameSink() {
1:61a3eab: 
1:61a3eab:             @Override
1:61a3eab:             public void onFrame(Object frame) {
1:61a3eab:                 frames.add(frame);
1:61a3eab:             }
1:61a3eab:         });
1:61a3eab:         codec.setWireFormat(amqpWireFormat);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testAMQPHeaderReadEmptyBuffer() throws Exception {
1:61a3eab:         codec.parse(ByteBuffer.allocate(0));
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testAMQPHeaderReadNull() throws Exception {
1:61a3eab:         codec.parse((ByteBuffer) null);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testAMQPHeaderRead() throws Exception {
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         codec.parse(inputHeader.getBuffer().toByteBuffer());
1:61a3eab: 
1:61a3eab:         assertEquals(1, frames.size());
1:61a3eab:         Object outputFrame = frames.get(0);
1:61a3eab:         assertTrue(outputFrame instanceof AmqpHeader);
1:61a3eab:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1:61a3eab: 
1:61a3eab:         assertHeadersEqual(inputHeader, outputHeader);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testAMQPHeaderReadSingleByteReads() throws Exception {
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         for (int i = 0; i < inputHeader.getBuffer().length(); ++i) {
1:61a3eab:             codec.parse(inputHeader.getBuffer().slice(i, i+1).toByteBuffer());
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         assertEquals(1, frames.size());
1:61a3eab:         Object outputFrame = frames.get(0);
1:61a3eab:         assertTrue(outputFrame instanceof AmqpHeader);
1:61a3eab:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1:61a3eab: 
1:61a3eab:         assertHeadersEqual(inputHeader, outputHeader);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testResetReadsNextAMQPHeaderMidParse() throws Exception {
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         DataByteArrayOutputStream headers = new DataByteArrayOutputStream();
1:61a3eab:         headers.write(inputHeader.getBuffer());
1:61a3eab:         headers.write(inputHeader.getBuffer());
1:61a3eab:         headers.write(inputHeader.getBuffer());
1:61a3eab:         headers.close();
1:61a3eab: 
1:61a3eab:         codec = new AmqpFrameParser(new AmqpFrameParser.AMQPFrameSink() {
1:61a3eab: 
1:61a3eab:             @Override
1:61a3eab:             public void onFrame(Object frame) {
1:61a3eab:                 frames.add(frame);
1:61a3eab:                 codec.reset();
1:61a3eab:             }
1:61a3eab:         });
1:61a3eab: 
1:61a3eab:         codec.parse(headers.toBuffer().toByteBuffer());
1:61a3eab: 
1:61a3eab:         assertEquals(3, frames.size());
1:61a3eab:         for (Object header : frames) {
1:61a3eab:             assertTrue(header instanceof AmqpHeader);
1:61a3eab:             AmqpHeader outputHeader = (AmqpHeader) header;
1:61a3eab:             assertHeadersEqual(inputHeader, outputHeader);
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testResetReadsNextAMQPHeader() throws Exception {
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         for (int i = 1; i <= 3; ++i) {
1:61a3eab:             codec.parse(inputHeader.getBuffer().toByteBuffer());
1:61a3eab:             codec.reset();
1:61a3eab: 
1:61a3eab:             assertEquals(i, frames.size());
1:61a3eab:             Object outputFrame = frames.get(i - 1);
1:61a3eab:             assertTrue(outputFrame instanceof AmqpHeader);
1:61a3eab:             AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1:61a3eab: 
1:61a3eab:             assertHeadersEqual(inputHeader, outputHeader);
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testResetReadsNextAMQPHeaderAfterContentParsed() throws Exception {
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:61a3eab:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:61a3eab:             CONTENTS[i] = 'a';
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:61a3eab:         output.write(inputHeader.getBuffer());
1:61a3eab:         output.writeInt(MESSAGE_SIZE + 4);
1:61a3eab:         output.write(CONTENTS);
1:61a3eab:         output.write(inputHeader.getBuffer());
1:61a3eab:         output.writeInt(MESSAGE_SIZE + 4);
1:61a3eab:         output.write(CONTENTS);
1:61a3eab:         output.close();
1:61a3eab: 
1:61a3eab:         codec = new AmqpFrameParser(new AmqpFrameParser.AMQPFrameSink() {
1:61a3eab: 
1:61a3eab:             @Override
1:61a3eab:             public void onFrame(Object frame) {
1:61a3eab:                 frames.add(frame);
1:61a3eab:                 if (!(frame instanceof AmqpHeader)) {
1:61a3eab:                     codec.reset();
1:61a3eab:                 }
1:61a3eab:             }
1:61a3eab:         });
1:61a3eab: 
1:61a3eab:         codec.parse(output.toBuffer().toByteBuffer());
1:61a3eab: 
1:61a3eab:         for (int i = 0; i < 4; ++i) {
1:61a3eab:             Object frame = frames.get(i);
1:61a3eab:             assertTrue(frame instanceof AmqpHeader);
1:61a3eab:             AmqpHeader outputHeader = (AmqpHeader) frame;
1:61a3eab:             assertHeadersEqual(inputHeader, outputHeader);
1:61a3eab:             frame = frames.get(++i);
1:61a3eab:             assertFalse(frame instanceof AmqpHeader);
1:61a3eab:             assertTrue(frame instanceof Buffer);
1:61a3eab:             assertEquals(MESSAGE_SIZE + 4, ((Buffer) frame).getLength());
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testHeaderAndFrameAreRead() throws Exception {
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:61a3eab:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:61a3eab:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:61a3eab:             CONTENTS[i] = 'a';
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         output.write(inputHeader.getBuffer());
1:61a3eab:         output.writeInt(MESSAGE_SIZE + 4);
1:61a3eab:         output.write(CONTENTS);
1:61a3eab:         output.close();
1:61a3eab: 
1:61a3eab:         codec.parse(output.toBuffer().toByteBuffer());
1:61a3eab: 
1:61a3eab:         assertEquals(2, frames.size());
1:61a3eab:         Object outputFrame = frames.get(0);
1:61a3eab:         assertTrue(outputFrame instanceof AmqpHeader);
1:61a3eab:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1:61a3eab: 
1:61a3eab:         assertHeadersEqual(inputHeader, outputHeader);
1:61a3eab: 
1:61a3eab:         outputFrame = frames.get(1);
1:61a3eab:         assertTrue(outputFrame instanceof Buffer);
1:61a3eab:         Buffer frame = (Buffer) outputFrame;
1:61a3eab:         assertEquals(MESSAGE_SIZE + 4, frame.length());
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testHeaderAndFrameAreReadNoWireFormat() throws Exception {
1:61a3eab:         codec.setWireFormat(null);
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:61a3eab:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:61a3eab:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:61a3eab:             CONTENTS[i] = 'a';
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         output.write(inputHeader.getBuffer());
1:61a3eab:         output.writeInt(MESSAGE_SIZE + 4);
1:61a3eab:         output.write(CONTENTS);
1:61a3eab:         output.close();
1:61a3eab: 
1:61a3eab:         codec.parse(output.toBuffer().toByteBuffer());
1:61a3eab: 
1:61a3eab:         assertEquals(2, frames.size());
1:61a3eab:         Object outputFrame = frames.get(0);
1:61a3eab:         assertTrue(outputFrame instanceof AmqpHeader);
1:61a3eab:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1:61a3eab: 
1:61a3eab:         assertHeadersEqual(inputHeader, outputHeader);
1:61a3eab: 
1:61a3eab:         outputFrame = frames.get(1);
1:61a3eab:         assertTrue(outputFrame instanceof Buffer);
1:61a3eab:         Buffer frame = (Buffer) outputFrame;
1:61a3eab:         assertEquals(MESSAGE_SIZE + 4, frame.length());
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testHeaderAndMulitpleFramesAreRead() throws Exception {
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         final int FRAME_SIZE_HEADER = 4;
1:61a3eab:         final int FRAME_SIZE = 65531;
1:61a3eab:         final int NUM_FRAMES = 5;
1:61a3eab: 
1:61a3eab:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:61a3eab:         byte[] CONTENTS = new byte[FRAME_SIZE];
1:61a3eab:         for (int i = 0; i < FRAME_SIZE; i++) {
1:61a3eab:             CONTENTS[i] = 'a';
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         output.write(inputHeader.getBuffer());
1:61a3eab:         for (int i = 0; i < NUM_FRAMES; ++i) {
1:61a3eab:             output.writeInt(FRAME_SIZE + FRAME_SIZE_HEADER);
1:61a3eab:             output.write(CONTENTS);
1:61a3eab:         }
1:61a3eab:         output.close();
1:61a3eab: 
1:61a3eab:         codec.parse(output.toBuffer().toByteBuffer());
1:61a3eab: 
1:61a3eab:         assertEquals(NUM_FRAMES + 1, frames.size());
1:61a3eab:         Object outputFrame = frames.get(0);
1:61a3eab:         assertTrue(outputFrame instanceof AmqpHeader);
1:61a3eab:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1:61a3eab: 
1:61a3eab:         assertHeadersEqual(inputHeader, outputHeader);
1:61a3eab: 
1:61a3eab:         for (int i = 1; i <= NUM_FRAMES; ++i) {
1:61a3eab:             outputFrame = frames.get(i);
1:61a3eab:             assertTrue(outputFrame instanceof Buffer);
1:61a3eab:             Buffer frame = (Buffer) outputFrame;
1:61a3eab:             assertEquals(FRAME_SIZE + FRAME_SIZE_HEADER, frame.length());
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testCodecRejectsToLargeFrames() throws Exception {
1:61a3eab:         amqpWireFormat.setMaxFrameSize(MESSAGE_SIZE);
1:61a3eab: 
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:61a3eab:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:61a3eab:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:61a3eab:             CONTENTS[i] = 'a';
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         output.write(inputHeader.getBuffer());
1:61a3eab:         output.writeInt(MESSAGE_SIZE + 4);
1:61a3eab:         output.write(CONTENTS);
1:61a3eab:         output.close();
1:61a3eab: 
1:61a3eab:         try {
1:61a3eab:             codec.parse(output.toBuffer().toByteBuffer());
1:61a3eab:             fail("Should have failed to read the large frame.");
1:61a3eab:         } catch (Exception ex) {
1:61a3eab:             LOG.debug("Caught expected error: {}", ex.getMessage());
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test
1:61a3eab:     public void testReadPartialPayload() throws Exception {
1:61a3eab:         AmqpHeader inputHeader = new AmqpHeader();
1:61a3eab: 
1:61a3eab:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:61a3eab:         byte[] HALF_CONTENT = new byte[MESSAGE_SIZE / 2];
1:61a3eab:         for (int i = 0; i < MESSAGE_SIZE / 2; i++) {
1:61a3eab:             HALF_CONTENT[i] = 'a';
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         output.write(inputHeader.getBuffer());
1:61a3eab:         output.writeInt(MESSAGE_SIZE + 4);
1:61a3eab:         output.close();
1:61a3eab: 
1:61a3eab:         codec.parse(output.toBuffer().toByteBuffer());
1:61a3eab:         assertEquals(1, frames.size());
1:61a3eab: 
1:61a3eab:         output = new DataByteArrayOutputStream();
1:61a3eab:         output.write(HALF_CONTENT);
1:61a3eab:         output.close();
1:61a3eab: 
1:61a3eab:         codec.parse(output.toBuffer().toByteBuffer());
1:61a3eab:         assertEquals(1, frames.size());
1:61a3eab: 
1:61a3eab:         output = new DataByteArrayOutputStream();
1:61a3eab:         output.write(HALF_CONTENT);
1:61a3eab:         output.close();
1:61a3eab: 
1:61a3eab:         codec.parse(output.toBuffer().toByteBuffer());
1:61a3eab:         assertEquals(2, frames.size());
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     private void assertHeadersEqual(AmqpHeader expected, AmqpHeader actual) {
1:61a3eab:         assertTrue(expected.getBuffer().equals(actual.getBuffer()));
1:61a3eab:     }
1:61a3eab: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:61a3eab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.transport.amqp.AmqpFrameParser;
1: import org.apache.activemq.transport.amqp.AmqpHeader;
1: import org.apache.activemq.transport.amqp.AmqpWireFormat;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.fusesource.hawtbuf.DataByteArrayOutputStream;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AmqpFrameParserTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpFrameParserTest.class);
1: 
1:     private final AmqpWireFormat amqpWireFormat = new AmqpWireFormat();
1: 
1:     private List<Object> frames;
1:     private AmqpFrameParser codec;
1: 
1:     private final int MESSAGE_SIZE = 5 * 1024 * 1024;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         frames = new ArrayList<Object>();
1: 
1:         codec = new AmqpFrameParser(new AmqpFrameParser.AMQPFrameSink() {
1: 
1:             @Override
1:             public void onFrame(Object frame) {
1:                 frames.add(frame);
1:             }
1:         });
1:         codec.setWireFormat(amqpWireFormat);
1:     }
1: 
1:     @Test
1:     public void testAMQPHeaderReadEmptyBuffer() throws Exception {
1:         codec.parse(ByteBuffer.allocate(0));
1:     }
1: 
1:     @Test
1:     public void testAMQPHeaderReadNull() throws Exception {
1:         codec.parse((ByteBuffer) null);
1:     }
1: 
1:     @Test
1:     public void testAMQPHeaderRead() throws Exception {
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         codec.parse(inputHeader.getBuffer().toByteBuffer());
1: 
1:         assertEquals(1, frames.size());
1:         Object outputFrame = frames.get(0);
1:         assertTrue(outputFrame instanceof AmqpHeader);
1:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1: 
1:         assertHeadersEqual(inputHeader, outputHeader);
1:     }
1: 
1:     @Test
1:     public void testAMQPHeaderReadSingleByteReads() throws Exception {
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         for (int i = 0; i < inputHeader.getBuffer().length(); ++i) {
1:             codec.parse(inputHeader.getBuffer().slice(i, i+1).toByteBuffer());
1:         }
1: 
1:         assertEquals(1, frames.size());
1:         Object outputFrame = frames.get(0);
1:         assertTrue(outputFrame instanceof AmqpHeader);
1:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1: 
1:         assertHeadersEqual(inputHeader, outputHeader);
1:     }
1: 
1:     @Test
1:     public void testResetReadsNextAMQPHeaderMidParse() throws Exception {
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         DataByteArrayOutputStream headers = new DataByteArrayOutputStream();
1:         headers.write(inputHeader.getBuffer());
1:         headers.write(inputHeader.getBuffer());
1:         headers.write(inputHeader.getBuffer());
1:         headers.close();
1: 
1:         codec = new AmqpFrameParser(new AmqpFrameParser.AMQPFrameSink() {
1: 
1:             @Override
1:             public void onFrame(Object frame) {
1:                 frames.add(frame);
1:                 codec.reset();
1:             }
1:         });
1: 
1:         codec.parse(headers.toBuffer().toByteBuffer());
1: 
1:         assertEquals(3, frames.size());
1:         for (Object header : frames) {
1:             assertTrue(header instanceof AmqpHeader);
1:             AmqpHeader outputHeader = (AmqpHeader) header;
1:             assertHeadersEqual(inputHeader, outputHeader);
1:         }
1:     }
1: 
1:     @Test
1:     public void testResetReadsNextAMQPHeader() throws Exception {
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         for (int i = 1; i <= 3; ++i) {
1:             codec.parse(inputHeader.getBuffer().toByteBuffer());
1:             codec.reset();
1: 
1:             assertEquals(i, frames.size());
1:             Object outputFrame = frames.get(i - 1);
1:             assertTrue(outputFrame instanceof AmqpHeader);
1:             AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1: 
1:             assertHeadersEqual(inputHeader, outputHeader);
1:         }
1:     }
1: 
1:     @Test
1:     public void testResetReadsNextAMQPHeaderAfterContentParsed() throws Exception {
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:             CONTENTS[i] = 'a';
1:         }
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         output.write(inputHeader.getBuffer());
1:         output.writeInt(MESSAGE_SIZE + 4);
1:         output.write(CONTENTS);
1:         output.write(inputHeader.getBuffer());
1:         output.writeInt(MESSAGE_SIZE + 4);
1:         output.write(CONTENTS);
1:         output.close();
1: 
1:         codec = new AmqpFrameParser(new AmqpFrameParser.AMQPFrameSink() {
1: 
1:             @Override
1:             public void onFrame(Object frame) {
1:                 frames.add(frame);
1:                 if (!(frame instanceof AmqpHeader)) {
1:                     codec.reset();
1:                 }
1:             }
1:         });
1: 
1:         codec.parse(output.toBuffer().toByteBuffer());
1: 
1:         for (int i = 0; i < 4; ++i) {
1:             Object frame = frames.get(i);
1:             assertTrue(frame instanceof AmqpHeader);
1:             AmqpHeader outputHeader = (AmqpHeader) frame;
1:             assertHeadersEqual(inputHeader, outputHeader);
1:             frame = frames.get(++i);
1:             assertFalse(frame instanceof AmqpHeader);
1:             assertTrue(frame instanceof Buffer);
1:             assertEquals(MESSAGE_SIZE + 4, ((Buffer) frame).getLength());
1:         }
1:     }
1: 
1:     @Test
1:     public void testHeaderAndFrameAreRead() throws Exception {
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:             CONTENTS[i] = 'a';
1:         }
1: 
1:         output.write(inputHeader.getBuffer());
1:         output.writeInt(MESSAGE_SIZE + 4);
1:         output.write(CONTENTS);
1:         output.close();
1: 
1:         codec.parse(output.toBuffer().toByteBuffer());
1: 
1:         assertEquals(2, frames.size());
1:         Object outputFrame = frames.get(0);
1:         assertTrue(outputFrame instanceof AmqpHeader);
1:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1: 
1:         assertHeadersEqual(inputHeader, outputHeader);
1: 
1:         outputFrame = frames.get(1);
1:         assertTrue(outputFrame instanceof Buffer);
1:         Buffer frame = (Buffer) outputFrame;
1:         assertEquals(MESSAGE_SIZE + 4, frame.length());
1:     }
1: 
1:     @Test
1:     public void testHeaderAndFrameAreReadNoWireFormat() throws Exception {
1:         codec.setWireFormat(null);
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:             CONTENTS[i] = 'a';
1:         }
1: 
1:         output.write(inputHeader.getBuffer());
1:         output.writeInt(MESSAGE_SIZE + 4);
1:         output.write(CONTENTS);
1:         output.close();
1: 
1:         codec.parse(output.toBuffer().toByteBuffer());
1: 
1:         assertEquals(2, frames.size());
1:         Object outputFrame = frames.get(0);
1:         assertTrue(outputFrame instanceof AmqpHeader);
1:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1: 
1:         assertHeadersEqual(inputHeader, outputHeader);
1: 
1:         outputFrame = frames.get(1);
1:         assertTrue(outputFrame instanceof Buffer);
1:         Buffer frame = (Buffer) outputFrame;
1:         assertEquals(MESSAGE_SIZE + 4, frame.length());
1:     }
1: 
1:     @Test
1:     public void testHeaderAndMulitpleFramesAreRead() throws Exception {
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         final int FRAME_SIZE_HEADER = 4;
1:         final int FRAME_SIZE = 65531;
1:         final int NUM_FRAMES = 5;
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         byte[] CONTENTS = new byte[FRAME_SIZE];
1:         for (int i = 0; i < FRAME_SIZE; i++) {
1:             CONTENTS[i] = 'a';
1:         }
1: 
1:         output.write(inputHeader.getBuffer());
1:         for (int i = 0; i < NUM_FRAMES; ++i) {
1:             output.writeInt(FRAME_SIZE + FRAME_SIZE_HEADER);
1:             output.write(CONTENTS);
1:         }
1:         output.close();
1: 
1:         codec.parse(output.toBuffer().toByteBuffer());
1: 
1:         assertEquals(NUM_FRAMES + 1, frames.size());
1:         Object outputFrame = frames.get(0);
1:         assertTrue(outputFrame instanceof AmqpHeader);
1:         AmqpHeader outputHeader = (AmqpHeader) outputFrame;
1: 
1:         assertHeadersEqual(inputHeader, outputHeader);
1: 
1:         for (int i = 1; i <= NUM_FRAMES; ++i) {
1:             outputFrame = frames.get(i);
1:             assertTrue(outputFrame instanceof Buffer);
1:             Buffer frame = (Buffer) outputFrame;
1:             assertEquals(FRAME_SIZE + FRAME_SIZE_HEADER, frame.length());
1:         }
1:     }
1: 
1:     @Test
1:     public void testCodecRejectsToLargeFrames() throws Exception {
1:         amqpWireFormat.setMaxFrameSize(MESSAGE_SIZE);
1: 
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         byte[] CONTENTS = new byte[MESSAGE_SIZE];
1:         for (int i = 0; i < MESSAGE_SIZE; i++) {
1:             CONTENTS[i] = 'a';
1:         }
1: 
1:         output.write(inputHeader.getBuffer());
1:         output.writeInt(MESSAGE_SIZE + 4);
1:         output.write(CONTENTS);
1:         output.close();
1: 
1:         try {
1:             codec.parse(output.toBuffer().toByteBuffer());
1:             fail("Should have failed to read the large frame.");
1:         } catch (Exception ex) {
1:             LOG.debug("Caught expected error: {}", ex.getMessage());
1:         }
1:     }
1: 
1:     @Test
1:     public void testReadPartialPayload() throws Exception {
1:         AmqpHeader inputHeader = new AmqpHeader();
1: 
1:         DataByteArrayOutputStream output = new DataByteArrayOutputStream();
1:         byte[] HALF_CONTENT = new byte[MESSAGE_SIZE / 2];
1:         for (int i = 0; i < MESSAGE_SIZE / 2; i++) {
1:             HALF_CONTENT[i] = 'a';
1:         }
1: 
1:         output.write(inputHeader.getBuffer());
1:         output.writeInt(MESSAGE_SIZE + 4);
1:         output.close();
1: 
1:         codec.parse(output.toBuffer().toByteBuffer());
1:         assertEquals(1, frames.size());
1: 
1:         output = new DataByteArrayOutputStream();
1:         output.write(HALF_CONTENT);
1:         output.close();
1: 
1:         codec.parse(output.toBuffer().toByteBuffer());
1:         assertEquals(1, frames.size());
1: 
1:         output = new DataByteArrayOutputStream();
1:         output.write(HALF_CONTENT);
1:         output.close();
1: 
1:         codec.parse(output.toBuffer().toByteBuffer());
1:         assertEquals(2, frames.size());
1:     }
1: 
1:     private void assertHeadersEqual(AmqpHeader expected, AmqpHeader actual) {
1:         assertTrue(expected.getBuffer().equals(actual.getBuffer()));
1:     }
1: }
============================================================================