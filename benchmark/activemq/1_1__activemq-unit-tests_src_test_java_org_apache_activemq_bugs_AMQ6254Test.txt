1:b027e65: /*
1:b027e65:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b027e65:  * contributor license agreements.  See the NOTICE file distributed with
1:b027e65:  * this work for additional information regarding copyright ownership.
1:b027e65:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b027e65:  * (the "License"); you may not use this file except in compliance with
1:b027e65:  * the License.  You may obtain a copy of the License at
1:b027e65:  *
1:b027e65:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b027e65:  *
1:b027e65:  * Unless required by applicable law or agreed to in writing, software
1:b027e65:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b027e65:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b027e65:  * See the License for the specific language governing permissions and
1:b027e65:  * limitations under the License.
1:b027e65:  */
1:b027e65: package org.apache.activemq.bugs;
1:b027e65: 
1:b027e65: import static org.junit.Assert.assertEquals;
1:b027e65: import static org.junit.Assert.assertNotNull;
1:b027e65: import static org.junit.Assert.assertTrue;
1:b027e65: 
1:b027e65: import java.util.ArrayList;
1:b027e65: import java.util.Arrays;
1:b027e65: import java.util.Collection;
1:b027e65: import java.util.List;
1:b027e65: import java.util.Set;
1:b027e65: 
1:b027e65: import javax.jms.Connection;
1:3c342ff: import javax.jms.JMSException;
1:b027e65: import javax.jms.MessageProducer;
1:b027e65: import javax.jms.Session;
1:b027e65: import javax.jms.TextMessage;
1:b027e65: import javax.jms.TopicSubscriber;
1:3c342ff: import javax.management.MalformedObjectNameException;
1:3c342ff: import javax.management.ObjectName;
1:b027e65: 
1:b027e65: import org.apache.activemq.ActiveMQConnectionFactory;
1:b027e65: import org.apache.activemq.broker.BrokerPlugin;
1:b027e65: import org.apache.activemq.broker.BrokerService;
1:3c342ff: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:b027e65: import org.apache.activemq.broker.region.Destination;
1:b027e65: import org.apache.activemq.broker.region.RegionBroker;
1:b027e65: import org.apache.activemq.broker.region.TopicRegion;
1:b027e65: import org.apache.activemq.command.ActiveMQDestination;
1:b027e65: import org.apache.activemq.command.ActiveMQTopic;
1:b027e65: import org.apache.activemq.filter.DestinationMapEntry;
1:b027e65: import org.apache.activemq.leveldb.LevelDBStoreFactory;
1:b027e65: import org.apache.activemq.security.AuthenticationUser;
1:b027e65: import org.apache.activemq.security.AuthorizationEntry;
1:b027e65: import org.apache.activemq.security.AuthorizationPlugin;
1:b027e65: import org.apache.activemq.security.DefaultAuthorizationMap;
1:b027e65: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:b027e65: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
1:b027e65: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:b027e65: import org.apache.activemq.util.Wait;
1:b027e65: import org.junit.After;
1:b027e65: import org.junit.Before;
1:b027e65: import org.junit.Test;
1:b027e65: import org.junit.runner.RunWith;
1:b027e65: import org.junit.runners.Parameterized;
1:b027e65: import org.junit.runners.Parameterized.Parameters;
1:b027e65: import org.slf4j.Logger;
1:b027e65: import org.slf4j.LoggerFactory;
1:b027e65: 
1:b027e65: @RunWith(Parameterized.class)
1:b027e65: public class AMQ6254Test {
1:b027e65: 
1:b027e65:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6254Test.class);
1:b027e65: 
1:b027e65:     private static final String KAHADB = "KahaDB";
1:b027e65:     private static final String LEVELDB = "LevelDB";
1:b027e65: 
1:b027e65:     private BrokerService brokerService;
1:b027e65: 
1:b027e65:     private String topicA = "alphabet.a";
1:b027e65:     private String topicB = "alphabet.b";
1:b027e65: 
1:b027e65:     private String persistenceAdapterName;
1:b027e65:     private boolean pluginsEnabled;
1:b027e65: 
1:b027e65:     @Parameters(name="{0} -> plugins = {1}")
1:b027e65:     public static Collection<Object[]> data() {
1:b027e65:         return Arrays.asList(new Object[][] {
1:b027e65:                 {KAHADB, true },
1:b027e65:                 {KAHADB, false },
1:b027e65:                 {LEVELDB, true },
1:b027e65:                 {LEVELDB, false },
1:b027e65:             });
1:b027e65:     }
1:b027e65: 
1:b027e65:     public AMQ6254Test(String persistenceAdapterName, boolean pluginsEnabled) {
1:b027e65:         this.persistenceAdapterName = persistenceAdapterName;
1:b027e65:         this.pluginsEnabled = pluginsEnabled;
1:b027e65:     }
1:b027e65: 
1:b027e65:     @Test(timeout = 60000)
1:b027e65:     public void testReactivateKeepaliveSubscription() throws Exception {
1:b027e65:         // Create wild card durable subscription
1:b027e65:         Connection connection = createConnection();
1:b027e65:         connection.setClientID("cliID");
1:b027e65:         connection.start();
1:b027e65:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b027e65:         TopicSubscriber subscriber = session.createDurableSubscriber(session.createTopic("alphabet.>"), "alphabet.>");
1:b027e65: 
1:b027e65:         // Send message on Topic A
1:b027e65:         connection = createConnection();
1:b027e65:         connection.start();
1:b027e65:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b027e65:         MessageProducer producer = session.createProducer(session.createTopic(topicA));
1:b027e65:         producer.send(session.createTextMessage("Hello A"));
1:b027e65: 
1:b027e65:         // Verify that message is received
1:b027e65:         TextMessage message = (TextMessage) subscriber.receive(2000);
1:b027e65:         assertNotNull("Message not received.", message);
1:b027e65:         assertEquals("Hello A", message.getText());
1:b027e65: 
1:3c342ff:         assertTrue("Should have only one consumer", Wait.waitFor(new Wait.Condition() {
1:3c342ff: 
1:3c342ff:             @Override
1:3c342ff:             public boolean isSatisified() throws Exception {
1:3c342ff:                 return getProxyToTopic(topicA).getConsumerCount() == 1;
1:3c342ff:             }
1:3c342ff:         }));
1:3c342ff: 
1:b027e65:         subscriber.close();
1:b027e65: 
1:3c342ff:         assertTrue("Should have one message consumed", Wait.waitFor(new Wait.Condition() {
1:3c342ff: 
1:3c342ff:             @Override
1:3c342ff:             public boolean isSatisified() throws Exception {
1:3c342ff:                 return getProxyToTopic(topicA).getDequeueCount() == 1;
1:3c342ff:             }
1:3c342ff:         }));
1:3c342ff: 
1:3c342ff:         connection.close();
1:3c342ff: 
1:b027e65:         assertTrue("Should have only one destination", Wait.waitFor(new Wait.Condition() {
1:b027e65: 
1:b027e65:             @Override
1:b027e65:             public boolean isSatisified() throws Exception {
1:b027e65:                 Destination destA = getDestination(topicA);
1:b027e65:                 return destA.getDestinationStatistics().getConsumers().getCount() == 1;
1:b027e65:             }
1:b027e65:         }));
1:b027e65: 
1:3c342ff:         assertTrue("Should have only one inactive subscription", Wait.waitFor(new Wait.Condition() {
1:3c342ff: 
1:3c342ff:             @Override
1:3c342ff:             public boolean isSatisified() throws Exception {
1:3c342ff:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:3c342ff:             }
1:3c342ff:         }));
1:3c342ff: 
1:b027e65:         // Restart broker
1:b027e65:         brokerService.stop();
1:b027e65:         brokerService.waitUntilStopped();
1:b027e65:         LOG.info("Broker stopped");
1:b027e65: 
1:b027e65:         brokerService = createBroker(false);
1:b027e65:         brokerService.start();
1:b027e65:         brokerService.waitUntilStarted();
1:b027e65:         LOG.info("Broker restarted");
1:b027e65: 
1:b027e65:         // Recreate wild card durable subscription
1:b027e65:         connection = createConnection();
1:b027e65:         connection.setClientID("cliID");
1:b027e65:         connection.start();
1:b027e65:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b027e65:         subscriber = session.createDurableSubscriber(session.createTopic("alphabet.>"), "alphabet.>");
1:b027e65: 
1:b027e65:         // Send message on Topic B
1:b027e65:         connection = createConnection();
1:b027e65:         connection.start();
1:b027e65:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b027e65:         producer = session.createProducer(session.createTopic(topicA));
1:b027e65:         producer.send(session.createTextMessage("Hello Again A"));
1:b027e65: 
1:b027e65:         // Verify both messages are received
1:b027e65:         message = (TextMessage) subscriber.receive(2000);
1:b027e65:         assertNotNull("Message not received.", message);
1:b027e65:         assertEquals("Hello Again A", message.getText());
1:b027e65: 
1:b027e65:         // Verify that we still have a single subscription
1:b027e65:         assertTrue("Should have only one destination", Wait.waitFor(new Wait.Condition() {
1:b027e65: 
1:b027e65:             @Override
1:b027e65:             public boolean isSatisified() throws Exception {
1:b027e65:                 Destination destA = getDestination(topicA);
1:b027e65:                 return destA.getDestinationStatistics().getConsumers().getCount() == 1;
1:b027e65:             }
1:b027e65:         }));
1:b027e65: 
1:b027e65:         subscriber.close();
1:b027e65:         connection.close();
1:b027e65:     }
1:b027e65: 
1:b027e65:     private Destination getDestination(String topicName) {
1:b027e65:         RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:b027e65:         TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1:b027e65: 
1:b027e65:         Set<Destination> destinations = topicRegion.getDestinations(new ActiveMQTopic(topicName));
1:b027e65:         assertEquals(1, destinations.size());
1:b027e65: 
1:b027e65:         return destinations.iterator().next();
1:b027e65:     }
1:b027e65: 
1:b027e65:     private Connection createConnection() throws Exception {
1:b027e65:         String connectionURI = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:b027e65:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionURI);
1:b027e65:         return cf.createConnection("system", "manager");
1:b027e65:     }
1:b027e65: 
1:b027e65:     @Before
1:b027e65:     public void setUp() throws Exception {
1:b027e65:         brokerService = createBroker(true);
1:b027e65:         brokerService.start();
1:b027e65:         brokerService.waitUntilStarted();
1:b027e65:     }
1:b027e65: 
1:b027e65:     @After
1:b027e65:     public void tearDown() throws Exception {
1:b027e65:         if (brokerService != null) {
1:b027e65:             brokerService.stop();
1:b027e65:             brokerService.waitUntilStopped();
1:b027e65:             brokerService = null;
1:b027e65:         }
1:b027e65:     }
1:b027e65: 
1:b027e65:     protected BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:b027e65:         BrokerService answer = new BrokerService();
1:b027e65: 
1:b027e65:         answer.setKeepDurableSubsActive(true);
1:3c342ff:         answer.setUseJmx(true);
1:b027e65:         answer.setPersistent(true);
1:b027e65:         answer.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:b027e65:         answer.setAdvisorySupport(false);
1:b027e65: 
1:b027e65:         switch (persistenceAdapterName) {
1:b027e65:             case KAHADB:
1:b027e65:                 answer.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:b027e65:                 break;
1:b027e65:             case LEVELDB:
1:b027e65:                 answer.setPersistenceFactory(new LevelDBStoreFactory());
1:b027e65:                 break;
1:b027e65:         }
1:b027e65: 
1:b027e65:         answer.addConnector("tcp://localhost:0");
1:b027e65: 
1:b027e65:         if (pluginsEnabled) {
1:b027e65:             ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();
1:b027e65: 
1:b027e65:             BrokerPlugin authenticationPlugin = configureAuthentication();
1:b027e65:             if (authenticationPlugin != null) {
1:b027e65:                 plugins.add(configureAuthorization());
1:b027e65:             }
1:b027e65: 
1:b027e65:             BrokerPlugin authorizationPlugin = configureAuthorization();
1:b027e65:             if (authorizationPlugin != null) {
1:b027e65:                 plugins.add(configureAuthentication());
1:b027e65:             }
1:b027e65: 
1:b027e65:             if (!plugins.isEmpty()) {
1:b027e65:                 BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:b027e65:                 answer.setPlugins(plugins.toArray(array));
1:b027e65:             }
1:b027e65:         }
1:b027e65: 
1:b027e65:         ActiveMQDestination[] destinations = { new ActiveMQTopic(topicA), new ActiveMQTopic(topicB) };
1:b027e65:         answer.setDestinations(destinations);
1:b027e65:         return answer;
1:b027e65:     }
1:b027e65: 
1:b027e65:     protected BrokerPlugin configureAuthentication() throws Exception {
1:b027e65:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:b027e65:         users.add(new AuthenticationUser("system", "manager", "users,admins"));
1:b027e65:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1:b027e65: 
1:b027e65:         return authenticationPlugin;
1:b027e65:     }
1:b027e65: 
1:b027e65:     protected BrokerPlugin configureAuthorization() throws Exception {
1:b027e65: 
1:b027e65:         @SuppressWarnings("rawtypes")
1:b027e65:         List<DestinationMapEntry> authorizationEntries = new ArrayList<DestinationMapEntry>();
1:b027e65: 
1:b027e65:         AuthorizationEntry entry = new AuthorizationEntry();
1:b027e65:         entry.setQueue(">");
1:b027e65:         entry.setRead("admins");
1:b027e65:         entry.setWrite("admins");
1:b027e65:         entry.setAdmin("admins");
1:b027e65:         authorizationEntries.add(entry);
1:b027e65:         entry = new AuthorizationEntry();
1:b027e65:         entry.setQueue("USERS.>");
1:b027e65:         entry.setRead("users");
1:b027e65:         entry.setWrite("users");
1:b027e65:         entry.setAdmin("users");
1:b027e65:         authorizationEntries.add(entry);
1:b027e65:         entry = new AuthorizationEntry();
1:b027e65:         entry.setQueue("GUEST.>");
1:b027e65:         entry.setRead("guests");
1:b027e65:         entry.setWrite("guests,users");
1:b027e65:         entry.setAdmin("guests,users");
1:b027e65:         authorizationEntries.add(entry);
1:b027e65:         entry = new AuthorizationEntry();
1:b027e65:         entry.setTopic(">");
1:b027e65:         entry.setRead("admins");
1:b027e65:         entry.setWrite("admins");
1:b027e65:         entry.setAdmin("admins");
1:b027e65:         authorizationEntries.add(entry);
1:b027e65:         entry = new AuthorizationEntry();
1:b027e65:         entry.setTopic("USERS.>");
1:b027e65:         entry.setRead("users");
1:b027e65:         entry.setWrite("users");
1:b027e65:         entry.setAdmin("users");
1:b027e65:         authorizationEntries.add(entry);
1:b027e65:         entry = new AuthorizationEntry();
1:b027e65:         entry.setTopic("GUEST.>");
1:b027e65:         entry.setRead("guests");
1:b027e65:         entry.setWrite("guests,users");
1:b027e65:         entry.setAdmin("guests,users");
1:b027e65:         authorizationEntries.add(entry);
1:b027e65:         entry = new AuthorizationEntry();
1:b027e65:         entry.setTopic("ActiveMQ.Advisory.>");
1:b027e65:         entry.setRead("guests,users");
1:b027e65:         entry.setWrite("guests,users");
1:b027e65:         entry.setAdmin("guests,users");
1:b027e65:         authorizationEntries.add(entry);
1:b027e65: 
1:b027e65:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:b027e65:         tempEntry.setRead("admins");
1:b027e65:         tempEntry.setWrite("admins");
1:b027e65:         tempEntry.setAdmin("admins");
1:b027e65: 
1:b027e65:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:b027e65:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:b027e65:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1:b027e65: 
1:b027e65:         return authorizationPlugin;
1:b027e65:     }
1:3c342ff: 
1:3c342ff:     protected TopicViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:3c342ff:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="+name);
1:3c342ff:         TopicViewMBean proxy = (TopicViewMBean) brokerService.getManagementContext()
1:3c342ff:                 .newProxyInstance(queueViewMBeanName, TopicViewMBean.class, true);
1:3c342ff:         return proxy;
1:3c342ff:     }
1:b027e65: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3c342ff
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Should have only one consumer", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToTopic(topicA).getConsumerCount() == 1;
1:             }
1:         }));
1: 
1:         assertTrue("Should have one message consumed", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToTopic(topicA).getDequeueCount() == 1;
1:             }
1:         }));
1: 
1:         connection.close();
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Should have only one inactive subscription", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
/////////////////////////////////////////////////////////////////////////
1:         answer.setUseJmx(true);
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected TopicViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="+name);
1:         TopicViewMBean proxy = (TopicViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, TopicViewMBean.class, true);
1:         return proxy;
1:     }
commit:b027e65
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.TopicRegion;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.leveldb.LevelDBStoreFactory;
1: import org.apache.activemq.security.AuthenticationUser;
1: import org.apache.activemq.security.AuthorizationEntry;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.DefaultAuthorizationMap;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: @RunWith(Parameterized.class)
1: public class AMQ6254Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6254Test.class);
1: 
1:     private static final String KAHADB = "KahaDB";
1:     private static final String LEVELDB = "LevelDB";
1: 
1:     private BrokerService brokerService;
1: 
1:     private String topicA = "alphabet.a";
1:     private String topicB = "alphabet.b";
1: 
1:     private String persistenceAdapterName;
1:     private boolean pluginsEnabled;
1: 
1:     @Parameters(name="{0} -> plugins = {1}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {KAHADB, true },
1:                 {KAHADB, false },
1:                 {LEVELDB, true },
1:                 {LEVELDB, false },
1:             });
1:     }
1: 
1:     public AMQ6254Test(String persistenceAdapterName, boolean pluginsEnabled) {
1:         this.persistenceAdapterName = persistenceAdapterName;
1:         this.pluginsEnabled = pluginsEnabled;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReactivateKeepaliveSubscription() throws Exception {
1:         // Create wild card durable subscription
1:         Connection connection = createConnection();
1:         connection.setClientID("cliID");
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber subscriber = session.createDurableSubscriber(session.createTopic("alphabet.>"), "alphabet.>");
1: 
1:         // Send message on Topic A
1:         connection = createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(session.createTopic(topicA));
1:         producer.send(session.createTextMessage("Hello A"));
1: 
1:         // Verify that message is received
1:         TextMessage message = (TextMessage) subscriber.receive(2000);
1:         assertNotNull("Message not received.", message);
1:         assertEquals("Hello A", message.getText());
1: 
1:         subscriber.close();
1: 
1:         assertTrue("Should have only one destination", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Destination destA = getDestination(topicA);
1:                 return destA.getDestinationStatistics().getConsumers().getCount() == 1;
1:             }
1:         }));
1: 
1:         // Restart broker
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:         LOG.info("Broker stopped");
1: 
1:         brokerService = createBroker(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:         LOG.info("Broker restarted");
1: 
1:         // Recreate wild card durable subscription
1:         connection = createConnection();
1:         connection.setClientID("cliID");
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         subscriber = session.createDurableSubscriber(session.createTopic("alphabet.>"), "alphabet.>");
1: 
1:         // Send message on Topic B
1:         connection = createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(session.createTopic(topicA));
1:         producer.send(session.createTextMessage("Hello Again A"));
1: 
1:         // Verify both messages are received
1:         message = (TextMessage) subscriber.receive(2000);
1:         assertNotNull("Message not received.", message);
1:         assertEquals("Hello Again A", message.getText());
1: 
1:         // Verify that we still have a single subscription
1:         assertTrue("Should have only one destination", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Destination destA = getDestination(topicA);
1:                 return destA.getDestinationStatistics().getConsumers().getCount() == 1;
1:             }
1:         }));
1: 
1:         subscriber.close();
1:         connection.close();
1:     }
1: 
1:     private Destination getDestination(String topicName) {
1:         RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:         TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1: 
1:         Set<Destination> destinations = topicRegion.getDestinations(new ActiveMQTopic(topicName));
1:         assertEquals(1, destinations.size());
1: 
1:         return destinations.iterator().next();
1:     }
1: 
1:     private Connection createConnection() throws Exception {
1:         String connectionURI = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionURI);
1:         return cf.createConnection("system", "manager");
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = createBroker(true);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:             brokerService = null;
1:         }
1:     }
1: 
1:     protected BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:         BrokerService answer = new BrokerService();
1: 
1:         answer.setKeepDurableSubsActive(true);
0:         answer.setUseJmx(false);
1:         answer.setPersistent(true);
1:         answer.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         answer.setAdvisorySupport(false);
1: 
1:         switch (persistenceAdapterName) {
1:             case KAHADB:
1:                 answer.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:                 break;
1:             case LEVELDB:
1:                 answer.setPersistenceFactory(new LevelDBStoreFactory());
1:                 break;
1:         }
1: 
1:         answer.addConnector("tcp://localhost:0");
1: 
1:         if (pluginsEnabled) {
1:             ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();
1: 
1:             BrokerPlugin authenticationPlugin = configureAuthentication();
1:             if (authenticationPlugin != null) {
1:                 plugins.add(configureAuthorization());
1:             }
1: 
1:             BrokerPlugin authorizationPlugin = configureAuthorization();
1:             if (authorizationPlugin != null) {
1:                 plugins.add(configureAuthentication());
1:             }
1: 
1:             if (!plugins.isEmpty()) {
1:                 BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:                 answer.setPlugins(plugins.toArray(array));
1:             }
1:         }
1: 
1:         ActiveMQDestination[] destinations = { new ActiveMQTopic(topicA), new ActiveMQTopic(topicB) };
1:         answer.setDestinations(destinations);
1:         return answer;
1:     }
1: 
1:     protected BrokerPlugin configureAuthentication() throws Exception {
1:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:         users.add(new AuthenticationUser("system", "manager", "users,admins"));
1:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1: 
1:         return authenticationPlugin;
1:     }
1: 
1:     protected BrokerPlugin configureAuthorization() throws Exception {
1: 
1:         @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> authorizationEntries = new ArrayList<DestinationMapEntry>();
1: 
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setQueue(">");
1:         entry.setRead("admins");
1:         entry.setWrite("admins");
1:         entry.setAdmin("admins");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("USERS.>");
1:         entry.setRead("users");
1:         entry.setWrite("users");
1:         entry.setAdmin("users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("GUEST.>");
1:         entry.setRead("guests");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic(">");
1:         entry.setRead("admins");
1:         entry.setWrite("admins");
1:         entry.setAdmin("admins");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("USERS.>");
1:         entry.setRead("users");
1:         entry.setWrite("users");
1:         entry.setAdmin("users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("GUEST.>");
1:         entry.setRead("guests");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("ActiveMQ.Advisory.>");
1:         entry.setRead("guests,users");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1: 
1:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:         tempEntry.setRead("admins");
1:         tempEntry.setWrite("admins");
1:         tempEntry.setAdmin("admins");
1: 
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1: 
1:         return authorizationPlugin;
1:     }
1: }
============================================================================