1:4b4cf7c: /**
1:4b4cf7c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b4cf7c:  * contributor license agreements.  See the NOTICE file distributed with
1:4b4cf7c:  * this work for additional information regarding copyright ownership.
1:4b4cf7c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b4cf7c:  * (the "License"); you may not use this file except in compliance with
1:4b4cf7c:  * the License.  You may obtain a copy of the License at
1:4b4cf7c:  *
1:4b4cf7c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b4cf7c:  *
1:4b4cf7c:  * Unless required by applicable law or agreed to in writing, software
1:4b4cf7c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b4cf7c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b4cf7c:  * See the License for the specific language governing permissions and
1:4b4cf7c:  * limitations under the License.
1:4b4cf7c:  */
1:4b4cf7c: package org.apache.activemq.transport.amqp.interop;
1:4b4cf7c: 
1:4b4cf7c: import static org.junit.Assert.assertEquals;
1:4b4cf7c: import static org.junit.Assert.assertFalse;
1:4b4cf7c: import static org.junit.Assert.assertNotNull;
1:4b4cf7c: import static org.junit.Assert.assertTrue;
1:4b4cf7c: 
1:31c55f7: import java.util.Arrays;
1:31c55f7: import java.util.Collection;
1:4b4cf7c: import java.util.concurrent.CountDownLatch;
1:4b4cf7c: import java.util.concurrent.TimeUnit;
1:4b4cf7c: 
1:4b4cf7c: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:4b4cf7c: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:4b4cf7c: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:4b4cf7c: import org.apache.activemq.transport.amqp.client.AmqpConnectionListener;
1:4b4cf7c: import org.apache.activemq.transport.amqp.client.AmqpValidator;
1:4b4cf7c: import org.apache.activemq.util.Wait;
1:4b4cf7c: import org.apache.qpid.proton.engine.Connection;
1:4b4cf7c: import org.junit.Test;
1:31c55f7: import org.junit.runner.RunWith;
1:31c55f7: import org.junit.runners.Parameterized;
1:31c55f7: import org.junit.runners.Parameterized.Parameters;
1:4b4cf7c: 
1:4b4cf7c: /**
1:4b4cf7c:  * Test handling of heartbeats requested by the broker.
1:4b4cf7c:  */
1:31c55f7: @RunWith(Parameterized.class)
1:4b4cf7c: public class AmqpBrokerReuqestedHearbeatsTest extends AmqpClientTestSupport {
1:4b4cf7c: 
1:2e2d5dd:     private final int TEST_IDLE_TIMEOUT = 1000;
1:4b4cf7c: 
1:31c55f7:     @Parameters(name="connector={0}")
1:31c55f7:     public static Collection<Object[]> data() {
1:31c55f7:         return Arrays.asList(new Object[][] {
1:31c55f7:             {"amqp", false},
1:31c55f7:             {"amqp+ws", false},
1:31c55f7:         });
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     public AmqpBrokerReuqestedHearbeatsTest(String connectorScheme, boolean secure) {
1:31c55f7:         super(connectorScheme, secure);
1:31c55f7:     }
1:31c55f7: 
1:4b4cf7c:     @Override
1:4b4cf7c:     protected String getAdditionalConfig() {
1:4b4cf7c:         return "&transport.wireFormat.idleTimeout=" + TEST_IDLE_TIMEOUT;
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     @Test(timeout = 60000)
1:4b4cf7c:     public void testBrokerSendsHalfConfiguredIdleTimeout() throws Exception {
1:4b4cf7c:         AmqpClient client = createAmqpClient();
1:4b4cf7c:         assertNotNull(client);
1:7c06d8d: 
1:4b4cf7c:         client.setValidator(new AmqpValidator() {
1:4b4cf7c: 
1:4b4cf7c:             @Override
1:4b4cf7c:             public void inspectOpenedResource(Connection connection) {
1:7c06d8d:                 assertEquals("Broker did not send half the idle timeout",
1:7c06d8d:                     TEST_IDLE_TIMEOUT / 2, connection.getTransport().getRemoteIdleTimeout());
1:4b4cf7c:             }
1:4b4cf7c:         });
1:4b4cf7c: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:4b4cf7c:         assertNotNull(connection);
1:4b4cf7c: 
1:4b4cf7c:         connection.getStateInspector().assertValid();
1:4b4cf7c:         connection.close();
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     @Test(timeout = 60000)
1:7c06d8d:     public void testBrokerSendsHalfConfiguredIdleTimeoutWhenClientSendsTimeout() throws Exception {
1:7c06d8d:         AmqpClient client = createAmqpClient();
1:7c06d8d:         assertNotNull(client);
1:7c06d8d: 
1:7c06d8d:         client.setValidator(new AmqpValidator() {
1:7c06d8d: 
1:7c06d8d:             @Override
1:7c06d8d:             public void inspectOpenedResource(Connection connection) {
1:7c06d8d:                 assertEquals("Broker did not send half the idle timeout",
1:7c06d8d:                     TEST_IDLE_TIMEOUT / 2, connection.getTransport().getRemoteIdleTimeout());
1:7c06d8d:             }
1:7c06d8d:         });
1:4b4cf7c: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:7c06d8d:         connection.setIdleTimeout(TEST_IDLE_TIMEOUT * 4);
1:7c06d8d:         assertNotNull(connection);
1:7c06d8d: 
1:7c06d8d:         connection.connect();
1:7c06d8d:         connection.getStateInspector().assertValid();
1:7c06d8d:         connection.close();
1:7c06d8d:     }
1:7c06d8d: 
1:7c06d8d:     @Test(timeout = 60000)
1:4b4cf7c:     public void testClientWithoutHeartbeatsGetsDropped() throws Exception {
1:4b4cf7c: 
1:4b4cf7c:         final CountDownLatch disconnected = new CountDownLatch(1);
1:4b4cf7c: 
1:4b4cf7c:         AmqpClient client = createAmqpClient();
1:4b4cf7c:         assertNotNull(client);
1:4b4cf7c: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:4b4cf7c:         assertNotNull(connection);
1:4b4cf7c: 
1:4b4cf7c:         connection.setIdleProcessingDisabled(true);
1:4b4cf7c:         connection.setListener(new AmqpConnectionListener() {
1:4b4cf7c: 
1:4b4cf7c:             @Override
1:4b4cf7c:             public void onException(Throwable ex) {
1:4b4cf7c:                 disconnected.countDown();
1:4b4cf7c:             }
1:4b4cf7c:         });
1:4b4cf7c: 
1:4b4cf7c:         connection.connect();
1:4b4cf7c: 
1:4b4cf7c:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:4b4cf7c:         assertTrue(disconnected.await(30, TimeUnit.SECONDS));
1:4b4cf7c: 
1:4b4cf7c:         connection.close();
1:4b4cf7c: 
1:4b4cf7c:         assertTrue("Connection should get cleaned up.", Wait.waitFor(new Wait.Condition() {
1:4b4cf7c: 
1:4b4cf7c:             @Override
1:4b4cf7c:             public boolean isSatisified() throws Exception {
1:4b4cf7c:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:4b4cf7c:             }
1:4b4cf7c:         }));
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     @Test(timeout = 60000)
1:4b4cf7c:     public void testClientWithHeartbeatsStaysAlive() throws Exception {
1:4b4cf7c: 
1:4b4cf7c:         final CountDownLatch disconnected = new CountDownLatch(1);
1:4b4cf7c: 
1:4b4cf7c:         AmqpClient client = createAmqpClient();
1:4b4cf7c:         assertNotNull(client);
1:4b4cf7c: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:4b4cf7c:         assertNotNull(connection);
1:4b4cf7c: 
1:4b4cf7c:         connection.setListener(new AmqpConnectionListener() {
1:4b4cf7c: 
1:4b4cf7c:             @Override
1:4b4cf7c:             public void onException(Throwable ex) {
1:4b4cf7c:                 disconnected.countDown();
1:4b4cf7c:             }
1:4b4cf7c:         });
1:4b4cf7c: 
1:4b4cf7c:         connection.connect();
1:4b4cf7c: 
1:4b4cf7c:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:2e2d5dd:         assertFalse(disconnected.await(5, TimeUnit.SECONDS));
1:4b4cf7c: 
1:4b4cf7c:         connection.close();
1:4b4cf7c: 
1:4b4cf7c:         assertTrue("Connection should get cleaned up.", Wait.waitFor(new Wait.Condition() {
1:4b4cf7c: 
1:4b4cf7c:             @Override
1:4b4cf7c:             public boolean isSatisified() throws Exception {
1:4b4cf7c:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:4b4cf7c:             }
1:4b4cf7c:         }));
1:4b4cf7c:     }
1:4b4cf7c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1:     private final int TEST_IDLE_TIMEOUT = 1000;
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(disconnected.await(5, TimeUnit.SECONDS));
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: @RunWith(Parameterized.class)
1:     @Parameters(name="connector={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:             {"amqp", false},
1:             {"amqp+ws", false},
1:         });
1:     }
1: 
1:     public AmqpBrokerReuqestedHearbeatsTest(String connectorScheme, boolean secure) {
1:         super(connectorScheme, secure);
1:     }
1: 
commit:7c06d8d
/////////////////////////////////////////////////////////////////////////
1:                 assertEquals("Broker did not send half the idle timeout",
1:                     TEST_IDLE_TIMEOUT / 2, connection.getTransport().getRemoteIdleTimeout());
/////////////////////////////////////////////////////////////////////////
1:     public void testBrokerSendsHalfConfiguredIdleTimeoutWhenClientSendsTimeout() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
1:         client.setValidator(new AmqpValidator() {
1: 
1:             @Override
1:             public void inspectOpenedResource(Connection connection) {
1:                 assertEquals("Broker did not send half the idle timeout",
1:                     TEST_IDLE_TIMEOUT / 2, connection.getTransport().getRemoteIdleTimeout());
1:             }
1:         });
1: 
0:         AmqpConnection connection = client.createConnection();
1:         connection.setIdleTimeout(TEST_IDLE_TIMEOUT * 4);
1:         assertNotNull(connection);
1: 
1:         connection.connect();
1:         connection.getStateInspector().assertValid();
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
commit:4b4cf7c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpConnectionListener;
1: import org.apache.activemq.transport.amqp.client.AmqpValidator;
1: import org.apache.activemq.util.Wait;
1: import org.apache.qpid.proton.engine.Connection;
1: import org.junit.Test;
1: 
1: /**
1:  * Test handling of heartbeats requested by the broker.
1:  */
1: public class AmqpBrokerReuqestedHearbeatsTest extends AmqpClientTestSupport {
1: 
0:     private final int TEST_IDLE_TIMEOUT = 3000;
1: 
1:     @Override
1:     protected String getAdditionalConfig() {
1:         return "&transport.wireFormat.idleTimeout=" + TEST_IDLE_TIMEOUT;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testBrokerSendsHalfConfiguredIdleTimeout() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
1:         client.setValidator(new AmqpValidator() {
1: 
1:             @Override
1:             public void inspectOpenedResource(Connection connection) {
0:                 assertEquals(TEST_IDLE_TIMEOUT / 2, connection.getTransport().getRemoteIdleTimeout());
1:             }
1:         });
1: 
0:         AmqpConnection connection = client.connect();
1:         assertNotNull(connection);
1: 
1:         connection.getStateInspector().assertValid();
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testClientWithoutHeartbeatsGetsDropped() throws Exception {
1: 
1:         final CountDownLatch disconnected = new CountDownLatch(1);
1: 
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
0:         AmqpConnection connection = client.createConnection();
1:         assertNotNull(connection);
1: 
1:         connection.setIdleProcessingDisabled(true);
1:         connection.setListener(new AmqpConnectionListener() {
1: 
1:             @Override
1:             public void onException(Throwable ex) {
1:                 disconnected.countDown();
1:             }
1:         });
1: 
1:         connection.connect();
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:         assertTrue(disconnected.await(30, TimeUnit.SECONDS));
1: 
1:         connection.close();
1: 
1:         assertTrue("Connection should get cleaned up.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testClientWithHeartbeatsStaysAlive() throws Exception {
1: 
1:         final CountDownLatch disconnected = new CountDownLatch(1);
1: 
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
0:         AmqpConnection connection = client.createConnection();
1:         assertNotNull(connection);
1: 
1:         connection.setListener(new AmqpConnectionListener() {
1: 
1:             @Override
1:             public void onException(Throwable ex) {
1:                 disconnected.countDown();
1:             }
1:         });
1: 
1:         connection.connect();
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
0:         assertFalse(disconnected.await(10, TimeUnit.SECONDS));
1: 
1:         connection.close();
1: 
1:         assertTrue("Connection should get cleaned up.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: }
============================================================================