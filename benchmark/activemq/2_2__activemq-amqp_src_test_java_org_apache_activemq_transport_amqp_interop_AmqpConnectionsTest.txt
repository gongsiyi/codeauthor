1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.interop;
1:72839b7: 
1:72839b7: import static org.apache.activemq.transport.amqp.AmqpSupport.CONNECTION_OPEN_FAILED;
1:c231039: import static org.apache.activemq.transport.amqp.AmqpSupport.PLATFORM;
1:c231039: import static org.apache.activemq.transport.amqp.AmqpSupport.PRODUCT;
1:c231039: import static org.apache.activemq.transport.amqp.AmqpSupport.VERSION;
1:72839b7: import static org.apache.activemq.transport.amqp.AmqpSupport.contains;
1:72839b7: import static org.junit.Assert.assertEquals;
1:72839b7: import static org.junit.Assert.assertNotNull;
1:fddbac2: import static org.junit.Assert.assertNull;
1:a42be99: import static org.junit.Assert.fail;
1:72839b7: 
1:31c55f7: import java.util.Arrays;
1:31c55f7: import java.util.Collection;
1:72839b7: import java.util.Map;
1:2e2d5dd: import java.util.concurrent.TimeUnit;
1:72839b7: 
1:138e52b: import org.apache.activemq.transport.amqp.AmqpSupport;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:2e2d5dd: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:2e2d5dd: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:2e2d5dd: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:2e2d5dd: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:1a0f73e: import org.apache.activemq.transport.amqp.client.AmqpValidator;
1:72839b7: import org.apache.qpid.proton.amqp.Symbol;
1:72839b7: import org.apache.qpid.proton.amqp.transport.AmqpError;
1:72839b7: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1:72839b7: import org.apache.qpid.proton.engine.Connection;
1:72839b7: import org.junit.Test;
1:31c55f7: import org.junit.runner.RunWith;
1:31c55f7: import org.junit.runners.Parameterized;
1:31c55f7: import org.junit.runners.Parameterized.Parameters;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Test broker handling of AMQP connections with various configurations.
1:72839b7:  */
1:31c55f7: @RunWith(Parameterized.class)
1:72839b7: public class AmqpConnectionsTest extends AmqpClientTestSupport {
1:72839b7: 
1:72839b7:     private static final Symbol QUEUE_PREFIX = Symbol.valueOf("queue-prefix");
1:72839b7:     private static final Symbol TOPIC_PREFIX = Symbol.valueOf("topic-prefix");
1:72839b7:     private static final Symbol ANONYMOUS_RELAY = Symbol.valueOf("ANONYMOUS-RELAY");
1:4a1f2f7:     private static final Symbol DELAYED_DELIVERY = Symbol.valueOf("DELAYED_DELIVERY");
1:72839b7: 
1:31c55f7:     @Parameters(name="{0}")
1:31c55f7:     public static Collection<Object[]> data() {
1:31c55f7:         return Arrays.asList(new Object[][] {
1:31c55f7:             {"amqp", false},
1:31c55f7:             {"amqp+ws", false},
1:31c55f7:             {"amqp+ssl", true},
1:31c55f7:             {"amqp+wss", true}
1:31c55f7:         });
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     public AmqpConnectionsTest(String connectorScheme, boolean secure) {
1:31c55f7:         super(connectorScheme, secure);
1:31c55f7:     }
1:31c55f7: 
1:88efa01:     @Override
1:88efa01:     protected String getAdditionalConfig() {
1:88efa01:         return "&wireFormat.maxAmqpFrameSize=1048576";
1:88efa01:     }
1:88efa01: 
1:72839b7:     @Test(timeout = 60000)
1:72839b7:     public void testCanConnect() throws Exception {
1:72839b7:         AmqpClient client = createAmqpClient();
1:72839b7:         assertNotNull(client);
1:76b7054: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:72839b7:         assertNotNull(connection);
1:72839b7: 
1:72839b7:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:fddbac2: 
1:72839b7: 
1:fddbac2:         Connection protonConnection = connection.getConnection();
1:fddbac2:         org.apache.qpid.proton.engine.Transport protonTransport = protonConnection.getTransport();
1:fddbac2: 
1:fddbac2:         protonTransport.getChannelMax();
1:fddbac2: 
1:fddbac2:         assertNull(protonTransport.head());
1:fddbac2:         assertNull(protonTransport.tail());
1:fddbac2:         assertNull(protonTransport.getInputBuffer());
1:fddbac2:         assertNull(protonTransport.getOutputBuffer());
1:fddbac2: 
1:fddbac2:         try {
1:fddbac2:             protonTransport.bind(protonConnection);
1:fddbac2:             fail("Should not be able to mutate");
1:fddbac2:         } catch (UnsupportedOperationException e) {}
1:fddbac2: 
1:fddbac2:         try {
1:fddbac2:             protonTransport.close();
1:fddbac2:             fail("Should not be able to mutate");
1:fddbac2:         } catch (UnsupportedOperationException e) {}
1:fddbac2: 
1:fddbac2:         try {
1:fddbac2:             protonTransport.setChannelMax(1);
1:fddbac2:             fail("Should not be able to mutate");
1:fddbac2:         } catch (UnsupportedOperationException e) {}
1:fddbac2: 
1:72839b7:         connection.close();
1:72839b7: 
1:72839b7:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Test(timeout = 60000)
1:72839b7:     public void testConnectionCarriesExpectedCapabilities() throws Exception {
1:72839b7:         AmqpClient client = createAmqpClient();
1:72839b7:         assertNotNull(client);
1:72839b7: 
1:ca456c4:         client.setValidator(new AmqpValidator() {
1:72839b7: 
1:72839b7:             @Override
1:72839b7:             public void inspectOpenedResource(Connection connection) {
1:72839b7: 
1:72839b7:                 Symbol[] offered = connection.getRemoteOfferedCapabilities();
1:72839b7:                 if (!contains(offered, ANONYMOUS_RELAY)) {
1:72839b7:                     markAsInvalid("Broker did not indicate it support anonymous relay");
1:72839b7:                 }
1:72839b7: 
1:4a1f2f7:                 if (!contains(offered, DELAYED_DELIVERY)) {
1:4a1f2f7:                     markAsInvalid("Broker did not indicate it support delayed message delivery");
1:4a1f2f7:                 }
1:4a1f2f7: 
1:72839b7:                 Map<Symbol, Object> properties = connection.getRemoteProperties();
1:72839b7:                 if (!properties.containsKey(QUEUE_PREFIX)) {
1:72839b7:                     markAsInvalid("Broker did not send a queue prefix value");
1:72839b7:                 }
1:72839b7: 
1:72839b7:                 if (!properties.containsKey(TOPIC_PREFIX)) {
1:72839b7:                     markAsInvalid("Broker did not send a queue prefix value");
1:72839b7:                 }
1:c231039: 
1:c231039:                 if (!properties.containsKey(PRODUCT)) {
1:c231039:                     markAsInvalid("Broker did not send a queue product name value");
1:c231039:                 }
1:c231039: 
1:c231039:                 if (!properties.containsKey(VERSION)) {
1:c231039:                     markAsInvalid("Broker did not send a queue version value");
1:c231039:                 }
1:c231039: 
1:c231039:                 if (!properties.containsKey(PLATFORM)) {
1:c231039:                     markAsInvalid("Broker did not send a queue platform name value");
1:c231039:                 } else {
1:c231039:                     LOG.info("Broker platform = {}", properties.get(PLATFORM));
1:c231039:                 }
1:72839b7:             }
1:72839b7:         });
1:72839b7: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:72839b7:         assertNotNull(connection);
1:72839b7: 
1:72839b7:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:72839b7: 
1:1a0f73e:         connection.getStateInspector().assertValid();
1:72839b7:         connection.close();
1:72839b7: 
1:72839b7:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Test(timeout = 60000)
1:76b7054:     public void testConnectionCarriesContainerId() throws Exception {
1:76b7054:         AmqpClient client = createAmqpClient();
1:76b7054:         assertNotNull(client);
1:76b7054: 
1:76b7054:         client.setValidator(new AmqpValidator() {
1:72839b7: 
1:76b7054:             @Override
1:76b7054:             public void inspectOpenedResource(Connection connection) {
1:76b7054:                 String remoteContainer = connection.getRemoteContainer();
1:76b7054:                 if (remoteContainer == null || !remoteContainer.equals(brokerService.getBrokerName())) {
1:76b7054:                     markAsInvalid("Broker did not send a valid container ID");
1:76b7054:                 } else {
1:76b7054:                     LOG.info("Broker container ID = {}", remoteContainer);
1:76b7054:                 }
1:76b7054:             }
1:76b7054:         });
1:76b7054: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:76b7054:         assertNotNull(connection);
1:76b7054: 
1:76b7054:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:76b7054: 
1:76b7054:         connection.getStateInspector().assertValid();
1:76b7054:         connection.close();
1:76b7054: 
1:76b7054:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:76b7054:     }
1:76b7054: 
1:76b7054:     @Test(timeout = 60000)
1:72839b7:     public void testCanConnectWithDifferentContainerIds() throws Exception {
1:72839b7:         AmqpClient client = createAmqpClient();
1:72839b7:         assertNotNull(client);
1:72839b7: 
1:1ac8954:         AmqpConnection connection1 = trackConnection(client.createConnection());
1:1ac8954:         AmqpConnection connection2 = trackConnection(client.createConnection());
1:72839b7: 
1:72839b7:         connection1.setContainerId(getTestName() + "-Client:1");
1:72839b7:         connection2.setContainerId(getTestName() + "-Client:2");
1:72839b7: 
1:72839b7:         connection1.connect();
1:72839b7:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:72839b7: 
1:72839b7:         connection2.connect();
1:72839b7:         assertEquals(2, getProxyToBroker().getCurrentConnectionsCount());
1:72839b7: 
1:72839b7:         connection1.close();
1:72839b7:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:2e2d5dd: 
1:72839b7:         connection2.close();
1:72839b7:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:72839b7:     }
1:72839b7: 
1:2e2d5dd:     @Test(timeout = 60000)
1:72839b7:     public void testCannotConnectWithSameContainerId() throws Exception {
1:72839b7:         AmqpClient client = createAmqpClient();
1:72839b7:         assertNotNull(client);
1:72839b7: 
1:1ac8954:         AmqpConnection connection1 = trackConnection(client.createConnection());
1:1ac8954:         AmqpConnection connection2 = trackConnection(client.createConnection());
1:72839b7: 
1:72839b7:         connection1.setContainerId(getTestName());
1:72839b7:         connection2.setContainerId(getTestName());
1:72839b7: 
1:72839b7:         connection1.connect();
1:72839b7:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:72839b7: 
1:1a0f73e:         connection2.setStateInspector(new AmqpValidator() {
1:72839b7: 
1:72839b7:             @Override
1:72839b7:             public void inspectOpenedResource(Connection connection) {
1:72839b7:                 if (!connection.getRemoteProperties().containsKey(CONNECTION_OPEN_FAILED)) {
1:72839b7:                     markAsInvalid("Broker did not set connection establishment failed property");
1:72839b7:                 }
1:72839b7:             }
1:72839b7: 
1:72839b7:             @Override
1:72839b7:             public void inspectClosedResource(Connection connection) {
1:72839b7:                 ErrorCondition remoteError = connection.getRemoteCondition();
1:28e7cb0:                 if (remoteError == null || remoteError.getCondition() == null) {
1:138e52b:                     markAsInvalid("Broker did not add error condition for duplicate client ID");
1:28e7cb0:                 } else {
1:28e7cb0:                     if (!remoteError.getCondition().equals(AmqpError.INVALID_FIELD)) {
1:28e7cb0:                         markAsInvalid("Broker did not set condition to " + AmqpError.INVALID_FIELD);
1:28e7cb0:                     }
1:72839b7: 
1:28e7cb0:                     if (!remoteError.getCondition().equals(AmqpError.INVALID_FIELD)) {
1:28e7cb0:                         markAsInvalid("Broker did not set condition to " + AmqpError.INVALID_FIELD);
1:28e7cb0:                     }
1:72839b7:                 }
1:72839b7: 
1:138e52b:                 // Validate the info map contains a hint that the container/client id was the problem
1:138e52b:                 Map<?, ?> infoMap = remoteError.getInfo();
1:28e7cb0:                 if (infoMap == null) {
1:138e52b:                     markAsInvalid("Broker did not set an info map on condition");
1:28e7cb0:                 } else if (!infoMap.containsKey(AmqpSupport.INVALID_FIELD)) {
1:138e52b:                     markAsInvalid("Info map does not contain expected key");
1:28e7cb0:                 } else {
1:28e7cb0:                     Object value = infoMap.get(AmqpSupport.INVALID_FIELD);
1:28e7cb0:                     if(!AmqpSupport.CONTAINER_ID.equals(value)) {
1:28e7cb0:                         markAsInvalid("Info map does not contain expected value: " + value);
1:28e7cb0:                     }
1:72839b7:                 }
1:72839b7:             }
1:72839b7:         });
1:72839b7: 
1:72839b7:         try {
1:72839b7:             connection2.connect();
1:a42be99:             fail("Should not be able to connect with same container Id.");
1:72839b7:         } catch (Exception ex) {
1:72839b7:             LOG.info("Second connection with same container Id failed as expected.");
1:72839b7:         }
1:72839b7: 
1:1a0f73e:         connection2.getStateInspector().assertValid();
1:72839b7: 
1:72839b7:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:72839b7: 
1:72839b7:         connection1.close();
1:72839b7:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:72839b7:     }
4:138e52b: 
1:72839b7:     @Test(timeout = 60000)
1:2e2d5dd:     public void testSimpleSendOneReceive() throws Exception {
1:2e2d5dd: 
1:2e2d5dd:         AmqpClient client = createAmqpClient();
1:2e2d5dd:         AmqpConnection connection = trackConnection(client.connect());
1:2e2d5dd:         AmqpSession session = connection.createSession();
1:2e2d5dd: 
1:2e2d5dd:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:2e2d5dd:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:2e2d5dd: 
1:2e2d5dd:         AmqpMessage message = new AmqpMessage();
1:2e2d5dd: 
1:2e2d5dd:         final int PAYLOAD_SIZE = 1024 * 1024;
1:2e2d5dd: 
1:2e2d5dd:         byte[] payload = new byte[PAYLOAD_SIZE];
1:2e2d5dd:         for (int i = 0; i < PAYLOAD_SIZE; i++) {
1:2e2d5dd:             payload[i] = (byte) (i % PAYLOAD_SIZE);
1:2e2d5dd:         }
1:2e2d5dd: 
1:2e2d5dd:         message.setMessageId("msg" + 1);
1:2e2d5dd:         message.setMessageAnnotation("serialNo", 1);
1:2e2d5dd:         message.setBytes(payload);
1:2e2d5dd: 
1:2e2d5dd:         sender.send(message);
1:2e2d5dd:         sender.close();
1:2e2d5dd: 
1:2e2d5dd:         LOG.info("Attempting to read message with receiver");
1:2e2d5dd:         receiver.flow(2);
1:2e2d5dd:         AmqpMessage received = receiver.receive(10, TimeUnit.SECONDS);
1:2e2d5dd:         assertNotNull("Should have read message", received);
1:2e2d5dd:         assertEquals("msg1", received.getMessageId());
1:2e2d5dd:         received.accept();
1:2e2d5dd: 
1:2e2d5dd:         receiver.close();
1:2e2d5dd: 
1:2e2d5dd:         connection.close();
1:2e2d5dd:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:88efa01
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected String getAdditionalConfig() {
1:         return "&wireFormat.maxAmqpFrameSize=1048576";
1:     }
1: 
commit:fddbac2
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
/////////////////////////////////////////////////////////////////////////
1: 
1:         Connection protonConnection = connection.getConnection();
1:         org.apache.qpid.proton.engine.Transport protonTransport = protonConnection.getTransport();
1: 
1:         protonTransport.getChannelMax();
1: 
1:         assertNull(protonTransport.head());
1:         assertNull(protonTransport.tail());
1:         assertNull(protonTransport.getInputBuffer());
1:         assertNull(protonTransport.getOutputBuffer());
1: 
1:         try {
1:             protonTransport.bind(protonConnection);
1:             fail("Should not be able to mutate");
1:         } catch (UnsupportedOperationException e) {}
1: 
1:         try {
1:             protonTransport.close();
1:             fail("Should not be able to mutate");
1:         } catch (UnsupportedOperationException e) {}
1: 
1:         try {
1:             protonTransport.setChannelMax(1);
1:             fail("Should not be able to mutate");
1:         } catch (UnsupportedOperationException e) {}
1: 
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testSimpleSendOneReceive() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
1:         AmqpConnection connection = trackConnection(client.connect());
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1: 
1:         final int PAYLOAD_SIZE = 1024 * 1024;
1: 
1:         byte[] payload = new byte[PAYLOAD_SIZE];
1:         for (int i = 0; i < PAYLOAD_SIZE; i++) {
1:             payload[i] = (byte) (i % PAYLOAD_SIZE);
1:         }
1: 
1:         message.setMessageId("msg" + 1);
1:         message.setMessageAnnotation("serialNo", 1);
1:         message.setBytes(payload);
1: 
1:         sender.send(message);
1:         sender.close();
1: 
1:         LOG.info("Attempting to read message with receiver");
1:         receiver.flow(2);
1:         AmqpMessage received = receiver.receive(10, TimeUnit.SECONDS);
1:         assertNotNull("Should have read message", received);
1:         assertEquals("msg1", received.getMessageId());
1:         received.accept();
1: 
1:         receiver.close();
1: 
1:         connection.close();
1:     }
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection1 = trackConnection(client.createConnection());
1:         AmqpConnection connection2 = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection1 = trackConnection(client.createConnection());
1:         AmqpConnection connection2 = trackConnection(client.createConnection());
commit:4a1f2f7
/////////////////////////////////////////////////////////////////////////
1:     private static final Symbol DELAYED_DELIVERY = Symbol.valueOf("DELAYED_DELIVERY");
/////////////////////////////////////////////////////////////////////////
1:                 if (!contains(offered, DELAYED_DELIVERY)) {
1:                     markAsInvalid("Broker did not indicate it support delayed message delivery");
1:                 }
1: 
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: @RunWith(Parameterized.class)
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:             {"amqp", false},
1:             {"amqp+ws", false},
1:             {"amqp+ssl", true},
1:             {"amqp+wss", true}
1:         });
1:     }
1: 
1:     public AmqpConnectionsTest(String connectorScheme, boolean secure) {
1:         super(connectorScheme, secure);
1:     }
1: 
commit:28e7cb0
/////////////////////////////////////////////////////////////////////////
1:                 if (remoteError == null || remoteError.getCondition() == null) {
1:                 } else {
1:                     if (!remoteError.getCondition().equals(AmqpError.INVALID_FIELD)) {
1:                         markAsInvalid("Broker did not set condition to " + AmqpError.INVALID_FIELD);
1:                     }
1:                     if (!remoteError.getCondition().equals(AmqpError.INVALID_FIELD)) {
1:                         markAsInvalid("Broker did not set condition to " + AmqpError.INVALID_FIELD);
1:                     }
1:                 if (infoMap == null) {
1:                 } else if (!infoMap.containsKey(AmqpSupport.INVALID_FIELD)) {
1:                 } else {
1:                     Object value = infoMap.get(AmqpSupport.INVALID_FIELD);
1:                     if(!AmqpSupport.CONTAINER_ID.equals(value)) {
1:                         markAsInvalid("Info map does not contain expected value: " + value);
1:                     }
commit:76b7054
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectionCarriesContainerId() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
1:         client.setValidator(new AmqpValidator() {
1: 
1:             @Override
1:             public void inspectOpenedResource(Connection connection) {
1:                 String remoteContainer = connection.getRemoteContainer();
1:                 if (remoteContainer == null || !remoteContainer.equals(brokerService.getBrokerName())) {
1:                     markAsInvalid("Broker did not send a valid container ID");
1:                 } else {
1:                     LOG.info("Broker container ID = {}", remoteContainer);
1:                 }
1:             }
1:         });
1: 
0:         AmqpConnection connection = client.connect();
1:         assertNotNull(connection);
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         connection.getStateInspector().assertValid();
1:         connection.close();
1: 
1:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:     }
1: 
1:     @Test(timeout = 60000)
commit:a42be99
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:             fail("Should not be able to connect with same container Id.");
commit:c231039
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.AmqpSupport.PLATFORM;
1: import static org.apache.activemq.transport.amqp.AmqpSupport.PRODUCT;
1: import static org.apache.activemq.transport.amqp.AmqpSupport.VERSION;
/////////////////////////////////////////////////////////////////////////
1: 
1:                 if (!properties.containsKey(PRODUCT)) {
1:                     markAsInvalid("Broker did not send a queue product name value");
1:                 }
1: 
1:                 if (!properties.containsKey(VERSION)) {
1:                     markAsInvalid("Broker did not send a queue version value");
1:                 }
1: 
1:                 if (!properties.containsKey(PLATFORM)) {
1:                     markAsInvalid("Broker did not send a queue platform name value");
1:                 } else {
1:                     LOG.info("Broker platform = {}", properties.get(PLATFORM));
1:                 }
commit:ca456c4
/////////////////////////////////////////////////////////////////////////
1:         client.setValidator(new AmqpValidator() {
commit:1a0f73e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.AmqpValidator;
/////////////////////////////////////////////////////////////////////////
0:         client.setStateInspector(new AmqpValidator() {
/////////////////////////////////////////////////////////////////////////
1:         connection.getStateInspector().assertValid();
/////////////////////////////////////////////////////////////////////////
1:         connection2.setStateInspector(new AmqpValidator() {
/////////////////////////////////////////////////////////////////////////
1:         connection2.getStateInspector().assertValid();
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.apache.activemq.transport.amqp.AmqpSupport.CONNECTION_OPEN_FAILED;
1: import static org.apache.activemq.transport.amqp.AmqpSupport.contains;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.Map;
1: 
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
0: import org.apache.activemq.transport.amqp.client.AmqpStateInspector;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.transport.AmqpError;
1: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1: import org.apache.qpid.proton.engine.Connection;
1: import org.junit.Test;
1: 
1: /**
1:  * Test broker handling of AMQP connections with various configurations.
1:  */
1: public class AmqpConnectionsTest extends AmqpClientTestSupport {
1: 
1:     private static final Symbol QUEUE_PREFIX = Symbol.valueOf("queue-prefix");
1:     private static final Symbol TOPIC_PREFIX = Symbol.valueOf("topic-prefix");
1:     private static final Symbol ANONYMOUS_RELAY = Symbol.valueOf("ANONYMOUS-RELAY");
1: 
1:     @Test(timeout = 60000)
1:     public void testCanConnect() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
0:         AmqpConnection connection = client.connect();
1:         assertNotNull(connection);
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         connection.close();
1: 
1:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnectionCarriesExpectedCapabilities() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
0:         client.setStateInspector(new AmqpStateInspector() {
1: 
1:             @Override
1:             public void inspectOpenedResource(Connection connection) {
1: 
1:                 Symbol[] offered = connection.getRemoteOfferedCapabilities();
1:                 if (!contains(offered, ANONYMOUS_RELAY)) {
1:                     markAsInvalid("Broker did not indicate it support anonymous relay");
1:                 }
1: 
1:                 Map<Symbol, Object> properties = connection.getRemoteProperties();
1:                 if (!properties.containsKey(QUEUE_PREFIX)) {
1:                     markAsInvalid("Broker did not send a queue prefix value");
1:                 }
1: 
1:                 if (!properties.containsKey(TOPIC_PREFIX)) {
1:                     markAsInvalid("Broker did not send a queue prefix value");
1:                 }
1:             }
1:         });
1: 
0:         AmqpConnection connection = client.connect();
1:         assertNotNull(connection);
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         connection.close();
1: 
1:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCanConnectWithDifferentContainerIds() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
0:         AmqpConnection connection1 = client.createConnection();
0:         AmqpConnection connection2 = client.createConnection();
1: 
1:         connection1.setContainerId(getTestName() + "-Client:1");
1:         connection2.setContainerId(getTestName() + "-Client:2");
1: 
1:         connection1.connect();
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         connection2.connect();
1:         assertEquals(2, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         connection1.close();
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         connection2.close();
1:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCannotConnectWithSameContainerId() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
0:         AmqpConnection connection1 = client.createConnection();
0:         AmqpConnection connection2 = client.createConnection();
1: 
1:         connection1.setContainerId(getTestName());
1:         connection2.setContainerId(getTestName());
1: 
1:         connection1.connect();
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
0:         connection2.setStateInspector(new AmqpStateInspector() {
1: 
1:             @Override
1:             public void inspectOpenedResource(Connection connection) {
1:                 if (!connection.getRemoteProperties().containsKey(CONNECTION_OPEN_FAILED)) {
1:                     markAsInvalid("Broker did not set connection establishment failed property");
1:                 }
1:             }
1: 
1:             @Override
1:             public void inspectClosedResource(Connection connection) {
1:                 ErrorCondition remoteError = connection.getRemoteCondition();
0:                 if (remoteError == null) {
0:                     markAsInvalid("Broker dd not add error condition for duplicate client ID");
1:                 }
1: 
0:                 if (!remoteError.getCondition().equals(AmqpError.INVALID_FIELD)) {
0:                     markAsInvalid("Broker dd not set condition to " + AmqpError.INVALID_FIELD);
1:                 }
1:             }
1:         });
1: 
1:         try {
1:             connection2.connect();
0:             //fail("Should not be able to connect with same container Id.");
1:         } catch (Exception ex) {
1:             LOG.info("Second connection with same container Id failed as expected.");
1:         }
1: 
0:         connection2.getStateInspector().assertIfStateChecksFailed();
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         connection1.close();
1:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:138e52b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.AmqpSupport;
/////////////////////////////////////////////////////////////////////////
1:                     markAsInvalid("Broker did not add error condition for duplicate client ID");
0:                     markAsInvalid("Broker did not set condition to " + AmqpError.INVALID_FIELD);
0:                 }
1: 
0:                 if (!remoteError.getCondition().equals(AmqpError.INVALID_FIELD)) {
0:                     markAsInvalid("Broker did not set condition to " + AmqpError.INVALID_FIELD);
0:                 }
1: 
1:                 // Validate the info map contains a hint that the container/client id was the problem
1:                 Map<?, ?> infoMap = remoteError.getInfo();
0:                 if(infoMap == null) {
1:                     markAsInvalid("Broker did not set an info map on condition");
0:                 }
1: 
0:                 if(!infoMap.containsKey(AmqpSupport.INVALID_FIELD)) {
1:                     markAsInvalid("Info map does not contain expected key");
0:                 }
1: 
0:                 Object value = infoMap.get(AmqpSupport.INVALID_FIELD);
0:                 if(!AmqpSupport.CONTAINER_ID.equals(value)) {
0:                     markAsInvalid("Info map does not contain expected value: " + value);
============================================================================