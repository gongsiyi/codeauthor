1:fd0f71a: /**
1:fd0f71a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fd0f71a:  * contributor license agreements.  See the NOTICE file distributed with
1:fd0f71a:  * this work for additional information regarding copyright ownership.
1:fd0f71a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fd0f71a:  * (the "License"); you may not use this file except in compliance with
1:fd0f71a:  * the License.  You may obtain a copy of the License at
1:fd0f71a:  *
1:fd0f71a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fd0f71a:  *
1:fd0f71a:  * Unless required by applicable law or agreed to in writing, software
1:fd0f71a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fd0f71a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd0f71a:  * See the License for the specific language governing permissions and
1:fd0f71a:  * limitations under the License.
1:fd0f71a:  */
1:fd0f71a: package org.apache.activemq.store;
1:fd0f71a: 
1:fd0f71a: import java.io.File;
1:fd0f71a: import java.util.LinkedList;
1:fd0f71a: import java.util.List;
1:fd0f71a: import junit.framework.TestCase;
1:fd0f71a: import org.apache.activemq.broker.BrokerService;
1:fd0f71a: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1:fd0f71a: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:fd0f71a: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:fd0f71a: import org.apache.activemq.util.Wait;
1:fd0f71a: import org.apache.commons.io.FileUtils;
1:fd0f71a: 
1:fd0f71a: public class MKahaDbSharedLockerTest extends TestCase {
1:fd0f71a: 
1:fd0f71a: 
1:fd0f71a:     public void testBrokerShutdown() throws Exception {
1:fd0f71a:         final BrokerService master = new BrokerService();
1:fd0f71a:         master.setBrokerName("master");
1:fd0f71a: 
1:fd0f71a:         master.setUseJmx(false);
1:fd0f71a:         master.setPersistent(true);
1:fd0f71a:         master.setDeleteAllMessagesOnStartup(true);
1:fd0f71a: 
1:fd0f71a:         MultiKahaDBPersistenceAdapter mKahaDB = new MultiKahaDBPersistenceAdapter();
1:fd0f71a:         mKahaDB.setDirectory(new File("target/test/kahadb"));
1:fd0f71a:         List adapters = new LinkedList<FilteredKahaDBPersistenceAdapter>();
1:fd0f71a:         FilteredKahaDBPersistenceAdapter defaultEntry = new FilteredKahaDBPersistenceAdapter();
1:fd0f71a:         defaultEntry.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:fd0f71a:         defaultEntry.setPerDestination(true);
1:fd0f71a:         adapters.add(defaultEntry);
1:fd0f71a: 
1:fd0f71a:         mKahaDB.setFilteredPersistenceAdapters(adapters);
1:fd0f71a:         master.setPersistenceAdapter(mKahaDB);
1:fd0f71a: 
1:fd0f71a:         SharedFileLocker sharedFileLocker = new SharedFileLocker();
1:fd0f71a:         mKahaDB.setLockKeepAlivePeriod(1000);
1:fd0f71a:         mKahaDB.setLocker(sharedFileLocker);
1:fd0f71a: 
1:fd0f71a:         master.start();
1:fd0f71a:         master.waitUntilStarted();
1:fd0f71a: 
1:fd0f71a:         FileUtils.forceDelete(new File("target/test/kahadb/lock"));
1:fd0f71a: 
1:fd0f71a:         assertTrue("broker should be stopped now", Wait.waitFor(new Wait.Condition() {
1:fd0f71a:             @Override
1:fd0f71a:             public boolean isSatisified() throws Exception {
1:fd0f71a:                 return master.isStopped();
1:fd0f71a:             }
1:fd0f71a:         }));
1:fd0f71a: 
1:fd0f71a:         master.stop();
1:fd0f71a:         master.waitUntilStopped();
1:fd0f71a:     }
1:fd0f71a: 
1:fd0f71a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:fd0f71a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import java.io.File;
1: import java.util.LinkedList;
1: import java.util.List;
1: import junit.framework.TestCase;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1: import org.apache.commons.io.FileUtils;
1: 
1: public class MKahaDbSharedLockerTest extends TestCase {
1: 
1: 
1:     public void testBrokerShutdown() throws Exception {
1:         final BrokerService master = new BrokerService();
1:         master.setBrokerName("master");
1: 
1:         master.setUseJmx(false);
1:         master.setPersistent(true);
1:         master.setDeleteAllMessagesOnStartup(true);
1: 
1:         MultiKahaDBPersistenceAdapter mKahaDB = new MultiKahaDBPersistenceAdapter();
1:         mKahaDB.setDirectory(new File("target/test/kahadb"));
1:         List adapters = new LinkedList<FilteredKahaDBPersistenceAdapter>();
1:         FilteredKahaDBPersistenceAdapter defaultEntry = new FilteredKahaDBPersistenceAdapter();
1:         defaultEntry.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:         defaultEntry.setPerDestination(true);
1:         adapters.add(defaultEntry);
1: 
1:         mKahaDB.setFilteredPersistenceAdapters(adapters);
1:         master.setPersistenceAdapter(mKahaDB);
1: 
1:         SharedFileLocker sharedFileLocker = new SharedFileLocker();
1:         mKahaDB.setLockKeepAlivePeriod(1000);
1:         mKahaDB.setLocker(sharedFileLocker);
1: 
1:         master.start();
1:         master.waitUntilStarted();
1: 
1:         FileUtils.forceDelete(new File("target/test/kahadb/lock"));
1: 
1:         assertTrue("broker should be stopped now", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return master.isStopped();
1:             }
1:         }));
1: 
1:         master.stop();
1:         master.waitUntilStopped();
1:     }
1: 
1: }
============================================================================