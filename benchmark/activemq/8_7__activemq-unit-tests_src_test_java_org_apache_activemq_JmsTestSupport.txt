1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
5:d29ca2a: 
1:75b1c94: import java.io.File;
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Collections;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.List;
1:7bd8fb6: import java.util.concurrent.atomic.AtomicLong;
1:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.BrokerFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: 
1:d29ca2a: /**
1:977393d:  * Test cases used to test the JMS message consumer.
1:3eed779:  *
1:3eed779:  *
1:d29ca2a:  */
1:d29ca2a: public class JmsTestSupport extends CombinationTestSupport {
1:d29ca2a: 
1:7bd8fb6:     static final private AtomicLong TEST_COUNTER = new AtomicLong();
1:d29ca2a:     public String userName;
1:d29ca2a:     public String password;
1:2189100:     public String messageTextPrefix = "";
1:d29ca2a: 
1:d29ca2a:     protected ConnectionFactory factory;
1:d29ca2a:     protected ActiveMQConnection connection;
1:d29ca2a:     protected BrokerService broker;
1:f812e34: 
1:933eb2f:     protected List<Connection> connections = Collections.synchronizedList(new ArrayList<Connection>());
1:d29ca2a: 
1:d29ca2a:     // /////////////////////////////////////////////////////////////////
1:d29ca2a:     //
1:d29ca2a:     // Test support methods.
1:d29ca2a:     //
1:d29ca2a:     // /////////////////////////////////////////////////////////////////
1:d29ca2a:     protected ActiveMQDestination createDestination(Session session, byte type) throws JMSException {
1:7bd8fb6:         String testMethod = getName();
1:7bd8fb6:         if( testMethod.indexOf(" ")>0 ) {
1:7bd8fb6:             testMethod = testMethod.substring(0, testMethod.indexOf(" "));
1:7bd8fb6:         }
1:7bd8fb6:         String name = "TEST." + getClass().getName() + "." +testMethod+"."+TEST_COUNTER.getAndIncrement();
1:d29ca2a:         switch (type) {
1:d29ca2a:         case ActiveMQDestination.QUEUE_TYPE:
1:8cad176:             return (ActiveMQDestination)session.createQueue(name);
1:d29ca2a:         case ActiveMQDestination.TOPIC_TYPE:
1:8cad176:             return (ActiveMQDestination)session.createTopic(name);
1:d29ca2a:         case ActiveMQDestination.TEMP_QUEUE_TYPE:
1:f812e34:             return (ActiveMQDestination)session.createTemporaryQueue();
1:d29ca2a:         case ActiveMQDestination.TEMP_TOPIC_TYPE:
1:f812e34:             return (ActiveMQDestination)session.createTemporaryTopic();
1:74a7a8b:         default:
1:74a7a8b:             throw new IllegalArgumentException("type: " + type);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void sendMessages(Destination destination, int count) throws Exception {
1:d29ca2a:         ConnectionFactory factory = createConnectionFactory();
1:d29ca2a:         Connection connection = factory.createConnection();
1:d29ca2a:         connection.start();
1:d29ca2a:         sendMessages(connection, destination, count);
1:d29ca2a:         connection.close();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void sendMessages(Connection connection, Destination destination, int count) throws JMSException {
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         sendMessages(session, destination, count);
1:d29ca2a:         session.close();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void sendMessages(Session session, Destination destination, int count) throws JMSException {
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:3eed779:         sendMessages(session, producer, count);
1:3eed779:         producer.close();
1:3eed779:     }
1:3eed779: 
1:3eed779:     protected void sendMessages(Session session, MessageProducer producer, int count) throws JMSException {
1:d29ca2a:         for (int i = 0; i < count; i++) {
1:2189100:             producer.send(session.createTextMessage(messageTextPrefix  + i));
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:d29ca2a:         return new ActiveMQConnectionFactory("vm://localhost");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:05b4019:         BrokerService service = BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false"));
1:05b4019:         service.getManagementContext().setCreateConnector(false);;
1:05b4019:         return service;
1:d29ca2a:     }
1:d29ca2a: 
1:05b4019:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:aa74350:         super.setUp();
1:75b1c94: 
1:f812e34:         if (System.getProperty("basedir") == null) {
1:f812e34:             File file = new File(".");
1:f812e34:             System.setProperty("basedir", file.getAbsolutePath());
1:75b1c94:         }
1:75b1c94: 
1:d29ca2a:         broker = createBroker();
1:d29ca2a:         broker.start();
1:d29ca2a:         factory = createConnectionFactory();
1:f812e34:         connection = (ActiveMQConnection)factory.createConnection(userName, password);
1:d29ca2a:         connections.add(connection);
1:d29ca2a:     }
1:d29ca2a: 
1:05b4019:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:3eed779:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:3eed779:             Connection conn = iter.next();
1:d29ca2a:             try {
1:d29ca2a:                 conn.close();
1:d29ca2a:             } catch (Throwable e) {
1:d29ca2a:             }
1:01bdc52:             iter.remove();
1:d29ca2a:         }
1:d29ca2a:         broker.stop();
1:aa74350:         super.tearDown();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     protected void safeClose(Connection c) {
1:d29ca2a:         try {
1:d29ca2a:             c.close();
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     protected void safeClose(Session s) {
1:d29ca2a:         try {
1:d29ca2a:             s.close();
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void safeClose(MessageConsumer c) {
1:d29ca2a:         try {
1:d29ca2a:             c.close();
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void safeClose(MessageProducer p) {
1:d29ca2a:         try {
1:d29ca2a:             p.close();
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void profilerPause(String prompt) throws IOException {
1:f812e34:         if (System.getProperty("profiler") != null) {
1:d29ca2a:             pause(prompt);
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     protected void pause(String prompt) throws IOException {
1:d29ca2a:         System.out.println();
1:f812e34:         System.out.println(prompt + "> Press enter to continue: ");
1:f812e34:         while (System.in.read() != '\n') {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:05b4019
/////////////////////////////////////////////////////////////////////////
1:         BrokerService service = BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false"));
1:         service.getManagementContext().setCreateConnector(false);;
1:         return service;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:3eed779
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:         sendMessages(session, producer, count);
1:         producer.close();
1:     }
1: 
1:     protected void sendMessages(Session session, MessageProducer producer, int count) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:             Connection conn = iter.next();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:7bd8fb6
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
1:     static final private AtomicLong TEST_COUNTER = new AtomicLong();
/////////////////////////////////////////////////////////////////////////
1:         String testMethod = getName();
1:         if( testMethod.indexOf(" ")>0 ) {
1:             testMethod = testMethod.substring(0, testMethod.indexOf(" "));
1:         }
1:         String name = "TEST." + getClass().getName() + "." +testMethod+"."+TEST_COUNTER.getAndIncrement();
commit:01bdc52
/////////////////////////////////////////////////////////////////////////
1:             iter.remove();
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected List<Connection> connections = Collections.synchronizedList(new ArrayList<Connection>());
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         default:
1:             throw new IllegalArgumentException("type: " + type);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:             return (ActiveMQDestination)session.createQueue("TEST");
0:             return (ActiveMQDestination)session.createTopic("TEST");
1:             return (ActiveMQDestination)session.createTemporaryQueue();
1:             return (ActiveMQDestination)session.createTemporaryTopic();
/////////////////////////////////////////////////////////////////////////
0:             producer.send(session.createTextMessage("" + i));
/////////////////////////////////////////////////////////////////////////
1:         if (System.getProperty("basedir") == null) {
1:             File file = new File(".");
1:             System.setProperty("basedir", file.getAbsolutePath());
1:         connection = (ActiveMQConnection)factory.createConnection(userName, password);
0:             Connection conn = (Connection)iter.next();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (System.getProperty("profiler") != null) {
1: 
1:         System.out.println(prompt + "> Press enter to continue: ");
1:         while (System.in.read() != '\n') {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:75b1c94
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     	if(System.getProperty("basedir")==null){
0:             File file=new File(".");
0:             System.setProperty("basedir",file.getAbsolutePath());
1:         }
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
0:  * Test cases used to test the JMS message comsumer.
1:  * 
0:  * @version $Revision$
1:  */
1: public class JmsTestSupport extends CombinationTestSupport {
1: 
1:     public String userName;
1:     public String password;
1: 
1:     protected ConnectionFactory factory;
1:     protected ActiveMQConnection connection;
1:     protected BrokerService broker;
1:     
0:     protected List connections = Collections.synchronizedList(new ArrayList());
1: 
1:     // /////////////////////////////////////////////////////////////////
1:     //
1:     // Test support methods.
1:     //
1:     // /////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination createDestination(Session session, byte type) throws JMSException {
1:         switch (type) {
1:         case ActiveMQDestination.QUEUE_TYPE:
0:             return (ActiveMQDestination) session.createQueue("TEST");
1:         case ActiveMQDestination.TOPIC_TYPE:
0:             return (ActiveMQDestination) session.createTopic("TEST");
1:         case ActiveMQDestination.TEMP_QUEUE_TYPE:
0:             return (ActiveMQDestination) session.createTemporaryQueue();
1:         case ActiveMQDestination.TEMP_TOPIC_TYPE:
0:             return (ActiveMQDestination) session.createTemporaryTopic();
1:         }
0:         throw new IllegalArgumentException("type: " + type);
1:     }
1: 
1:     protected void sendMessages(Destination destination, int count) throws Exception {
1:         ConnectionFactory factory = createConnectionFactory();
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         sendMessages(connection, destination, count);
1:         connection.close();
1:     }
1: 
1:     protected void sendMessages(Connection connection, Destination destination, int count) throws JMSException {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         sendMessages(session, destination, count);
1:         session.close();
1:     }
1: 
1:     protected void sendMessages(Session session, Destination destination, int count) throws JMSException {
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 0; i < count; i++) {
0:             producer.send(session.createTextMessage(""+i));
1:         }
0:         producer.close();
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://localhost");
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
0:         return BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false"));
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         factory = createConnectionFactory();
0:         connection = (ActiveMQConnection) factory.createConnection(userName, password);
1:         connections.add(connection);
1:     }
1: 
1:     protected void tearDown() throws Exception {
0:         for (Iterator iter = connections.iterator(); iter.hasNext();) {
0:             Connection conn= (Connection) iter.next();
1:             try {
1:                 conn.close();
1:             } catch (Throwable e) {
1:             }
1:         }
1:         broker.stop();
1:     }
1:     
1:     protected void safeClose(Connection c) {
1:         try {
1:             c.close();
1:         } catch (Throwable e) {
1:         }
1:     }
1: 
1:     protected void safeClose(Session s) {
1:         try {
1:             s.close();
1:         } catch (Throwable e) {
1:         }
1:     }
1: 
1:     protected void safeClose(MessageConsumer c) {
1:         try {
1:             c.close();
1:         } catch (Throwable e) {
1:         }
1:     }
1: 
1:     protected void safeClose(MessageProducer p) {
1:         try {
1:             p.close();
1:         } catch (Throwable e) {
1:         }
1:     }
1:     
1:     protected void profilerPause(String prompt) throws IOException {
0:         if( System.getProperty("profiler")!=null ) {
1:             pause(prompt);
1:         }
1:     }
1:     
1:     protected void pause(String prompt) throws IOException {
1:         System.out.println();
0:         System.out.println(prompt+"> Press enter to continue: ");
0:         while( System.in.read()!='\n' ) {            
1:         }
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:2189100
/////////////////////////////////////////////////////////////////////////
1:     public String messageTextPrefix = "";
/////////////////////////////////////////////////////////////////////////
1:             producer.send(session.createTextMessage(messageTextPrefix  + i));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:977393d
/////////////////////////////////////////////////////////////////////////
1:  * Test cases used to test the JMS message consumer.
author:James Strachan
-------------------------------------------------------------------------------
commit:8cad176
/////////////////////////////////////////////////////////////////////////
0:         String name = "TEST." + getClass().getName() + "." + getName();
1:             return (ActiveMQDestination)session.createQueue(name);
1:             return (ActiveMQDestination)session.createTopic(name);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:aa74350
/////////////////////////////////////////////////////////////////////////
1:         super.setUp();
/////////////////////////////////////////////////////////////////////////
1:         super.tearDown();
============================================================================