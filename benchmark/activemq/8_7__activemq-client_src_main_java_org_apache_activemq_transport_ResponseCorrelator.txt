1:d29ca2a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
5:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:9cf5f45: import java.util.ArrayList;
1:9cf5f45: import java.util.HashMap;
1:9cf5f45: import java.util.Iterator;
1:32a4c47: import java.util.Map;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.command.Command;
1:9cf5f45: import org.apache.activemq.command.ExceptionResponse;
1:d29ca2a: import org.apache.activemq.command.Response;
1:364337b: import org.apache.activemq.util.IntSequenceGenerator;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:f812e34:  * Adds the incrementing sequence number to commands along with performing the
1:8012f28:  * correlation of responses to requests to create a blocking request-response
1:f812e34:  * semantics.
1:b0c2a40:  * 
5:d29ca2a:  * 
1:d29ca2a:  */
1:f812e34: public class ResponseCorrelator extends TransportFilter {
1:d29ca2a: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ResponseCorrelator.class);
1:933eb2f:     private final Map<Integer, FutureResponse> requestMap = new HashMap<Integer, FutureResponse>();
1:364337b:     private IntSequenceGenerator sequenceGenerator;
1:f812e34:     private final boolean debug = LOG.isDebugEnabled();
1:5d48584:     private IOException error;
1:d29ca2a: 
1:f812e34:     public ResponseCorrelator(Transport next) {
1:f812e34:         this(next, new IntSequenceGenerator());
1:d29ca2a:     }
1:9cf5f45: 
1:f812e34:     public ResponseCorrelator(Transport next, IntSequenceGenerator sequenceGenerator) {
1:d29ca2a:         super(next);
1:f812e34:         this.sequenceGenerator = sequenceGenerator;
1:9cf5f45:     }
1:9cf5f45: 
1:f812e34:     public void oneway(Object o) throws IOException {
3:f812e34:         Command command = (Command)o;
1:364337b:         command.setCommandId(sequenceGenerator.getNextSequenceId());
1:d29ca2a:         command.setResponseRequired(false);
1:d29ca2a:         next.oneway(command);
1:9cf5f45:     }
1:d29ca2a: 
1:f812e34:     public FutureResponse asyncRequest(Object o, ResponseCallback responseCallback) throws IOException {
2:9ca56a0:         Command command = (Command) o;
1:364337b:         command.setCommandId(sequenceGenerator.getNextSequenceId());
1:d29ca2a:         command.setResponseRequired(true);
1:0a12bcb:         FutureResponse future = new FutureResponse(responseCallback, this);
1:414a646:         IOException priorError = null;
1:f812e34:         synchronized (requestMap) {
1:414a646:             priorError = this.error;
1:414a646:             if (priorError == null) {
1:f812e34:                 requestMap.put(new Integer(command.getCommandId()), future);
1:5d48584:             }
1:d29ca2a:         }
1:d29ca2a: 
1:414a646:         if (priorError != null) {
1:414a646:             future.set(new ExceptionResponse(priorError));
1:414a646:             throw priorError;
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         next.oneway(command);
1:d29ca2a:         return future;
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public Object request(Object command) throws IOException {
1:f812e34:         FutureResponse response = asyncRequest(command, null);
1:d29ca2a:         return response.getResult();
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public Object request(Object command, int timeout) throws IOException {
1:f812e34:         FutureResponse response = asyncRequest(command, null);
1:5fe0a4c:         return response.getResult(timeout);
1:414a646:     }
1:d29ca2a: 
1:f812e34:     public void onCommand(Object o) {
1:dd1b847:         Command command = null;
1:dd1b847:         if (o instanceof Command) {
1:dd1b847:             command = (Command)o;
1:dd1b847:         } else {
1:dd1b847:             throw new ClassCastException("Object cannot be converted to a Command,  Object: " + o);
1:dd1b847:         }
1:f812e34:         if (command.isResponse()) {
1:f812e34:             Response response = (Response)command;
1:f812e34:             FutureResponse future = null;
1:f812e34:             synchronized (requestMap) {
1:933eb2f:                 future = requestMap.remove(Integer.valueOf(response.getCorrelationId()));
1:d29ca2a:             }
1:f812e34:             if (future != null) {
1:9c13563:                 future.set(response);
1:f812e34:             } else {
1:fc00993:                 if (debug) {
1:e225ba6:                     LOG.debug("Received unexpected response: {" + command + "}for command id: " + response.getCorrelationId());
1:fc00993:                 }
1:84fd773:             }
1:f812e34:         } else {
1:436fe42:             getTransportListener().onCommand(command);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:9cf5f45:     /**
1:f812e34:      * If an async exception occurs, then assume no responses will arrive for
1:f812e34:      * any of current requests. Lets let them know of the problem.
1:9cf5f45:      */
1:f812e34:     public void onException(IOException error) {
1:0a12bcb:         dispose(new TransportDisposedIOException("Disposed due to prior exception", error));
1:9cf5f45:         super.onException(error);
1:9cf5f45:     }
1:5d48584:     
1:5d48584:     @Override
1:5d48584:     public void stop() throws Exception {
1:5d48584:         dispose(new IOException("Stopped."));
1:5d48584:         super.stop();
1:5d48584:     }
1:5d48584: 
1:5d48584:     private void dispose(IOException error) {
1:5d48584:         ArrayList<FutureResponse> requests=null; 
1:5d48584:         synchronized(requestMap) {
1:5d48584:             if( this.error==null) {
1:5d48584:                 this.error = error;
1:5d48584:                 requests = new ArrayList<FutureResponse>(requestMap.values());
1:5d48584:                 requestMap.clear();
1:5d48584:             }
1:5d48584:         }
1:5d48584:         if( requests!=null ) {
1:5d48584:             for (Iterator<FutureResponse> iter = requests.iterator(); iter.hasNext();) {
1:5d48584:                 FutureResponse fr = iter.next();
1:5d48584:                 fr.set(new ExceptionResponse(error));
1:5d48584:             }
1:5d48584:         }
1:5d48584:     }
1:9cf5f45: 
1:f812e34:     public IntSequenceGenerator getSequenceGenerator() {
1:364337b:         return sequenceGenerator;
1:d29ca2a:     }
1:9cf5f45: 
1:f812e34:     public String toString() {
1:d29ca2a:         return next.toString();
1:d29ca2a:     }
3:32a4c47: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:0a12bcb
/////////////////////////////////////////////////////////////////////////
1:         FutureResponse future = new FutureResponse(responseCallback, this);
/////////////////////////////////////////////////////////////////////////
1:         dispose(new TransportDisposedIOException("Disposed due to prior exception", error));
author:Gary Tully
-------------------------------------------------------------------------------
commit:8012f28
/////////////////////////////////////////////////////////////////////////
1:  * correlation of responses to requests to create a blocking request-response
commit:dd1b847
/////////////////////////////////////////////////////////////////////////
1:         Command command = null;
1:         if (o instanceof Command) {
1:             command = (Command)o;
1:         } else {
1:             throw new ClassCastException("Object cannot be converted to a Command,  Object: " + o);
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:5d48584
/////////////////////////////////////////////////////////////////////////
1:     private IOException error;
/////////////////////////////////////////////////////////////////////////
0:             if( this.error !=null ) {
0:                 throw error;
1:             }
/////////////////////////////////////////////////////////////////////////
0:         dispose(error);
1:     
1:     @Override
1:     public void stop() throws Exception {
1:         dispose(new IOException("Stopped."));
1:         super.stop();
1:     }
1: 
1:     private void dispose(IOException error) {
1:         ArrayList<FutureResponse> requests=null; 
1:         synchronized(requestMap) {
1:             if( this.error==null) {
1:                 this.error = error;
1:                 requests = new ArrayList<FutureResponse>(requestMap.values());
1:                 requestMap.clear();
1:             }
1:         }
1:         if( requests!=null ) {
1:             for (Iterator<FutureResponse> iter = requests.iterator(); iter.hasNext();) {
1:                 FutureResponse fr = iter.next();
1:                 fr.set(new ExceptionResponse(error));
1:             }
1:         }
1:     }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private final Map<Integer, FutureResponse> requestMap = new HashMap<Integer, FutureResponse>();
/////////////////////////////////////////////////////////////////////////
1:                 future = requestMap.remove(Integer.valueOf(response.getCorrelationId()));
/////////////////////////////////////////////////////////////////////////
0:         ArrayList<FutureResponse> requests = new ArrayList<FutureResponse>(requestMap.values());
0:         for (Iterator<FutureResponse> iter = requests.iterator(); iter.hasNext();) {
0:             FutureResponse fr = iter.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
1:                 if (debug) {
1:                 }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Adds the incrementing sequence number to commands along with performing the
0:  * corelation of responses to requests to create a blocking request-response
1:  * semantics.
1: public class ResponseCorrelator extends TransportFilter {
0:     private static final Log LOG = LogFactory.getLog(ResponseCorrelator.class);
0:     private final Map requestMap = new HashMap();
1:     private final boolean debug = LOG.isDebugEnabled();
1:     public ResponseCorrelator(Transport next) {
1:         this(next, new IntSequenceGenerator());
1:     public ResponseCorrelator(Transport next, IntSequenceGenerator sequenceGenerator) {
1:         this.sequenceGenerator = sequenceGenerator;
1:     public void oneway(Object o) throws IOException {
1:         Command command = (Command)o;
1:     public FutureResponse asyncRequest(Object o, ResponseCallback responseCallback) throws IOException {
1:         Command command = (Command)o;
0:         FutureResponse future = new FutureResponse(responseCallback);
1:         synchronized (requestMap) {
1:             requestMap.put(new Integer(command.getCommandId()), future);
1:     public Object request(Object command) throws IOException {
1:         FutureResponse response = asyncRequest(command, null);
1:     public Object request(Object command, int timeout) throws IOException {
1:         FutureResponse response = asyncRequest(command, null);
1:     public void onCommand(Object o) {
1:         Command command = (Command)o;
1:         if (command.isResponse()) {
1:             Response response = (Response)command;
1:             FutureResponse future = null;
1:             synchronized (requestMap) {
0:                 future = (FutureResponse)requestMap.remove(Integer.valueOf(response.getCorrelationId()));
1:             if (future != null) {
1:             } else {
0:                 if (debug)
0:                     LOG.debug("Received unexpected response for command id: " + response.getCorrelationId());
1:         } else {
1:      * If an async exception occurs, then assume no responses will arrive for
1:      * any of current requests. Lets let them know of the problem.
1:     public void onException(IOException error) {
0:         ArrayList requests = new ArrayList(requestMap.values());
0:         for (Iterator iter = requests.iterator(); iter.hasNext();) {
0:             FutureResponse fr = (FutureResponse)iter.next();
1:     public IntSequenceGenerator getSequenceGenerator() {
1:     public String toString() {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
0:     public void oneway(Object o) throws IOException {
1:     	Command command = (Command) o;
0:     public FutureResponse asyncRequest(Object o, ResponseCallback responseCallback) throws IOException {
1:     	Command command = (Command) o;
/////////////////////////////////////////////////////////////////////////
0:     public Object request(Object command) throws IOException { 
0:     public Object request(Object command,int timeout) throws IOException {
0:     public void onCommand(Object o) {
0:     	Command command = (Command) o;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:9c13563
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             Response response = (Response) command;
0:             FutureResponse future = (FutureResponse) requestMap.remove(new Integer(response.getCorrelationId()));
0:             if( future!=null ) {
1:                 future.set(response);
0:             } else {
0:                 if( debug ) log.debug("Received unexpected response for command id: "+response.getCorrelationId());
/////////////////////////////////////////////////////////////////////////
0:             FutureResponse fr = (FutureResponse) iter.next();
0:             fr.set(new ExceptionResponse(error));
commit:9cf5f45
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import org.apache.activemq.command.ExceptionResponse;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * If an async exception occurs, then assume no responses will arrive for any of
0:      * current requests.  Lets let them know of the problem.
1:      */
0:     public void onException(IOException error) {
1:         
0:         // Copy and Clear the request Map
0:         ArrayList requests = new ArrayList(requestMap.values());
0:         requestMap.clear();
1:         
0:         for (Iterator iter = requests.iterator(); iter.hasNext();) {
0:             try {
0:                 FutureResponse fr = (FutureResponse) iter.next();
0:                 fr.set(new ExceptionResponse(error));
0:             } catch (InterruptedIOException e) {
0:                 Thread.currentThread().interrupt();
1:             }
1:         }
1:         
1:         super.onException(error);
1:     }
1:     
commit:84fd773
/////////////////////////////////////////////////////////////////////////
0: import java.io.InterruptedIOException;
/////////////////////////////////////////////////////////////////////////
0:     public FutureResponse asyncRequest(Command command, ResponseCallback responseCallback) throws IOException {
0:         FutureResponse future = new FutureResponse(responseCallback);
0:         FutureResponse response = asyncRequest(command, null);
0:         FutureResponse response = asyncRequest(command, null);
0:             try {
0:                 Response response = (Response) command;
0:                 FutureResponse future = (FutureResponse) requestMap.remove(new Integer(response.getCorrelationId()));
0:                 if( future!=null ) {
0:                     future.set(response);
0:                 } else {
0:                     if( debug ) log.debug("Received unexpected response for command id: "+response.getCorrelationId());
1:                 }
0:             } catch (InterruptedIOException e) {
0:                 onException(e);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.Response;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: 
1: /**
0:  * Creates a {@see org.activeio.RequestChannel} out of a {@see org.activeio.AsynchChannel}.  This 
0:  * {@see org.activeio.RequestChannel} is thread safe and mutiplexes concurrent requests and responses over
0:  * the underlying {@see org.activeio.AsynchChannel}.
1:  * 
0:  * @version $Revision: 1.4 $
1:  */
0: final public class ResponseCorrelator extends TransportFilter {
1:     
0:     private static final Log log = LogFactory.getLog(ResponseCorrelator.class);
1:     
0:     private final ConcurrentHashMap requestMap = new ConcurrentHashMap();
0:     private short lastCommandId = 0;
1: 
0:     synchronized short getNextCommandId() {
0:         return ++lastCommandId;
1:     }
1:     
0:     public ResponseCorrelator(Transport next) {
1:         super(next);
1:     }
1:     
0:     public void oneway(Command command) throws IOException {
0:         command.setCommandId(getNextCommandId());
1:         command.setResponseRequired(false);
1:         next.oneway(command);
1:     }
1: 
0:     public FutureResponse asyncRequest(Command command) throws IOException {
0:         command.setCommandId(getNextCommandId());
1:         command.setResponseRequired(true);
0:         FutureResponse future = new FutureResponse();
0:         requestMap.put(new Short(command.getCommandId()), future);
1:         next.oneway(command);
1:         return future;
1:     }
1:     
0:     public Response request(Command command) throws IOException { 
0:         FutureResponse response = asyncRequest(command);
1:         return response.getResult();
1:     }
1:     
0:     public void onCommand(Command command) {
0:         boolean debug = log.isDebugEnabled();
0:         if( command.isResponse() ) {
0:             Response response = (Response) command;
0:             FutureResponse future = (FutureResponse) requestMap.remove(new Short(response.getCorrelationId()));
0:             if( future!=null ) {
0:                 future.set(response);
0:             } else {
0:                 if( debug ) log.debug("Received unexpected response for command id: "+response.getCorrelationId());
1:             }
0:         } else {
0:             commandListener.onCommand(command);
1:         }
1:     }
1:     
0:     public String toString() {
1:         return next.toString();
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ResponseCorrelator.class);
author:Colin W Macnaughton
-------------------------------------------------------------------------------
commit:414a646
/////////////////////////////////////////////////////////////////////////
0:         Command command = (Command) o;
1:         IOException priorError = null;
1:             priorError = this.error;
1:             if (priorError == null) {
0:                 requestMap.put(new Integer(command.getCommandId()), future);
0: 
1:         if (priorError != null) {
1:             future.set(new ExceptionResponse(priorError));
1:             throw priorError;
1:         }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:e225ba6
/////////////////////////////////////////////////////////////////////////
1:                     LOG.debug("Received unexpected response: {" + command + "}for command id: " + response.getCorrelationId());
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:                 future=(FutureResponse)requestMap.remove(Integer.valueOf(response.getCorrelationId()));
commit:32a4c47
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: 
0: import java.util.HashMap;
1: import java.util.Map;
0:  * Adds the incrementing sequence number to commands along with performing the corelation of responses to requests to
0:  * create a blocking request-response semantics.
0: public class ResponseCorrelator extends TransportFilter{
0: 
0:     private static final Log log=LogFactory.getLog(ResponseCorrelator.class);
0:     private final Map requestMap=new HashMap();
0:     private final boolean debug=log.isDebugEnabled();
0: 
0:     public ResponseCorrelator(Transport next){
0:         this(next,new IntSequenceGenerator());
0:     public ResponseCorrelator(Transport next,IntSequenceGenerator sequenceGenerator){
0:         super(next);
0:         this.sequenceGenerator=sequenceGenerator;
1:     }
0: 
0:     public void oneway(Object o) throws IOException{
0:         Command command=(Command)o;
0:     public FutureResponse asyncRequest(Object o,ResponseCallback responseCallback) throws IOException{
0:         Command command=(Command)o;
0:         FutureResponse future=new FutureResponse(responseCallback);
0:         synchronized(requestMap){
0:             requestMap.put(new Integer(command.getCommandId()),future);
1:         }
0: 
0:     public Object request(Object command) throws IOException{
0:         FutureResponse response=asyncRequest(command,null);
0: 
0:     public Object request(Object command,int timeout) throws IOException{
0:         FutureResponse response=asyncRequest(command,null);
0: 
0:     public void onCommand(Object o){
0:         Command command=(Command)o;
0:         if(command.isResponse()){
0:             Response response=(Response)command;
0:             FutureResponse future=null;
0:             synchronized(requestMap){
0:                 future=(FutureResponse)requestMap.remove(new Integer(response.getCorrelationId()));
0:             if(future!=null){
0:                 future.set(response);
0:             }else{
0:                 if(debug)
0:                     log.debug("Received unexpected response for command id: "+response.getCorrelationId());
1:             }
0:         }else{
0: 
0:      * If an async exception occurs, then assume no responses will arrive for any of current requests. Lets let them
0:      * know of the problem.
0:     public void onException(IOException error){
0:         ArrayList requests=new ArrayList(requestMap.values());
0:         for(Iterator iter=requests.iterator();iter.hasNext();){
0:             FutureResponse fr=(FutureResponse)iter.next();
0: 
0:     public IntSequenceGenerator getSequenceGenerator(){
0:     public String toString(){
commit:76c466d
/////////////////////////////////////////////////////////////////////////
0:     private final boolean debug = log.isDebugEnabled();
/////////////////////////////////////////////////////////////////////////
0:         
commit:5fe0a4c
/////////////////////////////////////////////////////////////////////////
0:     public Response request(Command command,int timeout) throws IOException {
0:         FutureResponse response = asyncRequest(command);
1:         return response.getResult(timeout);
0:     }
0:     
author:James Strachan
-------------------------------------------------------------------------------
commit:364337b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntSequenceGenerator;
/////////////////////////////////////////////////////////////////////////
1:     private IntSequenceGenerator sequenceGenerator;
0:         this(next, new IntSequenceGenerator());
0:     public ResponseCorrelator(Transport next, IntSequenceGenerator sequenceGenerator) {
0:         super(next);
0:         this.sequenceGenerator = sequenceGenerator;
0:     }
0: 
1:         command.setCommandId(sequenceGenerator.getNextSequenceId());
1:         command.setCommandId(sequenceGenerator.getNextSequenceId());
/////////////////////////////////////////////////////////////////////////
0:     public IntSequenceGenerator getSequenceGenerator() {
1:         return sequenceGenerator;
0:     }
0: 
commit:72b382d
/////////////////////////////////////////////////////////////////////////
0: public class ResponseCorrelator extends TransportFilter {
0:     public synchronized int getNextCommandId() {
/////////////////////////////////////////////////////////////////////////
0:         // a parent transport could have set the ID
0:         if (command.getCommandId() == 0) {
0:             command.setCommandId(getNextCommandId());
0:         }
0:         // a parent transport could have set the ID
0:         if (command.getCommandId() == 0) {
0:             command.setCommandId(getNextCommandId());
0:         }
commit:8704338
/////////////////////////////////////////////////////////////////////////
0:  * Adds the incrementing sequence number to commands along with performing the corelation of
0:  * responses to requests to create a blocking request-response semantics.
/////////////////////////////////////////////////////////////////////////
0:     private int lastCommandId = 0;
0:     synchronized int getNextCommandId() {
/////////////////////////////////////////////////////////////////////////
0:         requestMap.put(new Integer(command.getCommandId()), future);
/////////////////////////////////////////////////////////////////////////
0:             FutureResponse future = (FutureResponse) requestMap.remove(new Integer(response.getCorrelationId()));
commit:436fe42
/////////////////////////////////////////////////////////////////////////
1:             getTransportListener().onCommand(command);
============================================================================