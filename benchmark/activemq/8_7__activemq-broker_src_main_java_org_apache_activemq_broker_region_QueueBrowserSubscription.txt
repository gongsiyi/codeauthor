1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region;
1:f812e34: 
1:fbb26ba: import java.io.IOException;
1:1760d1a: import java.util.ArrayList;
1:1760d1a: import java.util.List;
1:d346a76: import java.util.concurrent.ConcurrentHashMap;
1:d346a76: import java.util.concurrent.ConcurrentMap;
1:1f5694e: 
1:915333e: import javax.jms.JMSException;
1:915333e: 
1:4098942: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:18d616c: import org.apache.activemq.command.MessageAck;
1:c50b8e4: import org.apache.activemq.command.MessageId;
1:d29ca2a: import org.apache.activemq.filter.MessageEvaluationContext;
1:9dd11cb: import org.apache.activemq.usage.SystemUsage;
1:c50b8e4: import org.slf4j.Logger;
1:c50b8e4: import org.slf4j.LoggerFactory;
1:f812e34: 
1:18d616c: public class QueueBrowserSubscription extends QueueSubscription {
1:f812e34: 
1:c50b8e4:     protected static final Logger LOG = LoggerFactory.getLogger(QueueBrowserSubscription.class);
1:c50b8e4: 
1:5269519:     int queueRefs;
1:d29ca2a:     boolean browseDone;
1:5269519:     boolean destinationsAdded;
1:c50b8e4: 
1:d346a76:     private final ConcurrentMap<MessageId, Object> audit = new ConcurrentHashMap<MessageId, Object>();
1:85bc9ce:     private long maxMessages;
1:f812e34: 
1:1f5694e:     public QueueBrowserSubscription(Broker broker, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info) throws JMSException {
1:1f5694e:         super(broker, usageManager, context, info);
5:d29ca2a:     }
1:c50b8e4: 
1:1f5694e:     @Override
1:d29ca2a:     protected boolean canDispatch(MessageReference node) {
1:1f5694e:         return !((QueueMessageReference) node).isAcked();
1:d29ca2a:     }
1:5269519: 
1:1f5694e:     @Override
1:a3e3821:     public synchronized String toString() {
1:1f5694e:         return "QueueBrowserSubscription:" + " consumer=" + info.getConsumerId() +
1:1f5694e:                ", destinations=" + destinations.size() + ", dispatched=" + dispatched.size() +
1:1f5694e:                ", delivered=" + this.prefetchExtension + ", pending=" + getPendingQueueSize();
1:d29ca2a:     }
1:f812e34: 
1:5269519:     synchronized public void destinationsAdded() throws Exception {
1:5269519:         destinationsAdded = true;
1:5269519:         checkDone();
1:c50b8e4:     }
1:c50b8e4: 
1:c50b8e4:     public boolean isDuplicate(MessageId messageId) {
1:d346a76:         return audit.putIfAbsent(messageId, Boolean.TRUE) != null;
1:c50b8e4:     }
1:c50b8e4: 
1:5269519:     private void checkDone() throws Exception {
1:1f5694e:         if (!browseDone && queueRefs == 0 && destinationsAdded) {
1:1f5694e:             browseDone = true;
1:5269519:             add(QueueMessageReference.NULL_MESSAGE);
1:5269519:         }
1:5269519:     }
1:1760d1a: 
1:1f5694e:     @Override
1:fbb26ba:     public boolean matches(MessageReference node, MessageEvaluationContext context) throws IOException {
1:d29ca2a:         return !browseDone && super.matches(node, context);
1:18d616c:     }
1:a19bfd4: 
1:18d616c:     /**
1:18d616c:      * Since we are a browser we don't really remove the message from the queue.
1:18d616c:      */
1:1f5694e:     @Override
1:1f5694e:     protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference n) throws IOException {
1:1f5694e:         if (info.isNetworkSubscription()) {
1:1f5694e:             super.acknowledge(context, ack, n);
1:1f5694e:         }
1:10dae9c:     }
3:18d616c: 
1:5269519:     synchronized public void incrementQueueRef() {
1:1f5694e:         queueRefs++;
1:5269519:     }
1:5269519: 
1:5269519:     synchronized public void decrementQueueRef() throws Exception {
1:75f8f69:         if (queueRefs > 0) {
1:75f8f69:             queueRefs--;
1:75f8f69:         }
1:5269519:         checkDone();
1:5269519:     }
1:5269519: 
1:1760d1a:     @Override
1:1760d1a:     public List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception {
1:1760d1a:         super.remove(context, destination);
1:1760d1a:         // there's no unacked messages that needs to be redelivered
1:1760d1a:         // in case of browser
1:1760d1a:         return new ArrayList<MessageReference>();
1:1760d1a:     }
1:85bc9ce: 
1:85bc9ce:     public boolean atMax() {
1:85bc9ce:         return maxMessages > 0 && getEnqueueCounter() >= maxMessages;
1:85bc9ce:     }
1:85bc9ce: 
1:85bc9ce:     public void setMaxMessages(long max) {
1:85bc9ce:         maxMessages = max;
1:85bc9ce:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:d346a76
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     private final ConcurrentMap<MessageId, Object> audit = new ConcurrentHashMap<MessageId, Object>();
/////////////////////////////////////////////////////////////////////////
1:         return audit.putIfAbsent(messageId, Boolean.TRUE) != null;
author:gtully
-------------------------------------------------------------------------------
commit:85bc9ce
/////////////////////////////////////////////////////////////////////////
1:     private long maxMessages;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean atMax() {
1:         return maxMessages > 0 && getEnqueueCounter() >= maxMessages;
1:     }
1: 
1:     public void setMaxMessages(long max) {
1:         maxMessages = max;
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c50b8e4
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageId;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     protected static final Logger LOG = LoggerFactory.getLogger(QueueBrowserSubscription.class);
1: 
0:     private final Map<MessageId, Object> audit = new HashMap<MessageId, Object>();
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean isDuplicate(MessageId messageId) {
1: 
0:         if (!audit.containsKey(messageId)) {
0:             audit.put(messageId, Boolean.TRUE);
0:             return false;
1:         }
1: 
0:         return true;
1:     }
1: 
commit:1f5694e
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public QueueBrowserSubscription(Broker broker, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info) throws JMSException {
1:         super(broker, usageManager, context, info);
1:     @Override
1:         return !((QueueMessageReference) node).isAcked();
1:     @Override
1:         return "QueueBrowserSubscription:" + " consumer=" + info.getConsumerId() +
1:                ", destinations=" + destinations.size() + ", dispatched=" + dispatched.size() +
1:                ", delivered=" + this.prefetchExtension + ", pending=" + getPendingQueueSize();
/////////////////////////////////////////////////////////////////////////
1:         if (!browseDone && queueRefs == 0 && destinationsAdded) {
1:             browseDone = true;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference n) throws IOException {
1:         if (info.isNetworkSubscription()) {
1:             super.acknowledge(context, ack, n);
1:         }
1:         queueRefs++;
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:75f8f69
/////////////////////////////////////////////////////////////////////////
1:         if (queueRefs > 0) {
1:             queueRefs--;
1:         }
commit:915333e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: 
0: import org.apache.activemq.broker.region.cursors.VMPendingMessageCursor;
/////////////////////////////////////////////////////////////////////////
0:         throws JMSException {
commit:1760d1a
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception {
1:         super.remove(context, destination);
1:         // there's no unacked messages that needs to be redelivered
1:         // in case of browser
1:         return new ArrayList<MessageReference>();
1:     }
commit:10dae9c
/////////////////////////////////////////////////////////////////////////
0:     	if (info.isNetworkSubscription()) {
0:     		super.acknowledge(context, ack, n);
1:     	}
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:5269519
/////////////////////////////////////////////////////////////////////////
1:     int queueRefs;
1:     boolean destinationsAdded;
/////////////////////////////////////////////////////////////////////////
1:     synchronized public void destinationsAdded() throws Exception {
1:         destinationsAdded = true;
1:         checkDone();
1:     }
1: 
1:     private void checkDone() throws Exception {
0:         if( !browseDone && queueRefs == 0 && destinationsAdded) {
0:             browseDone=true;
1:             add(QueueMessageReference.NULL_MESSAGE);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     synchronized public void incrementQueueRef() {
0:         queueRefs++;        
1:     }
1: 
1:     synchronized public void decrementQueueRef() throws Exception {
0:         queueRefs--;
1:         checkDone();
1:     }
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:     public QueueBrowserSubscription(Broker broker, ConnectionContext context, ConsumerInfo info)
0:         throws InvalidSelectorException {
0:         super(broker, context, info);
1: 
1: 
0:         return "QueueBrowserSubscription:" + " consumer=" + info.getConsumerId() + ", destinations="
0:                + destinations.size() + ", dispatched=" + dispatched.size() + ", delivered="
0:                + this.prefetchExtension + ", pending=" + getPendingQueueSize();
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference n)
0:         throws IOException {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:a19bfd4
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.InvalidSelectorException;
1: 
/////////////////////////////////////////////////////////////////////////
0:         add(QueueMessageReference.NULL_MESSAGE);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:d65ba80
/////////////////////////////////////////////////////////////////////////
0:             ", pending="+getPendingQueueSize();
commit:18d616c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageAck;
1: public class QueueBrowserSubscription extends QueueSubscription {
/////////////////////////////////////////////////////////////////////////
1:     
1: 
1:     /**
1:      * Since we are a browser we don't really remove the message from the queue.
1:      */
0:     protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference n) throws IOException {
1:     }
1: 
commit:5ff3487
/////////////////////////////////////////////////////////////////////////
0:             ", delivered="+this.prefetchExtension+
0:             ", pending="+this.pending.size();
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void browseDone() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
0: 
0: import javax.jms.InvalidSelectorException;
0: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.filter.MessageEvaluationContext;
0: 
0: public class QueueBrowserSubscription extends PrefetchSubscription {
0:         
1:     boolean browseDone;
0:     
0:     public QueueBrowserSubscription(ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
0:         super(context, info);
1:     }
0:         
1:     protected boolean canDispatch(MessageReference node) {
0:         return !((IndirectMessageReference)node).isAcked();
1:     }
0:     
0:     public String toString() {
0:         return 
0:             "QueueBrowserSubscription:" +
0:             " consumer="+info.getConsumerId()+
0:             ", destinations="+destinations.size()+
0:             ", dispatched="+dispatched.size()+
0:             ", delivered="+this.delivered+
0:             ", matched="+this.matched.size();
1:     }
0: 
0:     public void browseDone() throws Throwable {
0:         browseDone = true;
0:         add(IndirectMessageReference.END_OF_BROWSE_MARKER);
1:     }
0:     
0:     protected MessageDispatch createMessageDispatch(MessageReference node, Message message) {
0:         if( node == IndirectMessageReference.END_OF_BROWSE_MARKER ) {
0:             MessageDispatch md = new MessageDispatch();
0:             md.setMessage(null);
0:             md.setConsumerId( info.getConsumerId() );
0:             md.setDestination( null );
0:             return md;
0:         } else {
0:             return super.createMessageDispatch(node, message);
1:         }
1:     }
0:     public boolean matches(MessageReference node, MessageEvaluationContext context) {
1:         return !browseDone && super.matches(node, context);
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public QueueBrowserSubscription(Broker broker,SystemUsage usageManager, ConnectionContext context, ConsumerInfo info)
0:         super(broker,usageManager, context, info);
commit:044c07d
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:     public QueueBrowserSubscription(Broker broker,Destination destination, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info)
0:         super(broker,destination,usageManager, context, info);
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
0:     public QueueBrowserSubscription(Broker broker, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info)
0:         super(broker,usageManager, context, info);
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
1:     public synchronized String toString() {
commit:7d1e6bc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageDispatch;
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
0:         return !((QueueMessageReference)node).isAcked();
/////////////////////////////////////////////////////////////////////////
0:         add(QueueMessageReference.END_OF_BROWSE_MARKER);
0:         if( node == QueueMessageReference.END_OF_BROWSE_MARKER ) {
commit:4098942
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
0:     public QueueBrowserSubscription(Broker broker,ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
0:         super(broker,context, info);
author:James Strachan
-------------------------------------------------------------------------------
commit:fbb26ba
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean matches(MessageReference node, MessageEvaluationContext context) throws IOException {
============================================================================