1:5ad72d6: /**
1:5ad72d6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5ad72d6:  * contributor license agreements.  See the NOTICE file distributed with
1:5ad72d6:  * this work for additional information regarding copyright ownership.
1:5ad72d6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5ad72d6:  * (the "License"); you may not use this file except in compliance with
1:5ad72d6:  * the License.  You may obtain a copy of the License at
1:5ad72d6:  *
1:5ad72d6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5ad72d6:  *
1:5ad72d6:  * Unless required by applicable law or agreed to in writing, software
1:5ad72d6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5ad72d6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5ad72d6:  * See the License for the specific language governing permissions and
1:5ad72d6:  * limitations under the License.
1:5ad72d6:  */
1:5ad72d6: 
1:5ad72d6: package org.apache.activemq.transport.discovery;
1:5ad72d6: 
1:5ad72d6: import org.apache.activemq.ActiveMQConnectionFactory;
1:5ad72d6: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:5ad72d6: import org.apache.activemq.broker.BrokerService;
1:5ad72d6: import org.apache.activemq.broker.TransportConnector;
1:5ad72d6: 
1:5ad72d6: import javax.jms.*;
1:5ad72d6: import java.net.URI;
1:5ad72d6: 
1:5ad72d6: public class DiscoveryUriTest extends EmbeddedBrokerTestSupport {
1:5ad72d6: 
1:5ad72d6:     @Override
1:5ad72d6:     protected BrokerService createBroker() throws Exception {
1:5ad72d6:         bindAddress = "tcp://localhost:0";
1:5ad72d6:         BrokerService answer = new BrokerService();
1:5ad72d6:         answer.setPersistent(isPersistent());
1:5ad72d6:         TransportConnector connector = new TransportConnector();
1:5ad72d6:         connector.setUri(new URI(bindAddress));
1:5ad72d6:         connector.setDiscoveryUri(new URI("multicast://default?group=test"));
1:5ad72d6:         answer.addConnector(connector);
1:5ad72d6:         return answer;
1:5ad72d6:     }
1:5ad72d6: 
1:5ad72d6:     public void testConnect() throws Exception {
1:330c9a8:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://default?group=test)?reconnectDelay=1000&maxReconnectAttempts=30&useExponentialBackOff=false");
1:5ad72d6:         Connection conn = factory.createConnection();
1:5ad72d6:         conn.start();
1:5ad72d6: 
1:5ad72d6:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5ad72d6:         MessageProducer producer = sess.createProducer(sess.createQueue("test"));
1:5ad72d6:         producer.send(sess.createTextMessage("test"));
1:5ad72d6:         MessageConsumer consumer = sess.createConsumer(sess.createQueue("test"));
1:5ad72d6:         Message msg = consumer.receive(1000);
1:5ad72d6:         assertNotNull(msg);
1:5ad72d6:     }
1:330c9a8: 
1:330c9a8:     public void testFailedConnect() throws Exception {
1:330c9a8:         try {
1:4acd132:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://default?group=test1)?reconnectDelay=1000&startupMaxReconnectAttempts=3&useExponentialBackOff=false");
1:330c9a8:             Connection conn = factory.createConnection();
1:330c9a8:             conn.start();
1:330c9a8:         } catch (Exception e) {
1:330c9a8:             return;
1:330c9a8:         }
1:330c9a8:         fail("Expected connection failure");
1:330c9a8:     }
1:5ad72d6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:4acd132
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://default?group=test1)?reconnectDelay=1000&startupMaxReconnectAttempts=3&useExponentialBackOff=false");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:330c9a8
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://default?group=test)?reconnectDelay=1000&maxReconnectAttempts=30&useExponentialBackOff=false");
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testFailedConnect() throws Exception {
1:         try {
0:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://default?group=test1)?reconnectDelay=1000&maxReconnectAttempts=3&useExponentialBackOff=false");
1:             Connection conn = factory.createConnection();
1:             conn.start();
1:         } catch (Exception e) {
1:             return;
1:         }
1:         fail("Expected connection failure");
1:     }
commit:1d885d3
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://default?group=test&reconnectDelay=1000&maxReconnectAttempts=30&useExponentialBackOff=false)");
commit:5ad72d6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.discovery;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: 
1: import javax.jms.*;
1: import java.net.URI;
1: 
1: public class DiscoveryUriTest extends EmbeddedBrokerTestSupport {
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         bindAddress = "tcp://localhost:0";
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(isPersistent());
1:         TransportConnector connector = new TransportConnector();
1:         connector.setUri(new URI(bindAddress));
1:         connector.setDiscoveryUri(new URI("multicast://default?group=test"));
1:         answer.addConnector(connector);
1:         return answer;
1:     }
1: 
1:     public void testConnect() throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://default?group=test)?reconnectDelay=1000&maxReconnectAttempts=30&useExponentialBackOff=false");
1:         Connection conn = factory.createConnection();
1:         conn.start();
1: 
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = sess.createProducer(sess.createQueue("test"));
1:         producer.send(sess.createTextMessage("test"));
1:         MessageConsumer consumer = sess.createConsumer(sess.createQueue("test"));
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: }
============================================================================