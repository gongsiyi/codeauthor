1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool;
3:a88906f: 
1:540dd5c: import javax.jms.Connection;
1:540dd5c: import javax.jms.ConnectionFactory;
1:540dd5c: import javax.jms.Destination;
1:540dd5c: import javax.jms.JMSException;
1:540dd5c: import javax.jms.Message;
1:540dd5c: import javax.jms.MessageConsumer;
1:540dd5c: import javax.jms.MessageListener;
1:540dd5c: import javax.jms.Session;
1:540dd5c: import javax.jms.Topic;
1:a88906f: 
1:a88906f: /**
1:b0c2a40:  * 
1:a88906f:  */
1:a88906f: public class MemConsumer extends MemMessageIdList implements MessageListener {
1:540dd5c: 
1:540dd5c:     static long ctr;
1:540dd5c: 
1:a88906f:     protected Connection connection;
1:a88906f:     protected MessageConsumer consumer;
1:540dd5c:     protected long counter;
1:540dd5c:     protected boolean isParent;
1:a88906f:     protected boolean inOrder = true;
1:a88906f: 
1:a88906f: 
1:a88906f:     public MemConsumer() {
1:a88906f:         super();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public MemConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException {
1:a88906f:         connection = fac.createConnection();
1:a88906f:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a88906f:         if (dest instanceof Topic && consumerName != null && consumerName.length() > 0) {
1:a88906f:             consumer = s.createDurableSubscriber((Topic) dest, consumerName);
1:a88906f:         } else {
1:a88906f:             consumer = s.createConsumer(dest);
1:86cbdfd:         }
1:a88906f:         consumer.setMessageListener(this);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public MemConsumer(ConnectionFactory fac, Destination dest) throws JMSException {
1:a88906f:         this(fac, dest, null);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void start() throws JMSException {
1:a88906f:         connection.start();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void stop() throws JMSException {
1:a88906f:         connection.stop();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void shutDown() throws JMSException {
1:a88906f:         connection.close();
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f:     public Message receive() throws JMSException {
1:a88906f:         return consumer.receive();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public Message receive(long wait) throws JMSException {
1:a88906f:         return consumer.receive(wait);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void onMessage(Message msg) {
1:a88906f:         super.onMessage(msg);
1:a88906f: 
1:a88906f:         if (isParent) {
1:a88906f:             try {
1:a88906f:                 long ctr = msg.getLongProperty("counter");
1:a88906f:                 if (counter != ctr) {
1:a88906f:                     inOrder = false;
1:a88906f:                 }
1:a88906f:                 counter++;
1:a88906f: 
1:a88906f:             } catch (Exception e) {
1:a88906f:                 e.printStackTrace();
1:a88906f:             }
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f:     public boolean isInOrder() {
1:a88906f:         return inOrder;
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f:     public void setAsParent(boolean isParent) {
1:a88906f:         this.isParent = isParent;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public boolean isParent() {
1:a88906f:         return this.isParent;
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1:     static long ctr;
1: 
1:     protected long counter;
1:     protected boolean isParent;
/////////////////////////////////////////////////////////////////////////
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool;
1: 
0: import org.apache.activemq.tool.MemMessageIdList;
1: 
0: import javax.jms.*;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class MemConsumer extends MemMessageIdList implements MessageListener {
1:     protected Connection connection;
1:     protected MessageConsumer consumer;
0:     protected long counter = 0;
0:     protected boolean isParent = false;
1:     protected boolean inOrder = true;
1: 
1: 
1:     public MemConsumer() {
1:         super();
1:     }
1: 
1:     public MemConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException {
1:         connection = fac.createConnection();
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         if (dest instanceof Topic && consumerName != null && consumerName.length() > 0) {
1:             consumer = s.createDurableSubscriber((Topic) dest, consumerName);
1:         } else {
1:             consumer = s.createConsumer(dest);
1:         }
1:         consumer.setMessageListener(this);
1:     }
1: 
1:     public MemConsumer(ConnectionFactory fac, Destination dest) throws JMSException {
1:         this(fac, dest, null);
1:     }
1: 
1:     public void start() throws JMSException {
1:         connection.start();
1:     }
1: 
1:     public void stop() throws JMSException {
1:         connection.stop();
1:     }
1: 
1:     public void shutDown() throws JMSException {
1:         connection.close();
1:     }
1: 
1: 
1:     public Message receive() throws JMSException {
1:         return consumer.receive();
1:     }
1: 
1:     public Message receive(long wait) throws JMSException {
1:         return consumer.receive(wait);
1:     }
1: 
0:     static long ctr = 0;
1: 
1:     public void onMessage(Message msg) {
1:         super.onMessage(msg);
1: 
1:         if (isParent) {
1:             try {
1:                 long ctr = msg.getLongProperty("counter");
1:                 if (counter != ctr) {
1:                     inOrder = false;
1:                 }
1:                 counter++;
1: 
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: 
1: 
1:     public boolean isInOrder() {
1:         return inOrder;
1:     }
1: 
1: 
1:     public void setAsParent(boolean isParent) {
1:         this.isParent = isParent;
1:     }
1: 
1:     public boolean isParent() {
1:         return this.isParent;
1:     }
1: 
1: 
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:2054392
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool;
0: 
0: import org.apache.activemq.tool.MemMessageIdList;
0: 
0: import javax.jms.*;
0: 
0: /**
0:  * @version $Revision: 1.3 $
0:  */
0: public class MemConsumer extends MemMessageIdList implements MessageListener {
0:     protected Connection connection;
0:     protected MessageConsumer consumer;
0:     protected long counter = 0;
0:     protected boolean isParent = false;
0:     protected boolean inOrder = true;
0: 
0: 
0:     public MemConsumer() {
0:         super();
0:     }
0: 
0:     public MemConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException {
0:         connection = fac.createConnection();
0:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         if (dest instanceof Topic && consumerName != null && consumerName.length() > 0) {
0:             consumer = s.createDurableSubscriber((Topic) dest, consumerName);
0:         } else {
0:             consumer = s.createConsumer(dest);
0:         }
0:         consumer.setMessageListener(this);
0:     }
0: 
0:     public MemConsumer(ConnectionFactory fac, Destination dest) throws JMSException {
0:         this(fac, dest, null);
0:     }
0: 
0:     public void start() throws JMSException {
0:         connection.start();
0:     }
0: 
0:     public void stop() throws JMSException {
0:         connection.stop();
0:     }
0: 
0:     public void shutDown() throws JMSException {
0:         connection.close();
0:     }
0: 
0: 
0:     public Message receive() throws JMSException {
0:         return consumer.receive();
0:     }
0: 
0:     public Message receive(long wait) throws JMSException {
0:         return consumer.receive(wait);
0:     }
0: 
0:     static long ctr = 0;
0: 
0:     public void onMessage(Message msg) {
0:         super.onMessage(msg);
0: 
0:         if (isParent) {
0:             try {
0:                 long ctr = msg.getLongProperty("counter");
0:                 if (counter != ctr) {
0:                     inOrder = false;
0:                 }
0:                 counter++;
0: 
0:             } catch (Exception e) {
0:                 e.printStackTrace();
0:             }
0:         }
0:     }
0: 
0: 
0:     public boolean isInOrder() {
0:         return inOrder;
0:     }
0: 
0: 
0:     public void setAsParent(boolean isParent) {
0:         this.isParent = isParent;
0:     }
0: 
0:     public boolean isParent() {
0:         return this.isParent;
0:     }
0: 
0: 
0: }
============================================================================