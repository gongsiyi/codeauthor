1:340728f: /**
1:340728f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:340728f:  * contributor license agreements.  See the NOTICE file distributed with
1:340728f:  * this work for additional information regarding copyright ownership.
1:340728f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:340728f:  * (the "License"); you may not use this file except in compliance with
1:340728f:  * the License.  You may obtain a copy of the License at
1:340728f:  *
1:340728f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:340728f:  *
1:340728f:  * Unless required by applicable law or agreed to in writing, software
1:340728f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:340728f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:340728f:  * See the License for the specific language governing permissions and
1:340728f:  * limitations under the License.
1:340728f:  */
1:340728f: package org.apache.activemq.broker.virtual;
4:340728f: 
1:340728f: import javax.jms.Connection;
1:340728f: import javax.jms.ConnectionFactory;
1:340728f: import javax.jms.MessageProducer;
1:340728f: import javax.jms.Session;
1:9f5fff7: 
1:340728f: import org.apache.activemq.ActiveMQConnectionFactory;
1:340728f: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:340728f: import org.apache.activemq.broker.BrokerService;
1:340728f: import org.apache.activemq.broker.region.DestinationInterceptor;
1:340728f: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:340728f: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:340728f: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:340728f: import org.apache.activemq.command.ActiveMQQueue;
1:340728f: import org.apache.activemq.command.ActiveMQTopic;
1:340728f: import org.junit.After;
1:340728f: import org.junit.Before;
1:340728f: import org.junit.Ignore;
1:340728f: import org.junit.Test;
1:340728f: import org.slf4j.Logger;
1:340728f: import org.slf4j.LoggerFactory;
1:340728f: 
1:340728f: public class VirtualTopicFanoutPerfTest {
1:340728f: 
1:340728f:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicFanoutPerfTest.class);
1:340728f: 
1:340728f:     int numConsumers = 100;
1:340728f:     int total = 500;
1:340728f:     BrokerService brokerService;
1:340728f:     ConnectionFactory connectionFactory;
1:340728f: 
1:340728f:     @Before
1:340728f:     public void createBroker() throws Exception  {
1:340728f:         brokerService = new BrokerService();
1:340728f:         brokerService.setDeleteAllMessagesOnStartup(true);
1:340728f:         brokerService.start();
1:340728f: 
1:340728f:         for (DestinationInterceptor destinationInterceptor  : brokerService.getDestinationInterceptors()) {
1:340728f:                 for (VirtualDestination virtualDestination : ((VirtualDestinationInterceptor) destinationInterceptor).getVirtualDestinations()) {
1:340728f:                     if (virtualDestination instanceof VirtualTopic) {
1:340728f:                         ((VirtualTopic) virtualDestination).setConcurrentSend(true);
1:ffdaeb2:                         ((VirtualTopic) virtualDestination).setTransactedSend(true);
2:340728f:                 }
1:340728f:             }
1:340728f:         }
1:340728f:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:340728f:         ActiveMQPrefetchPolicy zeroPrefetch = new ActiveMQPrefetchPolicy();
1:340728f:         zeroPrefetch.setAll(0);
1:340728f:         activeMQConnectionFactory.setPrefetchPolicy(zeroPrefetch);
1:340728f:         connectionFactory = activeMQConnectionFactory;
1:340728f:     }
1:340728f: 
1:340728f:     @After
1:340728f:     public void stopBroker() throws Exception  {
1:340728f:         brokerService.stop();
1:340728f:     }
1:340728f: 
1:340728f:     @Test
1:340728f:     @Ignore("comparison test - concurrentSend=true virtual topic, use transaction")
1:9f5fff7:     public void testFanoutDuration() throws Exception {
1:340728f: 
1:9f5fff7:         Connection connection1 = connectionFactory.createConnection();
1:9f5fff7:         connection1.start();
1:340728f: 
1:9f5fff7:         Session session = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:340728f:         for (int i=0; i<numConsumers; i++) {
1:340728f:             session.createConsumer(new ActiveMQQueue("Consumer." + i + ".VirtualTopic.TEST"));
1:340728f:         }
1:340728f: 
1:340728f:         // create topic producer
1:9f5fff7:         Connection connection2 = connectionFactory.createConnection();
1:9f5fff7:         connection2.start();
1:9f5fff7:         Session producerSession = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:340728f:         MessageProducer producer = producerSession.createProducer(new ActiveMQTopic("VirtualTopic.TEST"));
1:340728f: 
1:340728f:         long start = System.currentTimeMillis();
1:340728f:         LOG.info("Starting producer: " + start);
1:340728f:         for (int i = 0; i < total; i++) {
1:340728f:             producer.send(producerSession.createTextMessage("message: " + i));
1:340728f:         }
1:340728f:         LOG.info("Done producer, duration: " + (System.currentTimeMillis() - start) );
1:340728f: 
1:9f5fff7:         try {
1:9f5fff7:             connection1.close();
1:9f5fff7:         } catch (Exception ex) {}
1:9f5fff7:         try {
1:9f5fff7:             connection2.close();
1:9f5fff7:         } catch (Exception ex) {}
1:340728f:     }
1:340728f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9f5fff7
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testFanoutDuration() throws Exception {
1:         Connection connection1 = connectionFactory.createConnection();
1:         connection1.start();
1:         Session session = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Connection connection2 = connectionFactory.createConnection();
1:         connection2.start();
1:         Session producerSession = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             connection1.close();
1:         } catch (Exception ex) {}
1:         try {
1:             connection2.close();
1:         } catch (Exception ex) {}
author:gtully
-------------------------------------------------------------------------------
commit:ffdaeb2
/////////////////////////////////////////////////////////////////////////
1:                         ((VirtualTopic) virtualDestination).setTransactedSend(true);
commit:340728f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class VirtualTopicFanoutPerfTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicFanoutPerfTest.class);
1: 
1:     int numConsumers = 100;
1:     int total = 500;
1:     BrokerService brokerService;
1:     ConnectionFactory connectionFactory;
1: 
1:     @Before
1:     public void createBroker() throws Exception  {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.start();
1: 
1:         for (DestinationInterceptor destinationInterceptor  : brokerService.getDestinationInterceptors()) {
1:                 for (VirtualDestination virtualDestination : ((VirtualDestinationInterceptor) destinationInterceptor).getVirtualDestinations()) {
1:                     if (virtualDestination instanceof VirtualTopic) {
1:                         ((VirtualTopic) virtualDestination).setConcurrentSend(true);
1:                 }
1:             }
1:         }
1:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         ActiveMQPrefetchPolicy zeroPrefetch = new ActiveMQPrefetchPolicy();
1:         zeroPrefetch.setAll(0);
1:         activeMQConnectionFactory.setPrefetchPolicy(zeroPrefetch);
1:         connectionFactory = activeMQConnectionFactory;
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception  {
1:         brokerService.stop();
1:     }
1: 
1:     @Test
1:     @Ignore("comparison test - concurrentSend=true virtual topic, use transaction")
0: 	public void testFanoutDuration() throws Exception {
1: 
1: 
0:         Session session = createStartAndTrackConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         for (int i=0; i<numConsumers; i++) {
1:             session.createConsumer(new ActiveMQQueue("Consumer." + i + ".VirtualTopic.TEST"));
1:         }
1: 
1:         // create topic producer
0:         Session producerSession = createStartAndTrackConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(new ActiveMQTopic("VirtualTopic.TEST"));
1: 
1:         long start = System.currentTimeMillis();
1:         LOG.info("Starting producer: " + start);
1:         for (int i = 0; i < total; i++) {
1:             producer.send(producerSession.createTextMessage("message: " + i));
1:         }
1:         LOG.info("Done producer, duration: " + (System.currentTimeMillis() - start) );
1: 
1: 
1:     }
1: 
0:     private Connection createStartAndTrackConnection() throws Exception {
0:         Connection connection = connectionFactory.createConnection();
0:         connection.start();
0:         return connection;
1:     }
1: 
1: }
============================================================================