4:c7c8e53: /**
1:c7c8e53:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c7c8e53:  * contributor license agreements.  See the NOTICE file distributed with
1:c7c8e53:  * this work for additional information regarding copyright ownership.
1:c7c8e53:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c7c8e53:  * (the "License"); you may not use this file except in compliance with
1:c7c8e53:  * the License.  You may obtain a copy of the License at
2:74846bb:  *
1:c7c8e53:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:c7c8e53:  * Unless required by applicable law or agreed to in writing, software
1:c7c8e53:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c7c8e53:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c7c8e53:  * See the License for the specific language governing permissions and
1:c7c8e53:  * limitations under the License.
2:c7c8e53:  */
1:c7c8e53: package org.apache.activemq.broker.jmx;
11:c7c8e53: 
1:c7c8e53: import javax.management.openmbean.TabularData;
1:c7c8e53: 
1:c7c8e53: public interface JobSchedulerViewMBean {
1:74846bb: 
1:c7c8e53:     /**
2:74846bb:      * Remove all jobs scheduled to run at this time.  If there are no jobs scheduled
2:74846bb:      * at the given time this methods returns without making any modifications to the
2:74846bb:      * scheduler store.
1:74846bb:      *
1:74846bb:      * @param time
2:74846bb:      *        the string formated time that should be used to remove jobs.
1:74846bb:      *
2:74846bb:      * @throws Exception if an error occurs while performing the remove.
1:74846bb:      */
1:74846bb:     @MBeanInfo("remove jobs with matching execution time")
1:74846bb:     public abstract void removeAllJobsAtScheduledTime(@MBeanInfo("time: yyyy-MM-dd hh:mm:ss")String time) throws Exception;
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Remove a job with the matching jobId.  If the method does not find a matching job
1:74846bb:      * then it returns without throwing an error or making any modifications to the job
1:74846bb:      * scheduler store.
1:74846bb:      *
1:c7c8e53:      * @param jobId
1:74846bb:      *        the Job Id to remove from the scheduler store.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while attempting to remove the Job.
1:c7c8e53:      */
1:c7c8e53:     @MBeanInfo("remove jobs with matching jobId")
1:c7c8e53:     public abstract void removeJob(@MBeanInfo("jobId")String jobId) throws Exception;
1:74846bb: 
1:c7c8e53:     /**
1:74846bb:      * Remove all the Jobs from the scheduler,
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while purging the store.
1:c7c8e53:      */
1:c7c8e53:     @MBeanInfo("remove all scheduled jobs")
1:c7c8e53:     public abstract void removeAllJobs() throws Exception;
1:74846bb: 
1:c7c8e53:     /**
1:74846bb:      * Remove all the Jobs from the scheduler that are due between the start and finish times.
1:74846bb:      *
1:74846bb:      * @param start
1:74846bb:      *        the starting time to remove jobs from.
1:74846bb:      * @param finish
1:74846bb:      *        the finish time for the remove operation.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while attempting to remove the jobs.
1:c7c8e53:      */
1:c7c8e53:     @MBeanInfo("remove all scheduled jobs between time ranges ")
1:c7c8e53:     public abstract void removeAllJobs(@MBeanInfo("start: yyyy-MM-dd hh:mm:ss")String start,@MBeanInfo("finish: yyyy-MM-dd hh:mm:ss")String finish) throws Exception;
1:c7c8e53: 
1:c7c8e53:     /**
1:74846bb:      * Get the next time jobs will be fired from this scheduler store.
1:74846bb:      *
1:74846bb:      * @return the time in milliseconds of the next job to execute.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while accessing the store.
1:c7c8e53:      */
1:c7c8e53:     @MBeanInfo("get the next time a job is due to be scheduled ")
1:c7c8e53:     public abstract String getNextScheduleTime() throws Exception;
1:74846bb: 
1:c7c8e53:     /**
1:74846bb:      * Gets the number of times a scheduled Job has been executed.
1:74846bb:      *
1:74846bb:      * @return the total number of time a scheduled job has executed.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while querying for the Job.
1:74846bb:      */
1:74846bb:     @MBeanInfo("get the next time a job is due to be scheduled ")
1:74846bb:     public abstract int getExecutionCount(@MBeanInfo("jobId")String jobId) throws Exception;
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Get all the jobs scheduled to run next.
1:74846bb:      *
1:c7c8e53:      * @return a list of jobs that will be scheduled next
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while reading the scheduler store.
1:c7c8e53:      */
1:c7c8e53:     @MBeanInfo("get the next job(s) to be scheduled. Not HTML friendly ")
1:c7c8e53:     public abstract TabularData getNextScheduleJobs() throws Exception;
1:c7c8e53: 
1:74846bb:     /**
1:74846bb:      * Get all the outstanding Jobs that are scheduled in this scheduler store.
1:74846bb:      *
1:74846bb:      * @return a table of all jobs in this scheduler store.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while reading the store.
1:c7c8e53:      */
1:c7c8e53:     @MBeanInfo("get the scheduled Jobs in the Store. Not HTML friendly ")
1:c7c8e53:     public abstract TabularData getAllJobs() throws Exception;
1:c7c8e53: 
1:74846bb:     /**
1:74846bb:      * Get all outstanding jobs due to run between start and finish time range.
1:74846bb:      *
1:74846bb:      * @param start
1:74846bb:      *        the starting time range to query the store for jobs.
1:74846bb:      * @param finish
1:74846bb:      *        the ending time of this query for scheduled jobs.
1:74846bb:      *
1:74846bb:      * @return a table of jobs in the range given.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while querying the scheduler store.
1:c7c8e53:      */
1:c7c8e53:     @MBeanInfo("get the scheduled Jobs in the Store within the time range. Not HTML friendly ")
1:c7c8e53:     public abstract TabularData getAllJobs(@MBeanInfo("start: yyyy-MM-dd hh:mm:ss")String start,@MBeanInfo("finish: yyyy-MM-dd hh:mm:ss")String finish)throws Exception;
1:74846bb: 
1:c7c8e53: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8906a53
/////////////////////////////////////////////////////////////////////////
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Remove all jobs scheduled to run at this time.  If there are no jobs scheduled
1:      * at the given time this methods returns without making any modifications to the
1:      * scheduler store.
1:      *
1:      *        the string formated time that should be used to remove jobs.
1:      *
1:      * @throws Exception if an error occurs while performing the remove.
1:      *
0:      * @deprecated use removeAllJobsAtScheduledTime instead as it is more explicit about what
0:      *             the method is actually doing.
0:     @Deprecated
1:      * Remove all jobs scheduled to run at this time.  If there are no jobs scheduled
1:      * at the given time this methods returns without making any modifications to the
1:      * scheduler store.
1:      *
1:      * @param time
1:      *        the string formated time that should be used to remove jobs.
1:      *
1:      * @throws Exception if an error occurs while performing the remove.
1:      */
1:     @MBeanInfo("remove jobs with matching execution time")
1:     public abstract void removeAllJobsAtScheduledTime(@MBeanInfo("time: yyyy-MM-dd hh:mm:ss")String time) throws Exception;
1: 
1:     /**
1:      * Remove a job with the matching jobId.  If the method does not find a matching job
1:      * then it returns without throwing an error or making any modifications to the job
1:      * scheduler store.
1:      *
1:      *        the Job Id to remove from the scheduler store.
1:      *
1:      * @throws Exception if an error occurs while attempting to remove the Job.
1: 
1:      * Remove all the Jobs from the scheduler,
1:      *
1:      * @throws Exception if an error occurs while purging the store.
1: 
1:      * Remove all the Jobs from the scheduler that are due between the start and finish times.
1:      *
1:      * @param start
1:      *        the starting time to remove jobs from.
1:      * @param finish
1:      *        the finish time for the remove operation.
1:      *
1:      * @throws Exception if an error occurs while attempting to remove the jobs.
1:      * Get the next time jobs will be fired from this scheduler store.
1:      *
1:      * @return the time in milliseconds of the next job to execute.
1:      *
1:      * @throws Exception if an error occurs while accessing the store.
1: 
1:      * Gets the number of times a scheduled Job has been executed.
1:      *
1:      * @return the total number of time a scheduled job has executed.
1:      *
1:      * @throws Exception if an error occurs while querying for the Job.
1:      */
1:     @MBeanInfo("get the next time a job is due to be scheduled ")
1:     public abstract int getExecutionCount(@MBeanInfo("jobId")String jobId) throws Exception;
1: 
1:     /**
1:      * Get all the jobs scheduled to run next.
1:      *
1:      *
1:      * @throws Exception if an error occurs while reading the scheduler store.
1:     /**
1:      * Get all the outstanding Jobs that are scheduled in this scheduler store.
1:      *
1:      * @return a table of all jobs in this scheduler store.
1:      *
1:      * @throws Exception if an error occurs while reading the store.
1:     /**
1:      * Get all outstanding jobs due to run between start and finish time range.
1:      *
1:      * @param start
1:      *        the starting time range to query the store for jobs.
1:      * @param finish
1:      *        the ending time of this query for scheduled jobs.
1:      *
1:      * @return a table of jobs in the range given.
1:      *
1:      * @throws Exception if an error occurs while querying the scheduler store.
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Robert Davies
-------------------------------------------------------------------------------
commit:c7c8e53
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import javax.management.openmbean.TabularData;
1: 
1: 
1: 
1: public interface JobSchedulerViewMBean {
1:     /**
0:      * remove all jobs scheduled to run at this time
0:      * @param time
0:      * @throws Exception
1:      */
0:     @MBeanInfo("remove jobs with matching execution time")
0:     public abstract void removeJobAtScheduledTime(@MBeanInfo("time: yyyy-MM-dd hh:mm:ss")String time) throws Exception;
1: 
1:     /**
0:      * remove a job with the matching jobId
1:      * @param jobId
0:      * @throws Exception
1:      */
1:     @MBeanInfo("remove jobs with matching jobId")
1:     public abstract void removeJob(@MBeanInfo("jobId")String jobId) throws Exception;
1:     
1:     /**
0:      * remove all the Jobs from the scheduler
0:      * @throws Exception
1:      */
1:     @MBeanInfo("remove all scheduled jobs")
1:     public abstract void removeAllJobs() throws Exception;
1:     
1:     /**
0:      * remove all the Jobs from the scheduler that are due between the start and finish times
0:      * @param start time 
0:      * @param finish time
0:      * @throws Exception
1:      */
1:     @MBeanInfo("remove all scheduled jobs between time ranges ")
1:     public abstract void removeAllJobs(@MBeanInfo("start: yyyy-MM-dd hh:mm:ss")String start,@MBeanInfo("finish: yyyy-MM-dd hh:mm:ss")String finish) throws Exception;
1:     
1: 
1:     
1:     /**
0:      * Get the next time jobs will be fired
0:      * @return the time in milliseconds
0:      * @throws Exception 
1:      */
1:     @MBeanInfo("get the next time a job is due to be scheduled ")
1:     public abstract String getNextScheduleTime() throws Exception;
1:     
1:     /**
0:      * Get all the jobs scheduled to run next
1:      * @return a list of jobs that will be scheduled next
0:      * @throws Exception
1:      */
1:     @MBeanInfo("get the next job(s) to be scheduled. Not HTML friendly ")
1:     public abstract TabularData getNextScheduleJobs() throws Exception;
1:     
1:     /**
0:      * Get all the outstanding Jobs
0:      * @return a  table of all jobs
0:      * @throws Exception
1: 
1:      */
1:     @MBeanInfo("get the scheduled Jobs in the Store. Not HTML friendly ")
1:     public abstract TabularData getAllJobs() throws Exception;
1:     
1:     /**
0:      * Get all outstanding jobs due to run between start and finish
0:      * @param start
0:      * @param finish
0:      * @return a table of jobs in the range
0:      * @throws Exception
1: 
1:      */
1:     @MBeanInfo("get the scheduled Jobs in the Store within the time range. Not HTML friendly ")
1:     public abstract TabularData getAllJobs(@MBeanInfo("start: yyyy-MM-dd hh:mm:ss")String start,@MBeanInfo("finish: yyyy-MM-dd hh:mm:ss")String finish)throws Exception;
1: }
============================================================================