1:e0c5024: /**
1:e0c5024:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e0c5024:  * contributor license agreements.  See the NOTICE file distributed with
1:e0c5024:  * this work for additional information regarding copyright ownership.
1:e0c5024:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e0c5024:  * (the "License"); you may not use this file except in compliance with
1:e0c5024:  * the License.  You may obtain a copy of the License at
1:e0c5024:  *
1:e0c5024:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e0c5024:  *
1:e0c5024:  * Unless required by applicable law or agreed to in writing, software
1:e0c5024:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e0c5024:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e0c5024:  * See the License for the specific language governing permissions and
1:e0c5024:  * limitations under the License.
1:e0c5024:  */
1:e0c5024: package org.apache.activemq.usecases;
6:e0c5024: 
1:e0c5024: import java.util.Arrays;
1:a625f7a: import java.util.concurrent.atomic.AtomicInteger;
1:e0c5024: import java.util.concurrent.atomic.AtomicLong;
1:a625f7a: 
1:e0c5024: import javax.jms.Connection;
1:e0c5024: import javax.jms.Destination;
1:e0c5024: import javax.jms.Message;
1:e0c5024: import javax.jms.MessageListener;
1:e0c5024: import javax.jms.MessageProducer;
1:e0c5024: import javax.jms.Session;
1:e0c5024: 
1:e0c5024: import junit.framework.TestCase;
1:f90e6b9: 
1:e0c5024: import org.apache.activemq.ActiveMQConnectionFactory;
1:1005fc5: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:a625f7a: import org.apache.activemq.advisory.AdvisorySupport;
1:e0c5024: import org.apache.activemq.broker.BrokerService;
1:01b1f7f: import org.apache.activemq.broker.region.Topic;
1:e0c5024: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:e0c5024: import org.apache.activemq.broker.region.policy.PolicyMap;
1:e0c5024: import org.apache.activemq.command.ActiveMQTopic;
1:01b1f7f: import org.apache.activemq.util.DefaultTestAppender;
1:e0c5024: import org.apache.activemq.util.Wait;
1:01b1f7f: import org.apache.log4j.Appender;
1:01b1f7f: import org.apache.log4j.Level;
1:01b1f7f: import org.apache.log4j.spi.LoggingEvent;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e0c5024: 
1:e0c5024: public class TopicProducerFlowControlTest extends TestCase implements MessageListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TopicProducerFlowControlTest.class);
1:e0c5024:     private static final String brokerName = "testBroker";
1:e0c5024:     private static final String brokerUrl = "vm://" + brokerName;
1:a625f7a:     protected static final int destinationMemLimit = 2097152; // 2MB
1:e0c5024:     private static final AtomicLong produced = new AtomicLong();
1:e0c5024:     private static final AtomicLong consumed = new AtomicLong();
1:e0c5024:     private static final int numMessagesToSend = 50000;
1:e0c5024: 
1:e0c5024:     private BrokerService broker;
1:e0c5024: 
1:e0c5024:     protected void setUp() throws Exception {
1:e0c5024:         // Setup and start the broker
1:e0c5024:         broker = new BrokerService();
1:e0c5024:         broker.setBrokerName(brokerName);
1:e0c5024:         broker.setPersistent(false);
1:e0c5024:         broker.setSchedulerSupport(false);
1:e0c5024:         broker.setUseJmx(false);
1:e0c5024:         broker.setUseShutdownHook(false);
1:e0c5024:         broker.addConnector(brokerUrl);
1:e0c5024: 
1:e0c5024:         // Setup the destination policy
1:e0c5024:         PolicyMap pm = new PolicyMap();
1:e0c5024: 
2:e0c5024:         // Setup the topic destination policy
1:e0c5024:         PolicyEntry tpe = new PolicyEntry();
1:e0c5024:         tpe.setTopic(">");
1:e0c5024:         tpe.setMemoryLimit(destinationMemLimit);
1:e0c5024:         tpe.setProducerFlowControl(true);
1:a625f7a:         tpe.setAdvisoryWhenFull(true);
1:01b1f7f:         tpe.setBlockedProducerWarningInterval(2000);
1:e0c5024: 
1:e0c5024: 
1:078f39f:         pm.setPolicyEntries(Arrays.asList(new PolicyEntry[]{tpe}));
1:e0c5024: 
1:a625f7a:         setDestinationPolicy(broker, pm);
1:e0c5024: 
1:e0c5024:         // Start the broker
1:e0c5024:         broker.start();
1:e0c5024:         broker.waitUntilStarted();
1:a625f7a:     }
1:e0c5024: 
1:a625f7a:     protected void setDestinationPolicy(BrokerService broker, PolicyMap pm) {
1:a625f7a:         broker.setDestinationPolicy(pm);
1:a625f7a:     }
1:a625f7a: 
1:e0c5024:     protected void tearDown() throws Exception {
1:e0c5024:         broker.stop();
1:e0c5024:         broker.waitUntilStopped();
8:e0c5024:     }
1:e0c5024: 
1:e0c5024:     public void testTopicProducerFlowControl() throws Exception {
1:e0c5024: 
1:e0c5024:         // Create the connection factory
1:e0c5024:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);
1:e0c5024:         connectionFactory.setAlwaysSyncSend(true);
1:e0c5024:         connectionFactory.setProducerWindowSize(1024);
1:e0c5024: 
1:1005fc5:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:1005fc5:         prefetchPolicy.setAll(5000);
1:1005fc5:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
1:e0c5024:         // Start the test destination listener
1:e0c5024:         Connection c = connectionFactory.createConnection();
1:e0c5024:         c.start();
1:a625f7a:         Session listenerSession = c.createSession(false, 1);
1:a625f7a:         Destination destination = createDestination(listenerSession);
1:a625f7a: 
1:a625f7a:         listenerSession.createConsumer(destination).setMessageListener(new TopicProducerFlowControlTest());
1:a625f7a:         final AtomicInteger blockedCounter = new AtomicInteger(0);
1:a625f7a:         listenerSession.createConsumer(new ActiveMQTopic(AdvisorySupport.FULL_TOPIC_PREFIX + ">")).setMessageListener(new MessageListener() {
1:a625f7a:             @Override
1:a625f7a:             public void onMessage(Message message) {
1:078f39f:                 try {
1:078f39f:                     if (blockedCounter.get() % 100 == 0) {
1:078f39f:                         LOG.info("Got full advisory, usageName: " +
1:078f39f:                                 message.getStringProperty(AdvisorySupport.MSG_PROPERTY_USAGE_NAME) +
1:078f39f:                                 ", usageCount: " +
1:078f39f:                                 message.getLongProperty(AdvisorySupport.MSG_PROPERTY_USAGE_COUNT)
1:078f39f:                                 + ", blockedCounter: " + blockedCounter.get());
1:078f39f:                     }
1:078f39f:                     blockedCounter.incrementAndGet();
1:078f39f: 
1:078f39f:                 } catch (Exception error) {
1:078f39f:                     error.printStackTrace();
1:078f39f:                     LOG.error("missing advisory property", error);
1:078f39f:                 }
1:a625f7a:             }
1:a625f7a:         });
1:e0c5024: 
1:01b1f7f:         final AtomicInteger warnings = new AtomicInteger();
1:01b1f7f:         Appender appender = new DefaultTestAppender() {
1:01b1f7f:             @Override
1:01b1f7f:             public void doAppend(LoggingEvent event) {
1:0608175:                 if (event.getLevel().equals(Level.WARN) && event.getMessage().toString().contains("Usage Manager memory limit reached")) {
1:01b1f7f:                     LOG.info("received  log message: " + event.getMessage());
1:01b1f7f:                     warnings.incrementAndGet();
1:e0c5024:                 }
1:e0c5024:             }
1:e0c5024:         };
1:01b1f7f:         org.apache.log4j.Logger log4jLogger =
1:01b1f7f:                 org.apache.log4j.Logger.getLogger(Topic.class);
1:01b1f7f:         log4jLogger.addAppender(appender);
1:01b1f7f:         try {
1:e0c5024: 
1:01b1f7f:             // Start producing the test messages
1:01b1f7f:             final Session session = connectionFactory.createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:01b1f7f:             final MessageProducer producer = session.createProducer(destination);
1:e0c5024: 
1:01b1f7f:             Thread producingThread = new Thread("Producing Thread") {
1:01b1f7f:                 public void run() {
1:01b1f7f:                     try {
1:01b1f7f:                         for (long i = 0; i < numMessagesToSend; i++) {
1:01b1f7f:                             producer.send(session.createTextMessage("test"));
1:e0c5024: 
1:01b1f7f:                             long count = produced.incrementAndGet();
1:01b1f7f:                             if (count % 10000 == 0) {
1:01b1f7f:                                 LOG.info("Produced " + count + " messages");
1:01b1f7f:                             }
1:01b1f7f:                         }
1:01b1f7f:                     } catch (Throwable ex) {
1:01b1f7f:                         ex.printStackTrace();
1:01b1f7f:                     } finally {
1:01b1f7f:                         try {
1:01b1f7f:                             producer.close();
1:01b1f7f:                             session.close();
1:01b1f7f:                         } catch (Exception e) {
1:01b1f7f:                         }
1:01b1f7f:                     }
1:01b1f7f:                 }
1:01b1f7f:             };
1:e0c5024: 
1:01b1f7f:             producingThread.start();
1:01b1f7f: 
1:01b1f7f:             Wait.waitFor(new Wait.Condition() {
1:01b1f7f:                 public boolean isSatisified() throws Exception {
1:01b1f7f:                     return consumed.get() == numMessagesToSend;
1:01b1f7f:                 }
1:01b1f7f:             }, 5 * 60 * 1000); // give it plenty of time before failing
1:01b1f7f: 
1:01b1f7f:             assertEquals("Didn't produce all messages", numMessagesToSend, produced.get());
1:01b1f7f:             assertEquals("Didn't consume all messages", numMessagesToSend, consumed.get());
1:01b1f7f: 
1:01b1f7f:             assertTrue("Producer got blocked", Wait.waitFor(new Wait.Condition() {
1:01b1f7f:                 public boolean isSatisified() throws Exception {
1:01b1f7f:                     return blockedCounter.get() > 0;
1:01b1f7f:                 }
1:01b1f7f:             }, 5 * 1000));
1:01b1f7f: 
1:01b1f7f:             LOG.info("BlockedCount: " + blockedCounter.get() + ", Warnings:" + warnings.get());
1:01b1f7f:             assertTrue("got a few warnings", warnings.get() > 1);
1:01b1f7f:             assertTrue("warning limited", warnings.get() < blockedCounter.get());
1:01b1f7f: 
1:01b1f7f:         } finally {
1:01b1f7f:             log4jLogger.removeAppender(appender);
1:01b1f7f:         }
1:1005fc5:     }
1:a625f7a: 
1:a625f7a:     protected Destination createDestination(Session listenerSession) throws Exception {
1:a625f7a:         return new ActiveMQTopic("test");
1:a625f7a:     }
1:e0c5024: 
1:e0c5024:     @Override
1:e0c5024:     public void onMessage(Message message) {
1:e0c5024:         long count = consumed.incrementAndGet();
2:e0c5024:         if (count % 100 == 0) {
1:f90e6b9:             try {
1:f90e6b9:                 Thread.sleep(100);
1:f90e6b9:             } catch (InterruptedException e) {
1:a625f7a:             }
1:e0c5024:         }
1:a625f7a:         if (count % 10000 == 0) {
1:a625f7a:             LOG.info("\tConsumed " + count + " messages");
1:f90e6b9:         }
1:a625f7a: 
1:e0c5024:     }
1:e0c5024: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0608175
/////////////////////////////////////////////////////////////////////////
1:                 if (event.getLevel().equals(Level.WARN) && event.getMessage().toString().contains("Usage Manager memory limit reached")) {
commit:01b1f7f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Topic;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.spi.LoggingEvent;
/////////////////////////////////////////////////////////////////////////
1:         tpe.setBlockedProducerWarningInterval(2000);
/////////////////////////////////////////////////////////////////////////
1:         final AtomicInteger warnings = new AtomicInteger();
1:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
0:                 if (event.getLevel().equals(Level.INFO) && event.getMessage().toString().contains("Usage Manager memory limit reached")) {
1:                     LOG.info("received  log message: " + event.getMessage());
1:                     warnings.incrementAndGet();
1:         org.apache.log4j.Logger log4jLogger =
1:                 org.apache.log4j.Logger.getLogger(Topic.class);
1:         log4jLogger.addAppender(appender);
1:         try {
1:             // Start producing the test messages
1:             final Session session = connectionFactory.createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             final MessageProducer producer = session.createProducer(destination);
1:             Thread producingThread = new Thread("Producing Thread") {
1:                 public void run() {
1:                     try {
1:                         for (long i = 0; i < numMessagesToSend; i++) {
1:                             producer.send(session.createTextMessage("test"));
1:                             long count = produced.incrementAndGet();
1:                             if (count % 10000 == 0) {
1:                                 LOG.info("Produced " + count + " messages");
1:                             }
1:                         }
1:                     } catch (Throwable ex) {
1:                         ex.printStackTrace();
1:                     } finally {
1:                         try {
1:                             producer.close();
1:                             session.close();
1:                         } catch (Exception e) {
1:                         }
1:                     }
1:                 }
1:             };
1:             producingThread.start();
1: 
1:             Wait.waitFor(new Wait.Condition() {
1:                 public boolean isSatisified() throws Exception {
1:                     return consumed.get() == numMessagesToSend;
1:                 }
1:             }, 5 * 60 * 1000); // give it plenty of time before failing
1: 
1:             assertEquals("Didn't produce all messages", numMessagesToSend, produced.get());
1:             assertEquals("Didn't consume all messages", numMessagesToSend, consumed.get());
1: 
1:             assertTrue("Producer got blocked", Wait.waitFor(new Wait.Condition() {
1:                 public boolean isSatisified() throws Exception {
1:                     return blockedCounter.get() > 0;
1:                 }
1:             }, 5 * 1000));
1: 
1:             LOG.info("BlockedCount: " + blockedCounter.get() + ", Warnings:" + warnings.get());
1:             assertTrue("got a few warnings", warnings.get() > 1);
1:             assertTrue("warning limited", warnings.get() < blockedCounter.get());
1: 
1:         } finally {
1:             log4jLogger.removeAppender(appender);
1:         }
commit:078f39f
/////////////////////////////////////////////////////////////////////////
1:         pm.setPolicyEntries(Arrays.asList(new PolicyEntry[]{tpe}));
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     if (blockedCounter.get() % 100 == 0) {
1:                         LOG.info("Got full advisory, usageName: " +
1:                                 message.getStringProperty(AdvisorySupport.MSG_PROPERTY_USAGE_NAME) +
1:                                 ", usageCount: " +
1:                                 message.getLongProperty(AdvisorySupport.MSG_PROPERTY_USAGE_COUNT)
1:                                 + ", blockedCounter: " + blockedCounter.get());
1:                     }
1:                     blockedCounter.incrementAndGet();
1: 
1:                 } catch (Exception error) {
1:                     error.printStackTrace();
1:                     LOG.error("missing advisory property", error);
1:                 }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:f90e6b9
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 Thread.sleep(100);
1:             } catch (InterruptedException e) {
1:             }
author:Gary Tully
-------------------------------------------------------------------------------
commit:c5421f9
/////////////////////////////////////////////////////////////////////////
commit:1005fc5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
0: import org.apache.activemq.RedeliveryPolicy;
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setAll(5000);
1:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
/////////////////////////////////////////////////////////////////////////
0:              public boolean isSatisified() throws Exception {
0:                  return blockedCounter.get() > 0;
1:              }
0:          }, 5 * 1000));
commit:a625f7a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.advisory.AdvisorySupport;
/////////////////////////////////////////////////////////////////////////
1:     protected static final int destinationMemLimit = 2097152; // 2MB
/////////////////////////////////////////////////////////////////////////
1:         tpe.setAdvisoryWhenFull(true);
/////////////////////////////////////////////////////////////////////////
0:         qpe.setAdvisoryWhenFull(true);
1:         setDestinationPolicy(broker, pm);
1:     protected void setDestinationPolicy(BrokerService broker, PolicyMap pm) {
1:         broker.setDestinationPolicy(pm);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         Session listenerSession = c.createSession(false, 1);
1:         Destination destination = createDestination(listenerSession);
1: 
1:         listenerSession.createConsumer(destination).setMessageListener(new TopicProducerFlowControlTest());
1:         final AtomicInteger blockedCounter = new AtomicInteger(0);
1:         listenerSession.createConsumer(new ActiveMQTopic(AdvisorySupport.FULL_TOPIC_PREFIX + ">")).setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
0:                 LOG.info("Got full advisory, blockedCounter: " + blockedCounter.get());
0:                 blockedCounter.incrementAndGet();
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:                         if (count % 10000 == 0) {
/////////////////////////////////////////////////////////////////////////
1: 
0:          assertTrue("Producer got blocked", Wait.waitFor(new Wait.Condition() {
0:             public boolean isSatisified() throws Exception {
0:                 return blockedCounter.get() > 0;
1:             }
0:         }, 5 * 1000));
1:     }
1: 
1:     protected Destination createDestination(Session listenerSession) throws Exception {
1:         return new ActiveMQTopic("test");
0:         if (count % 10000 == 0) {
1:             LOG.info("\tConsumed " + count + " messages");
1:         }
1: 
commit:fe0a764
/////////////////////////////////////////////////////////////////////////
0:         }, 5 * 60 * 1000); // give it plenty of time before failing
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TopicProducerFlowControlTest.class);
commit:e0c5024
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.Arrays;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class TopicProducerFlowControlTest extends TestCase implements MessageListener {
0:     private static final Log LOG = LogFactory.getLog(TopicProducerFlowControlTest.class);
1:     private static final String brokerName = "testBroker";
1:     private static final String brokerUrl = "vm://" + brokerName;
0:     private static final int destinationMemLimit = 2097152; // 2MB
1:     private static final AtomicLong produced = new AtomicLong();
1:     private static final AtomicLong consumed = new AtomicLong();
1:     private static final int numMessagesToSend = 50000;
1: 
1:     private BrokerService broker;
1: 
1:     protected void setUp() throws Exception {
1:         // Setup and start the broker
1:         broker = new BrokerService();
1:         broker.setBrokerName(brokerName);
1:         broker.setPersistent(false);
1:         broker.setSchedulerSupport(false);
1:         broker.setUseJmx(false);
1:         broker.setUseShutdownHook(false);
1:         broker.addConnector(brokerUrl);
1: 
1:         // Setup the destination policy
1:         PolicyMap pm = new PolicyMap();
1: 
1:         // Setup the topic destination policy
1:         PolicyEntry tpe = new PolicyEntry();
1:         tpe.setTopic(">");
1:         tpe.setMemoryLimit(destinationMemLimit);
1:         tpe.setProducerFlowControl(true);
1: 
1:         // Setup the topic destination policy
0:         PolicyEntry qpe = new PolicyEntry();
0:         qpe.setQueue(">");
0:         qpe.setMemoryLimit(destinationMemLimit);
0:         qpe.setProducerFlowControl(true);
0:         qpe.setQueuePrefetch(1);
1: 
0:         pm.setPolicyEntries(Arrays.asList(new PolicyEntry[]{tpe, qpe}));
1: 
0:         broker.setDestinationPolicy(pm);
1: 
1:         // Start the broker
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1: 
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     public void testTopicProducerFlowControl() throws Exception {
0:         Destination destination = new ActiveMQTopic("test");
1: 
1:         // Create the connection factory
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);
1:         connectionFactory.setAlwaysSyncSend(true);
1:         connectionFactory.setProducerWindowSize(1024);
1: 
1:         // Start the test destination listener
1:         Connection c = connectionFactory.createConnection();
1:         c.start();
0:         c.createSession(false, 1).createConsumer(destination).setMessageListener(new TopicProducerFlowControlTest());
1: 
0:         // Start producing the test messages
0:         final Session session = connectionFactory.createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         final MessageProducer producer = session.createProducer(destination);
1: 
0:         Thread producingThread = new Thread("Producing Thread") {
0:             public void run() {
0:                 try {
0:                     for (long i = 0; i < numMessagesToSend; i++) {
0:                         producer.send(session.createTextMessage("test"));
1: 
0:                         long count = produced.incrementAndGet();
1:                         if (count % 100 == 0) {
0:                             LOG.info("Produced " + count + " messages");
1:                         }
1:                     }
0:                 } catch (Throwable ex) {
0:                     ex.printStackTrace();
0:                 } finally {
0:                     try {
0:                         producer.close();
0:                         session.close();
0:                     } catch (Exception e) {
1:                     }
1:                 }
1:             }
1:         };
1: 
0:         producingThread.start();
1: 
0:         Wait.waitFor(new Wait.Condition() {
0:             public boolean isSatisified() throws Exception {
0:                 return consumed.get() == numMessagesToSend;
1:             }
0:         }, 60 * 1000);
1: 
0:         assertEquals("Didn't produce all messages", numMessagesToSend, produced.get());
0:         assertEquals("Didn't consume all messages", numMessagesToSend, consumed.get());
1: 
1:     }
1: 
1:     @Override
1:     public void onMessage(Message message) {
0:         try {
0:             Thread.sleep(1);
0:         } catch (InterruptedException e) {
1:         }
1: 
1:         long count = consumed.incrementAndGet();
1:         if (count % 100 == 0) {
0:             LOG.info("\tConsumed " + count + " messages");
1:         }
1:     }
1: }
============================================================================