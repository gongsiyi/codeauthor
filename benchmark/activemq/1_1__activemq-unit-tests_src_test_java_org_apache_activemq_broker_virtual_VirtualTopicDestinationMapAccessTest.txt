1:0b76d3a: /**
1:0b76d3a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0b76d3a:  * contributor license agreements.  See the NOTICE file distributed with
1:0b76d3a:  * this work for additional information regarding copyright ownership.
1:0b76d3a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0b76d3a:  * (the "License"); you may not use this file except in compliance with
1:0b76d3a:  * the License.  You may obtain a copy of the License at
1:0b76d3a:  *
1:0b76d3a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0b76d3a:  *
1:0b76d3a:  * Unless required by applicable law or agreed to in writing, software
1:0b76d3a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0b76d3a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0b76d3a:  * See the License for the specific language governing permissions and
1:0b76d3a:  * limitations under the License.
1:0b76d3a:  */
1:0b76d3a: package org.apache.activemq.broker.virtual;
1:0b76d3a: 
1:0b76d3a: import org.apache.activemq.ActiveMQConnectionFactory;
1:0b76d3a: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:0b76d3a: import org.apache.activemq.broker.BrokerService;
1:0b76d3a: import org.apache.activemq.command.ActiveMQMessage;
1:0b76d3a: import org.apache.activemq.command.ActiveMQQueue;
1:0b76d3a: import org.apache.activemq.command.ActiveMQTopic;
1:0b76d3a: import org.junit.After;
1:0b76d3a: import org.junit.Before;
1:0b76d3a: import org.junit.Ignore;
1:0b76d3a: import org.junit.Test;
1:0b76d3a: import org.slf4j.Logger;
1:0b76d3a: import org.slf4j.LoggerFactory;
1:0b76d3a: 
1:0b76d3a: import javax.jms.Connection;
1:0b76d3a: import javax.jms.ConnectionFactory;
1:0b76d3a: import javax.jms.MessageProducer;
1:0b76d3a: import javax.jms.Session;
1:0b76d3a: import java.util.concurrent.ExecutorService;
1:0b76d3a: import java.util.concurrent.Executors;
1:0b76d3a: import java.util.concurrent.TimeUnit;
1:0b76d3a: import java.util.concurrent.atomic.AtomicInteger;
1:0b76d3a: 
1:0b76d3a: public class VirtualTopicDestinationMapAccessTest {
1:0b76d3a: 
1:0b76d3a:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicDestinationMapAccessTest.class);
1:0b76d3a: 
1:0b76d3a:     BrokerService brokerService;
1:0b76d3a:     ConnectionFactory connectionFactory;
1:0b76d3a: 
1:0b76d3a:     @Before
1:0b76d3a:     public void createBroker() throws Exception {
1:0b76d3a:         createBroker(true);
1:0b76d3a:     }
1:0b76d3a: 
1:0b76d3a:     public void createBroker(boolean delete) throws Exception  {
1:0b76d3a:         brokerService = new BrokerService();
1:0b76d3a:         brokerService.setDeleteAllMessagesOnStartup(delete);
1:0b76d3a:         brokerService.setAdvisorySupport(false);
1:0b76d3a:         brokerService.start();
1:0b76d3a: 
1:0b76d3a:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:0b76d3a:         ActiveMQPrefetchPolicy zeroPrefetch = new ActiveMQPrefetchPolicy();
1:0b76d3a:         zeroPrefetch.setAll(0);
1:0b76d3a:         activeMQConnectionFactory.setPrefetchPolicy(zeroPrefetch);
1:0b76d3a:         connectionFactory = activeMQConnectionFactory;
1:0b76d3a:     }
1:0b76d3a: 
1:0b76d3a:     @After
1:0b76d3a:     public void stopBroker() throws Exception  {
1:0b76d3a:         brokerService.stop();
1:0b76d3a:     }
1:0b76d3a: 
1:0b76d3a:     @Test
1:0b76d3a:     @Ignore("perf test that needs manual comparator")
1:0b76d3a:     public void testX() throws Exception {
1:0b76d3a: 
1:0b76d3a:         final int numConnections = 200;
1:0b76d3a:         final int numDestinations = 10000;
1:0b76d3a:         final AtomicInteger numConsumers = new AtomicInteger(numDestinations);
1:0b76d3a:         final AtomicInteger numProducers = new AtomicInteger(numDestinations);
1:0b76d3a: 
1:0b76d3a:         ExecutorService executorService = Executors.newFixedThreadPool(numConnections);
1:0b76d3a: 
1:0b76d3a:         // precreate dests to accentuate read access
1:0b76d3a:         for (int i=0; i<numDestinations; i++ ) {
1:0b76d3a:             brokerService.getRegionBroker().addDestination(
1:0b76d3a:                     brokerService.getAdminConnectionContext(),
1:0b76d3a:                     new ActiveMQQueue("Consumer." + i + ".VirtualTopic.TEST-" + i),
1:0b76d3a:                     false);
1:0b76d3a:             brokerService.getRegionBroker().addDestination(
1:0b76d3a:                     brokerService.getAdminConnectionContext(), new ActiveMQTopic("VirtualTopic.TEST-" + i), false);
1:0b76d3a: 
1:0b76d3a:         }
1:0b76d3a: 
1:0b76d3a:         Runnable runnable = new Runnable() {
1:0b76d3a:             @Override
1:0b76d3a:             public void run() {
1:0b76d3a: 
1:0b76d3a:                 try {
1:0b76d3a:                     int opsCount = 0;
1:0b76d3a: 
1:0b76d3a:                     Connection connection1 = connectionFactory.createConnection();
1:0b76d3a:                     connection1.start();
1:0b76d3a: 
1:0b76d3a:                     Session session = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0b76d3a:                     MessageProducer producer = session.createProducer(null);
1:0b76d3a: 
1:0b76d3a:                     do {
1:0b76d3a:                         boolean consumerOrProducer = opsCount++ % 2 == 0;
1:0b76d3a:                         int i = consumerOrProducer ? numConsumers.decrementAndGet() : numProducers.decrementAndGet();
1:0b76d3a:                         if (i > 0) {
1:0b76d3a:                             if (consumerOrProducer) {
1:0b76d3a:                                 session.createConsumer(new ActiveMQQueue("Consumer." + i + ".VirtualTopic.TEST-" + i));
1:0b76d3a:                             } else {
1:0b76d3a:                                 producer.send(new ActiveMQTopic("VirtualTopic.TEST-" + i), new ActiveMQMessage());
1:0b76d3a:                             }
1:0b76d3a:                         }
1:0b76d3a:                     } while (numConsumers.get() > 0 || numProducers.get() > 0);
1:0b76d3a:                     connection1.close();
1:0b76d3a: 
1:0b76d3a:                 } catch (Exception e) {
1:0b76d3a:                     e.printStackTrace();
1:0b76d3a:                 }
1:0b76d3a:             }
1:0b76d3a:         };
1:0b76d3a: 
1:0b76d3a:         for (int i = 0; i < numConnections; i++) {
1:0b76d3a:             executorService.execute(runnable);
1:0b76d3a:         }
1:0b76d3a: 
1:0b76d3a:         long start = System.currentTimeMillis();
1:0b76d3a:         LOG.info("Starting timer: " + start);
1:0b76d3a:         executorService.shutdown();
1:0b76d3a:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1:0b76d3a:         LOG.info("Done, duration: " + (System.currentTimeMillis() - start));
1:0b76d3a: 
1:0b76d3a:     }
1:0b76d3a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0b76d3a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: public class VirtualTopicDestinationMapAccessTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicDestinationMapAccessTest.class);
1: 
1:     BrokerService brokerService;
1:     ConnectionFactory connectionFactory;
1: 
1:     @Before
1:     public void createBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     public void createBroker(boolean delete) throws Exception  {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(delete);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.start();
1: 
1:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         ActiveMQPrefetchPolicy zeroPrefetch = new ActiveMQPrefetchPolicy();
1:         zeroPrefetch.setAll(0);
1:         activeMQConnectionFactory.setPrefetchPolicy(zeroPrefetch);
1:         connectionFactory = activeMQConnectionFactory;
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception  {
1:         brokerService.stop();
1:     }
1: 
1:     @Test
1:     @Ignore("perf test that needs manual comparator")
1:     public void testX() throws Exception {
1: 
1:         final int numConnections = 200;
1:         final int numDestinations = 10000;
1:         final AtomicInteger numConsumers = new AtomicInteger(numDestinations);
1:         final AtomicInteger numProducers = new AtomicInteger(numDestinations);
1: 
1:         ExecutorService executorService = Executors.newFixedThreadPool(numConnections);
1: 
1:         // precreate dests to accentuate read access
1:         for (int i=0; i<numDestinations; i++ ) {
1:             brokerService.getRegionBroker().addDestination(
1:                     brokerService.getAdminConnectionContext(),
1:                     new ActiveMQQueue("Consumer." + i + ".VirtualTopic.TEST-" + i),
1:                     false);
1:             brokerService.getRegionBroker().addDestination(
1:                     brokerService.getAdminConnectionContext(), new ActiveMQTopic("VirtualTopic.TEST-" + i), false);
1: 
1:         }
1: 
1:         Runnable runnable = new Runnable() {
1:             @Override
1:             public void run() {
1: 
1:                 try {
1:                     int opsCount = 0;
1: 
1:                     Connection connection1 = connectionFactory.createConnection();
1:                     connection1.start();
1: 
1:                     Session session = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageProducer producer = session.createProducer(null);
1: 
1:                     do {
1:                         boolean consumerOrProducer = opsCount++ % 2 == 0;
1:                         int i = consumerOrProducer ? numConsumers.decrementAndGet() : numProducers.decrementAndGet();
1:                         if (i > 0) {
1:                             if (consumerOrProducer) {
1:                                 session.createConsumer(new ActiveMQQueue("Consumer." + i + ".VirtualTopic.TEST-" + i));
1:                             } else {
1:                                 producer.send(new ActiveMQTopic("VirtualTopic.TEST-" + i), new ActiveMQMessage());
1:                             }
1:                         }
1:                     } while (numConsumers.get() > 0 || numProducers.get() > 0);
1:                     connection1.close();
1: 
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1: 
1:         for (int i = 0; i < numConnections; i++) {
1:             executorService.execute(runnable);
1:         }
1: 
1:         long start = System.currentTimeMillis();
1:         LOG.info("Starting timer: " + start);
1:         executorService.shutdown();
1:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1:         LOG.info("Done, duration: " + (System.currentTimeMillis() - start));
1: 
1:     }
1: }
============================================================================