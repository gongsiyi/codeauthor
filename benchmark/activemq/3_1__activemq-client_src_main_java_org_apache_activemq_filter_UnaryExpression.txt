1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:5be5a62:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:5be5a62:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.filter;
12:d29ca2a: 
1:d29ca2a: import java.math.BigDecimal;
1:d29ca2a: import java.util.Collection;
1:d29ca2a: import java.util.HashSet;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.List;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * An expression which performs an operation on two expression values
1:b0c2a40:  * 
1:5be5a62:  * 
1:d29ca2a:  */
1:d29ca2a: public abstract class UnaryExpression implements Expression {
1:d29ca2a: 
1:d29ca2a:     private static final BigDecimal BD_LONG_MIN_VALUE = BigDecimal.valueOf(Long.MIN_VALUE);
1:d29ca2a:     protected Expression right;
1:d29ca2a: 
1:ecf89a6:     public UnaryExpression(Expression left) {
1:ecf89a6:         this.right = left;
1:ecf89a6:     }
1:ecf89a6: 
1:d29ca2a:     public static Expression createNegate(Expression left) {
1:d29ca2a:         return new UnaryExpression(left) {
1:d29ca2a:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:                 Object rvalue = right.evaluate(message);
1:d29ca2a:                 if (rvalue == null) {
2:d29ca2a:                     return null;
12:d29ca2a:                 }
1:d29ca2a:                 if (rvalue instanceof Number) {
1:f812e34:                     return negate((Number)rvalue);
1:d29ca2a:                 }
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "-";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:f812e34: 
1:ecf89a6:     public static BooleanExpression createInExpression(PropertyExpression right, List<Object> elements, final boolean not) {
1:f812e34: 
1:f812e34:         // Use a HashSet if there are many elements.
1:ecf89a6:         Collection<Object> t;
1:ecf89a6:         if (elements.size() == 0) {
1:f812e34:             t = null;
1:ecf89a6:         } else if (elements.size() < 5) {
1:f812e34:             t = elements;
1:ecf89a6:         } else {
1:ecf89a6:             t = new HashSet<Object>(elements);
1:f812e34:         }
1:f812e34:         final Collection inList = t;
1:f812e34: 
1:d29ca2a:         return new BooleanUnaryExpression(right) {
1:d29ca2a:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:f812e34: 
1:d29ca2a:                 Object rvalue = right.evaluate(message);
1:d29ca2a:                 if (rvalue == null) {
1:f812e34:                     return null;
1:d29ca2a:                 }
1:ecf89a6:                 if (rvalue.getClass() != String.class) {
1:d29ca2a:                     return null;
1:ecf89a6:                 }
1:f812e34: 
1:f812e34:                 if ((inList != null && inList.contains(rvalue)) ^ not) {
1:f812e34:                     return Boolean.TRUE;
1:d29ca2a:                 } else {
1:f812e34:                     return Boolean.FALSE;
1:d29ca2a:                 }
1:f812e34: 
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String toString() {
1:f812e34:                 StringBuffer answer = new StringBuffer();
1:f812e34:                 answer.append(right);
1:f812e34:                 answer.append(" ");
1:f812e34:                 answer.append(getExpressionSymbol());
1:f812e34:                 answer.append(" ( ");
1:d29ca2a: 
1:f812e34:                 int count = 0;
1:f812e34:                 for (Iterator i = inList.iterator(); i.hasNext();) {
1:f812e34:                     Object o = (Object)i.next();
1:f812e34:                     if (count != 0) {
1:f812e34:                         answer.append(", ");
1:f812e34:                     }
1:f812e34:                     answer.append(o);
1:f812e34:                     count++;
1:f812e34:                 }
1:f812e34: 
1:f812e34:                 answer.append(" )");
1:d29ca2a:                 return answer.toString();
1:f812e34:             }
1:f812e34: 
1:d29ca2a:             public String getExpressionSymbol() {
1:fc00993:                 if (not) {
1:f812e34:                     return "NOT IN";
1:fc00993:                 } else {
1:f812e34:                     return "IN";
1:fc00993:                 }
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     abstract static class BooleanUnaryExpression extends UnaryExpression implements BooleanExpression {
1:f812e34:         public BooleanUnaryExpression(Expression left) {
1:d29ca2a:             super(left);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         public boolean matches(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:             Object object = evaluate(message);
1:f812e34:             return object != null && object == Boolean.TRUE;
1:d29ca2a:         }
1:d29ca2a:     };
1:d29ca2a: 
1:d29ca2a:     public static BooleanExpression createNOT(BooleanExpression left) {
1:d29ca2a:         return new BooleanUnaryExpression(left) {
1:d29ca2a:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:f812e34:                 Boolean lvalue = (Boolean)right.evaluate(message);
1:d29ca2a:                 if (lvalue == null) {
1:d29ca2a:                     return null;
1:ecf89a6:                 }
1:d29ca2a:                 return lvalue.booleanValue() ? Boolean.FALSE : Boolean.TRUE;
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "NOT";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static BooleanExpression createXPath(final String xpath) {
1:d29ca2a:         return new XPathExpression(xpath);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static BooleanExpression createXQuery(final String xpath) {
1:d29ca2a:         return new XQueryExpression(xpath);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static BooleanExpression createBooleanCast(Expression left) {
1:d29ca2a:         return new BooleanUnaryExpression(left) {
1:d29ca2a:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:                 Object rvalue = right.evaluate(message);
1:ecf89a6:                 if (rvalue == null) {
1:d29ca2a:                     return null;
1:d29ca2a:                 }
1:ecf89a6:                 if (!rvalue.getClass().equals(Boolean.class)) {
2:d29ca2a:                     return Boolean.FALSE;
1:ecf89a6:                 }
1:d29ca2a:                 return ((Boolean)rvalue).booleanValue() ? Boolean.TRUE : Boolean.FALSE;
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String toString() {
1:d29ca2a:                 return right.toString();
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private static Number negate(Number left) {
1:f812e34:         Class clazz = left.getClass();
1:d29ca2a:         if (clazz == Integer.class) {
1:d29ca2a:             return new Integer(-left.intValue());
1:f812e34:         } else if (clazz == Long.class) {
1:d29ca2a:             return new Long(-left.longValue());
1:f812e34:         } else if (clazz == Float.class) {
1:d29ca2a:             return new Float(-left.floatValue());
1:f812e34:         } else if (clazz == Double.class) {
1:d29ca2a:             return new Double(-left.doubleValue());
1:f812e34:         } else if (clazz == BigDecimal.class) {
1:f812e34:             // We ussually get a big deciamal when we have Long.MIN_VALUE
1:f812e34:             // constant in the
1:f812e34:             // Selector. Long.MIN_VALUE is too big to store in a Long as a
1:f812e34:             // positive so we store it
1:f812e34:             // as a Big decimal. But it gets Negated right away.. to here we try
1:f812e34:             // to covert it back
1:f812e34:             // to a Long.
1:f812e34:             BigDecimal bd = (BigDecimal)left;
1:f812e34:             bd = bd.negate();
1:f812e34: 
1:f812e34:             if (BD_LONG_MIN_VALUE.compareTo(bd) == 0) {
1:f812e34:                 return Long.valueOf(Long.MIN_VALUE);
1:f812e34:             }
1:d29ca2a:             return bd;
1:f812e34:         } else {
1:f812e34:             throw new RuntimeException("Don't know how to negate: " + left);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Expression getRight() {
1:d29ca2a:         return right;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setRight(Expression expression) {
1:d29ca2a:         right = expression;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see java.lang.Object#toString()
1:d29ca2a:      */
1:d29ca2a:     public String toString() {
1:d29ca2a:         return "(" + getExpressionSymbol() + " " + right.toString() + ")";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * TODO: more efficient hashCode()
1:f812e34:      * 
1:d29ca2a:      * @see java.lang.Object#hashCode()
1:d29ca2a:      */
1:d29ca2a:     public int hashCode() {
1:d29ca2a:         return toString().hashCode();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * TODO: more efficient hashCode()
1:f812e34:      * 
1:d29ca2a:      * @see java.lang.Object#equals(java.lang.Object)
1:d29ca2a:      */
1:d29ca2a:     public boolean equals(Object o) {
1:d29ca2a: 
1:d29ca2a:         if (o == null || !this.getClass().equals(o.getClass())) {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:d29ca2a:         return toString().equals(o.toString());
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Returns the symbol that represents this binary expression. For example,
1:f812e34:      * addition is represented by "+"
1:f812e34:      * 
1:d29ca2a:      * @return
1:d29ca2a:      */
1:fc00993:     public abstract String getExpressionSymbol();
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     public UnaryExpression(Expression left) {
1:         this.right = left;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static BooleanExpression createInExpression(PropertyExpression right, List<Object> elements, final boolean not) {
1:         Collection<Object> t;
1:         if (elements.size() == 0) {
1:         } else if (elements.size() < 5) {
1:         } else {
1:             t = new HashSet<Object>(elements);
/////////////////////////////////////////////////////////////////////////
1:                 if (rvalue.getClass() != String.class) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                 if (rvalue == null) {
1:                 }
1:                 if (!rvalue.getClass().equals(Boolean.class)) {
1:                 }
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:                 if (not) {
1:                 } else {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:     public abstract String getExpressionSymbol();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:                     return negate((Number)rvalue);
/////////////////////////////////////////////////////////////////////////
0:     public static BooleanExpression createInExpression(PropertyExpression right, List elements,
0:                                                        final boolean not) {
1: 
1:         // Use a HashSet if there are many elements.
0:         Collection t;
0:         if (elements.size() == 0)
1:             t = null;
0:         else if (elements.size() < 5)
1:             t = elements;
0:         else {
0:             t = new HashSet(elements);
1:         }
1:         final Collection inList = t;
1: 
1: 
0:                 if (rvalue.getClass() != String.class)
1:                     return null;
1: 
1:                 if ((inList != null && inList.contains(rvalue)) ^ not) {
1:                     return Boolean.TRUE;
1:                     return Boolean.FALSE;
1: 
1:                 StringBuffer answer = new StringBuffer();
1:                 answer.append(right);
1:                 answer.append(" ");
1:                 answer.append(getExpressionSymbol());
1:                 answer.append(" ( ");
1:                 int count = 0;
1:                 for (Iterator i = inList.iterator(); i.hasNext();) {
1:                     Object o = (Object)i.next();
1:                     if (count != 0) {
1:                         answer.append(", ");
1:                     }
1:                     answer.append(o);
1:                     count++;
1:                 }
1: 
1:                 answer.append(" )");
1:             }
1: 
0:                 if (not)
1:                     return "NOT IN";
0:                 else
1:                     return "IN";
1:         public BooleanUnaryExpression(Expression left) {
1:             return object != null && object == Boolean.TRUE;
1:                 Boolean lvalue = (Boolean)right.evaluate(message);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:                 if (rvalue == null)
0:                 if (!rvalue.getClass().equals(Boolean.class))
/////////////////////////////////////////////////////////////////////////
1:         Class clazz = left.getClass();
1:         } else if (clazz == Long.class) {
1:         } else if (clazz == Float.class) {
1:         } else if (clazz == Double.class) {
1:         } else if (clazz == BigDecimal.class) {
1:             // We ussually get a big deciamal when we have Long.MIN_VALUE
1:             // constant in the
1:             // Selector. Long.MIN_VALUE is too big to store in a Long as a
1:             // positive so we store it
1:             // as a Big decimal. But it gets Negated right away.. to here we try
1:             // to covert it back
1:             // to a Long.
1:             BigDecimal bd = (BigDecimal)left;
1:             bd = bd.negate();
1: 
1:             if (BD_LONG_MIN_VALUE.compareTo(bd) == 0) {
1:                 return Long.valueOf(Long.MIN_VALUE);
1:             }
1:         } else {
1:             throw new RuntimeException("Don't know how to negate: " + left);
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Returns the symbol that represents this binary expression. For example,
1:      * addition is represented by "+"
1:      * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0: * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0: *
0: * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0: *
0: * Licensed under the Apache License, Version 2.0 (the "License");
0: * you may not use this file except in compliance with the License.
0: * You may obtain a copy of the License at
0: *
0: * http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing, software
0: * distributed under the License is distributed on an "AS IS" BASIS,
0: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: * See the License for the specific language governing permissions and
0: * limitations under the License.
0: *
0: **/
1: package org.apache.activemq.filter;
1: 
1: import java.math.BigDecimal;
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import javax.jms.JMSException;
1: 
1: /**
1:  * An expression which performs an operation on two expression values
0:  * 
0:  * @version $Revision: 1.3 $
1:  */
1: public abstract class UnaryExpression implements Expression {
1: 
1:     private static final BigDecimal BD_LONG_MIN_VALUE = BigDecimal.valueOf(Long.MIN_VALUE);
1:     protected Expression right;
1: 
1:     public static Expression createNegate(Expression left) {
1:         return new UnaryExpression(left) {
1:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:                 Object rvalue = right.evaluate(message);
1:                 if (rvalue == null) {
1:                     return null;
1:                 }
1:                 if (rvalue instanceof Number) {
0:                     return negate((Number) rvalue);
1:                 }
1:                 return null;
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "-";
1:             }
1:         };
1:     }
1: 
0:     public static BooleanExpression createInExpression(PropertyExpression right, List elements, final boolean not) {
1:     	
0:     	// Use a HashSet if there are many elements.
0:     	Collection t;
0: 		if( elements.size()==0 )
0:     		t=null;
0:     	else if( elements.size() < 5 )
0:     		t = elements;
0:     	else {
0:     		t = new HashSet(elements);
1:     	}
0:     	final Collection inList = t;
1:     	
1:         return new BooleanUnaryExpression(right) {
1:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:             	
1:                 Object rvalue = right.evaluate(message);
1:                 if (rvalue == null) {
1:                     return null;
1:                 }
0:                 if( rvalue.getClass()!=String.class )
1:                 	return null;
1:                 
0:                 if( (inList!=null && inList.contains(rvalue)) ^ not ) {
0:                 	return Boolean.TRUE;
1:                 } else {
1:                 	return Boolean.FALSE;                	
1:                 }
1:                 
1:             }
1: 
1:             public String toString() {
0:             	StringBuffer answer = new StringBuffer();
0:             	answer.append(right);
0:             	answer.append(" ");
0:             	answer.append(getExpressionSymbol());
0:             	answer.append(" ( ");
1: 
0:             	int count=0;
0:             	for (Iterator i = inList.iterator(); i.hasNext();) {
0: 					Object o = (Object) i.next();
0: 					if( count!=0 ) {
0: 		            	answer.append(", ");				
1: 					}
0: 	            	answer.append(o);				
0: 	            	count++;
1: 				}
1:             	
0:             	answer.append(" )");				
1:                 return answer.toString();
1: 			}
1: 			
1:             public String getExpressionSymbol() {
0:             	if( not )
0:             		return "NOT IN";
0:             	else 
0:             		return "IN";
1:             }
1:         };
1:     }
1: 
1:     abstract static class BooleanUnaryExpression extends UnaryExpression implements BooleanExpression {
0:         public BooleanUnaryExpression(Expression left) {        	
1:             super(left);
1:         }
1: 
1:         public boolean matches(MessageEvaluationContext message) throws JMSException {
1:             Object object = evaluate(message);
0:             return object!=null && object==Boolean.TRUE;            
1:         }
1:     };
1: 
1:         
1:     public static BooleanExpression createNOT(BooleanExpression left) {
1:         return new BooleanUnaryExpression(left) {
1:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
0:                 Boolean lvalue = (Boolean) right.evaluate(message);
1:                 if (lvalue == null) {
1:                     return null;
1:                 }
1:                 return lvalue.booleanValue() ? Boolean.FALSE : Boolean.TRUE;
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "NOT";
1:             }
1:         };
1:     }
1:     
1:     public static BooleanExpression createXPath(final String xpath) {
1:         return new XPathExpression(xpath);
1:     }
1: 
1:     public static BooleanExpression createXQuery(final String xpath) {
1:         return new XQueryExpression(xpath);
1:     }
1: 
1:     public static BooleanExpression createBooleanCast(Expression left) {
1:         return new BooleanUnaryExpression(left) {
1:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:                 Object rvalue = right.evaluate(message);
0:                 if (rvalue == null) 
1:                     return null;
0:                 if (!rvalue.getClass().equals(Boolean.class)) 
1:                     return Boolean.FALSE;
1:                 return ((Boolean)rvalue).booleanValue() ? Boolean.TRUE : Boolean.FALSE;
1:             }
1: 
1:             public String toString() {
1:                 return right.toString();
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "";
1:             }
1:         };
1:     }
1: 
1:     private static Number negate(Number left) {
0:     	Class clazz = left.getClass();
1:         if (clazz == Integer.class) {
1:             return new Integer(-left.intValue());
1:         }
0:         else if (clazz == Long.class) {
1:             return new Long(-left.longValue());
1:         }
0:         else if (clazz ==  Float.class) {
1:             return new Float(-left.floatValue());
1:         }
0:         else if (clazz == Double.class) {
1:             return new Double(-left.doubleValue());
1:         }
0:         else if (clazz == BigDecimal.class) {
0:         	// We ussually get a big deciamal when we have Long.MIN_VALUE constant in the 
0:         	// Selector.  Long.MIN_VALUE is too big to store in a Long as a positive so we store it 
0:         	// as a Big decimal.  But it gets Negated right away.. to here we try to covert it back
0:         	// to a Long.        	
0:         	BigDecimal bd = (BigDecimal)left;
0:         	bd = bd.negate();
1:         	
0:         	if( BD_LONG_MIN_VALUE.compareTo(bd)==0  ) {
0:         		return new Long(Long.MIN_VALUE);
1:         	}
1:             return bd;
1:         }
0:         else {
0:             throw new RuntimeException("Don't know how to negate: "+left);
1:         }
1:     }
1: 
0:     public UnaryExpression(Expression left) {
0:         this.right = left;
1:     }
1: 
1:     public Expression getRight() {
1:         return right;
1:     }
1: 
1:     public void setRight(Expression expression) {
1:         right = expression;
1:     }
1: 
1:     /**
1:      * @see java.lang.Object#toString()
1:      */
1:     public String toString() {
1:         return "(" + getExpressionSymbol() + " " + right.toString() + ")";
1:     }
1: 
1:     /**
1:      * TODO: more efficient hashCode()
0:      *
1:      * @see java.lang.Object#hashCode()
1:      */
1:     public int hashCode() {
1:         return toString().hashCode();
1:     }
1: 
1:     /**
1:      * TODO: more efficient hashCode()
0:      *
1:      * @see java.lang.Object#equals(java.lang.Object)
1:      */
1:     public boolean equals(Object o) {
1: 
1:         if (o == null || !this.getClass().equals(o.getClass())) {
1:             return false;
1:         }
1:         return toString().equals(o.toString());
1: 
1:     }
1: 
1:     /**
0:      * Returns the symbol that represents this binary expression.  For example, addition is
0:      * represented by "+"
0:      *
1:      * @return
1:      */
0:     abstract public String getExpressionSymbol();
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:         		return Long.valueOf(Long.MIN_VALUE);
============================================================================