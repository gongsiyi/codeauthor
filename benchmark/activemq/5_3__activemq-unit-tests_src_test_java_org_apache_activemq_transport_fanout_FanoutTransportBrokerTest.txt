1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.fanout;
11:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:74a7a8b: import java.util.concurrent.CountDownLatch;
1:74a7a8b: import java.util.concurrent.TimeUnit;
1:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: import org.apache.activemq.network.NetworkTestSupport;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:d29ca2a: import org.apache.activemq.transport.TransportFilter;
1:d29ca2a: import org.apache.activemq.transport.mock.MockTransport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: public class FanoutTransportBrokerTest extends NetworkTestSupport {
1:d29ca2a: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(FanoutTransportBrokerTest.class);
1:d29ca2a: 
1:d29ca2a:     public ActiveMQDestination destination;
1:d29ca2a:     public int deliveryMode;
1:230a86c: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(FanoutTransportBrokerTest.class);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void initCombosForTestPublisherFansout() {
1:230a86c:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:ecfae00:         addCombinationValues("destination", new Object[] {new ActiveMQTopic("TEST"), new ActiveMQQueue("TEST")});
1:d29ca2a:     }
1:d29ca2a: 
1:328229b:     public void testPublisherFansout() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Start a normal consumer on the local broker
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.request(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         // Start a normal consumer on a remote broker
1:d29ca2a:         StubConnection connection2 = createRemoteConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a:         connection2.request(consumerInfo2);
1:d29ca2a: 
1:d29ca2a:         // Start a fanout publisher.
1:fc00993:         LOG.info("Starting the fanout connection.");
1:d29ca2a:         StubConnection connection3 = createFanoutConnection();
1:d29ca2a:         ConnectionInfo connectionInfo3 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:d29ca2a:         ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);
1:d29ca2a:         connection3.send(connectionInfo3);
1:d29ca2a:         connection3.send(sessionInfo3);
1:d29ca2a:         connection3.send(producerInfo3);
1:d29ca2a: 
1:d29ca2a:         // Send the message using the fail over publisher.
1:d29ca2a:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:d29ca2a: 
1:d29ca2a:         assertNotNull(receiveMessage(connection1));
1:d29ca2a:         assertNoMessagesLeft(connection1);
1:d29ca2a: 
1:d29ca2a:         assertNotNull(receiveMessage(connection2));
1:d29ca2a:         assertNoMessagesLeft(connection2);
1:230a86c: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void initCombosForTestPublisherWaitsForServerToBeUp() {
1:230a86c:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:328229b:         addCombinationValues("destination", new Object[] {new ActiveMQTopic("TEST")});
1:d29ca2a:     }
1:230a86c: 
1:7f5213b:     public void testPublisherWaitsForServerToBeUp() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Start a normal consumer on the local broker
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.request(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         // Start a normal consumer on a remote broker
1:d29ca2a:         StubConnection connection2 = createRemoteConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a:         connection2.request(consumerInfo2);
1:d29ca2a: 
1:d29ca2a:         // Start a fanout publisher.
1:fc00993:         LOG.info("Starting the fanout connection.");
1:d29ca2a:         final StubConnection connection3 = createFanoutConnection();
1:d29ca2a:         ConnectionInfo connectionInfo3 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:d29ca2a:         final ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);
1:d29ca2a:         connection3.send(connectionInfo3);
1:d29ca2a:         connection3.send(sessionInfo3);
1:d29ca2a:         connection3.send(producerInfo3);
1:d29ca2a: 
1:d29ca2a:         // Send the message using the fail over publisher.
1:d29ca2a:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:d29ca2a: 
1:d29ca2a:         assertNotNull(receiveMessage(connection1));
1:d29ca2a:         assertNoMessagesLeft(connection1);
1:d29ca2a: 
1:d29ca2a:         assertNotNull(receiveMessage(connection2));
1:d29ca2a:         assertNoMessagesLeft(connection2);
1:d29ca2a: 
1:d29ca2a:         final CountDownLatch publishDone = new CountDownLatch(1);
1:230a86c: 
1:d29ca2a:         // The MockTransport is on the remote connection.
1:d29ca2a:         // Slip in a new transport filter after the MockTransport
1:230a86c:         MockTransport mt = (MockTransport)connection3.getTransport().narrow(MockTransport.class);
1:d29ca2a:         mt.install(new TransportFilter(mt.getNext()) {
1:9ca56a0:             public void oneway(Object command) throws IOException {
1:fc00993:                 LOG.info("Dropping: " + command);
1:d29ca2a:                 // just eat it! to simulate a recent failure.
1:d29ca2a:             }
1:d29ca2a:         });
1:230a86c: 
1:230a86c:         // Send a message (async) as this will block
1:d29ca2a:         new Thread() {
1:d29ca2a:             public void run() {
1:d29ca2a:                 // Send the message using the fail over publisher.
1:d29ca2a:                 try {
1:d29ca2a:                     connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:d29ca2a:                 } catch (Throwable e) {
1:d29ca2a:                     e.printStackTrace();
1:d29ca2a:                 }
1:d29ca2a:                 publishDone.countDown();
1:d29ca2a:             }
1:d29ca2a:         }.start();
1:230a86c: 
1:d29ca2a:         // Assert that we block:
1:230a86c:         assertFalse(publishDone.await(3, TimeUnit.SECONDS));
1:230a86c: 
1:230a86c:         // Restart the remote server. State should be re-played and the publish
1:230a86c:         // should continue.
1:328229b:         LOG.info("Restarting Broker");
1:d29ca2a:         restartRemoteBroker();
1:328229b:         LOG.info("Broker Restarted");
1:d29ca2a: 
1:d29ca2a:         // This should reconnect, and resend
1:328229b:         assertTrue(publishDone.await(20, TimeUnit.SECONDS));
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getLocalURI() {
1:328229b:         return "tcp://localhost:61616";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getRemoteURI() {
1:328229b:         return "tcp://localhost:61617";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected StubConnection createFanoutConnection() throws Exception {
1:ecfae00:         URI fanoutURI = new URI("fanout://(static://(" + connector.getServer().getConnectURI() + "," + "mock://" + remoteConnector.getServer().getConnectURI() + "))?fanOutQueues=true");
1:d29ca2a:         Transport transport = TransportFactory.connect(fanoutURI);
1:d29ca2a:         StubConnection connection = new StubConnection(transport);
1:d29ca2a:         connections.add(connection);
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
commit:ecfae00
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQTopic("TEST"), new ActiveMQQueue("TEST")});
/////////////////////////////////////////////////////////////////////////
1:         URI fanoutURI = new URI("fanout://(static://(" + connector.getServer().getConnectURI() + "," + "mock://" + remoteConnector.getServer().getConnectURI() + "))?fanOutQueues=true");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(FanoutTransportBrokerTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:328229b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQTopic("TEST")});
1:     public void testPublisherFansout() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQTopic("TEST")});
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Restarting Broker");
1:         LOG.info("Broker Restarted");
1:         assertTrue(publishDone.await(20, TimeUnit.SECONDS));
1:         return "tcp://localhost:61616";
1:         return "tcp://localhost:61617";
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(FanoutTransportBrokerTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Starting the fanout connection.");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Starting the fanout connection.");
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Dropping: " + command);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         MockTransport mt = (MockTransport)connection3.getTransport().narrow(MockTransport.class);
0:                 log.info("Dropping: " + command);
1: 
1:         // Send a message (async) as this will block
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertFalse(publishDone.await(3, TimeUnit.SECONDS));
1: 
1:         // Restart the remote server. State should be re-played and the publish
1:         // should continue.
0:         assertTrue(publishDone.await(10, TimeUnit.SECONDS));
/////////////////////////////////////////////////////////////////////////
0:         URI fanoutURI = new URI("fanout://static://(" + connector.getServer().getConnectURI() + "," + "mock://" + remoteConnector.getServer().getConnectURI() + ")");
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             public void oneway(Object command) throws IOException {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:                 log.info("Dropping: "+command);
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void xtestPublisherFansout() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testPublisherWaitsForServerToBeUp() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.fanout;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: 
1: import javax.jms.DeliveryMode;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.network.NetworkTestSupport;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportFilter;
1: import org.apache.activemq.transport.mock.MockTransport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
1: 
1: public class FanoutTransportBrokerTest extends NetworkTestSupport {
1: 
0:     private static final Log log = LogFactory.getLog(FanoutTransportBrokerTest.class);
1: 
1:     public ActiveMQDestination destination;
1:     public int deliveryMode;
1:     
0:     private String remoteURI = "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1: 
1:     public static Test suite() {
1:         return suite(FanoutTransportBrokerTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     public void initCombosForTestPublisherFansout() {
0:         addCombinationValues("deliveryMode", new Object[] { new Integer(DeliveryMode.NON_PERSISTENT),
0:                 new Integer(DeliveryMode.PERSISTENT) });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), });
1:     }
1: 
0:     public void xtestPublisherFansout() throws Throwable {
1: 
1:         // Start a normal consumer on the local broker
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.request(consumerInfo1);
1: 
1:         // Start a normal consumer on a remote broker
1:         StubConnection connection2 = createRemoteConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.request(consumerInfo2);
1: 
1:         // Start a fanout publisher.
0:         log.info("Starting the fanout connection.");
1:         StubConnection connection3 = createFanoutConnection();
1:         ConnectionInfo connectionInfo3 = createConnectionInfo();
1:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:         ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);
1:         connection3.send(connectionInfo3);
1:         connection3.send(sessionInfo3);
1:         connection3.send(producerInfo3);
1: 
1:         // Send the message using the fail over publisher.
1:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1: 
1:         assertNotNull(receiveMessage(connection1));
1:         assertNoMessagesLeft(connection1);
1: 
1:         assertNotNull(receiveMessage(connection2));
1:         assertNoMessagesLeft(connection2);
1: 
1:     }
1: 
1:     
1:     public void initCombosForTestPublisherWaitsForServerToBeUp() {
0:         addCombinationValues("deliveryMode", new Object[] { new Integer(DeliveryMode.NON_PERSISTENT),
0:                 new Integer(DeliveryMode.PERSISTENT) });
0:         addCombinationValues("destination", new Object[] { new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), });
1:     }
0:     public void testPublisherWaitsForServerToBeUp() throws Throwable {
1: 
1:         // Start a normal consumer on the local broker
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.request(consumerInfo1);
1: 
1:         // Start a normal consumer on a remote broker
1:         StubConnection connection2 = createRemoteConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.request(consumerInfo2);
1: 
1:         // Start a fanout publisher.
0:         log.info("Starting the fanout connection.");
1:         final StubConnection connection3 = createFanoutConnection();
1:         ConnectionInfo connectionInfo3 = createConnectionInfo();
1:         SessionInfo sessionInfo3 = createSessionInfo(connectionInfo3);
1:         final ProducerInfo producerInfo3 = createProducerInfo(sessionInfo3);
1:         connection3.send(connectionInfo3);
1:         connection3.send(sessionInfo3);
1:         connection3.send(producerInfo3);
1: 
1:         // Send the message using the fail over publisher.
1:         connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1: 
1:         assertNotNull(receiveMessage(connection1));
1:         assertNoMessagesLeft(connection1);
1: 
1:         assertNotNull(receiveMessage(connection2));
1:         assertNoMessagesLeft(connection2);
1:         
1:         final CountDownLatch publishDone = new CountDownLatch(1);
1:         
1:         // The MockTransport is on the remote connection.
1:         // Slip in a new transport filter after the MockTransport
0:         MockTransport mt = (MockTransport) connection3.getTransport().narrow(MockTransport.class);
1:         mt.install(new TransportFilter(mt.getNext()) {
0:             public void oneway(Command command) throws IOException {
0:                 System.out.println("Dropping: "+command);
1:                 // just eat it! to simulate a recent failure.
1:             }
1:         });
1:                 
0:         // Send a message (async) as this will block 
1:         new Thread() {
1:             public void run() {
1:                 // Send the message using the fail over publisher.
1:                 try {
1:                     connection3.request(createMessage(producerInfo3, destination, deliveryMode));
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
1:                 }
1:                 publishDone.countDown();
1:             }
1:         }.start();
1:         
1:         // Assert that we block:
0:         assertFalse( publishDone.await(3, TimeUnit.SECONDS)  );
1:         
0:         // Restart the remote server.  State should be re-played and the publish should continue.
0:         remoteURI = remoteConnector.getServer().getConnectURI().toString();
1:         restartRemoteBroker();
1: 
1:         // This should reconnect, and resend
0:         assertTrue( publishDone.await(10, TimeUnit.SECONDS)  );
1: 
1:     }
1: 
1:     protected String getLocalURI() {
0:         return "tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true";
1:     }
1: 
1:     protected String getRemoteURI() {
0:         return remoteURI;
1:     }
1: 
1:     protected StubConnection createFanoutConnection() throws Exception {
0:         URI fanoutURI = new URI("fanout://static://(" + connector.getServer().getConnectURI() + ","
0:                 + "mock://"+remoteConnector.getServer().getConnectURI() + ")");
1:         Transport transport = TransportFactory.connect(fanoutURI);
1:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
1:         return connection;
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("deliveryMode", new Object[] { Integer.valueOf(DeliveryMode.NON_PERSISTENT),
0:         		Integer.valueOf(DeliveryMode.PERSISTENT) });
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("deliveryMode", new Object[] { Integer.valueOf(DeliveryMode.NON_PERSISTENT),
0:                 Integer.valueOf(DeliveryMode.PERSISTENT) });
============================================================================