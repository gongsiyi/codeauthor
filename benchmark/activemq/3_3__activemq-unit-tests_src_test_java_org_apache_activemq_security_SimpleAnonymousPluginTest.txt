1:eeacd65: /**
1:eeacd65:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:eeacd65:  * contributor license agreements.  See the NOTICE file distributed with
1:eeacd65:  * this work for additional information regarding copyright ownership.
1:eeacd65:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:eeacd65:  * (the "License"); you may not use this file except in compliance with
1:eeacd65:  * the License.  You may obtain a copy of the License at
1:eeacd65:  *
1:eeacd65:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eeacd65:  *
1:eeacd65:  * Unless required by applicable law or agreed to in writing, software
1:eeacd65:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eeacd65:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eeacd65:  * See the License for the specific language governing permissions and
1:eeacd65:  * limitations under the License.
1:eeacd65:  */
1:eeacd65: package org.apache.activemq.security;
11:eeacd65: 
1:eeacd65: import javax.jms.Connection;
1:eeacd65: import javax.jms.JMSException;
1:eeacd65: 
1:eeacd65: import junit.framework.Test;
1:eeacd65: 
1:eeacd65: import org.apache.activemq.CombinationTestSupport;
1:eeacd65: import org.apache.activemq.broker.BrokerService;
1:eeacd65: import org.apache.activemq.command.ActiveMQQueue;
1:eeacd65: import org.apache.activemq.command.ActiveMQTopic;
1:eeacd65: 
1:eeacd65: public class SimpleAnonymousPluginTest extends SimpleAuthenticationPluginTest {
1:eeacd65: 
1:eeacd65:     public static Test suite() {
1:eeacd65:         return suite(SimpleAnonymousPluginTest.class);
2:eeacd65:     }
1:eeacd65: 
1:eeacd65:     public static void main(String[] args) {
1:eeacd65:         junit.textui.TestRunner.run(suite());
1:eeacd65:     }
1:eeacd65: 
1:4743a20:     @Override
1:eeacd65:     protected BrokerService createBroker() throws Exception {
1:eeacd65:         return createBroker("org/apache/activemq/security/simple-anonymous-broker.xml");
1:4743a20:     }
1:4743a20: 
1:4743a20:     @Override
1:eeacd65:     public void testInvalidAuthentication() throws JMSException {
1:eeacd65: 
1:eeacd65:         try {
1:eeacd65:             // Bad password
1:eeacd65:             Connection c = factory.createConnection("user", "krap");
1:eeacd65:             connections.add(c);
1:eeacd65:             c.start();
1:eeacd65:             fail("Expected exception.");
1:eeacd65:         } catch (JMSException e) {
1:eeacd65:         }
1:4743a20: 
1:eeacd65:         try {
1:eeacd65:             // Bad userid
1:eeacd65:             Connection c = factory.createConnection("userkrap", null);
1:eeacd65:             connections.add(c);
1:eeacd65:             c.start();
1:eeacd65:             fail("Expected exception.");
1:eeacd65:         } catch (JMSException e) {
1:eeacd65:         }
1:eeacd65:     }
1:4743a20: 
1:eeacd65:     public void testAnonymousReceiveSucceeds() throws JMSException {
1:eeacd65:         doReceive(false);
1:eeacd65:     }
1:eeacd65: 
1:eeacd65:     public void testAnonymousReceiveFails() throws JMSException {
1:eeacd65:         doReceive(true);
1:eeacd65:     }
1:4743a20: 
1:eeacd65:     public void testAnonymousSendFails() throws JMSException {
1:eeacd65:         doSend(true);
1:eeacd65:     }
1:eeacd65: 
1:eeacd65:     public void testAnonymousSendSucceeds() throws JMSException {
1:eeacd65:         doSend(false);
1:eeacd65:     }
1:4743a20: 
1:eeacd65:     /**
1:eeacd65:      * @see {@link CombinationTestSupport}
1:eeacd65:      */
1:eeacd65:     public void initCombosForTestAnonymousReceiveSucceeds() {
1:1f9a2d6:         addCombinationValues("userName", new Object[] { null });
1:1f9a2d6:         addCombinationValues("password", new Object[] { null });
1:eeacd65:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
1:eeacd65:     }
1:4743a20: 
1:eeacd65:     /**
1:eeacd65:      * @see {@link CombinationTestSupport}
1:eeacd65:      */
1:eeacd65:     public void initCombosForTestAnonymousReceiveFails() {
1:1f9a2d6:         addCombinationValues("userName", new Object[] { null });
1:1f9a2d6:         addCombinationValues("password", new Object[] { null });
1:eeacd65:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO") });
1:eeacd65:     }
1:4743a20: 
1:eeacd65:     /**
1:eeacd65:      * @see {@link CombinationTestSupport}
1:eeacd65:      */
1:eeacd65:     public void initCombosForTestAnonymousSendFails() {
1:1f9a2d6:         addCombinationValues("userName", new Object[] { null });
1:1f9a2d6:         addCombinationValues("password", new Object[] { null });
1:eeacd65:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO")});
1:eeacd65:     }
1:eeacd65: 
1:eeacd65:     /**
1:eeacd65:      * @see {@link CombinationTestSupport}
1:eeacd65:      */
1:eeacd65:     public void initCombosForTestAnonymousSendSucceeds() {
1:1f9a2d6:         addCombinationValues("userName", new Object[] { null });
1:1f9a2d6:         addCombinationValues("password", new Object[] { null });
1:eeacd65:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
1:eeacd65:     }
1:eeacd65: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1f9a2d6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("userName", new Object[] { null });
1:         addCombinationValues("password", new Object[] { null });
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("userName", new Object[] { null });
1:         addCombinationValues("password", new Object[] { null });
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("userName", new Object[] { null });
1:         addCombinationValues("password", new Object[] { null });
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("userName", new Object[] { null });
1:         addCombinationValues("password", new Object[] { null });
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     private static final Logger LOG = LoggerFactory.getLogger(SimpleAnonymousPluginTest.class);
commit:eeacd65
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class SimpleAnonymousPluginTest extends SimpleAuthenticationPluginTest {
1: 
0:     private static final Log LOG = LogFactory.getLog(SimpleAnonymousPluginTest.class);
1: 
1:     public static Test suite() {
1:         return suite(SimpleAnonymousPluginTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker("org/apache/activemq/security/simple-anonymous-broker.xml");
1:     }    
1:     
1:     public void testInvalidAuthentication() throws JMSException {
1: 
1:         try {
1:             // Bad password
1:             Connection c = factory.createConnection("user", "krap");
1:             connections.add(c);
1:             c.start();
1:             fail("Expected exception.");
1:         } catch (JMSException e) {
1:         }
1: 
1:         try {
1:             // Bad userid
1:             Connection c = factory.createConnection("userkrap", null);
1:             connections.add(c);
1:             c.start();
1:             fail("Expected exception.");
1:         } catch (JMSException e) {
1:         }
1:     }
1:     
1:     
1:     public void testAnonymousReceiveSucceeds() throws JMSException {
1:         doReceive(false);
1:     }
1: 
1:     public void testAnonymousReceiveFails() throws JMSException {
1:         doReceive(true);
1:     }
1:     
1:     public void testAnonymousSendFails() throws JMSException {
1:         doSend(true);
1:     }
1: 
1:     public void testAnonymousSendSucceeds() throws JMSException {
1:         doSend(false);
1:     }
1:     
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     public void initCombosForTestAnonymousReceiveSucceeds() {
0:         addCombinationValues("userName", new Object[] {});
0:         addCombinationValues("password", new Object[] {});
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
1:     }
1: 
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     public void initCombosForTestAnonymousReceiveFails() {
0:         addCombinationValues("userName", new Object[] {});
0:         addCombinationValues("password", new Object[] {});
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO") });
1:     }
1:     
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     public void initCombosForTestAnonymousSendFails() {
0:         addCombinationValues("userName", new Object[] {});
0:         addCombinationValues("password", new Object[] {});
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST"), new ActiveMQQueue("USERS.FOO"), new ActiveMQTopic("USERS.FOO")});
1:     }
1: 
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     public void initCombosForTestAnonymousSendSucceeds() {
0:         addCombinationValues("userName", new Object[] {});
0:         addCombinationValues("password", new Object[] {});
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GUEST.BAR"), new ActiveMQTopic("GUEST.BAR")});
1:     }
1:     
1: }
============================================================================