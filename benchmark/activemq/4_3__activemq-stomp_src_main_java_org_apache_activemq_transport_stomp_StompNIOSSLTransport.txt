1:036f2a8: /**
1:036f2a8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:036f2a8:  * contributor license agreements.  See the NOTICE file distributed with
1:036f2a8:  * this work for additional information regarding copyright ownership.
1:036f2a8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:036f2a8:  * (the "License"); you may not use this file except in compliance with
1:036f2a8:  * the License.  You may obtain a copy of the License at
1:036f2a8:  *
1:036f2a8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:036f2a8:  *
1:036f2a8:  * Unless required by applicable law or agreed to in writing, software
1:036f2a8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:036f2a8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:036f2a8:  * See the License for the specific language governing permissions and
1:036f2a8:  * limitations under the License.
1:036f2a8:  */
1:036f2a8: package org.apache.activemq.transport.stomp;
2:036f2a8: 
1:036f2a8: import java.io.ByteArrayInputStream;
1:036f2a8: import java.io.IOException;
1:036f2a8: import java.net.Socket;
1:036f2a8: import java.net.URI;
1:036f2a8: import java.net.UnknownHostException;
1:036f2a8: import java.nio.ByteBuffer;
1:f8f24e8: import java.security.cert.X509Certificate;
1:f8f24e8: 
1:f8f24e8: import javax.net.SocketFactory;
1:04ee70a: import javax.net.ssl.SSLEngine;
1:f8f24e8: 
1:f8f24e8: import org.apache.activemq.transport.nio.NIOSSLTransport;
1:f8f24e8: import org.apache.activemq.wireformat.WireFormat;
1:036f2a8: 
1:036f2a8: public class StompNIOSSLTransport extends NIOSSLTransport {
1:036f2a8: 
1:036f2a8:     StompCodec codec;
1:036f2a8: 
1:f8f24e8:     private X509Certificate[] cachedPeerCerts;
1:f8f24e8: 
1:036f2a8:     public StompNIOSSLTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:036f2a8:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:036f2a8:     }
1:036f2a8: 
1:036f2a8:     public StompNIOSSLTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:04ee70a:         super(wireFormat, socket, null, null, null);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: 
1:04ee70a: 
1:04ee70a:     public StompNIOSSLTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer) throws IOException {
1:04ee70a:         super(wireFormat, socket, engine, initBuffer, inputBuffer);
1:036f2a8:     }
1:036f2a8: 
1:036f2a8:     @Override
1:036f2a8:     protected void initializeStreams() throws IOException {
1:036f2a8:         codec = new StompCodec(this);
1:036f2a8:         super.initializeStreams();
1:036f2a8:         if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
1:036f2a8:             serviceRead();
1:036f2a8:         }
1:036f2a8:     }
1:036f2a8: 
1:036f2a8:     @Override
1:036f2a8:     protected void processCommand(ByteBuffer plain) throws Exception {
1:036f2a8:         byte[] fill = new byte[plain.remaining()];
1:036f2a8:         plain.get(fill);
1:036f2a8:         ByteArrayInputStream input = new ByteArrayInputStream(fill);
1:036f2a8:         codec.parse(input, fill.length);
1:036f2a8:     }
1:036f2a8: 
1:f8f24e8:     @Override
1:f8f24e8:     public void doConsume(Object command) {
1:f8f24e8:         StompFrame frame = (StompFrame) command;
1:f8f24e8: 
1:f8f24e8:         if (cachedPeerCerts == null) {
1:f8f24e8:             cachedPeerCerts = getPeerCertificates();
1:f8f24e8:         }
1:f8f24e8:         frame.setTransportContext(cachedPeerCerts);
1:f8f24e8: 
1:f8f24e8:         super.doConsume(command);
1:f8f24e8:     }
1:04ee70a: 
1:04ee70a:     /* (non-Javadoc)
1:04ee70a:      * @see org.apache.activemq.transport.nio.NIOSSLTransport#doInit()
1:04ee70a:      */
1:04ee70a:     @Override
1:04ee70a:     protected void doInit() throws Exception {
1:04ee70a:         if (initBuffer != null) {
1:04ee70a:             nextFrameSize = -1;
1:04ee70a:             receiveCounter += initBuffer.readSize;
1:04ee70a:             initBuffer.buffer.flip();
1:04ee70a:             processCommand(initBuffer.buffer);
1:04ee70a:         }
1:ed0e786:         super.doInit();
1:04ee70a:     }
1:036f2a8: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:ed0e786
/////////////////////////////////////////////////////////////////////////
1:         super.doInit();
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.SSLEngine;
/////////////////////////////////////////////////////////////////////////
1:         super(wireFormat, socket, null, null, null);
1:     }
1: 
1: 
1: 
1:     public StompNIOSSLTransport(WireFormat wireFormat, Socket socket,
1:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer) throws IOException {
1:         super(wireFormat, socket, engine, initBuffer, inputBuffer);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.transport.nio.NIOSSLTransport#doInit()
1:      */
1:     @Override
1:     protected void doInit() throws Exception {
1:         if (initBuffer != null) {
1:             nextFrameSize = -1;
0:            // System.out.println("length1: " + initBuffer.array().length);
1:             receiveCounter += initBuffer.readSize;
1:             initBuffer.buffer.flip();
1:             processCommand(initBuffer.buffer);
1:         }
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f8f24e8
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
1: 
1: import javax.net.SocketFactory;
1: 
1: import org.apache.activemq.transport.nio.NIOSSLTransport;
1: import org.apache.activemq.wireformat.WireFormat;
1:     private X509Certificate[] cachedPeerCerts;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void doConsume(Object command) {
1:         StompFrame frame = (StompFrame) command;
1: 
1:         if (cachedPeerCerts == null) {
1:             cachedPeerCerts = getPeerCertificates();
1:         }
1:         frame.setTransportContext(cachedPeerCerts);
1: 
1:         super.doConsume(command);
1:     }
commit:0885c60
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:036f2a8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
0: import org.apache.activemq.transport.nio.NIOSSLTransport;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.wireformat.WireFormat;
1: 
0: import javax.net.SocketFactory;
1: import java.io.ByteArrayInputStream;
0: import java.io.EOFException;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.nio.ByteBuffer;
1: 
1: public class StompNIOSSLTransport extends NIOSSLTransport {
1: 
1:     StompCodec codec;
1: 
1:     public StompNIOSSLTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:     }
1: 
1:     public StompNIOSSLTransport(WireFormat wireFormat, Socket socket) throws IOException {
0:         super(wireFormat, socket);
1:     }
1: 
1:     @Override
1:     protected void initializeStreams() throws IOException {
1:         codec = new StompCodec(this);
1:         super.initializeStreams();
1:         if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
1:             serviceRead();
1:         }
1:     }
1: 
1:     @Override
1:     protected void processCommand(ByteBuffer plain) throws Exception {
1:         byte[] fill = new byte[plain.remaining()];
1:         plain.get(fill);
1:         ByteArrayInputStream input = new ByteArrayInputStream(fill);
1:         codec.parse(input, fill.length);
1:     }
1: 
1: }
============================================================================