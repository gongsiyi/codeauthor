1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
3:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:f33f32e: import java.util.concurrent.locks.ReentrantLock;
1:d29ca2a: 
1:d29ca2a: /**
1:f33f32e:  * Thread safe Transport Filter that serializes calls to and from the Transport Stack.
1:d29ca2a:  */
1:d29ca2a: public class MutexTransport extends TransportFilter {
1:f812e34: 
1:3f49df7:     private final ReentrantLock writeLock = new ReentrantLock();
1:f33f32e:     private boolean syncOnCommand;
1:d29ca2a: 
1:d29ca2a:     public MutexTransport(Transport next) {
1:d29ca2a:         super(next);
1:f33f32e:         this.syncOnCommand = false;
1:d29ca2a:     }
1:d29ca2a: 
1:f33f32e:     public MutexTransport(Transport next, boolean syncOnCommand) {
1:f33f32e:         super(next);
1:f33f32e:         this.syncOnCommand = syncOnCommand;
1:d29ca2a:     }
1:d29ca2a: 
1:f33f32e:     @Override
1:f33f32e:     public void onCommand(Object command) {
1:f33f32e:         if (syncOnCommand) {
1:3f49df7:             writeLock.lock();
1:f33f32e:             try {
1:f33f32e:                 transportListener.onCommand(command);
1:f33f32e:             } finally {
1:3f49df7:                 writeLock.unlock();
1:d29ca2a:             }
1:f33f32e:         } else {
1:f33f32e:             transportListener.onCommand(command);
1:f33f32e:         }
1:f33f32e:     }
1:d29ca2a: 
1:f33f32e:     @Override
1:9ca56a0:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
1:3f49df7:         writeLock.lock();
1:f33f32e:         try {
1:84fd773:             return next.asyncRequest(command, null);
1:f33f32e:         } finally {
1:3f49df7:             writeLock.unlock();
1:f33f32e:         }
1:f33f32e:     }
1:d29ca2a: 
1:f33f32e:     @Override
1:f812e34:     public void oneway(Object command) throws IOException {
1:3f49df7:         writeLock.lock();
1:f33f32e:         try {
1:d29ca2a:             next.oneway(command);
1:f33f32e:         } finally {
1:3f49df7:             writeLock.unlock();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:f33f32e:     @Override
1:9ca56a0:     public Object request(Object command) throws IOException {
1:3f49df7:         writeLock.lock();
1:f33f32e:         try {
1:d29ca2a:             return next.request(command);
1:f33f32e:         } finally {
1:3f49df7:             writeLock.unlock();
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:f33f32e:     @Override
1:f812e34:     public Object request(Object command, int timeout) throws IOException {
1:3f49df7:         writeLock.lock();
1:f33f32e:         try {
1:f812e34:             return next.request(command, timeout);
1:f33f32e:         } finally {
1:3f49df7:             writeLock.unlock();
1:f33f32e:         }
1:e76feb6:     }
1:f812e34: 
1:f33f32e:     @Override
1:d29ca2a:     public String toString() {
1:d29ca2a:         return next.toString();
1:86cbdfd:     }
1:f812e34: 
1:f33f32e:     public boolean isSyncOnCommand() {
1:f33f32e:         return syncOnCommand;
1:d29ca2a:     }
1:d29ca2a: 
1:f33f32e:     public void setSyncOnCommand(boolean syncOnCommand) {
1:f33f32e:         this.syncOnCommand = syncOnCommand;
1:d29ca2a:     }
1:f33f32e: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
0:         synchronized (writeMutex) {
1:     public void oneway(Object command) throws IOException {
0:         synchronized (writeMutex) {
0:         synchronized (writeMutex) {
1: 
1:     public Object request(Object command, int timeout) throws IOException {
0:         synchronized (writeMutex) {
1:             return next.request(command, timeout);
1: 
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
0:     public void oneway(Object command) throws IOException {
1:     public Object request(Object command) throws IOException {
0:     public Object request(Object command,int timeout) throws IOException {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:84fd773
/////////////////////////////////////////////////////////////////////////
0:     public FutureResponse asyncRequest(Command command, ResponseCallback responseCallback) throws IOException {
1:             return next.asyncRequest(command, null);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import java.io.IOException;
1: 
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.Response;
1: 
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class MutexTransport extends TransportFilter {
1: 
0:     private final Object writeMutex = new Object();
1:     
1:     public MutexTransport(Transport next) {
1:         super(next);
1:     }
1: 
0:     public FutureResponse asyncRequest(Command command) throws IOException {
0:         synchronized(writeMutex) {
0:             return next.asyncRequest(command);
1:         }
1:     }
1: 
0:     public void oneway(Command command) throws IOException {
0:         synchronized(writeMutex) {
1:             next.oneway(command);
1:         }
1:     }
1: 
0:     public Response request(Command command) throws IOException {
0:         synchronized(writeMutex) {
1:             return next.request(command);
1:         }
1:     }
1:     
1:     public String toString() {
1:         return next.toString();
1:     }
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:3f49df7
/////////////////////////////////////////////////////////////////////////
1:     private final ReentrantLock writeLock = new ReentrantLock();
/////////////////////////////////////////////////////////////////////////
1:             writeLock.lock();
1:                 writeLock.unlock();
/////////////////////////////////////////////////////////////////////////
1:         writeLock.lock();
1:             writeLock.unlock();
1:         writeLock.lock();
1:             writeLock.unlock();
1:         writeLock.lock();
1:             writeLock.unlock();
1:         writeLock.lock();
1:             writeLock.unlock();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f33f32e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.locks.ReentrantLock;
1:  * Thread safe Transport Filter that serializes calls to and from the Transport Stack.
0:     private final ReentrantLock wreiteLock = new ReentrantLock();
1:     private boolean syncOnCommand;
1:         this.syncOnCommand = false;
1:     public MutexTransport(Transport next, boolean syncOnCommand) {
1:         super(next);
1:         this.syncOnCommand = syncOnCommand;
1:     }
0: 
1:     @Override
1:     public void onCommand(Object command) {
1:         if (syncOnCommand) {
0:             wreiteLock.lock();
1:             try {
1:                 transportListener.onCommand(command);
1:             } finally {
0:                 wreiteLock.unlock();
1:             }
1:         } else {
1:             transportListener.onCommand(command);
1:         }
1:     }
0: 
1:     @Override
0:         wreiteLock.lock();
1:         try {
1:         } finally {
0:             wreiteLock.unlock();
1:     @Override
0:         wreiteLock.lock();
1:         try {
1:         } finally {
0:             wreiteLock.unlock();
1:     @Override
0:         wreiteLock.lock();
1:         try {
1:         } finally {
0:             wreiteLock.unlock();
1:     @Override
0:         wreiteLock.lock();
1:         try {
1:         } finally {
0:             wreiteLock.unlock();
1:     @Override
1:     public boolean isSyncOnCommand() {
1:         return syncOnCommand;
1:     }
0: 
1:     public void setSyncOnCommand(boolean syncOnCommand) {
1:         this.syncOnCommand = syncOnCommand;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:79f326a
/////////////////////////////////////////////////////////////////////////
0:         synchronized(writeMutex){
commit:e76feb6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ShutdownInfo;
/////////////////////////////////////////////////////////////////////////
0:     public void oneway(Object command) throws IOException{
0:         if(command instanceof ShutdownInfo){
0:         }else{
0:             synchronized(writeMutex){
0:                 next.oneway(command);
1:             }
commit:5fe0a4c
/////////////////////////////////////////////////////////////////////////
0:     public Response request(Command command,int timeout) throws IOException {
0:         synchronized(writeMutex){
0:             return next.request(command,timeout);
0:         }
0:     }
0:     
============================================================================