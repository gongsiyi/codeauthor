1:468e697: /**
1:468e697:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:468e697:  * contributor license agreements.  See the NOTICE file distributed with
1:468e697:  * this work for additional information regarding copyright ownership.
1:468e697:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:468e697:  * (the "License"); you may not use this file except in compliance with
1:468e697:  * the License.  You may obtain a copy of the License at
1:468e697:  *
1:468e697:  *      http://www.apache.org/licenses/LICENSE-2.0
1:468e697:  *
1:468e697:  * Unless required by applicable law or agreed to in writing, software
1:468e697:  * distributed under the License is distributed on an "AS IS" BASIS,
1:468e697:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:468e697:  * See the License for the specific language governing permissions and
1:468e697:  * limitations under the License.
1:468e697:  */
1:468e697: package org.apache.activemq.broker.region.group;
2:468e697: 
1:468e697: import java.util.HashMap;
1:468e697: import java.util.Iterator;
1:468e697: import java.util.Map;
1:468e697: 
1:d25c52c: import org.apache.activemq.broker.region.Destination;
1:d25c52c: import org.apache.activemq.broker.region.Subscription;
1:468e697: import org.apache.activemq.command.ConsumerId;
1:468e697: import org.apache.activemq.memory.LRUMap;
1:468e697: 
1:468e697: /**
1:468e697:  * A simple implementation which tracks every individual GroupID value in a LRUCache
1:468e697:  * 
1:468e697:  * 
1:468e697:  */
1:468e697: public class CachedMessageGroupMap implements MessageGroupMap {
1:cd4b229:     private final LRUMap<String, ConsumerId> cache;
1:cd4b229:     private final int maximumCacheSize;
1:d25c52c:     Destination destination;
1:d25c52c: 
1:cd4b229:     CachedMessageGroupMap(int size){
1:d25c52c:       cache = new LRUMap<String, ConsumerId>(size) {
1:d25c52c:           @Override
1:d25c52c:           public boolean removeEldestEntry(final Map.Entry eldest) {
1:d25c52c:               boolean remove = super.removeEldestEntry(eldest);
1:d25c52c:               if (remove) {
1:d25c52c:                   if (destination != null) {
1:d25c52c:                       for (Subscription s : destination.getConsumers()) {
1:d25c52c:                         if (s.getConsumerInfo().getConsumerId().equals(eldest.getValue())) {
1:5d697cf:                             s.getConsumerInfo().decrementAssignedGroupCount(destination.getActiveMQDestination());
1:d25c52c:                             break;
1:d25c52c:                           }
1:d25c52c:                       }
1:d25c52c:                   }
1:d25c52c:               }
1:d25c52c:               return remove;
1:d25c52c:           }
1:d25c52c:       };
1:cd4b229:       maximumCacheSize = size;
1:cd4b229:     }
1:468e697:     public synchronized void put(String groupId, ConsumerId consumerId) {
1:468e697:         cache.put(groupId, consumerId);
1:468e697:     }
1:468e697: 
1:468e697:     public synchronized ConsumerId get(String groupId) {
1:468e697:         return cache.get(groupId);
1:468e697:     }
1:468e697: 
1:468e697:     public synchronized ConsumerId removeGroup(String groupId) {
1:468e697:         return cache.remove(groupId);
1:468e697:     }
1:468e697: 
1:468e697:     public synchronized MessageGroupSet removeConsumer(ConsumerId consumerId) {
1:468e697:         SimpleMessageGroupSet ownedGroups = new SimpleMessageGroupSet();
1:468e697:         Map<String,ConsumerId> map = new HashMap<String, ConsumerId>();
1:468e697:         map.putAll(cache);
1:468e697:         for (Iterator<String> iter = map.keySet().iterator(); iter.hasNext();) {
1:468e697:             String group = iter.next();
1:468e697:             ConsumerId owner = map.get(group);
1:468e697:             if (owner.equals(consumerId)) {
1:468e697:                 ownedGroups.add(group);
1:468e697:             }
1:468e697:         }
1:468e697:         for (String group:ownedGroups.getUnderlyingSet()){
1:468e697:             cache.remove(group);
1:468e697:         }
1:468e697:         return ownedGroups;
1:468e697:     }
1:468e697: 
1:468e697: 
1:468e697:     @Override
1:468e697:     public synchronized void removeAll(){
1:468e697:         cache.clear();
1:d25c52c:         if (destination != null) {
1:d25c52c:             for (Subscription s : destination.getConsumers()) {
1:5d697cf:                 s.getConsumerInfo().clearAssignedGroupCount(destination.getActiveMQDestination());
1:d25c52c:             }
1:d25c52c:         }
1:468e697:     }
1:468e697: 
1:468e697:     @Override
1:468e697:     public synchronized Map<String, String> getGroups() {
1:468e697:         Map<String,String> result = new HashMap<String,String>();
1:468e697:         for (Map.Entry<String,ConsumerId>entry: cache.entrySet()){
1:468e697:             result.put(entry.getKey(),entry.getValue().toString());
1:468e697:         }
1:468e697:         return result;
1:468e697:     }
1:468e697: 
1:468e697:     @Override
1:468e697:     public String getType() {
1:468e697:         return "cached";
1:468e697:     }
1:468e697: 
1:cd4b229:     public int getMaximumCacheSize(){
1:cd4b229:         return maximumCacheSize;
1:cd4b229:     }
1:cd4b229: 
1:468e697:     public String toString() {
1:468e697:         return "message groups: " + cache.size();
1:468e697:     }
1:468e697: 
1:d25c52c:     public void setDestination(Destination destination) {
1:d25c52c:         this.destination = destination;
1:d25c52c:     }
1:468e697: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5d697cf
/////////////////////////////////////////////////////////////////////////
1:                             s.getConsumerInfo().decrementAssignedGroupCount(destination.getActiveMQDestination());
/////////////////////////////////////////////////////////////////////////
1:                 s.getConsumerInfo().clearAssignedGroupCount(destination.getActiveMQDestination());
commit:d25c52c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
1:     Destination destination;
1: 
1:       cache = new LRUMap<String, ConsumerId>(size) {
1:           @Override
1:           public boolean removeEldestEntry(final Map.Entry eldest) {
1:               boolean remove = super.removeEldestEntry(eldest);
1:               if (remove) {
1:                   if (destination != null) {
1:                       for (Subscription s : destination.getConsumers()) {
1:                         if (s.getConsumerInfo().getConsumerId().equals(eldest.getValue())) {
0:                             s.getConsumerInfo().decrementAssignedGroupCount();
1:                             break;
1:                           }
1:                       }
1:                   }
1:               }
1:               return remove;
1:           }
1:       };
/////////////////////////////////////////////////////////////////////////
1:         if (destination != null) {
1:             for (Subscription s : destination.getConsumers()) {
0:                 s.getConsumerInfo().clearAssignedGroupCount();
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public void setDestination(Destination destination) {
1:         this.destination = destination;
1:     }
author:rajdavies
-------------------------------------------------------------------------------
commit:cd4b229
/////////////////////////////////////////////////////////////////////////
1:     private final LRUMap<String, ConsumerId> cache;
1:     private final int maximumCacheSize;
1:     CachedMessageGroupMap(int size){
0:       cache = new LRUMap<String, ConsumerId>(size);
1:       maximumCacheSize = size;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public int getMaximumCacheSize(){
1:         return maximumCacheSize;
1:     }
1: 
commit:468e697
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.group;
1: 
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.Map;
1: 
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.memory.LRUMap;
1: 
1: /**
1:  * A simple implementation which tracks every individual GroupID value in a LRUCache
1:  * 
1:  * 
1:  */
1: public class CachedMessageGroupMap implements MessageGroupMap {
0:     private LRUMap<String, ConsumerId> cache = new LRUMap<String, ConsumerId>(1024);
1:     
1:     public synchronized void put(String groupId, ConsumerId consumerId) {
1:         cache.put(groupId, consumerId);
1:     }
1: 
1:     public synchronized ConsumerId get(String groupId) {
1:         return cache.get(groupId);
1:     }
1: 
1:     public synchronized ConsumerId removeGroup(String groupId) {
1:         return cache.remove(groupId);
1:     }
1: 
1:     public synchronized MessageGroupSet removeConsumer(ConsumerId consumerId) {
1:         SimpleMessageGroupSet ownedGroups = new SimpleMessageGroupSet();
1:         Map<String,ConsumerId> map = new HashMap<String, ConsumerId>();
1:         map.putAll(cache);
1:         for (Iterator<String> iter = map.keySet().iterator(); iter.hasNext();) {
1:             String group = iter.next();
1:             ConsumerId owner = map.get(group);
1:             if (owner.equals(consumerId)) {
1:                 ownedGroups.add(group);
1:             }
1:         }
1:         for (String group:ownedGroups.getUnderlyingSet()){
1:             cache.remove(group);
1:         }
1:         return ownedGroups;
1:     }
1: 
1: 
1:     @Override
1:     public synchronized void removeAll(){
1:         cache.clear();
1:     }
1: 
1:     @Override
1:     public synchronized Map<String, String> getGroups() {
1:         Map<String,String> result = new HashMap<String,String>();
1:         for (Map.Entry<String,ConsumerId>entry: cache.entrySet()){
1:             result.put(entry.getKey(),entry.getValue().toString());
1:         }
1:         return result;
1:     }
1: 
1:     @Override
1:     public String getType() {
1:         return "cached";
1:     }
1: 
1:     public String toString() {
1:         return "message groups: " + cache.size();
1:     }
1: 
1: }
============================================================================