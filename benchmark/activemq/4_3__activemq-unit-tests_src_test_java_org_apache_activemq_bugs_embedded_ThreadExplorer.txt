1:630184a: /**
1:630184a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:630184a:  * contributor license agreements.  See the NOTICE file distributed with
1:630184a:  * this work for additional information regarding copyright ownership.
1:630184a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:630184a:  * (the "License"); you may not use this file except in compliance with
1:630184a:  * the License.  You may obtain a copy of the License at
1:630184a:  *
1:630184a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:630184a:  *
1:630184a:  * Unless required by applicable law or agreed to in writing, software
1:630184a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:630184a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:630184a:  * See the License for the specific language governing permissions and
1:630184a:  * limitations under the License.
1:630184a:  */
1:630184a: package org.apache.activemq.bugs.embedded;
1:630184a: 
1:630184a: import java.util.regex.Matcher;
1:630184a: import java.util.regex.Pattern;
1:630184a: import org.apache.log4j.Logger;
1:630184a: 
1:630184a: public class ThreadExplorer
1:630184a: {
1:630184a:     static Logger logger = Logger.getLogger(ThreadExplorer.class);
1:630184a: 
1:630184a:     public static Thread[] listThreads()
1:630184a:     {
1:630184a: 
1:630184a:         int nThreads = Thread.activeCount();
1:630184a:         Thread ret[] = new Thread[nThreads];
1:630184a: 
1:630184a:         Thread.enumerate(ret);
1:630184a: 
1:630184a:         return ret;
1:630184a: 
1:630184a:     }
1:630184a: 
1:630184a:     /**
1:630184a:      * Helper function to access a thread per name (ignoring case)
1:630184a:      * 
1:630184a:      * @param name
1:630184a:      * @return
1:630184a:      */
1:630184a:     public static Thread fetchThread(String name)
1:630184a:     {
1:630184a:         Thread[] threadArray = listThreads();
1:630184a:         // for (Thread t : threadArray)
1:630184a:         for (int i = 0; i < threadArray.length; i++)
1:630184a:         {
1:630184a:             Thread t = threadArray[i];
1:630184a:             if (t.getName().equalsIgnoreCase(name))
1:630184a:                 return t;
1:630184a:         }
1:630184a:         return null;
1:630184a:     }
1:630184a: 
1:630184a:     /**
1:630184a:      * Allow for killing threads
1:630184a:      * 
1:630184a:      * @param threadName
1:630184a:      * @param isStarredExp
1:630184a:      *            (regular expressions with *)
1:630184a:      */
1:e1389a6:     @SuppressWarnings("deprecation")
1:630184a:     public static int kill(String threadName, boolean isStarredExp, String motivation)
1:630184a:     {
1:630184a:         String me = "ThreadExplorer.kill: ";
1:630184a:         if (logger.isDebugEnabled())
1:630184a:         {
1:630184a:             logger.debug("Entering " + me + " with " + threadName + " isStarred: " + isStarredExp);
1:630184a:         }
1:630184a:         int ret = 0;
1:630184a:         Pattern mypattern = null;
1:630184a:         if (isStarredExp)
1:630184a:         {
1:630184a:             String realreg = threadName.toLowerCase().replaceAll("\\*", "\\.\\*");
1:630184a:             mypattern = Pattern.compile(realreg);
1:630184a: 
1:630184a:         }
1:630184a:         Thread[] threads = listThreads();
1:630184a:         for (int i = 0; i < threads.length; i++)
1:630184a:         {
1:630184a:             Thread thread = threads[i];
1:630184a:             if (thread == null)
1:630184a:                 continue;
1:630184a:             // kill the thread unless it is not current thread
1:630184a:             boolean matches = false;
1:630184a: 
1:630184a:             if (isStarredExp)
1:630184a:             {
1:630184a:                 Matcher matcher = mypattern.matcher(thread.getName().toLowerCase());
1:630184a:                 matches = matcher.matches();
1:630184a:             }
1:630184a:             else
1:630184a:             {
1:630184a:                 matches = (thread.getName().equalsIgnoreCase(threadName));
1:630184a:             }
1:630184a:             if (matches && (Thread.currentThread() != thread) && !thread.getName().equals("main"))
1:630184a:             {
1:630184a:                 if (logger.isInfoEnabled())
1:630184a:                     logger.info("Killing thread named [" + thread.getName() + "]"); // , removing its uncaught
1:630184a:                 // exception handler to
1:630184a:                 // avoid ThreadDeath
1:630184a:                 // exception tracing
1:630184a:                 // "+motivation );
1:630184a: 
1:630184a:                 ret++;
1:630184a: 
1:630184a:                 // PK leaving uncaught exception handler otherwise master push
1:630184a:                 // cannot recover from this error
1:630184a:                 // thread.setUncaughtExceptionHandler(null);
1:630184a:                 try
1:630184a:                 {
1:630184a:                     thread.stop();
1:630184a:                 }
1:630184a:                 catch (ThreadDeath e)
1:630184a:                 {
1:630184a:                     logger.warn("Thread already death.", e);
1:630184a:                 }
1:630184a: 
1:630184a:             }
1:630184a:         }
1:630184a:         return ret;
1:630184a:     }
1:630184a: 
1:630184a:     public static String show(String title)
1:630184a:     {
1:630184a:         StringBuffer out = new StringBuffer();
1:630184a:         Thread[] threadArray = ThreadExplorer.listThreads();
1:630184a: 
1:630184a:         out.append(title + "\n");
1:630184a:         for (int i = 0; i < threadArray.length; i++)
1:630184a:         {
1:630184a:             Thread thread = threadArray[i];
1:630184a: 
1:630184a:             if (thread != null)
1:630184a:             {
1:630184a:                 out.append("* [" + thread.getName() + "] " + (thread.isDaemon() ? "(Daemon)" : "")
1:729766e:                         + " Group: " + (thread.getThreadGroup() != null ? thread.getThreadGroup().getName() : "") + "\n");
1:630184a:             }
1:630184a:             else
1:630184a:             {
1:630184a:                 out.append("* ThreadDeath: " + thread + "\n");
1:630184a:             }
1:630184a: 
1:630184a:         }
1:630184a:         return out.toString();
1:630184a:     }
1:630184a: 
1:630184a:     public static int active()
1:630184a:     {
1:630184a:         int count = 0;
1:630184a:         Thread[] threadArray = ThreadExplorer.listThreads();
1:630184a: 
1:630184a:         for (int i = 0; i < threadArray.length; i++)
1:630184a:         {
1:630184a:             Thread thread = threadArray[i];
1:630184a:             if (thread != null)
1:630184a:             {
1:630184a:                 count++;
1:630184a:             }
1:630184a:         }
1:630184a: 
1:630184a:         return count;
1:630184a:     }
1:630184a: 
1:630184a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:729766e
/////////////////////////////////////////////////////////////////////////
1:                         + " Group: " + (thread.getThreadGroup() != null ? thread.getThreadGroup().getName() : "") + "\n");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:e1389a6
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("deprecation")
author:Robert Davies
-------------------------------------------------------------------------------
commit:630184a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs.embedded;
1: 
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: import org.apache.log4j.Logger;
1: 
1: public class ThreadExplorer
1: {
1:     static Logger logger = Logger.getLogger(ThreadExplorer.class);
1: 
1:     public static Thread[] listThreads()
1:     {
1: 
1:         int nThreads = Thread.activeCount();
1:         Thread ret[] = new Thread[nThreads];
1: 
1:         Thread.enumerate(ret);
1: 
1:         return ret;
1: 
1:     }
1: 
1:     /**
1:      * Helper function to access a thread per name (ignoring case)
1:      * 
1:      * @param name
1:      * @return
1:      */
1:     public static Thread fetchThread(String name)
1:     {
1:         Thread[] threadArray = listThreads();
1:         // for (Thread t : threadArray)
1:         for (int i = 0; i < threadArray.length; i++)
1:         {
1:             Thread t = threadArray[i];
1:             if (t.getName().equalsIgnoreCase(name))
1:                 return t;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * Allow for killing threads
1:      * 
1:      * @param threadName
1:      * @param isStarredExp
1:      *            (regular expressions with *)
1:      */
1:     public static int kill(String threadName, boolean isStarredExp, String motivation)
1:     {
1:         String me = "ThreadExplorer.kill: ";
1:         if (logger.isDebugEnabled())
1:         {
1:             logger.debug("Entering " + me + " with " + threadName + " isStarred: " + isStarredExp);
1:         }
1:         int ret = 0;
1:         Pattern mypattern = null;
1:         if (isStarredExp)
1:         {
1:             String realreg = threadName.toLowerCase().replaceAll("\\*", "\\.\\*");
1:             mypattern = Pattern.compile(realreg);
1: 
1:         }
1:         Thread[] threads = listThreads();
1:         for (int i = 0; i < threads.length; i++)
1:         {
1:             Thread thread = threads[i];
1:             if (thread == null)
1:                 continue;
1:             // kill the thread unless it is not current thread
1:             boolean matches = false;
1: 
1:             if (isStarredExp)
1:             {
1:                 Matcher matcher = mypattern.matcher(thread.getName().toLowerCase());
1:                 matches = matcher.matches();
1:             }
1:             else
1:             {
1:                 matches = (thread.getName().equalsIgnoreCase(threadName));
1:             }
1:             if (matches && (Thread.currentThread() != thread) && !thread.getName().equals("main"))
1:             {
1:                 if (logger.isInfoEnabled())
1:                     logger.info("Killing thread named [" + thread.getName() + "]"); // , removing its uncaught
1:                 // exception handler to
1:                 // avoid ThreadDeath
1:                 // exception tracing
1:                 // "+motivation );
1: 
1:                 ret++;
1: 
1:                 // PK leaving uncaught exception handler otherwise master push
1:                 // cannot recover from this error
1:                 // thread.setUncaughtExceptionHandler(null);
1:                 try
1:                 {
1:                     thread.stop();
1:                 }
1:                 catch (ThreadDeath e)
1:                 {
1:                     logger.warn("Thread already death.", e);
1:                 }
1: 
1:             }
1:         }
1:         return ret;
1:     }
1: 
1:     public static String show(String title)
1:     {
1:         StringBuffer out = new StringBuffer();
1:         Thread[] threadArray = ThreadExplorer.listThreads();
1: 
1:         out.append(title + "\n");
1:         for (int i = 0; i < threadArray.length; i++)
1:         {
1:             Thread thread = threadArray[i];
1: 
1:             if (thread != null)
1:             {
1:                 out.append("* [" + thread.getName() + "] " + (thread.isDaemon() ? "(Daemon)" : "")
0:                         + " Group: " + thread.getThreadGroup().getName() + "\n");
1:             }
1:             else
1:             {
1:                 out.append("* ThreadDeath: " + thread + "\n");
1:             }
1: 
1:         }
1:         return out.toString();
1:     }
1: 
1:     public static int active()
1:     {
1:         int count = 0;
1:         Thread[] threadArray = ThreadExplorer.listThreads();
1: 
1:         for (int i = 0; i < threadArray.length; i++)
1:         {
1:             Thread thread = threadArray[i];
1:             if (thread != null)
1:             {
1:                 count++;
1:             }
1:         }
1: 
1:         return count;
1:     }
1: 
1: }
============================================================================