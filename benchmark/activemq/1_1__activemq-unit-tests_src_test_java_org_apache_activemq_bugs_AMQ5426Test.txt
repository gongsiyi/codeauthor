1:c02bc64: /**
1:c02bc64:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c02bc64:  * contributor license agreements.  See the NOTICE file distributed with
1:c02bc64:  * this work for additional information regarding copyright ownership.
1:c02bc64:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c02bc64:  * (the "License"); you may not use this file except in compliance with
1:c02bc64:  * the License.  You may obtain a copy of the License at
1:c02bc64:  *
1:c02bc64:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c02bc64:  *
1:c02bc64:  * Unless required by applicable law or agreed to in writing, software
1:c02bc64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c02bc64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c02bc64:  * See the License for the specific language governing permissions and
1:c02bc64:  * limitations under the License.
1:c02bc64:  */
1:c02bc64: package org.apache.activemq.bugs;
1:c02bc64: 
1:c02bc64: import static org.junit.Assert.assertFalse;
1:c02bc64: 
1:c02bc64: import java.io.InterruptedIOException;
1:c02bc64: import java.net.URI;
1:c02bc64: import java.util.Random;
1:c02bc64: import java.util.concurrent.atomic.AtomicBoolean;
1:c02bc64: import java.util.concurrent.atomic.AtomicInteger;
1:c02bc64: 
1:c02bc64: import javax.jms.Connection;
1:c02bc64: import javax.jms.ConnectionFactory;
1:c02bc64: import javax.jms.DeliveryMode;
1:c02bc64: import javax.jms.JMSException;
1:c02bc64: import javax.jms.Message;
1:c02bc64: import javax.jms.MessageConsumer;
1:c02bc64: import javax.jms.MessageListener;
1:c02bc64: import javax.jms.MessageProducer;
1:c02bc64: import javax.jms.Session;
1:c02bc64: import javax.jms.TextMessage;
1:c02bc64: import javax.jms.Topic;
1:c02bc64: 
1:c02bc64: import org.apache.activemq.ActiveMQConnectionFactory;
1:c02bc64: import org.apache.activemq.broker.BrokerFactory;
1:c02bc64: import org.apache.activemq.broker.BrokerService;
1:c02bc64: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:c02bc64: import org.apache.activemq.broker.region.policy.PolicyMap;
1:c02bc64: import org.apache.log4j.Appender;
1:c02bc64: import org.apache.log4j.AppenderSkeleton;
1:c02bc64: import org.apache.log4j.Level;
1:c02bc64: import org.apache.log4j.spi.LoggingEvent;
1:c02bc64: import org.junit.After;
1:c02bc64: import org.junit.Before;
1:c02bc64: import org.junit.Test;
1:c02bc64: import org.slf4j.Logger;
1:c02bc64: import org.slf4j.LoggerFactory;
1:c02bc64: 
1:c02bc64: public class AMQ5426Test {
1:c02bc64: 
1:c02bc64: 	private static final Logger LOG = LoggerFactory
1:c02bc64: 			.getLogger(AMQ5426Test.class);
1:c02bc64: 
1:c02bc64: 	private BrokerService brokerService;
1:c02bc64: 	private String connectionUri;
1:c02bc64: 	private AtomicBoolean hasFailureInProducer = new AtomicBoolean(false);
1:c02bc64: 	private Thread producerThread;
1:c02bc64: 	private AtomicBoolean hasErrorInLogger;
1:c02bc64: 	private Appender errorDetectorAppender;
1:c02bc64: 
1:c02bc64: 	protected ConnectionFactory createConnectionFactory() throws Exception {
1:c02bc64: 		ActiveMQConnectionFactory conFactory = new ActiveMQConnectionFactory(
1:c02bc64: 				connectionUri);
1:c02bc64: 		conFactory.setWatchTopicAdvisories(false);
1:c02bc64: 		conFactory.setOptimizeAcknowledge(true);
1:c02bc64: 		return conFactory;
1:c02bc64: 	}
1:c02bc64: 
1:c02bc64: 	@Before
1:c02bc64: 	public void setUp() throws Exception {
1:c02bc64: 		hasFailureInProducer = new AtomicBoolean(false);
1:c02bc64: 		hasErrorInLogger = new AtomicBoolean(false);
1:c02bc64: 		brokerService = BrokerFactory.createBroker(new URI(
1:c02bc64: 				"broker://()/localhost?persistent=false&useJmx=true"));
1:c02bc64: 
1:c02bc64: 		PolicyEntry policy = new PolicyEntry();
1:c02bc64: 		policy.setTopicPrefetch(100);
1:c02bc64: 		PolicyMap pMap = new PolicyMap();
1:c02bc64: 		pMap.setDefaultEntry(policy);
1:c02bc64: 		brokerService.addConnector("tcp://0.0.0.0:0");
1:c02bc64: 		brokerService.start();
1:c02bc64: 		connectionUri = brokerService.getTransportConnectorByScheme("tcp")
1:c02bc64: 				.getPublishableConnectString();
1:c02bc64: 
1:c02bc64: 		// Register an error listener to LOG4J
1:c02bc64: 		// The NPE will not be detectable as of V5.10 from
1:c02bc64: 		// ActiveMQConnection.setClientInternalExceptionListener
1:c02bc64: 		// since ActiveMQMessageConsumer.dispatch will silently catch and
1:c02bc64: 		// discard any RuntimeException
1:c02bc64: 		errorDetectorAppender = new AppenderSkeleton() {
1:c02bc64: 			@Override
1:c02bc64: 			public void close() {
1:c02bc64: 				// Do nothing
1:c02bc64: 			}
1:c02bc64: 
1:c02bc64: 			@Override
1:c02bc64: 			public boolean requiresLayout() {
1:c02bc64: 				return false;
1:c02bc64: 			}
1:c02bc64: 
1:c02bc64: 			@Override
1:c02bc64: 			protected void append(LoggingEvent event) {
1:c02bc64: 				if (event.getLevel().isGreaterOrEqual(Level.ERROR))
1:c02bc64: 					hasErrorInLogger.set(true);
1:c02bc64: 			}
1:c02bc64: 		};
1:c02bc64: 
1:c02bc64: 		org.apache.log4j.Logger.getRootLogger().addAppender(errorDetectorAppender);
1:c02bc64: 		producerThread = new Thread(new Runnable() {
1:c02bc64: 			@Override
1:c02bc64: 			public void run() {
1:c02bc64: 				try {
1:c02bc64: 					Connection connection = createConnectionFactory()
1:c02bc64: 							.createConnection();
1:c02bc64: 					connection.start();
1:c02bc64: 					Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c02bc64: 					Topic destination = session.createTopic("test.AMQ5426");
1:c02bc64: 					LOG.debug("Created topic: {}", destination);
1:c02bc64: 					MessageProducer producer = session.createProducer(destination);
1:c02bc64: 					producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:c02bc64: 					producer.setTimeToLive(1000);
1:c02bc64: 					LOG.debug("Created producer: {}", producer);
1:c02bc64: 
1:c02bc64: 					int i = 1;
1:c02bc64: 					while (!Thread.interrupted()) {
1:c02bc64: 						try {
1:c02bc64: 							TextMessage msg = session.createTextMessage(" testMessage " + i);
1:c02bc64: 							producer.send(msg);
1:c02bc64: 							try {
1:c02bc64: 								// Sleep for some nano seconds
1:c02bc64: 								Thread.sleep(0, 100);
1:c02bc64: 							} catch (InterruptedException e) {
1:c02bc64: 								// Restore the interrupt
1:c02bc64: 								Thread.currentThread().interrupt();
1:c02bc64: 							}
1:c02bc64: 							LOG.debug("message sent: {}", i);
1:c02bc64: 							i++;
1:c02bc64: 						} catch (JMSException e) {
1:c02bc64: 							// Sometimes, we will gt a JMSException with nested
1:c02bc64: 							// InterruptedIOException when we interrupt the thread
1:c02bc64: 							if (!(e.getCause() != null && e.getCause() instanceof InterruptedIOException)) {
1:c02bc64: 								throw e;
1:c02bc64: 							}
1:c02bc64: 						}
1:c02bc64: 					}
1:c02bc64: 
1:c02bc64: 					producer.close();
1:c02bc64: 					session.close();
1:c02bc64: 					connection.close();
1:c02bc64: 				} catch (Exception e) {
1:c02bc64: 					LOG.error(e.getMessage(), e);
1:c02bc64: 					hasFailureInProducer.set(true);
1:c02bc64: 				}
1:c02bc64: 			}
1:c02bc64: 		});
1:c02bc64: 
1:c02bc64: 		producerThread.start();
1:c02bc64: 	}
1:c02bc64: 
1:c02bc64: 	@Test(timeout = 2 * 60 * 1000)
1:c02bc64: 	public void testConsumerProperlyClosedWithoutError() throws Exception {
1:c02bc64: 		Random rn = new Random();
1:c02bc64: 
1:c02bc64: 		final int NUMBER_OF_RUNS = 1000;
1:c02bc64: 
1:c02bc64: 		for (int run = 0; run < NUMBER_OF_RUNS; run++) {
1:c02bc64: 			final AtomicInteger numberOfMessagesReceived = new AtomicInteger(0);
1:c02bc64: 			LOG.info("Starting run {} of {}", run, NUMBER_OF_RUNS);
1:c02bc64: 
1:c02bc64: 			// Starts a consumer
1:c02bc64: 			Connection connection = createConnectionFactory().createConnection();
1:c02bc64: 			connection.start();
1:c02bc64: 
1:c02bc64: 			Session session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:c02bc64: 			Topic destination = session.createTopic("test.AMQ5426");
1:c02bc64: 
1:c02bc64: 			LOG.debug("Created topic: {}", destination);
1:c02bc64: 			MessageConsumer consumer = session.createConsumer(destination);
1:c02bc64: 			consumer.setMessageListener(new MessageListener() {
1:c02bc64: 
1:c02bc64: 				@Override
1:c02bc64: 				public void onMessage(Message message) {
1:c02bc64: 					LOG.debug("Received message");
1:c02bc64: 					numberOfMessagesReceived.getAndIncrement();
1:c02bc64: 				}
1:c02bc64: 			});
1:c02bc64: 			LOG.debug("Created consumer: {}", consumer);
1:c02bc64: 
1:c02bc64: 			try {
1:c02bc64: 				// Sleep for a random time
1:c02bc64: 				Thread.sleep(rn.nextInt(5) + 1);
1:c02bc64: 			} catch (InterruptedException e) {
1:c02bc64: 				// Restore the interrupt
1:c02bc64: 				Thread.currentThread().interrupt();
1:c02bc64: 			}
1:c02bc64: 
1:c02bc64: 			// Close the consumer
1:c02bc64: 			LOG.debug("Closing consumer");
1:c02bc64: 			consumer.close();
1:c02bc64: 			session.close();
1:c02bc64: 			connection.close();
1:c02bc64: 
1:c02bc64: 			assertFalse("Exception in Producer Thread", hasFailureInProducer.get());
1:c02bc64: 			assertFalse("Error detected in Logger", hasErrorInLogger.get());
1:c02bc64: 			LOG.info("Run {} of {} completed, message received: {}", run,
1:c02bc64: 					NUMBER_OF_RUNS, numberOfMessagesReceived.get());
1:c02bc64: 		}
1:c02bc64: 	}
1:c02bc64: 
1:c02bc64: 	@After
1:c02bc64: 	public void tearDown() throws Exception {
1:c02bc64: 		// Interrupt the producer thread
1:c02bc64: 		LOG.info("Shutdown producer thread");
1:c02bc64: 		producerThread.interrupt();
1:c02bc64: 		producerThread.join();
1:c02bc64: 		brokerService.stop();
1:c02bc64: 		brokerService.waitUntilStopped();
1:c02bc64: 
1:c02bc64: 		assertFalse("Exception in Producer Thread", hasFailureInProducer.get());
1:c02bc64: 		assertFalse("Error detected in Logger", hasErrorInLogger.get());
1:c02bc64: 	}
1:c02bc64: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:c02bc64
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertFalse;
1: 
1: import java.io.InterruptedIOException;
1: import java.net.URI;
1: import java.util.Random;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.AppenderSkeleton;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ5426Test {
1: 
1: 	private static final Logger LOG = LoggerFactory
1: 			.getLogger(AMQ5426Test.class);
1: 
1: 	private BrokerService brokerService;
1: 	private String connectionUri;
1: 	private AtomicBoolean hasFailureInProducer = new AtomicBoolean(false);
1: 	private Thread producerThread;
1: 	private AtomicBoolean hasErrorInLogger;
1: 	private Appender errorDetectorAppender;
1: 
1: 	protected ConnectionFactory createConnectionFactory() throws Exception {
1: 		ActiveMQConnectionFactory conFactory = new ActiveMQConnectionFactory(
1: 				connectionUri);
1: 		conFactory.setWatchTopicAdvisories(false);
1: 		conFactory.setOptimizeAcknowledge(true);
1: 		return conFactory;
1: 	}
1: 
1: 	@Before
1: 	public void setUp() throws Exception {
1: 		hasFailureInProducer = new AtomicBoolean(false);
1: 		hasErrorInLogger = new AtomicBoolean(false);
1: 		brokerService = BrokerFactory.createBroker(new URI(
1: 				"broker://()/localhost?persistent=false&useJmx=true"));
1: 
1: 		PolicyEntry policy = new PolicyEntry();
1: 		policy.setTopicPrefetch(100);
1: 		PolicyMap pMap = new PolicyMap();
1: 		pMap.setDefaultEntry(policy);
1: 		brokerService.addConnector("tcp://0.0.0.0:0");
1: 		brokerService.start();
1: 		connectionUri = brokerService.getTransportConnectorByScheme("tcp")
1: 				.getPublishableConnectString();
1: 
1: 		// Register an error listener to LOG4J
1: 		// The NPE will not be detectable as of V5.10 from
1: 		// ActiveMQConnection.setClientInternalExceptionListener
1: 		// since ActiveMQMessageConsumer.dispatch will silently catch and
1: 		// discard any RuntimeException
1: 		errorDetectorAppender = new AppenderSkeleton() {
1: 			@Override
1: 			public void close() {
1: 				// Do nothing
1: 			}
1: 
1: 			@Override
1: 			public boolean requiresLayout() {
1: 				return false;
1: 			}
1: 
1: 			@Override
1: 			protected void append(LoggingEvent event) {
1: 				if (event.getLevel().isGreaterOrEqual(Level.ERROR))
1: 					hasErrorInLogger.set(true);
1: 			}
1: 		};
1: 
1: 		org.apache.log4j.Logger.getRootLogger().addAppender(errorDetectorAppender);
1: 		producerThread = new Thread(new Runnable() {
1: 			@Override
1: 			public void run() {
1: 				try {
1: 					Connection connection = createConnectionFactory()
1: 							.createConnection();
1: 					connection.start();
1: 					Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 					Topic destination = session.createTopic("test.AMQ5426");
1: 					LOG.debug("Created topic: {}", destination);
1: 					MessageProducer producer = session.createProducer(destination);
1: 					producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 					producer.setTimeToLive(1000);
1: 					LOG.debug("Created producer: {}", producer);
1: 
1: 					int i = 1;
1: 					while (!Thread.interrupted()) {
1: 						try {
1: 							TextMessage msg = session.createTextMessage(" testMessage " + i);
1: 							producer.send(msg);
1: 							try {
1: 								// Sleep for some nano seconds
1: 								Thread.sleep(0, 100);
1: 							} catch (InterruptedException e) {
1: 								// Restore the interrupt
1: 								Thread.currentThread().interrupt();
1: 							}
1: 							LOG.debug("message sent: {}", i);
1: 							i++;
1: 						} catch (JMSException e) {
1: 							// Sometimes, we will gt a JMSException with nested
1: 							// InterruptedIOException when we interrupt the thread
1: 							if (!(e.getCause() != null && e.getCause() instanceof InterruptedIOException)) {
1: 								throw e;
1: 							}
1: 						}
1: 					}
1: 
1: 					producer.close();
1: 					session.close();
1: 					connection.close();
1: 				} catch (Exception e) {
1: 					LOG.error(e.getMessage(), e);
1: 					hasFailureInProducer.set(true);
1: 				}
1: 			}
1: 		});
1: 
1: 		producerThread.start();
1: 	}
1: 
1: 	@Test(timeout = 2 * 60 * 1000)
1: 	public void testConsumerProperlyClosedWithoutError() throws Exception {
1: 		Random rn = new Random();
1: 
1: 		final int NUMBER_OF_RUNS = 1000;
1: 
1: 		for (int run = 0; run < NUMBER_OF_RUNS; run++) {
1: 			final AtomicInteger numberOfMessagesReceived = new AtomicInteger(0);
1: 			LOG.info("Starting run {} of {}", run, NUMBER_OF_RUNS);
1: 
1: 			// Starts a consumer
1: 			Connection connection = createConnectionFactory().createConnection();
1: 			connection.start();
1: 
1: 			Session session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1: 			Topic destination = session.createTopic("test.AMQ5426");
1: 
1: 			LOG.debug("Created topic: {}", destination);
1: 			MessageConsumer consumer = session.createConsumer(destination);
1: 			consumer.setMessageListener(new MessageListener() {
1: 
1: 				@Override
1: 				public void onMessage(Message message) {
1: 					LOG.debug("Received message");
1: 					numberOfMessagesReceived.getAndIncrement();
1: 				}
1: 			});
1: 			LOG.debug("Created consumer: {}", consumer);
1: 
1: 			try {
1: 				// Sleep for a random time
1: 				Thread.sleep(rn.nextInt(5) + 1);
1: 			} catch (InterruptedException e) {
1: 				// Restore the interrupt
1: 				Thread.currentThread().interrupt();
1: 			}
1: 
1: 			// Close the consumer
1: 			LOG.debug("Closing consumer");
1: 			consumer.close();
1: 			session.close();
1: 			connection.close();
1: 
1: 			assertFalse("Exception in Producer Thread", hasFailureInProducer.get());
1: 			assertFalse("Error detected in Logger", hasErrorInLogger.get());
1: 			LOG.info("Run {} of {} completed, message received: {}", run,
1: 					NUMBER_OF_RUNS, numberOfMessagesReceived.get());
1: 		}
1: 	}
1: 
1: 	@After
1: 	public void tearDown() throws Exception {
1: 		// Interrupt the producer thread
1: 		LOG.info("Shutdown producer thread");
1: 		producerThread.interrupt();
1: 		producerThread.join();
1: 		brokerService.stop();
1: 		brokerService.waitUntilStopped();
1: 
1: 		assertFalse("Exception in Producer Thread", hasFailureInProducer.get());
1: 		assertFalse("Error detected in Logger", hasErrorInLogger.get());
1: 	}
1: }
commit:3856c39
/////////////////////////////////////////////////////////////////////////
commit:6bfa13b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.bugs;
0: 
0: import static org.junit.Assert.assertFalse;
0: 
0: import java.io.InterruptedIOException;
0: import java.net.URI;
0: import java.util.Random;
0: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.atomic.AtomicInteger;
0: 
0: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
0: import javax.jms.DeliveryMode;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import javax.jms.Topic;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.log4j.Appender;
0: import org.apache.log4j.AppenderSkeleton;
0: import org.apache.log4j.Level;
0: import org.apache.log4j.spi.LoggingEvent;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: public class AMQ5426Test {
0: 
0: 	private static final Logger LOG = LoggerFactory
0: 			.getLogger(AMQ5426Test.class);
0: 
0: 	private BrokerService brokerService;
0: 	private String connectionUri;
0: 	private AtomicBoolean hasFailureInProducer = new AtomicBoolean(false);
0: 	private Thread producerThread;
0: 	private AtomicBoolean hasErrorInLogger;
0: 	private Appender errorDetectorAppender;
0: 
0: 	protected ConnectionFactory createConnectionFactory() throws Exception {
0: 		ActiveMQConnectionFactory conFactory = new ActiveMQConnectionFactory(
0: 				connectionUri);
0: 		conFactory.setWatchTopicAdvisories(false);
0: 		conFactory.setOptimizeAcknowledge(true);
0: 		return conFactory;
0: 	}
0: 
0: 	@Before
0: 	public void setUp() throws Exception {
0: 		hasFailureInProducer = new AtomicBoolean(false);
0: 		hasErrorInLogger = new AtomicBoolean(false);
0: 		brokerService = BrokerFactory.createBroker(new URI(
0: 				"broker://()/localhost?persistent=false&useJmx=true"));
0: 
0: 		PolicyEntry policy = new PolicyEntry();
0: 		policy.setTopicPrefetch(100);
0: 		PolicyMap pMap = new PolicyMap();
0: 		pMap.setDefaultEntry(policy);
0: 		brokerService.addConnector("tcp://0.0.0.0:0");
0: 		brokerService.start();
0: 		connectionUri = brokerService.getTransportConnectorByScheme("tcp")
0: 				.getPublishableConnectString();
0: 
0: 		// Register an error listener to LOG4J
0: 		// The NPE will not be detectable as of V5.10 from
0: 		// ActiveMQConnection.setClientInternalExceptionListener
0: 		// since ActiveMQMessageConsumer.dispatch will silently catch and
0: 		// discard any RuntimeException
0: 		errorDetectorAppender = new AppenderSkeleton() {
0: 			@Override
0: 			public void close() {
0: 				// Do nothing
0: 			}
0: 
0: 			@Override
0: 			public boolean requiresLayout() {
0: 				return false;
0: 			}
0: 
0: 			@Override
0: 			protected void append(LoggingEvent event) {
0: 				if (event.getLevel().isGreaterOrEqual(Level.ERROR))
0: 					hasErrorInLogger.set(true);
0: 			}
0: 		};
0: 
0: 		org.apache.log4j.Logger.getRootLogger().addAppender(errorDetectorAppender);
0: 		producerThread = new Thread(new Runnable() {
0: 			@Override
0: 			public void run() {
0: 				try {
0: 					Connection connection = createConnectionFactory()
0: 							.createConnection();
0: 					connection.start();
0: 					Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 					Topic destination = session.createTopic("test.AMQ5426");
0: 					LOG.debug("Created topic: {}", destination);
0: 					MessageProducer producer = session.createProducer(destination);
0: 					producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
0: 					producer.setTimeToLive(1000);
0: 					LOG.debug("Created producer: {}", producer);
0: 
0: 					int i = 1;
0: 					while (!Thread.interrupted()) {
0: 						try {
0: 							TextMessage msg = session.createTextMessage(" testMessage " + i);
0: 							producer.send(msg);
0: 							try {
0: 								// Sleep for some nano seconds
0: 								Thread.sleep(0, 100);
0: 							} catch (InterruptedException e) {
0: 								// Restore the interrupt
0: 								Thread.currentThread().interrupt();
0: 							}
0: 							LOG.debug("message sent: {}", i);
0: 							i++;
0: 						} catch (JMSException e) {
0: 							// Sometimes, we will gt a JMSException with nested
0: 							// InterruptedIOException when we interrupt the thread
0: 							if (!(e.getCause() != null && e.getCause() instanceof InterruptedIOException)) {
0: 								throw e;
0: 							}
0: 						}
0: 					}
0: 
0: 					producer.close();
0: 					session.close();
0: 					connection.close();
0: 				} catch (Exception e) {
0: 					LOG.error(e.getMessage(), e);
0: 					hasFailureInProducer.set(true);
0: 				}
0: 			}
0: 		});
0: 
0: 		producerThread.start();
0: 	}
0: 
0: 	@Test(timeout = 2 * 60 * 1000)
0: 	public void testConsumerProperlyClosedWithoutError() throws Exception {
0: 		Random rn = new Random();
0: 
0: 		final int NUMBER_OF_RUNS = 1000;
0: 
0: 		for (int run = 0; run < NUMBER_OF_RUNS; run++) {
0: 			final AtomicInteger numberOfMessagesReceived = new AtomicInteger(0);
0: 			LOG.info("Starting run {} of {}", run, NUMBER_OF_RUNS);
0: 
0: 			// Starts a consumer
0: 			Connection connection = createConnectionFactory().createConnection();
0: 			connection.start();
0: 
0: 			Session session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
0: 			Topic destination = session.createTopic("test.AMQ5426");
0: 
0: 			LOG.debug("Created topic: {}", destination);
0: 			MessageConsumer consumer = session.createConsumer(destination);
0: 			consumer.setMessageListener(new MessageListener() {
0: 
0: 				@Override
0: 				public void onMessage(Message message) {
0: 					LOG.debug("Received message");
0: 					numberOfMessagesReceived.getAndIncrement();
0: 				}
0: 			});
0: 			LOG.debug("Created consumer: {}", consumer);
0: 
0: 			try {
0: 				// Sleep for a random time
0: 				Thread.sleep(rn.nextInt(5) + 1);
0: 			} catch (InterruptedException e) {
0: 				// Restore the interrupt
0: 				Thread.currentThread().interrupt();
0: 			}
0: 
0: 			// Close the consumer
0: 			LOG.debug("Closing consumer");
0: 			consumer.close();
0: 			session.close();
0: 			connection.close();
0: 
0: 			assertFalse("Exception in Producer Thread", hasFailureInProducer.get());
0: 			assertFalse("Error detected in Logger", hasErrorInLogger.get());
0: 			LOG.info("Run {} of {} completed, message received: {}", run,
0: 					NUMBER_OF_RUNS, numberOfMessagesReceived.get());
0: 		}
0: 	}
0: 
0: 	@After
0: 	public void tearDown() throws Exception {
0: 		// Interrupt the producer thread
0: 		LOG.info("Shutdown producer thread");
0: 		producerThread.interrupt();
0: 		producerThread.join();
0: 		brokerService.stop();
0: 		brokerService.waitUntilStopped();
0: 
0: 		assertFalse("Exception in Producer Thread", hasFailureInProducer.get());
0: 		assertFalse("Error detected in Logger", hasErrorInLogger.get());
0: 	}
0: }
============================================================================