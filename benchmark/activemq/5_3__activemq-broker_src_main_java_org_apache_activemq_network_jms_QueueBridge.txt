1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network.jms;
13:d29ca2a: 
1:ef0127d: import javax.jms.Connection;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.QueueConnection;
1:d29ca2a: import javax.jms.QueueSender;
1:d29ca2a: import javax.jms.QueueSession;
1:d29ca2a: import javax.jms.Session;
1:f812e34: 
1:d29ca2a: /**
1:bc78238:  * A Destination bridge is used to bridge Queues between to different JMS systems
1:d29ca2a:  */
1:f812e34: class QueueBridge extends DestinationBridge {
1:d29ca2a:     protected Queue consumerQueue;
1:d29ca2a:     protected Queue producerQueue;
1:d29ca2a:     protected QueueSession consumerSession;
1:d29ca2a:     protected QueueSession producerSession;
1:f812e34: 
1:d29ca2a:     protected String selector;
1:d29ca2a:     protected QueueSender producer;
1:d29ca2a:     protected QueueConnection consumerConnection;
1:d29ca2a:     protected QueueConnection producerConnection;
1:d29ca2a: 
1:f812e34:     public void stop() throws Exception {
1:d29ca2a:         super.stop();
1:f812e34:         if (consumerSession != null) {
1:d29ca2a:             consumerSession.close();
1:d29ca2a:         }
1:f812e34:         if (producerSession != null) {
1:d29ca2a:             producerSession.close();
1:86cbdfd:         }
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     protected MessageConsumer createConsumer() throws JMSException {
1:d29ca2a:         // set up the consumer
1:bc78238:         if (consumerConnection == null) return null;
1:f812e34:         consumerSession = consumerConnection.createQueueSession(false, Session.CLIENT_ACKNOWLEDGE);
1:f812e34:         MessageConsumer consumer = null;
1:f812e34: 
1:f812e34:         if (selector != null && selector.length() > 0) {
1:f812e34:             consumer = consumerSession.createReceiver(consumerQueue, selector);
1:f812e34:         } else {
1:f812e34:             consumer = consumerSession.createReceiver(consumerQueue);
1:f812e34:         }
1:f812e34: 
1:bc78238:         consumer.setMessageListener(this);
1:d29ca2a: 
1:d29ca2a:         return consumer;
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     protected synchronized MessageProducer createProducer() throws JMSException {
1:bc78238:         if (producerConnection == null) return null;
1:f812e34:         producerSession = producerConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         producer = producerSession.createSender(null);
1:d29ca2a:         return producer;
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     protected synchronized void sendMessage(Message message) throws JMSException {
1:bc78238:         if (producer == null && createProducer() == null) {
1:bc78238:             throw new JMSException("Producer for remote queue not available.");
1:d29ca2a:         }
1:bc78238:         try {
1:f812e34:             producer.send(producerQueue, message);
1:bc78238:         } catch (JMSException e) {
1:bc78238:             producer = null;
1:bc78238:             throw e;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the consumerConnection.
1:d29ca2a:      */
1:f812e34:     public QueueConnection getConsumerConnection() {
1:d29ca2a:         return consumerConnection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param consumerConnection The consumerConnection to set.
1:d29ca2a:      */
1:f812e34:     public void setConsumerConnection(QueueConnection consumerConnection) {
1:f812e34:         this.consumerConnection = consumerConnection;
1:bc78238:         if (started.get()) {
1:bc78238:             try {
1:bc78238:                 createConsumer();
1:bc78238:             } catch(Exception e) {
1:bc78238:                 jmsConnector.handleConnectionFailure(getConnnectionForConsumer());
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the consumerQueue.
1:d29ca2a:      */
1:f812e34:     public Queue getConsumerQueue() {
1:d29ca2a:         return consumerQueue;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param consumerQueue The consumerQueue to set.
1:d29ca2a:      */
1:f812e34:     public void setConsumerQueue(Queue consumerQueue) {
1:f812e34:         this.consumerQueue = consumerQueue;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the producerConnection.
1:d29ca2a:      */
1:f812e34:     public QueueConnection getProducerConnection() {
1:d29ca2a:         return producerConnection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param producerConnection The producerConnection to set.
1:d29ca2a:      */
1:f812e34:     public void setProducerConnection(QueueConnection producerConnection) {
1:f812e34:         this.producerConnection = producerConnection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the producerQueue.
1:d29ca2a:      */
1:f812e34:     public Queue getProducerQueue() {
1:d29ca2a:         return producerQueue;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param producerQueue The producerQueue to set.
1:d29ca2a:      */
1:f812e34:     public void setProducerQueue(Queue producerQueue) {
1:f812e34:         this.producerQueue = producerQueue;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the selector.
1:d29ca2a:      */
1:f812e34:     public String getSelector() {
1:d29ca2a:         return selector;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @param selector The selector to set.
1:d29ca2a:      */
1:f812e34:     public void setSelector(String selector) {
1:f812e34:         this.selector = selector;
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     protected Connection getConnnectionForConsumer() {
1:ef0127d:         return getConsumerConnection();
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     protected Connection getConnectionForProducer() {
1:ef0127d:         return getProducerConnection();
1:bc78238:     }
2:bc78238: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: class QueueBridge extends DestinationBridge {
1: 
1:     public void stop() throws Exception {
1:         if (consumerSession != null) {
1:         if (producerSession != null) {
1:     protected MessageConsumer createConsumer() throws JMSException {
1:         consumerSession = consumerConnection.createQueueSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = null;
1: 
1:         if (selector != null && selector.length() > 0) {
1:             consumer = consumerSession.createReceiver(consumerQueue, selector);
1:         } else {
1:             consumer = consumerSession.createReceiver(consumerQueue);
1:         }
1: 
1: 
1:     protected synchronized MessageProducer createProducer() throws JMSException {
1:         producerSession = producerConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:     protected synchronized void sendMessage(Message message) throws JMSException {
1:         producer.send(producerQueue, message);
1:     public QueueConnection getConsumerConnection() {
1:     public void setConsumerConnection(QueueConnection consumerConnection) {
1:         this.consumerConnection = consumerConnection;
1:     public Queue getConsumerQueue() {
1:     public void setConsumerQueue(Queue consumerQueue) {
1:         this.consumerQueue = consumerQueue;
1:     public QueueConnection getProducerConnection() {
1:     public void setProducerConnection(QueueConnection producerConnection) {
1:         this.producerConnection = producerConnection;
1:     public Queue getProducerQueue() {
1:     public void setProducerQueue(Queue producerQueue) {
1:         this.producerQueue = producerQueue;
1:     public String getSelector() {
1:     public void setSelector(String selector) {
1:         this.selector = selector;
1: 
1:     protected Connection getConnnectionForConsumer() {
1: 
1:     protected Connection getConnectionForProducer() {
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network.jms;
1: 
0: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueSender;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
0: import javax.jms.Topic;
1: /**
0:  * A Destination bridge is used to bridge between to different JMS systems
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: class QueueBridge extends DestinationBridge{
1:     protected Queue consumerQueue;
1:     protected Queue producerQueue;
1:     protected QueueSession consumerSession;
1:     protected QueueSession producerSession;
1:    
1:     protected String selector;
1:     protected QueueSender producer;
1:     protected QueueConnection consumerConnection;
1:     protected QueueConnection producerConnection;
0:     protected JmsQueueConnector jmsQueueConnector;
1: 
0:     public void stop() throws Exception{
1:         super.stop();
0:         if(consumerSession!=null){
1:             consumerSession.close();
1:         }
0:         if(producerSession!=null){
1:             producerSession.close();
1:         }
1:     }
1:     
0:     protected void setJmsQueueConnector(JmsQueueConnector connector){
0:         this.jmsQueueConnector = connector;
1:     }
1: 
0:     protected MessageConsumer createConsumer() throws JMSException{
1:         // set up the consumer
0:         consumerSession=consumerConnection.createQueueSession(false,Session.CLIENT_ACKNOWLEDGE);
0:         producerSession=producerConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer=null;
1:         
0:             if(selector!=null&&selector.length()>0){
0:                 consumer=consumerSession.createReceiver(consumerQueue,selector);
0:             }else{
0:                 consumer=consumerSession.createReceiver(consumerQueue);
1:             }
1:        
1:         return consumer;
1:     }
1:     
0:     protected MessageProducer createProducer() throws JMSException{
1:         producer = producerSession.createSender(null);
1:         return producer;
1:     }
1:     
1:         
0:     protected Destination processReplyToDestination (Destination destination){
0:         Queue queue = (Queue)destination;
0:         return jmsQueueConnector.createReplyToQueueBridge(queue, getConsumerConnection(), getProducerConnection());
1:     }
1:     
1:     
1:     
0:     protected void sendMessage(Message message) throws JMSException{
0:         producer.send(producerQueue,message);
1:     }
1: 
1:     /**
1:      * @return Returns the consumerConnection.
1:      */
0:     public QueueConnection getConsumerConnection(){
1:         return consumerConnection;
1:     }
1: 
1:     /**
1:      * @param consumerConnection The consumerConnection to set.
1:      */
0:     public void setConsumerConnection(QueueConnection consumerConnection){
0:         this.consumerConnection=consumerConnection;
1:     }
1: 
1:     /**
1:      * @return Returns the consumerQueue.
1:      */
0:     public Queue getConsumerQueue(){
1:         return consumerQueue;
1:     }
1: 
1:     /**
1:      * @param consumerQueue The consumerQueue to set.
1:      */
0:     public void setConsumerQueue(Queue consumerQueue){
0:         this.consumerQueue=consumerQueue;
1:     }
1: 
1:     /**
1:      * @return Returns the producerConnection.
1:      */
0:     public QueueConnection getProducerConnection(){
1:         return producerConnection;
1:     }
1: 
1:     /**
1:      * @param producerConnection The producerConnection to set.
1:      */
0:     public void setProducerConnection(QueueConnection producerConnection){
0:         this.producerConnection=producerConnection;
1:     }
1: 
1:     /**
1:      * @return Returns the producerQueue.
1:      */
0:     public Queue getProducerQueue(){
1:         return producerQueue;
1:     }
1: 
1:     /**
1:      * @param producerQueue The producerQueue to set.
1:      */
0:     public void setProducerQueue(Queue producerQueue){
0:         this.producerQueue=producerQueue;
1:     }
1: 
1:     /**
1:      * @return Returns the selector.
1:      */
0:     public String getSelector(){
1:         return selector;
1:     }
1: 
1:     /**
1:      * @param selector The selector to set.
1:      */
0:     public void setSelector(String selector){
0:         this.selector=selector;
1:     }
1:     
1:   
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:bc78238
/////////////////////////////////////////////////////////////////////////
1:  * A Destination bridge is used to bridge Queues between to different JMS systems
/////////////////////////////////////////////////////////////////////////
1:         if (consumerConnection == null) return null;
/////////////////////////////////////////////////////////////////////////
1:         consumer.setMessageListener(this);
0: 
1:         if (producerConnection == null) return null;
1:         if (producer == null && createProducer() == null) {
1:             throw new JMSException("Producer for remote queue not available.");
1:         try {
0:             producer.send(producerQueue, message);
1:         } catch (JMSException e) {
1:             producer = null;
1:             throw e;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (started.get()) {
1:             try {
1:                 createConsumer();
1:             } catch(Exception e) {
1:                 jmsConnector.handleConnectionFailure(getConnnectionForConsumer());
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:833eefb
/////////////////////////////////////////////////////////////////////////
0:     protected synchronized MessageProducer createProducer() throws JMSException{
/////////////////////////////////////////////////////////////////////////
0:     protected synchronized void sendMessage(Message message) throws JMSException{
0:         if (producer == null) {
0:             createProducer();
0:         }
commit:fbad105
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         producerSession=producerConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);
author:Robert Davies
-------------------------------------------------------------------------------
commit:ef0127d
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
0:     protected Connection getConnnectionForConsumer(){
1:         return getConsumerConnection();
0:     }
0:     
0:     protected Connection getConnectionForProducer(){
1:         return getProducerConnection();
0:     }
0:     
commit:49e8a80
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:         
============================================================================