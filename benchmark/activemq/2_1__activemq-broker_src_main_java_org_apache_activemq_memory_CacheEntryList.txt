1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory;
8:d29ca2a: 
1:d29ca2a: /**
1:f812e34:  * Maintains a simple linked list of CacheEntry objects. It is thread safe.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class CacheEntryList {
1:f812e34: 
1:d29ca2a:     // Points at the tail of the CacheEntry list
1:d29ca2a:     public final CacheEntry tail = new CacheEntry(null, null);
1:f812e34: 
1:d29ca2a:     public CacheEntryList() {
1:ecf89a6:         tail.next = tail;
1:ecf89a6:         tail.previous = tail;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void add(CacheEntry ce) {
1:d29ca2a:         addEntryBefore(tail, ce);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     private void addEntryBefore(CacheEntry position, CacheEntry ce) {
1:f812e34:         assert ce.key != null && ce.next == null && ce.owner == null;
1:f812e34: 
1:f812e34:         synchronized (tail) {
1:f812e34:             ce.owner = this;
1:d29ca2a:             ce.next = position;
1:f812e34:             ce.previous = position.previous;
1:d29ca2a:             ce.previous.next = ce;
1:d29ca2a:             ce.next.previous = ce;
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void clear() {
1:f812e34:         synchronized (tail) {
1:ecf89a6:             tail.next = tail;
1:ecf89a6:             tail.previous = tail;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CacheEvictor createFIFOCacheEvictor() {
1:d29ca2a:         return new CacheEvictor() {
1:d29ca2a:             public CacheEntry evictCacheEntry() {
1:d29ca2a:                 CacheEntry rc;
1:f812e34:                 synchronized (tail) {
1:d29ca2a:                     rc = tail.next;
1:d29ca2a:                 }
1:d29ca2a:                 return rc.remove() ? rc : null;
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public CacheEvictor createLIFOCacheEvictor() {
1:d29ca2a:         return new CacheEvictor() {
1:d29ca2a:             public CacheEntry evictCacheEntry() {
1:d29ca2a:                 CacheEntry rc;
1:f812e34:                 synchronized (tail) {
1:d29ca2a:                     rc = tail.previous;
1:d29ca2a:                 }
1:d29ca2a:                 return rc.remove() ? rc : null;
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         tail.next = tail;
1:         tail.previous = tail;
/////////////////////////////////////////////////////////////////////////
1:             tail.next = tail;
1:             tail.previous = tail;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Maintains a simple linked list of CacheEntry objects. It is thread safe.
1: 
1: 
1: 
1: 
1:         assert ce.key != null && ce.next == null && ce.owner == null;
1: 
1:         synchronized (tail) {
1:             ce.owner = this;
1:             ce.previous = position.previous;
1: 
1:         synchronized (tail) {
/////////////////////////////////////////////////////////////////////////
1:                 synchronized (tail) {
1: 
1:                 synchronized (tail) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory;
1: 
1: /**
0:  * Maintains a simple linked list of CacheEntry objects.  It is thread safe.
1:  * 
0:  * @version $Revision$
1:  */
1: public class CacheEntryList {
1:     
1:     // Points at the tail of the CacheEntry list
1:     public final CacheEntry tail = new CacheEntry(null, null);
1:     
1:     public CacheEntryList() {
0:         tail.next = tail.previous = tail;
1:     }
1:             
1:     public void add(CacheEntry ce) {
1:         addEntryBefore(tail, ce);
1:     }
1:     
1:     private void addEntryBefore(CacheEntry position, CacheEntry ce) {
0:         assert ce.key!=null && ce.next==null && ce.owner==null;
1:         
0:         synchronized( tail ) {
0:             ce.owner=this;
1:             ce.next = position;
0:             ce.previous = position.previous;            
1:             ce.previous.next = ce;
1:             ce.next.previous = ce;
1:         }
1:     }
1:         
1:     public void clear() {
0:         synchronized( tail ) {            
0:             tail.next = tail.previous = tail;
1:         }
1:     }
1: 
1:     public CacheEvictor createFIFOCacheEvictor() {
1:         return new CacheEvictor() {
1:             public CacheEntry evictCacheEntry() {
1:                 CacheEntry rc;
0:                 synchronized( tail ) {
1:                     rc = tail.next;
1:                 }
1:                 return rc.remove() ? rc : null;
1:             }
1:         };
1:     }
1:     
1:     public CacheEvictor createLIFOCacheEvictor() {
1:         return new CacheEvictor() {
1:             public CacheEntry evictCacheEntry() {
1:                 CacheEntry rc;
0:                 synchronized( tail ) {
1:                     rc = tail.previous;
1:                 }
1:                 return rc.remove() ? rc : null;
1:             }
1:         };
1:     }
1: 
1: }
============================================================================