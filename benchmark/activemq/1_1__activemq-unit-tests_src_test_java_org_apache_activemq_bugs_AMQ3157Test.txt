1:17995e6: /**
1:17995e6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:17995e6:  * contributor license agreements.  See the NOTICE file distributed with
1:17995e6:  * this work for additional information regarding copyright ownership.
1:17995e6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:17995e6:  * (the "License"); you may not use this file except in compliance with
1:17995e6:  * the License.  You may obtain a copy of the License at
1:17995e6:  *
1:17995e6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:17995e6:  *
1:17995e6:  * Unless required by applicable law or agreed to in writing, software
1:17995e6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:17995e6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:17995e6:  * See the License for the specific language governing permissions and
1:17995e6:  * limitations under the License.
1:17995e6:  */
1:17995e6: package org.apache.activemq.bugs;
1:17995e6: 
1:17995e6: import java.util.Arrays;
1:17995e6: import java.util.List;
1:17995e6: import java.util.concurrent.TimeUnit;
1:17995e6: 
1:17995e6: import javax.jms.Connection;
1:17995e6: import javax.jms.MessageConsumer;
1:17995e6: import javax.jms.MessageProducer;
1:17995e6: import javax.jms.Session;
1:17995e6: import javax.management.ObjectName;
1:17995e6: 
1:17995e6: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:17995e6: import org.apache.activemq.broker.BrokerService;
1:17995e6: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:17995e6: import org.apache.activemq.broker.region.DestinationInterceptor;
1:17995e6: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:17995e6: import org.apache.activemq.broker.region.policy.PolicyMap;
1:17995e6: import org.apache.activemq.broker.region.virtual.MirroredQueue;
1:17995e6: import org.apache.activemq.command.ActiveMQDestination;
1:17995e6: import org.apache.activemq.command.ActiveMQQueue;
1:17995e6: import org.apache.activemq.command.ActiveMQTopic;
1:17995e6: import org.apache.activemq.spring.ConsumerBean;
1:17995e6: import org.slf4j.Logger;
1:17995e6: import org.slf4j.LoggerFactory;
1:17995e6: 
1:17995e6: public class AMQ3157Test extends EmbeddedBrokerTestSupport {
1:17995e6: 
1:17995e6:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3157Test.class);
1:17995e6:     private Connection connection;
1:17995e6: 
1:17995e6:     public void testInactiveMirroredQueueIsCleanedUp() throws Exception {
1:17995e6: 
1:17995e6:         if (connection == null) {
1:17995e6:             connection = createConnection();
1:17995e6:         }
1:17995e6:         connection.start();
1:17995e6: 
1:17995e6:         ConsumerBean messageList = new ConsumerBean();
1:17995e6:         messageList.setVerbose(true);
1:17995e6: 
1:17995e6:         ActiveMQDestination consumeDestination = createConsumeDestination();
1:17995e6: 
1:17995e6:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:17995e6:         LOG.info("Consuming from: " + consumeDestination);
1:17995e6: 
1:17995e6:         MessageConsumer c1 = session.createConsumer(consumeDestination);
1:17995e6:         c1.setMessageListener(messageList);
1:17995e6: 
1:17995e6:         // create topic producer
1:17995e6:         ActiveMQQueue sendDestination = new ActiveMQQueue(getQueueName());
1:17995e6:         LOG.info("Sending to: " + sendDestination);
1:17995e6: 
1:17995e6:         MessageProducer producer = session.createProducer(sendDestination);
1:17995e6:         assertNotNull(producer);
1:17995e6: 
1:17995e6:         final int total = 10;
1:17995e6:         for (int i = 0; i < total; i++) {
1:17995e6:             producer.send(session.createTextMessage("message: " + i));
1:17995e6:         }
1:17995e6: 
1:17995e6:         messageList.assertMessagesArrived(total);
1:17995e6:         LOG.info("Received: " + messageList);
1:17995e6:         messageList.flushMessages();
1:17995e6: 
1:17995e6:         MessageConsumer c2 = session.createConsumer(sendDestination);
1:17995e6:         c2.setMessageListener(messageList);
1:17995e6:         messageList.assertMessagesArrived(total);
1:17995e6:         LOG.info("Q Received: " + messageList);
1:17995e6: 
1:17995e6:         connection.close();
1:17995e6: 
1:17995e6:         List<ObjectName> topics = Arrays.asList(broker.getAdminView().getTopics());
1:17995e6:         assertTrue(topics.contains(createObjectName(consumeDestination)));
1:17995e6:         List<ObjectName> queues = Arrays.asList(broker.getAdminView().getQueues());
1:17995e6:         assertTrue(queues.contains(createObjectName(sendDestination)));
1:17995e6: 
1:17995e6:         Thread.sleep(TimeUnit.SECONDS.toMillis(10));
1:17995e6: 
1:17995e6:         topics = Arrays.asList(broker.getAdminView().getTopics());
1:17995e6:         if (topics != null) {
1:17995e6:             assertFalse("Virtual Topic Desination did not get cleaned up.",
1:17995e6:                         topics.contains(createObjectName(consumeDestination)));
1:17995e6:         }
1:17995e6:         queues = Arrays.asList(broker.getAdminView().getQueues());
1:17995e6:         if (queues != null) {
1:17995e6:             assertFalse("Mirrored Queue Desination did not get cleaned up.",
1:17995e6:                         queues.contains(createObjectName(sendDestination)));
1:17995e6:         }
1:17995e6:     }
1:17995e6: 
1:17995e6:     protected ActiveMQDestination createConsumeDestination() {
1:17995e6:         return new ActiveMQTopic("VirtualTopic.Mirror." + getQueueName());
1:17995e6:     }
1:17995e6: 
1:17995e6:     protected String getQueueName() {
1:17995e6:         return "My.Queue";
1:17995e6:     }
1:17995e6: 
1:17995e6:     @Override
1:17995e6:     protected BrokerService createBroker() throws Exception {
1:17995e6:         BrokerService answer = new BrokerService();
1:17995e6:         answer.setUseMirroredQueues(true);
1:17995e6:         answer.setPersistent(isPersistent());
1:17995e6:         answer.setSchedulePeriodForDestinationPurge(1000);
1:17995e6: 
1:17995e6:         PolicyEntry entry = new PolicyEntry();
1:17995e6:         entry.setGcInactiveDestinations(true);
1:17995e6:         entry.setInactiveTimoutBeforeGC(5000);
1:17995e6:         entry.setProducerFlowControl(true);
1:17995e6:         PolicyMap map = new PolicyMap();
1:17995e6:         map.setDefaultEntry(entry);
1:17995e6: 
1:17995e6:         MirroredQueue mirrorQ = new MirroredQueue();
1:17995e6:         mirrorQ.setCopyMessage(true);
1:17995e6:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{mirrorQ};
1:17995e6:         answer.setDestinationInterceptors(destinationInterceptors);
1:17995e6: 
1:17995e6:         answer.setDestinationPolicy(map);
1:17995e6:         answer.addConnector(bindAddress);
1:17995e6: 
1:17995e6:         return answer;
1:17995e6:     }
1:17995e6: 
1:17995e6:     protected DestinationViewMBean createView(ActiveMQDestination destination) throws Exception {
1:17995e6:         String domain = "org.apache.activemq";
1:17995e6:         ObjectName name;
1:17995e6:         if (destination.isQueue()) {
2:17995e6:             name = new ObjectName(domain + ":BrokerName=localhost,Type=Queue,Destination=" + destination.getPhysicalName());
1:17995e6:         } else {
2:17995e6:             name = new ObjectName(domain + ":BrokerName=localhost,Type=Topic,Destination=" + destination.getPhysicalName());
1:17995e6:         }
1:17995e6:         return (DestinationViewMBean) broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class,
1:17995e6:                 true);
1:17995e6:     }
1:17995e6: 
1:17995e6:     protected ObjectName createObjectName(ActiveMQDestination destination) throws Exception {
1:17995e6:         String domain = "org.apache.activemq";
1:17995e6:         ObjectName name;
1:17995e6:         if (destination.isQueue()) {
1:9829435:             name = new ObjectName(domain + ":type=Broker,brokerName=localhost," +
1:9829435:                                   "destinationType=Queue,destinationName=" + destination.getPhysicalName());
1:17995e6:         } else {
1:9829435:             name = new ObjectName(domain + ":type=Broker,brokerName=localhost," +
1:9829435:                                   "destinationType=Topic,destinationName=" + destination.getPhysicalName());
1:17995e6:         }
1:17995e6: 
1:17995e6:         return name;
1:17995e6:     }
1:17995e6: 
1:9829435:     @Override
1:17995e6:     protected void tearDown() throws Exception {
1:17995e6:         if (connection != null) {
1:17995e6:             connection.close();
1:17995e6:         }
1:17995e6:         super.tearDown();
1:17995e6:     }
1:17995e6: 
1:17995e6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:9829435
/////////////////////////////////////////////////////////////////////////
1:             name = new ObjectName(domain + ":type=Broker,brokerName=localhost," +
1:                                   "destinationType=Queue,destinationName=" + destination.getPhysicalName());
1:             name = new ObjectName(domain + ":type=Broker,brokerName=localhost," +
1:                                   "destinationType=Topic,destinationName=" + destination.getPhysicalName());
1:     @Override
commit:17995e6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.virtual.MirroredQueue;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.spring.ConsumerBean;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3157Test extends EmbeddedBrokerTestSupport {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3157Test.class);
1:     private Connection connection;
1: 
1:     public void testInactiveMirroredQueueIsCleanedUp() throws Exception {
1: 
1:         if (connection == null) {
1:             connection = createConnection();
1:         }
1:         connection.start();
1: 
1:         ConsumerBean messageList = new ConsumerBean();
1:         messageList.setVerbose(true);
1: 
1:         ActiveMQDestination consumeDestination = createConsumeDestination();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         LOG.info("Consuming from: " + consumeDestination);
1: 
1:         MessageConsumer c1 = session.createConsumer(consumeDestination);
1:         c1.setMessageListener(messageList);
1: 
1:         // create topic producer
1:         ActiveMQQueue sendDestination = new ActiveMQQueue(getQueueName());
1:         LOG.info("Sending to: " + sendDestination);
1: 
1:         MessageProducer producer = session.createProducer(sendDestination);
1:         assertNotNull(producer);
1: 
1:         final int total = 10;
1:         for (int i = 0; i < total; i++) {
1:             producer.send(session.createTextMessage("message: " + i));
1:         }
1: 
1:         messageList.assertMessagesArrived(total);
1:         LOG.info("Received: " + messageList);
1:         messageList.flushMessages();
1: 
1:         MessageConsumer c2 = session.createConsumer(sendDestination);
1:         c2.setMessageListener(messageList);
1:         messageList.assertMessagesArrived(total);
1:         LOG.info("Q Received: " + messageList);
1: 
1:         connection.close();
1: 
1:         List<ObjectName> topics = Arrays.asList(broker.getAdminView().getTopics());
1:         assertTrue(topics.contains(createObjectName(consumeDestination)));
1:         List<ObjectName> queues = Arrays.asList(broker.getAdminView().getQueues());
1:         assertTrue(queues.contains(createObjectName(sendDestination)));
1: 
1:         Thread.sleep(TimeUnit.SECONDS.toMillis(10));
1: 
1:         topics = Arrays.asList(broker.getAdminView().getTopics());
1:         if (topics != null) {
1:             assertFalse("Virtual Topic Desination did not get cleaned up.",
1:                         topics.contains(createObjectName(consumeDestination)));
1:         }
1:         queues = Arrays.asList(broker.getAdminView().getQueues());
1:         if (queues != null) {
1:             assertFalse("Mirrored Queue Desination did not get cleaned up.",
1:                         queues.contains(createObjectName(sendDestination)));
1:         }
1:     }
1: 
1:     protected ActiveMQDestination createConsumeDestination() {
1:         return new ActiveMQTopic("VirtualTopic.Mirror." + getQueueName());
1:     }
1: 
1:     protected String getQueueName() {
1:         return "My.Queue";
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseMirroredQueues(true);
1:         answer.setPersistent(isPersistent());
1:         answer.setSchedulePeriodForDestinationPurge(1000);
1: 
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setGcInactiveDestinations(true);
1:         entry.setInactiveTimoutBeforeGC(5000);
1:         entry.setProducerFlowControl(true);
1:         PolicyMap map = new PolicyMap();
1:         map.setDefaultEntry(entry);
1: 
1:         MirroredQueue mirrorQ = new MirroredQueue();
1:         mirrorQ.setCopyMessage(true);
1:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{mirrorQ};
1:         answer.setDestinationInterceptors(destinationInterceptors);
1: 
1:         answer.setDestinationPolicy(map);
1:         answer.addConnector(bindAddress);
1: 
1:         return answer;
1:     }
1: 
1:     protected DestinationViewMBean createView(ActiveMQDestination destination) throws Exception {
1:         String domain = "org.apache.activemq";
1:         ObjectName name;
1:         if (destination.isQueue()) {
1:             name = new ObjectName(domain + ":BrokerName=localhost,Type=Queue,Destination=" + destination.getPhysicalName());
1:         } else {
1:             name = new ObjectName(domain + ":BrokerName=localhost,Type=Topic,Destination=" + destination.getPhysicalName());
1:         }
1:         return (DestinationViewMBean) broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class,
1:                 true);
1:     }
1: 
1:     protected ObjectName createObjectName(ActiveMQDestination destination) throws Exception {
1:         String domain = "org.apache.activemq";
1:         ObjectName name;
1:         if (destination.isQueue()) {
1:             name = new ObjectName(domain + ":BrokerName=localhost,Type=Queue,Destination=" + destination.getPhysicalName());
1:         } else {
1:             name = new ObjectName(domain + ":BrokerName=localhost,Type=Topic,Destination=" + destination.getPhysicalName());
1:         }
1: 
1:         return name;
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: 
1: }
============================================================================