1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool;
2:a88906f: 
1:a88906f: import java.util.ArrayList;
1:a88906f: import java.util.List;
1:a88906f: 
1:a88906f: import javax.jms.JMSException;
1:a88906f: import javax.jms.Message;
1:a88906f: import javax.jms.MessageListener;
1:a88906f: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a88906f: 
1:a88906f: /**
1:a88906f:  * A simple container of messages for performing testing and rendezvous style
1:a88906f:  * code. You can use this class a {@link MessageListener} and then make
1:a88906f:  * assertions about how many messages it has received allowing a certain maximum
1:a88906f:  * amount of time to ensure that the test does not hang forever.
1:a88906f:  * <p/>
1:a88906f:  * Also you can chain these instances together with the
1:a88906f:  * {@link #setParent(MessageListener)} method so that you can aggregate the
1:a88906f:  * total number of messages consumed across a number of consumers.
1:b0c2a40:  *
1:a88906f:  * 
1:a88906f:  */
1:a88906f: public class MemMessageIdList implements MessageListener {
1:a88906f: 
1:8bf987b:     protected static final Logger LOG = LoggerFactory.getLogger(MemMessageIdList.class);
1:a88906f: 
1:540dd5c:     private List<String> messageIds = new ArrayList<String>();
1:a88906f:     private Object semaphore;
1:a88906f:     private boolean verbose;
1:a88906f:     private MessageListener parent;
1:a88906f:     private long maximumDuration = 15000L;
1:a88906f: 
1:a88906f:     public MemMessageIdList() {
1:a88906f:         this(new Object());
1:a88906f:     }
1:a88906f: 
1:a88906f:     public MemMessageIdList(Object semaphore) {
1:a88906f:         this.semaphore = semaphore;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public boolean equals(Object that) {
1:a88906f:         if (that instanceof MemMessageIdList) {
1:a88906f:             MemMessageIdList thatListMem = (MemMessageIdList) that;
1:a88906f:             return getMessageIds().equals(thatListMem.getMessageIds());
1:a88906f:         }
1:a88906f:         return false;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public int hashCode() {
1:a88906f:         synchronized (semaphore) {
1:a88906f:             return messageIds.hashCode() + 1;
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public String toString() {
1:a88906f:         synchronized (semaphore) {
1:a88906f:             return messageIds.toString();
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     /**
1:a88906f:      * @return all the messages on the list so far, clearing the buffer
1:a88906f:      */
1:540dd5c:     public List<String> flushMessages() {
1:a88906f:         synchronized (semaphore) {
1:540dd5c:             List<String> answer = new ArrayList<String>(messageIds);
1:a88906f:             messageIds.clear();
1:a88906f:             return answer;
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:540dd5c:     public synchronized List<String> getMessageIds() {
1:a88906f:         synchronized (semaphore) {
1:540dd5c:             return new ArrayList<String>(messageIds);
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void onMessage(Message message) {
1:a88906f:         String id = null;
1:a88906f:         try {
1:a88906f:             id = message.getJMSMessageID();
1:a88906f:             synchronized (semaphore) {
1:a88906f:                 messageIds.add(id);
1:a88906f:                 semaphore.notifyAll();
1:a88906f:             }
1:a88906f:             if (verbose) {
1:540dd5c:                 LOG.info("Received message: " + message);
1:a88906f:             }
1:a88906f:         } catch (JMSException e) {
1:a88906f:             e.printStackTrace();
1:a88906f:         }
1:a88906f:         if (parent != null) {
1:a88906f:             parent.onMessage(message);
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public int getMessageCount() {
1:a88906f:         synchronized (semaphore) {
1:a88906f:             return messageIds.size();
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void waitForMessagesToArrive(int messageCount) {
1:540dd5c:         LOG.info("Waiting for " + messageCount + " message(s) to arrive");
1:a88906f: 
1:a88906f:         long start = System.currentTimeMillis();
1:a88906f: 
1:a88906f:         for (int i = 0; i < messageCount; i++) {
1:a88906f:             try {
1:a88906f:                 if (hasReceivedMessages(messageCount)) {
1:a88906f:                     break;
1:a88906f:                 }
1:a88906f:                 long duration = System.currentTimeMillis() - start;
1:a88906f:                 if (duration >= maximumDuration) {
1:a88906f:                     break;
1:a88906f:                 }
1:a88906f:                 synchronized (semaphore) {
1:a88906f:                     semaphore.wait(maximumDuration - duration);
1:a88906f:                 }
1:a88906f:             } catch (InterruptedException e) {
1:540dd5c:                 LOG.info("Caught: " + e);
1:a88906f:             }
1:a88906f:         }
1:a88906f:         long end = System.currentTimeMillis() - start;
1:a88906f: 
1:540dd5c:         LOG.info("End of wait for " + end + " millis and received: " + getMessageCount() + " messages");
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f:     public boolean hasReceivedMessage() {
1:a88906f:         return getMessageCount() == 0;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public boolean hasReceivedMessages(int messageCount) {
1:a88906f:         return getMessageCount() >= messageCount;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public boolean isVerbose() {
1:a88906f:         return verbose;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setVerbose(boolean verbose) {
1:a88906f:         this.verbose = verbose;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public MessageListener getParent() {
1:a88906f:         return parent;
1:a88906f:     }
1:a88906f: 
1:a88906f:     /**
1:a88906f:      * Allows a parent listener to be specified such as to aggregate messages
1:a88906f:      * consumed across consumers
1:a88906f:      */
1:a88906f:     public void setParent(MessageListener parent) {
1:a88906f:         this.parent = parent;
1:a88906f:     }
1:a88906f: 
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log LOG = LogFactory.getLog(MemMessageIdList.class);
1:     private List<String> messageIds = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1:     public List<String> flushMessages() {
1:             List<String> answer = new ArrayList<String>(messageIds);
1:     public synchronized List<String> getMessageIds() {
1:             return new ArrayList<String>(messageIds);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Received message: " + message);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Waiting for " + messageCount + " message(s) to arrive");
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Caught: " + e);
1:         LOG.info("End of wait for " + end + " millis and received: " + getMessageCount() + " messages");
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: 
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * A simple container of messages for performing testing and rendezvous style
1:  * code. You can use this class a {@link MessageListener} and then make
1:  * assertions about how many messages it has received allowing a certain maximum
1:  * amount of time to ensure that the test does not hang forever.
1:  * <p/>
1:  * Also you can chain these instances together with the
1:  * {@link #setParent(MessageListener)} method so that you can aggregate the
1:  * total number of messages consumed across a number of consumers.
1:  *
0:  * @version $Revision: 1.6 $
1:  */
1: public class MemMessageIdList implements MessageListener {
1: 
0:     protected static final Log log = LogFactory.getLog(MemMessageIdList.class);
1: 
0:     private List messageIds = new ArrayList();
1:     private Object semaphore;
1:     private boolean verbose;
1:     private MessageListener parent;
1:     private long maximumDuration = 15000L;
1: 
1:     public MemMessageIdList() {
1:         this(new Object());
1:     }
1: 
1:     public MemMessageIdList(Object semaphore) {
1:         this.semaphore = semaphore;
1:     }
1: 
1:     public boolean equals(Object that) {
1:         if (that instanceof MemMessageIdList) {
1:             MemMessageIdList thatListMem = (MemMessageIdList) that;
1:             return getMessageIds().equals(thatListMem.getMessageIds());
1:         }
1:         return false;
1:     }
1: 
1:     public int hashCode() {
1:         synchronized (semaphore) {
1:             return messageIds.hashCode() + 1;
1:         }
1:     }
1: 
1:     public String toString() {
1:         synchronized (semaphore) {
1:             return messageIds.toString();
1:         }
1:     }
1: 
1:     /**
1:      * @return all the messages on the list so far, clearing the buffer
1:      */
0:     public List flushMessages() {
1:         synchronized (semaphore) {
0:             List answer = new ArrayList(messageIds);
1:             messageIds.clear();
1:             return answer;
1:         }
1:     }
1: 
0:     public synchronized List getMessageIds() {
1:         synchronized (semaphore) {
0:             return new ArrayList(messageIds);
1:         }
1:     }
1: 
1:     public void onMessage(Message message) {
1:         String id = null;
1:         try {
1:             id = message.getJMSMessageID();
1:             synchronized (semaphore) {
1:                 messageIds.add(id);
1:                 semaphore.notifyAll();
1:             }
1:             if (verbose) {
0:                 log.info("Received message: " + message);
1:             }
1:         } catch (JMSException e) {
1:             e.printStackTrace();
1:         }
1:         if (parent != null) {
1:             parent.onMessage(message);
1:         }
1:     }
1: 
1:     public int getMessageCount() {
1:         synchronized (semaphore) {
1:             return messageIds.size();
1:         }
1:     }
1: 
1:     public void waitForMessagesToArrive(int messageCount) {
0:         log.info("Waiting for " + messageCount + " message(s) to arrive");
1: 
1:         long start = System.currentTimeMillis();
1: 
1:         for (int i = 0; i < messageCount; i++) {
1:             try {
1:                 if (hasReceivedMessages(messageCount)) {
1:                     break;
1:                 }
1:                 long duration = System.currentTimeMillis() - start;
1:                 if (duration >= maximumDuration) {
1:                     break;
1:                 }
1:                 synchronized (semaphore) {
1:                     semaphore.wait(maximumDuration - duration);
1:                 }
1:             } catch (InterruptedException e) {
0:                 log.info("Caught: " + e);
1:             }
1:         }
1:         long end = System.currentTimeMillis() - start;
1: 
0:         log.info("End of wait for " + end + " millis and received: " + getMessageCount() + " messages");
1:     }
1: 
1: 
1:     public boolean hasReceivedMessage() {
1:         return getMessageCount() == 0;
1:     }
1: 
1:     public boolean hasReceivedMessages(int messageCount) {
1:         return getMessageCount() >= messageCount;
1:     }
1: 
1:     public boolean isVerbose() {
1:         return verbose;
1:     }
1: 
1:     public void setVerbose(boolean verbose) {
1:         this.verbose = verbose;
1:     }
1: 
1:     public MessageListener getParent() {
1:         return parent;
1:     }
1: 
1:     /**
1:      * Allows a parent listener to be specified such as to aggregate messages
1:      * consumed across consumers
1:      */
1:     public void setParent(MessageListener parent) {
1:         this.parent = parent;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected static final Logger LOG = LoggerFactory.getLogger(MemMessageIdList.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:2054392
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool;
0: 
0: import java.util.ArrayList;
0: import java.util.List;
0: 
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageListener;
0: 
0: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: /**
0:  * A simple container of messages for performing testing and rendezvous style
0:  * code. You can use this class a {@link MessageListener} and then make
0:  * assertions about how many messages it has received allowing a certain maximum
0:  * amount of time to ensure that the test does not hang forever.
0:  * <p/>
0:  * Also you can chain these instances together with the
0:  * {@link #setParent(MessageListener)} method so that you can aggregate the
0:  * total number of messages consumed across a number of consumers.
0:  *
0:  * @version $Revision: 1.6 $
0:  */
0: public class MemMessageIdList implements MessageListener {
0: 
0:     protected static final Log log = LogFactory.getLog(MemMessageIdList.class);
0: 
0:     private List messageIds = new ArrayList();
0:     private Object semaphore;
0:     private boolean verbose;
0:     private MessageListener parent;
0:     private long maximumDuration = 15000L;
0: 
0:     public MemMessageIdList() {
0:         this(new Object());
0:     }
0: 
0:     public MemMessageIdList(Object semaphore) {
0:         this.semaphore = semaphore;
0:     }
0: 
0:     public boolean equals(Object that) {
0:         if (that instanceof MemMessageIdList) {
0:             MemMessageIdList thatListMem = (MemMessageIdList) that;
0:             return getMessageIds().equals(thatListMem.getMessageIds());
0:         }
0:         return false;
0:     }
0: 
0:     public int hashCode() {
0:         synchronized (semaphore) {
0:             return messageIds.hashCode() + 1;
0:         }
0:     }
0: 
0:     public String toString() {
0:         synchronized (semaphore) {
0:             return messageIds.toString();
0:         }
0:     }
0: 
0:     /**
0:      * @return all the messages on the list so far, clearing the buffer
0:      */
0:     public List flushMessages() {
0:         synchronized (semaphore) {
0:             List answer = new ArrayList(messageIds);
0:             messageIds.clear();
0:             return answer;
0:         }
0:     }
0: 
0:     public synchronized List getMessageIds() {
0:         synchronized (semaphore) {
0:             return new ArrayList(messageIds);
0:         }
0:     }
0: 
0:     public void onMessage(Message message) {
0:         String id = null;
0:         try {
0:             id = message.getJMSMessageID();
0:             synchronized (semaphore) {
0:                 messageIds.add(id);
0:                 semaphore.notifyAll();
0:             }
0:             if (verbose) {
0:                 log.info("Received message: " + message);
0:             }
0:         } catch (JMSException e) {
0:             e.printStackTrace();
0:         }
0:         if (parent != null) {
0:             parent.onMessage(message);
0:         }
0:     }
0: 
0:     public int getMessageCount() {
0:         synchronized (semaphore) {
0:             return messageIds.size();
0:         }
0:     }
0: 
0:     public void waitForMessagesToArrive(int messageCount) {
0:         log.info("Waiting for " + messageCount + " message(s) to arrive");
0: 
0:         long start = System.currentTimeMillis();
0: 
0:         for (int i = 0; i < messageCount; i++) {
0:             try {
0:                 if (hasReceivedMessages(messageCount)) {
0:                     break;
0:                 }
0:                 long duration = System.currentTimeMillis() - start;
0:                 if (duration >= maximumDuration) {
0:                     break;
0:                 }
0:                 synchronized (semaphore) {
0:                     semaphore.wait(maximumDuration - duration);
0:                 }
0:             } catch (InterruptedException e) {
0:                 log.info("Caught: " + e);
0:             }
0:         }
0:         long end = System.currentTimeMillis() - start;
0: 
0:         log.info("End of wait for " + end + " millis and received: " + getMessageCount() + " messages");
0:     }
0: 
0: 
0:     public boolean hasReceivedMessage() {
0:         return getMessageCount() == 0;
0:     }
0: 
0:     public boolean hasReceivedMessages(int messageCount) {
0:         return getMessageCount() >= messageCount;
0:     }
0: 
0:     public boolean isVerbose() {
0:         return verbose;
0:     }
0: 
0:     public void setVerbose(boolean verbose) {
0:         this.verbose = verbose;
0:     }
0: 
0:     public MessageListener getParent() {
0:         return parent;
0:     }
0: 
0:     /**
0:      * Allows a parent listener to be specified such as to aggregate messages
0:      * consumed across consumers
0:      */
0:     public void setParent(MessageListener parent) {
0:         this.parent = parent;
0:     }
0: 
0: }
============================================================================