1:e333fd9: /**
1:e333fd9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e333fd9:  * contributor license agreements.  See the NOTICE file distributed with
1:e333fd9:  * this work for additional information regarding copyright ownership.
1:e333fd9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e333fd9:  * (the "License"); you may not use this file except in compliance with
1:e333fd9:  * the License.  You may obtain a copy of the License at
1:e333fd9:  *
1:e333fd9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e333fd9:  *
1:e333fd9:  * Unless required by applicable law or agreed to in writing, software
1:e333fd9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e333fd9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e333fd9:  * See the License for the specific language governing permissions and
1:e333fd9:  * limitations under the License.
1:e333fd9:  */
1:e333fd9: package org.apache.activemq.transport.amqp.sasl;
3:e333fd9: 
1:e333fd9: import org.apache.qpid.proton.engine.Sasl;
1:e333fd9: import org.fusesource.hawtbuf.Buffer;
1:e333fd9: 
1:e333fd9: /**
1:e333fd9:  * Implements the SASL Plain mechanism.
1:e333fd9:  */
1:e333fd9: public class PlainMechanism extends AbstractSaslMechanism {
1:e333fd9: 
1:e333fd9:     @Override
1:e333fd9:     public void processSaslStep(Sasl sasl) {
1:e333fd9:         byte[] data = new byte[sasl.pending()];
1:e333fd9:         sasl.recv(data, 0, data.length);
1:b5dd0a1: 
1:e333fd9:         Buffer[] parts = new Buffer(data).split((byte) 0);
1:b5dd0a1:         switch (parts.length) {
1:b5dd0a1:             case 0:
1:b5dd0a1:                 // Treat this as anonymous connect to support legacy behavior
1:b5dd0a1:                 // which allowed this.  Connection will fail if broker is not
1:b5dd0a1:                 // configured to allow anonymous connections.
1:b5dd0a1:                 break;
1:b5dd0a1:             case 2:
1:b5dd0a1:                 username = parts[0].utf8().toString();
1:b5dd0a1:                 password = parts[1].utf8().toString();
1:b5dd0a1:                 break;
1:b5dd0a1:             case 3:
1:b5dd0a1:                 username = parts[1].utf8().toString();
1:b5dd0a1:                 password = parts[2].utf8().toString();
1:b5dd0a1:                 break;
1:b5dd0a1:             default:
1:b5dd0a1:                 setFailed("Invalid encoding of Authentication credentials");
1:b5dd0a1:                 break;
2:e333fd9:         }
1:e333fd9:     }
1:e333fd9: 
1:e333fd9:     @Override
1:e333fd9:     public String getMechanismName() {
1:e333fd9:         return "PLAIN";
1:e333fd9:     }
1:e333fd9: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b5dd0a1
/////////////////////////////////////////////////////////////////////////
1: 
1:         switch (parts.length) {
1:             case 0:
1:                 // Treat this as anonymous connect to support legacy behavior
1:                 // which allowed this.  Connection will fail if broker is not
1:                 // configured to allow anonymous connections.
1:                 break;
1:             case 2:
1:                 username = parts[0].utf8().toString();
1:                 password = parts[1].utf8().toString();
1:                 break;
1:             case 3:
1:                 username = parts[1].utf8().toString();
1:                 password = parts[2].utf8().toString();
1:                 break;
1:             default:
1:                 setFailed("Invalid encoding of Authentication credentials");
1:                 break;
commit:e333fd9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.sasl;
1: 
1: import org.apache.qpid.proton.engine.Sasl;
1: import org.fusesource.hawtbuf.Buffer;
1: 
1: /**
1:  * Implements the SASL Plain mechanism.
1:  */
1: public class PlainMechanism extends AbstractSaslMechanism {
1: 
1:     @Override
1:     public void processSaslStep(Sasl sasl) {
1:         byte[] data = new byte[sasl.pending()];
1:         sasl.recv(data, 0, data.length);
1:         Buffer[] parts = new Buffer(data).split((byte) 0);
1: 
0:         if (parts.length > 0) {
0:             username = parts[0].utf8().toString();
1:         }
1: 
0:         if (parts.length > 1) {
0:             password = parts[1].utf8().toString();
1:         }
1:     }
1: 
1:     @Override
1:     public String getMechanismName() {
1:         return "PLAIN";
1:     }
1: }
============================================================================