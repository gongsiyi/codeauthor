1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
18:40a7d3b: 
1:ba1bd26: import static org.junit.Assert.assertEquals;
1:ba1bd26: import static org.junit.Assert.assertFalse;
1:ba1bd26: import static org.junit.Assert.assertNotNull;
1:ba1bd26: import static org.junit.Assert.assertNull;
1:ba1bd26: import static org.junit.Assert.assertTrue;
1:ba1bd26: import static org.junit.Assert.fail;
1:ba1bd26: 
1:40a7d3b: import java.beans.IntrospectionException;
1:40a7d3b: import java.beans.PropertyDescriptor;
1:40a7d3b: import java.util.Arrays;
1:40a7d3b: import java.util.List;
1:40a7d3b: 
1:40a7d3b: import javax.jms.Queue;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.jms.Topic;
1:40a7d3b: import javax.resource.spi.InvalidPropertyException;
1:40a7d3b: 
1:fd4bb60: import org.apache.activemq.command.ActiveMQDestination;
1:ba1bd26: import org.junit.Before;
1:ba1bd26: import org.junit.Test;
1:40a7d3b: 
1:ba1bd26: public class ActiveMQActivationSpecTest {
1:40a7d3b: 
1:40a7d3b:     private static final String DESTINATION = "defaultQueue";
1:40a7d3b:     private static final String DESTINATION_TYPE = Queue.class.getName();
1:540dd5c:     private static final String EMPTY_STRING = "   ";
1:40a7d3b: 
1:40a7d3b:     private ActiveMQActivationSpec activationSpec;
1:40a7d3b:     private PropertyDescriptor destinationProperty;
1:40a7d3b:     private PropertyDescriptor destinationTypeProperty;
1:40a7d3b:     private PropertyDescriptor acknowledgeModeProperty;
1:40a7d3b:     private PropertyDescriptor subscriptionDurabilityProperty;
1:40a7d3b:     private PropertyDescriptor clientIdProperty;
1:40a7d3b:     private PropertyDescriptor subscriptionNameProperty;
1:40a7d3b: 
1:ba1bd26:     @Before
1:ba1bd26:     public void setUp() throws Exception {
1:40a7d3b: 
1:40a7d3b:         activationSpec = new ActiveMQActivationSpec();
1:40a7d3b:         activationSpec.setDestination(DESTINATION);
1:40a7d3b:         activationSpec.setDestinationType(DESTINATION_TYPE);
1:40a7d3b: 
1:40a7d3b:         destinationProperty = new PropertyDescriptor("destination", ActiveMQActivationSpec.class);
1:40a7d3b:         destinationTypeProperty = new PropertyDescriptor("destinationType", ActiveMQActivationSpec.class);
1:40a7d3b:         acknowledgeModeProperty = new PropertyDescriptor("acknowledgeMode", ActiveMQActivationSpec.class);
1:40a7d3b:         subscriptionDurabilityProperty = new PropertyDescriptor("subscriptionDurability", ActiveMQActivationSpec.class);
1:40a7d3b:         clientIdProperty = new PropertyDescriptor("clientId", ActiveMQActivationSpec.class);
1:40a7d3b:         subscriptionNameProperty = new PropertyDescriptor("subscriptionName", ActiveMQActivationSpec.class);
4:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testDefaultContructionValidation() throws IntrospectionException {
1:40a7d3b:         PropertyDescriptor[] expected = {destinationTypeProperty, destinationProperty};
1:40a7d3b:         assertActivationSpecInvalid(new ActiveMQActivationSpec(), expected);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testMinimalSettings() {
1:40a7d3b:         assertEquals(DESTINATION, activationSpec.getDestination());
1:40a7d3b:         assertEquals(DESTINATION_TYPE, activationSpec.getDestinationType());
2:40a7d3b:         assertActivationSpecValid();
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testNoDestinationTypeFailure() {
1:40a7d3b:         activationSpec.setDestinationType(null);
1:40a7d3b:         PropertyDescriptor[] expected = {destinationTypeProperty};
1:40a7d3b:         assertActivationSpecInvalid(expected);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testInvalidDestinationTypeFailure() {
1:40a7d3b:         activationSpec.setDestinationType("foobar");
1:40a7d3b:         PropertyDescriptor[] expected = {destinationTypeProperty};
1:40a7d3b:         assertActivationSpecInvalid(expected);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testQueueDestinationType() {
1:40a7d3b:         activationSpec.setDestinationType(Queue.class.getName());
1:40a7d3b:         assertActivationSpecValid();
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testTopicDestinationType() {
1:40a7d3b:         activationSpec.setDestinationType(Topic.class.getName());
1:40a7d3b:         assertActivationSpecValid();
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testSuccessfulCreateQueueDestination() {
1:40a7d3b:         activationSpec.setDestinationType(Queue.class.getName());
1:40a7d3b:         activationSpec.setDestination(DESTINATION);
1:40a7d3b:         assertActivationSpecValid();
1:40a7d3b:         ActiveMQDestination destination = activationSpec.createDestination();
1:40a7d3b:         assertNotNull("ActiveMQDestination not created", destination);
1:40a7d3b:         assertEquals("Physical name not the same", activationSpec.getDestination(), destination.getPhysicalName());
1:40a7d3b:         assertTrue("Destination is not a Queue", destination instanceof Queue);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testSuccessfulCreateTopicDestination() {
1:40a7d3b:         activationSpec.setDestinationType(Topic.class.getName());
1:40a7d3b:         activationSpec.setDestination(DESTINATION);
1:40a7d3b:         assertActivationSpecValid();
1:40a7d3b:         ActiveMQDestination destination = activationSpec.createDestination();
1:40a7d3b:         assertNotNull("ActiveMQDestination not created", destination);
1:40a7d3b:         assertEquals("Physical name not the same", activationSpec.getDestination(), destination.getPhysicalName());
1:40a7d3b:         assertTrue("Destination is not a Topic", destination instanceof Topic);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testCreateDestinationIncorrectType() {
1:40a7d3b:         activationSpec.setDestinationType(null);
1:40a7d3b:         activationSpec.setDestination(DESTINATION);
1:40a7d3b:         ActiveMQDestination destination = activationSpec.createDestination();
1:40a7d3b:         assertNull("ActiveMQDestination should not have been created", destination);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testCreateDestinationIncorrectDestinationName() {
1:40a7d3b:         activationSpec.setDestinationType(Topic.class.getName());
1:40a7d3b:         activationSpec.setDestination(null);
1:40a7d3b:         ActiveMQDestination destination = activationSpec.createDestination();
1:40a7d3b:         assertNull("ActiveMQDestination should not have been created", destination);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     //----------- acknowledgeMode tests
1:ba1bd26: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testDefaultAcknowledgeModeSetCorrectly() {
1:40a7d3b:         assertEquals("Incorrect default value", ActiveMQActivationSpec.AUTO_ACKNOWLEDGE_MODE,
1:40a7d3b:                 activationSpec.getAcknowledgeMode());
1:40a7d3b:         assertEquals("Incorrect default value", Session.AUTO_ACKNOWLEDGE,
1:40a7d3b:                 activationSpec.getAcknowledgeModeForSession());
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testInvalidAcknowledgeMode() {
1:40a7d3b:         activationSpec.setAcknowledgeMode("foobar");
1:40a7d3b:         PropertyDescriptor[] expected = {acknowledgeModeProperty};
1:40a7d3b:         assertActivationSpecInvalid(expected);
1:ba1bd26:         assertEquals("Incorrect acknowledge mode", ActiveMQActivationSpec.INVALID_ACKNOWLEDGE_MODE,
1:40a7d3b:                 activationSpec.getAcknowledgeModeForSession());
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testNoAcknowledgeMode() {
1:40a7d3b:         activationSpec.setAcknowledgeMode(null);
1:40a7d3b:         PropertyDescriptor[] expected = {acknowledgeModeProperty};
1:40a7d3b:         assertActivationSpecInvalid(expected);
2:40a7d3b:         assertEquals("Incorrect acknowledge mode", ActiveMQActivationSpec.INVALID_ACKNOWLEDGE_MODE,
1:40a7d3b:                 activationSpec.getAcknowledgeModeForSession());
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testSettingAutoAcknowledgeMode() {
1:40a7d3b:         activationSpec.setAcknowledgeMode(ActiveMQActivationSpec.AUTO_ACKNOWLEDGE_MODE);
1:40a7d3b:         assertActivationSpecValid();
1:40a7d3b:         assertEquals("Incorrect acknowledge mode", Session.AUTO_ACKNOWLEDGE,
1:40a7d3b:                 activationSpec.getAcknowledgeModeForSession());
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testSettingDupsOkAcknowledgeMode() {
1:40a7d3b:         activationSpec.setAcknowledgeMode(ActiveMQActivationSpec.DUPS_OK_ACKNOWLEDGE_MODE);
1:40a7d3b:         assertActivationSpecValid();
1:40a7d3b:         assertEquals("Incorrect acknowledge mode", Session.DUPS_OK_ACKNOWLEDGE,
1:40a7d3b:                 activationSpec.getAcknowledgeModeForSession());
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     //----------- subscriptionDurability tests
1:ba1bd26: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testDefaultSubscriptionDurabilitySetCorrectly() {
1:ba1bd26:         assertEquals("Incorrect default value", ActiveMQActivationSpec.NON_DURABLE_SUBSCRIPTION, activationSpec.getSubscriptionDurability());
1:40a7d3b:     }
1:ba1bd26: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testInvalidSubscriptionDurability() {
1:40a7d3b:         activationSpec.setSubscriptionDurability("foobar");
1:40a7d3b:         PropertyDescriptor[] expected = {subscriptionDurabilityProperty};
1:40a7d3b:         assertActivationSpecInvalid(expected);
1:40a7d3b:     }
1:ba1bd26: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testNullSubscriptionDurability() {
1:40a7d3b:         activationSpec.setSubscriptionDurability(null);
1:40a7d3b:         PropertyDescriptor[] expected = {subscriptionDurabilityProperty};
1:40a7d3b:         assertActivationSpecInvalid(expected);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testSettingNonDurableSubscriptionDurability() {
1:40a7d3b:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.NON_DURABLE_SUBSCRIPTION);
1:40a7d3b:         assertActivationSpecValid();
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     //----------- durable subscriber tests
1:ba1bd26: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testValidDurableSubscriber() {
1:3fc0546:         activationSpec.setDestinationType(Topic.class.getName());
1:40a7d3b:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.DURABLE_SUBSCRIPTION);
1:40a7d3b:         activationSpec.setClientId("foobar");
1:40a7d3b:         activationSpec.setSubscriptionName("foobar");
1:ba1bd26:         assertActivationSpecValid();
1:40a7d3b:         assertTrue(activationSpec.isDurableSubscription());
1:40a7d3b:     }
1:3fc0546: 
1:ba1bd26:     @Test(timeout = 60000)
1:3fc0546:     public void testDurableSubscriberWithQueueDestinationTypeFailure() {
1:3fc0546:         activationSpec.setDestinationType(Queue.class.getName());
1:3fc0546:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.DURABLE_SUBSCRIPTION);
1:3fc0546:         activationSpec.setClientId("foobar");
1:3fc0546:         activationSpec.setSubscriptionName("foobar");
1:3fc0546:         PropertyDescriptor[] expected = {subscriptionDurabilityProperty};
1:3fc0546:         assertActivationSpecInvalid(expected);
1:3fc0546:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testDurableSubscriberNoClientIdNoSubscriptionNameFailure() {
1:3fc0546:         activationSpec.setDestinationType(Topic.class.getName());
1:40a7d3b:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.DURABLE_SUBSCRIPTION);
1:40a7d3b:         activationSpec.setClientId(null);
1:40a7d3b:         assertNull(activationSpec.getClientId());
1:40a7d3b:         activationSpec.setSubscriptionName(null);
1:40a7d3b:         assertNull(activationSpec.getSubscriptionName());
1:40a7d3b:         PropertyDescriptor[] expected = {clientIdProperty, subscriptionNameProperty};
1:40a7d3b:         assertActivationSpecInvalid(expected);
1:ba1bd26:     }
1:ba1bd26: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testDurableSubscriberEmptyClientIdEmptySubscriptionNameFailure() {
1:3fc0546:         activationSpec.setDestinationType(Topic.class.getName());
1:40a7d3b:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.DURABLE_SUBSCRIPTION);
2:40a7d3b:         activationSpec.setClientId(EMPTY_STRING);
1:40a7d3b:         assertNull(activationSpec.getClientId());
2:40a7d3b:         activationSpec.setSubscriptionName(EMPTY_STRING);
1:40a7d3b:         assertNull(activationSpec.getSubscriptionName());
1:40a7d3b:         PropertyDescriptor[] expected = {clientIdProperty, subscriptionNameProperty};
1:40a7d3b:         assertActivationSpecInvalid(expected);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:ba1bd26:     public void testSetEmptyStringButGetNullValue() {
1:ba1bd26:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:ba1bd26: 
1:ba1bd26:         activationSpec.setDestinationType(EMPTY_STRING);
1:ba1bd26:         assertNull("Property not null", activationSpec.getDestinationType());
1:ba1bd26: 
1:ba1bd26:         activationSpec.setMessageSelector(EMPTY_STRING);
1:ba1bd26:         assertNull("Property not null", activationSpec.getMessageSelector());
1:ba1bd26: 
1:ba1bd26:         activationSpec.setDestination(EMPTY_STRING);
1:ba1bd26:         assertNull("Property not null", activationSpec.getDestination());
1:ba1bd26: 
1:ba1bd26:         activationSpec.setUserName(EMPTY_STRING);
1:ba1bd26:         assertNull("Property not null", activationSpec.getUserName());
1:ba1bd26: 
1:ba1bd26:         activationSpec.setPassword(EMPTY_STRING);
1:ba1bd26:         assertNull("Property not null", activationSpec.getPassword());
1:ba1bd26: 
1:ba1bd26:         activationSpec.setClientId(EMPTY_STRING);
1:ba1bd26:         assertNull("Property not null", activationSpec.getClientId());
1:ba1bd26: 
1:ba1bd26:         activationSpec.setSubscriptionName(EMPTY_STRING);
1:ba1bd26:         assertNull("Property not null", activationSpec.getSubscriptionName());
1:ba1bd26:     }
1:ba1bd26: 
1:ba1bd26:     //----------- helper methods
1:ba1bd26: 
1:40a7d3b:     private void assertActivationSpecValid() {
1:40a7d3b:         try {
1:40a7d3b:             activationSpec.validate();
1:40a7d3b:         } catch (InvalidPropertyException e) {
1:40a7d3b:             fail("InvalidPropertyException should not be thrown");
1:40a7d3b:         }
1:40a7d3b:     }
1:ba1bd26: 
1:40a7d3b:     private void assertActivationSpecInvalid(PropertyDescriptor[] expected) {
1:40a7d3b:         assertActivationSpecInvalid(activationSpec, expected);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void assertActivationSpecInvalid(ActiveMQActivationSpec testActivationSpec, PropertyDescriptor[] expected) {
1:40a7d3b:         try {
1:40a7d3b:             testActivationSpec.validate();
1:40a7d3b:             fail("InvalidPropertyException should have been thrown");
1:40a7d3b:         } catch (InvalidPropertyException e) {
1:40a7d3b:             PropertyDescriptor[] actual = e.getInvalidPropertyDescriptors();
1:ba1bd26:             assertDescriptorsAreEqual(expected, actual);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     private static void assertDescriptorsAreEqual(PropertyDescriptor[] expected, PropertyDescriptor[] actual) {
1:40a7d3b:         /*
1:ba1bd26:         * This is kind of ugly.  I originally created two HashSets and did an assertEquals(set1, set2)
1:ba1bd26:         * but because of a bug in the PropertyDescriptor class, it incorrectly fails.  The problem is that the
1:40a7d3b:         * PropertyDescriptor class implements the equals() method but not the hashCode() method and almost all
1:40a7d3b:         * of the java collection classes use hashCode() for testing equality.  The one exception I found was
1:40a7d3b:         * the ArrayList class which uses equals() for testing equality.  Since Arrays.asList(...) returns an
1:40a7d3b:         * ArrayList, I use it below.  Yes, ugly ... I know.
1:b0c2a40:         *
1:40a7d3b:         * see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4634390
2:40a7d3b:         */
1:40a7d3b:         assertNotNull("No PropertyDescriptors returned", expected);
1:40a7d3b:         assertEquals("PropertyDescriptor array size is incorrect ", expected.length, actual.length);
1:540dd5c:         List<PropertyDescriptor> expectedList = Arrays.asList(expected);
1:540dd5c:         List<PropertyDescriptor> actualList = Arrays.asList(actual);
1:40a7d3b:         assertTrue("Incorrect PropertyDescriptors returned", expectedList.containsAll(actualList));
1:40a7d3b:     }
1:ba1bd26: 
1:40a7d3b:     public void testSelfEquality() {
1:40a7d3b:         assertEquality(activationSpec, activationSpec);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void testSamePropertiesButNotEqual() {
1:40a7d3b:         assertNonEquality(new ActiveMQActivationSpec(), new ActiveMQActivationSpec());
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void assertEquality(ActiveMQActivationSpec leftSpec, ActiveMQActivationSpec rightSpec) {
1:40a7d3b:         assertTrue("ActiveMQActivationSpecs are not equal", leftSpec.equals(rightSpec));
1:40a7d3b:         assertTrue("ActiveMQActivationSpecs are not equal", rightSpec.equals(leftSpec));
1:40a7d3b:         assertTrue("HashCodes are not equal", leftSpec.hashCode() == rightSpec.hashCode());
1:40a7d3b:     }
1:ba1bd26: 
1:40a7d3b:     private void assertNonEquality(ActiveMQActivationSpec leftSpec, ActiveMQActivationSpec rightSpec) {
1:40a7d3b:         assertFalse("ActiveMQActivationSpecs are equal", leftSpec.equals(rightSpec));
1:40a7d3b:         assertFalse("ActiveMQActivationSpecs are equal", rightSpec.equals(leftSpec));
1:40a7d3b:         assertFalse("HashCodes are equal", leftSpec.hashCode() == rightSpec.hashCode());
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.junit.Test;
1: public class ActiveMQActivationSpecTest {
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     //----------- acknowledgeMode tests
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         assertEquals("Incorrect acknowledge mode", ActiveMQActivationSpec.INVALID_ACKNOWLEDGE_MODE,
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     //----------- subscriptionDurability tests
1: 
1:     @Test(timeout = 60000)
1:         assertEquals("Incorrect default value", ActiveMQActivationSpec.NON_DURABLE_SUBSCRIPTION, activationSpec.getSubscriptionDurability());
1: 
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     //----------- durable subscriber tests
1: 
1:     @Test(timeout = 60000)
1:         assertActivationSpecValid();
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     public void testSetEmptyStringButGetNullValue() {
1:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1: 
1:         activationSpec.setDestinationType(EMPTY_STRING);
1:         assertNull("Property not null", activationSpec.getDestinationType());
1: 
1:         activationSpec.setMessageSelector(EMPTY_STRING);
1:         assertNull("Property not null", activationSpec.getMessageSelector());
1: 
1:         activationSpec.setDestination(EMPTY_STRING);
1:         assertNull("Property not null", activationSpec.getDestination());
1: 
1:         activationSpec.setUserName(EMPTY_STRING);
1:         assertNull("Property not null", activationSpec.getUserName());
1: 
1:         activationSpec.setPassword(EMPTY_STRING);
1:         assertNull("Property not null", activationSpec.getPassword());
1: 
1:         activationSpec.setClientId(EMPTY_STRING);
1:         assertNull("Property not null", activationSpec.getClientId());
1: 
1:         activationSpec.setSubscriptionName(EMPTY_STRING);
1:         assertNull("Property not null", activationSpec.getSubscriptionName());
1:     }
1: 
1:     //----------- helper methods
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             assertDescriptorsAreEqual(expected, actual);
1:     private static void assertDescriptorsAreEqual(PropertyDescriptor[] expected, PropertyDescriptor[] actual) {
1:         * This is kind of ugly.  I originally created two HashSets and did an assertEquals(set1, set2)
1:         * but because of a bug in the PropertyDescriptor class, it incorrectly fails.  The problem is that the
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String EMPTY_STRING = "   ";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         List<PropertyDescriptor> expectedList = Arrays.asList(expected);
1:         List<PropertyDescriptor> actualList = Arrays.asList(actual);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:3fc0546
/////////////////////////////////////////////////////////////////////////
1:         activationSpec.setDestinationType(Topic.class.getName());
1: 
1:     public void testDurableSubscriberWithQueueDestinationTypeFailure() {
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.DURABLE_SUBSCRIPTION);
1:         activationSpec.setClientId("foobar");
1:         activationSpec.setSubscriptionName("foobar");
1:         PropertyDescriptor[] expected = {subscriptionDurabilityProperty};
1:         assertActivationSpecInvalid(expected);
1:     }
1:         activationSpec.setDestinationType(Topic.class.getName());
/////////////////////////////////////////////////////////////////////////
1:         activationSpec.setDestinationType(Topic.class.getName());
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.ra.ActiveMQActivationSpec;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /** 
0:  * 
0:  * Copyright 2004 Michael Gaffney
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: import java.beans.IntrospectionException;
1: import java.beans.PropertyDescriptor;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.resource.spi.InvalidPropertyException;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.activemq.command.ActiveMQDestination;
1: 
0: /**
0:  * @version $Revision$
1:  */
0: public class ActiveMQActivationSpecTest extends TestCase {
1: 
1:     private static final String DESTINATION = "defaultQueue";
1:     private static final String DESTINATION_TYPE = Queue.class.getName();
1: 
1:     private ActiveMQActivationSpec activationSpec;
1:     private PropertyDescriptor destinationProperty;
1:     private PropertyDescriptor destinationTypeProperty;
1:     private PropertyDescriptor acknowledgeModeProperty;
1:     private PropertyDescriptor subscriptionDurabilityProperty;
1:     private PropertyDescriptor clientIdProperty;
1:     private PropertyDescriptor subscriptionNameProperty;
0:     private static final String EMPTY_STRING = "   ";
1: 
0:     public ActiveMQActivationSpecTest(String name) {
0:         super(name);
1:     }
1: 
0:     protected void setUp() throws Exception {
0:         super.setUp();
1: 
1:         activationSpec = new ActiveMQActivationSpec();
1:         activationSpec.setDestination(DESTINATION);
1:         activationSpec.setDestinationType(DESTINATION_TYPE);
1: 
1:         destinationProperty = new PropertyDescriptor("destination", ActiveMQActivationSpec.class);
1:         destinationTypeProperty = new PropertyDescriptor("destinationType", ActiveMQActivationSpec.class);
1:         acknowledgeModeProperty = new PropertyDescriptor("acknowledgeMode", ActiveMQActivationSpec.class);
1:         subscriptionDurabilityProperty = new PropertyDescriptor("subscriptionDurability", ActiveMQActivationSpec.class);
1:         clientIdProperty = new PropertyDescriptor("clientId", ActiveMQActivationSpec.class);
1:         subscriptionNameProperty = new PropertyDescriptor("subscriptionName", ActiveMQActivationSpec.class);
1:     }
1: 
1:     public void testDefaultContructionValidation() throws IntrospectionException {
1:         PropertyDescriptor[] expected = {destinationTypeProperty, destinationProperty};
1:         assertActivationSpecInvalid(new ActiveMQActivationSpec(), expected);
1:     }
1: 
1:     public void testMinimalSettings() {
1:         assertEquals(DESTINATION, activationSpec.getDestination());
1:         assertEquals(DESTINATION_TYPE, activationSpec.getDestinationType());
1:         assertActivationSpecValid();
1:     }
1: 
1:     public void testNoDestinationTypeFailure() {
1:         activationSpec.setDestinationType(null);
1:         PropertyDescriptor[] expected = {destinationTypeProperty};
1:         assertActivationSpecInvalid(expected);
1:     }
1: 
1:     public void testInvalidDestinationTypeFailure() {
1:         activationSpec.setDestinationType("foobar");
1:         PropertyDescriptor[] expected = {destinationTypeProperty};
1:         assertActivationSpecInvalid(expected);
1:     }
1: 
1:     public void testQueueDestinationType() {
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         assertActivationSpecValid();
1:     }
1: 
1:     public void testTopicDestinationType() {
1:         activationSpec.setDestinationType(Topic.class.getName());
1:         assertActivationSpecValid();
1:     }
1: 
1:     public void testSuccessfulCreateQueueDestination() {
1:         activationSpec.setDestinationType(Queue.class.getName());
1:         activationSpec.setDestination(DESTINATION);
1:         assertActivationSpecValid();
1:         ActiveMQDestination destination = activationSpec.createDestination();
1:         assertNotNull("ActiveMQDestination not created", destination);
1:         assertEquals("Physical name not the same", activationSpec.getDestination(), destination.getPhysicalName());
1:         assertTrue("Destination is not a Queue", destination instanceof Queue);
1:     }
1: 
1:     public void testSuccessfulCreateTopicDestination() {
1:         activationSpec.setDestinationType(Topic.class.getName());
1:         activationSpec.setDestination(DESTINATION);
1:         assertActivationSpecValid();
1:         ActiveMQDestination destination = activationSpec.createDestination();
1:         assertNotNull("ActiveMQDestination not created", destination);
1:         assertEquals("Physical name not the same", activationSpec.getDestination(), destination.getPhysicalName());
1:         assertTrue("Destination is not a Topic", destination instanceof Topic);
1:     }
1: 
1:     public void testCreateDestinationIncorrectType() {
1:         activationSpec.setDestinationType(null);
1:         activationSpec.setDestination(DESTINATION);
1:         ActiveMQDestination destination = activationSpec.createDestination();
1:         assertNull("ActiveMQDestination should not have been created", destination);
1:     }
1: 
1:     public void testCreateDestinationIncorrectDestinationName() {
1:         activationSpec.setDestinationType(Topic.class.getName());
1:         activationSpec.setDestination(null);
1:         ActiveMQDestination destination = activationSpec.createDestination();
1:         assertNull("ActiveMQDestination should not have been created", destination);
1:     }
1: 
0: //----------- acknowledgeMode tests
1:     public void testDefaultAcknowledgeModeSetCorrectly() {
1:         assertEquals("Incorrect default value", ActiveMQActivationSpec.AUTO_ACKNOWLEDGE_MODE,
1:                 activationSpec.getAcknowledgeMode());
1:         assertEquals("Incorrect default value", Session.AUTO_ACKNOWLEDGE,
1:                 activationSpec.getAcknowledgeModeForSession());
1:     }
1: 
1:     public void testInvalidAcknowledgeMode() {
1:         activationSpec.setAcknowledgeMode("foobar");
1:         PropertyDescriptor[] expected = {acknowledgeModeProperty};
1:         assertActivationSpecInvalid(expected);
1:         assertEquals("Incorrect acknowledge mode", ActiveMQActivationSpec.INVALID_ACKNOWLEDGE_MODE, 
1:                 activationSpec.getAcknowledgeModeForSession());
1:     }
1: 
1:     public void testNoAcknowledgeMode() {
1:         activationSpec.setAcknowledgeMode(null);
1:         PropertyDescriptor[] expected = {acknowledgeModeProperty};
1:         assertActivationSpecInvalid(expected);
1:         assertEquals("Incorrect acknowledge mode", ActiveMQActivationSpec.INVALID_ACKNOWLEDGE_MODE,
1:                 activationSpec.getAcknowledgeModeForSession());
1:     }
1: 
1:     public void testSettingAutoAcknowledgeMode() {
1:         activationSpec.setAcknowledgeMode(ActiveMQActivationSpec.AUTO_ACKNOWLEDGE_MODE);
1:         assertActivationSpecValid();
1:         assertEquals("Incorrect acknowledge mode", Session.AUTO_ACKNOWLEDGE,
1:                 activationSpec.getAcknowledgeModeForSession());
1:     }
1: 
1:     public void testSettingDupsOkAcknowledgeMode() {
1:         activationSpec.setAcknowledgeMode(ActiveMQActivationSpec.DUPS_OK_ACKNOWLEDGE_MODE);
1:         assertActivationSpecValid();
1:         assertEquals("Incorrect acknowledge mode", Session.DUPS_OK_ACKNOWLEDGE,
1:                 activationSpec.getAcknowledgeModeForSession());
1:     }
1: 
0: //----------- subscriptionDurability tests
1:     public void testDefaultSubscriptionDurabilitySetCorrectly() {
0:         assertEquals("Incorrect default value", ActiveMQActivationSpec.NON_DURABLE_SUBSCRIPTION,
0:                 activationSpec.getSubscriptionDurability());
1:     }
1:     
1:     public void testInvalidSubscriptionDurability() {
1:         activationSpec.setSubscriptionDurability("foobar");
1:         PropertyDescriptor[] expected = {subscriptionDurabilityProperty};
1:         assertActivationSpecInvalid(expected);
1:     }
1: 
1:     public void testNullSubscriptionDurability() {
1:         activationSpec.setSubscriptionDurability(null);
1:         PropertyDescriptor[] expected = {subscriptionDurabilityProperty};
1:         assertActivationSpecInvalid(expected);
1:     }
1: 
1:     public void testSettingNonDurableSubscriptionDurability() {
1:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.NON_DURABLE_SUBSCRIPTION);
1:         assertActivationSpecValid();
1:     }
1: 
0: //----------- durable subscriber tests    
1:     public void testValidDurableSubscriber() {
1:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.DURABLE_SUBSCRIPTION);
1:         activationSpec.setClientId("foobar");
1:         activationSpec.setSubscriptionName("foobar");
1:         assertActivationSpecValid();        
1:         assertTrue(activationSpec.isDurableSubscription());
1:     }
1:     
1:     public void testDurableSubscriberNoClientIdNoSubscriptionNameFailure() {
1:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.DURABLE_SUBSCRIPTION);
1:         activationSpec.setClientId(null);
1:         assertNull(activationSpec.getClientId());
1:         activationSpec.setSubscriptionName(null);
1:         assertNull(activationSpec.getSubscriptionName());
1:         PropertyDescriptor[] expected = {clientIdProperty, subscriptionNameProperty};
1:         assertActivationSpecInvalid(expected);
1:     }    
1:     
1:     public void testDurableSubscriberEmptyClientIdEmptySubscriptionNameFailure() {
1:         activationSpec.setSubscriptionDurability(ActiveMQActivationSpec.DURABLE_SUBSCRIPTION);
1:         activationSpec.setClientId(EMPTY_STRING);
1:         assertNull(activationSpec.getClientId());
1:         activationSpec.setSubscriptionName(EMPTY_STRING);
1:         assertNull(activationSpec.getSubscriptionName());
1:         PropertyDescriptor[] expected = {clientIdProperty, subscriptionNameProperty};
1:         assertActivationSpecInvalid(expected);
1:     }    
1:     
0:     public void testSetEmptyStringButGetNullValue() {
0:         ActiveMQActivationSpec activationSpec = new ActiveMQActivationSpec();
1:         
0:         activationSpec.setDestinationType(EMPTY_STRING);
0:         assertNull("Property not null", activationSpec.getDestinationType());
1:         
0:         activationSpec.setMessageSelector(EMPTY_STRING);
0:         assertNull("Property not null", activationSpec.getMessageSelector());
1:         
0:         activationSpec.setDestination(EMPTY_STRING);
0:         assertNull("Property not null", activationSpec.getDestination());
1:         
0:         activationSpec.setUserName(EMPTY_STRING);
0:         assertNull("Property not null", activationSpec.getUserName());
1:         
0:         activationSpec.setPassword(EMPTY_STRING);
0:         assertNull("Property not null", activationSpec.getPassword());
1:         
1:         activationSpec.setClientId(EMPTY_STRING);
0:         assertNull("Property not null", activationSpec.getClientId());
1:         
1:         activationSpec.setSubscriptionName(EMPTY_STRING);
0:         assertNull("Property not null", activationSpec.getSubscriptionName());        
1:     }
1: 
0: //----------- helper methods    
1:     private void assertActivationSpecValid() {
1:         try {
1:             activationSpec.validate();
1:         } catch (InvalidPropertyException e) {
1:             fail("InvalidPropertyException should not be thrown");
1:         }
1:     }
1:     
1:     private void assertActivationSpecInvalid(PropertyDescriptor[] expected) {
1:         assertActivationSpecInvalid(activationSpec, expected);
1:     }
1: 
1:     private void assertActivationSpecInvalid(ActiveMQActivationSpec testActivationSpec, PropertyDescriptor[] expected) {
1:         try {
1:             testActivationSpec.validate();
1:             fail("InvalidPropertyException should have been thrown");
1:         } catch (InvalidPropertyException e) {
1:             PropertyDescriptor[] actual = e.getInvalidPropertyDescriptors();
0:             assertEquals(expected, actual);
1:         }
1:     }
1: 
0:     private static void assertEquals(PropertyDescriptor[] expected, PropertyDescriptor[] actual) {
1:         /*
0:         * This is kind of ugly.  I originally created two HashSets and did an assertEquals(set1, set2) 
0:         * but because of a bug in the PropertyDescriptor class, it incorrectly fails.  The problem is that the 
1:         * PropertyDescriptor class implements the equals() method but not the hashCode() method and almost all
1:         * of the java collection classes use hashCode() for testing equality.  The one exception I found was
1:         * the ArrayList class which uses equals() for testing equality.  Since Arrays.asList(...) returns an
1:         * ArrayList, I use it below.  Yes, ugly ... I know.
0:         *
1:         * see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4634390
1:         */
1:         assertNotNull("No PropertyDescriptors returned", expected);
1:         assertEquals("PropertyDescriptor array size is incorrect ", expected.length, actual.length);
0:         List expectedList = Arrays.asList(expected);
0:         List actualList = Arrays.asList(actual);
1:         assertTrue("Incorrect PropertyDescriptors returned", expectedList.containsAll(actualList));
1:     }
1:     
1:     public void testSelfEquality() {
1:         assertEquality(activationSpec, activationSpec);
1:     }
1: 
1:     public void testSamePropertiesButNotEqual() {
1:         assertNonEquality(new ActiveMQActivationSpec(), new ActiveMQActivationSpec());
1:     }
1: 
1:     private void assertEquality(ActiveMQActivationSpec leftSpec, ActiveMQActivationSpec rightSpec) {
1:         assertTrue("ActiveMQActivationSpecs are not equal", leftSpec.equals(rightSpec));
1:         assertTrue("ActiveMQActivationSpecs are not equal", rightSpec.equals(leftSpec));
1:         assertTrue("HashCodes are not equal", leftSpec.hashCode() == rightSpec.hashCode());
1:     }
1:     
1:     private void assertNonEquality(ActiveMQActivationSpec leftSpec, ActiveMQActivationSpec rightSpec) {
1:         assertFalse("ActiveMQActivationSpecs are equal", leftSpec.equals(rightSpec));
1:         assertFalse("ActiveMQActivationSpecs are equal", rightSpec.equals(leftSpec));
1:         assertFalse("HashCodes are equal", leftSpec.hashCode() == rightSpec.hashCode());
1:     }
1:     
1: }
============================================================================