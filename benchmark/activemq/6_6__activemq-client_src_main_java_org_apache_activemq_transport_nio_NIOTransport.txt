1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
4:885c379:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
1:885c379: package org.apache.activemq.transport.nio;
14:885c379: 
1:885c379: import java.io.DataInputStream;
1:885c379: import java.io.DataOutputStream;
1:885c379: import java.io.EOFException;
1:885c379: import java.io.IOException;
1:885c379: import java.net.Socket;
1:885c379: import java.net.URI;
1:885c379: import java.net.UnknownHostException;
1:885c379: import java.nio.ByteBuffer;
1:885c379: import java.nio.channels.SelectionKey;
1:885c379: import java.nio.channels.SocketChannel;
1:885c379: 
1:885c379: import javax.net.SocketFactory;
1:885c379: 
1:e5e99d7: import org.apache.activemq.openwire.OpenWireFormat;
1:885c379: import org.apache.activemq.transport.Transport;
1:885c379: import org.apache.activemq.transport.tcp.TcpTransport;
1:885c379: import org.apache.activemq.util.IOExceptionSupport;
1:885c379: import org.apache.activemq.util.ServiceStopper;
1:74a7a8b: import org.apache.activemq.wireformat.WireFormat;
1:885c379: 
1:885c379: /**
1:885c379:  * An implementation of the {@link Transport} interface using raw tcp/ip
1:848adc4:  *
1:848adc4:  *
1:885c379:  */
1:885c379: public class NIOTransport extends TcpTransport {
1:885c379: 
1:8bf987b:     // private static final Logger log = LoggerFactory.getLogger(NIOTransport.class);
1:e504086:     protected SocketChannel channel;
1:e504086:     protected SelectorSelection selection;
1:e504086:     protected ByteBuffer inputBuffer;
1:e504086:     protected ByteBuffer currentBuffer;
1:e504086:     protected int nextFrameSize;
1:885c379: 
1:f812e34:     public NIOTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:f812e34:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:f812e34:     }
1:885c379: 
1:f812e34:     public NIOTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:f812e34:         super(wireFormat, socket);
1:f812e34:     }
1:885c379: 
1:04ee70a:     /**
1:04ee70a:      * @param format
1:04ee70a:      * @param socket
1:04ee70a:      * @param initBuffer
1:04ee70a:      * @throws IOException
1:04ee70a:      */
1:04ee70a:     public NIOTransport(WireFormat format, Socket socket, InitBuffer initBuffer) throws IOException {
1:04ee70a:         super(format, socket, initBuffer);
1:04ee70a:     }
1:04ee70a: 
1:848adc4:     @Override
1:f812e34:     protected void initializeStreams() throws IOException {
1:f812e34:         channel = socket.getChannel();
1:f812e34:         channel.configureBlocking(false);
1:f812e34: 
1:f812e34:         // listen for events telling us when the socket is readable.
1:f812e34:         selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
1:848adc4:             @Override
1:f812e34:             public void onSelect(SelectorSelection selection) {
1:f812e34:                 serviceRead();
1:f812e34:             }
1:f812e34: 
1:848adc4:             @Override
1:f812e34:             public void onError(SelectorSelection selection, Throwable error) {
1:f812e34:                 if (error instanceof IOException) {
1:f812e34:                     onException((IOException)error);
1:f812e34:                 } else {
1:f812e34:                     onException(IOExceptionSupport.create(error));
1:f812e34:                 }
1:f812e34:             }
1:f812e34:         });
1:f812e34: 
1:f812e34:         // Send the data via the channel
1:f812e34:         // inputBuffer = ByteBuffer.allocateDirect(8*1024);
1:934a30a:         inputBuffer = ByteBuffer.allocateDirect(getIoBufferSize());
2:885c379:         currentBuffer = inputBuffer;
1:f812e34:         nextFrameSize = -1;
1:885c379:         currentBuffer.limit(4);
1:6f524bf:         NIOOutputStream outPutStream = new NIOOutputStream(channel, getIoBufferSize());
1:2189100:         this.dataOut = new DataOutputStream(outPutStream);
1:2189100:         this.buffOut = outPutStream;
1:f812e34:     }
1:f812e34: 
1:04ee70a:     protected int readFromBuffer() throws IOException {
1:04ee70a:         return channel.read(currentBuffer);
1:04ee70a:     }
1:04ee70a: 
1:e504086:     protected void serviceRead() {
1:885c379:         try {
1:f812e34:             while (true) {
1:f812e34: 
1:04ee70a:                 int readSize = readFromBuffer();
1:f812e34:                 if (readSize == -1) {
1:f812e34:                     onException(new EOFException());
1:f812e34:                     selection.close();
1:f812e34:                     break;
1:f812e34:                 }
1:f812e34:                 if (readSize == 0) {
1:f812e34:                     break;
1:f812e34:                 }
1:848adc4: 
1:848adc4:                 this.receiveCounter += readSize;
1:fc00993:                 if (currentBuffer.hasRemaining()) {
1:f812e34:                     continue;
1:fc00993:                 }
1:f812e34: 
1:f812e34:                 // Are we trying to figure out the size of the next frame?
1:f812e34:                 if (nextFrameSize == -1) {
1:f812e34:                     assert inputBuffer == currentBuffer;
1:f812e34: 
1:f812e34:                     // If the frame is too big to fit in our direct byte buffer,
1:f812e34:                     // Then allocate a non direct byte buffer of the right size
1:f812e34:                     // for it.
1:f812e34:                     inputBuffer.flip();
1:f812e34:                     nextFrameSize = inputBuffer.getInt() + 4;
1:885c379: 
1:e5e99d7:                     if (wireFormat instanceof OpenWireFormat) {
1:e5e99d7:                         long maxFrameSize = ((OpenWireFormat)wireFormat).getMaxFrameSize();
1:e5e99d7:                         if (nextFrameSize > maxFrameSize) {
1:e5e99d7:                             throw new IOException("Frame size of " + (nextFrameSize / (1024 * 1024)) + " MB larger than max allowed " + (maxFrameSize / (1024 * 1024)) + " MB");
9:885c379:                         }
1:885c379:                     }
1:885c379: 
1:f812e34:                     if (nextFrameSize > inputBuffer.capacity()) {
1:934a30a:                         currentBuffer = ByteBuffer.allocateDirect(nextFrameSize);
1:f812e34:                         currentBuffer.putInt(nextFrameSize);
1:f812e34:                     } else {
1:f812e34:                         inputBuffer.limit(nextFrameSize);
1:f812e34:                     }
1:f812e34: 
1:f812e34:                 } else {
1:f812e34:                     currentBuffer.flip();
1:f812e34: 
1:f812e34:                     Object command = wireFormat.unmarshal(new DataInputStream(new NIOInputStream(currentBuffer)));
1:848adc4:                     doConsume(command);
1:f812e34: 
1:f812e34:                     nextFrameSize = -1;
1:f812e34:                     inputBuffer.clear();
1:f812e34:                     inputBuffer.limit(4);
1:f812e34:                     currentBuffer = inputBuffer;
1:f812e34:                 }
1:f812e34: 
1:885c379:             }
1:f812e34: 
1:885c379:         } catch (IOException e) {
1:885c379:             onException(e);
1:885c379:         } catch (Throwable e) {
1:f812e34:             onException(IOExceptionSupport.create(e));
1:885c379:         }
1:885c379:     }
1:885c379: 
1:848adc4:     @Override
1:f812e34:     protected void doStart() throws Exception {
1:885c379:         connect();
1:885c379:         selection.setInterestOps(SelectionKey.OP_READ);
1:885c379:         selection.enable();
1:885c379:     }
1:885c379: 
1:848adc4:     @Override
1:f812e34:     protected void doStop(ServiceStopper stopper) throws Exception {
1:a7f9164:         if (selection != null) {
1:192ea88:             selection.close();
1:036f2a8:             selection = null;
1:885c379:         }
1:f812e34:         super.doStop(stopper);
1:f812e34:     }
1:885c379: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:934a30a
/////////////////////////////////////////////////////////////////////////
1:         inputBuffer = ByteBuffer.allocateDirect(getIoBufferSize());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                         currentBuffer = ByteBuffer.allocateDirect(nextFrameSize);
commit:6f524bf
/////////////////////////////////////////////////////////////////////////
0:         inputBuffer = ByteBuffer.allocate(getIoBufferSize());
1:         NIOOutputStream outPutStream = new NIOOutputStream(channel, getIoBufferSize());
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param format
1:      * @param socket
1:      * @param initBuffer
1:      * @throws IOException
1:      */
1:     public NIOTransport(WireFormat format, Socket socket, InitBuffer initBuffer) throws IOException {
1:         super(format, socket, initBuffer);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected int readFromBuffer() throws IOException {
1:         return channel.read(currentBuffer);
1:     }
1: 
1:                 int readSize = readFromBuffer();
author:Timothy Bish
-------------------------------------------------------------------------------
commit:848adc4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:                 this.receiveCounter += readSize;
1: 
/////////////////////////////////////////////////////////////////////////
1:                     doConsume(command);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:192ea88
/////////////////////////////////////////////////////////////////////////
1:         selection.close();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:                 if (currentBuffer.hasRemaining()) {
1:                 }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.wireformat.WireFormat;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     // private static final Log log = LogFactory.getLog(NIOTransport.class);
0:     private SocketChannel channel;
0:     private SelectorSelection selection;
0:     private ByteBuffer inputBuffer;
0:     private ByteBuffer currentBuffer;
0:     private int nextFrameSize;
1:     public NIOTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:     }
1:     public NIOTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:         super(wireFormat, socket);
1:     }
1:     protected void initializeStreams() throws IOException {
1:         channel = socket.getChannel();
1:         channel.configureBlocking(false);
1: 
1:         // listen for events telling us when the socket is readable.
1:         selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
1:             public void onSelect(SelectorSelection selection) {
1:                 serviceRead();
1:             }
1: 
1:             public void onError(SelectorSelection selection, Throwable error) {
1:                 if (error instanceof IOException) {
1:                     onException((IOException)error);
1:                 } else {
1:                     onException(IOExceptionSupport.create(error));
1:                 }
1:             }
1:         });
1: 
1:         // Send the data via the channel
1:         // inputBuffer = ByteBuffer.allocateDirect(8*1024);
0:         inputBuffer = ByteBuffer.allocate(8 * 1024);
1:         nextFrameSize = -1;
0:         this.dataOut = new DataOutputStream(new NIOOutputStream(channel, 16 * 1024));
1: 
1:     }
1: 
1:             while (true) {
0:                 int readSize = channel.read(currentBuffer);
1:                 if (readSize == -1) {
1:                     onException(new EOFException());
1:                     selection.close();
1:                     break;
1:                 }
1:                 if (readSize == 0) {
1:                     break;
1:                 }
0:                 if (currentBuffer.hasRemaining())
1:                     continue;
1: 
1:                 // Are we trying to figure out the size of the next frame?
1:                 if (nextFrameSize == -1) {
1:                     assert inputBuffer == currentBuffer;
1: 
1:                     // If the frame is too big to fit in our direct byte buffer,
1:                     // Then allocate a non direct byte buffer of the right size
1:                     // for it.
1:                     inputBuffer.flip();
1:                     nextFrameSize = inputBuffer.getInt() + 4;
1:                     if (nextFrameSize > inputBuffer.capacity()) {
0:                         currentBuffer = ByteBuffer.allocate(nextFrameSize);
1:                         currentBuffer.putInt(nextFrameSize);
1:                     } else {
1:                         inputBuffer.limit(nextFrameSize);
1:                     }
1: 
1:                 } else {
1:                     currentBuffer.flip();
1: 
1:                     Object command = wireFormat.unmarshal(new DataInputStream(new NIOInputStream(currentBuffer)));
0:                     doConsume((Command)command);
1: 
1:                     nextFrameSize = -1;
1:                     inputBuffer.clear();
1:                     inputBuffer.limit(4);
1:                     currentBuffer = inputBuffer;
1:                 }
1: 
1: 
1:             onException(IOExceptionSupport.create(e));
1:     protected void doStart() throws Exception {
1:     protected void doStop(ServiceStopper stopper) throws Exception {
0:         selection.disable();
1:         super.doStop(stopper);
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.SelectionKey;
1: import java.nio.channels.SocketChannel;
1: 
1: import javax.net.SocketFactory;
1: 
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.ServiceStopper;
1: 
1: /**
1:  * An implementation of the {@link Transport} interface using raw tcp/ip
1:  * 
0:  * @version $Revision$
1:  */
1: public class NIOTransport extends TcpTransport {
1: 
0: 	//private static final Log log = LogFactory.getLog(NIOTransport.class);
0: 	private SocketChannel channel;
0: 	private SelectorSelection selection;
0: 	private ByteBuffer inputBuffer;
0: 	private ByteBuffer currentBuffer;
0: 	private int nextFrameSize;
1: 
0: 	public NIOTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
0: 		super(wireFormat, socketFactory, remoteLocation, localLocation);
1: 	}
1: 
0: 	public NIOTransport(WireFormat wireFormat, Socket socket) throws IOException {
0: 		super(wireFormat, socket);
1: 	}
1: 
0: 	protected void initializeStreams() throws IOException {
0: 		channel = socket.getChannel();		
0: 		channel.configureBlocking(false);
1: 		
0: 		// listen for events telling us when the socket is readable.
0: 		selection = SelectorManager.getInstance().register(channel,
0: 				new SelectorManager.Listener() {
0: 					public void onSelect(SelectorSelection selection) {
0: 						serviceRead();
1: 					}
0: 					public void onError(SelectorSelection selection, Throwable error) {
0: 						if( error instanceof IOException ) {
0: 							onException((IOException) error);							
0: 						} else {
0: 							onException(IOExceptionSupport.create(error));							
1: 						}
1: 					}
0: 				});
1: 		
0: 		// Send the data via the channel
0: //        inputBuffer = ByteBuffer.allocateDirect(8*1024);
0:         inputBuffer = ByteBuffer.allocate(8*1024);
1:         currentBuffer = inputBuffer;
0:         nextFrameSize=-1;
1:         currentBuffer.limit(4);
0:         this.dataOut = new DataOutputStream(new NIOOutputStream(channel, 16*1024));
1:         
1: 	}
1: 	
0:     private void serviceRead() {
1:         try {
0:             while( true ) {
1:             	
1: 	
0: 	            int readSize = channel.read(currentBuffer);
0: 	            if( readSize == -1 ) {
0: 					onException(new EOFException());
0: 	                selection.close();
0: 	                break;
1: 	            }
0: 	            if( readSize==0 ) {
0: 	                break;
1: 	            }
1: 	            
0:             	if( currentBuffer.hasRemaining() )
0:             		continue;
1: 
0: 	            // Are we trying to figure out the size of the next frame?
0: 	            if( nextFrameSize==-1 ) {
0: 	            	assert inputBuffer == currentBuffer;
1: 
0: 	            	// If the frame is too big to fit in our direct byte buffer,
0: 	            	// Then allocate a non direct byte buffer of the right size for it.
0: 	            	inputBuffer.flip();
0: 	            	nextFrameSize = inputBuffer.getInt()+4;
0: 	            	if( nextFrameSize > inputBuffer.capacity() ) {
0: 	            		currentBuffer = ByteBuffer.allocate(nextFrameSize);
0: 	            		currentBuffer.putInt(nextFrameSize);
0: 	            	} else {
0: 	            		inputBuffer.limit(nextFrameSize);	            		
1: 	            	}
1: 	            	
0:             	} else {
0:             		currentBuffer.flip();
1:     				
0:             		Object command = wireFormat.unmarshal(new DataInputStream(new NIOInputStream(currentBuffer)));
0:             		doConsume((Command) command);
1:             		
0:             		nextFrameSize=-1;
0:     				inputBuffer.clear();
0:     				inputBuffer.limit(4);
1:     				currentBuffer = inputBuffer;
1:             	}
1: 	            
1:             }
1:             
1:         } catch (IOException e) {
1:             onException(e);
1:         } catch (Throwable e) {
0:         	onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
1: 
0: 	protected void doStart() throws Exception {
1:         connect();
1:         selection.setInterestOps(SelectionKey.OP_READ);
1:         selection.enable();
1:     }
1: 
0: 	protected void doStop(ServiceStopper stopper) throws Exception {
0: 		selection.disable();
0: 		super.doStop(stopper);		
1: 	}
1: }
commit:8e8b820
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.transport.nio;
0: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.EOFException;
0: import java.io.IOException;
0: import java.net.Socket;
0: import java.net.URI;
0: import java.net.UnknownHostException;
0: import java.nio.ByteBuffer;
0: import java.nio.channels.SelectionKey;
0: import java.nio.channels.SocketChannel;
0: 
0: import javax.net.SocketFactory;
0: 
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.tcp.TcpTransport;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.ServiceStopper;
0: 
0: /**
0:  * An implementation of the {@link Transport} interface using raw tcp/ip
0:  * 
0:  * @version $Revision$
0:  */
0: public class NIOTransport extends TcpTransport {
0: 
0: 	//private static final Log log = LogFactory.getLog(NIOTransport.class);
0: 	private SocketChannel channel;
0: 	private SelectorSelection selection;
0: 	private ByteBuffer inputBuffer;
0: 	private ByteBuffer currentBuffer;
0: 	private int nextFrameSize;
0: 
0: 	public NIOTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
0: 		super(wireFormat, socketFactory, remoteLocation, localLocation);
0: 	}
0: 
0: 	public NIOTransport(WireFormat wireFormat, Socket socket) throws IOException {
0: 		super(wireFormat, socket);
0: 	}
0: 
0: 	protected void initializeStreams() throws IOException {
0: 		channel = socket.getChannel();		
0: 		channel.configureBlocking(false);
0: 		
0: 		// listen for events telling us when the socket is readable.
0: 		selection = SelectorManager.getInstance().register(channel,
0: 				new SelectorManager.Listener() {
0: 					public void onSelect(SelectorSelection selection) {
0: 						serviceRead();
0: 					}
0: 					public void onError(SelectorSelection selection, Throwable error) {
0: 						if( error instanceof IOException ) {
0: 							onException((IOException) error);							
0: 						} else {
0: 							onException(IOExceptionSupport.create(error));							
0: 						}
0: 					}
0: 				});
0: 		
0: 		// Send the data via the channel
0: //        inputBuffer = ByteBuffer.allocateDirect(8*1024);
0:         inputBuffer = ByteBuffer.allocate(8*1024);
0:         currentBuffer = inputBuffer;
0:         nextFrameSize=-1;
0:         currentBuffer.limit(4);
0:         this.dataOut = new DataOutputStream(new NIOOutputStream(channel, 16*1024));
0:         
0: 	}
0: 	
0:     private void serviceRead() {
0:         try {
0:             while( true ) {
0:             	
0: 	
0: 	            int readSize = channel.read(currentBuffer);
0: 	            if( readSize == -1 ) {
0: 					onException(new EOFException());
0: 	                selection.close();
0: 	                break;
0: 	            }
0: 	            if( readSize==0 ) {
0: 	                break;
0: 	            }
0: 	            
0:             	if( currentBuffer.hasRemaining() )
0:             		continue;
0: 
0: 	            // Are we trying to figure out the size of the next frame?
0: 	            if( nextFrameSize==-1 ) {
0: 	            	assert inputBuffer == currentBuffer;
0: 
0: 	            	// If the frame is too big to fit in our direct byte buffer,
0: 	            	// Then allocate a non direct byte buffer of the right size for it.
0: 	            	inputBuffer.flip();
0: 	            	nextFrameSize = inputBuffer.getInt()+4;
0: 	            	if( nextFrameSize > inputBuffer.capacity() ) {
0: 	            		currentBuffer = ByteBuffer.allocate(nextFrameSize);
0: 	            		currentBuffer.putInt(nextFrameSize);
0: 	            	} else {
0: 	            		inputBuffer.limit(nextFrameSize);	            		
0: 	            	}
0: 	            	
0:             	} else {
0:             		currentBuffer.flip();
0:     				
0:             		Object command = wireFormat.unmarshal(new DataInputStream(new NIOInputStream(currentBuffer)));
0:             		doConsume((Command) command);
0:             		
0:             		nextFrameSize=-1;
0:     				inputBuffer.clear();
0:     				inputBuffer.limit(4);
0:     				currentBuffer = inputBuffer;
0:             	}
0: 	            
0:             }
0:             
0:         } catch (IOException e) {
0:             onException(e);
0:         } catch (Throwable e) {
0:         	onException(IOExceptionSupport.create(e));
0:         }
0:     }
0: 
0: 
0: 	protected void doStart() throws Exception {
0:         connect();
0:         selection.setInterestOps(SelectionKey.OP_READ);
0:         selection.enable();
0:     }
0: 
0: 	protected void doStop(ServiceStopper stopper) throws Exception {
0: 		selection.disable();
0: 		super.doStop(stopper);		
0: 	}
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:036f2a8
/////////////////////////////////////////////////////////////////////////
1:             selection = null;
commit:e504086
/////////////////////////////////////////////////////////////////////////
1:     protected SocketChannel channel;
1:     protected SelectorSelection selection;
1:     protected ByteBuffer inputBuffer;
1:     protected ByteBuffer currentBuffer;
1:     protected int nextFrameSize;
/////////////////////////////////////////////////////////////////////////
1:     protected void serviceRead() {
commit:e5e99d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.openwire.OpenWireFormat;
/////////////////////////////////////////////////////////////////////////
0: 
1:                     if (wireFormat instanceof OpenWireFormat) {
1:                         long maxFrameSize = ((OpenWireFormat)wireFormat).getMaxFrameSize();
1:                         if (nextFrameSize > maxFrameSize) {
1:                             throw new IOException("Frame size of " + (nextFrameSize / (1024 * 1024)) + " MB larger than max allowed " + (maxFrameSize / (1024 * 1024)) + " MB");
0:                         }
0: 
commit:d0b43c1
/////////////////////////////////////////////////////////////////////////
0:                     if (nextFrameSize > maxFrameSize) {
0:                         throw new IOException("Frame size of " + (nextFrameSize / (1024 * 1024)) + " MB larger than max allowed " + (maxFrameSize / (1024 * 1024)) + " MB");
0:                     }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1:     // private static final Logger log = LoggerFactory.getLogger(NIOTransport.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:a7f9164
/////////////////////////////////////////////////////////////////////////
1:         if (selection != null) {
0:             selection.close();
0:         }
commit:2189100
/////////////////////////////////////////////////////////////////////////
0:         NIOOutputStream outPutStream = new NIOOutputStream(channel, 16 * 1024);
1:         this.dataOut = new DataOutputStream(outPutStream);
1:         this.buffOut = outPutStream;
============================================================================