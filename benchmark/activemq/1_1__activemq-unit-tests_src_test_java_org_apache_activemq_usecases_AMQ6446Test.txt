1:5385fd1: /**
1:5385fd1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5385fd1:  * contributor license agreements.  See the NOTICE file distributed with
1:5385fd1:  * this work for additional information regarding copyright ownership.
1:5385fd1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5385fd1:  * (the "License"); you may not use this file except in compliance with
1:5385fd1:  * the License.  You may obtain a copy of the License at
1:5385fd1:  *
1:5385fd1:  * http://www.apache.org/licenses/LICENSE-2.0
1:5385fd1:  *
1:5385fd1:  * Unless required by applicable law or agreed to in writing, software
1:5385fd1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5385fd1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5385fd1:  * See the License for the specific language governing permissions and
1:5385fd1:  * limitations under the License.
1:5385fd1:  */
1:5385fd1: package org.apache.activemq.usecases;
1:5385fd1: 
1:5385fd1: import org.apache.activemq.ActiveMQConnectionFactory;
1:5385fd1: import org.apache.activemq.broker.BrokerFactory;
1:5385fd1: import org.apache.activemq.broker.BrokerService;
1:5385fd1: import org.apache.activemq.util.DefaultTestAppender;
1:5385fd1: import org.apache.log4j.Level;
1:5385fd1: import org.apache.log4j.Logger;
1:5385fd1: import org.apache.log4j.spi.LoggingEvent;
1:5385fd1: import org.junit.After;
1:5385fd1: import org.junit.Before;
1:5385fd1: import org.junit.Test;
1:5385fd1: 
1:5385fd1: import javax.jms.Connection;
1:5385fd1: import java.util.Collection;
1:5385fd1: import java.util.HashSet;
1:5385fd1: import java.util.LinkedList;
1:5385fd1: import java.util.regex.Matcher;
1:5385fd1: import java.util.regex.Pattern;
1:5385fd1: 
1:5385fd1: import static org.junit.Assert.assertFalse;
1:5385fd1: import static org.junit.Assert.assertTrue;
1:5385fd1: 
1:5385fd1: public class AMQ6446Test {
1:5385fd1: 
1:5385fd1:     private BrokerService brokerService;
1:5385fd1:     LinkedList<Connection> connections = new LinkedList<>();
1:5385fd1: 
1:5385fd1:     @Test
1:5385fd1:     public void test2Connections() throws Exception {
1:5385fd1:         final String urlTraceParam = "?trace=true";
1:5385fd1:         startBroker(urlTraceParam);
1:5385fd1:         final HashSet<String> loggers = new HashSet<String>();
1:5385fd1:         final HashSet<String> messages = new HashSet<String>();
1:5385fd1: 
1:5385fd1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:5385fd1:             @Override
1:5385fd1:             public void doAppend(LoggingEvent event) {
1:5385fd1:                 loggers.add(event.getLoggerName());
1:5385fd1:                 messages.add(event.getRenderedMessage());
1:5385fd1:             }
1:5385fd1:         };
1:5385fd1: 
1:5385fd1:         Logger.getRootLogger().addAppender(appender);
1:5385fd1:         Logger.getRootLogger().setLevel(Level.DEBUG);
1:5385fd1: 
1:5385fd1:         String brokerUrlWithTrace = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString() +
1:5385fd1:                 urlTraceParam;
1:5385fd1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlWithTrace);
1:5385fd1: 
1:5385fd1:         for (int i=0; i<2; i++) {
1:5385fd1:             Connection c = factory.createConnection();
1:5385fd1:             c.start();
1:5385fd1:             connections.add(c);
1:5385fd1:         }
1:5385fd1: 
1:5385fd1:         Logger.getRootLogger().removeAppender(appender);
1:5385fd1: 
1:5385fd1:         // no logger ends with :2
1:5385fd1:         assertFalse(foundMatch(loggers, ".*:2$"));
1:5385fd1: 
1:5385fd1:         // starts with 000000x:
1:5385fd1:         assertTrue(foundMatch(messages, "^0+\\d:.*"));
1:5385fd1:     }
1:5385fd1: 
1:5385fd1:     public boolean foundMatch(Collection<String> values, String regex) {
1:5385fd1:         boolean found = false;
1:5385fd1:         Pattern p = Pattern.compile(regex);
1:5385fd1: 
1:5385fd1:         for (String input: values) {
1:5385fd1:             Matcher m = p.matcher(input);
1:5385fd1:             found =  m.matches();
1:5385fd1:             if (found) {
1:5385fd1:                 break;
1:5385fd1:             }
1:5385fd1:         }
1:5385fd1:         return found;
1:5385fd1:     }
1:5385fd1: 
1:5385fd1:     @Test
1:5385fd1:     public void test2ConnectionsLegacy() throws Exception {
1:5385fd1:         final String legacySupportParam = "?trace=true&jmxPort=22";
1:5385fd1:         startBroker(legacySupportParam);
1:5385fd1: 
1:5385fd1:         final HashSet<String> loggers = new HashSet<String>();
1:5385fd1:         final HashSet<String> messages = new HashSet<String>();
1:5385fd1: 
1:5385fd1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:5385fd1:             @Override
1:5385fd1:             public void doAppend(LoggingEvent event) {
1:5385fd1:                 loggers.add(event.getLoggerName());
1:5385fd1:                 messages.add(event.getRenderedMessage());
1:5385fd1:             }
1:5385fd1:         };
1:5385fd1: 
1:5385fd1:         Logger.getRootLogger().addAppender(appender);
1:5385fd1:         Logger.getRootLogger().setLevel(Level.TRACE);
1:5385fd1: 
1:5385fd1:         String brokerUrlWithTrace = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString() +
1:5385fd1:                 legacySupportParam;
1:5385fd1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlWithTrace);
1:5385fd1: 
1:5385fd1:         for (int i=0; i<2; i++) {
1:5385fd1:             Connection c = factory.createConnection();
1:5385fd1:             c.start();
1:5385fd1:             connections.add(c);
1:5385fd1:         }
1:5385fd1: 
1:5385fd1:         Logger.getRootLogger().removeAppender(appender);
1:5385fd1: 
1:5385fd1:         // logger ends with :2
1:5385fd1:         assertTrue(foundMatch(loggers, ".*:2$"));
1:5385fd1: 
1:5385fd1:         // starts with 000000x:
1:5385fd1:         assertFalse(foundMatch(messages, "^0+\\d:.*"));
1:5385fd1: 
1:5385fd1:     }
1:5385fd1: 
1:5385fd1:     @After
1:5385fd1:     public void tearDown() throws Exception {
1:5385fd1:         for (Connection connection : connections) {
1:5385fd1:             try {
1:5385fd1:                 connection.close();
1:5385fd1:             } catch (Exception ignored) {}
1:5385fd1:         }
1:5385fd1:         brokerService.stop();
1:5385fd1:         brokerService.waitUntilStopped();
1:5385fd1:     }
1:5385fd1: 
1:5385fd1:     public void startBroker(String urlParam) throws Exception {
1:5385fd1:         brokerService = BrokerFactory.createBroker("broker:(tcp://0.0.0.0:0" + urlParam + ")/localhost?useJmx=false&persistent=false");
1:5385fd1:         brokerService.start();
1:5385fd1:         brokerService.waitUntilStarted();
1:5385fd1:     }
1:5385fd1: 
1:5385fd1: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5385fd1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import javax.jms.Connection;
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.LinkedList;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class AMQ6446Test {
1: 
1:     private BrokerService brokerService;
1:     LinkedList<Connection> connections = new LinkedList<>();
1: 
1:     @Test
1:     public void test2Connections() throws Exception {
1:         final String urlTraceParam = "?trace=true";
1:         startBroker(urlTraceParam);
1:         final HashSet<String> loggers = new HashSet<String>();
1:         final HashSet<String> messages = new HashSet<String>();
1: 
1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 loggers.add(event.getLoggerName());
1:                 messages.add(event.getRenderedMessage());
1:             }
1:         };
1: 
1:         Logger.getRootLogger().addAppender(appender);
1:         Logger.getRootLogger().setLevel(Level.DEBUG);
1: 
1:         String brokerUrlWithTrace = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString() +
1:                 urlTraceParam;
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlWithTrace);
1: 
1:         for (int i=0; i<2; i++) {
1:             Connection c = factory.createConnection();
1:             c.start();
1:             connections.add(c);
1:         }
1: 
1:         Logger.getRootLogger().removeAppender(appender);
1: 
1:         // no logger ends with :2
1:         assertFalse(foundMatch(loggers, ".*:2$"));
1: 
1:         // starts with 000000x:
1:         assertTrue(foundMatch(messages, "^0+\\d:.*"));
1:     }
1: 
1:     public boolean foundMatch(Collection<String> values, String regex) {
1:         boolean found = false;
1:         Pattern p = Pattern.compile(regex);
1: 
1:         for (String input: values) {
1:             Matcher m = p.matcher(input);
1:             found =  m.matches();
1:             if (found) {
1:                 break;
1:             }
1:         }
1:         return found;
1:     }
1: 
1:     @Test
1:     public void test2ConnectionsLegacy() throws Exception {
1:         final String legacySupportParam = "?trace=true&jmxPort=22";
1:         startBroker(legacySupportParam);
1: 
1:         final HashSet<String> loggers = new HashSet<String>();
1:         final HashSet<String> messages = new HashSet<String>();
1: 
1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 loggers.add(event.getLoggerName());
1:                 messages.add(event.getRenderedMessage());
1:             }
1:         };
1: 
1:         Logger.getRootLogger().addAppender(appender);
1:         Logger.getRootLogger().setLevel(Level.TRACE);
1: 
1:         String brokerUrlWithTrace = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString() +
1:                 legacySupportParam;
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlWithTrace);
1: 
1:         for (int i=0; i<2; i++) {
1:             Connection c = factory.createConnection();
1:             c.start();
1:             connections.add(c);
1:         }
1: 
1:         Logger.getRootLogger().removeAppender(appender);
1: 
1:         // logger ends with :2
1:         assertTrue(foundMatch(loggers, ".*:2$"));
1: 
1:         // starts with 000000x:
1:         assertFalse(foundMatch(messages, "^0+\\d:.*"));
1: 
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         for (Connection connection : connections) {
1:             try {
1:                 connection.close();
1:             } catch (Exception ignored) {}
1:         }
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     public void startBroker(String urlParam) throws Exception {
1:         brokerService = BrokerFactory.createBroker("broker:(tcp://0.0.0.0:0" + urlParam + ")/localhost?useJmx=false&persistent=false");
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1: }
============================================================================