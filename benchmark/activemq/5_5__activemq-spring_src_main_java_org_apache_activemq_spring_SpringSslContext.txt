1:139a220: /**
1:139a220:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:139a220:  * contributor license agreements.  See the NOTICE file distributed with
1:139a220:  * this work for additional information regarding copyright ownership.
1:139a220:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:139a220:  * (the "License"); you may not use this file except in compliance with
1:139a220:  * the License.  You may obtain a copy of the License at
3:139a220:  *
1:139a220:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:139a220:  * Unless required by applicable law or agreed to in writing, software
1:139a220:  * distributed under the License is distributed on an "AS IS" BASIS,
1:139a220:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:139a220:  * See the License for the specific language governing permissions and
1:139a220:  * limitations under the License.
1:139a220:  */
1:139a220: package org.apache.activemq.spring;
1:174fe15: 
1:139a220: import java.io.InputStream;
1:7fdd58e: import java.net.MalformedURLException;
1:139a220: import java.security.KeyStore;
1:139a220: import java.security.NoSuchAlgorithmException;
1:139a220: import java.security.SecureRandom;
1:993d561: import java.security.Security;
1:0fd174b: import java.security.cert.*;
1:139a220: import java.util.ArrayList;
1:139a220: import java.util.Arrays;
1:139a220: import java.util.Collection;
11:139a220: 
1:09fab74: import javax.annotation.PostConstruct;
1:0fd174b: import javax.net.ssl.*;
1:139a220: 
1:139a220: import org.apache.activemq.broker.SslContext;
1:0fd174b: import org.slf4j.Logger;
1:0fd174b: import org.slf4j.LoggerFactory;
1:0fd174b: import org.springframework.core.io.Resource;
1:139a220: 
1:139a220: /**
1:139a220:  * Extends the SslContext so that it's easier to configure from spring.
1:174fe15:  *
1:139a220:  * @org.apache.xbean.XBean element="sslContext"
1:174fe15:  *
1:174fe15:  *
1:139a220:  */
1:174fe15: public class SpringSslContext extends SslContext {
1:174fe15: 
1:0fd174b:     private static final transient Logger LOG = LoggerFactory.getLogger(SpringSslContext.class);
1:0fd174b: 
1:139a220:     private String keyStoreType="jks";
1:139a220:     private String trustStoreType="jks";
1:139a220: 
1:174fe15:     private String secureRandomAlgorithm="SHA1PRNG";
1:139a220:     private String keyStoreAlgorithm=KeyManagerFactory.getDefaultAlgorithm();
1:139a220:     private String trustStoreAlgorithm=TrustManagerFactory.getDefaultAlgorithm();
1:139a220: 
1:7fdd58e:     private String keyStore;
1:7fdd58e:     private String trustStore;
1:139a220: 
1:d5c86b0:     private String keyStoreKeyPassword;
1:139a220:     private String keyStorePassword;
1:139a220:     private String trustStorePassword;
1:139a220: 
1:0fd174b:     private String crlPath;
1:0fd174b: 
1:09fab74:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:174fe15:      *
1:174fe15:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:174fe15:      */
1:174fe15:     @PostConstruct
1:174fe15:     private void postConstruct() {
1:174fe15:         try {
1:174fe15:             afterPropertiesSet();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:0fd174b: 
1:174fe15:     /**
1:139a220:      *
1:09fab74:      * @throws Exception
1:09fab74:      * @org.apache.xbean.InitMethod
1:09fab74:      */
1:139a220:     public void afterPropertiesSet() throws Exception {
1:139a220:         keyManagers.addAll(createKeyManagers());
1:139a220:         trustManagers.addAll(createTrustManagers());
1:139a220:         if( secureRandom == null ) {
1:139a220:             secureRandom = createSecureRandom();
1:139a220:         }
1:139a220:     }
1:174fe15: 
1:139a220:     private SecureRandom createSecureRandom() throws NoSuchAlgorithmException {
1:139a220:         return SecureRandom.getInstance(secureRandomAlgorithm);
1:139a220:     }
1:174fe15: 
1:139a220:     private Collection<TrustManager> createTrustManagers() throws Exception {
1:993d561:         boolean ocsp = Boolean.valueOf(Security.getProperty("ocsp.enable"));
1:993d561: 
1:174fe15:         KeyStore ks = createTrustManagerKeyStore();
1:139a220:         if( ks ==null ) {
1:139a220:             return new ArrayList<TrustManager>(0);
1:139a220:         }
1:139a220:         TrustManagerFactory tmf  = TrustManagerFactory.getInstance(trustStoreAlgorithm);
1:a53d4cf:         boolean initialized = false;
1:993d561:         if ((ocsp || crlPath != null) && trustStoreAlgorithm.equalsIgnoreCase("PKIX")) {
1:993d561:             PKIXBuilderParameters pkixParams = new PKIXBuilderParameters(ks, new X509CertSelector());
1:993d561:             if (crlPath != null) {
1:993d561:                 pkixParams.setRevocationEnabled(true);
1:0fd174b:                 Collection<? extends CRL> crlList = loadCRL();
1:0fd174b:                 if (crlList != null) {
1:0fd174b:                     pkixParams.addCertStore(CertStore.getInstance("Collection", new CollectionCertStoreParameters(crlList)));
1:0fd174b:                 }
1:0fd174b:             }
1:993d561:             tmf.init(new CertPathTrustManagerParameters(pkixParams));
1:993d561:             initialized = true;
1:a53d4cf:         }
1:a53d4cf: 
1:a53d4cf:         if (!initialized) {
1:0fd174b:             tmf.init(ks);
1:0fd174b:         }
1:a53d4cf: 
1:139a220:         return Arrays.asList(tmf.getTrustManagers());
1:139a220:     }
1:a53d4cf: 
1:139a220:     private Collection<KeyManager> createKeyManagers() throws Exception {
1:174fe15:         KeyStore ks = createKeyManagerKeyStore();
1:139a220:         if( ks ==null ) {
1:139a220:             return new ArrayList<KeyManager>(0);
1:139a220:         }
1:174fe15: 
1:139a220:         KeyManagerFactory tmf  = KeyManagerFactory.getInstance(keyStoreAlgorithm);
1:d5c86b0:         tmf.init(ks, keyStoreKeyPassword == null ? (keyStorePassword==null? null : keyStorePassword.toCharArray()) : keyStoreKeyPassword.toCharArray());
1:139a220:         return Arrays.asList(tmf.getKeyManagers());
1:139a220:     }
1:139a220: 
1:139a220:     private KeyStore createTrustManagerKeyStore() throws Exception {
1:139a220:         if( trustStore ==null ) {
1:139a220:             return null;
1:139a220:         }
1:174fe15: 
1:139a220:         KeyStore ks = KeyStore.getInstance(trustStoreType);
1:7fdd58e:         InputStream is=Utils.resourceFromString(trustStore).getInputStream();
1:139a220:         try {
1:139a220:             ks.load(is, trustStorePassword==null? null : trustStorePassword.toCharArray());
1:139a220:         } finally {
1:139a220:             is.close();
1:139a220:         }
1:139a220:         return ks;
1:139a220:     }
1:174fe15: 
1:139a220:     private KeyStore createKeyManagerKeyStore() throws Exception {
1:139a220:         if( keyStore ==null ) {
1:139a220:             return null;
1:139a220:         }
1:174fe15: 
1:139a220:         KeyStore ks = KeyStore.getInstance(keyStoreType);
1:7fdd58e:         InputStream is=Utils.resourceFromString(keyStore).getInputStream();
1:139a220:         try {
1:139a220:             ks.load(is, keyStorePassword==null? null : keyStorePassword.toCharArray());
1:139a220:         } finally {
1:139a220:             is.close();
1:139a220:         }
1:139a220:         return ks;
1:139a220:     }
1:139a220: 
1:139a220:     public String getTrustStoreType() {
1:139a220:         return trustStoreType;
1:139a220:     }
1:139a220: 
1:139a220:     public String getKeyStoreType() {
1:139a220:         return keyStoreType;
1:139a220:     }
1:139a220: 
1:7fdd58e:     public String getKeyStore() {
1:139a220:         return keyStore;
1:139a220:     }
1:139a220: 
1:7fdd58e:     public void setKeyStore(String keyStore) throws MalformedURLException {
1:7fdd58e:         this.keyStore = keyStore;
1:139a220:     }
1:139a220: 
1:7fdd58e:     public String getTrustStore() {
1:139a220:         return trustStore;
1:139a220:     }
1:139a220: 
1:7fdd58e:     public void setTrustStore(String trustStore) throws MalformedURLException {
1:7fdd58e:         this.trustStore = trustStore;
1:139a220:     }
1:139a220: 
1:139a220:     public String getKeyStoreAlgorithm() {
1:139a220:         return keyStoreAlgorithm;
1:139a220:     }
1:139a220: 
1:139a220:     public void setKeyStoreAlgorithm(String keyAlgorithm) {
1:139a220:         this.keyStoreAlgorithm = keyAlgorithm;
1:139a220:     }
1:139a220: 
1:139a220:     public String getTrustStoreAlgorithm() {
1:139a220:         return trustStoreAlgorithm;
1:139a220:     }
1:139a220: 
1:139a220:     public void setTrustStoreAlgorithm(String trustAlgorithm) {
1:139a220:         this.trustStoreAlgorithm = trustAlgorithm;
1:139a220:     }
1:139a220: 
1:d5c86b0:     public String getKeyStoreKeyPassword() {
1:d5c86b0:         return keyStoreKeyPassword;
1:d5c86b0:     }
1:d5c86b0: 
1:d5c86b0:     public void setKeyStoreKeyPassword(String keyPassword) {
1:d5c86b0:         this.keyStoreKeyPassword = keyPassword;
1:d5c86b0:     }
1:d5c86b0: 
1:139a220:     public String getKeyStorePassword() {
1:139a220:         return keyStorePassword;
1:139a220:     }
1:139a220: 
1:139a220:     public void setKeyStorePassword(String keyPassword) {
1:139a220:         this.keyStorePassword = keyPassword;
1:139a220:     }
1:139a220: 
1:139a220:     public String getTrustStorePassword() {
1:139a220:         return trustStorePassword;
1:139a220:     }
1:139a220: 
1:139a220:     public void setTrustStorePassword(String trustPassword) {
1:139a220:         this.trustStorePassword = trustPassword;
1:139a220:     }
1:139a220: 
1:139a220:     public void setKeyStoreType(String keyType) {
1:139a220:         this.keyStoreType = keyType;
1:139a220:     }
1:139a220: 
1:139a220:     public void setTrustStoreType(String trustType) {
1:139a220:         this.trustStoreType = trustType;
1:139a220:     }
1:139a220: 
1:139a220:     public String getSecureRandomAlgorithm() {
1:139a220:         return secureRandomAlgorithm;
1:139a220:     }
1:139a220: 
1:139a220:     public void setSecureRandomAlgorithm(String secureRandomAlgorithm) {
1:139a220:         this.secureRandomAlgorithm = secureRandomAlgorithm;
1:139a220:     }
1:139a220: 
1:0fd174b:     public String getCrlPath() {
1:0fd174b:         return crlPath;
1:0fd174b:     }
1:0fd174b: 
1:0fd174b:     public void setCrlPath(String crlPath) {
1:0fd174b:         this.crlPath = crlPath;
1:0fd174b:     }
1:0fd174b: 
1:0fd174b:     private Collection<? extends CRL> loadCRL() throws Exception {
1:0fd174b:         if (crlPath == null) {
1:0fd174b:             return null;
1:0fd174b:         }
1:0fd174b:         Resource resource = Utils.resourceFromString(crlPath);
1:0fd174b:         InputStream is = resource.getInputStream();
1:0fd174b:         try {
1:0fd174b:             return CertificateFactory.getInstance("X.509").generateCRLs(is);
1:0fd174b:         } finally {
1:0fd174b:             is.close();
1:0fd174b:         }
1:0fd174b:     }
1:0fd174b: 
1:139a220: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:993d561
/////////////////////////////////////////////////////////////////////////
1: import java.security.Security;
/////////////////////////////////////////////////////////////////////////
1:         boolean ocsp = Boolean.valueOf(Security.getProperty("ocsp.enable"));
1: 
1:         if ((ocsp || crlPath != null) && trustStoreAlgorithm.equalsIgnoreCase("PKIX")) {
1:             PKIXBuilderParameters pkixParams = new PKIXBuilderParameters(ks, new X509CertSelector());
1:             if (crlPath != null) {
1:                 pkixParams.setRevocationEnabled(true);
1:             tmf.init(new CertPathTrustManagerParameters(pkixParams));
1:             initialized = true;
commit:a53d4cf
/////////////////////////////////////////////////////////////////////////
1:         boolean initialized = false;
/////////////////////////////////////////////////////////////////////////
0:                     initialized = true;
1: 
1:         }
1: 
1:         if (!initialized) {
1: 
commit:0fd174b
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.*;
1: import javax.net.ssl.*;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.Resource;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(SpringSslContext.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     private String crlPath;
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (crlPath != null) {
0:             if (trustStoreAlgorithm.equalsIgnoreCase("PKIX")) {
1:                 Collection<? extends CRL> crlList = loadCRL();
1: 
1:                 if (crlList != null) {
0:                     PKIXBuilderParameters pkixParams = new PKIXBuilderParameters(ks, null);
0:                     pkixParams.setRevocationEnabled(true);
1:                     pkixParams.addCertStore(CertStore.getInstance("Collection", new CollectionCertStoreParameters(crlList)));
0:                     tmf.init(new CertPathTrustManagerParameters(pkixParams));
1:                 }
0:             } else {
0:                 LOG.warn("Revocation checking is only supported with 'trustStoreAlgorithm=\"PKIX\"'. Ignoring CRL: " + crlPath);
1:             }
0:         } else {
1:             tmf.init(ks);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public String getCrlPath() {
1:         return crlPath;
1:     }
1: 
1:     public void setCrlPath(String crlPath) {
1:         this.crlPath = crlPath;
1:     }
1: 
1:     private Collection<? extends CRL> loadCRL() throws Exception {
1:         if (crlPath == null) {
1:             return null;
1:         }
1:         Resource resource = Utils.resourceFromString(crlPath);
1:         InputStream is = resource.getInputStream();
1:         try {
1:             return CertificateFactory.getInstance("X.509").generateCRLs(is);
1:         } finally {
1:             is.close();
1:         }
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:174fe15
/////////////////////////////////////////////////////////////////////////
1: 
1:  *
1:  *
1:  *
1: public class SpringSslContext extends SslContext {
1: 
1:     private String secureRandomAlgorithm="SHA1PRNG";
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:      */
1:     @PostConstruct
1:     private void postConstruct() {
1:         try {
1:             afterPropertiesSet();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:         KeyStore ks = createTrustManagerKeyStore();
1: 
1:         KeyStore ks = createKeyManagerKeyStore();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:d5c86b0
/////////////////////////////////////////////////////////////////////////
1:     private String keyStoreKeyPassword;
/////////////////////////////////////////////////////////////////////////
1:         tmf.init(ks, keyStoreKeyPassword == null ? (keyStorePassword==null? null : keyStorePassword.toCharArray()) : keyStoreKeyPassword.toCharArray());
/////////////////////////////////////////////////////////////////////////
1:     public String getKeyStoreKeyPassword() {
1:         return keyStoreKeyPassword;
1:     }
1: 
1:     public void setKeyStoreKeyPassword(String keyPassword) {
1:         this.keyStoreKeyPassword = keyPassword;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:7c9fec6
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:139a220
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.spring;
1: 
1: import java.io.InputStream;
1: import java.security.KeyStore;
1: import java.security.NoSuchAlgorithmException;
1: import java.security.SecureRandom;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
0: import javax.net.ssl.KeyManager;
0: import javax.net.ssl.KeyManagerFactory;
0: import javax.net.ssl.TrustManager;
0: import javax.net.ssl.TrustManagerFactory;
1: 
1: import org.apache.activemq.broker.SslContext;
0: import org.springframework.beans.factory.InitializingBean;
0: import org.springframework.core.io.Resource;
1: 
1: /**
1:  * Extends the SslContext so that it's easier to configure from spring.
1:  * 
1:  * @org.apache.xbean.XBean element="sslContext"
1:  * 
0:  * @version $Revision$
1:  */
0: public class SpringSslContext extends SslContext implements InitializingBean {    
1:     
1:     private String keyStoreType="jks";
1:     private String trustStoreType="jks";
1: 
0:     private String secureRandomAlgorithm="SHA1PRNG";    
1:     private String keyStoreAlgorithm=KeyManagerFactory.getDefaultAlgorithm();
1:     private String trustStoreAlgorithm=TrustManagerFactory.getDefaultAlgorithm();
1: 
0:     private Resource keyStore;
0:     private Resource trustStore;
1: 
1:     private String keyStorePassword;
1:     private String trustStorePassword;
1: 
1:     public void afterPropertiesSet() throws Exception {
1:         keyManagers.addAll(createKeyManagers());
1:         trustManagers.addAll(createTrustManagers());
1:         if( secureRandom == null ) {
1:             secureRandom = createSecureRandom();
1:         }
1:     }
1: 
1:     private SecureRandom createSecureRandom() throws NoSuchAlgorithmException {
1:         return SecureRandom.getInstance(secureRandomAlgorithm);
1:     }
1: 
1:     private Collection<TrustManager> createTrustManagers() throws Exception {
0:         KeyStore ks = createTrustManagerKeyStore(); 
1:         if( ks ==null ) {
1:             return new ArrayList<TrustManager>(0);
1:         }
1:         
1:         TrustManagerFactory tmf  = TrustManagerFactory.getInstance(trustStoreAlgorithm);
0:         tmf.init(ks);
1:         return Arrays.asList(tmf.getTrustManagers());
1:     }
1: 
1:     private Collection<KeyManager> createKeyManagers() throws Exception {
0:         KeyStore ks = createKeyManagerKeyStore(); 
1:         if( ks ==null ) {
1:             return new ArrayList<KeyManager>(0);
1:         }
1:         
1:         KeyManagerFactory tmf  = KeyManagerFactory.getInstance(keyStoreAlgorithm);
0:         tmf.init(ks, keyStorePassword==null? null : keyStorePassword.toCharArray());
1:         return Arrays.asList(tmf.getKeyManagers());
1:     }
1: 
1:     private KeyStore createTrustManagerKeyStore() throws Exception {
1:         if( trustStore ==null ) {
1:             return null;
1:         }
1:         
1:         KeyStore ks = KeyStore.getInstance(trustStoreType);
0:         InputStream is=trustStore.getInputStream();
1:         try {
1:             ks.load(is, trustStorePassword==null? null : trustStorePassword.toCharArray());
1:         } finally {
1:             is.close();
1:         }
1:         return ks;
1:     }
1:     
1:     private KeyStore createKeyManagerKeyStore() throws Exception {
1:         if( keyStore ==null ) {
1:             return null;
1:         }
1:         
1:         KeyStore ks = KeyStore.getInstance(keyStoreType);
0:         InputStream is=keyStore.getInputStream();
1:         try {
1:             ks.load(is, keyStorePassword==null? null : keyStorePassword.toCharArray());
1:         } finally {
1:             is.close();
1:         }
1:         return ks;
1:     }
1: 
1:     public String getTrustStoreType() {
1:         return trustStoreType;
1:     }
1: 
1:     public String getKeyStoreType() {
1:         return keyStoreType;
1:     }
1: 
0:     public Resource getKeyStore() {
1:         return keyStore;
1:     }
1: 
0:     public void setKeyStore(Resource keyResource) {
0:         this.keyStore = keyResource;
1:     }
1: 
0:     public Resource getTrustStore() {
1:         return trustStore;
1:     }
1: 
0:     public void setTrustStore(Resource trustResource) {
0:         this.trustStore = trustResource;
1:     }
1: 
1:     public String getKeyStoreAlgorithm() {
1:         return keyStoreAlgorithm;
1:     }
1: 
1:     public void setKeyStoreAlgorithm(String keyAlgorithm) {
1:         this.keyStoreAlgorithm = keyAlgorithm;
1:     }
1: 
1:     public String getTrustStoreAlgorithm() {
1:         return trustStoreAlgorithm;
1:     }
1: 
1:     public void setTrustStoreAlgorithm(String trustAlgorithm) {
1:         this.trustStoreAlgorithm = trustAlgorithm;
1:     }
1: 
1:     public String getKeyStorePassword() {
1:         return keyStorePassword;
1:     }
1: 
1:     public void setKeyStorePassword(String keyPassword) {
1:         this.keyStorePassword = keyPassword;
1:     }
1: 
1:     public String getTrustStorePassword() {
1:         return trustStorePassword;
1:     }
1: 
1:     public void setTrustStorePassword(String trustPassword) {
1:         this.trustStorePassword = trustPassword;
1:     }
1: 
1:     public void setKeyStoreType(String keyType) {
1:         this.keyStoreType = keyType;
1:     }
1: 
1:     public void setTrustStoreType(String trustType) {
1:         this.trustStoreType = trustType;
1:     }
1: 
1:     public String getSecureRandomAlgorithm() {
1:         return secureRandomAlgorithm;
1:     }
1: 
1:     public void setSecureRandomAlgorithm(String secureRandomAlgorithm) {
1:         this.secureRandomAlgorithm = secureRandomAlgorithm;
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:7fdd58e
/////////////////////////////////////////////////////////////////////////
1: import java.net.MalformedURLException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private String keyStore;
1:     private String trustStore;
/////////////////////////////////////////////////////////////////////////
1:         InputStream is=Utils.resourceFromString(trustStore).getInputStream();
/////////////////////////////////////////////////////////////////////////
1:         InputStream is=Utils.resourceFromString(keyStore).getInputStream();
/////////////////////////////////////////////////////////////////////////
1:     public String getKeyStore() {
1:     public void setKeyStore(String keyStore) throws MalformedURLException {
1:         this.keyStore = keyStore;
1:     public String getTrustStore() {
1:     public void setTrustStore(String trustStore) throws MalformedURLException {
1:         this.trustStore = trustStore;
author:David Jencks
-------------------------------------------------------------------------------
commit:09fab74
/////////////////////////////////////////////////////////////////////////
1: import javax.annotation.PostConstruct;
/////////////////////////////////////////////////////////////////////////
0: public class SpringSslContext extends SslContext {    
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      *
1:      * @throws Exception
1:      * @org.apache.xbean.InitMethod
1:      */
0:     @PostConstruct
============================================================================