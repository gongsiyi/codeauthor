1:6d8e2c5: /**
1:6d8e2c5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6d8e2c5:  * contributor license agreements.  See the NOTICE file distributed with
1:6d8e2c5:  * this work for additional information regarding copyright ownership.
1:6d8e2c5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6d8e2c5:  * (the "License"); you may not use this file except in compliance with
1:6d8e2c5:  * the License.  You may obtain a copy of the License at
5:6d8e2c5:  *
1:6d8e2c5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:6d8e2c5:  * Unless required by applicable law or agreed to in writing, software
1:6d8e2c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d8e2c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d8e2c5:  * See the License for the specific language governing permissions and
1:6d8e2c5:  * limitations under the License.
1:6d8e2c5:  */
1:6d8e2c5: package org.apache.activemq.usage;
5:6d8e2c5: 
1:4cddd2c: 
1:d5dd937: import org.apache.activemq.store.PListStore;
1:ee55abb: 
1:6d8e2c5: /**
1:6d8e2c5:  * Used to keep track of how much of something is being used so that a
1:2b0024c:  * productive working set usage can be controlled. Main use case is manage
1:2b0024c:  * memory usage.
1:4cddd2c:  *
1:6d8e2c5:  * @org.apache.xbean.XBean
1:4cddd2c:  *
1:6d8e2c5:  */
1:4cddd2c: public class TempUsage extends PercentLimitUsage<TempUsage> {
1:6d8e2c5: 
1:ee55abb:     private PListStore store;
1:6d8e2c5: 
1:2b0024c:     public TempUsage() {
1:2b0024c:         super(null, null, 1.0f);
1:2b0024c:     }
1:2b0024c: 
1:ee55abb:     public TempUsage(String name, PListStore store) {
1:2b0024c:         super(null, name, 1.0f);
1:2b0024c:         this.store = store;
1:4cddd2c:         updateLimitBasedOnPercent();
1:4cddd2c:     }
1:4cddd2c: 
1:2b0024c:     public TempUsage(TempUsage parent, String name) {
1:2b0024c:         super(parent, name, 1.0f);
1:2b0024c:         this.store = parent.store;
1:4cddd2c:         updateLimitBasedOnPercent();
1:4cddd2c:     }
1:2b0024c: 
1:ee55abb:     @Override
1:8493f6b:     public int getPercentUsage() {
1:8493f6b:         if (store != null) {
1:8493f6b:             usageLock.writeLock().lock();
1:8493f6b:             try {
1:8493f6b:                 percentUsage = caclPercentUsage();
1:8493f6b:             } finally {
1:8493f6b:                 usageLock.writeLock().unlock();
1:8493f6b:             }
1:8493f6b:         }
1:8493f6b:         return super.getPercentUsage();
1:8493f6b:     }
1:8493f6b: 
1:8493f6b:     @Override
1:2b0024c:     protected long retrieveUsage() {
1:2b0024c:         if (store == null) {
1:2b0024c:             return 0;
1:2b0024c:         }
1:6d8e2c5:         return store.size();
1:2b0024c:     }
1:2b0024c: 
1:ee55abb:     public PListStore getStore() {
1:2b0024c:         return store;
1:2b0024c:     }
1:2b0024c: 
1:ee55abb:     public void setStore(PListStore store) {
1:2b0024c:         this.store = store;
1:29d9434:         if (percentLimit > 0 && store != null) {
1:4cddd2c:             //will trigger onLimitChange
1:4cddd2c:             updateLimitBasedOnPercent();
1:4cddd2c:         } else {
1:4cddd2c:             onLimitChange();
1:4cddd2c:         }
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c:     @Override
1:4cddd2c:     protected void updateLimitBasedOnPercent() {
1:4cddd2c:         usageLock.writeLock().lock();
1:4cddd2c:         try {
1:8a28c06:             percentLimitFromFile(store != null ? store.getDirectory() : null);
1:4cddd2c:         } finally {
1:4cddd2c:             usageLock.writeLock().unlock();
1:4cddd2c:         }
1:2b0024c:     }
1:8a28c06: 
1:2b0024c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8a28c06
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             percentLimitFromFile(store != null ? store.getDirectory() : null);
1: 
commit:8493f6b
/////////////////////////////////////////////////////////////////////////
1:     public int getPercentUsage() {
1:         if (store != null) {
1:             usageLock.writeLock().lock();
1:             try {
1:                 percentUsage = caclPercentUsage();
1:             } finally {
1:                 usageLock.writeLock().unlock();
1:             }
1:         }
1:         return super.getPercentUsage();
1:     }
1: 
1:     @Override
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:29d9434
/////////////////////////////////////////////////////////////////////////
1:             if (percentLimit > 0 && store != null) {
commit:3b658f8
/////////////////////////////////////////////////////////////////////////
0:             if (percentLimit >= 0 && store != null) {
commit:4cddd2c
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
1: 
0: import org.apache.activemq.util.StoreUtil;
1:  *
1:  *
1: public class TempUsage extends PercentLimitUsage<TempUsage> {
/////////////////////////////////////////////////////////////////////////
1:         updateLimitBasedOnPercent();
1:         updateLimitBasedOnPercent();
/////////////////////////////////////////////////////////////////////////
0:         if (percentLimit > 0 && store != null) {
1:             //will trigger onLimitChange
1:             updateLimitBasedOnPercent();
1:         } else {
1:             onLimitChange();
1:         }
1:     }
1: 
1:     @Override
1:     protected void updateLimitBasedOnPercent() {
1:         usageLock.writeLock().lock();
1:         try {
0:             if (percentLimit > 0 && store != null) {
0:                 File dir = StoreUtil.findParentDirectory(store.getDirectory());
1: 
0:                 if (dir != null) {
0:                     this.setLimit(dir.getTotalSpace() * percentLimit / 100);
1:                 }
1:             }
1:         } finally {
1:             usageLock.writeLock().unlock();
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.PListStore;
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:2b0024c
/////////////////////////////////////////////////////////////////////////
1:  * productive working set usage can be controlled. Main use case is manage
1:  * memory usage.
0: public class TempUsage extends Usage<TempUsage> {
0:     private Store store;
1:     public TempUsage() {
1:         super(null, null, 1.0f);
0:     public TempUsage(String name, Store store) {
1:         super(null, name, 1.0f);
1:         this.store = store;
1:     }
1: 
1:     public TempUsage(TempUsage parent, String name) {
1:         super(parent, name, 1.0f);
1:         this.store = parent.store;
1:     }
1: 
1:     protected long retrieveUsage() {
1:         if (store == null) {
1:             return 0;
1:         }
1: 
0:     public Store getStore() {
1:         return store;
1:     }
1: 
0:     public void setStore(Store store) {
1:         this.store = store;
0:         onLimitChange();
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.plist.PListStore;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private PListStore store;
1:     public TempUsage(String name, PListStore store) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     public PListStore getStore() {
1:     public void setStore(PListStore store) {
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usage;
1: 
0: import org.apache.activemq.kaha.Store;
1: 
1: /**
1:  * Used to keep track of how much of something is being used so that a
0:  * productive working set usage can be controlled.
1:  * 
0:  * Main use case is manage memory usage.
1:  * 
1:  * @org.apache.xbean.XBean
1:  * 
0:  * @version $Revision: 1.3 $
1:  */
0: public class TempUsage extends Usage{
1: 
0:     final private Store store;
1: 
1:         
0:     public TempUsage(String name,Store store){
0:         super(null,name,1.0f);
0:         this.store=store;
0:     }
1:     
0:     public TempUsage(TempUsage parent,String name){
0:         super(parent,name,1.0f);
0:         this.store=parent.store;
0:     }
1: 
0:     protected long retrieveUsage(){
1:         return store.size();
0:     }
0: }
============================================================================