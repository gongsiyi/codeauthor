2:027d2e7: /**
1:027d2e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:027d2e7:  * contributor license agreements.  See the NOTICE file distributed with
1:027d2e7:  * this work for additional information regarding copyright ownership.
1:027d2e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:027d2e7:  * (the "License"); you may not use this file except in compliance with
1:027d2e7:  * the License.  You may obtain a copy of the License at
1:027d2e7:  *
1:027d2e7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:027d2e7:  *
1:027d2e7:  * Unless required by applicable law or agreed to in writing, software
1:027d2e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:027d2e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:027d2e7:  * See the License for the specific language governing permissions and
1:027d2e7:  * limitations under the License.
2:027d2e7:  */
1:027d2e7: package org.apache.activemq.broker.region.virtual;
1:1b9f5f6: 
1:027d2e7: import org.apache.activemq.broker.Broker;
1:027d2e7: import org.apache.activemq.broker.region.Destination;
1:027d2e7: import org.apache.activemq.broker.region.Subscription;
1:9fc2661: import org.apache.activemq.broker.region.Topic;
1:027d2e7: import org.apache.activemq.command.Message;
1:1b9f5f6: import org.apache.activemq.filter.BooleanExpression;
1:027d2e7: import org.apache.activemq.filter.MessageEvaluationContext;
1:027d2e7: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
1:1b9f5f6: import org.apache.activemq.plugin.SubQueueSelectorCacheBroker;
1:1b9f5f6: import org.apache.activemq.selector.SelectorParser;
1:1b9f5f6: import org.apache.activemq.util.LRUCache;
1:1b9f5f6: import org.slf4j.Logger;
1:1b9f5f6: import org.slf4j.LoggerFactory;
3:1b9f5f6: 
1:afded92: import java.io.IOException;
1:afded92: import java.util.List;
1:afded92: import java.util.Set;
1:afded92: 
1:027d2e7: public class SelectorAwareVirtualTopicInterceptor extends VirtualTopicInterceptor {
1:1b9f5f6:     private static final Logger LOG = LoggerFactory.getLogger(SelectorAwareVirtualTopicInterceptor.class);
1:1b9f5f6:     LRUCache<String,BooleanExpression> expressionCache = new LRUCache<String,BooleanExpression>();
1:9fc2661:     private final SubQueueSelectorCacheBroker selectorCachePlugin;
1:1b9f5f6: 
1:340728f:     public SelectorAwareVirtualTopicInterceptor(Destination next, VirtualTopic virtualTopic) {
1:340728f:         super(next, virtualTopic);
1:9fc2661:         selectorCachePlugin = (SubQueueSelectorCacheBroker)
1:9fc2661:                 ((Topic)next).createConnectionContext().getBroker().getAdaptor(SubQueueSelectorCacheBroker.class);
6:027d2e7:     }
1:1b9f5f6: 
1:1b9f5f6:     /**
1:027d2e7:      * Respect the selectors of the subscriptions to ensure only matched messages are dispatched to
1:027d2e7:      * the virtual queues, hence there is no build up of unmatched messages on these destinations
1:1b9f5f6:      */
1:027d2e7:     @Override
1:340728f:     protected boolean shouldDispatch(final Broker broker, Message message, Destination dest) throws IOException {
1:bc9edf0:         //first validate that the prefix matches in the super class
1:bc9edf0:         if (super.shouldDispatch(broker, message, dest)) {
1:bc9edf0:             boolean matches = false;
1:bc9edf0:             MessageEvaluationContext msgContext = new NonCachedMessageEvaluationContext();
1:bc9edf0:             msgContext.setDestination(dest.getActiveMQDestination());
1:bc9edf0:             msgContext.setMessageReference(message);
1:bc9edf0:             List<Subscription> subs = dest.getConsumers();
1:bc9edf0:             for (Subscription sub : subs) {
1:bc9edf0:                 if (sub.matches(message, msgContext)) {
1:bc9edf0:                     matches = true;
1:bc9edf0:                     break;
1:bc9edf0:                 }
1:1b9f5f6:             }
1:bc9edf0:             if (matches == false) {
1:bc9edf0:                 matches = tryMatchingCachedSubs(broker, dest, msgContext);
1:bc9edf0:             }
1:bc9edf0:             return matches;
1:1b9f5f6:         }
1:bc9edf0:         return false;
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6:     private boolean tryMatchingCachedSubs(final Broker broker, Destination dest, MessageEvaluationContext msgContext) {
1:1b9f5f6:         boolean matches = false;
1:1b9f5f6:         LOG.debug("No active consumer match found. Will try cache if configured...");
1:1b9f5f6: 
1:9fc2661:         if (selectorCachePlugin != null) {
1:9fc2661:             final Set<String> selectors = selectorCachePlugin.getSelector(dest.getActiveMQDestination().getQualifiedName());
1:3c2ed93:             if (selectors != null) {
1:3c2ed93:                 for (String selector : selectors) {
1:3c2ed93:                     try {
1:3c2ed93:                         final BooleanExpression expression = getExpression(selector);
1:3c2ed93:                         matches = expression.matches(msgContext);
1:3c2ed93:                         if (matches) {
1:3c2ed93:                             return true;
1:3c2ed93:                         }
1:3c2ed93:                     } catch (Exception e) {
1:3c2ed93:                         LOG.error(e.getMessage(), e);
1:afded92:                     }
1:1b9f5f6:                 }
1:1b9f5f6:             }
1:1b9f5f6:         }
1:1b9f5f6:         return matches;
1:027d2e7:     }
1:1b9f5f6: 
1:1b9f5f6:     private BooleanExpression getExpression(String selector) throws Exception{
1:1b9f5f6:         BooleanExpression result;
1:1b9f5f6:         synchronized(expressionCache){
1:1b9f5f6:             result = expressionCache.get(selector);
1:1b9f5f6:             if (result == null){
1:1b9f5f6:                 result = compileSelector(selector);
1:1b9f5f6:                 expressionCache.put(selector,result);
1:1b9f5f6:             }
1:1b9f5f6:         }
1:1b9f5f6:         return result;
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6:     /**
1:1b9f5f6:      * Pre-compile the JMS selector.
1:1b9f5f6:      *
1:1b9f5f6:      * @param selectorExpression The non-null JMS selector expression.
1:1b9f5f6:      */
1:1b9f5f6:     private BooleanExpression compileSelector(final String selectorExpression) throws Exception {
1:1b9f5f6:         return SelectorParser.parse(selectorExpression);
1:1b9f5f6:     }
1:027d2e7: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:9fc2661
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Topic;
/////////////////////////////////////////////////////////////////////////
1:     private final SubQueueSelectorCacheBroker selectorCachePlugin;
1:         selectorCachePlugin = (SubQueueSelectorCacheBroker)
1:                 ((Topic)next).createConnectionContext().getBroker().getAdaptor(SubQueueSelectorCacheBroker.class);
/////////////////////////////////////////////////////////////////////////
1:         if (selectorCachePlugin != null) {
1:             final Set<String> selectors = selectorCachePlugin.getSelector(dest.getActiveMQDestination().getQualifiedName());
/////////////////////////////////////////////////////////////////////////
commit:3c2ed93
/////////////////////////////////////////////////////////////////////////
1:             if (selectors != null) {
1:                 for (String selector : selectors) {
1:                     try {
1:                         final BooleanExpression expression = getExpression(selector);
1:                         matches = expression.matches(msgContext);
1:                         if (matches) {
1:                             return true;
1:                         }
1:                     } catch (Exception e) {
1:                         LOG.error(e.getMessage(), e);
commit:340728f
/////////////////////////////////////////////////////////////////////////
1:     public SelectorAwareVirtualTopicInterceptor(Destination next, VirtualTopic virtualTopic) {
1:         super(next, virtualTopic);
/////////////////////////////////////////////////////////////////////////
1:     protected boolean shouldDispatch(final Broker broker, Message message, Destination dest) throws IOException {
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:bc9edf0
/////////////////////////////////////////////////////////////////////////
1:         //first validate that the prefix matches in the super class
1:         if (super.shouldDispatch(broker, message, dest)) {
1:             boolean matches = false;
1:             MessageEvaluationContext msgContext = new NonCachedMessageEvaluationContext();
1:             msgContext.setDestination(dest.getActiveMQDestination());
1:             msgContext.setMessageReference(message);
1:             List<Subscription> subs = dest.getConsumers();
1:             for (Subscription sub : subs) {
1:                 if (sub.matches(message, msgContext)) {
1:                     matches = true;
1:                     break;
1:                 }
1:             if (matches == false) {
1:                 matches = tryMatchingCachedSubs(broker, dest, msgContext);
1:             }
1:             return matches;
1:         return false;
author:Kevin Earls
-------------------------------------------------------------------------------
commit:afded92
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.List;
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (matches == false) {
/////////////////////////////////////////////////////////////////////////
0:             final Set<String> selectors = cache.getSelector(dest.getActiveMQDestination().getQualifiedName());
0:             for (String selector : selectors) {
0:                     if (matches) {
0:                         return true;
1:                     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Robert Davies
-------------------------------------------------------------------------------
commit:1b9f5f6
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.List;
0: import java.util.Set;
1: 
1: import org.apache.activemq.filter.BooleanExpression;
1: import org.apache.activemq.plugin.SubQueueSelectorCacheBroker;
1: import org.apache.activemq.selector.SelectorParser;
1: import org.apache.activemq.util.LRUCache;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SelectorAwareVirtualTopicInterceptor.class);
1:     LRUCache<String,BooleanExpression> expressionCache = new LRUCache<String,BooleanExpression>();
0:     private SubQueueSelectorCacheBroker selectorCachePlugin;
/////////////////////////////////////////////////////////////////////////
0:             if (matchesSomeConsumer(broker, message, dest)) {
1: 
0:     private boolean matchesSomeConsumer(final Broker broker, Message message, Destination dest) throws IOException {
0:         for (Subscription sub : subs) {
1: 
1:             }
1:         }
0:         if (matches == false && subs.size() == 0) {
0:             matches = tryMatchingCachedSubs(broker, dest, msgContext);
1:         }
1:         return matches;
1:     }
1: 
1:     private boolean tryMatchingCachedSubs(final Broker broker, Destination dest, MessageEvaluationContext msgContext) {
1:         boolean matches = false;
1:         LOG.debug("No active consumer match found. Will try cache if configured...");
1: 
0:         //retrieve the specific plugin class and lookup the selector for the destination.
0:         final SubQueueSelectorCacheBroker cache = getSubQueueSelectorCacheBrokerPlugin(broker);
1: 
0:         if (cache != null) {
0:             final String selector = cache.getSelector(dest.getActiveMQDestination().getQualifiedName());
0:             if (selector != null) {
0:                 try {
0:                     final BooleanExpression expression = getExpression(selector);
0:                     matches = expression.matches(msgContext);
0:                 } catch (Exception e) {
0:                     LOG.error(e.getMessage(), e);
1:                 }
1: 
1:     private BooleanExpression getExpression(String selector) throws Exception{
1:         BooleanExpression result;
1:         synchronized(expressionCache){
1:             result = expressionCache.get(selector);
1:             if (result == null){
1:                 result = compileSelector(selector);
1:                 expressionCache.put(selector,result);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     /**
0:      * @return The SubQueueSelectorCacheBroker instance or null if no such broker is available.
1:      */
0:     private SubQueueSelectorCacheBroker getSubQueueSelectorCacheBrokerPlugin(final Broker broker) {
0:         if (selectorCachePlugin == null) {
0:             selectorCachePlugin = (SubQueueSelectorCacheBroker) broker.getAdaptor(SubQueueSelectorCacheBroker.class);
0:         } //if
1: 
0:         return selectorCachePlugin;
1:     }
1: 
1:     /**
1:      * Pre-compile the JMS selector.
1:      *
1:      * @param selectorExpression The non-null JMS selector expression.
1:      */
1:     private BooleanExpression compileSelector(final String selectorExpression) throws Exception {
1:         return SelectorParser.parse(selectorExpression);
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3c3b5bb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.List;
0: import java.util.Set;
0: 
0:     public SelectorAwareVirtualTopicInterceptor(Destination next, String prefix, String postfix, boolean local) {
0:         super(next, prefix, postfix, local);
author:Gary Tully
-------------------------------------------------------------------------------
commit:027d2e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.virtual;
0: 
0: import java.io.IOException;
0: import java.util.List;
0: import java.util.Set;
0: 
1: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Subscription;
0: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
0: 
1: public class SelectorAwareVirtualTopicInterceptor extends VirtualTopicInterceptor {
0: 
0:     public SelectorAwareVirtualTopicInterceptor(Destination next, String prefix, String postfix) {
0:         super(next, prefix, postfix);
1:     }
0: 
1:     /**
1:      * Respect the selectors of the subscriptions to ensure only matched messages are dispatched to
1:      * the virtual queues, hence there is no build up of unmatched messages on these destinations
1:      */
1:     @Override
0:     protected void send(ProducerBrokerExchange context, Message message, ActiveMQDestination destination) throws Exception {
0:         Broker broker = context.getConnectionContext().getBroker();
0:         Set<Destination> destinations = broker.getDestinations(destination);
0: 
0:         for (Destination dest : destinations) {
0:             if (matchesSomeConsumer(message, dest)) {
0:                 dest.send(context, message.copy());
1:             }
1:         }
1:     }
0:     
0:     private boolean matchesSomeConsumer(Message message, Destination dest) throws IOException {
0:         boolean matches = false;
0:         MessageEvaluationContext msgContext = new NonCachedMessageEvaluationContext();
0:         msgContext.setDestination(dest.getActiveMQDestination());
0:         msgContext.setMessageReference(message);
0:         List<Subscription> subs = dest.getConsumers();
0:         for (Subscription sub: subs) {
0:             if (sub.matches(message, msgContext)) {
0:                 matches = true;
0:                 break;
1:             }
1:         }
0:         return matches;
1:     }
1: }
============================================================================