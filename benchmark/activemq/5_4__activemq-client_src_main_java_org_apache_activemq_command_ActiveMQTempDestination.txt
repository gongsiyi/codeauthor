1:d29ca2a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import org.apache.activemq.ActiveMQConnection;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * @openwire:marshaller
1:b0c2a40:  * 
1:d29ca2a:  */
1:fc00993: public abstract class ActiveMQTempDestination extends ActiveMQDestination {
1:d29ca2a: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQTempDestination.class);
1:d29ca2a:     protected transient ActiveMQConnection connection;
1:d29ca2a:     protected transient String connectionId;
1:d29ca2a:     protected transient int sequenceId;
1:d29ca2a: 
1:230a86c:     public ActiveMQTempDestination() {
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public ActiveMQTempDestination(String name) {
1:d29ca2a:         super(name);
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public ActiveMQTempDestination(String connectionId, long sequenceId) {
1:230a86c:         super(connectionId + ":" + sequenceId);
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public boolean isTemporary() {
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void delete() throws JMSException {
1:ed6a4c7:         if (connection != null) {
1:d29ca2a:             connection.deleteTempDestination(this);
1:d29ca2a:         }
1:ed6a4c7:     }
1:d29ca2a: 
1:230a86c:     public ActiveMQConnection getConnection() {
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void setConnection(ActiveMQConnection connection) {
1:230a86c:         this.connection = connection;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void setPhysicalName(String physicalName) {
1:d29ca2a:         super.setPhysicalName(physicalName);
1:230a86c:         if (!isComposite()) {
1:d29ca2a:             // Parse off the sequenceId off the end.
1:230a86c:             // this can fail if the temp destination is
1:230a86c:             // generated by another JMS system via the JMS<->JMS Bridge
1:230a86c:             int p = this.physicalName.lastIndexOf(":");
1:230a86c:             if (p >= 0) {
1:230a86c:                 String seqStr = this.physicalName.substring(p + 1).trim();
1:230a86c:                 if (seqStr != null && seqStr.length() > 0) {
1:230a86c:                     try {
1:230a86c:                         sequenceId = Integer.parseInt(seqStr);
1:230a86c:                     } catch (NumberFormatException e) {
1:fc00993:                         LOG.debug("Did not parse sequence Id from " + physicalName);
1:4cd0a27:                     }
1:d29ca2a:                     // The rest should be the connection id.
1:230a86c:                     connectionId = this.physicalName.substring(0, p);
1:d29ca2a:                 }
1:d29ca2a:             }
1:4cd0a27:         }
1:4cd0a27:     }
1:d29ca2a: 
1:230a86c:     public String getConnectionId() {
1:d29ca2a:         return connectionId;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void setConnectionId(String connectionId) {
1:230a86c:         this.connectionId = connectionId;
1:a9c49a7:     }
1:d29ca2a: 
1:230a86c:     public int getSequenceId() {
1:d29ca2a:         return sequenceId;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
1: public abstract class ActiveMQTempDestination extends ActiveMQDestination {
0:     private static final Log LOG = LogFactory.getLog(ActiveMQTempDestination.class);
/////////////////////////////////////////////////////////////////////////
1:                         LOG.debug("Did not parse sequence Id from " + physicalName);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
0: abstract public class ActiveMQTempDestination extends ActiveMQDestination {
0:     private static final Log log = LogFactory.getLog(ActiveMQTempDestination.class);
1:     public ActiveMQTempDestination() {
1:     public ActiveMQTempDestination(String name) {
1:     public ActiveMQTempDestination(String connectionId, long sequenceId) {
1:         super(connectionId + ":" + sequenceId);
1:     public boolean isTemporary() {
1:     public void delete() throws JMSException {
1:     public ActiveMQConnection getConnection() {
1:     public void setConnection(ActiveMQConnection connection) {
1:         this.connection = connection;
1:     public void setPhysicalName(String physicalName) {
1:         if (!isComposite()) {
1:             // this can fail if the temp destination is
1:             // generated by another JMS system via the JMS<->JMS Bridge
1:             int p = this.physicalName.lastIndexOf(":");
1:             if (p >= 0) {
1:                 String seqStr = this.physicalName.substring(p + 1).trim();
1:                 if (seqStr != null && seqStr.length() > 0) {
1:                     try {
1:                         sequenceId = Integer.parseInt(seqStr);
1:                     } catch (NumberFormatException e) {
0:                         log.debug("Did not parse sequence Id from " + physicalName);
1:                     connectionId = this.physicalName.substring(0, p);
1:     public String getConnectionId() {
1:     public void setConnectionId(String connectionId) {
1:         this.connectionId = connectionId;
1:     public int getSequenceId() {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: 
1: /**
1:  * @openwire:marshaller
0:  * @version $Revision: 1.5 $
1:  */
0: abstract public class ActiveMQTempDestination extends ActiveMQDestination {
1:     
1:     protected transient ActiveMQConnection connection;
1:     protected transient String connectionId;
1:     protected transient int sequenceId;
1:     
0:     public ActiveMQTempDestination() {
1:     }
1:     
0:     public ActiveMQTempDestination(String name) {
1:         super(name);
1:     }
1:     
0:     public ActiveMQTempDestination(String connectionId, long sequenceId) {
0:         super(connectionId+":"+sequenceId);
1:     }
1: 
0:     public boolean isTemporary() {
1:         return true;
1:     }
1: 
0:     public void delete() throws JMSException {
1:         connection.deleteTempDestination(this);
1:     }
1: 
0:     public ActiveMQConnection getConnection() {
1:         return connection;
1:     }
1: 
0:     public void setConnection(ActiveMQConnection connection) {
0:         this.connection = connection;
1:     }
1: 
0:     public void setPhysicalName(String physicalName) {
1:         super.setPhysicalName(physicalName);
0:         if( !isComposite() ) {
1:             // Parse off the sequenceId off the end.
0:             int p = this.physicalName.lastIndexOf(":");
0:             sequenceId = Integer.parseInt(this.physicalName.substring(p+1));
1:             // The rest should be the connection id.
0:             connectionId = this.physicalName.substring(0,p);
1:         }
1:     }
1: 
0:     public String getConnectionId() {
1:         return connectionId;
1:     }
1: 
0:     public int getSequenceId() {
1:         return sequenceId;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQTempDestination.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:ed6a4c7
/////////////////////////////////////////////////////////////////////////
1:         if (connection != null) {
0:             connection.deleteTempDestination(this);
1:         }
author:Robert Davies
-------------------------------------------------------------------------------
commit:4cd0a27
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: abstract public class ActiveMQTempDestination extends ActiveMQDestination{
0: 
0:     private static final Log log=LogFactory.getLog(ActiveMQTempDestination.class);
0: 
0:     public ActiveMQTempDestination(){
0: 
0:     public ActiveMQTempDestination(String name){
0: 
0:     public ActiveMQTempDestination(String connectionId,long sequenceId){
0:     public boolean isTemporary(){
0:     public void delete() throws JMSException{
0:     public ActiveMQConnection getConnection(){
0:     public void setConnection(ActiveMQConnection connection){
0:         this.connection=connection;
0:     public void setPhysicalName(String physicalName){
0:         if(!isComposite()){
0:             //this can fail if the temp destination is
0:             //generated by another JMS system via the JMS<->JMS Bridge
0:             int p=this.physicalName.lastIndexOf(":");
0:             if(p>=0){
0:                 String seqStr=this.physicalName.substring(p+1).trim();
0:                 if(seqStr!=null&&seqStr.length()>0){
0:                     try{
0:                         sequenceId=Integer.parseInt(seqStr);
0:                     }catch(NumberFormatException e){
0:                         log.debug("Did not parse sequence Id from "+physicalName);
1:                     }
0:                     // The rest should be the connection id.
0:                     connectionId=this.physicalName.substring(0,p);
1:                 }
1:             }
0:     public String getConnectionId(){
0: 
0:     public void setConnectionId(String connectionId){
0:         this.connectionId=connectionId;
0:     public int getSequenceId(){
commit:374971f
/////////////////////////////////////////////////////////////////////////
0:             sequenceId = Integer.parseInt(this.physicalName.substring(p+1).trim());
commit:a9c49a7
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void setConnectionId(String connectionId) {
0:         this.connectionId = connectionId;
1:     }
============================================================================