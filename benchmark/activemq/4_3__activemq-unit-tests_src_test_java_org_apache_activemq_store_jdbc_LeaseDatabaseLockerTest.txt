1:dc258ab: /**
1:dc258ab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dc258ab:  * contributor license agreements.  See the NOTICE file distributed with
1:dc258ab:  * this work for additional information regarding copyright ownership.
1:dc258ab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dc258ab:  * (the "License"); you may not use this file except in compliance with
1:dc258ab:  * the License.  You may obtain a copy of the License at
1:dc258ab:  *
1:dc258ab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dc258ab:  *
1:dc258ab:  * Unless required by applicable law or agreed to in writing, software
1:dc258ab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc258ab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc258ab:  * See the License for the specific language governing permissions and
1:dc258ab:  * limitations under the License.
1:dc258ab:  */
1:dc258ab: package org.apache.activemq.store.jdbc;
4:dc258ab: 
1:dc258ab: import java.sql.Connection;
1:ba5fdc5: import java.sql.PreparedStatement;
1:17bf5c7: import java.sql.ResultSet;
1:17bf5c7: import java.sql.Timestamp;
1:ba5fdc5: import java.util.HashSet;
1:ba5fdc5: import java.util.Set;
1:74bccd5: import java.util.concurrent.CountDownLatch;
1:dc258ab: import java.util.concurrent.ExecutorService;
1:dc258ab: import java.util.concurrent.Executors;
1:dc258ab: import java.util.concurrent.TimeUnit;
1:dc258ab: import java.util.concurrent.atomic.AtomicBoolean;
1:165959e: import javax.sql.DataSource;
1:ba5fdc5: import org.apache.activemq.broker.AbstractLocker;
1:dc258ab: import org.apache.activemq.broker.BrokerService;
1:ba5fdc5: import org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter;
1:74bccd5: import org.apache.activemq.util.Wait;
1:dc258ab: import org.apache.derby.jdbc.EmbeddedDataSource;
1:17bf5c7: import org.jmock.Expectations;
1:17bf5c7: import org.jmock.Mockery;
1:17bf5c7: import org.jmock.lib.legacy.ClassImposteriser;
1:165959e: import org.junit.After;
1:dc258ab: import org.junit.Before;
1:dc258ab: import org.junit.Test;
1:ba5fdc5: import org.slf4j.Logger;
1:ba5fdc5: import org.slf4j.LoggerFactory;
1:17bf5c7: 
1:dc258ab: 
1:17bf5c7: import static org.junit.Assert.assertEquals;
1:17bf5c7: import static org.junit.Assert.assertFalse;
1:17bf5c7: import static org.junit.Assert.assertTrue;
1:17bf5c7: 
1:dc258ab: public class LeaseDatabaseLockerTest {
1:dc258ab: 
1:ba5fdc5:     private static final Logger LOG = LoggerFactory.getLogger(LeaseDatabaseLockerTest.class);
1:ba5fdc5: 
1:dc258ab:     JDBCPersistenceAdapter jdbc;
1:dc258ab:     BrokerService brokerService;
1:165959e:     DataSource dataSource;
1:dc258ab: 
1:dc258ab:     @Before
1:dc258ab:     public void setUpStore() throws Exception {
1:dc258ab:         jdbc = new JDBCPersistenceAdapter();
1:165959e:         dataSource = jdbc.getDataSource();
1:dc258ab:         brokerService = new BrokerService();
1:dc258ab:         jdbc.setBrokerService(brokerService);
1:dc258ab:         jdbc.getAdapter().doCreateTables(jdbc.getTransactionContext());
1:dc258ab:     }
1:dc258ab: 
1:165959e:     @After
1:165959e:     public void stopDerby() {
1:165959e:         DataSourceServiceSupport.shutdownDefaultDataSource(dataSource);
1:165959e:     }
1:165959e: 
1:ba5fdc5:     @Test
1:dc258ab:     public void testLockInterleave() throws Exception {
1:dc258ab: 
1:dc258ab:         LeaseDatabaseLocker lockerA = new LeaseDatabaseLocker();
1:74bccd5:         lockerA.setLeaseHolderId("First");
1:45e7d3a:         jdbc.setLocker(lockerA);
1:dc258ab: 
1:dc258ab:         final LeaseDatabaseLocker lockerB = new LeaseDatabaseLocker();
1:74bccd5:         lockerB.setLeaseHolderId("Second");
1:45e7d3a:         jdbc.setLocker(lockerB);
1:dc258ab:         final AtomicBoolean blocked = new AtomicBoolean(true);
1:dc258ab: 
1:dc258ab:         final Connection connection = dataSource.getConnection();
1:dc258ab:         printLockTable(connection);
1:dc258ab:         lockerA.start();
1:dc258ab:         printLockTable(connection);
1:dc258ab: 
1:74bccd5:         assertTrue("First has lock", lockerA.keepAlive());
1:74bccd5: 
1:74bccd5:         final CountDownLatch lockerBStarting = new CountDownLatch(1);
1:dc258ab:         ExecutorService executor = Executors.newCachedThreadPool();
1:dc258ab:         executor.execute(new Runnable() {
1:dc258ab:             @Override
1:dc258ab:             public void run() {
1:dc258ab:                 try {
1:74bccd5:                     lockerBStarting.countDown();
1:dc258ab:                     lockerB.start();
1:dc258ab:                     blocked.set(false);
1:dc258ab:                     printLockTable(connection);
1:dc258ab: 
1:dc258ab:                 } catch (Exception e) {
1:dc258ab:                     e.printStackTrace();
1:dc258ab:                 }
1:dc258ab:             }
1:dc258ab:         });
1:dc258ab: 
1:74bccd5:         Wait.waitFor(new Wait.Condition() {
1:74bccd5:             @Override
1:74bccd5:             public boolean isSatisified() throws Exception {
1:74bccd5:                 return lockerBStarting.await(1, TimeUnit.SECONDS);
1:74bccd5:             }
1:74bccd5:         });
1:74bccd5: 
1:f57fd7d:         TimeUnit.MILLISECONDS.sleep(lockerB.getLockAcquireSleepInterval() / 2);
1:dc258ab:         assertTrue("B is blocked", blocked.get());
1:dc258ab: 
1:dc258ab:         assertTrue("A is good", lockerA.keepAlive());
1:dc258ab:         printLockTable(connection);
1:dc258ab: 
1:dc258ab:         lockerA.stop();
1:dc258ab:         printLockTable(connection);
1:dc258ab: 
1:dc258ab:         TimeUnit.MILLISECONDS.sleep(2 * lockerB.getLockAcquireSleepInterval());
1:dc258ab:         assertFalse("lockerB has the lock", blocked.get());
1:dc258ab:         lockerB.stop();
1:dc258ab:         printLockTable(connection);
1:dc258ab:     }
1:dc258ab: 
1:17bf5c7:     @Test
1:ba5fdc5:     public void testLockAcquireRace() throws Exception {
1:ba5fdc5: 
1:ba5fdc5:         // build a fake lock
1:ba5fdc5:         final String fakeId = "Anon";
1:ba5fdc5:         final Connection connection = dataSource.getConnection();
1:f57fd7d:         printLockTable(connection);
1:ba5fdc5:         PreparedStatement statement = connection.prepareStatement(jdbc.getStatements().getLeaseObtainStatement());
1:ba5fdc5: 
1:ba5fdc5:         final long now = System.currentTimeMillis();
1:ba5fdc5:         statement.setString(1,fakeId);
1:ba5fdc5:         statement.setLong(2, now + 30000);
1:ba5fdc5:         statement.setLong(3, now);
1:ba5fdc5: 
1:ba5fdc5:         assertEquals("we got the lease", 1, statement.executeUpdate());
1:ba5fdc5:         printLockTable(connection);
1:ba5fdc5: 
1:ba5fdc5:         final LeaseDatabaseLocker lockerA = new LeaseDatabaseLocker();
1:ba5fdc5:         lockerA.setLeaseHolderId("A");
1:45e7d3a:         jdbc.setLocker(lockerA);
1:ba5fdc5: 
1:ba5fdc5:         final LeaseDatabaseLocker lockerB = new LeaseDatabaseLocker();
1:ba5fdc5:         lockerB.setLeaseHolderId("B");
1:45e7d3a:         jdbc.setLocker(lockerB);
1:ba5fdc5: 
1:ba5fdc5:         final Set<LeaseDatabaseLocker> lockedSet = new HashSet<LeaseDatabaseLocker>();
1:ba5fdc5:         ExecutorService executor = Executors.newCachedThreadPool();
1:ba5fdc5:         executor.execute(new Runnable() {
1:ba5fdc5:             @Override
1:ba5fdc5:             public void run() {
1:ba5fdc5:                 try {
1:ba5fdc5:                     lockerA.start();
1:ba5fdc5:                     lockedSet.add(lockerA);
1:ba5fdc5:                     printLockTable(connection);
1:ba5fdc5: 
1:ba5fdc5:                 } catch (Exception e) {
1:ba5fdc5:                     e.printStackTrace();
1:ba5fdc5:                 }
1:ba5fdc5:             }
1:ba5fdc5:         });
1:ba5fdc5: 
1:ba5fdc5:         executor.execute(new Runnable() {
1:ba5fdc5:             @Override
1:ba5fdc5:             public void run() {
1:ba5fdc5:                 try {
1:ba5fdc5:                     lockerB.start();
1:ba5fdc5:                     lockedSet.add(lockerB);
1:ba5fdc5:                     printLockTable(connection);
1:ba5fdc5: 
1:ba5fdc5:                 } catch (Exception e) {
1:ba5fdc5:                     e.printStackTrace();
1:ba5fdc5:                 }
1:ba5fdc5:             }
1:ba5fdc5:         });
1:ba5fdc5: 
1:ba5fdc5:         // sleep for a bit till both are alive
1:ba5fdc5:         TimeUnit.SECONDS.sleep(2);
1:ba5fdc5:         assertTrue("no start", lockedSet.isEmpty());
1:ba5fdc5:         assertFalse("A is blocked", lockerA.keepAlive());
1:ba5fdc5:         assertFalse("B is blocked", lockerB.keepAlive());
1:ba5fdc5: 
1:ba5fdc5:         LOG.info("releasing phony lock " + fakeId);
1:ba5fdc5: 
1:ba5fdc5:         statement = connection.prepareStatement(jdbc.getStatements().getLeaseUpdateStatement());
1:ba5fdc5:         statement.setString(1, null);
1:ba5fdc5:         statement.setLong(2, 0l);
1:ba5fdc5:         statement.setString(3, fakeId);
1:ba5fdc5:         assertEquals("we released " + fakeId, 1, statement.executeUpdate());
1:ba5fdc5:         LOG.info("released " + fakeId);
1:ba5fdc5:         printLockTable(connection);
1:ba5fdc5: 
1:ba5fdc5:         TimeUnit.MILLISECONDS.sleep(AbstractLocker.DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL);
1:ba5fdc5:         assertEquals("one locker started", 1, lockedSet.size());
1:ba5fdc5: 
1:ba5fdc5:         assertTrue("one isAlive", lockerA.keepAlive() || lockerB.keepAlive());
1:ba5fdc5: 
1:ba5fdc5:         LeaseDatabaseLocker winner = lockedSet.iterator().next();
1:ba5fdc5:         winner.stop();
1:ba5fdc5:         lockedSet.remove(winner);
1:ba5fdc5: 
1:ba5fdc5:         TimeUnit.MILLISECONDS.sleep(AbstractLocker.DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL);
1:ba5fdc5:         assertEquals("one locker started", 1, lockedSet.size());
1:ba5fdc5: 
1:ba5fdc5:         lockedSet.iterator().next().stop();
1:ba5fdc5:         printLockTable(connection);
1:ba5fdc5:     }
1:ba5fdc5: 
1:dc258ab:     @Test
1:17bf5c7:     public void testDiffOffsetAhead() throws Exception {
1:17bf5c7:         LeaseDatabaseLocker underTest = new LeaseDatabaseLocker();
1:17bf5c7:         assertTrue("when ahead of db adjustment is negative", callDiffOffset(underTest, System.currentTimeMillis() - 60000) < 0);
1:17bf5c7:     }
1:17bf5c7: 
1:17bf5c7:     @Test
1:17bf5c7:     public void testDiffOffsetBehind() throws Exception {
1:17bf5c7:         LeaseDatabaseLocker underTest = new LeaseDatabaseLocker();
1:17bf5c7:         assertTrue("when behind db adjustment is positive", callDiffOffset(underTest, System.currentTimeMillis() + 60000) > 0);
1:17bf5c7:     }
1:17bf5c7: 
1:17bf5c7:     @Test
1:17bf5c7:     public void testDiffIngoredIfLessthanMaxAllowableDiffFromDBTime() throws Exception {
1:17bf5c7:         LeaseDatabaseLocker underTest = new LeaseDatabaseLocker();
1:17bf5c7:         underTest.setMaxAllowableDiffFromDBTime(60000);
1:17bf5c7:         assertEquals("no adjust when under limit", 0, callDiffOffset(underTest,System.currentTimeMillis() - 40000 ));
1:17bf5c7:     }
1:17bf5c7: 
1:17bf5c7:     public long callDiffOffset(LeaseDatabaseLocker underTest, final long dbTime) throws Exception {
1:17bf5c7: 
1:17bf5c7:         Mockery context = new Mockery() {{
1:17bf5c7:             setImposteriser(ClassImposteriser.INSTANCE);
1:17bf5c7:         }};
1:17bf5c7:         final Statements statements = context.mock(Statements.class);
1:17bf5c7:         final JDBCPersistenceAdapter jdbcPersistenceAdapter = context.mock(JDBCPersistenceAdapter.class);
1:17bf5c7:         final Connection connection = context.mock(Connection.class);
1:17bf5c7:         final PreparedStatement preparedStatement = context.mock(PreparedStatement.class);
1:17bf5c7:         final ResultSet resultSet = context.mock(ResultSet.class);
1:17bf5c7:         final Timestamp timestamp = context.mock(Timestamp.class);
1:17bf5c7: 
1:17bf5c7:         context.checking(new Expectations() {{
1:17bf5c7:             allowing(jdbcPersistenceAdapter).getStatements();
1:17bf5c7:             will(returnValue(statements));
1:17bf5c7:             allowing(jdbcPersistenceAdapter);
1:17bf5c7:             allowing(statements);
1:17bf5c7:             allowing(connection).prepareStatement(with(any(String.class)));
1:17bf5c7:             will(returnValue(preparedStatement));
1:17bf5c7:             allowing(connection);
1:17bf5c7:             allowing(preparedStatement).executeQuery();
1:17bf5c7:             will(returnValue(resultSet));
1:17bf5c7:             allowing(resultSet).next();
1:17bf5c7:             will(returnValue(true));
1:17bf5c7:             allowing(resultSet).getTimestamp(1);
1:17bf5c7:             will(returnValue(timestamp));
1:17bf5c7:             allowing(timestamp).getTime();
1:17bf5c7:             will(returnValue(dbTime));
1:17bf5c7:         }});
1:17bf5c7: 
1:17bf5c7:         underTest.configure(jdbcPersistenceAdapter);
1:45e7d3a:         underTest.setLockable(jdbcPersistenceAdapter);
1:17bf5c7:         return underTest.determineTimeDifference(connection);
1:17bf5c7:     }
1:17bf5c7: 
1:ba5fdc5:     private void printLockTable(Connection connection) throws Exception {
1:4743a20:         DefaultJDBCAdapter.printQuery(connection, "SELECT * from ACTIVEMQ_LOCK", System.err);
1:dc258ab:     }
1:dc258ab: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:165959e
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     DataSource dataSource;
1:         dataSource = jdbc.getDataSource();
1:     @After
1:     public void stopDerby() {
1:         DataSourceServiceSupport.shutdownDefaultDataSource(dataSource);
1:     }
1: 
commit:f57fd7d
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.MILLISECONDS.sleep(lockerB.getLockAcquireSleepInterval() / 2);
/////////////////////////////////////////////////////////////////////////
1:         printLockTable(connection);
commit:45e7d3a
/////////////////////////////////////////////////////////////////////////
1:         jdbc.setLocker(lockerA);
1:         jdbc.setLocker(lockerB);
/////////////////////////////////////////////////////////////////////////
1:         jdbc.setLocker(lockerA);
1:         jdbc.setLocker(lockerB);
/////////////////////////////////////////////////////////////////////////
1:         underTest.setLockable(jdbcPersistenceAdapter);
author:Gary Tully
-------------------------------------------------------------------------------
commit:17bf5c7
/////////////////////////////////////////////////////////////////////////
1: import java.sql.ResultSet;
1: import java.sql.Timestamp;
/////////////////////////////////////////////////////////////////////////
1: import org.jmock.Expectations;
1: import org.jmock.Mockery;
1: import org.jmock.lib.legacy.ClassImposteriser;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testDiffOffsetAhead() throws Exception {
1:         LeaseDatabaseLocker underTest = new LeaseDatabaseLocker();
1:         assertTrue("when ahead of db adjustment is negative", callDiffOffset(underTest, System.currentTimeMillis() - 60000) < 0);
1:     }
1: 
1:     @Test
1:     public void testDiffOffsetBehind() throws Exception {
1:         LeaseDatabaseLocker underTest = new LeaseDatabaseLocker();
1:         assertTrue("when behind db adjustment is positive", callDiffOffset(underTest, System.currentTimeMillis() + 60000) > 0);
1:     }
1: 
1:     @Test
1:     public void testDiffIngoredIfLessthanMaxAllowableDiffFromDBTime() throws Exception {
1:         LeaseDatabaseLocker underTest = new LeaseDatabaseLocker();
1:         underTest.setMaxAllowableDiffFromDBTime(60000);
1:         assertEquals("no adjust when under limit", 0, callDiffOffset(underTest,System.currentTimeMillis() - 40000 ));
1:     }
1: 
1:     public long callDiffOffset(LeaseDatabaseLocker underTest, final long dbTime) throws Exception {
1: 
1:         Mockery context = new Mockery() {{
1:             setImposteriser(ClassImposteriser.INSTANCE);
1:         }};
1:         final Statements statements = context.mock(Statements.class);
1:         final JDBCPersistenceAdapter jdbcPersistenceAdapter = context.mock(JDBCPersistenceAdapter.class);
1:         final Connection connection = context.mock(Connection.class);
1:         final PreparedStatement preparedStatement = context.mock(PreparedStatement.class);
1:         final ResultSet resultSet = context.mock(ResultSet.class);
1:         final Timestamp timestamp = context.mock(Timestamp.class);
1: 
1:         context.checking(new Expectations() {{
1:             allowing(jdbcPersistenceAdapter).getStatements();
1:             will(returnValue(statements));
1:             allowing(jdbcPersistenceAdapter);
1:             allowing(statements);
1:             allowing(connection).prepareStatement(with(any(String.class)));
1:             will(returnValue(preparedStatement));
1:             allowing(connection);
1:             allowing(preparedStatement).executeQuery();
1:             will(returnValue(resultSet));
1:             allowing(resultSet).next();
1:             will(returnValue(true));
1:             allowing(resultSet).getTimestamp(1);
1:             will(returnValue(timestamp));
1:             allowing(timestamp).getTime();
1:             will(returnValue(dbTime));
1:         }});
1: 
1:         underTest.configure(jdbcPersistenceAdapter);
1:         return underTest.determineTimeDifference(connection);
1:     }
1: 
commit:74bccd5
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         lockerA.setLeaseHolderId("First");
1:         lockerB.setLeaseHolderId("Second");
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("First has lock", lockerA.keepAlive());
1: 
1:         final CountDownLatch lockerBStarting = new CountDownLatch(1);
1:                     lockerBStarting.countDown();
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return lockerBStarting.await(1, TimeUnit.SECONDS);
1:             }
1:         });
1: 
0:         TimeUnit.MILLISECONDS.sleep(lockerB.getLockAcquireSleepInterval());
commit:ba5fdc5
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
1: import java.util.HashSet;
1: import java.util.Set;
1: import org.apache.activemq.broker.AbstractLocker;
1: import org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: import static junit.framework.Assert.*;
1:     private static final Logger LOG = LoggerFactory.getLogger(LeaseDatabaseLockerTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testLockAcquireRace() throws Exception {
1: 
1:         // build a fake lock
1:         final String fakeId = "Anon";
1:         final Connection connection = dataSource.getConnection();
1:         PreparedStatement statement = connection.prepareStatement(jdbc.getStatements().getLeaseObtainStatement());
1: 
1:         final long now = System.currentTimeMillis();
1:         statement.setString(1,fakeId);
1:         statement.setLong(2, now + 30000);
1:         statement.setLong(3, now);
1: 
1:         assertEquals("we got the lease", 1, statement.executeUpdate());
1:         printLockTable(connection);
1: 
1:         final LeaseDatabaseLocker lockerA = new LeaseDatabaseLocker();
1:         lockerA.setLeaseHolderId("A");
0:         lockerA.configure(jdbc);
1: 
1:         final LeaseDatabaseLocker lockerB = new LeaseDatabaseLocker();
1:         lockerB.setLeaseHolderId("B");
0:         lockerB.configure(jdbc);
1: 
1:         final Set<LeaseDatabaseLocker> lockedSet = new HashSet<LeaseDatabaseLocker>();
1:         ExecutorService executor = Executors.newCachedThreadPool();
1:         executor.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     lockerA.start();
1:                     lockedSet.add(lockerA);
1:                     printLockTable(connection);
1: 
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         executor.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     lockerB.start();
1:                     lockedSet.add(lockerB);
1:                     printLockTable(connection);
1: 
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         // sleep for a bit till both are alive
1:         TimeUnit.SECONDS.sleep(2);
1:         assertTrue("no start", lockedSet.isEmpty());
1:         assertFalse("A is blocked", lockerA.keepAlive());
1:         assertFalse("B is blocked", lockerB.keepAlive());
1: 
1:         LOG.info("releasing phony lock " + fakeId);
1: 
1:         statement = connection.prepareStatement(jdbc.getStatements().getLeaseUpdateStatement());
1:         statement.setString(1, null);
1:         statement.setLong(2, 0l);
1:         statement.setString(3, fakeId);
1:         assertEquals("we released " + fakeId, 1, statement.executeUpdate());
1:         LOG.info("released " + fakeId);
1:         printLockTable(connection);
1: 
1:         TimeUnit.MILLISECONDS.sleep(AbstractLocker.DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL);
1:         assertEquals("one locker started", 1, lockedSet.size());
1: 
1:         assertTrue("one isAlive", lockerA.keepAlive() || lockerB.keepAlive());
1: 
1:         LeaseDatabaseLocker winner = lockedSet.iterator().next();
1:         winner.stop();
1:         lockedSet.remove(winner);
1: 
1:         TimeUnit.MILLISECONDS.sleep(AbstractLocker.DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL);
1:         assertEquals("one locker started", 1, lockedSet.size());
1: 
1:         lockedSet.iterator().next().stop();
1:         printLockTable(connection);
1:     }
1: 
1:     private void printLockTable(Connection connection) throws Exception {
0:         ((DefaultJDBCAdapter)jdbc.getAdapter()).printQuery(connection, "SELECT * from ACTIVEMQ_LOCK", System.err);
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
0: import java.io.IOException;
1: import java.sql.Connection;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
0: import static junit.framework.Assert.assertFalse;
0: import static junit.framework.Assert.assertTrue;
1: 
1: 
1: public class LeaseDatabaseLockerTest {
1: 
1:     JDBCPersistenceAdapter jdbc;
1:     BrokerService brokerService;
0:     EmbeddedDataSource dataSource;
1: 
1:     @Before
1:     public void setUpStore() throws Exception {
0:         dataSource = new EmbeddedDataSource();
0:         dataSource.setDatabaseName("derbyDb");
0:         dataSource.setCreateDatabase("create");
1:         jdbc = new JDBCPersistenceAdapter();
0:         jdbc.setDataSource(dataSource);
1:         brokerService = new BrokerService();
1:         jdbc.setBrokerService(brokerService);
1:         jdbc.getAdapter().doCreateTables(jdbc.getTransactionContext());
1:     }
1: 
1:     @Test
1:     public void testLockInterleave() throws Exception {
1: 
1:         LeaseDatabaseLocker lockerA = new LeaseDatabaseLocker();
0:         brokerService.setBrokerName("First");
0:         lockerA.setPersistenceAdapter(jdbc);
1: 
1:         final LeaseDatabaseLocker lockerB = new LeaseDatabaseLocker();
0:         brokerService.setBrokerName("Second");
0:         lockerB.setPersistenceAdapter(jdbc);
1:         final AtomicBoolean blocked = new AtomicBoolean(true);
1: 
1:         final Connection connection = dataSource.getConnection();
1:         printLockTable(connection);
1:         lockerA.start();
1:         printLockTable(connection);
1: 
1:         ExecutorService executor = Executors.newCachedThreadPool();
1:         executor.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     lockerB.start();
1:                     blocked.set(false);
1:                     printLockTable(connection);
1: 
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         assertTrue("B is blocked", blocked.get());
1: 
1:         assertTrue("A is good", lockerA.keepAlive());
1:         printLockTable(connection);
1: 
1:         lockerA.stop();
1:         printLockTable(connection);
1: 
1:         TimeUnit.MILLISECONDS.sleep(2 * lockerB.getLockAcquireSleepInterval());
1:         assertFalse("lockerB has the lock", blocked.get());
1:         lockerB.stop();
1:         printLockTable(connection);
1:     }
1: 
0:     private void printLockTable(Connection connection) throws IOException {
0:         //((DefaultJDBCAdapter)jdbc.getAdapter()).printQuery(connection, "SELECT * from ACTIVEMQ_LOCK", System.err);
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertTrue;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         DefaultJDBCAdapter.printQuery(connection, "SELECT * from ACTIVEMQ_LOCK", System.err);
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6ce702d
/////////////////////////////////////////////////////////////////////////
0:         lockerA.configure(jdbc);
0:         lockerB.configure(jdbc);
============================================================================