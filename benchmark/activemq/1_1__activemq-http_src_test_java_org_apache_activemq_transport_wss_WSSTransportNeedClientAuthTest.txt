1:f8bfff0: /**
1:f8bfff0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f8bfff0:  * contributor license agreements.  See the NOTICE file distributed with
1:f8bfff0:  * this work for additional information regarding copyright ownership.
1:f8bfff0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f8bfff0:  * (the "License"); you may not use this file except in compliance with
1:f8bfff0:  * the License.  You may obtain a copy of the License at
1:f8bfff0:  *
1:f8bfff0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f8bfff0:  *
1:f8bfff0:  * Unless required by applicable law or agreed to in writing, software
1:f8bfff0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f8bfff0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f8bfff0:  * See the License for the specific language governing permissions and
1:f8bfff0:  * limitations under the License.
1:f8bfff0:  */
1:f8bfff0: package org.apache.activemq.transport.wss;
1:f8bfff0: 
1:f8bfff0: import junit.framework.Assert;
1:f8bfff0: import org.apache.activemq.broker.BrokerFactory;
1:f8bfff0: import org.apache.activemq.broker.BrokerService;
1:f8bfff0: import org.apache.activemq.transport.stomp.Stomp;
1:f8bfff0: import org.apache.activemq.transport.stomp.StompFrame;
1:f8bfff0: import org.apache.activemq.transport.ws.MQTTWSConnection;
1:f8bfff0: import org.apache.activemq.transport.ws.StompWSConnection;
1:f8bfff0: import org.apache.activemq.util.Wait;
1:f8bfff0: import org.eclipse.jetty.util.ssl.SslContextFactory;
1:f8bfff0: import org.eclipse.jetty.websocket.api.Session;
1:f8bfff0: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1:f8bfff0: import org.eclipse.jetty.websocket.client.WebSocketClient;
1:f8bfff0: import org.eclipse.jetty.websocket.client.io.ConnectPromise;
1:f8bfff0: import org.junit.After;
1:f8bfff0: import org.junit.Before;
1:f8bfff0: import org.junit.Test;
1:f8bfff0: 
1:f8bfff0: import java.io.IOException;
1:f8bfff0: import java.net.URI;
1:f8bfff0: import java.util.concurrent.Future;
1:f8bfff0: import java.util.concurrent.TimeUnit;
1:f8bfff0: 
1:f8bfff0: import static junit.framework.TestCase.assertNotNull;
1:f8bfff0: import static junit.framework.TestCase.assertTrue;
1:f8bfff0: 
1:f8bfff0: public class WSSTransportNeedClientAuthTest {
1:f8bfff0: 
1:f8bfff0:     public static final String KEYSTORE_TYPE = "jks";
1:f8bfff0:     public static final String PASSWORD = "password";
1:f8bfff0:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:f8bfff0:     public static final String KEYSTORE = "src/test/resources/server.keystore";
1:f8bfff0: 
1:f8bfff0: 
1:f8bfff0:     private BrokerService broker;
1:f8bfff0: 
1:f8bfff0:     @Before
1:f8bfff0:     public void setUp() throws Exception {
1:f8bfff0:         broker = BrokerFactory.createBroker("xbean:activemq-https-need-client-auth.xml");
1:f8bfff0:         broker.setPersistent(false);
1:f8bfff0:         broker.start();
1:f8bfff0:         broker.waitUntilStarted();
1:f8bfff0: 
1:f8bfff0:         // these are used for the client side... for the server side, the SSL context
1:f8bfff0:         // will be configured through the <sslContext> spring beans
1:f8bfff0:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:f8bfff0:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:f8bfff0:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:f8bfff0:         System.setProperty("javax.net.ssl.keyStore", KEYSTORE);
1:f8bfff0:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:f8bfff0:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:f8bfff0:     }
1:f8bfff0: 
1:f8bfff0:     @After
1:f8bfff0:     public void tearDown() throws Exception {
1:f8bfff0:         if (broker != null) {
1:f8bfff0:             broker.stop();
1:f8bfff0:             broker.waitUntilStopped();
1:f8bfff0:         }
1:f8bfff0:     }
1:f8bfff0: 
1:f8bfff0:     @Test
1:f8bfff0:     public void testStompNeedClientAuth() throws Exception {
1:f8bfff0:         StompWSConnection wsStompConnection = new StompWSConnection();
1:f8bfff0:         System.out.println("starting connection");
1:f8bfff0:         SslContextFactory factory = new SslContextFactory();
1:f8bfff0:         factory.setKeyStorePath(KEYSTORE);
1:f8bfff0:         factory.setKeyStorePassword(PASSWORD);
1:f8bfff0:         factory.setKeyStoreType(KEYSTORE_TYPE);
1:f8bfff0:         factory.setTrustStorePath(TRUST_KEYSTORE);
1:f8bfff0:         factory.setTrustStorePassword(PASSWORD);
1:f8bfff0:         factory.setTrustStoreType(KEYSTORE_TYPE);
1:f8bfff0:         WebSocketClient wsClient = new WebSocketClient(factory);
1:f8bfff0:         wsClient.start();
1:f8bfff0: 
1:f8bfff0:         Future<Session> connected = wsClient.connect(wsStompConnection, new URI("wss://localhost:61618"));
1:f8bfff0:         Session sess = connected.get(30, TimeUnit.SECONDS);
1:f8bfff0: 
1:f8bfff0:         String connectFrame = "STOMP\n" +
1:f8bfff0:                               "login:system\n" +
1:f8bfff0:                               "passcode:manager\n" +
1:f8bfff0:                               "accept-version:1.2\n" +
1:f8bfff0:                               "host:localhost\n" +
1:f8bfff0:                               "\n" + Stomp.NULL;
1:f8bfff0: 
1:f8bfff0:         wsStompConnection.sendRawFrame(connectFrame);
1:f8bfff0: 
1:f8bfff0:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:f8bfff0:         assertNotNull(incoming);
1:f8bfff0:         assertTrue(incoming.startsWith("CONNECTED"));
1:f8bfff0: 
1:f8bfff0:         wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:f8bfff0:         wsStompConnection.close();
1:f8bfff0: 
1:f8bfff0:     }
1:f8bfff0: 
1:f8bfff0:     @Test
1:f8bfff0:     public void testMQTTNeedClientAuth() throws Exception {
1:f8bfff0:         SslContextFactory factory = new SslContextFactory();
1:f8bfff0:         factory.setKeyStorePath(KEYSTORE);
1:f8bfff0:         factory.setKeyStorePassword(PASSWORD);
1:f8bfff0:         factory.setKeyStoreType(KEYSTORE_TYPE);
1:f8bfff0:         factory.setTrustStorePath(TRUST_KEYSTORE);
1:f8bfff0:         factory.setTrustStorePassword(PASSWORD);
1:f8bfff0:         factory.setTrustStoreType(KEYSTORE_TYPE);
1:f8bfff0:         WebSocketClient wsClient = new WebSocketClient(factory);
1:f8bfff0:         wsClient.start();
1:f8bfff0: 
1:f8bfff0:         ClientUpgradeRequest request = new ClientUpgradeRequest();
1:f8bfff0:         request.setSubProtocols("mqttv3.1");
1:f8bfff0: 
1:f8bfff0:         MQTTWSConnection wsMQTTConnection = new MQTTWSConnection();
1:f8bfff0: 
1:f8bfff0:         wsClient.connect(wsMQTTConnection, new URI("wss://localhost:61618"), request);
1:f8bfff0:         if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:f8bfff0:             throw new IOException("Could not connect to MQTT WS endpoint");
1:f8bfff0:         }
1:f8bfff0: 
1:f8bfff0:         wsMQTTConnection.connect();
1:f8bfff0: 
1:f8bfff0:         assertTrue("Client not connected", wsMQTTConnection.isConnected());
1:f8bfff0: 
1:f8bfff0:         wsMQTTConnection.disconnect();
1:f8bfff0:         wsMQTTConnection.close();
1:f8bfff0: 
1:f8bfff0:     }
1:f8bfff0: 
1:f8bfff0: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:f8bfff0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.wss;
1: 
1: import junit.framework.Assert;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.transport.stomp.Stomp;
1: import org.apache.activemq.transport.stomp.StompFrame;
1: import org.apache.activemq.transport.ws.MQTTWSConnection;
1: import org.apache.activemq.transport.ws.StompWSConnection;
1: import org.apache.activemq.util.Wait;
1: import org.eclipse.jetty.util.ssl.SslContextFactory;
1: import org.eclipse.jetty.websocket.api.Session;
1: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1: import org.eclipse.jetty.websocket.client.WebSocketClient;
1: import org.eclipse.jetty.websocket.client.io.ConnectPromise;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static junit.framework.TestCase.assertNotNull;
1: import static junit.framework.TestCase.assertTrue;
1: 
1: public class WSSTransportNeedClientAuthTest {
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:     public static final String KEYSTORE = "src/test/resources/server.keystore";
1: 
1: 
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = BrokerFactory.createBroker("xbean:activemq-https-need-client-auth.xml");
1:         broker.setPersistent(false);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         // these are used for the client side... for the server side, the SSL context
1:         // will be configured through the <sslContext> spring beans
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testStompNeedClientAuth() throws Exception {
1:         StompWSConnection wsStompConnection = new StompWSConnection();
1:         System.out.println("starting connection");
1:         SslContextFactory factory = new SslContextFactory();
1:         factory.setKeyStorePath(KEYSTORE);
1:         factory.setKeyStorePassword(PASSWORD);
1:         factory.setKeyStoreType(KEYSTORE_TYPE);
1:         factory.setTrustStorePath(TRUST_KEYSTORE);
1:         factory.setTrustStorePassword(PASSWORD);
1:         factory.setTrustStoreType(KEYSTORE_TYPE);
1:         WebSocketClient wsClient = new WebSocketClient(factory);
1:         wsClient.start();
1: 
1:         Future<Session> connected = wsClient.connect(wsStompConnection, new URI("wss://localhost:61618"));
1:         Session sess = connected.get(30, TimeUnit.SECONDS);
1: 
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.2\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         wsStompConnection.sendRawFrame(connectFrame);
1: 
1:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:         assertNotNull(incoming);
1:         assertTrue(incoming.startsWith("CONNECTED"));
1: 
1:         wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:         wsStompConnection.close();
1: 
1:     }
1: 
1:     @Test
1:     public void testMQTTNeedClientAuth() throws Exception {
1:         SslContextFactory factory = new SslContextFactory();
1:         factory.setKeyStorePath(KEYSTORE);
1:         factory.setKeyStorePassword(PASSWORD);
1:         factory.setKeyStoreType(KEYSTORE_TYPE);
1:         factory.setTrustStorePath(TRUST_KEYSTORE);
1:         factory.setTrustStorePassword(PASSWORD);
1:         factory.setTrustStoreType(KEYSTORE_TYPE);
1:         WebSocketClient wsClient = new WebSocketClient(factory);
1:         wsClient.start();
1: 
1:         ClientUpgradeRequest request = new ClientUpgradeRequest();
1:         request.setSubProtocols("mqttv3.1");
1: 
1:         MQTTWSConnection wsMQTTConnection = new MQTTWSConnection();
1: 
1:         wsClient.connect(wsMQTTConnection, new URI("wss://localhost:61618"), request);
1:         if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:             throw new IOException("Could not connect to MQTT WS endpoint");
1:         }
1: 
1:         wsMQTTConnection.connect();
1: 
1:         assertTrue("Client not connected", wsMQTTConnection.isConnected());
1: 
1:         wsMQTTConnection.disconnect();
1:         wsMQTTConnection.close();
1: 
1:     }
1: 
1: }
============================================================================