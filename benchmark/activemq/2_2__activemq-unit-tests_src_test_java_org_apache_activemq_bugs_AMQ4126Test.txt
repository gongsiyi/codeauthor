1:f8f24e8: /**
1:f8f24e8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f8f24e8:  * contributor license agreements.  See the NOTICE file distributed with
1:f8f24e8:  * this work for additional information regarding copyright ownership.
1:f8f24e8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f8f24e8:  * (the "License"); you may not use this file except in compliance with
1:f8f24e8:  * the License.  You may obtain a copy of the License at
1:f8f24e8:  *
1:f8f24e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f8f24e8:  *
1:f8f24e8:  * Unless required by applicable law or agreed to in writing, software
1:f8f24e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f8f24e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f8f24e8:  * See the License for the specific language governing permissions and
1:f8f24e8:  * limitations under the License.
1:f8f24e8:  */
1:f8f24e8: package org.apache.activemq.bugs;
2:f8f24e8: 
1:f8f24e8: import java.net.Socket;
1:f8f24e8: import java.net.URI;
1:f8f24e8: 
1:b52c371: import javax.management.ObjectName;
1:f8f24e8: import javax.net.SocketFactory;
1:f8f24e8: import javax.net.ssl.SSLSocketFactory;
1:f8f24e8: 
1:f8f24e8: import junit.framework.TestCase;
1:f8f24e8: 
1:f8f24e8: import org.apache.activemq.ActiveMQConnection;
1:f8f24e8: import org.apache.activemq.ActiveMQSslConnectionFactory;
1:f8f24e8: import org.apache.activemq.broker.BrokerFactory;
1:f8f24e8: import org.apache.activemq.broker.BrokerService;
1:f8f24e8: import org.apache.activemq.transport.stomp.Stomp;
1:f8f24e8: import org.apache.activemq.transport.stomp.StompConnection;
1:f8f24e8: import org.apache.activemq.transport.stomp.StompFrame;
1:f8f24e8: import org.junit.After;
1:f8f24e8: import org.junit.Before;
1:f8f24e8: import org.junit.Test;
1:f8f24e8: 
1:f8f24e8: /**
1:f8f24e8:  *
1:f8f24e8:  */
1:f8f24e8: public class AMQ4126Test {
1:f8f24e8: 
1:f8f24e8:     protected BrokerService broker;
1:f8f24e8: 
1:f8f24e8:     protected String java_security_auth_login_config = "java.security.auth.login.config";
1:f8f24e8:     protected String xbean = "xbean:";
1:f8f24e8:     protected String confBase = "src/test/resources/org/apache/activemq/bugs/amq4126";
1:f8f24e8:     protected String certBase = "src/test/resources/org/apache/activemq/security";
1:f8f24e8:     protected String JaasStompSSLBroker_xml = "JaasStompSSLBroker.xml";
1:f8f24e8:     protected StompConnection stompConnection = new StompConnection();
1:b52c371:     private final static String destinationName = "TEST.QUEUE";
1:f8f24e8:     protected String oldLoginConf = null;
1:f8f24e8: 
1:f8f24e8:     @Before
1:f8f24e8:     public void before() throws Exception {
1:f8f24e8:         if (System.getProperty(java_security_auth_login_config) != null) {
1:f8f24e8:             oldLoginConf = System.getProperty(java_security_auth_login_config);
1:f8f24e8:         }
1:84eab9b:         System.setProperty(java_security_auth_login_config, confBase + "/login.config");
1:84eab9b:         broker = BrokerFactory.createBroker(xbean + confBase + "/" + JaasStompSSLBroker_xml);
1:f8f24e8: 
1:b52c371:         broker.setDeleteAllMessagesOnStartup(true);
1:b52c371:         broker.setUseJmx(true);
1:f8f24e8:         broker.start();
1:f8f24e8:         broker.waitUntilStarted();
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     @After
1:f8f24e8:     public void after() throws Exception {
1:f8f24e8:         broker.stop();
1:f8f24e8: 
1:f8f24e8:         if (oldLoginConf != null) {
1:f8f24e8:             System.setProperty(java_security_auth_login_config, oldLoginConf);
1:f8f24e8:         }
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     public Socket createSocket(String host, int port) throws Exception {
1:84eab9b:         System.setProperty("javax.net.ssl.trustStore", certBase + "/broker1.ks");
1:f8f24e8:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:f8f24e8:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:84eab9b:         System.setProperty("javax.net.ssl.keyStore", certBase + "/client.ks");
1:f8f24e8:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:f8f24e8:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:f8f24e8: 
1:f8f24e8:         SocketFactory factory = SSLSocketFactory.getDefault();
1:f8f24e8:         return factory.createSocket(host, port);
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     public void stompConnectTo(String connectorName, String extraHeaders) throws Exception {
1:f8f24e8:         String host = broker.getConnectorByName(connectorName).getConnectUri().getHost();
1:f8f24e8:         int port = broker.getConnectorByName(connectorName).getConnectUri().getPort();
1:f8f24e8:         stompConnection.open(createSocket(host, port));
1:f8f24e8:         String extra = extraHeaders != null ? extraHeaders : "\n";
1:f8f24e8:         stompConnection.sendFrame("CONNECT\n" + extra + "\n" + Stomp.NULL);
1:f8f24e8: 
1:f8f24e8:         StompFrame f = stompConnection.receive();
1:f8f24e8:         TestCase.assertEquals(f.getBody(), "CONNECTED", f.getAction());
1:f8f24e8:         stompConnection.close();
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     @Test
1:f8f24e8:     public void testStompSSLWithUsernameAndPassword() throws Exception {
1:f8f24e8:         stompConnectTo("stomp+ssl", "login:system\n" + "passcode:manager\n");
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     @Test
1:f8f24e8:     public void testStompSSLWithCertificate() throws Exception {
1:f8f24e8:         stompConnectTo("stomp+ssl", null);
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     @Test
1:f8f24e8:     public void testStompNIOSSLWithUsernameAndPassword() throws Exception {
1:f8f24e8:         stompConnectTo("stomp+nio+ssl", "login:system\n" + "passcode:manager\n");
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     @Test
1:f8f24e8:     public void testStompNIOSSLWithCertificate() throws Exception {
1:f8f24e8:         stompConnectTo("stomp+nio+ssl", null);
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     public void openwireConnectTo(String connectorName, String username, String password) throws Exception {
1:f8f24e8:         URI brokerURI = broker.getConnectorByName(connectorName).getConnectUri();
1:69fad2a:         String uri = "ssl://" + brokerURI.getHost() + ":" + brokerURI.getPort() + "?socket.verifyHostName=false";
1:f8f24e8:         ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory(uri);
1:84eab9b:         cf.setTrustStore("org/apache/activemq/security/broker1.ks");
1:f8f24e8:         cf.setTrustStorePassword("password");
1:84eab9b:         cf.setKeyStore("org/apache/activemq/security/client.ks");
1:f8f24e8:         cf.setKeyStorePassword("password");
1:f8f24e8:         ActiveMQConnection connection = null;
1:f8f24e8:         if (username != null || password != null) {
1:f8f24e8:             connection = (ActiveMQConnection)cf.createConnection(username, password);
1:f8f24e8:         } else {
1:f8f24e8:             connection = (ActiveMQConnection)cf.createConnection();
1:f8f24e8:         }
1:f8f24e8:         TestCase.assertNotNull(connection);
1:f8f24e8:         connection.start();
1:f8f24e8:         connection.stop();
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     @Test
1:f8f24e8:     public void testOpenwireSSLWithUsernameAndPassword() throws Exception {
1:f8f24e8:         openwireConnectTo("openwire+ssl", "system", "manager");
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     @Test
1:f8f24e8:     public void testOpenwireSSLWithCertificate() throws Exception {
1:f8f24e8:         openwireConnectTo("openwire+ssl", null, null);
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     @Test
1:f8f24e8:     public void testOpenwireNIOSSLWithUsernameAndPassword() throws Exception {
1:f8f24e8:         openwireConnectTo("openwire+nio+ssl", "system", "mmanager");
1:f8f24e8:     }
1:f8f24e8: 
1:f8f24e8:     @Test
1:f8f24e8:     public void testOpenwireNIOSSLWithCertificate() throws Exception {
1:f8f24e8:         openwireConnectTo("openwire+nio+ssl", null, null);
1:f8f24e8:     }
1:b52c371: 
1:b52c371:     @Test
1:b52c371:     public void testJmx() throws Exception {
1:b52c371:         TestCase.assertFalse(findDestination(destinationName));
1:b52c371:         broker.getAdminView().addQueue(destinationName);
1:b52c371:         TestCase.assertTrue(findDestination(destinationName));
1:b52c371:         broker.getAdminView().removeQueue(destinationName);
1:b52c371:         TestCase.assertFalse(findDestination(destinationName));
1:b52c371:     }
1:b52c371: 
1:b52c371:     private boolean findDestination(String name) throws Exception {
1:b52c371:         ObjectName[] destinations = broker.getAdminView().getQueues();
1:b52c371:         for (ObjectName destination : destinations) {
1:b52c371:             if (destination.toString().contains(name)) {
1:b52c371:                 return true;
1:b52c371:             }
1:b52c371:         }
1:b52c371:         return false;
1:b52c371:     }
1:b52c371: 
1:f8f24e8: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
1:         String uri = "ssl://" + brokerURI.getHost() + ":" + brokerURI.getPort() + "?socket.verifyHostName=false";
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b52c371
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:     private final static String destinationName = "TEST.QUEUE";
/////////////////////////////////////////////////////////////////////////
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setUseJmx(true);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testJmx() throws Exception {
1:         TestCase.assertFalse(findDestination(destinationName));
1:         broker.getAdminView().addQueue(destinationName);
1:         TestCase.assertTrue(findDestination(destinationName));
1:         broker.getAdminView().removeQueue(destinationName);
1:         TestCase.assertFalse(findDestination(destinationName));
1:     }
1: 
1:     private boolean findDestination(String name) throws Exception {
1:         ObjectName[] destinations = broker.getAdminView().getQueues();
1:         for (ObjectName destination : destinations) {
1:             if (destination.toString().contains(name)) {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: 
commit:84eab9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         System.setProperty(java_security_auth_login_config, confBase + "/login.config");
1:         broker = BrokerFactory.createBroker(xbean + confBase + "/" + JaasStompSSLBroker_xml);
/////////////////////////////////////////////////////////////////////////
1:         System.setProperty("javax.net.ssl.trustStore", certBase + "/broker1.ks");
1:         System.setProperty("javax.net.ssl.keyStore", certBase + "/client.ks");
/////////////////////////////////////////////////////////////////////////
1:         cf.setTrustStore("org/apache/activemq/security/broker1.ks");
1:         cf.setKeyStore("org/apache/activemq/security/client.ks");
commit:ef24cc9
commit:f8f24e8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import java.io.File;
1: import java.net.Socket;
1: import java.net.URI;
1: 
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQSslConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.transport.stomp.Stomp;
1: import org.apache.activemq.transport.stomp.StompConnection;
1: import org.apache.activemq.transport.stomp.StompFrame;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  *
1:  */
1: public class AMQ4126Test {
1: 
1:     protected BrokerService broker;
1: 
1:     protected String java_security_auth_login_config = "java.security.auth.login.config";
1:     protected String xbean = "xbean:";
1:     protected String confBase = "src/test/resources/org/apache/activemq/bugs/amq4126";
1:     protected String certBase = "src/test/resources/org/apache/activemq/security";
0:     protected String sep  = File.separator;
1:     protected String JaasStompSSLBroker_xml = "JaasStompSSLBroker.xml";
1:     protected StompConnection stompConnection = new StompConnection();
1: 
1:     protected String oldLoginConf = null;
1: 
1:     @Before
1:     public void before() throws Exception {
1:         if (System.getProperty(java_security_auth_login_config) != null) {
1:             oldLoginConf = System.getProperty(java_security_auth_login_config);
1:         }
0:         System.setProperty(java_security_auth_login_config, confBase + sep + "login.config");
0:         broker = BrokerFactory.createBroker(xbean + confBase + sep + JaasStompSSLBroker_xml);
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         broker.stop();
1: 
1:         if (oldLoginConf != null) {
1:             System.setProperty(java_security_auth_login_config, oldLoginConf);
1:         }
1:     }
1: 
1:     public Socket createSocket(String host, int port) throws Exception {
0:         System.setProperty("javax.net.ssl.trustStore", certBase + sep + "broker1.ks");
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
0:         System.setProperty("javax.net.ssl.keyStore", certBase + sep + "client.ks");
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1: 
1:         SocketFactory factory = SSLSocketFactory.getDefault();
1:         return factory.createSocket(host, port);
1:     }
1: 
1:     public void stompConnectTo(String connectorName, String extraHeaders) throws Exception {
1:         String host = broker.getConnectorByName(connectorName).getConnectUri().getHost();
1:         int port = broker.getConnectorByName(connectorName).getConnectUri().getPort();
1:         stompConnection.open(createSocket(host, port));
1:         String extra = extraHeaders != null ? extraHeaders : "\n";
1:         stompConnection.sendFrame("CONNECT\n" + extra + "\n" + Stomp.NULL);
1: 
1:         StompFrame f = stompConnection.receive();
1:         TestCase.assertEquals(f.getBody(), "CONNECTED", f.getAction());
1:         stompConnection.close();
1:     }
1: 
1:     @Test
1:     public void testStompSSLWithUsernameAndPassword() throws Exception {
1:         stompConnectTo("stomp+ssl", "login:system\n" + "passcode:manager\n");
1:     }
1: 
1:     @Test
1:     public void testStompSSLWithCertificate() throws Exception {
1:         stompConnectTo("stomp+ssl", null);
1:     }
1: 
1:     @Test
1:     public void testStompNIOSSLWithUsernameAndPassword() throws Exception {
1:         stompConnectTo("stomp+nio+ssl", "login:system\n" + "passcode:manager\n");
1:     }
1: 
1:     @Test
1:     public void testStompNIOSSLWithCertificate() throws Exception {
1:         stompConnectTo("stomp+nio+ssl", null);
1:     }
1: 
1:     public void openwireConnectTo(String connectorName, String username, String password) throws Exception {
1:         URI brokerURI = broker.getConnectorByName(connectorName).getConnectUri();
0:         String uri = "ssl://" + brokerURI.getHost() + ":" + brokerURI.getPort();
1:         ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory(uri);
0:         cf.setTrustStore("org/apache/activemq/security" + sep + "broker1.ks");
1:         cf.setTrustStorePassword("password");
0:         cf.setKeyStore("org/apache/activemq/security" + sep + "client.ks");
1:         cf.setKeyStorePassword("password");
1:         ActiveMQConnection connection = null;
1:         if (username != null || password != null) {
1:             connection = (ActiveMQConnection)cf.createConnection(username, password);
1:         } else {
1:             connection = (ActiveMQConnection)cf.createConnection();
1:         }
1:         TestCase.assertNotNull(connection);
1:         connection.start();
1:         connection.stop();
1:     }
1: 
1:     @Test
1:     public void testOpenwireSSLWithUsernameAndPassword() throws Exception {
1:         openwireConnectTo("openwire+ssl", "system", "manager");
1:     }
1: 
1:     @Test
1:     public void testOpenwireSSLWithCertificate() throws Exception {
1:         openwireConnectTo("openwire+ssl", null, null);
1:     }
1: 
1:     @Test
1:     public void testOpenwireNIOSSLWithUsernameAndPassword() throws Exception {
1:         openwireConnectTo("openwire+nio+ssl", "system", "mmanager");
1:     }
1: 
1:     @Test
1:     public void testOpenwireNIOSSLWithCertificate() throws Exception {
1:         openwireConnectTo("openwire+nio+ssl", null, null);
1:     }
1: }
============================================================================