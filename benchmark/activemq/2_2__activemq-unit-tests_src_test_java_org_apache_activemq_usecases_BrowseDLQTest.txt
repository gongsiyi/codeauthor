1:2a1bc72: /**
1:2a1bc72:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2a1bc72:  * contributor license agreements.  See the NOTICE file distributed with
1:2a1bc72:  * this work for additional information regarding copyright ownership.
1:2a1bc72:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2a1bc72:  * (the "License"); you may not use this file except in compliance with
1:2a1bc72:  * the License.  You may obtain a copy of the License at
1:2a1bc72:  *
1:2a1bc72:  * http://www.apache.org/licenses/LICENSE-2.0
1:2a1bc72:  *
1:2a1bc72:  * Unless required by applicable law or agreed to in writing, software
1:2a1bc72:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a1bc72:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a1bc72:  * See the License for the specific language governing permissions and
1:2a1bc72:  * limitations under the License.
1:2a1bc72:  */
1:2a1bc72: package org.apache.activemq.usecases;
1:2a1bc72: 
1:2a1bc72: import org.apache.activemq.ActiveMQConnectionFactory;
1:2a1bc72: import org.apache.activemq.broker.BrokerFactory;
1:2a1bc72: import org.apache.activemq.broker.BrokerService;
1:2a1bc72: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:2a1bc72: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:2a1bc72: import org.apache.activemq.broker.region.policy.PolicyMap;
1:2a1bc72: import org.apache.activemq.command.ActiveMQQueue;
1:2a1bc72: import org.junit.After;
1:2a1bc72: import org.junit.Test;
1:2a1bc72: 
1:2a1bc72: import javax.jms.*;
1:2a1bc72: import javax.management.MalformedObjectNameException;
1:2a1bc72: import javax.management.ObjectName;
1:2a1bc72: import javax.management.openmbean.CompositeData;
1:2a1bc72: import javax.management.openmbean.OpenDataException;
1:2a1bc72: import javax.management.openmbean.TabularData;
1:2a1bc72: 
1:2a1bc72: import java.util.concurrent.TimeUnit;
1:2a1bc72: 
1:2621463: import static org.junit.Assert.*;
1:2a1bc72: 
1:2a1bc72: /**
1:2a1bc72:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:2a1bc72:  */
1:2a1bc72: public class BrowseDLQTest {
1:2a1bc72: 
1:2a1bc72:     private static final int NUM_MESSAGES = 100;
1:2a1bc72:     private BrokerService brokerService;
1:2a1bc72:     private ActiveMQQueue testQueue = new ActiveMQQueue("TEST.FOO");
1:2a1bc72:     private ActiveMQQueue dlq = new ActiveMQQueue("ActiveMQ.DLQ");
1:2a1bc72: 
1:2a1bc72:     @Test
1:2a1bc72:     public void testCannotBrowseDLQAsTable() throws Exception {
1:2a1bc72:         startBroker();
1:2a1bc72:         // send 100 messages to queue with TTL of 1 second
1:2a1bc72:         sendMessagesToBeExpired();
1:2a1bc72: 
1:2a1bc72:         // let's let the messages expire
1:2a1bc72:         TimeUnit.SECONDS.sleep(2);
1:2a1bc72: 
1:2a1bc72:         assertCanBrowse();
1:2a1bc72:     }
1:2a1bc72: 
1:2a1bc72:     private void assertCanBrowse() throws MalformedObjectNameException, OpenDataException {
1:2a1bc72:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=ActiveMQ.DLQ");
1:2a1bc72:         QueueViewMBean queue = (QueueViewMBean)
1:2a1bc72:                 brokerService.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:2a1bc72:         // make sure we have messages here
1:2a1bc72:         assertTrue(queue.getQueueSize() > 0);
1:2a1bc72: 
1:2a1bc72:         CompositeData[] regularBrowse = queue.browse();
1:2a1bc72:         assertNotNull(regularBrowse);
1:2a1bc72: 
1:2a1bc72:         TabularData tableData = queue.browseAsTable();
1:2a1bc72:         assertNotNull(tableData);
1:2a1bc72: 
1:2a1bc72:     }
1:2a1bc72: 
1:2a1bc72: 
1:2a1bc72: 
1:2a1bc72:     @After
1:2a1bc72:     public void tearDown() throws Exception {
1:2a1bc72:         brokerService.stop();
1:2a1bc72:         brokerService.waitUntilStopped();
1:2a1bc72:     }
1:2a1bc72: 
1:2a1bc72:     private void startBroker() throws Exception {
1:2a1bc72:         brokerService = BrokerFactory.createBroker("broker:()/localhost?deleteAllMessagesOnStartup=true");
1:2a1bc72: 
1:2a1bc72:         PolicyMap policyMap = new PolicyMap();
1:2a1bc72:         PolicyEntry policyEntry = new PolicyEntry();
1:2a1bc72:         policyEntry.setExpireMessagesPeriod(1000);
1:2a1bc72:         policyMap.setDefaultEntry(policyEntry);
1:2a1bc72:         brokerService.setDestinationPolicy(policyMap);
1:2a1bc72:         brokerService.start();
1:2a1bc72:         brokerService.waitUntilStarted();
1:2a1bc72:     }
1:2a1bc72: 
1:2a1bc72:     private void sendMessagesToBeExpired() throws JMSException, InterruptedException {
1:2a1bc72:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:2a1bc72:         Connection connection = factory.createConnection();
1:2a1bc72:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a1bc72:         MessageProducer producer = session.createProducer(testQueue);
1:2a1bc72:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:2a1bc72:             producer.send(testQueue,session.createTextMessage("Hello world #"  + i), DeliveryMode.PERSISTENT,
1:2a1bc72:                     4, 500);
1:2a1bc72:         }
1:2a1bc72:         connection.close();
1:2a1bc72:     }
1:2a1bc72: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:2621463
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
author:Christian Posta
-------------------------------------------------------------------------------
commit:2a1bc72
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Test;
1: 
1: import javax.jms.*;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.TabularData;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
0: import static junit.framework.Assert.assertNotNull;
0: import static junit.framework.TestCase.assertTrue;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class BrowseDLQTest {
1: 
1:     private static final int NUM_MESSAGES = 100;
1:     private BrokerService brokerService;
1:     private ActiveMQQueue testQueue = new ActiveMQQueue("TEST.FOO");
1:     private ActiveMQQueue dlq = new ActiveMQQueue("ActiveMQ.DLQ");
1: 
1:     @Test
1:     public void testCannotBrowseDLQAsTable() throws Exception {
1:         startBroker();
1:         // send 100 messages to queue with TTL of 1 second
1:         sendMessagesToBeExpired();
1: 
1:         // let's let the messages expire
1:         TimeUnit.SECONDS.sleep(2);
1: 
1:         assertCanBrowse();
1:     }
1: 
1:     private void assertCanBrowse() throws MalformedObjectNameException, OpenDataException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=ActiveMQ.DLQ");
1:         QueueViewMBean queue = (QueueViewMBean)
1:                 brokerService.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         // make sure we have messages here
1:         assertTrue(queue.getQueueSize() > 0);
1: 
1:         CompositeData[] regularBrowse = queue.browse();
1:         assertNotNull(regularBrowse);
1: 
1:         TabularData tableData = queue.browseAsTable();
1:         assertNotNull(tableData);
1: 
1:     }
1: 
1: 
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         brokerService = BrokerFactory.createBroker("broker:()/localhost?deleteAllMessagesOnStartup=true");
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setExpireMessagesPeriod(1000);
1:         policyMap.setDefaultEntry(policyEntry);
1:         brokerService.setDestinationPolicy(policyMap);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     private void sendMessagesToBeExpired() throws JMSException, InterruptedException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(testQueue);
1:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:             producer.send(testQueue,session.createTextMessage("Hello world #"  + i), DeliveryMode.PERSISTENT,
1:                     4, 500);
1:         }
1:         connection.close();
1:     }
1: }
============================================================================