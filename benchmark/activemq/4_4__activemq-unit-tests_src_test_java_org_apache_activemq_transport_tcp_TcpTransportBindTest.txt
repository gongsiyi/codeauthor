1:3332220: /**
1:3332220:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3332220:  * contributor license agreements.  See the NOTICE file distributed with
1:3332220:  * this work for additional information regarding copyright ownership.
1:3332220:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3332220:  * (the "License"); you may not use this file except in compliance with
1:3332220:  * the License.  You may obtain a copy of the License at
1:3332220:  *
1:3332220:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3332220:  *
1:3332220:  * Unless required by applicable law or agreed to in writing, software
1:3332220:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3332220:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3332220:  * See the License for the specific language governing permissions and
1:3332220:  * limitations under the License.
1:3332220:  */
1:3332220: package org.apache.activemq.transport.tcp;
1:206df1b: 
1:206df1b: import java.util.Timer;
1:206df1b: import java.util.TimerTask;
1:206df1b: 
1:3332220: import javax.jms.Connection;
1:206df1b: import javax.jms.MessageConsumer;
1:206df1b: import javax.jms.Session;
1:206df1b: 
1:3332220: import org.apache.activemq.ActiveMQConnectionFactory;
1:3332220: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:73d2810: import org.apache.activemq.broker.BrokerService;
5:3332220: 
1:3332220: public class TcpTransportBindTest extends EmbeddedBrokerTestSupport {
1:88b80e2:     String addr = "tcp://localhost:0";
1:88b80e2: 
1:3332220:     /**
1:3332220:      * exercise some server side socket options
1:3332220:      * @throws Exception
1:3332220:      */
1:88b80e2:     @Override
1:88b80e2:     protected void setUp() throws Exception {
1:3332220:         bindAddress = addr + "?transport.reuseAddress=true&transport.soTimeout=1000";
1:3332220:         super.setUp();
1:88b80e2: 
1:88b80e2:         addr = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:3332220:     }
1:88b80e2: 
1:73d2810:     @Override
1:73d2810:     protected BrokerService createBroker() throws Exception {
1:73d2810:         BrokerService answer = new BrokerService();
1:73d2810:         answer.setBrokerName("TcpTransportBindTest");
1:73d2810:         answer.setPersistent(false);
1:73d2810:         answer.setUseJmx(false);
1:73d2810:         answer.addConnector(bindAddress);
1:73d2810:         return answer;
1:73d2810:     }
1:73d2810: 
1:3332220:     public void testConnect() throws Exception {
1:3332220:         Connection connection = new ActiveMQConnectionFactory(addr).createConnection();
1:3332220:         connection.start();
1:3332220:     }
1:88b80e2: 
1:206df1b:     public void testReceiveThrowsException() throws Exception {
1:206df1b:         Connection connection = new ActiveMQConnectionFactory(addr).createConnection();
1:206df1b:         connection.start();
1:206df1b:         Session sess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:206df1b:         MessageConsumer consumer = sess.createConsumer(createDestination());
1:206df1b:         class StopTask extends TimerTask {
1:88b80e2:             @Override
1:206df1b:             public void run() {
1:206df1b:                 try {
1:206df1b:                     broker.stop();
1:206df1b:                 } catch (Exception e) {
1:206df1b:                     e.printStackTrace();
1:206df1b:                 }
1:206df1b:             }
1:206df1b:         }
1:206df1b:         Timer timer = new Timer();
1:206df1b:         timer.schedule(new StopTask(), 1000);
1:206df1b:         try {
1:206df1b:             consumer.receive(30000);
1:206df1b:             fail("Should have thrown an exception");
1:206df1b:         } catch (Exception e) {
1:206df1b:             // should fail
1:206df1b:         }
1:206df1b:     }
1:3332220: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:73d2810
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setBrokerName("TcpTransportBindTest");
1:         answer.setPersistent(false);
1:         answer.setUseJmx(false);
1:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:88b80e2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     String addr = "tcp://localhost:0";
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1: 
1:         addr = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1: 
1:             @Override
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:206df1b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Timer;
1: import java.util.TimerTask;
1: 
0: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:     public void testReceiveThrowsException() throws Exception {
1:         Connection connection = new ActiveMQConnectionFactory(addr).createConnection();
1:         connection.start();
1:         Session sess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = sess.createConsumer(createDestination());
1:         class StopTask extends TimerTask {
1:             public void run() {
1:                 try {
1:                     broker.stop();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         }
1:         Timer timer = new Timer();
1:         timer.schedule(new StopTask(), 1000);
1:         try {
1:             consumer.receive(30000);
1:             fail("Should have thrown an exception");
1:         } catch (Exception e) {
1:             // should fail
1:         }
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:3332220
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import javax.jms.Connection;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: 
1: public class TcpTransportBindTest extends EmbeddedBrokerTestSupport {
0:     final String addr = "tcp://localhost:61617";
1:     
1:     /**
1:      * exercise some server side socket options
1:      * @throws Exception
1:      */
0:     protected void setUp() throws Exception {   
1:         bindAddress = addr + "?transport.reuseAddress=true&transport.soTimeout=1000";
1:         super.setUp();
1:     }
1:     
1:     public void testConnect() throws Exception {
1:         Connection connection = new ActiveMQConnectionFactory(addr).createConnection();
1:         connection.start();
1:     }
1: }
============================================================================