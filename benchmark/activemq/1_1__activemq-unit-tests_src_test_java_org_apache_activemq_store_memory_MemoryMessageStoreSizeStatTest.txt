1:785b16b: /**
1:785b16b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:785b16b:  * contributor license agreements.  See the NOTICE file distributed with
1:785b16b:  * this work for additional information regarding copyright ownership.
1:785b16b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:785b16b:  * (the "License"); you may not use this file except in compliance with
1:785b16b:  * the License.  You may obtain a copy of the License at
3:785b16b:  *
1:785b16b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:785b16b:  *
1:785b16b:  * Unless required by applicable law or agreed to in writing, software
1:785b16b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:785b16b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:785b16b:  * See the License for the specific language governing permissions and
1:785b16b:  * limitations under the License.
1:785b16b:  */
1:785b16b: package org.apache.activemq.store.memory;
2:785b16b: 
1:785b16b: import java.io.IOException;
1:734fb7d: import java.util.concurrent.atomic.AtomicLong;
1:785b16b: 
1:a49d46e: import javax.jms.Connection;
1:a49d46e: 
1:a49d46e: import org.apache.activemq.ActiveMQConnectionFactory;
1:785b16b: import org.apache.activemq.broker.BrokerService;
1:a49d46e: import org.apache.activemq.broker.region.Destination;
1:785b16b: import org.apache.activemq.store.AbstractMessageStoreSizeStatTest;
1:a49d46e: import org.junit.Test;
1:785b16b: import org.slf4j.Logger;
1:785b16b: import org.slf4j.LoggerFactory;
1:785b16b: 
1:785b16b: /**
1:785b16b:  * This test checks that KahaDB properly sets the new storeMessageSize statistic.
1:a49d46e:  *
1:785b16b:  * AMQ-5748
1:a49d46e:  *
1:785b16b:  */
1:785b16b: public class MemoryMessageStoreSizeStatTest extends AbstractMessageStoreSizeStatTest {
1:785b16b:     protected static final Logger LOG = LoggerFactory
1:785b16b:             .getLogger(MemoryMessageStoreSizeStatTest.class);
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     protected void initPersistence(BrokerService brokerService) throws IOException {
1:785b16b:         broker.setPersistent(false);
1:785b16b:         broker.setPersistenceAdapter(new MemoryPersistenceAdapter());
1:785b16b:     }
1:785b16b: 
1:a49d46e:     @Override
1:8a09b7e:     @Test(timeout=30000)
1:a49d46e:     public void testMessageSizeOneDurable() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:a49d46e:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:a49d46e:         connection.setClientID("clientId");
1:a49d46e:         connection.start();
1:785b16b: 
1:a49d46e:         //The expected value is only 100 because for durables a LRUCache is being used
1:a49d46e:         //with a max size of 100
1:734fb7d:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1"}, 200, 100, publishedMessageSize);
1:a49d46e: 
1:a49d46e:         //verify the count and size, should be 100 because of the LRUCache
1:734fb7d:         //verify size is at least the minimum of 100 messages times 100 bytes
1:734fb7d:         verifyStats(dest, 100, 100 * 100);
1:a49d46e: 
1:734fb7d:         consumeDurableTestMessages(connection, "sub1", 100, publishedMessageSize);
1:a49d46e: 
1:a49d46e:         //Since an LRU cache is used and messages are kept in memory, this should be 100 still
1:734fb7d:         verifyStats(dest, 100, publishedMessageSize.get());
1:a49d46e: 
1:a49d46e:         connection.stop();
1:a49d46e: 
1:a49d46e:     }
1:a49d46e: 
1:a49d46e:     @Override
1:8a09b7e:     @Test(timeout=30000)
1:a49d46e:     public void testMessageSizeTwoDurables() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:a49d46e:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:a49d46e:         connection.setClientID("clientId");
1:a49d46e:         connection.start();
1:a49d46e: 
1:a49d46e:         //The expected value is only 100 because for durables a LRUCache is being used
1:a49d46e:         //with a max size of 100, so only 100 messages are kept
1:734fb7d:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1", "sub2"}, 200, 100, publishedMessageSize);
1:a49d46e: 
1:a49d46e:         //verify the count and size
1:734fb7d:         //verify size is at least the minimum of 100 messages times 100 bytes
1:734fb7d:         verifyStats(dest, 100, 100 * 100);
1:a49d46e: 
1:a49d46e:         //consume for sub1
1:734fb7d:         consumeDurableTestMessages(connection, "sub1", 100, publishedMessageSize);
1:a49d46e: 
1:a49d46e:         //Should be 100 messages still
1:734fb7d:         verifyStats(dest, 100, publishedMessageSize.get());
1:a49d46e: 
1:a49d46e:         connection.stop();
1:a49d46e: 
1:a49d46e:     }
1:a49d46e: 
1:a49d46e: 
1:785b16b: 
1:785b16b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:fc4c697
/////////////////////////////////////////////////////////////////////////
commit:8a09b7e
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=30000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=30000)
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.AbstractStoreStatTestSupport;
/////////////////////////////////////////////////////////////////////////
1:         AtomicLong publishedMessageSize = new AtomicLong();
1:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1"}, 200, 100, publishedMessageSize);
1:         //verify size is at least the minimum of 100 messages times 100 bytes
1:         verifyStats(dest, 100, 100 * 100);
1:         consumeDurableTestMessages(connection, "sub1", 100, publishedMessageSize);
1:         verifyStats(dest, 100, publishedMessageSize.get());
/////////////////////////////////////////////////////////////////////////
1:         AtomicLong publishedMessageSize = new AtomicLong();
1:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1", "sub2"}, 200, 100, publishedMessageSize);
1:         //verify size is at least the minimum of 100 messages times 100 bytes
1:         verifyStats(dest, 100, 100 * 100);
1:         consumeDurableTestMessages(connection, "sub1", 100, publishedMessageSize);
1:         verifyStats(dest, 100, publishedMessageSize.get());
commit:a49d46e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.region.Destination;
1: import org.junit.Test;
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     @Test(timeout=10000)
1:     public void testMessageSizeOneDurable() throws Exception {
1:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1:         //The expected value is only 100 because for durables a LRUCache is being used
1:         //with a max size of 100
0:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1"}, 200, 100);
1: 
1:         //verify the count and size, should be 100 because of the LRUCache
0:         verifyStats(dest, 100, 100 * messageSize);
1: 
0:         consumeDurableTestMessages(connection, "sub1", 100);
1: 
1:         //Since an LRU cache is used and messages are kept in memory, this should be 100 still
0:         verifyStats(dest, 100, 100 * messageSize);
1: 
1:         connection.stop();
1: 
1:     }
1: 
1:     @Override
0:     @Test(timeout=10000)
1:     public void testMessageSizeTwoDurables() throws Exception {
1:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1: 
1:         //The expected value is only 100 because for durables a LRUCache is being used
1:         //with a max size of 100, so only 100 messages are kept
0:         Destination dest = publishTestMessagesDurable(connection, new String[] {"sub1", "sub2"}, 200, 100);
1: 
1:         //verify the count and size
0:         verifyStats(dest, 100, 100 * messageSize);
1: 
1:         //consume for sub1
0:         consumeDurableTestMessages(connection, "sub1", 100);
1: 
1:         //Should be 100 messages still
0:         verifyStats(dest, 100, 100 * messageSize);
1: 
1:         connection.stop();
1: 
1:     }
1: 
1: 
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.memory;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.AbstractMessageStoreSizeStatTest;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * This test checks that KahaDB properly sets the new storeMessageSize statistic.
1:  * 
1:  * AMQ-5748
1:  * 
1:  */
1: public class MemoryMessageStoreSizeStatTest extends AbstractMessageStoreSizeStatTest {
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(MemoryMessageStoreSizeStatTest.class);
1: 
1:     @Override
1:     protected void initPersistence(BrokerService brokerService) throws IOException {
1:         broker.setPersistent(false);
1:         broker.setPersistenceAdapter(new MemoryPersistenceAdapter());
1:     }
1: 
1: 
1:  
1: 
1: }
============================================================================