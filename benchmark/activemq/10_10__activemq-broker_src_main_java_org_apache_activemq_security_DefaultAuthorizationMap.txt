1:9f59397: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:3dbc9c9:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3dbc9c9:  *
1:9f59397:  * Unless required by applicable law or agreed to in writing, software
1:9f59397:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f59397:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f59397:  * See the License for the specific language governing permissions and
1:9f59397:  * limitations under the License.
1:9f59397:  */
1:9f59397: package org.apache.activemq.security;
1:f812e34: 
1:9027d49: import java.lang.reflect.Constructor;
1:9027d49: import java.lang.reflect.Method;
1:0525772: import java.security.Principal;
1:3b39d2c: import java.util.*;
1:74a7a8b: 
1:67ccfca: import org.apache.activemq.command.ActiveMQDestination;
1:67ccfca: import org.apache.activemq.filter.DestinationMap;
1:67ccfca: import org.apache.activemq.filter.DestinationMapEntry;
1:3b39d2c: import org.apache.activemq.filter.DestinationMapNode;
1:3b39d2c: import org.apache.activemq.filter.DestinationNode;
1:67ccfca: 
1:9f59397: /**
1:9f59397:  * Represents a destination based configuration of policies so that individual
1:9f59397:  * destinations or wildcard hierarchies of destinations can be configured using
1:f812e34:  * different policies. Each entry in the map represents the authorization ACLs
1:f812e34:  * for each operation.
1:0bbc0ac:  *
1:3dbc9c9:  *
1:9f59397:  */
1:9f59397: public class DefaultAuthorizationMap extends DestinationMap implements AuthorizationMap {
1:2f469c1: 
1:2f469c1:     public static final String DEFAULT_GROUP_CLASS = "org.apache.activemq.jaas.GroupPrincipal";
1:2f469c1: 
1:9f59397:     private AuthorizationEntry defaultEntry;
1:f812e34: 
1:e78e72f:     private TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry;
1:9027d49: 
1:2f469c1:     protected String groupClass = DEFAULT_GROUP_CLASS;
1:f812e34: 
1:9f59397:     public DefaultAuthorizationMap() {
1:e78e72f:     }
1:f812e34: 
1:3dbc9c9:     @SuppressWarnings("rawtypes")
1:3dbc9c9:     public DefaultAuthorizationMap(List<DestinationMapEntry> authorizationEntries) {
1:9f59397:         setAuthorizationEntries(authorizationEntries);
1:f812e34: 
1:fc00993:     }
1:f812e34: 
1:fc00993:     public void setTempDestinationAuthorizationEntry(TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry) {
1:e78e72f:         this.tempDestinationAuthorizationEntry = tempDestinationAuthorizationEntry;
1:f812e34:     }
1:f812e34: 
1:e78e72f:     public TempDestinationAuthorizationEntry getTempDestinationAuthorizationEntry() {
1:e78e72f:         return this.tempDestinationAuthorizationEntry;
1:f812e34:     }
1:f812e34: 
1:67ccfca:     @Override
1:933eb2f:     public Set<Object> getTempDestinationAdminACLs() {
1:fc00993:         if (tempDestinationAuthorizationEntry != null) {
1:0525772:             Set<Object> answer = new WildcardAwareSet<Object>();
1:0525772:             answer.addAll(tempDestinationAuthorizationEntry.getAdminACLs());
1:0525772:             return answer;
1:fc00993:         } else {
1:f812e34:             return null;
1:7777744:         }
1:7777744:     }
1:3b39d2c: 
1:67ccfca:     @Override
1:933eb2f:     public Set<Object> getTempDestinationReadACLs() {
1:fc00993:         if (tempDestinationAuthorizationEntry != null) {
1:0525772:             Set<Object> answer = new WildcardAwareSet<Object>();
1:0525772:             answer.addAll(tempDestinationAuthorizationEntry.getReadACLs());
1:7777744:             return answer;
1:fc00993:         } else {
1:f812e34:             return null;
1:7777744:         }
1:fc00993:     }
1:7777744: 
1:67ccfca:     @Override
1:933eb2f:     public Set<Object> getTempDestinationWriteACLs() {
1:fc00993:         if (tempDestinationAuthorizationEntry != null) {
1:0525772:             Set<Object> answer = new WildcardAwareSet<Object>();
1:0525772:             answer.addAll(tempDestinationAuthorizationEntry.getWriteACLs());
1:0525772:             return answer;
1:fc00993:         } else {
1:f812e34:             return null;
1:fc00993:         }
1:f812e34:     }
1:7777744: 
1:67ccfca:     @Override
1:933eb2f:     public Set<Object> getAdminACLs(ActiveMQDestination destination) {
1:933eb2f:         Set<AuthorizationEntry> entries = getAllEntries(destination);
1:0525772:         Set<Object> answer = new WildcardAwareSet<Object>();
1:0525772: 
1:f812e34:         // now lets go through each entry adding individual
1:933eb2f:         for (Iterator<AuthorizationEntry> iter = entries.iterator(); iter.hasNext();) {
1:933eb2f:             AuthorizationEntry entry = iter.next();
1:9f59397:             answer.addAll(entry.getAdminACLs());
1:e78e72f:         }
1:0525772:         return answer;
1:e78e72f:     }
1:f812e34: 
1:67ccfca:     @Override
1:933eb2f:     public Set<Object> getReadACLs(ActiveMQDestination destination) {
1:933eb2f:         Set<AuthorizationEntry> entries = getAllEntries(destination);
1:0525772:         Set<Object> answer = new WildcardAwareSet<Object>();
1:f812e34: 
1:f812e34:         // now lets go through each entry adding individual
1:933eb2f:         for (Iterator<AuthorizationEntry> iter = entries.iterator(); iter.hasNext();) {
1:933eb2f:             AuthorizationEntry entry = iter.next();
1:9f59397:             answer.addAll(entry.getReadACLs());
1:e78e72f:         }
2:9f59397:         return answer;
1:e78e72f:     }
1:9a7443a: 
1:67ccfca:     @Override
1:933eb2f:     public Set<Object> getWriteACLs(ActiveMQDestination destination) {
1:933eb2f:         Set<AuthorizationEntry> entries = getAllEntries(destination);
1:0525772:         Set<Object> answer = new WildcardAwareSet<Object>();
1:e78e72f: 
1:f812e34:         // now lets go through each entry adding individual
1:933eb2f:         for (Iterator<AuthorizationEntry> iter = entries.iterator(); iter.hasNext();) {
1:933eb2f:             AuthorizationEntry entry = iter.next();
1:9f59397:             answer.addAll(entry.getWriteACLs());
12:9f59397:         }
1:9f59397:         return answer;
1:9f59397:     }
1:e78e72f: 
1:9f59397:     public AuthorizationEntry getEntryFor(ActiveMQDestination destination) {
1:f812e34:         AuthorizationEntry answer = (AuthorizationEntry)chooseValue(destination);
1:9f59397:         if (answer == null) {
1:9f59397:             answer = getDefaultEntry();
1:9f59397:         }
1:9f59397:         return answer;
1:9f59397:     }
1:e78e72f: 
1:e78e72f: 
1:9a7443a:     /**
1:9a7443a:      * Looks up the value(s) matching the given Destination key. For simple
1:9a7443a:      * destinations this is typically a List of one single value, for wildcards
1:9a7443a:      * or composite destinations this will typically be a Union of matching
1:9a7443a:      * values.
1:9a7443a:      *
1:9a7443a:      * @param key the destination to lookup
1:9a7443a:      * @return a Union of matching values or an empty list if there are no
1:9a7443a:      *         matching values.
1:9a7443a:      */
1:9a7443a:     @Override
1:67ccfca:     @SuppressWarnings("rawtypes")
1:9a7443a:     public synchronized Set get(ActiveMQDestination key) {
1:9a7443a:         if (key.isComposite()) {
1:9a7443a:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:9a7443a:             Set answer = null;
1:9a7443a:             for (int i = 0; i < destinations.length; i++) {
1:9a7443a:                 ActiveMQDestination childDestination = destinations[i];
1:9a7443a:                 answer = union(answer, get(childDestination));
1:9a7443a:                 if (answer == null  || answer.isEmpty()) {
1:9a7443a:                     break;
1:9a7443a:                 }
1:9a7443a:             }
1:9a7443a:             return answer;
1:9a7443a:         }
1:9a7443a: 
1:3b39d2c:         return findWildcardMatches(key, false);
1:9a7443a:     }
1:9a7443a: 
1:e78e72f: 
1:9f59397:     /**
1:9f59397:      * Sets the individual entries on the authorization map
1:9f59397:      */
1:3dbc9c9:     @SuppressWarnings("rawtypes")
1:3dbc9c9:     public void setAuthorizationEntries(List<DestinationMapEntry> entries) {
1:9f59397:         super.setEntries(entries);
1:9a7443a:     }
1:e78e72f: 
1:9f59397:     public AuthorizationEntry getDefaultEntry() {
1:9f59397:         return defaultEntry;
1:9a7443a:     }
1:e78e72f: 
1:9f59397:     public void setDefaultEntry(AuthorizationEntry defaultEntry) {
1:9f59397:         this.defaultEntry = defaultEntry;
1:9a7443a:     }
1:e78e72f: 
1:67ccfca:     @Override
1:3dbc9c9:     @SuppressWarnings("rawtypes")
1:3dbc9c9:     protected Class<? extends DestinationMapEntry> getEntryClass() {
1:9f59397:         return AuthorizationEntry.class;
1:9a7443a:     }
1:f812e34: 
1:3dbc9c9:     @SuppressWarnings("unchecked")
1:933eb2f:     protected Set<AuthorizationEntry> getAllEntries(ActiveMQDestination destination) {
1:933eb2f:         Set<AuthorizationEntry> entries = get(destination);
1:affd134:         if (defaultEntry != null) {
1:f812e34:             entries.add(defaultEntry);
1:9a7443a:         }
1:affd134:         return entries;
1:affd134:     }
2:affd134: 
1:9027d49:     public String getGroupClass() {
1:9027d49:         return groupClass;
1:9027d49:     }
1:9027d49: 
1:9027d49:     public void setGroupClass(String groupClass) {
1:9027d49:         this.groupClass = groupClass;
1:9027d49:     }
1:9027d49: 
1:0525772:     final static String WILDCARD = "*";
1:9027d49:     public static Object createGroupPrincipal(String name, String groupClass) throws Exception {
1:0525772:         if (WILDCARD.equals(name)) {
1:0525772:             // simple match all group principal - match any name and class
1:0525772:             return new Principal() {
1:0525772:                 @Override
1:0525772:                 public String getName() {
1:0525772:                     return WILDCARD;
1:0525772:                 }
1:0525772:                 @Override
1:0525772:                 public boolean equals(Object other) {
1:0525772:                     return true;
1:0525772:                 }
1:0525772: 
1:0525772:                 @Override
1:0525772:                 public int hashCode() {
1:0525772:                     return WILDCARD.hashCode();
1:0525772:                 }
1:0525772:             };
1:0525772:         }
1:9027d49:         Object[] param = new Object[]{name};
1:9027d49: 
1:9027d49:         Class<?> cls = Class.forName(groupClass);
1:9027d49: 
1:9027d49:         Constructor<?>[] constructors = cls.getConstructors();
1:9027d49:         int i;
1:9027d49:         Object instance;
1:9027d49:         for (i = 0; i < constructors.length; i++) {
1:9027d49:             Class<?>[] paramTypes = constructors[i].getParameterTypes();
1:6be3630:             if (paramTypes.length == 1 && paramTypes[0].equals(String.class)) {
1:9027d49:                 break;
1:9027d49:             }
1:9027d49:         }
1:9027d49:         if (i < constructors.length) {
1:9027d49:             instance = constructors[i].newInstance(param);
1:9027d49:         } else {
1:9027d49:             instance = cls.newInstance();
1:9027d49:             Method[] methods = cls.getMethods();
1:9027d49:             i = 0;
1:9027d49:             for (i = 0; i < methods.length; i++) {
1:9027d49:                 Class<?>[] paramTypes = methods[i].getParameterTypes();
1:6be3630:                 if (paramTypes.length == 1 && methods[i].getName().equals("setName") && paramTypes[0].equals(String.class)) {
1:9027d49:                     break;
1:9027d49:                 }
1:9027d49:             }
1:9027d49: 
1:9027d49:             if (i < methods.length) {
1:9027d49:                 methods[i].invoke(instance, param);
1:9027d49:             } else {
1:9027d49:                 throw new NoSuchMethodException();
1:9027d49:             }
1:9027d49:         }
1:9027d49: 
1:9027d49:         return instance;
1:9027d49:     }
1:9027d49: 
1:0525772:     class WildcardAwareSet<T> extends HashSet<T> {
1:0525772:         boolean hasWildcard = false;
1:0525772: 
1:0525772:         @Override
1:0525772:         public boolean contains(Object e) {
1:0525772:             if (hasWildcard) {
1:0525772:                 return true;
1:0525772:             } else {
1:0525772:                 return super.contains(e);
1:0525772:             }
1:0525772:         }
1:0525772: 
1:0525772:         @Override
1:0525772:         public boolean addAll(Collection<? extends T> collection) {
1:0525772:             boolean modified = false;
1:0525772:             Iterator<? extends T> e = collection.iterator();
1:0525772:             while (e.hasNext()) {
1:0525772:                 final T item = e.next();
1:0525772:                 if (isWildcard(item)) {
1:0525772:                     hasWildcard = true;
1:0525772:                 }
1:0525772:                 if (add(item)) {
1:0525772:                     modified = true;
1:0525772:                 }
1:0525772:             }
1:0525772:             return modified;
1:0525772:         }
1:0525772: 
1:0525772:         private boolean isWildcard(T item) {
1:0525772:             try {
1:0525772:                 if (item.getClass().getMethod("getName", new Class[]{}).invoke(item).equals("*")) {
1:0525772:                     return true;
1:0525772:                 }
1:0525772:             } catch (Exception ignored) {
1:0525772:             }
1:0525772:             return false;
1:0525772:         }
1:0525772:     }
1:affd134: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:6be3630
/////////////////////////////////////////////////////////////////////////
1:             if (paramTypes.length == 1 && paramTypes[0].equals(String.class)) {
/////////////////////////////////////////////////////////////////////////
1:                 if (paramTypes.length == 1 && methods[i].getName().equals("setName") && paramTypes[0].equals(String.class)) {
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:3b39d2c
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: import org.apache.activemq.filter.DestinationMapNode;
1: import org.apache.activemq.filter.DestinationNode;
/////////////////////////////////////////////////////////////////////////
1: 
1:         return findWildcardMatches(key, false);
commit:24c2215
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return findWildcardMatches(key);
commit:7777744
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.filter.DestinationFilter;
/////////////////////////////////////////////////////////////////////////
1: 
0:         Set answer = findWildcardMatches(key);
1: 
0:         if (key.isPattern()) {
0:             for (Iterator<Object> iterator = answer.iterator(); iterator.hasNext(); ) {
0:                 AuthorizationEntry entry = (AuthorizationEntry)iterator.next();
0:                 DestinationFilter filter = DestinationFilter.parseFilter(entry.getDestination());
0:                 if (!filter.matches(key)) {
0:                     iterator.remove();
1:                 }
1:             }
1:         }
1:         return answer;
author:Timothy Bish
-------------------------------------------------------------------------------
commit:67ccfca
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.filter.DestinationMap;
1: import org.apache.activemq.filter.DestinationMapEntry;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:gtully
-------------------------------------------------------------------------------
commit:0525772
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
0: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:             Set<Object> answer = new WildcardAwareSet<Object>();
1:             answer.addAll(tempDestinationAuthorizationEntry.getAdminACLs());
1:             return answer;
/////////////////////////////////////////////////////////////////////////
1:             Set<Object> answer = new WildcardAwareSet<Object>();
1:             answer.addAll(tempDestinationAuthorizationEntry.getReadACLs());
1:             return answer;
/////////////////////////////////////////////////////////////////////////
1:             Set<Object> answer = new WildcardAwareSet<Object>();
1:             answer.addAll(tempDestinationAuthorizationEntry.getWriteACLs());
1:             return answer;
/////////////////////////////////////////////////////////////////////////
1:         Set<Object> answer = new WildcardAwareSet<Object>();
1: 
/////////////////////////////////////////////////////////////////////////
1:         Set<Object> answer = new WildcardAwareSet<Object>();
/////////////////////////////////////////////////////////////////////////
1:         Set<Object> answer = new WildcardAwareSet<Object>();
/////////////////////////////////////////////////////////////////////////
1:     final static String WILDCARD = "*";
1:         if (WILDCARD.equals(name)) {
1:             // simple match all group principal - match any name and class
1:             return new Principal() {
1:                 @Override
1:                 public String getName() {
1:                     return WILDCARD;
1:                 }
1:                 @Override
1:                 public boolean equals(Object other) {
1:                     return true;
1:                 }
1: 
1:                 @Override
1:                 public int hashCode() {
1:                     return WILDCARD.hashCode();
1:                 }
1:             };
1:         }
/////////////////////////////////////////////////////////////////////////
1:     class WildcardAwareSet<T> extends HashSet<T> {
1:         boolean hasWildcard = false;
1: 
1:         @Override
1:         public boolean contains(Object e) {
1:             if (hasWildcard) {
1:                 return true;
1:             } else {
1:                 return super.contains(e);
1:             }
1:         }
1: 
1:         @Override
1:         public boolean addAll(Collection<? extends T> collection) {
1:             boolean modified = false;
1:             Iterator<? extends T> e = collection.iterator();
1:             while (e.hasNext()) {
1:                 final T item = e.next();
1:                 if (isWildcard(item)) {
1:                     hasWildcard = true;
1:                 }
1:                 if (add(item)) {
1:                     modified = true;
1:                 }
1:             }
1:             return modified;
1:         }
1: 
1:         private boolean isWildcard(T item) {
1:             try {
1:                 if (item.getClass().getMethod("getName", new Class[]{}).invoke(item).equals("*")) {
1:                     return true;
1:                 }
1:             } catch (Exception ignored) {
1:             }
1:             return false;
1:         }
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2f469c1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.filter.DestinationMap;
0: import org.apache.activemq.filter.DestinationMapEntry;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static final String DEFAULT_GROUP_CLASS = "org.apache.activemq.jaas.GroupPrincipal";
1: 
1:     protected String groupClass = DEFAULT_GROUP_CLASS;
/////////////////////////////////////////////////////////////////////////
commit:9027d49
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
0:     private String groupClass = "org.apache.activemq.jaas.GroupPrincipal";
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getGroupClass() {
1:         return groupClass;
1:     }
1: 
1:     public void setGroupClass(String groupClass) {
1:         this.groupClass = groupClass;
1:     }
1: 
1:     public static Object createGroupPrincipal(String name, String groupClass) throws Exception {
1:         Object[] param = new Object[]{name};
1: 
1:         Class<?> cls = Class.forName(groupClass);
1: 
1:         Constructor<?>[] constructors = cls.getConstructors();
1:         int i;
1:         Object instance;
1:         for (i = 0; i < constructors.length; i++) {
1:             Class<?>[] paramTypes = constructors[i].getParameterTypes();
0:             if (paramTypes.length != 0 && paramTypes[0].equals(String.class)) {
1:                 break;
1:             }
1:         }
1:         if (i < constructors.length) {
1:             instance = constructors[i].newInstance(param);
1:         } else {
1:             instance = cls.newInstance();
1:             Method[] methods = cls.getMethods();
1:             i = 0;
1:             for (i = 0; i < methods.length; i++) {
1:                 Class<?>[] paramTypes = methods[i].getParameterTypes();
0:                 if (paramTypes.length != 0 && methods[i].getName().equals("setName") && paramTypes[0].equals(String.class)) {
1:                     break;
1:                 }
1:             }
1: 
1:             if (i < methods.length) {
1:                 methods[i].invoke(instance, param);
1:             } else {
1:                 throw new NoSuchMethodException();
1:             }
1:         }
1: 
1:         return instance;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public Set<Object> getTempDestinationAdminACLs() {
/////////////////////////////////////////////////////////////////////////
1:     public Set<Object> getTempDestinationReadACLs() {
/////////////////////////////////////////////////////////////////////////
1:     public Set<Object> getTempDestinationWriteACLs() {
/////////////////////////////////////////////////////////////////////////
1:     public Set<Object> getAdminACLs(ActiveMQDestination destination) {
1:         Set<AuthorizationEntry> entries = getAllEntries(destination);
0:         Set<Object> answer = new HashSet<Object>();
1:         for (Iterator<AuthorizationEntry> iter = entries.iterator(); iter.hasNext();) {
1:             AuthorizationEntry entry = iter.next();
1:     public Set<Object> getReadACLs(ActiveMQDestination destination) {
1:         Set<AuthorizationEntry> entries = getAllEntries(destination);
0:         Set<Object> answer = new HashSet<Object>();
1:         for (Iterator<AuthorizationEntry> iter = entries.iterator(); iter.hasNext();) {
1:             AuthorizationEntry entry = iter.next();
1:     public Set<Object> getWriteACLs(ActiveMQDestination destination) {
1:         Set<AuthorizationEntry> entries = getAllEntries(destination);
0:         Set<Object> answer = new HashSet<Object>();
1:         for (Iterator<AuthorizationEntry> iter = entries.iterator(); iter.hasNext();) {
1:             AuthorizationEntry entry = iter.next();
/////////////////////////////////////////////////////////////////////////
0:     protected Class<AuthorizationEntry> getEntryClass() {
1:     protected Set<AuthorizationEntry> getAllEntries(ActiveMQDestination destination) {
1:         Set<AuthorizationEntry> entries = get(destination);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void setTempDestinationAuthorizationEntry(TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry) {
/////////////////////////////////////////////////////////////////////////
1:         if (tempDestinationAuthorizationEntry != null) {
1:         } else {
1:         }
1:         if (tempDestinationAuthorizationEntry != null) {
1:         } else {
1:         }
1:         if (tempDestinationAuthorizationEntry != null) {
1:         } else {
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.filter.DestinationMap;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * different policies. Each entry in the map represents the authorization ACLs
1:  * for each operation.
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
0:     public void setTempDestinationAuthorizationEntry(
0:                                                      TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry) {
1:     }
1: 
1:     }
1: 
0:         if (tempDestinationAuthorizationEntry != null)
0:             return tempDestinationAuthorizationEntry.getAdminACLs();
1:             return null;
1: 
0:         if (tempDestinationAuthorizationEntry != null)
0:             return tempDestinationAuthorizationEntry.getReadACLs();
0:         else
1:             return null;
1: 
0:         if (tempDestinationAuthorizationEntry != null)
0:             return tempDestinationAuthorizationEntry.getWriteACLs();
0:         else
1:             return null;
1:     }
1: 
1:         // now lets go through each entry adding individual
0:             AuthorizationEntry entry = (AuthorizationEntry)iter.next();
/////////////////////////////////////////////////////////////////////////
1: 
1:         // now lets go through each entry adding individual
0:             AuthorizationEntry entry = (AuthorizationEntry)iter.next();
/////////////////////////////////////////////////////////////////////////
1: 
1:         // now lets go through each entry adding individual
0:             AuthorizationEntry entry = (AuthorizationEntry)iter.next();
1:         AuthorizationEntry answer = (AuthorizationEntry)chooseValue(destination);
/////////////////////////////////////////////////////////////////////////
1: 
1:             entries.add(defaultEntry);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:5dda6e6
/////////////////////////////////////////////////////////////////////////
commit:9a7443a
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Looks up the value(s) matching the given Destination key. For simple
1:      * destinations this is typically a List of one single value, for wildcards
1:      * or composite destinations this will typically be a Union of matching
1:      * values.
1:      *
1:      * @param key the destination to lookup
1:      * @return a Union of matching values or an empty list if there are no
1:      *         matching values.
1:      */
1:     @Override
0:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:     public synchronized Set get(ActiveMQDestination key) {
1:         if (key.isComposite()) {
1:             ActiveMQDestination[] destinations = key.getCompositeDestinations();
1:             Set answer = null;
1:             for (int i = 0; i < destinations.length; i++) {
1:                 ActiveMQDestination childDestination = destinations[i];
1:                 answer = union(answer, get(childDestination));
1:                 if (answer == null  || answer.isEmpty()) {
1:                     break;
1:                 }
1:             }
1:             return answer;
1:         }
0:         return findWildcardMatches(key);
1:     }
1: 
0:     private Set union(Set existing, Set candidates) {
0:         if ( candidates != null ) {
0:             if (existing != null) {
0:                 for (Iterator<Object> iterator = existing.iterator(); iterator.hasNext();) {
0:                     Object toMatch = iterator.next();
0:                     if (!candidates.contains(toMatch)) {
0:                         iterator.remove();
1:                     }
1:                 }
0:             } else {
0:                 existing = candidates;
1:             }
0:         } else if ( existing != null ) {
0:             existing.clear();
1:         }
0:         return existing;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.filter.DestinationMapEntry;
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1:     public DefaultAuthorizationMap(List<DestinationMapEntry> authorizationEntries) {
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings("rawtypes")
1:     public void setAuthorizationEntries(List<DestinationMapEntry> entries) {
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1:     protected Class<? extends DestinationMapEntry> getEntryClass() {
1:     @SuppressWarnings("unchecked")
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:e78e72f
/////////////////////////////////////////////////////////////////////////
1:     
1:     private TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry;
1:     
1:        
1:   
0:     public void setTempDestinationAuthorizationEntry(TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry) {
1:         this.tempDestinationAuthorizationEntry = tempDestinationAuthorizationEntry;
1:     }    
1:     
1:     public TempDestinationAuthorizationEntry getTempDestinationAuthorizationEntry() {
1:         return this.tempDestinationAuthorizationEntry;
1:     }    
1:     
0:     public Set getTempDestinationAdminACLs() {
0:         if(tempDestinationAuthorizationEntry != null)    
0:         	return tempDestinationAuthorizationEntry.getAdminACLs();
0:         else
0:         	return null;
1:     }
1:     
0:     public Set getTempDestinationReadACLs() {
0:     	if(tempDestinationAuthorizationEntry != null)  
0:            	return tempDestinationAuthorizationEntry.getReadACLs();
0:     	else
0:     		return null;
1:     }
1:     
0:     public Set getTempDestinationWriteACLs() {
0:     	if(tempDestinationAuthorizationEntry != null)
0:            	return tempDestinationAuthorizationEntry.getWriteACLs();
0:     	else
0:     		return null;
1:     }    
author:James Strachan
-------------------------------------------------------------------------------
commit:affd134
/////////////////////////////////////////////////////////////////////////
0:         Set entries = getAllEntries(destination);
/////////////////////////////////////////////////////////////////////////
0:         Set entries = getAllEntries(destination);
/////////////////////////////////////////////////////////////////////////
0:         Set entries = getAllEntries(destination);
/////////////////////////////////////////////////////////////////////////
0:     protected Set getAllEntries(ActiveMQDestination destination) {
0:         Set entries = get(destination);
1:         if (defaultEntry != null) {
0:         entries.add(defaultEntry);
1:         }
1:         return entries;
1:     }
1: 
1: 
commit:9f59397
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
0: 
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.filter.DestinationMap;
0: 
0: import java.util.HashSet;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Set;
0: 
1: /**
1:  * Represents a destination based configuration of policies so that individual
1:  * destinations or wildcard hierarchies of destinations can be configured using
0:  * different policies. Each entry in the map represents the authorization ACLs for each operation.
0:  * 
0:  * @org.apache.xbean.XBean element="authorizationMap"
0:  * 
0:  * @version $Revision$
1:  */
1: public class DefaultAuthorizationMap extends DestinationMap implements AuthorizationMap {
0: 
1:     private AuthorizationEntry defaultEntry;
0: 
1:     public DefaultAuthorizationMap() {
1:     }
0: 
0:     public DefaultAuthorizationMap(List authorizationEntries) {
1:         setAuthorizationEntries(authorizationEntries);
1:     }
0: 
0:     
0:     public Set getAdminACLs(ActiveMQDestination destination) {
0:         Set answer = new HashSet();
0:         Set entries = get(destination);
0:         entries.add(defaultEntry);
0:         
0:         // now lets go through each entry adding individual 
0:         for (Iterator iter = entries.iterator(); iter.hasNext();) {
0:             AuthorizationEntry entry = (AuthorizationEntry) iter.next();
1:             answer.addAll(entry.getAdminACLs());
1:         }
1:         return answer;
1:     }
0: 
0:     public Set getReadACLs(ActiveMQDestination destination) {
0:         Set answer = new HashSet();
0:         Set entries = get(destination);
0:         entries.add(defaultEntry);
0:         
0:         // now lets go through each entry adding individual 
0:         for (Iterator iter = entries.iterator(); iter.hasNext();) {
0:             AuthorizationEntry entry = (AuthorizationEntry) iter.next();
1:             answer.addAll(entry.getReadACLs());
1:         }
1:         return answer;
1:     }
0: 
0:     public Set getWriteACLs(ActiveMQDestination destination) {
0:         Set answer = new HashSet();
0:         Set entries = get(destination);
0:         entries.add(defaultEntry);
0:         
0:         // now lets go through each entry adding individual 
0:         for (Iterator iter = entries.iterator(); iter.hasNext();) {
0:             AuthorizationEntry entry = (AuthorizationEntry) iter.next();
1:             answer.addAll(entry.getWriteACLs());
1:         }
1:         return answer;
1:     }
0: 
1:     public AuthorizationEntry getEntryFor(ActiveMQDestination destination) {
0:         AuthorizationEntry answer = (AuthorizationEntry) chooseValue(destination);
1:         if (answer == null) {
1:             answer = getDefaultEntry();
1:         }
1:         return answer;
1:     }
0: 
1:     /**
1:      * Sets the individual entries on the authorization map
0:      * 
0:      * @org.apache.xbean.ElementType class="org.apache.activemq.security.AuthorizationEntry"
1:      */
0:     public void setAuthorizationEntries(List entries) {
1:         super.setEntries(entries);
1:     }
0: 
1:     public AuthorizationEntry getDefaultEntry() {
1:         return defaultEntry;
1:     }
0: 
1:     public void setDefaultEntry(AuthorizationEntry defaultEntry) {
1:         this.defaultEntry = defaultEntry;
1:     }
0: 
0:     protected Class getEntryClass() {
1:         return AuthorizationEntry.class;
1:     }
1: }
============================================================================