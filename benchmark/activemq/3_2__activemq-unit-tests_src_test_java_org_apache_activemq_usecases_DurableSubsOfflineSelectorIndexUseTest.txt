1:b24dfb9: /**
1:b24dfb9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b24dfb9:  * contributor license agreements.  See the NOTICE file distributed with
1:b24dfb9:  * this work for additional information regarding copyright ownership.
1:b24dfb9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b24dfb9:  * (the "License"); you may not use this file except in compliance with
1:b24dfb9:  * the License.  You may obtain a copy of the License at
1:b24dfb9:  *
1:b24dfb9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b24dfb9:  *
1:b24dfb9:  * Unless required by applicable law or agreed to in writing, software
1:b24dfb9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b24dfb9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b24dfb9:  * See the License for the specific language governing permissions and
1:b24dfb9:  * limitations under the License.
1:b24dfb9:  */
1:b24dfb9: package org.apache.activemq.usecases;
4:b24dfb9: 
1:b24dfb9: import java.util.ArrayList;
1:b24dfb9: import java.util.List;
1:b24dfb9: import java.util.concurrent.TimeUnit;
1:b24dfb9: import javax.jms.Connection;
1:b24dfb9: import javax.jms.Message;
1:b24dfb9: import javax.jms.MessageConsumer;
1:b24dfb9: import javax.jms.MessageListener;
1:b24dfb9: import javax.jms.MessageProducer;
1:b24dfb9: import javax.jms.Session;
1:b24dfb9: import junit.framework.Test;
1:b24dfb9: import org.apache.activemq.ActiveMQConnectionFactory;
1:b24dfb9: import org.apache.activemq.broker.BrokerFactory;
1:b24dfb9: import org.apache.activemq.broker.BrokerService;
1:b24dfb9: import org.apache.activemq.command.ActiveMQTopic;
1:c65c25d: import org.apache.activemq.store.PersistenceAdapter;
1:b24dfb9: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:b24dfb9: import org.apache.activemq.store.kahadb.KahaDBStore;
1:b24dfb9: import org.apache.activemq.util.Wait;
1:b24dfb9: import org.slf4j.Logger;
1:b24dfb9: import org.slf4j.LoggerFactory;
1:b24dfb9: 
1:b24dfb9: public class DurableSubsOfflineSelectorIndexUseTest extends org.apache.activemq.TestSupport {
1:b24dfb9: 
1:b24dfb9:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubsOfflineSelectorIndexUseTest.class);
1:b24dfb9:     public int messageCount = 400;
1:b24dfb9:     private BrokerService broker;
1:b24dfb9:     private ActiveMQTopic topic;
1:b24dfb9:     private List<Throwable> exceptions = new ArrayList<Throwable>();
1:b24dfb9: 
1:b24dfb9:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:b24dfb9:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:b24dfb9:         connectionFactory.setWatchTopicAdvisories(false);
1:b24dfb9:         return connectionFactory;
3:b24dfb9:     }
1:b24dfb9: 
2:b24dfb9:     @Override
1:b24dfb9:     protected Connection createConnection() throws Exception {
1:b24dfb9:         return createConnection("id");
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     protected Connection createConnection(String name) throws Exception {
1:b24dfb9:         Connection con = super.createConnection();
1:b24dfb9:         con.setClientID(name);
1:b24dfb9:         con.start();
1:b24dfb9:         return con;
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     public static Test suite() {
1:b24dfb9:         return suite(DurableSubsOfflineSelectorIndexUseTest.class);
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     protected void setUp() throws Exception {
1:b24dfb9:         exceptions.clear();
1:b24dfb9:         topic = (ActiveMQTopic) createDestination();
1:b24dfb9:         createBroker();
1:b24dfb9:         super.setUp();
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     protected void tearDown() throws Exception {
1:b24dfb9:         super.tearDown();
1:b24dfb9:         destroyBroker();
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     private void createBroker() throws Exception {
1:b24dfb9:         createBroker(true);
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:b24dfb9:         broker = BrokerFactory.createBroker("broker:(vm://" + getName(true) + ")");
1:b24dfb9:         broker.setBrokerName(getName(true));
1:b24dfb9:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:b24dfb9:         broker.getManagementContext().setCreateConnector(false);
1:b24dfb9:         broker.setAdvisorySupport(false);
1:b24dfb9:         broker.addConnector("tcp://0.0.0.0:0");
1:b24dfb9: 
1:b24dfb9:         setDefaultPersistenceAdapter(broker);
1:b24dfb9:         broker.start();
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     private void destroyBroker() throws Exception {
1:b24dfb9:         if (broker != null)
1:b24dfb9:             broker.stop();
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     public void initCombosForTestIndexPageUsage() {
1:b24dfb9:         addCombinationValues("messageCount", new Integer[]{890, 900, 400});
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     public void testIndexPageUsage() throws Exception {
1:b24dfb9:         Connection con = createConnection();
1:b24dfb9:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b24dfb9:         session.createDurableSubscriber(topic, "true", "filter = 'true'", true);
1:b24dfb9:         session.close();
1:b24dfb9: 
1:b24dfb9:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b24dfb9:         session.createDurableSubscriber(topic, "false", "filter = 'false'", true);
1:b24dfb9:         session.close();
1:b24dfb9: 
1:b24dfb9:         con.close();
1:b24dfb9: 
1:b24dfb9:         // send messages
1:b24dfb9:         final Connection sendCon = createConnection("send");
1:b24dfb9:         final Session sendSession = sendCon.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b24dfb9:         final MessageProducer producer = sendSession.createProducer(null);
1:b24dfb9: 
1:b24dfb9:         Thread sendThread = new Thread() {
1:b24dfb9:             public void run() {
1:b24dfb9:                 try {
1:b24dfb9: 
1:b24dfb9:                     for (int i = 0; i < messageCount; i++) {
1:b24dfb9:                         boolean filter = i % 2 == 1;
1:b24dfb9:                         Message message = sendSession.createMessage();
1:b24dfb9:                         message.setStringProperty("filter", filter ? "true" : "false");
1:b24dfb9:                         producer.send(topic, message);
1:b24dfb9: 
1:b24dfb9:                         if (i > 0 && i % 1000 == 0) {
1:b24dfb9:                             LOG.info("Sent:" + i);
1:b24dfb9:                         }
1:b24dfb9:                     }
1:b24dfb9:                     sendSession.close();
1:b24dfb9:                     sendCon.close();
1:b24dfb9:                 } catch (Exception e) {
1:b24dfb9:                     exceptions.add(e);
1:b24dfb9:                 }
1:b24dfb9:             }
1:b24dfb9:         };
1:b24dfb9:         sendThread.start();
1:b24dfb9: 
1:b24dfb9:         sendThread.join();
1:b24dfb9: 
1:b24dfb9:         // settle with sent messages
2:b24dfb9:         TimeUnit.SECONDS.sleep(4);
1:b24dfb9: 
1:b24dfb9:         // consume messages
1:b24dfb9:         con = createConnection();
1:b24dfb9:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b24dfb9: 
1:b24dfb9:         MessageConsumer consumerTrue = session.createDurableSubscriber(topic, "true", "filter = 'true'", true);
1:b24dfb9:         Listener listenerT = new Listener();
1:b24dfb9:         consumerTrue.setMessageListener(listenerT);
1:b24dfb9: 
1:b24dfb9:         waitFor(listenerT, messageCount / 2);
1:b24dfb9: 
1:b24dfb9:         MessageConsumer consumerFalse = session.createDurableSubscriber(topic, "false", "filter = 'false'", true);
1:b24dfb9:         Listener listenerF = new Listener();
1:b24dfb9:         consumerFalse.setMessageListener(listenerF);
1:b24dfb9: 
1:b24dfb9:         waitFor(listenerF, messageCount / 2);
1:b24dfb9: 
1:b24dfb9:         assertEquals(messageCount / 2, listenerT.count);
1:b24dfb9:         assertEquals(messageCount / 2, listenerF.count);
1:b24dfb9: 
1:be8e58b:         consumerTrue.close();
1:be8e58b:         session.unsubscribe("true");
1:be8e58b: 
1:be8e58b:         consumerFalse.close();
1:be8e58b:         session.unsubscribe("false");
1:be8e58b: 
1:b24dfb9:         session.close();
1:b24dfb9:         con.close();
1:b24dfb9: 
1:c65c25d:         PersistenceAdapter persistenceAdapter = broker.getPersistenceAdapter();
1:c65c25d:         if( persistenceAdapter instanceof KahaDBStore) {
1:c65c25d:             final KahaDBStore store = ((KahaDBPersistenceAdapter) persistenceAdapter).getStore();
1:c65c25d:             LOG.info("Store page count: " + store.getPageFile().getPageCount());
1:c65c25d:             LOG.info("Store free page count: " + store.getPageFile().getFreePageCount());
1:c65c25d:             LOG.info("Store page in-use: " + (store.getPageFile().getPageCount() - store.getPageFile().getFreePageCount()));
1:b24dfb9: 
1:c65c25d:             assertTrue("no leak of pages, always use just 10", Wait.waitFor(new Wait.Condition() {
1:c65c25d:                 @Override
1:c65c25d:                 public boolean isSatisified() throws Exception {
1:c65c25d:                     return 10 == store.getPageFile().getPageCount() -
1:c65c25d:                             store.getPageFile().getFreePageCount();
1:c65c25d:                 }
1:c65c25d:             }, TimeUnit.SECONDS.toMillis(10)));
1:c65c25d:         }
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     private void waitFor(final Listener listener, final int count) throws Exception {
1:b24dfb9: 
1:b24dfb9:         assertTrue("got all messages on time", Wait.waitFor(new Wait.Condition() {
1:b24dfb9:             @Override
2:b24dfb9:             public boolean isSatisified() throws Exception {
1:b24dfb9:                 return listener.count == count;
1:b24dfb9:             }
1:b24dfb9:         }, TimeUnit.MINUTES.toMillis(10)));
1:b24dfb9: 
1:b24dfb9:     }
1:b24dfb9: 
1:b24dfb9:     public static class Listener implements MessageListener {
1:b24dfb9:         int count = 0;
1:b24dfb9:         String id = null;
1:b24dfb9: 
1:b24dfb9:         Listener() {
1:b24dfb9:         }
1:b24dfb9: 
1:b24dfb9:         public void onMessage(Message message) {
1:b24dfb9:             count++;
1:b24dfb9:             if (id != null) {
1:b24dfb9:                 try {
1:b24dfb9:                     LOG.info(id + ", " + message.getJMSMessageID());
1:b24dfb9:                 } catch (Exception ignored) {
1:b24dfb9:                 }
1:b24dfb9:             }
1:b24dfb9:         }
1:b24dfb9:     }
1:b24dfb9: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c65c25d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.PersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:         PersistenceAdapter persistenceAdapter = broker.getPersistenceAdapter();
1:         if( persistenceAdapter instanceof KahaDBStore) {
1:             final KahaDBStore store = ((KahaDBPersistenceAdapter) persistenceAdapter).getStore();
1:             LOG.info("Store page count: " + store.getPageFile().getPageCount());
1:             LOG.info("Store free page count: " + store.getPageFile().getFreePageCount());
1:             LOG.info("Store page in-use: " + (store.getPageFile().getPageCount() - store.getPageFile().getFreePageCount()));
1:             assertTrue("no leak of pages, always use just 10", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return 10 == store.getPageFile().getPageCount() -
1:                             store.getPageFile().getFreePageCount();
1:                 }
1:             }, TimeUnit.SECONDS.toMillis(10)));
1:         }
author:Gary Tully
-------------------------------------------------------------------------------
commit:be8e58b
/////////////////////////////////////////////////////////////////////////
1:         consumerTrue.close();
1:         session.unsubscribe("true");
1: 
1:         consumerFalse.close();
1:         session.unsubscribe("false");
1: 
/////////////////////////////////////////////////////////////////////////
commit:b24dfb9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DurableSubsOfflineSelectorIndexUseTest extends org.apache.activemq.TestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubsOfflineSelectorIndexUseTest.class);
1:     public int messageCount = 400;
1:     private BrokerService broker;
1:     private ActiveMQTopic topic;
1:     private List<Throwable> exceptions = new ArrayList<Throwable>();
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         return connectionFactory;
1:     }
1: 
1:     @Override
1:     protected Connection createConnection() throws Exception {
1:         return createConnection("id");
1:     }
1: 
1:     protected Connection createConnection(String name) throws Exception {
1:         Connection con = super.createConnection();
1:         con.setClientID(name);
1:         con.start();
1:         return con;
1:     }
1: 
1:     public static Test suite() {
1:         return suite(DurableSubsOfflineSelectorIndexUseTest.class);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         exceptions.clear();
1:         topic = (ActiveMQTopic) createDestination();
1:         createBroker();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         destroyBroker();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:         broker = BrokerFactory.createBroker("broker:(vm://" + getName(true) + ")");
1:         broker.setBrokerName(getName(true));
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setAdvisorySupport(false);
1:         broker.addConnector("tcp://0.0.0.0:0");
1: 
1:         setDefaultPersistenceAdapter(broker);
1:         broker.start();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:     }
1: 
1:     public void initCombosForTestIndexPageUsage() {
1:         addCombinationValues("messageCount", new Integer[]{890, 900, 400});
1:     }
1: 
1:     public void testIndexPageUsage() throws Exception {
1:         Connection con = createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "true", "filter = 'true'", true);
1:         session.close();
1: 
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "false", "filter = 'false'", true);
1:         session.close();
1: 
1:         con.close();
1: 
1:         // send messages
1:         final Connection sendCon = createConnection("send");
1:         final Session sendSession = sendCon.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageProducer producer = sendSession.createProducer(null);
1: 
1:         Thread sendThread = new Thread() {
1:             public void run() {
1:                 try {
1: 
1:                     for (int i = 0; i < messageCount; i++) {
1:                         boolean filter = i % 2 == 1;
1:                         Message message = sendSession.createMessage();
1:                         message.setStringProperty("filter", filter ? "true" : "false");
1:                         producer.send(topic, message);
1: 
1:                         if (i > 0 && i % 1000 == 0) {
1:                             LOG.info("Sent:" + i);
1:                         }
1:                     }
1:                     sendSession.close();
1:                     sendCon.close();
1:                 } catch (Exception e) {
1:                     exceptions.add(e);
1:                 }
1:             }
1:         };
1:         sendThread.start();
1: 
1:         sendThread.join();
1: 
1:         // settle with sent messages
1:         TimeUnit.SECONDS.sleep(4);
1: 
1:         // consume messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer consumerTrue = session.createDurableSubscriber(topic, "true", "filter = 'true'", true);
1:         Listener listenerT = new Listener();
1:         consumerTrue.setMessageListener(listenerT);
1: 
1:         waitFor(listenerT, messageCount / 2);
1: 
1:         MessageConsumer consumerFalse = session.createDurableSubscriber(topic, "false", "filter = 'false'", true);
1:         Listener listenerF = new Listener();
1:         consumerFalse.setMessageListener(listenerF);
1: 
1:         waitFor(listenerF, messageCount / 2);
1: 
1:         assertEquals(messageCount / 2, listenerT.count);
1:         assertEquals(messageCount / 2, listenerF.count);
1: 
1:         session.close();
1:         con.close();
1: 
0:         final KahaDBStore store = ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).getStore();
0:         LOG.info("Store page count: " + store.getPageFile().getPageCount());
0:         LOG.info("Store free page count: " + store.getPageFile().getFreePageCount());
0:         LOG.info("Store page in-use: " + (store.getPageFile().getPageCount() - store.getPageFile().getFreePageCount()));
1: 
0:         assertTrue("no leak of pages, always use just 10", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return 10 == store.getPageFile().getPageCount() -
0:                         store.getPageFile().getFreePageCount();
1:             }
0:         }, TimeUnit.SECONDS.toMillis(10)));
1:     }
1: 
1:     private void waitFor(final Listener listener, final int count) throws Exception {
1: 
1:         assertTrue("got all messages on time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return listener.count == count;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(10)));
1: 
1:     }
1: 
0:     private void dumpstats() throws Exception {
0:         //TimeUnit.SECONDS.sleep(2);
0:         //ThreadTracker.result();
1:         TimeUnit.SECONDS.sleep(4);
1: 
1: 
1:     }
1: 
1:     public static class Listener implements MessageListener {
1:         int count = 0;
1:         String id = null;
1: 
1:         Listener() {
1:         }
1: 
1:         public void onMessage(Message message) {
1:             count++;
1:             if (id != null) {
1:                 try {
1:                     LOG.info(id + ", " + message.getJMSMessageID());
1:                 } catch (Exception ignored) {
1:                 }
1:             }
1:         }
1:     }
1: }
============================================================================