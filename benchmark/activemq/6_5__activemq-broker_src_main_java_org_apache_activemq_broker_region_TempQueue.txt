1:cd54a16: /**
1:cd54a16:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cd54a16:  * contributor license agreements.  See the NOTICE file distributed with
1:cd54a16:  * this work for additional information regarding copyright ownership.
1:cd54a16:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cd54a16:  * (the "License"); you may not use this file except in compliance with
1:cd54a16:  * the License.  You may obtain a copy of the License at
1:cd54a16:  *
1:cd54a16:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cd54a16:  *
1:cd54a16:  * Unless required by applicable law or agreed to in writing, software
1:cd54a16:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cd54a16:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd54a16:  * See the License for the specific language governing permissions and
1:cd54a16:  * limitations under the License.
1:cd54a16:  */
1:cd54a16: package org.apache.activemq.broker.region;
4:cd54a16: 
1:ac0462a: import java.io.IOException;
1:cd54a16: import org.apache.activemq.broker.BrokerService;
1:cd54a16: import org.apache.activemq.broker.ConnectionContext;
1:cd54a16: import org.apache.activemq.broker.region.cursors.VMPendingMessageCursor;
1:cd54a16: import org.apache.activemq.command.ActiveMQDestination;
1:cd54a16: import org.apache.activemq.command.ActiveMQTempDestination;
1:cd54a16: import org.apache.activemq.store.MessageStore;
1:cd54a16: import org.apache.activemq.thread.TaskRunnerFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:cd54a16: 
1:cd54a16: /**
1:cd54a16:  * The Queue is a List of MessageEntry objects that are dispatched to matching
1:cd54a16:  * subscriptions.
1:b0c2a40:  * 
1:cd54a16:  * 
1:cd54a16:  */
1:cd54a16: public class TempQueue extends Queue{
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TempQueue.class);
1:cd54a16:     private final ActiveMQTempDestination tempDest;
1:3f9d6e2:    
1:cd54a16:     
1:cd54a16:     /**
1:cd54a16:      * @param brokerService
1:cd54a16:      * @param destination
1:cd54a16:      * @param store
1:cd54a16:      * @param parentStats
1:cd54a16:      * @param taskFactory
1:cd54a16:      * @throws Exception
1:cd54a16:      */
1:cd54a16:     public TempQueue(BrokerService brokerService,
1:cd54a16:             ActiveMQDestination destination, MessageStore store,
1:cd54a16:             DestinationStatistics parentStats, TaskRunnerFactory taskFactory)
1:cd54a16:             throws Exception {
1:cd54a16:         super(brokerService, destination, store, parentStats, taskFactory);
1:cd54a16:         this.tempDest = (ActiveMQTempDestination) destination;
11:cd54a16:     }
1:254d920:     
1:254d920:     @Override
1:cd54a16:     public void initialize() throws Exception {
1:00879cf:         this.messages=new VMPendingMessageCursor(false);
1:785454a:         this.messages.setMemoryUsageHighWaterMark(getCursorMemoryHighWaterMark());
1:cd54a16:         this.systemUsage = brokerService.getSystemUsage();
1:cd54a16:         memoryUsage.setParent(systemUsage.getMemoryUsage());           
1:cd54a16:         this.taskRunner = taskFactory.createTaskRunner(this, "TempQueue:  " + destination.getPhysicalName());
1:254d920:     }
1:cd54a16:     
1:ac0462a:     @Override
1:cd54a16:     public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:cd54a16:         // Only consumers on the same connection can consume from
1:cd54a16:         // the temporary destination
1:cd54a16:         // However, we could have failed over - and we do this
1:cd54a16:         // check client side anyways ....
1:cd54a16:         if (!context.isFaultTolerant()
1:cd54a16:                 && (!context.isNetworkConnection() && !tempDest
1:cd54a16:                         .getConnectionId().equals(
1:cd54a16:                                 sub.getConsumerInfo().getConsumerId()
1:cd54a16:                                         .getConnectionId()))) {
1:cd54a16: 
1:cd54a16:             tempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());
1:e1bbde7:             LOG.debug("changed ownership of {} to {}", this, tempDest.getConnectionId());
1:254d920:         }
1:cd54a16:         super.addSubscription(context, sub);
1:44ef96e:     }
1:ac0462a:     
1:ac0462a:     @Override
1:ac0462a:     public void dispose(ConnectionContext context) throws IOException {
1:7e87cf2:         if (this.destinationStatistics.getMessages().getCount() > 0) {
1:e1bbde7:             LOG.info("{} on dispose, purge of {} pending messages: {}", new Object[]{ getActiveMQDestination().getQualifiedName(), this.destinationStatistics.getMessages().getCount(), messages });
1:7e87cf2:             // we may want to capture these message ids in an advisory
1:7e87cf2:         }
1:ac0462a:         try {
1:e1bbde7:             purge();
1:ac0462a:         } catch (Exception e) {
1:e1bbde7:             LOG.warn("Caught an exception purging Queue: {}", destination, e);
1:ac0462a:         }
1:ac0462a:         super.dispose(context);
1:254d920:     }
1:ac0462a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("changed ownership of {} to {}", this, tempDest.getConnectionId());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("{} on dispose, purge of {} pending messages: {}", new Object[]{ getActiveMQDestination().getQualifiedName(), this.destinationStatistics.getMessages().getCount(), messages });
1:             purge();
1:             LOG.warn("Caught an exception purging Queue: {}", destination, e);
author:Gary Tully
-------------------------------------------------------------------------------
commit:7e87cf2
/////////////////////////////////////////////////////////////////////////
1:         if (this.destinationStatistics.getMessages().getCount() > 0) {
0:             LOG.info(getActiveMQDestination().getQualifiedName()
0:                             + " on dispose, purge of "
0:                             + this.destinationStatistics.getMessages().getCount() + " pending messages: " + messages);
1:             // we may want to capture these message ids in an advisory
1:         }
commit:d55a392
/////////////////////////////////////////////////////////////////////////
commit:254d920
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public boolean isActive() {
0:         boolean isActive = super.isActive();
0:         if (isActive && brokerService.isAllowTempAutoCreationOnSend()) {
0:             synchronized (consumers) {
0:                 isActive = hasRegularConsumers(consumers);
1:             }
1:         }
0:         return isActive;
1:     }
commit:9216c18
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:44e0eaf
/////////////////////////////////////////////////////////////////////////
0:             LOG.debug(" changed ownership of " + this + " to "+ tempDest.getConnectionId());
/////////////////////////////////////////////////////////////////////////
0:                 LOG.error("Failed to page in more queue messages ", e);
0:                 LOG.warn("Task Runner failed to wakeup ", e);
commit:c20b10b
/////////////////////////////////////////////////////////////////////////
0:     public void xwakeup() {
commit:5269519
/////////////////////////////////////////////////////////////////////////
0:         if (!messagesWaitingForSpace.isEmpty() || !isRecoveryDispatchEmpty()) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:44ef96e
/////////////////////////////////////////////////////////////////////////
0:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug(" changed ownership of " + this + " to "+ tempDest.getConnectionId());
1:             }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TempQueue.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
1:         this.messages=new VMPendingMessageCursor(false);
commit:ac0462a
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TempQueue.class);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     
0:     @Override
1:     public void dispose(ConnectionContext context) throws IOException {
1:         try {
0:            purge();
1:         } catch (Exception e) {
0:           LOG.warn("Caught an exception purging Queue: " + destination);
1:         }
1:         super.dispose(context);
1:     }
commit:785454a
/////////////////////////////////////////////////////////////////////////
1:         this.messages.setMemoryUsageHighWaterMark(getCursorMemoryHighWaterMark());
commit:044c07d
/////////////////////////////////////////////////////////////////////////
0:     public void wakeup() {
commit:3f9d6e2
/////////////////////////////////////////////////////////////////////////
1:    
/////////////////////////////////////////////////////////////////////////
commit:cd54a16
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.cursors.VMPendingMessageCursor;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTempDestination;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: 
1: /**
1:  * The Queue is a List of MessageEntry objects that are dispatched to matching
1:  * subscriptions.
1:  * 
0:  * @version $Revision: 1.28 $
1:  */
1: public class TempQueue extends Queue{
1:     private final ActiveMQTempDestination tempDest;
0:     private TaskRunnerFactory taskFactory;
1:     
1:     /**
1:      * @param brokerService
1:      * @param destination
1:      * @param store
1:      * @param parentStats
1:      * @param taskFactory
1:      * @throws Exception
1:      */
1:     public TempQueue(BrokerService brokerService,
1:             ActiveMQDestination destination, MessageStore store,
1:             DestinationStatistics parentStats, TaskRunnerFactory taskFactory)
1:             throws Exception {
1:         super(brokerService, destination, store, parentStats, taskFactory);
1:         this.tempDest = (ActiveMQTempDestination) destination;
0:         this.taskFactory=taskFactory;
1:     }
1:     
1:     public void initialize() throws Exception {
0:         this.messages=new VMPendingMessageCursor();
1:         this.systemUsage = brokerService.getSystemUsage();
1:         memoryUsage.setParent(systemUsage.getMemoryUsage());           
1:         this.taskRunner = taskFactory.createTaskRunner(this, "TempQueue:  " + destination.getPhysicalName());
1:     }
1:     
1:     public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:         // Only consumers on the same connection can consume from
1:         // the temporary destination
1:         // However, we could have failed over - and we do this
1:         // check client side anyways ....
1:         if (!context.isFaultTolerant()
1:                 && (!context.isNetworkConnection() && !tempDest
1:                         .getConnectionId().equals(
1:                                 sub.getConsumerInfo().getConsumerId()
1:                                         .getConnectionId()))) {
1: 
1:             tempDest.setConnectionId(sub.getConsumerInfo().getConsumerId().getConnectionId());
0:             log.debug(" changed ownership of " + this + " to "+ tempDest.getConnectionId());
1:         }
1:         super.addSubscription(context, sub);
1:     } 
1:     
0:     protected void wakeup() {
0:         boolean result = false;
0:         synchronized (messages) {
0:             result = !messages.isEmpty();
1:         }
0:         if (result) {
0:             try {
0:                pageInMessages(false);
1:                
0:             } catch (Throwable e) {
0:                 log.error("Failed to page in more queue messages ", e);
1:             }
1:         }
0:         if (!messagesWaitingForSpace.isEmpty()) {
0:             try {
0:                 taskRunner.wakeup();
0:             } catch (InterruptedException e) {
0:                 log.warn("Task Runner failed to wakeup ", e);
1:             }
1:         }
1:     }
1: }
============================================================================