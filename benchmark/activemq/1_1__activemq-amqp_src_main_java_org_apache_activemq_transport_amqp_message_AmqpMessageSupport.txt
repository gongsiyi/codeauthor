1:d54e21b: /*
1:d54e21b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d54e21b:  * contributor license agreements.  See the NOTICE file distributed with
1:d54e21b:  * this work for additional information regarding copyright ownership.
1:d54e21b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d54e21b:  * (the "License"); you may not use this file except in compliance with
1:d54e21b:  * the License.  You may obtain a copy of the License at
1:d54e21b:  *
1:d54e21b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d54e21b:  *
1:d54e21b:  * Unless required by applicable law or agreed to in writing, software
1:d54e21b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d54e21b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d54e21b:  * See the License for the specific language governing permissions and
1:d54e21b:  * limitations under the License.
1:d54e21b:  */
1:d54e21b: package org.apache.activemq.transport.amqp.message;
2:d54e21b: 
1:63d62a7: import java.io.DataInputStream;
1:d54e21b: import java.io.IOException;
1:d54e21b: import java.io.ObjectOutputStream;
1:d54e21b: import java.io.Serializable;
1:d54e21b: import java.nio.charset.Charset;
1:63d62a7: import java.nio.charset.StandardCharsets;
1:63d62a7: import java.util.HashMap;
1:d88c4e4: import java.util.LinkedHashMap;
1:d54e21b: import java.util.Map;
1:d88c4e4: import java.util.Map.Entry;
1:63d62a7: import java.util.zip.InflaterInputStream;
1:d54e21b: 
1:63d62a7: import javax.jms.JMSException;
1:63d62a7: 
1:63d62a7: import org.apache.activemq.command.ActiveMQBytesMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQMapMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQObjectMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQTextMessage;
1:63d62a7: import org.apache.activemq.util.ByteArrayInputStream;
1:63d62a7: import org.apache.activemq.util.ByteArrayOutputStream;
1:63d62a7: import org.apache.activemq.util.ByteSequence;
1:63d62a7: import org.apache.activemq.util.JMSExceptionSupport;
1:d54e21b: import org.apache.qpid.proton.amqp.Binary;
1:d54e21b: import org.apache.qpid.proton.amqp.Symbol;
1:d54e21b: import org.apache.qpid.proton.amqp.messaging.Data;
1:d54e21b: import org.apache.qpid.proton.message.Message;
1:d54e21b: 
1:d54e21b: /**
1:d54e21b:  * Support class containing constant values and static methods that are
1:d54e21b:  * used to map to / from AMQP Message types being sent or received.
1:d54e21b:  */
1:d54e21b: public final class AmqpMessageSupport {
1:d54e21b: 
1:63d62a7:     // Message Properties used to map AMQP to JMS and back
1:63d62a7: 
1:63d62a7:     public static final String JMS_AMQP_PREFIX = "JMS_AMQP_";
1:63d62a7:     public static final int JMS_AMQP_PREFIX_LENGTH = JMS_AMQP_PREFIX.length();
1:63d62a7: 
1:63d62a7:     public static final String MESSAGE_FORMAT = "MESSAGE_FORMAT";
1:63d62a7:     public static final String ORIGINAL_ENCODING = "ORIGINAL_ENCODING";
1:63d62a7:     public static final String NATIVE = "NATIVE";
1:63d62a7:     public static final String HEADER = "HEADER";
1:63d62a7:     public static final String PROPERTIES = "PROPERTIES";
1:63d62a7: 
1:63d62a7:     public static final String FIRST_ACQUIRER = "FirstAcquirer";
1:63d62a7:     public static final String CONTENT_TYPE = "ContentType";
1:63d62a7:     public static final String CONTENT_ENCODING = "ContentEncoding";
1:63d62a7:     public static final String REPLYTO_GROUP_ID = "ReplyToGroupID";
1:63d62a7: 
1:63d62a7:     public static final String DELIVERY_ANNOTATION_PREFIX = "DA_";
1:63d62a7:     public static final String MESSAGE_ANNOTATION_PREFIX = "MA_";
1:63d62a7:     public static final String FOOTER_PREFIX = "FT_";
1:63d62a7: 
1:63d62a7:     public static final String JMS_AMQP_HEADER = JMS_AMQP_PREFIX + HEADER;
1:63d62a7:     public static final String JMS_AMQP_PROPERTIES = JMS_AMQP_PREFIX + PROPERTIES;
1:63d62a7:     public static final String JMS_AMQP_ORIGINAL_ENCODING = JMS_AMQP_PREFIX + ORIGINAL_ENCODING;
1:63d62a7:     public static final String JMS_AMQP_MESSAGE_FORMAT = JMS_AMQP_PREFIX + MESSAGE_FORMAT;
1:63d62a7:     public static final String JMS_AMQP_NATIVE = JMS_AMQP_PREFIX + NATIVE;
1:63d62a7:     public static final String JMS_AMQP_FIRST_ACQUIRER = JMS_AMQP_PREFIX + FIRST_ACQUIRER;
1:63d62a7:     public static final String JMS_AMQP_CONTENT_TYPE = JMS_AMQP_PREFIX + CONTENT_TYPE;
1:63d62a7:     public static final String JMS_AMQP_CONTENT_ENCODING = JMS_AMQP_PREFIX + CONTENT_ENCODING;
1:63d62a7:     public static final String JMS_AMQP_REPLYTO_GROUP_ID = JMS_AMQP_PREFIX + REPLYTO_GROUP_ID;
1:63d62a7:     public static final String JMS_AMQP_DELIVERY_ANNOTATION_PREFIX = JMS_AMQP_PREFIX + DELIVERY_ANNOTATION_PREFIX;
1:63d62a7:     public static final String JMS_AMQP_MESSAGE_ANNOTATION_PREFIX = JMS_AMQP_PREFIX + MESSAGE_ANNOTATION_PREFIX;
1:63d62a7:     public static final String JMS_AMQP_FOOTER_PREFIX = JMS_AMQP_PREFIX + FOOTER_PREFIX;
1:63d62a7: 
1:63d62a7:     // Message body type definitions
1:d54e21b:     public static final Binary EMPTY_BINARY = new Binary(new byte[0]);
1:d54e21b:     public static final Data EMPTY_BODY = new Data(EMPTY_BINARY);
1:d54e21b:     public static final Data NULL_OBJECT_BODY;
1:d54e21b: 
1:d54e21b:     public static final short AMQP_UNKNOWN = 0;
1:d54e21b:     public static final short AMQP_NULL = 1;
1:d54e21b:     public static final short AMQP_DATA = 2;
1:d54e21b:     public static final short AMQP_SEQUENCE = 3;
1:d54e21b:     public static final short AMQP_VALUE_NULL = 4;
1:d54e21b:     public static final short AMQP_VALUE_STRING = 5;
1:d54e21b:     public static final short AMQP_VALUE_BINARY = 6;
1:d54e21b:     public static final short AMQP_VALUE_MAP = 7;
1:d54e21b:     public static final short AMQP_VALUE_LIST = 8;
1:d54e21b: 
1:d54e21b:     static {
1:d54e21b:         byte[] bytes;
1:d54e21b:         try {
1:d54e21b:             bytes = getSerializedBytes(null);
1:d54e21b:         } catch (IOException e) {
1:d54e21b:             throw new RuntimeException("Failed to initialise null object body", e);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         NULL_OBJECT_BODY = new Data(new Binary(bytes));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Content type used to mark Data sections as containing a serialized java object.
1:d54e21b:      */
1:d54e21b:     public static final String SERIALIZED_JAVA_OBJECT_CONTENT_TYPE = "application/x-java-serialized-object";
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Content type used to mark Data sections as containing arbitrary bytes.
1:d54e21b:      */
1:d54e21b:     public static final String OCTET_STREAM_CONTENT_TYPE = "application/octet-stream";
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Lookup and return the correct Proton Symbol instance based on the given key.
1:d54e21b:      *
1:d54e21b:      * @param key
1:d54e21b:      *        the String value name of the Symbol to locate.
1:d54e21b:      *
1:d54e21b:      * @return the Symbol value that matches the given key.
1:d54e21b:      */
1:d54e21b:     public static Symbol getSymbol(String key) {
1:d54e21b:         return Symbol.valueOf(key);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Safe way to access message annotations which will check internal structure and
1:d54e21b:      * either return the annotation if it exists or null if the annotation or any annotations
1:d54e21b:      * are present.
1:d54e21b:      *
1:d54e21b:      * @param key
1:d54e21b:      *        the String key to use to lookup an annotation.
1:d54e21b:      * @param message
1:d54e21b:      *        the AMQP message object that is being examined.
1:d54e21b:      *
1:d54e21b:      * @return the given annotation value or null if not present in the message.
1:d54e21b:      */
1:d54e21b:     public static Object getMessageAnnotation(String key, Message message) {
1:d54e21b:         if (message != null && message.getMessageAnnotations() != null) {
1:d54e21b:             Map<Symbol, Object> annotations = message.getMessageAnnotations().getValue();
1:d54e21b:             return annotations.get(AmqpMessageSupport.getSymbol(key));
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return null;
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Check whether the content-type field of the properties section (if present) in
1:d54e21b:      * the given message matches the provided string (where null matches if there is
1:d54e21b:      * no content type present.
1:d54e21b:      *
1:d54e21b:      * @param contentType
1:d54e21b:      *        content type string to compare against, or null if none
1:d54e21b:      * @param message
1:d54e21b:      *        the AMQP message object that is being examined.
1:d54e21b:      *
1:d54e21b:      * @return true if content type matches
1:d54e21b:      */
1:d54e21b:     public static boolean isContentType(String contentType, Message message) {
1:d54e21b:         if (contentType == null) {
1:d54e21b:             return message.getContentType() == null;
1:d54e21b:         } else {
1:d54e21b:             return contentType.equals(message.getContentType());
1:d54e21b:         }
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * @param contentType the contentType of the received message
1:d54e21b:      * @return the character set to use, or null if not to treat the message as text
1:d54e21b:      */
1:d54e21b:     public static Charset getCharsetForTextualContent(String contentType) {
1:d54e21b:         try {
1:d54e21b:             return AmqpContentTypeSupport.parseContentTypeForTextualCharset(contentType);
1:d54e21b:         } catch (InvalidContentTypeException e) {
1:d54e21b:             return null;
1:d54e21b:         }
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private static byte[] getSerializedBytes(Serializable value) throws IOException {
1:d54e21b:         try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:d54e21b:              ObjectOutputStream oos = new ObjectOutputStream(baos)) {
1:d54e21b: 
1:d54e21b:             oos.writeObject(value);
1:d54e21b:             oos.flush();
1:d54e21b:             oos.close();
1:d54e21b: 
1:d54e21b:             return baos.toByteArray();
1:d54e21b:         }
1:d54e21b:     }
1:63d62a7: 
1:63d62a7:     /**
1:63d62a7:      * Return the encoded form of the BytesMessage as an AMQP Binary instance.
1:63d62a7:      *
1:63d62a7:      * @param message
1:63d62a7:      *      the Message whose binary encoded body is needed.
1:63d62a7:      *
1:63d62a7:      * @return a Binary instance containing the encoded message body.
1:63d62a7:      *
1:63d62a7:      * @throws JMSException if an error occurs while fetching the binary payload.
1:63d62a7:      */
1:63d62a7:     public static Binary getBinaryFromMessageBody(ActiveMQBytesMessage message) throws JMSException {
1:63d62a7:         Binary result = null;
1:63d62a7: 
1:63d62a7:         if (message.getContent() != null) {
1:63d62a7:             ByteSequence contents = message.getContent();
1:63d62a7: 
1:63d62a7:             if (message.isCompressed()) {
1:63d62a7:                 int length = (int) message.getBodyLength();
1:63d62a7:                 byte[] uncompressed = new byte[length];
1:63d62a7:                 message.readBytes(uncompressed);
1:63d62a7: 
1:63d62a7:                 result = new Binary(uncompressed);
1:63d62a7:             } else {
1:63d62a7:                 return new Binary(contents.getData(), contents.getOffset(), contents.getLength());
1:63d62a7:             }
1:63d62a7:         }
1:63d62a7: 
1:63d62a7:         return result;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     /**
1:63d62a7:      * Return the encoded form of the BytesMessage as an AMQP Binary instance.
1:63d62a7:      *
1:63d62a7:      * @param message
1:63d62a7:      *      the Message whose binary encoded body is needed.
1:63d62a7:      *
1:63d62a7:      * @return a Binary instance containing the encoded message body.
1:63d62a7:      *
1:63d62a7:      * @throws JMSException if an error occurs while fetching the binary payload.
1:63d62a7:      */
1:63d62a7:     public static Binary getBinaryFromMessageBody(ActiveMQObjectMessage message) throws JMSException {
1:63d62a7:         Binary result = null;
1:63d62a7: 
1:63d62a7:         if (message.getContent() != null) {
1:63d62a7:             ByteSequence contents = message.getContent();
1:63d62a7: 
1:63d62a7:             if (message.isCompressed()) {
1:63d62a7:                 try (ByteArrayOutputStream os = new ByteArrayOutputStream();
1:63d62a7:                      ByteArrayInputStream is = new ByteArrayInputStream(contents);
1:63d62a7:                      InflaterInputStream iis = new InflaterInputStream(is);) {
1:63d62a7: 
1:63d62a7:                     byte value;
1:63d62a7:                     while ((value = (byte) iis.read()) != -1) {
1:63d62a7:                         os.write(value);
1:63d62a7:                     }
1:63d62a7: 
1:63d62a7:                     ByteSequence expanded = os.toByteSequence();
1:63d62a7:                     result = new Binary(expanded.getData(), expanded.getOffset(), expanded.getLength());
1:63d62a7:                 } catch (Exception cause) {
1:63d62a7:                    throw JMSExceptionSupport.create(cause);
1:63d62a7:                }
1:63d62a7:             } else {
1:63d62a7:                 return new Binary(contents.getData(), contents.getOffset(), contents.getLength());
1:63d62a7:             }
1:63d62a7:         }
1:63d62a7: 
1:63d62a7:         return result;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     /**
1:63d62a7:      * Return the encoded form of the Message as an AMQP Binary instance.
1:63d62a7:      *
1:63d62a7:      * @param message
1:63d62a7:      *      the Message whose binary encoded body is needed.
1:63d62a7:      *
1:63d62a7:      * @return a Binary instance containing the encoded message body.
1:63d62a7:      *
1:63d62a7:      * @throws JMSException if an error occurs while fetching the binary payload.
1:63d62a7:      */
1:63d62a7:     public static Binary getBinaryFromMessageBody(ActiveMQTextMessage message) throws JMSException {
1:63d62a7:         Binary result = null;
1:63d62a7: 
1:63d62a7:         if (message.getContent() != null) {
1:63d62a7:             ByteSequence contents = message.getContent();
1:63d62a7: 
1:63d62a7:             if (message.isCompressed()) {
1:63d62a7:                 try (ByteArrayInputStream is = new ByteArrayInputStream(contents);
1:63d62a7:                      InflaterInputStream iis = new InflaterInputStream(is);
1:63d62a7:                      DataInputStream dis = new DataInputStream(iis);) {
1:63d62a7: 
1:63d62a7:                     int size = dis.readInt();
1:63d62a7:                     byte[] uncompressed = new byte[size];
1:63d62a7:                     dis.readFully(uncompressed);
1:63d62a7: 
1:63d62a7:                     result = new Binary(uncompressed);
1:63d62a7:                 } catch (Exception cause) {
1:63d62a7:                     throw JMSExceptionSupport.create(cause);
1:63d62a7:                 }
1:63d62a7:             } else {
1:63d62a7:                 // Message includes a size prefix of four bytes for the OpenWire marshaler
1:63d62a7:                 result = new Binary(contents.getData(), contents.getOffset() + 4, contents.getLength() - 4);
1:63d62a7:             }
1:63d62a7:         } else if (message.getText() != null) {
1:63d62a7:             result = new Binary(message.getText().getBytes(StandardCharsets.UTF_8));
1:63d62a7:         }
1:63d62a7: 
1:63d62a7:         return result;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     /**
1:63d62a7:      * Return the underlying Map from the JMS MapMessage instance.
1:63d62a7:      *
1:63d62a7:      * @param message
1:63d62a7:      *      the MapMessage whose underlying Map is requested.
1:63d62a7:      *
1:63d62a7:      * @return the underlying Map used to store the value in the given MapMessage.
1:63d62a7:      *
1:63d62a7:      * @throws JMSException if an error occurs in constructing or fetching the Map.
1:63d62a7:      */
1:63d62a7:     public static Map<String, Object> getMapFromMessageBody(ActiveMQMapMessage message) throws JMSException {
1:d88c4e4:         final HashMap<String, Object> map = new LinkedHashMap<String, Object>();
1:63d62a7: 
1:63d62a7:         final Map<String, Object> contentMap = message.getContentMap();
1:63d62a7:         if (contentMap != null) {
1:d88c4e4:             for (Entry<String, Object> entry : contentMap.entrySet()) {
1:d88c4e4:                 Object value = entry.getValue();
1:d88c4e4:                 if (value instanceof byte[]) {
1:d88c4e4:                     value = new Binary((byte[]) value);
1:d88c4e4:                 }
1:d88c4e4:                 map.put(entry.getKey(), value);
1:d88c4e4:             }
1:63d62a7:         }
1:63d62a7: 
1:d88c4e4:         return map;
1:63d62a7:     }
1:d54e21b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d88c4e4
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedHashMap;
1: import java.util.Map.Entry;
/////////////////////////////////////////////////////////////////////////
1:         final HashMap<String, Object> map = new LinkedHashMap<String, Object>();
1:             for (Entry<String, Object> entry : contentMap.entrySet()) {
1:                 Object value = entry.getValue();
1:                 if (value instanceof byte[]) {
1:                     value = new Binary((byte[]) value);
1:                 }
1:                 map.put(entry.getKey(), value);
1:             }
1:         return map;
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInputStream;
1: import java.nio.charset.StandardCharsets;
1: import java.util.HashMap;
1: import java.util.zip.InflaterInputStream;
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.JMSExceptionSupport;
/////////////////////////////////////////////////////////////////////////
1:     // Message Properties used to map AMQP to JMS and back
1: 
1:     public static final String JMS_AMQP_PREFIX = "JMS_AMQP_";
1:     public static final int JMS_AMQP_PREFIX_LENGTH = JMS_AMQP_PREFIX.length();
1: 
1:     public static final String MESSAGE_FORMAT = "MESSAGE_FORMAT";
1:     public static final String ORIGINAL_ENCODING = "ORIGINAL_ENCODING";
1:     public static final String NATIVE = "NATIVE";
1:     public static final String HEADER = "HEADER";
1:     public static final String PROPERTIES = "PROPERTIES";
1: 
1:     public static final String FIRST_ACQUIRER = "FirstAcquirer";
1:     public static final String CONTENT_TYPE = "ContentType";
1:     public static final String CONTENT_ENCODING = "ContentEncoding";
1:     public static final String REPLYTO_GROUP_ID = "ReplyToGroupID";
1: 
1:     public static final String DELIVERY_ANNOTATION_PREFIX = "DA_";
1:     public static final String MESSAGE_ANNOTATION_PREFIX = "MA_";
1:     public static final String FOOTER_PREFIX = "FT_";
1: 
1:     public static final String JMS_AMQP_HEADER = JMS_AMQP_PREFIX + HEADER;
1:     public static final String JMS_AMQP_PROPERTIES = JMS_AMQP_PREFIX + PROPERTIES;
1:     public static final String JMS_AMQP_ORIGINAL_ENCODING = JMS_AMQP_PREFIX + ORIGINAL_ENCODING;
1:     public static final String JMS_AMQP_MESSAGE_FORMAT = JMS_AMQP_PREFIX + MESSAGE_FORMAT;
1:     public static final String JMS_AMQP_NATIVE = JMS_AMQP_PREFIX + NATIVE;
1:     public static final String JMS_AMQP_FIRST_ACQUIRER = JMS_AMQP_PREFIX + FIRST_ACQUIRER;
1:     public static final String JMS_AMQP_CONTENT_TYPE = JMS_AMQP_PREFIX + CONTENT_TYPE;
1:     public static final String JMS_AMQP_CONTENT_ENCODING = JMS_AMQP_PREFIX + CONTENT_ENCODING;
1:     public static final String JMS_AMQP_REPLYTO_GROUP_ID = JMS_AMQP_PREFIX + REPLYTO_GROUP_ID;
1:     public static final String JMS_AMQP_DELIVERY_ANNOTATION_PREFIX = JMS_AMQP_PREFIX + DELIVERY_ANNOTATION_PREFIX;
1:     public static final String JMS_AMQP_MESSAGE_ANNOTATION_PREFIX = JMS_AMQP_PREFIX + MESSAGE_ANNOTATION_PREFIX;
1:     public static final String JMS_AMQP_FOOTER_PREFIX = JMS_AMQP_PREFIX + FOOTER_PREFIX;
1: 
1:     // Message body type definitions
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return the encoded form of the BytesMessage as an AMQP Binary instance.
1:      *
1:      * @param message
1:      *      the Message whose binary encoded body is needed.
1:      *
1:      * @return a Binary instance containing the encoded message body.
1:      *
1:      * @throws JMSException if an error occurs while fetching the binary payload.
1:      */
1:     public static Binary getBinaryFromMessageBody(ActiveMQBytesMessage message) throws JMSException {
1:         Binary result = null;
1: 
1:         if (message.getContent() != null) {
1:             ByteSequence contents = message.getContent();
1: 
1:             if (message.isCompressed()) {
1:                 int length = (int) message.getBodyLength();
1:                 byte[] uncompressed = new byte[length];
1:                 message.readBytes(uncompressed);
1: 
1:                 result = new Binary(uncompressed);
1:             } else {
1:                 return new Binary(contents.getData(), contents.getOffset(), contents.getLength());
1:             }
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * Return the encoded form of the BytesMessage as an AMQP Binary instance.
1:      *
1:      * @param message
1:      *      the Message whose binary encoded body is needed.
1:      *
1:      * @return a Binary instance containing the encoded message body.
1:      *
1:      * @throws JMSException if an error occurs while fetching the binary payload.
1:      */
1:     public static Binary getBinaryFromMessageBody(ActiveMQObjectMessage message) throws JMSException {
1:         Binary result = null;
1: 
1:         if (message.getContent() != null) {
1:             ByteSequence contents = message.getContent();
1: 
1:             if (message.isCompressed()) {
1:                 try (ByteArrayOutputStream os = new ByteArrayOutputStream();
1:                      ByteArrayInputStream is = new ByteArrayInputStream(contents);
1:                      InflaterInputStream iis = new InflaterInputStream(is);) {
1: 
1:                     byte value;
1:                     while ((value = (byte) iis.read()) != -1) {
1:                         os.write(value);
1:                     }
1: 
1:                     ByteSequence expanded = os.toByteSequence();
1:                     result = new Binary(expanded.getData(), expanded.getOffset(), expanded.getLength());
1:                 } catch (Exception cause) {
1:                    throw JMSExceptionSupport.create(cause);
1:                }
1:             } else {
1:                 return new Binary(contents.getData(), contents.getOffset(), contents.getLength());
1:             }
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * Return the encoded form of the Message as an AMQP Binary instance.
1:      *
1:      * @param message
1:      *      the Message whose binary encoded body is needed.
1:      *
1:      * @return a Binary instance containing the encoded message body.
1:      *
1:      * @throws JMSException if an error occurs while fetching the binary payload.
1:      */
1:     public static Binary getBinaryFromMessageBody(ActiveMQTextMessage message) throws JMSException {
1:         Binary result = null;
1: 
1:         if (message.getContent() != null) {
1:             ByteSequence contents = message.getContent();
1: 
1:             if (message.isCompressed()) {
1:                 try (ByteArrayInputStream is = new ByteArrayInputStream(contents);
1:                      InflaterInputStream iis = new InflaterInputStream(is);
1:                      DataInputStream dis = new DataInputStream(iis);) {
1: 
1:                     int size = dis.readInt();
1:                     byte[] uncompressed = new byte[size];
1:                     dis.readFully(uncompressed);
1: 
1:                     result = new Binary(uncompressed);
1:                 } catch (Exception cause) {
1:                     throw JMSExceptionSupport.create(cause);
1:                 }
1:             } else {
1:                 // Message includes a size prefix of four bytes for the OpenWire marshaler
1:                 result = new Binary(contents.getData(), contents.getOffset() + 4, contents.getLength() - 4);
1:             }
1:         } else if (message.getText() != null) {
1:             result = new Binary(message.getText().getBytes(StandardCharsets.UTF_8));
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * Return the underlying Map from the JMS MapMessage instance.
1:      *
1:      * @param message
1:      *      the MapMessage whose underlying Map is requested.
1:      *
1:      * @return the underlying Map used to store the value in the given MapMessage.
1:      *
1:      * @throws JMSException if an error occurs in constructing or fetching the Map.
1:      */
1:     public static Map<String, Object> getMapFromMessageBody(ActiveMQMapMessage message) throws JMSException {
0:         final HashMap<String, Object> map = new HashMap<String, Object>();
1: 
1:         final Map<String, Object> contentMap = message.getContentMap();
1:         if (contentMap != null) {
0:             map.putAll(contentMap);
1:         }
1: 
0:         return contentMap;
1:     }
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
0: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.ObjectOutputStream;
1: import java.io.Serializable;
1: import java.nio.charset.Charset;
1: import java.util.Map;
1: 
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.Data;
1: import org.apache.qpid.proton.message.Message;
1: 
1: /**
1:  * Support class containing constant values and static methods that are
1:  * used to map to / from AMQP Message types being sent or received.
1:  */
1: public final class AmqpMessageSupport {
1: 
1:     public static final Binary EMPTY_BINARY = new Binary(new byte[0]);
1:     public static final Data EMPTY_BODY = new Data(EMPTY_BINARY);
1:     public static final Data NULL_OBJECT_BODY;
1: 
0:     public static final String AMQP_ORIGINAL_ENCODING_KEY = "JMS_AMQP_ORIGINAL_ENCODING";
1: 
1:     public static final short AMQP_UNKNOWN = 0;
1:     public static final short AMQP_NULL = 1;
1:     public static final short AMQP_DATA = 2;
1:     public static final short AMQP_SEQUENCE = 3;
1:     public static final short AMQP_VALUE_NULL = 4;
1:     public static final short AMQP_VALUE_STRING = 5;
1:     public static final short AMQP_VALUE_BINARY = 6;
1:     public static final short AMQP_VALUE_MAP = 7;
1:     public static final short AMQP_VALUE_LIST = 8;
1: 
1:     static {
1:         byte[] bytes;
1:         try {
1:             bytes = getSerializedBytes(null);
1:         } catch (IOException e) {
1:             throw new RuntimeException("Failed to initialise null object body", e);
1:         }
1: 
1:         NULL_OBJECT_BODY = new Data(new Binary(bytes));
1:     }
1: 
1:     /**
1:      * Content type used to mark Data sections as containing a serialized java object.
1:      */
1:     public static final String SERIALIZED_JAVA_OBJECT_CONTENT_TYPE = "application/x-java-serialized-object";
1: 
1:     /**
1:      * Content type used to mark Data sections as containing arbitrary bytes.
1:      */
1:     public static final String OCTET_STREAM_CONTENT_TYPE = "application/octet-stream";
1: 
1:     /**
1:      * Lookup and return the correct Proton Symbol instance based on the given key.
1:      *
1:      * @param key
1:      *        the String value name of the Symbol to locate.
1:      *
1:      * @return the Symbol value that matches the given key.
1:      */
1:     public static Symbol getSymbol(String key) {
1:         return Symbol.valueOf(key);
1:     }
1: 
1:     /**
1:      * Safe way to access message annotations which will check internal structure and
1:      * either return the annotation if it exists or null if the annotation or any annotations
1:      * are present.
1:      *
1:      * @param key
1:      *        the String key to use to lookup an annotation.
1:      * @param message
1:      *        the AMQP message object that is being examined.
1:      *
1:      * @return the given annotation value or null if not present in the message.
1:      */
1:     public static Object getMessageAnnotation(String key, Message message) {
1:         if (message != null && message.getMessageAnnotations() != null) {
1:             Map<Symbol, Object> annotations = message.getMessageAnnotations().getValue();
1:             return annotations.get(AmqpMessageSupport.getSymbol(key));
1:         }
1: 
1:         return null;
1:     }
1: 
1:     /**
1:      * Check whether the content-type field of the properties section (if present) in
1:      * the given message matches the provided string (where null matches if there is
1:      * no content type present.
1:      *
1:      * @param contentType
1:      *        content type string to compare against, or null if none
1:      * @param message
1:      *        the AMQP message object that is being examined.
1:      *
1:      * @return true if content type matches
1:      */
1:     public static boolean isContentType(String contentType, Message message) {
1:         if (contentType == null) {
1:             return message.getContentType() == null;
1:         } else {
1:             return contentType.equals(message.getContentType());
1:         }
1:     }
1: 
1:     /**
1:      * @param contentType the contentType of the received message
1:      * @return the character set to use, or null if not to treat the message as text
1:      */
1:     public static Charset getCharsetForTextualContent(String contentType) {
1:         try {
1:             return AmqpContentTypeSupport.parseContentTypeForTextualCharset(contentType);
1:         } catch (InvalidContentTypeException e) {
1:             return null;
1:         }
1:     }
1: 
1:     private static byte[] getSerializedBytes(Serializable value) throws IOException {
1:         try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:              ObjectOutputStream oos = new ObjectOutputStream(baos)) {
1: 
1:             oos.writeObject(value);
1:             oos.flush();
1:             oos.close();
1: 
1:             return baos.toByteArray();
1:         }
1:     }
1: }
============================================================================