1:27edaff: /**
1:27edaff:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27edaff:  * contributor license agreements.  See the NOTICE file distributed with
1:27edaff:  * this work for additional information regarding copyright ownership.
1:27edaff:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27edaff:  * (the "License"); you may not use this file except in compliance with
1:27edaff:  * the License.  You may obtain a copy of the License at
1:27edaff:  *
1:27edaff:  *      http://www.apache.org/licenses/LICENSE-2.0
1:27edaff:  *
1:27edaff:  * Unless required by applicable law or agreed to in writing, software
1:27edaff:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27edaff:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27edaff:  * See the License for the specific language governing permissions and
1:27edaff:  * limitations under the License.
1:27edaff:  */
1:27edaff: package org.apache.activemq.transport.ws;
3:27edaff: 
1:27edaff: import static org.junit.Assert.assertTrue;
1:27edaff: import static org.junit.Assert.fail;
1:27edaff: 
1:27edaff: import java.io.IOException;
1:27edaff: import java.util.concurrent.TimeUnit;
1:27edaff: 
1:27edaff: import org.apache.activemq.util.Wait;
1:f44c3d2: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1:f44c3d2: import org.eclipse.jetty.websocket.client.WebSocketClient;
1:27edaff: import org.junit.After;
1:27edaff: import org.junit.Before;
1:27edaff: import org.junit.Test;
1:27edaff: 
1:27edaff: /**
1:27edaff:  * Test that a WS client can steal links when enabled.
1:27edaff:  */
1:27edaff: public class MQTTWSLinkStealingTest extends WSTransportTestSupport {
1:27edaff: 
1:27edaff:     private final String CLIENT_ID = "WS-CLIENT-ID";
1:27edaff: 
1:27edaff:     protected WebSocketClient wsClient;
1:27edaff:     protected MQTTWSConnection wsMQTTConnection;
1:f44c3d2:     protected ClientUpgradeRequest request;
1:27edaff: 
1:27edaff:     @Override
1:27edaff:     @Before
1:27edaff:     public void setUp() throws Exception {
1:27edaff:         super.setUp();
1:27edaff: 
1:27edaff:         wsMQTTConnection = new MQTTWSConnection();
1:27edaff: 
1:f44c3d2:         wsClient = new WebSocketClient();
1:f44c3d2:         wsClient.start();
1:f44c3d2: 
1:f44c3d2:         request = new ClientUpgradeRequest();
1:f44c3d2:         request.setSubProtocols("mqttv3.1");
1:f44c3d2: 
1:f44c3d2:         wsClient.connect(wsMQTTConnection, wsConnectUri, request);
1:27edaff:         if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:27edaff:             throw new IOException("Could not connect to MQTT WS endpoint");
1:27edaff:         }
1:27edaff:     }
1:27edaff: 
1:27edaff:     @Override
1:27edaff:     @After
1:27edaff:     public void tearDown() throws Exception {
1:27edaff:         if (wsMQTTConnection != null) {
1:27edaff:             wsMQTTConnection.close();
1:27edaff:             wsMQTTConnection = null;
1:27edaff:             wsClient = null;
1:27edaff:         }
1:27edaff: 
1:27edaff:         super.tearDown();
1:27edaff:     }
1:27edaff: 
1:27edaff:     @Test(timeout = 60000)
1:27edaff:     public void testConnectAndStealLink() throws Exception {
1:27edaff: 
1:27edaff:         wsMQTTConnection.connect(CLIENT_ID);
1:27edaff: 
1:27edaff:         assertTrue("Connection should open", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:27edaff:             }
1:27edaff:         }));
1:27edaff: 
1:27edaff: 
1:27edaff:         MQTTWSConnection theif = new MQTTWSConnection();
1:27edaff: 
1:f44c3d2:         wsClient.connect(theif, wsConnectUri, request);
1:27edaff:         if (!theif.awaitConnection(30, TimeUnit.SECONDS)) {
1:27edaff:             fail("Could not open new WS connection for link stealing client");
1:27edaff:         }
1:27edaff: 
1:27edaff:         theif.connect(CLIENT_ID);
1:27edaff: 
1:27edaff:         assertTrue("Connection should open", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:27edaff:             }
1:27edaff:         }));
1:27edaff: 
1:27edaff:         assertTrue("Original Connection should close", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return !wsMQTTConnection.isConnected();
1:27edaff:             }
1:27edaff:         }));
1:27edaff: 
1:27edaff:         theif.disconnect();
1:27edaff:         theif.close();
1:27edaff: 
1:27edaff:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:27edaff: 
1:27edaff:             @Override
1:27edaff:             public boolean isSatisified() throws Exception {
1:27edaff:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:27edaff:             }
1:27edaff:         }));
1:27edaff:     }
1:27edaff: 
1:27edaff:     @Override
1:27edaff:     protected boolean isAllowLinkStealing() {
1:27edaff:         return true;
1:27edaff:     }
1:27edaff: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1: import org.eclipse.jetty.websocket.client.WebSocketClient;
/////////////////////////////////////////////////////////////////////////
1:     protected ClientUpgradeRequest request;
1:         wsClient = new WebSocketClient();
1:         wsClient.start();
1: 
1:         request = new ClientUpgradeRequest();
1:         request.setSubProtocols("mqttv3.1");
1: 
1:         wsClient.connect(wsMQTTConnection, wsConnectUri, request);
/////////////////////////////////////////////////////////////////////////
1:         wsClient.connect(theif, wsConnectUri, request);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27edaff
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.util.Wait;
0: import org.eclipse.jetty.websocket.WebSocketClient;
0: import org.eclipse.jetty.websocket.WebSocketClientFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test that a WS client can steal links when enabled.
1:  */
1: public class MQTTWSLinkStealingTest extends WSTransportTestSupport {
1: 
1:     private final String CLIENT_ID = "WS-CLIENT-ID";
1: 
1:     protected WebSocketClient wsClient;
1:     protected MQTTWSConnection wsMQTTConnection;
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
0:         WebSocketClientFactory clientFactory = new WebSocketClientFactory();
0:         clientFactory.start();
1: 
0:         wsClient = clientFactory.newWebSocketClient();
0:         wsClient.setProtocol("mqttv3.1");
1: 
1:         wsMQTTConnection = new MQTTWSConnection();
1: 
0:         wsClient.open(wsConnectUri, wsMQTTConnection);
1:         if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:             throw new IOException("Could not connect to MQTT WS endpoint");
1:         }
1:     }
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (wsMQTTConnection != null) {
1:             wsMQTTConnection.close();
1:             wsMQTTConnection = null;
1:             wsClient = null;
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnectAndStealLink() throws Exception {
1: 
1:         wsMQTTConnection.connect(CLIENT_ID);
1: 
1:         assertTrue("Connection should open", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:             }
1:         }));
1: 
0:         WebSocketClientFactory theifFactory = new WebSocketClientFactory();
0:         theifFactory.start();
1: 
1:         MQTTWSConnection theif = new MQTTWSConnection();
1: 
0:         wsClient.open(wsConnectUri, theif);
1:         if (!theif.awaitConnection(30, TimeUnit.SECONDS)) {
1:             fail("Could not open new WS connection for link stealing client");
1:         }
1: 
1:         theif.connect(CLIENT_ID);
1: 
1:         assertTrue("Connection should open", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:             }
1:         }));
1: 
1:         assertTrue("Original Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !wsMQTTConnection.isConnected();
1:             }
1:         }));
1: 
1:         theif.disconnect();
1:         theif.close();
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: 
1:     @Override
1:     protected boolean isAllowLinkStealing() {
1:         return true;
1:     }
1: }
============================================================================