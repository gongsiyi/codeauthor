1:9f0ab46: /**
1:9f0ab46:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f0ab46:  * contributor license agreements.  See the NOTICE file distributed with
1:9f0ab46:  * this work for additional information regarding copyright ownership.
1:9f0ab46:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f0ab46:  * (the "License"); you may not use this file except in compliance with
1:9f0ab46:  * the License.  You may obtain a copy of the License at
1:9f0ab46:  *
1:9f0ab46:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f0ab46:  *
1:9f0ab46:  * Unless required by applicable law or agreed to in writing, software
1:9f0ab46:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f0ab46:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f0ab46:  * See the License for the specific language governing permissions and
1:9f0ab46:  * limitations under the License.
1:9f0ab46:  */
1:9f0ab46: package org.apache.activemq.console.command;
7:9f0ab46: 
1:9f0ab46: import org.apache.activemq.ActiveMQConnectionFactory;
1:9f0ab46: import org.apache.activemq.command.ActiveMQDestination;
1:9f0ab46: import org.apache.activemq.util.ConsumerThread;
1:9f0ab46: import org.slf4j.Logger;
1:9f0ab46: import org.slf4j.LoggerFactory;
1:9f0ab46: 
1:9f0ab46: import javax.jms.Connection;
1:9f0ab46: import javax.jms.Session;
1:9f0ab46: import java.util.List;
1:9f0ab46: import java.util.concurrent.CountDownLatch;
1:9f0ab46: 
1:9f0ab46: public class ConsumerCommand extends AbstractCommand {
1:9f0ab46:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerCommand.class);
1:9f0ab46: 
1:9f0ab46:     String brokerUrl = ActiveMQConnectionFactory.DEFAULT_BROKER_URL;
1:9f0ab46:     String user = ActiveMQConnectionFactory.DEFAULT_USER;
1:9f0ab46:     String password = ActiveMQConnectionFactory.DEFAULT_PASSWORD;
1:9f0ab46:     String destination = "queue://TEST";
1:9f0ab46:     int messageCount = 1000;
1:9f0ab46:     int sleep;
1:ebb3df7:     boolean transacted;
1:ebb3df7:     private boolean durable;
1:ebb3df7:     private String clientId;
1:ebb3df7:     int batchSize = 10;
1:ebb3df7:     int ackMode = Session.AUTO_ACKNOWLEDGE;
1:9f0ab46:     int parallelThreads = 1;
1:df3ff9c:     boolean bytesAsText;
1:9f0ab46: 
1:9f0ab46:     @Override
1:9f0ab46:     protected void runTask(List<String> tokens) throws Exception {
1:09acc50:         LOG.info("Connecting to URL: " + brokerUrl + " as user: " + user);
1:9f0ab46:         LOG.info("Consuming " + destination);
1:9f0ab46:         LOG.info("Sleeping between receives " + sleep + " ms");
1:9f0ab46:         LOG.info("Running " + parallelThreads + " parallel threads");
1:9f0ab46: 
1:9f0ab46:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);
1:7d14ddb:         Connection conn = null;
1:7d14ddb:         try {
1:7d14ddb:             conn = factory.createConnection(user, password);
1:ebb3df7:             if (durable && clientId != null && clientId.length() > 0 && !"null".equals(clientId)) {
1:ebb3df7:                 conn.setClientID(clientId);
1:ebb3df7:             }
1:7d14ddb:             conn.start();
1:7d14ddb: 
1:7d14ddb: 
1:7d14ddb:             CountDownLatch active = new CountDownLatch(parallelThreads);
1:7d14ddb: 
1:7d14ddb:             for (int i = 1; i <= parallelThreads; i++) {
1:c5579ff:                 Session sess;
1:c5579ff:                 if (transacted) {
1:c5579ff:                    sess = conn.createSession(true, Session.SESSION_TRANSACTED);
1:c5579ff:                 } else {
1:c5579ff:                    sess = conn.createSession(false, ackMode);
1:c5579ff:                 }
1:7d14ddb:                 ConsumerThread consumer = new ConsumerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE));
1:7d14ddb:                 consumer.setName("consumer-" + i);
1:ebb3df7:                 consumer.setDurable(durable);
1:7d14ddb:                 consumer.setBreakOnNull(false);
1:7d14ddb:                 consumer.setMessageCount(messageCount);
1:7d14ddb:                 consumer.setSleep(sleep);
1:ebb3df7:                 consumer.setBatchSize(batchSize);
1:7d14ddb:                 consumer.setFinished(active);
1:df3ff9c:                 consumer.setBytesAsText(bytesAsText);
1:7d14ddb:                 consumer.start();
1:7d14ddb:             }
1:7d14ddb: 
1:7d14ddb:             active.await();
1:7d14ddb:         } finally {
1:7d14ddb:             if (conn != null) {
1:7d14ddb:                 conn.close();
1:7d14ddb:             }
1:7d14ddb:         }
3:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getBrokerUrl() {
1:9f0ab46:         return brokerUrl;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setBrokerUrl(String brokerUrl) {
1:9f0ab46:         this.brokerUrl = brokerUrl;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getUser() {
1:9f0ab46:         return user;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setUser(String user) {
1:9f0ab46:         this.user = user;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getPassword() {
1:9f0ab46:         return password;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setPassword(String password) {
1:9f0ab46:         this.password = password;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getDestination() {
1:9f0ab46:         return destination;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setDestination(String destination) {
1:9f0ab46:         this.destination = destination;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getMessageCount() {
1:9f0ab46:         return messageCount;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setMessageCount(int messageCount) {
1:9f0ab46:         this.messageCount = messageCount;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getSleep() {
1:9f0ab46:         return sleep;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setSleep(int sleep) {
1:9f0ab46:         this.sleep = sleep;
1:9f0ab46:     }
1:9f0ab46: 
1:ebb3df7:     public int getBatchSize() {
1:ebb3df7:         return batchSize;
1:9f0ab46:     }
1:9f0ab46: 
1:ebb3df7:     public void setBatchSize(int batchSize) {
1:ebb3df7:         this.batchSize = batchSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getParallelThreads() {
1:9f0ab46:         return parallelThreads;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setParallelThreads(int parallelThreads) {
1:9f0ab46:         this.parallelThreads = parallelThreads;
1:9f0ab46:     }
1:9f0ab46: 
1:df3ff9c:     public boolean isBytesAsText() {
1:df3ff9c:         return bytesAsText;
1:df3ff9c:     }
1:df3ff9c: 
1:df3ff9c:     public void setBytesAsText(boolean bytesAsText) {
1:df3ff9c:         this.bytesAsText = bytesAsText;
1:df3ff9c:     }
1:df3ff9c: 
1:ebb3df7:     public boolean isTransacted() {
1:ebb3df7:         return transacted;
1:ebb3df7:     }
1:ebb3df7: 
1:ebb3df7:     public void setTransacted(boolean transacted) {
1:ebb3df7:         this.transacted = transacted;
1:ebb3df7:     }
1:ebb3df7: 
1:ebb3df7:     public int getAckMode() {
1:ebb3df7:         return ackMode;
1:ebb3df7:     }
1:ebb3df7: 
1:ebb3df7:     public void setAckMode(String ackMode) {
1:ebb3df7:         if ("CLIENT_ACKNOWLEDGE".equals(ackMode)) {
1:ebb3df7:             this.ackMode = Session.CLIENT_ACKNOWLEDGE;
1:ebb3df7:         }
1:ebb3df7:         if ("AUTO_ACKNOWLEDGE".equals(ackMode)) {
1:ebb3df7:             this.ackMode = Session.AUTO_ACKNOWLEDGE;
1:ebb3df7:         }
1:ebb3df7:         if ("DUPS_OK_ACKNOWLEDGE".equals(ackMode)) {
1:ebb3df7:             this.ackMode = Session.DUPS_OK_ACKNOWLEDGE;
1:ebb3df7:         }
1:ebb3df7:     }
1:ebb3df7: 
1:ebb3df7:     public boolean isDurable() {
1:ebb3df7:         return durable;
1:ebb3df7:     }
1:ebb3df7: 
1:ebb3df7:     public void setDurable(boolean durable) {
1:ebb3df7:         this.durable = durable;
1:ebb3df7:     }
1:ebb3df7: 
1:ebb3df7:     public String getClientId() {
1:ebb3df7:         return clientId;
1:ebb3df7:     }
1:ebb3df7: 
1:ebb3df7:     public void setClientId(String clientId) {
1:ebb3df7:         this.clientId = clientId;
1:ebb3df7:     }
1:ebb3df7: 
1:9f0ab46:     @Override
1:9f0ab46:     protected void printHelp() {
1:9f0ab46:         printHelpFromFile();
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     @Override
1:9f0ab46:     public String getName() {
1:9f0ab46:         return "consumer";
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     @Override
1:9f0ab46:     public String getOneLineDescription() {
1:9f0ab46:         return "Receives messages from the broker";
1:9f0ab46:     }
1:9f0ab46: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:09acc50
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Connecting to URL: " + brokerUrl + " as user: " + user);
author:Clebert Suconic
-------------------------------------------------------------------------------
commit:c5579ff
/////////////////////////////////////////////////////////////////////////
1:                 Session sess;
1:                 if (transacted) {
1:                    sess = conn.createSession(true, Session.SESSION_TRANSACTED);
1:                 } else {
1:                    sess = conn.createSession(false, ackMode);
1:                 }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ebb3df7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean transacted;
1:     private boolean durable;
1:     private String clientId;
1:     int batchSize = 10;
1:     int ackMode = Session.AUTO_ACKNOWLEDGE;
/////////////////////////////////////////////////////////////////////////
1:             if (durable && clientId != null && clientId.length() > 0 && !"null".equals(clientId)) {
1:                 conn.setClientID(clientId);
1:             }
0:             if (transacted) {
0:                 sess = conn.createSession(false, ackMode);
/////////////////////////////////////////////////////////////////////////
1:                 consumer.setDurable(durable);
1:                 consumer.setBatchSize(batchSize);
/////////////////////////////////////////////////////////////////////////
1:     public int getBatchSize() {
1:         return batchSize;
1:     public void setBatchSize(int batchSize) {
1:         this.batchSize = batchSize;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isTransacted() {
1:         return transacted;
1:     }
1: 
1:     public void setTransacted(boolean transacted) {
1:         this.transacted = transacted;
1:     }
1: 
1:     public int getAckMode() {
1:         return ackMode;
1:     }
1: 
1:     public void setAckMode(String ackMode) {
1:         if ("CLIENT_ACKNOWLEDGE".equals(ackMode)) {
1:             this.ackMode = Session.CLIENT_ACKNOWLEDGE;
1:         }
1:         if ("AUTO_ACKNOWLEDGE".equals(ackMode)) {
1:             this.ackMode = Session.AUTO_ACKNOWLEDGE;
1:         }
1:         if ("DUPS_OK_ACKNOWLEDGE".equals(ackMode)) {
1:             this.ackMode = Session.DUPS_OK_ACKNOWLEDGE;
1:         }
1:     }
1: 
1:     public boolean isDurable() {
1:         return durable;
1:     }
1: 
1:     public void setDurable(boolean durable) {
1:         this.durable = durable;
1:     }
1: 
1:     public String getClientId() {
1:         return clientId;
1:     }
1: 
1:     public void setClientId(String clientId) {
1:         this.clientId = clientId;
1:     }
1: 
commit:df3ff9c
/////////////////////////////////////////////////////////////////////////
1:     boolean bytesAsText;
/////////////////////////////////////////////////////////////////////////
1:                 consumer.setBytesAsText(bytesAsText);
/////////////////////////////////////////////////////////////////////////
1:     public boolean isBytesAsText() {
1:         return bytesAsText;
1:     }
1: 
1:     public void setBytesAsText(boolean bytesAsText) {
1:         this.bytesAsText = bytesAsText;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:7d14ddb
/////////////////////////////////////////////////////////////////////////
1:         Connection conn = null;
1:         try {
1:             conn = factory.createConnection(user, password);
1:             conn.start();
0:             Session sess;
0:             if (transactionBatchSize != 0) {
0:                 sess = conn.createSession(true, Session.SESSION_TRANSACTED);
0:             } else {
0:                 sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             }
1: 
1: 
1:             CountDownLatch active = new CountDownLatch(parallelThreads);
1: 
1:             for (int i = 1; i <= parallelThreads; i++) {
1:                 ConsumerThread consumer = new ConsumerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE));
1:                 consumer.setName("consumer-" + i);
1:                 consumer.setBreakOnNull(false);
1:                 consumer.setMessageCount(messageCount);
1:                 consumer.setSleep(sleep);
0:                 consumer.setTransactionBatchSize(transactionBatchSize);
1:                 consumer.setFinished(active);
1:                 consumer.start();
1:             }
1: 
1:             active.await();
1:         } finally {
1:             if (conn != null) {
1:                 conn.close();
1:             }
commit:9f0ab46
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.util.ConsumerThread;
0: import org.apache.activemq.util.IntrospectionSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: 
1: public class ConsumerCommand extends AbstractCommand {
1:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerCommand.class);
1: 
1:     String brokerUrl = ActiveMQConnectionFactory.DEFAULT_BROKER_URL;
1:     String user = ActiveMQConnectionFactory.DEFAULT_USER;
1:     String password = ActiveMQConnectionFactory.DEFAULT_PASSWORD;
1:     String destination = "queue://TEST";
1:     int messageCount = 1000;
1:     int sleep;
0:     int transactionBatchSize;
1:     int parallelThreads = 1;
1: 
1:     @Override
1:     protected void runTask(List<String> tokens) throws Exception {
0:         LOG.info("Connecting to URL: " + brokerUrl + " (" + user + ":" + password + ")");
1:         LOG.info("Consuming " + destination);
1:         LOG.info("Sleeping between receives " + sleep + " ms");
1:         LOG.info("Running " + parallelThreads + " parallel threads");
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);
0:         Connection conn = factory.createConnection(user, password);
0:         conn.start();
1: 
0:         Session sess;
0:         if (transactionBatchSize != 0) {
0:             sess = conn.createSession(true, Session.SESSION_TRANSACTED);
0:         } else {
0:             sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         }
1: 
1: 
0:         CountDownLatch active = new CountDownLatch(parallelThreads);
1: 
0:         for (int i = 1; i <= parallelThreads; i++) {
0:             ConsumerThread consumer = new ConsumerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE));
0:             consumer.setName("consumer-" + i);
0:             consumer.setBreakOnNull(false);
0:             consumer.setMessageCount(messageCount);
0:             consumer.setSleep(sleep);
0:             consumer.setTransactionBatchSize(transactionBatchSize);
0:             consumer.setFinished(active);
0:             consumer.start();
1:         }
1: 
0:         active.await();
1:     }
1: 
1:     public String getBrokerUrl() {
1:         return brokerUrl;
1:     }
1: 
1:     public void setBrokerUrl(String brokerUrl) {
1:         this.brokerUrl = brokerUrl;
1:     }
1: 
1:     public String getUser() {
1:         return user;
1:     }
1: 
1:     public void setUser(String user) {
1:         this.user = user;
1:     }
1: 
1:     public String getPassword() {
1:         return password;
1:     }
1: 
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1:     public String getDestination() {
1:         return destination;
1:     }
1: 
1:     public void setDestination(String destination) {
1:         this.destination = destination;
1:     }
1: 
1:     public int getMessageCount() {
1:         return messageCount;
1:     }
1: 
1:     public void setMessageCount(int messageCount) {
1:         this.messageCount = messageCount;
1:     }
1: 
1:     public int getSleep() {
1:         return sleep;
1:     }
1: 
1:     public void setSleep(int sleep) {
1:         this.sleep = sleep;
1:     }
1: 
0:     public int getTransactionBatchSize() {
0:         return transactionBatchSize;
1:     }
1: 
0:     public void setTransactionBatchSize(int transactionBatchSize) {
0:         this.transactionBatchSize = transactionBatchSize;
1:     }
1: 
1:     public int getParallelThreads() {
1:         return parallelThreads;
1:     }
1: 
1:     public void setParallelThreads(int parallelThreads) {
1:         this.parallelThreads = parallelThreads;
1:     }
1: 
1:     @Override
1:     protected void printHelp() {
1:         printHelpFromFile();
1:     }
1: 
1:     @Override
1:     public String getName() {
1:         return "consumer";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Receives messages from the broker";
1:     }
1: 
1: }
============================================================================