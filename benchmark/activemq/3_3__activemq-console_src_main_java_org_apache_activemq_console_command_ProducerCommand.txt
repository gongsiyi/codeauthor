1:9f0ab46: /**
1:9f0ab46:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f0ab46:  * contributor license agreements.  See the NOTICE file distributed with
1:9f0ab46:  * this work for additional information regarding copyright ownership.
1:9f0ab46:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f0ab46:  * (the "License"); you may not use this file except in compliance with
1:9f0ab46:  * the License.  You may obtain a copy of the License at
1:9f0ab46:  *
1:9f0ab46:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f0ab46:  *
1:9f0ab46:  * Unless required by applicable law or agreed to in writing, software
1:9f0ab46:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f0ab46:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f0ab46:  * See the License for the specific language governing permissions and
1:9f0ab46:  * limitations under the License.
1:9f0ab46:  */
1:9f0ab46: package org.apache.activemq.console.command;
5:9f0ab46: 
1:9f0ab46: import org.apache.activemq.ActiveMQConnectionFactory;
1:9f0ab46: import org.apache.activemq.command.ActiveMQDestination;
1:9f0ab46: import org.apache.activemq.util.ProducerThread;
1:9f0ab46: import org.slf4j.Logger;
1:9f0ab46: import org.slf4j.LoggerFactory;
1:9f0ab46: 
1:9f0ab46: import javax.jms.Connection;
1:9f0ab46: import javax.jms.Session;
1:9f0ab46: import java.util.List;
1:9f0ab46: import java.util.concurrent.CountDownLatch;
1:9f0ab46: 
1:9f0ab46: public class ProducerCommand extends AbstractCommand {
1:9f0ab46:     private static final Logger LOG = LoggerFactory.getLogger(ProducerCommand.class);
1:9f0ab46: 
1:9f0ab46:     String brokerUrl = ActiveMQConnectionFactory.DEFAULT_BROKER_URL;
1:9f0ab46:     String user = ActiveMQConnectionFactory.DEFAULT_USER;
1:9f0ab46:     String password = ActiveMQConnectionFactory.DEFAULT_PASSWORD;
1:9f0ab46:     String destination = "queue://TEST";
1:9f0ab46:     int messageCount = 1000;
1:9f0ab46:     int sleep = 0;
1:9f0ab46:     boolean persistent = true;
1:df3ff9c:     String message = null;
1:ebb3df7:     String payloadUrl = null;
1:9f0ab46:     int messageSize = 0;
1:9f0ab46:     int textMessageSize;
1:9f0ab46:     long msgTTL = 0L;
1:9f0ab46:     String msgGroupID=null;
1:9f0ab46:     int transactionBatchSize;
1:9f0ab46:     private int parallelThreads = 1;
1:9f0ab46: 
1:9f0ab46:     @Override
1:9f0ab46:     protected void runTask(List<String> tokens) throws Exception {
1:09acc50:         LOG.info("Connecting to URL: " + brokerUrl + " as user: " + user);
1:9f0ab46:         LOG.info("Producing messages to " + destination);
1:9f0ab46:         LOG.info("Using " + (persistent ? "persistent" : "non-persistent") + " messages");
1:9f0ab46:         LOG.info("Sleeping between sends " + sleep + " ms");
1:9f0ab46:         LOG.info("Running " + parallelThreads + " parallel threads");
1:9f0ab46: 
1:9f0ab46:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);
1:7d14ddb:         Connection conn = null;
1:7d14ddb:         try {
1:7d14ddb:             conn = factory.createConnection(user, password);
1:7d14ddb:             conn.start();
1:7d14ddb: 
1:7d14ddb:             CountDownLatch active = new CountDownLatch(parallelThreads);
1:7d14ddb: 
1:7d14ddb:             for (int i = 1; i <= parallelThreads; i++) {
1:c5579ff:                 Session sess;
1:c5579ff:                 if (transactionBatchSize != 0) {
1:c5579ff:                     sess = conn.createSession(true, Session.SESSION_TRANSACTED);
1:c5579ff:                 } else {
1:c5579ff:                     sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c5579ff:                 }
1:7d14ddb:                 ProducerThread producer = new ProducerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE));
1:7d14ddb:                 producer.setName("producer-" + i);
1:7d14ddb:                 producer.setMessageCount(messageCount);
1:7d14ddb:                 producer.setSleep(sleep);
1:7d14ddb:                 producer.setMsgTTL(msgTTL);
1:7d14ddb:                 producer.setPersistent(persistent);
1:7d14ddb:                 producer.setTransactionBatchSize(transactionBatchSize);
1:df3ff9c:                 producer.setMessage(message);
1:ebb3df7:                 producer.setPayloadUrl(payloadUrl);
1:7d14ddb:                 producer.setMessageSize(messageSize);
1:7d14ddb:                 producer.setMsgGroupID(msgGroupID);
1:7d14ddb:                 producer.setTextMessageSize(textMessageSize);
1:7d14ddb:                 producer.setFinished(active);
1:7d14ddb:                 producer.start();
1:7d14ddb:             }
1:7d14ddb: 
1:7d14ddb:             active.await();
1:7d14ddb:         } finally {
1:7d14ddb:             if (conn != null) {
1:7d14ddb:                 conn.close();
1:7d14ddb:             }
1:7d14ddb:         }
3:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getBrokerUrl() {
1:9f0ab46:         return brokerUrl;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setBrokerUrl(String brokerUrl) {
1:9f0ab46:         this.brokerUrl = brokerUrl;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getDestination() {
1:9f0ab46:         return destination;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setDestination(String destination) {
1:9f0ab46:         this.destination = destination;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getMessageCount() {
1:9f0ab46:         return messageCount;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setMessageCount(int messageCount) {
1:9f0ab46:         this.messageCount = messageCount;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getSleep() {
1:9f0ab46:         return sleep;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setSleep(int sleep) {
1:9f0ab46:         this.sleep = sleep;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public boolean isPersistent() {
1:9f0ab46:         return persistent;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setPersistent(boolean persistent) {
1:9f0ab46:         this.persistent = persistent;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getMessageSize() {
1:9f0ab46:         return messageSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setMessageSize(int messageSize) {
1:9f0ab46:         this.messageSize = messageSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getTextMessageSize() {
1:9f0ab46:         return textMessageSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setTextMessageSize(int textMessageSize) {
1:9f0ab46:         this.textMessageSize = textMessageSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public long getMsgTTL() {
1:9f0ab46:         return msgTTL;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setMsgTTL(long msgTTL) {
1:9f0ab46:         this.msgTTL = msgTTL;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getMsgGroupID() {
1:9f0ab46:         return msgGroupID;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setMsgGroupID(String msgGroupID) {
1:9f0ab46:         this.msgGroupID = msgGroupID;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getTransactionBatchSize() {
1:9f0ab46:         return transactionBatchSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setTransactionBatchSize(int transactionBatchSize) {
1:9f0ab46:         this.transactionBatchSize = transactionBatchSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getUser() {
1:9f0ab46:         return user;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setUser(String user) {
1:9f0ab46:         this.user = user;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getPassword() {
1:9f0ab46:         return password;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setPassword(String password) {
1:9f0ab46:         this.password = password;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getParallelThreads() {
1:9f0ab46:         return parallelThreads;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setParallelThreads(int parallelThreads) {
1:9f0ab46:         this.parallelThreads = parallelThreads;
1:df3ff9c:     }
1:df3ff9c: 
1:ebb3df7:     public String getPayloadUrl() {
1:ebb3df7:         return payloadUrl;
1:df3ff9c:     }
1:df3ff9c: 
1:ebb3df7:     public void setPayloadUrl(String payloadUrl) {
1:ebb3df7:         this.payloadUrl = payloadUrl;
1:9f0ab46:     }
1:9f0ab46: 
1:df3ff9c:     public String getMessage() {
1:df3ff9c:         return message;
1:df3ff9c:     }
1:df3ff9c: 
1:df3ff9c:     public void setMessage(String message) {
1:df3ff9c:         this.message = message;
1:df3ff9c:     }
1:df3ff9c: 
1:9f0ab46:     @Override
1:9f0ab46:     protected void printHelp() {
1:9f0ab46:         printHelpFromFile();
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     @Override
1:9f0ab46:     public String getName() {
1:9f0ab46:         return "producer";
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     @Override
1:9f0ab46:     public String getOneLineDescription() {
1:9f0ab46:         return "Sends messages to the broker";
1:9f0ab46:     }
1:9f0ab46: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:09acc50
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Connecting to URL: " + brokerUrl + " as user: " + user);
author:Clebert Suconic
-------------------------------------------------------------------------------
commit:c5579ff
/////////////////////////////////////////////////////////////////////////
1:                 Session sess;
1:                 if (transactionBatchSize != 0) {
1:                     sess = conn.createSession(true, Session.SESSION_TRANSACTED);
1:                 } else {
1:                     sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ebb3df7
/////////////////////////////////////////////////////////////////////////
1:     String payloadUrl = null;
/////////////////////////////////////////////////////////////////////////
1:                 producer.setPayloadUrl(payloadUrl);
/////////////////////////////////////////////////////////////////////////
1:     public String getPayloadUrl() {
1:         return payloadUrl;
1:     public void setPayloadUrl(String payloadUrl) {
1:         this.payloadUrl = payloadUrl;
commit:df3ff9c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     String message = null;
0:     String url = null;
/////////////////////////////////////////////////////////////////////////
1:                 producer.setMessage(message);
0:                 producer.setUrl(url);
/////////////////////////////////////////////////////////////////////////
0:     public String getUrl() {
0:         return url;
1:     }
1: 
0:     public void setUrl(String url) {
0:         this.url = url;
1:     }
1: 
1:     public String getMessage() {
1:         return message;
1:     }
1: 
1:     public void setMessage(String message) {
1:         this.message = message;
1:     }
1: 
commit:7d14ddb
/////////////////////////////////////////////////////////////////////////
1:         Connection conn = null;
1:         try {
1:             conn = factory.createConnection(user, password);
1:             conn.start();
0:             Session sess;
0:             if (transactionBatchSize != 0) {
0:                 sess = conn.createSession(true, Session.SESSION_TRANSACTED);
0:             } else {
0:                 sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             }
1: 
1:             CountDownLatch active = new CountDownLatch(parallelThreads);
1: 
1:             for (int i = 1; i <= parallelThreads; i++) {
1:                 ProducerThread producer = new ProducerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE));
1:                 producer.setName("producer-" + i);
1:                 producer.setMessageCount(messageCount);
1:                 producer.setSleep(sleep);
1:                 producer.setMsgTTL(msgTTL);
1:                 producer.setPersistent(persistent);
1:                 producer.setTransactionBatchSize(transactionBatchSize);
1:                 producer.setMessageSize(messageSize);
1:                 producer.setMsgGroupID(msgGroupID);
1:                 producer.setTextMessageSize(textMessageSize);
1:                 producer.setFinished(active);
1:                 producer.start();
1:             }
1: 
1:             active.await();
1:         } finally {
1:             if (conn != null) {
1:                 conn.close();
1:             }
commit:9f0ab46
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.ProducerThread;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
0: import java.io.*;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: 
1: public class ProducerCommand extends AbstractCommand {
1:     private static final Logger LOG = LoggerFactory.getLogger(ProducerCommand.class);
1: 
1:     String brokerUrl = ActiveMQConnectionFactory.DEFAULT_BROKER_URL;
1:     String user = ActiveMQConnectionFactory.DEFAULT_USER;
1:     String password = ActiveMQConnectionFactory.DEFAULT_PASSWORD;
1:     String destination = "queue://TEST";
1:     int messageCount = 1000;
1:     int sleep = 0;
1:     boolean persistent = true;
1:     int messageSize = 0;
1:     int textMessageSize;
1:     long msgTTL = 0L;
1:     String msgGroupID=null;
1:     int transactionBatchSize;
1:     private int parallelThreads = 1;
1: 
1:     @Override
1:     protected void runTask(List<String> tokens) throws Exception {
0:         LOG.info("Connecting to URL: " + brokerUrl + " (" + user + ":" + password + ")");
1:         LOG.info("Producing messages to " + destination);
1:         LOG.info("Using " + (persistent ? "persistent" : "non-persistent") + " messages");
1:         LOG.info("Sleeping between sends " + sleep + " ms");
1:         LOG.info("Running " + parallelThreads + " parallel threads");
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);
0:         Connection conn = factory.createConnection(user, password);
0:         conn.start();
1: 
0:         Session sess;
0:         if (transactionBatchSize != 0) {
0:             sess = conn.createSession(true, Session.SESSION_TRANSACTED);
0:         } else {
0:             sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         }
1: 
0:         CountDownLatch active = new CountDownLatch(parallelThreads);
1: 
0:         for (int i = 1; i <= parallelThreads; i++) {
0:             ProducerThread producer = new ProducerThread(sess, ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE));
0:             producer.setName("producer-" + i);
0:             producer.setMessageCount(messageCount);
0:             producer.setSleep(sleep);
0:             producer.setMsgTTL(msgTTL);
0:             producer.setPersistent(persistent);
0:             producer.setTransactionBatchSize(transactionBatchSize);
0:             producer.setMessageSize(messageSize);
0:             producer.setMsgGroupID(msgGroupID);
0:             producer.setTextMessageSize(textMessageSize);
0:             producer.setFinished(active);
0:             producer.start();
1:         }
1: 
0:         active.await();
1:     }
1: 
1:     public String getBrokerUrl() {
1:         return brokerUrl;
1:     }
1: 
1:     public void setBrokerUrl(String brokerUrl) {
1:         this.brokerUrl = brokerUrl;
1:     }
1: 
1:     public String getDestination() {
1:         return destination;
1:     }
1: 
1:     public void setDestination(String destination) {
1:         this.destination = destination;
1:     }
1: 
1:     public int getMessageCount() {
1:         return messageCount;
1:     }
1: 
1:     public void setMessageCount(int messageCount) {
1:         this.messageCount = messageCount;
1:     }
1: 
1:     public int getSleep() {
1:         return sleep;
1:     }
1: 
1:     public void setSleep(int sleep) {
1:         this.sleep = sleep;
1:     }
1: 
1:     public boolean isPersistent() {
1:         return persistent;
1:     }
1: 
1:     public void setPersistent(boolean persistent) {
1:         this.persistent = persistent;
1:     }
1: 
1:     public int getMessageSize() {
1:         return messageSize;
1:     }
1: 
1:     public void setMessageSize(int messageSize) {
1:         this.messageSize = messageSize;
1:     }
1: 
1:     public int getTextMessageSize() {
1:         return textMessageSize;
1:     }
1: 
1:     public void setTextMessageSize(int textMessageSize) {
1:         this.textMessageSize = textMessageSize;
1:     }
1: 
1:     public long getMsgTTL() {
1:         return msgTTL;
1:     }
1: 
1:     public void setMsgTTL(long msgTTL) {
1:         this.msgTTL = msgTTL;
1:     }
1: 
1:     public String getMsgGroupID() {
1:         return msgGroupID;
1:     }
1: 
1:     public void setMsgGroupID(String msgGroupID) {
1:         this.msgGroupID = msgGroupID;
1:     }
1: 
1:     public int getTransactionBatchSize() {
1:         return transactionBatchSize;
1:     }
1: 
1:     public void setTransactionBatchSize(int transactionBatchSize) {
1:         this.transactionBatchSize = transactionBatchSize;
1:     }
1: 
1:     public String getUser() {
1:         return user;
1:     }
1: 
1:     public void setUser(String user) {
1:         this.user = user;
1:     }
1: 
1:     public String getPassword() {
1:         return password;
1:     }
1: 
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1:     public int getParallelThreads() {
1:         return parallelThreads;
1:     }
1: 
1:     public void setParallelThreads(int parallelThreads) {
1:         this.parallelThreads = parallelThreads;
1:     }
1: 
1:     @Override
1:     protected void printHelp() {
1:         printHelpFromFile();
1:     }
1: 
1:     @Override
1:     public String getName() {
1:         return "producer";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Sends messages to the broker";
1:     }
1: }
============================================================================