1:915333e: /**
1:915333e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:915333e:  * contributor license agreements.  See the NOTICE file distributed with
1:915333e:  * this work for additional information regarding copyright ownership.
1:915333e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:915333e:  * (the "License"); you may not use this file except in compliance with
1:915333e:  * the License.  You may obtain a copy of the License at
1:915333e:  *
1:915333e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:915333e:  *
1:915333e:  * Unless required by applicable law or agreed to in writing, software
1:915333e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:915333e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:915333e:  * See the License for the specific language governing permissions and
1:915333e:  * limitations under the License.
1:915333e:  */
1:915333e: package org.apache.activemq.usecases;
1:4743a20: 
1:48b4048: import static org.junit.Assert.assertEquals;
1:243db1c: import static org.junit.Assert.assertTrue;
1:243db1c: 
1:48b4048: 
1:48b4048: import java.io.IOException;
1:48b4048: import java.net.URI;
1:48b4048: import java.util.Enumeration;
1:48b4048: 
1:48b4048: import javax.jms.Connection;
1:48b4048: import javax.jms.JMSException;
1:48b4048: import javax.jms.Message;
1:48b4048: import javax.jms.MessageConsumer;
1:48b4048: import javax.jms.MessageProducer;
1:48b4048: import javax.jms.QueueBrowser;
1:48b4048: import javax.jms.Session;
1:48b4048: 
1:915333e: import org.apache.activemq.ActiveMQConnectionFactory;
1:915333e: import org.apache.activemq.broker.BrokerService;
1:915333e: import org.apache.activemq.broker.TransportConnector;
1:48b4048: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:48b4048: import org.apache.activemq.broker.region.policy.PolicyMap;
1:915333e: import org.apache.activemq.command.ActiveMQQueue;
1:915333e: import org.junit.After;
1:915333e: import org.junit.Before;
1:915333e: import org.junit.Test;
1:915333e: import org.slf4j.Logger;
1:915333e: import org.slf4j.LoggerFactory;
1:4743a20: 
1:915333e: public class QueueBrowsingTest {
1:4743a20: 
1:915333e:     private static final Logger LOG = LoggerFactory.getLogger(QueueBrowsingTest.class);
1:665c3ab: 
1:915333e:     private BrokerService broker;
1:915333e:     private URI connectUri;
1:915333e:     private ActiveMQConnectionFactory factory;
1:48b4048:     private final int maxPageSize = 100;
1:665c3ab: 
1:915333e:     @Before
1:915333e:     public void startBroker() throws Exception {
1:665c3ab:         broker = createBroker();
1:915333e:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
1:915333e:         broker.deleteAllMessages();
1:915333e:         broker.start();
1:915333e:         broker.waitUntilStarted();
1:48b4048: 
1:48b4048:         PolicyEntry policy = new PolicyEntry();
1:48b4048:         policy.setMaxPageSize(maxPageSize);
1:48b4048:         broker.setDestinationPolicy(new PolicyMap());
1:48b4048:         broker.getDestinationPolicy().setDefaultEntry(policy);
1:48b4048: 
1:915333e:         connectUri = connector.getConnectUri();
1:915333e:         factory = new ActiveMQConnectionFactory(connectUri);
1:915333e:     }
15:915333e: 
1:665c3ab:     public BrokerService createBroker() throws IOException {
1:665c3ab:         return new BrokerService();
1:665c3ab:     }
1:665c3ab: 
1:915333e:     @After
1:915333e:     public void stopBroker() throws Exception {
1:915333e:         broker.stop();
1:915333e:         broker.waitUntilStopped();
1:915333e:     }
1:915333e: 
1:915333e:     @Test
1:915333e:     public void testBrowsing() throws JMSException {
1:915333e: 
1:915333e:         int messageToSend = 370;
1:915333e: 
1:915333e:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:915333e:         Connection connection = factory.createConnection();
1:915333e:         connection.start();
1:915333e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:915333e:         MessageProducer producer = session.createProducer(queue);
1:915333e: 
1:915333e:         String data = "";
1:915333e:         for( int i=0; i < 1024*2; i++ ) {
1:915333e:             data += "x";
1:915333e:         }
1:915333e: 
1:915333e:         for( int i=0; i < messageToSend; i++ ) {
1:915333e:             producer.send(session.createTextMessage(data));
1:915333e:         }
1:915333e: 
1:915333e:         QueueBrowser browser = session.createBrowser(queue);
1:4743a20:         Enumeration<?> enumeration = browser.getEnumeration();
1:915333e:         int received = 0;
1:915333e:         while (enumeration.hasMoreElements()) {
1:915333e:             Message m = (Message) enumeration.nextElement();
1:915333e:             received++;
1:4743a20:             LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
1:915333e:         }
1:915333e: 
1:915333e:         browser.close();
1:915333e: 
1:915333e:         assertEquals(messageToSend, received);
1:915333e:     }
1:915333e: 
1:915333e:     @Test
1:915333e:     public void testBrowseConcurrent() throws Exception {
1:915333e:         final int messageToSend = 370;
1:915333e: 
1:915333e:         final ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:915333e:         Connection connection = factory.createConnection();
1:915333e:         connection.start();
1:915333e:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:915333e: 
1:915333e:         MessageProducer producer = session.createProducer(queue);
1:915333e: 
1:915333e:         String data = "";
1:915333e:         for( int i=0; i < 1024*2; i++ ) {
1:915333e:             data += "x";
1:915333e:         }
1:915333e: 
1:915333e:         for( int i=0; i < messageToSend; i++ ) {
1:915333e:             producer.send(session.createTextMessage(data));
1:915333e:         }
1:915333e: 
1:915333e:         Thread browserThread = new Thread() {
1:915333e:             @Override
1:915333e:             public void run() {
1:915333e:                 try {
1:915333e:                     QueueBrowser browser = session.createBrowser(queue);
1:4743a20:                     Enumeration<?> enumeration = browser.getEnumeration();
1:915333e:                     int received = 0;
1:915333e:                     while (enumeration.hasMoreElements()) {
1:915333e:                         Message m = (Message) enumeration.nextElement();
1:915333e:                         received++;
1:4743a20:                         LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
1:915333e:                     }
1:915333e:                     assertEquals("Browsed all messages", messageToSend, received);
1:915333e:                 } catch (Exception e) {
1:915333e:                     e.printStackTrace();
1:915333e:                 }
1:915333e:             }
1:915333e:         };
1:915333e: 
1:915333e:         browserThread.start();
1:915333e: 
1:915333e:         Thread consumerThread = new Thread() {
1:915333e:             @Override
1:915333e:             public void run() {
1:915333e:                 try {
1:915333e:                     MessageConsumer consumer = session.createConsumer(queue);
1:915333e:                     int received = 0;
1:915333e:                     while (true) {
1:4743a20:                         Message m = consumer.receive(1000);
1:915333e:                         if (m == null)
1:915333e:                             break;
1:915333e:                         received++;
1:915333e:                     }
1:915333e:                     assertEquals("Consumed all messages", messageToSend, received);
1:915333e:                 } catch (Exception e) {
1:915333e:                     e.printStackTrace();
1:915333e:                 }
1:915333e:             }
1:915333e:         };
1:915333e: 
1:915333e:         consumerThread.start();
1:915333e: 
1:915333e:         browserThread.join();
1:915333e:         consumerThread.join();
1:915333e:     }
1:915333e: 
1:915333e:     @Test
1:915333e:     public void testMemoryLimit() throws Exception {
1:13ec994:         broker.getSystemUsage().getMemoryUsage().setLimit(16 * 1024);
1:915333e: 
1:915333e:         int messageToSend = 370;
1:915333e: 
1:915333e:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:915333e:         Connection connection = factory.createConnection();
1:915333e:         connection.start();
1:915333e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:915333e:         MessageProducer producer = session.createProducer(queue);
1:915333e: 
1:915333e:         String data = "";
1:915333e:         for( int i=0; i < 1024*2; i++ ) {
1:915333e:             data += "x";
1:915333e:         }
1:915333e: 
1:915333e:         for( int i=0; i < messageToSend; i++ ) {
1:915333e:             producer.send(session.createTextMessage(data));
1:915333e:         }
1:915333e: 
1:915333e:         QueueBrowser browser = session.createBrowser(queue);
1:4743a20:         Enumeration<?> enumeration = browser.getEnumeration();
1:915333e:         int received = 0;
1:915333e:         while (enumeration.hasMoreElements()) {
1:915333e:             Message m = (Message) enumeration.nextElement();
1:915333e:             received++;
1:915333e:             LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
1:915333e:         }
1:915333e: 
1:915333e:         browser.close();
1:13ec994:         assertTrue("got at least maxPageSize", received >= maxPageSize);
1:915333e:     }
1:915333e: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:13ec994
/////////////////////////////////////////////////////////////////////////
1:         broker.getSystemUsage().getMemoryUsage().setLimit(16 * 1024);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("got at least maxPageSize", received >= maxPageSize);
commit:d8cf54b
/////////////////////////////////////////////////////////////////////////
0:         broker.getSystemUsage().getMemoryUsage().setLimit((maxPageSize + 10) * 4 * 1024);
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("got at least maxPageSize, received: " + received, received >= maxPageSize);
commit:243db1c
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("got at least maxPageSize", received >= maxPageSize);
commit:5f865f0
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(maxPageSize + 1, received);
commit:ad1f751
/////////////////////////////////////////////////////////////////////////
0:         broker.getSystemUsage().getMemoryUsage().setLimit(16 * 1024);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:48b4048
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.Enumeration;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final int maxPageSize = 100;
/////////////////////////////////////////////////////////////////////////
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setMaxPageSize(maxPageSize);
1:         broker.setDestinationPolicy(new PolicyMap());
1:         broker.getDestinationPolicy().setDefaultEntry(policy);
1: 
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(maxPageSize + 2, received);
commit:4743a20
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
1: 
0: import java.net.URI;
0: import java.util.Enumeration;
1: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.QueueBrowser;
0: import javax.jms.Session;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:             LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
/////////////////////////////////////////////////////////////////////////
1:                     Enumeration<?> enumeration = browser.getEnumeration();
1:                         LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
/////////////////////////////////////////////////////////////////////////
1:                         Message m = consumer.receive(1000);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Enumeration<?> enumeration = browser.getEnumeration();
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:665c3ab
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
0: import java.io.IOException;
0: import java.net.URI;
0: import java.util.Enumeration;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1:         broker = createBroker();
/////////////////////////////////////////////////////////////////////////
1:     public BrokerService createBroker() throws IOException {
1:         return new BrokerService();
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:915333e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.*;
1: 
0: import java.net.URI;
0: import java.util.Enumeration;
1: 
0: import static org.junit.Assert.*;
1: 
1: public class QueueBrowsingTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueBrowsingTest.class);
1: 
1:     private BrokerService broker;
1:     private URI connectUri;
1:     private ActiveMQConnectionFactory factory;
1: 
1: 
1:     @Before
1:     public void startBroker() throws Exception {
0:         broker = new BrokerService();
1:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
1:         broker.deleteAllMessages();
1:         broker.start();
1:         broker.waitUntilStarted();
1:         connectUri = connector.getConnectUri();
1:         factory = new ActiveMQConnectionFactory(connectUri);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testBrowsing() throws JMSException {
1: 
1:         int messageToSend = 370;
1: 
1:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         String data = "";
1:         for( int i=0; i < 1024*2; i++ ) {
1:             data += "x";
1:         }
1: 
1:         for( int i=0; i < messageToSend; i++ ) {
1:             producer.send(session.createTextMessage(data));
1:         }
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
0:         Enumeration enumeration = browser.getEnumeration();
1:         int received = 0;
1:         while (enumeration.hasMoreElements()) {
1:             Message m = (Message) enumeration.nextElement();
1:             received++;
1:         }
1: 
1:         browser.close();
1: 
1:         assertEquals(messageToSend, received);
1:     }
1: 
1:     @Test
1:     public void testBrowseConcurrent() throws Exception {
1:         final int messageToSend = 370;
1: 
1:         final ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         String data = "";
1:         for( int i=0; i < 1024*2; i++ ) {
1:             data += "x";
1:         }
1: 
1:         for( int i=0; i < messageToSend; i++ ) {
1:             producer.send(session.createTextMessage(data));
1:         }
1: 
1:         Thread browserThread = new Thread() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     QueueBrowser browser = session.createBrowser(queue);
0:                     Enumeration enumeration = browser.getEnumeration();
1:                     int received = 0;
1:                     while (enumeration.hasMoreElements()) {
1:                         Message m = (Message) enumeration.nextElement();
1:                         received++;
1:                     }
1:                     assertEquals("Browsed all messages", messageToSend, received);
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1: 
1:         browserThread.start();
1: 
1:         Thread consumerThread = new Thread() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     MessageConsumer consumer = session.createConsumer(queue);
1:                     int received = 0;
1:                     while (true) {
0:                         Message m = (Message) consumer.receive(1000);
1:                         if (m == null)
1:                             break;
1:                         received++;
1:                     }
1:                     assertEquals("Consumed all messages", messageToSend, received);
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
1: 
1:         consumerThread.start();
1: 
1:         browserThread.join();
1:         consumerThread.join();
1: 
1:     }
1: 
1:     @Test
1:     public void testMemoryLimit() throws Exception {
0:         broker.getSystemUsage().getMemoryUsage().setLimit(10 * 1024);
1: 
1:         int messageToSend = 370;
1: 
1:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         String data = "";
1:         for( int i=0; i < 1024*2; i++ ) {
1:             data += "x";
1:         }
1: 
1:         for( int i=0; i < messageToSend; i++ ) {
1:             producer.send(session.createTextMessage(data));
1:         }
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
0:         Enumeration enumeration = browser.getEnumeration();
1:         int received = 0;
1:         while (enumeration.hasMoreElements()) {
1:             Message m = (Message) enumeration.nextElement();
1:             received++;
1:             LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
1:         }
1: 
1:         browser.close();
1: 
0:         assertEquals(3, received);
1:     }
1: 
1: 
1: 
1: }
============================================================================