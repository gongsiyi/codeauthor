1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:68bcf0f:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:68bcf0f:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.advisory;
1:bf1f755: 
1:b2afb8c: import java.util.ArrayList;
1:56baba9: import java.util.Arrays;
1:b2afb8c: import java.util.Collection;
1:cc81680: import java.util.Collections;
1:d29ca2a: import java.util.Iterator;
1:b2afb8c: import java.util.LinkedHashMap;
1:a785cb7: import java.util.Map;
1:5f4db41: import java.util.Set;
1:74a7a8b: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:b2afb8c: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:2142045: 
1:d29ca2a: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.BrokerFilter;
1:4c38b03: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:84eb9f8: import org.apache.activemq.broker.ProducerBrokerExchange;
1:fc3e026: import org.apache.activemq.broker.TransportConnector;
1:edacc2a: import org.apache.activemq.broker.region.BaseDestination;
1:45c399d: import org.apache.activemq.broker.region.Destination;
1:45c399d: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:45c399d: import org.apache.activemq.broker.region.MessageReference;
1:45c399d: import org.apache.activemq.broker.region.RegionBroker;
1:45c399d: import org.apache.activemq.broker.region.Subscription;
1:45c399d: import org.apache.activemq.broker.region.TopicRegion;
1:45c399d: import org.apache.activemq.broker.region.TopicSubscription;
1:cc81680: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:56baba9: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:4c38b03: import org.apache.activemq.command.ActiveMQDestination;
1:4c38b03: import org.apache.activemq.command.ActiveMQMessage;
1:4c38b03: import org.apache.activemq.command.ActiveMQTopic;
1:4c38b03: import org.apache.activemq.command.BrokerInfo;
1:4c38b03: import org.apache.activemq.command.Command;
1:4c38b03: import org.apache.activemq.command.ConnectionId;
1:4c38b03: import org.apache.activemq.command.ConnectionInfo;
1:4c38b03: import org.apache.activemq.command.ConsumerId;
1:4c38b03: import org.apache.activemq.command.ConsumerInfo;
1:4c38b03: import org.apache.activemq.command.DestinationInfo;
1:4c38b03: import org.apache.activemq.command.Message;
1:4c38b03: import org.apache.activemq.command.MessageId;
1:4c38b03: import org.apache.activemq.command.ProducerId;
1:4c38b03: import org.apache.activemq.command.ProducerInfo;
1:4c38b03: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:cc81680: import org.apache.activemq.command.SessionId;
1:56baba9: import org.apache.activemq.filter.DestinationPath;
1:479acad: import org.apache.activemq.security.SecurityContext;
1:9da7e31: import org.apache.activemq.state.ProducerState;
1:cdc2fd3: import org.apache.activemq.usage.Usage;
1:d29ca2a: import org.apache.activemq.util.IdGenerator;
1:d29ca2a: import org.apache.activemq.util.LongSequenceGenerator;
1:e06685f: import org.apache.activemq.util.SubscriptionKey;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:11781d3: 
1:d29ca2a: /**
1:230a86c:  * This broker filter handles tracking the state of the broker for purposes of
1:230a86c:  * publishing advisory messages to advisory consumers.
1:d29ca2a:  */
1:d29ca2a: public class AdvisoryBroker extends BrokerFilter {
1:7880521: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AdvisoryBroker.class);
1:fc00993:     private static final IdGenerator ID_GENERATOR = new IdGenerator();
1:74dafd7: 
1:9ef4259:     protected final ConcurrentMap<ConnectionId, ConnectionInfo> connections = new ConcurrentHashMap<ConnectionId, ConnectionInfo>();
1:479acad: 
1:b2afb8c:     private final ReentrantReadWriteLock consumersLock = new ReentrantReadWriteLock();
1:b2afb8c:     protected final Map<ConsumerId, ConsumerInfo> consumers = new LinkedHashMap<ConsumerId, ConsumerInfo>();
1:b5df4ba: 
1:cc81680:     /**
1:cc81680:      * This is a set to track all of the virtual destinations that have been added to the broker so
1:cc81680:      * they can be easily referenced later.
1:cc81680:      */
1:cc81680:     protected final Set<VirtualDestination> virtualDestinations = Collections.newSetFromMap(new ConcurrentHashMap<VirtualDestination, Boolean>());
1:cc81680:     /**
1:cc81680:      * This is a map to track all consumers that exist on the virtual destination so that we can fire
1:cc81680:      * an advisory later when they go away to remove the demand.
1:cc81680:      */
1:cc81680:     protected final ConcurrentMap<ConsumerInfo, VirtualDestination> virtualDestinationConsumers = new ConcurrentHashMap<>();
1:cc81680:     /**
1:cc81680:      * This is a map to track unique demand for the existence of a virtual destination so we make sure
1:cc81680:      * we don't send duplicate advisories.
1:cc81680:      */
1:cc81680:     protected final ConcurrentMap<VirtualConsumerPair, ConsumerInfo> brokerConsumerDests = new ConcurrentHashMap<>();
1:cc81680: 
1:9ef4259:     protected final ConcurrentMap<ProducerId, ProducerInfo> producers = new ConcurrentHashMap<ProducerId, ProducerInfo>();
1:9ef4259:     protected final ConcurrentMap<ActiveMQDestination, DestinationInfo> destinations = new ConcurrentHashMap<ActiveMQDestination, DestinationInfo>();
1:9ef4259:     protected final ConcurrentMap<BrokerInfo, ActiveMQMessage> networkBridges = new ConcurrentHashMap<BrokerInfo, ActiveMQMessage>();
1:230a86c:     protected final ProducerId advisoryProducerId = new ProducerId();
1:68bcf0f: 
1:fc00993:     private final LongSequenceGenerator messageIdGenerator = new LongSequenceGenerator();
1:68bcf0f: 
1:cc81680:     private VirtualDestinationMatcher virtualDestinationMatcher = new DestinationFilterVirtualDestinationMatcher();
1:cc81680: 
1:d29ca2a:     public AdvisoryBroker(Broker next) {
1:d29ca2a:         super(next);
1:fc00993:         advisoryProducerId.setConnectionId(ID_GENERATOR.generateId());
1:6c5732b:     }
1:edacc2a: 
1:6c5732b:     @Override
1:7f5213b:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:cdc2fd3:         super.addConnection(context, info);
1:6c5732b: 
1:d29ca2a:         ActiveMQTopic topic = AdvisorySupport.getConnectionAdvisoryTopic();
1:915d66d:         // do not distribute passwords in advisory messages. usernames okay
1:66dd8cd:         ConnectionInfo copy = info.copy();
1:66dd8cd:         copy.setPassword("");
1:66dd8cd:         fireAdvisory(context, topic, copy);
1:66dd8cd:         connections.put(copy.getConnectionId(), copy);
1:edacc2a:     }
1:6c5732b: 
1:6c5732b:     @Override
1:0def1d4:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:cdc2fd3:         Subscription answer = super.addConsumer(context, info);
1:6c5732b: 
1:b7c32d9:         // Don't advise advisory topics.
1:230a86c:         if (!AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
2:d29ca2a:             ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination());
1:b2afb8c:             consumersLock.writeLock().lock();
1:b2afb8c:             try {
1:b2afb8c:                 consumers.put(info.getConsumerId(), info);
1:cc81680: 
1:cc81680:                 //check if this is a consumer on a destination that matches a virtual destination
1:cc81680:                 if (getBrokerService().isUseVirtualDestSubs()) {
1:cc81680:                     for (VirtualDestination virtualDestination : virtualDestinations) {
1:cc81680:                         if (virtualDestinationMatcher.matches(virtualDestination, info.getDestination())) {
1:cc81680:                             fireVirtualDestinationAddAdvisory(context, info, info.getDestination(), virtualDestination);
1:cc81680:                         }
1:cc81680:                     }
1:cc81680:                 }
1:b2afb8c:             } finally {
1:b2afb8c:                 consumersLock.writeLock().unlock();
1:6c5732b:             }
1:cc81680:             fireConsumerAdvisory(context, info.getDestination(), topic, info);
1:2142045:         } else {
1:230a86c:             // We need to replay all the previously collected state objects
2:230a86c:             // for this newly added consumer.
1:230a86c:             if (AdvisorySupport.isConnectionAdvisoryTopic(info.getDestination())) {
1:d29ca2a:                 // Replay the connections.
1:11781d3:                 for (Iterator<ConnectionInfo> iter = connections.values().iterator(); iter.hasNext(); ) {
1:933eb2f:                     ConnectionInfo value = iter.next();
1:d29ca2a:                     ActiveMQTopic topic = AdvisorySupport.getConnectionAdvisoryTopic();
3:d29ca2a:                     fireAdvisory(context, topic, value, info.getConsumerId());
1:6c5732b:                 }
1:6c5732b:             }
1:2142045: 
1:68bcf0f:             // We check here whether the Destination is Temporary Destination specific or not since we
1:68bcf0f:             // can avoid sending advisory messages to the consumer if it only wants Temporary Destination
1:68bcf0f:             // notifications.  If its not just temporary destination related destinations then we have
1:68bcf0f:             // to send them all, a composite destination could want both.
1:68bcf0f:             if (AdvisorySupport.isTempDestinationAdvisoryTopic(info.getDestination())) {
1:68bcf0f:                 // Replay the temporary destinations.
1:68bcf0f:                 for (DestinationInfo destination : destinations.values()) {
1:68bcf0f:                     if (destination.getDestination().isTemporary()) {
1:68bcf0f:                         ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination.getDestination());
1:68bcf0f:                         fireAdvisory(context, topic, destination, info.getConsumerId());
1:6c5732b:                     }
1:6c5732b:                 }
1:68bcf0f:             } else if (AdvisorySupport.isDestinationAdvisoryTopic(info.getDestination())) {
1:68bcf0f:                 // Replay all the destinations.
1:68bcf0f:                 for (DestinationInfo destination : destinations.values()) {
1:68bcf0f:                     ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination.getDestination());
1:68bcf0f:                     fireAdvisory(context, topic, destination, info.getConsumerId());
1:b2afb8c:                 }
1:2142045:             }
1:2142045: 
1:d29ca2a:             // Replay the producers.
1:230a86c:             if (AdvisorySupport.isProducerAdvisoryTopic(info.getDestination())) {
1:11781d3:                 for (Iterator<ProducerInfo> iter = producers.values().iterator(); iter.hasNext(); ) {
1:933eb2f:                     ProducerInfo value = iter.next();
1:d29ca2a:                     ActiveMQTopic topic = AdvisorySupport.getProducerAdvisoryTopic(value.getDestination());
1:11781d3:                     fireProducerAdvisory(context, value.getDestination(), topic, value, info.getConsumerId());
1:2142045:                 }
1:2142045:             }
1:2142045: 
1:d29ca2a:             // Replay the consumers.
1:230a86c:             if (AdvisorySupport.isConsumerAdvisoryTopic(info.getDestination())) {
1:b2afb8c:                 consumersLock.readLock().lock();
1:b2afb8c:                 try {
1:b2afb8c:                     for (Iterator<ConsumerInfo> iter = consumers.values().iterator(); iter.hasNext(); ) {
1:b2afb8c:                         ConsumerInfo value = iter.next();
1:b2afb8c:                         ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(value.getDestination());
1:b2afb8c:                         fireConsumerAdvisory(context, value.getDestination(), topic, value, info.getConsumerId());
1:b2afb8c:                     }
1:b2afb8c:                 } finally {
1:b2afb8c:                     consumersLock.readLock().unlock();
1:2142045:                 }
1:2142045:             }
1:2142045: 
1:cc81680:             // Replay the virtual destination consumers.
1:cc81680:             if (AdvisorySupport.isVirtualDestinationConsumerAdvisoryTopic(info.getDestination())) {
1:cc81680:                 for (Iterator<ConsumerInfo> iter = virtualDestinationConsumers.keySet().iterator(); iter.hasNext(); ) {
1:cc81680:                     ConsumerInfo key = iter.next();
1:cc81680:                     ActiveMQTopic topic = AdvisorySupport.getVirtualDestinationConsumerAdvisoryTopic(key.getDestination());
1:cc81680:                     fireConsumerAdvisory(context, key.getDestination(), topic, key);
1:cc81680:               }
1:cc81680:             }
1:cc81680: 
1:7880521:             // Replay network bridges
1:7880521:             if (AdvisorySupport.isNetworkBridgeAdvisoryTopic(info.getDestination())) {
1:11781d3:                 for (Iterator<BrokerInfo> iter = networkBridges.keySet().iterator(); iter.hasNext(); ) {
1:7880521:                     BrokerInfo key = iter.next();
1:7880521:                     ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
1:7880521:                     fireAdvisory(context, topic, key, null, networkBridges.get(key));
1:2142045:                 }
1:68bcf0f:             }
1:68bcf0f:         }
1:0def1d4:         return answer;
1:7880521:     }
1:2142045: 
1:6c5732b:     @Override
1:7f5213b:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:cdc2fd3:         super.addProducer(context, info);
1:2142045: 
1:230a86c:         // Don't advise advisory topics.
1:230a86c:         if (info.getDestination() != null && !AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
2:d29ca2a:             ActiveMQTopic topic = AdvisorySupport.getProducerAdvisoryTopic(info.getDestination());
1:8d11f07:             fireProducerAdvisory(context, info.getDestination(), topic, info);
1:d29ca2a:             producers.put(info.getProducerId(), info);
1:7880521:         }
1:b7c32d9:     }
1:2142045: 
1:2142045:     @Override
1:11781d3:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean create) throws Exception {
1:11781d3:         Destination answer = super.addDestination(context, destination, create);
1:230a86c:         if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:cc81680:             //for queues, create demand if isUseVirtualDestSubsOnCreation is true
1:cc81680:             if (getBrokerService().isUseVirtualDestSubsOnCreation() && destination.isQueue()) {
1:cc81680:                 //check if this new destination matches a virtual destination that exists
1:cc81680:                 for (VirtualDestination virtualDestination : virtualDestinations) {
1:cc81680:                     if (virtualDestinationMatcher.matches(virtualDestination, destination)) {
1:cc81680:                         fireVirtualDestinationAddAdvisory(context, null, destination, virtualDestination);
1:cc81680:                     }
1:cc81680:                 }
1:cc81680:             }
1:cc81680: 
1:0945e32:             DestinationInfo info = new DestinationInfo(context.getConnectionId(), DestinationInfo.ADD_OPERATION_TYPE, destination);
1:b5df4ba:             DestinationInfo previous = destinations.putIfAbsent(destination, info);
1:11781d3:             if (previous == null) {
1:b5df4ba:                 ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
1:b5df4ba:                 fireAdvisory(context, topic, info);
1:b5df4ba:             }
1:0945e32:         }
1:d29ca2a:         return answer;
1:86cbdfd:     }
1:2142045: 
1:2142045:     @Override
1:230a86c:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:230a86c:         ActiveMQDestination destination = info.getDestination();
1:230a86c:         next.addDestinationInfo(context, info);
1:68bcf0f: 
1:230a86c:         if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:b5df4ba:             DestinationInfo previous = destinations.putIfAbsent(destination, info);
1:11781d3:             if (previous == null) {
1:b5df4ba:                 ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
1:b5df4ba:                 fireAdvisory(context, topic, info);
1:b5df4ba:             }
1:0945e32:         }
1:cb1d21f:     }
1:68bcf0f: 
1:663d5db:     @Override
1:cb1d21f:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:cdc2fd3:         super.removeDestination(context, destination, timeout);
1:933eb2f:         DestinationInfo info = destinations.remove(destination);
1:230a86c:         if (info != null) {
1:cc81680: 
1:cc81680:             //on destination removal, remove all demand if using virtual dest subs
1:cc81680:             if (getBrokerService().isUseVirtualDestSubs()) {
1:cc81680:                 for (ConsumerInfo consumerInfo : virtualDestinationConsumers.keySet()) {
1:cc81680:                     //find all consumers for this virtual destination
1:cc81680:                     VirtualDestination virtualDestination = virtualDestinationConsumers.get(consumerInfo);
1:cc81680: 
1:cc81680:                     //find a consumer that matches this virtualDest and destination
1:cc81680:                     if (virtualDestinationMatcher.matches(virtualDestination, destination)) {
1:cc81680:                         //in case of multiple matches
1:cc81680:                         VirtualConsumerPair key = new VirtualConsumerPair(virtualDestination, destination);
1:cc81680:                         ConsumerInfo i = brokerConsumerDests.get(key);
1:a2781e3:                         if (consumerInfo.equals(i) && brokerConsumerDests.remove(key) != null) {
1:a2781e3:                             LOG.debug("Virtual consumer pair removed: {} for consumer: {} ", key, i);
1:a2781e3:                             fireVirtualDestinationRemoveAdvisory(context, consumerInfo);
1:a2781e3:                             break;
1:cc81680:                         }
1:cc81680:                     }
1:cc81680:                 }
1:cc81680:             }
1:cc81680: 
1:d4ccc50:             // ensure we don't modify (and loose/overwrite) an in-flight add advisory, so duplicate
1:d4ccc50:             info = info.copy();
1:cb1d21f:             info.setDestination(destination);
1:cb1d21f:             info.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
1:0945e32:             ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
1:230a86c:             fireAdvisory(context, topic, info);
1:6a631a9:             ActiveMQTopic[] advisoryDestinations = AdvisorySupport.getAllDestinationAdvisoryTopics(destination);
1:11781d3:             for (ActiveMQTopic advisoryDestination : advisoryDestinations) {
1:6a631a9:                 try {
1:6a631a9:                     next.removeDestination(context, advisoryDestination, -1);
1:6a631a9:                 } catch (Exception expectedIfDestinationDidNotExistYet) {
1:cc81680:                 }
1:6a631a9:             }
1:230a86c:         }
1:cb1d21f:     }
1:e06685f: 
1:69e3b6c:     @Override
1:230a86c:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo destInfo) throws Exception {
1:68bcf0f:         super.removeDestinationInfo(context, destInfo);
1:933eb2f:         DestinationInfo info = destinations.remove(destInfo.getDestination());
1:230a86c:         if (info != null) {
1:d4ccc50:             // ensure we don't modify (and loose/overwrite) an in-flight add advisory, so duplicate
1:d4ccc50:             info = info.copy();
1:cb1d21f:             info.setDestination(destInfo.getDestination());
1:cb1d21f:             info.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
1:cb1d21f:             ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destInfo.getDestination());
2:230a86c:             fireAdvisory(context, topic, info);
1:6a631a9:             ActiveMQTopic[] advisoryDestinations = AdvisorySupport.getAllDestinationAdvisoryTopics(destInfo.getDestination());
1:11781d3:             for (ActiveMQTopic advisoryDestination : advisoryDestinations) {
1:6a631a9:                 try {
1:6a631a9:                     next.removeDestination(context, advisoryDestination, -1);
1:6a631a9:                 } catch (Exception expectedIfDestinationDidNotExistYet) {
1:6a631a9:                 }
1:cb1d21f:             }
1:cb1d21f:         }
1:cb1d21f:     }
1:e06685f: 
1:204f91f:     @Override
1:7f5213b:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:cdc2fd3:         super.removeConnection(context, info, error);
1:b7c32d9: 
1:d29ca2a:         ActiveMQTopic topic = AdvisorySupport.getConnectionAdvisoryTopic();
2:d29ca2a:         fireAdvisory(context, topic, info.createRemoveCommand());
1:d29ca2a:         connections.remove(info.getConnectionId());
1:3043e7a:     }
1:b7c32d9: 
1:204f91f:     @Override
1:7f5213b:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:cdc2fd3:         super.removeConsumer(context, info);
1:b7c32d9: 
3:d29ca2a:         // Don't advise advisory topics.
1:931ed76:         ActiveMQDestination dest = info.getDestination();
1:b7c32d9:         if (!AdvisorySupport.isAdvisoryTopic(dest)) {
1:b7c32d9:             ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(dest);
1:b2afb8c:             consumersLock.writeLock().lock();
1:b2afb8c:             try {
1:b2afb8c:                 consumers.remove(info.getConsumerId());
1:cc81680: 
1:cc81680:                 //remove the demand for this consumer if it matches a virtual destination
1:cc81680:                 if(getBrokerService().isUseVirtualDestSubs()) {
1:cc81680:                     fireVirtualDestinationRemoveAdvisory(context, info);
1:cc81680:                 }
1:b2afb8c:             } finally {
1:b2afb8c:                 consumersLock.writeLock().unlock();
1:b2afb8c:             }
1:ae5300b:             if (!dest.isTemporary() || destinations.containsKey(dest)) {
1:11781d3:                 fireConsumerAdvisory(context, dest, topic, info.createRemoveCommand());
1:2142045:             }
1:2142045:         }
1:3043e7a:     }
1:2142045: 
1:204f91f:     @Override
1:e06685f:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:e06685f:         SubscriptionKey key = new SubscriptionKey(context.getClientId(), info.getSubscriptionName());
1:4c38b03: 
1:4c38b03:         RegionBroker regionBroker = null;
1:4c38b03:         if (next instanceof RegionBroker) {
1:4c38b03:             regionBroker = (RegionBroker) next;
1:4c38b03:         } else {
1:4c38b03:             BrokerService service = next.getBrokerService();
1:4c38b03:             regionBroker = (RegionBroker) service.getRegionBroker();
1:4c38b03:         }
1:4c38b03: 
1:4c38b03:         if (regionBroker == null) {
1:4c38b03:             LOG.warn("Cannot locate a RegionBroker instance to pass along the removeSubscription call");
1:4c38b03:             throw new IllegalStateException("No RegionBroker found.");
1:4c38b03:         }
1:4c38b03: 
1:4c38b03:         DurableTopicSubscription sub = ((TopicRegion) regionBroker.getTopicRegion()).getDurableSubscription(key);
1:2142045: 
1:45c399d:         super.removeSubscription(context, info);
1:45c399d: 
1:e06685f:         if (sub == null) {
1:e06685f:             LOG.warn("We cannot send an advisory message for a durable sub removal when we don't know about the durable sub");
1:e06685f:             return;
1:e06685f:         }
1:e06685f: 
1:e06685f:         ActiveMQDestination dest = sub.getConsumerInfo().getDestination();
1:e06685f: 
1:e06685f:         // Don't advise advisory topics.
1:e06685f:         if (!AdvisorySupport.isAdvisoryTopic(dest)) {
1:e06685f:             ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(dest);
1:e06685f:             fireConsumerAdvisory(context, dest, topic, info);
1:e06685f:         }
1:e06685f: 
1:e06685f:     }
1:e06685f: 
1:e06685f:     @Override
1:7f5213b:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:cdc2fd3:         super.removeProducer(context, info);
1:e06685f: 
1:d29ca2a:         // Don't advise advisory topics.
1:931ed76:         ActiveMQDestination dest = info.getDestination();
1:931ed76:         if (info.getDestination() != null && !AdvisorySupport.isAdvisoryTopic(dest)) {
1:931ed76:             ActiveMQTopic topic = AdvisorySupport.getProducerAdvisoryTopic(dest);
1:d29ca2a:             producers.remove(info.getProducerId());
1:11781d3:             if (!dest.isTemporary() || destinations.containsKey(dest)) {
1:11781d3:                 fireProducerAdvisory(context, dest, topic, info.createRemoveCommand());
1:b7c32d9:             }
1:b7c32d9:         }
1:b7c32d9:     }
1:b7c32d9: 
1:b7c32d9:     @Override
1:27c1719:     public void messageExpired(ConnectionContext context, MessageReference messageReference, Subscription subscription) {
1:27c1719:         super.messageExpired(context, messageReference, subscription);
1:663d5db:         try {
1:11781d3:             if (!messageReference.isAdvisory()) {
1:179dc3a:                 BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:179dc3a:                 ActiveMQTopic topic = AdvisorySupport.getExpiredMessageTopic(baseDestination.getActiveMQDestination());
1:69e3b6c:                 Message payload = messageReference.getMessage().copy();
1:179dc3a:                 if (!baseDestination.isIncludeBodyForAdvisory()) {
1:edacc2a:                     payload.clearBody();
1:edacc2a:                 }
1:6c703ac:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:6c703ac:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_MESSAGE_ID, payload.getMessageId().toString());
1:6c703ac:                 fireAdvisory(context, topic, payload, null, advisoryMessage);
1:edacc2a:             }
1:230a86c:         } catch (Exception e) {
1:d4d3915:             handleFireFailure("expired", e);
1:edacc2a:         }
1:edacc2a:     }
1:68bcf0f: 
1:204f91f:     @Override
1:cdc2fd3:     public void messageConsumed(ConnectionContext context, MessageReference messageReference) {
1:cdc2fd3:         super.messageConsumed(context, messageReference);
1:230a86c:         try {
1:11781d3:             if (!messageReference.isAdvisory()) {
1:179dc3a:                 BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:179dc3a:                 ActiveMQTopic topic = AdvisorySupport.getMessageConsumedAdvisoryTopic(baseDestination.getActiveMQDestination());
2:cdc2fd3:                 Message payload = messageReference.getMessage().copy();
1:179dc3a:                 if (!baseDestination.isIncludeBodyForAdvisory()) {
1:edacc2a:                     payload.clearBody();
1:edacc2a:                 }
1:6c703ac:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:6c703ac:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_MESSAGE_ID, payload.getMessageId().toString());
1:179dc3a:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, baseDestination.getActiveMQDestination().getQualifiedName());
1:6c703ac:                 fireAdvisory(context, topic, payload, null, advisoryMessage);
1:6c703ac:             }
1:69e3b6c:         } catch (Exception e) {
1:d4d3915:             handleFireFailure("consumed", e);
1:6c703ac:         }
1:b7c32d9:     }
1:68bcf0f: 
1:204f91f:     @Override
1:cdc2fd3:     public void messageDelivered(ConnectionContext context, MessageReference messageReference) {
1:cdc2fd3:         super.messageDelivered(context, messageReference);
1:230a86c:         try {
1:cdc2fd3:             if (!messageReference.isAdvisory()) {
1:179dc3a:                 BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:179dc3a:                 ActiveMQTopic topic = AdvisorySupport.getMessageDeliveredAdvisoryTopic(baseDestination.getActiveMQDestination());
1:cdc2fd3:                 Message payload = messageReference.getMessage().copy();
1:179dc3a:                 if (!baseDestination.isIncludeBodyForAdvisory()) {
1:edacc2a:                     payload.clearBody();
1:d29ca2a:                 }
1:bf1f755:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:db4f602:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_MESSAGE_ID, payload.getMessageId().toString());
1:179dc3a:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, baseDestination.getActiveMQDestination().getQualifiedName());
1:db4f602:                 fireAdvisory(context, topic, payload, null, advisoryMessage);
1:d29ca2a:             }
3:cdc2fd3:         } catch (Exception e) {
1:d4d3915:             handleFireFailure("delivered", e);
1:d29ca2a:         }
1:d29ca2a:     }
1:68bcf0f: 
1:204f91f:     @Override
1:3e4fc0a:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
1:3e4fc0a:         super.messageDiscarded(context, sub, messageReference);
1:cb1d21f:         try {
1:cdc2fd3:             if (!messageReference.isAdvisory()) {
1:179dc3a:                 BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:179dc3a:                 ActiveMQTopic topic = AdvisorySupport.getMessageDiscardedAdvisoryTopic(baseDestination.getActiveMQDestination());
1:cdc2fd3:                 Message payload = messageReference.getMessage().copy();
1:179dc3a:                 if (!baseDestination.isIncludeBodyForAdvisory()) {
1:edacc2a:                     payload.clearBody();
1:3e4fc0a:                 }
1:3e4fc0a:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:3e4fc0a:                 if (sub instanceof TopicSubscription) {
1:11781d3:                     advisoryMessage.setIntProperty(AdvisorySupport.MSG_PROPERTY_DISCARDED_COUNT, ((TopicSubscription) sub).discarded());
1:6c703ac:                 }
1:6c703ac:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_MESSAGE_ID, payload.getMessageId().toString());
1:3e4fc0a:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, sub.getConsumerInfo().getConsumerId().toString());
1:179dc3a:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, baseDestination.getActiveMQDestination().getQualifiedName());
1:179dc3a: 
1:3e4fc0a:                 fireAdvisory(context, topic, payload, null, advisoryMessage);
1:d29ca2a:             }
1:cdc2fd3:         } catch (Exception e) {
1:d4d3915:             handleFireFailure("discarded", e);
1:d29ca2a:         }
1:d29ca2a:     }
1:68bcf0f: 
1:204f91f:     @Override
1:11781d3:     public void slowConsumer(ConnectionContext context, Destination destination, Subscription subs) {
1:11781d3:         super.slowConsumer(context, destination, subs);
1:cb1d21f:         try {
1:bf1f755:             if (!AdvisorySupport.isAdvisoryTopic(destination.getActiveMQDestination())) {
1:bf1f755:                 ActiveMQTopic topic = AdvisorySupport.getSlowConsumerAdvisoryTopic(destination.getActiveMQDestination());
1:bf1f755:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:bf1f755:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, subs.getConsumerInfo().getConsumerId().toString());
1:bf1f755:                 fireAdvisory(context, topic, subs.getConsumerInfo(), null, advisoryMessage);
1:bf1f755:             }
1:cdc2fd3:         } catch (Exception e) {
1:d4d3915:             handleFireFailure("slow consumer", e);
1:d29ca2a:         }
1:d29ca2a:     }
1:68bcf0f: 
1:204f91f:     @Override
1:11781d3:     public void fastProducer(ConnectionContext context, ProducerInfo producerInfo, ActiveMQDestination destination) {
1:db1f6fe:         super.fastProducer(context, producerInfo, destination);
1:cb1d21f:         try {
1:db1f6fe:             if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:db1f6fe:                 ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(destination);
1:663d5db:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:bf1f755:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_PRODUCER_ID, producerInfo.getProducerId().toString());
1:bf1f755:                 fireAdvisory(context, topic, producerInfo, null, advisoryMessage);
1:bf1f755:             }
1:cdc2fd3:         } catch (Exception e) {
1:d4d3915:             handleFireFailure("fast producer", e);
1:d29ca2a:         }
1:d29ca2a:     }
1:68bcf0f: 
1:cc81680:     private final IdGenerator connectionIdGenerator = new IdGenerator("advisory");
1:cc81680:     private final LongSequenceGenerator sessionIdGenerator = new LongSequenceGenerator();
1:cc81680:     private final LongSequenceGenerator consumerIdGenerator = new LongSequenceGenerator();
1:cc81680: 
1:cc81680:     @Override
1:cc81680:     public void virtualDestinationAdded(ConnectionContext context,
1:cc81680:             VirtualDestination virtualDestination) {
1:cc81680:         super.virtualDestinationAdded(context, virtualDestination);
1:cc81680: 
1:cc81680:         if (virtualDestinations.add(virtualDestination)) {
1:a2781e3:             LOG.debug("Virtual destination added: {}", virtualDestination);
1:cc81680:             try {
1:cc81680:                 // Don't advise advisory topics.
1:cc81680:                 if (!AdvisorySupport.isAdvisoryTopic(virtualDestination.getVirtualDestination())) {
1:cc81680: 
1:cc81680:                     //create demand for consumers on virtual destinations
1:cc81680:                     consumersLock.readLock().lock();
1:cc81680:                     try {
1:cc81680:                         //loop through existing destinations to see if any match this newly
1:cc81680:                         //created virtual destination
1:cc81680:                         if (getBrokerService().isUseVirtualDestSubsOnCreation()) {
1:cc81680:                             //for matches that are a queue, fire an advisory for demand
1:cc81680:                             for (ActiveMQDestination destination : destinations.keySet()) {
1:cc81680:                                 if(destination.isQueue()) {
1:cc81680:                                     if (virtualDestinationMatcher.matches(virtualDestination, destination)) {
1:cc81680:                                         fireVirtualDestinationAddAdvisory(context, null, destination, virtualDestination);
1:cc81680:                                     }
1:cc81680:                                 }
1:cc81680:                             }
1:cc81680:                         }
1:cc81680: 
1:cc81680:                         //loop through existing consumers to see if any of them are consuming on a destination
1:cc81680:                         //that matches the new virtual destination
1:cc81680:                         for (Iterator<ConsumerInfo> iter = consumers.values().iterator(); iter.hasNext(); ) {
1:cc81680:                             ConsumerInfo info = iter.next();
1:cc81680:                             if (virtualDestinationMatcher.matches(virtualDestination, info.getDestination())) {
1:cc81680:                                 fireVirtualDestinationAddAdvisory(context, info, info.getDestination(), virtualDestination);
1:cc81680:                             }
1:cc81680:                         }
1:cc81680:                     } finally {
1:cc81680:                         consumersLock.readLock().unlock();
1:cc81680:                     }
1:cc81680:                 }
1:cc81680:             } catch (Exception e) {
1:cc81680:                 handleFireFailure("virtualDestinationAdded", e);
1:cc81680:             }
1:cc81680:         }
1:cc81680:     }
1:cc81680: 
1:cc81680:     private void fireVirtualDestinationAddAdvisory(ConnectionContext context, ConsumerInfo info, ActiveMQDestination activeMQDest,
1:cc81680:             VirtualDestination virtualDestination) throws Exception {
1:cc81680:         //if no consumer info, we need to create one - this is the case when an advisory is fired
1:cc81680:         //because of the existence of a destination matching a virtual destination
1:cc81680:         if (info == null) {
1:cc81680: 
1:cc81680:             //store the virtual destination and the activeMQDestination as a pair so that we can keep track
1:cc81680:             //of all matching forwarded destinations that caused demand
1:a2781e3:             VirtualConsumerPair pair = new VirtualConsumerPair(virtualDestination, activeMQDest);
1:a2781e3:             if (brokerConsumerDests.get(pair) == null) {
1:a2781e3:                 ConnectionId connectionId = new ConnectionId(connectionIdGenerator.generateId());
1:a2781e3:                 SessionId sessionId = new SessionId(connectionId, sessionIdGenerator.getNextSequenceId());
1:a2781e3:                 ConsumerId consumerId = new ConsumerId(sessionId, consumerIdGenerator.getNextSequenceId());
1:a2781e3:                 info = new ConsumerInfo(consumerId);
1:cc81680: 
1:a2781e3:                 if(brokerConsumerDests.putIfAbsent(pair, info) == null) {
1:a2781e3:                     LOG.debug("Virtual consumer pair added: {} for consumer: {} ", pair, info);
1:56baba9:                     setConsumerInfoVirtualDest(info, virtualDestination, activeMQDest);
1:a2781e3:                     ActiveMQTopic topic = AdvisorySupport.getVirtualDestinationConsumerAdvisoryTopic(info.getDestination());
1:a2781e3: 
1:a2781e3:                     if (virtualDestinationConsumers.putIfAbsent(info, virtualDestination) == null) {
1:a2781e3:                         LOG.debug("Virtual consumer added: {}, for virtual destination: {}", info, virtualDestination);
1:a2781e3:                         fireConsumerAdvisory(context, info.getDestination(), topic, info);
1:a2781e3:                     }
1:cc81680:                 }
1:cc81680:             }
1:cc81680:         //this is the case of a real consumer coming online
1:cc81680:         } else {
1:cc81680:             info = info.copy();
1:56baba9:             setConsumerInfoVirtualDest(info, virtualDestination, activeMQDest);
2:cc81680:             ActiveMQTopic topic = AdvisorySupport.getVirtualDestinationConsumerAdvisoryTopic(info.getDestination());
1:cc81680: 
2:cc81680:             if (virtualDestinationConsumers.putIfAbsent(info, virtualDestination) == null) {
1:a2781e3:                 LOG.debug("Virtual consumer added: {}, for virtual destination: {}", info, virtualDestination);
1:cc81680:                 fireConsumerAdvisory(context, info.getDestination(), topic, info);
1:cc81680:             }
1:cc81680:         }
1:cc81680:     }
1:cc81680: 
1:56baba9:     /**
1:56baba9:      * Sets the virtual destination on the ConsumerInfo
1:56baba9:      * If this is a VirtualTopic then the destination used will be the actual topic subscribed
1:56baba9:      * to in order to track demand properly
1:56baba9:      *
1:56baba9:      * @param info
1:56baba9:      * @param virtualDestination
1:56baba9:      * @param activeMQDest
1:56baba9:      */
1:56baba9:     private void setConsumerInfoVirtualDest(ConsumerInfo info, VirtualDestination virtualDestination, ActiveMQDestination activeMQDest) {
1:56baba9:         info.setDestination(virtualDestination.getVirtualDestination());
1:56baba9:         if (virtualDestination instanceof VirtualTopic) {
1:56baba9:             VirtualTopic vt = (VirtualTopic) virtualDestination;
1:56baba9:             String prefix = vt.getPrefix() != null ? vt.getPrefix() : "";
1:56baba9:             String postfix = vt.getPostfix() != null ? vt.getPostfix() : "";
1:56baba9:             if (prefix.endsWith(".")) {
1:56baba9:                 prefix = prefix.substring(0, prefix.length() - 1);
1:56baba9:             }
1:56baba9:             if (postfix.startsWith(".")) {
1:56baba9:                 postfix = postfix.substring(1, postfix.length());
1:56baba9:             }
1:56baba9:             ActiveMQDestination prefixDestination = prefix.length() > 0 ? new ActiveMQTopic(prefix) : null;
1:56baba9:             ActiveMQDestination postfixDestination = postfix.length() > 0 ? new ActiveMQTopic(postfix) : null;
1:56baba9: 
1:56baba9:             String[] prefixPaths = prefixDestination != null ? prefixDestination.getDestinationPaths() : new String[] {};
1:56baba9:             String[] activeMQDestPaths = activeMQDest.getDestinationPaths();
1:56baba9:             String[] postfixPaths = postfixDestination != null ? postfixDestination.getDestinationPaths() : new String[] {};
1:56baba9: 
1:56baba9:             //sanity check
1:56baba9:             if (activeMQDestPaths.length > prefixPaths.length + postfixPaths.length) {
1:56baba9:                 String[] topicPath = Arrays.copyOfRange(activeMQDestPaths, 0 + prefixPaths.length,
1:56baba9:                         activeMQDestPaths.length - postfixPaths.length);
1:56baba9: 
1:56baba9:                 ActiveMQTopic newTopic = new ActiveMQTopic(DestinationPath.toString(topicPath));
1:56baba9:                 info.setDestination(newTopic);
1:56baba9:             }
1:56baba9:         }
1:56baba9:     }
1:56baba9: 
1:cc81680:     @Override
1:cc81680:     public void virtualDestinationRemoved(ConnectionContext context,
1:cc81680:             VirtualDestination virtualDestination) {
1:cc81680:         super.virtualDestinationRemoved(context, virtualDestination);
1:cc81680: 
1:cc81680:         if (virtualDestinations.remove(virtualDestination)) {
1:a2781e3:             LOG.debug("Virtual destination removed: {}", virtualDestination);
1:cc81680:             try {
1:cc81680:                 consumersLock.readLock().lock();
1:cc81680:                 try {
1:cc81680:                     // remove the demand created by the addition of the virtual destination
1:cc81680:                     if (getBrokerService().isUseVirtualDestSubsOnCreation()) {
1:cc81680:                         if (!AdvisorySupport.isAdvisoryTopic(virtualDestination.getVirtualDestination())) {
1:cc81680:                             for (ConsumerInfo info : virtualDestinationConsumers.keySet()) {
1:cc81680:                                 //find all consumers for this virtual destination
1:cc81680:                                 if (virtualDestinationConsumers.get(info).equals(virtualDestination)) {
1:cc81680:                                     fireVirtualDestinationRemoveAdvisory(context, info);
1:cc81680: 
1:a2781e3:                                     //check consumers created for the existence of a destination to see if they
1:a2781e3:                                     //match the consumerinfo and clean up
1:a2781e3:                                     for (VirtualConsumerPair activeMQDest : brokerConsumerDests.keySet()) {
1:a2781e3:                                         ConsumerInfo i = brokerConsumerDests.get(activeMQDest);
1:a2781e3:                                         if (info.equals(i) && brokerConsumerDests.remove(activeMQDest) != null) {
1:a2781e3:                                             LOG.debug("Virtual consumer pair removed: {} for consumer: {} ", activeMQDest, i);
1:a2781e3:                                         }
1:cc81680:                                     }
1:cc81680:                                 }
1:a2781e3: 
1:cc81680:                             }
1:cc81680:                         }
1:cc81680:                     }
1:cc81680:                 } finally {
1:cc81680:                     consumersLock.readLock().unlock();
1:cc81680:                 }
1:cc81680:             } catch (Exception e) {
1:cc81680:                 handleFireFailure("virtualDestinationAdded", e);
1:cc81680:             }
1:cc81680:         }
1:cc81680:     }
1:cc81680: 
1:cc81680:     private void fireVirtualDestinationRemoveAdvisory(ConnectionContext context,
1:cc81680:             ConsumerInfo info) throws Exception {
1:cc81680: 
1:cc81680:         VirtualDestination virtualDestination = virtualDestinationConsumers.remove(info);
1:cc81680:         if (virtualDestination != null) {
1:a2781e3:             LOG.debug("Virtual consumer removed: {}, for virtual destination: {}", info, virtualDestination);
1:cc81680:             ActiveMQTopic topic = AdvisorySupport.getVirtualDestinationConsumerAdvisoryTopic(virtualDestination.getVirtualDestination());
1:cc81680: 
1:cc81680:             ActiveMQDestination dest = info.getDestination();
1:cc81680: 
1:cc81680:             if (!dest.isTemporary() || destinations.containsKey(dest)) {
1:cc81680:                 fireConsumerAdvisory(context, dest, topic, info.createRemoveCommand());
1:cc81680:             }
1:cc81680:         }
1:cc81680:     }
1:cc81680: 
1:204f91f:     @Override
1:5076808:     public void isFull(ConnectionContext context, Destination destination, Usage<?> usage) {
1:eb51a69:         super.isFull(context, destination, usage);
1:eb51a69:         if (AdvisorySupport.isAdvisoryTopic(destination.getActiveMQDestination()) == false) {
1:cb1d21f:             try {
1:cc81680: 
1:eb51a69:                 ActiveMQTopic topic = AdvisorySupport.getFullAdvisoryTopic(destination.getActiveMQDestination());
1:663d5db:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:eb51a69:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_USAGE_NAME, usage.getName());
1:078f39f:                 advisoryMessage.setLongProperty(AdvisorySupport.MSG_PROPERTY_USAGE_COUNT, usage.getUsage());
1:eb51a69:                 fireAdvisory(context, topic, null, null, advisoryMessage);
1:b7c32d9: 
1:eb51a69:             } catch (Exception e) {
1:d4d3915:                 handleFireFailure("is full", e);
1:cc81680:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:fc00993: 
1:204f91f:     @Override
1:68bcf0f:     public void nowMasterBroker() {
1:4ee029e:         super.nowMasterBroker();
1:3043e7a:         try {
1:4ee029e:             ActiveMQTopic topic = AdvisorySupport.getMasterBrokerAdvisoryTopic();
1:68bcf0f:             ActiveMQMessage advisoryMessage = new ActiveMQMessage();
2:663d5db:             ConnectionContext context = new ConnectionContext();
2:663d5db:             context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
2:663d5db:             context.setBroker(getBrokerService().getBroker());
1:11781d3:             fireAdvisory(context, topic, null, null, advisoryMessage);
1:4ee029e:         } catch (Exception e) {
1:d4d3915:             handleFireFailure("now master broker", e);
1:663d5db:         }
1:663d5db:     }
1:68bcf0f: 
1:204f91f:     @Override
1:0bb9013:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
1:708be6d:                                          Subscription subscription, Throwable poisonCause) {
1:708be6d:         boolean wasDLQd = super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:0bb9013:         if (wasDLQd) {
1:0bb9013:             try {
1:11781d3:                 if (!messageReference.isAdvisory()) {
1:179dc3a:                     BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:179dc3a:                     ActiveMQTopic topic = AdvisorySupport.getMessageDLQdAdvisoryTopic(baseDestination.getActiveMQDestination());
1:0bb9013:                     Message payload = messageReference.getMessage().copy();
1:179dc3a:                     if (!baseDestination.isIncludeBodyForAdvisory()) {
1:edacc2a:                         payload.clearBody();
1:0bb9013:                     }
1:11781d3:                     fireAdvisory(context, topic, payload);
1:d29ca2a:                 }
1:0bb9013:             } catch (Exception e) {
1:0bb9013:                 handleFireFailure("add to DLQ", e);
1:68bcf0f:             }
1:d29ca2a:         }
1:0bb9013: 
1:0bb9013:         return wasDLQd;
1:d29ca2a:     }
1:663d5db: 
1:204f91f:     @Override
1:37384a1:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex, String remoteIp) {
1:3043e7a:         try {
1:11781d3:             if (brokerInfo != null) {
1:11781d3:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:11781d3:                 advisoryMessage.setBooleanProperty("started", true);
1:11781d3:                 advisoryMessage.setBooleanProperty("createdByDuplex", createdByDuplex);
1:11781d3:                 advisoryMessage.setStringProperty("remoteIp", remoteIp);
1:11781d3:                 networkBridges.putIfAbsent(brokerInfo, advisoryMessage);
1:663d5db: 
1:11781d3:                 ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
1:663d5db: 
1:11781d3:                 ConnectionContext context = new ConnectionContext();
1:11781d3:                 context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
1:11781d3:                 context.setBroker(getBrokerService().getBroker());
1:11781d3:                 fireAdvisory(context, topic, brokerInfo, null, advisoryMessage);
1:11781d3:             }
1:663d5db:         } catch (Exception e) {
1:d4d3915:             handleFireFailure("network bridge started", e);
1:663d5db:         }
1:663d5db:     }
1:663d5db: 
1:663d5db:     @Override
1:663d5db:     public void networkBridgeStopped(BrokerInfo brokerInfo) {
1:663d5db:         try {
1:11781d3:             if (brokerInfo != null) {
1:11781d3:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:11781d3:                 advisoryMessage.setBooleanProperty("started", false);
1:11781d3:                 networkBridges.remove(brokerInfo);
1:663d5db: 
1:11781d3:                 ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
1:663d5db: 
1:11781d3:                 ConnectionContext context = new ConnectionContext();
1:11781d3:                 context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
1:11781d3:                 context.setBroker(getBrokerService().getBroker());
1:11781d3:                 fireAdvisory(context, topic, brokerInfo, null, advisoryMessage);
1:11781d3:             }
1:663d5db:         } catch (Exception e) {
1:d4d3915:             handleFireFailure("network bridge stopped", e);
1:d4d3915:         }
1:d4d3915:     }
1:d4d3915: 
1:d4d3915:     private void handleFireFailure(String message, Throwable cause) {
1:e1bbde7:         LOG.warn("Failed to fire {} advisory, reason: {}", message, cause);
1:93092f7:         LOG.debug("{} detail: {}", message, cause, cause);
1:663d5db:     }
1:230a86c: 
1:7f5213b:     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command) throws Exception {
1:d29ca2a:         fireAdvisory(context, topic, command, null);
1:663d5db:     }
1:230a86c: 
1:7f5213b:     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
1:d29ca2a:         ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:d29ca2a:         fireAdvisory(context, topic, command, targetConsumerId, advisoryMessage);
1:d29ca2a:     }
1:230a86c: 
1:11781d3:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQDestination consumerDestination, ActiveMQTopic topic, Command command) throws Exception {
1:11781d3:         fireConsumerAdvisory(context, consumerDestination, topic, command, null);
1:d29ca2a:     }
1:230a86c: 
1:11781d3:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQDestination consumerDestination, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
1:d29ca2a:         ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:634da7a:         int count = 0;
1:11781d3:         Set<Destination> set = getDestinations(consumerDestination);
1:5f4db41:         if (set != null) {
1:11781d3:             for (Destination dest : set) {
1:5f4db41:                 count += dest.getDestinationStatistics().getConsumers().getCount();
1:d29ca2a:             }
1:d29ca2a:         }
1:3e4fc0a:         advisoryMessage.setIntProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_COUNT, count);
1:68bcf0f: 
1:d29ca2a:         fireAdvisory(context, topic, command, targetConsumerId, advisoryMessage);
1:d29ca2a:     }
1:230a86c: 
1:11781d3:     protected void fireProducerAdvisory(ConnectionContext context, ActiveMQDestination producerDestination, ActiveMQTopic topic, Command command) throws Exception {
1:11781d3:         fireProducerAdvisory(context, producerDestination, topic, command, null);
1:d29ca2a:     }
1:230a86c: 
1:11781d3:     protected void fireProducerAdvisory(ConnectionContext context, ActiveMQDestination producerDestination, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
1:eb51a69:         ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:5f4db41:         int count = 0;
1:634da7a:         if (producerDestination != null) {
1:634da7a:             Set<Destination> set = getDestinations(producerDestination);
1:634da7a:             if (set != null) {
1:634da7a:                 for (Destination dest : set) {
1:8d11f07:                     count += dest.getDestinationStatistics().getProducers().getCount();
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:634da7a:         advisoryMessage.setIntProperty("producerCount", count);
1:3582300:         fireAdvisory(context, topic, command, targetConsumerId, advisoryMessage);
1:d29ca2a:     }
1:230a86c: 
1:8012f28:     public void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId, ActiveMQMessage advisoryMessage) throws Exception {
1:ddfa960:         //set properties
1:ddfa960:         advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_NAME, getBrokerName());
1:ddfa960:         String id = getBrokerId() != null ? getBrokerId().getValue() : "NOT_SET";
1:ddfa960:         advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, id);
1:68bcf0f: 
1:ddfa960:         String url = getBrokerService().getVmConnectorURI().toString();
1:fc3e026:         //try and find the URL on the transport connector and use if it exists else
1:fc3e026:         //try and find a default URL
1:fc3e026:         if (context.getConnector() instanceof TransportConnector
1:fc3e026:                 && ((TransportConnector) context.getConnector()).getPublishableConnectString() != null) {
1:fc3e026:             url = ((TransportConnector) context.getConnector()).getPublishableConnectString();
1:fc3e026:         } else if (getBrokerService().getDefaultSocketURIString() != null) {
1:ddfa960:             url = getBrokerService().getDefaultSocketURIString();
1:ddfa960:         }
1:ddfa960:         advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL, url);
1:68bcf0f: 
1:ddfa960:         //set the data structure
1:ddfa960:         advisoryMessage.setDataStructure(command);
1:ddfa960:         advisoryMessage.setPersistent(false);
1:ddfa960:         advisoryMessage.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
1:ddfa960:         advisoryMessage.setMessageId(new MessageId(advisoryProducerId, messageIdGenerator.getNextSequenceId()));
1:ddfa960:         advisoryMessage.setTargetConsumerId(targetConsumerId);
1:ddfa960:         advisoryMessage.setDestination(topic);
1:ddfa960:         advisoryMessage.setResponseRequired(false);
1:ddfa960:         advisoryMessage.setProducerId(advisoryProducerId);
1:ddfa960:         boolean originalFlowControl = context.isProducerFlowControl();
1:ddfa960:         final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:ddfa960:         producerExchange.setConnectionContext(context);
1:ddfa960:         producerExchange.setMutable(true);
1:ddfa960:         producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
1:ddfa960:         try {
1:ddfa960:             context.setProducerFlowControl(false);
1:ddfa960:             next.send(producerExchange, advisoryMessage);
1:ddfa960:         } finally {
1:ddfa960:             context.setProducerFlowControl(originalFlowControl);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:a785cb7:     public Map<ConnectionId, ConnectionInfo> getAdvisoryConnections() {
1:a785cb7:         return connections;
1:d29ca2a:     }
1:230a86c: 
1:b2afb8c:     public Collection<ConsumerInfo> getAdvisoryConsumers() {
1:b2afb8c:         consumersLock.readLock().lock();
1:b2afb8c:         try {
1:b2afb8c:             return new ArrayList<ConsumerInfo>(consumers.values());
1:b2afb8c:         } finally {
1:b2afb8c:             consumersLock.readLock().unlock();
1:b2afb8c:         }
1:69e3b6c:     }
1:230a86c: 
1:a785cb7:     public Map<ProducerId, ProducerInfo> getAdvisoryProducers() {
1:a785cb7:         return producers;
1:69e3b6c:     }
1:230a86c: 
1:a785cb7:     public Map<ActiveMQDestination, DestinationInfo> getAdvisoryDestinations() {
1:a785cb7:         return destinations;
1:69e3b6c:     }
1:cc81680: 
1:d206621:     public ConcurrentMap<ConsumerInfo, VirtualDestination> getVirtualDestinationConsumers() {
1:d206621:         return virtualDestinationConsumers;
1:d206621:     }
1:d206621: 
1:cc81680:     private class VirtualConsumerPair {
1:cc81680:         private final VirtualDestination virtualDestination;
1:cc81680: 
1:cc81680:         //destination that matches this virtualDestination as part target
1:cc81680:         //this is so we can keep track of more than one destination that might
1:cc81680:         //match the virtualDestination and cause demand
1:cc81680:         private final ActiveMQDestination activeMQDestination;
1:cc81680: 
1:cc81680:         public VirtualConsumerPair(VirtualDestination virtualDestination,
1:cc81680:                 ActiveMQDestination activeMQDestination) {
1:cc81680:             super();
1:cc81680:             this.virtualDestination = virtualDestination;
1:cc81680:             this.activeMQDestination = activeMQDestination;
1:cc81680:         }
1:a2781e3: 
1:cc81680:         @Override
1:cc81680:         public int hashCode() {
1:cc81680:             final int prime = 31;
1:cc81680:             int result = 1;
1:cc81680:             result = prime * result + getOuterType().hashCode();
1:cc81680:             result = prime
1:cc81680:                     * result
1:cc81680:                     + ((activeMQDestination == null) ? 0 : activeMQDestination
1:cc81680:                             .hashCode());
1:cc81680:             result = prime
1:cc81680:                     * result
1:cc81680:                     + ((virtualDestination == null) ? 0 : virtualDestination
1:cc81680:                             .hashCode());
1:cc81680:             return result;
1:cc81680:         }
1:a2781e3: 
1:cc81680:         @Override
1:cc81680:         public boolean equals(Object obj) {
1:cc81680:             if (this == obj)
1:cc81680:                 return true;
1:cc81680:             if (obj == null)
1:cc81680:                 return false;
1:cc81680:             if (getClass() != obj.getClass())
1:cc81680:                 return false;
1:cc81680:             VirtualConsumerPair other = (VirtualConsumerPair) obj;
1:cc81680:             if (!getOuterType().equals(other.getOuterType()))
1:cc81680:                 return false;
1:cc81680:             if (activeMQDestination == null) {
1:cc81680:                 if (other.activeMQDestination != null)
1:cc81680:                     return false;
1:cc81680:             } else if (!activeMQDestination.equals(other.activeMQDestination))
1:cc81680:                 return false;
1:cc81680:             if (virtualDestination == null) {
1:cc81680:                 if (other.virtualDestination != null)
1:cc81680:                     return false;
1:cc81680:             } else if (!virtualDestination.equals(other.virtualDestination))
1:cc81680:                 return false;
1:cc81680:             return true;
1:cc81680:         }
1:a2781e3: 
1:a2781e3:         @Override
1:a2781e3:         public String toString() {
1:a2781e3:             return "VirtualConsumerPair [virtualDestination=" + virtualDestination + ", activeMQDestination="
1:a2781e3:                     + activeMQDestination + "]";
1:a2781e3:         }
1:a2781e3: 
1:cc81680:         private AdvisoryBroker getOuterType() {
1:cc81680:             return AdvisoryBroker.this;
1:cc81680:         }
1:cc81680:     }
1:2142045: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:56baba9
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.DestinationPath;
/////////////////////////////////////////////////////////////////////////
1:                     setConsumerInfoVirtualDest(info, virtualDestination, activeMQDest);
/////////////////////////////////////////////////////////////////////////
1:             setConsumerInfoVirtualDest(info, virtualDestination, activeMQDest);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sets the virtual destination on the ConsumerInfo
1:      * If this is a VirtualTopic then the destination used will be the actual topic subscribed
1:      * to in order to track demand properly
1:      *
1:      * @param info
1:      * @param virtualDestination
1:      * @param activeMQDest
1:      */
1:     private void setConsumerInfoVirtualDest(ConsumerInfo info, VirtualDestination virtualDestination, ActiveMQDestination activeMQDest) {
1:         info.setDestination(virtualDestination.getVirtualDestination());
1:         if (virtualDestination instanceof VirtualTopic) {
1:             VirtualTopic vt = (VirtualTopic) virtualDestination;
1:             String prefix = vt.getPrefix() != null ? vt.getPrefix() : "";
1:             String postfix = vt.getPostfix() != null ? vt.getPostfix() : "";
1:             if (prefix.endsWith(".")) {
1:                 prefix = prefix.substring(0, prefix.length() - 1);
1:             }
1:             if (postfix.startsWith(".")) {
1:                 postfix = postfix.substring(1, postfix.length());
1:             }
1:             ActiveMQDestination prefixDestination = prefix.length() > 0 ? new ActiveMQTopic(prefix) : null;
1:             ActiveMQDestination postfixDestination = postfix.length() > 0 ? new ActiveMQTopic(postfix) : null;
1: 
1:             String[] prefixPaths = prefixDestination != null ? prefixDestination.getDestinationPaths() : new String[] {};
1:             String[] activeMQDestPaths = activeMQDest.getDestinationPaths();
1:             String[] postfixPaths = postfixDestination != null ? postfixDestination.getDestinationPaths() : new String[] {};
1: 
1:             //sanity check
1:             if (activeMQDestPaths.length > prefixPaths.length + postfixPaths.length) {
1:                 String[] topicPath = Arrays.copyOfRange(activeMQDestPaths, 0 + prefixPaths.length,
1:                         activeMQDestPaths.length - postfixPaths.length);
1: 
1:                 ActiveMQTopic newTopic = new ActiveMQTopic(DestinationPath.toString(topicPath));
1:                 info.setDestination(newTopic);
1:             }
1:         }
1:     }
1: 
commit:d206621
/////////////////////////////////////////////////////////////////////////
1:     public ConcurrentMap<ConsumerInfo, VirtualDestination> getVirtualDestinationConsumers() {
1:         return virtualDestinationConsumers;
1:     }
1: 
commit:a2781e3
/////////////////////////////////////////////////////////////////////////
1:                         if (consumerInfo.equals(i) && brokerConsumerDests.remove(key) != null) {
1:                             LOG.debug("Virtual consumer pair removed: {} for consumer: {} ", key, i);
1:                             fireVirtualDestinationRemoveAdvisory(context, consumerInfo);
1:                             break;
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Virtual destination added: {}", virtualDestination);
/////////////////////////////////////////////////////////////////////////
1:             VirtualConsumerPair pair = new VirtualConsumerPair(virtualDestination, activeMQDest);
1:             if (brokerConsumerDests.get(pair) == null) {
1:                 ConnectionId connectionId = new ConnectionId(connectionIdGenerator.generateId());
1:                 SessionId sessionId = new SessionId(connectionId, sessionIdGenerator.getNextSequenceId());
1:                 ConsumerId consumerId = new ConsumerId(sessionId, consumerIdGenerator.getNextSequenceId());
1:                 info = new ConsumerInfo(consumerId);
1:                 if(brokerConsumerDests.putIfAbsent(pair, info) == null) {
1:                     LOG.debug("Virtual consumer pair added: {} for consumer: {} ", pair, info);
0:                     info.setDestination(virtualDestination.getVirtualDestination());
1:                     ActiveMQTopic topic = AdvisorySupport.getVirtualDestinationConsumerAdvisoryTopic(info.getDestination());
1: 
1:                     if (virtualDestinationConsumers.putIfAbsent(info, virtualDestination) == null) {
1:                         LOG.debug("Virtual consumer added: {}, for virtual destination: {}", info, virtualDestination);
1:                         fireConsumerAdvisory(context, info.getDestination(), topic, info);
1:                     }
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Virtual consumer added: {}, for virtual destination: {}", info, virtualDestination);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Virtual destination removed: {}", virtualDestination);
/////////////////////////////////////////////////////////////////////////
1:                                     //check consumers created for the existence of a destination to see if they
1:                                     //match the consumerinfo and clean up
1:                                     for (VirtualConsumerPair activeMQDest : brokerConsumerDests.keySet()) {
1:                                         ConsumerInfo i = brokerConsumerDests.get(activeMQDest);
1:                                         if (info.equals(i) && brokerConsumerDests.remove(activeMQDest) != null) {
1:                                             LOG.debug("Virtual consumer pair removed: {} for consumer: {} ", activeMQDest, i);
1:                                         }
1: 
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Virtual consumer removed: {}, for virtual destination: {}", info, virtualDestination);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         @Override
1:         public String toString() {
1:             return "VirtualConsumerPair [virtualDestination=" + virtualDestination + ", activeMQDestination="
1:                     + activeMQDestination + "]";
1:         }
1: 
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.SessionId;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * This is a set to track all of the virtual destinations that have been added to the broker so
1:      * they can be easily referenced later.
1:      */
1:     protected final Set<VirtualDestination> virtualDestinations = Collections.newSetFromMap(new ConcurrentHashMap<VirtualDestination, Boolean>());
1:     /**
1:      * This is a map to track all consumers that exist on the virtual destination so that we can fire
1:      * an advisory later when they go away to remove the demand.
1:      */
1:     protected final ConcurrentMap<ConsumerInfo, VirtualDestination> virtualDestinationConsumers = new ConcurrentHashMap<>();
1:     /**
1:      * This is a map to track unique demand for the existence of a virtual destination so we make sure
1:      * we don't send duplicate advisories.
1:      */
1:     protected final ConcurrentMap<VirtualConsumerPair, ConsumerInfo> brokerConsumerDests = new ConcurrentHashMap<>();
1: 
/////////////////////////////////////////////////////////////////////////
1:     private VirtualDestinationMatcher virtualDestinationMatcher = new DestinationFilterVirtualDestinationMatcher();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:                 //check if this is a consumer on a destination that matches a virtual destination
1:                 if (getBrokerService().isUseVirtualDestSubs()) {
1:                     for (VirtualDestination virtualDestination : virtualDestinations) {
1:                         if (virtualDestinationMatcher.matches(virtualDestination, info.getDestination())) {
1:                             fireVirtualDestinationAddAdvisory(context, info, info.getDestination(), virtualDestination);
1:                         }
1:                     }
1:                 }
/////////////////////////////////////////////////////////////////////////
1:             // Replay the virtual destination consumers.
1:             if (AdvisorySupport.isVirtualDestinationConsumerAdvisoryTopic(info.getDestination())) {
1:                 for (Iterator<ConsumerInfo> iter = virtualDestinationConsumers.keySet().iterator(); iter.hasNext(); ) {
1:                     ConsumerInfo key = iter.next();
1:                     ActiveMQTopic topic = AdvisorySupport.getVirtualDestinationConsumerAdvisoryTopic(key.getDestination());
1:                     fireConsumerAdvisory(context, key.getDestination(), topic, key);
1:               }
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1:             //for queues, create demand if isUseVirtualDestSubsOnCreation is true
1:             if (getBrokerService().isUseVirtualDestSubsOnCreation() && destination.isQueue()) {
1:                 //check if this new destination matches a virtual destination that exists
1:                 for (VirtualDestination virtualDestination : virtualDestinations) {
1:                     if (virtualDestinationMatcher.matches(virtualDestination, destination)) {
1:                         fireVirtualDestinationAddAdvisory(context, null, destination, virtualDestination);
1:                     }
1:                 }
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             //on destination removal, remove all demand if using virtual dest subs
1:             if (getBrokerService().isUseVirtualDestSubs()) {
1:                 for (ConsumerInfo consumerInfo : virtualDestinationConsumers.keySet()) {
1:                     //find all consumers for this virtual destination
1:                     VirtualDestination virtualDestination = virtualDestinationConsumers.get(consumerInfo);
1: 
1:                     //find a consumer that matches this virtualDest and destination
1:                     if (virtualDestinationMatcher.matches(virtualDestination, destination)) {
1:                         //in case of multiple matches
1:                         VirtualConsumerPair key = new VirtualConsumerPair(virtualDestination, destination);
1:                         ConsumerInfo i = brokerConsumerDests.get(key);
0:                         if (consumerInfo.equals(i)) {
0:                             if (brokerConsumerDests.remove(key) != null) {
0:                                 fireVirtualDestinationRemoveAdvisory(context, consumerInfo);
0:                                 break;
1:                             }
1:                         }
1:                     }
1:                 }
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:                 //remove the demand for this consumer if it matches a virtual destination
1:                 if(getBrokerService().isUseVirtualDestSubs()) {
1:                     fireVirtualDestinationRemoveAdvisory(context, info);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:     private final IdGenerator connectionIdGenerator = new IdGenerator("advisory");
1:     private final LongSequenceGenerator sessionIdGenerator = new LongSequenceGenerator();
1:     private final LongSequenceGenerator consumerIdGenerator = new LongSequenceGenerator();
1: 
1:     @Override
1:     public void virtualDestinationAdded(ConnectionContext context,
1:             VirtualDestination virtualDestination) {
1:         super.virtualDestinationAdded(context, virtualDestination);
1: 
1:         if (virtualDestinations.add(virtualDestination)) {
1:             try {
1:                 // Don't advise advisory topics.
1:                 if (!AdvisorySupport.isAdvisoryTopic(virtualDestination.getVirtualDestination())) {
1: 
1:                     //create demand for consumers on virtual destinations
1:                     consumersLock.readLock().lock();
1:                     try {
1:                         //loop through existing destinations to see if any match this newly
1:                         //created virtual destination
1:                         if (getBrokerService().isUseVirtualDestSubsOnCreation()) {
1:                             //for matches that are a queue, fire an advisory for demand
1:                             for (ActiveMQDestination destination : destinations.keySet()) {
1:                                 if(destination.isQueue()) {
1:                                     if (virtualDestinationMatcher.matches(virtualDestination, destination)) {
1:                                         fireVirtualDestinationAddAdvisory(context, null, destination, virtualDestination);
1:                                     }
1:                                 }
1:                             }
1:                         }
1: 
1:                         //loop through existing consumers to see if any of them are consuming on a destination
1:                         //that matches the new virtual destination
1:                         for (Iterator<ConsumerInfo> iter = consumers.values().iterator(); iter.hasNext(); ) {
1:                             ConsumerInfo info = iter.next();
1:                             if (virtualDestinationMatcher.matches(virtualDestination, info.getDestination())) {
1:                                 fireVirtualDestinationAddAdvisory(context, info, info.getDestination(), virtualDestination);
1:                             }
1:                         }
1:                     } finally {
1:                         consumersLock.readLock().unlock();
1:                     }
1:                 }
1:             } catch (Exception e) {
1:                 handleFireFailure("virtualDestinationAdded", e);
1:             }
1:         }
1:     }
1: 
1:     private void fireVirtualDestinationAddAdvisory(ConnectionContext context, ConsumerInfo info, ActiveMQDestination activeMQDest,
1:             VirtualDestination virtualDestination) throws Exception {
1:         //if no consumer info, we need to create one - this is the case when an advisory is fired
1:         //because of the existence of a destination matching a virtual destination
1:         if (info == null) {
0:             ConnectionId connectionId = new ConnectionId(connectionIdGenerator.generateId());
0:             SessionId sessionId = new SessionId(connectionId, sessionIdGenerator.getNextSequenceId());
0:             ConsumerId consumerId = new ConsumerId(sessionId, consumerIdGenerator.getNextSequenceId());
1: 
0:             info = new ConsumerInfo(consumerId);
1: 
1:             //store the virtual destination and the activeMQDestination as a pair so that we can keep track
1:             //of all matching forwarded destinations that caused demand
0:             if(brokerConsumerDests.putIfAbsent(new VirtualConsumerPair(virtualDestination, activeMQDest), info) == null) {
0:                 info.setDestination(virtualDestination.getVirtualDestination());
1:                 ActiveMQTopic topic = AdvisorySupport.getVirtualDestinationConsumerAdvisoryTopic(info.getDestination());
1: 
1:                 if (virtualDestinationConsumers.putIfAbsent(info, virtualDestination) == null) {
1:                     fireConsumerAdvisory(context, info.getDestination(), topic, info);
1:                 }
1:             }
1:         //this is the case of a real consumer coming online
1:         } else {
1:             info = info.copy();
0:             info.setDestination(virtualDestination.getVirtualDestination());
1:             ActiveMQTopic topic = AdvisorySupport.getVirtualDestinationConsumerAdvisoryTopic(info.getDestination());
1: 
1:             if (virtualDestinationConsumers.putIfAbsent(info, virtualDestination) == null) {
1:                 fireConsumerAdvisory(context, info.getDestination(), topic, info);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void virtualDestinationRemoved(ConnectionContext context,
1:             VirtualDestination virtualDestination) {
1:         super.virtualDestinationRemoved(context, virtualDestination);
1: 
1:         if (virtualDestinations.remove(virtualDestination)) {
1:             try {
1:                 consumersLock.readLock().lock();
1:                 try {
1:                     // remove the demand created by the addition of the virtual destination
1:                     if (getBrokerService().isUseVirtualDestSubsOnCreation()) {
1:                         if (!AdvisorySupport.isAdvisoryTopic(virtualDestination.getVirtualDestination())) {
1:                             for (ConsumerInfo info : virtualDestinationConsumers.keySet()) {
1:                                 //find all consumers for this virtual destination
1:                                 if (virtualDestinationConsumers.get(info).equals(virtualDestination)) {
1:                                     fireVirtualDestinationRemoveAdvisory(context, info);
1:                                 }
1: 
0:                                 //check consumers created for the existence of a destination to see if they
0:                                 //match the consumerinfo and clean up
0:                                 for (VirtualConsumerPair activeMQDest : brokerConsumerDests.keySet()) {
0:                                     ConsumerInfo i = brokerConsumerDests.get(activeMQDest);
0:                                     if (info.equals(i)) {
0:                                         brokerConsumerDests.remove(activeMQDest);
1:                                     }
1:                                 }
1:                             }
1:                         }
1:                     }
1:                 } finally {
1:                     consumersLock.readLock().unlock();
1:                 }
1:             } catch (Exception e) {
1:                 handleFireFailure("virtualDestinationAdded", e);
1:             }
1:         }
1:     }
1: 
1:     private void fireVirtualDestinationRemoveAdvisory(ConnectionContext context,
1:             ConsumerInfo info) throws Exception {
1: 
1:         VirtualDestination virtualDestination = virtualDestinationConsumers.remove(info);
1:         if (virtualDestination != null) {
1:             ActiveMQTopic topic = AdvisorySupport.getVirtualDestinationConsumerAdvisoryTopic(virtualDestination.getVirtualDestination());
1: 
1:             ActiveMQDestination dest = info.getDestination();
1: 
1:             if (!dest.isTemporary() || destinations.containsKey(dest)) {
1:                 fireConsumerAdvisory(context, dest, topic, info.createRemoveCommand());
1:             }
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     private class VirtualConsumerPair {
1:         private final VirtualDestination virtualDestination;
1: 
1:         //destination that matches this virtualDestination as part target
1:         //this is so we can keep track of more than one destination that might
1:         //match the virtualDestination and cause demand
1:         private final ActiveMQDestination activeMQDestination;
1: 
1:         public VirtualConsumerPair(VirtualDestination virtualDestination,
1:                 ActiveMQDestination activeMQDestination) {
1:             super();
1:             this.virtualDestination = virtualDestination;
1:             this.activeMQDestination = activeMQDestination;
1:         }
1:         @Override
1:         public int hashCode() {
1:             final int prime = 31;
1:             int result = 1;
1:             result = prime * result + getOuterType().hashCode();
1:             result = prime
1:                     * result
1:                     + ((activeMQDestination == null) ? 0 : activeMQDestination
1:                             .hashCode());
1:             result = prime
1:                     * result
1:                     + ((virtualDestination == null) ? 0 : virtualDestination
1:                             .hashCode());
1:             return result;
1:         }
1:         @Override
1:         public boolean equals(Object obj) {
1:             if (this == obj)
1:                 return true;
1:             if (obj == null)
1:                 return false;
1:             if (getClass() != obj.getClass())
1:                 return false;
1:             VirtualConsumerPair other = (VirtualConsumerPair) obj;
1:             if (!getOuterType().equals(other.getOuterType()))
1:                 return false;
1:             if (activeMQDestination == null) {
1:                 if (other.activeMQDestination != null)
1:                     return false;
1:             } else if (!activeMQDestination.equals(other.activeMQDestination))
1:                 return false;
1:             if (virtualDestination == null) {
1:                 if (other.virtualDestination != null)
1:                     return false;
1:             } else if (!virtualDestination.equals(other.virtualDestination))
1:                 return false;
1:             return true;
1:         }
1:         private AdvisoryBroker getOuterType() {
1:             return AdvisoryBroker.this;
1:         }
1:     }
commit:fc3e026
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
1:             //try and find the URL on the transport connector and use if it exists else
1:             //try and find a default URL
1:             if (context.getConnector() instanceof TransportConnector
1:                     && ((TransportConnector) context.getConnector()).getPublishableConnectString() != null) {
1:                 url = ((TransportConnector) context.getConnector()).getPublishableConnectString();
1:             } else if (getBrokerService().getDefaultSocketURIString() != null) {
commit:edacc2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.BaseDestination;
/////////////////////////////////////////////////////////////////////////
0:                 if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
1:                     payload.clearBody();
1:                 }
/////////////////////////////////////////////////////////////////////////
0:                 if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
1:                     payload.clearBody();
1:                 }
/////////////////////////////////////////////////////////////////////////
0:                 if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
1:                     payload.clearBody();
1:                 }
/////////////////////////////////////////////////////////////////////////
0:                 if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
1:                     payload.clearBody();
1:                 }
/////////////////////////////////////////////////////////////////////////
0:                     if (!isIncludeBodyForAdvisory(messageReference.getMessage().getDestination())) {
1:                         payload.clearBody();
1:                     }
/////////////////////////////////////////////////////////////////////////
0:     protected boolean isIncludeBodyForAdvisory(ActiveMQDestination activemqDestination) {
0:         Destination destination = next.getDestinationMap(activemqDestination).get(activemqDestination);
0:         return (destination instanceof BaseDestination &&
0:                 ((BaseDestination) destination).isIncludeBodyForAdvisory()) ? true : false;
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:ddfa960
/////////////////////////////////////////////////////////////////////////
1:         //set properties
1:         advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_NAME, getBrokerName());
1:         String id = getBrokerId() != null ? getBrokerId().getValue() : "NOT_SET";
1:         advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, id);
1:         String url = getBrokerService().getVmConnectorURI().toString();
0:         //try and find the URL on the transport connector and use if it exists else
0:         //try and find a default URL
0:         if (context.getConnector() instanceof TransportConnector
0:                 && ((TransportConnector) context.getConnector()).getPublishableConnectString() != null) {
0:             url = ((TransportConnector) context.getConnector()).getPublishableConnectString();
0:         } else if (getBrokerService().getDefaultSocketURIString() != null) {
1:             url = getBrokerService().getDefaultSocketURIString();
1:         }
1:         advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL, url);
1:         //set the data structure
1:         advisoryMessage.setDataStructure(command);
1:         advisoryMessage.setPersistent(false);
1:         advisoryMessage.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
1:         advisoryMessage.setMessageId(new MessageId(advisoryProducerId, messageIdGenerator.getNextSequenceId()));
1:         advisoryMessage.setTargetConsumerId(targetConsumerId);
1:         advisoryMessage.setDestination(topic);
1:         advisoryMessage.setResponseRequired(false);
1:         advisoryMessage.setProducerId(advisoryProducerId);
1:         boolean originalFlowControl = context.isProducerFlowControl();
1:         final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:         producerExchange.setConnectionContext(context);
1:         producerExchange.setMutable(true);
1:         producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
1:         try {
1:             context.setProducerFlowControl(false);
1:             next.send(producerExchange, advisoryMessage);
1:         } finally {
1:             context.setProducerFlowControl(originalFlowControl);
commit:078f39f
/////////////////////////////////////////////////////////////////////////
1:                 advisoryMessage.setLongProperty(AdvisorySupport.MSG_PROPERTY_USAGE_COUNT, usage.getUsage());
commit:93092f7
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("{} detail: {}", message, cause, cause);
commit:179dc3a
/////////////////////////////////////////////////////////////////////////
1:                 BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:                 ActiveMQTopic topic = AdvisorySupport.getExpiredMessageTopic(baseDestination.getActiveMQDestination());
1:                 if (!baseDestination.isIncludeBodyForAdvisory()) {
/////////////////////////////////////////////////////////////////////////
1:                 BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:                 ActiveMQTopic topic = AdvisorySupport.getMessageConsumedAdvisoryTopic(baseDestination.getActiveMQDestination());
1:                 if (!baseDestination.isIncludeBodyForAdvisory()) {
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, baseDestination.getActiveMQDestination().getQualifiedName());
/////////////////////////////////////////////////////////////////////////
1:                 BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:                 ActiveMQTopic topic = AdvisorySupport.getMessageDeliveredAdvisoryTopic(baseDestination.getActiveMQDestination());
1:                 if (!baseDestination.isIncludeBodyForAdvisory()) {
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, baseDestination.getActiveMQDestination().getQualifiedName());
/////////////////////////////////////////////////////////////////////////
1:                 BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:                 ActiveMQTopic topic = AdvisorySupport.getMessageDiscardedAdvisoryTopic(baseDestination.getActiveMQDestination());
1:                 if (!baseDestination.isIncludeBodyForAdvisory()) {
/////////////////////////////////////////////////////////////////////////
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, baseDestination.getActiveMQDestination().getQualifiedName());
1: 
/////////////////////////////////////////////////////////////////////////
1:                     BaseDestination baseDestination = (BaseDestination) messageReference.getMessage().getRegionDestination();
1:                     ActiveMQTopic topic = AdvisorySupport.getMessageDLQdAdvisoryTopic(baseDestination.getActiveMQDestination());
1:                     if (!baseDestination.isIncludeBodyForAdvisory()) {
/////////////////////////////////////////////////////////////////////////
commit:75ff17a
/////////////////////////////////////////////////////////////////////////
0:                     advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, destination.getQualifiedName());
/////////////////////////////////////////////////////////////////////////
0:                     advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, destination.getQualifiedName());
/////////////////////////////////////////////////////////////////////////
0:                     advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, destination.getQualifiedName());
commit:6c5732b
/////////////////////////////////////////////////////////////////////////
0: import java.util.Comparator;
0: import java.util.concurrent.ConcurrentSkipListMap;
/////////////////////////////////////////////////////////////////////////
0:     class ConsumerIdKey {
0:         final ConsumerId delegate;
0:         final long creationTime = System.currentTimeMillis();
0:         ConsumerIdKey(ConsumerId id) {
0:             delegate = id;
1:         }
1: 
1:         @Override
0:         public boolean equals(Object other) {
0:             return delegate.equals(other);
1:         }
1: 
1:         @Override
0:         public int hashCode() {
0:             return delegate.hashCode();
1:         }
1:     }
0:     // replay consumer advisory messages in the order in which they arrive - allows duplicate suppression in
0:     // mesh networks with ttl>1
0:     protected final Map<ConsumerIdKey, ConsumerInfo> consumers = new ConcurrentSkipListMap<ConsumerIdKey, ConsumerInfo>(
0:             new Comparator<ConsumerIdKey>() {
1:                 @Override
0:                 public int compare(ConsumerIdKey o1, ConsumerIdKey o2) {
0:                     return (o1.creationTime < o2.creationTime ? -1 : (o1.delegate==o2.delegate ? 0 : 1));
1:                 }
1:             }
0:     );
1: 
/////////////////////////////////////////////////////////////////////////
0:             consumers.put(new ConsumerIdKey(info.getConsumerId()), info);
/////////////////////////////////////////////////////////////////////////
0:             consumers.remove(new ConsumerIdKey(info.getConsumerId()));
/////////////////////////////////////////////////////////////////////////
0:     public Map<ConsumerIdKey, ConsumerInfo> getAdvisoryConsumers() {
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
1:     public void isFull(ConnectionContext context, Destination destination, Usage<?> usage) {
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     protected final ConcurrentMap<ConnectionId, ConnectionInfo> connections = new ConcurrentHashMap<ConnectionId, ConnectionInfo>();
1:     protected final ConcurrentMap<ProducerId, ProducerInfo> producers = new ConcurrentHashMap<ProducerId, ProducerInfo>();
1:     protected final ConcurrentMap<ActiveMQDestination, DestinationInfo> destinations = new ConcurrentHashMap<ActiveMQDestination, DestinationInfo>();
1:     protected final ConcurrentMap<BrokerInfo, ActiveMQMessage> networkBridges = new ConcurrentHashMap<BrokerInfo, ActiveMQMessage>();
commit:b2afb8c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.LinkedHashMap;
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
/////////////////////////////////////////////////////////////////////////
1:     private final ReentrantReadWriteLock consumersLock = new ReentrantReadWriteLock();
1:     protected final Map<ConsumerId, ConsumerInfo> consumers = new LinkedHashMap<ConsumerId, ConsumerInfo>();
/////////////////////////////////////////////////////////////////////////
1:             consumersLock.writeLock().lock();
1:             try {
1:                 consumers.put(info.getConsumerId(), info);
1:             } finally {
1:                 consumersLock.writeLock().unlock();
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 consumersLock.readLock().lock();
1:                 try {
1:                     for (Iterator<ConsumerInfo> iter = consumers.values().iterator(); iter.hasNext(); ) {
1:                         ConsumerInfo value = iter.next();
1:                         ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(value.getDestination());
1:                         fireConsumerAdvisory(context, value.getDestination(), topic, value, info.getConsumerId());
1:                     }
1:                 } finally {
1:                     consumersLock.readLock().unlock();
/////////////////////////////////////////////////////////////////////////
1:             consumersLock.writeLock().lock();
1:             try {
1:                 consumers.remove(info.getConsumerId());
1:             } finally {
1:                 consumersLock.writeLock().unlock();
1:             }
/////////////////////////////////////////////////////////////////////////
1:     public Collection<ConsumerInfo> getAdvisoryConsumers() {
1:         consumersLock.readLock().lock();
1:         try {
1:             return new ArrayList<ConsumerInfo>(consumers.values());
1:         } finally {
1:             consumersLock.readLock().unlock();
1:         }
commit:6c703ac
/////////////////////////////////////////////////////////////////////////
1:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_MESSAGE_ID, payload.getMessageId().toString());
0:                 ActiveMQDestination destination = payload.getDestination();
0:                 if (destination != null) {
0:                     advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
1:                 }
1:                 fireAdvisory(context, topic, payload, null, advisoryMessage);
/////////////////////////////////////////////////////////////////////////
1:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_MESSAGE_ID, payload.getMessageId().toString());
0:                 ActiveMQDestination destination = payload.getDestination();
0:                 if (destination != null) {
0:                     advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
1:                 }
1:                 fireAdvisory(context, topic, payload, null, advisoryMessage);
/////////////////////////////////////////////////////////////////////////
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_MESSAGE_ID, payload.getMessageId().toString());
0:                 ActiveMQDestination destination = payload.getDestination();
0:                 if (destination != null) {
0:                     advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
1:                 }
commit:4c38b03
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.DestinationInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
/////////////////////////////////////////////////////////////////////////
1: 
1:         RegionBroker regionBroker = null;
1:         if (next instanceof RegionBroker) {
1:             regionBroker = (RegionBroker) next;
1:         } else {
1:             BrokerService service = next.getBrokerService();
1:             regionBroker = (RegionBroker) service.getRegionBroker();
1:         }
1: 
1:         if (regionBroker == null) {
1:             LOG.warn("Cannot locate a RegionBroker instance to pass along the removeSubscription call");
1:             throw new IllegalStateException("No RegionBroker found.");
1:         }
1: 
1:         DurableTopicSubscription sub = ((TopicRegion) regionBroker.getTopicRegion()).getDurableSubscription(key);
commit:74dafd7
/////////////////////////////////////////////////////////////////////////
0: import java.util.Queue;
0: import java.util.concurrent.ConcurrentLinkedQueue;
/////////////////////////////////////////////////////////////////////////
0:     protected final Queue<ConsumerInfo> consumers = new ConcurrentLinkedQueue<ConsumerInfo>();
1:     
/////////////////////////////////////////////////////////////////////////
0:             consumers.offer(info);
/////////////////////////////////////////////////////////////////////////
0:                 for (Iterator<ConsumerInfo> iter = consumers.iterator(); iter.hasNext();) {
/////////////////////////////////////////////////////////////////////////
0:             consumers.remove(info);
/////////////////////////////////////////////////////////////////////////
0:     public Queue<ConsumerInfo> getAdvisoryConsumers() {
commit:8f7dbcc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                     LOG.trace("Failed to remove:{} from the consumers map: {}", key, consumers);
0:                 LOG.trace("Failed to find consumer:{} in creation time tracking map: ", info.getConsumerId());
commit:2142045
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.BrokerInfo;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.ConnectionId;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.ConsumerId;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.DestinationInfo;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.command.ProducerInfo;
0: import org.apache.activemq.command.RemoveSubscriptionInfo;
/////////////////////////////////////////////////////////////////////////
0:         private final ConsumerId delegate;
0:         private final long creationTime;
1: 
0:             this.delegate = id;
0:             this.creationTime = System.currentTimeMillis();
1:         }
1: 
0:         ConsumerIdKey(ConsumerId id, long creationTime) {
0:             this.delegate = id;
0:             this.creationTime = creationTime;
0:             if (this == other) {
0:                 return true;
1:             }
0:             if (other == null || other.getClass() != ConsumerIdKey.class) {
0:                 return false;
1:             }
1: 
0:             ConsumerIdKey key = (ConsumerIdKey) other;
1: 
0:             return delegate.equals(key.delegate);
1: 
1:         @Override
0:         public String toString() {
0:             return "ConsumerIdKey { " + delegate + " }";
1:         }
1: 
0:         public ConsumerId getConsumerId() {
0:             return this.delegate;
1:         }
1: 
0:         public long getCreationTime() {
0:             return this.creationTime;
1:         }
1: 
0:         new Comparator<ConsumerIdKey>() {
1:             @Override
0:             public int compare(ConsumerIdKey o1, ConsumerIdKey o2) {
0:                 return (o1.creationTime < o2.creationTime ? -1 : o1.equals(o2) ? 0 : 1);
1:         }
0:     protected final Map<ConsumerId, Long> consumerTracker = new ConcurrentHashMap<ConsumerId, Long>();
1: 
/////////////////////////////////////////////////////////////////////////
0:             ConsumerIdKey key = new ConsumerIdKey(info.getConsumerId());
0:             consumerTracker.put(key.getConsumerId(), key.getCreationTime());
0:             consumers.put(key, info);
0:             LOG.info("Added {} to the map:", key);
/////////////////////////////////////////////////////////////////////////
1: 
0:             Object value = consumerTracker.remove(info.getConsumerId());
0:             if (value != null) {
0:                 Long creationTime = (Long) value;
0:                 ConsumerIdKey key = new ConsumerIdKey(info.getConsumerId(), creationTime);
0:                 if (consumers.remove(key) == null) {
0:                     LOG.info("Failed to remove:{} from the consumers map: {}", key, consumers);
1:                 }
1:             } else {
0:                 LOG.info("Failed to find consumer:{} in creation time tracking map: ", info.getConsumerId());
1:             }
1: 
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:         LOG.warn("Failed to fire {} advisory, reason: {}", message, cause);
0:         LOG.debug("{} detail: {}", message, cause);
author:rajdavies
-------------------------------------------------------------------------------
commit:11781d3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.*;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 for (Iterator<ConnectionInfo> iter = connections.values().iterator(); iter.hasNext(); ) {
/////////////////////////////////////////////////////////////////////////
1:                 for (Iterator<ProducerInfo> iter = producers.values().iterator(); iter.hasNext(); ) {
1:                     fireProducerAdvisory(context, value.getDestination(), topic, value, info.getConsumerId());
0:                 for (Iterator<ConsumerInfo> iter = consumers.iterator(); iter.hasNext(); ) {
0:                     fireConsumerAdvisory(context, value.getDestination(), topic, value, info.getConsumerId());
1:                 for (Iterator<BrokerInfo> iter = networkBridges.keySet().iterator(); iter.hasNext(); ) {
/////////////////////////////////////////////////////////////////////////
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean create) throws Exception {
1:         Destination answer = super.addDestination(context, destination, create);
1:             if (previous == null) {
/////////////////////////////////////////////////////////////////////////
1:             if (previous == null) {
/////////////////////////////////////////////////////////////////////////
1:             for (ActiveMQTopic advisoryDestination : advisoryDestinations) {
/////////////////////////////////////////////////////////////////////////
1:             for (ActiveMQTopic advisoryDestination : advisoryDestinations) {
/////////////////////////////////////////////////////////////////////////
1:                 fireConsumerAdvisory(context, dest, topic, info.createRemoveCommand());
/////////////////////////////////////////////////////////////////////////
0:         DurableTopicSubscription sub = ((TopicRegion) ((RegionBroker) next).getTopicRegion()).getDurableSubscription(key);
/////////////////////////////////////////////////////////////////////////
1:             if (!dest.isTemporary() || destinations.containsKey(dest)) {
1:                 fireProducerAdvisory(context, dest, topic, info.createRemoveCommand());
/////////////////////////////////////////////////////////////////////////
1:             if (!messageReference.isAdvisory()) {
/////////////////////////////////////////////////////////////////////////
1:             if (!messageReference.isAdvisory()) {
1:                 fireAdvisory(context, topic, payload);
/////////////////////////////////////////////////////////////////////////
0:                 fireAdvisory(context, topic, payload);
/////////////////////////////////////////////////////////////////////////
1:                     advisoryMessage.setIntProperty(AdvisorySupport.MSG_PROPERTY_DISCARDED_COUNT, ((TopicSubscription) sub).discarded());
/////////////////////////////////////////////////////////////////////////
1:     public void slowConsumer(ConnectionContext context, Destination destination, Subscription subs) {
1:         super.slowConsumer(context, destination, subs);
/////////////////////////////////////////////////////////////////////////
1:     public void fastProducer(ConnectionContext context, ProducerInfo producerInfo, ActiveMQDestination destination) {
/////////////////////////////////////////////////////////////////////////
1:             fireAdvisory(context, topic, null, null, advisoryMessage);
/////////////////////////////////////////////////////////////////////////
1:                 if (!messageReference.isAdvisory()) {
0:                     fireAdvisory(context, topic, payload);
/////////////////////////////////////////////////////////////////////////
1:             if (brokerInfo != null) {
1:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:                 advisoryMessage.setBooleanProperty("started", true);
1:                 advisoryMessage.setBooleanProperty("createdByDuplex", createdByDuplex);
1:                 advisoryMessage.setStringProperty("remoteIp", remoteIp);
1:                 networkBridges.putIfAbsent(brokerInfo, advisoryMessage);
1:                 ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
1:                 ConnectionContext context = new ConnectionContext();
1:                 context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
1:                 context.setBroker(getBrokerService().getBroker());
1:                 fireAdvisory(context, topic, brokerInfo, null, advisoryMessage);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (brokerInfo != null) {
1:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:                 advisoryMessage.setBooleanProperty("started", false);
1:                 networkBridges.remove(brokerInfo);
1:                 ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
1:                 ConnectionContext context = new ConnectionContext();
1:                 context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
1:                 context.setBroker(getBrokerService().getBroker());
1:                 fireAdvisory(context, topic, brokerInfo, null, advisoryMessage);
1:             }
/////////////////////////////////////////////////////////////////////////
1:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQDestination consumerDestination, ActiveMQTopic topic, Command command) throws Exception {
1:         fireConsumerAdvisory(context, consumerDestination, topic, command, null);
1:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQDestination consumerDestination, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
1:         Set<Destination> set = getDestinations(consumerDestination);
1:             for (Destination dest : set) {
/////////////////////////////////////////////////////////////////////////
1:     protected void fireProducerAdvisory(ConnectionContext context, ActiveMQDestination producerDestination, ActiveMQTopic topic, Command command) throws Exception {
1:         fireProducerAdvisory(context, producerDestination, topic, command, null);
1:     protected void fireProducerAdvisory(ConnectionContext context, ActiveMQDestination producerDestination, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:45c399d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.TopicRegion;
1: import org.apache.activemq.broker.region.TopicSubscription;
/////////////////////////////////////////////////////////////////////////
1:         super.removeSubscription(context, info);
1: 
/////////////////////////////////////////////////////////////////////////
commit:0bb9013
/////////////////////////////////////////////////////////////////////////
1:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
0:                                          Subscription subscription) {
0:         boolean wasDLQd = super.sendToDeadLetterQueue(context, messageReference, subscription);
1:         if (wasDLQd) {
1:             try {
0:                 if(!messageReference.isAdvisory()) {
0:                     ActiveMQTopic topic = AdvisorySupport.getMessageDLQdAdvisoryTopic(messageReference.getMessage().getDestination());
1:                     Message payload = messageReference.getMessage().copy();
0:                     payload.clearBody();
0:                     fireAdvisory(context, topic,payload);
1:                 }
1:             } catch (Exception e) {
1:                 handleFireFailure("add to DLQ", e);
1: 
1:         return wasDLQd;
commit:bf1f755
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.BrokerInfo;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.ConnectionId;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.ConsumerId;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.DestinationInfo;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.command.ProducerInfo;
/////////////////////////////////////////////////////////////////////////
1:             if (!AdvisorySupport.isAdvisoryTopic(destination.getActiveMQDestination())) {
1:                 ActiveMQTopic topic = AdvisorySupport.getSlowConsumerAdvisoryTopic(destination.getActiveMQDestination());
1:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, subs.getConsumerInfo().getConsumerId().toString());
1:                 fireAdvisory(context, topic, subs.getConsumerInfo(), null, advisoryMessage);
1:             }
/////////////////////////////////////////////////////////////////////////
0:             if (!AdvisorySupport.isAdvisoryTopic(producerInfo.getDestination())) {
0:                 ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(producerInfo.getDestination());
1:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_PRODUCER_ID, producerInfo.getProducerId().toString());
1:                 fireAdvisory(context, topic, producerInfo, null, advisoryMessage);
1:             }
commit:6a631a9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQTopic[] advisoryDestinations = AdvisorySupport.getAllDestinationAdvisoryTopics(destination);
0:             for(ActiveMQTopic advisoryDestination : advisoryDestinations) {
1:                 try {
1:                     next.removeDestination(context, advisoryDestination, -1);
1:                 } catch (Exception expectedIfDestinationDidNotExistYet) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQTopic[] advisoryDestinations = AdvisorySupport.getAllDestinationAdvisoryTopics(destInfo.getDestination());
0:             for(ActiveMQTopic advisoryDestination : advisoryDestinations) {
1:                 try {
1:                     next.removeDestination(context, advisoryDestination, -1);
1:                 } catch (Exception expectedIfDestinationDidNotExistYet) {
1:                 }
commit:68bcf0f
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             // We check here whether the Destination is Temporary Destination specific or not since we
1:             // can avoid sending advisory messages to the consumer if it only wants Temporary Destination
1:             // notifications.  If its not just temporary destination related destinations then we have
1:             // to send them all, a composite destination could want both.
1:             if (AdvisorySupport.isTempDestinationAdvisoryTopic(info.getDestination())) {
1:                 // Replay the temporary destinations.
1:                 for (DestinationInfo destination : destinations.values()) {
1:                     if (destination.getDestination().isTemporary()) {
1:                         ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination.getDestination());
1:                         fireAdvisory(context, topic, destination, info.getConsumerId());
1:                     }
1:                 }
1:             } else if (AdvisorySupport.isDestinationAdvisoryTopic(info.getDestination())) {
1:                 // Replay all the destinations.
1:                 for (DestinationInfo destination : destinations.values()) {
1:                     ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination.getDestination());
1:                     fireAdvisory(context, topic, destination, info.getConsumerId());
/////////////////////////////////////////////////////////////////////////
0:             } catch (Exception expectedIfDestinationDidNotExistYet) {
/////////////////////////////////////////////////////////////////////////
1:         super.removeDestinationInfo(context, destInfo);
/////////////////////////////////////////////////////////////////////////
0:                 fireConsumerAdvisory(context,dest, topic, info.createRemoveCommand());
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void nowMasterBroker() {
1:             ActiveMQMessage advisoryMessage = new ActiveMQMessage();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:708be6d
/////////////////////////////////////////////////////////////////////////
1:                                          Subscription subscription, Throwable poisonCause) {
1:         boolean wasDLQd = super.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
commit:def8c77
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.BrokerInfo;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.ConnectionId;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.ConsumerId;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.DestinationInfo;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.command.ProducerInfo;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8012f28
/////////////////////////////////////////////////////////////////////////
1:     public void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId, ActiveMQMessage advisoryMessage) throws Exception {
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
0:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {
1:         super.fastProducer(context, producerInfo, destination);
1:             if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:                 ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(destination);
commit:d4ccc50
/////////////////////////////////////////////////////////////////////////
1:             // ensure we don't modify (and loose/overwrite) an in-flight add advisory, so duplicate
1:             info = info.copy();
/////////////////////////////////////////////////////////////////////////
1:             // ensure we don't modify (and loose/overwrite) an in-flight add advisory, so duplicate
1:             info = info.copy();
/////////////////////////////////////////////////////////////////////////
commit:d4d3915
/////////////////////////////////////////////////////////////////////////
1:             handleFireFailure("expired", e);
/////////////////////////////////////////////////////////////////////////
1:             handleFireFailure("consumed", e);
/////////////////////////////////////////////////////////////////////////
1:             handleFireFailure("delivered", e);
/////////////////////////////////////////////////////////////////////////
1:             handleFireFailure("discarded", e);
/////////////////////////////////////////////////////////////////////////
1:             handleFireFailure("slow consumer", e);
/////////////////////////////////////////////////////////////////////////
1:             handleFireFailure("fast producer", e);
/////////////////////////////////////////////////////////////////////////
1:                 handleFireFailure("is full", e);
/////////////////////////////////////////////////////////////////////////
1:             handleFireFailure("now master broker", e);
/////////////////////////////////////////////////////////////////////////
0:             handleFireFailure("add to DLQ", e);
/////////////////////////////////////////////////////////////////////////
1:             handleFireFailure("network bridge started", e);
/////////////////////////////////////////////////////////////////////////
1:             handleFireFailure("network bridge stopped", e);
1:         }
1:     }
1: 
1:     private void handleFireFailure(String message, Throwable cause) {
0:         LOG.warn("Failed to fire "  + message + " advisory, reason: " + cause);
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug(message + " detail", cause);
commit:27c1719
/////////////////////////////////////////////////////////////////////////
1:     public void messageExpired(ConnectionContext context, MessageReference messageReference, Subscription subscription) {
1:         super.messageExpired(context, messageReference, subscription);
/////////////////////////////////////////////////////////////////////////
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
0:                                       Subscription subscription){
0:         super.sendToDeadLetterQueue(context, messageReference, subscription);
commit:0ed0ba5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if (getBrokerService().getDefaultSocketURIString() != null) {
0:                 url = getBrokerService().getDefaultSocketURIString();
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.TopicSubscription;
/////////////////////////////////////////////////////////////////////////
1:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
1:         super.messageDiscarded(context, sub, messageReference);
1:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:                 if (sub instanceof TopicSubscription) {
0:                     advisoryMessage.setIntProperty(AdvisorySupport.MSG_PROPERTY_DISCARDED_COUNT, ((TopicSubscription)sub).discarded());
1:                 }
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, sub.getConsumerInfo().getConsumerId().toString());
1:                 fireAdvisory(context, topic, payload, null, advisoryMessage);
/////////////////////////////////////////////////////////////////////////
1:         advisoryMessage.setIntProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_COUNT, count);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e06685f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.*;
0: import org.apache.activemq.command.*;
1: import org.apache.activemq.util.SubscriptionKey;
/////////////////////////////////////////////////////////////////////////
1:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:         SubscriptionKey key = new SubscriptionKey(context.getClientId(), info.getSubscriptionName());
1: 
0:         DurableTopicSubscription sub = ((TopicRegion)((RegionBroker)next).getTopicRegion()).getDurableSubscription(key);
1: 
1:         if (sub == null) {
1:             LOG.warn("We cannot send an advisory message for a durable sub removal when we don't know about the durable sub");
1:             return;
1:         }
1: 
1:         ActiveMQDestination dest = sub.getConsumerInfo().getDestination();
1: 
0:         super.removeSubscription(context, info);
1: 
1:         // Don't advise advisory topics.
1:         if (!AdvisorySupport.isAdvisoryTopic(dest)) {
1:             ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(dest);
1:             fireConsumerAdvisory(context, dest, topic, info);
1:         }
1: 
1:     }
1: 
1:     @Override
commit:7880521
/////////////////////////////////////////////////////////////////////////
0:     protected final ConcurrentHashMap<BrokerInfo, ActiveMQMessage> networkBridges = new ConcurrentHashMap<BrokerInfo, ActiveMQMessage>();
/////////////////////////////////////////////////////////////////////////
1: 
1:             // Replay network bridges
1:             if (AdvisorySupport.isNetworkBridgeAdvisoryTopic(info.getDestination())) {
0:                 for (Iterator<BrokerInfo> iter = networkBridges.keySet().iterator(); iter.hasNext();) {
1:                     BrokerInfo key = iter.next();
1:                     ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
1:                     fireAdvisory(context, topic, key, null, networkBridges.get(key));
1:                 }
1:             }
/////////////////////////////////////////////////////////////////////////
0:              networkBridges.putIfAbsent(brokerInfo, advisoryMessage);
/////////////////////////////////////////////////////////////////////////
0:              networkBridges.remove(brokerInfo);
commit:37384a1
/////////////////////////////////////////////////////////////////////////
1:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex, String remoteIp) {
0:              advisoryMessage.setStringProperty("remoteIp", remoteIp);
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AdvisoryBroker.class);
commit:bd49b52
/////////////////////////////////////////////////////////////////////////
0:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex) {
0:              advisoryMessage.setBooleanProperty("createdByDuplex", createdByDuplex);
commit:663d5db
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.*;
0: import org.apache.activemq.network.NetworkBridge;
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public void networkBridgeStarted(BrokerInfo brokerInfo) {
1:         try {
0:          if (brokerInfo != null) {
1:              ActiveMQMessage advisoryMessage = new ActiveMQMessage();
0:              advisoryMessage.setBooleanProperty("started", true);
1: 
0:              ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
1: 
1:              ConnectionContext context = new ConnectionContext();
1:              context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
1:              context.setBroker(getBrokerService().getBroker());
0:              fireAdvisory(context, topic, brokerInfo, null, advisoryMessage);
1:          }
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire network bridge advisory");
1:         }
1:     }
1: 
1:     @Override
1:     public void networkBridgeStopped(BrokerInfo brokerInfo) {
1:         try {
0:          if (brokerInfo != null) {
1:              ActiveMQMessage advisoryMessage = new ActiveMQMessage();
0:              advisoryMessage.setBooleanProperty("started", false);
1: 
0:              ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
1: 
1:              ConnectionContext context = new ConnectionContext();
1:              context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
1:              context.setBroker(getBrokerService().getBroker());
0:              fireAdvisory(context, topic, brokerInfo, null, advisoryMessage);
1:          }
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire network bridge advisory");
1:         }
1:     }
1: 
commit:ae5300b
/////////////////////////////////////////////////////////////////////////
1:             if (!dest.isTemporary() || destinations.containsKey(dest)) {
commit:479acad
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.security.SecurityContext;
/////////////////////////////////////////////////////////////////////////
0:             context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
author:Christian Posta
-------------------------------------------------------------------------------
commit:b7c32d9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.*;
0: import org.apache.activemq.util.SubscriptionKey;
/////////////////////////////////////////////////////////////////////////
0:     protected final ConcurrentHashMap<SubscriptionKey, ActiveMQTopic> durableSubscriptions = new ConcurrentHashMap<SubscriptionKey, ActiveMQTopic>();
/////////////////////////////////////////////////////////////////////////
0:             if (info.getDestination().isTopic() && info.isDurable()) {
0:                 SubscriptionKey key = new SubscriptionKey(context.getClientId(), info.getSubscriptionName());
0:                 if (!this.durableSubscriptions.contains(key)) {
0:                     this.durableSubscriptions.put(key, (ActiveMQTopic)info.getDestination());
1:                 }
1:             }
/////////////////////////////////////////////////////////////////////////
0:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
0:         super.removeSubscription(context, info);
1: 
0:         SubscriptionKey key = new SubscriptionKey(context.getClientId(), info.getSubscriptionName());
1: 
0:         ActiveMQTopic dest = durableSubscriptions.get(key);
0:         if (dest == null) {
0:             LOG.warn("We cannot send an advisory message for a durable sub removal when we don't know about the durable sub");
1:         }
1: 
1:         // Don't advise advisory topics.
1:         if (!AdvisorySupport.isAdvisoryTopic(dest)) {
1:             ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(dest);
0:             durableSubscriptions.remove(key);
0:             fireConsumerAdvisory(context,dest, topic, info);
1:         }
1: 
1:     }
1: 
1:     @Override
commit:915d66d
/////////////////////////////////////////////////////////////////////////
1:         // do not distribute passwords in advisory messages. usernames okay
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:b5df4ba
/////////////////////////////////////////////////////////////////////////
0: import java.util.Date;
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:             DestinationInfo previous = destinations.putIfAbsent(destination, info);
0:             if( previous==null ) {
1:                 ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
1:                 fireAdvisory(context, topic, info);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             DestinationInfo previous = destinations.putIfAbsent(destination, info);
0:             if( previous==null ) {
1:                 ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
1:                 fireAdvisory(context, topic, info);
1:             }
/////////////////////////////////////////////////////////////////////////
commit:9da7e31
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.state.ProducerState;
/////////////////////////////////////////////////////////////////////////
0:             producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ConnectionId;
/////////////////////////////////////////////////////////////////////////
0:     protected final ConcurrentHashMap<ConnectionId, ConnectionInfo> connections = new ConcurrentHashMap<ConnectionId, ConnectionInfo>();
0:     protected final ConcurrentHashMap<ConsumerId, ConsumerInfo> consumers = new ConcurrentHashMap<ConsumerId, ConsumerInfo>();
0:     protected final ConcurrentHashMap<ProducerId, ProducerInfo> producers = new ConcurrentHashMap<ProducerId, ProducerInfo>();
0:     protected final ConcurrentHashMap<ActiveMQDestination, DestinationInfo> destinations = new ConcurrentHashMap<ActiveMQDestination, DestinationInfo>();
/////////////////////////////////////////////////////////////////////////
0:                 for (Iterator<ConnectionInfo> iter = connections.values().iterator(); iter.hasNext();) {
1:                     ConnectionInfo value = iter.next();
/////////////////////////////////////////////////////////////////////////
0:                 for (Iterator<DestinationInfo> iter = destinations.values().iterator(); iter.hasNext();) {
0:                     DestinationInfo value = iter.next();
/////////////////////////////////////////////////////////////////////////
0:                 for (Iterator<ProducerInfo> iter = producers.values().iterator(); iter.hasNext();) {
1:                     ProducerInfo value = iter.next();
/////////////////////////////////////////////////////////////////////////
0:                 for (Iterator<ConsumerInfo> iter = consumers.values().iterator(); iter.hasNext();) {
0:                     ConsumerInfo value = iter.next();
/////////////////////////////////////////////////////////////////////////
1:         DestinationInfo info = destinations.remove(destination);
/////////////////////////////////////////////////////////////////////////
1:         DestinationInfo info = destinations.remove(destInfo.getDestination());
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(AdvisoryBroker.class);
1:     private static final IdGenerator ID_GENERATOR = new IdGenerator();
1:     
1:     private final LongSequenceGenerator messageIdGenerator = new LongSequenceGenerator();
1:         advisoryProducerId.setConnectionId(ID_GENERATOR.generateId());
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("Failed to fire message expired advisory");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * This broker filter handles tracking the state of the broker for purposes of
1:  * publishing advisory messages to advisory consumers.
1: 
1: 
1:     protected final ProducerId advisoryProducerId = new ProducerId();
1: 
1:         fireAdvisory(context, topic, info);
/////////////////////////////////////////////////////////////////////////
1:         if (!AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
1: 
1:             // We need to replay all the previously collected state objects
1:             // for this newly added consumer.
1:             if (AdvisorySupport.isConnectionAdvisoryTopic(info.getDestination())) {
0:                     ConnectionInfo value = (ConnectionInfo)iter.next();
1: 
0:             // We need to replay all the previously collected destination
0:             // objects
1:             // for this newly added consumer.
0:             if (AdvisorySupport.isDestinationAdvisoryTopic(info.getDestination())) {
0:                     DestinationInfo value = (DestinationInfo)iter.next();
1:             if (AdvisorySupport.isProducerAdvisoryTopic(info.getDestination())) {
0:                     ProducerInfo value = (ProducerInfo)iter.next();
1: 
1:             if (AdvisorySupport.isConsumerAdvisoryTopic(info.getDestination())) {
0:                     ConsumerInfo value = (ConsumerInfo)iter.next();
/////////////////////////////////////////////////////////////////////////
1:         // Don't advise advisory topics.
1:         if (info.getDestination() != null && !AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
1: 
0:         Destination answer = next.addDestination(context, destination);
1:         if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:             fireAdvisory(context, topic, info);
1: 
1:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:         ActiveMQDestination destination = info.getDestination();
1:         next.addDestinationInfo(context, info);
1: 
1:         if (!AdvisorySupport.isAdvisoryTopic(destination)) {
1:             fireAdvisory(context, topic, info);
0:             destinations.put(destination, info);
0:         DestinationInfo info = (DestinationInfo)destinations.remove(destination);
1:         if (info != null) {
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo destInfo) throws Exception {
0:         next.removeDestinationInfo(context, destInfo);
0:         DestinationInfo info = (DestinationInfo)destinations.remove(destInfo.getDestination());
1: 
1:         if (info != null) {
/////////////////////////////////////////////////////////////////////////
0:         if (!AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
/////////////////////////////////////////////////////////////////////////
0:         if (info.getDestination() != null && !AdvisorySupport.isAdvisoryTopic(info.getDestination())) {
0: 
0:     public void messageExpired(ConnectionContext context, MessageReference messageReference) {
0:         next.messageExpired(context, messageReference);
1:         try {
0:             ActiveMQTopic topic = AdvisorySupport.getExpiredMessageTopic(messageReference.getMessage().getDestination());
0:             fireAdvisory(context, topic, messageReference.getMessage());
1:         } catch (Exception e) {
0: 
0: 
0: 
0: 
0: 
0: 
0:     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId, ActiveMQMessage advisoryMessage) throws Exception {
0:         if (getBrokerService().isStarted()) {
0:             advisoryMessage.setMessageId(new MessageId(advisoryProducerId, messageIdGenerator.getNextSequenceId()));
0:             boolean originalFlowControl = context.isProducerFlowControl();
0:             final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:             try {
0:                 next.send(producerExchange, advisoryMessage);
0:             } finally {
commit:0945e32
/////////////////////////////////////////////////////////////////////////
0:         if( !AdvisorySupport.isAdvisoryTopic(destination) ) { 
1:             ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
1:             DestinationInfo info = new DestinationInfo(context.getConnectionId(), DestinationInfo.ADD_OPERATION_TYPE, destination);
0:             fireAdvisory(context, topic, info);        
0:             destinations.put(destination, info);
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if( !AdvisorySupport.isAdvisoryTopic(destination) ) { 
0:             ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
0:             fireAdvisory(context, topic, info);        
0:             destinations.put(destination, info); 
1:         }
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:cb1d21f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
0:         next.removeDestination(context, destination, timeout);
0:         DestinationInfo info = (DestinationInfo) destinations.remove(destination);
0:         if( info !=null ) {
1:             info.setDestination(destination);
1:             info.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
0:             ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
0:             fireAdvisory(context, topic, info);
1:             try {
0:                 next.removeDestination(context, AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination()), -1);
0:             } catch (Exception expectedIfDestinationDidNotExistYet) {
1:             }
1:             try {
0:                 next.removeDestination(context, AdvisorySupport.getProducerAdvisoryTopic(info.getDestination()), -1);
0:             } catch (Exception expectedIfDestinationDidNotExistYet) {
1:             }
0:        
1:     }
0:     
0:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo destInfo) throws Exception{
0:         next.removeDestinationInfo(context, destInfo);
0:         DestinationInfo info = (DestinationInfo) destinations.remove(destInfo.getDestination());
0: 
0:         if( info !=null ) {
1:             info.setDestination(destInfo.getDestination());
1:             info.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
1:             ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destInfo.getDestination());
0:             fireAdvisory(context, topic, info);
1:             try {
0:                 next.removeDestination(context, AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination()), -1);
0:             } catch (Exception expectedIfDestinationDidNotExistYet) {
1:             }
1:             try {
0:                 next.removeDestination(context, AdvisorySupport.getProducerAdvisoryTopic(info.getDestination()), -1);
0:             } catch (Exception expectedIfDestinationDidNotExistYet) {
1:             }
0: 
commit:3043e7a
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             next.removeDestination(context, AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination()), 0);
0:         } catch (Exception expectedIfDestinationDidNotExistYet) {
1:         }
1:         try {
0:             next.removeDestination(context, AdvisorySupport.getProducerAdvisoryTopic(info.getDestination()), 0); 
0:         } catch (Exception expectedIfDestinationDidNotExistYet) {
1:         }
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command) throws Exception {
1:     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
0:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command) throws Exception {
0:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
0:     protected void fireProducerAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command) throws Exception {
0:     protected void fireProducerAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
0:     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId, ActiveMQMessage advisoryMessage) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
0: 
1: import java.util.Iterator;
0: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.broker.region.Destination;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.ConsumerId;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.DestinationInfo;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.util.IdGenerator;
1: import org.apache.activemq.util.LongSequenceGenerator;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
0: 
1: /**
0:  * This broker filter handles tracking the state of the broker for purposes of publishing advisory messages
0:  * to advisory consumers.
0:  * 
0:  * @version $Revision$
1:  */
1: public class AdvisoryBroker extends BrokerFilter {
0:     
0:     //private static final Log log = LogFactory.getLog(AdvisoryBroker.class);
0:     
0:     protected final ConcurrentHashMap connections = new ConcurrentHashMap();
0:     protected final ConcurrentHashMap consumers = new ConcurrentHashMap();
0:     protected final ConcurrentHashMap producers = new ConcurrentHashMap();
0:     protected final ConcurrentHashMap destinations = new ConcurrentHashMap();
0: 
0:     static final private IdGenerator idGenerator = new IdGenerator();
0:     protected final ProducerId advisoryProducerId = new ProducerId();    
0:     final private LongSequenceGenerator messageIdGenerator = new LongSequenceGenerator();
0:     
1:     public AdvisoryBroker(Broker next) {
1:         super(next);
0:         advisoryProducerId.setConnectionId(idGenerator.generateId());
1:     }
0: 
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Throwable {
0:         next.addConnection(context, info);
0: 
1:         ActiveMQTopic topic = AdvisorySupport.getConnectionAdvisoryTopic();
0:         fireAdvisory(context, topic, info);        
0:         connections.put(info.getConnectionId(), info);
1:     }
0: 
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable {
0:         next.addConsumer(context, info);
0: 
1:         // Don't advise advisory topics.
0:         if( !AdvisorySupport.isAdvisoryTopic(info.getDestination()) ) { 
1:             ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination());
0:             consumers.put(info.getConsumerId(), info);
0:             fireConsumerAdvisory(context, topic, info);
0:         } else {
0:             
0:             // We need to replay all the previously collected state objects 
0:             // for this newly added consumer.            
0:             if( AdvisorySupport.isConnectionAdvisoryTopic(info.getDestination()) ) {
1:                 // Replay the connections.
0:                 for (Iterator iter = connections.values().iterator(); iter.hasNext();) {
0:                     ConnectionInfo value = (ConnectionInfo) iter.next();
1:                     ActiveMQTopic topic = AdvisorySupport.getConnectionAdvisoryTopic();
1:                     fireAdvisory(context, topic, value, info.getConsumerId());
1:                 }
1:             }
0:             
0:             // We need to replay all the previously collected destination objects 
0:             // for this newly added consumer.            
0:             if( AdvisorySupport.isDestinationAdvisoryTopic(info.getDestination()) ) {
0:                 // Replay the destinations.
0:                 for (Iterator iter = destinations.values().iterator(); iter.hasNext();) {
0:                     DestinationInfo value = (DestinationInfo) iter.next();
0:                     ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(value.getDestination());
1:                     fireAdvisory(context, topic, value, info.getConsumerId());
1:                 }
1:             }
0: 
1:             // Replay the producers.
0:             if( AdvisorySupport.isProducerAdvisoryTopic(info.getDestination()) ) {
0:                 for (Iterator iter = producers.values().iterator(); iter.hasNext();) {
0:                     ProducerInfo value = (ProducerInfo) iter.next();
1:                     ActiveMQTopic topic = AdvisorySupport.getProducerAdvisoryTopic(value.getDestination());
1:                     fireAdvisory(context, topic, value, info.getConsumerId());
1:                 }
1:             }
0:             
1:             // Replay the consumers.
0:             if( AdvisorySupport.isConsumerAdvisoryTopic(info.getDestination()) ) {
0:                 for (Iterator iter = consumers.values().iterator(); iter.hasNext();) {
0:                     ConsumerInfo value = (ConsumerInfo) iter.next();
0:                     ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(value.getDestination());
0:                     fireConsumerAdvisory(context, topic, value, info.getConsumerId());
1:                 }
1:             }
1:         }
1:     }
0: 
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Throwable {
0:         next.addProducer(context, info);
0: 
1:         // Don't advise advisory topics.        
0:         if( info.getDestination()!=null && !AdvisorySupport.isAdvisoryTopic(info.getDestination()) ) { 
1:             ActiveMQTopic topic = AdvisorySupport.getProducerAdvisoryTopic(info.getDestination());
0:             fireAdvisory(context, topic, info);
1:             producers.put(info.getProducerId(), info);
1:         }
1:     }
0:     
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Throwable {
0:         Destination answer = next.addDestination(context, destination);        
0:         ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
0:         DestinationInfo info = new DestinationInfo(context.getConnectionId(), DestinationInfo.ADD_OPERATION_TYPE, destination);
0:         fireAdvisory(context, topic, info);        
0:         destinations.put(destination, info);
1:         return answer;
1:     }
0:     
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Throwable {
0:         next.removeDestination(context, destination, timeout);
0:         ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
0:         DestinationInfo info = (DestinationInfo) destinations.remove(destination);
0:         if( info !=null ) {
0:             info.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
0:             fireAdvisory(context, topic, info);
1:         }
1:     }
0: 
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Throwable {
0:         next.removeConnection(context, info, error);
0: 
1:         ActiveMQTopic topic = AdvisorySupport.getConnectionAdvisoryTopic();
1:         fireAdvisory(context, topic, info.createRemoveCommand());
1:         connections.remove(info.getConnectionId());
1:     }
0: 
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable {
0:         next.removeConsumer(context, info);
0: 
1:         // Don't advise advisory topics.
0:         if( !AdvisorySupport.isAdvisoryTopic(info.getDestination()) ) { 
1:             ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination());
0:             consumers.remove(info.getConsumerId());
0:             fireConsumerAdvisory(context, topic, info.createRemoveCommand());
1:         }
1:     }
0: 
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Throwable {
0:         next.removeProducer(context, info);
0: 
1:         // Don't advise advisory topics.
0:         if( info.getDestination()!=null && !AdvisorySupport.isAdvisoryTopic(info.getDestination()) ) { 
1:             ActiveMQTopic topic = AdvisorySupport.getProducerAdvisoryTopic(info.getDestination());
1:             fireAdvisory(context, topic, info.createRemoveCommand());
1:             producers.remove(info.getProducerId());
1:         }
1:     }
0:     
0:     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command) throws Throwable {
1:         fireAdvisory(context, topic, command, null);
1:     }
0:     
0:     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Throwable {
1:         ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:         fireAdvisory(context, topic, command, targetConsumerId, advisoryMessage);
1:     }
0:     
0:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command) throws Throwable {
0:         fireConsumerAdvisory(context, topic, command, null);
1:     }
0:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Throwable {
1:         ActiveMQMessage advisoryMessage = new ActiveMQMessage();
0:         advisoryMessage.setIntProperty("consumerCount", consumers.size());
1:         fireAdvisory(context, topic, command, targetConsumerId, advisoryMessage);
1:     }
0: 
0:     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId, ActiveMQMessage advisoryMessage) throws Throwable {
0:         advisoryMessage.setDataStructure(command);
0:         advisoryMessage.setPersistent(false);
0:         advisoryMessage.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
0:         advisoryMessage.setMessageId(new MessageId(advisoryProducerId, messageIdGenerator.getNextSequenceId()));
0:         advisoryMessage.setTargetConsumerId(targetConsumerId);
0: 
0:         advisoryMessage.setDestination(topic);
0:         advisoryMessage.setResponseRequired(false);
0:         advisoryMessage.setProducerId(advisoryProducerId);
0:         
0:         boolean originalFlowControl = context.isProducerFlowControl();
0:         try {
0:             context.setProducerFlowControl(false);
0:             next.send(context, advisoryMessage);
0:         } finally {
0:             context.setProducerFlowControl(originalFlowControl);
1:         }
1:     }
0: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:69e3b6c
/////////////////////////////////////////////////////////////////////////
0:     
1:     @Override
0:     public void sendToDeadLetterQueue(ConnectionContext context,MessageReference messageReference){
0:         super.sendToDeadLetterQueue(context, messageReference);
0:         try {
0:             if(!messageReference.isAdvisory()) {
0:                 ActiveMQTopic topic = AdvisorySupport.getMessageDLQdAdvisoryTopic(messageReference.getMessage().getDestination());
1:                 Message payload = messageReference.getMessage().copy();
0:                 payload.clearBody();
0:                 fireAdvisory(context, topic,payload);
1:             }
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire message consumed advisory");
1:         } 
1:     }
commit:f392884
/////////////////////////////////////////////////////////////////////////
0:             if (getBrokerService().getDefaultSocketURI() != null) {
0:                 url = getBrokerService().getDefaultSocketURI().toString();
0:             }
commit:eb51a69
/////////////////////////////////////////////////////////////////////////
0:     public void isFull(ConnectionContext context, Destination destination, Usage usage) {
1:         super.isFull(context, destination, usage);
1:         if (AdvisorySupport.isAdvisoryTopic(destination.getActiveMQDestination()) == false) {
0:             try {
0: 
1:                 ActiveMQTopic topic = AdvisorySupport.getFullAdvisoryTopic(destination.getActiveMQDestination());
1:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_USAGE_NAME, usage.getName());
1:                 fireAdvisory(context, topic, null, null, advisoryMessage);
0: 
1:             } catch (Exception e) {
0:                 LOG.warn("Failed to fire message is full advisory");
0:             }
commit:204f91f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean create) throws Exception {
0:         Destination answer = super.addDestination(context, destination,create);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
commit:66dd8cd
/////////////////////////////////////////////////////////////////////////
0:         //do not distribute usernames or passwords in advisory
1:         ConnectionInfo copy = info.copy();
0:         copy.setUserName("");
1:         copy.setPassword("");
1:         fireAdvisory(context, topic, copy);
1:         connections.put(copy.getConnectionId(), copy);
commit:db4f602
/////////////////////////////////////////////////////////////////////////
0:                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();
1:                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_MESSAGE_ID, payload.getMessageId().toString());
1:                 fireAdvisory(context, topic, payload, null, advisoryMessage);
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQMessage advisoryMessage = new ActiveMQMessage();
0:             advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, subs.getConsumerInfo().getConsumerId().toString());
0:             fireAdvisory(context, topic, subs.getConsumerInfo(), null, advisoryMessage);
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQMessage advisoryMessage = new ActiveMQMessage();
0:             advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_PRODUCER_ID, producerInfo.getProducerId().toString());
0:             fireAdvisory(context, topic, producerInfo, null, advisoryMessage);
/////////////////////////////////////////////////////////////////////////
0:             advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_USAGE_NAME, usage.getName());
0:             fireAdvisory(context, topic,null,null,advisoryMessage);
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQMessage advisoryMessage = new ActiveMQMessage();                       
0:             fireAdvisory(context, topic,null,null,advisoryMessage);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             //set properties
0:             advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_NAME, getBrokerName());
0:             String id = getBrokerId() != null ? getBrokerId().getValue() : "NOT_SET";
0:             advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, id);
0:             
0:             String[] uris = getBrokerService().getTransportConnectorURIs();
0:             String url = getBrokerService().getVmConnectorURI().toString();
0:             if (uris != null && uris.length > 0) {
0:                 url = uris[0];
0:             } 
0:             advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL, url);
0:             
0:             //set the data structure
commit:4ee029e
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void nowMasterBroker() {   
1:         super.nowMasterBroker();
0:         try {
1:             ActiveMQTopic topic = AdvisorySupport.getMasterBrokerAdvisoryTopic();
0:             ActiveMQMessage advisoryMessage = new ActiveMQMessage();           
0:             advisoryMessage.setStringProperty("brokerName", getBrokerName());
0:             String[] uris = getBrokerService().getTransportConnectorURIs();
0:             String uri = getBrokerService().getVmConnectorURI().toString();
0:             if (uris != null && uris.length > 0) {
0:                 uri = uris[0];
0:             }
0:             advisoryMessage.setStringProperty("brokerURL", getBrokerName());
0:             advisoryMessage.setStringProperty("brokerURI", uri);
0:             ConnectionContext context = new ConnectionContext();
0:             context.setBroker(getBrokerService().getBroker());
0:             fireAdvisory(context, topic,advisoryMessage);
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire message master broker advisory");
0:         }
0:     }
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.Message;
1: import org.apache.activemq.usage.Usage;
/////////////////////////////////////////////////////////////////////////
1:         super.addConnection(context, info);
/////////////////////////////////////////////////////////////////////////
1:         Subscription answer = super.addConsumer(context, info);
/////////////////////////////////////////////////////////////////////////
1:         super.addProducer(context, info);
/////////////////////////////////////////////////////////////////////////
0:         Destination answer = super.addDestination(context, destination);
/////////////////////////////////////////////////////////////////////////
1:         super.removeDestination(context, destination, timeout);
/////////////////////////////////////////////////////////////////////////
0:         super.removeDestinationInfo(context, destInfo);   
/////////////////////////////////////////////////////////////////////////
1:         super.removeConnection(context, info, error);
/////////////////////////////////////////////////////////////////////////
1:         super.removeConsumer(context, info);
/////////////////////////////////////////////////////////////////////////
1:         super.removeProducer(context, info);
/////////////////////////////////////////////////////////////////////////
0:         super.messageExpired(context, messageReference);
0:             if(!messageReference.isAdvisory()) {
0:                 ActiveMQTopic topic = AdvisorySupport.getExpiredMessageTopic(messageReference.getMessage().getDestination());
1:                 Message payload = messageReference.getMessage().copy();
0:                 payload.clearBody();
0:                 fireAdvisory(context, topic,payload);
0:             }
0:     
1:     public void messageConsumed(ConnectionContext context, MessageReference messageReference) {
1:         super.messageConsumed(context, messageReference);
0:         try {
0:             if(!messageReference.isAdvisory()) {
0:                 ActiveMQTopic topic = AdvisorySupport.getMessageConsumedAdvisoryTopic(messageReference.getMessage().getDestination());
1:                 Message payload = messageReference.getMessage().copy();
0:                 payload.clearBody();
0:                 fireAdvisory(context, topic,payload);
0:             }
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire message consumed advisory");
0:         }
0:     }
0:     
1:     public void messageDelivered(ConnectionContext context, MessageReference messageReference) {
1:         super.messageDelivered(context, messageReference);
0:         try {
1:             if (!messageReference.isAdvisory()) {
0:                 ActiveMQTopic topic = AdvisorySupport.getMessageDeliveredAdvisoryTopic(messageReference.getMessage().getDestination());
1:                 Message payload = messageReference.getMessage().copy();
0:                 payload.clearBody();
0:                 fireAdvisory(context, topic,payload);
0:             }
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire message delivered advisory");
0:         }
0:     }
0:     
0:     public void messageDiscarded(ConnectionContext context, MessageReference messageReference) {
0:         super.messageDiscarded(context, messageReference);
0:         try {
1:             if (!messageReference.isAdvisory()) {
0:                 ActiveMQTopic topic = AdvisorySupport.getMessageDiscardedAdvisoryTopic(messageReference.getMessage().getDestination());
1:                 Message payload = messageReference.getMessage().copy();
0:                 payload.clearBody();
0:                 fireAdvisory(context, topic,payload);
0:             }
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire message discarded advisory");
0:         }
0:     }
0:     
0:     public void slowConsumer(ConnectionContext context, Destination destination,Subscription subs) {
0:         super.slowConsumer(context, destination,subs);
0:         try {
0:             ActiveMQTopic topic = AdvisorySupport.getSlowConsumerAdvisoryTopic(destination.getActiveMQDestination());
0:             fireAdvisory(context, topic,subs.getConsumerInfo());
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire message slow consumer advisory");
0:         }
0:     }
0:     
0:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
0:         super.fastProducer(context, producerInfo);
0:         try {
0:             ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(producerInfo.getDestination());
0:             fireAdvisory(context, topic,producerInfo);
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire message fast producer advisory");
0:         }
0:     }
0:     
0:     public void isFull(ConnectionContext context,Destination destination,Usage usage) {
0:         super.isFull(context,destination, usage);
0:         try {
0:             ActiveMQTopic topic = AdvisorySupport.getFullAdvisoryTopic(destination.getActiveMQDestination());
0:             ActiveMQMessage advisoryMessage = new ActiveMQMessage();           
0:             advisoryMessage.setStringProperty("usageName", usage.getName());
0:             fireAdvisory(context, topic,advisoryMessage);
1:         } catch (Exception e) {
0:             LOG.warn("Failed to fire message is full advisory");
0:         }
0:     }
commit:931ed76
/////////////////////////////////////////////////////////////////////////
0:             fireConsumerAdvisory(context, info.getDestination(), topic, info);
/////////////////////////////////////////////////////////////////////////
0:             } catch (Exception expectedIfDestinationDidNotExistYet) {                
/////////////////////////////////////////////////////////////////////////
0:         next.removeDestinationInfo(context, destInfo);   
/////////////////////////////////////////////////////////////////////////
0:             
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination dest = info.getDestination();
0:         if (!AdvisorySupport.isAdvisoryTopic(dest)) {
0:             ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(dest);
0:             if (!dest.isTemporary() || destinations.contains(dest)) {
0:             	fireConsumerAdvisory(context,dest, topic, info.createRemoveCommand());
0:             }
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination dest = info.getDestination();
1:         if (info.getDestination() != null && !AdvisorySupport.isAdvisoryTopic(dest)) {
1:             ActiveMQTopic topic = AdvisorySupport.getProducerAdvisoryTopic(dest);
0:             if (!dest.isTemporary() || destinations.contains(dest)) {
0:                 fireProducerAdvisory(context, dest,topic, info.createRemoveCommand());
0:             }
commit:320f802
/////////////////////////////////////////////////////////////////////////
0:             consumers.put(info.getConsumerId(), info);
/////////////////////////////////////////////////////////////////////////
commit:a785cb7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     public Map<ConnectionId, ConnectionInfo> getAdvisoryConnections() {
1:         return connections;
0:     }
0: 
0:     public Map<ConsumerId, ConsumerInfo> getAdvisoryConsumers() {
0:         return consumers;
0:     }
0: 
1:     public Map<ProducerId, ProducerInfo> getAdvisoryProducers() {
1:         return producers;
0:     }
0: 
1:     public Map<ActiveMQDestination, DestinationInfo> getAdvisoryDestinations() {
1:         return destinations;
0:     }
commit:1a01d13
/////////////////////////////////////////////////////////////////////////
0:         
commit:88fbb05
/////////////////////////////////////////////////////////////////////////
0:             //consumers.put(info.getConsumerId(), info);
/////////////////////////////////////////////////////////////////////////
0:         consumers.put(info.getConsumerId(), info);
/////////////////////////////////////////////////////////////////////////
0:         advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_NAME, getBrokerName());
0:         String id = getBrokerId() != null ? getBrokerId().getValue() : "NOT_SET";
0:         advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, id);
/////////////////////////////////////////////////////////////////////////
0:         
commit:8d11f07
/////////////////////////////////////////////////////////////////////////
1:             fireProducerAdvisory(context, info.getDestination(), topic, info);
/////////////////////////////////////////////////////////////////////////
1:                     count += dest.getDestinationStatistics().getProducers().getCount();
commit:634da7a
/////////////////////////////////////////////////////////////////////////
1:         int count = 0;
1:         if (producerDestination != null) {
1:             Set<Destination> set = getDestinations(producerDestination);
1:             if (set != null) {
1:                 for (Destination dest : set) {
0:                     count += dest.getDestinationStatistics().getConsumers()
0:                             .getCount();
0:                 }
0:             }
0:         }
1:         advisoryMessage.setIntProperty("producerCount", count);
commit:5f4db41
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0:             fireConsumerAdvisory(context,info.getDestination(), topic, info);
/////////////////////////////////////////////////////////////////////////
0:                     fireProducerAdvisory(context, value.getDestination(),topic, value, info.getConsumerId());
/////////////////////////////////////////////////////////////////////////
0:                     fireConsumerAdvisory(context,value.getDestination(), topic, value, info.getConsumerId());
/////////////////////////////////////////////////////////////////////////
0:             fireConsumerAdvisory(context,info.getDestination(), topic, info.createRemoveCommand());
/////////////////////////////////////////////////////////////////////////
0:             fireProducerAdvisory(context, info.getDestination(),topic, info.createRemoveCommand());
/////////////////////////////////////////////////////////////////////////
0:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQDestination consumerDestination,ActiveMQTopic topic, Command command) throws Exception {
0:         fireConsumerAdvisory(context, consumerDestination,topic, command, null);
0:     protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQDestination consumerDestination,ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
1:         int count = 0;
0:         Set<Destination>set = getDestinations(consumerDestination);
1:         if (set != null) {
0:             for (Destination dest:set) {
1:                 count += dest.getDestinationStatistics().getConsumers().getCount();
0:             }
0:         }
0:         advisoryMessage.setIntProperty("consumerCount", count);
0:     protected void fireProducerAdvisory(ConnectionContext context,ActiveMQDestination producerDestination, ActiveMQTopic topic, Command command) throws Exception {
0:         fireProducerAdvisory(context,producerDestination, topic, command, null);
0:     protected void fireProducerAdvisory(ConnectionContext context, ActiveMQDestination producerDestination,ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
commit:c07b233
/////////////////////////////////////////////////////////////////////////
0:     protected void fireAdvisory(ConnectionContext context,ActiveMQTopic topic,Command command,
0:             ConsumerId targetConsumerId,ActiveMQMessage advisoryMessage) throws Exception{
0:         if(getBrokerService().isStarted()){
0:             advisoryMessage.setDataStructure(command);
0:             advisoryMessage.setPersistent(false);
0:             advisoryMessage.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
0:             advisoryMessage.setMessageId(new MessageId(advisoryProducerId,messageIdGenerator.getNextSequenceId()));
0:             advisoryMessage.setTargetConsumerId(targetConsumerId);
0:             advisoryMessage.setDestination(topic);
0:             advisoryMessage.setResponseRequired(false);
0:             advisoryMessage.setProducerId(advisoryProducerId);
0:             boolean originalFlowControl=context.isProducerFlowControl();
0:             final ProducerBrokerExchange producerExchange=new ProducerBrokerExchange();
0:             producerExchange.setConnectionContext(context);
0:             producerExchange.setMutable(true);
0:             try{
0:                 context.setProducerFlowControl(false);
0:                 next.send(producerExchange,advisoryMessage);
0:             }finally{
0:                 context.setProducerFlowControl(originalFlowControl);
0:             }
commit:a414c20
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.MessageReference;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(AdvisoryBroker.class);
/////////////////////////////////////////////////////////////////////////
0:     public void messageExpired(ConnectionContext context,MessageReference messageReference){
0:         next.messageExpired(context,messageReference);
0:         try{
0:             ActiveMQTopic topic=AdvisorySupport.getExpiredMessageTopic(messageReference.getMessage().getDestination());
0:             fireAdvisory(context,topic,messageReference.getMessage());
0:         }catch(Exception e){
0:             log.warn("Failed to fire message expired advisory");
0:         }
0:     }
0:     
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
0:         final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
0:         producerExchange.setConnectionContext(context);
0:         producerExchange.setMutable(true);
0:             next.send(producerExchange, advisoryMessage);
commit:a1e410f
/////////////////////////////////////////////////////////////////////////
0:         next.removeDestination(context, AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination()), 0); 
0:         next.removeDestination(context, AdvisorySupport.getProducerAdvisoryTopic(info.getDestination()), 0); 
commit:b792f11
/////////////////////////////////////////////////////////////////////////
0:     
0:     
/////////////////////////////////////////////////////////////////////////
0:         if( info !=null && info.getDestination() != null && topic != null) {
0:             next.removeDestination(context,topic,timeout);
0:             next.removeDestination(context, AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination()), timeout); 
0:             next.removeDestination(context, AdvisorySupport.getProducerAdvisoryTopic(info.getDestination()), timeout); 
0:        
commit:973147a
/////////////////////////////////////////////////////////////////////////
0:         next.removeDestination(context, AdvisorySupport.getConsumerAdvisoryTopic(info.getDestination()), timeout); 
/////////////////////////////////////////////////////////////////////////
0:         fireAdvisory(context, topic, info);
commit:a9c49a7
/////////////////////////////////////////////////////////////////////////
0:         Destination answer = next.addDestination(context, destination);  
0:       
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void addDestinationInfo(ConnectionContext context,DestinationInfo info) throws Exception{
0:         ActiveMQDestination destination =  info.getDestination();
0:         next.addDestinationInfo(context, info);  
0:         
0:         ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(destination);
0:         fireAdvisory(context, topic, info);        
0:         destinations.put(destination, info);    
0:     }
0: 
0:     public void removeDestinationInfo(ConnectionContext context,DestinationInfo info) throws Exception{
0:         next.removeDestinationInfo(context, info);
0:         ActiveMQTopic topic = AdvisorySupport.getDestinationAdvisoryTopic(info.getDestination());
0:         fireAdvisory(context, topic, info);        
0:     }
commit:3582300
/////////////////////////////////////////////////////////////////////////
0:                     fireProducerAdvisory(context, topic, value, info.getConsumerId());
/////////////////////////////////////////////////////////////////////////
0:             fireProducerAdvisory(context, topic, info.createRemoveCommand());
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected void fireProducerAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command) throws Throwable {
0:         fireProducerAdvisory(context, topic, command, null);
0:     }
0:     protected void fireProducerAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Throwable {
0:         ActiveMQMessage advisoryMessage = new ActiveMQMessage();
0:         advisoryMessage.setIntProperty("producerCount", producers.size());
1:         fireAdvisory(context, topic, command, targetConsumerId, advisoryMessage);
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:         Subscription answer = next.addConsumer(context, info);
/////////////////////////////////////////////////////////////////////////
1:         return answer;
============================================================================