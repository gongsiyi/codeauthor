1:d29ca2a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store;
1:18d616c: 
1:d29ca2a: import java.io.IOException;
1:fc00993: 
1:f451ad0: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.MessageId;
1:6d8e2c5: import org.apache.activemq.usage.MemoryUsage;
1:18d616c: 
1:18d616c: /**
1:f812e34:  * Represents a message store which is used by the persistent implementations
1:b0c2a40:  *
1:d29ca2a:  *
1:18d616c:  */
1:f812e34: public interface MessageStore extends Service {
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Adds a message to the message store
1:d29ca2a:      *
1:f4d4c3b:      * @param context context
1:f812e34:      * @param message
1:f812e34:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     void addMessage(ConnectionContext context, Message message) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:f4d4c3b:      * Adds a message to the message store
1:d29ca2a:      *
1:f4d4c3b:      * @param context context
1:f4d4c3b:      * @param message
1:f4d4c3b:      * @param canOptimizeHint - give a hint to the store that the message may be consumed before it hits the disk
1:f4d4c3b:      * @throws IOException
1:d29ca2a:      */
1:d40f398:     void addMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:f4d4c3b:      * Adds a message to the message store
1:d29ca2a:      *
1:f4d4c3b:      * @param context context
1:f4d4c3b:      * @param message
1:f4d4c3b:      * @return a Future to track when this is complete
1:d40f398:      * @throws IOException
1:d40f398:      * @throws IOException
1:d29ca2a:      */
1:ad1f751:     ListenableFuture<Object> asyncAddQueueMessage(ConnectionContext context, Message message) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:f4d4c3b:      * Adds a message to the message store
1:d29ca2a:      *
1:ea84378:      * @param context context
1:f4d4c3b:      * @param message
1:f4d4c3b:      * @param canOptimizeHint - give a hint to the store that the message may be consumed before it hits the disk
1:f4d4c3b:      * @return a Future to track when this is complete
1:f4d4c3b:      * @throws IOException
1:f4d4c3b:      * @throws IOException
1:d29ca2a:      */
1:ad1f751:     ListenableFuture<Object> asyncAddQueueMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:ea84378:      * Adds a message to the message store
1:d40f398:      *
1:ea84378:      * @param context context
1:ea84378:      * @param message
1:ad1f751:      * @return a ListenableFuture to track when this is complete
3:ea84378:      * @throws IOException
1:ea84378:      * @throws IOException
1:f4d4c3b:      */
1:ad1f751:     ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message) throws IOException;
1:d29ca2a: 
1:d40f398:     /**
1:ea84378:      * Adds a message to the message store
1:d40f398:      *
1:629bc81:      * @param context context
1:ea84378:      * @param message
1:f4d4c3b:      *  @param canOptimizeHint - give a hint to the store that the message may be consumed before it hits the disk
1:ad1f751:      * @return a ListenableFuture to track when this is complete
1:f4d4c3b:      * @throws IOException
1:f4d4c3b:      * @throws IOException
1:f4d4c3b:      */
1:ad1f751:     ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException;
1:d29ca2a: 
1:f4d4c3b:     /**
1:f812e34:      * Looks up a message using either the String messageID or the
1:f812e34:      * messageNumber. Implementations are encouraged to fill in the missing key
1:f812e34:      * if its easy to do so.
1:d40f398:      *
2:d29ca2a:      * @param identity which contains either the messageID or the messageNumber
2:d29ca2a:      * @return the message or null if it does not exist
1:f812e34:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     Message getMessage(MessageId identity) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Removes a message from the message store.
1:d40f398:      *
1:f812e34:      * @param context
1:f812e34:      * @param ack the ack request that cause the message to be removed. It
1:f812e34:      *                conatins the identity which contains the messageID of the
1:f812e34:      *                message that needs to be removed.
1:f812e34:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     void removeMessage(ConnectionContext context, MessageAck ack) throws IOException;
1:d29ca2a: 
1:ea84378:     void removeAsyncMessage(ConnectionContext context, MessageAck ack) throws IOException;
1:d40f398: 
1:d29ca2a:     /**
1:d29ca2a:      * Removes all the messages from the message store.
1:d40f398:      *
1:f812e34:      * @param context
1:f812e34:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     void removeAllMessages(ConnectionContext context) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Recover any messages to be delivered.
1:d29ca2a:      *
1:d29ca2a:      * @param container
1:7f5213b:      * @throws Exception
1:d29ca2a:      */
1:fc00993:     void recover(MessageRecoveryListener container) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * The destination that the message store is holding messages for.
1:d40f398:      *
1:629bc81:      * @return the destination
1:d29ca2a:      */
1:fc00993:     ActiveMQDestination getDestination();
1:d29ca2a: 
1:f4d4c3b:     /**
1:c0090f6:      * @param memoryUsage The SystemUsage that is controlling the
1:f812e34:      *                destination's memory usage.
1:f4d4c3b:      */
1:c0090f6:     void setMemoryUsage(MemoryUsage memoryUsage);
1:d40f398: 
1:f4d4c3b:     /**
1:629bc81:      * @return the number of messages ready to deliver
1:f812e34:      * @throws IOException
1:d40f398:      *
1:ea84378:      */
1:fc00993:     int getMessageCount() throws IOException;
1:d40f398: 
1:ea84378:     /**
1:785b16b:      * @return the size of the messages ready to deliver
1:785b16b:      * @throws IOException
1:785b16b:      */
1:785b16b:     long getMessageSize() throws IOException;
1:785b16b: 
1:785b16b: 
1:785b16b:     /**
1:785b16b:      * @return The statistics bean for this message store
1:785b16b:      */
1:785b16b:     MessageStoreStatistics getMessageStoreStatistics();
1:785b16b: 
1:785b16b:     /**
1:629bc81:      * A hint to the Store to reset any batching state for the Destination
1:f812e34:      *
1:ea84378:      */
1:fc00993:     void resetBatching();
1:f812e34: 
1:fc00993:     void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception;
1:d40f398: 
1:63e3f41:     void dispose(ConnectionContext context);
1:f4d4c3b: 
1:ea84378:     /**
1:37c2a95:      * allow caching cursors to set the current batch offset when cache is exhausted
1:629bc81:      * @param messageId
1:d40f398:      * @throws Exception
1:629bc81:      */
1:180b0ec:     void setBatch(MessageId messageId) throws Exception;
1:d40f398: 
1:affd91e:     /**
1:affd91e:      * flag to indicate if the store is empty
1:affd91e:      * @return true if the message count is 0
1:d40f398:      * @throws Exception
1:affd91e:      */
1:affd91e:     boolean isEmpty() throws Exception;
1:d40f398: 
1:629bc81:     /**
1:03f38ae:      * A hint to the store to try recover messages according to priority
1:03f38ae:      * @param prioritizedMessages
1:629bc81:      */
1:03f38ae:     public void setPrioritizedMessages(boolean prioritizedMessages);
1:d40f398: 
1:629bc81:     /**
1:d40f398:      *
1:03f38ae:      * @return true if store is trying to recover messages according to priority
2:03f38ae:      */
1:03f38ae:     public boolean isPrioritizedMessages();
1:d40f398: 
1:266d23e:     void updateMessage(Message message) throws IOException;
1:54e2e3b: 
1:54e2e3b:     void registerIndexListener(IndexListener indexListener);
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1:      * @return the size of the messages ready to deliver
1:      * @throws IOException
1:      */
1:     long getMessageSize() throws IOException;
1: 
1: 
1:     /**
1:      * @return The statistics bean for this message store
1:      */
1:     MessageStoreStatistics getMessageStoreStatistics();
1: 
1:     /**
author:gtully
-------------------------------------------------------------------------------
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1: 
1:     void registerIndexListener(IndexListener indexListener);
commit:ad1f751
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     ListenableFuture<Object> asyncAddQueueMessage(ConnectionContext context, Message message) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     ListenableFuture<Object> asyncAddQueueMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException;
1:      * @return a ListenableFuture to track when this is complete
1:     ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:      * @return a ListenableFuture to track when this is complete
1:     ListenableFuture<Object> asyncAddTopicMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException;
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1:     void updateMessage(Message message) throws IOException;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:c0090f6
/////////////////////////////////////////////////////////////////////////
1:      * @param memoryUsage The SystemUsage that is controlling the
1:     void setMemoryUsage(MemoryUsage memoryUsage);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:180b0ec
/////////////////////////////////////////////////////////////////////////
1:     void setBatch(MessageId messageId) throws Exception;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: 
/////////////////////////////////////////////////////////////////////////
1:     void addMessage(ConnectionContext context, Message message) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     Message getMessage(MessageId identity) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void removeMessage(ConnectionContext context, MessageAck ack) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void removeAllMessages(ConnectionContext context) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void recover(MessageRecoveryListener container) throws Exception;
1:     ActiveMQDestination getDestination();
0:     void setUsageManager(UsageManager usageManager);
1:     int getMessageCount() throws IOException;
1:     void resetBatching();
1:     void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Represents a message store which is used by the persistent implementations
1: public interface MessageStore extends Service {
1:      * @param message
1:      * @throws IOException
0:     public void addMessage(ConnectionContext context, Message message) throws IOException;
1:      * Looks up a message using either the String messageID or the
1:      * messageNumber. Implementations are encouraged to fill in the missing key
1:      * if its easy to do so.
1:      * @throws IOException
1:      * @param context
1:      * @param ack the ack request that cause the message to be removed. It
1:      *                conatins the identity which contains the messageID of the
1:      *                message that needs to be removed.
1:      * @throws IOException
0:     public void removeMessage(ConnectionContext context, MessageAck ack) throws IOException;
1:      * @param context
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
0:      * @param usageManager The UsageManager that is controlling the
1:      *                destination's memory usage.
1:      * @throws IOException
1:      * 
0:     public void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception;
1: 
commit:0afb7f9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:18d616c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.memory.UsageManager;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * @param usageManager The UsageManager that is controlling the destination's memory usage.
1:      */
0:     public void setUsageManager(UsageManager usageManager);
1: 
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception 
0:     public void recover(MessageRecoveryListener container) throws Exception;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import java.io.IOException;
1: 
0: import org.activeio.Service;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageId;
1: 
1: /**
0:  * Represents a message store which is used by the persistent {@link org.apache.activemq.service.MessageContainer}
0:  * implementations
1:  *
0:  * @version $Revision: 1.5 $
1:  */
0: public interface MessageStore extends Service {
1:     
1:     /**
1:      * Adds a message to the message store
0:      * @param context TODO
1:      */
0:     public void addMessage(ConnectionContext context, Message message) throws IOException;
1: 
1:     /**
0:      * Adds a message reference to the message store
0:      * @param context TODO
0:      * @param messageId TODO
0:      * @param expirationTime TODO
1:      */
0:     public void addMessageReference(ConnectionContext context, MessageId messageId, long expirationTime, String messageRef) throws IOException;
1: 
1:     /**
0:      * Looks up a message using either the String messageID or
0:      * the messageNumber. Implementations are encouraged to fill in the missing
0:      * key if its easy to do so.
1:      * @param identity which contains either the messageID or the messageNumber
1:      * @return the message or null if it does not exist
1:      */
0:     public Message getMessage(MessageId identity) throws IOException;
1: 
1:     /**
0:      * Looks up a message using either the String messageID or
0:      * the messageNumber. Implementations are encouraged to fill in the missing
0:      * key if its easy to do so.
1:      * @param identity which contains either the messageID or the messageNumber
1:      * @return the message or null if it does not exist
1:      */
0:     public String getMessageReference(MessageId identity) throws IOException;
1: 
1:     /**
1:      * Removes a message from the message store.
0:      * @param context TODO
0:      * @param ack the ack request that cause the message to be removed.  It conatins 
0:      *   the identity which contains the messageID of the message that needs to be removed.
1:      */
0:     public void removeMessage(ConnectionContext context, MessageAck ack) throws IOException;
1: 
1:     /**
1:      * Removes all the messages from the message store.
0:      * @param context TODO
1:      */
0:     public void removeAllMessages(ConnectionContext context) throws IOException;
1:     
1:     /**
1:      * Recover any messages to be delivered.
1:      *
1:      * @param container
0:      * @throws Throwable 
1:      */
0:     public void recover(MessageRecoveryListener container) throws Throwable;
1: 
1:     /**
1:      * The destination that the message store is holding messages for.
0:      * @return
1:      */
0:     public ActiveMQDestination getDestination();
1:         
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d40f398
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:      *
/////////////////////////////////////////////////////////////////////////
1:     void addMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException;
1: 
1:      *
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
0:     Future<Object> asyncAddQueueMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException;
1: 
1:      *
1:      * @throws IOException
1:     /**
/////////////////////////////////////////////////////////////////////////
0:     Future<Object> asyncAddTopicMessage(ConnectionContext context, Message message, boolean canOptimizeHint) throws IOException;
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      *
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
1: 
1:      * @throws Exception
1: 
1: 
0:      *
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:f4d4c3b
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Adds a message to the message store
0:      *
1:      * @param context context
1:      * @param message
1:      * @param canOptimizeHint - give a hint to the store that the message may be consumed before it hits the disk
1:      * @throws IOException
1:      */
0:     void addMessage(ConnectionContext context, Message message,boolean canOptimizeHint) throws IOException;
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * Adds a message to the message store
0:      *
1:      * @param context context
1:      * @param message
1:      * @param canOptimizeHint - give a hint to the store that the message may be consumed before it hits the disk
1:      * @return a Future to track when this is complete
1:      * @throws IOException
1:      * @throws IOException
1:      */
0:     Future<Object> asyncAddQueueMessage(ConnectionContext context, Message message,boolean canOptimizeHint) throws IOException;
/////////////////////////////////////////////////////////////////////////
1: /**
1:      * Adds a message to the message store
0:      *
1:      * @param context context
1:      * @param message
1:      *  @param canOptimizeHint - give a hint to the store that the message may be consumed before it hits the disk
1:      * @return a Future to track when this is complete
1:      * @throws IOException
1:      * @throws IOException
1:      */
0:     Future<Object> asyncAddTopicMessage(ConnectionContext context, Message message,boolean canOptimizeHint) throws IOException;
0: 
0: 
commit:ea84378
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Future;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Adds a message to the message store
0:      * 
1:      * @param context context
1:      * @param message
0:      * @param l 
0:      * @return a Future to track when this is complete
1:      * @throws IOException 
1:      * @throws IOException
1:      */
0:     Future<Object> asyncAddQueueMessage(ConnectionContext context, Message message) throws IOException;
0:     
1:     /**
1:      * Adds a message to the message store
0:      * 
1:      * @param context context
1:      * @param message
0:      * @param l 
0:      * @return a Future to track when this is complete
1:      * @throws IOException 
1:      * @throws IOException
1:      */
0:     Future<Object> asyncAddTopicMessage(ConnectionContext context, Message message) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     
1:     void removeAsyncMessage(ConnectionContext context, MessageAck ack) throws IOException;
commit:affd91e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:      * @throws Exception 
1:     /**
1:      * flag to indicate if the store is empty
1:      * @return true if the message count is 0
0:      * @throws Exception 
1:      */
1:     boolean isEmpty() throws Exception;
0:     
commit:63e3f41
/////////////////////////////////////////////////////////////////////////
1:     void dispose(ConnectionContext context);
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.MemoryUsage;
0: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
0:      * @param memoeyUSage The SystemUsage that is controlling the
0:     void setMemoryUsage(MemoryUsage memoeyUSage);
commit:629bc81
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: 
/////////////////////////////////////////////////////////////////////////
0:  * Represents a message store which is used by the persistent 
0:  * 
0: public interface MessageStore extends Service{
0: 
0:      * 
1:      * @param context context
0:      * @param message 
0:      * @throws IOException 
0:     public void addMessage(ConnectionContext context,Message message) throws IOException;
0:      * 
0:      * @param context 
1:      * @param messageId 
0:      * @param expirationTime 
0:      * @param messageRef 
0:      * @throws IOException 
0:     public void addMessageReference(ConnectionContext context,MessageId messageId,long expirationTime,String messageRef)
0:             throws IOException;
0:      * Looks up a message using either the String messageID or the messageNumber. Implementations are encouraged to fill
0:      * in the missing key if its easy to do so.
0:      * 
0:      * @throws IOException 
0:      * Looks up a message using either the String messageID or the messageNumber. Implementations are encouraged to fill
0:      * in the missing key if its easy to do so.
0:      * 
0:      * @throws IOException 
0:      * 
0:      * @param context 
0:      * @param ack the ack request that cause the message to be removed. It conatins the identity which contains the
0:      *            messageID of the message that needs to be removed.
0:      * @throws IOException 
0:     public void removeMessage(ConnectionContext context,MessageAck ack) throws IOException;
0:      * 
0:      * @param context 
0:      * @throws IOException 
0: 
0:      * 
0:      * @throws Exception
0:      * 
1:      * @return the destination
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the number of messages ready to deliver
0:      * @throws IOException 
0:      * 
1:      */
0:     public int getMessageCount() throws IOException;
0: 
1:     /**
1:      * A hint to the Store to reset any batching state for the Destination
0:      * 
0:      * @param nextToDispatch
0:      * 
1:      */
0:     public void resetBatching();
0: 
0:     
0:     public void recoverNextMessages(int maxReturned,MessageRecoveryListener listener)
0:             throws Exception;
0:     
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:03f38ae
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * A hint to the store to try recover messages according to priority
1:      * @param prioritizedMessages
1:      */
1:     public void setPrioritizedMessages(boolean prioritizedMessages);
0:     
0:     /**
0:      * 
1:      * @return true if store is trying to recover messages according to priority
1:      */
1:     public boolean isPrioritizedMessages();
0:     
author:Gary Tully
-------------------------------------------------------------------------------
commit:d858956
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:37c2a95
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:      * allow caching cursors to set the current batch offset when cache is exhausted
0:      * @param messageId
0:      */
0:     void setBatch(MessageId messageId);
0:     
author:James Strachan
-------------------------------------------------------------------------------
commit:0d289b7
/////////////////////////////////////////////////////////////////////////
0:      *
============================================================================