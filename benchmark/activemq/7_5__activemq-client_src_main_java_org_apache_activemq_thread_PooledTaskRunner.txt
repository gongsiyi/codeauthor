2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:5be5a62:  *
2:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.thread;
16:d29ca2a: 
1:86cbdfd: import java.util.concurrent.Executor;
1:d29ca2a: 
1:287f69d: import org.slf4j.Logger;
1:287f69d: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:914beae:  *
1:d29ca2a:  */
1:e2aad41: class PooledTaskRunner implements TaskRunner {
1:d29ca2a: 
1:287f69d:     private static final Logger LOG = LoggerFactory.getLogger(PooledTaskRunner.class);
1:d29ca2a:     private final int maxIterationsPerRun;
1:d29ca2a:     private final Executor executor;
1:d29ca2a:     private final Task task;
1:d29ca2a:     private final Runnable runable;
1:d29ca2a:     private boolean queued;
1:d29ca2a:     private boolean shutdown;
1:d29ca2a:     private boolean iterating;
1:5660ebc:     private volatile Thread runningThread;
1:f812e34: 
1:287f69d:     public PooledTaskRunner(Executor executor, final Task task, int maxIterationsPerRun) {
1:d29ca2a:         this.executor = executor;
1:d29ca2a:         this.maxIterationsPerRun = maxIterationsPerRun;
1:d29ca2a:         this.task = task;
1:d29ca2a:         runable = new Runnable() {
1:914beae:             @Override
1:d29ca2a:             public void run() {
1:d29ca2a:                 runningThread = Thread.currentThread();
1:5660ebc:                 try {
1:d29ca2a:                     runTask();
1:5660ebc:                 } finally {
1:287f69d:                     LOG.trace("Run task done: {}", task);
1:d29ca2a:                     runningThread = null;
5:d29ca2a:                 }
1:86cbdfd:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * We Expect MANY wakeup calls on the same TaskRunner.
1:d29ca2a:      */
1:914beae:     @Override
1:d29ca2a:     public void wakeup() throws InterruptedException {
1:914beae:         synchronized (runable) {
1:f812e34: 
1:d29ca2a:             // When we get in here, we make some assumptions of state:
1:f812e34:             // queued=false, iterating=false: wakeup() has not be called and
1:f812e34:             // therefore task is not executing.
1:f812e34:             // queued=true, iterating=false: wakeup() was called but, task
1:f812e34:             // execution has not started yet
1:f812e34:             // queued=false, iterating=true : wakeup() was called, which caused
1:f812e34:             // task execution to start.
1:f812e34:             // queued=true, iterating=true : wakeup() called after task
1:f812e34:             // execution was started.
1:f812e34: 
1:fc00993:             if (queued || shutdown) {
3:d29ca2a:                 return;
1:fc00993:             }
1:f812e34: 
1:d8be50b:             queued = true;
1:f812e34: 
1:f812e34:             // The runTask() method will do this for me once we are done
1:f812e34:             // iterating.
1:f812e34:             if (!iterating) {
1:d8be50b:                 executor.execute(runable);
1:fc00993:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * shut down the task
1:b0c2a40:      *
1:f812e34:      * @throws InterruptedException
1:d29ca2a:      */
1:914beae:     @Override
1:f812e34:     public void shutdown(long timeout) throws InterruptedException {
1:914beae:         LOG.trace("Shutdown timeout: {} task: {}", timeout, task);
1:f812e34:         synchronized (runable) {
1:f812e34:             shutdown = true;
1:f812e34:             // the check on the thread is done
1:f812e34:             // because a call to iterate can result in
1:f812e34:             // shutDown() being called, which would wait forever
1:f812e34:             // waiting for iterating to finish
1:f812e34:             if (runningThread != Thread.currentThread()) {
1:74a7a8b:                 if (iterating) {
1:da13d59:                     runable.wait(timeout);
1:f812e34:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:914beae:     @Override
1:da13d59:     public void shutdown() throws InterruptedException {
1:da13d59:         shutdown(0);
1:d29ca2a:     }
1:f812e34: 
1:a3e3821:     final void runTask() {
1:f812e34: 
1:f812e34:         synchronized (runable) {
1:f812e34:             queued = false;
2:f812e34:             if (shutdown) {
1:d29ca2a:                 iterating = false;
1:d8be50b:                 runable.notifyAll();
1:d8be50b:                 return;
1:d8be50b:             }
1:d29ca2a:             iterating = true;
1:d29ca2a:         }
1:f812e34: 
1:f812e34:         // Don't synchronize while we are iterating so that
1:d29ca2a:         // multiple wakeup() calls can be executed concurrently.
1:f812e34:         boolean done = false;
1:5660ebc:         try {
1:d29ca2a:             for (int i = 0; i < maxIterationsPerRun; i++) {
1:287f69d:                 LOG.trace("Running task iteration {} - {}", i, task);
1:f812e34:                 if (!task.iterate()) {
1:f812e34:                     done = true;
1:d29ca2a:                     break;
1:d29ca2a:                 }
1:d29ca2a:             }
1:5660ebc:         } finally {
2:d29ca2a:             synchronized (runable) {
1:f812e34:                 iterating = false;
1:d29ca2a:                 runable.notifyAll();
1:d8be50b:                 if (shutdown) {
1:d8be50b:                     queued = false;
1:d29ca2a:                     runable.notifyAll();
1:f25e7ab:                 } else {
1:f25e7ab:                     // If we could not iterate all the items
1:f25e7ab:                     // then we need to re-queue.
1:f25e7ab:                     if (!done) {
1:f25e7ab:                         queued = true;
1:f25e7ab:                     }
1:f812e34: 
1:f25e7ab:                     if (queued) {
1:f25e7ab:                         executor.execute(runable);
1:f25e7ab:                     }
1:d8be50b:                 }
1:d8be50b: 
1:d8be50b:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f25e7ab
/////////////////////////////////////////////////////////////////////////
1:                 } else {
1:                     // If we could not iterate all the items
1:                     // then we need to re-queue.
1:                     if (!done) {
1:                         queued = true;
1:                     }
1:                     if (queued) {
1:                         executor.execute(runable);
1:                     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:914beae
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         LOG.trace("Shutdown timeout: {} task: {}", timeout, task);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             synchronized (runable) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:d8be50b
/////////////////////////////////////////////////////////////////////////
1:                 if (shutdown) {
1:                     queued = false;
1:                     runable.notifyAll();
1:                     return;
1:                 }
0:                 // If we could not iterate all the items
0:                 // then we need to re-queue.
0:                 if (!done) {
1:                     queued = true;
1:                 }
0:                 if (queued) {
1:                     executor.execute(runable);
1:                 }
1: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:             if (queued || shutdown) {
1:             }
/////////////////////////////////////////////////////////////////////////
0:             if (!done) {
1:             }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:                 if (iterating) {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         synchronized (runable) {
1: 
1:             // queued=false, iterating=false: wakeup() has not be called and
1:             // therefore task is not executing.
1:             // queued=true, iterating=false: wakeup() was called but, task
1:             // execution has not started yet
1:             // queued=false, iterating=true : wakeup() was called, which caused
1:             // task execution to start.
1:             // queued=true, iterating=true : wakeup() called after task
1:             // execution was started.
1: 
0:             if (queued || shutdown)
1: 
0:             queued = true;
1: 
1:             // The runTask() method will do this for me once we are done
1:             // iterating.
1:             if (!iterating) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @throws InterruptedException
1:     public void shutdown(long timeout) throws InterruptedException {
1:         synchronized (runable) {
1:             shutdown = true;
1:             // the check on the thread is done
1:             // because a call to iterate can result in
1:             // shutDown() being called, which would wait forever
1:             // waiting for iterating to finish
1:             if (runningThread != Thread.currentThread()) {
0:                 if (iterating == true) {
1:     }
1: 
1: 
1: 
1:             if (shutdown) {
1: 
1:         // Don't synchronize while we are iterating so that
1:         boolean done = false;
1:             if (!task.iterate()) {
1:                 done = true;
1: 
1:             iterating = false;
1:             if (shutdown) {
1:                 queued = false;
1: 
0:             if (!done)
0:                 queued = true;
1: 
0:             if (queued) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Executor;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:e2aad41
/////////////////////////////////////////////////////////////////////////
1: class PooledTaskRunner implements TaskRunner {
/////////////////////////////////////////////////////////////////////////
0:     public PooledTaskRunner(Executor executor, Task task, int maxIterationsPerRun) {
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: 
1: package org.apache.activemq.thread;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.Executor;
1: 
1: /**
0:  *
0:  * @version $Revision: 1.1 $
1:  */
0: class SimpleTaskRunner implements TaskRunner {
1: 
1:     private final int maxIterationsPerRun;
1:     private final Executor executor;
1:     private final Task task;
1:     private final Runnable runable;
1:     private boolean queued;
1:     private boolean shutdown;
1:     private boolean iterating;
0:     private Thread runningThread;
1:     
0:     public SimpleTaskRunner(Executor executor, Task task, int maxIterationsPerRun) {
1:         this.executor = executor;
1:         this.maxIterationsPerRun = maxIterationsPerRun;
1:         this.task = task;
1:         runable = new Runnable() {
1:             public void run() {
1:                 runningThread = Thread.currentThread();
1:                 runTask();
1:                 runningThread = null;
1:             }
1:         };
1:     }
1:     
1: 
1: 
1:     /**
1:      * We Expect MANY wakeup calls on the same TaskRunner.
1:      */
1:     public void wakeup() throws InterruptedException {
0:         synchronized( runable ) {
1:             
1:             // When we get in here, we make some assumptions of state:
0:             // queued=false, iterating=false: wakeup() has not be called and therefore task is not executing.
0:             // queued=true,  iterating=false: wakeup() was called but, task execution has not started yet 
0:             // queued=false, iterating=true : wakeup() was called, which caused task execution to start.
0:             // queued=true,  iterating=true : wakeup() called after task execution was started. 
1:             
0:             if( queued || shutdown )
1:                 return;
1:             
0:             queued=true;
1:             
0:             // The runTask() method will do this for me once we are done iterating.
0:             if( !iterating ) {
0:                 executor.execute(runable);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * shut down the task
0:      * @throws InterruptedException 
1:      */
0:     public void shutdown() throws InterruptedException{
0:         synchronized(runable){
0:             shutdown=true;
0:             //the check on the thread is done
0:             //because a call to iterate can result in
0:             //shutDown() being called, which would wait forever
0:             //waiting for iterating to finish
0:             if(runningThread!=Thread.currentThread()){
0:                 while(iterating==true){
0:                     runable.wait();
1:                 }
1:             }
1:         }
1:     }        
1:     
0:     private void runTask() {
1:         
1:         synchronized (runable) {
0:             queued = false;
0:             if( shutdown ) {
1:                 iterating = false;
1:                 runable.notifyAll();
1:                 return;
1:             }
1:             iterating = true;
1:         }
1:         
0:         // Don't synchronize while we are iterating so that 
1:         // multiple wakeup() calls can be executed concurrently.
0:         boolean done=false;
1:         for (int i = 0; i < maxIterationsPerRun; i++) {
0:             if( !task.iterate() ) {
0:                 done=true;
1:                 break;
1:             }
1:         }
1:         
1:         synchronized (runable) {
0:             iterating=false;
0:             if( shutdown ) {
0:                 queued=false;
1:                 runable.notifyAll();
1:                 return;
1:             }
1:             
0:             // If we could not iterate all the items
0:             // then we need to re-queue.
0:             if( !done )
0:                 queued = true;    
1:             
0:             if( queued ) {
0:                 executor.execute(runable);
1:             }
1:         }
1:     }
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:287f69d
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 
1:     private static final Logger LOG = LoggerFactory.getLogger(PooledTaskRunner.class);
/////////////////////////////////////////////////////////////////////////
1:     public PooledTaskRunner(Executor executor, final Task task, int maxIterationsPerRun) {
/////////////////////////////////////////////////////////////////////////
1:                     LOG.trace("Run task done: {}", task);
/////////////////////////////////////////////////////////////////////////
0:         LOG.trace("Shutdown timeout: {} task: {}", task);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("Running task iteration {} - {}", i, task);
author:Gary Tully
-------------------------------------------------------------------------------
commit:8a2892b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f0429be
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.MDCHelper;
0: 
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:         final Map context = MDCHelper.getCopyOfContextMap();
0:                 MDCHelper.setContextMap(context);
author:Robert Davies
-------------------------------------------------------------------------------
commit:5660ebc
/////////////////////////////////////////////////////////////////////////
1:     private volatile Thread runningThread;
/////////////////////////////////////////////////////////////////////////
1:                 try {
0:                     runTask();
1:                 } finally {
0:                     runningThread = null;
0:                 }
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             for (int i = 0; i < maxIterationsPerRun; i++) {
0:                 if (!task.iterate()) {
0:                     done = true;
0:                     break;
0:                 }
0:             }
1:         } finally {
0:             synchronized( runable ) {
0:                 iterating = false;
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
1:     final void runTask() {
commit:da13d59
/////////////////////////////////////////////////////////////////////////
0:     public void shutdown(long timeout) throws InterruptedException{
/////////////////////////////////////////////////////////////////////////
0:                 if(iterating==true){
1:                     runable.wait(timeout);
0:     
1:     public void shutdown() throws InterruptedException {
1:         shutdown(0);
0:     }
============================================================================