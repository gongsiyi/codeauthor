1:8233079: /*
1:a3a8c1c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a3a8c1c:  * contributor license agreements.  See the NOTICE file distributed with
1:a3a8c1c:  * this work for additional information regarding copyright ownership.
1:a3a8c1c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a3a8c1c:  * (the "License"); you may not use this file except in compliance with
1:a3a8c1c:  * the License.  You may obtain a copy of the License at
1:a3a8c1c:  * <p/>
1:a3a8c1c:  * http://www.apache.org/licenses/LICENSE-2.0
1:a3a8c1c:  * <p/>
1:a3a8c1c:  * Unless required by applicable law or agreed to in writing, software
1:a3a8c1c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a3a8c1c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a3a8c1c:  * See the License for the specific language governing permissions and
1:a3a8c1c:  * limitations under the License.
1:a3a8c1c:  */
1:a3a8c1c: package org.apache.activemq.usecases;
51:a3a8c1c: 
1:8233079: import static org.junit.Assert.assertEquals;
1:8233079: import static org.junit.Assert.assertFalse;
1:8233079: import static org.junit.Assert.assertNotNull;
1:a3a8c1c: 
1:a3a8c1c: import java.util.ArrayList;
1:a3a8c1c: import java.util.Enumeration;
1:a3a8c1c: import java.util.List;
1:a3a8c1c: 
1:a3a8c1c: import javax.jms.BytesMessage;
1:a3a8c1c: import javax.jms.Connection;
1:a3a8c1c: import javax.jms.ConnectionFactory;
1:a3a8c1c: import javax.jms.Message;
1:a3a8c1c: import javax.jms.MessageConsumer;
1:a3a8c1c: import javax.jms.MessageProducer;
1:a3a8c1c: import javax.jms.QueueBrowser;
1:a3a8c1c: import javax.jms.Session;
1:a3a8c1c: 
1:a3a8c1c: import org.apache.activemq.ActiveMQConnectionFactory;
1:a3a8c1c: import org.apache.activemq.broker.BrokerService;
1:a3a8c1c: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a3a8c1c: import org.apache.activemq.broker.region.policy.PolicyMap;
1:a3a8c1c: import org.apache.activemq.command.ActiveMQQueue;
1:8233079: import org.junit.After;
1:8233079: import org.junit.Before;
1:8233079: import org.junit.Test;
1:a3a8c1c: import org.slf4j.Logger;
1:a3a8c1c: import org.slf4j.LoggerFactory;
1:a3a8c1c: 
1:8233079: public class QueueZeroPrefetchLazyDispatchPriorityTest {
1:a3a8c1c: 
1:8233079:     private static final Logger LOG = LoggerFactory.getLogger(QueueZeroPrefetchLazyDispatchPriorityTest.class);
1:a3a8c1c: 
1:8233079:     private final byte[] PAYLOAD = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
1:8a30026:     private final int ITERATIONS = 6;
1:a3a8c1c: 
1:a3a8c1c:     private BrokerService broker;
1:a3a8c1c: 
1:8233079:     @Before
1:8233079:     public void setUp() throws Exception {
1:a3a8c1c:         broker = createBroker();
1:a3a8c1c:         broker.start();
1:a3a8c1c:         broker.waitUntilStarted();
1:a3a8c1c:     }
1:a3a8c1c: 
1:8233079:     @After
1:8233079:     public void tearDown() throws Exception {
1:a3a8c1c:         if (broker != null) {
1:a3a8c1c:             broker.stop();
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:8a30026:     @Test(timeout=120000)
1:a3a8c1c:     public void testPriorityMessages() throws Exception {
1:a3a8c1c: 
1:8233079:         for (int i = 0; i < ITERATIONS; i++) {
1:a3a8c1c: 
1:8233079:             // send 4 message priority MEDIUM
1:a3a8c1c:             produceMessages(4, 4, "TestQ");
1:a3a8c1c: 
1:8233079:             // send 1 message priority HIGH
1:a3a8c1c:             produceMessages(1, 5, "TestQ");
1:a3a8c1c: 
1:8233079:             LOG.info("On iteration {}", i);
1:a3a8c1c: 
1:a3a8c1c:             Thread.sleep(500);
1:a3a8c1c: 
1:a3a8c1c:             // consume messages
1:a3a8c1c:             ArrayList<Message> consumeList = consumeMessages("TestQ");
4:a3a8c1c:             LOG.info("Consumed list " + consumeList.size());
1:a3a8c1c: 
1:a3a8c1c:             // compare lists
1:a3a8c1c:             assertEquals("message 1 should be priority high", 5, consumeList.get(0).getJMSPriority());
1:a3a8c1c:             assertEquals("message 2 should be priority medium", 4, consumeList.get(1).getJMSPriority());
1:a3a8c1c:             assertEquals("message 3 should be priority medium", 4, consumeList.get(2).getJMSPriority());
1:a3a8c1c:             assertEquals("message 4 should be priority medium", 4, consumeList.get(3).getJMSPriority());
1:a3a8c1c:             assertEquals("message 5 should be priority medium", 4, consumeList.get(4).getJMSPriority());
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:8a30026:     @Test(timeout=120000)
1:a3a8c1c:     public void testPriorityMessagesMoreThanPageSize() throws Exception {
1:a3a8c1c: 
1:a3a8c1c:         final int numToSend = 450;
1:8233079:         for (int i = 0; i < ITERATIONS; i++) {
1:a3a8c1c:             produceMessages(numToSend - 1, 4, "TestQ");
1:a3a8c1c: 
1:a3a8c1c:             // ensure we get expiry processing
1:a3a8c1c:             Thread.sleep(700);
1:a3a8c1c: 
1:8233079:             // send 1 message priority HIGH
1:a3a8c1c:             produceMessages(1, 5, "TestQ");
1:a3a8c1c: 
1:a3a8c1c:             Thread.sleep(500);
1:a3a8c1c: 
1:8233079:             LOG.info("On iteration {}", i);
1:a3a8c1c: 
1:a3a8c1c:             // consume messages
1:a3a8c1c:             ArrayList<Message> consumeList = consumeMessages("TestQ");
1:8233079:             LOG.info("Consumed list {}", consumeList.size());
1:a3a8c1c: 
1:a3a8c1c:             // compare lists
1:8233079:             assertFalse("Consumed list should not be empty", consumeList.isEmpty());
1:a3a8c1c:             assertEquals("message 1 should be priority high", 5, consumeList.get(0).getJMSPriority());
1:a3a8c1c:             for (int j = 1; j < (numToSend - 1); j++) {
1:a3a8c1c:                 assertEquals("message " + j + " should be priority medium", 4, consumeList.get(j).getJMSPriority());
1:a3a8c1c:             }
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:8a30026:     @Test(timeout=120000)
1:a3a8c1c:     public void testLongLivedPriorityConsumer() throws Exception {
1:a3a8c1c: 
1:a3a8c1c:         final int numToSend = 150;
1:a3a8c1c: 
1:a3a8c1c:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:a3a8c1c:         Connection connection = connectionFactory.createConnection();
1:a3a8c1c: 
1:a3a8c1c:         try {
1:a3a8c1c:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a8c1c:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("TestQ"));
1:a3a8c1c:             connection.start();
1:a3a8c1c: 
1:8233079:             for (int i = 0; i < ITERATIONS; i++) {
1:a3a8c1c:                 produceMessages(numToSend - 1, 4, "TestQ");
1:a3a8c1c: 
1:8233079:                 // send 1 message priority HIGH
1:a3a8c1c:                 produceMessages(1, 5, "TestQ");
1:a3a8c1c: 
1:a3a8c1c:                 Message message = consumer.receive(4000);
1:a3a8c1c: 
1:a3a8c1c:                 assertEquals("message should be priority high", 5, message.getJMSPriority());
1:a3a8c1c:             }
1:a3a8c1c:         } finally {
1:a3a8c1c:             connection.close();
1:a3a8c1c:         }
1:a3a8c1c: 
1:a3a8c1c:         ArrayList<Message> consumeList = consumeMessages("TestQ");
1:8233079:         LOG.info("Consumed list {}", consumeList.size());
1:a3a8c1c: 
1:a3a8c1c:         for (Message message : consumeList) {
1:a3a8c1c:             assertEquals("should be priority medium", 4, message.getJMSPriority());
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:8a30026:     @Test(timeout=120000)
1:a3a8c1c:     public void testPriorityMessagesWithJmsBrowser() throws Exception {
1:a3a8c1c: 
1:a3a8c1c:         final int numToSend = 250;
1:a3a8c1c: 
1:8233079:         for (int i = 0; i < ITERATIONS; i++) {
1:a3a8c1c:             produceMessages(numToSend - 1, 4, "TestQ");
1:a3a8c1c: 
1:a3a8c1c:             ArrayList<Message> browsed = browseMessages("TestQ");
1:a3a8c1c: 
1:8233079:             LOG.info("Browsed: {}", browsed.size());
1:a3a8c1c: 
1:8233079:             // send 1 message priority HIGH
1:a3a8c1c:             produceMessages(1, 5, "TestQ");
1:a3a8c1c: 
1:a3a8c1c:             Thread.sleep(500);
1:a3a8c1c: 
1:8233079:             LOG.info("On iteration {}", i);
1:a3a8c1c: 
1:a3a8c1c:             Message message = consumeOneMessage("TestQ");
1:a3a8c1c:             assertNotNull(message);
1:a3a8c1c:             assertEquals(5, message.getJMSPriority());
1:a3a8c1c: 
1:a3a8c1c:             // consume messages
1:a3a8c1c:             ArrayList<Message> consumeList = consumeMessages("TestQ");
1:8233079:             LOG.info("Consumed list {}", consumeList.size());
1:a3a8c1c: 
1:a3a8c1c:             // compare lists
1:8233079:             // assertEquals("Iteration: " + i
1:8233079:             // +", message 1 should be priority high", 5,
1:8233079:             // consumeList.get(0).getJMSPriority());
1:a3a8c1c:             for (int j = 1; j < (numToSend - 1); j++) {
1:a3a8c1c:                 assertEquals("Iteration: " + i + ", message " + j + " should be priority medium", 4, consumeList.get(j).getJMSPriority());
1:a3a8c1c:             }
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:8233079:     @Test(timeout=120000)
1:a3a8c1c:     public void testJmsBrowserGetsPagedIn() throws Exception {
1:a3a8c1c:         final int numToSend = 10;
1:a3a8c1c: 
1:8233079:         for (int i = 0; i < ITERATIONS; i++) {
1:a3a8c1c:             produceMessages(numToSend, 4, "TestQ");
1:a3a8c1c: 
1:a3a8c1c:             ArrayList<Message> browsed = browseMessages("TestQ");
1:a3a8c1c: 
1:8233079:             LOG.info("Browsed: {}", browsed.size());
1:a3a8c1c: 
1:a3a8c1c:             assertEquals(0, browsed.size());
1:a3a8c1c: 
1:a3a8c1c:             Message message = consumeOneMessage("TestQ", Session.CLIENT_ACKNOWLEDGE);
1:a3a8c1c:             assertNotNull(message);
1:a3a8c1c: 
1:a3a8c1c:             browsed = browseMessages("TestQ");
1:a3a8c1c: 
1:8233079:             LOG.info("Browsed: {}", browsed.size());
1:a3a8c1c: 
1:a3a8c1c:             assertEquals("see only the paged in for pull", 1, browsed.size());
1:a3a8c1c: 
1:a3a8c1c:             // consume messages
1:a3a8c1c:             ArrayList<Message> consumeList = consumeMessages("TestQ");
1:a3a8c1c:             LOG.info("Consumed list " + consumeList.size());
1:a3a8c1c:             assertEquals(numToSend, consumeList.size());
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:a3a8c1c:     private void produceMessages(int numberOfMessages, int priority, String queueName) throws Exception {
1:a3a8c1c:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:a3a8c1c:         connectionFactory.setConnectionIDPrefix("pri-" + priority);
1:a3a8c1c:         Connection connection = connectionFactory.createConnection();
1:a3a8c1c: 
1:a3a8c1c:         try {
1:a3a8c1c:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a8c1c:             MessageProducer producer = session.createProducer(new ActiveMQQueue(queueName));
1:a3a8c1c:             connection.start();
1:a3a8c1c: 
1:a3a8c1c:             for (int i = 0; i < numberOfMessages; i++) {
1:a3a8c1c:                 BytesMessage m = session.createBytesMessage();
1:a3a8c1c:                 m.writeBytes(PAYLOAD);
1:a3a8c1c:                 m.setJMSPriority(priority);
1:a3a8c1c:                 producer.send(m, Message.DEFAULT_DELIVERY_MODE, m.getJMSPriority(), Message.DEFAULT_TIME_TO_LIVE);
1:a3a8c1c:             }
1:a3a8c1c:         } finally {
1:a3a8c1c:             if (connection != null) {
1:a3a8c1c:                 connection.close();
1:a3a8c1c:             }
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:a3a8c1c:     private ArrayList<Message> consumeMessages(String queueName) throws Exception {
1:a3a8c1c:         ArrayList<Message> returnedMessages = new ArrayList<Message>();
1:a3a8c1c: 
1:a3a8c1c:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:a3a8c1c:         Connection connection = connectionFactory.createConnection();
1:a3a8c1c:         try {
1:a3a8c1c:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a8c1c:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(queueName));
1:a3a8c1c:             connection.start();
1:a3a8c1c:             boolean finished = false;
1:a3a8c1c: 
1:a3a8c1c:             while (!finished) {
1:e467f34:                 Message message = consumer.receive(returnedMessages.isEmpty() ? 5000 : 1000);
1:a3a8c1c:                 if (message == null) {
1:a3a8c1c:                     finished = true;
1:a3a8c1c:                 }
1:a3a8c1c: 
1:a3a8c1c:                 if (message != null) {
1:a3a8c1c:                     returnedMessages.add(message);
1:a3a8c1c:                 }
1:a3a8c1c:             }
1:a3a8c1c: 
1:a3a8c1c:             consumer.close();
1:a3a8c1c:             return returnedMessages;
1:a3a8c1c:         } finally {
1:a3a8c1c:             if (connection != null) {
1:a3a8c1c:                 connection.close();
1:a3a8c1c:             }
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:a3a8c1c:     private Message consumeOneMessage(String queueName) throws Exception {
1:a3a8c1c:         return consumeOneMessage(queueName, Session.AUTO_ACKNOWLEDGE);
1:a3a8c1c:     }
1:a3a8c1c: 
1:a3a8c1c:     private Message consumeOneMessage(String queueName, int ackMode) throws Exception {
1:a3a8c1c:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:a3a8c1c:         Connection connection = connectionFactory.createConnection();
1:a3a8c1c:         try {
1:a3a8c1c:             Session session = connection.createSession(false, ackMode);
1:a3a8c1c:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(queueName));
1:a3a8c1c:             connection.start();
1:a3a8c1c: 
1:e467f34:             return consumer.receive(5000);
1:a3a8c1c:         } finally {
1:a3a8c1c:             if (connection != null) {
1:a3a8c1c:                 connection.close();
1:a3a8c1c:             }
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:a3a8c1c:     private ArrayList<Message> browseMessages(String queueName) throws Exception {
1:a3a8c1c:         ArrayList<Message> returnedMessages = new ArrayList<Message>();
1:a3a8c1c: 
1:a3a8c1c:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:a3a8c1c:         Connection connection = connectionFactory.createConnection();
1:a3a8c1c:         try {
1:a3a8c1c:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a3a8c1c:             QueueBrowser consumer = session.createBrowser(new ActiveMQQueue(queueName));
1:a3a8c1c:             connection.start();
1:a3a8c1c: 
1:8233079:             Enumeration<?> enumeration = consumer.getEnumeration();
1:a3a8c1c:             while (enumeration.hasMoreElements()) {
1:a3a8c1c:                 Message message = (Message) enumeration.nextElement();
1:a3a8c1c:                 returnedMessages.add(message);
1:a3a8c1c:             }
1:a3a8c1c: 
1:a3a8c1c:             return returnedMessages;
1:a3a8c1c:         } finally {
1:a3a8c1c:             if (connection != null) {
1:a3a8c1c:                 connection.close();
1:a3a8c1c:             }
1:a3a8c1c:         }
1:a3a8c1c:     }
1:a3a8c1c: 
1:a3a8c1c:     private BrokerService createBroker() throws Exception {
1:a3a8c1c:         BrokerService broker = new BrokerService();
1:a3a8c1c:         broker.setDeleteAllMessagesOnStartup(true);
1:a3a8c1c: 
1:8233079:         // add the policy entries
1:a3a8c1c:         PolicyMap policyMap = new PolicyMap();
1:a3a8c1c:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:a3a8c1c:         PolicyEntry pe = new PolicyEntry();
1:a3a8c1c: 
1:a3a8c1c:         pe.setPrioritizedMessages(true);
1:a3a8c1c: 
1:a3a8c1c:         pe.setExpireMessagesPeriod(500);
1:a3a8c1c: 
1:a3a8c1c:         pe.setMaxPageSize(100);
1:a3a8c1c:         pe.setMaxExpirePageSize(0);
1:a3a8c1c:         pe.setMaxBrowsePageSize(0);
1:a3a8c1c: 
1:a3a8c1c:         pe.setQueuePrefetch(0);
1:a3a8c1c:         pe.setLazyDispatch(true);
1:a3a8c1c: 
1:a3a8c1c:         pe.setOptimizedDispatch(true);
1:a3a8c1c: 
1:a3a8c1c:         pe.setUseCache(false);
1:a3a8c1c: 
1:a3a8c1c:         pe.setQueue(">");
1:a3a8c1c:         entries.add(pe);
1:a3a8c1c:         policyMap.setPolicyEntries(entries);
1:a3a8c1c:         broker.setDestinationPolicy(policyMap);
1:a3a8c1c: 
1:a3a8c1c:         broker.addConnector("tcp://0.0.0.0:0");
1:a3a8c1c:         return broker;
1:a3a8c1c:     }
1:a3a8c1c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e467f34
/////////////////////////////////////////////////////////////////////////
1:                 Message message = consumer.receive(returnedMessages.isEmpty() ? 5000 : 1000);
/////////////////////////////////////////////////////////////////////////
1:             return consumer.receive(5000);
commit:a3a8c1c
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.List;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: public class QueueZeroPrefetchLazyDispatchPriorityTest extends TestCase {
1: 
0:     static final Logger LOG = LoggerFactory.getLogger(QueueZeroPrefetchLazyDispatchPriorityTest.class);
1:     private BrokerService broker;
0:     public static final byte[] PAYLOAD = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
1: 
1: 
0:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
0:     protected void tearDown() throws Exception {
1: 
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1: 
1:     public void testPriorityMessages() throws Exception {
1: 
1: 
0:         for (int i = 0; i < 5; i++) {
1: 
1: 
0:             //send 4 message priority MEDIUM
1:             produceMessages(4, 4, "TestQ");
1: 
1: 
0:             //send 1 message priority HIGH
1:             produceMessages(1, 5, "TestQ");
1: 
1: 
0:             LOG.info("On iteration " + i);
1: 
1: 
1:             Thread.sleep(500);
1: 
1: 
1:             // consume messages
1:             ArrayList<Message> consumeList = consumeMessages("TestQ");
1:             LOG.info("Consumed list " + consumeList.size());
1: 
1: 
1:             // compare lists
1:             assertEquals("message 1 should be priority high", 5, consumeList.get(0).getJMSPriority());
1:             assertEquals("message 2 should be priority medium", 4, consumeList.get(1).getJMSPriority());
1:             assertEquals("message 3 should be priority medium", 4, consumeList.get(2).getJMSPriority());
1:             assertEquals("message 4 should be priority medium", 4, consumeList.get(3).getJMSPriority());
1:             assertEquals("message 5 should be priority medium", 4, consumeList.get(4).getJMSPriority());
1:         }
1: 
1:     }
1: 
1: 
1:     public void testPriorityMessagesMoreThanPageSize() throws Exception {
1: 
1: 
1:         final int numToSend = 450;
0:         for (int i = 0; i < 5; i++) {
1: 
1:             produceMessages(numToSend - 1, 4, "TestQ");
1: 
1:             // ensure we get expiry processing
1:             Thread.sleep(700);
1: 
1: 
0:             //send 1 message priority HIGH
1:             produceMessages(1, 5, "TestQ");
1: 
1:             Thread.sleep(500);
1: 
0:             LOG.info("On iteration " + i);
1: 
1:             // consume messages
1:             ArrayList<Message> consumeList = consumeMessages("TestQ");
1:             LOG.info("Consumed list " + consumeList.size());
1: 
1: 
1:             // compare lists
1:             assertEquals("message 1 should be priority high", 5, consumeList.get(0).getJMSPriority());
1:             for (int j = 1; j < (numToSend - 1); j++) {
1:                 assertEquals("message " + j + " should be priority medium", 4, consumeList.get(j).getJMSPriority());
1:             }
1:         }
1: 
1:     }
1: 
1: 
1:     public void testLongLivedPriorityConsumer() throws Exception {
1: 
1:         final int numToSend = 150;
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:         Connection connection = connectionFactory.createConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("TestQ"));
1:             connection.start();
1: 
0:             for (int i = 0; i < 5; i++) {
1: 
1:                 produceMessages(numToSend - 1, 4, "TestQ");
1: 
0:                 //send 1 message priority HIGH
1:                 produceMessages(1, 5, "TestQ");
1: 
1:                 Message message = consumer.receive(4000);
1: 
1:                 assertEquals("message should be priority high", 5, message.getJMSPriority());
1: 
1:             }
1:         } finally {
1:             connection.close();
1:         }
1: 
1:         ArrayList<Message> consumeList = consumeMessages("TestQ");
1:         LOG.info("Consumed list " + consumeList.size());
1: 
1:         for (Message message : consumeList) {
1:             assertEquals("should be priority medium", 4, message.getJMSPriority());
1:         }
1: 
1:     }
1: 
1: 
1:     public void testPriorityMessagesWithJmsBrowser() throws Exception {
1: 
1: 
1:         final int numToSend = 250;
0:         for (int i = 0; i < 5; i++) {
1: 
1:             produceMessages(numToSend - 1, 4, "TestQ");
1: 
1:             ArrayList<Message> browsed = browseMessages("TestQ");
1: 
0:             LOG.info("Browsed: " + browsed.size());
1: 
0:             //send 1 message priority HIGH
1:             produceMessages(1, 5, "TestQ");
1: 
1:             Thread.sleep(500);
1: 
0:             LOG.info("On iteration " + i);
1: 
1:             Message message = consumeOneMessage("TestQ");
1:             assertNotNull(message);
1:             assertEquals(5, message.getJMSPriority());
1: 
1:             // consume messages
1:             ArrayList<Message> consumeList = consumeMessages("TestQ");
1:             LOG.info("Consumed list " + consumeList.size());
1: 
1: 
1:             // compare lists
0:             //assertEquals("Iteration: " + i +", message 1 should be priority high", 5, consumeList.get(0).getJMSPriority());
1:             for (int j = 1; j < (numToSend - 1); j++) {
1:                 assertEquals("Iteration: " + i + ", message " + j + " should be priority medium", 4, consumeList.get(j).getJMSPriority());
1:             }
1:         }
1: 
1:     }
1: 
1:     public void testJmsBrowserGetsPagedIn() throws Exception {
1: 
1: 
1:         final int numToSend = 10;
0:         for (int i = 0; i < 10; i++) {
1: 
1:             produceMessages(numToSend, 4, "TestQ");
1: 
1:             ArrayList<Message> browsed = browseMessages("TestQ");
1: 
0:             LOG.info("Browsed: " + browsed.size());
1: 
1:             assertEquals(0, browsed.size());
1: 
1:             Message message = consumeOneMessage("TestQ", Session.CLIENT_ACKNOWLEDGE);
1:             assertNotNull(message);
1: 
1:             browsed = browseMessages("TestQ");
1: 
0:             LOG.info("Browsed: " + browsed.size());
1: 
1:             assertEquals("see only the paged in for pull", 1, browsed.size());
1: 
1:             // consume messages
1:             ArrayList<Message> consumeList = consumeMessages("TestQ");
1:             LOG.info("Consumed list " + consumeList.size());
1:             assertEquals(numToSend, consumeList.size());
1: 
1:         }
1: 
1:     }
1: 
1: 
1:     private void produceMessages(int numberOfMessages, int priority, String queueName) throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:         connectionFactory.setConnectionIDPrefix("pri-" + priority);
1:         Connection connection = connectionFactory.createConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(new ActiveMQQueue(queueName));
1:             connection.start();
1: 
1: 
1:             for (int i = 0; i < numberOfMessages; i++) {
1:                 BytesMessage m = session.createBytesMessage();
1:                 m.writeBytes(PAYLOAD);
1:                 m.setJMSPriority(priority);
1:                 producer.send(m, Message.DEFAULT_DELIVERY_MODE, m.getJMSPriority(), Message.DEFAULT_TIME_TO_LIVE);
1:             }
1: 
1:         } finally {
1: 
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1: 
1:     private ArrayList<Message> consumeMessages(String queueName) throws Exception {
1: 
1:         ArrayList<Message> returnedMessages = new ArrayList<Message>();
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:         Connection connection = connectionFactory.createConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(queueName));
1:             connection.start();
1:             boolean finished = false;
1: 
1:             while (!finished) {
1: 
0:                 Message message = consumer.receive(1000);
1:                 if (message == null) {
1:                     finished = true;
1:                 }
1: 
1:                 if (message != null) {
1:                     returnedMessages.add(message);
1:                 }
1: 
1:             }
1: 
1:             consumer.close();
1:             return returnedMessages;
1: 
1:         } finally {
1: 
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1: 
1:     }
1: 
1:     private Message consumeOneMessage(String queueName) throws Exception {
1:         return consumeOneMessage(queueName, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     private Message consumeOneMessage(String queueName, int ackMode) throws Exception {
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:         Connection connection = connectionFactory.createConnection();
1:         try {
1:             Session session = connection.createSession(false, ackMode);
1:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(queueName));
1:             connection.start();
1: 
0:             return consumer.receive(1000);
1: 
1:         } finally {
1: 
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:     }
1: 
1:     private ArrayList<Message> browseMessages(String queueName) throws Exception {
1: 
1:         ArrayList<Message> returnedMessages = new ArrayList<Message>();
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:         Connection connection = connectionFactory.createConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             QueueBrowser consumer = session.createBrowser(new ActiveMQQueue(queueName));
1:             connection.start();
1: 
0:             Enumeration enumeration = consumer.getEnumeration();
1:             while (enumeration.hasMoreElements()) {
1: 
1:                 Message message = (Message) enumeration.nextElement();
1:                 returnedMessages.add(message);
1: 
1:             }
1: 
1:             return returnedMessages;
1: 
1:         } finally {
1: 
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1: 
1:     }
1: 
1:     private BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
0:         //add the policy entries
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1:         pe.setPrioritizedMessages(true);
1: 
1:         pe.setExpireMessagesPeriod(500);
1: 
1:         pe.setMaxPageSize(100);
1:         pe.setMaxExpirePageSize(0);
1:         pe.setMaxBrowsePageSize(0);
1: 
1:         pe.setQueuePrefetch(0);
1:         pe.setLazyDispatch(true);
1: 
1:         pe.setOptimizedDispatch(true);
1: 
1:         pe.setUseCache(false);
1: 
1:         pe.setQueue(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1: 
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         return broker;
1:     }
1: 
1: 
1: }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8a30026
/////////////////////////////////////////////////////////////////////////
1:     private final int ITERATIONS = 6;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=120000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=120000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=120000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=120000)
commit:8233079
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class QueueZeroPrefetchLazyDispatchPriorityTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueZeroPrefetchLazyDispatchPriorityTest.class);
1:     private final byte[] PAYLOAD = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
0:     private final int ITERATIONS = 10;
0: 
1:     @Before
1:     public void setUp() throws Exception {
1:     @After
1:     public void tearDown() throws Exception {
0:     @Test(timeout=90000)
1:         for (int i = 0; i < ITERATIONS; i++) {
1:             // send 4 message priority MEDIUM
1:             // send 1 message priority HIGH
1:             LOG.info("On iteration {}", i);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=120000)
1:         for (int i = 0; i < ITERATIONS; i++) {
1:             // send 1 message priority HIGH
1:             LOG.info("On iteration {}", i);
1:             LOG.info("Consumed list {}", consumeList.size());
1:             assertFalse("Consumed list should not be empty", consumeList.isEmpty());
0:     @Test(timeout=90000)
0: 
1:             for (int i = 0; i < ITERATIONS; i++) {
1:                 // send 1 message priority HIGH
1:         LOG.info("Consumed list {}", consumeList.size());
0:     @Test(timeout=90000)
1:         for (int i = 0; i < ITERATIONS; i++) {
1:             LOG.info("Browsed: {}", browsed.size());
1:             // send 1 message priority HIGH
1:             LOG.info("On iteration {}", i);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Consumed list {}", consumeList.size());
1:             // assertEquals("Iteration: " + i
1:             // +", message 1 should be priority high", 5,
1:             // consumeList.get(0).getJMSPriority());
0:     @Test(timeout=90000)
1:         for (int i = 0; i < ITERATIONS; i++) {
1:             LOG.info("Browsed: {}", browsed.size());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Browsed: {}", browsed.size());
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             return consumer.receive(2000);
/////////////////////////////////////////////////////////////////////////
1:             Enumeration<?> enumeration = consumer.getEnumeration();
1:         // add the policy entries
/////////////////////////////////////////////////////////////////////////
============================================================================