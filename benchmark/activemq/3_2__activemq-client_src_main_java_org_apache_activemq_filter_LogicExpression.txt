2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
7:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A filter performing a comparison of two objects
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public abstract class LogicExpression extends BinaryExpression implements BooleanExpression {
1:d29ca2a: 
1:ecf89a6:     /**
1:ecf89a6:      * @param left
1:ecf89a6:      * @param right
1:ecf89a6:      */
1:ecf89a6:     public LogicExpression(BooleanExpression left, BooleanExpression right) {
1:ecf89a6:         super(left, right);
1:ecf89a6:     }
1:ecf89a6: 
1:d29ca2a:     public static BooleanExpression createOR(BooleanExpression lvalue, BooleanExpression rvalue) {
1:d29ca2a:         return new LogicExpression(lvalue, rvalue) {
1:74a7a8b: 
1:d29ca2a:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:74a7a8b: 
1:74a7a8b:                 Boolean lv = (Boolean)left.evaluate(message);
1:74a7a8b:                 if (lv != null && lv.booleanValue()) {
1:d29ca2a:                     return Boolean.TRUE;
3:d29ca2a:                 }
1:74a7a8b:                 Boolean rv = (Boolean)right.evaluate(message);
1:6e9ecdf:                 if (rv != null && rv.booleanValue()) {
1:6e9ecdf:                     return Boolean.TRUE;
1:6e9ecdf:                 }
1:6e9ecdf:                 if (lv == null || rv == null) {
1:6e9ecdf:                     return null;
1:6e9ecdf:                 }
1:6e9ecdf:                 return Boolean.FALSE;
1:ecf89a6:             }
1:74a7a8b: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "OR";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static BooleanExpression createAND(BooleanExpression lvalue, BooleanExpression rvalue) {
1:d29ca2a:         return new LogicExpression(lvalue, rvalue) {
1:d29ca2a: 
1:d29ca2a:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:d29ca2a: 
1:74a7a8b:                 Boolean lv = (Boolean)left.evaluate(message);
1:d29ca2a: 
1:6e9ecdf:                 if (lv != null && !lv.booleanValue()) {
1:d29ca2a:                     return Boolean.FALSE;
1:6e9ecdf:                 }
1:74a7a8b:                 Boolean rv = (Boolean)right.evaluate(message);
1:6e9ecdf:                 if (rv != null && !rv.booleanValue()) {
1:6e9ecdf:                     return Boolean.FALSE;
1:6e9ecdf:                 }
1:6e9ecdf:                 if (lv == null || rv == null) {
1:6e9ecdf:                     return null;
1:d29ca2a:                 }
1:6e9ecdf:                 return Boolean.TRUE;
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             public String getExpressionSymbol() {
1:d29ca2a:                 return "AND";
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     public abstract Object evaluate(MessageEvaluationContext message) throws JMSException;
1:d29ca2a: 
1:d29ca2a:     public boolean matches(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:         Object object = evaluate(message);
1:74a7a8b:         return object != null && object == Boolean.TRUE;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6e9ecdf
/////////////////////////////////////////////////////////////////////////
1:                 if (rv != null && rv.booleanValue()) {
1:                     return Boolean.TRUE;
1:                 }
1:                 if (lv == null || rv == null) {
1:                     return null;
1:                 }
1:                 return Boolean.FALSE;
/////////////////////////////////////////////////////////////////////////
1:                 if (lv != null && !lv.booleanValue()) {
1:                 if (rv != null && !rv.booleanValue()) {
1:                     return Boolean.FALSE;
1:                 }
1:                 if (lv == null || rv == null) {
1:                     return null;
1:                 }
1:                 return Boolean.TRUE;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param left
1:      * @param right
1:      */
1:     public LogicExpression(BooleanExpression left, BooleanExpression right) {
1:         super(left, right);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:                 if (lv == null) {
1:                 }
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public abstract Object evaluate(MessageEvaluationContext message) throws JMSException;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:                 Boolean lv = (Boolean)left.evaluate(message);
1:                 if (lv != null && lv.booleanValue()) {
1: 
1:                 Boolean rv = (Boolean)right.evaluate(message);
0:                 return rv == null ? null : rv;
/////////////////////////////////////////////////////////////////////////
1:                 Boolean lv = (Boolean)left.evaluate(message);
/////////////////////////////////////////////////////////////////////////
1:                 Boolean rv = (Boolean)right.evaluate(message);
/////////////////////////////////////////////////////////////////////////
1:         return object != null && object == Boolean.TRUE;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import javax.jms.JMSException;
1: 
1: /**
1:  * A filter performing a comparison of two objects
1:  * 
0:  * @version $Revision: 1.2 $
1:  */
1: public abstract class LogicExpression extends BinaryExpression implements BooleanExpression {
1: 
1:     public static BooleanExpression createOR(BooleanExpression lvalue, BooleanExpression rvalue) {
1:         return new LogicExpression(lvalue, rvalue) {
1:         	
1:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:                 
0:             	Boolean lv = (Boolean) left.evaluate(message);
0:                 // Can we do an OR shortcut??
0:             	if (lv !=null && lv.booleanValue()) {
1:                     return Boolean.TRUE;
1:                 }
1:             	
0:                 Boolean rv = (Boolean) right.evaluate(message);
0:                 return rv==null ? null : rv;
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "OR";
1:             }
1:         };
1:     }
1: 
1:     public static BooleanExpression createAND(BooleanExpression lvalue, BooleanExpression rvalue) {
1:         return new LogicExpression(lvalue, rvalue) {
1: 
1:             public Object evaluate(MessageEvaluationContext message) throws JMSException {
1: 
0:                 Boolean lv = (Boolean) left.evaluate(message);
1: 
0:                 // Can we do an AND shortcut??
0:                 if (lv == null)
0:                     return null;
0:                 if (!lv.booleanValue()) {
1:                     return Boolean.FALSE;
1:                 }
1: 
0:                 Boolean rv = (Boolean) right.evaluate(message);
0:                 return rv == null ? null : rv;
1:             }
1: 
1:             public String getExpressionSymbol() {
1:                 return "AND";
1:             }
1:         };
1:     }
1: 
1:     /**
0:      * @param left
0:      * @param right
1:      */
0:     public LogicExpression(BooleanExpression left, BooleanExpression right) {
0:         super(left, right);
1:     }
1: 
0:     abstract public Object evaluate(MessageEvaluationContext message) throws JMSException;
1: 
1:     public boolean matches(MessageEvaluationContext message) throws JMSException {
1:         Object object = evaluate(message);
0:         return object!=null && object==Boolean.TRUE;            
1:     }
1: 
1: }
============================================================================