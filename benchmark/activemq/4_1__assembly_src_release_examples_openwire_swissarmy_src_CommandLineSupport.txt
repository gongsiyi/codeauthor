1:3f32507: /**
1:3f32507:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  * this work for additional information regarding copyright ownership.
1:3f32507:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  * (the "License"); you may not use this file except in compliance with
1:3f32507:  * the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  */
1:3f32507: 
1:3f32507: import java.util.ArrayList;
1:3f32507: 
1:3f32507: import org.apache.activemq.util.IntrospectionSupport;
1:3f32507: 
1:3f32507: /**
1:3f32507:  * Helper utility that can be used to set the properties on any object using
1:3f32507:  * command line arguments.
1:3f32507:  * 
1:3f32507:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:3f32507:  */
1:3f32507: public final class CommandLineSupport {
1:3f32507: 
1:3f32507:     private CommandLineSupport() {
1:3f32507:     }
1:3f32507:     
1:3f32507:     /**
1:3f32507:      * Sets the properties of an object given the command line args.
1:3f32507:      * 
1:3f32507:      * if args contains: --ack-mode=AUTO --url=tcp://localhost:61616 --persistent 
1:3f32507:      * 
1:3f32507:      * then it will try to call the following setters on the target object.
1:3f32507:      * 
1:3f32507:      * target.setAckMode("AUTO");
1:3f32507:      * target.setURL(new URI("tcp://localhost:61616") );
1:3f32507:      * target.setPersistent(true);
1:3f32507:      * 
1:3f32507:      * Notice the the proper conversion for the argument is determined by examining the 
1:3f32507:      * setter arguement type.  
1:3f32507:      * 
1:3f32507:      * @param target the object that will have it's properties set
1:3f32507:      * @param args the commline options
1:3f32507:      * @return any arguments that are not valid options for the target
1:3f32507:      */
1:3f32507:     public static String[] setOptions(Object target, String[] args) {
1:3f32507:         ArrayList<String> rc = new ArrayList<String>();
1:3f32507: 
1:3f32507:         for (int i = 0; i < args.length; i++) {
1:3f32507:             if (args[i] == null) {
1:3f32507:                 continue;
1:3f32507:             }
1:3f32507: 
1:3f32507:             if (args[i].startsWith("--")) {
1:3f32507: 
1:3f32507:                 // --options without a specified value are considered boolean
1:3f32507:                 // flags that are enabled.
1:3f32507:                 String value = "true";
1:3f32507:                 String name = args[i].substring(2);
1:3f32507: 
1:3f32507:                 // if --option=value case
1:3f32507:                 int p = name.indexOf("=");
1:3f32507:                 if (p > 0) {
1:3f32507:                     value = name.substring(p + 1);
1:3f32507:                     name = name.substring(0, p);
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 // name not set, then it's an unrecognized option
1:3f32507:                 if (name.length() == 0) {
1:3f32507:                     rc.add(args[i]);
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 String propName = convertOptionToPropertyName(name);
1:3f32507:                 if (!IntrospectionSupport.setProperty(target, propName, value)) {
1:3f32507:                     rc.add(args[i]);
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507:             }
1:3f32507: 
1:3f32507:         }
1:3f32507: 
1:3f32507:         String r[] = new String[rc.size()];
1:3f32507:         rc.toArray(r);
1:3f32507:         return r;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * converts strings like: test-enabled to testEnabled
1:3f32507:      * 
1:3f32507:      * @param name
1:3f32507:      * @return
1:3f32507:      */
1:3f32507:     private static String convertOptionToPropertyName(String name) {
1:3f32507:         String rc = "";
1:3f32507: 
1:3f32507:         // Look for '-' and strip and then convert the subsequent char to
1:3f32507:         // uppercase
1:3f32507:         int p = name.indexOf("-");
1:3f32507:         while (p > 0) {
1:3f32507:             // strip
1:3f32507:             rc += name.substring(0, p);
1:3f32507:             name = name.substring(p + 1);
1:3f32507: 
1:3f32507:             // can I convert the next char to upper?
1:3f32507:             if (name.length() > 0) {
1:3f32507:                 rc += name.substring(0, 1).toUpperCase();
1:3f32507:                 name = name.substring(1);
1:3f32507:             }
1:3f32507: 
1:3f32507:             p = name.indexOf("-");
1:3f32507:         }
1:3f32507:         return rc + name;
1:3f32507:     }
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import java.util.ArrayList;
1: 
1: import org.apache.activemq.util.IntrospectionSupport;
1: 
1: /**
1:  * Helper utility that can be used to set the properties on any object using
1:  * command line arguments.
1:  * 
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public final class CommandLineSupport {
1: 
1:     private CommandLineSupport() {
1:     }
1:     
1:     /**
1:      * Sets the properties of an object given the command line args.
1:      * 
1:      * if args contains: --ack-mode=AUTO --url=tcp://localhost:61616 --persistent 
1:      * 
1:      * then it will try to call the following setters on the target object.
1:      * 
1:      * target.setAckMode("AUTO");
1:      * target.setURL(new URI("tcp://localhost:61616") );
1:      * target.setPersistent(true);
1:      * 
1:      * Notice the the proper conversion for the argument is determined by examining the 
1:      * setter arguement type.  
1:      * 
1:      * @param target the object that will have it's properties set
1:      * @param args the commline options
1:      * @return any arguments that are not valid options for the target
1:      */
1:     public static String[] setOptions(Object target, String[] args) {
1:         ArrayList<String> rc = new ArrayList<String>();
1: 
1:         for (int i = 0; i < args.length; i++) {
1:             if (args[i] == null) {
1:                 continue;
1:             }
1: 
1:             if (args[i].startsWith("--")) {
1: 
1:                 // --options without a specified value are considered boolean
1:                 // flags that are enabled.
1:                 String value = "true";
1:                 String name = args[i].substring(2);
1: 
1:                 // if --option=value case
1:                 int p = name.indexOf("=");
1:                 if (p > 0) {
1:                     value = name.substring(p + 1);
1:                     name = name.substring(0, p);
1:                 }
1: 
1:                 // name not set, then it's an unrecognized option
1:                 if (name.length() == 0) {
1:                     rc.add(args[i]);
1:                     continue;
1:                 }
1: 
1:                 String propName = convertOptionToPropertyName(name);
1:                 if (!IntrospectionSupport.setProperty(target, propName, value)) {
1:                     rc.add(args[i]);
1:                     continue;
1:                 }
1:             }
1: 
1:         }
1: 
1:         String r[] = new String[rc.size()];
1:         rc.toArray(r);
1:         return r;
1:     }
1: 
1:     /**
1:      * converts strings like: test-enabled to testEnabled
1:      * 
1:      * @param name
1:      * @return
1:      */
1:     private static String convertOptionToPropertyName(String name) {
1:         String rc = "";
1: 
1:         // Look for '-' and strip and then convert the subsequent char to
1:         // uppercase
1:         int p = name.indexOf("-");
1:         while (p > 0) {
1:             // strip
1:             rc += name.substring(0, p);
1:             name = name.substring(p + 1);
1: 
1:             // can I convert the next char to upper?
1:             if (name.length() > 0) {
1:                 rc += name.substring(0, 1).toUpperCase();
1:                 name = name.substring(1);
1:             }
1: 
1:             p = name.indexOf("-");
1:         }
1:         return rc + name;
1:     }
1: }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0:  * Helper utility that can be used to set the properties on any object using
0:  * command line arguments.
0: public final class CommandLineSupport {
0:     private CommandLineSupport() {
0:     }
0:     
0:     /**
0:      * Sets the properties of an object given the command line args.
0:      * 
0:      * if args contains: --ack-mode=AUTO --url=tcp://localhost:61616 --persistent 
0:      * 
0:      * then it will try to call the following setters on the target object.
0:      * 
0:      * target.setAckMode("AUTO");
0:      * target.setURL(new URI("tcp://localhost:61616") );
0:      * target.setPersistent(true);
0:      * 
0:      * Notice the the proper conversion for the argument is determined by examining the 
0:      * setter arguement type.  
0:      * 
0:      * @param target the object that will have it's properties set
0:      * @param args the commline options
0:      * @return any arguments that are not valid options for the target
0:      */
0:     public static String[] setOptions(Object target, String[] args) {
0:         ArrayList<String> rc = new ArrayList<String>();
0: 
0:         for (int i = 0; i < args.length; i++) {
0:             if (args[i] == null) {
0:                 continue;
0:             }
0: 
0:             if (args[i].startsWith("--")) {
0: 
0:                 // --options without a specified value are considered boolean
0:                 // flags that are enabled.
0:                 String value = "true";
0:                 String name = args[i].substring(2);
0: 
0:                 // if --option=value case
0:                 int p = name.indexOf("=");
0:                 if (p > 0) {
0:                     value = name.substring(p + 1);
0:                     name = name.substring(0, p);
0:                 }
0: 
0:                 // name not set, then it's an unrecognized option
0:                 if (name.length() == 0) {
0:                     rc.add(args[i]);
0:                     continue;
0:                 }
0: 
0:                 String propName = convertOptionToPropertyName(name);
0:                 if (!IntrospectionSupport.setProperty(target, propName, value)) {
0:                     rc.add(args[i]);
0:                     continue;
0:                 }
0:             }
0: 
0:         }
0: 
0:         String r[] = new String[rc.size()];
0:         rc.toArray(r);
0:         return r;
0:     }
0: 
0:     /**
0:      * converts strings like: test-enabled to testEnabled
0:      * 
0:      * @param name
0:      * @return
0:      */
0:     private static String convertOptionToPropertyName(String name) {
0:         String rc = "";
0: 
0:         // Look for '-' and strip and then convert the subsequent char to
0:         // uppercase
0:         int p = name.indexOf("-");
0:         while (p > 0) {
0:             // strip
0:             rc += name.substring(0, p);
0:             name = name.substring(p + 1);
0: 
0:             // can I convert the next char to upper?
0:             if (name.length() > 0) {
0:                 rc += name.substring(0, 1).toUpperCase();
0:                 name = name.substring(1);
0:             }
0: 
0:             p = name.indexOf("-");
0:         }
0:         return rc + name;
0:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:148f3bd
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: import java.util.ArrayList;
0: 
0: import org.apache.activemq.util.IntrospectionSupport;
0: 
0: /**
0:  * Helper utility that can be used to set the properties on any object
0:  * using command line arguments.
0:  * 
0:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
0:  */
0: public class CommnadLineSupport {
0: 	
0: 	/**
0: 	 * Sets the properties of an object given the command line args.
0: 	 * 
0: 	 * if args contains: --ack-mode=AUTO --url=tcp://localhost:61616 --persistent 
0: 	 * 
0: 	 * then it will try to call the following setters on the target object.
0: 	 * 
0: 	 * target.setAckMode("AUTO");
0: 	 * target.setURL(new URI("tcp://localhost:61616") );
0: 	 * target.setPersistent(true);
0: 	 * 
0: 	 * Notice the the proper conversion for the argument is determined by examining the 
0: 	 * setter arguement type.  
0: 	 * 
0: 	 * @param target the object that will have it's properties set
0: 	 * @param args the commline options
0: 	 * @return any arguments that are not valid options for the target
0: 	 */
0: 	static public String[] setOptions(Object target, String []args) {
0: 		ArrayList rc = new ArrayList();
0: 		
0: 		for (int i = 0; i < args.length; i++) {
0: 			if( args[i] == null )
0: 				continue;
0: 			
0: 			if( args[i].startsWith("--") ) {
0: 				
0: 				// --options without a specified value are considered boolean flags that are enabled.
0: 				String value="true";
0: 				String name = args[i].substring(2);
0: 				
0: 				// if --option=value case
0: 				int p = name.indexOf("=");
0: 				if( p > 0 ) {
0: 					value = name.substring(p+1);
0: 					name = name.substring(0,p);
0: 				}
0: 				
0: 				// name not set, then it's an unrecognized option
0: 				if( name.length()==0 ) {
0: 					rc.add(args[i]);
0: 					continue;
0: 				}
0: 				
0: 				String propName = convertOptionToPropertyName(name);
0: 				if( !IntrospectionSupport.setProperty(target, propName, value) ) {					
0: 					rc.add(args[i]);
0: 					continue;
0: 				}
0: 			}
0: 			
0: 		}
0: 		
0: 		String r[] = new String[rc.size()];
0: 		rc.toArray(r);
0: 		return r;
0: 	}
0: 
0: 	/**
0: 	 * converts strings like: test-enabled to testEnabled
0: 	 * @param name
0: 	 * @return
0: 	 */
0: 	private static String convertOptionToPropertyName(String name) {
0: 		String rc="";
0: 		
0: 		// Look for '-' and strip and then convert the subsequent char to uppercase
0: 		int p = name.indexOf("-");
0: 		while( p > 0 ) {
0: 			// strip
0: 			rc += name.substring(0, p);
0: 			name = name.substring(p+1);
0: 			
0: 			// can I convert the next char to upper?
0: 			if( name.length() >0 ) {
0: 				rc += name.substring(0,1).toUpperCase();
0: 				name = name.substring(1);
0: 			}
0: 			
0: 			p = name.indexOf("-");
0: 		}
0: 		return rc+name;
0: 	}
0: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:0ef421d
/////////////////////////////////////////////////////////////////////////
============================================================================