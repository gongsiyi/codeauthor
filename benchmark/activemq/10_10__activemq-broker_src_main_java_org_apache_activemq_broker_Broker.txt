1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:0bb9013:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bb9013:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
1:d29ca2a: 
1:4741136: import java.net.URI;
1:27b3a7c: import java.util.Map;
1:debd0cc: import java.util.Set;
1:1a5ad28: import java.util.concurrent.ThreadPoolExecutor;
1:0bb9013: 
1:d29ca2a: import org.apache.activemq.Service;
1:cdc2fd3: import org.apache.activemq.broker.region.Destination;
1:a414c20: import org.apache.activemq.broker.region.MessageReference;
1:d29ca2a: import org.apache.activemq.broker.region.Region;
1:cdc2fd3: import org.apache.activemq.broker.region.Subscription;
1:cc81680: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.BrokerId;
1:4098942: import org.apache.activemq.command.BrokerInfo;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:a9c49a7: import org.apache.activemq.command.DestinationInfo;
1:4098942: import org.apache.activemq.command.MessageDispatch;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: import org.apache.activemq.command.TransactionId;
1:d5dd937: import org.apache.activemq.store.PListStore;
1:1a5ad28: import org.apache.activemq.thread.Scheduler;
1:cdc2fd3: import org.apache.activemq.usage.Usage;
1:d29ca2a: 
1:d29ca2a: /**
1:230a86c:  * The Message Broker which routes messages, maintains subscriptions and
1:230a86c:  * connections, acknowledges messages and handles transactions.
1:d29ca2a:  */
1:d29ca2a: public interface Broker extends Region, Service {
1:230a86c: 
1:d29ca2a:     /**
1:4098942:      * Get a Broker from the Broker Stack that is a particular class
1:0bb9013:      *
1:4098942:      * @param type
1:5e05df1:      * @return a Broker instance.
1:a414c20:      */
1:5076808:     Broker getAdaptor(Class<?> type);
1:d29ca2a: 
1:a414c20:     /**
1:d29ca2a:      * Get the id of the broker
1:d29ca2a:      */
1:fc00993:     BrokerId getBrokerId();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Get the name of the broker
1:a414c20:      */
1:fc00993:     String getBrokerName();
1:230a86c: 
1:d29ca2a:     /**
1:4098942:      * A remote Broker connects
1:3a9299b:      */
1:fc00993:     void addBroker(Connection connection, BrokerInfo info);
1:230a86c: 
1:a414c20:     /**
1:4098942:      * Remove a BrokerInfo
1:0bb9013:      *
1:4098942:      * @param connection
1:d29ca2a:      * @param info
1:d29ca2a:      */
1:fc00993:     void removeBroker(Connection connection, BrokerInfo info);
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * A client is establishing a connection with the broker.
1:0bb9013:      *
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception;
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * A client is disconnecting from the broker.
1:0bb9013:      *
1:d29ca2a:      * @param context the environment the operation is being executed under.
1:230a86c:      * @param info
1:230a86c:      * @param error null if the client requested the disconnect or the error
1:230a86c:      *                that caused the client to disconnect.
2:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception;
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Adds a session.
1:0bb9013:      *
1:d29ca2a:      * @param context
1:d29ca2a:      * @param info
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void addSession(ConnectionContext context, SessionInfo info) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Removes a session.
1:5e05df1:      *
1:d29ca2a:      * @param context
1:d29ca2a:      * @param info
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void removeSession(ConnectionContext context, SessionInfo info) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Adds a producer.
1:0bb9013:      *
1:5e05df1:      * @param context the environment the operation is being executed under.
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:0bb9013:     @Override
1:fc00993:     void addProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Removes a producer.
1:0bb9013:      *
1:5e05df1:      * @param context the environment the operation is being executed under.
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:0bb9013:     @Override
1:fc00993:     void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @return all clients added to the Broker.
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     Connection[] getClients() throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return all destinations added to the Broker.
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     ActiveMQDestination[] getDestinations() throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:27b3a7c:      * return a reference destination map of a region based on the destination type
1:5e05df1:      *
1:27b3a7c:      * @param destination
1:5e05df1:      *
1:5e05df1:      * @return destination Map
1:27b3a7c:      */
1:27b3a7c:     public Map<ActiveMQDestination, Destination> getDestinationMap(ActiveMQDestination destination);
1:27b3a7c: 
1:27b3a7c:     /**
1:d29ca2a:      * Gets a list of all the prepared xa transactions.
1:0bb9013:      *
1:a414c20:      * @param context transaction ids
1:5e05df1:      * @return array of TransactionId values
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Starts a transaction.
1:0bb9013:      *
1:d29ca2a:      * @param context
2:d29ca2a:      * @param xid
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Prepares a transaction. Only valid for xa transactions.
1:0bb9013:      *
1:d29ca2a:      * @param context
1:d29ca2a:      * @param xid
1:a414c20:      * @return id
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Rollsback a transaction.
1:0bb9013:      *
1:a414c20:      * @param context
1:d29ca2a:      * @param xid
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Commits a transaction.
1:0bb9013:      *
1:222dd26:      * @param context
1:d29ca2a:      * @param xid
2:d29ca2a:      * @param onePhase
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception;
1:d29ca2a: 
1:3a9299b:     /**
1:d29ca2a:      * Forgets a transaction.
1:0bb9013:      *
1:230a86c:      * @param context
1:230a86c:      * @param transactionId
1:230a86c:      * @throws Exception
1:d29ca2a:      */
1:fc00993:     void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception;
1:230a86c: 
1:3a9299b:     /**
1:4098942:      * Get the BrokerInfo's of any connected Brokers
1:0bb9013:      *
1:4098942:      * @return array of peer BrokerInfos
1:3a9299b:      */
1:4098942:     BrokerInfo[] getPeerBrokerInfos();
1:230a86c: 
1:a401575:     /**
1:a401575:      * Notify the Broker that a dispatch is going to happen
1:0bb9013:      *
1:a401575:      * @param messageDispatch
1:a401575:      */
1:fc00993:     void preProcessDispatch(MessageDispatch messageDispatch);
1:230a86c: 
1:7d1e6bc:     /**
1:4098942:      * Notify the Broker that a dispatch has happened
1:0bb9013:      *
1:4098942:      * @param messageDispatch
1:7d1e6bc:      */
1:fc00993:     void postProcessDispatch(MessageDispatch messageDispatch);
1:230a86c: 
1:ef0734b:     /**
1:233b604:      * @return true if the broker has stopped
1:233b604:      */
1:fc00993:     boolean isStopped();
1:230a86c: 
1:a9c49a7:     /**
1:debd0cc:      * @return a Set of all durable destinations
1:debd0cc:      */
1:ecf89a6:     Set<ActiveMQDestination> getDurableDestinations();
1:230a86c: 
1:debd0cc:     /**
1:a9c49a7:      * Add and process a DestinationInfo object
1:0bb9013:      *
1:a9c49a7:      * @param context
1:d29ca2a:      * @param info
1:a414c20:      * @throws Exception
1:a9c49a7:      */
1:fc00993:     void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception;
1:230a86c: 
1:a9c49a7:     /**
1:a9c49a7:      * Remove and process a DestinationInfo object
1:0bb9013:      *
1:a9c49a7:      * @param context
1:d29ca2a:      * @param info
1:0bb9013:      *
2:a414c20:      * @throws Exception
1:a9c49a7:      */
1:fc00993:     void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception;
1:d29ca2a: 
1:233b604:     /**
1:ef0734b:      * @return true if fault tolerant
1:ef0734b:      */
1:fc00993:     boolean isFaultTolerantConfiguration();
1:230a86c: 
1:4098942:     /**
1:230a86c:      * @return the connection context used to make administration operations on
1:230a86c:      *         startup or via JMX MBeans
1:4098942:      */
1:fc00993:     ConnectionContext getAdminConnectionContext();
1:d29ca2a: 
1:4098942:     /**
1:230a86c:      * Sets the default administration connection context used when configuring
1:230a86c:      * the broker on startup or via JMX
1:0bb9013:      *
1:230a86c:      * @param adminConnectionContext
1:4098942:      */
1:fc00993:     void setAdminConnectionContext(ConnectionContext adminConnectionContext);
1:230a86c: 
1:4741136:     /**
1:4741136:      * @return the temp data store
1:4741136:      */
1:ee55abb:     PListStore getTempDataStore();
1:230a86c: 
1:4741136:     /**
1:4741136:      * @return the URI that can be used to connect to the local Broker
1:4741136:      */
1:fc00993:     URI getVmConnectorURI();
1:230a86c: 
1:4098942:     /**
1:a414c20:      * called when the brokerService starts
1:4098942:      */
1:fc00993:     void brokerServiceStarted();
1:230a86c: 
4:4098942:     /**
1:a414c20:      * @return the BrokerService
4:4098942:      */
1:25a252f:     BrokerService getBrokerService();
1:230a86c: 
1:a414c20:     /**
1:a414c20:      * Ensure we get the Broker at the top of the Stack
1:0bb9013:      *
1:a414c20:      * @return the broker at the top of the Stack
1:a414c20:      */
1:a414c20:     Broker getRoot();
1:230a86c: 
1:a414c20:     /**
1:230a86c:      * Determine if a message has expired -allows default behaviour to be
1:230a86c:      * overriden - as the timestamp set by the producer can be out of sync with
1:230a86c:      * the broker
1:0bb9013:      *
1:a401575:      * @param messageReference
1:a401575:      * @return true if the message is expired
1:a401575:      */
1:fc00993:     boolean isExpired(MessageReference messageReference);
1:230a86c: 
1:dfcf776:     /**
1:a414c20:      * A Message has Expired
1:27c1719:      *
1:a414c20:      * @param context
1:a414c20:      * @param messageReference
1:5e05df1:      * @param subscription (may be null)
1:a414c20:      */
1:27c1719:     void messageExpired(ConnectionContext context, MessageReference messageReference, Subscription subscription);
1:230a86c: 
1:a401575:     /**
1:a414c20:      * A message needs to go the a DLQ
1:708be6d:      *
2:0bb9013:      *
1:a414c20:      * @param context
1:a414c20:      * @param messageReference
1:708be6d:      * @param poisonCause reason for dlq submission, may be null
1:0bb9013:      * @return true if Message was placed in a DLQ false if discarded.
1:a414c20:      */
1:708be6d:     boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription, Throwable poisonCause);
1:0bb9013: 
1:a414c20:     /**
1:dfcf776:      * @return the broker sequence id
1:dfcf776:      */
1:dfcf776:     long getBrokerSequenceId();
1:0bb9013: 
1:cdc2fd3:     /**
1:cdc2fd3:      * called when message is consumed
1:cdc2fd3:      * @param context
1:cdc2fd3:      * @param messageReference
1:cdc2fd3:      */
1:cdc2fd3:     void messageConsumed(ConnectionContext context, MessageReference messageReference);
1:0bb9013: 
1:cdc2fd3:     /**
1:cdc2fd3:      * Called when message is delivered to the broker
1:cdc2fd3:      * @param context
1:cdc2fd3:      * @param messageReference
1:cdc2fd3:      */
1:cdc2fd3:     void messageDelivered(ConnectionContext context, MessageReference messageReference);
1:0bb9013: 
1:cdc2fd3:     /**
1:cdc2fd3:      * Called when a message is discarded - e.g. running low on memory
1:cdc2fd3:      * This will happen only if the policy is enabled - e.g. non durable topics
1:cdc2fd3:      * @param context
1:3e4fc0a:      * @param sub
1:cdc2fd3:      * @param messageReference
1:cdc2fd3:      */
1:3e4fc0a:     void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference);
1:0bb9013: 
1:cdc2fd3:     /**
1:cdc2fd3:      * Called when there is a slow consumer
1:cdc2fd3:      * @param context
1:0bb9013:      * @param destination
1:cdc2fd3:      * @param subs
1:cdc2fd3:      */
1:cdc2fd3:     void slowConsumer(ConnectionContext context,Destination destination, Subscription subs);
1:0bb9013: 
1:cdc2fd3:     /**
1:cdc2fd3:      * Called to notify a producer is too fast
1:cdc2fd3:      * @param context
1:cdc2fd3:      * @param producerInfo
1:db1f6fe:      * @param destination
1:cdc2fd3:      */
1:db1f6fe:     void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination);
1:0bb9013: 
1:cdc2fd3:     /**
1:cdc2fd3:      * Called when a Usage reaches a limit
1:cdc2fd3:      * @param context
1:0bb9013:      * @param destination
1:cdc2fd3:      * @param usage
1:cdc2fd3:      */
1:5076808:     void isFull(ConnectionContext context,Destination destination,Usage<?> usage);
1:0bb9013: 
1:cc81680:     void virtualDestinationAdded(ConnectionContext context, VirtualDestination virtualDestination);
1:cc81680: 
1:cc81680:     void virtualDestinationRemoved(ConnectionContext context, VirtualDestination virtualDestination);
1:cc81680: 
1:4ee029e:     /**
1:4ee029e:      *  called when the broker becomes the master in a master/slave
1:4ee029e:      *  configuration
1:4ee029e:      */
1:4ee029e:     void nowMasterBroker();
1:0bb9013: 
1:1a5ad28:     Scheduler getScheduler();
1:0bb9013: 
1:1a5ad28:     ThreadPoolExecutor getExecutor();
1:230a86c: 
1:37384a1:     void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex, String remoteIp);
1:d29ca2a: 
1:663d5db:     void networkBridgeStopped(BrokerInfo brokerInfo);
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
1:     Broker getAdaptor(Class<?> type);
/////////////////////////////////////////////////////////////////////////
1:     void isFull(ConnectionContext context,Destination destination,Usage<?> usage);
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
/////////////////////////////////////////////////////////////////////////
1:     void virtualDestinationAdded(ConnectionContext context, VirtualDestination virtualDestination);
1: 
1:     void virtualDestinationRemoved(ConnectionContext context, VirtualDestination virtualDestination);
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @return a Broker instance.
/////////////////////////////////////////////////////////////////////////
1:      * @param context the environment the operation is being executed under.
/////////////////////////////////////////////////////////////////////////
1:      * @param context the environment the operation is being executed under.
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      * @return destination Map
/////////////////////////////////////////////////////////////////////////
1:      * @return array of TransactionId values
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      * @param subscription (may be null)
author:gtully
-------------------------------------------------------------------------------
commit:27b3a7c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:      * return a reference destination map of a region based on the destination type
1:      * @param destination
0:      * @return
1:      */
1:     public Map<ActiveMQDestination, Destination> getDestinationMap(ActiveMQDestination destination);
1: 
1:     /**
author:Gary Tully
-------------------------------------------------------------------------------
commit:708be6d
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param poisonCause reason for dlq submission, may be null
1:     boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription, Throwable poisonCause);
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
1:      * @param destination
1:     void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination);
commit:27c1719
/////////////////////////////////////////////////////////////////////////
1:      *
0:      * @param subscription, may be null
1:     void messageExpired(ConnectionContext context, MessageReference messageReference, Subscription subscription);
0:      * @param subscription, may be null
0:     void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription);
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
1:      * @param sub 
1:     void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0bb9013
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      * @return true if Message was placed in a DLQ false if discarded.
0:     boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription);
1: 
1: 
1: 
1: 
0:      * @param sub
1: 
1:      * @param destination
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * @param destination
1: 
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.PListStore;
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     Set<ActiveMQDestination> getDurableDestinations();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     Broker getAdaptor(Class type);
1:     BrokerId getBrokerId();
1:     String getBrokerName();
1:     void addBroker(Connection connection, BrokerInfo info);
/////////////////////////////////////////////////////////////////////////
1:     void removeBroker(Connection connection, BrokerInfo info);
1:     void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void addSession(ConnectionContext context, SessionInfo info) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void removeSession(ConnectionContext context, SessionInfo info) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void addProducer(ConnectionContext context, ProducerInfo info) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1:     Connection[] getClients() throws Exception;
1:     ActiveMQDestination[] getDestinations() throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void preProcessDispatch(MessageDispatch messageDispatch);
1:     void postProcessDispatch(MessageDispatch messageDispatch);
1:     boolean isStopped();
0:     Set getDurableDestinations();
/////////////////////////////////////////////////////////////////////////
1:     void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception;
1:     boolean isFaultTolerantConfiguration();
1:     ConnectionContext getAdminConnectionContext();
/////////////////////////////////////////////////////////////////////////
1:     void setAdminConnectionContext(ConnectionContext adminConnectionContext);
0:     Store getTempDataStore();
1:     URI getVmConnectorURI();
1:     void brokerServiceStarted();
/////////////////////////////////////////////////////////////////////////
1:     boolean isExpired(MessageReference messageReference);
/////////////////////////////////////////////////////////////////////////
0:     void messageExpired(ConnectionContext context, MessageReference messageReference);
/////////////////////////////////////////////////////////////////////////
0:     void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * The Message Broker which routes messages, maintains subscriptions and
1:  * connections, acknowledges messages and handles transactions.
0:  * 
1: 
0:      * 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:      * 
0:     public void removeBroker(Connection connection, BrokerInfo info);
0:      * 
1: 
0:      * 
1:      * @param info
1:      * @param error null if the client requested the disconnect or the error
1:      *                that caused the client to disconnect.
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:      * 
0:      * @return
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @param context
1:      * @param transactionId
1:      * @throws Exception
1: 
0:      * 
1: 
0:      * 
1: 
0:      * 
1: 
1: 
1: 
0:      * 
1: 
0:      * 
1: 
1:      * @return the connection context used to make administration operations on
1:      *         startup or via JMX MBeans
1:      * Sets the default administration connection context used when configuring
1:      * the broker on startup or via JMX
0:      * 
1:      * @param adminConnectionContext
1: 
1: 
1: 
1: 
1: 
0:      * 
1: 
1:      * Determine if a message has expired -allows default behaviour to be
1:      * overriden - as the timestamp set by the producer can be out of sync with
1:      * the broker
0:      * 
1: 
0:      * 
1: 
0:      * 
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference);
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception TODO
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception TODO
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception;
1:      * @throws Exception TODO
0:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception;
1:      * @throws Exception TODO
0:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception;
1:      * @throws Exception TODO
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1:      * @throws Exception TODO
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1:      * @throws Exception TODO
0:     public Connection[] getClients() throws Exception;
1:      * @throws Exception TODO
0:     public ActiveMQDestination[] getDestinations() throws Exception;
1:      * @throws Exception TODO
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception;
1:      * @throws Exception TODO
0:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception;
1:      * @throws Exception TODO
0:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception;
1:      * @throws Exception TODO
0:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception;
1:      * @throws Exception TODO
0:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception;
1:      * @throws Exception TODO
0:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception;
/////////////////////////////////////////////////////////////////////////
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.broker.region.Region;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.BrokerId;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.command.TransactionId;
1: 
1: /**
0:  * The Message Broker which routes messages,
0:  * maintains subscriptions and connections, acknowledges messages and handles
0:  * transactions.
0:  *
0:  * @version $Revision: 1.8 $
1:  */
1: public interface Broker extends Region, Service {
1: 
1:     /**
1:      * Get the id of the broker
1:      * @param context
1:      * @param info 
0:      * @param client
1:      */
0:     public BrokerId getBrokerId();
1: 
1:     /**
1:      * Get the name of the broker
1:      */
0:     public String getBrokerName();
1: 
1:     /**
1:      * A client is establishing a connection with the broker.
1:      * @param context
1:      * @param info 
0:      * @param client
1:      */
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Throwable;
1:     
1:     /**
1:      * A client is disconnecting from the broker.
1:      * @param context the environment the operation is being executed under.
1:      * @param info 
0:      * @param client
0:      * @param error null if the client requested the disconnect or the error that caused the client to disconnect.
1:      */
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Throwable;
1: 
1:     /**
1:      * Adds a session.
1:      * @param context
1:      * @param info
0:      * @throws Throwable
1:      */
0:     public void addSession(ConnectionContext context, SessionInfo info) throws Throwable;
1: 
1:     /**
1:      * Removes a session.
1:      * @param context
1:      * @param info
0:      * @throws Throwable
1:      */
0:     public void removeSession(ConnectionContext context, SessionInfo info) throws Throwable;
1: 
1:     /**
1:      * Adds a producer.
0:      * @param context the enviorment the operation is being executed under.
1:      */
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Throwable;
1: 
1:     /**
1:      * Removes a producer.
0:      * @param context the enviorment the operation is being executed under.
1:      */
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Throwable;
1:       
1:     /**
1:      * @return all clients added to the Broker.
0:      * @throws Throwable
1:      */
0:     public Connection[] getClients() throws Throwable;
1: 
1:     /**
1:      * @return all destinations added to the Broker.
0:      * @throws Throwable
1:      */
0:     public ActiveMQDestination[] getDestinations() throws Throwable;
1:     
1:     /**
1:      * Gets a list of all the prepared xa transactions.
0:      * @param client
1:      */
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Throwable;
1: 
1:     /**
1:      * Starts a transaction.
0:      * @param client
1:      * @param xid
1:      */
0:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Throwable;
1: 
1:     /**
1:      * Prepares a transaction. Only valid for xa transactions.
0:      * @param client
1:      * @param xid
0:      * @return
1:      */
0:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Throwable;
1: 
1:     /**
1:      * Rollsback a transaction.
0:      * @param client
1:      * @param xid
1:      */
1: 
0:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Throwable;
1: 
1:     /**
1:      * Commits a transaction.
0:      * @param client
1:      * @param xid
1:      * @param onePhase
1:      */
0:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Throwable;
1: 
1:     /**
1:      * Forgets a transaction.
0:      * @param client
1:      * @param xid
1:      * @param onePhase
0:      * @throws Throwable 
1:      */
0:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Throwable;
1:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:37384a1
/////////////////////////////////////////////////////////////////////////
1:     void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex, String remoteIp);
commit:bd49b52
/////////////////////////////////////////////////////////////////////////
0:     void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex);
commit:663d5db
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.network.NetworkBridge;
/////////////////////////////////////////////////////////////////////////
0:     void networkBridgeStarted(BrokerInfo brokerInfo);
0: 
1:     void networkBridgeStopped(BrokerInfo brokerInfo);
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadPoolExecutor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.thread.Scheduler;
/////////////////////////////////////////////////////////////////////////
0:     
1:     Scheduler getScheduler();
0:     
1:     ThreadPoolExecutor getExecutor();
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.plist.PListStore;
/////////////////////////////////////////////////////////////////////////
1:     PListStore getTempDataStore();
commit:4ee029e
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      *  called when the broker becomes the master in a master/slave
1:      *  configuration
1:      */
1:     void nowMasterBroker();
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.Usage;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * called when message is consumed
1:      * @param context
1:      * @param messageReference
1:      */
1:     void messageConsumed(ConnectionContext context, MessageReference messageReference);
0:     
1:     /**
1:      * Called when message is delivered to the broker
1:      * @param context
1:      * @param messageReference
1:      */
1:     void messageDelivered(ConnectionContext context, MessageReference messageReference);
0:     
1:     /**
1:      * Called when a message is discarded - e.g. running low on memory
1:      * This will happen only if the policy is enabled - e.g. non durable topics
1:      * @param context
1:      * @param messageReference
1:      */
0:     void messageDiscarded(ConnectionContext context, MessageReference messageReference);
0:     
1:     /**
1:      * Called when there is a slow consumer
1:      * @param context
0:      * @param destination 
1:      * @param subs
1:      */
1:     void slowConsumer(ConnectionContext context,Destination destination, Subscription subs);
0:     
1:     /**
1:      * Called to notify a producer is too fast
1:      * @param context
1:      * @param producerInfo
1:      */
0:     void fastProducer(ConnectionContext context,ProducerInfo producerInfo);
0:     
1:     /**
1:      * Called when a Usage reaches a limit
1:      * @param context
0:      * @param destination 
1:      * @param usage
1:      */
0:     void isFull(ConnectionContext context,Destination destination,Usage usage);
0: 
commit:dfcf776
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return the broker sequence id
1:      */
1:     long getBrokerSequenceId();
commit:a401575
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Notify the Broker that a dispatch is going to happen
1:      * @param messageDispatch
1:      */
0:     public void preProcessDispatch(MessageDispatch messageDispatch);
0:        
0:     public void postProcessDispatch(MessageDispatch messageDispatch);
/////////////////////////////////////////////////////////////////////////
0:      * Determine if a message has expired -allows default behaviour to be overriden - 
0:      * as the timestamp set by the producer can be out of sync with the broker
1:      * @param messageReference
1:      * @return true if the message is expired
1:      */
0:     public boolean isExpired(MessageReference messageReference);
0:     
1:     /**
/////////////////////////////////////////////////////////////////////////
0:     
0:     
commit:a414c20
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.MessageReference;
/////////////////////////////////////////////////////////////////////////
1:      * @param context transaction ids
0:      * @return 
/////////////////////////////////////////////////////////////////////////
1:      * @return id
/////////////////////////////////////////////////////////////////////////
1:      * @param context 
0:      * @param transactionId 
1:      * @throws Exception 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * called when the brokerService starts
1:      */
1:     /**
1:      * @return the BrokerService
1:      */
0:     
1:     /**
1:      * Ensure we get the Broker at the top of the Stack
1:      * @return the broker at the top of the Stack
1:      */
1:     Broker getRoot();
0:     
1:     /**
1:      * A Message has Expired
1:      * @param context
1:      * @param messageReference
1:      * @throws Exception 
1:      */
0:     public void messageExpired(ConnectionContext context, MessageReference messageReference);
0:     
1:     /**
1:      * A message needs to go the a DLQ
1:      * @param context
1:      * @param messageReference
1:      * @throws Exception
1:      */
0:     public void sendToDeadLetterQueue(ConnectionContext context,MessageReference messageReference);
commit:83a6eff
/////////////////////////////////////////////////////////////////////////
0:   
/////////////////////////////////////////////////////////////////////////
0:     
commit:25a252f
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void brokerServiceStarted();
0:     
1:     BrokerService getBrokerService();
commit:4741136
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0:       
1:     /**
1:      * @return the temp data store
1:      */
0:     
1:     /**
1:      * @return the URI that can be used to connect to the local Broker
1:      */
0:     public URI getVmConnectorURI();
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
0:         
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy;
/////////////////////////////////////////////////////////////////////////
0:      * @param adminConnectionContext 
1:     /**
0:      * @return the pendingDurableSubscriberPolicy
1:      */
0:     public abstract PendingDurableSubscriberMessageStoragePolicy getPendingDurableSubscriberPolicy();
0:   
1:     /**
0:      * @param pendingDurableSubscriberPolicy the pendingDurableSubscriberPolicy to set
1:      */
0:     public abstract void setPendingDurableSubscriberPolicy(PendingDurableSubscriberMessageStoragePolicy pendingDurableSubscriberPolicy);
commit:7d1e6bc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.kaha.Store;
/////////////////////////////////////////////////////////////////////////
0:     
0:     
1:     /**
0:      * @return the broker's temp data store
0:      * @throws Exception
1:      */
0:     
0:     public Store getTempDataStore();
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return true if fault tolerant
1:      */
0:     public boolean isFaultTolerantConfiguration();
commit:a9c49a7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.DestinationInfo;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Add and process a DestinationInfo object
1:      * @param context
0:      * @param info
0:      * @throws Exception
1:      */
0:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception;
0:     
0:     
1:     /**
1:      * Remove and process a DestinationInfo object
1:      * @param context
0:      * @param info
0:      * @throws Exception
1:      */
0:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception;
0: 
0:     
commit:debd0cc
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return a Set of all durable destinations
1:      */
0:     public Set getDurableDestinations();
0:     
commit:233b604
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return true if the broker has stopped
1:      */
0:     public boolean isStopped();
0:     
commit:4098942
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.MessageDispatch;
0: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Get a Broker from the Broker Stack that is a particular class
1:      * @param type
0:      * @return
1:      */
0:     public Broker getAdaptor(Class type);
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * A remote Broker connects
0:      * @param contection
0:      * @param info 
0:      * @param client
1:      */
0:     public void addBroker(Connection connection, BrokerInfo info);
0:     
1:     /**
1:      * Remove a BrokerInfo
1:      * @param connection
0:      * @param info
1:      */
0:     public void removeBroker(Connection connection,BrokerInfo info);
0:     
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get the BrokerInfo's of any connected Brokers
1:      * @return array of peer BrokerInfos
1:      */
1:     BrokerInfo[] getPeerBrokerInfos();
0:     
0:     
1:     /**
1:      * Notify the Broker that a dispatch has happened
1:      * @param messageDispatch
1:      */
0:     public void processDispatch(MessageDispatch messageDispatch);
0:     
1:     /**
0:      * Notify the Broker of a MessageDispatchNotification
0:      * @param messageDispatchNotification
0:      * @throws Throwable 
1:      */
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Throwable;
0:     
1:     /**
0:      * 
0:      * @return true if the broker is running as a slave
1:      */
0:     public boolean isSlaveBroker();
0:     
author:James Strachan
-------------------------------------------------------------------------------
commit:222dd26
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param context
/////////////////////////////////////////////////////////////////////////
0:      * @param context
/////////////////////////////////////////////////////////////////////////
0:      * @param context
/////////////////////////////////////////////////////////////////////////
0:      * @param context
/////////////////////////////////////////////////////////////////////////
commit:9d671b7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.MessagePull;
0: import org.apache.activemq.command.Response;
commit:8abb655
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * @return the connection context used to make administration operations on startup or via JMX MBeans
0:      */
0:     public abstract ConnectionContext getAdminConnectionContext();
0: 
0:     /**
0:      * Sets the default administration connection context used when configuring the broker on startup or via JMX
0:      */
0:     public abstract void setAdminConnectionContext(ConnectionContext adminConnectionContext);
============================================================================