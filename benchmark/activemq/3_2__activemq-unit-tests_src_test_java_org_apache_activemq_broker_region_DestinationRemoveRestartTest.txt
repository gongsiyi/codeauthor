1:3f32e76: /**
1:3f32e76:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32e76:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32e76:  * this work for additional information regarding copyright ownership.
1:3f32e76:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32e76:  * (the "License"); you may not use this file except in compliance with
1:3f32e76:  * the License.  You may obtain a copy of the License at
1:3f32e76:  *
1:3f32e76:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32e76:  *
1:3f32e76:  * Unless required by applicable law or agreed to in writing, software
1:3f32e76:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32e76:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32e76:  * See the License for the specific language governing permissions and
1:3f32e76:  * limitations under the License.
1:3f32e76:  */
1:3f32e76: package org.apache.activemq.broker.region;
2:3f32e76: 
1:3f32e76: import junit.framework.Test;
1:3f32e76: import org.apache.activemq.CombinationTestSupport;
1:3f32e76: import org.apache.activemq.broker.BrokerService;
1:3f32e76: import org.apache.activemq.command.ActiveMQDestination;
1:3f32e76: 
1:3f32e76: // from https://issues.apache.org/activemq/browse/AMQ-2216
1:3f32e76: public class DestinationRemoveRestartTest extends CombinationTestSupport {
1:3f32e76:     private final static String destinationName = "TEST";
1:6f7e3fc:     public byte destinationType = ActiveMQDestination.QUEUE_TYPE;
1:3f32e76:     BrokerService broker;
1:3f32e76: 
1:204f91f:     @Override
1:3f32e76:     protected void setUp() throws Exception {
1:3f32e76:         broker = createBroker();
1:3f32e76:     }
1:3f32e76: 
1:3f32e76:     private BrokerService createBroker() throws Exception {
1:3f32e76:         BrokerService broker = new BrokerService();
1:3f32e76:         broker.setUseJmx(false);
1:3f32e76:         broker.setPersistent(true);
1:6f7e3fc:         broker.setDeleteAllMessagesOnStartup(true);
1:3f32e76:         broker.start();
1:3f32e76:         return broker;
1:3f32e76:     }
1:3f32e76: 
1:204f91f:     @Override
1:3f32e76:     protected void tearDown() throws Exception {
1:3f32e76:         broker.stop();
1:3f32e76:     }
1:3f32e76: 
1:3f32e76:     public void initCombosForTestCheckDestinationRemoveActionAfterRestart() {
1:3f32e76:         addCombinationValues("destinationType", new Object[]{Byte.valueOf(ActiveMQDestination.QUEUE_TYPE),
1:3f32e76:                 Byte.valueOf(ActiveMQDestination.TOPIC_TYPE)});
1:3f32e76:     }
1:3f32e76:     
1:3f32e76:     public void testCheckDestinationRemoveActionAfterRestart() throws Exception {
1:3f32e76:         doAddDestination();
1:3f32e76:         doRemoveDestination();
1:3f32e76:         broker.stop();
1:3f32e76:         broker.waitUntilStopped();
1:3f32e76:         broker = createBroker();
1:3f32e76:         doCheckRemoveActionAfterRestart();
1:3f32e76:     }
1:3f32e76: 
1:3f32e76:     public void doAddDestination() throws Exception {
1:3f32e76:         boolean res = false;
1:3f32e76:         
1:3f32e76:         ActiveMQDestination amqDestination = 
1:3f32e76:             ActiveMQDestination.createDestination(destinationName, destinationType);
1:204f91f:         broker.getRegionBroker().addDestination(broker.getAdminConnectionContext(), amqDestination,true);
1:3f32e76:         
1:3f32e76:         final ActiveMQDestination[] list = broker.getRegionBroker().getDestinations();
1:3f32e76:         for (final ActiveMQDestination element : list) {
1:3f32e76:             final Destination destination = broker.getDestination(element);
1:3f32e76:             if (destination.getActiveMQDestination().getPhysicalName().equals(destinationName)) {                  
1:3f32e76:                 res = true;
1:3f32e76:                 break;
1:3f32e76:             }
1:3f32e76:         }
1:3f32e76:         
1:3f32e76:         assertTrue("Adding destination Failed", res);        
1:3f32e76:     }
1:3f32e76:     
1:3f32e76:     public void doRemoveDestination() throws Exception {
1:3f32e76:         boolean res = true;
1:3f32e76:         
1:3f32e76:         broker.removeDestination(ActiveMQDestination.createDestination(destinationName, destinationType));
1:3f32e76:         final ActiveMQDestination[] list = broker.getRegionBroker().getDestinations();
1:3f32e76:         for (final ActiveMQDestination element : list) {
1:3f32e76:             final Destination destination = broker.getDestination(element);
1:3f32e76:             if (destination.getActiveMQDestination().getPhysicalName().equals(destinationName)) {                  
1:3f32e76:                 res = false;
1:3f32e76:                 break;
1:3f32e76:             }
1:3f32e76:         }
1:3f32e76:         
1:3f32e76:         assertTrue("Removing destination Failed", res);      
1:3f32e76:     }
1:3f32e76:     
1:3f32e76:     
1:3f32e76:     public void doCheckRemoveActionAfterRestart() throws Exception {
1:3f32e76:         boolean res = true;
1:3f32e76:         
1:3f32e76:         final ActiveMQDestination[] list = broker.getRegionBroker().getDestinations();
1:3f32e76:         for (final ActiveMQDestination element : list) {
1:3f32e76:             final Destination destination = broker.getDestination(element);
1:3f32e76:             if (destination.getActiveMQDestination().getPhysicalName().equals(destinationName)) {                  
1:3f32e76:                 res = false;
1:3f32e76:                 break;
1:3f32e76:             }
1:3f32e76:         }
1:3f32e76:         
1:3f32e76:         assertTrue("The removed destination is reloaded after restart !", res);
1:3f32e76:     }
1:3f32e76:     
1:3f32e76:     public static Test suite() {
1:3f32e76:         return suite(DestinationRemoveRestartTest.class);
1:3f32e76:     }
1:3f32e76: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:6f7e3fc
/////////////////////////////////////////////////////////////////////////
1:     public byte destinationType = ActiveMQDestination.QUEUE_TYPE;
/////////////////////////////////////////////////////////////////////////
1:         broker.setDeleteAllMessagesOnStartup(true);
commit:3f32e76
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: // from https://issues.apache.org/activemq/browse/AMQ-2216
1: public class DestinationRemoveRestartTest extends CombinationTestSupport {
1:     private final static String destinationName = "TEST";
0:     public byte destinationType;
1:     BrokerService broker;
1: 
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:     }
1: 
1:     private BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setPersistent(true);
1:         broker.start();
1:         return broker;
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     public void initCombosForTestCheckDestinationRemoveActionAfterRestart() {
1:         addCombinationValues("destinationType", new Object[]{Byte.valueOf(ActiveMQDestination.QUEUE_TYPE),
1:                 Byte.valueOf(ActiveMQDestination.TOPIC_TYPE)});
1:     }
1:     
1:     public void testCheckDestinationRemoveActionAfterRestart() throws Exception {
1:         doAddDestination();
1:         doRemoveDestination();
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = createBroker();
1:         doCheckRemoveActionAfterRestart();
1:     }
1: 
1:     public void doAddDestination() throws Exception {
1:         boolean res = false;
1:         
1:         ActiveMQDestination amqDestination = 
1:             ActiveMQDestination.createDestination(destinationName, destinationType);
0:         broker.getRegionBroker().addDestination(broker.getAdminConnectionContext(), (ActiveMQDestination) amqDestination);
1:         
1:         final ActiveMQDestination[] list = broker.getRegionBroker().getDestinations();
1:         for (final ActiveMQDestination element : list) {
1:             final Destination destination = broker.getDestination(element);
1:             if (destination.getActiveMQDestination().getPhysicalName().equals(destinationName)) {                  
1:                 res = true;
1:                 break;
1:             }
1:         }
1:         
1:         assertTrue("Adding destination Failed", res);        
1:     }
1:     
1:     public void doRemoveDestination() throws Exception {
1:         boolean res = true;
1:         
1:         broker.removeDestination(ActiveMQDestination.createDestination(destinationName, destinationType));
1:         final ActiveMQDestination[] list = broker.getRegionBroker().getDestinations();
1:         for (final ActiveMQDestination element : list) {
1:             final Destination destination = broker.getDestination(element);
1:             if (destination.getActiveMQDestination().getPhysicalName().equals(destinationName)) {                  
1:                 res = false;
1:                 break;
1:             }
1:         }
1:         
1:         assertTrue("Removing destination Failed", res);      
1:     }
1:     
1:     
1:     public void doCheckRemoveActionAfterRestart() throws Exception {
1:         boolean res = true;
1:         
1:         final ActiveMQDestination[] list = broker.getRegionBroker().getDestinations();
1:         for (final ActiveMQDestination element : list) {
1:             final Destination destination = broker.getDestination(element);
1:             if (destination.getActiveMQDestination().getPhysicalName().equals(destinationName)) {                  
1:                 res = false;
1:                 break;
1:             }
1:         }
1:         
1:         assertTrue("The removed destination is reloaded after restart !", res);
1:     }
1:     
1:     public static Test suite() {
1:         return suite(DestinationRemoveRestartTest.class);
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:204f91f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         broker.getRegionBroker().addDestination(broker.getAdminConnectionContext(), amqDestination,true);
============================================================================