1:49f16ce: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:a59c9ba:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
3:d226f50:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:49f16ce:  */
1:d29ca2a: package org.apache.activemq.pool;
2:49f16ce: 
1:d29ca2a: import javax.jms.JMSException;
1:74a7a8b: import org.apache.activemq.ActiveMQConnection;
1:53756f3: import org.apache.activemq.EnhancedConnection;
1:53756f3: import org.apache.activemq.advisory.DestinationSource;
1:b66559e: import org.apache.activemq.jms.pool.ConnectionPool;
1:49f16ce: 
1:b66559e: public class PooledConnection extends org.apache.activemq.jms.pool.PooledConnection implements EnhancedConnection {
1:b66559e:     public PooledConnection(ConnectionPool connection) {
1:b66559e:         super(connection);
3:49f16ce:     }
1:49f16ce: 
3:49f16ce:     @Override
1:a59c9ba:     public DestinationSource getDestinationSource() throws JMSException {
1:b66559e:         return ((ActiveMQConnection)getConnection()).getDestinationSource();
1:49f16ce:     }
1:49f16ce: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.jms.pool.ConnectionPool;
1: public class PooledConnection extends org.apache.activemq.jms.pool.PooledConnection implements EnhancedConnection {
1:     public PooledConnection(ConnectionPool connection) {
1:         super(connection);
1:         return ((ActiveMQConnection)getConnection()).getDestinationSource();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:858ab26
/////////////////////////////////////////////////////////////////////////
commit:f664be7
/////////////////////////////////////////////////////////////////////////
commit:49f16ce
/////////////////////////////////////////////////////////////////////////
0:     private final List<PooledSession> loanedSessions = new CopyOnWriteArrayList<PooledSession>();
/////////////////////////////////////////////////////////////////////////
0:         this.cleanupAllLoanedSessions();
/////////////////////////////////////////////////////////////////////////
0:     public ConnectionConsumer createConnectionConsumer(Destination destination, String selector, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:     public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1, ServerSessionPool serverSessionPool, int i) throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:         // Store the session so we can close the sessions that this PooledConnection
0:         // created in order to ensure that consumers etc are closed per the JMS contract.
0:         loanedSessions.add(result);
1: 
0:         // Add a event listener to the session that notifies us when the session
0:         // creates / destroys temporary destinations and closes etc.
0:         result.addSessionEventListener(this);
0:         return result;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
0:     public void onSessionClosed(PooledSession session) {
0:         if (session != null) {
0:             this.loanedSessions.remove(session);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:      * The PooledSession tracks all Sessions that it created and now we close them.  Closing the
0:      * PooledSession will return the internal Session to the Pool of Session after cleaning up
0:      * all the resources that the Session had allocated for this PooledConnection.
1:      */
0:     protected void cleanupAllLoanedSessions() {
1: 
0:         for (PooledSession session : loanedSessions) {
0:             try {
0:                 session.close();
0:             } catch (JMSException ex) {
0:                 LOG.info("failed to close laoned Session \"" + session + "\" on closing pooled connection: " + ex.getMessage());
1:             }
1:         }
0:         loanedSessions.clear();
1:     }
1: 
1:     /**
commit:a59c9ba
/////////////////////////////////////////////////////////////////////////
0:  * its reference to the ConnectionPool backing it.
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * Creates a new PooledConnection instance that uses the given ConnectionPool to create
0:      * and manage its resources.  The ConnectionPool instance can be shared amongst many
0:      * PooledConnection instances.
1:      *
0:      * @param pool
0:      *      The connection and pool manager backing this proxy connection object.
0:      */
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     @Override
0:     @Override
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     // EnhancedCollection API
0:     // -------------------------------------------------------------------------
0: 
0:     @Override
1:     public DestinationSource getDestinationSource() throws JMSException {
0:         return getConnection().getDestinationSource();
0:     }
0: 
0:     // Implementation methods
0:     // -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * @return the total number of Pooled session including idle sessions that are not
0:      *          currently loaned out to any client.
0:      */
0:     public int getNumSessions() {
0:         return this.pool.getNumSessions();
0:     }
0: 
0:     /**
0:      * @return the number of Sessions that are currently checked out of this Connection's session pool.
0:      */
0:     public int getNumActiveSessions() {
0:         return this.pool.getNumActiveSessions();
0:     }
0: 
0:     /**
0:      * @return the number of Sessions that are idle in this Connection's sessions pool.
0:      */
0:     public int getNumtIdleSessions() {
0:         return this.pool.getNumIdleSessions();
0:     }
commit:6687d56
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
0: 
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.TemporaryQueue;
0: import javax.jms.TemporaryTopic;
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Logger LOG = LoggerFactory.getLogger(PooledConnection.class);
0:     private final CopyOnWriteArrayList<TemporaryQueue> connTempQueues = new CopyOnWriteArrayList<TemporaryQueue>();
0:     private final CopyOnWriteArrayList<TemporaryTopic> connTempTopics = new CopyOnWriteArrayList<TemporaryTopic>();
/////////////////////////////////////////////////////////////////////////
0:         this.cleanupConnectionTemporaryDestinations();
/////////////////////////////////////////////////////////////////////////
0:     public ConnectionConsumer createConnectionConsumer(Destination destination, String selector, ServerSessionPool serverSessionPool, int maxMessages)
0:             throws JMSException {
0:         return getConnection().createConnectionConsumer(destination, selector, serverSessionPool, maxMessages);
0:     public ConnectionConsumer createConnectionConsumer(Topic topic, String s, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
0:     public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1, ServerSessionPool serverSessionPool, int i)
0:             throws JMSException {
/////////////////////////////////////////////////////////////////////////
0: 
0:         // ignore repeated calls to setClientID() with the same client id
0:         // this could happen when a JMS component such as Spring that uses a
0:         // PooledConnectionFactory shuts down and reinitializes.
0:             getConnection().setClientID(clientID);
0:     public ConnectionConsumer createConnectionConsumer(Queue queue, String selector, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
0:         return (QueueSession) createSession(transacted, ackMode);
0:         return (TopicSession) createSession(transacted, ackMode);
0:         PooledSession result;
0:         result = (PooledSession) pool.createSession(transacted, ackMode);
0: 
0:         // Add a temporary destination event listener to the session that notifies us when
0:         // the session creates temporary destinations.
0:         result.addTempDestEventListener(new PooledSessionEventListener() {
0: 
0:             @Override
0:             public void onTemporaryQueueCreate(TemporaryQueue tempQueue) {
0:                 connTempQueues.add(tempQueue);
0:             }
0: 
0:             @Override
0:             public void onTemporaryTopicCreate(TemporaryTopic tempTopic) {
0:                 connTempTopics.add(tempTopic);
0:             }
0:         });
0: 
0:         return (Session) result;
/////////////////////////////////////////////////////////////////////////
0:         return (ActiveMQSession) getConnection().createSession(key.isTransacted(), key.getAckMode());
0: 
0:     /**
0:      * Remove all of the temporary destinations created for this connection.
0:      * This is important since the underlying connection may be reused over a
0:      * long period of time, accumulating all of the temporary destinations from
0:      * each use. However, from the perspective of the lifecycle from the
0:      * client's view, close() closes the connection and, therefore, deletes all
0:      * of the temporary destinations created.
0:      */
0:     protected void cleanupConnectionTemporaryDestinations() {
0: 
0:         for (TemporaryQueue tempQueue : connTempQueues) {
0:             try {
0:                 tempQueue.delete();
0:             } catch (JMSException ex) {
0:                 LOG.info("failed to delete Temporary Queue \"" + tempQueue.toString() + "\" on closing pooled connection: " + ex.getMessage());
0:             }
0:         }
0:         connTempQueues.clear();
0: 
0:         for (TemporaryTopic tempTopic : connTempTopics) {
0:             try {
0:                 tempTopic.delete();
0:             } catch (JMSException ex) {
0:                 LOG.info("failed to delete Temporary Topic \"" + tempTopic.toString() + "\" on closing pooled connection: " + ex.getMessage());
0:             }
0:         }
0:         connTempTopics.clear();
0:     }
commit:320d87c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:d226f50
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
0: import java.util.concurrent.ConcurrentHashMap;
0: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQTempDestination;
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:             if (this.pool.getConnection() != null) {
0:                 this.pool.getConnection().cleanUpTempDestinations();
0:             }
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:b496c0a
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: public class PooledConnection implements TopicConnection, QueueConnection, EnhancedConnection, PooledSessionEventListener {
0:     private volatile boolean stopped;
0:     private final List<TemporaryQueue> connTempQueues = new CopyOnWriteArrayList<TemporaryQueue>();
0:     private final List<TemporaryTopic> connTempTopics = new CopyOnWriteArrayList<TemporaryTopic>();
/////////////////////////////////////////////////////////////////////////
0:         result.addTempDestEventListener(this);
0: 
0:     public void onTemporaryQueueCreate(TemporaryQueue tempQueue) {
0:         connTempQueues.add(tempQueue);
0:     }
0: 
0:     public void onTemporaryTopicCreate(TemporaryTopic tempTopic) {
0:         connTempTopics.add(tempTopic);
0:     }
0: 
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:3a84de9
/////////////////////////////////////////////////////////////////////////
0:     	
0:     	// ignore repeated calls to setClientID() with the same client id
0:     	// this could happen when a JMS component such as Spring that uses a 
0:     	// PooledConnectionFactory shuts down and reinitializes.
0:     	//
0:         if (this.getConnection().getClientID() == null || !this.getClientID().equals(clientID)) {
0:         	getConnection().setClientID(clientID);
0:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQSession;
0: import org.apache.activemq.AlreadyClosedException;
0: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:  * messages. It does not deal with pooling of consumers; for that look at a
0:  * library like <a href="http://jencks.org/">Jencks</a> such as in <a
0:  * href="http://jencks.org/Message+Driven+POJOs">this example</a>
/////////////////////////////////////////////////////////////////////////
0:         if (this.pool != null) {
0:             this.pool.decrementReferenceCount();
0:             this.pool = null;
0:         }
/////////////////////////////////////////////////////////////////////////
0:     public ConnectionConsumer createConnectionConsumer(Destination destination, String selector,
0:                                                        ServerSessionPool serverSessionPool, int maxMessages)
0:         throws JMSException {
0:         return getConnection()
0:             .createConnectionConsumer(destination, selector, serverSessionPool, maxMessages);
0:     public ConnectionConsumer createConnectionConsumer(Topic topic, String s,
0:                                                        ServerSessionPool serverSessionPool, int maxMessages)
0:         throws JMSException {
0:     public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1,
0:                                                               ServerSessionPool serverSessionPool, int i)
0:         throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:     public ConnectionConsumer createConnectionConsumer(Queue queue, String selector,
0:                                                        ServerSessionPool serverSessionPool, int maxMessages)
0:         throws JMSException {
0:         return (QueueSession)createSession(transacted, ackMode);
0:         return (TopicSession)createSession(transacted, ackMode);
/////////////////////////////////////////////////////////////////////////
0:         return (ActiveMQSession)getConnection().createSession(key.isTransacted(), key.getAckMode());
0: 
0:         return "PooledConnection { " + pool + " }";
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: }
commit:c0bc3e0
/////////////////////////////////////////////////////////////////////////
0:         this.pool.incrementReferenceCount();
/////////////////////////////////////////////////////////////////////////
0:     	if( this.pool!=null ) {
0: 	        this.pool.decrementReferenceCount();
0: 	        this.pool = null;
0:     	}
/////////////////////////////////////////////////////////////////////////
0:     ActiveMQConnection getConnection() throws JMSException {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.pool;
0: 
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQSession;
0: import org.apache.activemq.AlreadyClosedException;
0: 
0: import javax.jms.Connection;
0: import javax.jms.ConnectionConsumer;
0: import javax.jms.ConnectionMetaData;
0: import javax.jms.Destination;
0: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
0: import javax.jms.Queue;
0: import javax.jms.QueueConnection;
0: import javax.jms.QueueSession;
0: import javax.jms.ServerSessionPool;
0: import javax.jms.Session;
0: import javax.jms.Topic;
0: import javax.jms.TopicConnection;
0: import javax.jms.TopicSession;
0: 
0: /**
0:  * Represents a proxy {@link Connection} which is-a {@link TopicConnection} and
0:  * {@link QueueConnection} which is pooled and on {@link #close()} will return
0:  * itself to the sessionPool.
0:  * 
0:  * @version $Revision: 1.1.1.1 $
0:  */
0: public class PooledConnection implements TopicConnection, QueueConnection {
0: 
0:     private ConnectionPool pool;
0:     private boolean stopped;
0: 
0:     public PooledConnection(ConnectionPool pool) {
0:         this.pool = pool;
0:     }
0: 
0:     /**
0:      * Factory method to create a new instance.
0:      */
0:     public PooledConnection newInstance() {
0:         return new PooledConnection(pool);
0:     }
0: 
0:     public void close() throws JMSException {
0:         pool = null;
0:     }
0: 
0:     public void start() throws JMSException {
0:         assertNotClosed();
0:         pool.start();
0:     }
0: 
0:     public void stop() throws JMSException {
0:         stopped = true;
0:     }
0: 
0:     public ConnectionConsumer createConnectionConsumer(Destination destination, String selector, ServerSessionPool serverSessionPool, int maxMessages)
0:             throws JMSException {
0:         return getConnection().createConnectionConsumer(destination, selector, serverSessionPool, maxMessages);
0:     }
0: 
0:     public ConnectionConsumer createConnectionConsumer(Topic topic, String s, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
0:         return getConnection().createConnectionConsumer(topic, s, serverSessionPool, maxMessages);
0:     }
0: 
0:     public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1, ServerSessionPool serverSessionPool, int i)
0:             throws JMSException {
0:         return getConnection().createDurableConnectionConsumer(topic, selector, s1, serverSessionPool, i);
0:     }
0: 
0:     public String getClientID() throws JMSException {
0:         return getConnection().getClientID();
0:     }
0: 
0:     public ExceptionListener getExceptionListener() throws JMSException {
0:         return getConnection().getExceptionListener();
0:     }
0: 
0:     public ConnectionMetaData getMetaData() throws JMSException {
0:         return getConnection().getMetaData();
0:     }
0: 
0:     public void setExceptionListener(ExceptionListener exceptionListener) throws JMSException {
0:         getConnection().setExceptionListener(exceptionListener);
0:     }
0: 
0:     public void setClientID(String clientID) throws JMSException {
0:         getConnection().setClientID(clientID);
0:     }
0: 
0:     public ConnectionConsumer createConnectionConsumer(Queue queue, String selector, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
0:         return getConnection().createConnectionConsumer(queue, selector, serverSessionPool, maxMessages);
0:     }
0: 
0:     // Session factory methods
0:     // -------------------------------------------------------------------------
0:     public QueueSession createQueueSession(boolean transacted, int ackMode) throws JMSException {
0:         return (QueueSession) createSession(transacted, ackMode);
0:     }
0: 
0:     public TopicSession createTopicSession(boolean transacted, int ackMode) throws JMSException {
0:         return (TopicSession) createSession(transacted, ackMode);
0:     }
0: 
0:     public Session createSession(boolean transacted, int ackMode) throws JMSException {
0:         return pool.createSession(transacted, ackMode);
0:     }
0: 
0:     // Implementation methods
0:     // -------------------------------------------------------------------------
0: 
0:     protected ActiveMQConnection getConnection() throws JMSException {
0:         assertNotClosed();
0:         return pool.getConnection();
0:     }
0: 
0:     protected void assertNotClosed() throws AlreadyClosedException {
0:         if (stopped || pool == null) {
0:             throw new AlreadyClosedException();
0:         }
0:     }
0: 
0:     protected ActiveMQSession createSession(SessionKey key) throws JMSException {
0:         return (ActiveMQSession) getConnection().createSession(key.isTransacted(), key.getAckMode());
0:     }
0:     
0:     public String toString() {
0:         return "PooledConnection { "+pool+" }";
0:     }
0: 
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f7abc1f
/////////////////////////////////////////////////////////////////////////
0:     public ActiveMQConnection getConnection() throws JMSException {
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e57fb5
author:James Strachan
-------------------------------------------------------------------------------
commit:53756f3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.EnhancedConnection;
1: import org.apache.activemq.advisory.DestinationSource;
/////////////////////////////////////////////////////////////////////////
0: public class PooledConnection implements TopicConnection, QueueConnection, EnhancedConnection {
/////////////////////////////////////////////////////////////////////////
0:     // EnhancedCollection API
0:     // -------------------------------------------------------------------------
0:     
0:     public DestinationSource getDestinationSource() throws JMSException {
0:         return getConnection().getDestinationSource();
0:     }
0: 
commit:35f915f
/////////////////////////////////////////////////////////////////////////
0:  * <b>NOTE</b> this implementation is only intended for use when sending
0:  * messages.
0:  * It does not deal with pooling of consumers; for that look at a library like 
0:  * <a href="http://jencks.org/">Jencks</a> such as in
0:  * <a href="http://jencks.org/Message+Driven+POJOs">this example</a>
0:  * 
============================================================================