1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:84fd773:  *
1:5be5a62:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.transport;
1:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:3ac0537: import java.net.URI;
1:31c55f7: import java.security.cert.X509Certificate;
1:31c55f7: 
1:f812e34: import org.apache.activemq.Service;
1:31c55f7: import org.apache.activemq.wireformat.WireFormat;
1:f812e34: 
1:d29ca2a: /**
1:f812e34:  * Represents the client side of a transport allowing messages to be sent
1:f812e34:  * synchronously, asynchronously and consumed.
1:d29ca2a:  */
1:d29ca2a: public interface Transport extends Service {
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * A one way asynchronous send
1:b0c2a40:      *
1:f812e34:      * @param command
1:f812e34:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     void oneway(Object command) throws IOException;
1:9ca56a0: 
1:d29ca2a:     /**
1:f812e34:      * An asynchronous request response where the Receipt will be returned in
1:f812e34:      * the future. If responseCallback is not null, then it will be called when
1:f812e34:      * the response has been completed.
1:f812e34:      *
1:f812e34:      * @param command
1:84fd773:      * @param responseCallback TODO
1:5fe0a4c:      * @return the FutureResponse
1:f812e34:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException;
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * A synchronous request response
1:f812e34:      *
1:f812e34:      * @param command
1:5fe0a4c:      * @return the response
1:f812e34:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     Object request(Object command) throws IOException;
1:9ca56a0: 
1:d29ca2a:     /**
1:5fe0a4c:      * A synchronous request response
1:f812e34:      *
1:f812e34:      * @param command
1:f812e34:      * @param timeout
1:5fe0a4c:      * @return the repsonse or null if timeout
1:f812e34:      * @throws IOException
1:5fe0a4c:      */
1:fc00993:     Object request(Object command, int timeout) throws IOException;
1:f812e34: 
1:3ac0537:     /**
1:436fe42:      * Returns the current transport listener
1:f812e34:      *
1:f812e34:      * @return
1:436fe42:      */
1:fc00993:     TransportListener getTransportListener();
1:d29ca2a: 
1:c7469c4:     /**
1:d29ca2a:      * Registers an inbound command listener
1:f812e34:      *
1:f812e34:      * @param commandListener
1:d29ca2a:      */
1:fc00993:     void setTransportListener(TransportListener commandListener);
1:f812e34: 
1:5fe0a4c:     /**
1:5fe0a4c:      * @param target
1:5fe0a4c:      * @return the target
1:5fe0a4c:      */
1:933eb2f:     <T> T narrow(Class<T> target);
1:d29ca2a: 
1:5fe0a4c:     /**
1:0f1dcce:      * @return the remote address for this connection
1:0f1dcce:      */
1:fc00993:     String getRemoteAddress();
1:f812e34: 
1:0f1dcce:     /**
1:c7469c4:      * Indicates if the transport can handle faults
1:f812e34:      *
1:418823a:      * @return true if fault tolerant
1:c7469c4:      */
1:fc00993:     boolean isFaultTolerant();
1:d29ca2a: 
1:3ac0537:     /**
1:3ac0537:      * @return true if the transport is disposed
1:3ac0537:      */
1:3ac0537:     boolean isDisposed();
1:d29ca2a: 
1:ecc87ea:     /**
1:ecc87ea:      * @return true if the transport is connected
1:ecc87ea:      */
1:ecc87ea:     boolean isConnected();
1:d29ca2a: 
1:f392884:     /**
1:f392884:      * @return true if reconnect is supported
1:f392884:      */
1:f392884:     boolean isReconnectSupported();
1:d29ca2a: 
1:f392884:     /**
1:f392884:      * @return true if updating uris is supported
1:f392884:      */
1:f392884:     boolean isUpdateURIsSupported();
1:31c55f7: 
1:f392884:     /**
1:3ac0537:      * reconnect to another location
1:3ac0537:      * @param uri
1:3ac0537:      * @throws IOException on failure of if not supported
1:3ac0537:      */
1:3ac0537:     void reconnect(URI uri) throws IOException;
1:d29ca2a: 
1:8978ac0:     /**
1:f392884:      * Provide a list of available alternative locations
1:0885c60:      * @param rebalance
1:f392884:      * @param uris
1:f392884:      * @throws IOException
1:f392884:      */
1:f392884:     void updateURIs(boolean rebalance,URI[] uris) throws IOException;
4:0885c60: 
1:436fe42:     /**
1:8978ac0:      * Returns a counter which gets incremented as data is read from the transport.
1:8978ac0:      * It should only be used to determine if there is progress being made in reading the next command from the transport.
1:8978ac0:      * The value may wrap into the negative numbers.
1:8978ac0:      *
1:8978ac0:      * @return a counter which gets incremented as data is read from the transport.
1:8978ac0:      */
1:8978ac0:     int getReceiveCounter();
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * @return the Certificates provided by the peer, or null if not a secure channel.
1:31c55f7:      */
1:31c55f7:     X509Certificate[] getPeerCertificates();
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Sets the certificates provided by the connected peer.
1:31c55f7:      *
1:31c55f7:      * @param certificates
1:31c55f7:      *      the Certificates provided by the peer.
1:31c55f7:      */
1:31c55f7:     void setPeerCertificates(X509Certificate[] certificates);
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Retrieves the WireFormat instance associated with this Transport instance.
1:31c55f7:      *
1:31c55f7:      * @return the WireFormat in use.
1:31c55f7:      */
1:31c55f7:     WireFormat getWireFormat();
1:31c55f7: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
1: 
1: import org.apache.activemq.wireformat.WireFormat;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the Certificates provided by the peer, or null if not a secure channel.
1:      */
1:     X509Certificate[] getPeerCertificates();
1: 
1:     /**
1:      * Sets the certificates provided by the connected peer.
1:      *
1:      * @param certificates
1:      *      the Certificates provided by the peer.
1:      */
1:     void setPeerCertificates(X509Certificate[] certificates);
1: 
1:     /**
1:      * Retrieves the WireFormat instance associated with this Transport instance.
1:      *
1:      * @return the WireFormat in use.
1:      */
1:     WireFormat getWireFormat();
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:8978ac0
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns a counter which gets incremented as data is read from the transport.
1:      * It should only be used to determine if there is progress being made in reading the next command from the transport.  
1:      * The value may wrap into the negative numbers. 
1:      * 
1:      * @return a counter which gets incremented as data is read from the transport.
1:      */
1:     int getReceiveCounter();    
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     <T> T narrow(Class<T> target);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     void oneway(Object command) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     Object request(Object command) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     Object request(Object command, int timeout) throws IOException;
0:     // void oneway(Command command) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     // FutureResponse asyncRequest(Command command, ResponseCallback
/////////////////////////////////////////////////////////////////////////
0:     // Response request(Command command) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     // Response request(Command command, int timeout) throws IOException;
1:     TransportListener getTransportListener();
1:     void setTransportListener(TransportListener commandListener);
0:     Object narrow(Class target);
1:     String getRemoteAddress();
1:     boolean isFaultTolerant();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
1: 
1:  * Represents the client side of a transport allowing messages to be sent
1:  * synchronously, asynchronously and consumed.
1:  * 
1:      * 
1:      * @param command
1:      * @throws IOException
1:      * An asynchronous request response where the Receipt will be returned in
1:      * the future. If responseCallback is not null, then it will be called when
1:      * the response has been completed.
1:      * @param command
1:      * @throws IOException
1: 
1:      * 
1:      * @param command
1:      * @throws IOException
1:      * 
1:      * @param command
1:      * @param timeout
1:      * @throws IOException
0:     // /**
0:     // * A one way asynchronous send
0:     // * @param command
0:     // * @throws IOException
0:     // */
0:     // public void oneway(Command command) throws IOException;
0:     //
0:     // /**
0:     // * An asynchronous request response where the Receipt will be returned
0:     // * in the future. If responseCallback is not null, then it will be called
0:     // * when the response has been completed.
0:     // *
0:     // * @param command
0:     // * @param responseCallback TODO
0:     // * @return the FutureResponse
0:     // * @throws IOException
0:     // */
0:     // public FutureResponse asyncRequest(Command command, ResponseCallback
0:     // responseCallback) throws IOException;
0:     //    
0:     // /**
0:     // * A synchronous request response
0:     // * @param command
0:     // * @return the response
0:     // * @throws IOException
0:     // */
0:     // public Response request(Command command) throws IOException;
0:     //
0:     // /**
0:     // * A synchronous request response
0:     // * @param command
0:     // * @param timeout
0:     // * @return the repsonse or null if timeout
0:     // * @throws IOException
0:     // */
0:     // public Response request(Command command, int timeout) throws IOException;
1: 
1:      * 
1:      * @return
1:      * 
1:      * @param commandListener
1: 
/////////////////////////////////////////////////////////////////////////
0:     public String getRemoteAddress();
1: 
1:      * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void oneway(Object command) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     public Object request(Object command) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     public Object request(Object command, int timeout) throws IOException;
1:     
0: //    /**
0: //     * A one way asynchronous send
0: //     * @param command 
0: //     * @throws IOException 
0: //     */
0: //    public void oneway(Command command) throws IOException;
0: //
0: //    /**
0: //     * An asynchronous request response where the Receipt will be returned
0: //     * in the future.  If responseCallback is not null, then it will be called
0: //     * when the response has been completed.
0: //     * 
0: //     * @param command 
0: //     * @param responseCallback TODO
0: //     * @return the FutureResponse
0: //     * @throws IOException 
0: //     */
0: //    public FutureResponse asyncRequest(Command command, ResponseCallback responseCallback) throws IOException;
0: //    
0: //    /**
0: //     * A synchronous request response
0: //     * @param command 
0: //     * @return the response
0: //     * @throws IOException 
0: //     */
0: //    public Response request(Command command) throws IOException;
0: //
0: //    /**
0: //     * A synchronous request response
0: //     * @param command 
0: //     * @param timeout 
0: //     * @return the repsonse or null if timeout
0: //     * @throws IOException 
0: //     */
0: //    public Response request(Command command, int timeout) throws IOException;
1:     
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:84fd773
/////////////////////////////////////////////////////////////////////////
0:      * in the future.  If responseCallback is not null, then it will be called
0:      * when the response has been completed.
1:      * 
1:      * @param responseCallback TODO
0:     public FutureResponse asyncRequest(Command command, ResponseCallback responseCallback) throws IOException;
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0: * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0: *
0: * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0: *
0: * Licensed under the Apache License, Version 2.0 (the "License");
0: * you may not use this file except in compliance with the License.
0: * You may obtain a copy of the License at
0: *
0: * http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing, software
0: * distributed under the License is distributed on an "AS IS" BASIS,
0: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: * See the License for the specific language governing permissions and
0: * limitations under the License.
0: *
0: **/
1: package org.apache.activemq.transport;
1: 
0: import org.apache.activemq.Service;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.Response;
1: 
1: import java.io.IOException;
1: 
1: /**
0:  * Represents the client side of a transport allowing messages
0:  * to be sent synchronously, asynchronously and consumed.
0:  *
0:  * @version $Revision: 1.5 $
1:  */
1: public interface Transport extends Service {
1: 
1:     /**
1:      * A one way asynchronous send
1:      */
0:     public void oneway(Command command) throws IOException;
1: 
1:     /**
0:      * An asynchronous request response where the Receipt will be returned
0:      * in the future
1:      */
0:     public FutureResponse asyncRequest(Command command) throws IOException;
1: 
1:     /**
1:      * A synchronous request response
1:      */
0:     public Response request(Command command) throws IOException;
1: 
1:     /**
1:      * Registers an inbound command listener
1:      */
0:     public void setTransportListener(TransportListener commandListener);
1:     
0:     public Object narrow(Class target);
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0885c60
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 
1:      * @param rebalance
/////////////////////////////////////////////////////////////////////////
0:      * It should only be used to determine if there is progress being made in reading the next command from the transport.
0:      * The value may wrap into the negative numbers.
0:      *
0:     int getReceiveCounter();
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @return true if reconnect is supported
1:      */
1:     boolean isReconnectSupported();
0:     
1:     /**
1:      * @return true if updating uris is supported
1:      */
1:     boolean isUpdateURIsSupported();
1:     /**
0:     
1:     /**
1:      * Provide a list of available alternative locations
0:      * @param rebalance 
1:      * @param uris
1:      * @throws IOException
1:      */
1:     void updateURIs(boolean rebalance,URI[] uris) throws IOException;
commit:ecc87ea
/////////////////////////////////////////////////////////////////////////
1:      * @return true if the transport is connected
1:      */
1:     boolean isConnected();
0:     
1:     /**
commit:3ac0537
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return true if the transport is disposed
1:      */
1:     boolean isDisposed();
0:     
1:     /**
1:      * reconnect to another location
1:      * @param uri
1:      * @throws IOException on failure of if not supported
1:      */
1:     void reconnect(URI uri) throws IOException;
commit:418823a
/////////////////////////////////////////////////////////////////////////
1:      * @return true if fault tolerant
commit:c7469c4
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Indicates if the transport can handle faults
0:      * @return tru if fault tolerant
1:      */
0:     public boolean isFaultTolerant();
commit:5fe0a4c
/////////////////////////////////////////////////////////////////////////
0:      * @param command 
0:      * @throws IOException 
0:      * @param command 
1:      * @return the FutureResponse
0:      * @throws IOException 
0:     
0:      * @param command 
1:      * @return the response
0:      * @throws IOException 
1:      * A synchronous request response
0:      * @param command 
0:      * @param timeout 
1:      * @return the repsonse or null if timeout
0:      * @throws IOException 
1:      */
0:     public Response request(Command command, int timeout) throws IOException;
0: 
1:     /**
0:      * @return 
0:      * @param commandListener 
1:     /**
1:      * @param target
1:      * @return the target
1:      */
author:James Strachan
-------------------------------------------------------------------------------
commit:0f1dcce
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the remote address for this connection
0:      *  
1:      */
0: 	public String getRemoteAddress();
0: 
commit:436fe42
/////////////////////////////////////////////////////////////////////////
1:      * Returns the current transport listener
1:      */
0:     public TransportListener getTransportListener();
0: 
1:     /**
============================================================================