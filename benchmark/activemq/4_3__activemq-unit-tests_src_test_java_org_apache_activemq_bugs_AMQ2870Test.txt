1:306f8a0: /**
1:306f8a0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:306f8a0:  * contributor license agreements.  See the NOTICE file distributed with
1:306f8a0:  * this work for additional information regarding copyright ownership.
1:306f8a0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:306f8a0:  * (the "License"); you may not use this file except in compliance with
1:306f8a0:  * the License.  You may obtain a copy of the License at
1:306f8a0:  *
1:306f8a0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:306f8a0:  *
1:306f8a0:  * Unless required by applicable law or agreed to in writing, software
1:306f8a0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:306f8a0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:306f8a0:  * See the License for the specific language governing permissions and
1:306f8a0:  * limitations under the License.
1:306f8a0:  */
1:306f8a0: package org.apache.activemq.bugs;
7:306f8a0: 
1:f7f294f: import java.util.ArrayList;
1:f7f294f: import java.util.Collection;
1:f7f294f: import java.util.List;
1:306f8a0: import java.util.Properties;
1:f7f294f: 
1:306f8a0: import javax.jms.JMSException;
1:306f8a0: import javax.jms.Message;
1:306f8a0: import javax.jms.MessageListener;
1:306f8a0: import javax.jms.MessageProducer;
1:306f8a0: import javax.jms.Session;
1:306f8a0: import javax.jms.TopicSubscriber;
1:f7f294f: 
1:306f8a0: import org.apache.activemq.ActiveMQConnection;
1:306f8a0: import org.apache.activemq.ActiveMQConnectionFactory;
1:306f8a0: import org.apache.activemq.broker.BrokerService;
1:306f8a0: import org.apache.activemq.broker.jmx.BrokerView;
1:306f8a0: import org.apache.activemq.command.ActiveMQTopic;
1:306f8a0: import org.apache.activemq.store.PersistenceAdapter;
1:306f8a0: import org.apache.activemq.util.IntrospectionSupport;
1:306f8a0: import org.apache.activemq.util.Wait;
1:f7f294f: import org.junit.After;
1:f7f294f: import org.junit.Before;
1:f7f294f: import org.junit.Test;
1:f7f294f: import org.junit.runner.RunWith;
1:f7f294f: import org.junit.runners.Parameterized;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:306f8a0: 
1:f7f294f: @RunWith(value = Parameterized.class)
1:f7f294f: public class AMQ2870Test extends org.apache.activemq.TestSupport  {
1:306f8a0: 
1:8bf987b:     static final Logger LOG = LoggerFactory.getLogger(AMQ2870Test.class);
1:306f8a0:     BrokerService broker = null;
1:306f8a0:     ActiveMQTopic topic;
1:306f8a0: 
1:306f8a0:     ActiveMQConnection consumerConnection = null, producerConnection = null;
1:306f8a0:     Session producerSession;
1:306f8a0:     MessageProducer producer;
1:306f8a0:     final int minPercentUsageForStore = 10;
1:306f8a0:     String data;
1:306f8a0: 
1:f7f294f:     private final PersistenceAdapterChoice persistenceAdapterChoice;
1:f7f294f: 
1:f7f294f:     @Parameterized.Parameters
1:f7f294f:     public static Collection<PersistenceAdapterChoice[]> getTestParameters() {
1:f7f294f:         String osName = System.getProperty("os.name");
1:f7f294f:         LOG.info("Running on [" + osName + "]");
1:f7f294f:         PersistenceAdapterChoice[] kahaDb = {PersistenceAdapterChoice.KahaDB};
1:f7f294f:         PersistenceAdapterChoice[] levelDb = {PersistenceAdapterChoice.LevelDB};
1:f7f294f:         List<PersistenceAdapterChoice[]> choices = new ArrayList<PersistenceAdapterChoice[]>();
1:f7f294f:         choices.add(kahaDb);
1:f7f294f:         if (!osName.equalsIgnoreCase("AIX") && !osName.equalsIgnoreCase("SunOS")) {
1:f7f294f:             choices.add(levelDb);
1:f7f294f:         }
1:f7f294f: 
1:f7f294f:         return choices;
1:306f8a0:     }
1:f7f294f: 
1:f7f294f:     public AMQ2870Test(PersistenceAdapterChoice choice) {
1:f7f294f:         this.persistenceAdapterChoice = choice;
1:306f8a0:     }
1:f7f294f: 
1:f7f294f:     @Test(timeout = 300000)
1:306f8a0:     public void testSize() throws Exception {
1:306f8a0:         openConsumer();
1:306f8a0: 
1:306f8a0:         assertEquals(0, broker.getAdminView().getStorePercentUsage());
1:4de6878: 
1:306f8a0:         for (int i = 0; i < 5000; i++) {
1:306f8a0:             sendMessage(false);
1:306f8a0:         }
1:306f8a0: 
1:306f8a0:         final BrokerView brokerView = broker.getAdminView();
1:306f8a0: 
1:306f8a0:         // wait for reclaim
1:306f8a0:         assertTrue("in range with consumer",
1:306f8a0:                 Wait.waitFor(new Wait.Condition() {
1:f7f294f:                     @Override
1:306f8a0:                     public boolean isSatisified() throws Exception {
1:306f8a0:                         // usage percent updated only on send check for isFull so once
1:306f8a0:                         // sends complete it is no longer updated till next send via a call to isFull
1:306f8a0:                         // this is optimal as it is only used to block producers
1:306f8a0:                         broker.getSystemUsage().getStoreUsage().isFull();
1:5a0fd5d:                         LOG.info("store percent usage: "+brokerView.getStorePercentUsage());
1:306f8a0:                         return broker.getAdminView().getStorePercentUsage() < minPercentUsageForStore;
1:306f8a0:                     }
1:306f8a0:                 }));
1:306f8a0: 
1:306f8a0:         closeConsumer();
1:306f8a0: 
1:306f8a0:         assertTrue("in range with closed consumer",
1:306f8a0:                 Wait.waitFor(new Wait.Condition() {
1:f7f294f:                     @Override
1:306f8a0:                     public boolean isSatisified() throws Exception {
1:306f8a0:                         broker.getSystemUsage().getStoreUsage().isFull();
3:306f8a0:                         LOG.info("store precent usage: "+brokerView.getStorePercentUsage());
1:306f8a0:                         return broker.getAdminView().getStorePercentUsage() < minPercentUsageForStore;
1:306f8a0:                     }
1:306f8a0:                 }));
1:306f8a0: 
1:306f8a0:         for (int i = 0; i < 5000; i++) {
1:306f8a0:             sendMessage(false);
1:306f8a0:         }
1:306f8a0: 
1:306f8a0:         // What if i drop the subscription?
1:306f8a0:         broker.getAdminView().destroyDurableSubscriber("cliID", "subName");
1:306f8a0: 
1:306f8a0:         assertTrue("in range after send with consumer",
1:306f8a0:                 Wait.waitFor(new Wait.Condition() {
1:f7f294f:                     @Override
1:306f8a0:                     public boolean isSatisified() throws Exception {
1:306f8a0:                         broker.getSystemUsage().getStoreUsage().isFull();
1:f7f294f:                         LOG.info("store precent usage: "+brokerView.getStorePercentUsage());
1:306f8a0:                         return broker.getAdminView().getStorePercentUsage() < minPercentUsageForStore;
1:306f8a0:                     }
1:306f8a0:                 }));
1:306f8a0:     }
1:306f8a0: 
1:306f8a0:     private void openConsumer() throws Exception {
1:306f8a0:         consumerConnection = (ActiveMQConnection) createConnection();
1:306f8a0:         consumerConnection.setClientID("cliID");
1:306f8a0:         consumerConnection.start();
1:306f8a0:         Session session = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:306f8a0:         TopicSubscriber subscriber = session.createDurableSubscriber(topic, "subName", "filter=true", false);
1:306f8a0: 
1:306f8a0:         subscriber.setMessageListener(new MessageListener() {
1:f7f294f:             @Override
1:306f8a0:             public void onMessage(Message message) {
1:306f8a0:                 // received++;
1:306f8a0:             }
1:306f8a0:         });
1:306f8a0:     }
1:306f8a0: 
1:306f8a0:     private void closeConsumer() throws JMSException {
1:306f8a0:         if (consumerConnection != null)
1:306f8a0:             consumerConnection.close();
1:306f8a0:         consumerConnection = null;
1:306f8a0:     }
1:306f8a0: 
1:306f8a0:     private void sendMessage(boolean filter) throws Exception {
1:306f8a0:         if (producerConnection == null) {
1:306f8a0:             producerConnection = (ActiveMQConnection) createConnection();
1:306f8a0:             producerConnection.start();
1:306f8a0:             producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:306f8a0:             producer = producerSession.createProducer(topic);
1:306f8a0:         }
1:306f8a0: 
1:306f8a0:         Message message = producerSession.createMessage();
1:306f8a0:         message.setBooleanProperty("filter", filter);
1:306f8a0:         message.setStringProperty("data", data);
1:306f8a0:         producer.send(message);
1:306f8a0:     }
1:306f8a0: 
1:306f8a0:     private void startBroker(boolean deleteMessages) throws Exception {
1:306f8a0:         broker = new BrokerService();
1:306f8a0:         broker.setAdvisorySupport(false);
1:306f8a0:         broker.setBrokerName("testStoreSize");
1:306f8a0: 
1:306f8a0:         if (deleteMessages) {
1:306f8a0:             broker.setDeleteAllMessagesOnStartup(true);
1:306f8a0:         }
1:f7f294f:         LOG.info("Starting broker with persistenceAdapterChoice " + persistenceAdapterChoice.toString());
1:f7f294f:         setPersistenceAdapter(broker, persistenceAdapterChoice);
1:306f8a0:         configurePersistenceAdapter(broker.getPersistenceAdapter());
1:306f8a0:         broker.getSystemUsage().getStoreUsage().setLimit(100 * 1000 * 1000);
1:306f8a0:         broker.start();
1:306f8a0:     }
1:306f8a0: 
1:306f8a0:     private void configurePersistenceAdapter(PersistenceAdapter persistenceAdapter) {
1:306f8a0:         Properties properties = new Properties();
1:306f8a0:         String maxFileLengthVal = String.valueOf(2 * 1024 * 1024);
1:306f8a0:         properties.put("journalMaxFileLength", maxFileLengthVal);
1:306f8a0:         properties.put("maxFileLength", maxFileLengthVal);
1:306f8a0:         properties.put("cleanupInterval", "2000");
1:306f8a0:         properties.put("checkpointInterval", "2000");
1:f7f294f: 
1:5a0fd5d:         // leveldb
1:5a0fd5d:         properties.put("logSize", maxFileLengthVal);
1:5a0fd5d: 
1:306f8a0:         IntrospectionSupport.setProperties(persistenceAdapter, properties);
1:306f8a0:     }
1:306f8a0: 
1:306f8a0:     private void stopBroker() throws Exception {
1:306f8a0:         if (broker != null)
1:306f8a0:             broker.stop();
1:306f8a0:         broker = null;
1:306f8a0:     }
1:306f8a0: 
1:f7f294f:     @Override
1:306f8a0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:306f8a0:         return new ActiveMQConnectionFactory("vm://testStoreSize?jms.watchTopicAdvisories=false&waitForStart=5000&create=false");
1:306f8a0:     }
1:306f8a0: 
1:306f8a0:     @Override
1:f7f294f:     @Before
1:f7f294f:     public void setUp() throws Exception {
1:306f8a0:         StringBuilder sb = new StringBuilder(5000);
1:306f8a0:         for (int i = 0; i < 5000; i++) {
1:306f8a0:             sb.append('a');
1:306f8a0:         }
1:306f8a0:         data = sb.toString();
1:306f8a0: 
1:306f8a0:         startBroker(true);
1:306f8a0:         topic = (ActiveMQTopic) createDestination();
1:306f8a0:     }
1:306f8a0: 
1:306f8a0:     @Override
1:f7f294f:     @After
1:f7f294f:     public void tearDown() throws Exception {
1:306f8a0:         stopBroker();
1:306f8a0:     }
1:306f8a0: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f7f294f
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: @RunWith(value = Parameterized.class)
1: public class AMQ2870Test extends org.apache.activemq.TestSupport  {
/////////////////////////////////////////////////////////////////////////
1:     private final PersistenceAdapterChoice persistenceAdapterChoice;
1: 
1:     @Parameterized.Parameters
1:     public static Collection<PersistenceAdapterChoice[]> getTestParameters() {
1:         String osName = System.getProperty("os.name");
1:         LOG.info("Running on [" + osName + "]");
1:         PersistenceAdapterChoice[] kahaDb = {PersistenceAdapterChoice.KahaDB};
1:         PersistenceAdapterChoice[] levelDb = {PersistenceAdapterChoice.LevelDB};
1:         List<PersistenceAdapterChoice[]> choices = new ArrayList<PersistenceAdapterChoice[]>();
1:         choices.add(kahaDb);
1:         if (!osName.equalsIgnoreCase("AIX") && !osName.equalsIgnoreCase("SunOS")) {
1:             choices.add(levelDb);
1:         }
1: 
1:         return choices;
1: 
1:     public AMQ2870Test(PersistenceAdapterChoice choice) {
1:         this.persistenceAdapterChoice = choice;
1: 
1:     @Test(timeout = 300000)
/////////////////////////////////////////////////////////////////////////
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                     @Override
1:                         LOG.info("store precent usage: "+brokerView.getStorePercentUsage());
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Starting broker with persistenceAdapterChoice " + persistenceAdapterChoice.toString());
1:         setPersistenceAdapter(broker, persistenceAdapterChoice);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void tearDown() throws Exception {
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:5a0fd5d
/////////////////////////////////////////////////////////////////////////
1:                         LOG.info("store percent usage: "+brokerView.getStorePercentUsage());
/////////////////////////////////////////////////////////////////////////
1:         // leveldb
1:         properties.put("logSize", maxFileLengthVal);
1: 
commit:4de6878
/////////////////////////////////////////////////////////////////////////
1: 
commit:306f8a0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.Properties;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
0: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerView;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.Wait;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: public class AMQ2870Test extends org.apache.activemq.TestSupport {
1: 
0:     static final Log LOG = LogFactory.getLog(AMQ2870Test.class);
1:     BrokerService broker = null;
1:     ActiveMQTopic topic;
1: 
1:     ActiveMQConnection consumerConnection = null, producerConnection = null;
1:     Session producerSession;
1:     MessageProducer producer;
1:     final int minPercentUsageForStore = 10;
1:     String data;
1: 
0:     public static Test suite() {
0:         return suite(AMQ2870Test.class);
1:     }
1:     
0:     public void initCombosForTestSize() throws Exception {
0:         this.addCombinationValues("defaultPersistenceAdapter",
0:                 new Object[]{ PersistenceAdapterChoice.KahaDB, PersistenceAdapterChoice.AMQ});
1:     }
1:     
1:     public void testSize() throws Exception {
1:         openConsumer();
1: 
1:         assertEquals(0, broker.getAdminView().getStorePercentUsage());
0:                                                                                                                               Failo
1:         for (int i = 0; i < 5000; i++) {
1:             sendMessage(false);
1:         }
1: 
1:         final BrokerView brokerView = broker.getAdminView();
1: 
1:         // wait for reclaim
1:         assertTrue("in range with consumer",
1:                 Wait.waitFor(new Wait.Condition() {
1:                     public boolean isSatisified() throws Exception {
1:                         // usage percent updated only on send check for isFull so once
1:                         // sends complete it is no longer updated till next send via a call to isFull
1:                         // this is optimal as it is only used to block producers
1:                         broker.getSystemUsage().getStoreUsage().isFull();
1:                         LOG.info("store precent usage: "+brokerView.getStorePercentUsage());
1:                         return broker.getAdminView().getStorePercentUsage() < minPercentUsageForStore;
1:                     }
1:                 }));
1: 
1: 
1:         closeConsumer();
1: 
1:         assertTrue("in range with closed consumer",
1:                 Wait.waitFor(new Wait.Condition() {
1:                     public boolean isSatisified() throws Exception {
1:                         broker.getSystemUsage().getStoreUsage().isFull();
1:                         LOG.info("store precent usage: "+brokerView.getStorePercentUsage());
1:                         return broker.getAdminView().getStorePercentUsage() < minPercentUsageForStore;
1:                     }
1:                 }));
1: 
1:         for (int i = 0; i < 5000; i++) {
1:             sendMessage(false);
1:         }
1: 
1:         // What if i drop the subscription?
1:         broker.getAdminView().destroyDurableSubscriber("cliID", "subName");
1: 
1:         assertTrue("in range after send with consumer",
1:                 Wait.waitFor(new Wait.Condition() {
1:                     public boolean isSatisified() throws Exception {
1:                         broker.getSystemUsage().getStoreUsage().isFull();
1:                         LOG.info("store precent usage: "+brokerView.getStorePercentUsage());                        
1:                         return broker.getAdminView().getStorePercentUsage() < minPercentUsageForStore;
1:                     }
1:                 }));
1: 
1:     }
1: 
1:     private void openConsumer() throws Exception {
1:         consumerConnection = (ActiveMQConnection) createConnection();
1:         consumerConnection.setClientID("cliID");
1:         consumerConnection.start();
1:         Session session = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber subscriber = session.createDurableSubscriber(topic, "subName", "filter=true", false);
1: 
1:         subscriber.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
1:                 // received++;
1:             }
1:         });
1:     }
1: 
1:     private void closeConsumer() throws JMSException {
1:         if (consumerConnection != null)
1:             consumerConnection.close();
1:         consumerConnection = null;
1:     }
1: 
1:     private void sendMessage(boolean filter) throws Exception {
1:         if (producerConnection == null) {
1:             producerConnection = (ActiveMQConnection) createConnection();
1:             producerConnection.start();
1:             producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             producer = producerSession.createProducer(topic);
1:         }
1: 
1:         Message message = producerSession.createMessage();
1:         message.setBooleanProperty("filter", filter);
1:         message.setStringProperty("data", data);
1:         producer.send(message);
1:     }
1: 
1:     private void startBroker(boolean deleteMessages) throws Exception {
1:         broker = new BrokerService();
1:         broker.setAdvisorySupport(false);
1:         broker.setBrokerName("testStoreSize");
1: 
1:         if (deleteMessages) {
1:             broker.setDeleteAllMessagesOnStartup(true);
1:         }
0:         setDefaultPersistenceAdapter(broker);
1:         configurePersistenceAdapter(broker.getPersistenceAdapter());
1:         broker.getSystemUsage().getStoreUsage().setLimit(100 * 1000 * 1000);
1:         broker.start();
1:     }
1: 
1:     private void configurePersistenceAdapter(PersistenceAdapter persistenceAdapter) {
1:         Properties properties = new Properties();
1:         String maxFileLengthVal = String.valueOf(2 * 1024 * 1024);
1:         properties.put("journalMaxFileLength", maxFileLengthVal);
1:         properties.put("maxFileLength", maxFileLengthVal);
1:         properties.put("cleanupInterval", "2000");
1:         properties.put("checkpointInterval", "2000");
1:        
1:         IntrospectionSupport.setProperties(persistenceAdapter, properties);
1:     }
1: 
1:     private void stopBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:         broker = null;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://testStoreSize?jms.watchTopicAdvisories=false&waitForStart=5000&create=false");
1:     }
1: 
1:     @Override
0:     protected void setUp() throws Exception {
0:         super.setUp();
1: 
1:         StringBuilder sb = new StringBuilder(5000);
1:         for (int i = 0; i < 5000; i++) {
1:             sb.append('a');
1:         }
1:         data = sb.toString();
1: 
1:         startBroker(true);
1:         topic = (ActiveMQTopic) createDestination();
1:     }
1: 
1:     @Override
0:     protected void tearDown() throws Exception {
1:         stopBroker();
0:         super.tearDown();
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:77a679b
/////////////////////////////////////////////////////////////////////////
0:                 new Object[]{ PersistenceAdapterChoice.KahaDB, PersistenceAdapterChoice.LevelDB});
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ2870Test.class);
/////////////////////////////////////////////////////////////////////////
0: }
============================================================================