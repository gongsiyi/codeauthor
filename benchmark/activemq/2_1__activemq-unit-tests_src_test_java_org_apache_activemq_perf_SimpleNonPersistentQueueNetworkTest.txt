1:26aeb46: /**
1:26aeb46:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:26aeb46:  * contributor license agreements.  See the NOTICE file distributed with
1:26aeb46:  * this work for additional information regarding copyright ownership.
1:26aeb46:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:26aeb46:  * (the "License"); you may not use this file except in compliance with
1:26aeb46:  * the License.  You may obtain a copy of the License at
1:26aeb46:  *
1:26aeb46:  *      http://www.apache.org/licenses/LICENSE-2.0
1:26aeb46:  *
1:26aeb46:  * Unless required by applicable law or agreed to in writing, software
1:26aeb46:  * distributed under the License is distributed on an "AS IS" BASIS,
1:26aeb46:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:26aeb46:  * See the License for the specific language governing permissions and
1:26aeb46:  * limitations under the License.
1:26aeb46:  */
1:26aeb46: 
1:26aeb46: package org.apache.activemq.perf;
1:26aeb46: 
1:7f0583d: import java.util.ArrayList;
1:7f0583d: import java.util.List;
1:7f0583d: 
1:26aeb46: import javax.jms.ConnectionFactory;
1:26aeb46: import javax.jms.DeliveryMode;
1:26aeb46: import javax.jms.Destination;
1:26aeb46: import javax.jms.JMSException;
1:26aeb46: import javax.jms.Session;
1:26aeb46: 
1:7f0583d: import org.apache.activemq.broker.BrokerService;
1:7f0583d: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7f0583d: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7f0583d: 
1:26aeb46: public class SimpleNonPersistentQueueNetworkTest extends SimpleNetworkTest {
1:26aeb46: 
1:7f0583d: 	protected void setUp()throws Exception {
1:7f0583d: 	    numberOfDestinations =20;
1:26aeb46: 	    super.setUp();
1:26aeb46: 	}
1:26aeb46: 	protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException {
1:26aeb46:         PerfProducer pp = new PerfProducer(fac, dest, payload);
1:7f0583d:        pp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:7f0583d:        // pp.setTimeToLive(1000);
1:7f0583d:         //pp.setSleep(1);
1:26aeb46:         return pp;
1:26aeb46:     }
1:26aeb46: 	
1:26aeb46: 	protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
1:26aeb46:         PerfConsumer consumer =  new PerfConsumer(fac, dest);
1:26aeb46:         boolean enableAudit = numberOfConsumers <= 1;
1:26aeb46:         System.out.println("Enable Audit = " + enableAudit);
1:7f0583d:         consumer.setEnableAudit(false);
1:26aeb46:         return consumer;
1:26aeb46:     }
1:26aeb46: 	
1:7f0583d: 	 public void testPerformance() throws JMSException, InterruptedException {
1:7f0583d: 	     //Thread.sleep(5000);
1:7f0583d: 	     super.testPerformance();
1:7f0583d: 	 }
1:7f0583d: 	
1:26aeb46: 	 protected Destination createDestination(Session s, String destinationName) throws JMSException {
1:26aeb46: 	        return s.createQueue(destinationName);
1:7f0583d: 	 }
1:7f0583d: 	 
1:7f0583d: 	 protected void configureBroker(BrokerService answer) throws Exception {
1:7f0583d: 	        answer.setPersistent(false);
1:7f0583d: 	        answer.setMonitorConnectionSplits(true);
1:7f0583d: 	        final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:7f0583d: 	        final PolicyEntry entry = new PolicyEntry();
1:7f0583d: 	        entry.setQueue(">");
1:7f0583d: 	        entry.setMemoryLimit(1024 * 1024 * 100); // Set to 1 MB
1:7f0583d: 	        entry.setOptimizedDispatch(true);
1:7f0583d: 	        entry.setProducerFlowControl(true);
1:7f0583d: 	        entry.setMaxPageSize(10);
1:7f0583d: 	        entry.setLazyDispatch(false);
1:7f0583d: 	        policyEntries.add(entry);
1:7f0583d: 
1:7f0583d: 	        
1:7f0583d: 	        final PolicyMap policyMap = new PolicyMap();
1:7f0583d: 	        policyMap.setPolicyEntries(policyEntries);
1:7f0583d: 	        answer.setDestinationPolicy(policyMap);
1:7f0583d: 	        super.configureBroker(answer);
1:26aeb46: 	    }
1:26aeb46: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:7f0583d
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: 
1: 	protected void setUp()throws Exception {
1: 	    numberOfDestinations =20;
1:        pp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:        // pp.setTimeToLive(1000);
1:         //pp.setSleep(1);
/////////////////////////////////////////////////////////////////////////
1:         consumer.setEnableAudit(false);
1: 	 public void testPerformance() throws JMSException, InterruptedException {
1: 	     //Thread.sleep(5000);
1: 	     super.testPerformance();
1: 	 }
1: 	
1: 	 }
1: 	 
1: 	 protected void configureBroker(BrokerService answer) throws Exception {
1: 	        answer.setPersistent(false);
1: 	        answer.setMonitorConnectionSplits(true);
1: 	        final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1: 	        final PolicyEntry entry = new PolicyEntry();
1: 	        entry.setQueue(">");
1: 	        entry.setMemoryLimit(1024 * 1024 * 100); // Set to 1 MB
1: 	        entry.setOptimizedDispatch(true);
1: 	        entry.setProducerFlowControl(true);
1: 	        entry.setMaxPageSize(10);
1: 	        entry.setLazyDispatch(false);
1: 	        policyEntries.add(entry);
1: 
1: 	        
1: 	        final PolicyMap policyMap = new PolicyMap();
1: 	        policyMap.setPolicyEntries(policyEntries);
1: 	        answer.setDestinationPolicy(policyMap);
1: 	        super.configureBroker(answer);
commit:26aeb46
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.perf;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: public class SimpleNonPersistentQueueNetworkTest extends SimpleNetworkTest {
1: 
0: 	protected void setUp() throws Exception {
0: 		numberOfConsumers = 10;
0: 	    numberofProducers = 10;
1: 	    super.setUp();
1: 	}
1: 	protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException {
1:         PerfProducer pp = new PerfProducer(fac, dest, payload);
0:         pp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
0:         pp.setTimeToLive(1000);
1:         return pp;
1:     }
1: 	
1: 	protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
1:         PerfConsumer consumer =  new PerfConsumer(fac, dest);
1:         boolean enableAudit = numberOfConsumers <= 1;
1:         System.out.println("Enable Audit = " + enableAudit);
0:         consumer.setEnableAudit(enableAudit);
1:         return consumer;
1:     }
1: 	
1: 	 protected Destination createDestination(Session s, String destinationName) throws JMSException {
1: 	        return s.createQueue(destinationName);
1: 	    }
1: }
============================================================================