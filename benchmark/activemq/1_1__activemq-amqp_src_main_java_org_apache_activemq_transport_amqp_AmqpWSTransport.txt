1:31c55f7: /*
1:31c55f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:31c55f7:  * contributor license agreements.  See the NOTICE file distributed with
1:31c55f7:  * this work for additional information regarding copyright ownership.
1:31c55f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:31c55f7:  * (the "License"); you may not use this file except in compliance with
1:31c55f7:  * the License.  You may obtain a copy of the License at
1:31c55f7:  *
1:31c55f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:31c55f7:  *
1:31c55f7:  * Unless required by applicable law or agreed to in writing, software
1:31c55f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31c55f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31c55f7:  * See the License for the specific language governing permissions and
1:31c55f7:  * limitations under the License.
1:31c55f7:  */
1:31c55f7: package org.apache.activemq.transport.amqp;
1:31c55f7: 
1:31c55f7: import java.io.IOException;
1:31c55f7: import java.net.URI;
1:31c55f7: import java.nio.ByteBuffer;
1:31c55f7: import java.security.cert.X509Certificate;
1:31c55f7: 
1:31c55f7: import org.apache.activemq.transport.TransportSupport;
1:31c55f7: import org.apache.activemq.transport.amqp.AmqpFrameParser.AMQPFrameSink;
1:31c55f7: import org.apache.activemq.transport.ws.WSTransport;
1:31c55f7: import org.apache.activemq.util.IOExceptionSupport;
1:31c55f7: import org.apache.activemq.util.ServiceStopper;
1:31c55f7: import org.apache.activemq.wireformat.WireFormat;
1:31c55f7: 
1:31c55f7: /**
1:31c55f7:  * An AMQP based WebSocket transport implementation.
1:31c55f7:  */
1:31c55f7: public class AmqpWSTransport extends TransportSupport implements WSTransport, AMQPFrameSink {
1:31c55f7: 
1:31c55f7:     private final AmqpFrameParser frameReader = new AmqpFrameParser(this);
1:31c55f7:     private final URI remoteLocation;
1:31c55f7: 
1:31c55f7:     private WSTransportSink outputSink;
1:31c55f7:     private int receiveCounter;
1:31c55f7:     private X509Certificate[] certificates;
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Create a new Transport instance.
1:31c55f7:      *
1:31c55f7:      * @param location
1:31c55f7:      *      the remote location where the client connection is from.
1:31c55f7:      * @param wireFormat
1:31c55f7:      *      the WireFormat instance that configures this Transport.
1:31c55f7:      */
1:31c55f7:     public AmqpWSTransport(URI location, WireFormat wireFormat) {
1:31c55f7:         super();
1:31c55f7: 
1:31c55f7:         remoteLocation = location;
1:31c55f7:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setTransportSink(WSTransportSink outputSink) {
1:31c55f7:         this.outputSink = outputSink;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void oneway(Object command) throws IOException {
1:31c55f7:         if (command instanceof ByteBuffer) {
1:31c55f7:             outputSink.onSocketOutboundBinary((ByteBuffer) command);
1:31c55f7:         } else {
1:31c55f7:             throw new IOException("Unexpected output command.");
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public String getRemoteAddress() {
1:31c55f7:         return remoteLocation.toASCIIString();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public int getReceiveCounter() {
1:31c55f7:         return receiveCounter;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public X509Certificate[] getPeerCertificates() {
1:31c55f7:         return certificates;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setPeerCertificates(X509Certificate[] certificates) {
1:31c55f7:         this.certificates = certificates;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public String getSubProtocol() {
1:31c55f7:         return "amqp";
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public WireFormat getWireFormat() {
1:31c55f7:         return frameReader.getWireFormat();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:2e2d5dd:     public int getMaxFrameSize() {
1:2e2d5dd:         return (int) Math.min(((AmqpWireFormat) getWireFormat()).getMaxFrameSize(), Integer.MAX_VALUE);
1:2e2d5dd:     }
1:2e2d5dd: 
1:2e2d5dd:     @Override
1:31c55f7:     protected void doStop(ServiceStopper stopper) throws Exception {
1:31c55f7:         // Currently nothing needed here since we have no async workers.
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     protected void doStart() throws Exception {
1:31c55f7:         if (outputSink == null) {
1:31c55f7:             throw new IllegalStateException("Transport started before output sink assigned.");
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         // Currently nothing needed here since we have no async workers.
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     //----- WebSocket event hooks --------------------------------------------//
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onWebSocketText(String data) throws IOException {
1:31c55f7:         onException(new IOException("Illegal text content receive on AMQP WebSocket channel."));
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onWebSocketBinary(ByteBuffer data) throws IOException {
1:31c55f7:         try {
1:31c55f7:             frameReader.parse(data);
1:31c55f7:         } catch (Exception e) {
1:31c55f7:             throw IOExceptionSupport.create(e);
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onWebSocketClosed() throws IOException {
1:31c55f7:         onException(new IOException("Unexpected close of AMQP WebSocket channel."));
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     //----- AMQP Frame Data event hook ---------------------------------------//
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onFrame(Object frame) {
1:31c55f7:         doConsume(frame);
1:31c55f7:     }
1:31c55f7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1:     public int getMaxFrameSize() {
1:         return (int) Math.min(((AmqpWireFormat) getWireFormat()).getMaxFrameSize(), Integer.MAX_VALUE);
1:     }
1: 
1:     @Override
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.nio.ByteBuffer;
1: import java.security.cert.X509Certificate;
1: 
1: import org.apache.activemq.transport.TransportSupport;
1: import org.apache.activemq.transport.amqp.AmqpFrameParser.AMQPFrameSink;
1: import org.apache.activemq.transport.ws.WSTransport;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
1: /**
1:  * An AMQP based WebSocket transport implementation.
1:  */
1: public class AmqpWSTransport extends TransportSupport implements WSTransport, AMQPFrameSink {
1: 
1:     private final AmqpFrameParser frameReader = new AmqpFrameParser(this);
1:     private final URI remoteLocation;
1: 
1:     private WSTransportSink outputSink;
1:     private int receiveCounter;
1:     private X509Certificate[] certificates;
1: 
1:     /**
1:      * Create a new Transport instance.
1:      *
1:      * @param location
1:      *      the remote location where the client connection is from.
1:      * @param wireFormat
1:      *      the WireFormat instance that configures this Transport.
1:      */
1:     public AmqpWSTransport(URI location, WireFormat wireFormat) {
1:         super();
1: 
1:         remoteLocation = location;
1:         frameReader.setWireFormat((AmqpWireFormat) wireFormat);
1:     }
1: 
1:     @Override
1:     public void setTransportSink(WSTransportSink outputSink) {
1:         this.outputSink = outputSink;
1:     }
1: 
1:     @Override
1:     public void oneway(Object command) throws IOException {
1:         if (command instanceof ByteBuffer) {
1:             outputSink.onSocketOutboundBinary((ByteBuffer) command);
1:         } else {
1:             throw new IOException("Unexpected output command.");
1:         }
1:     }
1: 
1:     @Override
1:     public String getRemoteAddress() {
1:         return remoteLocation.toASCIIString();
1:     }
1: 
1:     @Override
1:     public int getReceiveCounter() {
1:         return receiveCounter;
1:     }
1: 
1:     @Override
1:     public X509Certificate[] getPeerCertificates() {
1:         return certificates;
1:     }
1: 
1:     @Override
1:     public void setPeerCertificates(X509Certificate[] certificates) {
1:         this.certificates = certificates;
1:     }
1: 
1:     @Override
1:     public String getSubProtocol() {
1:         return "amqp";
1:     }
1: 
1:     @Override
1:     public WireFormat getWireFormat() {
1:         return frameReader.getWireFormat();
1:     }
1: 
1:     @Override
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         // Currently nothing needed here since we have no async workers.
1:     }
1: 
1:     @Override
1:     protected void doStart() throws Exception {
1:         if (outputSink == null) {
1:             throw new IllegalStateException("Transport started before output sink assigned.");
1:         }
1: 
1:         // Currently nothing needed here since we have no async workers.
1:     }
1: 
1:     //----- WebSocket event hooks --------------------------------------------//
1: 
1:     @Override
1:     public void onWebSocketText(String data) throws IOException {
1:         onException(new IOException("Illegal text content receive on AMQP WebSocket channel."));
1:     }
1: 
1:     @Override
1:     public void onWebSocketBinary(ByteBuffer data) throws IOException {
1:         try {
1:             frameReader.parse(data);
1:         } catch (Exception e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     @Override
1:     public void onWebSocketClosed() throws IOException {
1:         onException(new IOException("Unexpected close of AMQP WebSocket channel."));
1:     }
1: 
1:     //----- AMQP Frame Data event hook ---------------------------------------//
1: 
1:     @Override
1:     public void onFrame(Object frame) {
1:         doConsume(frame);
1:     }
1: }
============================================================================