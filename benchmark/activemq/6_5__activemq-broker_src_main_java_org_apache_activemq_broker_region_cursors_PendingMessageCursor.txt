1:4eef609: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
2:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
2:7d1e6bc:  */
1:7d1e6bc: package org.apache.activemq.broker.region.cursors;
1:aad7e73: 
1:b6ba20b: import java.io.IOException;
1:0c0be94: import java.util.LinkedList;
1:ae7de6c: import java.util.List;
1:55810b3: import org.apache.activemq.ActiveMQMessageAudit;
1:4eef609: import org.apache.activemq.Service;
1:4eef609: import org.apache.activemq.broker.ConnectionContext;
1:4eef609: import org.apache.activemq.broker.region.Destination;
1:7d1e6bc: import org.apache.activemq.broker.region.MessageReference;
1:47cfa55: import org.apache.activemq.command.MessageId;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:47cfa55: 
1:55810b3: /**
1:74a7a8b:  * Interface to pending message (messages awaiting disptach to a consumer)
1:74a7a8b:  * cursor
1:734fb7d:  *
1:734fb7d:  *
1:ec63977:  */
1:74a7a8b: public interface PendingMessageCursor extends Service {
1:74a7a8b: 
1:cc6213e:     static final long INFINITE_WAIT = 0;
1:cc6213e: 
1:0c0be94:     /**
1:4eef609:      * Add a destination
1:734fb7d:      *
1:4eef609:      * @param context
1:4eef609:      * @param destination
1:0c0be94:      * @throws Exception
1:0c0be94:      */
1:fc00993:     void add(ConnectionContext context, Destination destination) throws Exception;
1:4dde323: 
1:f42c91f:     /**
1:4eef609:      * remove a destination
1:734fb7d:      *
1:4eef609:      * @param context
1:4eef609:      * @param destination
2:b6ba20b:      * @throws Exception
1:4eef609:      */
1:ae7de6c:     List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception;
1:74a7a8b: 
1:a110604:     /**
1:7d1e6bc:      * @return true if there are no pending messages
1:4eef609:      */
1:fc00993:     boolean isEmpty();
1:74a7a8b: 
1:ec63977:     /**
1:4597ddd:      * check if a Destination is Empty for this cursor
1:734fb7d:      *
1:4597ddd:      * @param destination
1:4597ddd:      * @return true id the Destination is empty
1:4597ddd:      */
1:fc00993:     boolean isEmpty(Destination destination);
1:74a7a8b: 
1:4597ddd:     /**
1:7d1e6bc:      * reset the cursor
1:7d1e6bc:      */
1:fc00993:     void reset();
1:74a7a8b: 
1:9359e9f:     /**
1:74a7a8b:      * hint to the cursor to release any locks it might have grabbed after a
1:74a7a8b:      * reset
1:7d1e6bc:      */
1:fc00993:     void release();
1:4dde323: 
1:6895d00:     /**
1:7d1e6bc:      * add message to await dispatch
1:734fb7d:      *
1:7d1e6bc:      * @param node
1:54e2e3b:      * @return boolean true if successful, false if cursor traps a duplicate
1:74a7a8b:      * @throws IOException
1:74a7a8b:      * @throws Exception
1:7d1e6bc:      */
1:54e2e3b:     boolean addMessageLast(MessageReference node) throws Exception;
1:54e2e3b: 
1:3bf0245:     /**
1:f42c91f:      * add message to await dispatch - if it can
1:734fb7d:      *
1:f42c91f:      * @param node
1:734fb7d:      * @param maxWaitTime
1:f42c91f:      * @return true if successful
1:f42c91f:      * @throws IOException
1:74a7a8b:      * @throws Exception
1:f42c91f:      */
1:f42c91f:     boolean tryAddMessageLast(MessageReference node, long maxWaitTime) throws Exception;
1:74a7a8b: 
1:4eef609:     /**
1:7d1e6bc:      * add message to await dispatch
1:734fb7d:      *
1:7d1e6bc:      * @param node
1:f42c91f:      * @throws Exception
1:7d1e6bc:      */
1:fc00993:     void addMessageFirst(MessageReference node) throws Exception;
1:74a7a8b: 
1:4eef609:     /**
1:a110604:      * Add a message recovered from a retroactive policy
1:734fb7d:      *
1:a110604:      * @param node
1:a110604:      * @throws Exception
1:a110604:      */
1:fc00993:     void addRecoveredMessage(MessageReference node) throws Exception;
1:071b4b1: 
2:7d1e6bc:     /**
1:7d1e6bc:      * @return true if there pending messages to dispatch
1:7d1e6bc:      */
1:fc00993:     boolean hasNext();
1:071b4b1: 
1:7d1e6bc:     /**
1:5619cd0:      * @return the next pending message with its reference count increment
1:7d1e6bc:      */
1:fc00993:     MessageReference next();
1:55810b3: 
1:7d1e6bc:     /**
1:7d1e6bc:      * remove the message at the cursor position
1:7d1e6bc:      */
1:fc00993:     void remove();
1:55810b3: 
1:7d1e6bc:     /**
1:7d1e6bc:      * @return the number of pending messages
1:7d1e6bc:      */
1:fc00993:     int size();
1:55810b3: 
1:734fb7d:     long messageSize();
1:734fb7d: 
1:7d1e6bc:     /**
1:7d1e6bc:      * clear all pending messages
1:7d1e6bc:      */
1:fc00993:     void clear();
1:74a7a8b: 
1:7d1e6bc:     /**
1:74a7a8b:      * Informs the Broker if the subscription needs to intervention to recover
1:74a7a8b:      * it's state e.g. DurableTopicSubscriber may do
1:734fb7d:      *
1:4eef609:      * @return true if recovery required
1:4eef609:      */
1:fc00993:     boolean isRecoveryRequired();
1:74a7a8b: 
1:b6ba20b:     /**
1:b6ba20b:      * @return the maximum batch size
1:b6ba20b:      */
1:fc00993:     int getMaxBatchSize();
1:9dd11cb: 
1:b6ba20b:     /**
1:b6ba20b:      * Set the max batch size
1:734fb7d:      *
1:b6ba20b:      * @param maxBatchSize
1:3a9299b:      */
1:fc00993:     void setMaxBatchSize(int maxBatchSize);
1:36486fe: 
1:3a9299b:     /**
1:74a7a8b:      * Give the cursor a hint that we are about to remove messages from memory
1:74a7a8b:      * only
1:b6ba20b:      */
1:fc00993:     void resetForGC();
1:74a7a8b: 
1:7d1e6bc:     /**
1:6895d00:      * remove a node
1:734fb7d:      *
1:6895d00:      * @param node
1:6895d00:      */
1:fc00993:     void remove(MessageReference node);
1:74a7a8b: 
1:7d1e6bc:     /**
1:3bf0245:      * free up any internal buffers
1:3bf0245:      */
1:fc00993:     void gc();
1:74a7a8b: 
1:3bf0245:     /**
1:3bf0245:      * Set the UsageManager
1:734fb7d:      *
1:6d8e2c5:      * @param systemUsage
1:6d8e2c5:      * @see org.apache.activemq.usage.SystemUsage
1:3bf0245:      */
1:6d8e2c5:     void setSystemUsage(SystemUsage systemUsage);
1:74a7a8b: 
1:7d1e6bc:     /**
1:b036d4d:      * @return the usageManager
1:b036d4d:      */
1:6d8e2c5:     SystemUsage getSystemUsage();
1:74a7a8b: 
1:b036d4d:     /**
1:b036d4d:      * @return the memoryUsageHighWaterMark
1:b036d4d:      */
1:fc00993:     int getMemoryUsageHighWaterMark();
5:1ee0017: 
1:b036d4d:     /**
1:b036d4d:      * @param memoryUsageHighWaterMark the memoryUsageHighWaterMark to set
1:b036d4d:      */
1:fc00993:     void setMemoryUsageHighWaterMark(int memoryUsageHighWaterMark);
1:1ee0017: 
1:b036d4d:     /**
1:9359e9f:      * @return true if the cursor is full
1:9359e9f:      */
1:fc00993:     boolean isFull();
1:734fb7d: 
1:4dde323:     /**
1:4dde323:      * @return true if the cursor has space to page messages into
1:4dde323:      */
1:4dde323:     public boolean hasSpace();
1:74a7a8b: 
1:e5efc58:     /**
1:e5efc58:      * @return true if the cursor has buffered messages ready to deliver
1:e5efc58:      */
1:fc00993:     boolean hasMessagesBufferedToDeliver();
1:74a7a8b: 
1:7d1e6bc:     /**
1:0c0be94:      * destroy the cursor
1:734fb7d:      *
1:74a7a8b:      * @throws Exception
1:0c0be94:      */
1:fc00993:     void destroy() throws Exception;
1:74a7a8b: 
1:0c0be94:     /**
1:a2af47b:      * Page in a restricted number of messages and increment the reference count
1:734fb7d:      *
1:0c0be94:      * @param maxItems
1:0c0be94:      * @return a list of paged in messages
1:1ee0017:      */
1:d56371f:     LinkedList<MessageReference> pageInList(int maxItems);
1:734fb7d: 
1:1ee0017:     /**
1:1ee0017:      * set the maximum number of producers to track at one time
1:1ee0017:      * @param value
1:1ee0017:      */
1:1ee0017:     void setMaxProducersToAudit(int value);
1:734fb7d: 
1:1ee0017:     /**
1:1ee0017:      * @return the maximum number of producers to audit
1:1ee0017:      */
1:1ee0017:     int getMaxProducersToAudit();
1:734fb7d: 
1:1ee0017:     /**
1:1ee0017:      * Set the maximum depth of message ids to track
1:734fb7d:      * @param depth
1:1ee0017:      */
1:1ee0017:     void setMaxAuditDepth(int depth);
1:734fb7d: 
1:1ee0017:     /**
1:1ee0017:      * @return the audit depth
1:1ee0017:      */
1:1ee0017:     int getMaxAuditDepth();
1:734fb7d: 
1:1ee0017:     /**
1:1ee0017:      * @return the enableAudit
1:1ee0017:      */
1:1ee0017:     public boolean isEnableAudit();
1:1ee0017:     /**
1:1ee0017:      * @param enableAudit the enableAudit to set
1:36486fe:      */
1:1ee0017:     public void setEnableAudit(boolean enableAudit);
1:734fb7d: 
1:36486fe:     /**
1:734fb7d:      * @return true if the underlying state of this cursor
1:36486fe:      * disappears when the broker shuts down
1:9dd11cb:      */
1:36486fe:     public boolean isTransient();
1:734fb7d: 
1:734fb7d: 
1:9dd11cb:     /**
1:55810b3:      * set the audit
1:55810b3:      * @param audit
1:55810b3:      */
1:55810b3:     public void setMessageAudit(ActiveMQMessageAudit audit);
1:734fb7d: 
1:734fb7d: 
1:55810b3:     /**
1:55810b3:      * @return the audit - could be null
1:55810b3:      */
1:55810b3:     public ActiveMQMessageAudit getMessageAudit();
1:734fb7d: 
1:071b4b1:     /**
1:071b4b1:      * use a cache to improve performance
1:071b4b1:      * @param useCache
1:071b4b1:      */
1:071b4b1:     public void setUseCache(boolean useCache);
1:734fb7d: 
1:071b4b1:     /**
1:aad7e73:      * @return true if a cache may be used
1:071b4b1:      */
1:071b4b1:     public boolean isUseCache();
1:734fb7d: 
1:47cfa55:     /**
1:47cfa55:      * remove from auditing the message id
1:47cfa55:      * @param id
1:47cfa55:      */
1:47cfa55:     public void rollback(MessageId id);
1:74a7a8b: 
1:aad7e73:     /**
1:aad7e73:      * @return true if cache is being used
1:aad7e73:      */
1:aad7e73:     public boolean isCacheEnabled();
1:cfe099d: 
1:cfe099d:     public void rebase();
1:cfe099d: 
1:7d1e6bc: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc6213e
/////////////////////////////////////////////////////////////////////////
1:     static final long INFINITE_WAIT = 0;
1: 
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param maxWaitTime
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:     long messageSize();
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1: 
1: 
1: 
1:      * @param depth
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * @return true if the underlying state of this cursor
1: 
1: 
1: 
1: 
1: 
1: 
1: 
author:gtully
-------------------------------------------------------------------------------
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1:      * @return boolean true if successful, false if cursor traps a duplicate
1:     boolean addMessageLast(MessageReference node) throws Exception;
1: 
commit:cfe099d
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void rebase();
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ae7de6c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
0: import org.apache.activemq.broker.region.QueueMessageReference;
/////////////////////////////////////////////////////////////////////////
1:     List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
1:     void add(ConnectionContext context, Destination destination) throws Exception;
/////////////////////////////////////////////////////////////////////////
0:     void remove(ConnectionContext context, Destination destination) throws Exception;
1:     boolean isEmpty();
/////////////////////////////////////////////////////////////////////////
1:     boolean isEmpty(Destination destination);
1:     void reset();
1:     void release();
/////////////////////////////////////////////////////////////////////////
0:     void addMessageLast(MessageReference node) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void addMessageFirst(MessageReference node) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void addRecoveredMessage(MessageReference node) throws Exception;
1:     boolean hasNext();
1:     MessageReference next();
1:     void remove();
1:     int size();
1:     void clear();
/////////////////////////////////////////////////////////////////////////
1:     boolean isRecoveryRequired();
1:     int getMaxBatchSize();
1:     void setMaxBatchSize(int maxBatchSize);
1:     void resetForGC();
1:     void remove(MessageReference node);
1:     void gc();
/////////////////////////////////////////////////////////////////////////
0:     void setUsageManager(UsageManager usageManager);
0:     UsageManager getUsageManager();
1:     int getMemoryUsageHighWaterMark();
1:     void setMemoryUsageHighWaterMark(int memoryUsageHighWaterMark);
1:     boolean isFull();
1:     boolean hasMessagesBufferedToDeliver();
1:     void destroy() throws Exception;
/////////////////////////////////////////////////////////////////////////
0:     LinkedList pageInList(int maxItems);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:  * Interface to pending message (messages awaiting disptach to a consumer)
1:  * cursor
1: public interface PendingMessageCursor extends Service {
1: 
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1: 
1: 
0:      * 
1: 
1: 
1:      * hint to the cursor to release any locks it might have grabbed after a
1:      * reset
0:      * 
1:      * @throws IOException
1:      * @throws Exception
0:     public void addMessageLast(MessageReference node) throws Exception;
1: 
0:      * 
1:      * @throws Exception
1: 
0:      * 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Informs the Broker if the subscription needs to intervention to recover
1:      * it's state e.g. DurableTopicSubscriber may do
0:      * 
1: 
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * Give the cursor a hint that we are about to remove messages from memory
1:      * only
1: 
0:      * 
1: 
1: 
0:      * 
1: 
1: 
1: 
1: 
0:      * 
1:      * @throws Exception
1: 
0:      * 
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
1:      * @return true if a cache may be used
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return true if cache is being used
1:      */
1:     public boolean isCacheEnabled();
commit:a2af47b
/////////////////////////////////////////////////////////////////////////
1:      * Page in a restricted number of messages and increment the reference count
commit:5619cd0
/////////////////////////////////////////////////////////////////////////
1:      * @return the next pending message with its reference count increment
author:Robert Davies
-------------------------------------------------------------------------------
commit:f42c91f
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * add message to await dispatch - if it can
0:      * 
1:      * @param node
0:      * @param maxWaitTime 
1:      * @return true if successful
1:      * @throws IOException
1:      * @throws Exception
1:      */
1:     boolean tryAddMessageLast(MessageReference node, long maxWaitTime) throws Exception;
commit:d261412
/////////////////////////////////////////////////////////////////////////
commit:47cfa55
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageId;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * remove from auditing the message id
1:      * @param id
1:      */
1:     public void rollback(MessageId id);
commit:4dde323
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * @return true if the cursor has space to page messages into
1:      */
1:     public boolean hasSpace();
/////////////////////////////////////////////////////////////////////////
1:    
commit:d56371f
/////////////////////////////////////////////////////////////////////////
1:     LinkedList<MessageReference> pageInList(int maxItems);
commit:071b4b1
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * use a cache to improve performance
1:      * @param useCache
1:      */
1:     public void setUseCache(boolean useCache);
1:     
1:     /**
0:      * @return true if a cache is being used
1:      */
1:     public boolean isUseCache();
commit:55810b3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQMessageAudit;
0: import org.apache.activemq.command.MessageId;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * set the audit
1:      * @param audit
1:      */
1:     public void setMessageAudit(ActiveMQMessageAudit audit);
1:     
1:     
1:     /**
1:      * @return the audit - could be null
1:      */
1:     public ActiveMQMessageAudit getMessageAudit();
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * Mark a message as already dispatched
0:      * @param message
1:      */
0:     public void dispatched(MessageReference message);
commit:36486fe
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * @return true if the underlying state of this cursor 
1:      * disappears when the broker shuts down
1:      */
1:     public boolean isTransient();
commit:1ee0017
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * set the maximum number of producers to track at one time
1:      * @param value
1:      */
1:     void setMaxProducersToAudit(int value);
1:     
1:     /**
1:      * @return the maximum number of producers to audit
1:      */
1:     int getMaxProducersToAudit();
1:     
1:     /**
1:      * Set the maximum depth of message ids to track
0:      * @param depth 
1:      */
1:     void setMaxAuditDepth(int depth);
1:     
1:     /**
1:      * @return the audit depth
1:      */
1:     int getMaxAuditDepth();
1:     
1:     /**
1:      * @return the enableAudit
1:      */
1:     public boolean isEnableAudit();
1:     /**
1:      * @param enableAudit the enableAudit to set
1:      */
1:     public void setEnableAudit(boolean enableAudit);
1: 
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:      * @param systemUsage
1:      * @see org.apache.activemq.usage.SystemUsage
1:     void setSystemUsage(SystemUsage systemUsage);
1:     SystemUsage getSystemUsage();
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedList;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * destroy the cursor
1:      * @throws Exception 
1:      */
0:     public void destroy() throws Exception;
0:     
1:     /**
0:      * Page in a restricted number of messages
1:      * @param maxItems
1:      * @return a list of paged in messages
1:      */
0:     public LinkedList pageInList(int maxItems);
0:     
commit:b036d4d
/////////////////////////////////////////////////////////////////////////
1:      * @return the usageManager
1:      */
0:     public UsageManager getUsageManager();
0:     
1:     /**
1:      * @return the memoryUsageHighWaterMark
1:      */
0:     public int getMemoryUsageHighWaterMark();
0: 
0:     
1:     /**
1:      * @param memoryUsageHighWaterMark the memoryUsageHighWaterMark to set
1:      */
0:     public void setMemoryUsageHighWaterMark(int memoryUsageHighWaterMark);
0: 
0:     
1:     /**
/////////////////////////////////////////////////////////////////////////
0:     
0:     
commit:e5efc58
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return true if the cursor has buffered messages ready to deliver
1:      */
0:     public boolean hasMessagesBufferedToDeliver();
commit:4597ddd
/////////////////////////////////////////////////////////////////////////
1:      * check if a Destination is Empty for this cursor
1:      * @param destination
1:      * @return true id the Destination is empty
1:      */
0:     public boolean isEmpty(Destination destination);
0:     
1:     /**
commit:a110604
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Add a message recovered from a retroactive policy
1:      * @param node
1:      * @throws Exception
1:      */
0:     public void addRecoveredMessage(MessageReference node) throws Exception;
commit:ec63977
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
0:      * hint to the cursor to release any locks it might have
0:      * grabbed after a reset
0:      *
1:      */
0:     public void release();
commit:9359e9f
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return true if the cursor is full
1:      */
0:     public boolean isFull();
commit:3bf0245
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.memory.UsageManager;
/////////////////////////////////////////////////////////////////////////
0:     
0:     
1:     /**
1:      * free up any internal buffers
0:      *
1:      */
0:     public void gc();
0:     
1:     /**
1:      * Set the UsageManager
0:      * @param usageManager
0:      * @see org.apache.activemq.memory.UsageManager
1:      */
0:     public void setUsageManager(UsageManager usageManager);
commit:6895d00
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * remove a node
1:      * @param node
1:      */
0:     public void remove(MessageReference node);
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
0:      * Give the cursor a hint that we are about to remove
0:      * messages from memory only
1:      */
0:     public void resetForGC();
commit:b6ba20b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: 
/////////////////////////////////////////////////////////////////////////
0:      * @throws IOException 
1:      * @throws Exception 
0:     public void addMessageLast(MessageReference node) throws  Exception;
1:      * @throws Exception 
0:     public void addMessageFirst(MessageReference node) throws Exception;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return the maximum batch size
1:      */
0:     public int getMaxBatchSize();
0: 
1:     /**
1:      * Set the max batch size
1:      * @param maxBatchSize
1:      */
0:     public void setMaxBatchSize(int maxBatchSize);
commit:4eef609
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
0: public interface PendingMessageCursor extends Service{
0:     
0:     
1:     /**
1:      * Add a destination
1:      * @param context
1:      * @param destination
0:      * @throws Exception
1:      */
0:     public void add(ConnectionContext context, Destination destination) throws Exception;
0: 
1:     /**
1:      * remove a destination
1:      * @param context
1:      * @param destination
0:      * @throws Exception
1:      */
0:     public void remove(ConnectionContext context, Destination destination) throws Exception;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
0:      * Informs the Broker if the subscription needs to intervention to recover it's state
0:      * e.g. DurableTopicSubscriber may do
0:      * @see org.apache.activemq.region.cursors.PendingMessageCursor
1:      * @return true if recovery required
1:      */
0:     public boolean isRecoveryRequired();
commit:7d1e6bc
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
0: 
1: import org.apache.activemq.broker.region.MessageReference;
0: 
1: /**
0:  * Interface to pending message (messages awaiting disptach to a consumer) cursor
0:  * 
0:  * @version $Revision$
1:  */
0: public interface PendingMessageCursor{
1:     /**
1:      * @return true if there are no pending messages
1:      */
0:     public boolean isEmpty();
0:     
1:     /**
1:      * reset the cursor
0:      *
1:      */
0:     public void reset();
0: 
1:     /**
1:      * add message to await dispatch
1:      * @param node
1:      */
0:     public void addMessageLast(MessageReference node);
0:     
1:     /**
1:      * add message to await dispatch
1:      * @param node
1:      */
0:     public void addMessageFirst(MessageReference node);
0: 
1:     /**
1:      * @return true if there pending messages to dispatch
1:      */
0:     public boolean hasNext();
0: 
1:     /**
0:      * @return the next pending message
1:      */
0:     public MessageReference next();
0: 
1:     /**
1:      * remove the message at the cursor position
0:      * 
1:      */
0:     public void remove();
0: 
1:     /**
1:      * @return the number of pending messages
1:      */
0:     public int size();
0: 
1:     /**
1:      * clear all pending messages
0:      * 
1:      */
0:     public void clear();
1: }
============================================================================