1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
1:a2ae3a9: 
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:933eb2f: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
6:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JMSDurableTopicRedeliverTest extends JmsTopicRedeliverTest {
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JMSDurableTopicRedeliverTest.class);
1:f812e34: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         durable = true;
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * Sends and consumes the messages.
1:f812e34:      * 
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testRedeliverNewSession() throws Exception {
1:f812e34:         String text = "TEST: " + System.currentTimeMillis();
1:d29ca2a:         Message sendMessage = session.createTextMessage(text);
1:d29ca2a: 
1:d29ca2a:         if (verbose) {
1:fc00993:             LOG.info("About to send a message: " + sendMessage + " with text: " + text);
1:d29ca2a:         }
1:d29ca2a:         producer.send(producerDestination, sendMessage);
1:d29ca2a: 
1:f812e34:         // receive but don't acknowledge
1:d29ca2a:         Message unackMessage = consumer.receive(1000);
1:d29ca2a:         assertNotNull(unackMessage);
1:d29ca2a:         String unackId = unackMessage.getJMSMessageID();
1:f812e34:         assertEquals(((TextMessage)unackMessage).getText(), text);
1:d29ca2a:         assertFalse(unackMessage.getJMSRedelivered());
1:f812e34:         assertEquals(unackMessage.getIntProperty("JMSXDeliveryCount"), 1);
1:d29ca2a:         consumeSession.close();
1:d29ca2a:         consumer.close();
1:d29ca2a: 
1:f812e34:         // receive then acknowledge
1:d29ca2a:         consumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a:         consumer = createConsumer();
1:d29ca2a:         Message ackMessage = consumer.receive(1000);
1:d29ca2a:         assertNotNull(ackMessage);
1:d29ca2a:         ackMessage.acknowledge();
1:d29ca2a:         String ackId = ackMessage.getJMSMessageID();
1:f812e34:         assertEquals(((TextMessage)ackMessage).getText(), text);
1:d29ca2a:         assertTrue(ackMessage.getJMSRedelivered());
1:f812e34:         assertEquals(ackMessage.getIntProperty("JMSXDeliveryCount"), 2);
1:d29ca2a:         assertEquals(unackId, ackId);
1:d29ca2a:         consumeSession.close();
1:d29ca2a:         consumer.close();
1:d29ca2a: 
1:d29ca2a:         consumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a:         consumer = createConsumer();
1:a2ae3a9:         assertNull(consumer.receive(1000));
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final Log LOG = LogFactory.getLog(JMSDurableTopicRedeliverTest.class);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(JMSDurableTopicRedeliverTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("About to send a message: " + sendMessage + " with text: " + text);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(JMSDurableTopicRedeliverTest.class);
1: 
1: 
1:      * 
1:         String text = "TEST: " + System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
1:         // receive but don't acknowledge
1:         assertEquals(((TextMessage)unackMessage).getText(), text);
1:         assertEquals(unackMessage.getIntProperty("JMSXDeliveryCount"), 1);
1:         // receive then acknowledge
1:         assertEquals(((TextMessage)ackMessage).getText(), text);
1:         assertEquals(ackMessage.getIntProperty("JMSXDeliveryCount"), 2);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a2ae3a9
/////////////////////////////////////////////////////////////////////////
1:     
0:         String text = "TEST: "+System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
1:         assertNull(consumer.receive(1000));
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Message;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
1: public class JMSDurableTopicRedeliverTest extends JmsTopicRedeliverTest {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JMSDurableTopicRedeliverTest.class);
1:     
1:     protected void setUp() throws Exception {
1:         durable = true;
1:         super.setUp();
1:     }
1: 
1: 
1:     /**
1:      * Sends and consumes the messages.
1:      *
1:      * @throws Exception
1:      */
1:     public void testRedeliverNewSession() throws Exception {
0:         String text = "TEST";
1:         Message sendMessage = session.createTextMessage(text);
1: 
1:         if (verbose) {
0:             log.info("About to send a message: " + sendMessage + " with text: " + text);
1:         }
1:         producer.send(producerDestination, sendMessage);
1: 
0:         //receive but don't acknowledge
1:         Message unackMessage = consumer.receive(1000);
1:         assertNotNull(unackMessage);
1:         String unackId = unackMessage.getJMSMessageID();
0:         assertEquals(((TextMessage) unackMessage).getText(), text);
1:         assertFalse(unackMessage.getJMSRedelivered());
0:         assertEquals(unackMessage.getIntProperty("JMSXDeliveryCount"),1);
1:         consumeSession.close();
1:         consumer.close();
1: 
0:         //receive then acknowledge
1:         consumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         consumer = createConsumer();
1:         Message ackMessage = consumer.receive(1000);
1:         assertNotNull(ackMessage);
1:         ackMessage.acknowledge();
1:         String ackId = ackMessage.getJMSMessageID();
0:         assertEquals(((TextMessage) ackMessage).getText(), text);
1:         assertTrue(ackMessage.getJMSRedelivered());
0:         assertEquals(ackMessage.getIntProperty("JMSXDeliveryCount"),2);
1:         assertEquals(unackId, ackId);
1:         consumeSession.close();
1:         consumer.close();
1: 
1:         consumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         consumer = createConsumer();
0:         assertNull(consumer.receiveNoWait());
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JMSDurableTopicRedeliverTest.class);
============================================================================