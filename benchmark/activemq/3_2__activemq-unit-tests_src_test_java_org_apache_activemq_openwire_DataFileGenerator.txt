1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.openwire;
13:d29ca2a: 
1:d29ca2a: import java.io.ByteArrayInputStream;
1:d29ca2a: import java.io.ByteArrayOutputStream;
1:d29ca2a: import java.io.DataOutputStream;
1:d29ca2a: import java.io.File;
1:d29ca2a: import java.io.FileInputStream;
1:d29ca2a: import java.io.FileOutputStream;
1:6583ef1: import java.io.IOException;
1:d29ca2a: import java.io.InputStream;
1:d29ca2a: import java.util.ArrayList;
1:230a86c: 
1:c7d559f: public abstract class DataFileGenerator extends org.junit.Assert {
1:230a86c: 
1:fc00993:     static final File MODULE_BASE_DIR;
1:fc00993:     static final File CONTROL_DIR;
1:fc00993:     static final File CLASS_FILE_DIR;
1:d29ca2a: 
1:d29ca2a:     static {
1:fc00993:         MODULE_BASE_DIR = new File(System.getProperty("basedir", "."));
1:fc00993:         CONTROL_DIR = new File(MODULE_BASE_DIR, "src/test/resources/openwire-control");
1:fc00993:         CLASS_FILE_DIR = new File(MODULE_BASE_DIR, "src/test/java/org/apache/activemq/openwire");
2:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void main(String[] args) throws Exception {
1:d29ca2a:         generateControlFiles();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param srcdir
1:230a86c:      * @return
1:d29ca2a:      * @throws ClassNotFoundException
1:d29ca2a:      * @throws InstantiationException
1:d29ca2a:      * @throws IllegalAccessException
1:d29ca2a:      */
1:c7d559f:     public static ArrayList<DataFileGenerator> getAllDataFileGenerators() throws Exception {
1:230a86c:         // System.out.println("Looking for generators in : "+classFileDir);
1:c7d559f:         ArrayList<DataFileGenerator> l = new ArrayList<DataFileGenerator>();
1:fc00993:         File[] files = CLASS_FILE_DIR.listFiles();
1:230a86c:         for (int i = 0; files != null && i < files.length; i++) {
1:d29ca2a:             File file = files[i];
1:230a86c:             if (file.getName().endsWith("Data.java")) {
1:d29ca2a:                 String cn = file.getName();
1:d29ca2a:                 cn = cn.substring(0, cn.length() - ".java".length());
1:c7d559f:                 Class<?> clazz = DataFileGenerator.class.getClassLoader().loadClass("org.apache.activemq.openwire." + cn);
1:230a86c:                 l.add((DataFileGenerator)clazz.newInstance());
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return l;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     private static void generateControlFiles() throws Exception {
1:c7d559f:         ArrayList<DataFileGenerator> generators = getAllDataFileGenerators();
1:c7d559f:         for (DataFileGenerator element : generators) {
2:d29ca2a:             try {
1:230a86c:                 // System.out.println("Processing: "+object.getClass());
1:c7d559f:                 element.generateControlFile();
2:d29ca2a:             } catch (Exception e) {
1:230a86c:                 // System.err.println("Error while processing:
1:230a86c:                 // "+object.getClass() + ". Reason: " + e);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void generateControlFile() throws Exception {
1:fc00993:         CONTROL_DIR.mkdirs();
1:fc00993:         File dataFile = new File(CONTROL_DIR, getClass().getName() + ".bin");
1:230a86c: 
1:d29ca2a:         OpenWireFormat wf = new OpenWireFormat();
1:d29ca2a:         wf.setCacheEnabled(false);
1:d29ca2a:         wf.setStackTraceEnabled(false);
1:d29ca2a:         wf.setVersion(1);
1:230a86c: 
1:d29ca2a:         FileOutputStream os = new FileOutputStream(dataFile);
1:d29ca2a:         DataOutputStream ds = new DataOutputStream(os);
1:d29ca2a:         wf.marshal(createObject(), ds);
1:d29ca2a:         ds.close();
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public InputStream generateInputStream() throws Exception {
1:d29ca2a:         OpenWireFormat wf = new OpenWireFormat();
1:d29ca2a:         wf.setCacheEnabled(false);
1:d29ca2a:         wf.setStackTraceEnabled(false);
1:d29ca2a:         wf.setVersion(1);
1:d29ca2a: 
1:d29ca2a:         ByteArrayOutputStream os = new ByteArrayOutputStream();
1:d29ca2a:         DataOutputStream ds = new DataOutputStream(os);
1:d29ca2a:         wf.marshal(createObject(), ds);
1:d29ca2a:         ds.close();
1:230a86c: 
1:d29ca2a:         return new ByteArrayInputStream(os.toByteArray());
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void assertAllControlFileAreEqual() throws Exception {
1:c7d559f:         ArrayList<DataFileGenerator> generators = getAllDataFileGenerators();
1:c7d559f:         for (DataFileGenerator element : generators) {
1:230a86c:             // System.out.println("Processing: "+object.getClass());
1:c7d559f:             element.assertControlFileIsEqual();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void assertControlFileIsEqual() throws Exception {
1:fc00993:         File dataFile = new File(CONTROL_DIR, getClass().getName() + ".bin");
1:d29ca2a:         FileInputStream is1 = new FileInputStream(dataFile);
1:230a86c:         int pos = 0;
1:d29ca2a:         try {
1:d29ca2a:             InputStream is2 = generateInputStream();
1:d29ca2a:             int a = is1.read();
1:d29ca2a:             int b = is2.read();
1:d29ca2a:             pos++;
1:230a86c:             assertEquals("Data does not match control file: " + dataFile + " at byte position " + pos, a, b);
1:230a86c:             while (a >= 0 && b >= 0) {
1:d29ca2a:                 a = is1.read();
1:d29ca2a:                 b = is2.read();
1:d29ca2a:                 pos++;
1:230a86c:                 assertEquals(a, b);
1:d29ca2a:             }
1:d29ca2a:             is2.close();
1:d29ca2a:         } finally {
1:d29ca2a:             is1.close();
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:fc00993:     protected abstract Object createObject() throws IOException;
1:d29ca2a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: public abstract class DataFileGenerator extends org.junit.Assert {
/////////////////////////////////////////////////////////////////////////
1:     public static ArrayList<DataFileGenerator> getAllDataFileGenerators() throws Exception {
1:         ArrayList<DataFileGenerator> l = new ArrayList<DataFileGenerator>();
1:                 Class<?> clazz = DataFileGenerator.class.getClassLoader().loadClass("org.apache.activemq.openwire." + cn);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<DataFileGenerator> generators = getAllDataFileGenerators();
1:         for (DataFileGenerator element : generators) {
1:                 element.generateControlFile();
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<DataFileGenerator> generators = getAllDataFileGenerators();
1:         for (DataFileGenerator element : generators) {
1:             element.assertControlFileIsEqual();
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: public abstract class DataFileGenerator extends Assert {
1:     static final File MODULE_BASE_DIR;
1:     static final File CONTROL_DIR;
1:     static final File CLASS_FILE_DIR;
1:         MODULE_BASE_DIR = new File(System.getProperty("basedir", "."));
1:         CONTROL_DIR = new File(MODULE_BASE_DIR, "src/test/resources/openwire-control");
1:         CLASS_FILE_DIR = new File(MODULE_BASE_DIR, "src/test/java/org/apache/activemq/openwire");
/////////////////////////////////////////////////////////////////////////
1:         File[] files = CLASS_FILE_DIR.listFiles();
/////////////////////////////////////////////////////////////////////////
1:         CONTROL_DIR.mkdirs();
1:         File dataFile = new File(CONTROL_DIR, getClass().getName() + ".bin");
/////////////////////////////////////////////////////////////////////////
1:         File dataFile = new File(CONTROL_DIR, getClass().getName() + ".bin");
/////////////////////////////////////////////////////////////////////////
1:     protected abstract Object createObject() throws IOException;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
0:     static final File classFileDir;
1: 
1: 
1:      * @return
0:     public static ArrayList getAllDataFileGenerators() throws Exception {
1:         // System.out.println("Looking for generators in : "+classFileDir);
1:         for (int i = 0; files != null && i < files.length; i++) {
1:             if (file.getName().endsWith("Data.java")) {
0:                 Class clazz = DataFileGenerator.class.getClassLoader().loadClass("org.apache.activemq.openwire." + cn);
1:                 l.add((DataFileGenerator)clazz.newInstance());
1: 
0:             DataFileGenerator object = (DataFileGenerator)iter.next();
1:                 // System.out.println("Processing: "+object.getClass());
1:                 // System.err.println("Error while processing:
1:                 // "+object.getClass() + ". Reason: " + e);
0:         File dataFile = new File(controlDir, getClass().getName() + ".bin");
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
0:             DataFileGenerator object = (DataFileGenerator)iter.next();
1:             // System.out.println("Processing: "+object.getClass());
0:         File dataFile = new File(controlDir, getClass().getName() + ".bin");
1:         int pos = 0;
1:             assertEquals("Data does not match control file: " + dataFile + " at byte position " + pos, a, b);
1:             while (a >= 0 && b >= 0) {
1:                 assertEquals(a, b);
1: 
commit:b91928d
/////////////////////////////////////////////////////////////////////////
0: //        System.out.println("Looking for generators in : "+classFileDir);
/////////////////////////////////////////////////////////////////////////
0: //                System.out.println("Processing: "+object.getClass());
0: //                System.err.println("Error while processing: "+object.getClass() + ". Reason: " + e);
/////////////////////////////////////////////////////////////////////////
0: //            System.out.println("Processing: "+object.getClass());
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:3a4f3d5
/////////////////////////////////////////////////////////////////////////
0:         moduleBaseDir = new File(System.getProperty("basedir", "."));
/////////////////////////////////////////////////////////////////////////
0:         System.out.println("Looking for generators in : "+classFileDir);
/////////////////////////////////////////////////////////////////////////
0:                 System.out.println("Processing: "+object.getClass());
0:                 System.err.println("Error while processing: "+object.getClass() + ". Reason: " + e);
/////////////////////////////////////////////////////////////////////////
0:             System.out.println("Processing: "+object.getClass());
commit:6583ef1
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:     abstract protected Object createObject() throws IOException;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.InputStream;
0: import java.net.URI;
0: import java.net.URL;
1: import java.util.ArrayList;
0: import java.util.Iterator;
1: 
0: import org.apache.activemq.openwire.OpenWireFormat;
1: 
0: import junit.framework.Assert;
1: 
0: abstract public class DataFileGenerator extends Assert {
1: 
0:     static final File moduleBaseDir;
0:     static final File controlDir;
0:     static final File classFileDir; 
1:     
1:     static {
0:         File basedir=null;
1:         try {
0:             URL resource = DataFileGenerator.class.getResource("DataFileGenerator.class");
0:             URI baseURI = new URI(resource.toString()).resolve("../../../../..");
0:             basedir = new File(baseURI).getCanonicalFile();
1:         } catch (Exception e) {
0:             throw new RuntimeException(e);
1:         }
0:         moduleBaseDir = basedir;
0:         controlDir = new File(moduleBaseDir, "src/test/resources/openwire-control");
0:         classFileDir = new File(moduleBaseDir, "src/test/java/org/apache/activemq/openwire");
1:     }
1:     
1:     public static void main(String[] args) throws Exception {
1:         generateControlFiles();
1:     }
1: 
1:     /**
1:      * @param srcdir
0:      * @return 
1:      * @throws ClassNotFoundException
1:      * @throws InstantiationException
1:      * @throws IllegalAccessException
1:      */
0:     public static ArrayList getAllDataFileGenerators() throws Exception{
0:         System.out.println("Looking for generators in : "+classFileDir);
0:         ArrayList l = new ArrayList();
0:         File[] files = classFileDir.listFiles();
0:         for (int i = 0; files!=null && i < files.length; i++) {
1:             File file = files[i];
0:             if( file.getName().endsWith("Data.java") ) {
1:                 String cn = file.getName();
1:                 cn = cn.substring(0, cn.length() - ".java".length());
0:                 Class clazz = DataFileGenerator.class.getClassLoader().loadClass("org.apache.activemq.openwire."+cn);
0:                 l.add((DataFileGenerator) clazz.newInstance());
1:             }
1:         }
1:         return l;
1:     }
1:         
1:     private static void generateControlFiles() throws Exception {
0:         ArrayList generators = getAllDataFileGenerators();
0:         for (Iterator iter = generators.iterator(); iter.hasNext();) {
0:             DataFileGenerator object = (DataFileGenerator) iter.next();
1:             try {
0:                 System.out.println("Processing: "+object.getClass());
0:                 object.generateControlFile();
1:             } catch (Exception e) {
0:                 System.out.println("Error while processing: "+object.getClass());
0:                 e.printStackTrace(System.out);
1:             }
1:         }
1:     }
1: 
1:     public void generateControlFile() throws Exception {
0:         controlDir.mkdirs();
0:         File dataFile = new File(controlDir, getClass().getName()+".bin");
1:         
1:         OpenWireFormat wf = new OpenWireFormat();
1:         wf.setCacheEnabled(false);
1:         wf.setStackTraceEnabled(false);
1:         wf.setVersion(1);
1:      
1:         FileOutputStream os = new FileOutputStream(dataFile);
1:         DataOutputStream ds = new DataOutputStream(os);
1:         wf.marshal(createObject(), ds);
1:         ds.close();
1:     }
1: 
1:     public InputStream generateInputStream() throws Exception {
1:         OpenWireFormat wf = new OpenWireFormat();
1:         wf.setCacheEnabled(false);
1:         wf.setStackTraceEnabled(false);
1:         wf.setVersion(1);
1:      
1:         ByteArrayOutputStream os = new ByteArrayOutputStream();
1:         DataOutputStream ds = new DataOutputStream(os);
1:         wf.marshal(createObject(), ds);
1:         ds.close();
1:         
1:         return new ByteArrayInputStream(os.toByteArray());
1:     }
1:     
1:     public static void assertAllControlFileAreEqual() throws Exception {
0:         ArrayList generators = getAllDataFileGenerators();
0:         for (Iterator iter = generators.iterator(); iter.hasNext();) {
0:             DataFileGenerator object = (DataFileGenerator) iter.next();
0:             System.out.println("Processing: "+object.getClass());
0:             object.assertControlFileIsEqual();
1:         }
1:     }
1: 
1:     public void assertControlFileIsEqual() throws Exception {
0:         File dataFile = new File(controlDir, getClass().getName()+".bin");
1:         FileInputStream is1 = new FileInputStream(dataFile);
0:         int pos=0;
1:         try {
1:             InputStream is2 = generateInputStream();
1:             int a = is1.read();
1:             int b = is2.read();
1:             pos++;
0:             assertEquals("Data does not match control file: "+dataFile+" at byte position "+pos,a,b);
0:             while(a >= 0 && b>= 0) {
1:                 a = is1.read();
1:                 b = is2.read();
1:                 pos++;
0:                 assertEquals(a,b);
1:             }
1:             is2.close();
1:         } finally {
1:             is1.close();
1:         }
1:     }
1:     
0:     abstract protected Object createObject();
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:9f9fe90
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log log = LogFactory.getLog(DataFileGenerator.class);
0:     
/////////////////////////////////////////////////////////////////////////
0:         log.info("Looking for generators in : "+classFileDir);
/////////////////////////////////////////////////////////////////////////
0:                 log.info("Processing: "+object.getClass());
0:                 log.error("Error while processing: "+object.getClass() + ". Reason: " + e, e);
/////////////////////////////////////////////////////////////////////////
0:             log.info("Processing: "+object.getClass());
============================================================================