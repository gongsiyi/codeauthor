7:f82530d: /**
1:f82530d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f82530d:  * contributor license agreements.  See the NOTICE file distributed with
1:f82530d:  * this work for additional information regarding copyright ownership.
1:f82530d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f82530d:  * (the "License"); you may not use this file except in compliance with
1:f82530d:  * the License.  You may obtain a copy of the License at
1:6b203be:  *
1:f82530d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b895efc:  *
1:f82530d:  * Unless required by applicable law or agreed to in writing, software
1:f82530d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f82530d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f82530d:  * See the License for the specific language governing permissions and
1:f82530d:  * limitations under the License.
7:f82530d:  */
1:f82530d: package org.apache.activemq.store.kahadb;
1:7da61d9: 
1:144be7c: import static org.apache.activemq.broker.jmx.BrokerMBeanSupport.createPersistenceAdapterName;
1:144be7c: 
1:144be7c: import java.io.File;
1:144be7c: import java.io.IOException;
1:144be7c: import java.util.Set;
1:144be7c: import java.util.concurrent.Callable;
1:144be7c: 
1:144be7c: import javax.management.ObjectName;
1:144be7c: 
1:b1a9130: import org.apache.activemq.broker.BrokerService;
1:f82530d: import org.apache.activemq.broker.ConnectionContext;
1:170b86a: import org.apache.activemq.broker.LockableServiceSupport;
1:144be7c: import org.apache.activemq.broker.Locker;
1:3bffaf7: import org.apache.activemq.broker.jmx.AnnotatedMBean;
1:3bffaf7: import org.apache.activemq.broker.jmx.PersistenceAdapterView;
1:74846bb: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1:7da61d9: import org.apache.activemq.command.ActiveMQDestination;
1:7da61d9: import org.apache.activemq.command.ActiveMQQueue;
1:7da61d9: import org.apache.activemq.command.ActiveMQTopic;
1:1595378: import org.apache.activemq.command.LocalTransactionId;
1:a6a6a70: import org.apache.activemq.command.ProducerId;
1:1595378: import org.apache.activemq.command.TransactionId;
1:1595378: import org.apache.activemq.command.XATransactionId;
1:1595378: import org.apache.activemq.protobuf.Buffer;
1:74846bb: import org.apache.activemq.store.JournaledStore;
1:74846bb: import org.apache.activemq.store.MessageStore;
1:18571ce: import org.apache.activemq.store.NoLocalSubscriptionAware;
1:74846bb: import org.apache.activemq.store.PersistenceAdapter;
1:74846bb: import org.apache.activemq.store.SharedFileLocker;
1:74846bb: import org.apache.activemq.store.TopicMessageStore;
1:74846bb: import org.apache.activemq.store.TransactionIdTransformer;
1:74846bb: import org.apache.activemq.store.TransactionIdTransformerAware;
1:74846bb: import org.apache.activemq.store.TransactionStore;
1:1595378: import org.apache.activemq.store.kahadb.data.KahaLocalTransactionId;
1:1595378: import org.apache.activemq.store.kahadb.data.KahaTransactionInfo;
1:1595378: import org.apache.activemq.store.kahadb.data.KahaXATransactionId;
1:0d824a8: import org.apache.activemq.store.kahadb.disk.journal.Journal.JournalDiskSyncStrategy;
1:f82530d: import org.apache.activemq.usage.SystemUsage;
1:170b86a: import org.apache.activemq.util.ServiceStopper;
1:3bffaf7: 
1:f82530d: /**
1:a1e961d:  * An implementation of {@link PersistenceAdapter} designed for use with
1:a1e961d:  * KahaDB - Embedded Lightweight Non-Relational Database
1:6b203be:  *
1:b895efc:  * @org.apache.xbean.XBean element="kahaDB"
1:6b203be:  *
1:f82530d:  */
1:18571ce: public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter,
1:18571ce:     JournaledStore, TransactionIdTransformerAware, NoLocalSubscriptionAware {
1:18571ce: 
1:f8cb847:     private final KahaDBStore letter = new KahaDBStore();
1:3bffaf7: 
1:f82530d:     /**
1:1595378:      * @param context
1:1595378:      * @throws IOException
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#beginTransaction(org.apache.activemq.broker.ConnectionContext)
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public void beginTransaction(ConnectionContext context) throws IOException {
1:f82530d:         this.letter.beginTransaction(context);
16:f82530d:     }
1:1595378: 
1:2030097:     /**
1:1595378:      * @param sync
1:1595378:      * @throws IOException
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#checkpoint(boolean)
1:2030097:      */
1:21fe8ca:     @Override
1:f82530d:     public void checkpoint(boolean sync) throws IOException {
1:f82530d:         this.letter.checkpoint(sync);
1:6ce702d:     }
1:1595378: 
1:47181b7:     /**
1:1595378:      * @param context
1:1595378:      * @throws IOException
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#commitTransaction(org.apache.activemq.broker.ConnectionContext)
1:47181b7:      */
1:144be7c:     @Override
1:f82530d:     public void commitTransaction(ConnectionContext context) throws IOException {
1:f82530d:         this.letter.commitTransaction(context);
1:6ce702d:     }
1:1595378: 
1:7a5abeb:     /**
1:1595378:      * @param destination
1:f82530d:      * @return MessageStore
1:1595378:      * @throws IOException
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)
1:7a5abeb:      */
1:144be7c:     @Override
1:f82530d:     public MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException {
1:f82530d:         return this.letter.createQueueMessageStore(destination);
1:6ce702d:     }
1:a6a6a70: 
1:ea84378:     /**
1:1595378:      * @param destination
1:f82530d:      * @return TopicMessageStore
1:1595378:      * @throws IOException
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)
1:ea84378:      */
1:144be7c:     @Override
1:f82530d:     public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException {
1:f82530d:         return this.letter.createTopicMessageStore(destination);
1:7da61d9:     }
1:a6a6a70: 
1:f8cb847:     /**
1:1595378:      * @return TransactionStore
1:1595378:      * @throws IOException
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#createTransactionStore()
1:f8cb847:      */
1:144be7c:     @Override
1:f82530d:     public TransactionStore createTransactionStore() throws IOException {
1:f82530d:         return this.letter.createTransactionStore();
1:7da61d9:     }
1:6ce702d: 
1:f8cb847:     /**
1:1595378:      * @throws IOException
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#deleteAllMessages()
1:f8cb847:      */
1:144be7c:     @Override
1:f82530d:     public void deleteAllMessages() throws IOException {
1:f82530d:         this.letter.deleteAllMessages();
1:8e61f51:     }
1:6ce702d: 
1:f82530d:     /**
1:f82530d:      * @return destinations
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#getDestinations()
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public Set<ActiveMQDestination> getDestinations() {
1:f82530d:         return this.letter.getDestinations();
1:8e61f51:     }
1:a1e961d: 
1:f82530d:     /**
1:f82530d:      * @return lastMessageBrokerSequenceId
1:1595378:      * @throws IOException
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#getLastMessageBrokerSequenceId()
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public long getLastMessageBrokerSequenceId() throws IOException {
1:f82530d:         return this.letter.getLastMessageBrokerSequenceId();
1:ea84378:     }
1:5f7fc14: 
1:144be7c:     @Override
1:a6a6a70:     public long getLastProducerSequenceId(ProducerId id) throws IOException {
1:a6a6a70:         return this.letter.getLastProducerSequenceId(id);
1:a6a6a70:     }
1:a6a6a70: 
1:b07821a:     @Override
1:b07821a:     public void allowIOResumption() {
1:b07821a:         this.letter.allowIOResumption();
1:b07821a:     }
1:b07821a: 
1:f82530d:     /**
1:1595378:      * @param destination
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public void removeQueueMessageStore(ActiveMQQueue destination) {
1:f82530d:         this.letter.removeQueueMessageStore(destination);
1:ea84378:     }
1:7da61d9: 
1:f82530d:     /**
1:1595378:      * @param destination
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#removeTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public void removeTopicMessageStore(ActiveMQTopic destination) {
1:f82530d:         this.letter.removeTopicMessageStore(destination);
1:ea84378:     }
1:8e61f51: 
1:f82530d:     /**
1:1595378:      * @param context
1:1595378:      * @throws IOException
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#rollbackTransaction(org.apache.activemq.broker.ConnectionContext)
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public void rollbackTransaction(ConnectionContext context) throws IOException {
1:f82530d:         this.letter.rollbackTransaction(context);
1:ea84378:     }
1:8e61f51: 
1:f82530d:     /**
1:1595378:      * @param brokerName
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#setBrokerName(java.lang.String)
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public void setBrokerName(String brokerName) {
1:f82530d:         this.letter.setBrokerName(brokerName);
1:f8cb847:     }
1:8e61f51: 
1:f82530d:     /**
1:1595378:      * @param usageManager
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#setUsageManager(org.apache.activemq.usage.SystemUsage)
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public void setUsageManager(SystemUsage usageManager) {
1:f82530d:         this.letter.setUsageManager(usageManager);
1:f8cb847:     }
1:8e61f51: 
1:f82530d:     /**
1:f82530d:      * @return the size of the store
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#size()
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public long size() {
1:0ae90c0:         return this.letter.isStarted() ? this.letter.size() : 0l;
1:f82530d:     }
1:8e61f51: 
1:f82530d:     /**
1:1595378:      * @throws Exception
1:f82530d:      * @see org.apache.activemq.Service#start()
1:f82530d:      */
1:144be7c:     @Override
1:170b86a:     public void doStart() throws Exception {
1:f82530d:         this.letter.start();
1:3bffaf7: 
1:3bffaf7:         if (brokerService != null && brokerService.isUseJmx()) {
1:3bffaf7:             PersistenceAdapterView view = new PersistenceAdapterView(this);
1:3bffaf7:             view.setInflightTransactionViewCallable(new Callable<String>() {
1:144be7c:                 @Override
1:3bffaf7:                 public String call() throws Exception {
1:3bffaf7:                     return letter.getTransactions();
1:3bffaf7:                 }
1:3bffaf7:             });
1:3bffaf7:             view.setDataViewCallable(new Callable<String>() {
1:3bffaf7:                 @Override
1:3bffaf7:                 public String call() throws Exception {
1:3bffaf7:                     return letter.getJournal().getFileMap().keySet().toString();
1:3bffaf7:                 }
1:3bffaf7:             });
1:3bffaf7:             AnnotatedMBean.registerMBean(brokerService.getManagementContext(), view,
1:3bffaf7:                     createPersistenceAdapterName(brokerService.getBrokerObjectName().toString(), toString()));
1:3bffaf7:         }
1:f82530d:     }
1:8e61f51: 
1:f82530d:     /**
1:1595378:      * @throws Exception
1:f82530d:      * @see org.apache.activemq.Service#stop()
1:f82530d:      */
1:144be7c:     @Override
1:170b86a:     public void doStop(ServiceStopper stopper) throws Exception {
1:170b86a:         this.letter.stop();
1:144be7c: 
1:144be7c:         if (brokerService != null && brokerService.isUseJmx()) {
1:144be7c:             ObjectName brokerObjectName = brokerService.getBrokerObjectName();
1:144be7c:             brokerService.getManagementContext().unregisterMBean(createPersistenceAdapterName(brokerObjectName.toString(), toString()));
1:144be7c:         }
1:6ce702d:     }
1:8e61f51: 
1:f82530d:     /**
1:f82530d:      * Get the journalMaxFileLength
1:6b203be:      *
1:f82530d:      * @return the journalMaxFileLength
1:f82530d:      */
1:144be7c:     @Override
1:356c39d:     public int getJournalMaxFileLength() {
1:f82530d:         return this.letter.getJournalMaxFileLength();
1:f82530d:     }
1:8e61f51: 
1:f82530d:     /**
1:7a5abeb:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can
1:7a5abeb:      * be used
1:6b203be:      *
1:1595378:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
1:f82530d:      */
1:356c39d:     public void setJournalMaxFileLength(int journalMaxFileLength) {
1:356c39d:         this.letter.setJournalMaxFileLength(journalMaxFileLength);
1:f82530d:     }
1:47181b7: 
1:f82530d:     /**
1:a6a6a70:      * Set the max number of producers (LRU cache) to track for duplicate sends
1:a6a6a70:      */
1:a6a6a70:     public void setMaxFailoverProducersToTrack(int maxFailoverProducersToTrack) {
1:a6a6a70:         this.letter.setMaxFailoverProducersToTrack(maxFailoverProducersToTrack);
1:a6a6a70:     }
1:6b203be: 
1:a6a6a70:     public int getMaxFailoverProducersToTrack() {
1:a6a6a70:         return this.letter.getMaxFailoverProducersToTrack();
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     /**
1:a6a6a70:      * set the audit window depth for duplicate suppression (should exceed the max transaction
1:a6a6a70:      * batch)
1:a6a6a70:      */
1:a6a6a70:     public void setFailoverProducersAuditDepth(int failoverProducersAuditDepth) {
1:a6a6a70:         this.letter.setFailoverProducersAuditDepth(failoverProducersAuditDepth);
1:a6a6a70:     }
1:6b203be: 
1:a6a6a70:     public int getFailoverProducersAuditDepth() {
1:221da8b:         return this.letter.getFailoverProducersAuditDepth();
1:a6a6a70:     }
1:6b203be: 
1:a6a6a70:     /**
1:f82530d:      * Get the checkpointInterval
1:6b203be:      *
1:f82530d:      * @return the checkpointInterval
1:f82530d:      */
1:f82530d:     public long getCheckpointInterval() {
1:f82530d:         return this.letter.getCheckpointInterval();
1:f82530d:     }
1:a6a6a70: 
1:f82530d:     /**
1:f82530d:      * Set the checkpointInterval
1:6b203be:      *
1:1595378:      * @param checkpointInterval
1:1595378:      *            the checkpointInterval to set
1:f82530d:      */
1:f82530d:     public void setCheckpointInterval(long checkpointInterval) {
1:f82530d:         this.letter.setCheckpointInterval(checkpointInterval);
1:f82530d:     }
1:a6a6a70: 
1:f82530d:     /**
1:f82530d:      * Get the cleanupInterval
1:6b203be:      *
1:f82530d:      * @return the cleanupInterval
1:f82530d:      */
1:f82530d:     public long getCleanupInterval() {
1:f82530d:         return this.letter.getCleanupInterval();
1:f82530d:     }
1:47181b7: 
1:f82530d:     /**
1:f82530d:      * Set the cleanupInterval
1:6b203be:      *
1:1595378:      * @param cleanupInterval
1:1595378:      *            the cleanupInterval to set
1:f82530d:      */
1:f82530d:     public void setCleanupInterval(long cleanupInterval) {
1:f82530d:         this.letter.setCleanupInterval(cleanupInterval);
1:f82530d:     }
1:7a5abeb: 
1:f82530d:     /**
1:f82530d:      * Get the indexWriteBatchSize
1:6b203be:      *
1:f82530d:      * @return the indexWriteBatchSize
1:f82530d:      */
1:f82530d:     public int getIndexWriteBatchSize() {
1:f82530d:         return this.letter.getIndexWriteBatchSize();
1:f82530d:     }
1:7a5abeb: 
1:f82530d:     /**
1:f82530d:      * Set the indexWriteBatchSize
1:356c39d:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
1:1595378:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
1:1595378:      * @param indexWriteBatchSize
1:1595378:      *            the indexWriteBatchSize to set
1:f82530d:      */
1:f82530d:     public void setIndexWriteBatchSize(int indexWriteBatchSize) {
1:f82530d:         this.letter.setIndexWriteBatchSize(indexWriteBatchSize);
1:f82530d:     }
1:7a5abeb: 
1:f82530d:     /**
1:356c39d:      * Get the journalMaxWriteBatchSize
1:6b203be:      *
1:356c39d:      * @return the journalMaxWriteBatchSize
1:356c39d:      */
1:356c39d:     public int getJournalMaxWriteBatchSize() {
1:356c39d:         return this.letter.getJournalMaxWriteBatchSize();
1:356c39d:     }
1:356c39d: 
1:356c39d:     /**
1:356c39d:      * Set the journalMaxWriteBatchSize
1:1595378:      *  * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
1:1595378:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
1:1595378:      * @param journalMaxWriteBatchSize
1:1595378:      *            the journalMaxWriteBatchSize to set
1:356c39d:      */
1:356c39d:     public void setJournalMaxWriteBatchSize(int journalMaxWriteBatchSize) {
1:356c39d:         this.letter.setJournalMaxWriteBatchSize(journalMaxWriteBatchSize);
1:356c39d:     }
1:356c39d: 
1:356c39d:     /**
1:f82530d:      * Get the enableIndexWriteAsync
1:6b203be:      *
1:f82530d:      * @return the enableIndexWriteAsync
1:f82530d:      */
1:f82530d:     public boolean isEnableIndexWriteAsync() {
1:f82530d:         return this.letter.isEnableIndexWriteAsync();
1:f82530d:     }
1:7a5abeb: 
1:f82530d:     /**
1:f82530d:      * Set the enableIndexWriteAsync
1:6b203be:      *
1:1595378:      * @param enableIndexWriteAsync
1:1595378:      *            the enableIndexWriteAsync to set
1:f82530d:      */
1:f82530d:     public void setEnableIndexWriteAsync(boolean enableIndexWriteAsync) {
1:f82530d:         this.letter.setEnableIndexWriteAsync(enableIndexWriteAsync);
1:f82530d:     }
1:7a5abeb: 
1:f82530d:     /**
1:f82530d:      * Get the directory
1:6b203be:      *
1:f82530d:      * @return the directory
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public File getDirectory() {
1:f82530d:         return this.letter.getDirectory();
1:f82530d:     }
1:7a5abeb: 
1:f82530d:     /**
1:1595378:      * @param dir
1:f82530d:      * @see org.apache.activemq.store.PersistenceAdapter#setDirectory(java.io.File)
1:f82530d:      */
1:144be7c:     @Override
1:f82530d:     public void setDirectory(File dir) {
1:f82530d:         this.letter.setDirectory(dir);
1:f82530d:     }
4:ea84378: 
1:f82530d:     /**
1:582fc08:      * @return the currently configured location of the KahaDB index files.
1:582fc08:      */
1:582fc08:     public File getIndexDirectory() {
1:582fc08:         return this.letter.getIndexDirectory();
1:582fc08:     }
1:582fc08: 
1:582fc08:     /**
1:582fc08:      * Sets the directory where KahaDB index files should be written.
1:582fc08:      *
1:582fc08:      * @param indexDirectory
1:582fc08:      *        the directory where the KahaDB store index files should be written.
1:582fc08:      */
1:582fc08:     public void setIndexDirectory(File indexDirectory) {
1:582fc08:         this.letter.setIndexDirectory(indexDirectory);
1:582fc08:     }
1:582fc08: 
1:582fc08:     /**
1:f82530d:      * Get the enableJournalDiskSyncs
1:51166dc:      * @deprecated use {@link #getJournalDiskSyncStrategy} instead
1:f82530d:      * @return the enableJournalDiskSyncs
1:f82530d:      */
1:f82530d:     public boolean isEnableJournalDiskSyncs() {
1:f82530d:         return this.letter.isEnableJournalDiskSyncs();
1:f82530d:     }
1:ea84378: 
1:f82530d:     /**
1:f82530d:      * Set the enableJournalDiskSyncs
1:6b203be:      *
1:51166dc:      * @deprecated use {@link #setJournalDiskSyncStrategy} instead
1:1595378:      * @param enableJournalDiskSyncs
1:1595378:      *            the enableJournalDiskSyncs to set
1:f82530d:      */
1:f82530d:     public void setEnableJournalDiskSyncs(boolean enableJournalDiskSyncs) {
1:f82530d:         this.letter.setEnableJournalDiskSyncs(enableJournalDiskSyncs);
1:f82530d:     }
1:1d4d0e4: 
1:1d4d0e4:     /**
1:498e218:      * @return
1:498e218:      */
1:498e218:     public String getJournalDiskSyncStrategy() {
1:498e218:         return letter.getJournalDiskSyncStrategy();
1:498e218:     }
1:498e218: 
1:0d824a8:     public JournalDiskSyncStrategy getJournalDiskSyncStrategyEnum() {
1:0d824a8:         return letter.getJournalDiskSyncStrategyEnum();
1:0d824a8:     }
1:0d824a8: 
1:498e218:     /**
1:498e218:      * @param journalDiskSyncStrategy
1:498e218:      */
1:498e218:     public void setJournalDiskSyncStrategy(String journalDiskSyncStrategy) {
1:498e218:         letter.setJournalDiskSyncStrategy(journalDiskSyncStrategy);
1:498e218:     }
1:498e218: 
1:498e218:     /**
1:498e218:      * @return
1:498e218:      */
1:498e218:     public long getJournalDiskSyncInterval() {
1:498e218:         return letter.getJournalDiskSyncInterval();
1:498e218:     }
1:498e218: 
1:498e218:     /**
1:498e218:      * @param journalDiskSyncInterval
1:498e218:      */
1:498e218:     public void setJournalDiskSyncInterval(long journalDiskSyncInterval) {
1:498e218:         letter.setJournalDiskSyncInterval(journalDiskSyncInterval);
1:498e218:     }
1:498e218: 
1:498e218:     /**
1:1d4d0e4:      * Get the indexCacheSize
1:6b203be:      *
1:1d4d0e4:      * @return the indexCacheSize
1:1d4d0e4:      */
1:1d4d0e4:     public int getIndexCacheSize() {
1:1d4d0e4:         return this.letter.getIndexCacheSize();
1:1d4d0e4:     }
1:1d4d0e4: 
1:1d4d0e4:     /**
1:1d4d0e4:      * Set the indexCacheSize
1:ddf2282:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
1:1595378:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
1:1595378:      * @param indexCacheSize
1:1595378:      *            the indexCacheSize to set
1:1d4d0e4:      */
1:1d4d0e4:     public void setIndexCacheSize(int indexCacheSize) {
1:1d4d0e4:         this.letter.setIndexCacheSize(indexCacheSize);
1:1d4d0e4:     }
1:1d4d0e4: 
1:1d4d0e4:     /**
1:1d4d0e4:      * Get the ignoreMissingJournalfiles
1:6b203be:      *
1:1d4d0e4:      * @return the ignoreMissingJournalfiles
1:1d4d0e4:      */
1:1d4d0e4:     public boolean isIgnoreMissingJournalfiles() {
1:1d4d0e4:         return this.letter.isIgnoreMissingJournalfiles();
1:1d4d0e4:     }
1:1d4d0e4: 
1:1d4d0e4:     /**
1:1d4d0e4:      * Set the ignoreMissingJournalfiles
1:6b203be:      *
1:1595378:      * @param ignoreMissingJournalfiles
1:1595378:      *            the ignoreMissingJournalfiles to set
1:1d4d0e4:      */
1:1d4d0e4:     public void setIgnoreMissingJournalfiles(boolean ignoreMissingJournalfiles) {
1:1d4d0e4:         this.letter.setIgnoreMissingJournalfiles(ignoreMissingJournalfiles);
1:1d4d0e4:     }
1:1d4d0e4: 
1:c9500f4:     public boolean isChecksumJournalFiles() {
1:c9500f4:         return letter.isChecksumJournalFiles();
1:c9500f4:     }
1:c9500f4: 
1:c9500f4:     public boolean isCheckForCorruptJournalFiles() {
1:c9500f4:         return letter.isCheckForCorruptJournalFiles();
1:c9500f4:     }
1:c9500f4: 
1:c9500f4:     public void setChecksumJournalFiles(boolean checksumJournalFiles) {
1:c9500f4:         letter.setChecksumJournalFiles(checksumJournalFiles);
1:c9500f4:     }
1:c9500f4: 
1:c9500f4:     public void setCheckForCorruptJournalFiles(boolean checkForCorruptJournalFiles) {
1:c9500f4:         letter.setCheckForCorruptJournalFiles(checkForCorruptJournalFiles);
1:24b9ae2:     }
1:24b9ae2: 
1:28819ae:     public String getPurgeRecoveredXATransactionStrategy() {
1:28819ae:         return letter.getPurgeRecoveredXATransactionStrategy();
1:24b9ae2:     }
1:24b9ae2: 
1:28819ae:     public void setPurgeRecoveredXATransactionStrategy(String purgeRecoveredXATransactionStrategy) {
1:28819ae:         letter.setPurgeRecoveredXATransactionStrategy(purgeRecoveredXATransactionStrategy);
1:c9500f4:     }
1:b1a9130: 
1:3bffaf7:     @Override
1:b1a9130:     public void setBrokerService(BrokerService brokerService) {
1:fb62989:         super.setBrokerService(brokerService);
1:b1a9130:         letter.setBrokerService(brokerService);
1:b1a9130:     }
1:7a5abeb: 
1:45e59e6:     public String getPreallocationScope() {
1:45e59e6:         return letter.getPreallocationScope();
1:45e59e6:     }
1:45e59e6: 
1:45e59e6:     public void setPreallocationScope(String preallocationScope) {
1:45e59e6:         this.letter.setPreallocationScope(preallocationScope);
1:45e59e6:     }
1:45e59e6: 
1:45e59e6:     public String getPreallocationStrategy() {
1:45e59e6:         return letter.getPreallocationStrategy();
1:45e59e6:     }
1:45e59e6: 
1:45e59e6:     public void setPreallocationStrategy(String preallocationStrategy) {
1:45e59e6:         this.letter.setPreallocationStrategy(preallocationStrategy);
1:45e59e6:     }
1:45e59e6: 
1:f8cb847:     public boolean isArchiveDataLogs() {
1:f8cb847:         return letter.isArchiveDataLogs();
1:7a5abeb:     }
1:7a5abeb: 
1:f8cb847:     public void setArchiveDataLogs(boolean archiveDataLogs) {
1:f8cb847:         letter.setArchiveDataLogs(archiveDataLogs);
1:98bb7bf:     }
1:7a5abeb: 
1:98bb7bf:     public File getDirectoryArchive() {
1:98bb7bf:         return letter.getDirectoryArchive();
1:98bb7bf:     }
1:ea84378: 
1:98bb7bf:     public void setDirectoryArchive(File directoryArchive) {
1:98bb7bf:         letter.setDirectoryArchive(directoryArchive);
1:ea84378:     }
1:7a5abeb: 
1:ea84378:     public boolean isConcurrentStoreAndDispatchQueues() {
1:ea84378:         return letter.isConcurrentStoreAndDispatchQueues();
1:ea84378:     }
1:7a5abeb: 
1:ea84378:     public void setConcurrentStoreAndDispatchQueues(boolean concurrentStoreAndDispatch) {
1:ea84378:         letter.setConcurrentStoreAndDispatchQueues(concurrentStoreAndDispatch);
1:7a5abeb:     }
1:7a5abeb: 
1:ea84378:     public boolean isConcurrentStoreAndDispatchTopics() {
1:ea84378:         return letter.isConcurrentStoreAndDispatchTopics();
1:7a5abeb:     }
1:7a5abeb: 
1:ea84378:     public void setConcurrentStoreAndDispatchTopics(boolean concurrentStoreAndDispatch) {
1:ea84378:         letter.setConcurrentStoreAndDispatchTopics(concurrentStoreAndDispatch);
1:7a5abeb:     }
1:7a5abeb: 
1:ea84378:     public int getMaxAsyncJobs() {
1:ea84378:         return letter.getMaxAsyncJobs();
1:7a5abeb:     }
1:7a5abeb:     /**
1:1595378:      * @param maxAsyncJobs
1:1595378:      *            the maxAsyncJobs to set
1:7a5abeb:      */
1:ea84378:     public void setMaxAsyncJobs(int maxAsyncJobs) {
1:7a5abeb:         letter.setMaxAsyncJobs(maxAsyncJobs);
1:47181b7:     }
1:6b203be: 
1:47181b7:     /**
1:170b86a:      * @deprecated use {@link Locker#setLockAcquireSleepInterval(long)} instead
1:b895efc:      *
1:47181b7:      * @param databaseLockedWaitDelay the databaseLockedWaitDelay to set
1:47181b7:      */
1:170b86a:     @Deprecated
1:170b86a:     public void setDatabaseLockedWaitDelay(int databaseLockedWaitDelay) throws IOException {
1:170b86a:        getLocker().setLockAcquireSleepInterval(databaseLockedWaitDelay);
1:47181b7:     }
1:1595378: 
1:f2517c0:     public boolean getForceRecoverIndex() {
1:f2517c0:         return letter.getForceRecoverIndex();
1:f2517c0:     }
1:f2517c0: 
1:f2517c0:     public void setForceRecoverIndex(boolean forceRecoverIndex) {
1:f2517c0:         letter.setForceRecoverIndex(forceRecoverIndex);
1:2030097:     }
1:2030097: 
1:5f7fc14:     public boolean isArchiveCorruptedIndex() {
1:5f7fc14:         return letter.isArchiveCorruptedIndex();
1:2030097:     }
1:2030097: 
1:5f7fc14:     public void setArchiveCorruptedIndex(boolean archiveCorruptedIndex) {
1:5f7fc14:         letter.setArchiveCorruptedIndex(archiveCorruptedIndex);
1:f2517c0:     }
1:f2517c0: 
1:7da61d9:     public float getIndexLFUEvictionFactor() {
1:7da61d9:         return letter.getIndexLFUEvictionFactor();
1:5f7fc14:     }
1:5f7fc14: 
1:7da61d9:     public void setIndexLFUEvictionFactor(float indexLFUEvictionFactor) {
1:7da61d9:         letter.setIndexLFUEvictionFactor(indexLFUEvictionFactor);
1:5f7fc14:     }
1:5f7fc14: 
1:7da61d9:     public boolean isUseIndexLFRUEviction() {
1:7da61d9:         return letter.isUseIndexLFRUEviction();
1:7da61d9:     }
1:7da61d9: 
1:7da61d9:     public void setUseIndexLFRUEviction(boolean useIndexLFRUEviction) {
1:7da61d9:         letter.setUseIndexLFRUEviction(useIndexLFRUEviction);
1:7da61d9:     }
1:7da61d9: 
1:bb4a2f7:     public void setEnableIndexDiskSyncs(boolean diskSyncs) {
1:bb4a2f7:         letter.setEnableIndexDiskSyncs(diskSyncs);
1:bb4a2f7:     }
1:bb4a2f7: 
1:bb4a2f7:     public boolean isEnableIndexDiskSyncs() {
1:bb4a2f7:         return letter.isEnableIndexDiskSyncs();
1:bb4a2f7:     }
1:bb4a2f7: 
1:bb4a2f7:     public void setEnableIndexRecoveryFile(boolean enable) {
1:bb4a2f7:         letter.setEnableIndexRecoveryFile(enable);
1:bb4a2f7:     }
1:bb4a2f7: 
1:bb4a2f7:     public boolean  isEnableIndexRecoveryFile() {
1:bb4a2f7:         return letter.isEnableIndexRecoveryFile();
1:bb4a2f7:     }
1:bb4a2f7: 
1:bb4a2f7:     public void setEnableIndexPageCaching(boolean enable) {
1:bb4a2f7:         letter.setEnableIndexPageCaching(enable);
1:bb4a2f7:     }
1:bb4a2f7: 
1:bb4a2f7:     public boolean isEnableIndexPageCaching() {
1:221da8b:         return letter.isEnableIndexPageCaching();
1:bb4a2f7:     }
1:bb4a2f7: 
1:a9521dc:     public int getCompactAcksAfterNoGC() {
1:a9521dc:         return letter.getCompactAcksAfterNoGC();
1:a9521dc:     }
1:a9521dc: 
1:a9521dc:     /**
1:a9521dc:      * Sets the number of GC cycles where no journal logs were removed before an attempt to
1:a9521dc:      * move forward all the acks in the last log that contains them and is otherwise unreferenced.
1:a9521dc:      * <p>
1:a9521dc:      * A value of -1 will disable this feature.
1:a9521dc:      *
1:a9521dc:      * @param compactAcksAfterNoGC
1:a9521dc:      *      Number of empty GC cycles before we rewrite old ACKS.
1:a9521dc:      */
1:a9521dc:     public void setCompactAcksAfterNoGC(int compactAcksAfterNoGC) {
1:a9521dc:         this.letter.setCompactAcksAfterNoGC(compactAcksAfterNoGC);
1:a9521dc:     }
1:a9521dc: 
1:a9521dc:     public boolean isCompactAcksIgnoresStoreGrowth() {
1:a9521dc:         return this.letter.isCompactAcksIgnoresStoreGrowth();
1:a9521dc:     }
1:a9521dc: 
1:a9521dc:     /**
1:a9521dc:      * Configure if Ack compaction will occur regardless of continued growth of the
1:a9521dc:      * journal logs meaning that the store has not run out of space yet.  Because the
1:a9521dc:      * compaction operation can be costly this value is defaulted to off and the Ack
1:a9521dc:      * compaction is only done when it seems that the store cannot grow and larger.
1:a9521dc:      *
1:a9521dc:      * @param compactAcksIgnoresStoreGrowth the compactAcksIgnoresStoreGrowth to set
1:a9521dc:      */
1:a9521dc:     public void setCompactAcksIgnoresStoreGrowth(boolean compactAcksIgnoresStoreGrowth) {
1:a9521dc:         this.letter.setCompactAcksIgnoresStoreGrowth(compactAcksIgnoresStoreGrowth);
1:a9521dc:     }
1:a9521dc: 
1:cbad8ba:     /**
1:cbad8ba:      * Returns whether Ack compaction is enabled
1:cbad8ba:      *
1:cbad8ba:      * @return enableAckCompaction
1:cbad8ba:      */
1:cbad8ba:     public boolean isEnableAckCompaction() {
1:cbad8ba:         return letter.isEnableAckCompaction();
1:cbad8ba:     }
1:cbad8ba: 
1:cbad8ba:     /**
1:cbad8ba:      * Configure if the Ack compaction task should be enabled to run
1:cbad8ba:      *
1:cbad8ba:      * @param enableAckCompaction
1:cbad8ba:      */
1:cbad8ba:     public void setEnableAckCompaction(boolean enableAckCompaction) {
1:cbad8ba:         letter.setEnableAckCompaction(enableAckCompaction);
1:cbad8ba:     }
1:cbad8ba: 
1:cf3d419:     /**
1:cf3d419:      * Whether non-blocking subscription statistics have been enabled
1:cf3d419:      *
1:cf3d419:      * @return
1:cf3d419:      */
1:cf3d419:     public boolean isEnableSubscriptionStatistics() {
1:cf3d419:         return letter.isEnableSubscriptionStatistics();
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     /**
1:cf3d419:      * Enable caching statistics for each subscription to allow non-blocking
1:cf3d419:      * retrieval of metrics.  This could incur some overhead to compute if there are a lot
1:cf3d419:      * of subscriptions.
1:cf3d419:      *
1:cf3d419:      * @param enableSubscriptionStatistics
1:cf3d419:      */
1:cf3d419:     public void setEnableSubscriptionStatistics(boolean enableSubscriptionStatistics) {
1:cf3d419:         letter.setEnableSubscriptionStatistics(enableSubscriptionStatistics);
1:cf3d419:     }
1:cf3d419: 
1:a6c51a4:     public KahaDBStore getStore() {
1:a6c51a4:         return letter;
1:a6c51a4:     }
1:a6c51a4: 
1:1595378:     public KahaTransactionInfo createTransactionInfo(TransactionId txid) {
1:1595378:         if (txid == null) {
1:1595378:             return null;
1:1595378:         }
1:1595378:         KahaTransactionInfo rc = new KahaTransactionInfo();
1:1595378: 
1:1595378:         if (txid.isLocalTransaction()) {
1:1595378:             LocalTransactionId t = (LocalTransactionId) txid;
1:1595378:             KahaLocalTransactionId kahaTxId = new KahaLocalTransactionId();
1:1595378:             kahaTxId.setConnectionId(t.getConnectionId().getValue());
1:6b203be:             kahaTxId.setTransactionId(t.getValue());
1:6b203be:             rc.setLocalTransactionId(kahaTxId);
1:1595378:         } else {
1:1595378:             XATransactionId t = (XATransactionId) txid;
1:1595378:             KahaXATransactionId kahaTxId = new KahaXATransactionId();
1:1595378:             kahaTxId.setBranchQualifier(new Buffer(t.getBranchQualifier()));
1:1595378:             kahaTxId.setGlobalTransactionId(new Buffer(t.getGlobalTransactionId()));
1:1595378:             kahaTxId.setFormatId(t.getFormatId());
1:6b203be:             rc.setXaTransactionId(kahaTxId);
1:1595378:         }
1:1595378:         return rc;
1:1595378:     }
1:1595378: 
1:144be7c:     @Override
1:170b86a:     public Locker createDefaultLocker() throws IOException {
1:6ce702d:         SharedFileLocker locker = new SharedFileLocker();
1:6ce702d:         locker.configure(this);
1:6ce702d:         return locker;
1:6ce702d:     }
1:6ce702d: 
1:fb62989:     @Override
1:170b86a:     public void init() throws Exception {}
1:170b86a: 
1:170b86a:     @Override
1:ea84378:     public String toString() {
1:1c1aa17:         String path = getDirectory() != null ? getDirectory().getAbsolutePath() : "DIRECTORY_NOT_SET";
1:0a29533:         return "KahaDBPersistenceAdapter[" + path + (getIndexDirectory() != null ? ",Index:" + getIndexDirectory().getAbsolutePath() : "") +  "]";
1:7a5abeb:     }
1:7da61d9: 
1:ea84378:     @Override
1:21fe8ca:     public void setTransactionIdTransformer(TransactionIdTransformer transactionIdTransformer) {
1:21fe8ca:         getStore().setTransactionIdTransformer(transactionIdTransformer);
1:21fe8ca:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public JobSchedulerStore createJobSchedulerStore() throws IOException, UnsupportedOperationException {
1:74846bb:         return this.letter.createJobSchedulerStore();
1:74846bb:     }
1:18571ce: 
1:18571ce:     /* (non-Javadoc)
1:18571ce:      * @see org.apache.activemq.store.NoLocalSubscriptionAware#isPersistNoLocal()
1:18571ce:      */
1:18571ce:     @Override
1:18571ce:     public boolean isPersistNoLocal() {
1:18571ce:         return this.letter.isPersistNoLocal();
1:18571ce:     }
1:ea84378: }
============================================================================
author:Jeff Genender
-------------------------------------------------------------------------------
commit:28819ae
/////////////////////////////////////////////////////////////////////////
1:     public String getPurgeRecoveredXATransactionStrategy() {
1:         return letter.getPurgeRecoveredXATransactionStrategy();
1:     public void setPurgeRecoveredXATransactionStrategy(String purgeRecoveredXATransactionStrategy) {
1:         letter.setPurgeRecoveredXATransactionStrategy(purgeRecoveredXATransactionStrategy);
author:hkesler
-------------------------------------------------------------------------------
commit:24b9ae2
/////////////////////////////////////////////////////////////////////////
0:     public boolean isPurgeRecoveredXATransactions() {
0:         return letter.isPurgeRecoveredXATransactions();
1:     }
1: 
0:     public void setPurgeRecoveredXATransactions(boolean purgeRecoveredXATransactions) {
0:         letter.setPurgeRecoveredXATransactions(purgeRecoveredXATransactions);
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:b07821a
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void allowIOResumption() {
1:         this.letter.allowIOResumption();
1:     }
1: 
commit:0ae90c0
/////////////////////////////////////////////////////////////////////////
1:         return this.letter.isStarted() ? this.letter.size() : 0l;
commit:0a29533
/////////////////////////////////////////////////////////////////////////
1:         return "KahaDBPersistenceAdapter[" + path + (getIndexDirectory() != null ? ",Index:" + getIndexDirectory().getAbsolutePath() : "") +  "]";
commit:51166dc
/////////////////////////////////////////////////////////////////////////
1:      * @deprecated use {@link #getJournalDiskSyncStrategy} instead
/////////////////////////////////////////////////////////////////////////
1:      * @deprecated use {@link #setJournalDiskSyncStrategy} instead
commit:266d23e
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0d824a8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.journal.Journal.JournalDiskSyncStrategy;
/////////////////////////////////////////////////////////////////////////
1:     public JournalDiskSyncStrategy getJournalDiskSyncStrategyEnum() {
1:         return letter.getJournalDiskSyncStrategyEnum();
1:     }
1: 
commit:18571ce
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.NoLocalSubscriptionAware;
/////////////////////////////////////////////////////////////////////////
1: public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter,
1:     JournaledStore, TransactionIdTransformerAware, NoLocalSubscriptionAware {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.store.NoLocalSubscriptionAware#isPersistNoLocal()
1:      */
1:     @Override
1:     public boolean isPersistNoLocal() {
1:         return this.letter.isPersistNoLocal();
1:     }
commit:498e218
/////////////////////////////////////////////////////////////////////////
0:      * @deprecated use {@link #setEnableJournalDiskSyncs} instead
/////////////////////////////////////////////////////////////////////////
0:      * @deprecated use {@link #setEnableJournalDiskSyncs} instead
/////////////////////////////////////////////////////////////////////////
1:      * @return
1:      */
1:     public String getJournalDiskSyncStrategy() {
1:         return letter.getJournalDiskSyncStrategy();
1:     }
1: 
1:     /**
1:      * @param journalDiskSyncStrategy
1:      */
1:     public void setJournalDiskSyncStrategy(String journalDiskSyncStrategy) {
1:         letter.setJournalDiskSyncStrategy(journalDiskSyncStrategy);
1:     }
1: 
1:     /**
1:      * @return
1:      */
1:     public long getJournalDiskSyncInterval() {
1:         return letter.getJournalDiskSyncInterval();
1:     }
1: 
1:     /**
1:      * @param journalDiskSyncInterval
1:      */
1:     public void setJournalDiskSyncInterval(long journalDiskSyncInterval) {
1:         letter.setJournalDiskSyncInterval(journalDiskSyncInterval);
1:     }
1: 
1:     /**
commit:cf3d419
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Whether non-blocking subscription statistics have been enabled
1:      *
1:      * @return
1:      */
1:     public boolean isEnableSubscriptionStatistics() {
1:         return letter.isEnableSubscriptionStatistics();
1:     }
1: 
1:     /**
1:      * Enable caching statistics for each subscription to allow non-blocking
1:      * retrieval of metrics.  This could incur some overhead to compute if there are a lot
1:      * of subscriptions.
1:      *
1:      * @param enableSubscriptionStatistics
1:      */
1:     public void setEnableSubscriptionStatistics(boolean enableSubscriptionStatistics) {
1:         letter.setEnableSubscriptionStatistics(enableSubscriptionStatistics);
1:     }
1: 
commit:cbad8ba
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns whether Ack compaction is enabled
1:      *
1:      * @return enableAckCompaction
1:      */
1:     public boolean isEnableAckCompaction() {
1:         return letter.isEnableAckCompaction();
1:     }
1: 
1:     /**
1:      * Configure if the Ack compaction task should be enabled to run
1:      *
1:      * @param enableAckCompaction
1:      */
1:     public void setEnableAckCompaction(boolean enableAckCompaction) {
1:         letter.setEnableAckCompaction(enableAckCompaction);
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a9521dc
/////////////////////////////////////////////////////////////////////////
1:     public int getCompactAcksAfterNoGC() {
1:         return letter.getCompactAcksAfterNoGC();
1:     }
1: 
1:     /**
1:      * Sets the number of GC cycles where no journal logs were removed before an attempt to
1:      * move forward all the acks in the last log that contains them and is otherwise unreferenced.
1:      * <p>
1:      * A value of -1 will disable this feature.
1:      *
1:      * @param compactAcksAfterNoGC
1:      *      Number of empty GC cycles before we rewrite old ACKS.
1:      */
1:     public void setCompactAcksAfterNoGC(int compactAcksAfterNoGC) {
1:         this.letter.setCompactAcksAfterNoGC(compactAcksAfterNoGC);
1:     }
1: 
1:     public boolean isCompactAcksIgnoresStoreGrowth() {
1:         return this.letter.isCompactAcksIgnoresStoreGrowth();
1:     }
1: 
1:     /**
1:      * Configure if Ack compaction will occur regardless of continued growth of the
1:      * journal logs meaning that the store has not run out of space yet.  Because the
1:      * compaction operation can be costly this value is defaulted to off and the Ack
1:      * compaction is only done when it seems that the store cannot grow and larger.
1:      *
1:      * @param compactAcksIgnoresStoreGrowth the compactAcksIgnoresStoreGrowth to set
1:      */
1:     public void setCompactAcksIgnoresStoreGrowth(boolean compactAcksIgnoresStoreGrowth) {
1:         this.letter.setCompactAcksIgnoresStoreGrowth(compactAcksIgnoresStoreGrowth);
1:     }
1: 
commit:582fc08
/////////////////////////////////////////////////////////////////////////
1:      * @return the currently configured location of the KahaDB index files.
1:      */
1:     public File getIndexDirectory() {
1:         return this.letter.getIndexDirectory();
1:     }
1: 
1:     /**
1:      * Sets the directory where KahaDB index files should be written.
1:      *
1:      * @param indexDirectory
1:      *        the directory where the KahaDB store index files should be written.
1:      */
1:     public void setIndexDirectory(File indexDirectory) {
1:         this.letter.setIndexDirectory(indexDirectory);
1:     }
1: 
1:     /**
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.JournaledStore;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.SharedFileLocker;
1: import org.apache.activemq.store.TopicMessageStore;
1: import org.apache.activemq.store.TransactionIdTransformer;
1: import org.apache.activemq.store.TransactionIdTransformerAware;
1: import org.apache.activemq.store.TransactionStore;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public JobSchedulerStore createJobSchedulerStore() throws IOException, UnsupportedOperationException {
1:         return this.letter.createJobSchedulerStore();
1:     }
author:Christian Posta
-------------------------------------------------------------------------------
commit:45e59e6
/////////////////////////////////////////////////////////////////////////
1:     public String getPreallocationScope() {
1:         return letter.getPreallocationScope();
1:     }
1: 
1:     public void setPreallocationScope(String preallocationScope) {
1:         this.letter.setPreallocationScope(preallocationScope);
1:     }
1: 
1:     public String getPreallocationStrategy() {
1:         return letter.getPreallocationStrategy();
1:     }
1: 
1:     public void setPreallocationStrategy(String preallocationStrategy) {
1:         this.letter.setPreallocationStrategy(preallocationStrategy);
1:     }
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:21fe8ca
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.*;
/////////////////////////////////////////////////////////////////////////
0: public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, JournaledStore, TransactionIdTransformerAware {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void setTransactionIdTransformer(TransactionIdTransformer transactionIdTransformer) {
1:         getStore().setTransactionIdTransformer(transactionIdTransformer);
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:144be7c
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.broker.jmx.BrokerMBeanSupport.createPersistenceAdapterName;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Set;
1: import java.util.concurrent.Callable;
1: 
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.Locker;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.JournaledStore;
0: import org.apache.activemq.store.MessageStore;
0: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.store.SharedFileLocker;
0: import org.apache.activemq.store.TopicMessageStore;
0: import org.apache.activemq.store.TransactionStore;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
1:         if (brokerService != null && brokerService.isUseJmx()) {
1:             ObjectName brokerObjectName = brokerService.getBrokerObjectName();
1:             brokerService.getManagementContext().unregisterMBean(createPersistenceAdapterName(brokerObjectName.toString(), toString()));
1:         }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:6b203be
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             kahaTxId.setTransactionId(t.getValue());
1:             rc.setLocalTransactionId(kahaTxId);
1:             rc.setXaTransactionId(kahaTxId);
commit:b895efc
/////////////////////////////////////////////////////////////////////////
1:  * 
1:  * @org.apache.xbean.XBean element="kahaDB"
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:3bffaf7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.AnnotatedMBean;
1: import org.apache.activemq.broker.jmx.PersistenceAdapterView;
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
1: 
1: 
0: import static org.apache.activemq.broker.jmx.BrokerMBeanSupport.createPersistenceAdapterName;
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (brokerService != null && brokerService.isUseJmx()) {
1:             PersistenceAdapterView view = new PersistenceAdapterView(this);
1:             view.setInflightTransactionViewCallable(new Callable<String>() {
1:                 @Override
1:                 public String call() throws Exception {
1:                     return letter.getTransactions();
1:                 }
1:             });
1:             view.setDataViewCallable(new Callable<String>() {
1:                 @Override
1:                 public String call() throws Exception {
1:                     return letter.getJournal().getFileMap().keySet().toString();
1:                 }
1:             });
1:             AnnotatedMBean.registerMBean(brokerService.getManagementContext(), view,
1:                     createPersistenceAdapterName(brokerService.getBrokerObjectName().toString(), toString()));
1:         }
commit:fb62989
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         super.setBrokerService(brokerService);
commit:221da8b
/////////////////////////////////////////////////////////////////////////
1:         return this.letter.getFailoverProducersAuditDepth();
/////////////////////////////////////////////////////////////////////////
1:         return letter.isEnableIndexPageCaching();
commit:bb4a2f7
/////////////////////////////////////////////////////////////////////////
1:     public void setEnableIndexDiskSyncs(boolean diskSyncs) {
1:         letter.setEnableIndexDiskSyncs(diskSyncs);
1:     }
1: 
1:     public boolean isEnableIndexDiskSyncs() {
1:         return letter.isEnableIndexDiskSyncs();
1:     }
1: 
1:     public void setEnableIndexRecoveryFile(boolean enable) {
1:         letter.setEnableIndexRecoveryFile(enable);
1:     }
1: 
1:     public boolean  isEnableIndexRecoveryFile() {
1:         return letter.isEnableIndexRecoveryFile();
1:     }
1: 
1:     public void setEnableIndexPageCaching(boolean enable) {
1:         letter.setEnableIndexPageCaching(enable);
1:     }
1: 
1:     public boolean isEnableIndexPageCaching() {
0:         return isEnableIndexPageCaching();
1:     }
1: 
commit:2030097
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * When true, persist the redelivery status such that the message redelivery flag can survive a broker failure
0:      * used with org.apache.activemq.ActiveMQConnectionFactory#setTransactedIndividualAck(boolean)  true
1:      */
0:     public void setRewriteOnRedelivery(boolean rewriteOnRedelivery) {
0:         letter.setRewriteOnRedelivery(rewriteOnRedelivery);
1:     }
1: 
0:     public boolean isRewriteOnRedelivery() {
0:         return letter.isRewriteOnRedelivery();
1:     }
1: 
commit:1595378
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.LocalTransactionId;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.command.XATransactionId;
1: import org.apache.activemq.protobuf.Buffer;
1: import org.apache.activemq.store.kahadb.data.KahaLocalTransactionId;
1: import org.apache.activemq.store.kahadb.data.KahaTransactionInfo;
1: import org.apache.activemq.store.kahadb.data.KahaXATransactionId;
/////////////////////////////////////////////////////////////////////////
1:      * @param context
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @param sync
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @param context
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @param destination
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @param destination
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @return TransactionStore
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @param destination
/////////////////////////////////////////////////////////////////////////
1:      * @param destination
/////////////////////////////////////////////////////////////////////////
1:      * @param context
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      * @param brokerName
/////////////////////////////////////////////////////////////////////////
1:      * @param usageManager
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @param checkpointInterval
1:      *            the checkpointInterval to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @param cleanupInterval
1:      *            the cleanupInterval to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
1:      * @param indexWriteBatchSize
1:      *            the indexWriteBatchSize to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:      *  * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
1:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
1:      * @param journalMaxWriteBatchSize
1:      *            the journalMaxWriteBatchSize to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @param enableIndexWriteAsync
1:      *            the enableIndexWriteAsync to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:      * @param dir
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @param enableJournalDiskSyncs
1:      *            the enableJournalDiskSyncs to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
1:      * @param indexCacheSize
1:      *            the indexCacheSize to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @param ignoreMissingJournalfiles
1:      *            the ignoreMissingJournalfiles to set
/////////////////////////////////////////////////////////////////////////
1:      * @param maxAsyncJobs
1:      *            the maxAsyncJobs to set
1:     
/////////////////////////////////////////////////////////////////////////
0:        letter.setDatabaseLockedWaitDelay(databaseLockedWaitDelay);
/////////////////////////////////////////////////////////////////////////
1:     public KahaTransactionInfo createTransactionInfo(TransactionId txid) {
1:         if (txid == null) {
1:             return null;
1:         }
1:         KahaTransactionInfo rc = new KahaTransactionInfo();
1: 
1:         if (txid.isLocalTransaction()) {
1:             LocalTransactionId t = (LocalTransactionId) txid;
1:             KahaLocalTransactionId kahaTxId = new KahaLocalTransactionId();
1:             kahaTxId.setConnectionId(t.getConnectionId().getValue());
0:             kahaTxId.setTransacitonId(t.getValue());
0:             rc.setLocalTransacitonId(kahaTxId);
1:         } else {
1:             XATransactionId t = (XATransactionId) txid;
1:             KahaXATransactionId kahaTxId = new KahaXATransactionId();
1:             kahaTxId.setBranchQualifier(new Buffer(t.getBranchQualifier()));
1:             kahaTxId.setGlobalTransactionId(new Buffer(t.getGlobalTransactionId()));
1:             kahaTxId.setFormatId(t.getFormatId());
0:             rc.setXaTransacitonId(kahaTxId);
1:         }
1:         return rc;
1:     }
1: 
commit:1c1aa17
/////////////////////////////////////////////////////////////////////////
1:         String path = getDirectory() != null ? getDirectory().getAbsolutePath() : "DIRECTORY_NOT_SET";
commit:a6c51a4
/////////////////////////////////////////////////////////////////////////
0:     //  for testing
1:     public KahaDBStore getStore() {
1:         return letter;
1:     }
1: 
commit:0af6b06
/////////////////////////////////////////////////////////////////////////
commit:f2517c0
/////////////////////////////////////////////////////////////////////////
1:     public boolean getForceRecoverIndex() {
1:         return letter.getForceRecoverIndex();
1:     }
1: 
1:     public void setForceRecoverIndex(boolean forceRecoverIndex) {
1:         letter.setForceRecoverIndex(forceRecoverIndex);
1:     }
1: 
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ProducerId;
/////////////////////////////////////////////////////////////////////////
1:     public long getLastProducerSequenceId(ProducerId id) throws IOException {
1:         return this.letter.getLastProducerSequenceId(id);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Set the max number of producers (LRU cache) to track for duplicate sends
1:      */
1:     public void setMaxFailoverProducersToTrack(int maxFailoverProducersToTrack) {
1:         this.letter.setMaxFailoverProducersToTrack(maxFailoverProducersToTrack);
1:     }
1:     
1:     public int getMaxFailoverProducersToTrack() {
1:         return this.letter.getMaxFailoverProducersToTrack();
1:     }
1: 
1:     /**
1:      * set the audit window depth for duplicate suppression (should exceed the max transaction
1:      * batch)
1:      */
1:     public void setFailoverProducersAuditDepth(int failoverProducersAuditDepth) {
1:         this.letter.setFailoverProducersAuditDepth(failoverProducersAuditDepth);
1:     }
1:     
1:     public int getFailoverProducersAuditDepth() {
0:         return this.getFailoverProducersAuditDepth();
1:     }
1:     
1:     /**
/////////////////////////////////////////////////////////////////////////
1: 
commit:356c39d
/////////////////////////////////////////////////////////////////////////
0:  * @org.apache.xbean.XBean element="kahaDB"
/////////////////////////////////////////////////////////////////////////
1:     public int getJournalMaxFileLength() {
1:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
0:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
1:     public void setJournalMaxFileLength(int journalMaxFileLength) {
1:         this.letter.setJournalMaxFileLength(journalMaxFileLength);
/////////////////////////////////////////////////////////////////////////
1:      * Get the journalMaxWriteBatchSize
1:      * @return the journalMaxWriteBatchSize
1:      */
1:     public int getJournalMaxWriteBatchSize() {
1:         return this.letter.getJournalMaxWriteBatchSize();
1:     }
1: 
1:     /**
1:      * Set the journalMaxWriteBatchSize
0:      * @param journalMaxWriteBatchSize the journalMaxWriteBatchSize to set
1:      */
1:     public void setJournalMaxWriteBatchSize(int journalMaxWriteBatchSize) {
1:         this.letter.setJournalMaxWriteBatchSize(journalMaxWriteBatchSize);
1:     }
1:     
1:     /**
commit:dbcb7e4
/////////////////////////////////////////////////////////////////////////
0:     public long getJournalMaxFileLength() {
0:      * @param journalMaxFileLength which is rounded to an integer
0:     public void setJournalMaxFileLength(long journalMaxFileLength) {
0:         this.letter.setJournalMaxFileLength(Long.valueOf(journalMaxFileLength).intValue());
commit:c42d980
/////////////////////////////////////////////////////////////////////////
0:     public int getJournalMaxFileLength() {
/////////////////////////////////////////////////////////////////////////
0:     public void setJournalMaxFileLength(int journalMaxFileLength) {
commit:880f3d6
/////////////////////////////////////////////////////////////////////////
0:     public long getJournalMaxFileLength() {
/////////////////////////////////////////////////////////////////////////
0:     public void setJournalMaxFileLength(long journalMaxFileLength) {
commit:1d4d0e4
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Get the indexCacheSize
1:      * @return the indexCacheSize
1:      */
1:     public int getIndexCacheSize() {
1:         return this.letter.getIndexCacheSize();
1:     }
1: 
1:     /**
1:      * Set the indexCacheSize
0:      * @param indexCacheSize the indexCacheSize to set
1:      */
1:     public void setIndexCacheSize(int indexCacheSize) {
1:         this.letter.setIndexCacheSize(indexCacheSize);
1:     }
1:     
1:     /**
1:      * Get the ignoreMissingJournalfiles
1:      * @return the ignoreMissingJournalfiles
1:      */
1:     public boolean isIgnoreMissingJournalfiles() {
1:         return this.letter.isIgnoreMissingJournalfiles();
1:     }
1: 
1:     /**
1:      * Set the ignoreMissingJournalfiles
0:      * @param ignoreMissingJournalfiles the ignoreMissingJournalfiles to set
1:      */
1:     public void setIgnoreMissingJournalfiles(boolean ignoreMissingJournalfiles) {
1:         this.letter.setIgnoreMissingJournalfiles(ignoreMissingJournalfiles);
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.*;
/////////////////////////////////////////////////////////////////////////
0: public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, JournaledStore {
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:c9500f4
/////////////////////////////////////////////////////////////////////////
1:     public boolean isChecksumJournalFiles() {
1:         return letter.isChecksumJournalFiles();
1:     }
1: 
1:     public boolean isCheckForCorruptJournalFiles() {
1:         return letter.isCheckForCorruptJournalFiles();
1:     }
1: 
1:     public void setChecksumJournalFiles(boolean checksumJournalFiles) {
1:         letter.setChecksumJournalFiles(checksumJournalFiles);
1:     }
1: 
1:     public void setCheckForCorruptJournalFiles(boolean checkForCorruptJournalFiles) {
1:         letter.setCheckForCorruptJournalFiles(checkForCorruptJournalFiles);
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:170b86a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.LockableServiceSupport;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
0: public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter {
/////////////////////////////////////////////////////////////////////////
1:     public void doStart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void doStop(ServiceStopper stopper) throws Exception {
1:         this.letter.stop();
/////////////////////////////////////////////////////////////////////////
1:      * @deprecated use {@link Locker#setLockAcquireSleepInterval(long)} instead
0:      *
1:     @Deprecated
1:     public void setDatabaseLockedWaitDelay(int databaseLockedWaitDelay) throws IOException {
1:        getLocker().setLockAcquireSleepInterval(databaseLockedWaitDelay);
/////////////////////////////////////////////////////////////////////////
1:     public Locker createDefaultLocker() throws IOException {
1:     public void init() throws Exception {}
1: 
1:     @Override
commit:f5178cc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.SharedFileLocker;
commit:6ce702d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.Locker;
/////////////////////////////////////////////////////////////////////////
0:     private Locker locker;
/////////////////////////////////////////////////////////////////////////
0:         getLocker().start();
/////////////////////////////////////////////////////////////////////////
0:         try {
0:             this.letter.stop();
0:         } finally {
0:             getLocker().stop();
1:         }
/////////////////////////////////////////////////////////////////////////
0:     public void setLocker(Locker locker) {
0:         this.locker = locker;
1:     }
1: 
0:     protected Locker getLocker() throws IOException {
0:         if (this.locker == null) {
0:             this.locker = createDefaultLocker();
1:         }
0:         return this.locker;
1:     }
1: 
0:     protected Locker createDefaultLocker() throws IOException {
1:         SharedFileLocker locker = new SharedFileLocker();
1:         locker.configure(this);
0:         locker.setLockAcquireSleepInterval(getDatabaseLockedWaitDelay());
1:         return locker;
1:     }
1: 
commit:a1e961d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.Set;
1: 
1:  * An implementation of {@link PersistenceAdapter} designed for use with
1:  * KahaDB - Embedded Lightweight Non-Relational Database
commit:5f7fc14
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.*;
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean isArchiveCorruptedIndex() {
1:         return letter.isArchiveCorruptedIndex();
1:     }
1: 
1:     public void setArchiveCorruptedIndex(boolean archiveCorruptedIndex) {
1:         letter.setArchiveCorruptedIndex(archiveCorruptedIndex);
1:     }
1: 
commit:b1a9130
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.BrokerServiceAware;
/////////////////////////////////////////////////////////////////////////
0: public class KahaDBPersistenceAdapter implements PersistenceAdapter, BrokerServiceAware {
/////////////////////////////////////////////////////////////////////////
1: 
1: 	public void setBrokerService(BrokerService brokerService) {
1: 		letter.setBrokerService(brokerService);
1: 	}
author:Robert Davies
-------------------------------------------------------------------------------
commit:7da61d9
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.Set;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.LocalTransactionId;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.command.TransactionId;
0: import org.apache.activemq.command.XATransactionId;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public float getIndexLFUEvictionFactor() {
1:         return letter.getIndexLFUEvictionFactor();
1:     }
1: 
1:     public void setIndexLFUEvictionFactor(float indexLFUEvictionFactor) {
1:         letter.setIndexLFUEvictionFactor(indexLFUEvictionFactor);
1:     }
1: 
1:     public boolean isUseIndexLFRUEviction() {
1:         return letter.isUseIndexLFRUEviction();
1:     }
1: 
1:     public void setUseIndexLFRUEviction(boolean useIndexLFRUEviction) {
1:         letter.setUseIndexLFRUEviction(useIndexLFRUEviction);
1:     }
1: 
commit:8e61f51
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @param checkpointInterval the checkpointInterval to set
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @param cleanupInterval the cleanupInterval to set
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @param indexWriteBatchSize the indexWriteBatchSize to set
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
0:      *
0:      * @param journalMaxWriteBatchSize the journalMaxWriteBatchSize to set
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @param enableIndexWriteAsync the enableIndexWriteAsync to set
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @param enableJournalDiskSyncs the enableJournalDiskSyncs to set
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @param indexCacheSize the indexCacheSize to set
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0:      * @param ignoreMissingJournalfiles the ignoreMissingJournalfiles to set
/////////////////////////////////////////////////////////////////////////
1: 
0:      * @param maxAsyncJobs the maxAsyncJobs to set
1: 
/////////////////////////////////////////////////////////////////////////
0:         letter.setDatabaseLockedWaitDelay(databaseLockedWaitDelay);
/////////////////////////////////////////////////////////////////////////
0:     public boolean isJournalPerDestination() {
0:         return letter.isJournalPerDestination();
1:     }
1: 
0:     public void setJournalPerDestination(boolean journalPerDestination) {
0:         letter.setJournalPerDestination(journalPerDestination);
1:     }
1: 
commit:ddf2282
/////////////////////////////////////////////////////////////////////////
0:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
/////////////////////////////////////////////////////////////////////////
1:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
0:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
/////////////////////////////////////////////////////////////////////////
0:      *  * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
0:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
/////////////////////////////////////////////////////////////////////////
0:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can be used
0:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
commit:47181b7
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * @return the databaseLockedWaitDelay
1:      */
0:     public int getDatabaseLockedWaitDelay() {
0:         return letter.getDatabaseLockedWaitDelay();
1:     }
1: 
1:     /**
1:      * @param databaseLockedWaitDelay the databaseLockedWaitDelay to set
1:      */
0:     public void setDatabaseLockedWaitDelay(int databaseLockedWaitDelay) {
0:        letter.setDatabaseLockedWaitDelay(databaseLockedWaitDelay);
1:     }
commit:7a5abeb
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can
1:      * be used
0:      * 
0:      * @org.apache.xbean.Property 
0:      *                            propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * @param checkpointInterval
0:      *            the checkpointInterval to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * @param cleanupInterval
0:      *            the cleanupInterval to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * @param indexWriteBatchSize
0:      *            the indexWriteBatchSize to set
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * @param journalMaxWriteBatchSize
0:      *            the journalMaxWriteBatchSize to set
1: 
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * @param enableIndexWriteAsync
0:      *            the enableIndexWriteAsync to set
/////////////////////////////////////////////////////////////////////////
0:      * 
1: 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * @param enableJournalDiskSyncs
0:      *            the enableJournalDiskSyncs to set
1: 
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * @param indexCacheSize
0:      *            the indexCacheSize to set
1: 
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * @param ignoreMissingJournalfiles
0:      *            the ignoreMissingJournalfiles to set
/////////////////////////////////////////////////////////////////////////
0:     public void setBrokerService(BrokerService brokerService) {
0:         letter.setBrokerService(brokerService);
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     }
1: 
1: 
1:     }
1: 
1:     /**
0:      * @return the concurrentStoreAndDispatchTransactions
1:      */
0:     public boolean isConcurrentStoreAndDispatchTransactions() {
0:         return letter.isConcurrentStoreAndDispatchTransactions();
1:     }
1: 
1:     /**
0:      * @param concurrentStoreAndDispatchTransactions
0:      *            the concurrentStoreAndDispatchTransactions to set
1:      */
0:     public void setConcurrentStoreAndDispatchTransactions(boolean concurrentStoreAndDispatchTransactions) {
0:         letter.setConcurrentStoreAndDispatchTransactions(concurrentStoreAndDispatchTransactions);
1:     }
1: 
0:      * @param maxAsyncJobs
0:      *            the maxAsyncJobs to set
1:         letter.setMaxAsyncJobs(maxAsyncJobs);
1:     }
1: 
0:         return "KahaDBPersistenceAdapter[" + path + "]";
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
0:         String path = getDirectory() != null ? getDirectory().toString() : "DIRECTORY_NOT_SET";
0:         return "KahaDBPersistenceAdapter[" + path +"]" ;
commit:ea84378
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isConcurrentStoreAndDispatchQueues() {
1:         return letter.isConcurrentStoreAndDispatchQueues();
1:     }
1:     
1:     public void setConcurrentStoreAndDispatchQueues(boolean concurrentStoreAndDispatch) {
1:         letter.setConcurrentStoreAndDispatchQueues(concurrentStoreAndDispatch);
1:     }    
1:     
1:     public boolean isConcurrentStoreAndDispatchTopics() {
1:         return letter.isConcurrentStoreAndDispatchTopics();
1:     }
1:     
1:     public void setConcurrentStoreAndDispatchTopics(boolean concurrentStoreAndDispatch) {
1:         letter.setConcurrentStoreAndDispatchTopics(concurrentStoreAndDispatch);
1:     }    
1:     
1:     public int getMaxAsyncJobs() {
1:         return letter.getMaxAsyncJobs();
1:     }
1:     /**
0:      * @param maxAsyncJobs the maxAsyncJobs to set
1:      */
1:     public void setMaxAsyncJobs(int maxAsyncJobs) {
0:        letter.setMaxAsyncJobs(maxAsyncJobs);
1:     }   
1:     
1:     @Override
1:     public String toString() {
0:         return "KahaDBPersistenceAdapter";
1:     }
commit:98bb7bf
/////////////////////////////////////////////////////////////////////////
0:     
1:     public File getDirectoryArchive() {
1:         return letter.getDirectoryArchive();
1:     }
0: 
1:     public void setDirectoryArchive(File directoryArchive) {
1:         letter.setDirectoryArchive(directoryArchive);
1:     }
commit:f8cb847
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final KahaDBStore letter = new KahaDBStore();
/////////////////////////////////////////////////////////////////////////
0: 	
0: 
1:     /**
0:      * @return the archiveDataLogs
1:      */
1:     public boolean isArchiveDataLogs() {
1:         return letter.isArchiveDataLogs();
1:     }
0: 
1:     /**
0:      * @param archiveDataLogs the archiveDataLogs to set
1:      */
1:     public void setArchiveDataLogs(boolean archiveDataLogs) {
1:         letter.setArchiveDataLogs(archiveDataLogs);
1:     }
commit:f82530d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
0: 
0: import org.apache.activeio.journal.Journal;
1: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.store.MessageStore;
0: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.store.TopicMessageStore;
0: import org.apache.activemq.store.TransactionStore;
1: import org.apache.activemq.usage.SystemUsage;
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.Set;
1: /**
0:  * An implementation of {@link PersistenceAdapter} designed for use with a
0:  * {@link Journal} and then check pointing asynchronously on a timeout with some
0:  * other long term persistent storage.
0:  * 
0:  * @org.apache.xbean.XBean element="KahaDB"
0:  * @version $Revision: 1.17 $
1:  */
0: public class KahaDBPersistenceAdapter implements PersistenceAdapter {
0:     private KahaDBStore letter = new KahaDBStore();
0:     
0: 
1:     /**
0:      * @param context
0:      * @throws IOException
1:      * @see org.apache.activemq.store.PersistenceAdapter#beginTransaction(org.apache.activemq.broker.ConnectionContext)
1:      */
1:     public void beginTransaction(ConnectionContext context) throws IOException {
1:         this.letter.beginTransaction(context);
1:     }
0: 
1:     /**
0:      * @param sync
0:      * @throws IOException
1:      * @see org.apache.activemq.store.PersistenceAdapter#checkpoint(boolean)
1:      */
1:     public void checkpoint(boolean sync) throws IOException {
1:         this.letter.checkpoint(sync);
1:     }
0: 
1:     /**
0:      * @param context
0:      * @throws IOException
1:      * @see org.apache.activemq.store.PersistenceAdapter#commitTransaction(org.apache.activemq.broker.ConnectionContext)
1:      */
1:     public void commitTransaction(ConnectionContext context) throws IOException {
1:         this.letter.commitTransaction(context);
1:     }
0: 
1:     /**
0:      * @param destination
1:      * @return MessageStore
0:      * @throws IOException
1:      * @see org.apache.activemq.store.PersistenceAdapter#createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)
1:      */
1:     public MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException {
1:         return this.letter.createQueueMessageStore(destination);
1:     }
0: 
1:     /**
0:      * @param destination
1:      * @return TopicMessageStore
0:      * @throws IOException
1:      * @see org.apache.activemq.store.PersistenceAdapter#createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)
1:      */
1:     public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException {
1:         return this.letter.createTopicMessageStore(destination);
1:     }
0: 
1:     /**
0:      * @return TrandactionStore
0:      * @throws IOException
1:      * @see org.apache.activemq.store.PersistenceAdapter#createTransactionStore()
1:      */
1:     public TransactionStore createTransactionStore() throws IOException {
1:         return this.letter.createTransactionStore();
1:     }
0: 
1:     /**
0:      * @throws IOException
1:      * @see org.apache.activemq.store.PersistenceAdapter#deleteAllMessages()
1:      */
1:     public void deleteAllMessages() throws IOException {
1:         this.letter.deleteAllMessages();
1:     }
0: 
1:     /**
1:      * @return destinations
1:      * @see org.apache.activemq.store.PersistenceAdapter#getDestinations()
1:      */
1:     public Set<ActiveMQDestination> getDestinations() {
1:         return this.letter.getDestinations();
1:     }
0: 
1:     /**
1:      * @return lastMessageBrokerSequenceId
0:      * @throws IOException
1:      * @see org.apache.activemq.store.PersistenceAdapter#getLastMessageBrokerSequenceId()
1:      */
1:     public long getLastMessageBrokerSequenceId() throws IOException {
1:         return this.letter.getLastMessageBrokerSequenceId();
1:     }
0: 
1:     /**
0:      * @param destination
1:      * @see org.apache.activemq.store.PersistenceAdapter#removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)
1:      */
1:     public void removeQueueMessageStore(ActiveMQQueue destination) {
1:         this.letter.removeQueueMessageStore(destination);
1:     }
0: 
1:     /**
0:      * @param destination
1:      * @see org.apache.activemq.store.PersistenceAdapter#removeTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)
1:      */
1:     public void removeTopicMessageStore(ActiveMQTopic destination) {
1:         this.letter.removeTopicMessageStore(destination);
1:     }
0: 
1:     /**
0:      * @param context
0:      * @throws IOException
1:      * @see org.apache.activemq.store.PersistenceAdapter#rollbackTransaction(org.apache.activemq.broker.ConnectionContext)
1:      */
1:     public void rollbackTransaction(ConnectionContext context) throws IOException {
1:         this.letter.rollbackTransaction(context);
1:     }
0: 
1:     /**
0:      * @param brokerName
1:      * @see org.apache.activemq.store.PersistenceAdapter#setBrokerName(java.lang.String)
1:      */
1:     public void setBrokerName(String brokerName) {
1:         this.letter.setBrokerName(brokerName);
1:     }
0: 
0:     
0: 
1:     /**
0:      * @param usageManager
1:      * @see org.apache.activemq.store.PersistenceAdapter#setUsageManager(org.apache.activemq.usage.SystemUsage)
1:      */
1:     public void setUsageManager(SystemUsage usageManager) {
1:         this.letter.setUsageManager(usageManager);
1:     }
0: 
1:     /**
1:      * @return the size of the store
1:      * @see org.apache.activemq.store.PersistenceAdapter#size()
1:      */
1:     public long size() {
0:         return this.letter.size();
1:     }
0: 
1:     /**
0:      * @throws Exception
1:      * @see org.apache.activemq.Service#start()
1:      */
0:     public void start() throws Exception {
1:         this.letter.start();
1:     }
0: 
1:     /**
0:      * @throws Exception
1:      * @see org.apache.activemq.Service#stop()
1:      */
0:     public void stop() throws Exception {
0:         this.letter.stop();
1:     }
0: 
1:     /**
1:      * Get the journalMaxFileLength
1:      * @return the journalMaxFileLength
1:      */
0:     public int getJournalMaxFileLength() {
1:         return this.letter.getJournalMaxFileLength();
1:     }
0: 
1:     /**
0:      * @param journalMaxFileLength 
0:      * When set using XBean, you can use values such as: "20
0:      * mb", "1024 kb", or "1 gb"
0:      * 
0:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"
1:      */
0:     public void setJournalMaxFileLength(int journalMaxFileLength) {
0:         this.letter.setJournalMaxFileLength(journalMaxFileLength);
1:     }
0: 
1:     /**
1:      * Get the checkpointInterval
1:      * @return the checkpointInterval
1:      */
1:     public long getCheckpointInterval() {
1:         return this.letter.getCheckpointInterval();
1:     }
0: 
1:     /**
1:      * Set the checkpointInterval
0:      * @param checkpointInterval the checkpointInterval to set
1:      */
1:     public void setCheckpointInterval(long checkpointInterval) {
1:         this.letter.setCheckpointInterval(checkpointInterval);
1:     }
0: 
1:     /**
1:      * Get the cleanupInterval
1:      * @return the cleanupInterval
1:      */
1:     public long getCleanupInterval() {
1:         return this.letter.getCleanupInterval();
1:     }
0: 
1:     /**
1:      * Set the cleanupInterval
0:      * @param cleanupInterval the cleanupInterval to set
1:      */
1:     public void setCleanupInterval(long cleanupInterval) {
1:         this.letter.setCleanupInterval(cleanupInterval);
1:     }
0: 
1:     /**
1:      * Get the indexWriteBatchSize
1:      * @return the indexWriteBatchSize
1:      */
1:     public int getIndexWriteBatchSize() {
1:         return this.letter.getIndexWriteBatchSize();
1:     }
0: 
1:     /**
1:      * Set the indexWriteBatchSize
0:      * @param indexWriteBatchSize the indexWriteBatchSize to set
1:      */
1:     public void setIndexWriteBatchSize(int indexWriteBatchSize) {
1:         this.letter.setIndexWriteBatchSize(indexWriteBatchSize);
1:     }
0: 
1:     /**
1:      * Get the enableIndexWriteAsync
1:      * @return the enableIndexWriteAsync
1:      */
1:     public boolean isEnableIndexWriteAsync() {
1:         return this.letter.isEnableIndexWriteAsync();
1:     }
0: 
1:     /**
1:      * Set the enableIndexWriteAsync
0:      * @param enableIndexWriteAsync the enableIndexWriteAsync to set
1:      */
1:     public void setEnableIndexWriteAsync(boolean enableIndexWriteAsync) {
1:         this.letter.setEnableIndexWriteAsync(enableIndexWriteAsync);
1:     }
0: 
1:     /**
1:      * Get the directory
1:      * @return the directory
1:      */
1:     public File getDirectory() {
1:         return this.letter.getDirectory();
1:     }
0:     
1:     /**
0:      * @param dir
1:      * @see org.apache.activemq.store.PersistenceAdapter#setDirectory(java.io.File)
1:      */
1:     public void setDirectory(File dir) {
1:         this.letter.setDirectory(dir);
1:     }
0: 
1:     /**
1:      * Get the enableJournalDiskSyncs
1:      * @return the enableJournalDiskSyncs
1:      */
1:     public boolean isEnableJournalDiskSyncs() {
1:         return this.letter.isEnableJournalDiskSyncs();
1:     }
0: 
1:     /**
1:      * Set the enableJournalDiskSyncs
0:      * @param enableJournalDiskSyncs the enableJournalDiskSyncs to set
1:      */
1:     public void setEnableJournalDiskSyncs(boolean enableJournalDiskSyncs) {
1:         this.letter.setEnableJournalDiskSyncs(enableJournalDiskSyncs);
1:     }
1: }
============================================================================