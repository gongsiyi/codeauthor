1:2d7280f: /**
1:2d7280f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2d7280f:  * contributor license agreements.  See the NOTICE file distributed with
1:2d7280f:  * this work for additional information regarding copyright ownership.
1:2d7280f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2d7280f:  * (the "License"); you may not use this file except in compliance with
1:2d7280f:  * the License.  You may obtain a copy of the License at
1:2d7280f:  *
1:2d7280f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2d7280f:  *
1:2d7280f:  * Unless required by applicable law or agreed to in writing, software
1:2d7280f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2d7280f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2d7280f:  * See the License for the specific language governing permissions and
1:2d7280f:  * limitations under the License.
1:2d7280f:  */
1:2d7280f: package org.apache.activemq.transport.stomp;
1:2d7280f: 
1:2d7280f: import static org.junit.Assert.assertTrue;
1:2d7280f: 
1:2d7280f: import java.io.IOException;
1:2d7280f: import java.net.Socket;
1:2d7280f: import java.util.Arrays;
1:2d7280f: import java.util.Collection;
1:2d7280f: 
1:2d7280f: import javax.net.SocketFactory;
1:2d7280f: import javax.net.ssl.SSLSocketFactory;
1:2d7280f: 
1:2d7280f: import org.junit.Test;
1:2d7280f: import org.junit.runner.RunWith;
1:2d7280f: import org.junit.runners.Parameterized;
1:2d7280f: import org.junit.runners.Parameterized.Parameters;
1:2d7280f: import org.slf4j.Logger;
1:2d7280f: import org.slf4j.LoggerFactory;
1:2d7280f: 
1:2d7280f: /**
1:2d7280f:  * Test that the inactivity monitor works as expected.
1:2d7280f:  */
1:2d7280f: @RunWith(Parameterized.class)
1:2d7280f: public class StompInactivityMonitorTest extends StompTestSupport {
1:2d7280f: 
1:2d7280f:     private static final Logger LOG = LoggerFactory.getLogger(StompInactivityMonitorTest.class);
1:2d7280f: 
1:2d7280f:     private final String transportScheme;
1:2d7280f: 
1:2d7280f:     @Parameters(name="{0}")
1:2d7280f:     public static Collection<Object[]> data() {
1:2d7280f:         return Arrays.asList(new Object[][] {
1:2d7280f:                 { "stomp" },
1:2d7280f:                 { "stomp+ssl" },
1:2d7280f:                 { "stomp+nio" },
1:2d7280f:                 { "stomp+nio+ssl" }
1:2d7280f:             });
1:2d7280f:     }
1:2d7280f: 
1:2d7280f:     public StompInactivityMonitorTest(String transportScheme) {
1:2d7280f:         this.transportScheme = transportScheme;
1:2d7280f:     }
1:2d7280f: 
1:2d7280f:     @Test
1:2d7280f:     public void test() throws Exception {
1:2d7280f:         stompConnect();
1:2d7280f: 
1:2d7280f:         String connectFrame = "STOMP\n" +
1:2d7280f:             "login:system\n" +
1:2d7280f:             "passcode:manager\n" +
1:2d7280f:             "accept-version:1.1\n" +
1:2d7280f:             "heart-beat:1000,0\n" +
1:2d7280f:             "host:localhost\n" +
1:2d7280f:             "\n" + Stomp.NULL;
1:2d7280f: 
1:2d7280f:         stompConnection.sendFrame(connectFrame);
1:2d7280f:         String response = stompConnection.receiveFrame().trim();
1:2d7280f:         LOG.info("Broker sent response: {}", response);
1:2d7280f: 
1:2d7280f:         String messageHead = "SEND\n" +
1:2d7280f:                              "receipt:1" + "\n" +
1:2d7280f:                              "destination:/queue/" + getQueueName() +
1:2d7280f:                              "\n\n" + "AAAA";
1:2d7280f: 
1:2d7280f:         stompConnection.sendFrame(messageHead);
1:2d7280f: 
1:2d7280f:         for (int i = 0; i < 30; i++) {
1:2d7280f:             stompConnection.sendFrame("A");
1:2d7280f:             Thread.sleep(100);
1:2d7280f:         }
1:2d7280f: 
1:2d7280f:         stompConnection.sendFrame(Stomp.NULL);
1:2d7280f: 
1:2d7280f:         response = stompConnection.receiveFrame().trim();
1:2d7280f:         assertTrue(response.startsWith("RECEIPT"));
1:2d7280f:     }
1:2d7280f: 
1:2d7280f:     @Override
1:2d7280f:     protected boolean isUseTcpConnector() {
1:2d7280f:         return !transportScheme.contains("nio") && !transportScheme.contains("ssl");
1:2d7280f:     }
1:2d7280f: 
1:2d7280f:     @Override
1:2d7280f:     protected boolean isUseSslConnector() {
1:2d7280f:         return !transportScheme.contains("nio") && transportScheme.contains("ssl");
1:2d7280f:     }
1:2d7280f: 
1:2d7280f:     @Override
1:2d7280f:     protected boolean isUseNioConnector() {
1:2d7280f:         return transportScheme.contains("nio") && !transportScheme.contains("ssl");
1:2d7280f:     }
1:2d7280f: 
1:2d7280f:     @Override
1:2d7280f:     protected boolean isUseNioPlusSslConnector() {
1:2d7280f:         return transportScheme.contains("nio") && transportScheme.contains("ssl");
1:2d7280f:     }
1:2d7280f: 
1:2d7280f:     @Override
1:2d7280f:     protected Socket createSocket() throws IOException {
1:2d7280f:         int port = 0;
1:2d7280f:         boolean useSSL = false;
1:2d7280f: 
1:2d7280f:         if (transportScheme.contains("ssl")) {
1:2d7280f:             if (transportScheme.contains("nio")) {
1:2d7280f:                 port = this.nioSslPort;
1:2d7280f:             } else {
1:2d7280f:                 port = this.sslPort;
1:2d7280f:             }
1:2d7280f: 
1:2d7280f:             useSSL = true;
1:2d7280f:         } else {
1:2d7280f:             if (transportScheme.contains("nio")) {
1:2d7280f:                 port = this.nioPort;
1:2d7280f:             } else {
1:2d7280f:                 port = this.port;
1:2d7280f:             }
1:2d7280f:         }
1:2d7280f: 
1:2d7280f:         SocketFactory factory = null;
1:2d7280f: 
1:2d7280f:         if (useSSL) {
1:2d7280f:             factory = SSLSocketFactory.getDefault();
1:2d7280f:         } else {
1:2d7280f:             factory = SocketFactory.getDefault();
1:2d7280f:         }
1:2d7280f: 
1:2d7280f:         return factory.createSocket("127.0.0.1", port);
1:2d7280f:     }
1:2d7280f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2d7280f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that the inactivity monitor works as expected.
1:  */
1: @RunWith(Parameterized.class)
1: public class StompInactivityMonitorTest extends StompTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompInactivityMonitorTest.class);
1: 
1:     private final String transportScheme;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 { "stomp" },
1:                 { "stomp+ssl" },
1:                 { "stomp+nio" },
1:                 { "stomp+nio+ssl" }
1:             });
1:     }
1: 
1:     public StompInactivityMonitorTest(String transportScheme) {
1:         this.transportScheme = transportScheme;
1:     }
1: 
1:     @Test
1:     public void test() throws Exception {
1:         stompConnect();
1: 
1:         String connectFrame = "STOMP\n" +
1:             "login:system\n" +
1:             "passcode:manager\n" +
1:             "accept-version:1.1\n" +
1:             "heart-beat:1000,0\n" +
1:             "host:localhost\n" +
1:             "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(connectFrame);
1:         String response = stompConnection.receiveFrame().trim();
1:         LOG.info("Broker sent response: {}", response);
1: 
1:         String messageHead = "SEND\n" +
1:                              "receipt:1" + "\n" +
1:                              "destination:/queue/" + getQueueName() +
1:                              "\n\n" + "AAAA";
1: 
1:         stompConnection.sendFrame(messageHead);
1: 
1:         for (int i = 0; i < 30; i++) {
1:             stompConnection.sendFrame("A");
1:             Thread.sleep(100);
1:         }
1: 
1:         stompConnection.sendFrame(Stomp.NULL);
1: 
1:         response = stompConnection.receiveFrame().trim();
1:         assertTrue(response.startsWith("RECEIPT"));
1:     }
1: 
1:     @Override
1:     protected boolean isUseTcpConnector() {
1:         return !transportScheme.contains("nio") && !transportScheme.contains("ssl");
1:     }
1: 
1:     @Override
1:     protected boolean isUseSslConnector() {
1:         return !transportScheme.contains("nio") && transportScheme.contains("ssl");
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioConnector() {
1:         return transportScheme.contains("nio") && !transportScheme.contains("ssl");
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return transportScheme.contains("nio") && transportScheme.contains("ssl");
1:     }
1: 
1:     @Override
1:     protected Socket createSocket() throws IOException {
1:         int port = 0;
1:         boolean useSSL = false;
1: 
1:         if (transportScheme.contains("ssl")) {
1:             if (transportScheme.contains("nio")) {
1:                 port = this.nioSslPort;
1:             } else {
1:                 port = this.sslPort;
1:             }
1: 
1:             useSSL = true;
1:         } else {
1:             if (transportScheme.contains("nio")) {
1:                 port = this.nioPort;
1:             } else {
1:                 port = this.port;
1:             }
1:         }
1: 
1:         SocketFactory factory = null;
1: 
1:         if (useSSL) {
1:             factory = SSLSocketFactory.getDefault();
1:         } else {
1:             factory = SocketFactory.getDefault();
1:         }
1: 
1:         return factory.createSocket("127.0.0.1", port);
1:     }
1: }
============================================================================