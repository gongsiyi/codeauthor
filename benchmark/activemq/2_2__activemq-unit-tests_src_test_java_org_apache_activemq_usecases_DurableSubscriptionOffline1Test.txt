1:57f5d49: /**
1:57f5d49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57f5d49:  * contributor license agreements.  See the NOTICE file distributed with
1:57f5d49:  * this work for additional information regarding copyright ownership.
1:57f5d49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57f5d49:  * (the "License"); you may not use this file except in compliance with
1:57f5d49:  * the License.  You may obtain a copy of the License at
1:57f5d49:  *
1:57f5d49:  *      http://www.apache.org/licenses/LICENSE-2.0
1:57f5d49:  *
1:57f5d49:  * Unless required by applicable law or agreed to in writing, software
1:57f5d49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:57f5d49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:57f5d49:  * See the License for the specific language governing permissions and
1:57f5d49:  * limitations under the License.
1:57f5d49:  */
1:57f5d49: package org.apache.activemq.usecases;
1:57f5d49: 
1:57f5d49: import org.apache.activemq.TestSupport.PersistenceAdapterChoice;
1:57f5d49: import org.junit.Test;
1:57f5d49: import org.junit.runner.RunWith;
1:57f5d49: import org.junit.runners.Parameterized;
1:57f5d49: import org.slf4j.Logger;
1:57f5d49: import org.slf4j.LoggerFactory;
1:57f5d49: 
1:57f5d49: import javax.jms.Connection;
1:57f5d49: import javax.jms.Message;
1:57f5d49: import javax.jms.MessageConsumer;
1:57f5d49: import javax.jms.MessageProducer;
1:57f5d49: import javax.jms.Session;
1:57f5d49: import java.util.ArrayList;
1:57f5d49: import java.util.Collection;
1:57f5d49: import java.util.List;
1:57f5d49: 
1:57f5d49: import static org.junit.Assert.assertEquals;
1:57f5d49: 
1:57f5d49: @RunWith(value = Parameterized.class)
1:57f5d49: public class DurableSubscriptionOffline1Test extends DurableSubscriptionOfflineTestBase {
1:57f5d49: 
1:57f5d49:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOffline1Test.class);
1:57f5d49: 
1:57f5d49:     @Parameterized.Parameters(name = "{0}-{1}")
1:57f5d49:     public static Collection<Object[]> getTestParameters() {
1:57f5d49:         String osName = System.getProperty("os.name");
1:57f5d49:         LOG.debug("Running on [" + osName + "]");
1:57f5d49: 
1:57f5d49:         List<PersistenceAdapterChoice> persistenceAdapterChoices = new ArrayList<PersistenceAdapterChoice>();
1:57f5d49: 
1:57f5d49:         persistenceAdapterChoices.add(PersistenceAdapterChoice.KahaDB);
1:57f5d49:         persistenceAdapterChoices.add(PersistenceAdapterChoice.JDBC);
1:57f5d49:         if (!osName.equalsIgnoreCase("AIX") && !osName.equalsIgnoreCase("SunOS")) {
1:57f5d49:             //choices.add(levelDb);
1:57f5d49:             persistenceAdapterChoices.add(PersistenceAdapterChoice.LevelDB);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         List<Object[]> testParameters = new ArrayList<Object[]>();
1:57f5d49:         Boolean[] booleanValues = {Boolean.FALSE, Boolean.TRUE};
1:bdb24ee:         List<Boolean> booleans = java.util.Arrays.asList(booleanValues);
1:57f5d49:         for (Boolean booleanValue : booleans) {
1:57f5d49:             for (PersistenceAdapterChoice persistenceAdapterChoice : persistenceAdapterChoices) {
1:57f5d49:                 Object[] currentChoice = {persistenceAdapterChoice, booleanValue};
1:57f5d49:                 testParameters.add(currentChoice);
1:57f5d49:             }
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         return testParameters;
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     public DurableSubscriptionOffline1Test(PersistenceAdapterChoice adapter, Boolean usePrioritySupport) {
1:57f5d49:         this.defaultPersistenceAdapter = adapter;
1:57f5d49:         this.usePrioritySupport = usePrioritySupport.booleanValue();
1:57f5d49:         LOG.debug(">>>> Created with adapter {} usePrioritySupport? {}", defaultPersistenceAdapter, usePrioritySupport);
1:57f5d49: 
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     @Test
1:57f5d49:     public void testConsumeOnlyMatchedMessages() throws Exception {
1:57f5d49:         // create durable subscription
1:57f5d49:         Connection con = createConnection();
1:57f5d49:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // send messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageProducer producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         int sent = 0;
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             boolean filter = i % 2 == 1;
1:57f5d49:             if (filter)
1:57f5d49:                 sent++;
1:57f5d49: 
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("filter", filter ? "true" : "false");
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // consume messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         assertEquals(sent, listener.count);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     @Test
1:57f5d49:     public void testVerifyAllConsumedAreAcked() throws Exception {
1:57f5d49:         // create durable subscription
1:57f5d49:         Connection con = createConnection();
1:57f5d49:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // send messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageProducer producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         int sent = 0;
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             sent++;
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("filter", "true");
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         Thread.sleep(1 * 1000);
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // consume messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         LOG.info("Consumed: " + listener.count);
1:57f5d49:         assertEquals(sent, listener.count);
1:57f5d49: 
1:57f5d49:         // consume messages again, should not get any
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         listener = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         assertEquals(0, listener.count);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     @Test
1:57f5d49:     public void testOfflineSubscriptionCanConsumeAfterOnlineSubs() throws Exception {
1:57f5d49:         Connection con = createConnection("offCli1");
1:57f5d49:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         con = createConnection("offCli2");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         Connection con2 = createConnection("onlineCli1");
1:57f5d49:         Session session2 = con2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer2 = session2.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener2 = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer2.setMessageListener(listener2);
1:57f5d49: 
1:57f5d49:         // send messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageProducer producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         int sent = 0;
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             sent++;
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("filter", "true");
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         Thread.sleep(1 * 1000);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // test online subs
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49:         session2.close();
1:57f5d49:         con2.close();
1:57f5d49:         assertEquals(sent, listener2.count);
1:57f5d49: 
1:57f5d49:         // restart broker
1:57f5d49:         broker.stop();
1:57f5d49:         createBroker(false /*deleteAllMessages*/);
1:57f5d49: 
1:57f5d49:         // test offline
1:57f5d49:         con = createConnection("offCli1");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49: 
1:57f5d49:         Connection con3 = createConnection("offCli2");
1:57f5d49:         Session session3 = con3.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer3 = session3.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49: 
1:57f5d49:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener3 = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer3.setMessageListener(listener3);
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49:         session3.close();
1:57f5d49:         con3.close();
1:57f5d49: 
1:57f5d49:         assertEquals(sent, listener.count);
1:57f5d49:         assertEquals(sent, listener3.count);
1:57f5d49:     }
1:57f5d49: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:bdb24ee
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         List<Boolean> booleans = java.util.Arrays.asList(booleanValues);
author:Kevin Earls
-------------------------------------------------------------------------------
commit:57f5d49
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.TestSupport.PersistenceAdapterChoice;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: import scala.actors.threadpool.Arrays;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: @RunWith(value = Parameterized.class)
1: public class DurableSubscriptionOffline1Test extends DurableSubscriptionOfflineTestBase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOffline1Test.class);
1: 
1:     @Parameterized.Parameters(name = "{0}-{1}")
1:     public static Collection<Object[]> getTestParameters() {
1:         String osName = System.getProperty("os.name");
1:         LOG.debug("Running on [" + osName + "]");
1: 
1:         List<PersistenceAdapterChoice> persistenceAdapterChoices = new ArrayList<PersistenceAdapterChoice>();
1: 
1:         persistenceAdapterChoices.add(PersistenceAdapterChoice.KahaDB);
1:         persistenceAdapterChoices.add(PersistenceAdapterChoice.JDBC);
1:         if (!osName.equalsIgnoreCase("AIX") && !osName.equalsIgnoreCase("SunOS")) {
1:             //choices.add(levelDb);
1:             persistenceAdapterChoices.add(PersistenceAdapterChoice.LevelDB);
1:         }
1: 
1:         List<Object[]> testParameters = new ArrayList<Object[]>();
1:         Boolean[] booleanValues = {Boolean.FALSE, Boolean.TRUE};
0:         List<Boolean> booleans = Arrays.asList(booleanValues);
1:         for (Boolean booleanValue : booleans) {
1:             for (PersistenceAdapterChoice persistenceAdapterChoice : persistenceAdapterChoices) {
1:                 Object[] currentChoice = {persistenceAdapterChoice, booleanValue};
1:                 testParameters.add(currentChoice);
1:             }
1:         }
1: 
1:         return testParameters;
1:     }
1: 
1:     public DurableSubscriptionOffline1Test(PersistenceAdapterChoice adapter, Boolean usePrioritySupport) {
1:         this.defaultPersistenceAdapter = adapter;
1:         this.usePrioritySupport = usePrioritySupport.booleanValue();
1:         LOG.debug(">>>> Created with adapter {} usePrioritySupport? {}", defaultPersistenceAdapter, usePrioritySupport);
1: 
1:     }
1: 
1:     @Test
1:     public void testConsumeOnlyMatchedMessages() throws Exception {
1:         // create durable subscription
1:         Connection con = createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         session.close();
1:         con.close();
1: 
1:         // send messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         int sent = 0;
1:         for (int i = 0; i < 10; i++) {
1:             boolean filter = i % 2 == 1;
1:             if (filter)
1:                 sent++;
1: 
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", filter ? "true" : "false");
1:             producer.send(topic, message);
1:         }
1: 
1:         session.close();
1:         con.close();
1: 
1:         // consume messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:         consumer.setMessageListener(listener);
1: 
1:         Thread.sleep(3 * 1000);
1: 
1:         session.close();
1:         con.close();
1: 
1:         assertEquals(sent, listener.count);
1:     }
1: 
1:     @Test
1:     public void testVerifyAllConsumedAreAcked() throws Exception {
1:         // create durable subscription
1:         Connection con = createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         session.close();
1:         con.close();
1: 
1:         // send messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         int sent = 0;
1:         for (int i = 0; i < 10; i++) {
1:             sent++;
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", "true");
1:             producer.send(topic, message);
1:         }
1: 
1:         Thread.sleep(1 * 1000);
1: 
1:         session.close();
1:         con.close();
1: 
1:         // consume messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:         consumer.setMessageListener(listener);
1: 
1:         Thread.sleep(3 * 1000);
1: 
1:         session.close();
1:         con.close();
1: 
1:         LOG.info("Consumed: " + listener.count);
1:         assertEquals(sent, listener.count);
1: 
1:         // consume messages again, should not get any
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         listener = new DurableSubscriptionOfflineTestListener();
1:         consumer.setMessageListener(listener);
1: 
1:         Thread.sleep(3 * 1000);
1: 
1:         session.close();
1:         con.close();
1: 
1:         assertEquals(0, listener.count);
1:     }
1: 
1:     @Test
1:     public void testOfflineSubscriptionCanConsumeAfterOnlineSubs() throws Exception {
1:         Connection con = createConnection("offCli1");
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         session.close();
1:         con.close();
1: 
1:         con = createConnection("offCli2");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         session.close();
1:         con.close();
1: 
1:         Connection con2 = createConnection("onlineCli1");
1:         Session session2 = con2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer2 = session2.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         DurableSubscriptionOfflineTestListener listener2 = new DurableSubscriptionOfflineTestListener();
1:         consumer2.setMessageListener(listener2);
1: 
1:         // send messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         int sent = 0;
1:         for (int i = 0; i < 10; i++) {
1:             sent++;
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", "true");
1:             producer.send(topic, message);
1:         }
1: 
1:         Thread.sleep(1 * 1000);
1:         session.close();
1:         con.close();
1: 
1:         // test online subs
1:         Thread.sleep(3 * 1000);
1:         session2.close();
1:         con2.close();
1:         assertEquals(sent, listener2.count);
1: 
1:         // restart broker
1:         broker.stop();
1:         createBroker(false /*deleteAllMessages*/);
1: 
1:         // test offline
1:         con = createConnection("offCli1");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1: 
1:         Connection con3 = createConnection("offCli2");
1:         Session session3 = con3.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer3 = session3.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1: 
1:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:         consumer.setMessageListener(listener);
1:         DurableSubscriptionOfflineTestListener listener3 = new DurableSubscriptionOfflineTestListener();
1:         consumer3.setMessageListener(listener3);
1: 
1:         Thread.sleep(3 * 1000);
1: 
1:         session.close();
1:         con.close();
1:         session3.close();
1:         con3.close();
1: 
1:         assertEquals(sent, listener.count);
1:         assertEquals(sent, listener3.count);
1:     }
1: }
============================================================================