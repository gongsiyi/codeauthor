1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.management;
1:d29ca2a: 
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.util.IndentPrinter;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Statistics for a JMS endpoint, typically a MessageProducer or MessageConsumer
1:230a86c:  * but this class can also be used to represent statistics on a
1:230a86c:  * {@link Destination} as well.
1:b0c2a40:  * 
1:230a86c:  * 
1:d29ca2a:  */
1:d29ca2a: public class JMSEndpointStatsImpl extends StatsImpl {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JMSEndpointStatsImpl.class);
1:d29ca2a: 
1:d29ca2a:     protected CountStatisticImpl messageCount;
1:d29ca2a:     protected CountStatisticImpl pendingMessageCount;
1:d29ca2a:     protected CountStatisticImpl expiredMessageCount;
1:d29ca2a:     protected TimeStatisticImpl messageWaitTime;
1:d29ca2a:     protected TimeStatisticImpl messageRateTime;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * This constructor is used to create statistics for a
1:d29ca2a:      * {@link MessageProducer} or {@link MessageConsumer} as it passes in a
1:d29ca2a:      * {@link Session} parent statistic.
1:230a86c:      * 
1:d29ca2a:      * @param sessionStats
1:d29ca2a:      */
1:d29ca2a:     public JMSEndpointStatsImpl(JMSSessionStatsImpl sessionStats) {
1:d29ca2a:         this();
1:d29ca2a:         setParent(messageCount, sessionStats.getMessageCount());
1:d29ca2a:         setParent(pendingMessageCount, sessionStats.getPendingMessageCount());
1:d29ca2a:         setParent(expiredMessageCount, sessionStats.getExpiredMessageCount());
1:d29ca2a:         setParent(messageWaitTime, sessionStats.getMessageWaitTime());
1:d29ca2a:         setParent(messageRateTime, sessionStats.getMessageRateTime());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * This constructor is typically used to create a statistics object for a
1:d29ca2a:      * {@link Destination}
1:d29ca2a:      */
1:d29ca2a:     public JMSEndpointStatsImpl() {
1:230a86c:         this(new CountStatisticImpl("messageCount", "Number of messages processed"), new CountStatisticImpl("pendingMessageCount", "Number of pending messages"),
1:230a86c:              new CountStatisticImpl("expiredMessageCount", "Number of expired messages"),
1:230a86c:              new TimeStatisticImpl("messageWaitTime", "Time spent by a message before being delivered"), new TimeStatisticImpl("messageRateTime",
1:230a86c:                                                                                                                                "Time taken to process a message (thoughtput rate)"));
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public JMSEndpointStatsImpl(CountStatisticImpl messageCount, CountStatisticImpl pendingMessageCount, CountStatisticImpl expiredMessageCount, TimeStatisticImpl messageWaitTime,
1:230a86c:                                 TimeStatisticImpl messageRateTime) {
1:d29ca2a:         this.messageCount = messageCount;
1:d29ca2a:         this.pendingMessageCount = pendingMessageCount;
1:d29ca2a:         this.expiredMessageCount = expiredMessageCount;
1:d29ca2a:         this.messageWaitTime = messageWaitTime;
1:d29ca2a:         this.messageRateTime = messageRateTime;
1:d29ca2a: 
1:d29ca2a:         // lets add named stats
1:d29ca2a:         addStatistic("messageCount", messageCount);
1:d29ca2a:         addStatistic("pendingMessageCount", pendingMessageCount);
1:d29ca2a:         addStatistic("expiredMessageCount", expiredMessageCount);
1:d29ca2a:         addStatistic("messageWaitTime", messageWaitTime);
1:d29ca2a:         addStatistic("messageRateTime", messageRateTime);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public synchronized void reset() {
1:d29ca2a:         super.reset();
1:d29ca2a:         messageCount.reset();
1:d29ca2a:         messageRateTime.reset();
1:d29ca2a:         pendingMessageCount.reset();
1:d29ca2a:         expiredMessageCount.reset();
1:d29ca2a:         messageWaitTime.reset();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getMessageCount() {
1:d29ca2a:         return messageCount;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getPendingMessageCount() {
1:d29ca2a:         return pendingMessageCount;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getExpiredMessageCount() {
1:d29ca2a:         return expiredMessageCount;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TimeStatisticImpl getMessageRateTime() {
1:d29ca2a:         return messageRateTime;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TimeStatisticImpl getMessageWaitTime() {
1:d29ca2a:         return messageWaitTime;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String toString() {
1:d29ca2a:         StringBuffer buffer = new StringBuffer();
1:d29ca2a:         buffer.append(messageCount);
1:d29ca2a:         buffer.append(" ");
1:d29ca2a:         buffer.append(messageRateTime);
1:d29ca2a:         buffer.append(" ");
1:d29ca2a:         buffer.append(pendingMessageCount);
1:d29ca2a:         buffer.append(" ");
1:d29ca2a:         buffer.append(expiredMessageCount);
1:d29ca2a:         buffer.append(" ");
1:d29ca2a:         buffer.append(messageWaitTime);
1:d29ca2a:         return buffer.toString();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void onMessage() {
1:526cb5b:         if (enabled) {
1:d29ca2a:             long start = messageCount.getLastSampleTime();
1:d29ca2a:             messageCount.increment();
1:d29ca2a:             long end = messageCount.getLastSampleTime();
1:d29ca2a:             messageRateTime.addTime(end - start);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:b997d25:     @Override
1:b997d25:     public void setEnabled(boolean enabled) {
1:b997d25:         super.setEnabled(enabled);
1:b997d25:         messageCount.setEnabled(enabled);
1:b997d25:         messageRateTime.setEnabled(enabled);
1:b997d25:         pendingMessageCount.setEnabled(enabled);
1:b997d25:         expiredMessageCount.setEnabled(enabled);
1:b997d25:         messageWaitTime.setEnabled(enabled);
1:d29ca2a:     }
1:b997d25: 
1:d29ca2a:     public void dump(IndentPrinter out) {
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(messageCount);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(messageRateTime);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(pendingMessageCount);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(messageRateTime);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(expiredMessageCount);
1:d29ca2a:         out.printIndent();
1:d29ca2a:         out.println(messageWaitTime);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // Implementation methods
1:230a86c:     // -------------------------------------------------------------------------
1:d29ca2a:     protected void setParent(CountStatisticImpl child, CountStatisticImpl parent) {
1:d29ca2a:         if (child instanceof CountStatisticImpl && parent instanceof CountStatisticImpl) {
1:230a86c:             CountStatisticImpl c = (CountStatisticImpl)child;
1:230a86c:             c.setParent((CountStatisticImpl)parent);
1:230a86c:         } else {
1:fc00993:             LOG.warn("Cannot associate endpoint counters with session level counters as they are not both CountStatisticImpl clases. Endpoint: " + child + " session: " + parent);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void setParent(TimeStatisticImpl child, TimeStatisticImpl parent) {
1:d29ca2a:         if (child instanceof TimeStatisticImpl && parent instanceof TimeStatisticImpl) {
1:230a86c:             TimeStatisticImpl c = (TimeStatisticImpl)child;
1:230a86c:             c.setParent((TimeStatisticImpl)parent);
1:230a86c:         } else {
1:fc00993:             LOG.warn("Cannot associate endpoint counters with session level counters as they are not both TimeStatisticImpl clases. Endpoint: " + child + " session: " + parent);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(JMSEndpointStatsImpl.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Cannot associate endpoint counters with session level counters as they are not both CountStatisticImpl clases. Endpoint: " + child + " session: " + parent);
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Cannot associate endpoint counters with session level counters as they are not both TimeStatisticImpl clases. Endpoint: " + child + " session: " + parent);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * but this class can also be used to represent statistics on a
1:  * {@link Destination} as well.
1:  * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         this(new CountStatisticImpl("messageCount", "Number of messages processed"), new CountStatisticImpl("pendingMessageCount", "Number of pending messages"),
1:              new CountStatisticImpl("expiredMessageCount", "Number of expired messages"),
1:              new TimeStatisticImpl("messageWaitTime", "Time spent by a message before being delivered"), new TimeStatisticImpl("messageRateTime",
1:                                                                                                                                "Time taken to process a message (thoughtput rate)"));
1:     public JMSEndpointStatsImpl(CountStatisticImpl messageCount, CountStatisticImpl pendingMessageCount, CountStatisticImpl expiredMessageCount, TimeStatisticImpl messageWaitTime,
1:                                 TimeStatisticImpl messageRateTime) {
/////////////////////////////////////////////////////////////////////////
1:     // -------------------------------------------------------------------------
1:             CountStatisticImpl c = (CountStatisticImpl)child;
1:             c.setParent((CountStatisticImpl)parent);
1:         } else {
1:             TimeStatisticImpl c = (TimeStatisticImpl)child;
1:             c.setParent((TimeStatisticImpl)parent);
1:         } else {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.management;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.util.IndentPrinter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Statistics for a JMS endpoint, typically a MessageProducer or MessageConsumer
0:  * but this class can also be used to represent statistics on a {@link Destination} as well.
1:  *
0:  * @version $Revision: 1.3 $
1:  */
1: public class JMSEndpointStatsImpl extends StatsImpl {
0:     private static final Log log = LogFactory.getLog(JMSEndpointStatsImpl.class);
1: 
1:     protected CountStatisticImpl messageCount;
1:     protected CountStatisticImpl pendingMessageCount;
1:     protected CountStatisticImpl expiredMessageCount;
1:     protected TimeStatisticImpl messageWaitTime;
1:     protected TimeStatisticImpl messageRateTime;
1: 
1:     /**
1:      * This constructor is used to create statistics for a
1:      * {@link MessageProducer} or {@link MessageConsumer} as it passes in a
1:      * {@link Session} parent statistic.
1:      *
1:      * @param sessionStats
1:      */
1:     public JMSEndpointStatsImpl(JMSSessionStatsImpl sessionStats) {
1:         this();
1:         setParent(messageCount, sessionStats.getMessageCount());
1:         setParent(pendingMessageCount, sessionStats.getPendingMessageCount());
1:         setParent(expiredMessageCount, sessionStats.getExpiredMessageCount());
1:         setParent(messageWaitTime, sessionStats.getMessageWaitTime());
1:         setParent(messageRateTime, sessionStats.getMessageRateTime());
1:     }
1: 
1:     /**
1:      * This constructor is typically used to create a statistics object for a
1:      * {@link Destination}
1:      */
1:     public JMSEndpointStatsImpl() {
0:         this(new CountStatisticImpl("messageCount", "Number of messages processed"),
0:                 new CountStatisticImpl("pendingMessageCount", "Number of pending messages"),
0:                 new CountStatisticImpl("expiredMessageCount", "Number of expired messages"),
0:                 new TimeStatisticImpl("messageWaitTime", "Time spent by a message before being delivered"),
0:                 new TimeStatisticImpl("messageRateTime", "Time taken to process a message (thoughtput rate)"));
1:     }
1: 
0:     public JMSEndpointStatsImpl(CountStatisticImpl messageCount, CountStatisticImpl pendingMessageCount, CountStatisticImpl expiredMessageCount, TimeStatisticImpl messageWaitTime, TimeStatisticImpl messageRateTime) {
1:         this.messageCount = messageCount;
1:         this.pendingMessageCount = pendingMessageCount;
1:         this.expiredMessageCount = expiredMessageCount;
1:         this.messageWaitTime = messageWaitTime;
1:         this.messageRateTime = messageRateTime;
1: 
1:         // lets add named stats
1:         addStatistic("messageCount", messageCount);
1:         addStatistic("pendingMessageCount", pendingMessageCount);
1:         addStatistic("expiredMessageCount", expiredMessageCount);
1:         addStatistic("messageWaitTime", messageWaitTime);
1:         addStatistic("messageRateTime", messageRateTime);
1:     }
1: 
1:     public synchronized void reset() {
1:         super.reset();
1:         messageCount.reset();
1:         messageRateTime.reset();
1:         pendingMessageCount.reset();
1:         expiredMessageCount.reset();
1:         messageWaitTime.reset();
1:     }
1: 
1:     public CountStatisticImpl getMessageCount() {
1:         return messageCount;
1:     }
1: 
1:     public CountStatisticImpl getPendingMessageCount() {
1:         return pendingMessageCount;
1:     }
1: 
1:     public CountStatisticImpl getExpiredMessageCount() {
1:         return expiredMessageCount;
1:     }
1: 
1:     public TimeStatisticImpl getMessageRateTime() {
1:         return messageRateTime;
1:     }
1: 
1:     public TimeStatisticImpl getMessageWaitTime() {
1:         return messageWaitTime;
1:     }
1: 
1:     public String toString() {
1:         StringBuffer buffer = new StringBuffer();
1:         buffer.append(messageCount);
1:         buffer.append(" ");
1:         buffer.append(messageRateTime);
1:         buffer.append(" ");
1:         buffer.append(pendingMessageCount);
1:         buffer.append(" ");
1:         buffer.append(expiredMessageCount);
1:         buffer.append(" ");
1:         buffer.append(messageWaitTime);
1:         return buffer.toString();
1:     }
1: 
1:     public void onMessage() {
1:         long start = messageCount.getLastSampleTime();
1:         messageCount.increment();
1:         long end = messageCount.getLastSampleTime();
1:         messageRateTime.addTime(end - start);
1:     }
1: 
1:     public void dump(IndentPrinter out) {
1:         out.printIndent();
1:         out.println(messageCount);
1:         out.printIndent();
1:         out.println(messageRateTime);
1:         out.printIndent();
1:         out.println(pendingMessageCount);
1:         out.printIndent();
1:         out.println(messageRateTime);
1:         out.printIndent();
1:         out.println(expiredMessageCount);
1:         out.printIndent();
1:         out.println(messageWaitTime);
1:     }
1: 
1:     // Implementation methods
0:     //-------------------------------------------------------------------------
1:     protected void setParent(CountStatisticImpl child, CountStatisticImpl parent) {
1:         if (child instanceof CountStatisticImpl && parent instanceof CountStatisticImpl) {
0:             CountStatisticImpl c = (CountStatisticImpl) child;
0:             c.setParent((CountStatisticImpl) parent);
1:         }
0:         else {
0:             log.warn("Cannot associate endpoint counters with session level counters as they are not both CountStatisticImpl clases. Endpoint: " + child + " session: " + parent);
1:         }
1:     }
1: 
1:     protected void setParent(TimeStatisticImpl child, TimeStatisticImpl parent) {
1:         if (child instanceof TimeStatisticImpl && parent instanceof TimeStatisticImpl) {
0:             TimeStatisticImpl c = (TimeStatisticImpl) child;
0:             c.setParent((TimeStatisticImpl) parent);
1:         }
0:         else {
0:             log.warn("Cannot associate endpoint counters with session level counters as they are not both TimeStatisticImpl clases. Endpoint: " + child + " session: " + parent);
1:         }
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(JMSEndpointStatsImpl.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:b997d25
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void setEnabled(boolean enabled) {
1:         super.setEnabled(enabled);
1:         messageCount.setEnabled(enabled);
1:         messageRateTime.setEnabled(enabled);
1:         pendingMessageCount.setEnabled(enabled);
1:         expiredMessageCount.setEnabled(enabled);
1:         messageWaitTime.setEnabled(enabled);
0:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:526cb5b
/////////////////////////////////////////////////////////////////////////
1:         if (enabled) {
0:             long start = messageCount.getLastSampleTime();
0:             messageCount.increment();
0:             long end = messageCount.getLastSampleTime();
0:             messageRateTime.addTime(end - start);
0:         }
============================================================================