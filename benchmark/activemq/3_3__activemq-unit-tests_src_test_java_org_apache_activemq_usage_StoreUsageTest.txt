1:52b13d0: /**
1:52b13d0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:52b13d0:  * contributor license agreements.  See the NOTICE file distributed with
1:52b13d0:  * this work for additional information regarding copyright ownership.
1:52b13d0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:52b13d0:  * (the "License"); you may not use this file except in compliance with
1:52b13d0:  * the License.  You may obtain a copy of the License at
1:52b13d0:  *
1:52b13d0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:52b13d0:  *
1:52b13d0:  * Unless required by applicable law or agreed to in writing, software
1:52b13d0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:52b13d0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:52b13d0:  * See the License for the specific language governing permissions and
1:52b13d0:  * limitations under the License.
1:52b13d0:  */
3:52b13d0: 
1:52b13d0: package org.apache.activemq.usage;
1:52b13d0: 
1:52b13d0: import org.apache.activemq.ActiveMQConnectionFactory;
1:52b13d0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:52b13d0: import org.apache.activemq.broker.BrokerService;
1:fad5081: import org.apache.activemq.broker.region.BaseDestination;
1:52b13d0: import org.apache.activemq.util.ProducerThread;
1:52b13d0: import org.apache.activemq.util.Wait;
1:fad5081: import org.slf4j.Logger;
1:fad5081: import org.slf4j.LoggerFactory;
1:52b13d0: 
1:52b13d0: import javax.jms.Connection;
1:52b13d0: import javax.jms.Destination;
1:52b13d0: import javax.jms.Session;
1:fad5081: import java.util.concurrent.TimeUnit;
1:52b13d0: 
1:52b13d0: public class StoreUsageTest extends EmbeddedBrokerTestSupport {
1:fad5081:     private static final Logger LOG = LoggerFactory.getLogger(StoreUsageTest.class);
1:08bd791: 
1:52b13d0:     @Override
1:52b13d0:     protected BrokerService createBroker() throws Exception {
1:52b13d0:         BrokerService broker = super.createBroker();
1:fad5081:         broker.getSystemUsage().getStoreUsage().setLimit(34 * 1024);
1:52b13d0:         broker.deleteAllMessages();
1:52b13d0:         return broker;
1:52b13d0:     }
1:52b13d0: 
1:52b13d0:     protected boolean isPersistent() {
1:52b13d0:         return true;
1:52b13d0:     }
1:52b13d0: 
1:52b13d0:     public void testJmx() throws Exception {
1:52b13d0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:52b13d0:         Connection conn = factory.createConnection();
1:52b13d0:         conn.start();
1:52b13d0:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:da57427:         final Destination dest = sess.createQueue(this.getClass().getName());
1:52b13d0:         final ProducerThread producer = new ProducerThread(sess, dest);
1:52b13d0:         producer.start();
1:52b13d0: 
1:fad5081:         assertTrue("some messages sent", Wait.waitFor(new Wait.Condition() {
1:fad5081:             public boolean isSatisified() throws Exception {
1:fad5081:                 BaseDestination baseDestination = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(dest);
1:fad5081: 
1:fad5081:                 return baseDestination != null && baseDestination.getDestinationStatistics().getEnqueues().getCount() > 0;
1:fad5081:             }
1:fad5081:         }));
1:fad5081: 
1:fad5081:         BaseDestination baseDestination = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(dest);
1:fad5081:         LOG.info("Sent u: " + baseDestination.getDestinationStatistics().getEnqueues());
1:fad5081: 
1:52b13d0:         // wait for the producer to block
1:fad5081:         int sent = 0;
1:fad5081:         do {
1:fad5081:             sent = producer.getSentCount();
1:fad5081:             TimeUnit.SECONDS.sleep(1);
1:fad5081:             LOG.info("Sent: " + sent);
1:fad5081:         } while (sent !=  producer.getSentCount());
1:52b13d0: 
1:fad5081:         LOG.info("Increasing limit! enqueues: " + baseDestination.getDestinationStatistics().getEnqueues().getCount());
1:52b13d0:         broker.getAdminView().setStoreLimit(1024 * 1024);
1:52b13d0: 
1:52b13d0:         Wait.waitFor(new Wait.Condition() {
1:52b13d0:             public boolean isSatisified() throws Exception {
1:52b13d0:                 return producer.getSentCount() == producer.getMessageCount();
1:52b13d0:             }
1:fad5081:         });
1:52b13d0: 
1:fad5081:         assertEquals("Producer sent all messages", producer.getMessageCount(), producer.getSentCount());
1:fad5081:         assertEquals("Enqueues match sent", producer.getSentCount(), baseDestination.getDestinationStatistics().getEnqueues().getCount());
1:52b13d0: 
1:52b13d0:     }
1:52b13d0: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:da57427
/////////////////////////////////////////////////////////////////////////
1:         final Destination dest = sess.createQueue(this.getClass().getName());
commit:fad5081
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.BaseDestination;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import java.util.concurrent.TimeUnit;
1:     private static final Logger LOG = LoggerFactory.getLogger(StoreUsageTest.class);
1:         broker.getSystemUsage().getStoreUsage().setLimit(34 * 1024);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("some messages sent", Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 BaseDestination baseDestination = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(dest);
1: 
1:                 return baseDestination != null && baseDestination.getDestinationStatistics().getEnqueues().getCount() > 0;
1:             }
1:         }));
1: 
1:         BaseDestination baseDestination = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(dest);
1:         LOG.info("Sent u: " + baseDestination.getDestinationStatistics().getEnqueues());
1: 
1:         int sent = 0;
1:         do {
1:             sent = producer.getSentCount();
1:             TimeUnit.SECONDS.sleep(1);
1:             LOG.info("Sent: " + sent);
1:         } while (sent !=  producer.getSentCount());
1:         LOG.info("Increasing limit! enqueues: " + baseDestination.getDestinationStatistics().getEnqueues().getCount());
1:         });
1:         assertEquals("Producer sent all messages", producer.getMessageCount(), producer.getSentCount());
1:         assertEquals("Enqueues match sent", producer.getSentCount(), baseDestination.getDestinationStatistics().getEnqueues().getCount());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:08bd791
/////////////////////////////////////////////////////////////////////////
0:     final int WAIT_TIME_MILLS = 20*1000;
1: 
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(WAIT_TIME_MILLS / 2);
0:         Thread.sleep(WAIT_TIME_MILLS);
0:         }, WAIT_TIME_MILLS * 2);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:52b13d0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.ProducerThread;
1: import org.apache.activemq.util.Wait;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Session;
1: 
1: public class StoreUsageTest extends EmbeddedBrokerTestSupport {
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
0:         broker.getSystemUsage().getStoreUsage().setLimit(10 * 1024);
1:         broker.deleteAllMessages();
1:         return broker;
1:     }
1: 
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1: 
1:     public void testJmx() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection conn = factory.createConnection();
1:         conn.start();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Destination dest = sess.createQueue(this.getClass().getName());
1:         final ProducerThread producer = new ProducerThread(sess, dest);
1:         producer.start();
1: 
1:         // wait for the producer to block
0:         Thread.sleep(5000);
1: 
1:         broker.getAdminView().setStoreLimit(1024 * 1024);
1: 
0:         Thread.sleep(5000);
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return producer.getSentCount() == producer.getMessageCount();
1:             }
0:         }, 5000);
1: 
0:         assertEquals("Producer didn't send all messages", producer.getMessageCount(), producer.getSentCount());
1: 
1:     }
1: }
============================================================================