1:f96a20e: /**
1:f96a20e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f96a20e:  * contributor license agreements. See the NOTICE file distributed with
1:f96a20e:  * this work for additional information regarding copyright ownership.
1:f96a20e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f96a20e:  * (the "License"); you may not use this file except in compliance with
1:f96a20e:  * the License. You may obtain a copy of the License at
1:f96a20e:  * <p>
1:f96a20e:  * http://www.apache.org/licenses/LICENSE-2.0
1:f96a20e:  * <p>
1:f96a20e:  * Unless required by applicable law or agreed to in writing, software
1:f96a20e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f96a20e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f96a20e:  * See the License for the specific language governing permissions and
1:f96a20e:  * limitations under the License.
1:f96a20e:  */
1:f96a20e: 
1:f96a20e: package org.apache.activemq.store.jdbc;
1:f96a20e: 
1:f96a20e: import org.apache.activemq.ActiveMQConnectionFactory;
1:f96a20e: import org.apache.activemq.broker.BrokerService;
1:f96a20e: import org.apache.activemq.broker.region.Destination;
1:f96a20e: import org.apache.activemq.command.ActiveMQQueue;
1:f96a20e: import org.apache.activemq.store.PersistenceAdapter;
1:f96a20e: import org.apache.commons.logging.Log;
1:f96a20e: import org.apache.commons.logging.LogFactory;
1:f96a20e: import org.apache.derby.jdbc.EmbeddedDataSource;
1:f96a20e: import org.junit.After;
1:f96a20e: import org.junit.Assert;
1:f96a20e: import org.junit.Before;
1:f96a20e: import org.junit.Test;
1:f96a20e: 
1:f96a20e: import javax.jms.*;
1:f96a20e: import javax.sql.DataSource;
1:f96a20e: import java.io.IOException;
1:f96a20e: import java.lang.reflect.Field;
1:f96a20e: import java.sql.ResultSet;
1:f96a20e: import java.sql.SQLException;
1:f96a20e: import java.sql.Statement;
1:f96a20e: import java.util.List;
1:f96a20e: import java.util.Properties;
1:f96a20e: 
1:f96a20e: public class JmsTransactionCommitFailureTest {
1:f96a20e:     private static final Log LOGGER = LogFactory.getLog(JmsTransactionCommitFailureTest.class);
1:f96a20e:     private static final String OUTPUT_DIR = "target/" + JmsTransactionCommitFailureTest.class.getSimpleName();
1:f96a20e: 
1:f96a20e:     private Properties originalSystemProps;
1:f96a20e:     private DataSource dataSource;
1:f96a20e:     private CommitFailurePersistenceAdapter persistenceAdapter;
1:f96a20e:     private BrokerService broker;
1:f96a20e:     private ConnectionFactory connectionFactory;
1:f96a20e:     private int messageCounter = 1;
1:f96a20e: 
1:f96a20e:     @Before
1:f96a20e:     public void setUp() throws Exception {
1:f96a20e:         originalSystemProps = System.getProperties();
1:f96a20e:         Properties systemProps = (Properties) originalSystemProps.clone();
1:f96a20e:         systemProps.setProperty("derby.stream.error.file", OUTPUT_DIR + "/derby.log");
1:f96a20e:         System.setProperties(systemProps);
1:f96a20e: 
1:f96a20e:         dataSource = createDataSource();
1:f96a20e:         persistenceAdapter = new CommitFailurePersistenceAdapter(dataSource);
1:f96a20e:         broker = createBroker(persistenceAdapter);
1:f96a20e:         broker.start();
1:f96a20e:         connectionFactory = createConnectionFactory(broker.getBrokerName());
1:f96a20e:     }
1:dd2572b: 
1:f96a20e:     private DataSource createDataSource() {
1:f96a20e:         EmbeddedDataSource dataSource = new EmbeddedDataSource();
1:f96a20e:         dataSource.setDatabaseName(OUTPUT_DIR + "/derby-db");
1:f96a20e:         dataSource.setCreateDatabase("create");
1:f96a20e:         return dataSource;
1:f96a20e:     }
1:f96a20e: 
1:f96a20e:     private BrokerService createBroker(PersistenceAdapter persistenceAdapter)
1:f96a20e:             throws IOException {
1:f96a20e:         String brokerName = JmsTransactionCommitFailureTest.class.getSimpleName();
1:f96a20e:         BrokerService broker = new BrokerService();
1:f96a20e:         broker.setDataDirectory(OUTPUT_DIR + "/activemq");
1:f96a20e:         broker.setBrokerName(brokerName);
1:f96a20e:         broker.setDeleteAllMessagesOnStartup(true);
1:f96a20e:         broker.setAdvisorySupport(false);
1:f96a20e:         broker.setUseJmx(false);
1:f96a20e:         if (persistenceAdapter != null) {
1:f96a20e:             broker.setPersistent(true);
1:f96a20e:             broker.setPersistenceAdapter(persistenceAdapter);
1:f96a20e:         }
1:f96a20e:         return broker;
1:f96a20e:     }
1:f96a20e: 
1:f96a20e:     private ConnectionFactory createConnectionFactory(String brokerName) {
1:f96a20e:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://" + brokerName);
1:f96a20e:         factory.setWatchTopicAdvisories(false);
1:f96a20e:         return factory;
1:f96a20e:     }
1:f96a20e: 
1:f96a20e:     private void stopDataSource() {
1:f96a20e:         if (dataSource instanceof EmbeddedDataSource) {
1:f96a20e:             EmbeddedDataSource derbyDataSource = (EmbeddedDataSource) dataSource;
1:f96a20e:             derbyDataSource.setShutdownDatabase("shutdown");
1:f96a20e:             try {
1:f96a20e:                 derbyDataSource.getConnection();
1:f96a20e:             } catch (SQLException ignored) {
1:f96a20e:             }
1:f96a20e:         }
1:f96a20e:     }
1:f96a20e: 
1:f96a20e:     private void stopBroker() throws Exception {
1:f96a20e:         if (broker != null) {
1:f96a20e:             broker.stop();
1:f96a20e:             broker = null;
1:f96a20e:         }
1:f96a20e:     }
1:f96a20e: 
1:f96a20e:     @After
1:f96a20e:     public void tearDown() throws Exception {
1:f96a20e:         try {
1:f96a20e:             stopBroker();
1:f96a20e:             stopDataSource();
1:f96a20e:         } finally {
1:f96a20e:             System.setProperties(originalSystemProps);
1:f96a20e:         }
1:f96a20e:     }
1:f96a20e: 
1:dd2572b:     @Test
1:f96a20e:     public void testJmsTransactionCommitFailure() throws Exception {
1:f96a20e:         String queueName = "testJmsTransactionCommitFailure";
1:f96a20e:         // Send 1.message
1:f96a20e:         sendMessage(queueName, 1);
1:f96a20e:         // Check message count directly in database
1:f96a20e:         Assert.assertEquals(1L, getMessageCount());
1:f96a20e: 
1:f96a20e:         // Set failure flag on persistence adapter
1:f96a20e:         persistenceAdapter.setCommitFailureEnabled(true);
1:f96a20e:         // Send 2.message and 3.message in one JMS transaction
1:f96a20e:         try {
1:f96a20e:             LOGGER.warn("Attempt to send Message-2/Message-3 (first time)...");
1:f96a20e:             sendMessage(queueName, 2);
1:f96a20e:             LOGGER.warn("Message-2/Message-3 successfuly sent (first time)");
1:f96a20e:             Assert.fail();
1:f96a20e:         } catch (JMSException jmse) {
1:f96a20e:             // Expected - decrease message counter (I want to repeat message send)
1:f96a20e:             LOGGER.warn("Attempt to send Message-2/Message-3 failed", jmse);
1:f96a20e:             messageCounter -= 2;
1:f96a20e:             Assert.assertEquals(1L, getMessageCount());
1:f96a20e:         }
1:f96a20e: 
1:f96a20e:         // Reset failure flag on persistence adapter
1:f96a20e:         persistenceAdapter.setCommitFailureEnabled(false);
1:f96a20e:         // Send 2.message again
1:f96a20e:         LOGGER.warn("Attempt to send Message-2/Message-3 (second time)...");
1:f96a20e:         sendMessage(queueName, 2);
1:f96a20e:         LOGGER.warn("Message-2/Message-3 successfuly sent (second time)");
1:f96a20e: 
1:f96a20e:         int expectedMessageCount = 3;
1:f96a20e:         // Check message count directly in database
1:f96a20e:         Assert.assertEquals(3L, getMessageCount());
1:f96a20e:         // Attempt to receive 3 (expected) messages
1:f96a20e:         for (int i = 1; i <= expectedMessageCount; i++) {
1:f96a20e:             Message message = receiveMessage(queueName, 10000);
1:f96a20e:             LOGGER.warn(i + ". Message received (" + message + ")");
1:f96a20e:             Assert.assertNotNull(message);
1:f96a20e:             Assert.assertTrue(message instanceof TextMessage);
1:f96a20e:             Assert.assertEquals(i, message.getIntProperty("MessageId"));
1:f96a20e:             Assert.assertEquals("Message-" + i, ((TextMessage) message).getText());
1:f96a20e:             // Check message count directly in database
1:f96a20e:             //Assert.assertEquals(expectedMessageCount - i, getMessageCount());
1:f96a20e:         }
1:f96a20e: 
1:f96a20e:         // Check message count directly in database
1:f96a20e:         Assert.assertEquals(0, getMessageCount());
1:f96a20e:         // No next message is expected
1:f96a20e:         Assert.assertNull(receiveMessage(queueName, 4000));
1:f96a20e:     }
1:f96a20e: 
1:f96a20e:     @Test
1:f96a20e:     public void testQueueMemoryLeak() throws Exception {
1:f96a20e:         String queueName = "testMemoryLeak";
1:dd2572b: 
1:f96a20e:         sendMessage(queueName, 1);
1:f96a20e: 
1:f96a20e:         // Set failure flag on persistence adapter
1:f96a20e:         persistenceAdapter.setCommitFailureEnabled(true);
1:f96a20e:         try {
1:dd2572b:             for (int i = 0; i < 10; i++) {
1:f96a20e:                 try {
1:f96a20e:                     sendMessage(queueName, 2);
1:f96a20e:                 } catch (JMSException jmse) {
1:f96a20e:                     // Expected
1:dd2572b:                 }
1:dd2572b:             }
1:f96a20e:         } finally {
1:f96a20e:             persistenceAdapter.setCommitFailureEnabled(false);
1:f96a20e:         }
1:f96a20e:         Destination destination = broker.getDestination(new ActiveMQQueue(queueName));
1:f96a20e:         if (destination instanceof org.apache.activemq.broker.region.Queue) {
1:f96a20e:             org.apache.activemq.broker.region.Queue queue = (org.apache.activemq.broker.region.Queue) destination;
1:f96a20e:             Field listField = org.apache.activemq.broker.region.Queue.class.getDeclaredField("indexOrderedCursorUpdates");
1:f96a20e:             listField.setAccessible(true);
1:f96a20e:             List<?> list = (List<?>) listField.get(queue);
1:f96a20e:             Assert.assertEquals(0, list.size());
1:f96a20e:         }
1:f96a20e:     }
1:f96a20e: 
1:f96a20e: 
1:f96a20e:     @Test
1:dd2572b:     public void testQueueMemoryLeakNoTx() throws Exception {
1:dd2572b:         String queueName = "testMemoryLeak";
1:dd2572b: 
1:dd2572b:         sendMessage(queueName, 1);
1:f96a20e: 
1:dd2572b:         // Set failure flag on persistence adapter
1:dd2572b:         persistenceAdapter.setCommitFailureEnabled(true);
1:dd2572b:         try {
1:dd2572b:             for (int i = 0; i < 10; i++) {
1:dd2572b:                 try {
1:dd2572b:                     sendMessage(queueName, 2, false);
1:dd2572b:                 } catch (JMSException jmse) {
1:dd2572b:                     // Expected
1:dd2572b:                 }
1:dd2572b:             }
1:dd2572b:         } finally {
1:dd2572b:             persistenceAdapter.setCommitFailureEnabled(false);
1:dd2572b:         }
1:dd2572b:         Destination destination = broker.getDestination(new ActiveMQQueue(queueName));
1:dd2572b:         if (destination instanceof org.apache.activemq.broker.region.Queue) {
1:dd2572b:             org.apache.activemq.broker.region.Queue queue = (org.apache.activemq.broker.region.Queue) destination;
1:dd2572b:             Field listField = org.apache.activemq.broker.region.Queue.class.getDeclaredField("indexOrderedCursorUpdates");
1:dd2572b:             listField.setAccessible(true);
1:dd2572b:             List<?> list = (List<?>) listField.get(queue);
1:dd2572b:             Assert.assertEquals(0, list.size());
1:f96a20e:         }
1:f96a20e:     }
1:dd2572b: 
1:f96a20e:     private void sendMessage(String queueName, int count) throws JMSException {
1:dd2572b:         sendMessage(queueName, count, true);
1:dd2572b:     }
1:dd2572b: 
1:dd2572b:     private void sendMessage(String queueName, int count, boolean transacted) throws JMSException {
1:f96a20e:         Connection con = connectionFactory.createConnection();
1:f96a20e:         try {
1:dd2572b:             Session session = con.createSession(transacted, transacted ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
1:f96a20e:             try {
1:f96a20e:                 Queue destination = session.createQueue(queueName);
1:f96a20e:                 MessageProducer producer = session.createProducer(destination);
1:f96a20e:                 try {
1:f96a20e:                     for (int i = 0; i < count; i++) {
1:f96a20e:                         TextMessage message = session.createTextMessage();
1:f96a20e:                         message.setIntProperty("MessageId", messageCounter);
1:f96a20e:                         message.setText("Message-" + messageCounter++);
1:f96a20e:                         producer.send(message);
1:f96a20e:                     }
1:dd2572b:                     if (transacted) {
1:dd2572b:                         session.commit();
1:dd2572b:                     }
1:f96a20e:                 } finally {
1:f96a20e:                     producer.close();
1:f96a20e:                 }
1:f96a20e:             } finally {
1:f96a20e:                 session.close();
1:f96a20e:             }
1:f96a20e:         } finally {
1:f96a20e:             con.close();
1:f96a20e:         }
1:f96a20e:     }
1:f96a20e: 
1:f96a20e:     private Message receiveMessage(String queueName, long receiveTimeout)
1:f96a20e:             throws JMSException {
1:f96a20e:         Message message = null;
1:f96a20e:         Connection con = connectionFactory.createConnection();
1:f96a20e:         try {
1:f96a20e:             con.start();
1:f96a20e:             try {
2:f96a20e:                 Session session = con.createSession(true, Session.SESSION_TRANSACTED);
1:f96a20e:                 try {
1:f96a20e:                     Queue destination = session.createQueue(queueName);
1:f96a20e:                     MessageConsumer consumer = session.createConsumer(destination);
1:f96a20e:                     try {
1:f96a20e:                         message = consumer.receive(receiveTimeout);
2:f96a20e:                         session.commit();
1:f96a20e:                     } finally {
1:f96a20e:                         consumer.close();
1:f96a20e:                     }
1:f96a20e:                 } finally {
1:f96a20e:                     session.close();
1:f96a20e:                 }
1:f96a20e:             } finally {
1:f96a20e:                 con.stop();
1:f96a20e:             }
1:f96a20e:         } finally {
1:f96a20e:             con.close();
1:f96a20e:         }
1:f96a20e:         return message;
1:f96a20e:     }
1:f96a20e: 
1:f96a20e:     private long getMessageCount() throws SQLException {
1:f96a20e:         long messageCount = -1;
1:f96a20e:         java.sql.Connection con = dataSource.getConnection();
1:f96a20e:         try {
1:f96a20e:             Statement stmt = con.createStatement();
1:f96a20e:             try {
1:f96a20e:                 ResultSet rs = stmt.executeQuery("select count(*) from activemq_msgs");
1:f96a20e:                 try {
1:f96a20e:                     while (rs.next())
1:f96a20e:                         messageCount = rs.getLong(1);
1:f96a20e:                 } finally {
1:f96a20e:                     rs.close();
1:f96a20e:                 }
1:f96a20e:             } finally {
1:f96a20e:                 stmt.close();
1:f96a20e:             }
1:f96a20e:         } finally {
1:f96a20e:             con.close();
1:f96a20e:         }
1:f96a20e:         return messageCount;
1:f96a20e:     }
1:f96a20e: 
1:f96a20e:     private static class CommitFailurePersistenceAdapter extends JDBCPersistenceAdapter {
1:f96a20e:         private boolean isCommitFailureEnabled;
1:f96a20e:         private int transactionIsolation;
1:f96a20e: 
1:f96a20e:         public CommitFailurePersistenceAdapter(DataSource dataSource) {
1:f96a20e:             setDataSource(dataSource);
1:f96a20e:         }
1:f96a20e: 
1:f96a20e:         public void setCommitFailureEnabled(boolean isCommitFailureEnabled) {
1:f96a20e:             this.isCommitFailureEnabled = isCommitFailureEnabled;
1:f96a20e:         }
1:f96a20e: 
1:f96a20e:         @Override
1:f96a20e:         public void setTransactionIsolation(int transactionIsolation) {
1:f96a20e:             super.setTransactionIsolation(transactionIsolation);
1:f96a20e:             this.transactionIsolation = transactionIsolation;
1:f96a20e:         }
1:f96a20e: 
1:f96a20e:         @Override
1:f96a20e:         public TransactionContext getTransactionContext() throws IOException {
1:f96a20e:             TransactionContext answer = new TransactionContext(this) {
1:f96a20e:                 @Override
1:f96a20e:                 public void executeBatch() throws SQLException {
1:f96a20e:                     if (isCommitFailureEnabled) {
1:f96a20e:                         throw new SQLException("Test commit failure exception");
1:f96a20e:                     }
1:f96a20e:                     super.executeBatch();
1:f96a20e:                 }
1:f96a20e:             };
1:f96a20e:             if (transactionIsolation > 0) {
1:f96a20e:                 answer.setTransactionIsolation(transactionIsolation);
1:f96a20e:             }
1:f96a20e:             return answer;
1:f96a20e:         }
1:f96a20e:     }
1:f96a20e: 
1:f96a20e: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:dd2572b
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < 10; i++) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testQueueMemoryLeakNoTx() throws Exception {
1:         String queueName = "testMemoryLeak";
1: 
1:         sendMessage(queueName, 1);
1: 
1:         // Set failure flag on persistence adapter
1:         persistenceAdapter.setCommitFailureEnabled(true);
1:         try {
1:             for (int i = 0; i < 10; i++) {
1:                 try {
1:                     sendMessage(queueName, 2, false);
1:                 } catch (JMSException jmse) {
1:                     // Expected
1:                 }
1:             }
1:         } finally {
1:             persistenceAdapter.setCommitFailureEnabled(false);
1:         }
1:         Destination destination = broker.getDestination(new ActiveMQQueue(queueName));
1:         if (destination instanceof org.apache.activemq.broker.region.Queue) {
1:             org.apache.activemq.broker.region.Queue queue = (org.apache.activemq.broker.region.Queue) destination;
1:             Field listField = org.apache.activemq.broker.region.Queue.class.getDeclaredField("indexOrderedCursorUpdates");
1:             listField.setAccessible(true);
1:             List<?> list = (List<?>) listField.get(queue);
1:             Assert.assertEquals(0, list.size());
1:         }
1:     }
1: 
1:         sendMessage(queueName, count, true);
1:     }
1: 
1:     private void sendMessage(String queueName, int count, boolean transacted) throws JMSException {
1:             Session session = con.createSession(transacted, transacted ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:                     if (transacted) {
1:                         session.commit();
1:                     }
commit:f96a20e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store.jdbc;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.commons.logging.Log;
1: import org.apache.commons.logging.LogFactory;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import javax.jms.*;
1: import javax.sql.DataSource;
1: import java.io.IOException;
1: import java.lang.reflect.Field;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.List;
1: import java.util.Properties;
1: 
1: public class JmsTransactionCommitFailureTest {
1:     private static final Log LOGGER = LogFactory.getLog(JmsTransactionCommitFailureTest.class);
1:     private static final String OUTPUT_DIR = "target/" + JmsTransactionCommitFailureTest.class.getSimpleName();
1: 
1:     private Properties originalSystemProps;
1:     private DataSource dataSource;
1:     private CommitFailurePersistenceAdapter persistenceAdapter;
1:     private BrokerService broker;
1:     private ConnectionFactory connectionFactory;
1:     private int messageCounter = 1;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         originalSystemProps = System.getProperties();
1:         Properties systemProps = (Properties) originalSystemProps.clone();
1:         systemProps.setProperty("derby.stream.error.file", OUTPUT_DIR + "/derby.log");
1:         System.setProperties(systemProps);
1: 
1:         dataSource = createDataSource();
1:         persistenceAdapter = new CommitFailurePersistenceAdapter(dataSource);
1:         broker = createBroker(persistenceAdapter);
1:         broker.start();
1:         connectionFactory = createConnectionFactory(broker.getBrokerName());
1:     }
1: 
1:     private DataSource createDataSource() {
1:         EmbeddedDataSource dataSource = new EmbeddedDataSource();
1:         dataSource.setDatabaseName(OUTPUT_DIR + "/derby-db");
1:         dataSource.setCreateDatabase("create");
1:         return dataSource;
1:     }
1: 
1:     private BrokerService createBroker(PersistenceAdapter persistenceAdapter)
1:             throws IOException {
1:         String brokerName = JmsTransactionCommitFailureTest.class.getSimpleName();
1:         BrokerService broker = new BrokerService();
1:         broker.setDataDirectory(OUTPUT_DIR + "/activemq");
1:         broker.setBrokerName(brokerName);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setUseJmx(false);
1:         if (persistenceAdapter != null) {
1:             broker.setPersistent(true);
1:             broker.setPersistenceAdapter(persistenceAdapter);
1:         }
1:         return broker;
1:     }
1: 
1:     private ConnectionFactory createConnectionFactory(String brokerName) {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://" + brokerName);
1:         factory.setWatchTopicAdvisories(false);
1:         return factory;
1:     }
1: 
1:     private void stopDataSource() {
1:         if (dataSource instanceof EmbeddedDataSource) {
1:             EmbeddedDataSource derbyDataSource = (EmbeddedDataSource) dataSource;
1:             derbyDataSource.setShutdownDatabase("shutdown");
1:             try {
1:                 derbyDataSource.getConnection();
1:             } catch (SQLException ignored) {
1:             }
1:         }
1:     }
1: 
1:     private void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker = null;
1:         }
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             stopBroker();
1:             stopDataSource();
1:         } finally {
1:             System.setProperties(originalSystemProps);
1:         }
1:     }
1: 
1:     @Test
1:     public void testJmsTransactionCommitFailure() throws Exception {
1:         String queueName = "testJmsTransactionCommitFailure";
1:         // Send 1.message
1:         sendMessage(queueName, 1);
1:         // Check message count directly in database
1:         Assert.assertEquals(1L, getMessageCount());
1: 
1:         // Set failure flag on persistence adapter
1:         persistenceAdapter.setCommitFailureEnabled(true);
1:         // Send 2.message and 3.message in one JMS transaction
1:         try {
1:             LOGGER.warn("Attempt to send Message-2/Message-3 (first time)...");
1:             sendMessage(queueName, 2);
1:             LOGGER.warn("Message-2/Message-3 successfuly sent (first time)");
1:             Assert.fail();
1:         } catch (JMSException jmse) {
1:             // Expected - decrease message counter (I want to repeat message send)
1:             LOGGER.warn("Attempt to send Message-2/Message-3 failed", jmse);
1:             messageCounter -= 2;
1:             Assert.assertEquals(1L, getMessageCount());
1:         }
1: 
1:         // Reset failure flag on persistence adapter
1:         persistenceAdapter.setCommitFailureEnabled(false);
1:         // Send 2.message again
1:         LOGGER.warn("Attempt to send Message-2/Message-3 (second time)...");
1:         sendMessage(queueName, 2);
1:         LOGGER.warn("Message-2/Message-3 successfuly sent (second time)");
1: 
1:         int expectedMessageCount = 3;
1:         // Check message count directly in database
1:         Assert.assertEquals(3L, getMessageCount());
1:         // Attempt to receive 3 (expected) messages
1:         for (int i = 1; i <= expectedMessageCount; i++) {
1:             Message message = receiveMessage(queueName, 10000);
1:             LOGGER.warn(i + ". Message received (" + message + ")");
1:             Assert.assertNotNull(message);
1:             Assert.assertTrue(message instanceof TextMessage);
1:             Assert.assertEquals(i, message.getIntProperty("MessageId"));
1:             Assert.assertEquals("Message-" + i, ((TextMessage) message).getText());
1:             // Check message count directly in database
1:             //Assert.assertEquals(expectedMessageCount - i, getMessageCount());
1:         }
1: 
1:         // Check message count directly in database
1:         Assert.assertEquals(0, getMessageCount());
1:         // No next message is expected
1:         Assert.assertNull(receiveMessage(queueName, 4000));
1:     }
1: 
1:     @Test
1:     public void testQueueMemoryLeak() throws Exception {
1:         String queueName = "testMemoryLeak";
1: 
1:         sendMessage(queueName, 1);
1: 
1:         // Set failure flag on persistence adapter
1:         persistenceAdapter.setCommitFailureEnabled(true);
1:         try {
0:             for (int i = 0; i < 1000; i++) {
1:                 try {
1:                     sendMessage(queueName, 2);
1:                 } catch (JMSException jmse) {
1:                     // Expected
1:                 }
1:             }
1:         } finally {
1:             persistenceAdapter.setCommitFailureEnabled(false);
1:         }
1:         Destination destination = broker.getDestination(new ActiveMQQueue(queueName));
1:         if (destination instanceof org.apache.activemq.broker.region.Queue) {
1:             org.apache.activemq.broker.region.Queue queue = (org.apache.activemq.broker.region.Queue) destination;
1:             Field listField = org.apache.activemq.broker.region.Queue.class.getDeclaredField("indexOrderedCursorUpdates");
1:             listField.setAccessible(true);
1:             List<?> list = (List<?>) listField.get(queue);
1:             Assert.assertEquals(0, list.size());
1:         }
1:     }
1: 
1:     private void sendMessage(String queueName, int count) throws JMSException {
1:         Connection con = connectionFactory.createConnection();
1:         try {
1:             Session session = con.createSession(true, Session.SESSION_TRANSACTED);
1:             try {
1:                 Queue destination = session.createQueue(queueName);
1:                 MessageProducer producer = session.createProducer(destination);
1:                 try {
1:                     for (int i = 0; i < count; i++) {
1:                         TextMessage message = session.createTextMessage();
1:                         message.setIntProperty("MessageId", messageCounter);
1:                         message.setText("Message-" + messageCounter++);
1:                         producer.send(message);
1:                     }
1:                     session.commit();
1:                 } finally {
1:                     producer.close();
1:                 }
1:             } finally {
1:                 session.close();
1:             }
1:         } finally {
1:             con.close();
1:         }
1:     }
1: 
1:     private Message receiveMessage(String queueName, long receiveTimeout)
1:             throws JMSException {
1:         Message message = null;
1:         Connection con = connectionFactory.createConnection();
1:         try {
1:             con.start();
1:             try {
1:                 Session session = con.createSession(true, Session.SESSION_TRANSACTED);
1:                 try {
1:                     Queue destination = session.createQueue(queueName);
1:                     MessageConsumer consumer = session.createConsumer(destination);
1:                     try {
1:                         message = consumer.receive(receiveTimeout);
1:                         session.commit();
1:                     } finally {
1:                         consumer.close();
1:                     }
1:                 } finally {
1:                     session.close();
1:                 }
1:             } finally {
1:                 con.stop();
1:             }
1:         } finally {
1:             con.close();
1:         }
1:         return message;
1:     }
1: 
1:     private long getMessageCount() throws SQLException {
1:         long messageCount = -1;
1:         java.sql.Connection con = dataSource.getConnection();
1:         try {
1:             Statement stmt = con.createStatement();
1:             try {
1:                 ResultSet rs = stmt.executeQuery("select count(*) from activemq_msgs");
1:                 try {
1:                     while (rs.next())
1:                         messageCount = rs.getLong(1);
1:                 } finally {
1:                     rs.close();
1:                 }
1:             } finally {
1:                 stmt.close();
1:             }
1:         } finally {
1:             con.close();
1:         }
1:         return messageCount;
1:     }
1: 
1:     private static class CommitFailurePersistenceAdapter extends JDBCPersistenceAdapter {
1:         private boolean isCommitFailureEnabled;
1:         private int transactionIsolation;
1: 
1:         public CommitFailurePersistenceAdapter(DataSource dataSource) {
1:             setDataSource(dataSource);
1:         }
1: 
1:         public void setCommitFailureEnabled(boolean isCommitFailureEnabled) {
1:             this.isCommitFailureEnabled = isCommitFailureEnabled;
1:         }
1: 
1:         @Override
1:         public void setTransactionIsolation(int transactionIsolation) {
1:             super.setTransactionIsolation(transactionIsolation);
1:             this.transactionIsolation = transactionIsolation;
1:         }
1: 
1:         @Override
1:         public TransactionContext getTransactionContext() throws IOException {
1:             TransactionContext answer = new TransactionContext(this) {
1:                 @Override
1:                 public void executeBatch() throws SQLException {
1:                     if (isCommitFailureEnabled) {
1:                         throw new SQLException("Test commit failure exception");
1:                     }
1:                     super.executeBatch();
1:                 }
1:             };
1:             if (transactionIsolation > 0) {
1:                 answer.setTransactionIsolation(transactionIsolation);
1:             }
1:             return answer;
1:         }
1:     }
1: 
1: }
============================================================================