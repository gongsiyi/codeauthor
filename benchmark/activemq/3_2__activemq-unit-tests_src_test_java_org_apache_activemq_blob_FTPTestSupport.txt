1:948e386: /**
1:948e386:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:948e386:  * contributor license agreements.  See the NOTICE file distributed with
1:948e386:  * this work for additional information regarding copyright ownership.
1:948e386:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:948e386:  * (the "License"); you may not use this file except in compliance with
1:948e386:  * the License.  You may obtain a copy of the License at
1:948e386:  *
1:948e386:  *      http://www.apache.org/licenses/LICENSE-2.0
1:948e386:  *
1:948e386:  * Unless required by applicable law or agreed to in writing, software
1:948e386:  * distributed under the License is distributed on an "AS IS" BASIS,
1:948e386:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:948e386:  * See the License for the specific language governing permissions and
1:948e386:  * limitations under the License.
1:948e386:  */
1:a34c808: package org.apache.activemq.blob;
15:a34c808: 
1:a34c808: import java.io.File;
1:a34c808: import java.util.ArrayList;
1:a34c808: import java.util.List;
1:a34c808: 
1:a34c808: import javax.jms.Connection;
1:a34c808: 
1:a34c808: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:af159dd: import org.apache.activemq.util.IOHelper;
1:a34c808: import org.apache.ftpserver.FtpServer;
1:a34c808: import org.apache.ftpserver.FtpServerFactory;
1:a34c808: import org.apache.ftpserver.ftplet.Authority;
1:a34c808: import org.apache.ftpserver.ftplet.UserManager;
1:a34c808: import org.apache.ftpserver.listener.ListenerFactory;
1:a34c808: import org.apache.ftpserver.usermanager.PropertiesUserManagerFactory;
1:a34c808: import org.apache.ftpserver.usermanager.impl.BaseUser;
1:a34c808: import org.apache.ftpserver.usermanager.impl.WritePermission;
1:a34c808: import org.jmock.Mockery;
1:a34c808: 
1:3af93f1: public abstract class FTPTestSupport extends EmbeddedBrokerTestSupport {
1:9f5fff7: 
1:a34c808:     protected static final String ftpServerListenerName = "default";
1:a34c808:     protected Connection connection;
1:a34c808:     protected FtpServer server;
1:a34c808:     String userNamePass = "activemq";
1:a34c808: 
1:a34c808:     Mockery context = null;
1:a34c808:     String ftpUrl;
1:a34c808:     int ftpPort;
1:9f5fff7: 
1:a34c808:     final File ftpHomeDirFile = new File("target/FTPBlobTest/ftptest");
1:9f5fff7: 
1:9f5fff7:     @Override
1:a34c808:     protected void setUp() throws Exception {
1:9f5fff7: 
1:a34c808:         if (ftpHomeDirFile.getParentFile().exists()) {
1:af159dd:             IOHelper.deleteFile(ftpHomeDirFile.getParentFile());
1:a34c808:         }
1:a34c808:         ftpHomeDirFile.mkdirs();
1:a34c808:         ftpHomeDirFile.getParentFile().deleteOnExit();
1:9f5fff7: 
1:a34c808:         FtpServerFactory serverFactory = new FtpServerFactory();
1:a34c808:         ListenerFactory factory = new ListenerFactory();
1:9f5fff7: 
1:a34c808:         PropertiesUserManagerFactory userManagerFactory = new PropertiesUserManagerFactory();
1:a34c808:         UserManager userManager = userManagerFactory.createUserManager();
1:a34c808: 
1:a34c808:         BaseUser user = new BaseUser();
1:a34c808:         user.setName("activemq");
1:a34c808:         user.setPassword("activemq");
1:a34c808:         user.setHomeDirectory(ftpHomeDirFile.getParent());
1:9f5fff7: 
1:a34c808:         // authorize user
1:a34c808:         List<Authority> auths = new ArrayList<Authority>();
1:a34c808:         Authority auth = new WritePermission();
1:a34c808:         auths.add(auth);
1:a34c808:         user.setAuthorities(auths);
1:9f5fff7: 
1:a34c808:         userManager.save(user);
1:a34c808: 
1:a34c808:         BaseUser guest = new BaseUser();
1:a34c808:         guest.setName("guest");
1:a34c808:         guest.setPassword("guest");
1:a34c808:         guest.setHomeDirectory(ftpHomeDirFile.getParent());
1:9f5fff7: 
1:a34c808:         userManager.save(guest);
1:9f5fff7: 
1:a34c808:         serverFactory.setUserManager(userManager);
1:a34c808:         factory.setPort(0);
1:a34c808:         serverFactory.addListener(ftpServerListenerName, factory
1:a34c808:                 .createListener());
1:a34c808:         server = serverFactory.createServer();
1:a34c808:         server.start();
1:a34c808:         ftpPort = serverFactory.getListener(ftpServerListenerName)
1:a34c808:                 .getPort();
1:a34c808:         super.setUp();
1:a34c808:     }
1:9f5fff7: 
1:a34c808:     public void setConnection() throws Exception {
1:a34c808:         ftpUrl = "ftp://"
1:a34c808:             + userNamePass
1:a34c808:             + ":"
1:a34c808:             + userNamePass
1:a34c808:             + "@localhost:"
1:a34c808:             + ftpPort
1:a34c808:             + "/ftptest/";
1:a34c808:         bindAddress = "vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=" + ftpUrl;
1:9f5fff7: 
1:a34c808:         connectionFactory = createConnectionFactory();
1:9f5fff7: 
1:a34c808:         connection = createConnection();
1:9f5fff7:         connection.start();
1:a34c808:     }
1:9f5fff7: 
1:9f5fff7:     @Override
1:a34c808:     protected void tearDown() throws Exception {
1:a34c808:         if (connection != null) {
1:9f5fff7:             connection.close();
1:a34c808:         }
1:a34c808:         super.tearDown();
1:a34c808:         if (server != null) {
1:a34c808:             server.stop();
1:a34c808:         }
1:af159dd:         IOHelper.deleteFile(ftpHomeDirFile.getParentFile());
1:a34c808:     }
1:a34c808: 
1:a34c808: 
1:a34c808: 
1:a34c808: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9f5fff7
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     @Override
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         connection.start();
1: 
1:     @Override
1:             connection.close();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:948e386
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:af159dd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IOHelper;
/////////////////////////////////////////////////////////////////////////
1:             IOHelper.deleteFile(ftpHomeDirFile.getParentFile());
/////////////////////////////////////////////////////////////////////////
1:         IOHelper.deleteFile(ftpHomeDirFile.getParentFile());
commit:3af93f1
/////////////////////////////////////////////////////////////////////////
1: public abstract class FTPTestSupport extends EmbeddedBrokerTestSupport {
commit:a34c808
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.blob;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.ftpserver.FtpServer;
1: import org.apache.ftpserver.FtpServerFactory;
1: import org.apache.ftpserver.ftplet.Authority;
1: import org.apache.ftpserver.ftplet.UserManager;
1: import org.apache.ftpserver.listener.ListenerFactory;
1: import org.apache.ftpserver.usermanager.PropertiesUserManagerFactory;
1: import org.apache.ftpserver.usermanager.impl.BaseUser;
1: import org.apache.ftpserver.usermanager.impl.WritePermission;
1: import org.jmock.Mockery;
1: 
0: public class FTPTestSupport extends EmbeddedBrokerTestSupport {
1:     
1:     protected static final String ftpServerListenerName = "default";
1:     protected Connection connection;
1:     protected FtpServer server;
1:     String userNamePass = "activemq";
1: 
1:     Mockery context = null;
1:     String ftpUrl;
1:     int ftpPort;
1:     
1:     final File ftpHomeDirFile = new File("target/FTPBlobTest/ftptest");
1:     
1:     protected void setUp() throws Exception {
1:         
1:         if (ftpHomeDirFile.getParentFile().exists()) {
0:             ftpHomeDirFile.getParentFile().delete();
1:         }
1:         ftpHomeDirFile.mkdirs();
1:         ftpHomeDirFile.getParentFile().deleteOnExit();
1: 
1:         FtpServerFactory serverFactory = new FtpServerFactory();
1:         ListenerFactory factory = new ListenerFactory();
1: 
1:         PropertiesUserManagerFactory userManagerFactory = new PropertiesUserManagerFactory();
1:         UserManager userManager = userManagerFactory.createUserManager();
1: 
1:         BaseUser user = new BaseUser();
1:         user.setName("activemq");
1:         user.setPassword("activemq");
1:         user.setHomeDirectory(ftpHomeDirFile.getParent());
1:         
1:         // authorize user
1:         List<Authority> auths = new ArrayList<Authority>();
1:         Authority auth = new WritePermission();
1:         auths.add(auth);
1:         user.setAuthorities(auths);
1:         
1:         userManager.save(user);
1: 
1:         BaseUser guest = new BaseUser();
1:         guest.setName("guest");
1:         guest.setPassword("guest");
1:         guest.setHomeDirectory(ftpHomeDirFile.getParent());
1:         
1:         userManager.save(guest);
1:         
1:         serverFactory.setUserManager(userManager);
1:         factory.setPort(0);
1:         serverFactory.addListener(ftpServerListenerName, factory
1:                 .createListener());
1:         server = serverFactory.createServer();
1:         server.start();
1:         ftpPort = serverFactory.getListener(ftpServerListenerName)
1:                 .getPort();
1:         super.setUp();
1:     }
1:     
1:     public void setConnection() throws Exception {
1:         ftpUrl = "ftp://"
1:             + userNamePass
1:             + ":"
1:             + userNamePass
1:             + "@localhost:"
1:             + ftpPort
1:             + "/ftptest/";
1:         bindAddress = "vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=" + ftpUrl;
1:         
1:         connectionFactory = createConnectionFactory();
1:         
1:         connection = createConnection();
0:         connection.start();        
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
0:             connection.stop();
1:         }
1:         super.tearDown();
1:         if (server != null) {
1:             server.stop();
1:         }
1:     }
1: 
1:     
1:     
1: }
============================================================================