1:8b36701: /**
1:8b36701:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8b36701:  * contributor license agreements.  See the NOTICE file distributed with
1:8b36701:  * this work for additional information regarding copyright ownership.
1:8b36701:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8b36701:  * (the "License"); you may not use this file except in compliance with
1:8b36701:  * the License.  You may obtain a copy of the License at
1:8b36701:  *
1:8b36701:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8b36701:  *
1:8b36701:  * Unless required by applicable law or agreed to in writing, software
1:8b36701:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8b36701:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8b36701:  * See the License for the specific language governing permissions and
1:8b36701:  * limitations under the License.
1:8b36701:  */
1:8b36701: package org.apache.activemq.transport.amqp;
1:8b36701: 
1:8b36701: import static org.junit.Assert.assertTrue;
1:8b36701: 
1:8b36701: import java.io.IOException;
1:8b36701: import java.net.Socket;
1:8b36701: import java.util.Arrays;
1:8b36701: import java.util.Collection;
1:94937e8: import java.util.concurrent.TimeUnit;
1:8b36701: 
1:8b36701: import javax.net.ssl.SSLSocketFactory;
1:8b36701: 
1:8b36701: import org.apache.activemq.util.Wait;
1:8b36701: import org.junit.After;
1:8b36701: import org.junit.Test;
1:8b36701: import org.junit.runner.RunWith;
1:8b36701: import org.junit.runners.Parameterized;
1:8b36701: import org.junit.runners.Parameterized.Parameters;
1:8b36701: import org.slf4j.Logger;
1:8b36701: import org.slf4j.LoggerFactory;
1:8b36701: 
1:8b36701: /**
1:8b36701:  * Test that connection attempts that don't send the connect performative
1:8b36701:  * get cleaned up by the inactivity monitor.
1:8b36701:  */
1:8b36701: @RunWith(Parameterized.class)
1:8b36701: public class AmqpConnectTimeoutTest extends AmqpTestSupport {
1:8b36701: 
1:8b36701:     private static final Logger LOG = LoggerFactory.getLogger(AmqpConnectTimeoutTest.class);
1:8b36701: 
1:8b36701:     private Socket connection;
1:8b36701:     protected boolean useSSL;
1:8b36701:     protected String connectorScheme;
1:8b36701: 
1:8b36701:     @Parameters(name="{0}")
1:8b36701:     public static Collection<Object[]> data() {
1:8b36701:         return Arrays.asList(new Object[][] {
1:8b36701:                 {"amqp", false},
1:8b36701:                 {"amqp+ssl", true},
1:8b36701:                 {"amqp+nio", false},
1:8b36701:                 {"amqp+nio+ssl", true}
1:8b36701:             });
1:8b36701:     }
1:8b36701: 
1:8b36701:     public AmqpConnectTimeoutTest(String connectorScheme, boolean useSSL) {
1:8b36701:         this.connectorScheme = connectorScheme;
1:8b36701:         this.useSSL = useSSL;
1:8b36701:     }
1:8b36701: 
1:8b36701:     protected String getConnectorScheme() {
1:8b36701:         return connectorScheme;
1:8b36701:     }
1:8b36701: 
1:8b36701:     protected boolean isUseSSL() {
1:8b36701:         return useSSL;
1:8b36701:     }
1:8b36701: 
1:8b36701:     @Override
1:8b36701:     protected boolean isUseSslConnector() {
1:a812131:         return isUseSSL();
1:8b36701:     }
1:8b36701: 
1:8b36701:     @Override
1:8b36701:     protected boolean isUseNioConnector() {
3:8b36701:         return true;
1:8b36701:     }
1:8b36701: 
1:8b36701:     @Override
1:8b36701:     protected boolean isUseNioPlusSslConnector() {
1:a812131:         return isUseSSL();
1:8b36701:     }
1:8b36701: 
1:8b36701:     @Override
1:8b36701:     @After
1:8b36701:     public void tearDown() throws Exception {
1:8b36701:         if (connection != null) {
1:8b36701:             try {
1:8b36701:                 connection.close();
1:8b36701:             } catch (Throwable e) {}
1:8b36701:             connection = null;
1:8b36701:         }
1:8b36701:         super.tearDown();
1:8b36701:     }
1:8b36701: 
1:8b36701:     @Override
1:8b36701:     public String getAdditionalConfig() {
1:94937e8:         return "&transport.connectAttemptTimeout=1200";
1:8b36701:     }
1:8b36701: 
1:94937e8:     @Test(timeout = 30000)
1:8b36701:     public void testInactivityMonitor() throws Exception {
1:8b36701: 
1:8b36701:         Thread t1 = new Thread() {
1:8b36701: 
1:8b36701:             @Override
1:8b36701:             public void run() {
1:8b36701:                 try {
1:8b36701:                     connection = createConnection();
1:8b36701:                     connection.getOutputStream().write('A');
1:8b36701:                     connection.getOutputStream().flush();
1:8b36701:                 } catch (Exception ex) {
1:8b36701:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:8b36701:                     exceptions.add(ex);
1:8b36701:                 }
1:8b36701:             }
1:8b36701:         };
1:8b36701: 
1:8b36701:         t1.start();
1:8b36701: 
1:8b36701:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:8b36701:              @Override
1:8b36701:              public boolean isSatisified() throws Exception {
1:8b36701:                  return 1 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:8b36701:              }
1:94937e8:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1:8b36701: 
1:8b36701:         // and it should be closed due to inactivity
1:8b36701:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:8b36701:             @Override
1:8b36701:             public boolean isSatisified() throws Exception {
1:8b36701:                 return 0 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:8b36701:             }
1:94937e8:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));
1:8b36701: 
1:8b36701:         assertTrue("no exceptions", exceptions.isEmpty());
1:8b36701:     }
1:8b36701: 
1:8b36701:     protected Socket createConnection() throws IOException {
1:8b36701: 
1:8b36701:         int port = 0;
1:8b36701:         switch (connectorScheme) {
1:8b36701:             case "amqp":
1:36bd069:                 port = this.amqpPort;
1:8b36701:                 break;
1:8b36701:             case "amqp+ssl":
1:36bd069:                 port = this.amqpSslPort;
1:8b36701:                 break;
1:8b36701:             case "amqp+nio":
1:36bd069:                 port = this.amqpNioPort;
1:8b36701:                 break;
1:8b36701:             case "amqp+nio+ssl":
1:36bd069:                 port = this.amqpNioPlusSslPort;
1:8b36701:                 break;
1:8b36701:             default:
1:8b36701:                 throw new IOException("Invalid AMQP connector scheme passed to test.");
1:8b36701:         }
1:8b36701: 
1:8b36701:         if (isUseSSL()) {
1:8b36701:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:8b36701:         } else {
1:8b36701:             return new Socket("localhost", port);
1:8b36701:         }
1:8b36701:     }
1:8b36701: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a812131
/////////////////////////////////////////////////////////////////////////
1:         return isUseSSL();
/////////////////////////////////////////////////////////////////////////
1:         return isUseSSL();
commit:36bd069
/////////////////////////////////////////////////////////////////////////
1:                 port = this.amqpPort;
1:                 port = this.amqpSslPort;
1:                 port = this.amqpNioPort;
1:                 port = this.amqpNioPlusSslPort;
commit:94937e8
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         return "&transport.connectAttemptTimeout=1200";
1:     @Test(timeout = 30000)
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));
commit:8b36701
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that connection attempts that don't send the connect performative
1:  * get cleaned up by the inactivity monitor.
1:  */
1: @RunWith(Parameterized.class)
1: public class AmqpConnectTimeoutTest extends AmqpTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpConnectTimeoutTest.class);
1: 
1:     private Socket connection;
1:     protected boolean useSSL;
1:     protected String connectorScheme;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"amqp", false},
1:                 {"amqp+ssl", true},
1:                 {"amqp+nio", false},
1:                 {"amqp+nio+ssl", true}
1:             });
1:     }
1: 
1:     public AmqpConnectTimeoutTest(String connectorScheme, boolean useSSL) {
1:         this.connectorScheme = connectorScheme;
1:         this.useSSL = useSSL;
1:     }
1: 
1:     protected String getConnectorScheme() {
1:         return connectorScheme;
1:     }
1: 
1:     protected boolean isUseSSL() {
1:         return useSSL;
1:     }
1: 
1:     @Override
1:     protected boolean isUseSslConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Throwable e) {}
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     public String getAdditionalConfig() {
0:         return "&transport.connectAttemptTimeout=2000";
1:     }
1: 
0:     @Test(timeout = 60 * 1000)
1:     public void testInactivityMonitor() throws Exception {
1: 
1:         Thread t1 = new Thread() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     connection = createConnection();
1:                     connection.getOutputStream().write('A');
1:                     connection.getOutputStream().flush();
1:                 } catch (Exception ex) {
1:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:                     exceptions.add(ex);
1:                 }
1:             }
1:         };
1: 
1:         t1.start();
1: 
1:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:              @Override
1:              public boolean isSatisified() throws Exception {
1:                  return 1 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:              }
0:          }));
1: 
1:         // and it should be closed due to inactivity
1:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 0 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:             }
0:         }));
1: 
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
1: 
1:     protected Socket createConnection() throws IOException {
1: 
1:         int port = 0;
1:         switch (connectorScheme) {
1:             case "amqp":
0:                 port = this.port;
1:                 break;
1:             case "amqp+ssl":
0:                 port = this.sslPort;
1:                 break;
1:             case "amqp+nio":
0:                 port = this.nioPort;
1:                 break;
1:             case "amqp+nio+ssl":
0:                 port = this.nioPlusSslPort;
1:                 break;
1:             default:
1:                 throw new IOException("Invalid AMQP connector scheme passed to test.");
1:         }
1: 
1:         if (isUseSSL()) {
1:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:         } else {
1:             return new Socket("localhost", port);
1:         }
1:     }
1: }
============================================================================