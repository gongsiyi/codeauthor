1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
6:d29ca2a: 
1:d29ca2a: import java.math.BigDecimal;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Represents a constant expression
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class ConstantExpression implements Expression {
1:d29ca2a: 
1:d29ca2a:     static class BooleanConstantExpression extends ConstantExpression implements BooleanExpression {
1:d29ca2a:         public BooleanConstantExpression(Object value) {
1:d29ca2a:             super(value);
6:d29ca2a:         }
1:f812e34: 
1:d29ca2a:         public boolean matches(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:             Object object = evaluate(message);
1:f812e34:             return object != null && object == Boolean.TRUE;
1:f812e34:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static final BooleanConstantExpression NULL = new BooleanConstantExpression(null);
1:d29ca2a:     public static final BooleanConstantExpression TRUE = new BooleanConstantExpression(Boolean.TRUE);
1:d29ca2a:     public static final BooleanConstantExpression FALSE = new BooleanConstantExpression(Boolean.FALSE);
1:d29ca2a: 
1:d29ca2a:     private Object value;
1:d29ca2a: 
1:933eb2f:     public ConstantExpression(Object value) {
1:933eb2f:         this.value = value;
1:933eb2f:     }
1:933eb2f: 
1:d29ca2a:     public static ConstantExpression createFromDecimal(String text) {
1:d29ca2a: 
1:f812e34:         // Strip off the 'l' or 'L' if needed.
1:ecf89a6:         if (text.endsWith("l") || text.endsWith("L")) {
1:f812e34:             text = text.substring(0, text.length() - 1);
1:ecf89a6:         }
1:f812e34: 
1:f812e34:         Number value;
1:f812e34:         try {
1:f812e34:             value = new Long(text);
1:f812e34:         } catch (NumberFormatException e) {
1:f812e34:             // The number may be too big to fit in a long.
1:f812e34:             value = new BigDecimal(text);
1:f812e34:         }
1:f812e34: 
1:d29ca2a:         long l = value.longValue();
1:d29ca2a:         if (Integer.MIN_VALUE <= l && l <= Integer.MAX_VALUE) {
1:d36c0d4:             value = Integer.valueOf(value.intValue());
1:d29ca2a:         }
1:d29ca2a:         return new ConstantExpression(value);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static ConstantExpression createFromHex(String text) {
1:d36c0d4:         Number value = Long.valueOf(Long.parseLong(text.substring(2), 16));
1:d29ca2a:         long l = value.longValue();
1:d29ca2a:         if (Integer.MIN_VALUE <= l && l <= Integer.MAX_VALUE) {
1:d36c0d4:             value = Integer.valueOf(value.intValue());
1:d29ca2a:         }
1:d29ca2a:         return new ConstantExpression(value);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static ConstantExpression createFromOctal(String text) {
1:d36c0d4:         Number value = Long.valueOf(Long.parseLong(text, 8));
1:d29ca2a:         long l = value.longValue();
1:d29ca2a:         if (Integer.MIN_VALUE <= l && l <= Integer.MAX_VALUE) {
1:d36c0d4:             value = Integer.valueOf(value.intValue());
1:d29ca2a:         }
1:d29ca2a:         return new ConstantExpression(value);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static ConstantExpression createFloat(String text) {
1:d29ca2a:         Number value = new Double(text);
1:d29ca2a:         return new ConstantExpression(value);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:         return value;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object getValue() {
1:d29ca2a:         return value;
1:f812e34:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see java.lang.Object#toString()
1:d29ca2a:      */
1:d29ca2a:     public String toString() {
1:d29ca2a:         if (value == null) {
1:d29ca2a:             return "NULL";
1:d29ca2a:         }
1:d29ca2a:         if (value instanceof Boolean) {
1:f812e34:             return ((Boolean)value).booleanValue() ? "TRUE" : "FALSE";
1:d29ca2a:         }
1:d29ca2a:         if (value instanceof String) {
1:f812e34:             return encodeString((String)value);
1:d29ca2a:         }
1:d29ca2a:         return value.toString();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * TODO: more efficient hashCode()
1:f812e34:      * 
1:d29ca2a:      * @see java.lang.Object#hashCode()
1:d29ca2a:      */
1:d29ca2a:     public int hashCode() {
1:d29ca2a:         return toString().hashCode();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * TODO: more efficient hashCode()
1:f812e34:      * 
1:d29ca2a:      * @see java.lang.Object#equals(java.lang.Object)
1:d29ca2a:      */
1:d29ca2a:     public boolean equals(Object o) {
1:d29ca2a: 
1:d29ca2a:         if (o == null || !this.getClass().equals(o.getClass())) {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:d29ca2a:         return toString().equals(o.toString());
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Encodes the value of string so that it looks like it would look like when
1:f812e34:      * it was provided in a selector.
1:f812e34:      * 
1:d29ca2a:      * @param string
1:d29ca2a:      * @return
1:d29ca2a:      */
1:d29ca2a:     public static String encodeString(String s) {
1:d29ca2a:         StringBuffer b = new StringBuffer();
1:d29ca2a:         b.append('\'');
1:d29ca2a:         for (int i = 0; i < s.length(); i++) {
1:d29ca2a:             char c = s.charAt(i);
1:d29ca2a:             if (c == '\'') {
1:d29ca2a:                 b.append(c);
1:d29ca2a:             }
1:d29ca2a:             b.append(c);
1:d29ca2a:         }
1:d29ca2a:         b.append('\'');
1:d29ca2a:         return b.toString();
1:86cbdfd:     }
1:f812e34: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public ConstantExpression(Object value) {
1:         this.value = value;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (text.endsWith("l") || text.endsWith("L")) {
1:         }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:             return object != null && object == Boolean.TRUE;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         // Strip off the 'l' or 'L' if needed.
0:         if (text.endsWith("l") || text.endsWith("L"))
1:             text = text.substring(0, text.length() - 1);
1: 
1:         Number value;
1:         try {
1:             value = new Long(text);
1:         } catch (NumberFormatException e) {
1:             // The number may be too big to fit in a long.
1:             value = new BigDecimal(text);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
/////////////////////////////////////////////////////////////////////////
1:             return ((Boolean)value).booleanValue() ? "TRUE" : "FALSE";
1:             return encodeString((String)value);
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Encodes the value of string so that it looks like it would look like when
1:      * it was provided in a selector.
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.math.BigDecimal;
1: 
1: import javax.jms.JMSException;
1: 
1: /**
1:  * Represents a constant expression
1:  * 
0:  * @version $Revision: 1.2 $
1:  */
1: public class ConstantExpression implements Expression {
1: 
1:     static class BooleanConstantExpression extends ConstantExpression implements BooleanExpression {
1:         public BooleanConstantExpression(Object value) {
1:             super(value);
1:         }
1:         public boolean matches(MessageEvaluationContext message) throws JMSException {
1:             Object object = evaluate(message);
0:             return object!=null && object==Boolean.TRUE;            
1:         }        
1:     }
1: 
1:     public static final BooleanConstantExpression NULL = new BooleanConstantExpression(null);
1:     public static final BooleanConstantExpression TRUE = new BooleanConstantExpression(Boolean.TRUE);
1:     public static final BooleanConstantExpression FALSE = new BooleanConstantExpression(Boolean.FALSE);
1: 
1:     private Object value;
1: 
1:     public static ConstantExpression createFromDecimal(String text) {
1:     	    	
0:     	// Strip off the 'l' or 'L' if needed.
0:     	if( text.endsWith("l") || text.endsWith("L") )
0:     		text = text.substring(0, text.length()-1);
1: 
0:     	Number value;
0:     	try {
0:     		value = new Long(text);
0:     	} catch ( NumberFormatException e) {
0:     		// The number may be too big to fit in a long.
0:         	value = new BigDecimal(text);    		
1:     	}
1:     	
1:         long l = value.longValue();
1:         if (Integer.MIN_VALUE <= l && l <= Integer.MAX_VALUE) {
0:             value = new Integer(value.intValue());
1:         }
1:         return new ConstantExpression(value);
1:     }
1: 
1:     public static ConstantExpression createFromHex(String text) {
0:         Number value = new Long(Long.parseLong(text.substring(2), 16));
1:         long l = value.longValue();
1:         if (Integer.MIN_VALUE <= l && l <= Integer.MAX_VALUE) {
0:             value = new Integer(value.intValue());
1:         }
1:         return new ConstantExpression(value);
1:     }
1: 
1:     public static ConstantExpression createFromOctal(String text) {
0:         Number value = new Long(Long.parseLong(text, 8));
1:         long l = value.longValue();
1:         if (Integer.MIN_VALUE <= l && l <= Integer.MAX_VALUE) {
0:             value = new Integer(value.intValue());
1:         }
1:         return new ConstantExpression(value);
1:     }
1: 
1:     public static ConstantExpression createFloat(String text) {
1:         Number value = new Double(text);
1:         return new ConstantExpression(value);
1:     }
1: 
0:     public ConstantExpression(Object value) {
0:         this.value = value;
1:     }
1: 
1:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:         return value;
1:     }
1: 
1:     public Object getValue() {
1:         return value;
1:     }    
1: 
1:     /**
1:      * @see java.lang.Object#toString()
1:      */
1:     public String toString() {
1:         if (value == null) {
1:             return "NULL";
1:         }
1:         if (value instanceof Boolean) {
0:             return ((Boolean) value).booleanValue() ? "TRUE" : "FALSE";
1:         }
1:         if (value instanceof String) {
0:             return encodeString((String) value);
1:         }
1:         return value.toString();
1:     }
1: 
1:     /**
1:      * TODO: more efficient hashCode()
1:      *
1:      * @see java.lang.Object#hashCode()
1:      */
1:     public int hashCode() {
1:         return toString().hashCode();
1:     }
1: 
1:     /**
1:      * TODO: more efficient hashCode()
1:      *
1:      * @see java.lang.Object#equals(java.lang.Object)
1:      */
1:     public boolean equals(Object o) {
1: 
1:         if (o == null || !this.getClass().equals(o.getClass())) {
1:             return false;
1:         }
1:         return toString().equals(o.toString());
1: 
1:     }
1: 
1: 
1:     /**
0:      * Encodes the value of string so that it looks like it would look like
0:      * when it was provided in a selector.
1:      *
1:      * @param string
1:      * @return
1:      */
1:     public static String encodeString(String s) {
1:         StringBuffer b = new StringBuffer();
1:         b.append('\'');
1:         for (int i = 0; i < s.length(); i++) {
1:             char c = s.charAt(i);
1:             if (c == '\'') {
1:                 b.append(c);
1:             }
1:             b.append(c);
1:         }
1:         b.append('\'');
1:         return b.toString();
1:     }
1:     
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:             value = Integer.valueOf(value.intValue());
1:         Number value = Long.valueOf(Long.parseLong(text.substring(2), 16));
1:             value = Integer.valueOf(value.intValue());
1:         Number value = Long.valueOf(Long.parseLong(text, 8));
1:             value = Integer.valueOf(value.intValue());
============================================================================