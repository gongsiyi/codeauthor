1:3306467: /**
1:3306467:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3306467:  * contributor license agreements.  See the NOTICE file distributed with
1:3306467:  * this work for additional information regarding copyright ownership.
1:3306467:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3306467:  * (the "License"); you may not use this file except in compliance with
1:3306467:  * the License.  You may obtain a copy of the License at
1:3306467:  *
1:3306467:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3306467:  *
1:3306467:  * Unless required by applicable law or agreed to in writing, software
1:3306467:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3306467:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3306467:  * See the License for the specific language governing permissions and
1:3306467:  * limitations under the License.
1:3306467:  */
1:3306467: package org.apache.activemq.transport.amqp.protocol;
1:3306467: 
1:0dd806f: import org.apache.activemq.command.LocalTransactionId;
1:7c41ebc: import org.apache.activemq.transport.amqp.AmqpProtocolException;
1:381a1ae: import org.apache.qpid.proton.amqp.transport.ReceiverSettleMode;
1:3306467: import org.apache.qpid.proton.engine.Delivery;
1:3306467: import org.apache.qpid.proton.engine.Receiver;
1:3306467: import org.fusesource.hawtbuf.Buffer;
1:3306467: import org.fusesource.hawtbuf.ByteArrayOutputStream;
1:3306467: import org.slf4j.Logger;
1:3306467: import org.slf4j.LoggerFactory;
1:3306467: 
1:3306467: /**
1:3306467:  * Abstract base that provides common services for AMQP Receiver types.
1:3306467:  */
1:3306467: public abstract class AmqpAbstractReceiver extends AmqpAbstractLink<Receiver> {
1:3306467: 
1:3306467:     private static final Logger LOG = LoggerFactory.getLogger(AmqpAbstractReceiver.class);
1:3306467: 
1:3306467:     protected ByteArrayOutputStream current = new ByteArrayOutputStream();
1:3306467:     protected final byte[] recvBuffer = new byte[1024 * 8];
1:fa81c1f:     protected final int configuredCredit;
1:3306467: 
1:3306467:     /**
1:3306467:      * Handle create of new AMQP Receiver instance.
1:3306467:      *
1:3306467:      * @param session
1:3306467:      *        the AmqpSession that servers as the parent of this Link.
1:3306467:      * @param endpoint
1:3306467:      *        the Receiver endpoint being managed by this class.
1:3306467:      */
1:3306467:     public AmqpAbstractReceiver(AmqpSession session, Receiver endpoint) {
1:3306467:         super(session, endpoint);
1:fa81c1f:         this.configuredCredit = session.getConnection().getConfiguredReceiverCredit();
1:381a1ae: 
1:381a1ae:         // We don't support second so enforce it as First and let remote decide what to do
1:381a1ae:         this.endpoint.setReceiverSettleMode(ReceiverSettleMode.FIRST);
1:381a1ae: 
1:381a1ae:         // Match what the sender mode is
1:381a1ae:         this.endpoint.setSenderSettleMode(endpoint.getRemoteSenderSettleMode());
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void detach() {
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void flow() throws Exception {
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:fa81c1f:      * Returns the amount of receiver credit that has been configured for this AMQP
1:fa81c1f:      * transport.  If no value was configured on the TransportConnector URI then a
1:fa81c1f:      * sensible default is used.
1:fa81c1f:      *
1:fa81c1f:      * @return the configured receiver credit to grant.
1:fa81c1f:      */
1:fa81c1f:     public int getConfiguredReceiverCredit() {
1:fa81c1f:         return configuredCredit;
1:fa81c1f:     }
1:fa81c1f: 
1:fa81c1f:     /**
1:3306467:      * Provide the receiver endpoint with the given amount of credits.
1:3306467:      *
1:3306467:      * @param credits
1:3306467:      *        the credit value to pass on to the wrapped Receiver.
1:3306467:      */
1:3306467:     public void flow(int credits) {
1:3306467:         getEndpoint().flow(credits);
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:0dd806f:     public void commit(LocalTransactionId txnId) throws Exception {
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:0dd806f:     public void rollback(LocalTransactionId txnId) throws Exception {
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void delivery(Delivery delivery) throws Exception {
1:3306467: 
1:3306467:         if (!delivery.isReadable()) {
1:3306467:             LOG.debug("Delivery was not readable!");
1:3306467:             return;
1:3306467:         }
1:3306467: 
1:3306467:         if (current == null) {
1:3306467:             current = new ByteArrayOutputStream();
1:3306467:         }
1:3306467: 
1:3306467:         int count;
1:3306467:         while ((count = getEndpoint().recv(recvBuffer, 0, recvBuffer.length)) > 0) {
1:3306467:             current.write(recvBuffer, 0, count);
1:7c41ebc: 
1:7c41ebc:             if (current.size() > session.getMaxFrameSize()) {
1:7c41ebc:                 throw new AmqpProtocolException("Frame size of " + current.size() + " larger than max allowed " + session.getMaxFrameSize());
1:7c41ebc:             }
1:3306467:         }
1:3306467: 
1:3306467:         // Expecting more deliveries..
1:3306467:         if (count == 0) {
1:3306467:             return;
1:3306467:         }
1:3306467: 
1:3306467:         try {
1:3306467:             processDelivery(delivery, current.toBuffer());
1:3306467:         } finally {
1:3306467:             getEndpoint().advance();
1:3306467:             current = null;
1:3306467:         }
1:3306467:     }
1:3306467: 
1:3306467:     protected abstract void processDelivery(Delivery delivery, Buffer deliveryBytes) throws Exception;
1:3306467: 
1:3306467: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:381a1ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.amqp.transport.ReceiverSettleMode;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // We don't support second so enforce it as First and let remote decide what to do
1:         this.endpoint.setReceiverSettleMode(ReceiverSettleMode.FIRST);
1: 
1:         // Match what the sender mode is
1:         this.endpoint.setSenderSettleMode(endpoint.getRemoteSenderSettleMode());
commit:0dd806f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.LocalTransactionId;
/////////////////////////////////////////////////////////////////////////
1:     public void commit(LocalTransactionId txnId) throws Exception {
1:     public void rollback(LocalTransactionId txnId) throws Exception {
commit:7c41ebc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.AmqpProtocolException;
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (current.size() > session.getMaxFrameSize()) {
1:                 throw new AmqpProtocolException("Frame size of " + current.size() + " larger than max allowed " + session.getMaxFrameSize());
1:             }
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
1: import org.apache.qpid.proton.engine.Delivery;
1: import org.apache.qpid.proton.engine.Receiver;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.fusesource.hawtbuf.ByteArrayOutputStream;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Abstract base that provides common services for AMQP Receiver types.
1:  */
1: public abstract class AmqpAbstractReceiver extends AmqpAbstractLink<Receiver> {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpAbstractReceiver.class);
1: 
1:     protected ByteArrayOutputStream current = new ByteArrayOutputStream();
1:     protected final byte[] recvBuffer = new byte[1024 * 8];
1: 
1:     /**
1:      * Handle create of new AMQP Receiver instance.
1:      *
1:      * @param session
1:      *        the AmqpSession that servers as the parent of this Link.
1:      * @param endpoint
1:      *        the Receiver endpoint being managed by this class.
1:      */
1:     public AmqpAbstractReceiver(AmqpSession session, Receiver endpoint) {
1:         super(session, endpoint);
1:     }
1: 
1:     @Override
1:     public void detach() {
1:     }
1: 
1:     @Override
1:     public void flow() throws Exception {
1:     }
1: 
1:     /**
1:      * Provide the receiver endpoint with the given amount of credits.
1:      *
1:      * @param credits
1:      *        the credit value to pass on to the wrapped Receiver.
1:      */
1:     public void flow(int credits) {
1:         getEndpoint().flow(credits);
1:     }
1: 
1:     @Override
0:     public void commit() throws Exception {
1:     }
1: 
1:     @Override
0:     public void rollback() throws Exception {
1:     }
1: 
1:     @Override
1:     public void delivery(Delivery delivery) throws Exception {
1: 
1:         if (!delivery.isReadable()) {
1:             LOG.debug("Delivery was not readable!");
1:             return;
1:         }
1: 
1:         if (current == null) {
1:             current = new ByteArrayOutputStream();
1:         }
1: 
1:         int count;
1:         while ((count = getEndpoint().recv(recvBuffer, 0, recvBuffer.length)) > 0) {
1:             current.write(recvBuffer, 0, count);
1:         }
1: 
1:         // Expecting more deliveries..
1:         if (count == 0) {
1:             return;
1:         }
1: 
1:         try {
1:             processDelivery(delivery, current.toBuffer());
1:         } finally {
1:             getEndpoint().advance();
1:             current = null;
1:         }
1:     }
1: 
1:     protected abstract void processDelivery(Delivery delivery, Buffer deliveryBytes) throws Exception;
1: 
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:fa81c1f
/////////////////////////////////////////////////////////////////////////
1:     protected final int configuredCredit;
/////////////////////////////////////////////////////////////////////////
1:         this.configuredCredit = session.getConnection().getConfiguredReceiverCredit();
/////////////////////////////////////////////////////////////////////////
1:      * Returns the amount of receiver credit that has been configured for this AMQP
1:      * transport.  If no value was configured on the TransportConnector URI then a
1:      * sensible default is used.
1:      *
1:      * @return the configured receiver credit to grant.
1:      */
1:     public int getConfiguredReceiverCredit() {
1:         return configuredCredit;
1:     }
1: 
1:     /**
============================================================================