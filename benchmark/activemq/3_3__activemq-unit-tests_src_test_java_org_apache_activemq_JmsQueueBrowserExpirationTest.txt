1:174dcbf: /**
1:174dcbf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:174dcbf:  * contributor license agreements.  See the NOTICE file distributed with
1:174dcbf:  * this work for additional information regarding copyright ownership.
1:174dcbf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:174dcbf:  * (the "License"); you may not use this file except in compliance with
1:174dcbf:  * the License.  You may obtain a copy of the License at
1:174dcbf:  *
1:174dcbf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:174dcbf:  *
1:174dcbf:  * Unless required by applicable law or agreed to in writing, software
1:174dcbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:174dcbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:174dcbf:  * See the License for the specific language governing permissions and
1:174dcbf:  * limitations under the License.
1:174dcbf:  */
1:174dcbf: package org.apache.activemq;
3:174dcbf: 
1:174dcbf: import static org.junit.Assert.assertEquals;
1:174dcbf: 
1:174dcbf: import java.net.URI;
1:174dcbf: import java.util.Enumeration;
1:174dcbf: import java.util.concurrent.TimeUnit;
1:174dcbf: 
1:174dcbf: import javax.jms.Connection;
1:174dcbf: import javax.jms.DeliveryMode;
1:174dcbf: import javax.jms.JMSException;
1:174dcbf: import javax.jms.MessageProducer;
1:3dfda80: import javax.jms.Queue;
1:174dcbf: import javax.jms.QueueBrowser;
1:174dcbf: import javax.jms.Session;
1:174dcbf: import javax.jms.TextMessage;
1:174dcbf: 
1:174dcbf: import org.apache.activemq.broker.BrokerService;
1:174dcbf: import org.apache.activemq.broker.TransportConnector;
1:174dcbf: import org.apache.activemq.command.ActiveMQQueue;
1:174dcbf: import org.junit.After;
1:174dcbf: import org.junit.Before;
1:174dcbf: import org.junit.Test;
1:174dcbf: import org.slf4j.Logger;
1:174dcbf: import org.slf4j.LoggerFactory;
1:174dcbf: 
1:174dcbf: /**
1:174dcbf:  * This test shows that when all messages are expired the QueueBrowser will
1:174dcbf:  * still finish properly and not hang indefinitely.  If a queue browser subscription
1:174dcbf:  * detects an expired message, it will tell the broker to expire the message but still
1:174dcbf:  * dispatch the message to the client as we want to get a snapshot in time.  This prevents
1:174dcbf:  * the problem of the browser enumeration returning true for hasMoreElements and then
1:174dcbf:  * hanging forever because all messages expired on dispatch.
1:174dcbf:  *
1:174dcbf:  * See: https://issues.apache.org/jira/browse/AMQ-5340
1:174dcbf:  *
1:174dcbf:  * <p>
1:174dcbf:  * This test is based on a test case submitted by Henno Vermeulen for AMQ-5340
1:174dcbf:  */
1:174dcbf: public class JmsQueueBrowserExpirationTest {
1:174dcbf: 
1:174dcbf:     private static final int MESSAGES_TO_SEND = 50;
1:174dcbf:     // Message expires after 1 second
1:174dcbf:     private static final long TTL = 1000;
1:174dcbf: 
1:c38a61d:     private static final Logger LOG = LoggerFactory.getLogger(JmsQueueBrowserExpirationTest.class);
1:174dcbf: 
1:174dcbf:     private BrokerService broker;
1:174dcbf:     private URI connectUri;
1:174dcbf:     private ActiveMQConnectionFactory factory;
1:174dcbf:     private final ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:174dcbf: 
1:174dcbf:     @Before
1:174dcbf:     public void startBroker() throws Exception {
1:174dcbf:         broker = new BrokerService();
1:174dcbf:         broker.setPersistent(false);
1:174dcbf: 
1:174dcbf:         TransportConnector connector = broker.addConnector("vm://localhost");
1:174dcbf:         broker.deleteAllMessages();
1:174dcbf:         broker.start();
1:174dcbf:         broker.waitUntilStarted();
1:174dcbf:         connectUri = connector.getConnectUri();
1:174dcbf:         factory = new ActiveMQConnectionFactory(connectUri);
1:174dcbf:     }
1:174dcbf: 
1:174dcbf:     @After
1:174dcbf:     public void stopBroker() throws Exception {
1:c38a61d:         if (broker != null) {
1:c38a61d:             broker.stop();
1:c38a61d:             broker.waitUntilStopped();
1:c38a61d:         }
1:174dcbf:     }
1:174dcbf: 
1:c38a61d:     @Test(timeout=10000)
1:174dcbf:     public void testBrowsingExpiration() throws JMSException, InterruptedException {
1:174dcbf: 
1:174dcbf:         sendTestMessages();
1:174dcbf: 
1:174dcbf:         // Browse the queue.
1:174dcbf:         Connection browserConnection = factory.createConnection();
1:174dcbf:         browserConnection.start();
1:174dcbf: 
1:174dcbf:         int browsed = browse(queue, browserConnection);
1:174dcbf: 
1:174dcbf:         // The number of messages browsed should be equal to the number of
1:174dcbf:         // messages sent.
1:174dcbf:         assertEquals(MESSAGES_TO_SEND, browsed);
1:174dcbf: 
1:174dcbf:         long begin = System.nanoTime();
1:174dcbf:         while (browsed != 0) {
1:174dcbf:             // Give JMS threads more opportunity to do their work.
1:174dcbf:             Thread.sleep(100);
1:174dcbf:             browsed = browse(queue, browserConnection);
1:c38a61d:             LOG.info("[{}ms] found {}", TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin), browsed);
1:174dcbf:         }
1:c38a61d:         LOG.info("Finished");
1:174dcbf:         browserConnection.close();
1:174dcbf:     }
1:174dcbf: 
1:3dfda80:    @Test(timeout=10000)
1:3dfda80:    public void testDoNotReceiveExpiredMessage() throws Exception {
1:3dfda80:       int WAIT_TIME = 1000;
1:3dfda80: 
1:3dfda80:       Connection connection = factory.createConnection();
1:3dfda80:       connection.start();
1:3dfda80: 
1:3dfda80:       Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3dfda80:       Queue producerQueue = session.createQueue("MyTestQueue");
1:3dfda80: 
1:3dfda80:       MessageProducer producer = session.createProducer(producerQueue);
1:3dfda80:       producer.setTimeToLive(WAIT_TIME);
1:3dfda80: 
1:3dfda80:       TextMessage message = session.createTextMessage("Test message");
1:3dfda80:       producer.send(producerQueue, message);
1:3dfda80: 
1:3dfda80:       int count = getMessageCount(producerQueue, session);
1:3dfda80:       assertEquals(1, count);
1:3dfda80: 
1:3dfda80:       Thread.sleep(WAIT_TIME + 1000);
1:3dfda80: 
1:3dfda80:       count = getMessageCount(producerQueue, session);
1:3dfda80:       assertEquals(0, count);
1:3dfda80: 
1:3dfda80:       producer.close();
1:3dfda80:       session.close();
1:3dfda80:       connection.close();
1:3dfda80:    }
1:3dfda80: 
1:3dfda80:     private int getMessageCount(Queue destination, Session session) throws Exception {
1:3dfda80:         int result = 0;
1:3dfda80:         QueueBrowser browser = session.createBrowser(destination);
1:3dfda80:         Enumeration<?> enumeration = browser.getEnumeration();
1:3dfda80:         while (enumeration.hasMoreElements()) {
1:3dfda80:             ++result;
1:3dfda80:             enumeration.nextElement();
1:3dfda80:         }
1:3dfda80:         browser.close();
1:3dfda80: 
1:3dfda80:         return result;
1:3dfda80:     }
1:3dfda80: 
1:c38a61d:     private int browse(ActiveMQQueue queue, Connection connection) throws JMSException {
1:c38a61d:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:174dcbf:         QueueBrowser browser = session.createBrowser(queue);
1:174dcbf:         Enumeration<?> enumeration = browser.getEnumeration();
1:174dcbf:         int browsed = 0;
1:174dcbf:         while (enumeration.hasMoreElements()) {
1:174dcbf:             TextMessage m = (TextMessage) enumeration.nextElement();
1:174dcbf:             browsed++;
1:174dcbf:             LOG.debug("B[{}]: {}", browsed, m.getText());
1:174dcbf:         }
1:174dcbf:         browser.close();
1:174dcbf:         session.close();
1:174dcbf:         return browsed;
1:174dcbf:     }
1:174dcbf: 
1:174dcbf:     protected void sendTestMessages() throws JMSException {
1:174dcbf:         // Send the messages to the Queue.
1:174dcbf:         Connection prodConnection = factory.createConnection();
1:174dcbf:         prodConnection.start();
1:174dcbf:         Session prodSession = prodConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:174dcbf:         MessageProducer producer = prodSession.createProducer(queue);
1:174dcbf:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:174dcbf:         producer.setTimeToLive(TTL);
1:174dcbf: 
1:174dcbf:         for (int i = 1; i <= MESSAGES_TO_SEND; i++) {
1:174dcbf:             String msgStr = "Message: " + i;
1:174dcbf:             producer.send(prodSession.createTextMessage(msgStr));
1:174dcbf:             LOG.info("P&C: {}", msgStr);
1:174dcbf:         }
1:c38a61d: 
1:174dcbf:         prodSession.close();
1:174dcbf:     }
1:174dcbf: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:3dfda80
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Queue;
/////////////////////////////////////////////////////////////////////////
1:    @Test(timeout=10000)
1:    public void testDoNotReceiveExpiredMessage() throws Exception {
1:       int WAIT_TIME = 1000;
1: 
1:       Connection connection = factory.createConnection();
1:       connection.start();
1: 
1:       Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:       Queue producerQueue = session.createQueue("MyTestQueue");
1: 
1:       MessageProducer producer = session.createProducer(producerQueue);
1:       producer.setTimeToLive(WAIT_TIME);
1: 
1:       TextMessage message = session.createTextMessage("Test message");
1:       producer.send(producerQueue, message);
1: 
1:       int count = getMessageCount(producerQueue, session);
1:       assertEquals(1, count);
1: 
1:       Thread.sleep(WAIT_TIME + 1000);
1: 
1:       count = getMessageCount(producerQueue, session);
1:       assertEquals(0, count);
1: 
1:       producer.close();
1:       session.close();
1:       connection.close();
1:    }
1: 
1:     private int getMessageCount(Queue destination, Session session) throws Exception {
1:         int result = 0;
1:         QueueBrowser browser = session.createBrowser(destination);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         while (enumeration.hasMoreElements()) {
1:             ++result;
1:             enumeration.nextElement();
1:         }
1:         browser.close();
1: 
1:         return result;
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c38a61d
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsQueueBrowserExpirationTest.class);
/////////////////////////////////////////////////////////////////////////
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     @Test(timeout=10000)
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("[{}ms] found {}", TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin), browsed);
1:         LOG.info("Finished");
1:     private int browse(ActiveMQQueue queue, Connection connection) throws JMSException {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1: 
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:174dcbf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.net.URI;
1: import java.util.Enumeration;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * This test shows that when all messages are expired the QueueBrowser will
1:  * still finish properly and not hang indefinitely.  If a queue browser subscription
1:  * detects an expired message, it will tell the broker to expire the message but still
1:  * dispatch the message to the client as we want to get a snapshot in time.  This prevents
1:  * the problem of the browser enumeration returning true for hasMoreElements and then
1:  * hanging forever because all messages expired on dispatch.
1:  *
1:  * See: https://issues.apache.org/jira/browse/AMQ-5340
1:  *
1:  * <p>
1:  * This test is based on a test case submitted by Henno Vermeulen for AMQ-5340
1:  */
1: public class JmsQueueBrowserExpirationTest {
1: 
1:     private static final int MESSAGES_TO_SEND = 50;
1:     // Message expires after 1 second
1:     private static final long TTL = 1000;
1: 
0:     private static final Logger LOG = LoggerFactory
0:             .getLogger(JmsQueueBrowserExpirationTest.class);
1: 
1:     private BrokerService broker;
1:     private URI connectUri;
1:     private ActiveMQConnectionFactory factory;
1:     private final ActiveMQQueue queue = new ActiveMQQueue("TEST");
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1: 
1:         TransportConnector connector = broker.addConnector("vm://localhost");
1:         broker.deleteAllMessages();
1:         broker.start();
1:         broker.waitUntilStarted();
1:         connectUri = connector.getConnectUri();
1:         factory = new ActiveMQConnectionFactory(connectUri);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
1:     }
1: 
0:     //This should finish in under 3 seconds because the messages should be expired
0:     @Test(timeout=3000)
1:     public void testBrowsingExpiration() throws JMSException, InterruptedException {
1: 
1:         sendTestMessages();
1: 
1:         // Browse the queue.
1:         Connection browserConnection = factory.createConnection();
1:         browserConnection.start();
1: 
1:         int browsed = browse(queue, browserConnection);
1: 
1:         // The number of messages browsed should be equal to the number of
1:         // messages sent.
1:         assertEquals(MESSAGES_TO_SEND, browsed);
1: 
1:         long begin = System.nanoTime();
1:         while (browsed != 0) {
1:             // Give JMS threads more opportunity to do their work.
1:             Thread.sleep(100);
1:             browsed = browse(queue, browserConnection);
0:             String time =
0:                     TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)
0:                             + " ms";
0:             System.out.println("[" + time + "] found " + browsed + " messages");
1:         }
0:         System.out.println("Finished");
1:         browserConnection.close();
1:     }
1: 
0:     private int browse(ActiveMQQueue queue, Connection connection)
0:             throws JMSException {
0:         Session session =
0:                 connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         QueueBrowser browser = session.createBrowser(queue);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         int browsed = 0;
1:         while (enumeration.hasMoreElements()) {
1:             TextMessage m = (TextMessage) enumeration.nextElement();
1:             browsed++;
1:             LOG.debug("B[{}]: {}", browsed, m.getText());
1:         }
1:         browser.close();
1:         session.close();
1:         return browsed;
1:     }
1: 
1:     protected void sendTestMessages() throws JMSException {
1:         // Send the messages to the Queue.
1:         Connection prodConnection = factory.createConnection();
1:         prodConnection.start();
1:         Session prodSession = prodConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = prodSession.createProducer(queue);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         producer.setTimeToLive(TTL);
1: 
1:         for (int i = 1; i <= MESSAGES_TO_SEND; i++) {
1:             String msgStr = "Message: " + i;
1:             producer.send(prodSession.createTextMessage(msgStr));
1:             LOG.info("P&C: {}", msgStr);
1:         }
1:         prodSession.close();
1:     }
1: 
1: 
1: }
============================================================================