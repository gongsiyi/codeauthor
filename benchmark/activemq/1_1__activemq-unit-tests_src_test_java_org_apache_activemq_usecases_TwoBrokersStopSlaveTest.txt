1:b40e5f9: /**
1:b40e5f9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b40e5f9:  * contributor license agreements.  See the NOTICE file distributed with
1:b40e5f9:  * this work for additional information regarding copyright ownership.
1:b40e5f9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b40e5f9:  * (the "License"); you may not use this file except in compliance with
1:b40e5f9:  * the License.  You may obtain a copy of the License at
1:b40e5f9:  *
1:b40e5f9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b40e5f9:  *
1:b40e5f9:  * Unless required by applicable law or agreed to in writing, software
1:b40e5f9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b40e5f9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b40e5f9:  * See the License for the specific language governing permissions and
1:b40e5f9:  * limitations under the License.
1:b40e5f9:  */
1:b40e5f9: package org.apache.activemq.usecases;
1:b40e5f9: 
1:b40e5f9: import junit.framework.TestCase;
1:b40e5f9: import org.apache.activemq.ActiveMQConnectionFactory;
1:b40e5f9: import org.apache.activemq.broker.BrokerFactory;
1:b40e5f9: import org.apache.activemq.broker.BrokerService;
1:b40e5f9: import org.apache.activemq.store.PersistenceAdapter;
1:b40e5f9: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:b40e5f9: 
1:b40e5f9: import java.io.File;
1:b40e5f9: import java.net.URI;
1:b40e5f9: 
1:b40e5f9: /**
1:b40e5f9:  * @author Carlo Dapor
1:b40e5f9:  */
1:b40e5f9: public class TwoBrokersStopSlaveTest extends TestCase {
1:b40e5f9:     private final static File KahaDbDirectory = new File("target/TwoBrokersStopSlaveTest");
1:b40e5f9: 
1:b40e5f9:     public void testStartMasterAndSlaveShutdownSlaveFirst() throws Exception {
1:b40e5f9:         BrokerService masterBroker = createBroker("masterBroker", 9100);
1:b40e5f9:         BrokerService slaveBroker = createBroker("slaveBroker", 9101);
1:b40e5f9: 
1:b40e5f9:         Thread.sleep(1_000L);
1:b40e5f9: 
1:b40e5f9:         assertTrue(masterBroker.isPersistent());
1:b40e5f9:         assertTrue(slaveBroker.isPersistent());
1:b40e5f9:         assertFalse(masterBroker.isSlave());
1:b40e5f9:         assertTrue(slaveBroker.isSlave());
1:b40e5f9: 
1:b40e5f9:         // stop slave broker
1:b40e5f9:         slaveBroker.stop();
1:b40e5f9:         slaveBroker.waitUntilStopped();
1:b40e5f9: 
1:b40e5f9:         masterBroker.stop();
1:b40e5f9:     }
1:b40e5f9: 
1:b40e5f9:     protected BrokerService createBroker(final String brokerName, final int port) throws Exception {
1:b40e5f9:         String connectorUrl = "tcp://localhost:" + port;
1:b40e5f9: 
1:b40e5f9:         BrokerService broker = BrokerFactory.createBroker(new URI("broker://()/localhost"));
1:b40e5f9:         broker.setBrokerName(brokerName);
1:b40e5f9:         broker.addConnector(connectorUrl);
1:b40e5f9:         broker.setUseShutdownHook(false);
1:b40e5f9:         broker.setPersistent(true);
1:b40e5f9: 
1:b40e5f9:         PersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:b40e5f9:         // brokers must acquire exclusive lock KahaDB
1:b40e5f9:         adapter.setDirectory(KahaDbDirectory);
1:b40e5f9:         broker.setPersistenceAdapter(adapter);
1:b40e5f9:         broker.setStartAsync(true);
1:b40e5f9:         broker.start();
1:b40e5f9: 
1:b40e5f9:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectorUrl);
1:b40e5f9:         factory.createConnection();
1:b40e5f9: 
1:b40e5f9:         // If the slave broker also is waiting to fully start up, it achieves that by acquiring the exclusive lock.
1:b40e5f9:         // But then, it can never be shut down before becoming master.
1:b40e5f9:         // This behaviour is filed as issue 6601, cf. https://issues.apache.org/jira/browse/AMQ-6601
1:b40e5f9:         if (!broker.isSlave())
1:b40e5f9:             broker.waitUntilStarted();
1:b40e5f9: 
1:b40e5f9:         return broker;
1:b40e5f9:     }
1:b40e5f9: 
1:b40e5f9: }
============================================================================
author:Carlo Dapor
-------------------------------------------------------------------------------
commit:b40e5f9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: 
1: import java.io.File;
1: import java.net.URI;
1: 
1: /**
1:  * @author Carlo Dapor
1:  */
1: public class TwoBrokersStopSlaveTest extends TestCase {
1:     private final static File KahaDbDirectory = new File("target/TwoBrokersStopSlaveTest");
1: 
1:     public void testStartMasterAndSlaveShutdownSlaveFirst() throws Exception {
1:         BrokerService masterBroker = createBroker("masterBroker", 9100);
1:         BrokerService slaveBroker = createBroker("slaveBroker", 9101);
1: 
1:         Thread.sleep(1_000L);
1: 
1:         assertTrue(masterBroker.isPersistent());
1:         assertTrue(slaveBroker.isPersistent());
1:         assertFalse(masterBroker.isSlave());
1:         assertTrue(slaveBroker.isSlave());
1: 
1:         // stop slave broker
1:         slaveBroker.stop();
1:         slaveBroker.waitUntilStopped();
1: 
1:         masterBroker.stop();
1:     }
1: 
1:     protected BrokerService createBroker(final String brokerName, final int port) throws Exception {
1:         String connectorUrl = "tcp://localhost:" + port;
1: 
1:         BrokerService broker = BrokerFactory.createBroker(new URI("broker://()/localhost"));
1:         broker.setBrokerName(brokerName);
1:         broker.addConnector(connectorUrl);
1:         broker.setUseShutdownHook(false);
1:         broker.setPersistent(true);
1: 
1:         PersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:         // brokers must acquire exclusive lock KahaDB
1:         adapter.setDirectory(KahaDbDirectory);
1:         broker.setPersistenceAdapter(adapter);
1:         broker.setStartAsync(true);
1:         broker.start();
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectorUrl);
1:         factory.createConnection();
1: 
1:         // If the slave broker also is waiting to fully start up, it achieves that by acquiring the exclusive lock.
1:         // But then, it can never be shut down before becoming master.
1:         // This behaviour is filed as issue 6601, cf. https://issues.apache.org/jira/browse/AMQ-6601
1:         if (!broker.isSlave())
1:             broker.waitUntilStarted();
1: 
1:         return broker;
1:     }
1: 
1: }
============================================================================