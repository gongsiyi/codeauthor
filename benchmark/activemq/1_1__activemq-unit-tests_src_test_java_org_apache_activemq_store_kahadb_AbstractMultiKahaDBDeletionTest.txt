1:2117768: /**
1:2117768:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2117768:  * contributor license agreements.  See the NOTICE file distributed with
1:2117768:  * this work for additional information regarding copyright ownership.
1:2117768:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2117768:  * (the "License"); you may not use this file except in compliance with
1:2117768:  * the License.  You may obtain a copy of the License at
1:2117768:  *
1:2117768:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2117768:  *
1:2117768:  * Unless required by applicable law or agreed to in writing, software
1:2117768:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2117768:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2117768:  * See the License for the specific language governing permissions and
1:2117768:  * limitations under the License.
1:2117768:  */
1:2117768: package org.apache.activemq.store.kahadb;
1:2117768: 
1:2117768: import static org.junit.Assert.assertEquals;
1:2117768: import static org.junit.Assert.assertTrue;
1:2117768: 
1:2117768: import java.io.File;
1:2117768: import java.io.IOException;
1:2117768: import java.net.URI;
1:2117768: import java.util.ArrayList;
1:2117768: import java.util.Collection;
1:2117768: import java.util.List;
1:2117768: 
1:2117768: import javax.jms.JMSException;
1:2117768: 
1:2117768: import org.apache.activemq.broker.Broker;
1:2117768: import org.apache.activemq.broker.BrokerService;
1:2117768: import org.apache.activemq.broker.TransportConnector;
1:2117768: import org.apache.activemq.command.ActiveMQDestination;
1:2117768: import org.apache.commons.io.FileUtils;
1:2117768: import org.apache.commons.io.filefilter.WildcardFileFilter;
1:2117768: import org.junit.After;
1:2117768: import org.junit.Before;
1:2117768: import org.junit.Rule;
1:2117768: import org.junit.Test;
1:2117768: import org.junit.rules.TemporaryFolder;
1:2117768: import org.slf4j.Logger;
1:2117768: import org.slf4j.LoggerFactory;
1:2117768: 
1:2117768: 
1:2117768: public abstract class AbstractMultiKahaDBDeletionTest {
1:2117768:     protected static final Logger LOG = LoggerFactory
1:2117768:             .getLogger(MultiKahaDBTopicDeletionTest.class);
1:2117768: 
1:2117768:     protected BrokerService brokerService;
1:2117768:     protected Broker broker;
1:2117768:     protected URI brokerConnectURI;
1:2117768:     protected File storeDir;
1:2117768:     protected ActiveMQDestination dest1;
1:2117768:     protected ActiveMQDestination dest2;
1:2117768: 
1:2117768:     public AbstractMultiKahaDBDeletionTest(ActiveMQDestination dest1, ActiveMQDestination dest2) {
1:2117768:         this.dest1 = dest1;
1:2117768:         this.dest2 = dest2;
1:2117768:     }
1:2117768: 
1:2117768:     @Rule
1:2117768:     public TemporaryFolder tempTestDir = new TemporaryFolder();
1:2117768: 
1:2117768:     @Before
1:2117768:     public void startBroker() throws Exception {
1:2117768:         setUpBroker(true);
1:2117768:     }
1:2117768: 
1:2117768:     protected void setUpBroker(boolean clearDataDir) throws Exception {
1:2117768:         brokerService = new BrokerService();
1:2117768:         this.initPersistence(brokerService);
1:2117768:         // set up a transport
1:2117768:         TransportConnector connector = brokerService
1:2117768:                 .addConnector(new TransportConnector());
1:2117768:         connector.setUri(new URI("tcp://0.0.0.0:0"));
1:2117768:         connector.setName("tcp");
1:2117768: 
1:2117768:         brokerService.start();
1:2117768:         brokerService.waitUntilStarted();
1:2117768:         brokerConnectURI = brokerService.getConnectorByName("tcp")
1:2117768:                 .getConnectUri();
1:2117768:         broker = brokerService.getBroker();
1:2117768:     }
1:2117768: 
1:2117768:     @After
1:2117768:     public void stopBroker() throws Exception {
1:2117768:         brokerService.stop();
1:2117768:         brokerService.waitUntilStopped();
1:2117768:     }
1:2117768: 
1:2117768:     protected void initPersistence(BrokerService brokerService)
1:2117768:             throws IOException {
1:2117768:         storeDir = tempTestDir.getRoot();
1:2117768:         brokerService.setPersistent(true);
1:2117768: 
1:2117768:         // setup multi-kaha adapter
1:2117768:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:2117768:         persistenceAdapter.setDirectory(storeDir);
1:2117768: 
1:2117768:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:2117768:         kahaStore.setJournalMaxFileLength(1024 * 512);
1:2117768: 
1:2117768:         // set up a store per destination
1:2117768:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:2117768:         filtered.setPersistenceAdapter(kahaStore);
1:2117768:         filtered.setPerDestination(true);
1:2117768:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:2117768:         stores.add(filtered);
1:2117768: 
1:2117768:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:2117768:         brokerService.setPersistenceAdapter(persistenceAdapter);
1:2117768:     }
1:2117768: 
1:2117768:     /**
1:2117768:      * Test that a destination can be deleted and the other destination can still be subscribed to
1:2117768:      * @throws Exception
1:2117768:      */
1:2117768:     @Test
1:2117768:     public void testDest1Deletion() throws Exception {
1:2117768:         LOG.info("Creating {} first, {} second", dest1, dest2);
1:2117768:         LOG.info("Removing {}, subscribing to {}", dest1, dest2);
1:2117768: 
1:2117768:         // Create two destinations
1:2117768:         broker.addDestination(brokerService.getAdminConnectionContext(), dest1, false);
1:2117768:         broker.addDestination(brokerService.getAdminConnectionContext(), dest2, false);
1:2117768: 
1:2117768:         // remove destination2
1:2117768:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest1, 100);
1:2117768: 
1:2117768:         // try and create a consumer on dest2, before AMQ-5875 this
1:2117768:         //would cause an IllegalStateException for Topics
1:2117768:         createConsumer(dest2);
1:2117768:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), getStoreFileFilter());
1:2117768:         assertTrue("Store index should still exist", storeFiles.size() >= 1);
1:2117768:     }
1:2117768: 
1:2117768: 
1:2117768:     @Test
1:2117768:     public void testDest2Deletion() throws Exception {
1:2117768:         LOG.info("Creating {} first, {} second", dest1, dest2);
1:2117768:         LOG.info("Removing {}, subscribing to {}", dest2, dest1);
1:2117768: 
1:2117768:         // Create two destinations
1:2117768:         broker.addDestination(brokerService.getAdminConnectionContext(), dest1, false);
1:2117768:         broker.addDestination(brokerService.getAdminConnectionContext(), dest2, false);
1:2117768: 
1:2117768:         // remove destination2
1:2117768:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest2, 100);
1:2117768: 
1:2117768:         // try and create a consumer on dest1, before AMQ-5875 this
1:2117768:         //would cause an IllegalStateException for Topics
1:2117768:         createConsumer(dest1);
1:2117768:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), getStoreFileFilter());
1:2117768:         assertTrue("Store index should still exist", storeFiles.size() >= 1);
1:2117768:     }
1:2117768: 
1:2117768: 
1:2117768:     @Test
1:2117768:     public void testStoreCleanupDeleteDest1First() throws Exception {
1:2117768:         LOG.info("Creating {} first, {} second", dest1, dest2);
1:2117768:         LOG.info("Deleting {} first, {} second", dest1, dest2);
1:2117768: 
1:2117768:         // Create two destinations
1:2117768:         broker.addDestination(brokerService.getAdminConnectionContext(), dest1, false);
1:2117768:         broker.addDestination(brokerService.getAdminConnectionContext(), dest2, false);
1:2117768: 
1:2117768:         // remove both destinations
1:2117768:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest1, 100);
1:2117768:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest2, 100);
1:2117768: 
1:2117768:         //Assert that with no more destinations attached to a store that it has been cleaned up
1:2117768:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), getStoreFileFilter());
1:2117768:         assertEquals("Store files should be deleted", 0, storeFiles.size());
1:2117768: 
1:2117768:     }
1:2117768: 
1:2117768:     @Test
1:2117768:     public void testStoreCleanupDeleteDest2First() throws Exception {
1:2117768:         LOG.info("Creating {} first, {} second", dest1, dest2);
1:2117768:         LOG.info("Deleting {} first, {} second", dest2, dest1);
1:2117768: 
1:2117768:         // Create two destinations
1:2117768:         broker.addDestination(brokerService.getAdminConnectionContext(), dest1, false);
1:2117768:         broker.addDestination(brokerService.getAdminConnectionContext(), dest2, false);
1:2117768: 
1:2117768:         // remove both destinations
1:2117768:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest2, 100);
1:2117768:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest1, 100);
1:2117768: 
1:2117768:         //Assert that with no more destinations attached to a store that it has been cleaned up
1:2117768:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), getStoreFileFilter());
1:2117768:         assertEquals("Store files should be deleted", 0, storeFiles.size());
1:2117768: 
1:2117768:     }
1:2117768: 
1:2117768: 
1:2117768:     protected abstract void createConsumer(ActiveMQDestination dest) throws JMSException;
1:2117768: 
1:2117768:     protected abstract WildcardFileFilter getStoreFileFilter();
1:2117768: 
1:2117768: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2117768
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.commons.io.FileUtils;
1: import org.apache.commons.io.filefilter.WildcardFileFilter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: public abstract class AbstractMultiKahaDBDeletionTest {
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(MultiKahaDBTopicDeletionTest.class);
1: 
1:     protected BrokerService brokerService;
1:     protected Broker broker;
1:     protected URI brokerConnectURI;
1:     protected File storeDir;
1:     protected ActiveMQDestination dest1;
1:     protected ActiveMQDestination dest2;
1: 
1:     public AbstractMultiKahaDBDeletionTest(ActiveMQDestination dest1, ActiveMQDestination dest2) {
1:         this.dest1 = dest1;
1:         this.dest2 = dest2;
1:     }
1: 
1:     @Rule
1:     public TemporaryFolder tempTestDir = new TemporaryFolder();
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         setUpBroker(true);
1:     }
1: 
1:     protected void setUpBroker(boolean clearDataDir) throws Exception {
1:         brokerService = new BrokerService();
1:         this.initPersistence(brokerService);
1:         // set up a transport
1:         TransportConnector connector = brokerService
1:                 .addConnector(new TransportConnector());
1:         connector.setUri(new URI("tcp://0.0.0.0:0"));
1:         connector.setName("tcp");
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:         brokerConnectURI = brokerService.getConnectorByName("tcp")
1:                 .getConnectUri();
1:         broker = brokerService.getBroker();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     protected void initPersistence(BrokerService brokerService)
1:             throws IOException {
1:         storeDir = tempTestDir.getRoot();
1:         brokerService.setPersistent(true);
1: 
1:         // setup multi-kaha adapter
1:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         persistenceAdapter.setDirectory(storeDir);
1: 
1:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:         kahaStore.setJournalMaxFileLength(1024 * 512);
1: 
1:         // set up a store per destination
1:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:         filtered.setPersistenceAdapter(kahaStore);
1:         filtered.setPerDestination(true);
1:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:         stores.add(filtered);
1: 
1:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:         brokerService.setPersistenceAdapter(persistenceAdapter);
1:     }
1: 
1:     /**
1:      * Test that a destination can be deleted and the other destination can still be subscribed to
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testDest1Deletion() throws Exception {
1:         LOG.info("Creating {} first, {} second", dest1, dest2);
1:         LOG.info("Removing {}, subscribing to {}", dest1, dest2);
1: 
1:         // Create two destinations
1:         broker.addDestination(brokerService.getAdminConnectionContext(), dest1, false);
1:         broker.addDestination(brokerService.getAdminConnectionContext(), dest2, false);
1: 
1:         // remove destination2
1:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest1, 100);
1: 
1:         // try and create a consumer on dest2, before AMQ-5875 this
1:         //would cause an IllegalStateException for Topics
1:         createConsumer(dest2);
1:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), getStoreFileFilter());
1:         assertTrue("Store index should still exist", storeFiles.size() >= 1);
1:     }
1: 
1: 
1:     @Test
1:     public void testDest2Deletion() throws Exception {
1:         LOG.info("Creating {} first, {} second", dest1, dest2);
1:         LOG.info("Removing {}, subscribing to {}", dest2, dest1);
1: 
1:         // Create two destinations
1:         broker.addDestination(brokerService.getAdminConnectionContext(), dest1, false);
1:         broker.addDestination(brokerService.getAdminConnectionContext(), dest2, false);
1: 
1:         // remove destination2
1:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest2, 100);
1: 
1:         // try and create a consumer on dest1, before AMQ-5875 this
1:         //would cause an IllegalStateException for Topics
1:         createConsumer(dest1);
1:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), getStoreFileFilter());
1:         assertTrue("Store index should still exist", storeFiles.size() >= 1);
1:     }
1: 
1: 
1:     @Test
1:     public void testStoreCleanupDeleteDest1First() throws Exception {
1:         LOG.info("Creating {} first, {} second", dest1, dest2);
1:         LOG.info("Deleting {} first, {} second", dest1, dest2);
1: 
1:         // Create two destinations
1:         broker.addDestination(brokerService.getAdminConnectionContext(), dest1, false);
1:         broker.addDestination(brokerService.getAdminConnectionContext(), dest2, false);
1: 
1:         // remove both destinations
1:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest1, 100);
1:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest2, 100);
1: 
1:         //Assert that with no more destinations attached to a store that it has been cleaned up
1:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), getStoreFileFilter());
1:         assertEquals("Store files should be deleted", 0, storeFiles.size());
1: 
1:     }
1: 
1:     @Test
1:     public void testStoreCleanupDeleteDest2First() throws Exception {
1:         LOG.info("Creating {} first, {} second", dest1, dest2);
1:         LOG.info("Deleting {} first, {} second", dest2, dest1);
1: 
1:         // Create two destinations
1:         broker.addDestination(brokerService.getAdminConnectionContext(), dest1, false);
1:         broker.addDestination(brokerService.getAdminConnectionContext(), dest2, false);
1: 
1:         // remove both destinations
1:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest2, 100);
1:         broker.removeDestination(brokerService.getAdminConnectionContext(), dest1, 100);
1: 
1:         //Assert that with no more destinations attached to a store that it has been cleaned up
1:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), getStoreFileFilter());
1:         assertEquals("Store files should be deleted", 0, storeFiles.size());
1: 
1:     }
1: 
1: 
1:     protected abstract void createConsumer(ActiveMQDestination dest) throws JMSException;
1: 
1:     protected abstract WildcardFileFilter getStoreFileFilter();
1: 
1: }
============================================================================