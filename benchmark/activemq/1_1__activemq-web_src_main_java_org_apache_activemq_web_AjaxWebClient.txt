1:755ffd5: /**
1:755ffd5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:755ffd5:  * contributor license agreements.  See the NOTICE file distributed with
1:755ffd5:  * this work for additional information regarding copyright ownership.
1:755ffd5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:755ffd5:  * (the "License"); you may not use this file except in compliance with
1:755ffd5:  * the License.  You may obtain a copy of the License at
1:755ffd5:  *
1:755ffd5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:755ffd5:  *
1:755ffd5:  * Unless required by applicable law or agreed to in writing, software
1:755ffd5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:755ffd5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:755ffd5:  * See the License for the specific language governing permissions and
1:755ffd5:  * limitations under the License.
1:755ffd5:  */
1:755ffd5: package org.apache.activemq.web;
1:755ffd5: 
1:755ffd5: import java.util.HashMap;
1:755ffd5: import java.util.Map;
1:755ffd5: import java.util.Date;
1:755ffd5: 
1:755ffd5: import javax.jms.MessageConsumer;
1:755ffd5: import javax.servlet.http.HttpServletRequest;
1:755ffd5: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:755ffd5: 
1:755ffd5: import org.apache.activemq.MessageAvailableConsumer;
1:755ffd5: 
1:755ffd5: /*
1:755ffd5:  * Collection of all data needed to fulfill requests from a single web client.
1:755ffd5:  */
1:755ffd5: public class AjaxWebClient extends WebClient {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AjaxWebClient.class);
1:755ffd5:     
1:755ffd5:     // an instance which has not been accessed in this many milliseconds can be removed.
1:755ffd5:     final long expireAfter = 60 * 1000;
1:755ffd5:     
1:755ffd5:     Map<MessageAvailableConsumer, String> idMap;
1:755ffd5:     Map<MessageAvailableConsumer, String> destinationNameMap;
1:755ffd5:     AjaxListener listener;
1:755ffd5:     Long lastAccessed;
1:755ffd5:     
1:755ffd5:     public AjaxWebClient( HttpServletRequest request, long maximumReadTimeout ) {
1:755ffd5:         // 'id' meaning the first argument to the JavaScript addListener() function.
1:755ffd5:         // used to indicate which JS callback should handle a given message.
1:755ffd5:         this.idMap = new HashMap<MessageAvailableConsumer, String>();
1:755ffd5:         
1:755ffd5:         // map consumers to destinations like topic://test, etc.
1:755ffd5:         this.destinationNameMap = new HashMap<MessageAvailableConsumer, String>();
1:755ffd5:         
1:755ffd5:         this.listener = new AjaxListener( this, maximumReadTimeout );
1:755ffd5:         
1:755ffd5:         this.lastAccessed = this.getNow();
1:755ffd5:     }
1:755ffd5:     
1:755ffd5:     public Map<MessageAvailableConsumer, String> getIdMap() {
1:755ffd5:         return this.idMap;
1:755ffd5:     }
1:755ffd5:     
1:755ffd5:     public Map<MessageAvailableConsumer, String> getDestinationNameMap() {
1:755ffd5:         return this.destinationNameMap;
1:755ffd5:     }
1:755ffd5:     
1:755ffd5:     public AjaxListener getListener() {
1:755ffd5:         return this.listener;
1:755ffd5:     }
1:755ffd5:     
1:755ffd5:     public long getMillisSinceLastAccessed() {
1:755ffd5:         return this.getNow() - this.lastAccessed;
1:755ffd5:     }
1:755ffd5:     
1:755ffd5:     public void updateLastAccessed() {
1:755ffd5:         this.lastAccessed = this.getNow();
1:755ffd5:     }
1:755ffd5:     
1:755ffd5:     public boolean closeIfExpired() {
1:755ffd5:         long now = (new Date()).getTime();
1:755ffd5:         boolean returnVal = false;
1:755ffd5:         if( this.getMillisSinceLastAccessed() > this.expireAfter ) {
1:755ffd5:             this.close();
1:755ffd5:             returnVal = true;
1:755ffd5:         }
1:755ffd5:         return returnVal;
1:755ffd5:     }
1:755ffd5:     
1:755ffd5:     protected long getNow() {
1:755ffd5:         return (new Date()).getTime();
1:755ffd5:     }
1:755ffd5: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AjaxWebClient.class);
commit:755ffd5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Date;
1: 
1: import javax.jms.MessageConsumer;
1: import javax.servlet.http.HttpServletRequest;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import org.apache.activemq.MessageAvailableConsumer;
1: 
1: /*
1:  * Collection of all data needed to fulfill requests from a single web client.
1:  */
1: public class AjaxWebClient extends WebClient {
0:     private static final Log LOG = LogFactory.getLog(AjaxWebClient.class);
1:     
1:     // an instance which has not been accessed in this many milliseconds can be removed.
1:     final long expireAfter = 60 * 1000;
1:     
1:     Map<MessageAvailableConsumer, String> idMap;
1:     Map<MessageAvailableConsumer, String> destinationNameMap;
1:     AjaxListener listener;
1:     Long lastAccessed;
1:     
1:     public AjaxWebClient( HttpServletRequest request, long maximumReadTimeout ) {
1:         // 'id' meaning the first argument to the JavaScript addListener() function.
1:         // used to indicate which JS callback should handle a given message.
1:         this.idMap = new HashMap<MessageAvailableConsumer, String>();
1:         
1:         // map consumers to destinations like topic://test, etc.
1:         this.destinationNameMap = new HashMap<MessageAvailableConsumer, String>();
1:         
1:         this.listener = new AjaxListener( this, maximumReadTimeout );
1:         
1:         this.lastAccessed = this.getNow();
1:     }
1:     
1:     public Map<MessageAvailableConsumer, String> getIdMap() {
1:         return this.idMap;
1:     }
1:     
1:     public Map<MessageAvailableConsumer, String> getDestinationNameMap() {
1:         return this.destinationNameMap;
1:     }
1:     
1:     public AjaxListener getListener() {
1:         return this.listener;
1:     }
1:     
1:     public long getMillisSinceLastAccessed() {
1:         return this.getNow() - this.lastAccessed;
1:     }
1:     
1:     public void updateLastAccessed() {
1:         this.lastAccessed = this.getNow();
1:     }
1:     
1:     public boolean closeIfExpired() {
1:         long now = (new Date()).getTime();
1:         boolean returnVal = false;
1:         if( this.getMillisSinceLastAccessed() > this.expireAfter ) {
1:             this.close();
1:             returnVal = true;
1:         }
1:         return returnVal;
1:     }
1:     
1:     protected long getNow() {
1:         return (new Date()).getTime();
1:     }
1: }
============================================================================