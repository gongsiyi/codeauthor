1:0771df3: /**
1:0771df3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0771df3:  * contributor license agreements.  See the NOTICE file distributed with
1:0771df3:  * this work for additional information regarding copyright ownership.
1:0771df3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0771df3:  * (the "License"); you may not use this file except in compliance with
1:0771df3:  * the License.  You may obtain a copy of the License at
1:0771df3:  *
1:0771df3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0771df3:  *
1:0771df3:  * Unless required by applicable law or agreed to in writing, software
1:0771df3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0771df3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0771df3:  * See the License for the specific language governing permissions and
1:0771df3:  * limitations under the License.
1:0771df3:  */
1:3f82625: 
1:0771df3: package org.apache.activemq.transport.ws;
1:b32dbb3: 
1:f40532a: import static org.junit.Assert.assertEquals;
1:9b017fd: import static org.junit.Assert.assertTrue;
1:9b017fd: 
1:afcbc4e: import java.io.File;
1:afcbc4e: import java.io.IOException;
1:afcbc4e: import java.net.Socket;
1:0771df3: import java.net.URI;
1:afcbc4e: import java.net.URISyntaxException;
1:afcbc4e: import java.net.UnknownHostException;
1:f40532a: import java.util.concurrent.CountDownLatch;
1:f40532a: import java.util.concurrent.atomic.AtomicInteger;
1:4bf5d0f: 
1:0771df3: import org.apache.activemq.broker.BrokerService;
1:3f82625: import org.apache.activemq.transport.SocketConnectorFactory;
1:afcbc4e: import org.apache.activemq.transport.stomp.StompConnection;
1:afcbc4e: import org.apache.activemq.util.Wait;
1:f40532a: import org.eclipse.jetty.client.HttpClient;
1:f40532a: import org.eclipse.jetty.client.api.Request;
1:f40532a: import org.eclipse.jetty.client.api.Result;
1:f40532a: import org.eclipse.jetty.client.util.BufferingResponseListener;
1:f40532a: import org.eclipse.jetty.http.HttpMethod;
1:f40532a: import org.eclipse.jetty.http.HttpStatus;
1:b32dbb3: import org.eclipse.jetty.server.Connector;
1:b32dbb3: import org.eclipse.jetty.server.Server;
1:f40532a: import org.eclipse.jetty.util.ssl.SslContextFactory;
1:b32dbb3: import org.eclipse.jetty.webapp.WebAppContext;
1:afcbc4e: import org.junit.After;
1:afcbc4e: import org.junit.Before;
1:afcbc4e: import org.junit.Ignore;
1:0771df3: import org.junit.Test;
1:afcbc4e: import org.openqa.selenium.By;
1:afcbc4e: import org.openqa.selenium.WebDriver;
1:afcbc4e: import org.openqa.selenium.WebElement;
1:afcbc4e: import org.openqa.selenium.chrome.ChromeDriver;
1:afcbc4e: import org.openqa.selenium.chrome.ChromeOptions;
1:afcbc4e: import org.openqa.selenium.firefox.FirefoxDriver;
1:afcbc4e: import org.openqa.selenium.firefox.FirefoxProfile;
1:afcbc4e: import org.slf4j.Logger;
1:afcbc4e: import org.slf4j.LoggerFactory;
1:3f82625: 
1:f05f83b: public class WSTransportTest extends WSTransportTestSupport {
1:0771df3: 
1:afcbc4e:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportTest.class);
1:afcbc4e:     private static final int MESSAGE_COUNT = 1000;
1:0771df3: 
1:b32dbb3:     private Server server;
1:afcbc4e:     private WebDriver driver;
1:afcbc4e:     private File profileDir;
1:0771df3: 
1:afcbc4e:     private String stompUri;
1:afcbc4e:     private StompConnection stompConnection = new StompConnection();
1:0771df3: 
1:f40532a:     protected final int port = 61623;
1:f40532a: 
1:f05f83b:     @Override
1:f05f83b:     protected void addAdditionalConnectors(BrokerService service) throws Exception {
1:f05f83b:         stompUri = service.addConnector("stomp://localhost:0").getPublishableConnectString();
1:3f82625:     }
1:0771df3: 
1:f05f83b:     @Override
1:b32dbb3:     protected String getWSConnectorURI() {
1:f40532a:         return "ws://127.0.0.1:" + port + "?websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001";
1:b32dbb3:     }
1:b32dbb3: 
1:b32dbb3:     protected Server createWebServer() throws Exception {
1:b32dbb3:         Server server = new Server();
1:b32dbb3: 
1:bc2e2d9:         Connector connector = createJettyConnector(server);
1:b32dbb3: 
1:b32dbb3:         WebAppContext context = new WebAppContext();
1:b32dbb3:         context.setResourceBase("src/test/webapp");
1:b32dbb3:         context.setContextPath("/");
1:b32dbb3:         context.setServer(server);
1:b32dbb3: 
1:b32dbb3:         server.setHandler(context);
1:4bf5d0f:         server.setConnectors(new Connector[] { connector });
1:b32dbb3:         server.start();
1:b32dbb3:         return server;
1:b32dbb3:     }
1:b32dbb3: 
1:3f82625:     protected Connector createJettyConnector(Server server) throws Exception {
1:3f82625:         Connector c = new SocketConnectorFactory().createConnector(server);
1:3f82625:         c.getClass().getMethod("setPort", Integer.TYPE).invoke(c, getProxyPort());
1:3f82625:         return c;
1:b32dbb3:     }
1:b32dbb3: 
1:f05f83b:     @Override
1:afcbc4e:     protected void stopBroker() throws Exception {
1:afcbc4e:         if (broker != null) {
1:0771df3:             broker.stop();
1:0771df3:             broker.waitUntilStopped();
1:afcbc4e:             broker = null;
1:0771df3:         }
7:afcbc4e:     }
1:0771df3: 
1:f05f83b:     @Override
1:afcbc4e:     @Before
1:afcbc4e:     public void setUp() throws Exception {
1:f05f83b:         super.setUp();
1:afcbc4e:         profileDir = new File("activemq-data/profiles");
1:afcbc4e:         stompConnect();
1:b32dbb3:         server = createWebServer();
1:afcbc4e:     }
1:0771df3: 
1:f05f83b:     @Override
1:afcbc4e:     @After
1:afcbc4e:     public void tearDown() throws Exception {
2:4bf5d0f:         try {
1:afcbc4e:             stompDisconnect();
1:afcbc4e:         } catch(Exception e) {
1:afcbc4e:             // Some tests explicitly disconnect from stomp so can ignore
1:4bf5d0f:         } finally {
1:9b017fd:             try {
1:f05f83b:                 super.tearDown();
1:f05f83b:             } catch (Exception ex) {
1:f05f83b:                 LOG.warn("Error on super tearDown()");
1:9b017fd:             }
1:f05f83b: 
1:afcbc4e:             if (driver != null) {
1:9b017fd:                 try {
1:9b017fd:                     driver.quit();
1:9b017fd:                 } catch (Exception e) {}
1:afcbc4e:                 driver = null;
1:4bf5d0f:             }
1:b32dbb3:             if (server != null) {
1:9b017fd:                 try {
1:9b017fd:                     server.stop();
1:9b017fd:                 } catch (Exception e) {}
1:4bf5d0f:             }
1:4bf5d0f:         }
1:4bf5d0f:     }
1:4bf5d0f: 
1:0771df3:     @Test
1:0771df3:     public void testBrokerStart() throws Exception {
1:afcbc4e:         assertTrue(broker.isStarted());
1:4bf5d0f:     }
1:0771df3: 
1:f40532a:     @Test(timeout=10000)
1:f40532a:     public void testGet() throws Exception {
1:f40532a:         testGet("http://127.0.0.1:" + port, null);
1:f40532a:     }
1:f40532a: 
1:f40532a: 
1:f40532a:     protected void testGet(final String uri, SslContextFactory
1:f40532a:             sslContextFactory) throws Exception {
1:f40532a:         HttpClient httpClient = sslContextFactory != null ? new HttpClient(sslContextFactory) :
1:f40532a:             new HttpClient(new SslContextFactory());
1:f40532a:         httpClient.start();
1:f40532a: 
1:f40532a:         final CountDownLatch latch = new CountDownLatch(1);
1:f40532a:         Request request = httpClient.newRequest(uri).method(HttpMethod.GET);
1:f40532a:         final AtomicInteger status = new AtomicInteger();
1:f40532a:         request.send(new BufferingResponseListener() {
1:f40532a:             @Override
1:f40532a:             public void onComplete(Result result) {
1:f40532a:                 status.set(result.getResponse().getStatus());
1:f40532a:                 latch.countDown();
1:f40532a:             }
1:f40532a:         });
1:f40532a:         latch.await();
1:f40532a:         assertEquals(HttpStatus.OK_200, status.get());
1:f40532a:     }
1:f40532a: 
1:afcbc4e:     @Ignore
1:afcbc4e:     @Test
1:afcbc4e:     public void testFireFoxWebSockets() throws Exception {
1:afcbc4e:         driver = createFireFoxWebDriver();
1:afcbc4e:         doTestWebSockets(driver);
1:b32dbb3:     }
1:3b4aadc: 
1:afcbc4e:     @Ignore
1:afcbc4e:     @Test
1:afcbc4e:     public void testChromeWebSockets() throws Exception {
1:afcbc4e:         driver = createChromeWebDriver();
1:afcbc4e:         doTestWebSockets(driver);
1:0771df3:     }
17:afcbc4e: 
1:afcbc4e:     protected WebDriver createChromeWebDriver() throws Exception {
1:afcbc4e:         File profile = new File(profileDir, "chrome");
1:afcbc4e:         profile.mkdirs();
1:afcbc4e:         ChromeOptions options = new ChromeOptions();
1:afcbc4e:         options.addArguments("--enable-udd-profiles",
1:afcbc4e:                              "--user-data-dir=" + profile,
1:afcbc4e:                              "--allow-file-access-from-files");
1:afcbc4e:         return new ChromeDriver(options);
1:0771df3:     }
1:afcbc4e: 
1:afcbc4e:     protected WebDriver createFireFoxWebDriver() throws Exception {
1:afcbc4e:         File profile = new File(profileDir, "firefox");
1:afcbc4e:         profile.mkdirs();
1:afcbc4e:         return new FirefoxDriver(new FirefoxProfile(profile));
1:afcbc4e:     }
1:afcbc4e: 
1:afcbc4e:     private void stompConnect() throws IOException, URISyntaxException, UnknownHostException {
1:afcbc4e:         URI connectUri = new URI(stompUri);
1:afcbc4e:         stompConnection.open(createSocket(connectUri));
1:afcbc4e:     }
1:afcbc4e: 
1:afcbc4e:     private Socket createSocket(URI connectUri) throws IOException {
1:afcbc4e:         return new Socket("127.0.0.1", connectUri.getPort());
1:afcbc4e:     }
1:afcbc4e: 
1:afcbc4e:     private void stompDisconnect() throws IOException {
1:afcbc4e:         if (stompConnection != null) {
1:afcbc4e:             stompConnection.close();
1:afcbc4e:             stompConnection = null;
1:afcbc4e:         }
1:afcbc4e:     }
1:afcbc4e: 
1:b32dbb3:     protected String getTestURI() {
1:4bf5d0f:         int port = getProxyPort();
1:f05f83b:         return "http://localhost:" + port + "/websocket.html#" + wsConnectUri;
1:b32dbb3:     }
1:b32dbb3: 
1:afcbc4e:     public void doTestWebSockets(WebDriver driver) throws Exception {
1:afcbc4e: 
1:b32dbb3:         driver.get(getTestURI());
1:afcbc4e: 
1:afcbc4e:         final WebElement webStatus = driver.findElement(By.id("status"));
1:afcbc4e:         final WebElement webReceived = driver.findElement(By.id("received"));
1:afcbc4e: 
1:afcbc4e:         while ("Loading" == webStatus.getText()) {
1:afcbc4e:             Thread.sleep(100);
1:afcbc4e:         }
1:afcbc4e: 
1:afcbc4e:         // Skip test if browser does not support websockets..
1:afcbc4e:         if (webStatus.getText() != "No WebSockets") {
1:afcbc4e: 
1:afcbc4e:             assertTrue("Should have connected", Wait.waitFor(new Wait.Condition() {
1:afcbc4e: 
1:afcbc4e:                 @Override
1:afcbc4e:                 public boolean isSatisified() throws Exception {
1:afcbc4e:                     return webStatus.getText().equals("Connected");
1:afcbc4e:                 }
1:afcbc4e:             }));
1:afcbc4e: 
1:afcbc4e:             stompConnection.connect("system", "manager");
1:afcbc4e: 
1:afcbc4e:             stompConnection.send("/queue/websocket", "Hello");
1:afcbc4e:             assertTrue("Should have received message by now.", Wait.waitFor(new Wait.Condition() {
1:afcbc4e:                 @Override
1:afcbc4e:                 public boolean isSatisified() throws Exception {
1:afcbc4e:                     return webReceived.getText().equals("Hello");
1:afcbc4e:                 }
1:afcbc4e:             }));
1:afcbc4e: 
1:afcbc4e:             for (int i = 1; i <= MESSAGE_COUNT; ++i) {
1:afcbc4e:                 stompConnection.send("/queue/websocket", "messages #" + i);
1:afcbc4e:             }
1:afcbc4e: 
1:afcbc4e:             assertTrue("Should have received messages by now.", Wait.waitFor(new Wait.Condition() {
1:afcbc4e:                 @Override
1:afcbc4e:                 public boolean isSatisified() throws Exception {
1:afcbc4e:                     return webReceived.getText().equals("messages #" + MESSAGE_COUNT);
1:afcbc4e:                 }
1:afcbc4e:             }));
1:0f9647c: 
1:0f9647c:             Thread.sleep(1000);
1:0f9647c: 
1:0f9647c:             assertTrue("Should have disconnected", Wait.waitFor(new Wait.Condition() {
1:0f9647c: 
1:9b017fd:                 @Override
1:0f9647c:                 public boolean isSatisified() throws Exception {
1:0f9647c:                     return webStatus.getText().equals("Disconnected");
1:0f9647c:                 }
1:0f9647c:             }));
1:afcbc4e:         }
1:afcbc4e:     }
1:afcbc4e: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f40532a
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import org.eclipse.jetty.client.HttpClient;
1: import org.eclipse.jetty.client.api.Request;
1: import org.eclipse.jetty.client.api.Result;
1: import org.eclipse.jetty.client.util.BufferingResponseListener;
1: import org.eclipse.jetty.http.HttpMethod;
1: import org.eclipse.jetty.http.HttpStatus;
1: import org.eclipse.jetty.util.ssl.SslContextFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected final int port = 61623;
1: 
/////////////////////////////////////////////////////////////////////////
1:         return "ws://127.0.0.1:" + port + "?websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001";
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=10000)
1:     public void testGet() throws Exception {
1:         testGet("http://127.0.0.1:" + port, null);
1:     }
1: 
1: 
1:     protected void testGet(final String uri, SslContextFactory
1:             sslContextFactory) throws Exception {
1:         HttpClient httpClient = sslContextFactory != null ? new HttpClient(sslContextFactory) :
1:             new HttpClient(new SslContextFactory());
1:         httpClient.start();
1: 
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         Request request = httpClient.newRequest(uri).method(HttpMethod.GET);
1:         final AtomicInteger status = new AtomicInteger();
1:         request.send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 status.set(result.getResponse().getStatus());
1:                 latch.countDown();
1:             }
1:         });
1:         latch.await();
1:         assertEquals(HttpStatus.OK_200, status.get());
1:     }
1: 
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f05f83b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class WSTransportTest extends WSTransportTestSupport {
1:     @Override
1:     protected void addAdditionalConnectors(BrokerService service) throws Exception {
1:         stompUri = service.addConnector("stomp://localhost:0").getPublishableConnectString();
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         super.setUp();
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 super.tearDown();
1:             } catch (Exception ex) {
1:                 LOG.warn("Error on super tearDown()");
1: 
/////////////////////////////////////////////////////////////////////////
1:         return "http://localhost:" + port + "/websocket.html#" + wsConnectUri;
commit:9b017fd
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             try {
0:                 stopBroker();
0:             } catch (Exception e) {
0:                 LOG.warn("Error on Broker stop.");
1:             }
1:                 try {
1:                     driver.quit();
1:                 } catch (Exception e) {}
1:                 try {
1:                     server.stop();
1:                 } catch (Exception e) {}
/////////////////////////////////////////////////////////////////////////
1:                 @Override
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3f82625
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.SocketConnectorFactory;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (Server.getVersion().startsWith("8")) {
0:             connector.setServer(server);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     protected Connector createJettyConnector(Server server) throws Exception {
1:         Connector c = new SocketConnectorFactory().createConnector(server);
1:         c.getClass().getMethod("setPort", Integer.TYPE).invoke(c, getProxyPort());
1:         return c;
commit:bc2e2d9
/////////////////////////////////////////////////////////////////////////
1:         Connector connector = createJettyConnector(server);
/////////////////////////////////////////////////////////////////////////
0:     protected Connector createJettyConnector(Server server) {
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:4bf5d0f
/////////////////////////////////////////////////////////////////////////
0: import java.net.ServerSocket;
0: import javax.net.ServerSocketFactory;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private int proxyPort = 0;
/////////////////////////////////////////////////////////////////////////
1:         server.setConnectors(new Connector[] { connector });
0:     protected int getProxyPort() {
0:         if (proxyPort == 0) {
0:             ServerSocket ss = null;
1:             try {
0:                 ss = ServerSocketFactory.getDefault().createServerSocket(0);
0:                 proxyPort = ss.getLocalPort();
0:             } catch (IOException e) { // ignore
1:             } finally {
1:                 try {
0:                     if (ss != null ) {
0:                         ss.close();
1:                     }
0:                 } catch (IOException e) { // ignore
1:                 }
1:             }
1:         }
0:         return proxyPort;
1:     }
1: 
0: protected Connector createJettyConnector() {
0:         connector.setPort(getProxyPort());
/////////////////////////////////////////////////////////////////////////
1:         int port = getProxyPort();
0:         return "http://localhost:" + port + "/websocket.html#" + wsUri;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0f9647c
/////////////////////////////////////////////////////////////////////////
1: 
1:             Thread.sleep(1000);
1: 
1:             assertTrue("Should have disconnected", Wait.waitFor(new Wait.Condition() {
1: 
1:                 public boolean isSatisified() throws Exception {
1:                     return webStatus.getText().equals("Disconnected");
1:                 }
1:             }));
commit:b32dbb3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.SslContext;
0: import org.apache.activemq.spring.SpringSslContext;
1: import org.eclipse.jetty.server.Connector;
1: import org.eclipse.jetty.server.Server;
0: import org.eclipse.jetty.server.nio.SelectChannelConnector;
0: import org.eclipse.jetty.server.ssl.SslSocketConnector;
0: import org.eclipse.jetty.util.ssl.SslContextFactory;
1: import org.eclipse.jetty.webapp.WebAppContext;
/////////////////////////////////////////////////////////////////////////
1:     private Server server;
0:     protected String wsUri;
/////////////////////////////////////////////////////////////////////////
0:         SpringSslContext context = new SpringSslContext();
0:         context.setKeyStore("src/test/resources/server.keystore");
0:         context.setKeyStoreKeyPassword("password");
0:         context.setTrustStore("src/test/resources/client.keystore");
0:         context.setTrustStorePassword("password");
0:         context.afterPropertiesSet();
0:         broker.setSslContext(context);
1: 
0:         wsUri = broker.addConnector(getWSConnectorURI()).getPublishableConnectString();
/////////////////////////////////////////////////////////////////////////
1:     protected String getWSConnectorURI() {
0:         return "ws://127.0.0.1:61623?websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001";
1:     }
1: 
1:     protected Server createWebServer() throws Exception {
1:         Server server = new Server();
1: 
0:         Connector connector = createJettyConnector();
0:         connector.setServer(server);
1: 
1:         WebAppContext context = new WebAppContext();
1:         context.setResourceBase("src/test/webapp");
1:         context.setContextPath("/");
1:         context.setServer(server);
1: 
1:         server.setHandler(context);
0:         server.setConnectors(new Connector[] {
0:                 connector
0:         });
1:         server.start();
1:         return server;
1:     }
1: 
0:     protected Connector createJettyConnector() {
0:         SelectChannelConnector connector = new SelectChannelConnector();
0:         connector.setPort(8080);
0:         return connector;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         server = createWebServer();
/////////////////////////////////////////////////////////////////////////
1:             if (server != null) {
0:                 server.stop();
1:             }
/////////////////////////////////////////////////////////////////////////
1:     protected String getTestURI() {
0:         return "http://localhost:8080/websocket.html#" + wsUri;
1:     }
1: 
1:         driver.get(getTestURI());
commit:9b0316b
/////////////////////////////////////////////////////////////////////////
0:         wsUri = broker.addConnector("ws://127.0.0.1:61623?websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001").getPublishableConnectString();
commit:0771df3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.ws;
1: 
1: import java.net.URI;
1: 
0: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.Test;
1: 
1: 
0: public class WSTransportTest {
1:     
0:     protected String getBindLocation() {
0:         return "ws://localhost:61614";
1:     }
1: 
1:     @Test
1:     public void testBrokerStart() throws Exception {
0:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=false&useJmx=false"));
0:         broker.addConnector(getBindLocation());
0:         broker.start();
0:         broker.waitUntilStarted();
0:         Thread.sleep(2000);
0:         //System.in.read();
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1:     
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:afcbc4e
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URISyntaxException;
0: import java.net.URL;
1: import java.net.UnknownHostException;
1: import org.apache.activemq.transport.stomp.StompConnection;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.openqa.selenium.By;
1: import org.openqa.selenium.WebDriver;
1: import org.openqa.selenium.WebElement;
1: import org.openqa.selenium.chrome.ChromeDriver;
1: import org.openqa.selenium.chrome.ChromeOptions;
1: import org.openqa.selenium.firefox.FirefoxDriver;
1: import org.openqa.selenium.firefox.FirefoxProfile;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportTest.class);
1:     private static final int MESSAGE_COUNT = 1000;
1: 
0:     private BrokerService broker;
1:     private WebDriver driver;
1:     private File profileDir;
1: 
1:     private String stompUri;
0:     private String wsUri;
1: 
1:     private StompConnection stompConnection = new StompConnection();
1: 
0:     protected BrokerService createBroker(boolean deleteMessages) throws Exception {
0:         BrokerService broker = BrokerFactory.createBroker(
0:                 new URI("broker:()/localhost?persistent=false&useJmx=false"));
1: 
0:         stompUri = broker.addConnector("stomp://localhost:0").getPublishableConnectString();
0:         wsUri = broker.addConnector("ws://127.0.0.1:61623").getPublishableConnectString();
0:         broker.setDeleteAllMessagesOnStartup(deleteMessages);
0:         broker.start();
0:         broker.waitUntilStarted();
1: 
0:         return broker;
1:     }
1: 
1:     protected void stopBroker() throws Exception {
1:         if (broker != null) {
0:             broker.stop();
0:             broker.waitUntilStopped();
1:             broker = null;
1:         }
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         profileDir = new File("activemq-data/profiles");
0:         broker = createBroker(true);
1:         stompConnect();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
0:         try {
1:             stompDisconnect();
1:         } catch(Exception e) {
1:             // Some tests explicitly disconnect from stomp so can ignore
0:         } finally {
0:             stopBroker();
1:             if (driver != null) {
0:                 driver.quit();
1:                 driver = null;
1:             }
1:         }
1:         assertTrue(broker.isStarted());
1: 
1:     @Ignore
1:     @Test
1:     public void testFireFoxWebSockets() throws Exception {
1:         driver = createFireFoxWebDriver();
1:         doTestWebSockets(driver);
1:     }
1: 
1:     @Ignore
1:     @Test
1:     public void testChromeWebSockets() throws Exception {
1:         driver = createChromeWebDriver();
1:         doTestWebSockets(driver);
1:     }
1: 
1:     protected WebDriver createChromeWebDriver() throws Exception {
1:         File profile = new File(profileDir, "chrome");
1:         profile.mkdirs();
1:         ChromeOptions options = new ChromeOptions();
1:         options.addArguments("--enable-udd-profiles",
1:                              "--user-data-dir=" + profile,
1:                              "--allow-file-access-from-files");
1:         return new ChromeDriver(options);
1:     }
1: 
1:     protected WebDriver createFireFoxWebDriver() throws Exception {
1:         File profile = new File(profileDir, "firefox");
1:         profile.mkdirs();
1:         return new FirefoxDriver(new FirefoxProfile(profile));
1:     }
1: 
1:     private void stompConnect() throws IOException, URISyntaxException, UnknownHostException {
1:         URI connectUri = new URI(stompUri);
1:         stompConnection.open(createSocket(connectUri));
1:     }
1: 
1:     private Socket createSocket(URI connectUri) throws IOException {
1:         return new Socket("127.0.0.1", connectUri.getPort());
1:     }
1: 
1:     private void stompDisconnect() throws IOException {
1:         if (stompConnection != null) {
1:             stompConnection.close();
1:             stompConnection = null;
1:         }
1:     }
1: 
1:     public void doTestWebSockets(WebDriver driver) throws Exception {
1: 
0:         URL url = getClass().getResource("websocket.html");
1: 
0:         LOG.info("working dir = ");
1: 
0:         LOG.info("page url: " + url);
1: 
0:         driver.get(url + "#" + wsUri);
1: 
1:         final WebElement webStatus = driver.findElement(By.id("status"));
1:         final WebElement webReceived = driver.findElement(By.id("received"));
1: 
1:         while ("Loading" == webStatus.getText()) {
1:             Thread.sleep(100);
1:         }
1: 
1:         // Skip test if browser does not support websockets..
1:         if (webStatus.getText() != "No WebSockets") {
1: 
1:             assertTrue("Should have connected", Wait.waitFor(new Wait.Condition() {
1: 
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return webStatus.getText().equals("Connected");
1:                 }
1:             }));
1: 
1:             stompConnection.connect("system", "manager");
1: 
1:             stompConnection.send("/queue/websocket", "Hello");
1:             assertTrue("Should have received message by now.", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return webReceived.getText().equals("Hello");
1:                 }
1:             }));
1: 
1:             for (int i = 1; i <= MESSAGE_COUNT; ++i) {
1:                 stompConnection.send("/queue/websocket", "messages #" + i);
1:             }
1: 
1:             assertTrue("Should have received messages by now.", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return webReceived.getText().equals("messages #" + MESSAGE_COUNT);
1:                 }
1:             }));
1:         }
1:     }
============================================================================