1:bb30abf: /**
1:bb30abf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bb30abf:  * contributor license agreements.  See the NOTICE file distributed with
1:bb30abf:  * this work for additional information regarding copyright ownership.
1:bb30abf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bb30abf:  * (the "License"); you may not use this file except in compliance with
1:bb30abf:  * the License.  You may obtain a copy of the License at
1:bb30abf:  *
1:bb30abf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bb30abf:  *
1:bb30abf:  * Unless required by applicable law or agreed to in writing, software
1:bb30abf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bb30abf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bb30abf:  * See the License for the specific language governing permissions and
1:bb30abf:  * limitations under the License.
1:bb30abf:  */
1:bb30abf: package org.apache.activemq.transport.amqp;
2:bb30abf: 
1:05ff52d: import java.io.File;
1:05ff52d: 
1:b9ed01f: import javax.jms.Connection;
1:b9ed01f: 
1:bb30abf: import org.apache.activemq.broker.BrokerService;
1:b9ed01f: import org.apache.activemq.broker.TransportConnector;
1:fec73dd: import org.apache.activemq.store.kahadb.KahaDBStore;
1:bb30abf: 
1:bb30abf: public class IDERunner {
1:bb30abf: 
1:05ff52d:     private static final String AMQP_TRANSFORMER = "jms";
1:c60d716:     private static final boolean TRANSPORT_TRACE = false;
1:d723d14:     private static final boolean PERSISTENT = true;
1:d723d14:     private static final boolean CLIENT_CONNECT = false;
1:05ff52d: 
1:bb30abf:     public static void main(String[]args) throws Exception {
1:05ff52d:         BrokerService brokerService = new BrokerService();
1:05ff52d: 
1:b9ed01f:         TransportConnector connector = brokerService.addConnector(
1:b9ed01f:             "amqp://0.0.0.0:5672?trace=" + TRANSPORT_TRACE +
1:b9ed01f:                 "&transport.transformer=" + AMQP_TRANSFORMER +
1:c60d716:                 "&transport.wireFormat.maxFrameSize=104857600");
1:05ff52d: 
1:fec73dd:         KahaDBStore store = new KahaDBStore();
1:fec73dd:         store.setDirectory(new File("target/activemq-data/kahadb"));
1:05ff52d: 
1:d723d14:         if (PERSISTENT) {
1:d723d14:             brokerService.setStoreOpenWireVersion(10);
1:d723d14:             brokerService.setPersistenceAdapter(store);
1:d723d14:             brokerService.deleteAllMessages();
1:d723d14:         } else {
1:d723d14:             brokerService.setPersistent(false);
1:d723d14:         }
1:d723d14: 
1:05ff52d:         brokerService.setUseJmx(false);
1:d723d14:         brokerService.setAdvisorySupport(false);
1:05ff52d: 
1:05ff52d:         brokerService.start();
1:b9ed01f: 
1:d723d14:         if (CLIENT_CONNECT) {
1:d723d14:             Connection connection = JMSClientContext.INSTANCE.createConnection(connector.getPublishableConnectURI());
1:d723d14:             connection.start();
1:d723d14:         }
1:b9ed01f: 
1:05ff52d:         brokerService.waitUntilStopped();
1:bb30abf:     }
1:bb30abf: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c60d716
/////////////////////////////////////////////////////////////////////////
1:     private static final boolean TRANSPORT_TRACE = false;
/////////////////////////////////////////////////////////////////////////
1:                 "&transport.wireFormat.maxFrameSize=104857600");
commit:d723d14
/////////////////////////////////////////////////////////////////////////
1:     private static final boolean PERSISTENT = true;
1:     private static final boolean CLIENT_CONNECT = false;
/////////////////////////////////////////////////////////////////////////
1:         if (PERSISTENT) {
1:             brokerService.setStoreOpenWireVersion(10);
1:             brokerService.setPersistenceAdapter(store);
1:             brokerService.deleteAllMessages();
1:         } else {
1:             brokerService.setPersistent(false);
1:         }
1: 
1:         brokerService.setAdvisorySupport(false);
1:         if (CLIENT_CONNECT) {
1:             Connection connection = JMSClientContext.INSTANCE.createConnection(connector.getPublishableConnectURI());
1:             connection.start();
1:         }
commit:b9ed01f
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: 
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector connector = brokerService.addConnector(
1:             "amqp://0.0.0.0:5672?trace=" + TRANSPORT_TRACE +
1:                 "&transport.transformer=" + AMQP_TRANSFORMER +
0:                 "&transport.wireFormat.maxAmqpFrameSize=104857600");
/////////////////////////////////////////////////////////////////////////
1: 
0:         Connection connection = JMSClientContext.INSTANCE.createConnection(connector.getPublishableConnectURI());
0:         connection.start();
1: 
commit:05ff52d
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: 
1:     private static final String AMQP_TRANSFORMER = "jms";
0:     private static final boolean TRANSPORT_TRACE = true;
1: 
1:         BrokerService brokerService = new BrokerService();
1: 
0:         brokerService.addConnector(
0:             "amqp://0.0.0.0:5672?trace=" + TRANSPORT_TRACE + "&transport.transformer=" + AMQP_TRANSFORMER);
1: 
1: 
0:         brokerService.setStoreOpenWireVersion(10);
0:         brokerService.setPersistenceAdapter(store);
1:         brokerService.setUseJmx(false);
0:         brokerService.deleteAllMessages();
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStopped();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fec73dd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBStore;
/////////////////////////////////////////////////////////////////////////
0:         bs.addConnector("amqp://0.0.0.0:5672?trace=true");
1:         KahaDBStore store = new KahaDBStore();
1:         store.setDirectory(new File("target/activemq-data/kahadb"));
0:         bs.setPersistenceAdapter(store);
0:         bs.deleteAllMessages();
commit:3bfb442
/////////////////////////////////////////////////////////////////////////
0: // import org.apache.activemq.leveldb.LevelDBStore;
/////////////////////////////////////////////////////////////////////////
0:         // LevelDBStore store = new LevelDBStore();
0:         // store.setDirectory(new File("target/activemq-data/haleveldb"));
0:         // bs.setPersistenceAdapter(store);
0:         // bs.deleteAllMessages();
commit:bb30abf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.leveldb.LevelDBStore;
1: 
0: import java.io.File;
1: 
1: public class IDERunner {
1: 
1:     public static void main(String[]args) throws Exception {
0:         BrokerService bs = new BrokerService();
0:         bs.addConnector("tcp://localhost:61616");
0:         LevelDBStore store = new LevelDBStore();
0:         store.setDirectory(new File("target/activemq-data/haleveldb"));
0:         bs.setPersistenceAdapter(store);
0:         bs.deleteAllMessages();
0:         bs.start();
0:         bs.waitUntilStopped();
1:     }
1: }
============================================================================