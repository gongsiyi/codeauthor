1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:456a2ba: 
1:456a2ba: import java.io.DataInput;
1:456a2ba: import java.io.DataOutput;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.util.ArrayList;
1:82e3be3: import java.util.Iterator;
1:456a2ba: import java.util.List;
1:456a2ba: import java.util.NoSuchElementException;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Keeps track of a added long values. Collapses ranges of numbers using a
1:456a2ba:  * Sequence representation. Use to keep track of received message ids to find
1:456a2ba:  * out if a message is duplicate or if there are any missing messages.
1:456a2ba:  *
1:456a2ba:  * @author chirino
1:456a2ba:  */
1:82e3be3: public class SequenceSet extends LinkedNodeList<Sequence> implements Iterable<Long> {
1:fbc5eb5: 
1:1aab71b:     public static class Marshaller implements org.apache.activemq.store.kahadb.disk.util.Marshaller<SequenceSet> {
1:456a2ba: 
1:456a2ba:         public static final Marshaller INSTANCE = new Marshaller();
1:456a2ba: 
1:456a2ba:         public SequenceSet readPayload(DataInput in) throws IOException {
1:456a2ba:             SequenceSet value = new SequenceSet();
1:456a2ba:             int count = in.readInt();
1:456a2ba:             for (int i = 0; i < count; i++) {
1:456a2ba:                 if( in.readBoolean() ) {
1:456a2ba:                     Sequence sequence = new Sequence(in.readLong(), in.readLong());
1:456a2ba:                     value.addLast(sequence);
1:456a2ba:                 } else {
1:456a2ba:                     Sequence sequence = new Sequence(in.readLong());
1:456a2ba:                     value.addLast(sequence);
1:456a2ba:                 }
1:456a2ba:             }
1:456a2ba:             return value;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void writePayload(SequenceSet value, DataOutput out) throws IOException {
1:456a2ba:             out.writeInt(value.size());
1:456a2ba:             Sequence sequence = value.getHead();
1:456a2ba:             while (sequence != null ) {
1:456a2ba:                 if( sequence.range() > 1 ) {
1:456a2ba:                     out.writeBoolean(true);
1:456a2ba:                     out.writeLong(sequence.first);
1:456a2ba:                     out.writeLong(sequence.last);
1:456a2ba:                 } else {
1:456a2ba:                     out.writeBoolean(false);
1:456a2ba:                     out.writeLong(sequence.first);
1:456a2ba:                 }
1:456a2ba:                 sequence = sequence.getNext();
1:456a2ba:             }
1:456a2ba:         }
1:e22a37a: 
1:e22a37a:         public int getFixedSize() {
1:e22a37a:             return -1;
1:e22a37a:         }
1:e22a37a: 
1:e22a37a:         public SequenceSet deepCopy(SequenceSet value) {
1:e22a37a:             SequenceSet rc = new SequenceSet();
1:e22a37a:             Sequence sequence = value.getHead();
1:e22a37a:             while (sequence != null ) {
1:e22a37a:                 rc.add(new Sequence(sequence.first, sequence.last));
1:e22a37a:                 sequence = sequence.getNext();
1:e22a37a:             }
1:e22a37a:             return rc;
1:e22a37a:         }
1:fbc5eb5: 
1:e22a37a:         public boolean isDeepCopySupported() {
1:e22a37a:             return true;
1:e22a37a:         }
1:456a2ba:     }
1:e22a37a: 
1:456a2ba:     public void add(Sequence value) {
1:456a2ba:         // TODO we can probably optimize this a bit
1:456a2ba:         for(long i=value.first; i<value.last+1; i++) {
1:456a2ba:             add(i);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      *
1:456a2ba:      * @param value
1:456a2ba:      *            the value to add to the list
1:456a2ba:      * @return false if the value was a duplicate.
1:456a2ba:      */
1:456a2ba:     public boolean add(long value) {
1:456a2ba: 
1:456a2ba:         if (isEmpty()) {
1:456a2ba:             addFirst(new Sequence(value));
1:456a2ba:             return true;
1:456a2ba:         }
1:456a2ba: 
1:be8e58b:         // check for append
1:be8e58b:         Sequence sequence = getTail();
1:be8e58b:         if (sequence.isAdjacentToLast(value)) {
1:be8e58b:             sequence.last = value;
1:be8e58b:             return true;
1:456a2ba:         }
1:456a2ba: 
1:be8e58b:         sequence = getHead();
1:456a2ba:         while (sequence != null) {
1:456a2ba: 
1:456a2ba:             if (sequence.isAdjacentToLast(value)) {
1:456a2ba:                 // grow the sequence...
1:456a2ba:                 sequence.last = value;
1:456a2ba:                 // it might connect us to the next sequence..
1:456a2ba:                 if (sequence.getNext() != null) {
1:456a2ba:                     Sequence next = sequence.getNext();
1:456a2ba:                     if (next.isAdjacentToFirst(value)) {
1:456a2ba:                         // Yep the sequence connected.. so join them.
1:456a2ba:                         sequence.last = next.last;
1:456a2ba:                         next.unlink();
1:456a2ba:                     }
1:456a2ba:                 }
1:456a2ba:                 return true;
1:456a2ba:             }
1:456a2ba: 
1:456a2ba:             if (sequence.isAdjacentToFirst(value)) {
1:456a2ba:                 // grow the sequence...
1:456a2ba:                 sequence.first = value;
1:456a2ba: 
1:456a2ba:                 // it might connect us to the previous
1:456a2ba:                 if (sequence.getPrevious() != null) {
1:456a2ba:                     Sequence prev = sequence.getPrevious();
1:456a2ba:                     if (prev.isAdjacentToLast(value)) {
1:456a2ba:                         // Yep the sequence connected.. so join them.
1:456a2ba:                         sequence.first = prev.first;
1:456a2ba:                         prev.unlink();
1:456a2ba:                     }
1:456a2ba:                 }
1:456a2ba:                 return true;
1:456a2ba:             }
1:456a2ba: 
1:456a2ba:             // Did that value land before this sequence?
1:456a2ba:             if (value < sequence.first) {
1:456a2ba:                 // Then insert a new entry before this sequence item.
1:456a2ba:                 sequence.linkBefore(new Sequence(value));
1:456a2ba:                 return true;
1:456a2ba:             }
1:456a2ba: 
1:456a2ba:             // Did that value land within the sequence? The it's a duplicate.
1:456a2ba:             if (sequence.contains(value)) {
1:456a2ba:                 return false;
1:fbc5eb5:             }
1:456a2ba: 
1:456a2ba:             sequence = sequence.getNext();
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         // Then the value is getting appended to the tail of the sequence.
1:456a2ba:         addLast(new Sequence(value));
1:82e3be3:         return true;
1:be8e58b:     }
1:456a2ba: 
1:82e3be3:     /**
1:82e3be3:      * Removes the given value from the Sequence set, splitting a
1:82e3be3:      * contained sequence if necessary.
1:82e3be3:      *
1:82e3be3:      * @param value
1:82e3be3:      *          The value that should be removed from the SequenceSet.
1:82e3be3:      *
1:82e3be3:      * @return true if the value was removed from the set, false if there
1:82e3be3:      *         was no sequence in the set that contained the given value.
1:82e3be3:      */
1:82e3be3:     public boolean remove(long value) {
1:456a2ba:         Sequence sequence = getHead();
1:82e3be3:         while (sequence != null ) {
1:82e3be3:             if(sequence.contains(value)) {
1:82e3be3:                 if (sequence.range() == 1) {
1:82e3be3:                     sequence.unlink();
1:456a2ba:                     return true;
1:82e3be3:                 } else if (sequence.getFirst() == value) {
1:82e3be3:                     sequence.setFirst(value+1);
1:82e3be3:                     return true;
1:82e3be3:                 } else if (sequence.getLast() == value) {
1:82e3be3:                     sequence.setLast(value-1);
1:82e3be3:                     return true;
1:82e3be3:                 } else {
1:82e3be3:                     sequence.linkBefore(new Sequence(sequence.first, value-1));
1:82e3be3:                     sequence.linkAfter(new Sequence(value+1, sequence.last));
1:82e3be3:                     sequence.unlink();
1:82e3be3:                     return true;
1:456a2ba:                 }
1:456a2ba:             }
1:456a2ba: 
1:82e3be3:             sequence = sequence.getNext();
1:82e3be3:         }
1:456a2ba: 
1:82e3be3:         return false;
1:82e3be3:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Removes and returns the first element from this list.
1:456a2ba:      *
1:456a2ba:      * @return the first element from this list.
1:456a2ba:      * @throws NoSuchElementException if this list is empty.
1:456a2ba:      */
1:456a2ba:     public long removeFirst() {
1:456a2ba:         if (isEmpty()) {
1:456a2ba:             throw new NoSuchElementException();
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         Sequence rc = removeFirstSequence(1);
1:456a2ba:         return rc.first;
1:456a2ba:     }
1:76d3b46: 
1:456a2ba:     /**
1:82e3be3:      * Removes and returns the last sequence from this list.
1:82e3be3:      *
1:82e3be3:      * @return the last sequence from this list or null if the list is empty.
1:82e3be3:      */
1:76d3b46:     public Sequence removeLastSequence() {
1:76d3b46:         if (isEmpty()) {
1:76d3b46:             return null;
1:76d3b46:         }
1:76d3b46: 
1:76d3b46:         Sequence rc = getTail();
1:76d3b46:         rc.unlink();
1:76d3b46:         return rc;
1:76d3b46:     }
1:76d3b46: 
1:82e3be3:     /**
1:456a2ba:      * Removes and returns the first sequence that is count range large.
1:456a2ba:      *
1:456a2ba:      * @return a sequence that is count range large, or null if no sequence is that large in the list.
1:456a2ba:      */
1:456a2ba:     public Sequence removeFirstSequence(long count) {
1:456a2ba:         if (isEmpty()) {
1:456a2ba:             return null;
1:456a2ba:         }
1:76d3b46: 
1:456a2ba:         Sequence sequence = getHead();
1:456a2ba:         while (sequence != null ) {
1:456a2ba:             if (sequence.range() == count ) {
1:456a2ba:                 sequence.unlink();
1:456a2ba:                 return sequence;
1:456a2ba:             }
1:456a2ba:             if (sequence.range() > count ) {
1:bf59b7d:                 Sequence rc = new Sequence(sequence.first, sequence.first+count-1);
1:456a2ba:                 sequence.first+=count;
1:456a2ba:                 return rc;
1:456a2ba:             }
1:456a2ba:             sequence = sequence.getNext();
1:456a2ba:         }
1:456a2ba:         return null;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @return all the id Sequences that are missing from this set that are not
1:456a2ba:      *         in between the range provided.
1:456a2ba:      */
1:456a2ba:     public List<Sequence> getMissing(long first, long last) {
1:456a2ba:         ArrayList<Sequence> rc = new ArrayList<Sequence>();
1:456a2ba:         if (first > last) {
1:456a2ba:             throw new IllegalArgumentException("First cannot be more than last");
1:456a2ba:         }
1:456a2ba:         if (isEmpty()) {
1:456a2ba:             // We are missing all the messages.
1:456a2ba:             rc.add(new Sequence(first, last));
1:456a2ba:             return rc;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         Sequence sequence = getHead();
1:456a2ba:         while (sequence != null && first <= last) {
1:456a2ba:             if (sequence.contains(first)) {
1:456a2ba:                 first = sequence.last + 1;
1:456a2ba:             } else {
1:456a2ba:                 if (first < sequence.first) {
1:456a2ba:                     if (last < sequence.first) {
1:456a2ba:                         rc.add(new Sequence(first, last));
1:456a2ba:                         return rc;
1:456a2ba:                     } else {
1:456a2ba:                         rc.add(new Sequence(first, sequence.first - 1));
1:456a2ba:                         first = sequence.last + 1;
1:456a2ba:                     }
1:456a2ba:                 }
1:456a2ba:             }
1:456a2ba:             sequence = sequence.getNext();
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         if (first <= last) {
1:456a2ba:             rc.add(new Sequence(first, last));
1:456a2ba:         }
1:456a2ba:         return rc;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @return all the Sequence that are in this list
1:456a2ba:      */
1:456a2ba:     public List<Sequence> getReceived() {
1:456a2ba:         ArrayList<Sequence> rc = new ArrayList<Sequence>(size());
1:456a2ba:         Sequence sequence = getHead();
1:456a2ba:         while (sequence != null) {
1:456a2ba:             rc.add(new Sequence(sequence.first, sequence.last));
1:456a2ba:             sequence = sequence.getNext();
1:456a2ba:         }
1:456a2ba:         return rc;
1:456a2ba:     }
1:456a2ba: 
1:82e3be3:     /**
1:82e3be3:      * Returns true if the value given is contained within one of the
1:82e3be3:      * sequences held in this set.
1:82e3be3:      *
1:82e3be3:      * @param value
1:82e3be3:      *      The value to search for in the set.
1:82e3be3:      *
1:82e3be3:      * @return true if the value is contained in the set.
1:82e3be3:      */
1:82e3be3:     public boolean contains(long value) {
1:82e3be3:         if (isEmpty()) {
1:82e3be3:             return false;
1:456a2ba:         }
1:456a2ba: 
1:82e3be3:         Sequence sequence = getHead();
1:82e3be3:         while (sequence != null) {
1:82e3be3:             if (sequence.contains(value)) {
1:82e3be3:                 return true;
1:82e3be3:             }
1:82e3be3:             sequence = sequence.getNext();
1:82e3be3:         }
1:456a2ba: 
1:82e3be3:         return false;
1:82e3be3:     }
1:456a2ba: 
1:fbc5eb5:     public boolean contains(int first, int last) {
1:fbc5eb5:         if (isEmpty()) {
1:fbc5eb5:             return false;
1:fbc5eb5:         }
1:fbc5eb5:         Sequence sequence = getHead();
1:fbc5eb5:         while (sequence != null) {
1:d8440f8:             if (sequence.first <= first && first <= sequence.last ) {
1:82e3be3:                 return last <= sequence.last;
1:fbc5eb5:             }
1:fbc5eb5:             sequence = sequence.getNext();
1:fbc5eb5:         }
1:fbc5eb5:         return false;
1:82e3be3:     }
1:fbc5eb5: 
1:a7178a4:     public Sequence get(int value) {
1:a7178a4:         if (!isEmpty()) {
1:a7178a4:             Sequence sequence = getHead();
1:a7178a4:             while (sequence != null) {
1:a7178a4:                 if (sequence.contains(value)) {
1:a7178a4:                     return sequence;
1:a7178a4:                 }
1:a7178a4:                 sequence = sequence.getNext();
1:a7178a4:             }
1:a7178a4:         }
1:a7178a4:         return null;
1:a7178a4:     }
1:a7178a4: 
1:a7178a4: 
1:82e3be3:     /**
1:82e3be3:      * Computes the size of this Sequence by summing the values of all
1:82e3be3:      * the contained sequences.
2:82e3be3:      *
1:82e3be3:      * @return the total number of values contained in this set if it
1:82e3be3:      *         were to be iterated over like an array.
1:82e3be3:      */
1:2b10259:     public long rangeSize() {
1:2b10259:         long result = 0;
1:2b10259:         Sequence sequence = getHead();
1:2b10259:         while (sequence != null) {
1:2b10259:             result += sequence.range();
1:2b10259:             sequence = sequence.getNext();
1:2b10259:         }
1:2b10259:         return result;
1:2b10259:     }
1:be8e58b: 
1:82e3be3:     public Iterator<Long> iterator() {
1:82e3be3:         return new SequenceIterator();
1:82e3be3:     }
1:2b10259: 
1:82e3be3:     private class SequenceIterator implements Iterator<Long> {
1:82e3be3: 
1:82e3be3:         private Sequence currentEntry;
1:6e6d860:         private long lastReturned = -1;
1:82e3be3: 
1:82e3be3:         public SequenceIterator() {
1:82e3be3:             currentEntry = getHead();
1:6e6d860:             if (currentEntry != null) {
1:6e6d860:                 lastReturned = currentEntry.first - 1;
1:6e6d860:             }
1:82e3be3:         }
1:82e3be3: 
1:82e3be3:         public boolean hasNext() {
1:82e3be3:             return currentEntry != null;
2:82e3be3:         }
1:82e3be3: 
1:82e3be3:         public Long next() {
1:82e3be3:             if (currentEntry == null) {
1:82e3be3:                 throw new NoSuchElementException();
1:82e3be3:             }
1:82e3be3: 
1:82e3be3:             if(lastReturned < currentEntry.first) {
1:82e3be3:                 lastReturned = currentEntry.first;
1:82e3be3:                 if (currentEntry.range() == 1) {
1:82e3be3:                     currentEntry = currentEntry.getNext();
1:82e3be3:                 }
1:82e3be3:             } else {
1:82e3be3:                 lastReturned++;
1:82e3be3:                 if (lastReturned == currentEntry.last) {
1:82e3be3:                     currentEntry = currentEntry.getNext();
1:82e3be3:                 }
1:82e3be3:             }
1:82e3be3: 
1:82e3be3:             return lastReturned;
1:82e3be3:         }
1:82e3be3: 
1:82e3be3:         public void remove() {
1:82e3be3:             throw new UnsupportedOperationException();
1:82e3be3:         }
1:82e3be3: 
1:82e3be3:     }
1:82e3be3: 
1:82e3be3: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:a7178a4
/////////////////////////////////////////////////////////////////////////
1:     public Sequence get(int value) {
1:         if (!isEmpty()) {
1:             Sequence sequence = getHead();
1:             while (sequence != null) {
1:                 if (sequence.contains(value)) {
1:                     return sequence;
1:                 }
1:                 sequence = sequence.getNext();
1:             }
1:         }
1:         return null;
1:     }
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
/////////////////////////////////////////////////////////////////////////
1:     public static class Marshaller implements org.apache.activemq.store.kahadb.disk.util.Marshaller<SequenceSet> {
commit:715010a
commit:d8440f8
/////////////////////////////////////////////////////////////////////////
1:             if (sequence.first <= first && first <= sequence.last ) {
commit:76d3b46
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public Sequence removeLastSequence() {
1:         if (isEmpty()) {
1:             return null;
1:         }
1: 
1:         Sequence rc = getTail();
1:         rc.unlink();
1:         return rc;
1:     }
1: 
commit:fbc5eb5
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean contains(int first, int last) {
1:         if (isEmpty()) {
1:             return false;
1:         }
1:         Sequence sequence = getHead();
1:         while (sequence != null) {
0:             if (sequence.first <= first ) {
0:                 return last <= sequence.last ;
1:             }
1:             sequence = sequence.getNext();
1:         }
1:         return false;
1:     }
1: 
commit:e22a37a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         public int getFixedSize() {
1:             return -1;
1:         }
1: 
1:         public SequenceSet deepCopy(SequenceSet value) {
1:             SequenceSet rc = new SequenceSet();
1:             Sequence sequence = value.getHead();
1:             while (sequence != null ) {
1:                 rc.add(new Sequence(sequence.first, sequence.last));
1:                 sequence = sequence.getNext();
1:             }
1:             return rc;
1:         }
1: 
1:         public boolean isDeepCopySupported() {
1:             return true;
1:         }
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.NoSuchElementException;
1: 
1: /**
1:  * Keeps track of a added long values. Collapses ranges of numbers using a
1:  * Sequence representation. Use to keep track of received message ids to find
1:  * out if a message is duplicate or if there are any missing messages.
1:  * 
1:  * @author chirino
1:  */
0: public class SequenceSet extends LinkedNodeList<Sequence> {
1:     
0:     public static class Marshaller implements org.apache.kahadb.util.Marshaller<SequenceSet> {
1: 
1:         public static final Marshaller INSTANCE = new Marshaller();
1:         
0:         public Class<SequenceSet> getType() {
0:             return SequenceSet.class;
1:         }
1: 
1:         public SequenceSet readPayload(DataInput in) throws IOException {
1:             SequenceSet value = new SequenceSet();
1:             int count = in.readInt();
1:             for (int i = 0; i < count; i++) {
1:                 if( in.readBoolean() ) {
1:                     Sequence sequence = new Sequence(in.readLong(), in.readLong());
1:                     value.addLast(sequence);
1:                 } else {
1:                     Sequence sequence = new Sequence(in.readLong());
1:                     value.addLast(sequence);
1:                 }
1:             }
1:             return value;
1:         }
1: 
1:         public void writePayload(SequenceSet value, DataOutput out) throws IOException {
1:             out.writeInt(value.size());
1:             Sequence sequence = value.getHead();
1:             while (sequence != null ) {
1:                 if( sequence.range() > 1 ) {
1:                     out.writeBoolean(true);
1:                     out.writeLong(sequence.first);
1:                     out.writeLong(sequence.last);
1:                 } else {
1:                     out.writeBoolean(false);
1:                     out.writeLong(sequence.first);
1:                 }
1:                 sequence = sequence.getNext();
1:             }
1:         }
1:     }
1:     
1:     public void add(Sequence value) {
1:         // TODO we can probably optimize this a bit
1:         for(long i=value.first; i<value.last+1; i++) {
1:             add(i);
1:         }
1:     }
1:     
1:     
1:     /**
1:      * 
1:      * @param value
1:      *            the value to add to the list
1:      * @return false if the value was a duplicate.
1:      */
1:     public boolean add(long value) {
1: 
1:         if (isEmpty()) {
1:             addFirst(new Sequence(value));
1:             return true;
1:         }
1: 
1:         Sequence sequence = getHead();
1:         while (sequence != null) {
1: 
1:             if (sequence.isAdjacentToLast(value)) {
1:                 // grow the sequence...
1:                 sequence.last = value;
1:                 // it might connect us to the next sequence..
1:                 if (sequence.getNext() != null) {
1:                     Sequence next = sequence.getNext();
1:                     if (next.isAdjacentToFirst(value)) {
1:                         // Yep the sequence connected.. so join them.
1:                         sequence.last = next.last;
1:                         next.unlink();
1:                     }
1:                 }
1:                 return true;
1:             }
1: 
1:             if (sequence.isAdjacentToFirst(value)) {
1:                 // grow the sequence...
1:                 sequence.first = value;
1: 
1:                 // it might connect us to the previous
1:                 if (sequence.getPrevious() != null) {
1:                     Sequence prev = sequence.getPrevious();
1:                     if (prev.isAdjacentToLast(value)) {
1:                         // Yep the sequence connected.. so join them.
1:                         sequence.first = prev.first;
1:                         prev.unlink();
1:                     }
1:                 }
1:                 return true;
1:             }
1: 
1:             // Did that value land before this sequence?
1:             if (value < sequence.first) {
1:                 // Then insert a new entry before this sequence item.
1:                 sequence.linkBefore(new Sequence(value));
1:                 return true;
1:             }
1: 
1:             // Did that value land within the sequence? The it's a duplicate.
1:             if (sequence.contains(value)) {
1:                 return false;
1:             }
1: 
1:             sequence = sequence.getNext();
1:         }
1: 
1:         // Then the value is getting appended to the tail of the sequence.
1:         addLast(new Sequence(value));
1:         return true;
1:     }
1:     
1:     /**
1:      * Removes and returns the first element from this list.
1:      *
1:      * @return the first element from this list.
1:      * @throws NoSuchElementException if this list is empty.
1:      */
1:     public long removeFirst() {
1:         if (isEmpty()) {
1:             throw new NoSuchElementException();
1:         }
1:         
1:         Sequence rc = removeFirstSequence(1);
1:         return rc.first;
1:     }
1:     
1:     /**
1:      * Removes and returns the first sequence that is count range large.
1:      *
1:      * @return a sequence that is count range large, or null if no sequence is that large in the list.
1:      */
1:     public Sequence removeFirstSequence(long count) {
1:         if (isEmpty()) {
1:             return null;
1:         }
1:         
1:         Sequence sequence = getHead();
1:         while (sequence != null ) {
1:             if (sequence.range() == count ) {
1:                 sequence.unlink();
1:                 return sequence;
1:             }
1:             if (sequence.range() > count ) {
0:                 Sequence rc = new Sequence(sequence.first, sequence.first+count);
1:                 sequence.first+=count;
1:                 return rc;
1:             }
1:             sequence = sequence.getNext();
1:         }
1:         return null;
1:     }
1: 
1: 
1:     /**
1:      * @return all the id Sequences that are missing from this set that are not
1:      *         in between the range provided.
1:      */
1:     public List<Sequence> getMissing(long first, long last) {
1:         ArrayList<Sequence> rc = new ArrayList<Sequence>();
1:         if (first > last) {
1:             throw new IllegalArgumentException("First cannot be more than last");
1:         }
1:         if (isEmpty()) {
1:             // We are missing all the messages.
1:             rc.add(new Sequence(first, last));
1:             return rc;
1:         }
1: 
1:         Sequence sequence = getHead();
1:         while (sequence != null && first <= last) {
1:             if (sequence.contains(first)) {
1:                 first = sequence.last + 1;
1:             } else {
1:                 if (first < sequence.first) {
1:                     if (last < sequence.first) {
1:                         rc.add(new Sequence(first, last));
1:                         return rc;
1:                     } else {
1:                         rc.add(new Sequence(first, sequence.first - 1));
1:                         first = sequence.last + 1;
1:                     }
1:                 }
1:             }
1:             sequence = sequence.getNext();
1:         }
1: 
1:         if (first <= last) {
1:             rc.add(new Sequence(first, last));
1:         }
1:         return rc;
1:     }
1: 
1:     /**
1:      * @return all the Sequence that are in this list
1:      */
1:     public List<Sequence> getReceived() {
1:         ArrayList<Sequence> rc = new ArrayList<Sequence>(size());
1:         Sequence sequence = getHead();
1:         while (sequence != null) {
1:             rc.add(new Sequence(sequence.first, sequence.last));
1:             sequence = sequence.getNext();
1:         }
1:         return rc;
1:     }
1:    
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:be8e58b
/////////////////////////////////////////////////////////////////////////
1:         // check for append
1:         Sequence sequence = getTail();
1:         if (sequence.isAdjacentToLast(value)) {
1:             sequence.last = value;
1:             return true;
1:         }
1: 
1:         sequence = getHead();
commit:bf59b7d
/////////////////////////////////////////////////////////////////////////
1:                 Sequence rc = new Sequence(sequence.first, sequence.first+count-1);
commit:2b10259
/////////////////////////////////////////////////////////////////////////
1:     public long rangeSize() {
1:         long result = 0;
1:         Sequence sequence = getHead();
1:         while (sequence != null) {
1:             result += sequence.range();
1:             sequence = sequence.getNext();
1:         }
1:         return result;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6e6d860
/////////////////////////////////////////////////////////////////////////
1:         private long lastReturned = -1;
1:             if (currentEntry != null) {
1:                 lastReturned = currentEntry.first - 1;
1:             }
commit:82e3be3
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:  *
1: public class SequenceSet extends LinkedNodeList<Sequence> implements Iterable<Long> {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Removes the given value from the Sequence set, splitting a
1:      * contained sequence if necessary.
1:      *
1:      * @param value
1:      *          The value that should be removed from the SequenceSet.
1:      *
1:      * @return true if the value was removed from the set, false if there
1:      *         was no sequence in the set that contained the given value.
1:      */
1:     public boolean remove(long value) {
1:         Sequence sequence = getHead();
1:         while (sequence != null ) {
1:             if(sequence.contains(value)) {
1:                 if (sequence.range() == 1) {
1:                     sequence.unlink();
1:                     return true;
1:                 } else if (sequence.getFirst() == value) {
1:                     sequence.setFirst(value+1);
1:                     return true;
1:                 } else if (sequence.getLast() == value) {
1:                     sequence.setLast(value-1);
1:                     return true;
1:                 } else {
1:                     sequence.linkBefore(new Sequence(sequence.first, value-1));
1:                     sequence.linkAfter(new Sequence(value+1, sequence.last));
1:                     sequence.unlink();
1:                     return true;
1:                 }
1:             }
1: 
1:             sequence = sequence.getNext();
1:         }
1: 
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Removes and returns the last sequence from this list.
1:      *
1:      * @return the last sequence from this list or null if the list is empty.
1:      */
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns true if the value given is contained within one of the
1:      * sequences held in this set.
1:      *
1:      * @param value
1:      *      The value to search for in the set.
1:      *
1:      * @return true if the value is contained in the set.
1:      */
1:     public boolean contains(long value) {
1:         if (isEmpty()) {
1:             return false;
1:         }
0: 
0:         Sequence sequence = getHead();
1:         while (sequence != null) {
1:             if (sequence.contains(value)) {
1:                 return true;
1:             }
1:             sequence = sequence.getNext();
1:         }
0: 
1:         return false;
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:                 return last <= sequence.last;
1:     /**
1:      * Computes the size of this Sequence by summing the values of all
1:      * the contained sequences.
0:      *
1:      * @return the total number of values contained in this set if it
1:      *         were to be iterated over like an array.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     public Iterator<Long> iterator() {
1:         return new SequenceIterator();
1:     }
0: 
1:     private class SequenceIterator implements Iterator<Long> {
0: 
1:         private Sequence currentEntry;
0:         private long lastReturned;
0: 
1:         public SequenceIterator() {
1:             currentEntry = getHead();
0:             lastReturned = currentEntry.first - 1;
1:         }
0: 
1:         public boolean hasNext() {
1:             return currentEntry != null;
1:         }
0: 
1:         public Long next() {
1:             if (currentEntry == null) {
1:                 throw new NoSuchElementException();
1:             }
0: 
1:             if(lastReturned < currentEntry.first) {
1:                 lastReturned = currentEntry.first;
1:                 if (currentEntry.range() == 1) {
1:                     currentEntry = currentEntry.getNext();
1:                 }
1:             } else {
1:                 lastReturned++;
1:                 if (lastReturned == currentEntry.last) {
1:                     currentEntry = currentEntry.getNext();
1:                 }
1:             }
0: 
1:             return lastReturned;
1:         }
0: 
1:         public void remove() {
1:             throw new UnsupportedOperationException();
1:         }
0: 
1:     }
0: 
============================================================================