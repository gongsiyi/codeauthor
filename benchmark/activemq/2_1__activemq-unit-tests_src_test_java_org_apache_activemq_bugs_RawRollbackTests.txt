1:245771a: /**
1:245771a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:245771a:  * contributor license agreements.  See the NOTICE file distributed with
1:245771a:  * this work for additional information regarding copyright ownership.
1:245771a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:245771a:  * (the "License"); you may not use this file except in compliance with
1:245771a:  * the License.  You may obtain a copy of the License at
1:245771a:  *
1:245771a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:245771a:  *
1:245771a:  * Unless required by applicable law or agreed to in writing, software
1:245771a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:245771a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:245771a:  * See the License for the specific language governing permissions and
1:245771a:  * limitations under the License.
1:245771a:  */
1:245771a: 
1:245771a: package org.apache.activemq.bugs;
1:245771a: 
1:245771a: import static org.junit.Assert.assertEquals;
1:245771a: import static org.junit.Assert.assertTrue;
1:245771a: 
1:245771a: import java.util.ArrayList;
1:245771a: import java.util.List;
1:245771a: 
1:245771a: import javax.jms.Connection;
1:245771a: import javax.jms.ConnectionFactory;
1:245771a: import javax.jms.Destination;
1:245771a: import javax.jms.Message;
1:245771a: import javax.jms.MessageConsumer;
1:245771a: import javax.jms.MessageProducer;
1:245771a: import javax.jms.Session;
1:245771a: import javax.jms.TextMessage;
1:245771a: 
1:245771a: import org.apache.activemq.ActiveMQConnectionFactory;
1:245771a: import org.apache.activemq.broker.BrokerService;
1:245771a: import org.apache.activemq.command.ActiveMQQueue;
1:245771a: import org.junit.After;
1:245771a: import org.junit.AfterClass;
1:245771a: import org.junit.Before;
1:245771a: import org.junit.BeforeClass;
1:245771a: import org.junit.Test;
1:245771a: 
1:245771a: public class RawRollbackTests {
1:245771a: 	
1:245771a: 	private static ConnectionFactory connectionFactory;
1:245771a: 	private static Destination queue;
1:245771a: 	private static BrokerService broker;
1:245771a: 
1:245771a: 	@BeforeClass
1:245771a: 	public static void clean() throws Exception {
1:245771a: 		broker = new BrokerService();
1:245771a: 		broker.setDeleteAllMessagesOnStartup(true);
1:245771a: 		broker.setUseJmx(true);
1:245771a: 		broker.start();
1:245771a: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();
1:245771a: 		connectionFactory.setBrokerURL("vm://localhost?async=false&waitForStart=5000&jms.prefetchPolicy.all=0");
1:245771a: 		RawRollbackTests.connectionFactory = connectionFactory;
1:245771a: 		queue = new ActiveMQQueue("queue");
1:245771a: 	}
1:245771a: 
1:245771a: 	@AfterClass
1:245771a: 	public static void close() throws Exception {
1:245771a: 		broker.stop();
1:245771a: 	}
1:245771a: 
1:245771a: 	@Before
1:245771a: 	public void clearData() throws Exception {
1:245771a: 		getMessages(false); // drain queue
1:245771a: 		convertAndSend("foo");
1:245771a: 		convertAndSend("bar");
1:245771a: 	}
1:245771a: 
1:245771a: 
1:245771a: 	@After
1:245771a: 	public void checkPostConditions() throws Exception {
1:245771a: 
1:245771a: 		Thread.sleep(1000L);
1:245771a: 		List<String> list = getMessages(false);
1:245771a: 		assertEquals(2, list.size());
1:245771a: 
1:245771a: 	}
1:245771a: 
1:245771a: 	@Test
1:245771a: 	public void testReceiveMessages() throws Exception {
1:245771a: 
1:245771a: 		List<String> list = getMessages(true);
1:245771a: 		assertEquals(2, list.size());
1:245771a: 		assertTrue(list.contains("foo"));
1:245771a: 
1:245771a: 	}
1:245771a: 	
1:245771a: 	private void convertAndSend(String msg) throws Exception {
1:245771a: 		Connection connection = connectionFactory.createConnection();
1:245771a: 		connection.start();
1:245771a: 		Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:245771a: 		MessageProducer producer = session.createProducer(queue);
1:245771a: 		producer.send(session.createTextMessage(msg));
1:245771a: 		producer.close();
1:245771a: 		session.commit();
1:245771a: 		session.close();
1:245771a: 		connection.close();
1:245771a: 	}
1:245771a: 
1:245771a: 	private List<String> getMessages(boolean rollback) throws Exception {
1:245771a: 		Connection connection = connectionFactory.createConnection();
1:245771a: 		connection.start();
1:245771a: 		Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:245771a: 		String next = "";
1:245771a: 		List<String> msgs = new ArrayList<String>();
1:245771a: 		while (next != null) {
1:245771a: 			next = (String) receiveAndConvert(session);
1:245771a: 			if (next != null)
1:245771a: 				msgs.add(next);
1:245771a: 		}
1:245771a: 		if (rollback) {
1:245771a: 			session.rollback();
1:245771a: 		} else {
1:245771a: 			session.commit();
1:245771a: 		}
1:245771a: 		session.close();
1:245771a: 		connection.close();
1:245771a: 		return msgs;
1:245771a: 	}
1:245771a: 
1:245771a: 	private String receiveAndConvert(Session session) throws Exception {
1:245771a: 		MessageConsumer consumer = session.createConsumer(queue);
1:245771a: 		Message message = consumer.receive(100L);
1:245771a: 		consumer.close();
1:245771a: 		if (message==null) {
1:245771a: 			return null;
1:245771a: 		}
1:245771a: 		return ((TextMessage)message).getText();
1:245771a: 	}
1:245771a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:245771a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.AfterClass;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: public class RawRollbackTests {
1: 	
1: 	private static ConnectionFactory connectionFactory;
1: 	private static Destination queue;
1: 	private static BrokerService broker;
1: 
1: 	@BeforeClass
1: 	public static void clean() throws Exception {
1: 		broker = new BrokerService();
1: 		broker.setDeleteAllMessagesOnStartup(true);
1: 		broker.setUseJmx(true);
1: 		broker.start();
1: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();
1: 		connectionFactory.setBrokerURL("vm://localhost?async=false&waitForStart=5000&jms.prefetchPolicy.all=0");
1: 		RawRollbackTests.connectionFactory = connectionFactory;
1: 		queue = new ActiveMQQueue("queue");
1: 	}
1: 
1: 	@AfterClass
1: 	public static void close() throws Exception {
1: 		broker.stop();
1: 	}
1: 
1: 	@Before
1: 	public void clearData() throws Exception {
1: 		getMessages(false); // drain queue
1: 		convertAndSend("foo");
1: 		convertAndSend("bar");
1: 	}
1: 
1: 
1: 	@After
1: 	public void checkPostConditions() throws Exception {
1: 
1: 		Thread.sleep(1000L);
1: 		List<String> list = getMessages(false);
1: 		assertEquals(2, list.size());
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testReceiveMessages() throws Exception {
1: 
1: 		List<String> list = getMessages(true);
1: 		assertEquals(2, list.size());
1: 		assertTrue(list.contains("foo"));
1: 
1: 	}
1: 	
1: 	private void convertAndSend(String msg) throws Exception {
1: 		Connection connection = connectionFactory.createConnection();
1: 		connection.start();
1: 		Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1: 		MessageProducer producer = session.createProducer(queue);
1: 		producer.send(session.createTextMessage(msg));
1: 		producer.close();
1: 		session.commit();
1: 		session.close();
1: 		connection.close();
1: 	}
1: 
1: 	private List<String> getMessages(boolean rollback) throws Exception {
1: 		Connection connection = connectionFactory.createConnection();
1: 		connection.start();
1: 		Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1: 		String next = "";
1: 		List<String> msgs = new ArrayList<String>();
1: 		while (next != null) {
1: 			next = (String) receiveAndConvert(session);
1: 			if (next != null)
1: 				msgs.add(next);
1: 		}
1: 		if (rollback) {
1: 			session.rollback();
1: 		} else {
1: 			session.commit();
1: 		}
1: 		session.close();
1: 		connection.close();
1: 		return msgs;
1: 	}
1: 
1: 	private String receiveAndConvert(Session session) throws Exception {
1: 		MessageConsumer consumer = session.createConsumer(queue);
1: 		Message message = consumer.receive(100L);
1: 		consumer.close();
1: 		if (message==null) {
1: 			return null;
1: 		}
1: 		return ((TextMessage)message).getText();
1: 	}
1: }
============================================================================