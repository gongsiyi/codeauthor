3:f0e6f26: /**
1:974f689:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:974f689:  * contributor license agreements.  See the NOTICE file distributed with
1:974f689:  * this work for additional information regarding copyright ownership.
1:974f689:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:974f689:  * (the "License"); you may not use this file except in compliance with
1:974f689:  * the License.  You may obtain a copy of the License at
2:f0e6f26:  *
1:974f689:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f0e6f26:  *
1:974f689:  * Unless required by applicable law or agreed to in writing, software
1:974f689:  * distributed under the License is distributed on an "AS IS" BASIS,
1:974f689:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:974f689:  * See the License for the specific language governing permissions and
1:974f689:  * limitations under the License.
3:f0e6f26:  */
1:b66559e: package org.apache.activemq.jms.pool;
14:f0e6f26: 
1:e6597c4: import static org.junit.Assert.assertEquals;
1:e6597c4: 
1:f0e6f26: import java.util.concurrent.Callable;
1:f0e6f26: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:f0e6f26: import java.util.concurrent.ExecutorService;
1:f0e6f26: import java.util.concurrent.Executors;
1:f0e6f26: import java.util.concurrent.Future;
1:f0e6f26: 
1:1b38caa: import javax.jms.Connection;
1:1b38caa: import javax.jms.JMSException;
1:1b38caa: import javax.jms.Session;
1:1b38caa: 
1:1b38caa: import org.apache.activemq.ActiveMQConnectionFactory;
1:1b38caa: import org.apache.log4j.Logger;
1:e6597c4: import org.junit.Test;
1:1b38caa: 
1:f0e6f26: /**
1:1b38caa:  * Checks the behavior of the PooledConnectionFactory when the maximum amount of sessions is being reached
1:1b38caa:  * (maximumActive). When using setBlockIfSessionPoolIsFull(true) on the ConnectionFactory, further requests for sessions
1:1b38caa:  * should block. If it does not block, its a bug.
1:f0e6f26:  */
1:e6597c4: public class PooledConnectionFactoryMaximumActiveTest extends JmsPoolTestSupport {
1:e6597c4: 
1:f0e6f26:     public final static Logger LOG = Logger.getLogger(PooledConnectionFactoryMaximumActiveTest.class);
1:f0e6f26:     public static Connection conn = null;
1:f0e6f26:     public static int sleepTimeout = 5000;
1:f0e6f26: 
1:9ef4259:     private static ConcurrentMap<Integer, Session> sessions = new ConcurrentHashMap<Integer, Session>();
1:f0e6f26: 
1:f0e6f26:     public static void addSession(Session s) {
1:f0e6f26:         sessions.put(s.hashCode(), s);
5:f0e6f26:     }
1:f0e6f26: 
1:f0e6f26:     /**
1:1b38caa:      * Tests the behavior of the sessionPool of the PooledConnectionFactory when maximum number of sessions are reached.
1:1b38caa:      * This test uses maximumActive=1. When creating two threads that both try to create a JMS session from the same JMS
1:1b38caa:      * connection, the thread that is second to call createSession() should block (as only 1 session is allowed) until
1:1b38caa:      * the session is returned to pool. If it does not block, its a bug.
1:f0e6f26:      */
1:e6597c4:     @Test(timeout = 60000)
1:1b38caa:     public void testApp() throws Exception {
1:f0e6f26:         // Initialize JMS connection
1:e6597c4:         ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(
1:e6597c4:             "vm://broker1?marshal=false&broker.useJmx=false&broker.persistent=false");
1:e6597c4: 
1:b66559e:         PooledConnectionFactory cf = new PooledConnectionFactory();
1:b66559e:         cf.setConnectionFactory(amq);
1:f0e6f26:         cf.setMaxConnections(3);
1:dd2556b:         cf.setMaximumActiveSessionPerConnection(1);
1:f0e6f26:         cf.setBlockIfSessionPoolIsFull(true);
1:f0e6f26:         conn = cf.createConnection();
1:f0e6f26: 
1:f0e6f26:         // start test runner threads. It is expected that the second thread
1:f0e6f26:         // blocks on the call to createSession()
1:f0e6f26: 
1:f0e6f26:         ExecutorService executor = Executors.newFixedThreadPool(2);
1:f0e6f26:         executor.submit(new TestRunner2());
1:1b38caa:         Future<Boolean> result2 = executor.submit(new TestRunner2());
1:f0e6f26: 
1:f0e6f26:         // sleep to allow threads to run
1:f0e6f26:         Thread.sleep(sleepTimeout);
1:f0e6f26: 
1:f0e6f26:         // second task should not have finished, instead wait on getting a
1:f0e6f26:         // JMS Session
1:1b38caa:         assertEquals(false, result2.isDone());
1:f0e6f26: 
1:1b38caa:         // Only 1 session should have been created
1:1b38caa:         assertEquals(1, sessions.size());
1:f0e6f26: 
1:f0e6f26:         // Take all threads down
1:f0e6f26:         executor.shutdownNow();
1:27ce49f: 
1:27ce49f:         cf.stop();
1:f0e6f26:     }
1:f0e6f26: 
1:e6597c4:     static class TestRunner2 implements Callable<Boolean> {
1:f0e6f26: 
1:e6597c4:         public final static Logger TASK_LOG = Logger.getLogger(TestRunner2.class);
1:f0e6f26: 
1:e6597c4:         /**
1:e6597c4:          * @return true if test succeeded, false otherwise
1:e6597c4:          */
1:e6597c4:         @Override
1:e6597c4:         public Boolean call() {
1:f0e6f26: 
1:e6597c4:             Session one = null;
1:f0e6f26: 
1:e6597c4:             // wait at most 5 seconds for the call to createSession
1:e6597c4:             try {
1:f0e6f26: 
1:e6597c4:                 if (PooledConnectionFactoryMaximumActiveTest.conn == null) {
1:e6597c4:                     TASK_LOG.error("Connection not yet initialized. Aborting test.");
1:e6597c4:                     return new Boolean(false);
1:e6597c4:                 }
1:e6597c4: 
1:e6597c4:                 one = PooledConnectionFactoryMaximumActiveTest.conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e6597c4:                 TASK_LOG.info("Created new Session with id" + one);
1:e6597c4:                 PooledConnectionFactoryMaximumActiveTest.addSession(one);
1:e6597c4:                 Thread.sleep(2 * PooledConnectionFactoryMaximumActiveTest.sleepTimeout);
1:e6597c4:             } catch (Exception ex) {
1:e6597c4:                 TASK_LOG.error(ex.getMessage());
2:f0e6f26:                 return new Boolean(false);
1:e6597c4:             } finally {
1:e6597c4:                 if (one != null)
1:e6597c4:                     try {
1:e6597c4:                         one.close();
1:e6597c4:                     } catch (JMSException e) {
1:e6597c4:                         TASK_LOG.error(e.getMessage());
1:e6597c4:                     }
1:f0e6f26:             }
1:f0e6f26: 
1:e6597c4:             // all good, test succeeded
1:e6597c4:             return new Boolean(true);
1:f0e6f26:         }
1:f0e6f26:     }
1:f0e6f26: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1: 
1:         cf.stop();
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     private static ConcurrentMap<Integer, Session> sessions = new ConcurrentHashMap<Integer, Session>();
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public class PooledConnectionFactoryMaximumActiveTest extends JmsPoolTestSupport {
1: 
1:     @Test(timeout = 60000)
1:         ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(
1:             "vm://broker1?marshal=false&broker.useJmx=false&broker.persistent=false");
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     static class TestRunner2 implements Callable<Boolean> {
1:         public final static Logger TASK_LOG = Logger.getLogger(TestRunner2.class);
1:         /**
1:          * @return true if test succeeded, false otherwise
1:          */
1:         @Override
1:         public Boolean call() {
1:             Session one = null;
1:             // wait at most 5 seconds for the call to createSession
1:             try {
1:                 if (PooledConnectionFactoryMaximumActiveTest.conn == null) {
1:                     TASK_LOG.error("Connection not yet initialized. Aborting test.");
1:                     return new Boolean(false);
1:                 }
1: 
1:                 one = PooledConnectionFactoryMaximumActiveTest.conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 TASK_LOG.info("Created new Session with id" + one);
1:                 PooledConnectionFactoryMaximumActiveTest.addSession(one);
1:                 Thread.sleep(2 * PooledConnectionFactoryMaximumActiveTest.sleepTimeout);
1:             } catch (Exception ex) {
1:                 TASK_LOG.error(ex.getMessage());
1:             } finally {
1:                 if (one != null)
1:                     try {
1:                         one.close();
1:                     } catch (JMSException e) {
1:                         TASK_LOG.error(e.getMessage());
1:                     }
1:             // all good, test succeeded
1:             return new Boolean(true);
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
/////////////////////////////////////////////////////////////////////////
1:         PooledConnectionFactory cf = new PooledConnectionFactory();
1:         cf.setConnectionFactory(amq);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestCase;
0: import junit.framework.TestSuite;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.log4j.Logger;
1:  * Checks the behavior of the PooledConnectionFactory when the maximum amount of sessions is being reached
1:  * (maximumActive). When using setBlockIfSessionPoolIsFull(true) on the ConnectionFactory, further requests for sessions
1:  * should block. If it does not block, its a bug.
0: public class PooledConnectionFactoryMaximumActiveTest extends TestCase {
0:     private static ConcurrentHashMap<Integer, Session> sessions = new ConcurrentHashMap<Integer, Session>();
0:      * @param testName
0:      *            name of the test case
0:     public PooledConnectionFactoryMaximumActiveTest(String testName) {
0:         super(testName);
/////////////////////////////////////////////////////////////////////////
0:     public static Test suite() {
0:         return new TestSuite(PooledConnectionFactoryMaximumActiveTest.class);
1:      * Tests the behavior of the sessionPool of the PooledConnectionFactory when maximum number of sessions are reached.
1:      * This test uses maximumActive=1. When creating two threads that both try to create a JMS session from the same JMS
1:      * connection, the thread that is second to call createSession() should block (as only 1 session is allowed) until
1:      * the session is returned to pool. If it does not block, its a bug.
1:     public void testApp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         Future<Boolean> result2 = executor.submit(new TestRunner2());
1:         assertEquals(false, result2.isDone());
1:         // Only 1 session should have been created
1:         assertEquals(1, sessions.size());
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
commit:f0e6f26
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.pool;
1: 
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: 
0: import junit.framework.Assert;
0: import junit.framework.Test;
0: import junit.framework.TestCase;
0: import junit.framework.TestSuite;
1: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Session;
1: 
0: import org.apache.activemq.pool.PooledConnectionFactory;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
0: import org.apache.log4j.Logger;
1: 
1: 
1: /**
0:  * Checks the behavior of the PooledConnectionFactory when the maximum amount
0:  * of sessions is being reached (maximumActive).
0:  * When using setBlockIfSessionPoolIsFull(true) on the ConnectionFactory,
0:  * further requests for sessions should block.
0:  * If it does not block, its a bug.
1:  *
0:  * @author: tmielke
1:  */
0: public class PooledConnectionFactoryMaximumActiveTest extends TestCase
0: {
1:     public final static Logger LOG = Logger.getLogger(PooledConnectionFactoryMaximumActiveTest.class);
1:     public static Connection conn = null;
1:     public static int sleepTimeout = 5000;
1: 
0:     private static ConcurrentHashMap<Integer, Session> sessions = new ConcurrentHashMap<Integer,Session>();
1: 
1: 
1:     /**
0:      * Create the test case
1:      *
0:      * @param testName name of the test case
1:      */
0:     public PooledConnectionFactoryMaximumActiveTest( String testName )
0:     {
0:         super( testName );
1:     }
1: 
1:     public static void addSession(Session s) {
1:         sessions.put(s.hashCode(), s);
1:     }
1: 
1:     /**
0:      * @return the suite of tests being tested
1:      */
0:     public static Test suite()
0:     {
0:         return new TestSuite( PooledConnectionFactoryMaximumActiveTest.class );
1:     }
1: 
1:     /**
0:      * Tests the behavior of the sessionPool of the PooledConnectionFactory
0:      * when maximum number of sessions are reached. This test uses
0:      * maximumActive=1.
0:      * When creating two threads that both
0:      * try to create a JMS session from the same JMS connection,
0:      * the thread that is second to call createSession()
0:      * should block (as only 1 session is allowed) until the
0:      * session is returned to pool.
0:      * If it does not block, its a bug.
1:      *
1:      */
0:     public void testApp() throws Exception
0:     {
1:         // Initialize JMS connection
0:         ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory("vm://broker1?marshal=false&broker.persistent=false");
0:         PooledConnectionFactory cf = new PooledConnectionFactory(amq);
1:         cf.setMaxConnections(3);
0:         cf.setMaximumActive(1);
1:         cf.setBlockIfSessionPoolIsFull(true);
1:         conn = cf.createConnection();
1: 
1:         // start test runner threads. It is expected that the second thread
1:         // blocks on the call to createSession()
1: 
1:         ExecutorService executor = Executors.newFixedThreadPool(2);
1:         executor.submit(new TestRunner2());
0:         // Thread.sleep(100);
0:         Future<Boolean> result2 = (Future<Boolean>) executor.submit(new TestRunner2());
1: 
1: 
1:         // sleep to allow threads to run
1:         Thread.sleep(sleepTimeout);
1: 
1:         // second task should not have finished, instead wait on getting a
1:         // JMS Session
0:         Assert.assertEquals(false, result2.isDone());
1: 
0:         //Only 1 session should have been created
0:         Assert.assertEquals(1, sessions.size());
1: 
1:         // Take all threads down
1:         executor.shutdownNow();
1: 
1:     }
1: }
1: 
0: class TestRunner2 implements Callable<Boolean> {
1: 
0:     public final static Logger LOG = Logger.getLogger(TestRunner2.class);
1: 
1:     /**
0:      * @return true if test succeeded, false otherwise
1:      */
0:     public Boolean call() {
1: 
0:         Session one = null;
1: 
0:         // wait at most 5 seconds for the call to createSession
0:         try {
1: 
0:             if (PooledConnectionFactoryMaximumActiveTest.conn == null) {
0:                 LOG.error("Connection not yet initialized. Aborting test.");
1:                 return new Boolean(false);
1:             }
1: 
0:             one = PooledConnectionFactoryMaximumActiveTest.conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             LOG.info("Created new Session with id" + one);
0:             PooledConnectionFactoryMaximumActiveTest.addSession(one);
0:             Thread.sleep(2 * PooledConnectionFactoryMaximumActiveTest.sleepTimeout);
1: 
0:         } catch (Exception ex) {
0:             LOG.error(ex.getMessage());
1:             return new Boolean(false);
1: 
0:         } finally {
0:             if (one != null)
0:                 try {
0:                     one.close();
0:                 } catch (JMSException e) {
0:                     LOG.error(e.getMessage());
1:                 }
1:         }
1: 
0:         // all good, test succeeded
0:         return new Boolean(true);
1:     }
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:dd2556b
/////////////////////////////////////////////////////////////////////////
1:         cf.setMaximumActiveSessionPerConnection(1);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:974f689
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.log4j.Logger;
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.Future;
============================================================================