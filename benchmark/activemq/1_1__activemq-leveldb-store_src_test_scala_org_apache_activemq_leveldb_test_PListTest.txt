1:3c69127: /**
1:3c69127:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3c69127:  * contributor license agreements.  See the NOTICE file distributed with
1:3c69127:  * this work for additional information regarding copyright ownership.
1:3c69127:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3c69127:  * (the "License"); you may not use this file except in compliance with
1:3c69127:  * the License.  You may obtain a copy of the License at
1:3c69127:  *
1:3c69127:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3c69127:  *
1:3c69127:  * Unless required by applicable law or agreed to in writing, software
1:3c69127:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c69127:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c69127:  * See the License for the specific language governing permissions and
1:3c69127:  * limitations under the License.
1:3c69127:  */
1:3c69127: package org.apache.activemq.leveldb.test;
1:3c69127: 
1:3c69127: 
1:3c69127: import org.apache.activemq.ActiveMQConnectionFactory;
1:3c69127: import org.apache.activemq.broker.BrokerService;
1:3c69127: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:3c69127: import org.apache.activemq.broker.region.policy.PolicyMap;
1:3c69127: import org.apache.activemq.leveldb.LevelDBStore;
1:3c69127: import org.apache.activemq.store.PersistenceAdapter;
1:9752e1d: import org.apache.tools.ant.util.FileUtils;
1:3c69127: import org.junit.After;
1:3c69127: import org.junit.Before;
1:3c69127: import org.junit.Test;
1:3c69127: 
1:3c69127: import javax.jms.Connection;
1:3c69127: import javax.jms.DeliveryMode;
1:3c69127: import javax.jms.MessageProducer;
1:3c69127: import javax.jms.Session;
1:3c69127: import java.io.File;
1:3c69127: 
1:3c69127: public class PListTest {
1:3c69127: 
1:3c69127:     protected BrokerService brokerService;
1:3c69127: 
1:3c69127:     @Before
1:3c69127:     public void setUp() throws Exception {
1:3c69127:         brokerService = new BrokerService();
1:3c69127:         brokerService.addConnector("tcp://localhost:0");
1:3c69127: 
1:3c69127:         LevelDBStore store = new LevelDBStore();
1:3c69127:         store.setDirectory(new File("target/activemq-data/haleveldb"));
1:3c69127:         store.deleteAllMessages();
1:3c69127:         brokerService.setPersistenceAdapter(store);
1:3c69127: 
1:3c69127:         PolicyMap policyMap = new PolicyMap();
1:3c69127:         PolicyEntry policy = new PolicyEntry();
1:3c69127:         policy.setMemoryLimit(1);
1:3c69127:         policyMap.setDefaultEntry(policy);
1:3c69127:         brokerService.setDestinationPolicy(policyMap);
1:3c69127: 
1:3c69127:         brokerService.start();
1:3c69127:     }
1:3c69127: 
1:3c69127:     @After
1:3c69127:     public void tearDown() throws Exception {
1:3c69127:         if (brokerService != null && brokerService.isStopped()) {
1:3c69127:             brokerService.stop();
1:3c69127:         }
1:9752e1d:         FileUtils.delete(new File("target/activemq-data/haleveldb"));
1:3c69127:     }
1:3c69127: 
1:3c69127:     @Test
1:3c69127:     public void testBrokerStop() throws Exception {
1:3c69127:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getServer().getConnectURI().toString());
1:3c69127:         Connection conn = factory.createConnection();
1:3c69127:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3c69127:         MessageProducer producer = sess.createProducer(sess.createQueue("TEST"));
1:3c69127:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:3c69127:         for (int i = 0; i < 10000; i++) {
1:3c69127:             producer.send(sess.createTextMessage(i + " message"));
1:3c69127:         }
1:3c69127:         brokerService.stop();
1:3c69127:         brokerService.waitUntilStopped();
1:3c69127:     }
1:3c69127: 
1:3c69127: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9752e1d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.tools.ant.util.FileUtils;
/////////////////////////////////////////////////////////////////////////
1:         FileUtils.delete(new File("target/activemq-data/haleveldb"));
commit:3c69127
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.leveldb.test;
1: 
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.leveldb.LevelDBStore;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.io.File;
1: 
1: public class PListTest {
1: 
1:     protected BrokerService brokerService;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.addConnector("tcp://localhost:0");
1: 
1:         LevelDBStore store = new LevelDBStore();
1:         store.setDirectory(new File("target/activemq-data/haleveldb"));
1:         store.deleteAllMessages();
1:         brokerService.setPersistenceAdapter(store);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setMemoryLimit(1);
1:         policyMap.setDefaultEntry(policy);
1:         brokerService.setDestinationPolicy(policyMap);
1: 
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null && brokerService.isStopped()) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testBrokerStop() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getServer().getConnectURI().toString());
1:         Connection conn = factory.createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = sess.createProducer(sess.createQueue("TEST"));
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         for (int i = 0; i < 10000; i++) {
1:             producer.send(sess.createTextMessage(i + " message"));
1:         }
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1: }
============================================================================