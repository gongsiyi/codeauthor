1:dc258ab: /**
1:dc258ab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dc258ab:  * contributor license agreements.  See the NOTICE file distributed with
1:dc258ab:  * this work for additional information regarding copyright ownership.
1:dc258ab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dc258ab:  * (the "License"); you may not use this file except in compliance with
1:dc258ab:  * the License.  You may obtain a copy of the License at
1:dc258ab:  *
1:dc258ab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dc258ab:  *
1:dc258ab:  * Unless required by applicable law or agreed to in writing, software
1:dc258ab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc258ab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc258ab:  * See the License for the specific language governing permissions and
1:dc258ab:  * limitations under the License.
1:dc258ab:  */
1:dc258ab: package org.apache.activemq.broker.ft;
1:dc258ab: 
1:dc258ab: import java.util.concurrent.TimeUnit;
1:dc258ab: import org.apache.activemq.ActiveMQConnection;
1:dc258ab: import org.apache.activemq.broker.BrokerService;
1:e16815a: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
1:dc258ab: import org.slf4j.Logger;
1:dc258ab: import org.slf4j.LoggerFactory;
1:dc258ab: 
1:32d3fd5: public class DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest extends DbRestartJDBCQueueMasterSlaveLeaseTest {
1:32d3fd5:     private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest.class);
1:dc258ab: 
1:c7aad77:     private long restartDelay = 2000;
1:dc258ab: 
1:dc258ab:     @Override
1:dc258ab:     protected void configureBroker(BrokerService brokerService) {
1:13bbe52:         // master and slave survive db restart and retain master/slave status
1:e16815a:         LeaseLockerIOExceptionHandler stopConnectors = new LeaseLockerIOExceptionHandler();
1:13bbe52:         brokerService.setIoExceptionHandler(stopConnectors);
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     @Override
1:dc258ab:     protected void delayTillRestartRequired() {
1:c7aad77:         if (restartDelay > 2000) {
1:dc258ab:             LOG.info("delay for more than lease quantum. While Db is offline, master should stay alive but could loose lease");
1:dc258ab:         } else {
1:dc258ab:             LOG.info("delay for less than lease quantum. While Db is offline, master should stay alive");
1:dc258ab:         }
1:dc258ab:         try {
1:dc258ab:             TimeUnit.MILLISECONDS.sleep(restartDelay);
1:dc258ab:         } catch (InterruptedException e) {
1:dc258ab:             e.printStackTrace();
1:dc258ab:         }
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     @Override
1:dc258ab:     protected void verifyExpectedBroker(int inflightMessageCount) {
1:dc258ab:         if (inflightMessageCount == 0  || (inflightMessageCount == failureCount + 10 && restartDelay <= 500)) {
1:dc258ab:             assertEquals("connected to master", master.getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());
1:13bbe52:         } else {
1:13bbe52:             // lease expired while DB was offline, either or master/slave can grab it so assert is not deterministic
1:13bbe52:             // but we still need to validate sent == received
1:dc258ab:         }
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     @Override
1:dc258ab:     public void setUp() throws Exception {
1:c7aad77:         restartDelay = 2000;
1:dc258ab:         super.setUp();
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public void testSendReceiveWithLeaseExpiry() throws Exception {
1:c7aad77:         restartDelay = 10000;
1:dc258ab:         testSendReceive();
1:dc258ab:     }
1:90beb3f: 
1:90beb3f:     // ignore this test case
1:90beb3f:     public void testAdvisory() throws Exception {}
1:e56c062: 
1:e56c062:    @Override
1:e56c062:    public void testSendReceive() throws Exception {
1:e56c062:        // Ignore this test for now, see AMQ-4975
1:e56c062:    }
1:dc258ab: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e16815a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
/////////////////////////////////////////////////////////////////////////
1:         LeaseLockerIOExceptionHandler stopConnectors = new LeaseLockerIOExceptionHandler();
author:Kevin Earls
-------------------------------------------------------------------------------
commit:e56c062
/////////////////////////////////////////////////////////////////////////
1: 
1:    @Override
1:    public void testSendReceive() throws Exception {
1:        // Ignore this test for now, see AMQ-4975
1:    }
author:Gary Tully
-------------------------------------------------------------------------------
commit:c7aad77
/////////////////////////////////////////////////////////////////////////
1:     private long restartDelay = 2000;
/////////////////////////////////////////////////////////////////////////
1:         if (restartDelay > 2000) {
/////////////////////////////////////////////////////////////////////////
1:         restartDelay = 2000;
1:         restartDelay = 10000;
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1:         // master and slave survive db restart and retain master/slave status
0:         JDBCIOExceptionHandler stopConnectors = new JDBCIOExceptionHandler();
1:         brokerService.setIoExceptionHandler(stopConnectors);
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             // lease expired while DB was offline, either or master/slave can grab it so assert is not deterministic
1:             // but we still need to validate sent == received
commit:32d3fd5
/////////////////////////////////////////////////////////////////////////
1: public class DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest extends DbRestartJDBCQueueMasterSlaveLeaseTest {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest.class);
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.ft;
1: 
1: import java.util.concurrent.TimeUnit;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.jdbc.JDBCIOExceptionHandler;
0: import org.apache.activemq.util.DefaultIOExceptionHandler;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class DbRestartJDBCQueueMasterSlaveLeaseIntactQuiesceTest extends DbRestartJDBCQueueMasterSlaveLeaseIntactTest {
0:     private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueMasterSlaveLeaseIntactQuiesceTest.class);
1: 
0:     private long restartDelay = 500;
1: 
1:     @Override
1:     protected void configureBroker(BrokerService brokerService) {
0:         brokerService.setIoExceptionHandler(new JDBCIOExceptionHandler());
1:     }
1: 
1:     @Override
1:     protected void delayTillRestartRequired() {
0:         if (restartDelay > 500) {
1:             LOG.info("delay for more than lease quantum. While Db is offline, master should stay alive but could loose lease");
1:         } else {
1:             LOG.info("delay for less than lease quantum. While Db is offline, master should stay alive");
1:         }
1:         try {
1:             TimeUnit.MILLISECONDS.sleep(restartDelay);
1:         } catch (InterruptedException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     @Override
1:     protected void verifyExpectedBroker(int inflightMessageCount) {
1:         if (inflightMessageCount == 0  || (inflightMessageCount == failureCount + 10 && restartDelay <= 500)) {
1:             assertEquals("connected to master", master.getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());
1:         }
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
0:         restartDelay = 500;
1:         super.setUp();
1:     }
1: 
1:     public void testSendReceiveWithLeaseExpiry() throws Exception {
0:         restartDelay = 3000;
1:         testSendReceive();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:90beb3f
/////////////////////////////////////////////////////////////////////////
1: 
1:     // ignore this test case
1:     public void testAdvisory() throws Exception {}
============================================================================