1:411c754: /**
1:411c754:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:411c754:  * contributor license agreements.  See the NOTICE file distributed with
1:411c754:  * this work for additional information regarding copyright ownership.
1:411c754:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:411c754:  * (the "License"); you may not use this file except in compliance with
1:411c754:  * the License.  You may obtain a copy of the License at
1:411c754:  *
1:411c754:  *      http://www.apache.org/licenses/LICENSE-2.0
1:411c754:  *
1:411c754:  * Unless required by applicable law or agreed to in writing, software
1:411c754:  * distributed under the License is distributed on an "AS IS" BASIS,
1:411c754:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:411c754:  * See the License for the specific language governing permissions and
1:411c754:  * limitations under the License.
1:411c754:  */
1:411c754: package org.apache.activemq.transport.amqp.profile;
1:411c754: 
1:411c754: import java.util.Enumeration;
1:411c754: import java.util.concurrent.TimeUnit;
1:411c754: 
1:411c754: import javax.jms.JMSException;
1:411c754: import javax.jms.Message;
1:411c754: import javax.jms.Queue;
1:411c754: import javax.jms.QueueBrowser;
1:411c754: import javax.jms.Session;
1:411c754: 
1:411c754: import org.apache.activemq.transport.amqp.JMSClientTestSupport;
1:411c754: import org.junit.Ignore;
1:411c754: import org.junit.Test;
1:411c754: import org.slf4j.Logger;
1:411c754: import org.slf4j.LoggerFactory;
1:411c754: 
1:411c754: /**
1:411c754:  * Test that creates a large number of QueueBrowser and Session instances over time.
1:411c754:  *
1:411c754:  * There is a pause at the end of the test to allow for heap dumps or post run analysis.
1:411c754:  */
1:411c754: public class QueueBrowserStressTest extends JMSClientTestSupport {
1:411c754: 
1:411c754:     protected static final Logger LOG = LoggerFactory.getLogger(QueueBrowserStressTest.class);
1:411c754: 
1:411c754:     private final int NUM_ITERATIONS = 1000;
1:411c754: 
1:411c754:     @Ignore("Used for profiling broker memory usage.")
1:411c754:     @Test
1:411c754:     public void testBrowserLeak() throws JMSException, InterruptedException {
1:411c754:         connection = createConnection();
1:411c754: 
1:411c754:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:411c754:         Queue queue = session.createQueue(getDestinationName());
2:411c754:         session.close();
1:411c754: 
1:411c754:         for (int i = 1; i <= NUM_ITERATIONS; ++i) {
1:411c754:             // When recreating session, memory leak does occurs on the client but memory leak still occurs on the server
1:411c754:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:411c754:             QueueBrowser browser = session.createBrowser(queue, "JMSXGroupSeq=0");
1:411c754: 
1:411c754:             int j = 1;
1:411c754: 
1:411c754:             Enumeration<?> enums = browser.getEnumeration();
1:411c754:             if (!enums.hasMoreElements()) {
1:411c754:                 LOG.debug("No messages in {}", queue.getQueueName());
1:411c754:             } else {
1:411c754:                 Message message = (Message) enums.nextElement();
1:411c754:                 if (message != null) {
1:411c754:                     LOG.debug("Received {} message : {} from {}", new Object[] {j++, message, queue.getQueueName()});
3:411c754:                 }
1:411c754:             }
1:411c754: 
1:28e7cb0:             LOG.debug("close browser for {}", queue.getQueueName());
1:28e7cb0:             try {
1:28e7cb0:                 browser.close();
1:28e7cb0:             } catch (JMSException e) {
1:28e7cb0:                 LOG.error("Error on browser close: {}", e);
1:411c754:             }
1:28e7cb0:             browser = null;
1:411c754: 
1:28e7cb0:             LOG.debug("close session for {}", queue.getQueueName());
1:28e7cb0:             try {
1:28e7cb0:                 session.close();
1:28e7cb0:             } catch (JMSException e) {
1:28e7cb0:                 LOG.error("Error on session close: {}", e);
1:411c754:             }
1:28e7cb0:             session = null;
1:411c754:         }
1:411c754: 
1:411c754:         LOG.info("Task complete, capture heap dump now");
1:411c754:         TimeUnit.MINUTES.sleep(5);
1:411c754:     }
1:411c754: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:28e7cb0
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("close browser for {}", queue.getQueueName());
1:             try {
1:                 browser.close();
1:             } catch (JMSException e) {
1:                 LOG.error("Error on browser close: {}", e);
1:             browser = null;
1:             LOG.debug("close session for {}", queue.getQueueName());
1:             try {
1:                 session.close();
1:             } catch (JMSException e) {
1:                 LOG.error("Error on session close: {}", e);
1:             session = null;
commit:411c754
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.profile;
1: 
1: import java.util.Enumeration;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.transport.amqp.JMSClientTestSupport;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that creates a large number of QueueBrowser and Session instances over time.
1:  *
1:  * There is a pause at the end of the test to allow for heap dumps or post run analysis.
1:  */
1: public class QueueBrowserStressTest extends JMSClientTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(QueueBrowserStressTest.class);
1: 
1:     private final int NUM_ITERATIONS = 1000;
1: 
1:     @Ignore("Used for profiling broker memory usage.")
1:     @Test
1:     public void testBrowserLeak() throws JMSException, InterruptedException {
1:         connection = createConnection();
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Queue queue = session.createQueue(getDestinationName());
1:         session.close();
1: 
1:         for (int i = 1; i <= NUM_ITERATIONS; ++i) {
1:             // When recreating session, memory leak does occurs on the client but memory leak still occurs on the server
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             QueueBrowser browser = session.createBrowser(queue, "JMSXGroupSeq=0");
1: 
1:             int j = 1;
1: 
1:             Enumeration<?> enums = browser.getEnumeration();
1:             if (!enums.hasMoreElements()) {
1:                 LOG.debug("No messages in {}", queue.getQueueName());
1:             } else {
1:                 Message message = (Message) enums.nextElement();
1:                 if (message != null) {
1:                     LOG.debug("Received {} message : {} from {}", new Object[] {j++, message, queue.getQueueName()});
1:                 }
1:             }
1: 
0:             if (browser != null) {
0:                 LOG.debug("close browser for {}", queue.getQueueName());
0:                 try {
0:                     browser.close();
0:                 } catch (JMSException e) {
0:                     LOG.error("Error on browser close: {}", e);
1:                 }
0:                 browser = null;
1:             }
1: 
0:             if (session != null) {
0:                 LOG.debug("close session for {}", queue.getQueueName());
0:                 try {
1:                     session.close();
0:                 } catch (JMSException e) {
0:                     LOG.error("Error on session close: {}", e);
1:                 }
0:                 session = null;
1:             }
1:         }
1: 
1:         LOG.info("Task complete, capture heap dump now");
1:         TimeUnit.MINUTES.sleep(5);
1:     }
1: }
============================================================================