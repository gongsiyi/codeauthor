3:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
1:933eb2f: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.TextMessage;
1:933eb2f: 
1:a677c21: import junit.framework.TestCase;
1:4743a20: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.command.ActiveMQMessage;
1:74a7a8b: import org.apache.activemq.command.ActiveMQQueue;
1:74a7a8b: import org.apache.activemq.command.ActiveMQTopic;
6:a677c21: 
1:a677c21: /**
1:a677c21:  * Useful base class for unit test cases
1:a677c21:  */
1:a677c21: public class TestSupport extends TestCase {
1:4743a20: 
1:a677c21:     protected ActiveMQConnectionFactory connectionFactory;
1:a677c21:     protected boolean topic = true;
1:a677c21: 
1:a677c21:     public TestSupport() {
1:a677c21:         super();
4:a677c21:     }
1:a677c21: 
1:a677c21:     public TestSupport(String name) {
1:a677c21:         super(name);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected ActiveMQMessage createMessage() {
1:a677c21:         return new ActiveMQMessage();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected Destination createDestination(String subject) {
1:a677c21:         if (topic) {
1:a677c21:             return new ActiveMQTopic(subject);
1:230a86c:         } else {
1:a677c21:             return new ActiveMQQueue(subject);
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:230a86c:     protected void assertTextMessagesEqual(Message[] firstSet, Message[] secondSet) throws JMSException {
1:230a86c:         assertTextMessagesEqual("", firstSet, secondSet);
1:230a86c:     }
1:230a86c: 
1:a677c21:     /**
1:a677c21:      * @param messsage
1:a677c21:      * @param firstSet
1:a677c21:      * @param secondSet
1:a677c21:      */
1:a677c21:     protected void assertTextMessagesEqual(String messsage, Message[] firstSet, Message[] secondSet) throws JMSException {
1:a677c21:         assertEquals("Message count does not match: " + messsage, firstSet.length, secondSet.length);
1:a677c21:         for (int i = 0; i < secondSet.length; i++) {
1:230a86c:             TextMessage m1 = (TextMessage)firstSet[i];
1:230a86c:             TextMessage m2 = (TextMessage)secondSet[i];
1:230a86c:             assertTextMessageEqual("Message " + (i + 1) + " did not match : ", m1, m2);
1:a677c21:         }
1:a677c21:     }
1:230a86c: 
1:a677c21:     protected void assertEquals(TextMessage m1, TextMessage m2) throws JMSException {
1:230a86c:         assertEquals("", m1, m2);
1:a677c21:     }
1:a677c21: 
1:230a86c:     /**
1:a677c21:      * @param message
1:a677c21:      * @param firstSet
1:a677c21:      * @param secondSet
1:a677c21:      */
1:a677c21:     protected void assertTextMessageEqual(String message, TextMessage m1, TextMessage m2) throws JMSException {
1:a677c21:         assertFalse(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
1:fc00993:         if (m1 == null) {
1:230a86c:             return;
1:fc00993:         }
1:a677c21:         assertEquals(message, m1.getText(), m2.getText());
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void assertEquals(Message m1, Message m2) throws JMSException {
1:230a86c:         assertEquals("", m1, m2);
1:a677c21:     }
1:230a86c: 
1:230a86c:     /**
1:a677c21:      * @param message
1:a677c21:      * @param firstSet
1:a677c21:      * @param secondSet
1:a677c21:      */
1:a677c21:     protected void assertEquals(String message, Message m1, Message m2) throws JMSException {
1:a677c21:         assertFalse(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
1:fc00993:         if (m1 == null) {
1:230a86c:             return;
1:fc00993:         }
1:230a86c:         assertTrue(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1.getClass() == m2.getClass());
1:230a86c:         if (m1 instanceof TextMessage) {
1:230a86c:             assertTextMessageEqual(message, (TextMessage)m1, (TextMessage)m2);
1:230a86c:         } else {
1:230a86c:             assertEquals(message, m1, m2);
1:230a86c:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:409902c:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:a677c21:     }
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * Factory method to create a new connection
1:a677c21:      */
1:a677c21:     protected Connection createConnection() throws Exception {
1:a677c21:         return getConnectionFactory().createConnection();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:a677c21:         if (connectionFactory == null) {
1:a677c21:             connectionFactory = createConnectionFactory();
1:a677c21:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:a677c21:         }
1:a677c21:         return connectionFactory;
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected String getConsumerSubject() {
1:a677c21:         return getSubject();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected String getProducerSubject() {
1:a677c21:         return getSubject();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected String getSubject() {
1:a677c21:         return getClass().getName() + "." + getName();
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     
0:     private static final Log LOG = LogFactory.getLog(TestSupport.class);
1:     
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         if (m1 == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (m1 == null) {
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:     protected void assertTextMessagesEqual(Message[] firstSet, Message[] secondSet) throws JMSException {
1:         assertTextMessagesEqual("", firstSet, secondSet);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             TextMessage m1 = (TextMessage)firstSet[i];
1:             TextMessage m2 = (TextMessage)secondSet[i];
1:             assertTextMessageEqual("Message " + (i + 1) + " did not match : ", m1, m2);
1: 
1:         assertEquals("", m1, m2);
1:     /**
0:         if (m1 == null)
1:             return;
1:         assertEquals("", m1, m2);
1: 
1:     /**
0:         if (m1 == null)
1:             return;
1:         assertTrue(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1.getClass() == m2.getClass());
1:         if (m1 instanceof TextMessage) {
1:             assertTextMessageEqual(message, (TextMessage)m1, (TextMessage)m2);
1:         } else {
1:             assertEquals(message, m1, m2);
1:         }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(TestSupport.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:409902c
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: 
1: /**
1:  * Useful base class for unit test cases
0:  *
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class TestSupport extends TestCase {
0:     protected Log log = LogFactory.getLog(getClass());
1:     protected ActiveMQConnectionFactory connectionFactory;
1:     protected boolean topic = true;
1: 
1:     public TestSupport() {
1:         super();
1:     }
1: 
1:     public TestSupport(String name) {
1:         super(name);
1:     }
1: 
1:     protected ActiveMQMessage createMessage() {
1:         return new ActiveMQMessage();
1:     }
1: 
1:     protected Destination createDestination(String subject) {
1:         if (topic) {
1:             return new ActiveMQTopic(subject);
1:         }
0:         else {
1:             return new ActiveMQQueue(subject);
1:         }
1:     }
1: 
0: 	protected void assertTextMessagesEqual(Message[] firstSet, Message[] secondSet) throws JMSException {
0: 		assertTextMessagesEqual("", firstSet, secondSet);
1: 	}
1:     /**
1:      * @param messsage
1:      * @param firstSet
1:      * @param secondSet
1:      */
1:     protected void assertTextMessagesEqual(String messsage, Message[] firstSet, Message[] secondSet) throws JMSException {
1:         assertEquals("Message count does not match: " + messsage, firstSet.length, secondSet.length);
1:         for (int i = 0; i < secondSet.length; i++) {
0:             TextMessage m1 = (TextMessage) firstSet[i];
0:             TextMessage m2 = (TextMessage) secondSet[i];
0: 			assertTextMessageEqual("Message " + (i + 1) + " did not match : ", m1,m2);
1:         }
1:     }
1: 	
1:     protected void assertEquals(TextMessage m1, TextMessage m2) throws JMSException {
0: 		assertEquals("", m1, m2);
1:     }
1: 
1: 	/**
1:      * @param message
1:      * @param firstSet
1:      * @param secondSet
1:      */
1:     protected void assertTextMessageEqual(String message, TextMessage m1, TextMessage m2) throws JMSException {
1:         assertFalse(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
0: 		if( m1 == null )
0: 			return;
1:         assertEquals(message, m1.getText(), m2.getText());
1:     }
1: 
1:     protected void assertEquals(Message m1, Message m2) throws JMSException {
0: 		assertEquals("", m1, m2);
1:     }
1: 	/**
1:      * @param message
1:      * @param firstSet
1:      * @param secondSet
1:      */
1:     protected void assertEquals(String message, Message m1, Message m2) throws JMSException {
1:         assertFalse(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
0: 		if( m1 == null )
0: 			return;
0:         assertTrue(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1.getClass()==m2.getClass());
0: 		if( m1 instanceof TextMessage ) {
0: 			assertTextMessageEqual(message, (TextMessage)m1, (TextMessage)m2);
0: 		} else {
0: 			assertEquals(message, m1, m2);
1: 		}
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory("vm://localhost");
1:     }
1: 
1:     /**
1:      * Factory method to create a new connection
1:      */
1:     protected Connection createConnection() throws Exception {
1:         return getConnectionFactory().createConnection();
1:     }
1: 
1:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:         if (connectionFactory == null) {
1:             connectionFactory = createConnectionFactory();
1:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:         }
1:         return connectionFactory;
1:     }
1: 
1:     protected String getConsumerSubject() {
1:         return getSubject();
1:     }
1: 
1:     protected String getProducerSubject() {
1:         return getSubject();
1:     }
1: 
1:     protected String getSubject() {
1:         return getClass().getName() + "." + getName();
1:     }
1: }
============================================================================