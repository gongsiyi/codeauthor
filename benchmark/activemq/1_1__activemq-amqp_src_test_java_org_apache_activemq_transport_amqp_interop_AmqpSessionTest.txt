1:bd8f177: /*
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.interop;
1:72839b7: 
1:72839b7: import static org.junit.Assert.assertNotNull;
1:fddbac2: import static org.junit.Assert.assertNull;
1:fddbac2: import static org.junit.Assert.fail;
1:72839b7: 
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:bd8f177: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:bd8f177: import org.apache.activemq.transport.amqp.client.AmqpValidator;
1:bd8f177: import org.apache.qpid.proton.engine.Receiver;
1:bd8f177: import org.apache.qpid.proton.engine.Session;
1:72839b7: import org.junit.Test;
1:bd8f177: import org.slf4j.Logger;
1:bd8f177: import org.slf4j.LoggerFactory;
1:72839b7: 
2:72839b7: /**
1:72839b7:  * Test for creation and configuration of AMQP sessions.
1:72839b7:  */
1:72839b7: public class AmqpSessionTest extends AmqpClientTestSupport {
1:72839b7: 
1:bd8f177:     protected static final Logger LOG = LoggerFactory.getLogger(AmqpSessionTest.class);
1:bd8f177: 
1:72839b7:     @Test
1:72839b7:     public void testCreateSession() throws Exception {
1:72839b7:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:72839b7:         AmqpSession session = connection.createSession();
1:72839b7:         assertNotNull(session);
1:fddbac2: 
1:fddbac2:         Session protonSession = session.getSession();
1:fddbac2: 
1:fddbac2:         try {
1:fddbac2:             protonSession.close();
1:fddbac2:             fail("Should not be able to mutate.");
1:fddbac2:         } catch (UnsupportedOperationException ex) {}
1:fddbac2: 
1:fddbac2:         try {
1:fddbac2:             protonSession.free();
1:fddbac2:             fail("Should not be able to mutate.");
1:fddbac2:         } catch (UnsupportedOperationException ex) {}
1:fddbac2: 
1:fddbac2:         try {
1:fddbac2:             protonSession.getConnection().close();
1:fddbac2:             fail("Should not be able to mutate.");
1:fddbac2:         } catch (UnsupportedOperationException ex) {}
1:fddbac2: 
1:fddbac2:         try {
1:fddbac2:             protonSession.open();
1:fddbac2:             fail("Should not be able to mutate.");
1:fddbac2:         } catch (UnsupportedOperationException ex) {}
1:fddbac2: 
1:fddbac2:         assertNull(protonSession.getProperties());
1:fddbac2:         assertNull(protonSession.getOfferedCapabilities());
1:fddbac2: 
1:fddbac2:         assertNotNull(protonSession.getContext());
1:fddbac2: 
1:fddbac2:         try {
1:fddbac2:             protonSession.receiver("sender");
1:fddbac2:             fail("Should not be able to mutate.");
1:fddbac2:         } catch (UnsupportedOperationException ex) {}
1:fddbac2: 
1:72839b7:         connection.close();
1:72839b7:     }
1:bd8f177: 
1:bd8f177:     @Test(timeout = 60000)
1:bd8f177:     public void testSessionClosedDoesNotGetReceiverDetachFromRemote() throws Exception {
1:bd8f177:         AmqpClient client = createAmqpClient();
1:bd8f177:         assertNotNull(client);
1:bd8f177: 
1:bd8f177:         client.setValidator(new AmqpValidator() {
1:bd8f177: 
1:bd8f177:             @Override
1:bd8f177:             public void inspectClosedResource(Session session) {
1:bd8f177:                 LOG.info("Session closed: {}", session.getContext());
1:bd8f177:             }
1:bd8f177: 
1:bd8f177:             @Override
1:bd8f177:             public void inspectDetachedResource(Receiver receiver) {
1:bd8f177:                 markAsInvalid("Broker should not detach receiver linked to closed session.");
1:bd8f177:             }
1:bd8f177: 
1:bd8f177:             @Override
1:bd8f177:             public void inspectClosedResource(Receiver receiver) {
1:bd8f177:                 markAsInvalid("Broker should not close receiver linked to closed session.");
1:bd8f177:             }
1:bd8f177:         });
1:bd8f177: 
1:bd8f177:         AmqpConnection connection = trackConnection(client.connect());
1:bd8f177:         assertNotNull(connection);
1:bd8f177:         AmqpSession session = connection.createSession();
1:bd8f177:         assertNotNull(session);
1:bd8f177:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:bd8f177:         assertNotNull(receiver);
1:bd8f177: 
1:bd8f177:         session.close();
1:bd8f177: 
1:bd8f177:         connection.getStateInspector().assertValid();
1:bd8f177:         connection.close();
1:bd8f177:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:fddbac2
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1: 
1:         Session protonSession = session.getSession();
1: 
1:         try {
1:             protonSession.close();
1:             fail("Should not be able to mutate.");
1:         } catch (UnsupportedOperationException ex) {}
1: 
1:         try {
1:             protonSession.free();
1:             fail("Should not be able to mutate.");
1:         } catch (UnsupportedOperationException ex) {}
1: 
1:         try {
1:             protonSession.getConnection().close();
1:             fail("Should not be able to mutate.");
1:         } catch (UnsupportedOperationException ex) {}
1: 
1:         try {
1:             protonSession.open();
1:             fail("Should not be able to mutate.");
1:         } catch (UnsupportedOperationException ex) {}
1: 
1:         assertNull(protonSession.getProperties());
1:         assertNull(protonSession.getOfferedCapabilities());
1: 
1:         assertNotNull(protonSession.getContext());
1: 
1:         try {
1:             protonSession.receiver("sender");
1:             fail("Should not be able to mutate.");
1:         } catch (UnsupportedOperationException ex) {}
1: 
commit:bd8f177
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpValidator;
1: import org.apache.qpid.proton.engine.Receiver;
1: import org.apache.qpid.proton.engine.Session;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     protected static final Logger LOG = LoggerFactory.getLogger(AmqpSessionTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testSessionClosedDoesNotGetReceiverDetachFromRemote() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
1:         client.setValidator(new AmqpValidator() {
1: 
1:             @Override
1:             public void inspectClosedResource(Session session) {
1:                 LOG.info("Session closed: {}", session.getContext());
1:             }
1: 
1:             @Override
1:             public void inspectDetachedResource(Receiver receiver) {
1:                 markAsInvalid("Broker should not detach receiver linked to closed session.");
1:             }
1: 
1:             @Override
1:             public void inspectClosedResource(Receiver receiver) {
1:                 markAsInvalid("Broker should not close receiver linked to closed session.");
1:             }
1:         });
1: 
1:         AmqpConnection connection = trackConnection(client.connect());
1:         assertNotNull(connection);
1:         AmqpSession session = connection.createSession();
1:         assertNotNull(session);
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         assertNotNull(receiver);
1: 
1:         session.close();
1: 
1:         connection.getStateInspector().assertValid();
1:         connection.close();
1:     }
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Test;
1: 
1: /**
1:  * Test for creation and configuration of AMQP sessions.
1:  */
1: public class AmqpSessionTest extends AmqpClientTestSupport {
1: 
1:     @Test
1:     public void testCreateSession() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1:         assertNotNull(session);
1:         connection.close();
1:     }
1: }
============================================================================