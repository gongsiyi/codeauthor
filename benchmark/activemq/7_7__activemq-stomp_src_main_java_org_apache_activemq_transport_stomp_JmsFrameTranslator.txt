2:3910056: /**
1:3910056:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3910056:  * contributor license agreements.  See the NOTICE file distributed with
1:3910056:  * this work for additional information regarding copyright ownership.
1:3910056:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3910056:  * (the "License"); you may not use this file except in compliance with
1:3910056:  * the License.  You may obtain a copy of the License at
1:9807ee3:  *
1:3910056:  *      http://www.apache.org/licenses/LICENSE-2.0
3:3910056:  *
1:3910056:  * Unless required by applicable law or agreed to in writing, software
1:3910056:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3910056:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3910056:  * See the License for the specific language governing permissions and
1:3910056:  * limitations under the License.
2:3910056:  */
1:3910056: package org.apache.activemq.transport.stomp;
6:3910056: 
1:533cedc: import static org.apache.activemq.transport.stomp.FrameTranslator.Helper.copyStandardHeadersFromFrameToMessage;
1:533cedc: import static org.apache.activemq.transport.stomp.FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame;
1:533cedc: 
1:3910056: import java.io.IOException;
1:3910056: import java.io.Serializable;
1:3910056: import java.io.StringReader;
1:3910056: import java.io.StringWriter;
1:3910056: import java.util.HashMap;
1:4b44d31: import java.util.Locale;
1:3910056: import java.util.Map;
1:9807ee3: 
1:3910056: import javax.jms.JMSException;
1:9807ee3: 
1:9807ee3: import org.apache.activemq.advisory.AdvisorySupport;
1:11705e7: import org.apache.activemq.broker.BrokerContext;
1:11705e7: import org.apache.activemq.broker.BrokerContextAware;
1:3910056: import org.apache.activemq.command.ActiveMQMapMessage;
1:3910056: import org.apache.activemq.command.ActiveMQMessage;
1:3910056: import org.apache.activemq.command.ActiveMQObjectMessage;
1:9807ee3: import org.apache.activemq.command.DataStructure;
1:533cedc: import org.apache.activemq.transport.stomp.Stomp.Headers;
1:533cedc: import org.apache.activemq.transport.stomp.Stomp.Responses;
1:533cedc: import org.apache.activemq.transport.stomp.Stomp.Transformations;
1:3817ed9: import org.codehaus.jettison.mapped.Configuration;
1:72dfbfa: import org.fusesource.hawtbuf.UTF8Buffer;
1:9807ee3: 
1:3910056: import com.thoughtworks.xstream.XStream;
1:72dfbfa: import com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter;
1:3910056: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
1:3910056: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
1:8acbf4c: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1:5e5458e: import com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;
1:3910056: import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;
1:3910056: import com.thoughtworks.xstream.io.xml.XppReader;
1:8cf3187: import com.thoughtworks.xstream.io.xml.xppdom.XppFactory;
1:9807ee3: 
1:3910056: /**
1:3910056:  * Frame translator implementation that uses XStream to convert messages to and
1:3910056:  * from XML and JSON
1:3910056:  */
1:533cedc: public class JmsFrameTranslator extends LegacyFrameTranslator implements BrokerContextAware {
1:9807ee3: 
1:0885c60:     XStream xStream = null;
1:11705e7:     BrokerContext brokerContext;
1:3910056: 
1:72dfbfa:     @Override
1:533cedc:     public ActiveMQMessage convertFrame(ProtocolConverter converter, StompFrame command) throws JMSException, ProtocolException {
1:0885c60:         Map<String, String> headers = command.getHeaders();
1:0885c60:         ActiveMQMessage msg;
1:533cedc:         String transformation = headers.get(Headers.TRANSFORMATION);
1:533cedc:         if (headers.containsKey(Headers.CONTENT_LENGTH) || transformation.equals(Transformations.JMS_BYTE.toString())) {
1:0885c60:             msg = super.convertFrame(converter, command);
1:0885c60:         } else {
1:0885c60:             HierarchicalStreamReader in;
1:1fdcf59: 
1:0885c60:             try {
1:0885c60:                 String text = new String(command.getContent(), "UTF-8");
1:533cedc:                 switch (Transformations.getValue(transformation)) {
1:533cedc:                     case JMS_OBJECT_XML:
1:533cedc:                         in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
1:533cedc:                         msg = createObjectMessage(in);
1:533cedc:                         break;
1:533cedc:                     case JMS_OBJECT_JSON:
1:533cedc:                         in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
1:533cedc:                         msg = createObjectMessage(in);
1:533cedc:                         break;
1:533cedc:                     case JMS_MAP_XML:
1:533cedc:                         in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
1:533cedc:                         msg = createMapMessage(in);
1:533cedc:                         break;
1:533cedc:                     case JMS_MAP_JSON:
1:533cedc:                         in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
1:533cedc:                         msg = createMapMessage(in);
1:533cedc:                         break;
1:533cedc:                     default:
1:a7e2a44:                         throw new Exception("Unknown transformation: " + transformation);
1:1fdcf59:                 }
1:0885c60:             } catch (Throwable e) {
1:533cedc:                 command.getHeaders().put(Headers.TRANSFORMATION_ERROR, e.getMessage());
1:0885c60:                 msg = super.convertFrame(converter, command);
1:0885c60:             }
1:0885c60:         }
1:533cedc: 
1:533cedc:         copyStandardHeadersFromFrameToMessage(converter, command, msg, this);
1:0885c60:         return msg;
1:0885c60:     }
1:1fdcf59: 
1:72dfbfa:     @Override
1:533cedc:     public StompFrame convertMessage(ProtocolConverter converter, ActiveMQMessage message) throws IOException, JMSException {
1:533cedc: 
1:533cedc:         StompFrame command = new StompFrame();
1:533cedc:         command.setAction(Responses.MESSAGE);
1:533cedc:         Map<String, String> headers = new HashMap<String, String>(25);
1:533cedc:         command.setHeaders(headers);
1:533cedc: 
1:533cedc:         copyStandardHeadersFromMessageToFrame(converter, message, command, this);
1:533cedc: 
1:533cedc:         String transformation = headers.get(Headers.TRANSFORMATION);
1:3910056: 
1:0885c60:         if (message.getDataStructureType() == ActiveMQObjectMessage.DATA_STRUCTURE_TYPE) {
1:3910056: 
1:533cedc:             if (Transformations.JMS_XML.equals(transformation)) {
1:533cedc:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_OBJECT_XML.toString());
1:533cedc:             } else if (Transformations.JMS_JSON.equals(transformation)) {
1:533cedc:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_OBJECT_JSON.toString());
1:533cedc:             }
1:3910056: 
1:533cedc:             if (!headers.containsKey(Headers.TRANSFORMATION)) {
1:533cedc:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_OBJECT_XML.toString());
1:0885c60:             }
1:3910056: 
1:9807ee3:             ActiveMQObjectMessage msg = (ActiveMQObjectMessage) message.copy();
1:533cedc:             command.setContent(marshall(msg.getObject(), headers.get(Headers.TRANSFORMATION)).getBytes("UTF-8"));
1:3910056: 
1:0885c60:         } else if (message.getDataStructureType() == ActiveMQMapMessage.DATA_STRUCTURE_TYPE) {
1:3910056: 
1:533cedc:             if (Transformations.JMS_XML.equals(transformation)) {
1:533cedc:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_MAP_XML.toString());
1:533cedc:             } else if (Transformations.JMS_JSON.equals(transformation)) {
1:533cedc:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_MAP_JSON.toString());
1:533cedc:             }
1:3910056: 
1:533cedc:             if (!headers.containsKey(Headers.TRANSFORMATION)) {
1:533cedc:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_MAP_XML.toString());
1:9807ee3:             }
1:3910056: 
1:0885c60:             ActiveMQMapMessage msg = (ActiveMQMapMessage) message.copy();
1:533cedc:             command.setContent(marshall((Serializable) msg.getContentMap(), headers.get(Headers.TRANSFORMATION)).getBytes("UTF-8"));
1:9807ee3: 
1:533cedc:         } else if (message.getDataStructureType() == ActiveMQMessage.DATA_STRUCTURE_TYPE && AdvisorySupport.ADIVSORY_MESSAGE_TYPE.equals(message.getType())) {
1:9807ee3: 
1:533cedc:             if (Transformations.JMS_XML.equals(transformation)) {
1:533cedc:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_ADVISORY_XML.toString());
1:533cedc:             } else if (Transformations.JMS_JSON.equals(transformation)) {
1:533cedc:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_ADVISORY_JSON.toString());
1:9807ee3:             }
1:9807ee3: 
1:533cedc:             if (!headers.containsKey(Headers.TRANSFORMATION)) {
1:533cedc:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_ADVISORY_JSON.toString());
1:9807ee3:             }
1:3910056: 
1:533cedc:             String body = marshallAdvisory(message.getDataStructure(), headers.get(Headers.TRANSFORMATION));
1:9807ee3:             command.setContent(body.getBytes("UTF-8"));
1:533cedc: 
1:0885c60:         } else {
1:533cedc:             command = super.convertMessage(converter, message);
1:0885c60:         }
1:533cedc: 
1:533cedc:         return command;
1:0885c60:     }
1:3910056: 
1:0885c60:     /**
1:533cedc:      * Marshal the Object to a string using XML or JSON encoding
1:533cedc:      *
1:533cedc:      * @param object
1:533cedc:      *        the object to marshal
1:533cedc:      * @param transformation
1:533cedc:      *        the transformation to apply to the object.
1:533cedc:      *
1:533cedc:      * @returns the marshaled form of the given object, in JSON or XML.
1:533cedc:      *
1:533cedc:      * @throws JMSException if an error occurs during the marshal operation.
1:0885c60:      */
1:72dfbfa:     protected String marshall(Serializable object, String transformation) throws JMSException {
1:0885c60:         StringWriter buffer = new StringWriter();
1:0885c60:         HierarchicalStreamWriter out;
1:4b44d31:         if (transformation.toLowerCase(Locale.ENGLISH).endsWith("json")) {
1:3817ed9:             out = new JettisonMappedXmlDriver(new Configuration(), false).createWriter(buffer);
1:0885c60:         } else {
1:0885c60:             out = new PrettyPrintWriter(buffer);
1:0885c60:         }
1:0885c60:         getXStream().marshal(object, out);
1:0885c60:         return buffer.toString();
1:0885c60:     }
1:3910056: 
1:0885c60:     protected ActiveMQObjectMessage createObjectMessage(HierarchicalStreamReader in) throws JMSException {
1:0885c60:         ActiveMQObjectMessage objMsg = new ActiveMQObjectMessage();
1:0885c60:         Object obj = getXStream().unmarshal(in);
1:0885c60:         objMsg.setObject((Serializable) obj);
1:0885c60:         return objMsg;
1:0885c60:     }
1:9807ee3: 
1:0885c60:     @SuppressWarnings("unchecked")
1:0885c60:     protected ActiveMQMapMessage createMapMessage(HierarchicalStreamReader in) throws JMSException {
1:0885c60:         ActiveMQMapMessage mapMsg = new ActiveMQMapMessage();
1:533cedc:         Map<String, Object> map = (Map<String, Object>) getXStream().unmarshal(in);
1:0885c60:         for (String key : map.keySet()) {
1:0885c60:             mapMsg.setObject(key, map.get(key));
1:0885c60:         }
1:0885c60:         return mapMsg;
1:0885c60:     }
1:9807ee3: 
1:9807ee3:     protected String marshallAdvisory(final DataStructure ds, String transformation) {
1:9807ee3: 
1:0885c60:         StringWriter buffer = new StringWriter();
1:0885c60:         HierarchicalStreamWriter out;
1:4b44d31:         if (transformation.toLowerCase(Locale.ENGLISH).endsWith("json")) {
1:0885c60:             out = new JettisonMappedXmlDriver().createWriter(buffer);
1:0885c60:         } else {
1:0885c60:             out = new PrettyPrintWriter(buffer);
1:0885c60:         }
1:9807ee3: 
1:0885c60:         XStream xstream = getXStream();
1:9807ee3:         xstream.setMode(XStream.NO_REFERENCES);
1:9807ee3:         xstream.aliasPackage("", "org.apache.activemq.command");
1:0885c60:         xstream.marshal(ds, out);
1:0885c60:         return buffer.toString();
1:0885c60:     }
1:3910056: 
1:0885c60:     // Properties
1:0885c60:     // -------------------------------------------------------------------------
1:0885c60:     public XStream getXStream() {
1:0885c60:         if (xStream == null) {
1:0885c60:             xStream = createXStream();
1:0885c60:         }
1:0885c60:         return xStream;
1:0885c60:     }
1:3910056: 
1:0885c60:     public void setXStream(XStream xStream) {
1:0885c60:         this.xStream = xStream;
1:0885c60:     }
1:3910056: 
1:0885c60:     // Implementation methods
1:0885c60:     // -------------------------------------------------------------------------
1:0885c60:     @SuppressWarnings("unchecked")
1:0885c60:     protected XStream createXStream() {
1:0885c60:         XStream xstream = null;
1:11705e7:         if (brokerContext != null) {
1:11705e7:             Map<String, XStream> beans = brokerContext.getBeansOfType(XStream.class);
1:11705e7:             for (XStream bean : beans.values()) {
1:11705e7:                 if (bean != null) {
1:11705e7:                     xstream = bean;
1:11705e7:                     break;
1:11705e7:                 }
1:0885c60:             }
1:0885c60:         }
1:3910056: 
1:0885c60:         if (xstream == null) {
1:a7e2a44:             xstream = XStreamSupport.createXStream();
1:5e5458e:             xstream.ignoreUnknownElements();
1:0885c60:         }
1:3910056: 
1:533cedc:         // For any object whose elements contains an UTF8Buffer instance instead
1:533cedc:         // of a String type we map it to String both in and out such that we don't
1:533cedc:         // marshal UTF8Buffers out
1:72dfbfa:         xstream.registerConverter(new AbstractSingleValueConverter() {
1:72dfbfa: 
1:72dfbfa:             @Override
1:72dfbfa:             public Object fromString(String str) {
1:72dfbfa:                 return str;
1:72dfbfa:             }
1:72dfbfa: 
1:72dfbfa:             @SuppressWarnings("rawtypes")
1:72dfbfa:             @Override
1:72dfbfa:             public boolean canConvert(Class type) {
1:72dfbfa:                 return type.equals(UTF8Buffer.class);
1:72dfbfa:             }
1:72dfbfa:         });
1:72dfbfa: 
1:72dfbfa:         xstream.alias("string", UTF8Buffer.class);
1:72dfbfa: 
1:72dfbfa:         return xstream;
1:0885c60:     }
1:3910056: 
1:72dfbfa:     @Override
1:11705e7:     public void setBrokerContext(BrokerContext brokerContext) {
1:11705e7:         this.brokerContext = brokerContext;
1:0885c60:     }
1:1fdcf59: 
1:634a818:     @Override
1:533cedc:     public BrokerContext getBrokerContext() {
1:634a818:         return this.brokerContext;
1:634a818:     }
1:634a818: 
1:1fdcf59:     /**
1:1fdcf59:      * Return an Advisory message as a JSON formatted string
1:533cedc:      *
1:1fdcf59:      * @param ds
1:533cedc:      *        the DataStructure instance that is being marshaled.
1:533cedc:      *
1:533cedc:      * @return the JSON marshaled form of the given DataStructure instance.
1:1fdcf59:      */
1:1fdcf59:     protected String marshallAdvisory(final DataStructure ds) {
1:1fdcf59:         XStream xstream = new XStream(new JsonHierarchicalStreamDriver());
1:1fdcf59:         xstream.setMode(XStream.NO_REFERENCES);
1:1fdcf59:         xstream.aliasPackage("", "org.apache.activemq.command");
1:1fdcf59:         return xstream.toXML(ds);
1:1fdcf59:     }
2:9807ee3: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a7e2a44
/////////////////////////////////////////////////////////////////////////
1:                         throw new Exception("Unknown transformation: " + transformation);
/////////////////////////////////////////////////////////////////////////
1:             xstream = XStreamSupport.createXStream();
author:Timothy Bish
-------------------------------------------------------------------------------
commit:533cedc
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.stomp.FrameTranslator.Helper.copyStandardHeadersFromFrameToMessage;
1: import static org.apache.activemq.transport.stomp.FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.stomp.Stomp.Headers;
1: import org.apache.activemq.transport.stomp.Stomp.Responses;
1: import org.apache.activemq.transport.stomp.Stomp.Transformations;
/////////////////////////////////////////////////////////////////////////
1: public class JmsFrameTranslator extends LegacyFrameTranslator implements BrokerContextAware {
1:     public ActiveMQMessage convertFrame(ProtocolConverter converter, StompFrame command) throws JMSException, ProtocolException {
1:         String transformation = headers.get(Headers.TRANSFORMATION);
1:         if (headers.containsKey(Headers.CONTENT_LENGTH) || transformation.equals(Transformations.JMS_BYTE.toString())) {
1:                 switch (Transformations.getValue(transformation)) {
1:                     case JMS_OBJECT_XML:
1:                         in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
1:                         msg = createObjectMessage(in);
1:                         break;
1:                     case JMS_OBJECT_JSON:
1:                         in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
1:                         msg = createObjectMessage(in);
1:                         break;
1:                     case JMS_MAP_XML:
1:                         in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
1:                         msg = createMapMessage(in);
1:                         break;
1:                     case JMS_MAP_JSON:
1:                         in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
1:                         msg = createMapMessage(in);
1:                         break;
1:                     default:
0:                         throw new Exception("Unkown transformation: " + transformation);
1:                 command.getHeaders().put(Headers.TRANSFORMATION_ERROR, e.getMessage());
1: 
1:         copyStandardHeadersFromFrameToMessage(converter, command, msg, this);
1:     public StompFrame convertMessage(ProtocolConverter converter, ActiveMQMessage message) throws IOException, JMSException {
1: 
1:         StompFrame command = new StompFrame();
1:         command.setAction(Responses.MESSAGE);
1:         Map<String, String> headers = new HashMap<String, String>(25);
1:         command.setHeaders(headers);
1: 
1:         copyStandardHeadersFromMessageToFrame(converter, message, command, this);
1: 
1:         String transformation = headers.get(Headers.TRANSFORMATION);
1:             if (Transformations.JMS_XML.equals(transformation)) {
1:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_OBJECT_XML.toString());
1:             } else if (Transformations.JMS_JSON.equals(transformation)) {
1:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_OBJECT_JSON.toString());
1:             }
1:             if (!headers.containsKey(Headers.TRANSFORMATION)) {
1:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_OBJECT_XML.toString());
1:             command.setContent(marshall(msg.getObject(), headers.get(Headers.TRANSFORMATION)).getBytes("UTF-8"));
1:             if (Transformations.JMS_XML.equals(transformation)) {
1:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_MAP_XML.toString());
1:             } else if (Transformations.JMS_JSON.equals(transformation)) {
1:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_MAP_JSON.toString());
1:             }
1:             if (!headers.containsKey(Headers.TRANSFORMATION)) {
1:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_MAP_XML.toString());
1:             command.setContent(marshall((Serializable) msg.getContentMap(), headers.get(Headers.TRANSFORMATION)).getBytes("UTF-8"));
1:         } else if (message.getDataStructureType() == ActiveMQMessage.DATA_STRUCTURE_TYPE && AdvisorySupport.ADIVSORY_MESSAGE_TYPE.equals(message.getType())) {
1:             if (Transformations.JMS_XML.equals(transformation)) {
1:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_ADVISORY_XML.toString());
1:             } else if (Transformations.JMS_JSON.equals(transformation)) {
1:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_ADVISORY_JSON.toString());
1:             if (!headers.containsKey(Headers.TRANSFORMATION)) {
1:                 headers.put(Headers.TRANSFORMATION, Transformations.JMS_ADVISORY_JSON.toString());
1:             String body = marshallAdvisory(message.getDataStructure(), headers.get(Headers.TRANSFORMATION));
1: 
1:             command = super.convertMessage(converter, message);
1: 
1:         return command;
1:      * Marshal the Object to a string using XML or JSON encoding
1:      *
1:      * @param object
1:      *        the object to marshal
1:      * @param transformation
1:      *        the transformation to apply to the object.
1:      *
1:      * @returns the marshaled form of the given object, in JSON or XML.
1:      *
1:      * @throws JMSException if an error occurs during the marshal operation.
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> map = (Map<String, Object>) getXStream().unmarshal(in);
/////////////////////////////////////////////////////////////////////////
1:         // For any object whose elements contains an UTF8Buffer instance instead
1:         // of a String type we map it to String both in and out such that we don't
1:         // marshal UTF8Buffers out
/////////////////////////////////////////////////////////////////////////
1:     public BrokerContext getBrokerContext() {
1:      *
1:      *        the DataStructure instance that is being marshaled.
1:      *
1:      * @return the JSON marshaled form of the given DataStructure instance.
commit:5e5458e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;
/////////////////////////////////////////////////////////////////////////
1:             xstream.ignoreUnknownElements();
author:gtully
-------------------------------------------------------------------------------
commit:634a818
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public  BrokerContext getBrokerContext() {
1:         return this.brokerContext;
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1fdcf59
/////////////////////////////////////////////////////////////////////////
0: import com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:             if (!headers.containsKey(Stomp.Headers.TRANSFORMATION)) {
0:                 headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_JSON.toString());
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return an Advisory message as a JSON formatted string
1:      * @param ds
0:      * @return
1:      */
1:     protected String marshallAdvisory(final DataStructure ds) {
1:         XStream xstream = new XStream(new JsonHierarchicalStreamDriver());
1:         xstream.setMode(XStream.NO_REFERENCES);
1:         xstream.aliasPackage("", "org.apache.activemq.command");
1:         return xstream.toXML(ds);
1:     }
commit:11705e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerContext;
1: import org.apache.activemq.broker.BrokerContextAware;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		BrokerContextAware {
1: 	BrokerContext brokerContext;
/////////////////////////////////////////////////////////////////////////
1: 		if (brokerContext != null) {
1: 			Map<String, XStream> beans = brokerContext.getBeansOfType(XStream.class);
1: 			for (XStream bean : beans.values()) {
1: 			    if (bean != null) {
1: 			        xstream = bean;
1: 			        break;
1: 			    }
/////////////////////////////////////////////////////////////////////////
1: 	public void setBrokerContext(BrokerContext brokerContext) {
1: 		this.brokerContext = brokerContext;
commit:3817ed9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.JettisonMappedXmlDriver;
1: import org.codehaus.jettison.mapped.Configuration;
/////////////////////////////////////////////////////////////////////////
1: 			out = new JettisonMappedXmlDriver(new Configuration(), false).createWriter(buffer);
commit:1c42716
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:72dfbfa
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.hawtbuf.UTF8Buffer;
1: import com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter;
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:         String transformation = headers.get(Stomp.Headers.TRANSFORMATION);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:                     headers.get(Stomp.Headers.TRANSFORMATION)).getBytes("UTF-8"));
/////////////////////////////////////////////////////////////////////////
1:     protected String marshall(Serializable object, String transformation) throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:         // For any object whose elements contains an UTF8Buffer instance instead of a String
0:         // type we map it to String both in and out such that we don't marshal UTF8Buffers out
1:         xstream.registerConverter(new AbstractSingleValueConverter() {
1: 
1:             @Override
1:             public Object fromString(String str) {
1:                 return str;
1:             }
1: 
1:             @SuppressWarnings("rawtypes")
1:             @Override
1:             public boolean canConvert(Class type) {
1:                 return type.equals(UTF8Buffer.class);
1:             }
1:         });
1: 
1:         xstream.alias("string", UTF8Buffer.class);
1: 
1:         return xstream;
1:     @Override
commit:8cf3187
/////////////////////////////////////////////////////////////////////////
1: import com.thoughtworks.xstream.io.xml.xppdom.XppFactory;
/////////////////////////////////////////////////////////////////////////
0:                     in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
/////////////////////////////////////////////////////////////////////////
0:                     in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
commit:8acbf4c
/////////////////////////////////////////////////////////////////////////
1: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
commit:0885c60
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         BrokerContextAware {
1:     XStream xStream = null;
0:     BrokerContext brokerContext;
0:     public ActiveMQMessage convertFrame(ProtocolConverter converter,
0:             StompFrame command) throws JMSException, ProtocolException {
1:         Map<String, String> headers = command.getHeaders();
1:         ActiveMQMessage msg;
0:         String transformation = (String) headers.get(Stomp.Headers.TRANSFORMATION);
0:         if (headers.containsKey(Stomp.Headers.CONTENT_LENGTH) || transformation.equals(Stomp.Transformations.JMS_BYTE.toString())) {
1:             msg = super.convertFrame(converter, command);
1:         } else {
1:             HierarchicalStreamReader in;
1:             try {
1:                 String text = new String(command.getContent(), "UTF-8");
0:                 switch (Stomp.Transformations.getValue(transformation)) {
0:                 case JMS_OBJECT_XML:
0:                     in = new XppReader(new StringReader(text));
0:                     msg = createObjectMessage(in);
0:                     break;
0:                 case JMS_OBJECT_JSON:
0:                     in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
0:                     msg = createObjectMessage(in);
0:                     break;
0:                 case JMS_MAP_XML:
0:                     in = new XppReader(new StringReader(text));
0:                     msg = createMapMessage(in);
0:                     break;
0:                 case JMS_MAP_JSON:
0:                     in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
0:                     msg = createMapMessage(in);
0:                     break;
0:                 default:
0:                     throw new Exception("Unkown transformation: " + transformation);
1:                 }
1:             } catch (Throwable e) {
0:                 command.getHeaders().put(Stomp.Headers.TRANSFORMATION_ERROR, e.getMessage());
1:                 msg = super.convertFrame(converter, command);
1:             }
1:         }
0:         FrameTranslator.Helper.copyStandardHeadersFromFrameToMessage(converter, command, msg, this);
1:         return msg;
1:     }
0:     public StompFrame convertMessage(ProtocolConverter converter,
0:             ActiveMQMessage message) throws IOException, JMSException {
1:         if (message.getDataStructureType() == ActiveMQObjectMessage.DATA_STRUCTURE_TYPE) {
0:             StompFrame command = new StompFrame();
0:             command.setAction(Stomp.Responses.MESSAGE);
0:             Map<String, String> headers = new HashMap<String, String>(25);
0:             command.setHeaders(headers);
0:             FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
0:                     converter, message, command, this);
0:                 headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_OBJECT_XML.toString());
0:                 headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_OBJECT_JSON.toString());
0:             command.setContent(marshall(msg.getObject(),
0:                     headers.get(Stomp.Headers.TRANSFORMATION))
0:                     .getBytes("UTF-8"));
0:             return command;
1:         } else if (message.getDataStructureType() == ActiveMQMapMessage.DATA_STRUCTURE_TYPE) {
0:             StompFrame command = new StompFrame();
0:             command.setAction(Stomp.Responses.MESSAGE);
0:             Map<String, String> headers = new HashMap<String, String>(25);
0:             command.setHeaders(headers);
0:             FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
0:                     converter, message, command, this);
0:                 headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_MAP_XML.toString());
0:                 headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_MAP_JSON.toString());
1:             ActiveMQMapMessage msg = (ActiveMQMapMessage) message.copy();
0:             command.setContent(marshall((Serializable)msg.getContentMap(),
0:                     headers.get(Stomp.Headers.TRANSFORMATION))
0:                     .getBytes("UTF-8"));
0:             return command;
0:             StompFrame command = new StompFrame();
0:             command.setAction(Stomp.Responses.MESSAGE);
0:             Map<String, String> headers = new HashMap<String, String>(25);
0:             command.setHeaders(headers);
0:                     converter, message, command, this);
0:                 headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_XML.toString());
0:                 headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_JSON.toString());
0:                     headers.get(Stomp.Headers.TRANSFORMATION));
1:         } else {
0:             return super.convertMessage(converter, message);
1:         }
1:     }
1:     /**
0:      * Marshalls the Object to a string using XML or JSON encoding
1:      */
0:     protected String marshall(Serializable object, String transformation)
0:             throws JMSException {
1:         StringWriter buffer = new StringWriter();
1:         HierarchicalStreamWriter out;
0:         if (transformation.toLowerCase().endsWith("json")) {
0:             out = new JettisonMappedXmlDriver(new Configuration(), false).createWriter(buffer);
1:         } else {
1:             out = new PrettyPrintWriter(buffer);
1:         }
1:         getXStream().marshal(object, out);
1:         return buffer.toString();
1:     }
1:     protected ActiveMQObjectMessage createObjectMessage(HierarchicalStreamReader in) throws JMSException {
1:         ActiveMQObjectMessage objMsg = new ActiveMQObjectMessage();
1:         Object obj = getXStream().unmarshal(in);
1:         objMsg.setObject((Serializable) obj);
1:         return objMsg;
1:     }
1:     @SuppressWarnings("unchecked")
1:     protected ActiveMQMapMessage createMapMessage(HierarchicalStreamReader in) throws JMSException {
1:         ActiveMQMapMessage mapMsg = new ActiveMQMapMessage();
0:         Map<String, Object> map = (Map<String, Object>)getXStream().unmarshal(in);
1:         for (String key : map.keySet()) {
1:             mapMsg.setObject(key, map.get(key));
1:         }
1:         return mapMsg;
1:     }
1:         StringWriter buffer = new StringWriter();
1:         HierarchicalStreamWriter out;
0:         if (transformation.toLowerCase().endsWith("json")) {
1:             out = new JettisonMappedXmlDriver().createWriter(buffer);
1:         } else {
1:             out = new PrettyPrintWriter(buffer);
1:         }
1:         XStream xstream = getXStream();
1:         xstream.marshal(ds, out);
1:         return buffer.toString();
1:     // Properties
1:     // -------------------------------------------------------------------------
1:     public XStream getXStream() {
1:         if (xStream == null) {
1:             xStream = createXStream();
1:         }
1:         return xStream;
1:     }
1:     public void setXStream(XStream xStream) {
1:         this.xStream = xStream;
1:     }
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1:     @SuppressWarnings("unchecked")
1:     protected XStream createXStream() {
1:         XStream xstream = null;
0:         if (brokerContext != null) {
0:             Map<String, XStream> beans = brokerContext.getBeansOfType(XStream.class);
0:             for (XStream bean : beans.values()) {
0:                 if (bean != null) {
0:                     xstream = bean;
0:                     break;
1:                 }
1:             }
1:         }
1:         if (xstream == null) {
0:             xstream = new XStream();
1:         }
0:         return xstream;
1:     }
0:     public void setBrokerContext(BrokerContext brokerContext) {
0:         this.brokerContext = brokerContext;
1:     }
commit:9807ee3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.advisory.AdvisorySupport;
0: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.DataStructure;
0: import com.sun.tools.javac.util.Log;
0: import com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
0:             if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_XML.toString())) {
0:             	headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_OBJECT_XML.toString());
0:             } else if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_JSON.toString())) {
0:             	headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_OBJECT_JSON.toString());
1:             }
1: 
1:             ActiveMQObjectMessage msg = (ActiveMQObjectMessage) message.copy();
0: 		} else if (message.getDataStructureType() == ActiveMQMapMessage.DATA_STRUCTURE_TYPE) {
/////////////////////////////////////////////////////////////////////////
1: 
0:             if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_XML.toString())) {
0:             	headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_MAP_XML.toString());
0:             } else if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_JSON.toString())) {
0:             	headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_MAP_JSON.toString());
1:             }
1: 
0: 			return command;
0:         } else if (message.getDataStructureType() == ActiveMQMessage.DATA_STRUCTURE_TYPE &&
0:                 AdvisorySupport.ADIVSORY_MESSAGE_TYPE.equals(message.getType())) {
1: 
0: 			StompFrame command = new StompFrame();
0: 			command.setAction(Stomp.Responses.MESSAGE);
0: 			Map<String, String> headers = new HashMap<String, String>(25);
0: 			command.setHeaders(headers);
1: 
0:             FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
0: 					converter, message, command, this);
1: 
0:             if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_XML.toString())) {
0:             	headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_XML.toString());
0:             } else if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_JSON.toString())) {
0:             	headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_JSON.toString());
1:             }
1: 
0:             String body = marshallAdvisory(message.getDataStructure(),
0:             		headers.get(Stomp.Headers.TRANSFORMATION));
1:             command.setContent(body.getBytes("UTF-8"));
0:             return command;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected String marshallAdvisory(final DataStructure ds, String transformation) {
1: 
0: 		StringWriter buffer = new StringWriter();
0: 		HierarchicalStreamWriter out;
0: 		if (transformation.toLowerCase().endsWith("json")) {
0: 			out = new JettisonMappedXmlDriver().createWriter(buffer);
0: 		} else {
0: 			out = new PrettyPrintWriter(buffer);
1: 		}
1: 
0: 		XStream xstream = getXStream();
1:         xstream.setMode(XStream.NO_REFERENCES);
1:         xstream.aliasPackage("", "org.apache.activemq.command");
0: 		xstream.marshal(ds, out);
0: 		return buffer.toString();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:3910056
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.io.IOException;
1: import java.io.Serializable;
1: import java.io.StringReader;
1: import java.io.StringWriter;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
0: import org.springframework.beans.BeansException;
0: import org.springframework.context.ApplicationContext;
0: import org.springframework.context.ApplicationContextAware;
1: 
1: import com.thoughtworks.xstream.XStream;
1: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
1: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
0: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1: import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;
1: import com.thoughtworks.xstream.io.xml.XppReader;
1: 
1: /**
1:  * Frame translator implementation that uses XStream to convert messages to and
1:  * from XML and JSON
1:  * 
0:  * @author <a href="mailto:dejan@nighttale.net">Dejan Bosanac</a>
1:  */
0: public class JmsFrameTranslator extends LegacyFrameTranslator implements
0: 		ApplicationContextAware {
1: 
0: 	XStream xStream = null;
0: 	ApplicationContext applicationContext;
1: 
0: 	public ActiveMQMessage convertFrame(ProtocolConverter converter,
0: 			StompFrame command) throws JMSException, ProtocolException {
0: 		Map headers = command.getHeaders();
0: 		ActiveMQMessage msg;
0: 		String transformation = (String) headers.get(Stomp.Headers.TRANSFORMATION);
0: 		if (headers.containsKey(Stomp.Headers.CONTENT_LENGTH) || transformation.equals(Stomp.Transformations.JMS_BYTE.toString())) {
0: 			msg = super.convertFrame(converter, command);
0: 		} else {
0: 			HierarchicalStreamReader in;
1: 
0: 			try {
0: 				String text = new String(command.getContent(), "UTF-8");
0: 				switch (Stomp.Transformations.getValue(transformation)) {
0: 				case JMS_OBJECT_XML:
0: 					in = new XppReader(new StringReader(text));
0: 					msg = createObjectMessage(in);
0: 					break;
0: 				case JMS_OBJECT_JSON:
0: 					in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
0: 					msg = createObjectMessage(in);
0: 					break;
0: 				case JMS_MAP_XML:
0: 					in = new XppReader(new StringReader(text));
0: 					msg = createMapMessage(in);
0: 					break;
0: 				case JMS_MAP_JSON:
0: 					in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
0: 					msg = createMapMessage(in);
0: 					break;
0: 				default:
0: 					throw new Exception("Unkown transformation: " + transformation);
0: 				}
0: 			} catch (Throwable e) {
0: 				command.getHeaders().put(Stomp.Headers.TRANSFORMATION_ERROR, e.getMessage());
0: 				msg = super.convertFrame(converter, command);
0: 			}
0: 		}
0: 		FrameTranslator.Helper.copyStandardHeadersFromFrameToMessage(converter, command, msg, this);
0: 		return msg;
0: 	}
1: 
0: 	public StompFrame convertMessage(ProtocolConverter converter,
0: 			ActiveMQMessage message) throws IOException, JMSException {
0: 		if (message.getDataStructureType() == ActiveMQObjectMessage.DATA_STRUCTURE_TYPE) {
0: 			StompFrame command = new StompFrame();
0: 			command.setAction(Stomp.Responses.MESSAGE);
0: 			Map<String, String> headers = new HashMap<String, String>(25);
0: 			command.setHeaders(headers);
1: 
0: 			FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
0: 					converter, message, command, this);
0: 			ActiveMQObjectMessage msg = (ActiveMQObjectMessage) message.copy();
0: 			command.setContent(marshall(msg.getObject(),
0: 					headers.get(Stomp.Headers.TRANSFORMATION))
0: 					.getBytes("UTF-8"));
0: 			return command;
1: 
0: 		} else if (message.getDataStructureType() == ActiveMQMapMessage.DATA_STRUCTURE_TYPE) { 
0: 			StompFrame command = new StompFrame();
0: 			command.setAction(Stomp.Responses.MESSAGE);
0: 			Map<String, String> headers = new HashMap<String, String>(25);
0: 			command.setHeaders(headers);
1: 
0: 			FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
0: 					converter, message, command, this);
0: 			ActiveMQMapMessage msg = (ActiveMQMapMessage) message.copy();
0: 			command.setContent(marshall((Serializable)msg.getContentMap(),
0: 					headers.get(Stomp.Headers.TRANSFORMATION))
0: 					.getBytes("UTF-8"));
0: 			return command;		
0: 		} else {
0: 			return super.convertMessage(converter, message);
0: 		}
0: 	}
1: 
1: 	/**
0: 	 * Marshalls the Object to a string using XML or JSON encoding
1: 	 */
0: 	protected String marshall(Serializable object, String transformation)
0: 			throws JMSException {
0: 		StringWriter buffer = new StringWriter();
0: 		HierarchicalStreamWriter out;
0: 		if (transformation.toLowerCase().endsWith("json")) {
0: 			out = new JettisonMappedXmlDriver().createWriter(buffer);
0: 		} else {
0: 			out = new PrettyPrintWriter(buffer);
0: 		}
0: 		getXStream().marshal(object, out);
0: 		return buffer.toString();
0: 	}
1: 
0: 	protected ActiveMQObjectMessage createObjectMessage(HierarchicalStreamReader in) throws JMSException {
0: 		ActiveMQObjectMessage objMsg = new ActiveMQObjectMessage();
0: 		Object obj = getXStream().unmarshal(in);
0: 		objMsg.setObject((Serializable) obj);
0: 		return objMsg;
0: 	}
1: 	
0: 	protected ActiveMQMapMessage createMapMessage(HierarchicalStreamReader in) throws JMSException {
0: 		ActiveMQMapMessage mapMsg = new ActiveMQMapMessage();
0: 		Map<String, Object> map = (Map<String, Object>)getXStream().unmarshal(in);
0: 		for (String key : map.keySet()) {
0: 			mapMsg.setObject(key, map.get(key));
0: 		}
0: 		return mapMsg;
0: 	}
1: 	
1: 	
1: 
0: 	// Properties
0: 	// -------------------------------------------------------------------------
0: 	public XStream getXStream() {
0: 		if (xStream == null) {
0: 			xStream = createXStream();
0: 		}
0: 		return xStream;
0: 	}
1: 
0: 	public void setXStream(XStream xStream) {
0: 		this.xStream = xStream;
0: 	}
1: 
0: 	// Implementation methods
0: 	// -------------------------------------------------------------------------
0: 	protected XStream createXStream() {
0: 		XStream xstream = null;
0: 		if (applicationContext != null) {
0: 			String[] names = applicationContext
0: 					.getBeanNamesForType(XStream.class);
0: 			for (int i = 0; i < names.length; i++) {
0: 				String name = names[i];
0: 				xstream = (XStream) applicationContext.getBean(name);
0: 				if (xstream != null) {
0: 					break;
0: 				}
0: 			}
0: 		}
1: 
0: 		if (xstream == null) {
0: 			System.out.println("is null");
0: 			xstream = new XStream();
0: 		}
0: 		return xstream;
1: 
0: 	}
1: 
0: 	public void setApplicationContext(ApplicationContext applicationContext)
0: 			throws BeansException {
0: 		this.applicationContext = applicationContext;
0: 	}
1: 
0: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:4b44d31
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1:         if (transformation.toLowerCase(Locale.ENGLISH).endsWith("json")) {
/////////////////////////////////////////////////////////////////////////
1:         if (transformation.toLowerCase(Locale.ENGLISH).endsWith("json")) {
============================================================================