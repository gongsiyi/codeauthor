1:5ab78c1: /**
1:5ab78c1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5ab78c1:  * contributor license agreements.  See the NOTICE file distributed with
1:5ab78c1:  * this work for additional information regarding copyright ownership.
1:5ab78c1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5ab78c1:  * (the "License"); you may not use this file except in compliance with
1:5ab78c1:  * the License.  You may obtain a copy of the License at
1:5ab78c1:  *
1:5ab78c1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5ab78c1:  *
1:5ab78c1:  * Unless required by applicable law or agreed to in writing, software
1:5ab78c1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5ab78c1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5ab78c1:  * See the License for the specific language governing permissions and
1:5ab78c1:  * limitations under the License.
1:5ab78c1:  */
2:5ab78c1: 
1:5ab78c1: package org.apache.activemq.util.oxm;
1:5ab78c1: 
1:5ab78c1: import javax.jms.Destination;
1:5ab78c1: import javax.jms.Message;
1:5ab78c1: import javax.jms.MessageConsumer;
1:5ab78c1: import javax.jms.MessageProducer;
1:5ab78c1: import javax.jms.ObjectMessage;
1:5ab78c1: import javax.jms.Session;
1:5ab78c1: import javax.jms.TextMessage;
1:5ab78c1: 
1:3b4aadc: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1:5ab78c1: import org.apache.activemq.ActiveMQMessageConsumer;
1:5ab78c1: import org.apache.activemq.util.xstream.SamplePojo;
1:5ab78c1: 
1:3b4aadc: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.ADAPTIVE;
1:5ab78c1: 
1:5ab78c1: public class XStreamMessageTransformTest extends
1:5ab78c1: 		AbstractXMLMessageTransformerTest {
1:5ab78c1: 
1:5ab78c1: 	protected AbstractXMLMessageTransformer createTransformer() {
1:5ab78c1: 		return new XStreamMessageTransformer();
1:5ab78c1: 	}
1:5ab78c1: 
1:5ab78c1: 	public void testStreamDriverTransform() throws Exception {
1:5ab78c1: 		XStreamMessageTransformer transformer = (XStreamMessageTransformer) createTransformer();
1:5ab78c1: 		transformer.setTransformType(ADAPTIVE);
1:5ab78c1: 		transformer.setStreamDriver(new JettisonMappedXmlDriver());
1:5ab78c1: 		connection = createConnection(transformer);
1:5ab78c1: 
1:5ab78c1: 		// lets create the consumers
1:5ab78c1: 		Session adaptiveSession = connection.createSession(false,
1:5ab78c1: 				Session.AUTO_ACKNOWLEDGE);
1:5ab78c1: 		Destination destination = adaptiveSession.createTopic(getClass()
1:5ab78c1: 				.getName());
1:5ab78c1: 		MessageConsumer adaptiveConsumer = adaptiveSession
1:5ab78c1: 				.createConsumer(destination);
1:5ab78c1: 
1:5ab78c1: 		Session origSession = connection.createSession(false,
1:5ab78c1: 				Session.AUTO_ACKNOWLEDGE);
1:5ab78c1: 		MessageConsumer origConsumer = origSession.createConsumer(destination);
1:5ab78c1: 		// lets clear the transformer on this consumer so we see the message as
1:5ab78c1: 		// it really is
1:5ab78c1: 		((ActiveMQMessageConsumer) origConsumer).setTransformer(null);
1:5ab78c1: 
1:5ab78c1: 		// Create producer
1:5ab78c1: 		Session producerSession = connection.createSession(false,
1:5ab78c1: 				Session.AUTO_ACKNOWLEDGE);
1:5ab78c1: 		MessageProducer producer = producerSession.createProducer(destination);
1:5ab78c1: 
1:5ab78c1: 		Message message;
1:5ab78c1: 		ObjectMessage objectMessage;
1:5ab78c1: 		TextMessage textMessage;
1:5ab78c1: 		SamplePojo body;
1:5ab78c1: 		Object object;
1:5ab78c1: 		String text;
1:5ab78c1: 
1:5ab78c1: 		// Send a text message
1:5ab78c1: 		String xmlText = "{\"org.apache.activemq.util.xstream.SamplePojo\":{\"name\":\"James\",\"city\":\"London\"}}";
1:5ab78c1: 
1:5ab78c1: 		TextMessage txtRequest = producerSession.createTextMessage(xmlText);
1:5ab78c1: 		producer.send(txtRequest);
1:5ab78c1: 
1:5ab78c1: 		// lets consume it as a text message
1:5ab78c1: 		message = adaptiveConsumer.receive(timeout);
1:5ab78c1: 		assertNotNull("Should have received a message!", message);
1:5ab78c1: 		assertTrue("Should be a TextMessage but was: " + message,
1:5ab78c1: 				message instanceof TextMessage);
1:5ab78c1: 		textMessage = (TextMessage) message;
1:5ab78c1: 		text = textMessage.getText();
1:5ab78c1: 		assertTrue("Text should be non-empty!", text != null
1:5ab78c1: 				&& text.length() > 0);
1:5ab78c1: 
1:5ab78c1: 		// lets consume it as an object message
1:5ab78c1: 		message = origConsumer.receive(timeout);
1:5ab78c1: 		assertNotNull("Should have received a message!", message);
1:5ab78c1: 		assertTrue("Should be an ObjectMessage but was: " + message,
1:5ab78c1: 				message instanceof ObjectMessage);
1:5ab78c1: 		objectMessage = (ObjectMessage) message;
1:5ab78c1: 		object = objectMessage.getObject();
1:5ab78c1: 		assertTrue("object payload of wrong type: " + object,
1:5ab78c1: 				object instanceof SamplePojo);
1:5ab78c1: 		body = (SamplePojo) object;
1:5ab78c1: 		assertEquals("name", "James", body.getName());
1:5ab78c1: 		assertEquals("city", "London", body.getCity());
1:5ab78c1: 
1:5ab78c1: 		// Send object message
1:5ab78c1: 		ObjectMessage objRequest = producerSession
1:5ab78c1: 				.createObjectMessage(new SamplePojo("James", "London"));
1:5ab78c1: 		producer.send(objRequest);
1:5ab78c1: 
1:5ab78c1: 		// lets consume it as an object message
1:5ab78c1: 		message = adaptiveConsumer.receive(timeout);
1:5ab78c1: 		assertNotNull("Should have received a message!", message);
1:5ab78c1: 		assertTrue("Should be an ObjectMessage but was: " + message,
1:5ab78c1: 				message instanceof ObjectMessage);
1:5ab78c1: 		objectMessage = (ObjectMessage) message;
1:5ab78c1: 		object = objectMessage.getObject();
1:5ab78c1: 		assertTrue("object payload of wrong type: " + object,
1:5ab78c1: 				object instanceof SamplePojo);
1:5ab78c1: 		body = (SamplePojo) object;
1:5ab78c1: 		assertEquals("name", "James", body.getName());
1:5ab78c1: 		assertEquals("city", "London", body.getCity());
1:5ab78c1: 
1:5ab78c1: 		// lets consume it as a text message
1:5ab78c1: 		message = origConsumer.receive(timeout);
1:5ab78c1: 		assertNotNull("Should have received a message!", message);
1:5ab78c1: 		assertTrue("Should be a TextMessage but was: " + message,
1:5ab78c1: 				message instanceof TextMessage);
1:5ab78c1: 		textMessage = (TextMessage) message;
1:5ab78c1: 		text = textMessage.getText();
1:5ab78c1: 		assertTrue("Text should be non-empty!", text != null
1:5ab78c1: 				&& text.length() > 0);
1:5ab78c1: 		System.out.println("Received JSON...");
1:5ab78c1: 		System.out.println(text);
1:5ab78c1: 
1:5ab78c1: 	}
1:5ab78c1: 
1:5ab78c1: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.ADAPTIVE;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:5ab78c1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.util.oxm;
1: 
0: import static org.apache.activemq.util.oxm.AbstractXMLMessageTransformer.MessageTransform.ADAPTIVE;
1: 
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQMessageConsumer;
1: import org.apache.activemq.util.xstream.SamplePojo;
1: 
0: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1: 
1: public class XStreamMessageTransformTest extends
1: 		AbstractXMLMessageTransformerTest {
1: 
1: 	protected AbstractXMLMessageTransformer createTransformer() {
1: 		return new XStreamMessageTransformer();
1: 	}
1: 
1: 	public void testStreamDriverTransform() throws Exception {
1: 		XStreamMessageTransformer transformer = (XStreamMessageTransformer) createTransformer();
1: 		transformer.setTransformType(ADAPTIVE);
1: 		transformer.setStreamDriver(new JettisonMappedXmlDriver());
1: 		connection = createConnection(transformer);
1: 
1: 		// lets create the consumers
1: 		Session adaptiveSession = connection.createSession(false,
1: 				Session.AUTO_ACKNOWLEDGE);
1: 		Destination destination = adaptiveSession.createTopic(getClass()
1: 				.getName());
1: 		MessageConsumer adaptiveConsumer = adaptiveSession
1: 				.createConsumer(destination);
1: 
1: 		Session origSession = connection.createSession(false,
1: 				Session.AUTO_ACKNOWLEDGE);
1: 		MessageConsumer origConsumer = origSession.createConsumer(destination);
1: 		// lets clear the transformer on this consumer so we see the message as
1: 		// it really is
1: 		((ActiveMQMessageConsumer) origConsumer).setTransformer(null);
1: 
1: 		// Create producer
1: 		Session producerSession = connection.createSession(false,
1: 				Session.AUTO_ACKNOWLEDGE);
1: 		MessageProducer producer = producerSession.createProducer(destination);
1: 
1: 		Message message;
1: 		ObjectMessage objectMessage;
1: 		TextMessage textMessage;
1: 		SamplePojo body;
1: 		Object object;
1: 		String text;
1: 
1: 		// Send a text message
1: 		String xmlText = "{\"org.apache.activemq.util.xstream.SamplePojo\":{\"name\":\"James\",\"city\":\"London\"}}";
1: 
1: 		TextMessage txtRequest = producerSession.createTextMessage(xmlText);
1: 		producer.send(txtRequest);
1: 
1: 		// lets consume it as a text message
1: 		message = adaptiveConsumer.receive(timeout);
1: 		assertNotNull("Should have received a message!", message);
1: 		assertTrue("Should be a TextMessage but was: " + message,
1: 				message instanceof TextMessage);
1: 		textMessage = (TextMessage) message;
1: 		text = textMessage.getText();
1: 		assertTrue("Text should be non-empty!", text != null
1: 				&& text.length() > 0);
1: 
1: 		// lets consume it as an object message
1: 		message = origConsumer.receive(timeout);
1: 		assertNotNull("Should have received a message!", message);
1: 		assertTrue("Should be an ObjectMessage but was: " + message,
1: 				message instanceof ObjectMessage);
1: 		objectMessage = (ObjectMessage) message;
1: 		object = objectMessage.getObject();
1: 		assertTrue("object payload of wrong type: " + object,
1: 				object instanceof SamplePojo);
1: 		body = (SamplePojo) object;
1: 		assertEquals("name", "James", body.getName());
1: 		assertEquals("city", "London", body.getCity());
1: 
1: 		// Send object message
1: 		ObjectMessage objRequest = producerSession
1: 				.createObjectMessage(new SamplePojo("James", "London"));
1: 		producer.send(objRequest);
1: 
1: 		// lets consume it as an object message
1: 		message = adaptiveConsumer.receive(timeout);
1: 		assertNotNull("Should have received a message!", message);
1: 		assertTrue("Should be an ObjectMessage but was: " + message,
1: 				message instanceof ObjectMessage);
1: 		objectMessage = (ObjectMessage) message;
1: 		object = objectMessage.getObject();
1: 		assertTrue("object payload of wrong type: " + object,
1: 				object instanceof SamplePojo);
1: 		body = (SamplePojo) object;
1: 		assertEquals("name", "James", body.getName());
1: 		assertEquals("city", "London", body.getCity());
1: 
1: 		// lets consume it as a text message
1: 		message = origConsumer.receive(timeout);
1: 		assertNotNull("Should have received a message!", message);
1: 		assertTrue("Should be a TextMessage but was: " + message,
1: 				message instanceof TextMessage);
1: 		textMessage = (TextMessage) message;
1: 		text = textMessage.getText();
1: 		assertTrue("Text should be non-empty!", text != null
1: 				&& text.length() > 0);
1: 		System.out.println("Received JSON...");
1: 		System.out.println(text);
1: 
1: 	}
1: 
1: }
============================================================================