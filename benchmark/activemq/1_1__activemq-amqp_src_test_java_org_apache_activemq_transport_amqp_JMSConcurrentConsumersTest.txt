1:8f0bf60: /**
1:8f0bf60:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8f0bf60:  * contributor license agreements.  See the NOTICE file distributed with
1:8f0bf60:  * this work for additional information regarding copyright ownership.
1:8f0bf60:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8f0bf60:  * (the "License"); you may not use this file except in compliance with
1:8f0bf60:  * the License.  You may obtain a copy of the License at
1:8f0bf60:  *
1:8f0bf60:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8f0bf60:  *
1:8f0bf60:  * Unless required by applicable law or agreed to in writing, software
1:8f0bf60:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8f0bf60:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8f0bf60:  * See the License for the specific language governing permissions and
1:8f0bf60:  * limitations under the License.
1:8f0bf60:  */
1:8f0bf60: package org.apache.activemq.transport.amqp;
1:8f0bf60: 
1:8f0bf60: import static org.junit.Assert.assertEquals;
1:8f0bf60: 
1:8f0bf60: import java.net.URI;
1:8f0bf60: import java.util.concurrent.Callable;
1:8f0bf60: import java.util.concurrent.CountDownLatch;
1:8f0bf60: import java.util.concurrent.ExecutorService;
1:8f0bf60: import java.util.concurrent.Executors;
1:8f0bf60: import java.util.concurrent.TimeUnit;
1:8f0bf60: 
1:8f0bf60: import javax.jms.Connection;
1:8f0bf60: import javax.jms.Destination;
1:8f0bf60: import javax.jms.JMSException;
1:8f0bf60: import javax.jms.Message;
1:8f0bf60: import javax.jms.MessageConsumer;
1:8f0bf60: import javax.jms.MessageProducer;
1:8f0bf60: import javax.jms.Session;
1:8f0bf60: import javax.jms.TextMessage;
1:8f0bf60: 
1:8f0bf60: import org.junit.Before;
1:8f0bf60: import org.junit.Test;
1:8f0bf60: import org.slf4j.Logger;
1:8f0bf60: import org.slf4j.LoggerFactory;
1:8f0bf60: 
1:8f0bf60: public class JMSConcurrentConsumersTest extends AmqpTestSupport {
1:8f0bf60:     private static final Logger LOG = LoggerFactory.getLogger(JMSConcurrentConsumersTest.class);
1:8f0bf60:     private static final Integer ITERATIONS = 400;
1:8f0bf60:     private static final Integer CONSUMER_COUNT = 4; // At least 2 consumers are
1:8f0bf60:                                                      // required to reproduce
1:8f0bf60:                                                      // the original issue
1:8f0bf60:     public static final String TEXT_MESSAGE = "TextMessage: ";
1:8f0bf60: 
1:8f0bf60:     private CountDownLatch latch;
1:8f0bf60:     private CountDownLatch initLatch;
1:8f0bf60: 
1:8f0bf60:     @Override
1:8f0bf60:     @Before
1:8f0bf60:     public void setUp() throws Exception {
1:8f0bf60:         super.setUp();
1:8f0bf60: 
1:8f0bf60:         latch = new CountDownLatch(CONSUMER_COUNT * ITERATIONS);
1:8f0bf60:         initLatch = new CountDownLatch(CONSUMER_COUNT);
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     @Override
1:8f0bf60:     protected boolean isUseTcpConnector() {
1:8f0bf60:         return true;
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     @Override
1:8f0bf60:     protected boolean isUseSslConnector() {
1:8f0bf60:         return true;
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     @Override
1:8f0bf60:     protected boolean isUseNioConnector() {
1:8f0bf60:         return true;
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     @Override
1:8f0bf60:     protected boolean isUseNioPlusSslConnector() {
1:8f0bf60:         return true;
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     @Test(timeout = 60000)
1:8f0bf60:     public void testSendWithMultipleConsumersTCP() throws Exception {
1:8f0bf60:         doTestSendWithMultipleConsumers(amqpURI);
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     @Test(timeout = 60000)
1:8f0bf60:     public void testSendWithMultipleConsumersNIO() throws Exception {
1:8f0bf60:         doTestSendWithMultipleConsumers(amqpNioURI);
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     @Test(timeout = 60000)
1:8f0bf60:     public void testSendWithMultipleConsumersSSL() throws Exception {
1:8f0bf60:         doTestSendWithMultipleConsumers(amqpSslURI);
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     @Test(timeout = 60000)
1:8f0bf60:     public void testSendWithMultipleConsumersNIOPlusSSL() throws Exception {
1:8f0bf60:         doTestSendWithMultipleConsumers(amqpNioPlusSslURI);
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     public void doTestSendWithMultipleConsumers(URI remoteURI) throws Exception {
1:8f0bf60: 
1:240278d:         Connection connection = JMSClientContext.INSTANCE.createConnection(remoteURI, "admin", "password", false);
1:8f0bf60:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8f0bf60:         String destinationName = "AMQ4920Test" + System.currentTimeMillis();
1:8f0bf60:         Destination destination = session.createTopic(destinationName);
1:8f0bf60:         connection.start();
1:8f0bf60: 
1:8f0bf60:         ExecutorService executor = Executors.newCachedThreadPool();
1:8f0bf60:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:8f0bf60:             ConsumerTask consumerTask = new ConsumerTask(initLatch, destinationName, remoteURI, "Consumer-" + i, latch, ITERATIONS);
1:8f0bf60:             executor.submit(consumerTask);
1:8f0bf60:         }
1:8f0bf60:         connection.start();
1:8f0bf60: 
1:8f0bf60:         // Make sure at least Topic consumers are subscribed before the first send.
1:8f0bf60:         initLatch.await();
1:8f0bf60: 
1:8f0bf60:         LOG.debug("At start latch is " + latch.getCount());
1:8f0bf60:         sendMessages(connection, destination, ITERATIONS, 10);
1:8f0bf60:         LOG.debug("After send latch is " + latch.getCount());
1:8f0bf60: 
1:8f0bf60:         latch.await(15, TimeUnit.SECONDS);
1:8f0bf60:         LOG.debug("After await latch is " + latch.getCount());
1:8f0bf60:         assertEquals(0, latch.getCount());
1:8f0bf60: 
1:8f0bf60:         executor.shutdown();
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     public void sendMessages(Connection connection, Destination destination, int count, int sleepInterval) throws Exception {
1:8f0bf60:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8f0bf60:         MessageProducer producer = session.createProducer(destination);
1:8f0bf60: 
1:8f0bf60:         for (int i = 0; i < count; i++) {
1:8f0bf60:             TextMessage message = session.createTextMessage();
1:8f0bf60:             message.setText(TEXT_MESSAGE + i);
1:8f0bf60:             LOG.trace("Sending message [" + i + "]");
1:8f0bf60:             producer.send(message);
1:8f0bf60:             if (sleepInterval > 0) {
1:8f0bf60:                 Thread.sleep(sleepInterval);
1:8f0bf60:             }
1:8f0bf60:         }
1:8f0bf60: 
1:8f0bf60:         session.close();
1:8f0bf60:     }
1:8f0bf60: 
1:8f0bf60:     static class ConsumerTask implements Callable<Boolean> {
1:8f0bf60: 
1:8f0bf60:         protected static final Logger LOG = LoggerFactory.getLogger(ConsumerTask.class);
1:8f0bf60: 
1:8f0bf60:         private final String destinationName;
1:8f0bf60:         private final String consumerName;
1:8f0bf60:         private final CountDownLatch messagesReceived;
1:8f0bf60:         private final URI amqpURI;
1:8f0bf60:         private final int expectedMessageCount;
1:8f0bf60:         private final CountDownLatch started;
1:8f0bf60: 
1:8f0bf60:         public ConsumerTask(CountDownLatch started, String destinationName, URI amqpURI, String consumerName, CountDownLatch latch, int expectedMessageCount) {
1:8f0bf60:             this.started = started;
1:8f0bf60:             this.destinationName = destinationName;
1:8f0bf60:             this.amqpURI = amqpURI;
1:8f0bf60:             this.consumerName = consumerName;
1:8f0bf60:             this.messagesReceived = latch;
1:8f0bf60:             this.expectedMessageCount = expectedMessageCount;
1:8f0bf60:         }
1:8f0bf60: 
1:8f0bf60:         @Override
1:8f0bf60:         public Boolean call() throws Exception {
1:8f0bf60:             LOG.debug(consumerName + " starting");
1:8f0bf60:             Connection connection = null;
1:8f0bf60:             try {
1:240278d:                 connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "admin", "admin", false);
1:8f0bf60:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8f0bf60:                 Destination destination = session.createTopic(destinationName);
1:8f0bf60:                 MessageConsumer consumer = session.createConsumer(destination);
1:8f0bf60:                 connection.start();
1:8f0bf60: 
1:8f0bf60:                 started.countDown();
1:8f0bf60: 
1:8f0bf60:                 int receivedCount = 0;
1:8f0bf60:                 while (receivedCount < expectedMessageCount) {
1:8f0bf60:                     Message message = consumer.receive(2000);
1:8f0bf60:                     if (message == null) {
1:8f0bf60:                         LOG.error("consumer {} got null message on iteration {}", consumerName, receivedCount);
1:8f0bf60:                         return false;
1:8f0bf60:                     }
1:8f0bf60:                     if (!(message instanceof TextMessage)) {
1:8f0bf60:                         LOG.error("consumer {} expected text message on iteration {} but got {}", consumerName, receivedCount, message.getClass().getCanonicalName());
1:8f0bf60:                         return false;
1:8f0bf60:                     }
1:8f0bf60:                     TextMessage tm = (TextMessage) message;
1:8f0bf60:                     if (!tm.getText().equals(TEXT_MESSAGE + receivedCount)) {
1:8f0bf60:                         LOG.error("consumer {} expected {} got message [{}]", consumerName, receivedCount, tm.getText());
1:8f0bf60:                         return false;
1:8f0bf60:                     }
1:8f0bf60:                     LOG.trace("consumer {} expected {} got message [{}]", consumerName, receivedCount, tm.getText());
1:8f0bf60:                     messagesReceived.countDown();
1:8f0bf60:                     receivedCount++;
1:8f0bf60:                 }
1:8f0bf60:             } catch (Exception e) {
1:8f0bf60:                 LOG.error("UnexpectedException in " + consumerName, e);
1:8f0bf60:             } finally {
1:8f0bf60:                 try {
1:8f0bf60:                     connection.close();
1:8f0bf60:                 } catch (JMSException ignoreMe) {
1:8f0bf60:                 }
1:8f0bf60:             }
1:8f0bf60: 
1:8f0bf60:             return true;
1:8f0bf60:         }
1:8f0bf60:     }
1:8f0bf60: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:240278d
/////////////////////////////////////////////////////////////////////////
1:         Connection connection = JMSClientContext.INSTANCE.createConnection(remoteURI, "admin", "password", false);
/////////////////////////////////////////////////////////////////////////
1:                 connection = JMSClientContext.INSTANCE.createConnection(amqpURI, "admin", "admin", false);
commit:8f0bf60
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.net.URI;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JMSConcurrentConsumersTest extends AmqpTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(JMSConcurrentConsumersTest.class);
1:     private static final Integer ITERATIONS = 400;
1:     private static final Integer CONSUMER_COUNT = 4; // At least 2 consumers are
1:                                                      // required to reproduce
1:                                                      // the original issue
1:     public static final String TEXT_MESSAGE = "TextMessage: ";
1: 
1:     private CountDownLatch latch;
1:     private CountDownLatch initLatch;
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         latch = new CountDownLatch(CONSUMER_COUNT * ITERATIONS);
1:         initLatch = new CountDownLatch(CONSUMER_COUNT);
1:     }
1: 
1:     @Override
1:     protected boolean isUseTcpConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseSslConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return true;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendWithMultipleConsumersTCP() throws Exception {
1:         doTestSendWithMultipleConsumers(amqpURI);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendWithMultipleConsumersNIO() throws Exception {
1:         doTestSendWithMultipleConsumers(amqpNioURI);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendWithMultipleConsumersSSL() throws Exception {
1:         doTestSendWithMultipleConsumers(amqpSslURI);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendWithMultipleConsumersNIOPlusSSL() throws Exception {
1:         doTestSendWithMultipleConsumers(amqpNioPlusSslURI);
1:     }
1: 
1:     public void doTestSendWithMultipleConsumers(URI remoteURI) throws Exception {
1: 
0:         Connection connection = JmsClientContext.INSTANCE.createConnection(remoteURI, "admin", "password", false);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         String destinationName = "AMQ4920Test" + System.currentTimeMillis();
1:         Destination destination = session.createTopic(destinationName);
1:         connection.start();
1: 
1:         ExecutorService executor = Executors.newCachedThreadPool();
1:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:             ConsumerTask consumerTask = new ConsumerTask(initLatch, destinationName, remoteURI, "Consumer-" + i, latch, ITERATIONS);
1:             executor.submit(consumerTask);
1:         }
1:         connection.start();
1: 
1:         // Make sure at least Topic consumers are subscribed before the first send.
1:         initLatch.await();
1: 
1:         LOG.debug("At start latch is " + latch.getCount());
1:         sendMessages(connection, destination, ITERATIONS, 10);
1:         LOG.debug("After send latch is " + latch.getCount());
1: 
1:         latch.await(15, TimeUnit.SECONDS);
1:         LOG.debug("After await latch is " + latch.getCount());
1:         assertEquals(0, latch.getCount());
1: 
1:         executor.shutdown();
1:     }
1: 
1:     public void sendMessages(Connection connection, Destination destination, int count, int sleepInterval) throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         for (int i = 0; i < count; i++) {
1:             TextMessage message = session.createTextMessage();
1:             message.setText(TEXT_MESSAGE + i);
1:             LOG.trace("Sending message [" + i + "]");
1:             producer.send(message);
1:             if (sleepInterval > 0) {
1:                 Thread.sleep(sleepInterval);
1:             }
1:         }
1: 
1:         session.close();
1:     }
1: 
1:     static class ConsumerTask implements Callable<Boolean> {
1: 
1:         protected static final Logger LOG = LoggerFactory.getLogger(ConsumerTask.class);
1: 
1:         private final String destinationName;
1:         private final String consumerName;
1:         private final CountDownLatch messagesReceived;
1:         private final URI amqpURI;
1:         private final int expectedMessageCount;
1:         private final CountDownLatch started;
1: 
1:         public ConsumerTask(CountDownLatch started, String destinationName, URI amqpURI, String consumerName, CountDownLatch latch, int expectedMessageCount) {
1:             this.started = started;
1:             this.destinationName = destinationName;
1:             this.amqpURI = amqpURI;
1:             this.consumerName = consumerName;
1:             this.messagesReceived = latch;
1:             this.expectedMessageCount = expectedMessageCount;
1:         }
1: 
1:         @Override
1:         public Boolean call() throws Exception {
1:             LOG.debug(consumerName + " starting");
1:             Connection connection = null;
1:             try {
0:                 connection = JmsClientContext.INSTANCE.createConnection(amqpURI, "admin", "admin", false);
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 Destination destination = session.createTopic(destinationName);
1:                 MessageConsumer consumer = session.createConsumer(destination);
1:                 connection.start();
1: 
1:                 started.countDown();
1: 
1:                 int receivedCount = 0;
1:                 while (receivedCount < expectedMessageCount) {
1:                     Message message = consumer.receive(2000);
1:                     if (message == null) {
1:                         LOG.error("consumer {} got null message on iteration {}", consumerName, receivedCount);
1:                         return false;
1:                     }
1:                     if (!(message instanceof TextMessage)) {
1:                         LOG.error("consumer {} expected text message on iteration {} but got {}", consumerName, receivedCount, message.getClass().getCanonicalName());
1:                         return false;
1:                     }
1:                     TextMessage tm = (TextMessage) message;
1:                     if (!tm.getText().equals(TEXT_MESSAGE + receivedCount)) {
1:                         LOG.error("consumer {} expected {} got message [{}]", consumerName, receivedCount, tm.getText());
1:                         return false;
1:                     }
1:                     LOG.trace("consumer {} expected {} got message [{}]", consumerName, receivedCount, tm.getText());
1:                     messagesReceived.countDown();
1:                     receivedCount++;
1:                 }
1:             } catch (Exception e) {
1:                 LOG.error("UnexpectedException in " + consumerName, e);
1:             } finally {
1:                 try {
1:                     connection.close();
1:                 } catch (JMSException ignoreMe) {
1:                 }
1:             }
1: 
1:             return true;
1:         }
1:     }
1: }
============================================================================