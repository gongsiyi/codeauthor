1:4fc1712: /**
1:4fc1712:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4fc1712:  * contributor license agreements.  See the NOTICE file distributed with
1:4fc1712:  * this work for additional information regarding copyright ownership.
1:4fc1712:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4fc1712:  * (the "License"); you may not use this file except in compliance with
1:4fc1712:  * the License.  You may obtain a copy of the License at
1:4fc1712:  *
1:4fc1712:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4fc1712:  *
1:4fc1712:  * Unless required by applicable law or agreed to in writing, software
1:4fc1712:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4fc1712:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4fc1712:  * See the License for the specific language governing permissions and
1:4fc1712:  * limitations under the License.
1:4fc1712:  */
1:4fc1712: package org.apache.activemq.usecases;
1:054fc6a: 
1:4fc1712: import java.io.File;
1:054fc6a: import java.util.List;
1:e06685f: import java.util.concurrent.atomic.AtomicInteger;
27:4fc1712: 
1:e06685f: import javax.jms.*;
1:4743a20: import javax.management.InstanceNotFoundException;
1:4743a20: import javax.management.MalformedObjectNameException;
1:4fc1712: import javax.management.ObjectName;
1:4fc1712: 
1:4fc1712: import org.apache.activemq.ActiveMQConnectionFactory;
1:4fc1712: import org.apache.activemq.TestSupport;
1:e06685f: import org.apache.activemq.advisory.AdvisorySupport;
1:4fc1712: import org.apache.activemq.broker.BrokerFactory;
1:4fc1712: import org.apache.activemq.broker.BrokerService;
1:4fc1712: import org.apache.activemq.broker.ConnectionContext;
1:55794fe: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:054fc6a: import org.apache.activemq.broker.region.Destination;
1:054fc6a: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:054fc6a: import org.apache.activemq.broker.region.Subscription;
1:e06685f: import org.apache.activemq.command.ActiveMQMessage;
1:4fc1712: import org.apache.activemq.command.ActiveMQTopic;
1:4fc1712: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:4fc1712: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:054fc6a: 
1:4fc1712: public class DurableSubscriptionUnsubscribeTest extends TestSupport {
1:4fc1712: 
1:4fc1712:     BrokerService broker = null;
1:4fc1712:     Connection connection = null;
1:4fc1712:     ActiveMQTopic topic;
1:4fc1712: 
1:4fc1712:     public void testJMXSubscriptionUnsubscribe() throws Exception {
1:4fc1712:         doJMXUnsubscribe(false);
7:4fc1712:     }
1:4fc1712: 
1:4fc1712:     public void testJMXSubscriptionUnsubscribeWithRestart() throws Exception {
1:4fc1712:         doJMXUnsubscribe(true);
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     public void testConnectionSubscriptionUnsubscribe() throws Exception {
1:4fc1712:         doConnectionUnsubscribe(false);
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     public void testConnectionSubscriptionUnsubscribeWithRestart() throws Exception {
1:4fc1712:         doConnectionUnsubscribe(true);
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     public void testDirectSubscriptionUnsubscribe() throws Exception {
1:4fc1712:         doDirectUnsubscribe(false);
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     public void testDirectubscriptionUnsubscribeWithRestart() throws Exception {
1:4fc1712:         doDirectUnsubscribe(true);
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     public void doJMXUnsubscribe(boolean restart) throws Exception {
1:054fc6a:         createSubscriptions();
1:e06685f:         createAdvisorySubscription();
1:4fc1712: 
1:054fc6a:         Thread.sleep(1000);
1:054fc6a:         assertCount(100, 0);
1:4fc1712: 
1:4fc1712:         if (restart) {
1:054fc6a:             restartBroker();
1:e06685f:             createAdvisorySubscription();
1:054fc6a:             assertCount(100, 0);
1:4fc1712:         }
1:4fc1712: 
1:054fc6a:         ObjectName[] subs = broker.getAdminView().getInactiveDurableTopicSubscribers();
1:4fc1712: 
1:054fc6a:         for (int i = 0; i < subs.length; i++) {
1:55794fe:             ObjectName subName = subs[i];
1:55794fe:             DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)broker.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:55794fe:             sub.destroy();
1:054fc6a: 
1:054fc6a:             if (i % 20 == 0) {
1:054fc6a:                 Thread.sleep(1000);
1:054fc6a:                 assertCount(100 - i - 1, 0);
1:054fc6a:             }
1:4fc1712:         }
1:4fc1712: 
1:054fc6a:         Thread.sleep(1000);
1:054fc6a:         assertCount(0, 0);
1:4fc1712: 
1:054fc6a:         if (restart) {
1:054fc6a:             restartBroker();
1:e06685f:             createAdvisorySubscription();
1:054fc6a:             assertCount(0, 0);
1:054fc6a:         }
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     public void doConnectionUnsubscribe(boolean restart) throws Exception {
1:054fc6a:         createSubscriptions();
1:e06685f:         createAdvisorySubscription();
1:054fc6a: 
1:054fc6a:         Thread.sleep(1000);
1:054fc6a:         assertCount(100, 0);
1:4fc1712: 
1:054fc6a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:054fc6a:         session.createDurableSubscriber(topic, "SubsId1");
1:054fc6a: 
1:054fc6a:         Thread.sleep(1000);
1:054fc6a:         assertCount(100, 1);
1:054fc6a: 
1:054fc6a:         Session session2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:054fc6a:         session2.createDurableSubscriber(topic, "SubsId2");
1:054fc6a: 
1:054fc6a:         Thread.sleep(1000);
1:054fc6a:         assertCount(100, 2);
1:054fc6a: 
1:054fc6a:         session.close();
1:054fc6a: 
1:054fc6a:         Thread.sleep(1000);
1:054fc6a:         assertCount(100, 1);
1:054fc6a: 
1:054fc6a:         session2.close();
1:054fc6a: 
1:054fc6a:         Thread.sleep(1000);
1:054fc6a:         assertCount(100, 0);
1:4fc1712: 
1:4fc1712:         if (restart) {
1:054fc6a:             restartBroker();
1:e06685f:             createAdvisorySubscription();
1:054fc6a:             assertCount(100, 0);
1:4fc1712:         }
1:4fc1712: 
4:4fc1712:         for (int i = 0; i < 100; i++) {
1:054fc6a:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4fc1712:             session.unsubscribe("SubsId" + i);
7:4fc1712:             session.close();
1:054fc6a: 
1:054fc6a:             if (i % 20 == 0) {
1:054fc6a:                 Thread.sleep(1000);
1:054fc6a:                 assertCount(100 - i - 1, 0);
1:054fc6a:             }
1:054fc6a:         }
1:4fc1712: 
1:054fc6a:         Thread.sleep(1000);
1:054fc6a:         assertCount(0, 0);
1:4fc1712: 
1:054fc6a:         if (restart) {
1:054fc6a:             restartBroker();
1:e06685f:             createAdvisorySubscription();
1:054fc6a:             assertCount(0, 0);
1:4fc1712:         }
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     public void doDirectUnsubscribe(boolean restart) throws Exception {
1:054fc6a:         createSubscriptions();
1:e06685f:         createAdvisorySubscription();
1:4fc1712: 
1:054fc6a:         Thread.sleep(1000);
1:054fc6a:         assertCount(100, 0);
1:4fc1712: 
1:4fc1712:         if (restart) {
1:054fc6a:             restartBroker();
1:e06685f:             createAdvisorySubscription();
1:054fc6a:             assertCount(100, 0);
1:4fc1712:         }
1:4fc1712: 
1:4fc1712:         for (int i = 0; i < 100; i++) {
1:4fc1712:             RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:4fc1712:             info.setClientId(getName());
1:4fc1712:             info.setSubscriptionName("SubsId" + i);
1:4fc1712:             ConnectionContext context = new ConnectionContext();
1:4fc1712:             context.setBroker(broker.getRegionBroker());
1:4fc1712:             context.setClientId(getName());
1:e06685f:             broker.getBroker().removeSubscription(context, info);
1:054fc6a: 
1:054fc6a:             if (i % 20 == 0) {
1:e06685f:                 Thread.sleep(1000);
1:054fc6a:                 assertCount(100 - i - 1, 0);
1:054fc6a:             }
1:054fc6a:         }
1:4fc1712: 
1:054fc6a:         assertCount(0, 0);
1:4fc1712: 
1:054fc6a:         if (restart) {
1:054fc6a:             restartBroker();
1:e06685f:             createAdvisorySubscription();
1:054fc6a:             assertCount(0, 0);
1:054fc6a:         }
1:4fc1712:     }
1:4fc1712: 
1:054fc6a:     private void createSubscriptions() throws Exception {
1:054fc6a:         for (int i = 0; i < 100; i++) {
1:054fc6a:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:054fc6a:             session.createDurableSubscriber(topic, "SubsId" + i);
1:054fc6a:             session.close();
1:054fc6a:         }
1:054fc6a:     }
1:054fc6a: 
1:e06685f:     private final AtomicInteger advisories = new AtomicInteger(0);
1:e06685f: 
1:e06685f:     private void createAdvisorySubscription() throws Exception {
1:e06685f:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e06685f:         MessageConsumer advisoryConsumer = session.createConsumer(AdvisorySupport.getConsumerAdvisoryTopic(topic));
1:e06685f:         advisoryConsumer.setMessageListener(new MessageListener() {
1:e06685f:             @Override
1:e06685f:             public void onMessage(Message message) {
1:e06685f:                 if (((ActiveMQMessage)message).getDataStructure() instanceof RemoveSubscriptionInfo) {
1:e06685f:                     advisories.incrementAndGet();
1:e06685f:                 }
1:e06685f:             }
1:e06685f:         });
1:e06685f:     }
1:054fc6a: 
1:054fc6a:     private void assertCount(int all, int active) throws Exception {
1:054fc6a:         int inactive = all - active;
1:054fc6a: 
1:054fc6a:         // broker check
1:054fc6a:         Destination destination = broker.getDestination(topic);
1:054fc6a:         List<Subscription> subs = destination.getConsumers();
1:054fc6a:         int cActive = 0, cInactive = 0;
1:054fc6a:         for (Subscription sub: subs) {
1:054fc6a:             if (sub instanceof DurableTopicSubscription) {
1:054fc6a:                 DurableTopicSubscription durable = (DurableTopicSubscription) sub;
1:054fc6a:                 if (durable.isActive())
1:054fc6a:                     cActive++;
1:054fc6a:                 else
1:054fc6a:                     cInactive++;
1:054fc6a:             }
1:054fc6a:         }
1:054fc6a:         assertEquals(active, cActive);
1:054fc6a:         assertEquals(inactive, cInactive);
1:054fc6a: 
1:054fc6a:         // admin view
4:4fc1712:         ObjectName[] subscriptions = broker.getAdminView().getDurableTopicSubscribers();
1:054fc6a:         assertEquals(active, subscriptions.length);
9:4fc1712:         subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
1:054fc6a:         assertEquals(inactive, subscriptions.length);
1:054fc6a: 
1:054fc6a:         // check the strange false MBean
1:054fc6a:         if (all == 0)
1:054fc6a:             assertEquals(0, countMBean());
1:e06685f: 
1:e06685f:         // check if we got all advisories
1:e06685f:         assertEquals(100, all + advisories.get());
1:054fc6a:     }
1:054fc6a: 
1:054fc6a:     private int countMBean() throws MalformedObjectNameException, InstanceNotFoundException {
1:054fc6a:         int count = 0;
1:054fc6a:         for (int i = 0; i < 100; i++) {
1:054fc6a:             String name = "org.apache.activemq:BrokerName=" + getName() + ",Type=Subscription,active=false,name=" + getName() + "_SubsId" + i;
1:054fc6a:             ObjectName sub = new ObjectName(name);
1:054fc6a:             try {
1:55794fe:                 broker.getManagementContext().getObjectInstance(sub);
1:054fc6a:                 count++;
1:054fc6a:             }
1:054fc6a:             catch (InstanceNotFoundException ignore) {
1:054fc6a:                 // this should happen
1:054fc6a:             }
1:054fc6a:         }
1:054fc6a:         return count;
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     private void startBroker(boolean deleteMessages) throws Exception {
1:054fc6a:         broker = BrokerFactory.createBroker("broker:(vm://" + getName() + ")");
1:4fc1712:         broker.setUseJmx(true);
1:971f61f:         broker.getManagementContext().setCreateConnector(false);
1:4fc1712:         broker.setBrokerName(getName());
1:4fc1712: 
1:4fc1712:         broker.setPersistent(true);
1:4fc1712:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:4fc1712:         persistenceAdapter.setDirectory(new File("activemq-data/" + getName()));
1:4fc1712:         broker.setPersistenceAdapter(persistenceAdapter);
1:4fc1712:         if (deleteMessages) {
1:4fc1712:             broker.setDeleteAllMessagesOnStartup(true);
1:4fc1712:         }
1:054fc6a: 
1:4fc1712: 
1:054fc6a:         broker.setKeepDurableSubsActive(true);
1:054fc6a: 
1:4fc1712:         broker.start();
1:054fc6a:         broker.waitUntilStarted();
1:4fc1712: 
1:4fc1712:         connection = createConnection();
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     private void stopBroker() throws Exception {
1:4fc1712:         if (connection != null)
1:4fc1712:             connection.close();
1:4fc1712:         connection = null;
1:4fc1712: 
1:054fc6a:         if (broker != null) {
1:4fc1712:             broker.stop();
1:054fc6a:             broker.waitUntilStopped();
1:054fc6a:         }
1:4fc1712:         broker = null;
1:4fc1712:     }
1:4fc1712: 
1:054fc6a:     private void restartBroker() throws Exception {
1:054fc6a:         stopBroker();
1:054fc6a:         startBroker(false);
1:054fc6a:     }
1:054fc6a: 
1:4743a20:     @Override
1:4fc1712:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:4fc1712:         return new ActiveMQConnectionFactory("vm://" + getName() + "?waitForStart=5000&create=false");
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     @Override
1:4fc1712:     protected void setUp() throws Exception {
1:4fc1712:         super.setUp();
1:4fc1712: 
1:4fc1712:         topic = (ActiveMQTopic) createDestination();
1:4fc1712:         startBroker(true);
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     @Override
1:4fc1712:     protected void tearDown() throws Exception {
4:4fc1712:         stopBroker();
1:4fc1712:         super.tearDown();
1:4fc1712:     }
1:4fc1712: 
1:4fc1712:     @Override
1:4fc1712:     protected Connection createConnection() throws Exception {
1:4fc1712:         Connection rc = super.createConnection();
1:4fc1712:         rc.setClientID(getName());
1:4fc1712:         rc.start();
1:4fc1712:         return rc;
1:054fc6a:     }
1:4fc1712: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e06685f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.*;
1: import org.apache.activemq.advisory.AdvisorySupport;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
1:         createAdvisorySubscription();
1:             createAdvisorySubscription();
/////////////////////////////////////////////////////////////////////////
1:             createAdvisorySubscription();
1:         createAdvisorySubscription();
/////////////////////////////////////////////////////////////////////////
1:             createAdvisorySubscription();
/////////////////////////////////////////////////////////////////////////
1:             createAdvisorySubscription();
1:         createAdvisorySubscription();
1:             createAdvisorySubscription();
/////////////////////////////////////////////////////////////////////////
1:             broker.getBroker().removeSubscription(context, info);
1:                 Thread.sleep(1000);
/////////////////////////////////////////////////////////////////////////
1:             createAdvisorySubscription();
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicInteger advisories = new AtomicInteger(0);
1: 
1:     private void createAdvisorySubscription() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer advisoryConsumer = session.createConsumer(AdvisorySupport.getConsumerAdvisoryTopic(topic));
1:         advisoryConsumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 if (((ActiveMQMessage)message).getDataStructure() instanceof RemoveSubscriptionInfo) {
1:                     advisories.incrementAndGet();
1:                 }
1:             }
1:         });
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1:         // check if we got all advisories
1:         assertEquals(100, all + advisories.get());
commit:55794fe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
0: import org.apache.activemq.broker.jmx.SubscriptionView;
0: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
/////////////////////////////////////////////////////////////////////////
1:             ObjectName subName = subs[i];
1:             DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)broker.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:             sub.destroy();
/////////////////////////////////////////////////////////////////////////
1:                 broker.getManagementContext().getObjectInstance(sub);
commit:054fc6a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
1: import org.apache.activemq.broker.region.Subscription;
0: import javax.management.*;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
1:         createSubscriptions();
1:         Thread.sleep(1000);
1:         assertCount(100, 0);
1:             restartBroker();
1:             assertCount(100, 0);
1:         ObjectName[] subs = broker.getAdminView().getInactiveDurableTopicSubscribers();
1:         for (int i = 0; i < subs.length; i++) {
0:             ObjectName sub = subs[i];
0:             mbs.invoke(sub, "destroy", null, null);
1: 
1:             if (i % 20 == 0) {
1:                 Thread.sleep(1000);
1:                 assertCount(100 - i - 1, 0);
1:             }
1:         Thread.sleep(1000);
1:         assertCount(0, 0);
1:         if (restart) {
1:             restartBroker();
1:             assertCount(0, 0);
1:         }
1:         createSubscriptions();
1:         Thread.sleep(1000);
1:         assertCount(100, 0);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId1");
1: 
1:         Thread.sleep(1000);
1:         assertCount(100, 1);
1: 
1:         Session session2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session2.createDurableSubscriber(topic, "SubsId2");
1: 
1:         Thread.sleep(1000);
1:         assertCount(100, 2);
1: 
1:         session.close();
1: 
1:         Thread.sleep(1000);
1:         assertCount(100, 1);
1: 
1:         session2.close();
1: 
1:         Thread.sleep(1000);
1:         assertCount(100, 0);
1:             restartBroker();
1:             assertCount(100, 0);
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             if (i % 20 == 0) {
1:                 Thread.sleep(1000);
1:                 assertCount(100 - i - 1, 0);
1:             }
1:         Thread.sleep(1000);
1:         assertCount(0, 0);
1:         if (restart) {
1:             restartBroker();
1:             assertCount(0, 0);
1:         }
1:         createSubscriptions();
1:         Thread.sleep(1000);
1:         assertCount(100, 0);
1:             restartBroker();
1:             assertCount(100, 0);
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (i % 20 == 0) {
1:                 assertCount(100 - i - 1, 0);
1:             }
1:         assertCount(0, 0);
1:         if (restart) {
1:             restartBroker();
1:             assertCount(0, 0);
1:         }
1:     }
1: 
1:     private void createSubscriptions() throws Exception {
1:         for (int i = 0; i < 100; i++) {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.createDurableSubscriber(topic, "SubsId" + i);
1:             session.close();
1:         }        
1:     }
1: 
1: 
1:     private void assertCount(int all, int active) throws Exception {
1:         int inactive = all - active;
1: 
1:         // broker check
1:         Destination destination = broker.getDestination(topic);
1:         List<Subscription> subs = destination.getConsumers();
1:         int cActive = 0, cInactive = 0;
1:         for (Subscription sub: subs) {
1:             if (sub instanceof DurableTopicSubscription) {
1:                 DurableTopicSubscription durable = (DurableTopicSubscription) sub;
1:                 if (durable.isActive())
1:                     cActive++;
1:                 else
1:                     cInactive++;
1:             }
1:         }
1:         assertEquals(active, cActive);
1:         assertEquals(inactive, cInactive);
1: 
1:         // admin view
1:         assertEquals(active, subscriptions.length);
1:         assertEquals(inactive, subscriptions.length);
1: 
1:         // check the strange false MBean
1:         if (all == 0)
1:             assertEquals(0, countMBean());
1:     }
1: 
1:     private int countMBean() throws MalformedObjectNameException, InstanceNotFoundException {
1:         int count = 0;
0:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:         for (int i = 0; i < 100; i++) {
1:             String name = "org.apache.activemq:BrokerName=" + getName() + ",Type=Subscription,active=false,name=" + getName() + "_SubsId" + i;
1:             ObjectName sub = new ObjectName(name);
1:             try {
0:                 ObjectInstance oi = mbs.getObjectInstance(sub);
1:                 count++;
1:             }
1:             catch (InstanceNotFoundException ignore) {
1:                 // this should happen
1:             }
1:         }
1:         return count;
1:         broker = BrokerFactory.createBroker("broker:(vm://" + getName() + ")");
/////////////////////////////////////////////////////////////////////////
1: 
1:         broker.setKeepDurableSubsActive(true);
1: 
1:         broker.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
1:         if (broker != null) {
1:             broker.waitUntilStopped();
1:         }
1:     private void restartBroker() throws Exception {
1:         stopBroker();
1:         startBroker(false);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: }
commit:4fc1712
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Session;
0: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: import java.io.File;
0: import java.lang.management.ManagementFactory;
1: 
1: public class DurableSubscriptionUnsubscribeTest extends TestSupport {
1: 
1:     BrokerService broker = null;
1:     Connection connection = null;
1:     ActiveMQTopic topic;
1: 
1:     public void testJMXSubscriptionUnsubscribe() throws Exception {
1:         doJMXUnsubscribe(false);
1:     }
1: 
1:     public void testJMXSubscriptionUnsubscribeWithRestart() throws Exception {
1:         doJMXUnsubscribe(true);
1:     }
1: 
1:     public void testConnectionSubscriptionUnsubscribe() throws Exception {
1:         doConnectionUnsubscribe(false);
1:     }
1: 
1:     public void testConnectionSubscriptionUnsubscribeWithRestart() throws Exception {
1:         doConnectionUnsubscribe(true);
1:     }
1: 
1:     public void testDirectSubscriptionUnsubscribe() throws Exception {
1:         doDirectUnsubscribe(false);
1:     }
1: 
1:     public void testDirectubscriptionUnsubscribeWithRestart() throws Exception {
1:         doDirectUnsubscribe(true);
1:     }
1: 
1:     public void doJMXUnsubscribe(boolean restart) throws Exception {
1:         for (int i = 0; i < 100; i++) {
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             session.createDurableSubscriber(topic, "SubsId" + i);
1:             session.close();
1:         }
1: 
0:         Thread.sleep(2 * 1000);
1: 
1:         if (restart) {
1:             stopBroker();
0:             startBroker(false);
1:         }
1: 
0:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:         ObjectName[] subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:         ObjectName[] inactive = broker.getAdminView().getInactiveDurableTopicSubscribers();
1: 
0:         for (ObjectName subscription: subscriptions) {
0:             mbs.invoke(subscription, "destroy", null, null);
1:         }
0:         for (ObjectName subscription: inactive) {
0:             mbs.invoke(subscription, "destroy", null, null);
1:         }
1: 
0:         Thread.sleep(2 * 1000);
1: 
0:         subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:         assertEquals(0, subscriptions.length);
1: 
1:         subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
0:         assertEquals(0, subscriptions.length);
1:     }
1: 
0:     public void testInactiveSubscriptions() throws Exception {
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             session.createDurableSubscriber(topic, "SubsId");
1: 
1:             ObjectName[] subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:             assertEquals(1, subscriptions.length);
1: 
1:             subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
0:             assertEquals(0, subscriptions.length);
1: 
1:             session.close();
1: 
0:             Thread.sleep(1000);
1: 
0:             subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:             assertEquals(0, subscriptions.length);
1: 
1:             subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
0:             assertEquals(1, subscriptions.length);
1: 
0:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             session.createDurableSubscriber(topic, "SubsId");
1: 
0:             Thread.sleep(1000);
1: 
0:             subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:             assertEquals(1, subscriptions.length);
1: 
1:             subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
0:             assertEquals(0, subscriptions.length);
1: 
1:             session.close();
0:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:             Thread.sleep(1000);
1: 
0:             subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:             assertEquals(0, subscriptions.length);
1: 
1:             subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
0:             assertEquals(1, subscriptions.length);
1: 
0:             session.unsubscribe("SubsId");
1: 
0:             Thread.sleep(1000);
1: 
0:             subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:             assertEquals(0, subscriptions.length);
1: 
1:             subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
0:             assertEquals(0, subscriptions.length);
1: 
1:             session.close();
1: 
1:     }
1: 
1:     public void doConnectionUnsubscribe(boolean restart) throws Exception {
1:         for (int i = 0; i < 100; i++) {
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             session.createDurableSubscriber(topic, "SubsId" + i);
1:             session.close();
1:         }
1: 
0:         Thread.sleep(2 * 1000);
1: 
1:         if (restart) {
1:             stopBroker();
0:             startBroker(false);
1:         }
1: 
1:         ObjectName[] subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:         assertEquals(0, subscriptions.length);
1: 
1:         subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
0:         assertEquals(100, subscriptions.length);
1: 
1:         for (int i = 0; i < 100; i++) {
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.unsubscribe("SubsId" + i);
1:             session.close();
1:         }
1: 
0:         Thread.sleep(2 * 1000);
1: 
0:         subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:         assertEquals(0, subscriptions.length);
1: 
1:         subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
0:         assertEquals(0, subscriptions.length);
1:     }
1: 
1:     public void doDirectUnsubscribe(boolean restart) throws Exception {
1:         for (int i = 0; i < 100; i++) {
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             session.createDurableSubscriber(topic, "SubsId" + i);
1:             session.close();
1:         }
1: 
0:         Thread.sleep(2 * 1000);
1: 
1:         if (restart) {
1:             stopBroker();
0:             startBroker(false);
1:         }
1: 
1:         for (int i = 0; i < 100; i++) {
1:             RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:             info.setClientId(getName());
1:             info.setSubscriptionName("SubsId" + i);
1:             ConnectionContext context = new ConnectionContext();
1:             context.setBroker(broker.getRegionBroker());
1:             context.setClientId(getName());
0:             broker.getRegionBroker().removeSubscription(context, info);
1:         }
1: 
0:         Thread.sleep(2 * 1000);
1: 
1:         ObjectName[] subscriptions = broker.getAdminView().getDurableTopicSubscribers();
0:         assertEquals(0, subscriptions.length);
1: 
1:         subscriptions = broker.getAdminView().getInactiveDurableTopicSubscribers();
0:         assertEquals(0, subscriptions.length);
1:     }
1: 
1:     private void startBroker(boolean deleteMessages) throws Exception {
0:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:         broker.setUseJmx(true);
1:         broker.setBrokerName(getName());
1: 
1:         broker.setPersistent(true);
1:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:         persistenceAdapter.setDirectory(new File("activemq-data/" + getName()));
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         if (deleteMessages) {
1:             broker.setDeleteAllMessagesOnStartup(true);
1:         }
1: 
1:         broker.start();
1: 
1:         connection = createConnection();
1:     }
1: 
1:     private void stopBroker() throws Exception {
1:         if (connection != null)
1:             connection.close();
1:         connection = null;
1: 
0:         if (broker != null)
1:             broker.stop();
1:         broker = null;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://" + getName() + "?waitForStart=5000&create=false");
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         topic = (ActiveMQTopic) createDestination();
1:         startBroker(true);
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         stopBroker();
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     protected Connection createConnection() throws Exception {
1:         Connection rc = super.createConnection();
1:         rc.setClientID(getName());
1:         rc.start();
1:         return rc;
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.util.List;
0: 
0: import javax.jms.Connection;
0: import javax.jms.Session;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.MalformedObjectNameException;
0: import javax.management.ObjectName;
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         }
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:971f61f
/////////////////////////////////////////////////////////////////////////
1:         broker.getManagementContext().setCreateConnector(false);
============================================================================