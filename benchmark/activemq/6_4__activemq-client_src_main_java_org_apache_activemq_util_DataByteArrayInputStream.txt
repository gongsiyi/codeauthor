1:330e731: /**
1:330e731:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:330e731:  * contributor license agreements.  See the NOTICE file distributed with
1:330e731:  * this work for additional information regarding copyright ownership.
1:330e731:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:330e731:  * (the "License"); you may not use this file except in compliance with
1:330e731:  * the License.  You may obtain a copy of the License at
4:330e731:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:330e731:  *
1:330e731:  * Unless required by applicable law or agreed to in writing, software
1:330e731:  * distributed under the License is distributed on an "AS IS" BASIS,
1:330e731:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:330e731:  * See the License for the specific language governing permissions and
1:330e731:  * limitations under the License.
1:330e731:  */
1:330e731: package org.apache.activemq.util;
1:f812e34: 
1:02ef944: import java.io.*;
3:330e731: 
1:330e731: /**
1:330e731:  * Optimized ByteArrayInputStream that can be used more than once
1:b0c2a40:  * 
1:330e731:  * 
1:330e731:  */
1:f812e34: public final class DataByteArrayInputStream extends InputStream implements DataInput {
1:330e731:     private byte[] buf;
1:330e731:     private int pos;
1:330e731:     private int offset;
1:330e731: 
1:330e731:     /**
1:330e731:      * Creates a <code>StoreByteArrayInputStream</code>.
1:330e731:      * 
1:330e731:      * @param buf the input buffer.
1:330e731:      */
1:f812e34:     public DataByteArrayInputStream(byte buf[]) {
1:f812e34:         this.buf = buf;
1:f812e34:         this.pos = 0;
1:330e731:         this.offset = 0;
1:fc00993:     }
1:f812e34: 
1:330e731:     /**
1:330e731:      * Creates a <code>StoreByteArrayInputStream</code>.
1:330e731:      * 
1:330e731:      * @param sequence the input buffer.
1:330e731:      */
1:f812e34:     public DataByteArrayInputStream(ByteSequence sequence) {
1:f812e34:         this.buf = sequence.getData();
1:ecf89a6:         this.offset = sequence.getOffset();
1:ecf89a6:         this.pos =  this.offset;
1:fc00993:     }
1:330e731: 
1:330e731:     /**
1:f812e34:      * Creates <code>WireByteArrayInputStream</code> with a minmalist byte
1:f812e34:      * array
1:330e731:      */
1:f812e34:     public DataByteArrayInputStream() {
1:330e731:         this(new byte[0]);
1:86cbdfd:     }
1:330e731: 
1:330e731:     /**
1:330e731:      * @return the size
1:330e731:      */
1:f812e34:     public int size() {
1:f812e34:         return pos - offset;
9:330e731:     }
1:330e731: 
1:8c218ee:     public int position() { return pos; }
1:8c218ee: 
1:330e731:     /**
1:330e731:      * @return the underlying data array
1:330e731:      */
1:f812e34:     public byte[] getRawData() {
1:330e731:         return buf;
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:f812e34:      * reset the <code>StoreByteArrayInputStream</code> to use an new byte
1:f812e34:      * array
1:330e731:      * 
1:330e731:      * @param newBuff
1:330e731:      */
1:f812e34:     public void restart(byte[] newBuff) {
1:f812e34:         buf = newBuff;
1:f812e34:         pos = 0;
1:330e731:     }
1:f812e34: 
1:330e731:     /**
1:f812e34:      * reset the <code>StoreByteArrayInputStream</code> to use an new
1:f812e34:      * ByteSequence
1:f812e34:      * 
1:f812e34:      * @param sequence
1:330e731:      */
1:f812e34:     public void restart(ByteSequence sequence) {
1:f812e34:         this.buf = sequence.getData();
1:f812e34:         this.pos = sequence.getOffset();
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:330e731:      * re-start the input stream - reusing the current buffer
1:330e731:      * 
1:330e731:      * @param size
1:330e731:      */
1:f812e34:     public void restart(int size) {
1:f812e34:         if (buf == null || buf.length < size) {
1:f812e34:             buf = new byte[size];
1:330e731:         }
1:330e731:         restart(buf);
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:f812e34:      * Reads the next byte of data from this input stream. The value byte is
1:f812e34:      * returned as an <code>int</code> in the range <code>0</code> to
1:f812e34:      * <code>255</code>. If no byte is available because the end of the
1:f812e34:      * stream has been reached, the value <code>-1</code> is returned.
1:330e731:      * <p>
1:330e731:      * This <code>read</code> method cannot block.
1:330e731:      * 
1:f812e34:      * @return the next byte of data, or <code>-1</code> if the end of the
1:f812e34:      *         stream has been reached.
1:330e731:      */
1:f812e34:     public int read() {
1:f812e34:         return (pos < buf.length) ? (buf[pos++] & 0xff) : -1;
1:330e731:     }
1:330e731: 
1:02ef944:     public int readOrIOException() throws IOException {
1:02ef944:         int rc = read();
1:02ef944:         if( rc == -1 ) {
1:02ef944:             throw new EOFException();
1:02ef944:         }
1:02ef944:         return rc;
1:02ef944:     }
1:02ef944: 
1:330e731:     /**
1:f812e34:      * Reads up to <code>len</code> bytes of data into an array of bytes from
1:f812e34:      * this input stream.
1:330e731:      * 
1:330e731:      * @param b the buffer into which the data is read.
1:330e731:      * @param off the start offset of the data.
1:330e731:      * @param len the maximum number of bytes read.
1:f812e34:      * @return the total number of bytes read into the buffer, or
1:f812e34:      *         <code>-1</code> if there is no more data because the end of the
1:f812e34:      *         stream has been reached.
1:330e731:      */
1:f812e34:     public int read(byte b[], int off, int len) {
1:f812e34:         if (b == null) {
1:330e731:             throw new NullPointerException();
1:330e731:         }
1:f812e34:         if (pos >= buf.length) {
1:330e731:             return -1;
1:330e731:         }
1:f812e34:         if (pos + len > buf.length) {
1:f812e34:             len = buf.length - pos;
1:330e731:         }
1:f812e34:         if (len <= 0) {
1:330e731:             return 0;
1:330e731:         }
1:f812e34:         System.arraycopy(buf, pos, b, off, len);
1:f812e34:         pos += len;
1:330e731:         return len;
1:330e731:     }
1:330e731: 
1:330e731:     /**
1:f812e34:      * @return the number of bytes that can be read from the input stream
1:f812e34:      *         without blocking.
1:330e731:      */
1:f812e34:     public int available() {
1:f812e34:         return buf.length - pos;
1:330e731:     }
1:330e731: 
1:f812e34:     public void readFully(byte[] b) {
1:f812e34:         read(b, 0, b.length);
1:330e731:     }
1:330e731: 
1:f812e34:     public void readFully(byte[] b, int off, int len) {
1:f812e34:         read(b, off, len);
1:330e731:     }
1:330e731: 
1:f812e34:     public int skipBytes(int n) {
1:f812e34:         if (pos + n > buf.length) {
1:f812e34:             n = buf.length - pos;
1:330e731:         }
1:f812e34:         if (n < 0) {
1:330e731:             return 0;
1:330e731:         }
1:f812e34:         pos += n;
1:330e731:         return n;
1:330e731:     }
1:330e731: 
1:02ef944:     public boolean readBoolean() throws IOException {
1:02ef944:         return readOrIOException() != 0;
1:330e731:     }
1:330e731: 
1:02ef944:     public byte readByte() throws IOException {
1:02ef944:         return (byte)readOrIOException();
1:330e731:     }
1:330e731: 
1:02ef944:     public int readUnsignedByte() throws IOException {
1:02ef944:         return readOrIOException();
1:330e731:     }
1:330e731: 
1:02ef944:     public short readShort() throws IOException {
1:02ef944:         int ch1 = readOrIOException();
1:02ef944:         int ch2 = readOrIOException();
1:f812e34:         return (short)((ch1 << 8) + (ch2 << 0));
1:330e731:     }
1:330e731: 
1:02ef944:     public int readUnsignedShort() throws IOException {
1:02ef944:         int ch1 = readOrIOException();
1:02ef944:         int ch2 = readOrIOException();
1:ecf89a6:         return (ch1 << 8) + (ch2 << 0);
1:330e731:     }
1:330e731: 
1:02ef944:     public char readChar() throws IOException {
1:02ef944:         int ch1 = readOrIOException();
1:02ef944:         int ch2 = readOrIOException();
1:f812e34:         return (char)((ch1 << 8) + (ch2 << 0));
1:330e731:     }
1:330e731: 
1:02ef944:     public int readInt() throws IOException {
1:02ef944:         int ch1 = readOrIOException();
1:02ef944:         int ch2 = readOrIOException();
1:02ef944:         int ch3 = readOrIOException();
1:02ef944:         int ch4 = readOrIOException();
1:ecf89a6:         return (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0);
1:330e731:     }
1:330e731: 
1:02ef944:     public long readLong() throws IOException {
1:3cd5529:         if (pos + 8 > buf.length ) {
1:02ef944:             throw new EOFException();
1:02ef944:         }
1:74a7a8b:         long rc = ((long)buf[pos++] << 56) + ((long)(buf[pos++] & 255) << 48) + ((long)(buf[pos++] & 255) << 40) + ((long)(buf[pos++] & 255) << 32);
1:74a7a8b:         return rc + ((long)(buf[pos++] & 255) << 24) + ((buf[pos++] & 255) << 16) + ((buf[pos++] & 255) << 8) + ((buf[pos++] & 255) << 0);
1:330e731:     }
1:330e731: 
1:f812e34:     public float readFloat() throws IOException {
1:330e731:         return Float.intBitsToFloat(readInt());
1:330e731:     }
1:330e731: 
1:f812e34:     public double readDouble() throws IOException {
1:330e731:         return Double.longBitsToDouble(readLong());
1:330e731:     }
1:330e731: 
1:f812e34:     public String readLine() {
1:f812e34:         int start = pos;
1:f812e34:         while (pos < buf.length) {
1:f812e34:             int c = read();
1:f812e34:             if (c == '\n') {
5:330e731:                 break;
1:fc00993:             }
1:f812e34:             if (c == '\r') {
1:f812e34:                 c = read();
1:f812e34:                 if (c != '\n' && c != -1) {
1:330e731:                     pos--;
1:330e731:                 }
1:330e731:                 break;
1:330e731:             }
1:330e731:         }
1:f812e34:         return new String(buf, start, pos);
1:330e731:     }
1:330e731: 
1:f812e34:     public String readUTF() throws IOException {
1:f812e34:         int length = readUnsignedShort();
1:172c290:         if (pos + length > buf.length) {
1:172c290:             throw new UTFDataFormatException("bad string");
1:fc00993:         }
1:172c290:         char chararr[] = new char[length];
1:172c290:         String result = MarshallingSupport.convertUTF8WithBuf(buf, chararr, pos, length);
1:172c290:         pos += length;
1:172c290:         return result;
1:fc00993:     }
1:330e731: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:3cd5529
/////////////////////////////////////////////////////////////////////////
1:         if (pos + 8 > buf.length ) {
commit:8c218ee
/////////////////////////////////////////////////////////////////////////
1:     public int position() { return pos; }
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (pos + 8 >= buf.length ) {
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:172c290
/////////////////////////////////////////////////////////////////////////
1:         if (pos + length > buf.length) {
1:             throw new UTFDataFormatException("bad string");
1:         char chararr[] = new char[length];
1:         String result = MarshallingSupport.convertUTF8WithBuf(buf, chararr, pos, length);
1:         pos += length;
1:         return result;
commit:02ef944
/////////////////////////////////////////////////////////////////////////
1: import java.io.*;
/////////////////////////////////////////////////////////////////////////
1:     public int readOrIOException() throws IOException {
1:         int rc = read();
1:         if( rc == -1 ) {
1:             throw new EOFException();
1:         }
1:         return rc;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean readBoolean() throws IOException {
1:         return readOrIOException() != 0;
1:     public byte readByte() throws IOException {
1:         return (byte)readOrIOException();
1:     public int readUnsignedByte() throws IOException {
1:         return readOrIOException();
1:     public short readShort() throws IOException {
1:         int ch1 = readOrIOException();
1:         int ch2 = readOrIOException();
1:     public int readUnsignedShort() throws IOException {
1:         int ch1 = readOrIOException();
1:         int ch2 = readOrIOException();
1:     public char readChar() throws IOException {
1:         int ch1 = readOrIOException();
1:         int ch2 = readOrIOException();
1:     public int readInt() throws IOException {
1:         int ch1 = readOrIOException();
1:         int ch2 = readOrIOException();
1:         int ch3 = readOrIOException();
1:         int ch4 = readOrIOException();
1:     public long readLong() throws IOException {
0:         if (pos >= buf.length ) {
1:             throw new EOFException();
1:         }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:         int c;
0:         int c2;
0:         int c3;
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         this.offset = sequence.getOffset();
1:         this.pos =  this.offset;
/////////////////////////////////////////////////////////////////////////
1:         return (ch1 << 8) + (ch2 << 0);
/////////////////////////////////////////////////////////////////////////
1:         return (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:             if (c > 127) {
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 if (pos > length) {
1:                 }
0:                 if ((c2 & 0xC0) != 0x80) {
1:                 }
0:                 if (pos > length) {
1:                 }
0:                 if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
1:                 }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         long rc = ((long)buf[pos++] << 56) + ((long)(buf[pos++] & 255) << 48) + ((long)(buf[pos++] & 255) << 40) + ((long)(buf[pos++] & 255) << 32);
1:         return rc + ((long)(buf[pos++] & 255) << 24) + ((buf[pos++] & 255) << 16) + ((buf[pos++] & 255) << 8) + ((buf[pos++] & 255) << 0);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: public final class DataByteArrayInputStream extends InputStream implements DataInput {
/////////////////////////////////////////////////////////////////////////
1:     public DataByteArrayInputStream(byte buf[]) {
1:         this.buf = buf;
1:         this.pos = 0;
1: 
1:     public DataByteArrayInputStream(ByteSequence sequence) {
1:         this.buf = sequence.getData();
0:         this.offset = this.pos = sequence.getOffset();
1:      * Creates <code>WireByteArrayInputStream</code> with a minmalist byte
1:      * array
1:     public DataByteArrayInputStream() {
1:     public int size() {
1:         return pos - offset;
1:     public byte[] getRawData() {
1:      * reset the <code>StoreByteArrayInputStream</code> to use an new byte
1:      * array
1:     public void restart(byte[] newBuff) {
1:         buf = newBuff;
1:         pos = 0;
1: 
1:      * reset the <code>StoreByteArrayInputStream</code> to use an new
1:      * ByteSequence
1:      * 
1:      * @param sequence
1:     public void restart(ByteSequence sequence) {
1:         this.buf = sequence.getData();
1:         this.pos = sequence.getOffset();
/////////////////////////////////////////////////////////////////////////
1:     public void restart(int size) {
1:         if (buf == null || buf.length < size) {
1:             buf = new byte[size];
1:      * Reads the next byte of data from this input stream. The value byte is
1:      * returned as an <code>int</code> in the range <code>0</code> to
1:      * <code>255</code>. If no byte is available because the end of the
1:      * stream has been reached, the value <code>-1</code> is returned.
1:      * @return the next byte of data, or <code>-1</code> if the end of the
1:      *         stream has been reached.
1:     public int read() {
1:         return (pos < buf.length) ? (buf[pos++] & 0xff) : -1;
1:      * Reads up to <code>len</code> bytes of data into an array of bytes from
1:      * this input stream.
1:      * @return the total number of bytes read into the buffer, or
1:      *         <code>-1</code> if there is no more data because the end of the
1:      *         stream has been reached.
1:     public int read(byte b[], int off, int len) {
1:         if (b == null) {
1:         if (pos >= buf.length) {
1:         if (pos + len > buf.length) {
1:             len = buf.length - pos;
1:         if (len <= 0) {
1:         System.arraycopy(buf, pos, b, off, len);
1:         pos += len;
1:      * @return the number of bytes that can be read from the input stream
1:      *         without blocking.
1:     public int available() {
1:         return buf.length - pos;
1:     public void readFully(byte[] b) {
1:         read(b, 0, b.length);
1:     public void readFully(byte[] b, int off, int len) {
1:         read(b, off, len);
1:     public int skipBytes(int n) {
1:         if (pos + n > buf.length) {
1:             n = buf.length - pos;
1:         if (n < 0) {
1:         pos += n;
0:     public boolean readBoolean() {
0:         return read() != 0;
0:     public byte readByte() {
0:         return (byte)read();
0:     public int readUnsignedByte() {
0:     public short readShort() {
0:         int ch1 = read();
0:         int ch2 = read();
1:         return (short)((ch1 << 8) + (ch2 << 0));
0:     public int readUnsignedShort() {
0:         int ch1 = read();
0:         int ch2 = read();
0:         return ((ch1 << 8) + (ch2 << 0));
0:     public char readChar() {
0:         int ch1 = read();
0:         int ch2 = read();
1:         return (char)((ch1 << 8) + (ch2 << 0));
0:     public int readInt() {
0:         int ch1 = read();
0:         int ch2 = read();
0:         int ch3 = read();
0:         int ch4 = read();
0:         return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));
0:     public long readLong() {
0:         return (((long)buf[pos++] << 56) + ((long)(buf[pos++] & 255) << 48) + ((long)(buf[pos++] & 255) << 40) + ((long)(buf[pos++] & 255) << 32)
0:                 + ((long)(buf[pos++] & 255) << 24) + ((buf[pos++] & 255) << 16) + ((buf[pos++] & 255) << 8) + ((buf[pos++] & 255) << 0));
1:     public float readFloat() throws IOException {
1:     public double readDouble() throws IOException {
1:     public String readLine() {
1:         int start = pos;
1:         while (pos < buf.length) {
1:             int c = read();
1:             if (c == '\n') {
1:             if (c == '\r') {
1:                 c = read();
1:                 if (c != '\n' && c != -1) {
1:         return new String(buf, start, pos);
1:     public String readUTF() throws IOException {
1:         int length = readUnsignedShort();
0:         char[] characters = new char[length];
0:         int c, c2, c3;
0:         int count = 0;
0:         int total = pos + length;
0:         while (pos < total) {
0:             c = (int)buf[pos] & 0xff;
0:             if (c > 127)
0:             characters[count++] = (char)c;
0:         while (pos < total) {
0:             c = (int)buf[pos] & 0xff;
0:             switch (c >> 4) {
/////////////////////////////////////////////////////////////////////////
0:                 characters[count++] = (char)c;
0:                 pos += 2;
0:                 if (pos > length)
0:                 c2 = (int)buf[pos - 1];
0:                 if ((c2 & 0xC0) != 0x80)
0:                 characters[count++] = (char)(((c & 0x1F) << 6) | (c2 & 0x3F));
0:                 pos += 3;
0:                 if (pos > length)
0:                 c2 = (int)buf[pos - 2];
0:                 c3 = (int)buf[pos - 1];
0:                 if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80))
0:                 characters[count++] = (char)(((c & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F) << 0));
0:         return new String(characters, 0, count);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:c2f7128
/////////////////////////////////////////////////////////////////////////
0:                 if (pos > total) {
/////////////////////////////////////////////////////////////////////////
0:                 if (pos > total) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:330e731
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
0: import java.io.DataInput;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.UTFDataFormatException;
0: import org.apache.activemq.util.ByteSequence;
1: /**
1:  * Optimized ByteArrayInputStream that can be used more than once
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public final class DataByteArrayInputStream extends InputStream implements DataInput{
1:     private byte[] buf;
1:     private int pos;
1:     private int offset;
1: 
1:     /**
1:      * Creates a <code>StoreByteArrayInputStream</code>.
1:      * 
1:      * @param buf the input buffer.
1:      */
0:     public DataByteArrayInputStream(byte buf[]){
0:         this.buf=buf;
0:         this.pos=0;
1:         this.offset = 0;
1:     }
1:     
1:     /**
1:      * Creates a <code>StoreByteArrayInputStream</code>.
1:      * 
1:      * @param sequence the input buffer.
1:      */
0:     public DataByteArrayInputStream(ByteSequence sequence){
0:         this.buf=sequence.getData();
0:         this.offset=this.pos=sequence.getOffset();
1:     }
1: 
1:     /**
0:      * Creates <code>WireByteArrayInputStream</code> with a minmalist byte array
1:      */
0:     public DataByteArrayInputStream(){
1:         this(new byte[0]);
1:     }
1: 
1:     /**
1:      * 
1:      * @return the size
1:      */
0:     public int size(){
0:         return pos-offset;
1:     }
1: 
1:     /**
1:      * @return the underlying data array
1:      */
0:     public byte[] getRawData(){
1:         return buf;
1:     }
1: 
1:     /**
0:      * reset the <code>StoreByteArrayInputStream</code> to use an new byte array
1:      * 
1:      * @param newBuff
1:      */
0:     public void restart(byte[] newBuff){
0:         buf=newBuff;
0:         pos=0;
1:     }
1:     
1:     /**
0:      * reset the <code>StoreByteArrayInputStream</code> to use an new ByteSequence
0:      * @param sequence 
1:      *  
1:      */
0:     public void restart(ByteSequence sequence){
0:         this.buf=sequence.getData();
0:         this.pos=sequence.getOffset();
1:     }
1: 
1:     /**
1:      * re-start the input stream - reusing the current buffer
1:      * 
1:      * @param size
1:      */
0:     public void restart(int size){
0:         if(buf==null||buf.length<size){
0:             buf=new byte[size];
1:         }
1:         restart(buf);
1:     }
1: 
1:     /**
0:      * Reads the next byte of data from this input stream. The value byte is returned as an <code>int</code> in the
0:      * range <code>0</code> to <code>255</code>. If no byte is available because the end of the stream has been
0:      * reached, the value <code>-1</code> is returned.
1:      * <p>
1:      * This <code>read</code> method cannot block.
1:      * 
0:      * @return the next byte of data, or <code>-1</code> if the end of the stream has been reached.
1:      */
0:     public int read(){
0:         return (pos<buf.length)?(buf[pos++]&0xff):-1;
1:     }
1: 
1:     /**
0:      * Reads up to <code>len</code> bytes of data into an array of bytes from this input stream.
1:      * 
1:      * @param b the buffer into which the data is read.
1:      * @param off the start offset of the data.
1:      * @param len the maximum number of bytes read.
0:      * @return the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the
0:      *         end of the stream has been reached.
1:      */
0:     public int read(byte b[],int off,int len){
0:         if(b==null){
1:             throw new NullPointerException();
1:         }
0:         if(pos>=buf.length){
1:             return -1;
1:         }
0:         if(pos+len>buf.length){
0:             len=buf.length-pos;
1:         }
0:         if(len<=0){
1:             return 0;
1:         }
0:         System.arraycopy(buf,pos,b,off,len);
0:         pos+=len;
1:         return len;
1:     }
1: 
1:     /**
0:      * @return the number of bytes that can be read from the input stream without blocking.
1:      */
0:     public int available(){
0:         return buf.length-pos;
1:     }
1: 
0:     public void readFully(byte[] b){
0:         read(b,0,b.length);
1:     }
1: 
0:     public void readFully(byte[] b,int off,int len){
0:         read(b,off,len);
1:     }
1: 
0:     public int skipBytes(int n){
0:         if(pos+n>buf.length){
0:             n=buf.length-pos;
1:         }
0:         if(n<0){
1:             return 0;
1:         }
0:         pos+=n;
1:         return n;
1:     }
1: 
0:     public boolean readBoolean(){
0:         return read()!=0;
1:     }
1: 
0:     public byte readByte(){
0:         return (byte) read();
1:     }
1: 
0:     public int readUnsignedByte(){
0:         return read();
1:     }
1: 
0:     public short readShort(){
0:         int ch1=read();
0:         int ch2=read();
0:         return (short) ((ch1<<8)+(ch2<<0));
1:     }
1: 
0:     public int readUnsignedShort(){
0:         int ch1=read();
0:         int ch2=read();
0:         return ((ch1<<8)+(ch2<<0));
1:     }
1: 
0:     public char readChar(){
0:         int ch1=read();
0:         int ch2=read();
0:         return (char) ((ch1<<8)+(ch2<<0));
1:     }
1: 
0:     public int readInt(){
0:         int ch1=read();
0:         int ch2=read();
0:         int ch3=read();
0:         int ch4=read();
0:         return ((ch1<<24)+(ch2<<16)+(ch3<<8)+(ch4<<0));
1:     }
1: 
0:     public long readLong(){
0:         return (((long) buf[pos++]<<56)+((long) (buf[pos++]&255)<<48)+((long) (buf[pos++]&255)<<40)
0:                         +((long) (buf[pos++]&255)<<32)+((long) (buf[pos++]&255)<<24)+((buf[pos++]&255)<<16)
0:                         +((buf[pos++]&255)<<8)+((buf[pos++]&255)<<0));
1:     }
1: 
0:     public float readFloat() throws IOException{
1:         return Float.intBitsToFloat(readInt());
1:     }
1: 
0:     public double readDouble() throws IOException{
1:         return Double.longBitsToDouble(readLong());
1:     }
1: 
0:     public String readLine(){
0:         int start=pos;
0:         while(pos<buf.length){
0:             int c=read();
0:             if(c=='\n'){
1:                 break;
1:             }
0:             if(c=='\r'){
0:                 c=read();
0:                 if(c!='\n'&&c!=-1){
1:                     pos--;
1:                 }
1:                 break;
1:             }
1:         }
0:         return new String(buf,start,pos);
1:     }
1: 
0:     public String readUTF() throws IOException{
0:         int length=readUnsignedShort();
0:         char[] characters=new char[length];
0:         int c,c2,c3;
0:         int count=0;
0:         int total=pos+length;
0:         while(pos<total){
0:             c=(int) buf[pos]&0xff;
0:             if(c>127)
1:                 break;
0:             pos++;
0:             characters[count++]=(char) c;
1:         }
0:         while(pos<total){
0:             c=(int) buf[pos]&0xff;
0:             switch(c>>4){
0:             case 0:
0:             case 1:
0:             case 2:
0:             case 3:
0:             case 4:
0:             case 5:
0:             case 6:
0:             case 7:
0:                 pos++;
0:                 characters[count++]=(char) c;
1:                 break;
0:             case 12:
0:             case 13:
0:                 pos+=2;
0:                 if(pos>length)
0:                     throw new UTFDataFormatException("bad string");
0:                 c2=(int) buf[pos-1];
0:                 if((c2&0xC0)!=0x80)
0:                     throw new UTFDataFormatException("bad string");
0:                 characters[count++]=(char) (((c&0x1F)<<6)|(c2&0x3F));
1:                 break;
0:             case 14:
0:                 pos+=3;
0:                 if(pos>length)
0:                     throw new UTFDataFormatException("bad string");
0:                 c2=(int) buf[pos-2];
0:                 c3=(int) buf[pos-1];
0:                 if(((c2&0xC0)!=0x80)||((c3&0xC0)!=0x80))
0:                     throw new UTFDataFormatException("bad string");
0:                 characters[count++]=(char) (((c&0x0F)<<12)|((c2&0x3F)<<6)|((c3&0x3F)<<0));
1:                 break;
0:             default:
0:                 throw new UTFDataFormatException("bad string");
1:             }
1:         }
0:         return new String(characters,0,count);
1:     }
1: }
============================================================================