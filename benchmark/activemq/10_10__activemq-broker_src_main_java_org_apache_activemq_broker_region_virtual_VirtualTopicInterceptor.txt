1:da67a38: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:da67a38:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:da67a38:  * Unless required by applicable law or agreed to in writing, software
1:da67a38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:da67a38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da67a38:  * See the License for the specific language governing permissions and
1:da67a38:  * limitations under the License.
1:da67a38:  */
1:da67a38: package org.apache.activemq.broker.region.virtual;
1:da67a38: 
1:340728f: import java.io.IOException;
1:340728f: import java.util.Set;
1:340728f: import java.util.concurrent.CountDownLatch;
1:340728f: import java.util.concurrent.atomic.AtomicReference;
1:340728f: import org.apache.activemq.broker.Broker;
1:340728f: import org.apache.activemq.broker.BrokerService;
1:340728f: import org.apache.activemq.broker.ConnectionContext;
1:4569d7d: import org.apache.activemq.broker.ProducerBrokerExchange;
1:da67a38: import org.apache.activemq.broker.region.Destination;
1:da67a38: import org.apache.activemq.broker.region.DestinationFilter;
1:0054941: import org.apache.activemq.broker.region.Topic;
1:da67a38: import org.apache.activemq.command.ActiveMQDestination;
1:da67a38: import org.apache.activemq.command.ActiveMQQueue;
1:340728f: import org.apache.activemq.command.ConnectionId;
1:340728f: import org.apache.activemq.command.LocalTransactionId;
1:da67a38: import org.apache.activemq.command.Message;
1:1b9f5f6: import org.apache.activemq.util.LRUCache;
1:da67a38: 
1:6da08b2: import javax.jms.ResourceAllocationException;
1:6da08b2: 
1:da67a38: /**
1:ba37cbb:  * A Destination which implements <a href="http://activemq.org/site/virtual-destinations.html">Virtual Topic</a>
1:da67a38:  */
1:da67a38: public class VirtualTopicInterceptor extends DestinationFilter {
1:da67a38: 
1:0054941:     private final String prefix;
1:0054941:     private final String postfix;
1:0054941:     private final boolean local;
1:340728f:     private final boolean concurrentSend;
1:ffdaeb2:     private final boolean transactedSend;
1:6da08b2:     private final boolean dropMessageOnResourceLimit;
1:573b366:     private final boolean setOriginalDestination;
1:ffdaeb2: 
1:ba37cbb:     private final LRUCache<ActiveMQDestination, ActiveMQQueue> cache = new LRUCache<ActiveMQDestination, ActiveMQQueue>();
1:da67a38: 
1:340728f:     public VirtualTopicInterceptor(Destination next, VirtualTopic virtualTopic) {
1:da67a38:         super(next);
1:340728f:         this.prefix = virtualTopic.getPrefix();
1:340728f:         this.postfix = virtualTopic.getPostfix();
1:340728f:         this.local = virtualTopic.isLocal();
1:340728f:         this.concurrentSend = virtualTopic.isConcurrentSend();
1:ffdaeb2:         this.transactedSend = virtualTopic.isTransactedSend();
1:6da08b2:         this.dropMessageOnResourceLimit = virtualTopic.isDropOnResourceLimit();
1:573b366:         this.setOriginalDestination = virtualTopic.isSetOriginalDestination();
1:0054941:     }
1:da67a38: 
1:0054941:     public Topic getTopic() {
1:0054941:         return (Topic) this.next;
1:dca6e45:     }
1:0054941: 
1:0054941:     @Override
1:4569d7d:     public void send(ProducerBrokerExchange context, Message message) throws Exception {
1:3c3b5bb:         if (!message.isAdvisory() && !(local && message.getBrokerPath() != null)) {
1:ea82d5d:             ActiveMQDestination queueConsumers = getQueueConsumersWildcard(message.getDestination());
1:ea82d5d:             send(context, message, queueConsumers);
1:ea82d5d:         }
1:42b768a:         super.send(context, message);
2:da67a38:     }
1:da67a38: 
1:340728f:     @Override
1:340728f:     protected void send(final ProducerBrokerExchange context, final Message message, ActiveMQDestination destination) throws Exception {
1:340728f:         final Broker broker = context.getConnectionContext().getBroker();
1:340728f:         final Set<Destination> destinations = broker.getDestinations(destination);
1:340728f:         final int numDestinations = destinations.size();
1:340728f: 
1:340728f:         final LocalTransactionId localBrokerTransactionToCoalesceJournalSync =
1:340728f:                 beginLocalTransaction(numDestinations, context.getConnectionContext(), message);
1:340728f:         try {
1:340728f:             if (concurrentSend && numDestinations > 1) {
1:340728f: 
1:340728f:                 final CountDownLatch concurrent = new CountDownLatch(destinations.size());
1:340728f:                 final AtomicReference<Exception> exceptionAtomicReference = new AtomicReference<Exception>();
1:340728f:                 final BrokerService brokerService = broker.getBrokerService();
1:340728f: 
1:340728f:                 for (final Destination dest : destinations) {
1:340728f:                     if (shouldDispatch(broker, message, dest)) {
1:340728f:                         brokerService.getTaskRunnerFactory().execute(new Runnable() {
1:340728f:                             @Override
1:340728f:                             public void run() {
1:340728f:                                 try {
1:340728f:                                     if (exceptionAtomicReference.get() == null) {
1:4e63ee7:                                         dest.send(context, copy(message, dest.getActiveMQDestination()));
1:340728f:                                     }
1:6da08b2:                                 } catch (ResourceAllocationException e) {
1:6da08b2:                                     if (!dropMessageOnResourceLimit) {
1:6da08b2:                                         exceptionAtomicReference.set(e);
1:6da08b2:                                     }
1:340728f:                                 } catch (Exception e) {
1:340728f:                                     exceptionAtomicReference.set(e);
1:340728f:                                 } finally {
1:340728f:                                     concurrent.countDown();
1:340728f:                                 }
1:340728f:                             }
1:340728f:                         });
1:340728f:                     } else {
1:340728f:                         concurrent.countDown();
1:340728f:                     }
1:340728f:                 }
1:340728f:                 concurrent.await();
1:340728f:                 if (exceptionAtomicReference.get() != null) {
1:340728f:                     throw exceptionAtomicReference.get();
1:340728f:                 }
1:340728f: 
1:340728f:             } else {
1:340728f:                 for (final Destination dest : destinations) {
1:340728f:                     if (shouldDispatch(broker, message, dest)) {
1:6da08b2:                         try {
1:6da08b2:                             dest.send(context, copy(message, dest.getActiveMQDestination()));
1:6da08b2:                         } catch (ResourceAllocationException e) {
1:6da08b2:                             if (!dropMessageOnResourceLimit) {
1:6da08b2:                                 throw e;
1:6da08b2:                             }
1:6da08b2:                         }
1:340728f:                     }
1:340728f:                 }
1:340728f:             }
1:340728f:         } finally {
1:340728f:             commit(localBrokerTransactionToCoalesceJournalSync, context.getConnectionContext(), message);
1:340728f:         }
1:340728f:     }
1:340728f: 
1:4e63ee7:     private Message copy(Message original, ActiveMQDestination target) {
1:4e63ee7:         Message msg = original.copy();
1:573b366:         if (setOriginalDestination) {
1:573b366:             msg.setDestination(target);
1:573b366:             msg.setOriginalDestination(original.getDestination());
1:573b366:         }
1:4e63ee7:         return msg;
1:4e63ee7:     }
1:4e63ee7: 
1:340728f:     private LocalTransactionId beginLocalTransaction(int numDestinations, ConnectionContext connectionContext, Message message) throws Exception {
1:340728f:         LocalTransactionId result = null;
1:ffdaeb2:         if (transactedSend && numDestinations > 1 && message.isPersistent() && message.getTransactionId() == null) {
1:340728f:             result = new LocalTransactionId(new ConnectionId(message.getMessageId().getProducerId().toString()), message.getMessageId().getProducerSequenceId());
1:340728f:             connectionContext.getBroker().beginTransaction(connectionContext, result);
1:340728f:             connectionContext.setTransaction(connectionContext.getTransactions().get(result));
1:340728f:             message.setTransactionId(result);
1:340728f:         }
1:340728f:         return result;
1:340728f:     }
1:340728f: 
1:340728f:     private void commit(LocalTransactionId tx, ConnectionContext connectionContext, Message message) throws Exception {
1:340728f:         if (tx != null) {
1:340728f:             connectionContext.getBroker().commitTransaction(connectionContext, tx, true);
1:340728f:             connectionContext.getTransactions().remove(tx);
1:340728f:             connectionContext.setTransaction(null);
1:340728f:             message.setTransactionId(null);
1:340728f:         }
1:340728f:     }
1:340728f: 
1:340728f:     protected boolean shouldDispatch(Broker broker, Message message, Destination dest) throws IOException {
1:bc9edf0:     	//if can't find .* in the prefix, default back to old logic and return true
1:6bf5987:     	return prefix.contains(".*") && !prefix.startsWith("*") ? dest.getName().startsWith(prefix.substring(0, prefix.indexOf(".*"))) : true;
1:340728f:     }
1:340728f: 
1:da67a38:     protected ActiveMQDestination getQueueConsumersWildcard(ActiveMQDestination original) {
1:1b9f5f6:         ActiveMQQueue queue;
1:ba37cbb:         synchronized (cache) {
1:1b9f5f6:             queue = cache.get(original);
1:ba37cbb:             if (queue == null) {
1:1b9f5f6:                 queue = new ActiveMQQueue(prefix + original.getPhysicalName() + postfix);
1:ba37cbb:                 cache.put(original, queue);
1:1b9f5f6:             }
1:1b9f5f6:         }
1:1b9f5f6:         return queue;
1:da67a38:     }
1:da67a38: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:573b366
/////////////////////////////////////////////////////////////////////////
1:     private final boolean setOriginalDestination;
/////////////////////////////////////////////////////////////////////////
1:         this.setOriginalDestination = virtualTopic.isSetOriginalDestination();
/////////////////////////////////////////////////////////////////////////
1:         if (setOriginalDestination) {
1:             msg.setDestination(target);
1:             msg.setOriginalDestination(original.getDestination());
1:         }
commit:6da08b2
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ResourceAllocationException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final boolean dropMessageOnResourceLimit;
/////////////////////////////////////////////////////////////////////////
1:         this.dropMessageOnResourceLimit = virtualTopic.isDropOnResourceLimit();
/////////////////////////////////////////////////////////////////////////
1:                                 } catch (ResourceAllocationException e) {
1:                                     if (!dropMessageOnResourceLimit) {
1:                                         exceptionAtomicReference.set(e);
1:                                     }
/////////////////////////////////////////////////////////////////////////
1:                         try {
1:                             dest.send(context, copy(message, dest.getActiveMQDestination()));
1:                         } catch (ResourceAllocationException e) {
1:                             if (!dropMessageOnResourceLimit) {
1:                                 throw e;
1:                             }
1:                         }
commit:ffdaeb2
/////////////////////////////////////////////////////////////////////////
1:     private final boolean transactedSend;
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.transactedSend = virtualTopic.isTransactedSend();
/////////////////////////////////////////////////////////////////////////
1:         if (transactedSend && numDestinations > 1 && message.isPersistent() && message.getTransactionId() == null) {
commit:340728f
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.Set;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicReference;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.LocalTransactionId;
/////////////////////////////////////////////////////////////////////////
1:     private final boolean concurrentSend;
1:     public VirtualTopicInterceptor(Destination next, VirtualTopic virtualTopic) {
1:         this.prefix = virtualTopic.getPrefix();
1:         this.postfix = virtualTopic.getPostfix();
1:         this.local = virtualTopic.isLocal();
1:         this.concurrentSend = virtualTopic.isConcurrentSend();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void send(final ProducerBrokerExchange context, final Message message, ActiveMQDestination destination) throws Exception {
1:         final Broker broker = context.getConnectionContext().getBroker();
1:         final Set<Destination> destinations = broker.getDestinations(destination);
1:         final int numDestinations = destinations.size();
1: 
1:         final LocalTransactionId localBrokerTransactionToCoalesceJournalSync =
1:                 beginLocalTransaction(numDestinations, context.getConnectionContext(), message);
1:         try {
1:             if (concurrentSend && numDestinations > 1) {
1: 
1:                 final CountDownLatch concurrent = new CountDownLatch(destinations.size());
1:                 final AtomicReference<Exception> exceptionAtomicReference = new AtomicReference<Exception>();
1:                 final BrokerService brokerService = broker.getBrokerService();
1: 
1:                 for (final Destination dest : destinations) {
1:                     if (shouldDispatch(broker, message, dest)) {
1:                         brokerService.getTaskRunnerFactory().execute(new Runnable() {
1:                             @Override
1:                             public void run() {
1:                                 try {
1:                                     if (exceptionAtomicReference.get() == null) {
0:                                         dest.send(context, message.copy());
1:                                     }
1:                                 } catch (Exception e) {
1:                                     exceptionAtomicReference.set(e);
1:                                 } finally {
1:                                     concurrent.countDown();
1:                                 }
1:                             }
1:                         });
1:                     } else {
1:                         concurrent.countDown();
1:                     }
1:                 }
1:                 concurrent.await();
1:                 if (exceptionAtomicReference.get() != null) {
1:                     throw exceptionAtomicReference.get();
1:                 }
1: 
1:             } else {
1:                 for (final Destination dest : destinations) {
1:                     if (shouldDispatch(broker, message, dest)) {
0:                         dest.send(context, message.copy());
1:                     }
1:                 }
1:             }
1:         } finally {
1:             commit(localBrokerTransactionToCoalesceJournalSync, context.getConnectionContext(), message);
1:         }
1:     }
1: 
1:     private LocalTransactionId beginLocalTransaction(int numDestinations, ConnectionContext connectionContext, Message message) throws Exception {
1:         LocalTransactionId result = null;
0:         if (numDestinations > 1 && message.isPersistent() && message.getTransactionId() == null) {
1:             result = new LocalTransactionId(new ConnectionId(message.getMessageId().getProducerId().toString()), message.getMessageId().getProducerSequenceId());
1:             connectionContext.getBroker().beginTransaction(connectionContext, result);
1:             connectionContext.setTransaction(connectionContext.getTransactions().get(result));
1:             message.setTransactionId(result);
1:         }
1:         return result;
1:     }
1: 
1:     private void commit(LocalTransactionId tx, ConnectionContext connectionContext, Message message) throws Exception {
1:         if (tx != null) {
1:             connectionContext.getBroker().commitTransaction(connectionContext, tx, true);
1:             connectionContext.getTransactions().remove(tx);
1:             connectionContext.setTransaction(null);
1:             message.setTransactionId(null);
1:         }
1:     }
1: 
1:     protected boolean shouldDispatch(Broker broker, Message message, Destination dest) throws IOException {
0:         return true;
1:     }
1: 
author:Jonathan Malek
-------------------------------------------------------------------------------
commit:6bf5987
/////////////////////////////////////////////////////////////////////////
1:     	return prefix.contains(".*") && !prefix.startsWith("*") ? dest.getName().startsWith(prefix.substring(0, prefix.indexOf(".*"))) : true;
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4e63ee7
/////////////////////////////////////////////////////////////////////////
1:                                         dest.send(context, copy(message, dest.getActiveMQDestination()));
/////////////////////////////////////////////////////////////////////////
0:                         dest.send(context, copy(message, dest.getActiveMQDestination()));
/////////////////////////////////////////////////////////////////////////
1:     private Message copy(Message original, ActiveMQDestination target) {
1:         Message msg = original.copy();
0:         msg.setDestination(target);
0:         msg.setOriginalDestination(original.getDestination());
1:         return msg;
1:     }
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:bc9edf0
/////////////////////////////////////////////////////////////////////////
1:     	//if can't find .* in the prefix, default back to old logic and return true
0:     	return prefix.contains(".*") ? dest.getName().startsWith(prefix.substring(0, prefix.indexOf(".*"))) : true;
author:Chad Zobrisky
-------------------------------------------------------------------------------
commit:dca6e45
/////////////////////////////////////////////////////////////////////////
0:     	//can't find .* in the prefix, so default back to old logic and return true
0:     	if(prefix.indexOf(".*")>0){
0:     		return dest.getName().startsWith(prefix.substring(0,prefix.indexOf(".*")));
1:     	}
0:     	else return true;    	
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ba37cbb
/////////////////////////////////////////////////////////////////////////
1:  * A Destination which implements <a href="http://activemq.org/site/virtual-destinations.html">Virtual Topic</a>
1:     private final LRUCache<ActiveMQDestination, ActiveMQQueue> cache = new LRUCache<ActiveMQDestination, ActiveMQQueue>();
/////////////////////////////////////////////////////////////////////////
1:         synchronized (cache) {
1:             if (queue == null) {
1:                 cache.put(original, queue);
commit:0054941
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Topic;
/////////////////////////////////////////////////////////////////////////
1:     private final String prefix;
1:     private final String postfix;
1:     private final boolean local;
0:     private final LRUCache<ActiveMQDestination,ActiveMQQueue> cache = new LRUCache<ActiveMQDestination,ActiveMQQueue>();
/////////////////////////////////////////////////////////////////////////
1:     public Topic getTopic() {
1:         return (Topic) this.next;
1:     }
1: 
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:4569d7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
1:     public void send(ProducerBrokerExchange context, Message message) throws Exception {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Robert Davies
-------------------------------------------------------------------------------
commit:1b9f5f6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.LRUCache;
/////////////////////////////////////////////////////////////////////////
0:     private LRUCache<ActiveMQDestination,ActiveMQQueue> cache = new LRUCache<ActiveMQDestination,ActiveMQQueue>();
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQQueue queue;
0:         synchronized(cache){
1:             queue = cache.get(original);
0:             if (queue==null){
1:                 queue = new ActiveMQQueue(prefix + original.getPhysicalName() + postfix);
0:                 cache.put(original,queue);
1:             }
1:         }
1:         return queue;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3c3b5bb
/////////////////////////////////////////////////////////////////////////
0:     private boolean local;
0:     public VirtualTopicInterceptor(Destination next, String prefix, String postfix, boolean local) {
0:         this.local = local;
1:         if (!message.isAdvisory() && !(local && message.getBrokerPath() != null)) {
commit:ea82d5d
/////////////////////////////////////////////////////////////////////////
0:         if (!message.isAdvisory()) {
1:             ActiveMQDestination queueConsumers = getQueueConsumersWildcard(message.getDestination());
1:             send(context, message, queueConsumers);
1:         }
author:James Strachan
-------------------------------------------------------------------------------
commit:42b768a
/////////////////////////////////////////////////////////////////////////
1:         super.send(context, message);
commit:da67a38
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.virtual;
1: 
0: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.Message;
1: 
1: /**
0:  * A Destination which implements <a
0:  * href="http://activemq.org/site/virtual-destinations.html">Virtual Topic</a>
1:  * 
0:  * @version $Revision$
1:  */
1: public class VirtualTopicInterceptor extends DestinationFilter {
1: 
0:     private String prefix;
0:     private String postfix;
1: 
0:     public VirtualTopicInterceptor(Destination next, String prefix, String postfix) {
1:         super(next);
0:         this.prefix = prefix;
0:         this.postfix = postfix;
1:     }
1: 
0:     public void send(ConnectionContext context, Message message) throws Exception {
0:         ActiveMQDestination queueConsumers = getQueueConsumersWildcard(message.getDestination());
0:         send(context, message, queueConsumers);
1:     }
1: 
1:     protected ActiveMQDestination getQueueConsumersWildcard(ActiveMQDestination original) {
0:         return new ActiveMQQueue(prefix + original.getPhysicalName() + postfix);
1:     }
1: }
============================================================================