1:511b60c: /**
1:511b60c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:511b60c:  * contributor license agreements.  See the NOTICE file distributed with
1:511b60c:  * this work for additional information regarding copyright ownership.
1:511b60c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:511b60c:  * (the "License"); you may not use this file except in compliance with
1:511b60c:  * the License.  You may obtain a copy of the License at
1:511b60c:  *
1:511b60c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:511b60c:  *
1:511b60c:  * Unless required by applicable law or agreed to in writing, software
1:511b60c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:511b60c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:511b60c:  * See the License for the specific language governing permissions and
1:511b60c:  * limitations under the License.
1:511b60c:  */
1:511b60c: package org.apache.activemq.bugs;
1:511b60c: 
1:511b60c: import java.io.IOException;
1:511b60c: import java.net.URI;
1:511b60c: import java.util.ArrayList;
1:511b60c: import java.util.Arrays;
1:511b60c: import java.util.Collection;
1:511b60c: import java.util.HashMap;
1:511b60c: import java.util.Iterator;
1:511b60c: import java.util.LinkedList;
1:511b60c: import java.util.List;
1:511b60c: import java.util.Vector;
1:511b60c: import java.util.concurrent.ExecutorService;
1:511b60c: import java.util.concurrent.Executors;
1:511b60c: import java.util.concurrent.TimeUnit;
1:511b60c: import java.util.concurrent.atomic.AtomicInteger;
1:511b60c: import javax.jms.Message;
1:511b60c: import javax.jms.MessageListener;
1:511b60c: import javax.jms.MessageProducer;
1:511b60c: import javax.jms.QueueConnection;
1:511b60c: import javax.jms.QueueReceiver;
1:511b60c: import javax.jms.QueueSession;
1:511b60c: import javax.jms.Session;
1:511b60c: import org.apache.activemq.ActiveMQConnection;
1:511b60c: import org.apache.activemq.ActiveMQConnectionFactory;
1:511b60c: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:511b60c: import org.apache.activemq.broker.BrokerService;
1:511b60c: import org.apache.activemq.broker.region.RegionBroker;
1:511b60c: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:511b60c: import org.apache.activemq.broker.region.policy.PolicyMap;
1:511b60c: import org.apache.activemq.command.ActiveMQDestination;
1:511b60c: import org.apache.activemq.command.ActiveMQMessage;
1:511b60c: import org.apache.activemq.command.ActiveMQQueue;
1:511b60c: import org.apache.activemq.command.BrokerInfo;
1:511b60c: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:511b60c: import org.apache.activemq.network.NetworkConnector;
1:511b60c: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:511b60c: import org.apache.activemq.util.TimeUtils;
1:511b60c: import org.apache.activemq.util.Wait;
1:511b60c: import org.slf4j.Logger;
1:511b60c: import org.slf4j.LoggerFactory;
1:511b60c: 
1:511b60c: public class AMQ4485NetworkOfXBrokersWithNDestsFanoutTransactionTest extends JmsMultipleBrokersTestSupport {
1:511b60c:     static final String payload = new String(new byte[10 * 1024]);
1:511b60c:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4485NetworkOfXBrokersWithNDestsFanoutTransactionTest.class);
1:511b60c:     final int portBase = 61600;
1:511b60c:     final int numBrokers = 4;
1:511b60c:     final int numProducers = 10;
1:511b60c:     final int numMessages = 800;
1:511b60c:     final int consumerSleepTime = 20;
1:511b60c:     StringBuilder brokersUrl = new StringBuilder();
1:511b60c:     HashMap<ActiveMQQueue, AtomicInteger> accumulators = new HashMap<ActiveMQQueue, AtomicInteger>();
1:511b60c:     private ArrayList<Throwable> exceptions = new ArrayList<Throwable>();
1:511b60c: 
1:511b60c:     protected void buildUrlList() throws Exception {
1:511b60c:         for (int i = 0; i < numBrokers; i++) {
1:511b60c:             brokersUrl.append("tcp://localhost:" + (portBase + i));
1:511b60c:             if (i != numBrokers - 1) {
1:511b60c:                 brokersUrl.append(',');
1:511b60c:             }
1:511b60c:         }
1:511b60c:     }
1:511b60c: 
1:511b60c:     protected BrokerService createBroker(int brokerid) throws Exception {
1:511b60c:         BrokerService broker = new BrokerService();
1:511b60c:         broker.setPersistent(true);
1:511b60c:         broker.setDeleteAllMessagesOnStartup(true);
1:511b60c:         broker.getManagementContext().setCreateConnector(false);
1:511b60c: 
1:511b60c: 
1:511b60c:         broker.setUseJmx(true);
1:511b60c:         broker.setBrokerName("B" + brokerid);
1:511b60c:         broker.addConnector(new URI("tcp://localhost:" + (portBase + brokerid)));
1:511b60c: 
1:511b60c:         addNetworkConnector(broker);
1:511b60c:         broker.setSchedulePeriodForDestinationPurge(0);
1:511b60c:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:511b60c:         broker.getSystemUsage().getMemoryUsage().setLimit(512 * 1024 * 1024);
1:511b60c: 
1:511b60c: 
1:511b60c:         PolicyMap policyMap = new PolicyMap();
1:511b60c:         PolicyEntry policyEntry = new PolicyEntry();
1:511b60c:         policyEntry.setExpireMessagesPeriod(0);
1:511b60c:         policyEntry.setQueuePrefetch(1000);
1:511b60c:         policyEntry.setMemoryLimit(1024 * 1024l);
1:511b60c:         policyEntry.setOptimizedDispatch(false);
1:511b60c:         policyEntry.setProducerFlowControl(false);
1:511b60c:         policyEntry.setEnableAudit(true);
1:511b60c:         policyEntry.setUseCache(true);
1:511b60c:         policyMap.put(new ActiveMQQueue("GW.>"), policyEntry);
1:511b60c:         broker.setDestinationPolicy(policyMap);
1:511b60c: 
1:511b60c:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:511b60c:         kahaDBPersistenceAdapter.setConcurrentStoreAndDispatchQueues(false);
1:511b60c: 
1:511b60c:         brokers.put(broker.getBrokerName(), new BrokerItem(broker));
1:511b60c:         return broker;
1:511b60c:     }
1:511b60c: 
1:511b60c:     private void addNetworkConnector(BrokerService broker) throws Exception {
1:511b60c:         StringBuilder networkConnectorUrl = new StringBuilder("static:(").append(brokersUrl.toString());
1:511b60c:         networkConnectorUrl.append(')');
1:511b60c: 
1:511b60c:         for (int i = 0; i < 2; i++) {
1:511b60c:             NetworkConnector nc = new DiscoveryNetworkConnector(new URI(networkConnectorUrl.toString()));
1:511b60c:             nc.setName("Bridge-" + i);
1:511b60c:             nc.setNetworkTTL(1);
1:511b60c:             nc.setDecreaseNetworkConsumerPriority(true);
1:511b60c:             nc.setDynamicOnly(true);
1:511b60c:             nc.setPrefetchSize(100);
1:511b60c:             nc.setDynamicallyIncludedDestinations(
1:511b60c:                     Arrays.asList(new ActiveMQDestination[]{new ActiveMQQueue("GW.*")}));
1:511b60c:             broker.addNetworkConnector(nc);
1:511b60c:         }
1:511b60c:     }
1:511b60c: 
1:511b60c:     public void testBrokers() throws Exception {
1:511b60c: 
1:511b60c:         buildUrlList();
1:511b60c: 
1:511b60c:         for (int i = 0; i < numBrokers; i++) {
1:511b60c:             createBroker(i);
1:511b60c:         }
1:511b60c: 
1:511b60c:         startAllBrokers();
1:511b60c:         waitForBridgeFormation(numBrokers - 1);
1:511b60c: 
1:511b60c:         verifyPeerBrokerInfos(numBrokers - 1);
1:511b60c: 
1:511b60c: 
1:511b60c:         final List<ConsumerState> consumerStates = startAllGWConsumers(numBrokers);
1:511b60c: 
1:511b60c:         startAllGWFanoutConsumers(numBrokers);
1:511b60c: 
1:511b60c:         LOG.info("Waiting for percolation of consumers..");
1:511b60c:         TimeUnit.SECONDS.sleep(5);
1:511b60c: 
1:511b60c:         LOG.info("Produce mesages..");
1:511b60c:         long startTime = System.currentTimeMillis();
1:511b60c: 
1:511b60c:         // produce
1:511b60c:         produce(numMessages);
1:511b60c: 
1:511b60c:         assertTrue("Got all sent", Wait.waitFor(new Wait.Condition() {
1:511b60c:             @Override
1:511b60c:             public boolean isSatisified() throws Exception {
1:511b60c:                 for (ConsumerState tally : consumerStates) {
1:511b60c:                     final int expected = numMessages * (tally.destination.isComposite() ? tally.destination.getCompositeDestinations().length : 1);
1:511b60c:                     LOG.info("Tally for: " + tally.brokerName + ", dest: " + tally.destination + " - " + tally.accumulator.get());
1:511b60c:                     if (tally.accumulator.get() != expected) {
1:511b60c:                         LOG.info("Tally for: " + tally.brokerName + ", dest: " + tally.destination + " - " + tally.accumulator.get() + " != " + expected + ", " + tally.expected);
1:511b60c:                         return false;
1:511b60c:                     }
1:511b60c:                     LOG.info("got tally on " + tally.brokerName);
1:511b60c:                 }
1:511b60c:                 return true;
1:511b60c:             }
1:511b60c:         }, 1000 * 60 * 1000l));
1:511b60c: 
1:511b60c:         assertTrue("No exceptions:" + exceptions, exceptions.isEmpty());
1:511b60c: 
1:511b60c:         LOG.info("done");
1:511b60c:         long duration = System.currentTimeMillis() - startTime;
1:511b60c:         LOG.info("Duration:" + TimeUtils.printDuration(duration));
1:511b60c:     }
1:511b60c: 
1:511b60c:     private void startAllGWFanoutConsumers(int nBrokers) throws Exception {
1:511b60c: 
1:511b60c:         StringBuffer compositeDest = new StringBuffer();
1:511b60c:         for (int k = 0; k < nBrokers; k++) {
1:511b60c:             compositeDest.append("GW." + k);
1:511b60c:             if (k + 1 != nBrokers) {
1:511b60c:                 compositeDest.append(',');
1:511b60c:             }
1:511b60c:         }
1:511b60c:         ActiveMQQueue compositeQ = new ActiveMQQueue(compositeDest.toString());
1:511b60c: 
1:511b60c:         for (int id = 0; id < nBrokers; id++) {
1:511b60c:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(tcp://localhost:" + (portBase + id) + ")");
1:511b60c:             connectionFactory.setWatchTopicAdvisories(false);
1:511b60c: 
1:511b60c:             QueueConnection queueConnection = connectionFactory.createQueueConnection();
1:511b60c:             queueConnection.start();
1:511b60c: 
1:511b60c:             final QueueSession queueSession = queueConnection.createQueueSession(true, Session.SESSION_TRANSACTED);
1:511b60c: 
1:511b60c:             final MessageProducer producer = queueSession.createProducer(compositeQ);
1:511b60c:             queueSession.createReceiver(new ActiveMQQueue("IN")).setMessageListener(new MessageListener() {
1:511b60c:                 @Override
1:511b60c:                 public void onMessage(Message message) {
1:511b60c:                     try {
1:511b60c:                         producer.send(message);
1:511b60c:                         queueSession.commit();
1:511b60c:                     } catch (Exception e) {
1:511b60c:                         LOG.error("Failed to fanout to GW: " + message, e);
1:511b60c:                     }
1:511b60c: 
1:511b60c:                 }
1:511b60c:             });
1:511b60c:         }
1:511b60c:     }
1:511b60c: 
1:511b60c:     private List<ConsumerState> startAllGWConsumers(int nBrokers) throws Exception {
1:511b60c:         List<ConsumerState> consumerStates = new LinkedList<ConsumerState>();
1:511b60c:         for (int id = 0; id < nBrokers; id++) {
1:511b60c:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(tcp://localhost:" + (portBase + id) + ")");
1:511b60c:             connectionFactory.setWatchTopicAdvisories(false);
1:511b60c: 
1:511b60c:             QueueConnection queueConnection = connectionFactory.createQueueConnection();
1:511b60c:             queueConnection.start();
1:511b60c: 
1:511b60c:             final QueueSession queueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:511b60c: 
1:511b60c:             ActiveMQQueue destination = new ActiveMQQueue("GW." + id);
1:511b60c:             QueueReceiver queueReceiver = queueSession.createReceiver(destination);
1:511b60c: 
1:511b60c:             final ConsumerState consumerState = new ConsumerState();
1:511b60c:             consumerState.brokerName = ((ActiveMQConnection) queueConnection).getBrokerName();
1:511b60c:             consumerState.receiver = queueReceiver;
1:511b60c:             consumerState.destination = destination;
1:511b60c:             for (int j = 0; j < numMessages * (consumerState.destination.isComposite() ? consumerState.destination.getCompositeDestinations().length : 1); j++) {
1:511b60c:                 consumerState.expected.add(j);
1:511b60c:             }
1:511b60c: 
1:511b60c:             if (!accumulators.containsKey(destination)) {
1:511b60c:                 accumulators.put(destination, new AtomicInteger(0));
1:511b60c:             }
1:511b60c:             consumerState.accumulator = accumulators.get(destination);
1:511b60c: 
1:511b60c:             queueReceiver.setMessageListener(new MessageListener() {
1:511b60c:                 @Override
1:511b60c:                 public void onMessage(Message message) {
1:511b60c:                     try {
1:511b60c:                         if (consumerSleepTime > 0) {
1:511b60c:                             TimeUnit.MILLISECONDS.sleep(consumerSleepTime);
1:511b60c:                         }
1:511b60c:                     } catch (InterruptedException e) {
1:511b60c:                         e.printStackTrace();
1:511b60c:                     }
1:511b60c:                     try {
1:511b60c:                         consumerState.accumulator.incrementAndGet();
1:511b60c:                         try {
1:511b60c:                             consumerState.expected.remove(((ActiveMQMessage) message).getProperty("NUM"));
1:511b60c:                         } catch (IOException e) {
1:511b60c:                             e.printStackTrace();
1:511b60c:                         }
1:511b60c:                     } catch (Exception e) {
1:511b60c:                         LOG.error("Failed to commit slow receipt of " + message, e);
1:511b60c:                     }
1:511b60c:                 }
1:511b60c:             });
1:511b60c: 
1:511b60c:             consumerStates.add(consumerState);
1:511b60c: 
1:511b60c:         }
1:511b60c:         return consumerStates;
1:511b60c:     }
1:511b60c: 
1:511b60c:     private void produce(int numMessages) throws Exception {
1:511b60c:         ExecutorService executorService = Executors.newFixedThreadPool(numProducers);
1:511b60c:         final AtomicInteger toSend = new AtomicInteger(numMessages);
1:511b60c:         for (int i = 1; i <= numProducers; i++) {
1:511b60c:             final int id = i % numBrokers;
1:511b60c:             executorService.execute(new Runnable() {
1:511b60c:                 @Override
1:511b60c:                 public void run() {
1:511b60c:                     try {
1:511b60c:                         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(tcp://localhost:" + (portBase + id) + ")");
1:511b60c:                         connectionFactory.setWatchTopicAdvisories(false);
1:511b60c:                         QueueConnection queueConnection = connectionFactory.createQueueConnection();
1:511b60c:                         queueConnection.start();
1:511b60c:                         QueueSession queueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:511b60c:                         MessageProducer producer = queueSession.createProducer(null);
1:511b60c:                         int val = 0;
1:511b60c:                         while ((val = toSend.decrementAndGet()) >= 0) {
1:511b60c: 
1:511b60c:                             ActiveMQQueue compositeQ = new ActiveMQQueue("IN");
1:511b60c:                             LOG.info("Send to: " + ((ActiveMQConnection) queueConnection).getBrokerName() + ", " + val + ", dest:" + compositeQ);
1:511b60c:                             Message textMessage = queueSession.createTextMessage(((ActiveMQConnection) queueConnection).getBrokerName() + "->" + val + " payload:" + payload);
1:511b60c:                             textMessage.setIntProperty("NUM", val);
1:511b60c:                             producer.send(compositeQ, textMessage);
1:511b60c:                         }
1:511b60c:                         queueConnection.close();
1:511b60c: 
1:511b60c:                     } catch (Throwable throwable) {
1:511b60c:                         throwable.printStackTrace();
1:511b60c:                         exceptions.add(throwable);
1:511b60c:                     }
1:511b60c:                 }
1:511b60c:             });
1:511b60c:         }
1:511b60c:     }
1:511b60c: 
1:511b60c:     private void verifyPeerBrokerInfo(BrokerItem brokerItem, final int max) throws Exception {
1:511b60c:         final BrokerService broker = brokerItem.broker;
1:511b60c:         final RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:511b60c:         Wait.waitFor(new Wait.Condition() {
1:511b60c:             @Override
1:511b60c:             public boolean isSatisified() throws Exception {
1:511b60c:                 LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:511b60c:                 return max == regionBroker.getPeerBrokerInfos().length;
1:511b60c:             }
1:511b60c:         });
1:511b60c:         LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:511b60c:         List<String> missing = new ArrayList<String>();
1:511b60c:         for (int i = 0; i < max; i++) {
1:511b60c:             missing.add("B" + i);
1:511b60c:         }
1:511b60c:         if (max != regionBroker.getPeerBrokerInfos().length) {
1:511b60c:             for (BrokerInfo info : regionBroker.getPeerBrokerInfos()) {
1:511b60c:                 LOG.info(info.getBrokerName());
1:511b60c:                 missing.remove(info.getBrokerName());
1:511b60c:             }
1:511b60c:             LOG.info("Broker infos off.." + missing);
1:511b60c:         }
1:511b60c:         assertEquals(broker.getBrokerName(), max, regionBroker.getPeerBrokerInfos().length);
1:511b60c:     }
1:511b60c: 
1:511b60c:     private void verifyPeerBrokerInfos(final int max) throws Exception {
1:511b60c:         Collection<BrokerItem> brokerList = brokers.values();
1:511b60c:         for (Iterator<BrokerItem> i = brokerList.iterator(); i.hasNext(); ) {
1:511b60c:             verifyPeerBrokerInfo(i.next(), max);
1:511b60c:         }
1:511b60c:     }
1:511b60c: 
1:511b60c:     protected void tearDown() throws Exception {
1:511b60c:         super.tearDown();
1:511b60c:     }
1:511b60c: 
1:511b60c:     class ConsumerState {
1:511b60c:         AtomicInteger accumulator;
1:511b60c:         String brokerName;
1:511b60c:         QueueReceiver receiver;
1:511b60c:         ActiveMQDestination destination;
1:511b60c:         Vector<Integer> expected = new Vector<Integer>();
1:511b60c:     }
1:511b60c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:511b60c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Vector;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueReceiver;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.TimeUtils;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4485NetworkOfXBrokersWithNDestsFanoutTransactionTest extends JmsMultipleBrokersTestSupport {
1:     static final String payload = new String(new byte[10 * 1024]);
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4485NetworkOfXBrokersWithNDestsFanoutTransactionTest.class);
1:     final int portBase = 61600;
1:     final int numBrokers = 4;
1:     final int numProducers = 10;
1:     final int numMessages = 800;
1:     final int consumerSleepTime = 20;
1:     StringBuilder brokersUrl = new StringBuilder();
1:     HashMap<ActiveMQQueue, AtomicInteger> accumulators = new HashMap<ActiveMQQueue, AtomicInteger>();
1:     private ArrayList<Throwable> exceptions = new ArrayList<Throwable>();
1: 
1:     protected void buildUrlList() throws Exception {
1:         for (int i = 0; i < numBrokers; i++) {
1:             brokersUrl.append("tcp://localhost:" + (portBase + i));
1:             if (i != numBrokers - 1) {
1:                 brokersUrl.append(',');
1:             }
1:         }
1:     }
1: 
1:     protected BrokerService createBroker(int brokerid) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(true);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.getManagementContext().setCreateConnector(false);
1: 
1: 
1:         broker.setUseJmx(true);
1:         broker.setBrokerName("B" + brokerid);
1:         broker.addConnector(new URI("tcp://localhost:" + (portBase + brokerid)));
1: 
1:         addNetworkConnector(broker);
1:         broker.setSchedulePeriodForDestinationPurge(0);
1:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:         broker.getSystemUsage().getMemoryUsage().setLimit(512 * 1024 * 1024);
1: 
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setExpireMessagesPeriod(0);
1:         policyEntry.setQueuePrefetch(1000);
1:         policyEntry.setMemoryLimit(1024 * 1024l);
1:         policyEntry.setOptimizedDispatch(false);
1:         policyEntry.setProducerFlowControl(false);
1:         policyEntry.setEnableAudit(true);
1:         policyEntry.setUseCache(true);
1:         policyMap.put(new ActiveMQQueue("GW.>"), policyEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:         kahaDBPersistenceAdapter.setConcurrentStoreAndDispatchQueues(false);
1: 
1:         brokers.put(broker.getBrokerName(), new BrokerItem(broker));
1:         return broker;
1:     }
1: 
1:     private void addNetworkConnector(BrokerService broker) throws Exception {
1:         StringBuilder networkConnectorUrl = new StringBuilder("static:(").append(brokersUrl.toString());
1:         networkConnectorUrl.append(')');
1: 
1:         for (int i = 0; i < 2; i++) {
1:             NetworkConnector nc = new DiscoveryNetworkConnector(new URI(networkConnectorUrl.toString()));
1:             nc.setName("Bridge-" + i);
1:             nc.setNetworkTTL(1);
1:             nc.setDecreaseNetworkConsumerPriority(true);
1:             nc.setDynamicOnly(true);
1:             nc.setPrefetchSize(100);
1:             nc.setDynamicallyIncludedDestinations(
1:                     Arrays.asList(new ActiveMQDestination[]{new ActiveMQQueue("GW.*")}));
1:             broker.addNetworkConnector(nc);
1:         }
1:     }
1: 
1:     public void testBrokers() throws Exception {
1: 
1:         buildUrlList();
1: 
1:         for (int i = 0; i < numBrokers; i++) {
1:             createBroker(i);
1:         }
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation(numBrokers - 1);
1: 
1:         verifyPeerBrokerInfos(numBrokers - 1);
1: 
1: 
1:         final List<ConsumerState> consumerStates = startAllGWConsumers(numBrokers);
1: 
1:         startAllGWFanoutConsumers(numBrokers);
1: 
1:         LOG.info("Waiting for percolation of consumers..");
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         LOG.info("Produce mesages..");
1:         long startTime = System.currentTimeMillis();
1: 
1:         // produce
1:         produce(numMessages);
1: 
1:         assertTrue("Got all sent", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 for (ConsumerState tally : consumerStates) {
1:                     final int expected = numMessages * (tally.destination.isComposite() ? tally.destination.getCompositeDestinations().length : 1);
1:                     LOG.info("Tally for: " + tally.brokerName + ", dest: " + tally.destination + " - " + tally.accumulator.get());
1:                     if (tally.accumulator.get() != expected) {
1:                         LOG.info("Tally for: " + tally.brokerName + ", dest: " + tally.destination + " - " + tally.accumulator.get() + " != " + expected + ", " + tally.expected);
1:                         return false;
1:                     }
1:                     LOG.info("got tally on " + tally.brokerName);
1:                 }
1:                 return true;
1:             }
1:         }, 1000 * 60 * 1000l));
1: 
1:         assertTrue("No exceptions:" + exceptions, exceptions.isEmpty());
1: 
1:         LOG.info("done");
1:         long duration = System.currentTimeMillis() - startTime;
1:         LOG.info("Duration:" + TimeUtils.printDuration(duration));
1:     }
1: 
1:     private void startAllGWFanoutConsumers(int nBrokers) throws Exception {
1: 
1:         StringBuffer compositeDest = new StringBuffer();
1:         for (int k = 0; k < nBrokers; k++) {
1:             compositeDest.append("GW." + k);
1:             if (k + 1 != nBrokers) {
1:                 compositeDest.append(',');
1:             }
1:         }
1:         ActiveMQQueue compositeQ = new ActiveMQQueue(compositeDest.toString());
1: 
1:         for (int id = 0; id < nBrokers; id++) {
1:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(tcp://localhost:" + (portBase + id) + ")");
1:             connectionFactory.setWatchTopicAdvisories(false);
1: 
1:             QueueConnection queueConnection = connectionFactory.createQueueConnection();
1:             queueConnection.start();
1: 
1:             final QueueSession queueSession = queueConnection.createQueueSession(true, Session.SESSION_TRANSACTED);
1: 
1:             final MessageProducer producer = queueSession.createProducer(compositeQ);
1:             queueSession.createReceiver(new ActiveMQQueue("IN")).setMessageListener(new MessageListener() {
1:                 @Override
1:                 public void onMessage(Message message) {
1:                     try {
1:                         producer.send(message);
1:                         queueSession.commit();
1:                     } catch (Exception e) {
1:                         LOG.error("Failed to fanout to GW: " + message, e);
1:                     }
1: 
1:                 }
1:             });
1:         }
1:     }
1: 
1:     private List<ConsumerState> startAllGWConsumers(int nBrokers) throws Exception {
1:         List<ConsumerState> consumerStates = new LinkedList<ConsumerState>();
1:         for (int id = 0; id < nBrokers; id++) {
1:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(tcp://localhost:" + (portBase + id) + ")");
1:             connectionFactory.setWatchTopicAdvisories(false);
1: 
1:             QueueConnection queueConnection = connectionFactory.createQueueConnection();
1:             queueConnection.start();
1: 
1:             final QueueSession queueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             ActiveMQQueue destination = new ActiveMQQueue("GW." + id);
1:             QueueReceiver queueReceiver = queueSession.createReceiver(destination);
1: 
1:             final ConsumerState consumerState = new ConsumerState();
1:             consumerState.brokerName = ((ActiveMQConnection) queueConnection).getBrokerName();
1:             consumerState.receiver = queueReceiver;
1:             consumerState.destination = destination;
1:             for (int j = 0; j < numMessages * (consumerState.destination.isComposite() ? consumerState.destination.getCompositeDestinations().length : 1); j++) {
1:                 consumerState.expected.add(j);
1:             }
1: 
1:             if (!accumulators.containsKey(destination)) {
1:                 accumulators.put(destination, new AtomicInteger(0));
1:             }
1:             consumerState.accumulator = accumulators.get(destination);
1: 
1:             queueReceiver.setMessageListener(new MessageListener() {
1:                 @Override
1:                 public void onMessage(Message message) {
1:                     try {
1:                         if (consumerSleepTime > 0) {
1:                             TimeUnit.MILLISECONDS.sleep(consumerSleepTime);
1:                         }
1:                     } catch (InterruptedException e) {
1:                         e.printStackTrace();
1:                     }
1:                     try {
1:                         consumerState.accumulator.incrementAndGet();
1:                         try {
1:                             consumerState.expected.remove(((ActiveMQMessage) message).getProperty("NUM"));
1:                         } catch (IOException e) {
1:                             e.printStackTrace();
1:                         }
1:                     } catch (Exception e) {
1:                         LOG.error("Failed to commit slow receipt of " + message, e);
1:                     }
1:                 }
1:             });
1: 
1:             consumerStates.add(consumerState);
1: 
1:         }
1:         return consumerStates;
1:     }
1: 
1:     private void produce(int numMessages) throws Exception {
1:         ExecutorService executorService = Executors.newFixedThreadPool(numProducers);
1:         final AtomicInteger toSend = new AtomicInteger(numMessages);
1:         for (int i = 1; i <= numProducers; i++) {
1:             final int id = i % numBrokers;
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(tcp://localhost:" + (portBase + id) + ")");
1:                         connectionFactory.setWatchTopicAdvisories(false);
1:                         QueueConnection queueConnection = connectionFactory.createQueueConnection();
1:                         queueConnection.start();
1:                         QueueSession queueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         MessageProducer producer = queueSession.createProducer(null);
1:                         int val = 0;
1:                         while ((val = toSend.decrementAndGet()) >= 0) {
1: 
1:                             ActiveMQQueue compositeQ = new ActiveMQQueue("IN");
1:                             LOG.info("Send to: " + ((ActiveMQConnection) queueConnection).getBrokerName() + ", " + val + ", dest:" + compositeQ);
1:                             Message textMessage = queueSession.createTextMessage(((ActiveMQConnection) queueConnection).getBrokerName() + "->" + val + " payload:" + payload);
1:                             textMessage.setIntProperty("NUM", val);
1:                             producer.send(compositeQ, textMessage);
1:                         }
1:                         queueConnection.close();
1: 
1:                     } catch (Throwable throwable) {
1:                         throwable.printStackTrace();
1:                         exceptions.add(throwable);
1:                     }
1:                 }
1:             });
1:         }
1:     }
1: 
1:     private void verifyPeerBrokerInfo(BrokerItem brokerItem, final int max) throws Exception {
1:         final BrokerService broker = brokerItem.broker;
1:         final RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:                 return max == regionBroker.getPeerBrokerInfos().length;
1:             }
1:         });
1:         LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:         List<String> missing = new ArrayList<String>();
1:         for (int i = 0; i < max; i++) {
1:             missing.add("B" + i);
1:         }
1:         if (max != regionBroker.getPeerBrokerInfos().length) {
1:             for (BrokerInfo info : regionBroker.getPeerBrokerInfos()) {
1:                 LOG.info(info.getBrokerName());
1:                 missing.remove(info.getBrokerName());
1:             }
1:             LOG.info("Broker infos off.." + missing);
1:         }
1:         assertEquals(broker.getBrokerName(), max, regionBroker.getPeerBrokerInfos().length);
1:     }
1: 
1:     private void verifyPeerBrokerInfos(final int max) throws Exception {
1:         Collection<BrokerItem> brokerList = brokers.values();
1:         for (Iterator<BrokerItem> i = brokerList.iterator(); i.hasNext(); ) {
1:             verifyPeerBrokerInfo(i.next(), max);
1:         }
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     class ConsumerState {
1:         AtomicInteger accumulator;
1:         String brokerName;
1:         QueueReceiver receiver;
1:         ActiveMQDestination destination;
1:         Vector<Integer> expected = new Vector<Integer>();
1:     }
1: }
============================================================================