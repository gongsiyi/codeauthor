1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:0446404: package org.apache.activemq.util;
2:a6a6a70: 
1:91a0041: import static org.junit.Assert.assertEquals;
1:91a0041: import static org.junit.Assert.assertTrue;
1:a6a6a70: 
1:91a0041: import org.junit.Test;
1:91a0041: 
1:91a0041: public class BitArrayBinTest {
1:91a0041: 
1:91a0041:     @Test
1:0446404:     public void testSetAroundWindow() throws Exception {
1:0446404:         doTestSetAroundWindow(500, 2000);
1:0446404:         doTestSetAroundWindow(512, 2000);
1:0446404:         doTestSetAroundWindow(128, 512);
2:0446404:     }
1:5b5d60f: 
1:91a0041:     @Test
1:5b5d60f:     public void testSetHiLo() throws Exception {
1:5b5d60f:         BitArrayBin toTest = new BitArrayBin(50);
1:5b5d60f:         toTest.setBit(0, true);
1:5b5d60f:         toTest.setBit(100, true);
1:5b5d60f:         toTest.setBit(150, true);
2:5b5d60f:         assertTrue("set", toTest.getBit(0));
1:91a0041: 
1:5b5d60f:         toTest.setBit(0, true);
1:91a0041:         assertTrue("set", toTest.getBit(0));
1:5b5d60f:     }
1:5b5d60f: 
1:0446404:     private void doTestSetAroundWindow(int window, int dataSize) throws Exception {
1:5b5d60f: 
1:0446404:         BitArrayBin toTest = new BitArrayBin(window);
1:91a0041: 
1:91a0041:         for (int i = 0; i <= dataSize; i++) {
1:0446404:             assertTrue("not already set", !toTest.setBit(i, Boolean.TRUE));
1:a6a6a70:             assertEquals("current is max", i, toTest.getLastSetIndex());
1:0446404:         }
1:a6a6a70: 
1:a6a6a70:         assertEquals("last is max", dataSize, toTest.getLastSetIndex());
1:91a0041: 
1:0446404:         int windowOfValidData = roundWindow(dataSize, window);
1:91a0041:         int i = dataSize;
1:91a0041:         for (; i >= dataSize - windowOfValidData; i--) {
1:0446404:             assertTrue("was already set, id=" + i, toTest.setBit(i, Boolean.TRUE));
1:0446404:         }
1:a6a6a70: 
1:a6a6a70:         assertEquals("last is still max", dataSize, toTest.getLastSetIndex());
1:91a0041: 
1:0446404:         for (; i >= 0; i--) {
1:0446404:             assertTrue("was not already set, id=" + i, !toTest.setBit(i, Boolean.TRUE));
1:0446404:         }
1:91a0041: 
1:91a0041:         for (int j = dataSize + 1; j <= (2 * dataSize); j++) {
1:0446404:             assertTrue("not already set: id=" + j, !toTest.setBit(j, Boolean.TRUE));
1:0446404:         }
1:a6a6a70: 
1:91a0041:         assertEquals("last still max*2", 2 * dataSize, toTest.getLastSetIndex());
1:0446404:     }
1:91a0041: 
1:91a0041:     @Test
1:0446404:     public void testSetUnsetAroundWindow() throws Exception {
1:0446404:         doTestSetUnSetAroundWindow(500, 2000);
1:0446404:         doTestSetUnSetAroundWindow(512, 2000);
1:0446404:         doTestSetUnSetAroundWindow(128, 512);
1:0446404:     }
1:91a0041: 
1:0446404:     private void doTestSetUnSetAroundWindow(int dataSize, int window) throws Exception {
1:91a0041: 
1:0446404:         BitArrayBin toTest = new BitArrayBin(window);
1:91a0041: 
1:91a0041:         for (int i = 0; i <= dataSize; i++) {
1:0446404:             assertTrue("not already set", !toTest.setBit(i, Boolean.TRUE));
1:0446404:         }
1:a6a6a70: 
1:0446404:         int windowOfValidData = roundWindow(dataSize, window);
1:91a0041:         for (int i = dataSize; i >= 0 && i >= dataSize - windowOfValidData; i--) {
1:0446404:             assertTrue("was already set, id=" + i, toTest.setBit(i, Boolean.FALSE));
1:0446404:         }
1:a6a6a70: 
1:91a0041:         for (int i = 0; i <= dataSize; i++) {
1:0446404:             assertTrue("not already set, id:" + i, !toTest.setBit(i, Boolean.TRUE));
1:0446404:         }
1:a6a6a70: 
1:91a0041:         for (int j = 2 * dataSize; j < 4 * dataSize; j++) {
1:0446404:             assertTrue("not already set: id=" + j, !toTest.setBit(j, Boolean.TRUE));
1:0446404:         }
1:0446404:     }
1:91a0041: 
1:91a0041:     @Test
1:0446404:     public void testSetAroundLongSizeMultiplier() throws Exception {
1:0446404:         int window = 512;
1:0446404:         int dataSize = 1000;
1:91a0041:         for (int muliplier = 1; muliplier < 8; muliplier++) {
1:91a0041:             for (int value = 0; value < dataSize; value++) {
1:0446404:                 BitArrayBin toTest = new BitArrayBin(window);
1:91a0041: 
1:91a0041:                 int instance = value + muliplier * BitArray.LONG_SIZE;
1:0446404:                 assertTrue("not already set: id=" + instance, !toTest.setBit(instance, Boolean.TRUE));
1:0446404:                 assertTrue("not already set: id=" + value, !toTest.setBit(value, Boolean.TRUE));
1:a6a6a70:                 assertEquals("max set correct", instance, toTest.getLastSetIndex());
1:0446404:             }
1:0446404:         }
1:0446404:     }
1:91a0041: 
1:91a0041:     @Test
1:91a0041:     public void testLargeGapInData() throws Exception {
1:0446404:         doTestLargeGapInData(128);
1:0446404:         doTestLargeGapInData(500);
1:0446404:     }
1:91a0041: 
1:0446404:     public void doTestLargeGapInData(int window) throws Exception {
1:0446404:         BitArrayBin toTest = new BitArrayBin(window);
1:91a0041: 
1:0446404:         int instance = BitArray.LONG_SIZE;
1:91a0041:         assertTrue("not already set: id=" + instance, !toTest.setBit(instance, Boolean.TRUE));
1:91a0041: 
1:91a0041:         instance = 12 * BitArray.LONG_SIZE;
1:91a0041:         assertTrue("not already set: id=" + instance, !toTest.setBit(instance, Boolean.TRUE));
1:91a0041: 
1:91a0041:         instance = 9 * BitArray.LONG_SIZE;
1:91a0041:         assertTrue("not already set: id=" + instance, !toTest.setBit(instance, Boolean.TRUE));
1:0446404:     }
1:91a0041: 
1:91a0041:     @Test
1:91a0041:     public void testLastSeq() throws Exception {
1:91a0041:         BitArrayBin toTest = new BitArrayBin(512);
1:91a0041:         assertEquals("last not set", -1, toTest.getLastSetIndex());
1:91a0041: 
1:91a0041:         toTest.setBit(1, Boolean.TRUE);
1:91a0041:         assertEquals("last correct", 1, toTest.getLastSetIndex());
1:91a0041: 
1:91a0041:         toTest.setBit(64, Boolean.TRUE);
1:91a0041:         assertEquals("last correct", 64, toTest.getLastSetIndex());
1:91a0041: 
1:91a0041:         toTest.setBit(68, Boolean.TRUE);
1:91a0041:         assertEquals("last correct", 68, toTest.getLastSetIndex());
1:91a0041:     }
1:91a0041: 
1:0446404:     // window moves in increments of BitArray.LONG_SIZE.
1:0446404:     // valid data window on low end can be larger than window
1:0446404:     private int roundWindow(int dataSetEnd, int windowSize) {
1:91a0041: 
1:0446404:         int validData = dataSetEnd - windowSize;
1:0446404:         int validDataBin = validData / BitArray.LONG_SIZE;
1:91a0041:         validDataBin += (windowSize % BitArray.LONG_SIZE > 0 ? 1 : 0);
1:0446404:         int startOfValid = validDataBin * BitArray.LONG_SIZE;
1:91a0041: 
1:91a0041:         return dataSetEnd - startOfValid;
1:a6a6a70:     }
1:a6a6a70: 
1:91a0041:     @Test
1:91a0041:     public void testLargeNumber() throws Exception {
1:91a0041:         BitArrayBin toTest = new BitArrayBin(1024);
1:91a0041:         toTest.setBit(1, true);
1:91a0041:         long largeNum = Integer.MAX_VALUE * 2L + 100L;
1:91a0041:         toTest.setBit(largeNum, true);
1:91a0041:         assertTrue("set", toTest.getBit(largeNum));
1:91a0041:     }
1:0945648: 
1:0945648:     //This test is slightly different in that it doesn't set bit 1 to
1:0945648:     //true as above which was causing a different result before AMQ-6431
1:0945648:     @Test
1:0945648:     public void testLargeNumber2() {
1:0945648:         BitArrayBin toTest = new BitArrayBin(1024);
1:0945648:         long largeNum = Integer.MAX_VALUE * 2L + 100L;
1:0945648:         toTest.setBit(largeNum, true);
1:0945648:         assertTrue(toTest.getBit(largeNum));
1:0945648:     }
1:0446404: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0945648
/////////////////////////////////////////////////////////////////////////
1: 
1:     //This test is slightly different in that it doesn't set bit 1 to
1:     //true as above which was causing a different result before AMQ-6431
1:     @Test
1:     public void testLargeNumber2() {
1:         BitArrayBin toTest = new BitArrayBin(1024);
1:         long largeNum = Integer.MAX_VALUE * 2L + 100L;
1:         toTest.setBit(largeNum, true);
1:         assertTrue(toTest.getBit(largeNum));
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:91a0041
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import org.junit.Test;
1: 
1: public class BitArrayBinTest {
1: 
1:     @Test
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("set", toTest.getBit(0));
1: 
1: 
1:         for (int i = 0; i <= dataSize; i++) {
1: 
1:         int i = dataSize;
1:         for (; i >= dataSize - windowOfValidData; i--) {
1: 
1: 
1:         for (int j = dataSize + 1; j <= (2 * dataSize); j++) {
1:         assertEquals("last still max*2", 2 * dataSize, toTest.getLastSetIndex());
1: 
1:     @Test
1: 
1: 
1:         for (int i = 0; i <= dataSize; i++) {
1: 
1:         for (int i = dataSize; i >= 0 && i >= dataSize - windowOfValidData; i--) {
1:         for (int i = 0; i <= dataSize; i++) {
1:         for (int j = 2 * dataSize; j < 4 * dataSize; j++) {
1: 
1:     @Test
1:         for (int muliplier = 1; muliplier < 8; muliplier++) {
1:             for (int value = 0; value < dataSize; value++) {
1: 
1:                 int instance = value + muliplier * BitArray.LONG_SIZE;
1: 
1:     @Test
1:     public void testLargeGapInData() throws Exception {
1: 
1: 
1:         assertTrue("not already set: id=" + instance, !toTest.setBit(instance, Boolean.TRUE));
1: 
1:         instance = 12 * BitArray.LONG_SIZE;
1:         assertTrue("not already set: id=" + instance, !toTest.setBit(instance, Boolean.TRUE));
1: 
1:         instance = 9 * BitArray.LONG_SIZE;
1:         assertTrue("not already set: id=" + instance, !toTest.setBit(instance, Boolean.TRUE));
1: 
1:     @Test
1:     public void testLastSeq() throws Exception {
1:         BitArrayBin toTest = new BitArrayBin(512);
1:         assertEquals("last not set", -1, toTest.getLastSetIndex());
1: 
1:         toTest.setBit(1, Boolean.TRUE);
1:         assertEquals("last correct", 1, toTest.getLastSetIndex());
1: 
1:         toTest.setBit(64, Boolean.TRUE);
1:         assertEquals("last correct", 64, toTest.getLastSetIndex());
1: 
1:         toTest.setBit(68, Boolean.TRUE);
1:         assertEquals("last correct", 68, toTest.getLastSetIndex());
1:     }
1: 
1: 
1:         validDataBin += (windowSize % BitArray.LONG_SIZE > 0 ? 1 : 0);
1: 
1:         return dataSetEnd - startOfValid;
1:     @Test
1:     public void testLargeNumber() throws Exception {
1:         BitArrayBin toTest = new BitArrayBin(1024);
1:         toTest.setBit(1, true);
1:         long largeNum = Integer.MAX_VALUE * 2L + 100L;
1:         toTest.setBit(largeNum, true);
1:         assertTrue("set", toTest.getBit(largeNum));
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Gary Tully
-------------------------------------------------------------------------------
commit:5b5d60f
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testSetHiLo() throws Exception {
1:         BitArrayBin toTest = new BitArrayBin(50);
1:         toTest.setBit(0, true);
1:         toTest.setBit(100, true);
1:         toTest.setBit(150, true);
1:         assertTrue("set", toTest.getBit(0));
1: 
1:         toTest.setBit(0, true);
1:         assertTrue("set", toTest.getBit(0));        
1:     }
1:     
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("current is max", i, toTest.getLastSetIndex());
1:         assertEquals("last is max", dataSize, toTest.getLastSetIndex());
1:         
1: 
1:         assertEquals("last is still max", dataSize, toTest.getLastSetIndex());
0:         for (int j= dataSize +1; j<=(2*dataSize); j++) {
1:         
0:         assertEquals("last still max*2", 2*dataSize, toTest.getLastSetIndex());
1: 
/////////////////////////////////////////////////////////////////////////
1:                 assertEquals("max set correct", instance, toTest.getLastSetIndex());
/////////////////////////////////////////////////////////////////////////
1:     
0:    public void testLastSeq() throws Exception {
0:        BitArrayBin toTest = new BitArrayBin(512);
0:        assertEquals("last not set", -1, toTest.getLastSetIndex());
1:        
0:        toTest.setBit(1, Boolean.TRUE);
0:        assertEquals("last correct", 1, toTest.getLastSetIndex());
1:        
0:        toTest.setBit(64, Boolean.TRUE);
0:        assertEquals("last correct", 64, toTest.getLastSetIndex());
1:        
0:        toTest.setBit(68, Boolean.TRUE);
0:        assertEquals("last correct", 68, toTest.getLastSetIndex());
1:        
1:    }
1:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:0446404
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.util;
0: 
0: import junit.framework.TestCase;
0: 
0: public class BitArrayBinTest extends TestCase {
0:         
1:     public void testSetAroundWindow() throws Exception {
1:         doTestSetAroundWindow(500, 2000);
1:         doTestSetAroundWindow(512, 2000);
1:         doTestSetAroundWindow(128, 512);
1:     }
0:        
1:     private void doTestSetAroundWindow(int window, int dataSize) throws Exception {
0: 
1:         BitArrayBin toTest = new BitArrayBin(window);
0:         
0:         for (int i=0; i <= dataSize; i++) {
1:             assertTrue("not already set", !toTest.setBit(i, Boolean.TRUE));
1:         }
0: 
1:         int windowOfValidData = roundWindow(dataSize, window);
0:         int i=dataSize;
0:         for (; i >= dataSize -windowOfValidData; i--) {
1:             assertTrue("was already set, id=" + i, toTest.setBit(i, Boolean.TRUE));
1:         }
0:         
1:         for (; i >= 0; i--) {
1:             assertTrue("was not already set, id=" + i, !toTest.setBit(i, Boolean.TRUE));
1:         }
0:         
0:         for (int j= dataSize +1; j<(2*dataSize); j++) {
1:             assertTrue("not already set: id=" + j, !toTest.setBit(j, Boolean.TRUE));
1:         }
1:     }
0:     
1:     public void testSetUnsetAroundWindow() throws Exception {
1:         doTestSetUnSetAroundWindow(500, 2000);
1:         doTestSetUnSetAroundWindow(512, 2000);
1:         doTestSetUnSetAroundWindow(128, 512);
1:     }
0:     
1:     private void doTestSetUnSetAroundWindow(int dataSize, int window) throws Exception {
0: 
1:         BitArrayBin toTest = new BitArrayBin(window);
0:         
0:         for (int i=0; i <=dataSize; i++) {
1:             assertTrue("not already set", !toTest.setBit(i, Boolean.TRUE));
1:         }
0:                 
1:         int windowOfValidData = roundWindow(dataSize, window);
0:         for (int i=dataSize; i >= 0 && i >=dataSize -windowOfValidData; i--) {
1:             assertTrue("was already set, id=" + i, toTest.setBit(i, Boolean.FALSE));
1:         }
0: 
0:         for (int i=0; i <=dataSize; i++) {
1:             assertTrue("not already set, id:" + i, !toTest.setBit(i, Boolean.TRUE));
1:         }
0: 
0:         for (int j= 2*dataSize; j< 4*dataSize; j++) {
1:             assertTrue("not already set: id=" + j, !toTest.setBit(j, Boolean.TRUE));
1:         }
1:     }
0:     
1:     public void testSetAroundLongSizeMultiplier() throws Exception {
1:         int window = 512;
1:         int dataSize = 1000;
0:         for (int muliplier=1; muliplier <8; muliplier++) {
0:             for (int value=0; value <dataSize; value++) {
1:                 BitArrayBin toTest = new BitArrayBin(window);
0:                 
0:                 int instance = value +muliplier*BitArray.LONG_SIZE;
1:                 assertTrue("not already set: id=" + instance, !toTest.setBit(instance, Boolean.TRUE));
1:                 assertTrue("not already set: id=" + value, !toTest.setBit(value, Boolean.TRUE));
1:             }
1:         }
1:     }
0:     
0:     public void testLargeGapInData(int window) throws Exception {
1:         doTestLargeGapInData(128);
1:         doTestLargeGapInData(500);
1:     }
0:     
1:     public void doTestLargeGapInData(int window) throws Exception {
1:         BitArrayBin toTest = new BitArrayBin(window);
0:         
1:         int instance = BitArray.LONG_SIZE;
0:         assertTrue("not already set: id=" + instance,  !toTest.setBit(instance, Boolean.TRUE));
0:         
0:         instance = 12 *BitArray.LONG_SIZE;
0:         assertTrue("not already set: id=" + instance,  !toTest.setBit(instance, Boolean.TRUE));
0:         
0:         instance = 9 *BitArray.LONG_SIZE;
0:         assertTrue("not already set: id=" + instance,  !toTest.setBit(instance, Boolean.TRUE));
1:     }
0:     
1:     // window moves in increments of BitArray.LONG_SIZE.
1:     // valid data window on low end can be larger than window
1:     private int roundWindow(int dataSetEnd, int windowSize) {
0:         
1:         int validData = dataSetEnd - windowSize;
1:         int validDataBin = validData / BitArray.LONG_SIZE;
0:         validDataBin += (windowSize % BitArray.LONG_SIZE > 0? 1:0);
1:         int startOfValid = validDataBin * BitArray.LONG_SIZE;
0:         
0:         return dataSetEnd - startOfValid;        
1:     }
0: 
1: }
============================================================================