1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
1:40a7d3b: 
1:40a7d3b: import java.io.Serializable;
1:40a7d3b: 
1:40a7d3b: import javax.jms.BytesMessage;
1:40a7d3b: import javax.jms.Destination;
1:40a7d3b: import javax.jms.IllegalStateException;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.MapMessage;
1:40a7d3b: import javax.jms.Message;
1:40a7d3b: import javax.jms.MessageConsumer;
1:40a7d3b: import javax.jms.MessageListener;
1:40a7d3b: import javax.jms.MessageProducer;
1:40a7d3b: import javax.jms.ObjectMessage;
1:40a7d3b: import javax.jms.Queue;
1:40a7d3b: import javax.jms.QueueBrowser;
1:40a7d3b: import javax.jms.QueueReceiver;
1:40a7d3b: import javax.jms.QueueSender;
1:40a7d3b: import javax.jms.QueueSession;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.jms.StreamMessage;
1:40a7d3b: import javax.jms.TemporaryQueue;
1:40a7d3b: import javax.jms.TemporaryTopic;
1:40a7d3b: import javax.jms.TextMessage;
1:40a7d3b: import javax.jms.Topic;
1:40a7d3b: import javax.jms.TopicPublisher;
1:40a7d3b: import javax.jms.TopicSession;
1:40a7d3b: import javax.jms.TopicSubscriber;
1:40a7d3b: 
1:fd4bb60: import org.apache.activemq.ActiveMQSession;
1:40a7d3b: 
2:40a7d3b: /**
1:40a7d3b:  * Acts as a pass through proxy for a JMS Session object. It intercepts events
1:7167041:  * that are of interest of the ActiveMQManagedConnection. There is one proxy for each session.
1:b0c2a40:  * 
1:92a698f:  * 
1:40a7d3b:  */
1:40a7d3b: public class ManagedSessionProxy implements Session, QueueSession, TopicSession {
1:40a7d3b: 
1:40a7d3b:     private final ActiveMQSession session;
1:540dd5c:     private boolean closed;
1:7167041:     private ManagedConnectionProxy connectionProxy;
1:40a7d3b: 
1:7167041:     public ManagedSessionProxy(ActiveMQSession session, ManagedConnectionProxy connectionProxy) {
1:40a7d3b:         this.session = session;
1:7167041:         this.connectionProxy = connectionProxy;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setUseSharedTxContext(boolean enable) throws JMSException {
1:540dd5c:         if (session.getTransactionContext() != null) {
1:40a7d3b:             ((ManagedTransactionContext)session.getTransactionContext()).setUseSharedTxContext(enable);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void close() throws JMSException {
1:7167041:     	if (closed) {
1:7167041:     		return;
1:7167041:         }
1:40a7d3b:         cleanup();
1:7167041:         connectionProxy.sessionClosed(this);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * Called by the ManagedConnectionProxy to invalidate this proxy.
1:7167041:      * 
1:7167041:      * @throws JMSException if session proxy has a problem
1:40a7d3b:      */
1:40a7d3b:     public void cleanup() throws JMSException {
1:40a7d3b:         closed = true;
1:40a7d3b:         session.close();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:92a698f:      *
1:7167041:      * @return underlying session, unless this proxy is closed
1:7167041:      * @throws javax.jms.JMSException if session is closed
1:40a7d3b:      */
1:40a7d3b:     private Session getSession() throws JMSException {
1:40a7d3b:         if (closed) {
1:40a7d3b:             throw new IllegalStateException("The Session is closed");
1:40a7d3b:         }
1:40a7d3b:         return session;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
4:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void commit() throws JMSException {
1:40a7d3b:         getSession().commit();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param queue
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public QueueBrowser createBrowser(Queue queue) throws JMSException {
1:40a7d3b:         return getSession().createBrowser(queue);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param queue
1:40a7d3b:      * @param messageSelector
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public QueueBrowser createBrowser(Queue queue, String messageSelector) throws JMSException {
1:40a7d3b:         return getSession().createBrowser(queue, messageSelector);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public BytesMessage createBytesMessage() throws JMSException {
1:40a7d3b:         return getSession().createBytesMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param destination
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public MessageConsumer createConsumer(Destination destination) throws JMSException {
1:40a7d3b:         return getSession().createConsumer(destination);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param destination
1:40a7d3b:      * @param messageSelector
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public MessageConsumer createConsumer(Destination destination, String messageSelector) throws JMSException {
1:40a7d3b:         return getSession().createConsumer(destination, messageSelector);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param destination
1:40a7d3b:      * @param messageSelector
1:540dd5c:      * @param noLocal
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:540dd5c:     public MessageConsumer createConsumer(Destination destination, String messageSelector, boolean noLocal) throws JMSException {
1:540dd5c:         return getSession().createConsumer(destination, messageSelector, noLocal);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param topic
1:40a7d3b:      * @param name
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public TopicSubscriber createDurableSubscriber(Topic topic, String name) throws JMSException {
1:40a7d3b:         return getSession().createDurableSubscriber(topic, name);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param topic
1:40a7d3b:      * @param name
1:40a7d3b:      * @param messageSelector
1:40a7d3b:      * @param noLocal
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:540dd5c:     public TopicSubscriber createDurableSubscriber(Topic topic, String name, String messageSelector, boolean noLocal) throws JMSException {
1:40a7d3b:         return getSession().createDurableSubscriber(topic, name, messageSelector, noLocal);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public MapMessage createMapMessage() throws JMSException {
1:40a7d3b:         return getSession().createMapMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public Message createMessage() throws JMSException {
1:40a7d3b:         return getSession().createMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public ObjectMessage createObjectMessage() throws JMSException {
1:40a7d3b:         return getSession().createObjectMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param object
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public ObjectMessage createObjectMessage(Serializable object) throws JMSException {
1:40a7d3b:         return getSession().createObjectMessage(object);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param destination
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public MessageProducer createProducer(Destination destination) throws JMSException {
1:40a7d3b:         return getSession().createProducer(destination);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param queueName
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public Queue createQueue(String queueName) throws JMSException {
1:40a7d3b:         return getSession().createQueue(queueName);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public StreamMessage createStreamMessage() throws JMSException {
1:40a7d3b:         return getSession().createStreamMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public TemporaryQueue createTemporaryQueue() throws JMSException {
1:40a7d3b:         return getSession().createTemporaryQueue();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public TemporaryTopic createTemporaryTopic() throws JMSException {
1:40a7d3b:         return getSession().createTemporaryTopic();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public TextMessage createTextMessage() throws JMSException {
1:40a7d3b:         return getSession().createTextMessage();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param text
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public TextMessage createTextMessage(String text) throws JMSException {
1:40a7d3b:         return getSession().createTextMessage(text);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param topicName
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public Topic createTopic(String topicName) throws JMSException {
1:40a7d3b:         return getSession().createTopic(topicName);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public int getAcknowledgeMode() throws JMSException {
1:40a7d3b:         return getSession().getAcknowledgeMode();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public MessageListener getMessageListener() throws JMSException {
1:40a7d3b:         return getSession().getMessageListener();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public boolean getTransacted() throws JMSException {
1:40a7d3b:         return getSession().getTransacted();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void recover() throws JMSException {
1:40a7d3b:         getSession().recover();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void rollback() throws JMSException {
1:40a7d3b:         getSession().rollback();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param listener
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void setMessageListener(MessageListener listener) throws JMSException {
1:2156886:         getSession().setMessageListener(listener);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param name
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void unsubscribe(String name) throws JMSException {
1:40a7d3b:         getSession().unsubscribe(name);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param queue
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public QueueReceiver createReceiver(Queue queue) throws JMSException {
1:540dd5c:         return ((QueueSession)getSession()).createReceiver(queue);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param queue
1:40a7d3b:      * @param messageSelector
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public QueueReceiver createReceiver(Queue queue, String messageSelector) throws JMSException {
1:540dd5c:         return ((QueueSession)getSession()).createReceiver(queue, messageSelector);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param queue
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public QueueSender createSender(Queue queue) throws JMSException {
1:540dd5c:         return ((QueueSession)getSession()).createSender(queue);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param topic
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public TopicPublisher createPublisher(Topic topic) throws JMSException {
1:540dd5c:         return ((TopicSession)getSession()).createPublisher(topic);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param topic
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public TopicSubscriber createSubscriber(Topic topic) throws JMSException {
1:540dd5c:         return ((TopicSession)getSession()).createSubscriber(topic);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param topic
1:40a7d3b:      * @param messageSelector
1:40a7d3b:      * @param noLocal
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public TopicSubscriber createSubscriber(Topic topic, String messageSelector, boolean noLocal) throws JMSException {
1:540dd5c:         return ((TopicSession)getSession()).createSubscriber(topic, messageSelector, noLocal);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.jms.Session#run()
1:40a7d3b:      */
1:40a7d3b:     public void run() {
1:40a7d3b:         throw new RuntimeException("Operation not supported.");
1:40a7d3b:     }
1:40a7d3b: 
1:b58da3b:     public String toString() {
1:540dd5c:         return "ManagedSessionProxy { " + session + " }";
1:b58da3b:     }
1:b58da3b: 
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     private boolean closed;
1:         if (session.getTransactionContext() != null) {
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException
/////////////////////////////////////////////////////////////////////////
1:      * @param noLocal
1:     public MessageConsumer createConsumer(Destination destination, String messageSelector, boolean noLocal) throws JMSException {
1:         return getSession().createConsumer(destination, messageSelector, noLocal);
/////////////////////////////////////////////////////////////////////////
1:     public TopicSubscriber createDurableSubscriber(Topic topic, String name, String messageSelector, boolean noLocal) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:         return ((QueueSession)getSession()).createReceiver(queue);
/////////////////////////////////////////////////////////////////////////
1:         return ((QueueSession)getSession()).createReceiver(queue, messageSelector);
/////////////////////////////////////////////////////////////////////////
1:         return ((QueueSession)getSession()).createSender(queue);
/////////////////////////////////////////////////////////////////////////
1:         return ((TopicSession)getSession()).createPublisher(topic);
/////////////////////////////////////////////////////////////////////////
1:         return ((TopicSession)getSession()).createSubscriber(topic);
/////////////////////////////////////////////////////////////////////////
1:         return ((TopicSession)getSession()).createSubscriber(topic, messageSelector, noLocal);
/////////////////////////////////////////////////////////////////////////
1:         return "ManagedSessionProxy { " + session + " }";
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQSession;
commit:b58da3b
/////////////////////////////////////////////////////////////////////////
1:     public String toString() {
0:         return "ManagedSessionProxy { "+session+" }";
1:     }
1: 
author:David Jencks
-------------------------------------------------------------------------------
commit:7167041
/////////////////////////////////////////////////////////////////////////
1:  * that are of interest of the ActiveMQManagedConnection. There is one proxy for each session.
/////////////////////////////////////////////////////////////////////////
1:     private ManagedConnectionProxy connectionProxy;
1:     public ManagedSessionProxy(ActiveMQSession session, ManagedConnectionProxy connectionProxy) {
1:         this.connectionProxy = connectionProxy;
/////////////////////////////////////////////////////////////////////////
1:     	if (closed) {
1:     		return;
1:         }
1:         connectionProxy.sessionClosed(this);
1:      * Called by the ManagedConnectionProxy to invalidate this proxy.
1:      * @throws JMSException if session proxy has a problem
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return underlying session, unless this proxy is closed
1:      * @throws javax.jms.JMSException if session is closed
author:Robert Davies
-------------------------------------------------------------------------------
commit:2156886
/////////////////////////////////////////////////////////////////////////
1:         getSession().setMessageListener(listener);
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: import java.io.Serializable;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Destination;
1: import javax.jms.IllegalStateException;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.QueueReceiver;
1: import javax.jms.QueueSender;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.StreamMessage;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TemporaryTopic;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: import javax.jms.TopicSubscriber;
1: 
0: import org.activemq.ActiveMQSession;
1: 
1: /**
1:  * Acts as a pass through proxy for a JMS Session object. It intercepts events
0:  * that are of interest of the ActiveMQManagedConnection.
0:  * 
0:  * @version $Revision$
1:  */
1: public class ManagedSessionProxy implements Session, QueueSession, TopicSession {
1: 
1:     private final ActiveMQSession session;
0:     boolean closed = false;
1: 
0:     public ManagedSessionProxy(ActiveMQSession session) {
1:         this.session = session;
1:     }
1: 
1:     public void setUseSharedTxContext(boolean enable) throws JMSException {
0:         if( session.getTransactionContext() !=null ) {
1:             ((ManagedTransactionContext)session.getTransactionContext()).setUseSharedTxContext(enable);
1:         }
1:     }
1: 
1:     /**
1:      * @throws JMSException
1:      */
1:     public void close() throws JMSException {
1:         cleanup();
1:     }
1: 
1:     /**
0:      * Called by the ActiveMQManagedConnection to invalidate this proxy.
1:      * @throws JMSException 
0:      * 
1:      * @throws JMSException
1:      */
1:     public void cleanup() throws JMSException {
1:         closed = true;
1:         session.close();
1:     }
1: 
1:     /**
0:      * 
1:      */
1:     private Session getSession() throws JMSException {
1:         if (closed) {
1:             throw new IllegalStateException("The Session is closed");
1:         }
1:         return session;
1:     }
1: 
1:     /**
1:      * @throws JMSException
1:      */
1:     public void commit() throws JMSException {
1:         getSession().commit();
1:     }
1: 
1:     /**
1:      * @param queue
1:      * @return
1:      * @throws JMSException
1:      */
1:     public QueueBrowser createBrowser(Queue queue) throws JMSException {
1:         return getSession().createBrowser(queue);
1:     }
1: 
1:     /**
1:      * @param queue
1:      * @param messageSelector
1:      * @return
1:      * @throws JMSException
1:      */
1:     public QueueBrowser createBrowser(Queue queue, String messageSelector) throws JMSException {
1:         return getSession().createBrowser(queue, messageSelector);
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public BytesMessage createBytesMessage() throws JMSException {
1:         return getSession().createBytesMessage();
1:     }
1: 
1:     /**
1:      * @param destination
1:      * @return
1:      * @throws JMSException
1:      */
1:     public MessageConsumer createConsumer(Destination destination) throws JMSException {
1:         return getSession().createConsumer(destination);
1:     }
1: 
1:     /**
1:      * @param destination
1:      * @param messageSelector
1:      * @return
1:      * @throws JMSException
1:      */
1:     public MessageConsumer createConsumer(Destination destination, String messageSelector) throws JMSException {
1:         return getSession().createConsumer(destination, messageSelector);
1:     }
1: 
1:     /**
1:      * @param destination
1:      * @param messageSelector
0:      * @param NoLocal
1:      * @return
1:      * @throws JMSException
1:      */
0:     public MessageConsumer createConsumer(Destination destination, String messageSelector, boolean NoLocal)
0:             throws JMSException {
0:         return getSession().createConsumer(destination, messageSelector, NoLocal);
1:     }
1: 
1:     /**
1:      * @param topic
1:      * @param name
1:      * @return
1:      * @throws JMSException
1:      */
1:     public TopicSubscriber createDurableSubscriber(Topic topic, String name) throws JMSException {
1:         return getSession().createDurableSubscriber(topic, name);
1:     }
1: 
1:     /**
1:      * @param topic
1:      * @param name
1:      * @param messageSelector
1:      * @param noLocal
1:      * @return
1:      * @throws JMSException
1:      */
0:     public TopicSubscriber createDurableSubscriber(Topic topic, String name, String messageSelector, boolean noLocal)
0:             throws JMSException {
1:         return getSession().createDurableSubscriber(topic, name, messageSelector, noLocal);
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public MapMessage createMapMessage() throws JMSException {
1:         return getSession().createMapMessage();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public Message createMessage() throws JMSException {
1:         return getSession().createMessage();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public ObjectMessage createObjectMessage() throws JMSException {
1:         return getSession().createObjectMessage();
1:     }
1: 
1:     /**
1:      * @param object
1:      * @return
1:      * @throws JMSException
1:      */
1:     public ObjectMessage createObjectMessage(Serializable object) throws JMSException {
1:         return getSession().createObjectMessage(object);
1:     }
1: 
1:     /**
1:      * @param destination
1:      * @return
1:      * @throws JMSException
1:      */
1:     public MessageProducer createProducer(Destination destination) throws JMSException {
1:         return getSession().createProducer(destination);
1:     }
1: 
1:     /**
1:      * @param queueName
1:      * @return
1:      * @throws JMSException
1:      */
1:     public Queue createQueue(String queueName) throws JMSException {
1:         return getSession().createQueue(queueName);
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public StreamMessage createStreamMessage() throws JMSException {
1:         return getSession().createStreamMessage();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public TemporaryQueue createTemporaryQueue() throws JMSException {
1:         return getSession().createTemporaryQueue();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public TemporaryTopic createTemporaryTopic() throws JMSException {
1:         return getSession().createTemporaryTopic();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public TextMessage createTextMessage() throws JMSException {
1:         return getSession().createTextMessage();
1:     }
1: 
1:     /**
1:      * @param text
1:      * @return
1:      * @throws JMSException
1:      */
1:     public TextMessage createTextMessage(String text) throws JMSException {
1:         return getSession().createTextMessage(text);
1:     }
1: 
1:     /**
1:      * @param topicName
1:      * @return
1:      * @throws JMSException
1:      */
1:     public Topic createTopic(String topicName) throws JMSException {
1:         return getSession().createTopic(topicName);
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public int getAcknowledgeMode() throws JMSException {
1:         return getSession().getAcknowledgeMode();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public MessageListener getMessageListener() throws JMSException {
1:         return getSession().getMessageListener();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public boolean getTransacted() throws JMSException {
1:         return getSession().getTransacted();
1:     }
1: 
1:     /**
1:      * @throws JMSException
1:      */
1:     public void recover() throws JMSException {
1:         getSession().recover();
1:     }
1: 
1:     /**
1:      * @throws JMSException
1:      */
1:     public void rollback() throws JMSException {
1:         getSession().rollback();
1:     }
1: 
1:     /**
1:      * @param listener
1:      * @throws JMSException
1:      */
1:     public void setMessageListener(MessageListener listener) throws JMSException {
0:         getSession(); // .setMessageListener(listener);
1:     }
1: 
1:     /**
1:      * @param name
1:      * @throws JMSException
1:      */
1:     public void unsubscribe(String name) throws JMSException {
1:         getSession().unsubscribe(name);
1:     }
1: 
1:     /**
1:      * @param queue
1:      * @return
1:      * @throws JMSException
1:      */
1:     public QueueReceiver createReceiver(Queue queue) throws JMSException {
0:         return ((QueueSession) getSession()).createReceiver(queue);
1:     }
1: 
1:     /**
1:      * @param queue
1:      * @param messageSelector
1:      * @return
1:      * @throws JMSException
1:      */
1:     public QueueReceiver createReceiver(Queue queue, String messageSelector) throws JMSException {
0:         return ((QueueSession) getSession()).createReceiver(queue, messageSelector);
1:     }
1: 
1:     /**
1:      * @param queue
1:      * @return
1:      * @throws JMSException
1:      */
1:     public QueueSender createSender(Queue queue) throws JMSException {
0:         return ((QueueSession) getSession()).createSender(queue);
1:     }
1: 
1:     /**
1:      * @param topic
1:      * @return
1:      * @throws JMSException
1:      */
1:     public TopicPublisher createPublisher(Topic topic) throws JMSException {
0:         return ((TopicSession) getSession()).createPublisher(topic);
1:     }
1: 
1:     /**
1:      * @param topic
1:      * @return
1:      * @throws JMSException
1:      */
1:     public TopicSubscriber createSubscriber(Topic topic) throws JMSException {
0:         return ((TopicSession) getSession()).createSubscriber(topic);
1:     }
1: 
1:     /**
1:      * @param topic
1:      * @param messageSelector
1:      * @param noLocal
1:      * @return
1:      * @throws JMSException
1:      */
1:     public TopicSubscriber createSubscriber(Topic topic, String messageSelector, boolean noLocal) throws JMSException {
0:         return ((TopicSession) getSession()).createSubscriber(topic, messageSelector, noLocal);
1:     }
1: 
1:     /**
1:      * @see javax.jms.Session#run()
1:      */
1:     public void run() {
1:         throw new RuntimeException("Operation not supported.");
1:     }
1: 
1: }
============================================================================