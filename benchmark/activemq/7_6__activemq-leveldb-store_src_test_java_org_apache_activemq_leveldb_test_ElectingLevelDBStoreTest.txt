1:1eeae77: /**
1:1eeae77:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1eeae77:  * contributor license agreements.  See the NOTICE file distributed with
1:1eeae77:  * this work for additional information regarding copyright ownership.
1:1eeae77:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1eeae77:  * (the "License"); you may not use this file except in compliance with
1:1eeae77:  * the License.  You may obtain a copy of the License at
1:1eeae77:  *
1:1eeae77:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1eeae77:  *
1:1eeae77:  * Unless required by applicable law or agreed to in writing, software
1:1eeae77:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1eeae77:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1eeae77:  * See the License for the specific language governing permissions and
1:1eeae77:  * limitations under the License.
1:1eeae77:  */
1:1eeae77: package org.apache.activemq.leveldb.test;
11:1eeae77: 
1:1eeae77: import org.apache.activemq.Service;
1:1eeae77: import org.apache.activemq.command.ActiveMQQueue;
1:1eeae77: import org.apache.activemq.leveldb.CountDownFuture;
1:1eeae77: import org.apache.activemq.leveldb.LevelDBStore;
1:1eeae77: import org.apache.activemq.leveldb.replicated.ElectingLevelDBStore;
1:1eeae77: import org.apache.activemq.store.MessageStore;
1:9752e1d: import org.apache.commons.io.FileUtils;
1:9752e1d: import org.junit.After;
1:05f6cd6: import org.junit.Ignore;
1:49a2d96: import org.junit.Test;
1:1eeae77: import org.slf4j.Logger;
1:1eeae77: import org.slf4j.LoggerFactory;
1:1eeae77: 
1:1eeae77: import java.io.File;
1:1eeae77: import java.util.ArrayList;
1:1eeae77: import java.util.HashSet;
1:1eeae77: import java.util.concurrent.TimeUnit;
1:1eeae77: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.*;
1:49a2d96: import static org.junit.Assert.*;
1:1eeae77: 
1:1eeae77: /**
1:1eeae77:  */
1:3ed52ef: public class ElectingLevelDBStoreTest extends ZooKeeperTestSupport {
1:3ed52ef: 
1:1eeae77:     protected static final Logger LOG = LoggerFactory.getLogger(ElectingLevelDBStoreTest.class);
1:9752e1d:     ArrayList<ElectingLevelDBStore> stores = new ArrayList<ElectingLevelDBStore>();
1:9752e1d:     ElectingLevelDBStore master = null;
1:1eeae77: 
1:05f6cd6:     @Ignore("https://issues.apache.org/jira/browse/AMQ-5512")
1:4ca5519:     @Test(timeout = 1000*60*10)
1:1eeae77:     public void testElection() throws Exception {
1:9752e1d:         deleteDirectory("leveldb-node1");
1:9752e1d:         deleteDirectory("leveldb-node2");
1:9752e1d:         deleteDirectory("leveldb-node3");
1:9752e1d: 
1:1eeae77: 
1:1eeae77:         ArrayList<CountDownFuture> pending_starts = new ArrayList<CountDownFuture>();
1:1eeae77: 
1:1eeae77:         for(String dir: new String[]{"leveldb-node1", "leveldb-node2", "leveldb-node3"}) {
1:1eeae77:             ElectingLevelDBStore store = createStoreNode();
1:1eeae77:             store.setDirectory(new File(data_dir(), dir));
1:1eeae77:             stores.add(store);
1:1eeae77:             pending_starts.add(asyncStart(store));
19:1eeae77:         }
1:1eeae77: 
1:1eeae77:         // At least one of the stores should have started.
1:1eeae77:         CountDownFuture f = waitFor(30 * 1000, pending_starts.toArray(new CountDownFuture[pending_starts.size()]));
1:1eeae77:         assertTrue(f!=null);
1:1eeae77:         pending_starts.remove(f);
1:1eeae77: 
1:1eeae77:         // The other stores should not start..
1:1eeae77:         LOG.info("Making sure the other stores don't start");
1:1eeae77:         Thread.sleep(5000);
1:1eeae77:         for(CountDownFuture start: pending_starts) {
1:1eeae77:             assertFalse(start.completed());
1:1eeae77:         }
1:1eeae77: 
1:1eeae77:         // Make sure only of the stores is reporting to be the master.
2:1eeae77:         for(ElectingLevelDBStore store: stores) {
1:1eeae77:             if( store.isMaster() ) {
1:1eeae77:                 assertNull(master);
1:1eeae77:                 master = store;
1:1eeae77:             }
1:1eeae77:         }
1:1eeae77:         assertNotNull(master);
1:1eeae77: 
1:1eeae77:         // We can work out who the slaves are...
1:1eeae77:         HashSet<ElectingLevelDBStore> slaves = new HashSet<ElectingLevelDBStore>(stores);
1:1eeae77:         slaves.remove(master);
1:1eeae77: 
1:1eeae77:         // Start sending messages to the master.
1:1eeae77:         ArrayList<String> expected_list = new ArrayList<String>();
1:1eeae77:         MessageStore ms = master.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:f303f85:         final int TOTAL = 500;
1:1eeae77:         for (int i = 0; i < TOTAL; i++) {
1:f303f85:             if (i % ((int) (TOTAL * 0.10)) == 0) {
1:1eeae77:                 LOG.info("" + (100 * i / TOTAL) + "% done");
1:f303f85:             }
1:1eeae77: 
1:f303f85:             if( i == 250 ) {
1:1eeae77: 
1:f303f85:                 LOG.info("Checking master state");
1:f303f85:                 assertEquals(expected_list, getMessages(ms));
1:1eeae77: 
1:1eeae77:                 // mid way, lets kill the master..
1:1eeae77:                 LOG.info("Killing Master.");
2:1eeae77:                 master.stop();
1:1eeae77: 
1:1eeae77:                 // At least one of the remaining stores should complete starting.
1:1eeae77:                 LOG.info("Waiting for slave takeover...");
1:1eeae77:                 f = waitFor(60 * 1000, pending_starts.toArray(new CountDownFuture[pending_starts.size()]));
1:1eeae77:                 assertTrue(f!=null);
1:1eeae77:                 pending_starts.remove(f);
1:1eeae77: 
1:1eeae77:                 // Make sure one and only one of the slaves becomes the master..
1:1eeae77:                 master = null;
1:1eeae77:                 for(ElectingLevelDBStore store: slaves) {
1:1eeae77:                     if( store.isMaster() ) {
1:1eeae77:                         assertNull(master);
1:1eeae77:                         master = store;
1:1eeae77:                     }
1:1eeae77:                 }
1:1eeae77: 
1:1eeae77:                 assertNotNull(master);
1:1eeae77:                 slaves.remove(master);
1:1eeae77: 
1:1eeae77:                 ms = master.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:1eeae77:             }
1:1eeae77: 
1:1eeae77:             String msgid = "m:" + i;
1:1eeae77:             addMessage(ms, msgid);
1:1eeae77:             expected_list.add(msgid);
1:1eeae77:         }
1:1eeae77: 
2:1eeae77:         LOG.info("Checking master state");
1:a52bfe6:         ArrayList<String> messagesInStore = getMessages(ms);
1:a52bfe6:         int index=0;
1:a52bfe6:         for (String id: expected_list) {
1:a52bfe6:             if (!id.equals(messagesInStore.get(index))) {
1:a52bfe6:                 LOG.info("Mismatch for expected:" + id + ", got:" + messagesInStore.get(index));
1:a52bfe6:                 break;
1:a52bfe6:             }
1:a52bfe6:             index++;
1:a52bfe6:         }
1:a52bfe6:         assertEquals(expected_list, messagesInStore);
1:1eeae77:     }
1:1eeae77: 
1:f303f85:     @Test(timeout = 1000 * 60 * 10)
1:5e63ddd:     public void testZooKeeperServerFailure() throws Exception {
1:5e63ddd: 
1:5e63ddd:         final ArrayList<ElectingLevelDBStore> stores = new ArrayList<ElectingLevelDBStore>();
1:5e63ddd:         ArrayList<CountDownFuture> pending_starts = new ArrayList<CountDownFuture>();
1:5e63ddd: 
1:5e63ddd:         for (String dir : new String[]{"leveldb-node1", "leveldb-node2", "leveldb-node3"}) {
1:5e63ddd:             ElectingLevelDBStore store = createStoreNode();
1:5e63ddd:             store.setDirectory(new File(data_dir(), dir));
1:5e63ddd:             stores.add(store);
1:5e63ddd:             pending_starts.add(asyncStart(store));
1:5e63ddd:         }
1:5e63ddd: 
1:5e63ddd:         // At least one of the stores should have started.
1:5e63ddd:         CountDownFuture f = waitFor(30 * 1000, pending_starts.toArray(new CountDownFuture[pending_starts.size()]));
1:5e63ddd:         assertTrue(f != null);
1:5e63ddd:         pending_starts.remove(f);
1:5e63ddd: 
1:5e63ddd:         // The other stores should not start..
1:5e63ddd:         LOG.info("Making sure the other stores don't start");
1:5e63ddd:         Thread.sleep(5000);
1:5e63ddd:         for (CountDownFuture start : pending_starts) {
1:5e63ddd:             assertFalse(start.completed());
1:5e63ddd:         }
1:5e63ddd: 
1:5e63ddd:         // Stop ZooKeeper..
1:5e63ddd:         LOG.info("SHUTTING DOWN ZooKeeper!");
1:5e63ddd:         connector.shutdown();
1:5e63ddd: 
1:5e63ddd:         // None of the store should be slaves...
1:5e63ddd:         within( 30, TimeUnit.SECONDS, new Task(){
1:5e63ddd:             public void run() throws Exception {
2:5e63ddd:                 for (ElectingLevelDBStore store : stores) {
1:5e63ddd:                     assertFalse(store.isMaster());
1:5e63ddd:                 }
1:5e63ddd:             }
1:5e63ddd:         });
1:9752e1d:     }
1:5e63ddd: 
1:a39e51e:     /*
1:a39e51e:      * testAMQ5082 tests the behavior of an ElectingLevelDBStore
1:a39e51e:      * pool when ZooKeeper I/O timeouts occur. See issue AMQ-5082.
1:a39e51e:      */
1:a39e51e:     @Test(timeout = 1000 * 60 * 5)
1:a39e51e:     public void testAMQ5082() throws Throwable {
1:a39e51e:         final ArrayList<ElectingLevelDBStore> stores = new ArrayList<ElectingLevelDBStore>();
1:a39e51e: 
1:a39e51e:         LOG.info("Launching 3 stores");
1:a39e51e:         for (String dir : new String[]{"leveldb-node1", "leveldb-node2", "leveldb-node3"}) {
1:a39e51e:             ElectingLevelDBStore store = createStoreNode();
1:a39e51e:             store.setDirectory(new File(data_dir(), dir));
1:a39e51e:             stores.add(store);
1:a39e51e:             asyncStart(store);
1:a39e51e:         }
1:a39e51e: 
1:a39e51e:         LOG.info("Waiting 30s for stores to start");
1:a39e51e:         Thread.sleep(30 * 1000);
1:a39e51e: 
1:a39e51e:         LOG.info("Checking for a single master");
1:a39e51e:         ElectingLevelDBStore master = null;
1:a39e51e:         for (ElectingLevelDBStore store: stores) {
1:a39e51e:             if (store.isMaster()) {
1:a39e51e:                 assertNull(master);
1:a39e51e:                 master = store;
1:a39e51e:             }
1:a39e51e:         }
1:a39e51e:         assertNotNull(master);
1:a39e51e: 
1:a39e51e:         LOG.info("Imposing 1s I/O wait on Zookeeper connections, waiting 30s to confirm that quorum is not lost");
1:a39e51e:         this.connector.testHandle.setIOWaitMillis(1 * 1000, 30 * 1000);
1:a39e51e: 
1:a39e51e:         LOG.info("Confirming that the quorum has not been lost");
1:a39e51e:         for (ElectingLevelDBStore store: stores) {
1:a39e51e:             if (store.isMaster()) {
1:a39e51e:                 assertTrue(master == store);
1:a39e51e:             }
1:a39e51e:         }
1:a39e51e: 
1:a39e51e:         LOG.info("Imposing 11s I/O wait on Zookeeper connections, waiting 30s for quorum to be lost");
1:a39e51e:         this.connector.testHandle.setIOWaitMillis(11 * 1000, 30 * 1000);
1:a39e51e: 
1:a39e51e:         LOG.info("Confirming that the quorum has been lost");
1:a39e51e:         for (ElectingLevelDBStore store: stores) {
1:a39e51e:             assertFalse(store.isMaster());
1:a39e51e:         }
1:a39e51e:         master = null;
1:a39e51e: 
1:a39e51e:         LOG.info("Lifting I/O wait on Zookeeper connections, waiting 30s for quorum to be re-established");
1:a39e51e:         this.connector.testHandle.setIOWaitMillis(0, 30 * 1000);
1:a39e51e: 
1:a39e51e:         LOG.info("Checking for a single master");
1:a39e51e:         for (ElectingLevelDBStore store: stores) {
1:a39e51e:             if (store.isMaster()) {
1:a39e51e:                 assertNull(master);
1:a39e51e:                 master = store;
1:a39e51e:             }
1:a39e51e:         }
1:a39e51e:         assertNotNull(master);
1:a39e51e:     }
1:a39e51e: 
1:9752e1d:     @After
1:9752e1d:     public void stop() throws Exception {
1:9752e1d:         if (master != null) {
1:9752e1d:             master.stop();
1:9752e1d:             FileUtils.deleteDirectory(master.directory());
1:5e63ddd:         }
1:9752e1d:         for(ElectingLevelDBStore store: stores) {
1:9752e1d:             store.stop();
1:9752e1d:             FileUtils.deleteDirectory(store.directory());
1:9752e1d:         }
1:9752e1d:         stores.clear();
1:5e63ddd:     }
1:5e63ddd: 
1:1eeae77:     private CountDownFuture asyncStart(final Service service) {
1:1eeae77:         final CountDownFuture<Throwable> f = new CountDownFuture<Throwable>();
1:1eeae77:         LevelDBStore.BLOCKING_EXECUTOR().execute(new Runnable() {
1:1eeae77:             public void run() {
1:5e63ddd:                 try {
1:1eeae77:                     service.start();
1:1eeae77:                     f.set(null);
1:5e63ddd:                 } catch (Throwable e) {
1:1eeae77:                     e.printStackTrace();
1:1eeae77:                     f.set(e);
1:5e63ddd:                 }
1:5e63ddd:             }
1:1eeae77:         });
2:1eeae77:         return f;
1:5e63ddd:     }
1:5e63ddd: 
1:1eeae77:     private CountDownFuture asyncStop(final Service service) {
1:1eeae77:         final CountDownFuture<Throwable> f = new CountDownFuture<Throwable>();
1:1eeae77:         LevelDBStore.BLOCKING_EXECUTOR().execute(new Runnable() {
1:1eeae77:             public void run() {
2:1eeae77:                 try {
1:1eeae77:                     service.stop();
1:1eeae77:                     f.set(null);
2:1eeae77:                 } catch (Throwable e) {
1:1eeae77:                     e.printStackTrace();
1:1eeae77:                     f.set(e);
1:5e63ddd:                 }
1:5e63ddd:             }
1:1eeae77:         });
1:1eeae77:         return f;
1:5e63ddd:     }
1:5e63ddd: 
1:1eeae77:     private ElectingLevelDBStore createStoreNode() {
1:1eeae77:         ElectingLevelDBStore store = new ElectingLevelDBStore();
1:1eeae77:         store.setSecurityToken("foo");
1:ee97df7:         store.setLogSize(1024 * 200);
1:e507461:         store.setReplicas(2);
1:5616d39:         store.setSync("quorum_disk");
1:6c2e2f5:         store.setZkSessionTimeout("15s");
1:1eeae77:         store.setZkAddress("localhost:" + connector.getLocalPort());
1:1eeae77:         store.setZkPath("/broker-stores");
1:1eeae77:         store.setBrokerName("foo");
1:b720b26:         store.setHostname("localhost");
1:1eeae77:         store.setBind("tcp://0.0.0.0:0");
1:1eeae77:         return store;
1:5e63ddd:     }
1:1eeae77: 
1:1eeae77: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:a39e51e
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * testAMQ5082 tests the behavior of an ElectingLevelDBStore
1:      * pool when ZooKeeper I/O timeouts occur. See issue AMQ-5082.
1:      */
1:     @Test(timeout = 1000 * 60 * 5)
1:     public void testAMQ5082() throws Throwable {
1:         final ArrayList<ElectingLevelDBStore> stores = new ArrayList<ElectingLevelDBStore>();
1: 
1:         LOG.info("Launching 3 stores");
1:         for (String dir : new String[]{"leveldb-node1", "leveldb-node2", "leveldb-node3"}) {
1:             ElectingLevelDBStore store = createStoreNode();
1:             store.setDirectory(new File(data_dir(), dir));
1:             stores.add(store);
1:             asyncStart(store);
1:         }
1: 
1:         LOG.info("Waiting 30s for stores to start");
1:         Thread.sleep(30 * 1000);
1: 
1:         LOG.info("Checking for a single master");
1:         ElectingLevelDBStore master = null;
1:         for (ElectingLevelDBStore store: stores) {
1:             if (store.isMaster()) {
1:                 assertNull(master);
1:                 master = store;
1:             }
1:         }
1:         assertNotNull(master);
1: 
1:         LOG.info("Imposing 1s I/O wait on Zookeeper connections, waiting 30s to confirm that quorum is not lost");
1:         this.connector.testHandle.setIOWaitMillis(1 * 1000, 30 * 1000);
1: 
1:         LOG.info("Confirming that the quorum has not been lost");
1:         for (ElectingLevelDBStore store: stores) {
1:             if (store.isMaster()) {
1:                 assertTrue(master == store);
1:             }
1:         }
1: 
1:         LOG.info("Imposing 11s I/O wait on Zookeeper connections, waiting 30s for quorum to be lost");
1:         this.connector.testHandle.setIOWaitMillis(11 * 1000, 30 * 1000);
1: 
1:         LOG.info("Confirming that the quorum has been lost");
1:         for (ElectingLevelDBStore store: stores) {
1:             assertFalse(store.isMaster());
1:         }
1:         master = null;
1: 
1:         LOG.info("Lifting I/O wait on Zookeeper connections, waiting 30s for quorum to be re-established");
1:         this.connector.testHandle.setIOWaitMillis(0, 30 * 1000);
1: 
1:         LOG.info("Checking for a single master");
1:         for (ElectingLevelDBStore store: stores) {
1:             if (store.isMaster()) {
1:                 assertNull(master);
1:                 master = store;
1:             }
1:         }
1:         assertNotNull(master);
1:     }
1: 
commit:ee97df7
/////////////////////////////////////////////////////////////////////////
1:         store.setLogSize(1024 * 200);
author:gtully
-------------------------------------------------------------------------------
commit:05f6cd6
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1:     @Ignore("https://issues.apache.org/jira/browse/AMQ-5512")
commit:f303f85
/////////////////////////////////////////////////////////////////////////
1:         final int TOTAL = 500;
1:             if (i % ((int) (TOTAL * 0.10)) == 0) {
1:             }
1:             if( i == 250 ) {
1:                 LOG.info("Checking master state");
1:                 assertEquals(expected_list, getMessages(ms));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 1000 * 60 * 10)
commit:6588aea
/////////////////////////////////////////////////////////////////////////
0:         final int TOTAL = 2;
0:             //if (i % ((int) (TOTAL * 0.10)) == 0) {
0:             //}
0:             if( i == 1 ) {
0:                 //LOG.info("Checking master state");
0:                 //assertEquals(expected_list, getMessages(ms));
/////////////////////////////////////////////////////////////////////////
0:     //@Test(timeout = 1000 * 60 * 10)
commit:a52bfe6
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<String> messagesInStore = getMessages(ms);
1:         int index=0;
1:         for (String id: expected_list) {
1:             if (!id.equals(messagesInStore.get(index))) {
1:                 LOG.info("Mismatch for expected:" + id + ", got:" + messagesInStore.get(index));
1:                 break;
1:             }
1:             index++;
1:         }
1:         assertEquals(expected_list, messagesInStore);
commit:5616d39
/////////////////////////////////////////////////////////////////////////
1:         store.setSync("quorum_disk");
commit:6c2e2f5
/////////////////////////////////////////////////////////////////////////
1:         store.setZkSessionTimeout("15s");
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9752e1d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.FileUtils;
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     ArrayList<ElectingLevelDBStore> stores = new ArrayList<ElectingLevelDBStore>();
1:     ElectingLevelDBStore master = null;
1:         deleteDirectory("leveldb-node1");
1:         deleteDirectory("leveldb-node2");
1:         deleteDirectory("leveldb-node3");
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     }
1:     @After
1:     public void stop() throws Exception {
1:         if (master != null) {
1:             master.stop();
1:             FileUtils.deleteDirectory(master.directory());
1:         for(ElectingLevelDBStore store: stores) {
1:             store.stop();
1:             FileUtils.deleteDirectory(store.directory());
1:         }
1:         stores.clear();
author:Kevin Earls
-------------------------------------------------------------------------------
commit:4ca5519
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 1000*60*10)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 1000 * 60 * 10)
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:3ed52ef
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class ElectingLevelDBStoreTest extends ZooKeeperTestSupport {
1: 
/////////////////////////////////////////////////////////////////////////
commit:5e63ddd
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 1000 * 60 * 60)
1:     public void testZooKeeperServerFailure() throws Exception {
1: 
1:         final ArrayList<ElectingLevelDBStore> stores = new ArrayList<ElectingLevelDBStore>();
1:         ArrayList<CountDownFuture> pending_starts = new ArrayList<CountDownFuture>();
1: 
1:         for (String dir : new String[]{"leveldb-node1", "leveldb-node2", "leveldb-node3"}) {
1:             ElectingLevelDBStore store = createStoreNode();
1:             store.setDirectory(new File(data_dir(), dir));
1:             stores.add(store);
1:             pending_starts.add(asyncStart(store));
1:         }
1: 
1:         // At least one of the stores should have started.
1:         CountDownFuture f = waitFor(30 * 1000, pending_starts.toArray(new CountDownFuture[pending_starts.size()]));
1:         assertTrue(f != null);
1:         pending_starts.remove(f);
1: 
1:         // The other stores should not start..
1:         LOG.info("Making sure the other stores don't start");
1:         Thread.sleep(5000);
1:         for (CountDownFuture start : pending_starts) {
1:             assertFalse(start.completed());
1:         }
1: 
1:         // Stop ZooKeeper..
1:         LOG.info("SHUTTING DOWN ZooKeeper!");
1:         connector.shutdown();
1: 
1:         // None of the store should be slaves...
1:         within( 30, TimeUnit.SECONDS, new Task(){
1:             public void run() throws Exception {
1:                 for (ElectingLevelDBStore store : stores) {
1:                     assertFalse(store.isMaster());
1:                 }
1:             }
1:         });
1: 
1:         for (ElectingLevelDBStore store : stores) {
0:             store.stop();
1:         }
1:     }
1: 
0:     static interface Task {
0:         public void run() throws Exception;
1:     }
1: 
0:     private void within(int time, TimeUnit unit, Task task) throws InterruptedException {
0:         long timeMS = unit.toMillis(time);
0:         long deadline = System.currentTimeMillis() + timeMS;
0:         while (true) {
1:             try {
0:                 task.run();
0:                 return;
1:             } catch (Throwable e) {
0:                 long remaining = deadline - System.currentTimeMillis();
0:                 if( remaining <=0 ) {
0:                     if( e instanceof RuntimeException ) {
0:                         throw (RuntimeException)e;
1:                     }
0:                     if( e instanceof Error ) {
0:                         throw (Error)e;
1:                     }
0:                     throw new RuntimeException(e);
1:                 }
0:                 Thread.sleep(Math.min(timeMS/10, remaining));
1:             }
1:         }
1:     }
1: 
commit:b720b26
/////////////////////////////////////////////////////////////////////////
1:         store.setHostname("localhost");
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:59af747
/////////////////////////////////////////////////////////////////////////
0:         System.out.println("ZooKeeper started");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:49a2d96
/////////////////////////////////////////////////////////////////////////
0: import org.junit.After;
0: import org.junit.Before;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
0: public class ElectingLevelDBStoreTest {
/////////////////////////////////////////////////////////////////////////
0:     @Before
0:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     @After
0:     public void tearDown() throws Exception {
0:     @Test(timeout = 1000*60*60)
commit:e507461
/////////////////////////////////////////////////////////////////////////
1:         store.setReplicas(2);
commit:1eeae77
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.leveldb.test;
1: 
0: import junit.framework.TestCase;
1: import org.apache.activemq.Service;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.leveldb.CountDownFuture;
1: import org.apache.activemq.leveldb.LevelDBStore;
1: import org.apache.activemq.leveldb.replicated.ElectingLevelDBStore;
0: import org.apache.activemq.leveldb.util.FileSupport;
1: import org.apache.activemq.store.MessageStore;
0: import org.apache.zookeeper.server.NIOServerCnxnFactory;
0: import org.apache.zookeeper.server.ZooKeeperServer;
0: import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.File;
0: import java.net.InetSocketAddress;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.concurrent.TimeUnit;
1: import static org.apache.activemq.leveldb.test.ReplicationTestSupport.*;
1: 
1: /**
1:  */
0: public class ElectingLevelDBStoreTest extends TestCase {
1:     protected static final Logger LOG = LoggerFactory.getLogger(ElectingLevelDBStoreTest.class);
1: 
0:     NIOServerCnxnFactory connector;
1: 
0:     static File data_dir() {
0:         return new File("target/activemq-data/leveldb-elections");
1:     }
1: 
1: 
0:     @Override
0:     protected void setUp() throws Exception {
0:         FileSupport.toRichFile(data_dir()).recursiveDelete();
1: 
0:         System.out.println("Starting ZooKeeper");
0:         ZooKeeperServer zk_server = new ZooKeeperServer();
0:         zk_server.setTickTime(500);
0:         zk_server.setTxnLogFactory(new FileTxnSnapLog(new File(data_dir(), "zk-log"), new File(data_dir(), "zk-data")));
0:         connector = new NIOServerCnxnFactory();
0:         connector.configure(new InetSocketAddress(0), 100);
0:         connector.startup(zk_server);
0:         System.out.println("ZooKeeper Started");
1:     }
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
0:         if( connector!=null ) {
0:           connector.shutdown();
0:           connector = null;
1:         }
1:     }
1: 
1:     public void testElection() throws Exception {
1: 
0:         ArrayList<ElectingLevelDBStore> stores = new ArrayList<ElectingLevelDBStore>();
1:         ArrayList<CountDownFuture> pending_starts = new ArrayList<CountDownFuture>();
1: 
1:         for(String dir: new String[]{"leveldb-node1", "leveldb-node2", "leveldb-node3"}) {
1:             ElectingLevelDBStore store = createStoreNode();
1:             store.setDirectory(new File(data_dir(), dir));
1:             stores.add(store);
1:             pending_starts.add(asyncStart(store));
1:         }
1: 
1:         // At least one of the stores should have started.
1:         CountDownFuture f = waitFor(30 * 1000, pending_starts.toArray(new CountDownFuture[pending_starts.size()]));
1:         assertTrue(f!=null);
1:         pending_starts.remove(f);
1: 
1:         // The other stores should not start..
1:         LOG.info("Making sure the other stores don't start");
1:         Thread.sleep(5000);
1:         for(CountDownFuture start: pending_starts) {
1:             assertFalse(start.completed());
1:         }
1: 
1:         // Make sure only of the stores is reporting to be the master.
0:         ElectingLevelDBStore master = null;
1:         for(ElectingLevelDBStore store: stores) {
1:             if( store.isMaster() ) {
1:                 assertNull(master);
1:                 master = store;
1:             }
1:         }
1:         assertNotNull(master);
1: 
1:         // We can work out who the slaves are...
1:         HashSet<ElectingLevelDBStore> slaves = new HashSet<ElectingLevelDBStore>(stores);
1:         slaves.remove(master);
1: 
1:         // Start sending messages to the master.
1:         ArrayList<String> expected_list = new ArrayList<String>();
1:         MessageStore ms = master.createQueueMessageStore(new ActiveMQQueue("TEST"));
0:         final int TOTAL = 500;
1:         for (int i = 0; i < TOTAL; i++) {
0:             if (i % ((int) (TOTAL * 0.10)) == 0) {
1:                 LOG.info("" + (100 * i / TOTAL) + "% done");
1:             }
1: 
0:             if( i == 250 ) {
1: 
1:                 LOG.info("Checking master state");
0:                 assertEquals(expected_list, getMessages(ms));
1: 
1:                 // mid way, lets kill the master..
1:                 LOG.info("Killing Master.");
1:                 master.stop();
1: 
1:                 // At least one of the remaining stores should complete starting.
1:                 LOG.info("Waiting for slave takeover...");
1:                 f = waitFor(60 * 1000, pending_starts.toArray(new CountDownFuture[pending_starts.size()]));
1:                 assertTrue(f!=null);
1:                 pending_starts.remove(f);
1: 
1:                 // Make sure one and only one of the slaves becomes the master..
1:                 master = null;
1:                 for(ElectingLevelDBStore store: slaves) {
1:                     if( store.isMaster() ) {
1:                         assertNull(master);
1:                         master = store;
1:                     }
1:                 }
1: 
1:                 assertNotNull(master);
1:                 slaves.remove(master);
1: 
1:                 ms = master.createQueueMessageStore(new ActiveMQQueue("TEST"));
1:             }
1: 
1:             String msgid = "m:" + i;
1:             addMessage(ms, msgid);
1:             expected_list.add(msgid);
1:         }
1: 
1:         LOG.info("Checking master state");
0:         assertEquals(expected_list, getMessages(ms));
1: 
1:         master.stop();
1:         for(ElectingLevelDBStore store: stores) {
0:             store.stop();
1:         }
1:     }
1: 
0:     private CountDownFuture waitFor(int timeout, CountDownFuture... futures) throws InterruptedException {
0:         long deadline =  System.currentTimeMillis()+timeout;
0:         while( true ) {
0:             for (CountDownFuture f:futures) {
0:                 if( f.await(1, TimeUnit.MILLISECONDS) ) {
1:                     return f;
1:                 }
1:             }
0:             long remaining = deadline - System.currentTimeMillis();
0:             if( remaining < 0 ) {
0:                 return null;
0:             } else {
0:                 Thread.sleep(Math.min(remaining / 10, 100L));
1:             }
1:         }
1:     }
1: 
1:     private CountDownFuture asyncStart(final Service service) {
1:         final CountDownFuture<Throwable> f = new CountDownFuture<Throwable>();
1:         LevelDBStore.BLOCKING_EXECUTOR().execute(new Runnable() {
1:             public void run() {
1:                 try {
1:                     service.start();
1:                     f.set(null);
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
1:                     f.set(e);
1:                 }
1:             }
1:         });
1:         return f;
1:     }
1: 
1:     private CountDownFuture asyncStop(final Service service) {
1:         final CountDownFuture<Throwable> f = new CountDownFuture<Throwable>();
1:         LevelDBStore.BLOCKING_EXECUTOR().execute(new Runnable() {
1:             public void run() {
1:                 try {
1:                     service.stop();
1:                     f.set(null);
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
1:                     f.set(e);
1:                 }
1:             }
1:         });
1:         return f;
1:     }
1: 
1:     private ElectingLevelDBStore createStoreNode() {
1:         ElectingLevelDBStore store = new ElectingLevelDBStore();
1:         store.setSecurityToken("foo");
0:         store.setLogSize(1023 * 200);
0:         store.setMinReplica(1);
1:         store.setZkAddress("localhost:" + connector.getLocalPort());
1:         store.setZkPath("/broker-stores");
1:         store.setBrokerName("foo");
1:         store.setBind("tcp://0.0.0.0:0");
1:         return store;
1:     }
1: 
1: }
============================================================================