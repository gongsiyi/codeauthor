1:e166ae3: /**
1:e166ae3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e166ae3:  * contributor license agreements.  See the NOTICE file distributed with
1:e166ae3:  * this work for additional information regarding copyright ownership.
1:e166ae3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e166ae3:  * (the "License"); you may not use this file except in compliance with
1:e166ae3:  * the License.  You may obtain a copy of the License at
1:e166ae3:  *
1:e166ae3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e166ae3:  *
1:e166ae3:  * Unless required by applicable law or agreed to in writing, software
1:e166ae3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e166ae3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e166ae3:  * See the License for the specific language governing permissions and
1:e166ae3:  * limitations under the License.
1:e166ae3:  */
1:e166ae3: package org.apache.activemq.bugs;
1:e166ae3: 
1:e166ae3: import javax.jms.Connection;
1:e166ae3: import javax.jms.DeliveryMode;
1:e166ae3: import javax.jms.JMSException;
1:e166ae3: import javax.jms.MessageProducer;
1:e166ae3: import javax.jms.Session;
1:e166ae3: import javax.jms.TemporaryQueue;
1:e166ae3: import javax.jms.TextMessage;
1:e166ae3: import org.apache.activemq.ActiveMQConnectionFactory;
1:e166ae3: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:e166ae3: import org.apache.activemq.broker.BrokerService;
1:e166ae3: 
1:8b1e16d: public class AMQ2571Test extends EmbeddedBrokerTestSupport {
1:e166ae3: 
1:e166ae3:     public void testTempQueueClosing() {
1:e166ae3:         try {
1:e166ae3:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(this.bindAddress);
1:3307d57:             connectionFactory.setAlwaysSyncSend(true);
1:e166ae3: 
1:e166ae3:             // First create session that will own the TempQueue
1:e166ae3:             Connection connectionA = connectionFactory.createConnection();
1:e166ae3:             connectionA.start();
1:e166ae3: 
1:e166ae3:             Session sessionA = connectionA.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e166ae3: 
1:e166ae3:             TemporaryQueue tempQueue = sessionA.createTemporaryQueue();
1:e166ae3: 
1:e166ae3:             // Next, create session that will put messages on the queue.
1:e166ae3:             Connection connectionB = connectionFactory.createConnection();
1:e166ae3:             connectionB.start();
1:e166ae3: 
1:e166ae3:             Session sessionB = connectionB.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e166ae3: 
1:e166ae3:             // Create a producer for connection B.
1:e166ae3:             final MessageProducer producerB = sessionB.createProducer(tempQueue);
1:e166ae3:             producerB.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:e166ae3: 
1:e166ae3:             final TextMessage message = sessionB.createTextMessage("Testing AMQ TempQueue.");
1:e166ae3: 
1:e166ae3:             Thread sendingThread = new Thread(new Runnable() {
1:e166ae3:                 public void run() {
1:e166ae3:                     try {
1:3307d57:                         long end = System.currentTimeMillis() + 5*60*1000;
1:3307d57:                         // wait for exception on send
1:3307d57:                         while (System.currentTimeMillis() < end) {
1:e166ae3:                             producerB.send(message);
1:e166ae3:                         }
1:e166ae3:                     } catch (JMSException e) {
1:3307d57:                         e.printStackTrace();
1:e166ae3:                     }
1:e166ae3:                 }
1:e166ae3:             });
1:e166ae3: 
1:e166ae3:             // Send 5000 messages.
1:e166ae3:             sendingThread.start();
1:e166ae3:             // Now close connection A. This will remove the TempQueue.
1:e166ae3:             connectionA.close();
1:e166ae3:             // Wait for the thread to finish.
1:3307d57:             sendingThread.join(5*60*1000);
1:e166ae3: 
1:e166ae3:             // Sleep for a while to make sure that we should know that the
1:e166ae3:             // TempQueue is gone.
1:204f91f:             //Thread.sleep(50);
1:e166ae3: 
1:e166ae3:             // Now we test if we are able to send again.
1:e166ae3:             try {
1:e166ae3:                 producerB.send(message);
1:e166ae3:                 fail("Involuntary recreated temporary queue.");
1:e166ae3:             } catch (JMSException e) {
1:e166ae3:                 // Got exception, just as we wanted because the creator of
1:e166ae3:                 // the TempQueue had closed the connection prior to the send.
1:e166ae3:                 assertTrue("TempQueue does not exist anymore.", true);
1:e166ae3:             }
1:e166ae3:         } catch (Exception e) {
1:e166ae3:             fail("Unexpected exception " + e);
1:e166ae3:         }
1:e166ae3:     }
1:e166ae3: 
1:e166ae3:     @Override
1:e166ae3:     protected void setUp() throws Exception {
1:e166ae3:         bindAddress = "vm://localhost";
1:3307d57:         setAutoFail(true);
1:e166ae3:         super.setUp();
1:e166ae3:     }
1:e166ae3: 
1:e166ae3:     @Override
1:e166ae3:     protected BrokerService createBroker() throws Exception {
1:e166ae3:         BrokerService answer = new BrokerService();
1:e166ae3:         answer.setPersistent(false);
1:e166ae3:         answer.setUseJmx(false);
1:e166ae3:         return answer;
1:e166ae3:     }
1:e166ae3: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:3307d57
/////////////////////////////////////////////////////////////////////////
1:             connectionFactory.setAlwaysSyncSend(true);
/////////////////////////////////////////////////////////////////////////
1:                         long end = System.currentTimeMillis() + 5*60*1000;
1:                         // wait for exception on send
1:                         while (System.currentTimeMillis() < end) {
1:                         e.printStackTrace();
/////////////////////////////////////////////////////////////////////////
1:             sendingThread.join(5*60*1000);
/////////////////////////////////////////////////////////////////////////
1:         setAutoFail(true);
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:204f91f
/////////////////////////////////////////////////////////////////////////
0:                         for (int i = 0; i < 100000; i++) {
/////////////////////////////////////////////////////////////////////////
1:             //Thread.sleep(50);
commit:8b1e16d
/////////////////////////////////////////////////////////////////////////
1: public class AMQ2571Test extends EmbeddedBrokerTestSupport {
commit:e166ae3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: 
0: public class AMQ2571 extends EmbeddedBrokerTestSupport {
1: 
1:     public void testTempQueueClosing() {
1:         try {
1:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(this.bindAddress);
1: 
1:             // First create session that will own the TempQueue
1:             Connection connectionA = connectionFactory.createConnection();
1:             connectionA.start();
1: 
1:             Session sessionA = connectionA.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             TemporaryQueue tempQueue = sessionA.createTemporaryQueue();
1: 
1:             // Next, create session that will put messages on the queue.
1:             Connection connectionB = connectionFactory.createConnection();
1:             connectionB.start();
1: 
1:             Session sessionB = connectionB.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             // Create a producer for connection B.
1:             final MessageProducer producerB = sessionB.createProducer(tempQueue);
1:             producerB.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:             final TextMessage message = sessionB.createTextMessage("Testing AMQ TempQueue.");
1: 
1:             Thread sendingThread = new Thread(new Runnable() {
1:                 public void run() {
1:                     try {
0:                         for (int i = 0; i < 5000; i++) {
1:                             producerB.send(message);
1:                         }
1:                     } catch (JMSException e) {
0:                         // We don't get this exception every time.
0:                         // Not getting it means that we don't know if the
0:                         // creator of the TempQueue has disconnected.
1:                     }
1:                 }
1:             });
1: 
1:             // Send 5000 messages.
1:             sendingThread.start();
1:             // Now close connection A. This will remove the TempQueue.
1:             connectionA.close();
1:             // Wait for the thread to finish.
0:             sendingThread.join();
1: 
1:             // Sleep for a while to make sure that we should know that the
1:             // TempQueue is gone.
0:             Thread.sleep(5000);
1: 
1:             // Now we test if we are able to send again.
1:             try {
1:                 producerB.send(message);
1:                 fail("Involuntary recreated temporary queue.");
1:             } catch (JMSException e) {
1:                 // Got exception, just as we wanted because the creator of
1:                 // the TempQueue had closed the connection prior to the send.
1:                 assertTrue("TempQueue does not exist anymore.", true);
1:             }
1:         } catch (Exception e) {
1:             fail("Unexpected exception " + e);
1:         }
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         bindAddress = "vm://localhost";
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(false);
1:         answer.setUseJmx(false);
0:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: }
============================================================================