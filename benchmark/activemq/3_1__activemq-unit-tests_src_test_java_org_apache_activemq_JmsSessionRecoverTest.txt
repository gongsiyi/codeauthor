1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
9:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
25:d29ca2a: 
1:230a86c: import java.util.concurrent.CountDownLatch;
1:230a86c: import java.util.concurrent.TimeUnit;
1:230a86c: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: 
1:230a86c: import junit.framework.TestCase;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Testcases to see if Session.recover() work.
1:b0c2a40:  * 
1:230a86c:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsSessionRecoverTest extends TestCase {
1:d29ca2a: 
1:d29ca2a:     private Connection connection;
1:d29ca2a:     private ActiveMQConnectionFactory factory;
1:d29ca2a:     private Destination dest;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see junit.framework.TestCase#setUp()
1:d29ca2a:      */
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:d29ca2a:         connection = factory.createConnection();
4:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see junit.framework.TestCase#tearDown()
1:d29ca2a:      */
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         if (connection != null) {
1:d29ca2a:             connection.close();
1:d29ca2a:             connection = null;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      * @throws InterruptedException
1:d29ca2a:      */
1:d29ca2a:     public void testQueueSynchRecover() throws JMSException, InterruptedException {
1:230a86c:         dest = new ActiveMQQueue("Queue-" + System.currentTimeMillis());
1:d29ca2a:         doTestSynchRecover();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      * @throws InterruptedException
1:d29ca2a:      */
1:d29ca2a:     public void testQueueAsynchRecover() throws JMSException, InterruptedException {
1:230a86c:         dest = new ActiveMQQueue("Queue-" + System.currentTimeMillis());
1:d29ca2a:         doTestAsynchRecover();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      * @throws InterruptedException
1:d29ca2a:      */
1:d29ca2a:     public void testTopicSynchRecover() throws JMSException, InterruptedException {
1:230a86c:         dest = new ActiveMQTopic("Topic-" + System.currentTimeMillis());
1:d29ca2a:         doTestSynchRecover();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      * @throws InterruptedException
1:d29ca2a:      */
1:d29ca2a:     public void testTopicAsynchRecover() throws JMSException, InterruptedException {
1:230a86c:         dest = new ActiveMQTopic("Topic-" + System.currentTimeMillis());
1:d29ca2a:         doTestAsynchRecover();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      * @throws InterruptedException
1:d29ca2a:      */
1:d29ca2a:     public void testQueueAsynchRecoverWithAutoAck() throws JMSException, InterruptedException {
1:230a86c:         dest = new ActiveMQQueue("Queue-" + System.currentTimeMillis());
1:d29ca2a:         doTestAsynchRecoverWithAutoAck();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      * @throws InterruptedException
1:d29ca2a:      */
1:d29ca2a:     public void testTopicAsynchRecoverWithAutoAck() throws JMSException, InterruptedException {
1:230a86c:         dest = new ActiveMQTopic("Topic-" + System.currentTimeMillis());
1:d29ca2a:         doTestAsynchRecoverWithAutoAck();
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Test to make sure that a Sync recover works.
1:d29ca2a:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     public void doTestSynchRecover() throws JMSException {
1:d29ca2a:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
3:d29ca2a:         MessageConsumer consumer = session.createConsumer(dest);
1:d29ca2a:         connection.start();
1:230a86c: 
1:d29ca2a:         MessageProducer producer = session.createProducer(dest);
1:d29ca2a:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:d29ca2a:         producer.send(session.createTextMessage("First"));
1:d29ca2a:         producer.send(session.createTextMessage("Second"));
1:230a86c: 
1:d29ca2a:         TextMessage message = (TextMessage)consumer.receive(1000);
3:d29ca2a:         assertEquals("First", message.getText());
5:d29ca2a:         assertFalse(message.getJMSRedelivered());
3:d29ca2a:         message.acknowledge();
1:230a86c: 
1:d29ca2a:         message = (TextMessage)consumer.receive(1000);
5:d29ca2a:         assertEquals("Second", message.getText());
1:d29ca2a:         assertFalse(message.getJMSRedelivered());
1:230a86c: 
3:d29ca2a:         session.recover();
1:d29ca2a: 
1:d29ca2a:         message = (TextMessage)consumer.receive(2000);
1:d29ca2a:         assertEquals("Second", message.getText());
3:d29ca2a:         assertTrue(message.getJMSRedelivered());
1:230a86c: 
1:d29ca2a:         message.acknowledge();
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Test to make sure that a Async recover works.
1:d29ca2a:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      * @throws InterruptedException
1:d29ca2a:      */
1:d29ca2a:     public void doTestAsynchRecover() throws JMSException, InterruptedException {
1:230a86c: 
1:d29ca2a:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:230a86c:         final String errorMessage[] = new String[] {null};
1:d29ca2a:         final CountDownLatch doneCountDownLatch = new CountDownLatch(1);
1:230a86c: 
1:230a86c:         MessageConsumer consumer = session.createConsumer(dest);
1:230a86c: 
1:d29ca2a:         MessageProducer producer = session.createProducer(dest);
1:d29ca2a:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:d29ca2a:         producer.send(session.createTextMessage("First"));
1:d29ca2a:         producer.send(session.createTextMessage("Second"));
1:230a86c: 
1:230a86c:         consumer.setMessageListener(new MessageListener() {
1:d29ca2a:             int counter;
1:230a86c: 
1:d29ca2a:             public void onMessage(Message msg) {
1:d29ca2a:                 counter++;
1:d29ca2a:                 try {
1:d29ca2a:                     TextMessage message = (TextMessage)msg;
1:230a86c:                     switch (counter) {
1:230a86c:                     case 1:
1:230a86c:                         assertEquals("First", message.getText());
1:230a86c:                         assertFalse(message.getJMSRedelivered());
1:230a86c:                         message.acknowledge();
1:230a86c: 
1:230a86c:                         break;
1:230a86c:                     case 2:
1:230a86c:                         assertEquals("Second", message.getText());
1:230a86c:                         assertFalse(message.getJMSRedelivered());
1:230a86c:                         session.recover();
1:230a86c:                         break;
1:230a86c: 
1:230a86c:                     case 3:
1:230a86c:                         assertEquals("Second", message.getText());
1:230a86c:                         assertTrue(message.getJMSRedelivered());
1:230a86c:                         message.acknowledge();
1:230a86c:                         doneCountDownLatch.countDown();
1:230a86c:                         break;
1:230a86c: 
1:230a86c:                     default:
1:230a86c:                         errorMessage[0] = "Got too many messages: " + counter;
1:230a86c:                         doneCountDownLatch.countDown();
1:d29ca2a:                     }
1:d29ca2a:                 } catch (Throwable e) {
1:d29ca2a:                     e.printStackTrace();
1:230a86c:                     errorMessage[0] = "Got exception: " + e;
1:230a86c:                     doneCountDownLatch.countDown();
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         connection.start();
1:230a86c: 
1:230a86c:         if (doneCountDownLatch.await(5, TimeUnit.SECONDS)) {
1:230a86c:             if (errorMessage[0] != null) {
1:d29ca2a:                 fail(errorMessage[0]);
1:230a86c:             }
1:d29ca2a:         } else {
1:d29ca2a:             fail("Timeout waiting for async message delivery to complete.");
1:86cbdfd:         }
1:230a86c: 
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Test to make sure that a Async recover works when using AUTO_ACKNOWLEDGE.
1:d29ca2a:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      * @throws InterruptedException
1:d29ca2a:      */
1:d29ca2a:     public void doTestAsynchRecoverWithAutoAck() throws JMSException, InterruptedException {
1:230a86c: 
1:d29ca2a:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         final String errorMessage[] = new String[] {null};
1:d29ca2a:         final CountDownLatch doneCountDownLatch = new CountDownLatch(1);
1:230a86c: 
1:230a86c:         MessageConsumer consumer = session.createConsumer(dest);
1:230a86c: 
1:d29ca2a:         MessageProducer producer = session.createProducer(dest);
1:d29ca2a:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:d29ca2a:         producer.send(session.createTextMessage("First"));
1:d29ca2a:         producer.send(session.createTextMessage("Second"));
1:230a86c: 
1:230a86c:         consumer.setMessageListener(new MessageListener() {
1:d29ca2a:             int counter;
1:230a86c: 
1:d29ca2a:             public void onMessage(Message msg) {
1:d29ca2a:                 counter++;
1:d29ca2a:                 try {
1:d29ca2a:                     TextMessage message = (TextMessage)msg;
1:230a86c:                     switch (counter) {
1:230a86c:                     case 1:
1:230a86c:                         assertEquals("First", message.getText());
1:230a86c:                         assertFalse(message.getJMSRedelivered());
1:230a86c:                         break;
1:230a86c:                     case 2:
1:230a86c:                         // This should rollback the delivery of this message..
1:230a86c:                         // and re-deliver.
1:230a86c:                         assertEquals("Second", message.getText());
1:230a86c:                         assertFalse(message.getJMSRedelivered());
1:230a86c:                         session.recover();
1:230a86c:                         break;
1:230a86c: 
1:230a86c:                     case 3:
1:230a86c:                         assertEquals("Second", message.getText());
1:230a86c:                         assertTrue(message.getJMSRedelivered());
1:230a86c:                         doneCountDownLatch.countDown();
1:230a86c:                         break;
1:230a86c: 
1:230a86c:                     default:
1:230a86c:                         errorMessage[0] = "Got too many messages: " + counter;
1:230a86c:                         doneCountDownLatch.countDown();
1:d29ca2a:                     }
1:d29ca2a:                 } catch (Throwable e) {
1:d29ca2a:                     e.printStackTrace();
1:230a86c:                     errorMessage[0] = "Got exception: " + e;
1:230a86c:                     doneCountDownLatch.countDown();
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         connection.start();
1:d29ca2a: 
1:230a86c:         if (doneCountDownLatch.await(5000, TimeUnit.SECONDS)) {
1:230a86c:             if (errorMessage[0] != null) {
1:d29ca2a:                 fail(errorMessage[0]);
1:230a86c:             }
1:d29ca2a:         } else {
1:d29ca2a:             fail("Timeout waiting for async message delivery to complete.");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1:  * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:         dest = new ActiveMQQueue("Queue-" + System.currentTimeMillis());
1:      * 
1:         dest = new ActiveMQQueue("Queue-" + System.currentTimeMillis());
1:      * 
1:         dest = new ActiveMQTopic("Topic-" + System.currentTimeMillis());
1:      * 
1:         dest = new ActiveMQTopic("Topic-" + System.currentTimeMillis());
1:      * 
1:         dest = new ActiveMQQueue("Queue-" + System.currentTimeMillis());
1:      * 
1:         dest = new ActiveMQTopic("Topic-" + System.currentTimeMillis());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         final String errorMessage[] = new String[] {null};
1: 
1:         MessageConsumer consumer = session.createConsumer(dest);
1: 
1: 
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:                     switch (counter) {
1:                     case 1:
1:                         assertEquals("First", message.getText());
1:                         assertFalse(message.getJMSRedelivered());
1:                         message.acknowledge();
1: 
1:                         break;
1:                     case 2:
1:                         assertEquals("Second", message.getText());
1:                         assertFalse(message.getJMSRedelivered());
1:                         session.recover();
1:                         break;
1: 
1:                     case 3:
1:                         assertEquals("Second", message.getText());
1:                         assertTrue(message.getJMSRedelivered());
1:                         message.acknowledge();
1:                         doneCountDownLatch.countDown();
1:                         break;
1: 
1:                     default:
1:                         errorMessage[0] = "Got too many messages: " + counter;
1:                         doneCountDownLatch.countDown();
1:                     errorMessage[0] = "Got exception: " + e;
1:                     doneCountDownLatch.countDown();
1: 
1:         if (doneCountDownLatch.await(5, TimeUnit.SECONDS)) {
1:             if (errorMessage[0] != null) {
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         final String errorMessage[] = new String[] {null};
1: 
1:         MessageConsumer consumer = session.createConsumer(dest);
1: 
1: 
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:                     switch (counter) {
1:                     case 1:
1:                         assertEquals("First", message.getText());
1:                         assertFalse(message.getJMSRedelivered());
1:                         break;
1:                     case 2:
1:                         // This should rollback the delivery of this message..
1:                         // and re-deliver.
1:                         assertEquals("Second", message.getText());
1:                         assertFalse(message.getJMSRedelivered());
1:                         session.recover();
1:                         break;
1: 
1:                     case 3:
1:                         assertEquals("Second", message.getText());
1:                         assertTrue(message.getJMSRedelivered());
1:                         doneCountDownLatch.countDown();
1:                         break;
1: 
1:                     default:
1:                         errorMessage[0] = "Got too many messages: " + counter;
1:                         doneCountDownLatch.countDown();
1:                     errorMessage[0] = "Got exception: " + e;
1:                     doneCountDownLatch.countDown();
1: 
1:         if (doneCountDownLatch.await(5000, TimeUnit.SECONDS)) {
1:             if (errorMessage[0] != null) {
1:             }
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
0: import junit.framework.TestCase;
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * Testcases to see if Session.recover() work.
0:  * @version $Revision: 1.3 $
1:  */
1: public class JmsSessionRecoverTest extends TestCase {
1: 
1:     private Connection connection;
1:     private ActiveMQConnectionFactory factory;
1:     private Destination dest;
1: 
1:     /**
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         connection = factory.createConnection();
1:     }
1: 
1:     /**
1:      * @see junit.framework.TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:     }
1: 
1:     /**
1:      *
1:      * @throws JMSException
1:      * @throws InterruptedException
1:      */
1:     public void testQueueSynchRecover() throws JMSException, InterruptedException {
0:         dest = new ActiveMQQueue("Queue-"+System.currentTimeMillis());
1:         doTestSynchRecover();
1:     }
1: 
1:     /**
1:      *
1:      * @throws JMSException
1:      * @throws InterruptedException
1:      */
1:     public void testQueueAsynchRecover() throws JMSException, InterruptedException {
0:         dest = new ActiveMQQueue("Queue-"+System.currentTimeMillis());
1:         doTestAsynchRecover();
1:     }
1: 
1:     /**
1:      *
1:      * @throws JMSException
1:      * @throws InterruptedException
1:      */
1:     public void testTopicSynchRecover() throws JMSException, InterruptedException {
0:         dest = new ActiveMQTopic("Topic-"+System.currentTimeMillis());
1:         doTestSynchRecover();
1:     }
1: 
1:     /**
1:      *
1:      * @throws JMSException
1:      * @throws InterruptedException
1:      */
1:     public void testTopicAsynchRecover() throws JMSException, InterruptedException {
0:         dest = new ActiveMQTopic("Topic-"+System.currentTimeMillis());
1:         doTestAsynchRecover();
1:     }
1: 
1:     /**
1:      *
1:      * @throws JMSException
1:      * @throws InterruptedException
1:      */
1:     public void testQueueAsynchRecoverWithAutoAck() throws JMSException, InterruptedException {
0:         dest = new ActiveMQQueue("Queue-"+System.currentTimeMillis());
1:         doTestAsynchRecoverWithAutoAck();
1:     }
1: 
1:     /**
1:      *
1:      * @throws JMSException
1:      * @throws InterruptedException
1:      */
1:     public void testTopicAsynchRecoverWithAutoAck() throws JMSException, InterruptedException {
0:         dest = new ActiveMQTopic("Topic-"+System.currentTimeMillis());
1:         doTestAsynchRecoverWithAutoAck();
1:     }
1:     
1:     /**
1:      * Test to make sure that a Sync recover works.
1:      * 
1:      * @throws JMSException
1:      */
1:     public void doTestSynchRecover() throws JMSException {
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         connection.start();
1:                 
1:         MessageProducer producer = session.createProducer(dest);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         producer.send(session.createTextMessage("First"));
1:         producer.send(session.createTextMessage("Second"));
1:         
1:         TextMessage message = (TextMessage)consumer.receive(1000);
1:         assertEquals("First", message.getText());
1:         assertFalse(message.getJMSRedelivered());
1:         message.acknowledge();
1:         
1:         message = (TextMessage)consumer.receive(1000);
1:         assertEquals("Second", message.getText());
1:         assertFalse(message.getJMSRedelivered());
1:         
1:         session.recover();
1: 
1:         message = (TextMessage)consumer.receive(2000);
1:         assertEquals("Second", message.getText());
1:         assertTrue(message.getJMSRedelivered());
1:         
1:         message.acknowledge();
1:     }
1:     
1:     /**
1:      * Test to make sure that a Async recover works.
1:      * 
1:      * @throws JMSException
1:      * @throws InterruptedException
1:      */
1:     public void doTestAsynchRecover() throws JMSException, InterruptedException {
1:         
1:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         final String errorMessage[] = new String[]{null};
1:         final CountDownLatch doneCountDownLatch = new CountDownLatch(1);
1:         
1:         MessageConsumer consumer = session.createConsumer(dest);        
1:         
1:         MessageProducer producer = session.createProducer(dest);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         producer.send(session.createTextMessage("First"));
1:         producer.send(session.createTextMessage("Second"));
1:         
0:         consumer.setMessageListener(new MessageListener(){
1:             int counter;
1:             public void onMessage(Message msg) {
1:                 counter++;
1:                 try {
1:                     TextMessage message = (TextMessage)msg;
0:                     switch( counter ) {
0:                     	case 1:
1:                             assertEquals("First", message.getText());
1:                             assertFalse(message.getJMSRedelivered());
1:                             message.acknowledge();
1:                     	    
0:                             break;                        
0:                     	case 2:
1:                             assertEquals("Second", message.getText());
1:                             assertFalse(message.getJMSRedelivered());
1:                             session.recover();
0:                             break;
1:                             
0:                     	case 3:
1:                             assertEquals("Second", message.getText());
1:                             assertTrue(message.getJMSRedelivered());                            
1:                             message.acknowledge();
0:                     	    doneCountDownLatch.countDown();
0:                     	    break;
1:                     	    
0:                     	default:
0:                     	    errorMessage[0]="Got too many messages: "+counter;
0:                     	    doneCountDownLatch.countDown();
1:                     }
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
0:             	    errorMessage[0]="Got exception: "+e;
0:             	    doneCountDownLatch.countDown();
1:                 }
1:             }
1:         });
1:         connection.start();
1:         
0:         if( doneCountDownLatch.await(5, TimeUnit.SECONDS) ) {
0:             if( errorMessage[0]!=null ) {
1:                 fail(errorMessage[0]);
1:             }            
1:         } else {
1:             fail("Timeout waiting for async message delivery to complete.");
1:         }
1: 
1:     }
1:     
1:     /**
1:      * Test to make sure that a Async recover works when using AUTO_ACKNOWLEDGE.
1:      * 
1:      * @throws JMSException
1:      * @throws InterruptedException
1:      */
1:     public void doTestAsynchRecoverWithAutoAck() throws JMSException, InterruptedException {
1:         
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         final String errorMessage[] = new String[]{null};
1:         final CountDownLatch doneCountDownLatch = new CountDownLatch(1);
1:         
1:         MessageConsumer consumer = session.createConsumer(dest);        
1:         
1:         MessageProducer producer = session.createProducer(dest);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         producer.send(session.createTextMessage("First"));
1:         producer.send(session.createTextMessage("Second"));
1:         
0:         consumer.setMessageListener(new MessageListener(){
1:             int counter;
1:             public void onMessage(Message msg) {
1:                 counter++;
1:                 try {
1:                     TextMessage message = (TextMessage)msg;
0:                     switch( counter ) {
0:                     	case 1:
1:                             assertEquals("First", message.getText());
1:                             assertFalse(message.getJMSRedelivered());
0:                             break;                        
0:                     	case 2:
0:                     	    // This should rollback the delivery of this message.. and re-deliver.
1:                             assertEquals("Second", message.getText());
1:                             assertFalse(message.getJMSRedelivered());
1:                             session.recover();
0:                             break;
1:                             
0:                     	case 3:
1:                             assertEquals("Second", message.getText());
1:                             assertTrue(message.getJMSRedelivered());                            
0:                     	    doneCountDownLatch.countDown();
0:                     	    break;
1:                     	    
0:                     	default:
0:                     	    errorMessage[0]="Got too many messages: "+counter;
0:                     	    doneCountDownLatch.countDown();
1:                     }
1:                 } catch (Throwable e) {
1:                     e.printStackTrace();
0:             	    errorMessage[0]="Got exception: "+e;
0:             	    doneCountDownLatch.countDown();
1:                 }
1:             }
1:         });
1:         connection.start();
1:         
0:         if( doneCountDownLatch.await(5000, TimeUnit.SECONDS) ) {
0:             if( errorMessage[0]!=null ) {
1:                 fail(errorMessage[0]);
1:             }            
1:         } else {
1:             fail("Timeout waiting for async message delivery to complete.");
1:         }
1:     }
1: }
============================================================================