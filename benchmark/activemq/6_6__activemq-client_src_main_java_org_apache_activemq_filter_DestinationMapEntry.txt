1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
1:d29ca2a: 
1:09fab74: import javax.annotation.PostConstruct;
1:d29ca2a: 
1:789789f: import org.apache.activemq.command.*;
1:789789f: 
1:d29ca2a: /**
1:d29ca2a:  * A base class for entry objects used to construct a destination based policy
1:d29ca2a:  * map.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:09fab74:  * @org.apache.xbean.XBean
1:d29ca2a:  */
1:3dbc9c9: public abstract class DestinationMapEntry<T> implements Comparable<T> {
1:d29ca2a: 
1:ac8c8d1:     protected ActiveMQDestination destination;
1:d29ca2a: 
1:664b534:     public int compareTo(Object that) {
1:664b534:         if (that instanceof DestinationMapEntry) {
1:3dbc9c9:             DestinationMapEntry<?> thatEntry = (DestinationMapEntry<?>)that;
1:664b534:             return ActiveMQDestination.compare(destination, thatEntry.destination);
1:74a7a8b:         } else if (that == null) {
1:664b534:             return 1;
1:74a7a8b:         } else {
1:664b534:             return getClass().getName().compareTo(that.getClass().getName());
1:789789f:         }
1:789789f:     }
1:789789f: 
1:d29ca2a:     /**
1:d29ca2a:      * A helper method to set the destination from a configuration file
1:d29ca2a:      */
1:d29ca2a:     public void setQueue(String name) {
1:d29ca2a:         setDestination(new ActiveMQQueue(name));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * A helper method to set the destination from a configuration file
1:d29ca2a:      */
1:d29ca2a:     public void setTopic(String name) {
1:d29ca2a:         setDestination(new ActiveMQTopic(name));
1:d29ca2a:     }
1:d29ca2a: 
1:789789f:     public void setTempTopic(boolean flag){
1:789789f:         setDestination(new ActiveMQTempTopic(">"));
1:d29ca2a:     }
1:d29ca2a:     
1:789789f:     public void setTempQueue(boolean flag){
1:789789f:         setDestination(new ActiveMQTempQueue(">"));
1:d29ca2a:     }
1:789789f: 
1:d29ca2a:     public ActiveMQDestination getDestination() {
1:d29ca2a:         return destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setDestination(ActiveMQDestination destination) {
1:d29ca2a:         this.destination = destination;
1:d29ca2a:     }
1:d29ca2a: 
1:3dbc9c9:     public Comparable<T> getValue() {
1:d29ca2a:         return this;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:fb35648
/////////////////////////////////////////////////////////////////////////
commit:ac8c8d1
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination destination;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0:             DestinationMapEntry thatEntry = (DestinationMapEntry)that;
1:         } else if (that == null) {
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.springframework.beans.factory.InitializingBean;
1: 
1: /**
1:  * A base class for entry objects used to construct a destination based policy
1:  * map.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public abstract class DestinationMapEntry implements InitializingBean {
1: 
0:     private ActiveMQDestination destination;
1: 
1:     /**
1:      * A helper method to set the destination from a configuration file
1:      */
1:     public void setQueue(String name) {
1:         setDestination(new ActiveMQQueue(name));
1:     }
1: 
1:     /**
1:      * A helper method to set the destination from a configuration file
1:      */
1:     public void setTopic(String name) {
1:         setDestination(new ActiveMQTopic(name));
1:     }
1: 
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
1: 
1:     public void setDestination(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
1: 
0:     public void afterPropertiesSet() throws Exception {
0:         if (destination == null) {
0:             throw new IllegalArgumentException("You must specify the 'destination' property");
1:         }
1:     }
1: 
0:     public Object getValue() {
1:         return this;
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
1: public abstract class DestinationMapEntry<T> implements Comparable<T> {
1:             DestinationMapEntry<?> thatEntry = (DestinationMapEntry<?>)that;
/////////////////////////////////////////////////////////////////////////
1:     public Comparable<T> getValue() {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:789789f
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.command.*;
/////////////////////////////////////////////////////////////////////////
1:     public void setTempTopic(boolean flag){
1:         setDestination(new ActiveMQTempTopic(">"));
1:     }
1:     
1:     public void setTempQueue(boolean flag){
1:         setDestination(new ActiveMQTempQueue(">"));
1:     }
1: 
author:David Jencks
-------------------------------------------------------------------------------
commit:09fab74
/////////////////////////////////////////////////////////////////////////
1: import javax.annotation.PostConstruct;
1:  * @org.apache.xbean.XBean
0: public abstract class DestinationMapEntry implements Comparable {
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      *
0:      * @throws Exception
0:      * @org.apache.xbean.InitMethod
0:      */
0:     @PostConstruct
author:James Strachan
-------------------------------------------------------------------------------
commit:664b534
/////////////////////////////////////////////////////////////////////////
0: public abstract class DestinationMapEntry implements InitializingBean, Comparable {
0:     
1:     public int compareTo(Object that) {
1:         if (that instanceof DestinationMapEntry) {
0:             DestinationMapEntry thatEntry = (DestinationMapEntry) that;
1:             return ActiveMQDestination.compare(destination, thatEntry.destination);
0:         }
0:         else if (that == null) {
1:             return 1;
0:         }
0:         else {
1:             return getClass().getName().compareTo(that.getClass().getName());
0:         }
0:     }
0: 
============================================================================