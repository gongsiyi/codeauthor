1:938a5fc: /**
1:938a5fc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:938a5fc:  * contributor license agreements.  See the NOTICE file distributed with
1:938a5fc:  * this work for additional information regarding copyright ownership.
1:938a5fc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:938a5fc:  * (the "License"); you may not use this file except in compliance with
1:938a5fc:  * the License.  You may obtain a copy of the License at
1:938a5fc:  *
1:938a5fc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:938a5fc:  *
1:938a5fc:  * Unless required by applicable law or agreed to in writing, software
1:938a5fc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:938a5fc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:938a5fc:  * See the License for the specific language governing permissions and
1:938a5fc:  * limitations under the License.
1:938a5fc:  */
1:938a5fc: package org.apache.activemq.broker.policy;
3:938a5fc: 
1:c7d559f: import static org.junit.Assert.assertEquals;
1:c7d559f: 
1:938a5fc: import java.util.ArrayList;
1:938a5fc: import java.util.List;
1:c7d559f: 
1:c7d8715: import org.apache.activemq.broker.BrokerService;
1:938a5fc: import org.apache.activemq.broker.ConnectionContext;
1:938a5fc: import org.apache.activemq.broker.region.Subscription;
1:938a5fc: import org.apache.activemq.broker.region.TopicSubscription;
1:938a5fc: import org.apache.activemq.broker.region.policy.PriorityNetworkDispatchPolicy;
1:c7d559f: import org.apache.activemq.command.ActiveMQDestination;
1:c7d559f: import org.apache.activemq.command.ActiveMQMessage;
1:c7d559f: import org.apache.activemq.command.ConsumerId;
1:c7d559f: import org.apache.activemq.command.ConsumerInfo;
1:c7d559f: import org.apache.activemq.command.MessageId;
1:938a5fc: import org.apache.activemq.usage.SystemUsage;
1:c7d8715: import org.junit.After;
1:938a5fc: import org.junit.Before;
1:938a5fc: import org.junit.Test;
1:938a5fc: 
1:938a5fc: public class PriorityNetworkDispatchPolicyTest {
1:938a5fc: 
1:938a5fc:     PriorityNetworkDispatchPolicy underTest = new PriorityNetworkDispatchPolicy();
1:938a5fc:     SystemUsage usageManager = new SystemUsage();
1:938a5fc:     ConsumerInfo info = new ConsumerInfo();
1:938a5fc:     ActiveMQMessage node = new ActiveMQMessage();
1:938a5fc:     ConsumerId id = new ConsumerId();
1:938a5fc:     ConnectionContext context = new ConnectionContext();
1:c7d8715:     BrokerService brokerService = new BrokerService();
1:938a5fc: 
1:938a5fc:     @Before
1:938a5fc:     public void init() throws Exception {
1:938a5fc:         info.setDestination(ActiveMQDestination.createDestination("test", ActiveMQDestination.TOPIC_TYPE));
1:938a5fc:         info.setConsumerId(id);
1:938a5fc:         info.setNetworkSubscription(true);
1:938a5fc:         info.setNetworkConsumerPath(new ConsumerId[]{id});
1:32e63dc:         node.setMessageId(new MessageId("test:1:1:1:1"));
1:938a5fc:     }
1:938a5fc: 
1:c7d8715:     @After
1:c7d8715:     public void stopBroker() throws Exception {
1:c7d8715:         brokerService.stop();
1:c7d8715:     }
1:c7d8715: 
1:938a5fc:     @Test
1:938a5fc:     public void testRemoveLowerPriorityDup() throws Exception {
1:c7d8715: 
1:938a5fc:         List<Subscription> consumers = new ArrayList<Subscription>();
1:938a5fc: 
1:938a5fc:         for (int i=0; i<3; i++) {
1:938a5fc:             ConsumerInfo instance = info.copy();
1:938a5fc:             instance.setPriority((byte)i);
1:c7d8715:             consumers.add(new TopicSubscription(brokerService.getBroker(), context, instance, usageManager));
1:938a5fc:         }
1:938a5fc:         underTest.dispatch(node, null, consumers);
1:938a5fc: 
1:938a5fc:         long count = 0;
1:938a5fc:         for (Subscription consumer : consumers) {
1:938a5fc:             count += consumer.getEnqueueCounter();
1:938a5fc:         }
1:938a5fc:         assertEquals("only one sub got message", 1, count);
1:938a5fc:     }
1:938a5fc: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.MessageId;
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:32e63dc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.*;
/////////////////////////////////////////////////////////////////////////
1:         node.setMessageId(new MessageId("test:1:1:1:1"));
author:Gary Tully
-------------------------------------------------------------------------------
commit:c7d8715
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.derby.iapi.jdbc.BrokeredStatement;
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     BrokerService brokerService = new BrokerService();
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void stopBroker() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1: 
1:             consumers.add(new TopicSubscription(brokerService.getBroker(), context, instance, usageManager));
commit:938a5fc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.TopicSubscription;
1: import org.apache.activemq.broker.region.policy.PriorityNetworkDispatchPolicy;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ConsumerId;
0: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: public class PriorityNetworkDispatchPolicyTest {
1: 
1:     PriorityNetworkDispatchPolicy underTest = new PriorityNetworkDispatchPolicy();
1:     SystemUsage usageManager = new SystemUsage();
1:     ConsumerInfo info = new ConsumerInfo();
1:     ActiveMQMessage node = new ActiveMQMessage();
1:     ConsumerId id = new ConsumerId();
1:     ConnectionContext context = new ConnectionContext();
1: 
1:     @Before
1:     public void init() throws Exception {
1:         info.setDestination(ActiveMQDestination.createDestination("test", ActiveMQDestination.TOPIC_TYPE));
1:         info.setConsumerId(id);
1:         info.setNetworkSubscription(true);
1:         info.setNetworkConsumerPath(new ConsumerId[]{id});
1:     }
1: 
1:     @Test
1:     public void testRemoveLowerPriorityDup() throws Exception {
1:         List<Subscription> consumers = new ArrayList<Subscription>();
1: 
1:         for (int i=0; i<3; i++) {
1:             ConsumerInfo instance = info.copy();
1:             instance.setPriority((byte)i);
0:             consumers.add(new TopicSubscription(null, context, instance, usageManager));
1:         }
1:         underTest.dispatch(node, null, consumers);
1: 
1:         long count = 0;
1:         for (Subscription consumer : consumers) {
1:             count += consumer.getEnqueueCounter();
1:         }
1:         assertEquals("only one sub got message", 1, count);
1:     }
1: }
============================================================================