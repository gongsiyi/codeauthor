1:eb827e2: /**
1:eb827e2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:eb827e2:  * contributor license agreements.  See the NOTICE file distributed with
1:eb827e2:  * this work for additional information regarding copyright ownership.
1:eb827e2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:eb827e2:  * (the "License"); you may not use this file except in compliance with
1:eb827e2:  * the License.  You may obtain a copy of the License at
2:eb827e2:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eb827e2:  *
1:eb827e2:  * Unless required by applicable law or agreed to in writing, software
1:eb827e2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb827e2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb827e2:  * See the License for the specific language governing permissions and
1:eb827e2:  * limitations under the License.
1:eb827e2:  */
1:eb827e2: package org.apache.activemq.filter;
2:eb827e2: 
1:eb827e2: import java.util.ArrayList;
1:eb827e2: import java.util.Collection;
1:eb827e2: import java.util.Iterator;
1:eb827e2: import java.util.Set;
1:eb827e2: 
1:eb827e2: /**
1:eb827e2:  * An implementation of {@link DestinationNode} which navigates all the children of the given node
1:eb827e2:  * ignoring the name of the current path (so for navigating using * in a wildcard).
1:0bbc0ac:  *
1:eb827e2:  * 
1:eb827e2:  */
1:eb827e2: public class AnyChildDestinationNode implements DestinationNode {
1:eb827e2:     private DestinationNode node;
1:eb827e2: 
1:eb827e2:     public AnyChildDestinationNode(DestinationNode node) {
1:eb827e2:         this.node = node;
1:eb827e2:     }
1:eb827e2: 
1:eb827e2:     public void appendMatchingValues(Set answer, String[] paths, int startIndex) {
1:eb827e2:         Iterator iter = getChildNodes().iterator();
1:eb827e2:         while (iter.hasNext()) {
1:eb827e2:             DestinationNode child = (DestinationNode) iter.next();
1:eb827e2:             child.appendMatchingValues(answer, paths, startIndex);
1:eb827e2:         }
1:eb827e2:     }
1:eb827e2: 
1:eb827e2: 
1:eb827e2:     public void appendMatchingWildcards(Set answer, String[] paths, int startIndex) {
1:eb827e2:         Iterator iter = getChildNodes().iterator();
1:eb827e2:         while (iter.hasNext()) {
1:eb827e2:             DestinationNode child = (DestinationNode) iter.next();
1:eb827e2:             child.appendMatchingWildcards(answer, paths, startIndex);
1:eb827e2:         }
1:eb827e2:     }
1:eb827e2: 
1:eb827e2: 
1:eb827e2:     public void appendDescendantValues(Set answer) {
1:eb827e2:         Iterator iter = getChildNodes().iterator();
1:eb827e2:         while (iter.hasNext()) {
1:eb827e2:             DestinationNode child = (DestinationNode) iter.next();
1:eb827e2:             child.appendDescendantValues(answer);
1:eb827e2:         }
1:eb827e2:     }
1:eb827e2: 
1:eb827e2:     public DestinationNode getChild(String path) {
1:eb827e2:         final Collection list = new ArrayList();
1:eb827e2:         Iterator iter = getChildNodes().iterator();
1:eb827e2:         while (iter.hasNext()) {
1:eb827e2:             DestinationNode child = (DestinationNode) iter.next();
1:eb827e2:             DestinationNode answer = child.getChild(path);
1:eb827e2:             if (answer != null) {
1:eb827e2:                 list.add(answer);
1:eb827e2:             }
1:eb827e2:         }
1:eb827e2:         if (!list.isEmpty()) {
1:eb827e2:             return new AnyChildDestinationNode(this) {
1:eb827e2:                 protected Collection getChildNodes() {
1:eb827e2:                     return list;
1:eb827e2:                 }
1:eb827e2:             };
1:eb827e2:         }
1:eb827e2:         return null;
1:eb827e2:     }
1:eb827e2: 
1:eb827e2:     public Collection getDesendentValues() {
1:eb827e2:         Collection answer = new ArrayList();
1:eb827e2:         Iterator iter = getChildNodes().iterator();
1:eb827e2:         while (iter.hasNext()) {
1:eb827e2:             DestinationNode child = (DestinationNode) iter.next();
1:eb827e2:             answer.addAll(child.getDesendentValues());
1:eb827e2:         }
1:eb827e2:         return answer;
1:eb827e2:     }
1:eb827e2: 
1:eb827e2:     public Collection getValues() {
1:eb827e2:         Collection answer = new ArrayList();
1:eb827e2:         Iterator iter = getChildNodes().iterator();
1:eb827e2:         while (iter.hasNext()) {
1:eb827e2:             DestinationNode child = (DestinationNode) iter.next();
1:eb827e2:             answer.addAll(child.getValues());
1:eb827e2:         }
1:eb827e2:         return answer;
1:eb827e2:     }
1:eb827e2: 
1:eb827e2:     public Collection getChildren() {
1:eb827e2:         Collection answer = new ArrayList();
1:eb827e2:         Iterator iter = getChildNodes().iterator();
1:eb827e2:         while (iter.hasNext()) {
1:eb827e2:             DestinationNode child = (DestinationNode) iter.next();
1:eb827e2:             answer.addAll(child.getChildren());
1:eb827e2:         }
1:eb827e2:         return answer;
1:eb827e2:     }
1:eb827e2: 
1:eb827e2:     public Collection removeDesendentValues() {
1:eb827e2:         Collection answer = new ArrayList();
1:eb827e2:         Iterator iter = getChildNodes().iterator();
1:eb827e2:         while (iter.hasNext()) {
1:eb827e2:             DestinationNode child = (DestinationNode) iter.next();
1:eb827e2:             answer.addAll(child.removeDesendentValues());
1:eb827e2:         }
1:eb827e2:         return answer;
1:eb827e2:     }
1:eb827e2: 
1:eb827e2:     public Collection removeValues() {
1:eb827e2:         Collection answer = new ArrayList();
1:eb827e2:         Iterator iter = getChildNodes().iterator();
1:eb827e2:         while (iter.hasNext()) {
1:eb827e2:             DestinationNode child = (DestinationNode) iter.next();
1:eb827e2:             answer.addAll(child.removeValues());
1:eb827e2:         }
1:eb827e2:         return answer;
1:eb827e2:     }
1:eb827e2: 
1:eb827e2:     protected Collection getChildNodes() {
1:eb827e2:         return node.getChildren();
1:eb827e2:     }
1:eb827e2: }
1:eb827e2: 
1:eb827e2: 
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:e7e317d
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:James Strachan
-------------------------------------------------------------------------------
commit:eb827e2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.Set;
1: 
1: /**
1:  * An implementation of {@link DestinationNode} which navigates all the children of the given node
1:  * ignoring the name of the current path (so for navigating using * in a wildcard).
1:  *
0:  * @version $Revision$
1:  */
1: public class AnyChildDestinationNode implements DestinationNode {
1:     private DestinationNode node;
1: 
1:     public AnyChildDestinationNode(DestinationNode node) {
1:         this.node = node;
1:     }
1: 
1:     public void appendMatchingValues(Set answer, String[] paths, int startIndex) {
1:         Iterator iter = getChildNodes().iterator();
1:         while (iter.hasNext()) {
1:             DestinationNode child = (DestinationNode) iter.next();
1:             child.appendMatchingValues(answer, paths, startIndex);
1:         }
1:     }
1: 
1: 
1:     public void appendMatchingWildcards(Set answer, String[] paths, int startIndex) {
1:         Iterator iter = getChildNodes().iterator();
1:         while (iter.hasNext()) {
1:             DestinationNode child = (DestinationNode) iter.next();
1:             child.appendMatchingWildcards(answer, paths, startIndex);
1:         }
1:     }
1: 
1: 
1:     public void appendDescendantValues(Set answer) {
1:         Iterator iter = getChildNodes().iterator();
1:         while (iter.hasNext()) {
1:             DestinationNode child = (DestinationNode) iter.next();
1:             child.appendDescendantValues(answer);
1:         }
1:     }
1: 
1:     public DestinationNode getChild(String path) {
1:         final Collection list = new ArrayList();
1:         Iterator iter = getChildNodes().iterator();
1:         while (iter.hasNext()) {
1:             DestinationNode child = (DestinationNode) iter.next();
1:             DestinationNode answer = child.getChild(path);
1:             if (answer != null) {
1:                 list.add(answer);
1:             }
1:         }
1:         if (!list.isEmpty()) {
1:             return new AnyChildDestinationNode(this) {
1:                 protected Collection getChildNodes() {
1:                     return list;
1:                 }
1:             };
1:         }
1:         return null;
1:     }
1: 
1:     public Collection getDesendentValues() {
1:         Collection answer = new ArrayList();
1:         Iterator iter = getChildNodes().iterator();
1:         while (iter.hasNext()) {
1:             DestinationNode child = (DestinationNode) iter.next();
1:             answer.addAll(child.getDesendentValues());
1:         }
1:         return answer;
1:     }
1: 
1:     public Collection getValues() {
1:         Collection answer = new ArrayList();
1:         Iterator iter = getChildNodes().iterator();
1:         while (iter.hasNext()) {
1:             DestinationNode child = (DestinationNode) iter.next();
1:             answer.addAll(child.getValues());
1:         }
1:         return answer;
1:     }
1: 
1: 
1:     public Collection getChildren() {
1:         Collection answer = new ArrayList();
1:         Iterator iter = getChildNodes().iterator();
1:         while (iter.hasNext()) {
1:             DestinationNode child = (DestinationNode) iter.next();
1:             answer.addAll(child.getChildren());
1:         }
1:         return answer;
1:     }
1: 
1:     public Collection removeDesendentValues() {
1:         Collection answer = new ArrayList();
1:         Iterator iter = getChildNodes().iterator();
1:         while (iter.hasNext()) {
1:             DestinationNode child = (DestinationNode) iter.next();
1:             answer.addAll(child.removeDesendentValues());
1:         }
1:         return answer;
1:     }
1: 
1:     public Collection removeValues() {
1:         Collection answer = new ArrayList();
1:         Iterator iter = getChildNodes().iterator();
1:         while (iter.hasNext()) {
1:             DestinationNode child = (DestinationNode) iter.next();
1:             answer.addAll(child.removeValues());
1:         }
1:         return answer;
1:     }
1: 
1:     protected Collection getChildNodes() {
1:         return node.getChildren();
1:     }
1: }
1: 
1: 
============================================================================