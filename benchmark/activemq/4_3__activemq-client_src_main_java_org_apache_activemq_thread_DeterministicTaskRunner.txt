1:edd35d4: /**
1:edd35d4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:edd35d4:  * contributor license agreements.  See the NOTICE file distributed with
1:edd35d4:  * this work for additional information regarding copyright ownership.
1:edd35d4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:edd35d4:  * (the "License"); you may not use this file except in compliance with
1:edd35d4:  * the License.  You may obtain a copy of the License at
1:edd35d4:  *
1:edd35d4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:edd35d4:  *
1:edd35d4:  * Unless required by applicable law or agreed to in writing, software
1:edd35d4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:edd35d4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:edd35d4:  * See the License for the specific language governing permissions and
1:edd35d4:  * limitations under the License.
1:edd35d4:  */
1:edd35d4: package org.apache.activemq.thread;
1:f0429be: 
1:edd35d4: import java.util.concurrent.Executor;
2:edd35d4: 
1:edd35d4: /**
1:b0c2a40:  * 
1:edd35d4:  */
1:edd35d4: public class DeterministicTaskRunner implements TaskRunner {
1:edd35d4: 
1:edd35d4:     private final Executor executor;
1:edd35d4:     private final Task task;
1:edd35d4:     private final Runnable runable;
1:edd35d4:     private boolean shutdown;    
1:edd35d4:     
1:edd35d4:     /**Constructor
1:edd35d4:      * @param executor
1:edd35d4:      * @param task
1:edd35d4:      */
1:edd35d4:     public DeterministicTaskRunner(Executor executor, Task task) {
1:edd35d4:         this.executor = executor;
1:edd35d4:         this.task = task;
1:edd35d4:         this.runable = new Runnable() {
1:edd35d4:             public void run() {
1:edd35d4:                 Thread.currentThread();
1:edd35d4:                 runTask();
1:f0429be:             }
1:edd35d4:         };
2:edd35d4:     }
1:edd35d4: 
1:edd35d4:     /**
1:edd35d4:      * We Expect MANY wakeup calls on the same TaskRunner - but each
1:edd35d4:      * needs to run
1:edd35d4:      */
1:edd35d4:     public void wakeup() throws InterruptedException {
1:edd35d4:         synchronized (runable) {
1:edd35d4: 
1:edd35d4:             if (shutdown) {
1:edd35d4:                 return;
1:edd35d4:             }
1:edd35d4:             executor.execute(runable);
1:edd35d4: 
1:edd35d4:         }
1:edd35d4:     }
1:edd35d4: 
1:edd35d4:     /**
1:edd35d4:      * shut down the task
1:edd35d4:      * 
1:edd35d4:      * @throws InterruptedException
1:edd35d4:      */
1:edd35d4:     public void shutdown(long timeout) throws InterruptedException {
1:edd35d4:         synchronized (runable) {
1:edd35d4:             shutdown = true;
1:edd35d4:         }
1:edd35d4:     }
1:edd35d4: 
1:edd35d4:     public void shutdown() throws InterruptedException {
1:edd35d4:         shutdown(0);
1:edd35d4:     }
1:edd35d4: 
1:edd35d4:     final void runTask() {
1:edd35d4: 
1:edd35d4:         synchronized (runable) {
1:edd35d4:             if (shutdown) {
1:edd35d4:                 runable.notifyAll();
1:edd35d4:                 return;
1:edd35d4:             }
1:edd35d4:         }
1:edd35d4:         task.iterate();
1:edd35d4:     }
1:edd35d4: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:8a2892b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f0429be
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.MDCHelper;
0: import org.slf4j.MDC;
1: 
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:         final Map context = MDCHelper.getCopyOfContextMap();
0:                 if (context != null) {
0:                     MDCHelper.setContextMap(context);
1:                 }
author:Robert Davies
-------------------------------------------------------------------------------
commit:edd35d4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.thread;
1: 
1: import java.util.concurrent.Executor;
1: 
1: /**
0:  * @version $Revision: 1.1 $
1:  */
1: public class DeterministicTaskRunner implements TaskRunner {
1: 
1:     private final Executor executor;
1:     private final Task task;
1:     private final Runnable runable;
1:     private boolean shutdown;    
1:     
1:     /**Constructor
1:      * @param executor
1:      * @param task
1:      */
1:     public DeterministicTaskRunner(Executor executor, Task task) {
1:         this.executor = executor;
1:         this.task = task;
1:         this.runable = new Runnable() {
1:             public void run() {
1:                 Thread.currentThread();
1:                 runTask();
1:             }
1:         };
1:     }
1: 
1:     /**
1:      * We Expect MANY wakeup calls on the same TaskRunner - but each
1:      * needs to run
1:      */
1:     public void wakeup() throws InterruptedException {
1:         synchronized (runable) {
1: 
1:             if (shutdown) {
1:                 return;
1:             }
1:             executor.execute(runable);
1: 
1:         }
1:     }
1: 
1:     /**
1:      * shut down the task
1:      * 
1:      * @throws InterruptedException
1:      */
1:     public void shutdown(long timeout) throws InterruptedException {
1:         synchronized (runable) {
1:             shutdown = true;
1:         }
1:     }
1: 
1:     public void shutdown() throws InterruptedException {
1:         shutdown(0);
1:     }
1: 
1:     final void runTask() {
1: 
1:         synchronized (runable) {
1:             if (shutdown) {
1:                 runable.notifyAll();
1:                 return;
1:             }
1:         }
1:         task.iterate();
1:     }
1: }
============================================================================