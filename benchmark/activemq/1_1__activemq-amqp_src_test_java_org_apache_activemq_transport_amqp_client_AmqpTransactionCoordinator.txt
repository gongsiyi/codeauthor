1:272fb2b: /*
1:272fb2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:272fb2b:  * contributor license agreements.  See the NOTICE file distributed with
1:272fb2b:  * this work for additional information regarding copyright ownership.
1:272fb2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:272fb2b:  * (the "License"); you may not use this file except in compliance with
1:272fb2b:  * the License.  You may obtain a copy of the License at
1:272fb2b:  *
1:272fb2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:272fb2b:  *
1:272fb2b:  * Unless required by applicable law or agreed to in writing, software
1:272fb2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:272fb2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:272fb2b:  * See the License for the specific language governing permissions and
1:272fb2b:  * limitations under the License.
1:272fb2b:  */
1:272fb2b: package org.apache.activemq.transport.amqp.client;
1:272fb2b: 
1:272fb2b: import java.io.IOException;
1:272fb2b: import java.nio.BufferOverflowException;
1:272fb2b: import java.util.HashMap;
1:272fb2b: import java.util.Iterator;
1:272fb2b: import java.util.LinkedList;
1:272fb2b: import java.util.List;
1:272fb2b: import java.util.Map;
1:272fb2b: 
1:272fb2b: import javax.jms.IllegalStateException;
1:272fb2b: import javax.jms.JMSException;
1:272fb2b: import javax.jms.TransactionRolledBackException;
1:272fb2b: 
1:272fb2b: import org.apache.activemq.transport.amqp.client.util.AsyncResult;
1:272fb2b: import org.apache.activemq.transport.amqp.client.util.IOExceptionSupport;
1:272fb2b: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1:272fb2b: import org.apache.qpid.proton.amqp.messaging.Rejected;
1:272fb2b: import org.apache.qpid.proton.amqp.messaging.Source;
1:272fb2b: import org.apache.qpid.proton.amqp.transaction.Coordinator;
1:272fb2b: import org.apache.qpid.proton.amqp.transaction.Declare;
1:272fb2b: import org.apache.qpid.proton.amqp.transaction.Declared;
1:272fb2b: import org.apache.qpid.proton.amqp.transaction.Discharge;
1:272fb2b: import org.apache.qpid.proton.amqp.transaction.TxnCapability;
1:272fb2b: import org.apache.qpid.proton.amqp.transport.DeliveryState;
1:272fb2b: import org.apache.qpid.proton.amqp.transport.ReceiverSettleMode;
1:272fb2b: import org.apache.qpid.proton.amqp.transport.SenderSettleMode;
1:272fb2b: import org.apache.qpid.proton.engine.Delivery;
1:272fb2b: import org.apache.qpid.proton.engine.Sender;
1:272fb2b: import org.apache.qpid.proton.message.Message;
1:272fb2b: import org.slf4j.Logger;
1:272fb2b: import org.slf4j.LoggerFactory;
1:272fb2b: 
1:272fb2b: /**
1:272fb2b:  * Represents the AMQP Transaction coordinator link used by the transaction context
1:272fb2b:  * of a session to control the lifetime of a given transaction.
1:272fb2b:  */
1:272fb2b: public class AmqpTransactionCoordinator extends AmqpAbstractResource<Sender> {
1:272fb2b: 
1:272fb2b:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransactionCoordinator.class);
1:272fb2b: 
1:272fb2b:     private final byte[] OUTBOUND_BUFFER = new byte[64];
1:272fb2b: 
1:272fb2b:     private final AmqpSession session;
1:272fb2b:     private final AmqpTransferTagGenerator tagGenerator = new AmqpTransferTagGenerator();
1:272fb2b: 
1:272fb2b:     private List<Delivery> pendingDeliveries = new LinkedList<Delivery>();
1:272fb2b:     private Map<AmqpTransactionId, AsyncResult> pendingRequests = new HashMap<AmqpTransactionId, AsyncResult>();
1:272fb2b: 
1:272fb2b:     public AmqpTransactionCoordinator(AmqpSession session) {
1:272fb2b:         this.session = session;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     @Override
1:272fb2b:     public void processDeliveryUpdates(AmqpConnection connection) throws IOException {
1:272fb2b:         try {
1:272fb2b:             Iterator<Delivery> deliveries = pendingDeliveries.iterator();
1:272fb2b:             while (deliveries.hasNext()) {
1:272fb2b:                 Delivery pendingDelivery = deliveries.next();
1:272fb2b:                 if (!pendingDelivery.remotelySettled()) {
1:272fb2b:                     continue;
1:272fb2b:                 }
1:272fb2b: 
1:272fb2b:                 DeliveryState state = pendingDelivery.getRemoteState();
1:272fb2b:                 AmqpTransactionId txId = (AmqpTransactionId) pendingDelivery.getContext();
1:272fb2b:                 AsyncResult pendingRequest = pendingRequests.get(txId);
1:272fb2b: 
1:272fb2b:                 if (pendingRequest == null) {
1:272fb2b:                     throw new IllegalStateException("Pending tx operation with no pending request");
1:272fb2b:                 }
1:272fb2b: 
1:272fb2b:                 if (state instanceof Declared) {
1:272fb2b:                     LOG.debug("New TX started: {}", txId.getTxId());
1:272fb2b:                     Declared declared = (Declared) state;
1:272fb2b:                     txId.setRemoteTxId(declared.getTxnId());
1:272fb2b:                     pendingRequest.onSuccess();
1:272fb2b:                 } else if (state instanceof Rejected) {
1:272fb2b:                     LOG.debug("Last TX request failed: {}", txId.getTxId());
1:272fb2b:                     Rejected rejected = (Rejected) state;
1:272fb2b:                     Exception cause = AmqpSupport.convertToException(rejected.getError());
1:272fb2b:                     JMSException failureCause = null;
1:272fb2b:                     if (txId.isCommit()) {
1:272fb2b:                         failureCause = new TransactionRolledBackException(cause.getMessage());
1:272fb2b:                     } else {
1:272fb2b:                         failureCause = new JMSException(cause.getMessage());
1:272fb2b:                     }
1:272fb2b: 
1:272fb2b:                     pendingRequest.onFailure(failureCause);
1:272fb2b:                 } else {
1:272fb2b:                     LOG.debug("Last TX request succeeded: {}", txId.getTxId());
1:272fb2b:                     pendingRequest.onSuccess();
1:272fb2b:                 }
1:272fb2b: 
1:272fb2b:                 // Clear state data
1:272fb2b:                 pendingDelivery.settle();
1:28e7cb0:                 pendingRequests.remove(txId);
1:272fb2b:                 deliveries.remove();
1:272fb2b:             }
1:272fb2b: 
1:272fb2b:             super.processDeliveryUpdates(connection);
1:272fb2b:         } catch (Exception e) {
1:272fb2b:             throw IOExceptionSupport.create(e);
1:272fb2b:         }
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     public void declare(AmqpTransactionId txId, AsyncResult request) throws Exception {
1:272fb2b:         if (txId.getRemoteTxId() != null) {
1:272fb2b:             throw new IllegalStateException("Declar called while a TX is still Active.");
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         if (isClosed()) {
1:272fb2b:             request.onFailure(new JMSException("Cannot start new transaction: Coordinator remotely closed"));
1:272fb2b:             return;
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         Message message = Message.Factory.create();
1:272fb2b:         Declare declare = new Declare();
1:272fb2b:         message.setBody(new AmqpValue(declare));
1:272fb2b: 
1:272fb2b:         Delivery pendingDelivery = getEndpoint().delivery(tagGenerator.getNextTag());
1:272fb2b:         pendingDelivery.setContext(txId);
1:272fb2b: 
1:272fb2b:         // Store away for completion
1:272fb2b:         pendingDeliveries.add(pendingDelivery);
1:272fb2b:         pendingRequests.put(txId, request);
1:272fb2b: 
1:272fb2b:         sendTxCommand(message);
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     public void discharge(AmqpTransactionId txId, AsyncResult request, boolean commit) throws Exception {
1:272fb2b: 
1:272fb2b:         if (isClosed()) {
1:272fb2b:             Exception failureCause = null;
1:272fb2b: 
1:272fb2b:             if (commit) {
1:272fb2b:                 failureCause = new TransactionRolledBackException("Transaction inbout: Coordinator remotely closed");
1:272fb2b:             } else {
1:272fb2b:                 failureCause = new JMSException("Rollback cannot complete: Coordinator remotely closed");
1:272fb2b:             }
1:272fb2b: 
1:272fb2b:             request.onFailure(failureCause);
1:272fb2b:             return;
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         // Store the context of this action in the transaction ID for later completion.
1:272fb2b:         txId.setState(commit ? AmqpTransactionId.COMMIT_MARKER : AmqpTransactionId.ROLLBACK_MARKER);
1:272fb2b: 
1:272fb2b:         Message message = Message.Factory.create();
1:272fb2b:         Discharge discharge = new Discharge();
1:272fb2b:         discharge.setFail(!commit);
1:28e7cb0:         discharge.setTxnId(txId.getRemoteTxId());
1:272fb2b:         message.setBody(new AmqpValue(discharge));
1:272fb2b: 
1:272fb2b:         Delivery pendingDelivery = getEndpoint().delivery(tagGenerator.getNextTag());
1:272fb2b:         pendingDelivery.setContext(txId);
1:272fb2b: 
1:272fb2b:         // Store away for completion
1:272fb2b:         pendingDeliveries.add(pendingDelivery);
1:272fb2b:         pendingRequests.put(txId, request);
1:272fb2b: 
1:272fb2b:         sendTxCommand(message);
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     //----- Base class overrides ---------------------------------------------//
1:272fb2b: 
1:272fb2b:     @Override
1:272fb2b:     public void remotelyClosed(AmqpConnection connection) {
1:272fb2b: 
1:272fb2b:         Exception txnError = AmqpSupport.convertToException(getEndpoint().getRemoteCondition());
1:272fb2b: 
1:272fb2b:         // Alert any pending operation that the link failed to complete the pending
1:272fb2b:         // begin / commit / rollback operation.
1:272fb2b:         for (AsyncResult pendingRequest : pendingRequests.values()) {
1:272fb2b:             pendingRequest.onFailure(txnError);
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         // Purge linkages to pending operations.
1:272fb2b:         pendingDeliveries.clear();
1:272fb2b:         pendingRequests.clear();
1:272fb2b: 
1:272fb2b:         // Override the base class version because we do not want to propagate
1:272fb2b:         // an error up to the client if remote close happens as that is an
1:272fb2b:         // acceptable way for the remote to indicate the discharge could not
1:272fb2b:         // be applied.
1:272fb2b: 
1:272fb2b:         if (getEndpoint() != null) {
1:272fb2b:             getEndpoint().close();
1:272fb2b:             getEndpoint().free();
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         LOG.debug("Transaction Coordinator link {} was remotely closed", getEndpoint());
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     //----- Internal implementation ------------------------------------------//
1:272fb2b: 
1:272fb2b:     private void sendTxCommand(Message message) throws IOException {
1:272fb2b:         int encodedSize = 0;
1:272fb2b:         byte[] buffer = OUTBOUND_BUFFER;
1:272fb2b:         while (true) {
1:272fb2b:             try {
1:272fb2b:                 encodedSize = message.encode(buffer, 0, buffer.length);
1:272fb2b:                 break;
1:272fb2b:             } catch (BufferOverflowException e) {
1:272fb2b:                 buffer = new byte[buffer.length * 2];
1:272fb2b:             }
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         Sender sender = getEndpoint();
1:272fb2b:         sender.send(buffer, 0, encodedSize);
1:272fb2b:         sender.advance();
1:272fb2b:     }
1:272fb2b: 
1:272fb2b: 
1:272fb2b:     @Override
1:272fb2b:     protected void doOpen() {
1:272fb2b:         Coordinator coordinator = new Coordinator();
1:272fb2b:         coordinator.setCapabilities(TxnCapability.LOCAL_TXN);
1:272fb2b:         Source source = new Source();
1:272fb2b: 
1:272fb2b:         String coordinatorName = "qpid-jms:coordinator:" + session.getConnection().getConnectionId();
1:272fb2b: 
1:272fb2b:         Sender sender = session.getEndpoint().sender(coordinatorName);
1:272fb2b:         sender.setSource(source);
1:272fb2b:         sender.setTarget(coordinator);
1:272fb2b:         sender.setSenderSettleMode(SenderSettleMode.UNSETTLED);
1:272fb2b:         sender.setReceiverSettleMode(ReceiverSettleMode.FIRST);
1:272fb2b: 
1:272fb2b:         setEndpoint(sender);
1:272fb2b: 
1:272fb2b:         super.doOpen();
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     @Override
1:272fb2b:     protected void doOpenInspection() {
1:272fb2b:         // TODO
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     @Override
1:272fb2b:     protected void doClosedInspection() {
1:272fb2b:         // TODO
1:272fb2b:     }
1:272fb2b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:28e7cb0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 pendingRequests.remove(txId);
/////////////////////////////////////////////////////////////////////////
1:         discharge.setTxnId(txId.getRemoteTxId());
commit:272fb2b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import java.io.IOException;
1: import java.nio.BufferOverflowException;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import javax.jms.IllegalStateException;
1: import javax.jms.JMSException;
1: import javax.jms.TransactionRolledBackException;
1: 
1: import org.apache.activemq.transport.amqp.client.util.AsyncResult;
1: import org.apache.activemq.transport.amqp.client.util.IOExceptionSupport;
0: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1: import org.apache.qpid.proton.amqp.messaging.Rejected;
1: import org.apache.qpid.proton.amqp.messaging.Source;
1: import org.apache.qpid.proton.amqp.transaction.Coordinator;
1: import org.apache.qpid.proton.amqp.transaction.Declare;
1: import org.apache.qpid.proton.amqp.transaction.Declared;
1: import org.apache.qpid.proton.amqp.transaction.Discharge;
1: import org.apache.qpid.proton.amqp.transaction.TxnCapability;
1: import org.apache.qpid.proton.amqp.transport.DeliveryState;
1: import org.apache.qpid.proton.amqp.transport.ReceiverSettleMode;
1: import org.apache.qpid.proton.amqp.transport.SenderSettleMode;
1: import org.apache.qpid.proton.engine.Delivery;
1: import org.apache.qpid.proton.engine.Sender;
1: import org.apache.qpid.proton.message.Message;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Represents the AMQP Transaction coordinator link used by the transaction context
1:  * of a session to control the lifetime of a given transaction.
1:  */
1: public class AmqpTransactionCoordinator extends AmqpAbstractResource<Sender> {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransactionCoordinator.class);
1: 
1:     private final byte[] OUTBOUND_BUFFER = new byte[64];
1: 
1:     private final AmqpSession session;
1:     private final AmqpTransferTagGenerator tagGenerator = new AmqpTransferTagGenerator();
1: 
1:     private List<Delivery> pendingDeliveries = new LinkedList<Delivery>();
1:     private Map<AmqpTransactionId, AsyncResult> pendingRequests = new HashMap<AmqpTransactionId, AsyncResult>();
1: 
1:     public AmqpTransactionCoordinator(AmqpSession session) {
1:         this.session = session;
1:     }
1: 
1:     @Override
1:     public void processDeliveryUpdates(AmqpConnection connection) throws IOException {
1:         try {
1:             Iterator<Delivery> deliveries = pendingDeliveries.iterator();
1:             while (deliveries.hasNext()) {
1:                 Delivery pendingDelivery = deliveries.next();
1:                 if (!pendingDelivery.remotelySettled()) {
1:                     continue;
1:                 }
1: 
1:                 DeliveryState state = pendingDelivery.getRemoteState();
1:                 AmqpTransactionId txId = (AmqpTransactionId) pendingDelivery.getContext();
1:                 AsyncResult pendingRequest = pendingRequests.get(txId);
1: 
1:                 if (pendingRequest == null) {
1:                     throw new IllegalStateException("Pending tx operation with no pending request");
1:                 }
1: 
1:                 if (state instanceof Declared) {
1:                     LOG.debug("New TX started: {}", txId.getTxId());
1:                     Declared declared = (Declared) state;
1:                     txId.setRemoteTxId(declared.getTxnId());
1:                     pendingRequest.onSuccess();
1:                 } else if (state instanceof Rejected) {
1:                     LOG.debug("Last TX request failed: {}", txId.getTxId());
1:                     Rejected rejected = (Rejected) state;
1:                     Exception cause = AmqpSupport.convertToException(rejected.getError());
1:                     JMSException failureCause = null;
1:                     if (txId.isCommit()) {
1:                         failureCause = new TransactionRolledBackException(cause.getMessage());
1:                     } else {
1:                         failureCause = new JMSException(cause.getMessage());
1:                     }
1: 
1:                     pendingRequest.onFailure(failureCause);
1:                 } else {
1:                     LOG.debug("Last TX request succeeded: {}", txId.getTxId());
1:                     pendingRequest.onSuccess();
1:                 }
1: 
1:                 // Clear state data
1:                 pendingDelivery.settle();
0:                 pendingRequests.remove(txId.getTxId());
1:                 deliveries.remove();
1:             }
1: 
1:             super.processDeliveryUpdates(connection);
1:         } catch (Exception e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     public void declare(AmqpTransactionId txId, AsyncResult request) throws Exception {
1:         if (txId.getRemoteTxId() != null) {
1:             throw new IllegalStateException("Declar called while a TX is still Active.");
1:         }
1: 
1:         if (isClosed()) {
1:             request.onFailure(new JMSException("Cannot start new transaction: Coordinator remotely closed"));
1:             return;
1:         }
1: 
1:         Message message = Message.Factory.create();
1:         Declare declare = new Declare();
1:         message.setBody(new AmqpValue(declare));
1: 
1:         Delivery pendingDelivery = getEndpoint().delivery(tagGenerator.getNextTag());
1:         pendingDelivery.setContext(txId);
1: 
1:         // Store away for completion
1:         pendingDeliveries.add(pendingDelivery);
1:         pendingRequests.put(txId, request);
1: 
1:         sendTxCommand(message);
1:     }
1: 
1:     public void discharge(AmqpTransactionId txId, AsyncResult request, boolean commit) throws Exception {
1: 
1:         if (isClosed()) {
1:             Exception failureCause = null;
1: 
1:             if (commit) {
1:                 failureCause = new TransactionRolledBackException("Transaction inbout: Coordinator remotely closed");
1:             } else {
1:                 failureCause = new JMSException("Rollback cannot complete: Coordinator remotely closed");
1:             }
1: 
1:             request.onFailure(failureCause);
1:             return;
1:         }
1: 
1:         // Store the context of this action in the transaction ID for later completion.
1:         txId.setState(commit ? AmqpTransactionId.COMMIT_MARKER : AmqpTransactionId.ROLLBACK_MARKER);
1: 
1:         Message message = Message.Factory.create();
1:         Discharge discharge = new Discharge();
1:         discharge.setFail(!commit);
0:         discharge.setTxnId((Binary) txId.getRemoteTxId());
1:         message.setBody(new AmqpValue(discharge));
1: 
1:         Delivery pendingDelivery = getEndpoint().delivery(tagGenerator.getNextTag());
1:         pendingDelivery.setContext(txId);
1: 
1:         // Store away for completion
1:         pendingDeliveries.add(pendingDelivery);
1:         pendingRequests.put(txId, request);
1: 
1:         sendTxCommand(message);
1:     }
1: 
1:     //----- Base class overrides ---------------------------------------------//
1: 
1:     @Override
1:     public void remotelyClosed(AmqpConnection connection) {
1: 
1:         Exception txnError = AmqpSupport.convertToException(getEndpoint().getRemoteCondition());
1: 
1:         // Alert any pending operation that the link failed to complete the pending
1:         // begin / commit / rollback operation.
1:         for (AsyncResult pendingRequest : pendingRequests.values()) {
1:             pendingRequest.onFailure(txnError);
1:         }
1: 
1:         // Purge linkages to pending operations.
1:         pendingDeliveries.clear();
1:         pendingRequests.clear();
1: 
1:         // Override the base class version because we do not want to propagate
1:         // an error up to the client if remote close happens as that is an
1:         // acceptable way for the remote to indicate the discharge could not
1:         // be applied.
1: 
1:         if (getEndpoint() != null) {
1:             getEndpoint().close();
1:             getEndpoint().free();
1:         }
1: 
1:         LOG.debug("Transaction Coordinator link {} was remotely closed", getEndpoint());
1:     }
1: 
1:     //----- Internal implementation ------------------------------------------//
1: 
1:     private void sendTxCommand(Message message) throws IOException {
1:         int encodedSize = 0;
1:         byte[] buffer = OUTBOUND_BUFFER;
1:         while (true) {
1:             try {
1:                 encodedSize = message.encode(buffer, 0, buffer.length);
1:                 break;
1:             } catch (BufferOverflowException e) {
1:                 buffer = new byte[buffer.length * 2];
1:             }
1:         }
1: 
1:         Sender sender = getEndpoint();
1:         sender.send(buffer, 0, encodedSize);
1:         sender.advance();
1:     }
1: 
1: 
1:     @Override
1:     protected void doOpen() {
1:         Coordinator coordinator = new Coordinator();
1:         coordinator.setCapabilities(TxnCapability.LOCAL_TXN);
1:         Source source = new Source();
1: 
1:         String coordinatorName = "qpid-jms:coordinator:" + session.getConnection().getConnectionId();
1: 
1:         Sender sender = session.getEndpoint().sender(coordinatorName);
1:         sender.setSource(source);
1:         sender.setTarget(coordinator);
1:         sender.setSenderSettleMode(SenderSettleMode.UNSETTLED);
1:         sender.setReceiverSettleMode(ReceiverSettleMode.FIRST);
1: 
1:         setEndpoint(sender);
1: 
1:         super.doOpen();
1:     }
1: 
1:     @Override
1:     protected void doOpenInspection() {
1:         // TODO
1:     }
1: 
1:     @Override
1:     protected void doClosedInspection() {
1:         // TODO
1:     }
1: }
============================================================================