1:7c63788: /**
1:7c63788:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7c63788:  * contributor license agreements.  See the NOTICE file distributed with
1:7c63788:  * this work for additional information regarding copyright ownership.
1:7c63788:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7c63788:  * (the "License"); you may not use this file except in compliance with
1:7c63788:  * the License.  You may obtain a copy of the License at
2:7c63788:  *
1:7c63788:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7c63788:  *
1:7c63788:  * Unless required by applicable law or agreed to in writing, software
1:7c63788:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7c63788:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7c63788:  * See the License for the specific language governing permissions and
1:7c63788:  * limitations under the License.
1:7c63788:  */
1:7c63788: package org.apache.activemq.partition.dto;
1:7c63788: 
1:4da588d: 
1:4da588d: 
1:4da588d: import com.fasterxml.jackson.annotation.JsonInclude;
1:4da588d: import com.fasterxml.jackson.databind.DeserializationFeature;
1:4da588d: import com.fasterxml.jackson.databind.ObjectMapper;
1:4da588d: import com.fasterxml.jackson.databind.DeserializationConfig;
1:4da588d: import com.fasterxml.jackson.databind.SerializationFeature;
1:4da588d: import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
1:4da588d: import com.fasterxml.jackson.databind.annotation.JsonSerialize;
1:4da588d: import com.fasterxml.jackson.annotation.JsonProperty;
1:7c63788: 
1:7c63788: import java.io.IOException;
1:7c63788: import java.util.HashMap;
1:7c63788: 
1:7c63788: /**
1:7c63788:  * The main Configuration class for the PartitionBroker plugin
1:7c63788:  */
1:7c63788: public class Partitioning {
1:7c63788: 
1:7c63788:     static final public ObjectMapper MAPPER = new ObjectMapper();
1:7c63788:     static {
1:4da588d:         MAPPER.setSerializationInclusion(JsonInclude.Include.NON_NULL);
1:4da588d:         MAPPER.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
1:7c63788:     }
1:7c63788: 
1:7c63788:     static final public ObjectMapper TO_STRING_MAPPER = new ObjectMapper();
1:7c63788:     static {
1:4da588d:         TO_STRING_MAPPER.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
1:4da588d:         TO_STRING_MAPPER.enable(SerializationFeature.INDENT_OUTPUT);
1:7c63788:     }
1:7c63788: 
1:7c63788:     /**
1:7c63788:      * If a client connects with a clientId which is listed in the
1:7c63788:      * map, then he will be immediately reconnected
1:7c63788:      * to the partition target immediately.
1:7c63788:      */
1:7c63788:     @JsonProperty("by_client_id")
1:21edf2b:     @JsonDeserialize(contentAs = Target.class)
1:7c63788:     public HashMap<String, Target> byClientId;
1:7c63788: 
1:7c63788:     /**
1:7c63788:      * If a client connects with a user priciple which is listed in the
1:7c63788:      * map, then he will be immediately reconnected
1:7c63788:      * to the partition target immediately.
1:7c63788:      */
1:7c63788:     @JsonProperty("by_user_name")
1:21edf2b:     @JsonDeserialize(contentAs = Target.class)
1:7c63788:     public HashMap<String, Target> byUserName;
1:7c63788: 
1:7c63788:     /**
1:7c63788:      * If a client connects with source ip which is listed in the
1:7c63788:      * map, then he will be immediately reconnected
1:7c63788:      * to the partition target immediately.
1:7c63788:      */
1:7c63788:     @JsonProperty("by_source_ip")
1:21edf2b:     @JsonDeserialize(contentAs = Target.class)
1:7c63788:     public HashMap<String, Target> bySourceIp;
1:7c63788: 
1:7c63788:     /**
1:7c63788:      * Used to map the preferred partitioning of queues across
1:7c63788:      * a set of brokers.  Once a it is deemed that a connection mostly
1:7c63788:      * works with a set of targets configured in this map, the client
1:7c63788:      * will be reconnected to the appropriate target.
1:7c63788:      */
1:7c63788:     @JsonProperty("by_queue")
1:21edf2b:     @JsonDeserialize(contentAs = Target.class)
1:7c63788:     public HashMap<String, Target> byQueue;
1:7c63788: 
1:7c63788:     /**
1:7c63788:      * Used to map the preferred partitioning of topics across
1:7c63788:      * a set of brokers.  Once a it is deemed that a connection mostly
1:7c63788:      * works with a set of targets configured in this map, the client
1:7c63788:      * will be reconnected to the appropriate target.
1:7c63788:      */
1:7c63788:     @JsonProperty("by_topic")
1:21edf2b:     @JsonDeserialize(contentAs = Target.class)
1:7c63788:     public HashMap<String, Target> byTopic;
1:7c63788: 
1:7c63788:     /**
1:7c63788:      * Maps broker names to broker URLs.
1:7c63788:      */
1:7c63788:     @JsonProperty("brokers")
1:21edf2b:     @JsonDeserialize(contentAs = String.class)
1:7c63788:     public HashMap<String, String> brokers;
1:7c63788: 
1:7c63788: 
1:7c63788:     @Override
1:7c63788:     public String toString() {
1:7c63788:         try {
1:7c63788:             return TO_STRING_MAPPER.writeValueAsString(this);
1:7c63788:         } catch (IOException e) {
1:7c63788:             return super.toString();
1:7c63788:         }
1:7c63788:     }
1:7c63788: 
1:7c63788:     public HashMap<String, String> getBrokers() {
1:7c63788:         return brokers;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public void setBrokers(HashMap<String, String> brokers) {
1:7c63788:         this.brokers = brokers;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public HashMap<String, Target> getByClientId() {
1:7c63788:         return byClientId;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public void setByClientId(HashMap<String, Target> byClientId) {
1:7c63788:         this.byClientId = byClientId;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public HashMap<String, Target> getByQueue() {
1:7c63788:         return byQueue;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public void setByQueue(HashMap<String, Target> byQueue) {
1:7c63788:         this.byQueue = byQueue;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public HashMap<String, Target> getBySourceIp() {
1:7c63788:         return bySourceIp;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public void setBySourceIp(HashMap<String, Target> bySourceIp) {
1:7c63788:         this.bySourceIp = bySourceIp;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public HashMap<String, Target> getByTopic() {
1:7c63788:         return byTopic;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public void setByTopic(HashMap<String, Target> byTopic) {
1:7c63788:         this.byTopic = byTopic;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public HashMap<String, Target> getByUserName() {
1:7c63788:         return byUserName;
1:7c63788:     }
1:7c63788: 
1:7c63788:     public void setByUserName(HashMap<String, Target> byUserName) {
1:7c63788:         this.byUserName = byUserName;
1:7c63788:     }
1:7c63788: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4da588d
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: import com.fasterxml.jackson.annotation.JsonInclude;
1: import com.fasterxml.jackson.databind.DeserializationFeature;
1: import com.fasterxml.jackson.databind.ObjectMapper;
1: import com.fasterxml.jackson.databind.DeserializationConfig;
1: import com.fasterxml.jackson.databind.SerializationFeature;
1: import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
1: import com.fasterxml.jackson.databind.annotation.JsonSerialize;
1: import com.fasterxml.jackson.annotation.JsonProperty;
/////////////////////////////////////////////////////////////////////////
1:         MAPPER.setSerializationInclusion(JsonInclude.Include.NON_NULL);
1:         MAPPER.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
1:         TO_STRING_MAPPER.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
1:         TO_STRING_MAPPER.enable(SerializationFeature.INDENT_OUTPUT);
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:21edf2b
/////////////////////////////////////////////////////////////////////////
0: import org.codehaus.jackson.map.annotate.JsonDeserialize;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @JsonDeserialize(contentAs = Target.class)
/////////////////////////////////////////////////////////////////////////
1:     @JsonDeserialize(contentAs = Target.class)
/////////////////////////////////////////////////////////////////////////
1:     @JsonDeserialize(contentAs = Target.class)
/////////////////////////////////////////////////////////////////////////
1:     @JsonDeserialize(contentAs = Target.class)
/////////////////////////////////////////////////////////////////////////
1:     @JsonDeserialize(contentAs = Target.class)
1:     @JsonDeserialize(contentAs = String.class)
commit:7c63788
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.partition.dto;
1: 
0: import org.codehaus.jackson.annotate.JsonProperty;
0: import org.codehaus.jackson.map.DeserializationConfig;
0: import org.codehaus.jackson.map.ObjectMapper;
0: import org.codehaus.jackson.map.SerializationConfig;
0: import org.codehaus.jackson.map.annotate.JsonSerialize;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: 
1: /**
1:  * The main Configuration class for the PartitionBroker plugin
1:  *
0:  * @org.apache.xbean.XBean element="partitioning"
1:  */
1: public class Partitioning {
1: 
1:     static final public ObjectMapper MAPPER = new ObjectMapper();
1:     static {
0:         MAPPER.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
0:         MAPPER.disable(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES);
1:     }
1: 
1:     static final public ObjectMapper TO_STRING_MAPPER = new ObjectMapper();
1:     static {
0:         TO_STRING_MAPPER.disable(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES);
0:         TO_STRING_MAPPER.enable(SerializationConfig.Feature.INDENT_OUTPUT);
1:     }
1: 
1:     /**
1:      * If a client connects with a clientId which is listed in the
1:      * map, then he will be immediately reconnected
1:      * to the partition target immediately.
1:      */
1:     @JsonProperty("by_client_id")
1:     public HashMap<String, Target> byClientId;
1: 
1:     /**
1:      * If a client connects with a user priciple which is listed in the
1:      * map, then he will be immediately reconnected
1:      * to the partition target immediately.
1:      */
1:     @JsonProperty("by_user_name")
1:     public HashMap<String, Target> byUserName;
1: 
1:     /**
1:      * If a client connects with source ip which is listed in the
1:      * map, then he will be immediately reconnected
1:      * to the partition target immediately.
1:      */
1:     @JsonProperty("by_source_ip")
1:     public HashMap<String, Target> bySourceIp;
1: 
1:     /**
1:      * Used to map the preferred partitioning of queues across
1:      * a set of brokers.  Once a it is deemed that a connection mostly
1:      * works with a set of targets configured in this map, the client
1:      * will be reconnected to the appropriate target.
1:      */
1:     @JsonProperty("by_queue")
1:     public HashMap<String, Target> byQueue;
1: 
1:     /**
1:      * Used to map the preferred partitioning of topics across
1:      * a set of brokers.  Once a it is deemed that a connection mostly
1:      * works with a set of targets configured in this map, the client
1:      * will be reconnected to the appropriate target.
1:      */
1:     @JsonProperty("by_topic")
1:     public HashMap<String, Target> byTopic;
1: 
1:     /**
1:      * Maps broker names to broker URLs.
1:      */
1:     @JsonProperty("brokers")
1:     public HashMap<String, String> brokers;
1: 
1: 
1:     @Override
1:     public String toString() {
1:         try {
1:             return TO_STRING_MAPPER.writeValueAsString(this);
1:         } catch (IOException e) {
1:             return super.toString();
1:         }
1:     }
1: 
1:     public HashMap<String, String> getBrokers() {
1:         return brokers;
1:     }
1: 
1:     public void setBrokers(HashMap<String, String> brokers) {
1:         this.brokers = brokers;
1:     }
1: 
1:     public HashMap<String, Target> getByClientId() {
1:         return byClientId;
1:     }
1: 
1:     public void setByClientId(HashMap<String, Target> byClientId) {
1:         this.byClientId = byClientId;
1:     }
1: 
1:     public HashMap<String, Target> getByQueue() {
1:         return byQueue;
1:     }
1: 
1:     public void setByQueue(HashMap<String, Target> byQueue) {
1:         this.byQueue = byQueue;
1:     }
1: 
1:     public HashMap<String, Target> getBySourceIp() {
1:         return bySourceIp;
1:     }
1: 
1:     public void setBySourceIp(HashMap<String, Target> bySourceIp) {
1:         this.bySourceIp = bySourceIp;
1:     }
1: 
1:     public HashMap<String, Target> getByTopic() {
1:         return byTopic;
1:     }
1: 
1:     public void setByTopic(HashMap<String, Target> byTopic) {
1:         this.byTopic = byTopic;
1:     }
1: 
1:     public HashMap<String, Target> getByUserName() {
1:         return byUserName;
1:     }
1: 
1:     public void setByUserName(HashMap<String, Target> byUserName) {
1:         this.byUserName = byUserName;
1:     }
1: }
============================================================================