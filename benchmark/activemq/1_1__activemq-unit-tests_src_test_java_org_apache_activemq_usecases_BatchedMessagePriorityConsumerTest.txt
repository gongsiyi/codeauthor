1:bbb2acc: /**
1:bbb2acc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbb2acc:  * contributor license agreements.  See the NOTICE file distributed with
1:bbb2acc:  * this work for additional information regarding copyright ownership.
1:bbb2acc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbb2acc:  * (the "License"); you may not use this file except in compliance with
1:bbb2acc:  * the License.  You may obtain a copy of the License at
1:bbb2acc:  *
1:bbb2acc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbb2acc:  *
1:bbb2acc:  * Unless required by applicable law or agreed to in writing, software
1:bbb2acc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbb2acc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbb2acc:  * See the License for the specific language governing permissions and
1:bbb2acc:  * limitations under the License.
1:bbb2acc:  */
1:bbb2acc: package org.apache.activemq.usecases;
1:bbb2acc: 
1:bbb2acc: import javax.jms.Message;
1:bbb2acc: import javax.jms.MessageConsumer;
1:bbb2acc: import javax.jms.MessageProducer;
1:bbb2acc: import javax.jms.Session;
1:bbb2acc: import org.apache.activemq.JmsTestSupport;
1:bbb2acc: import org.apache.activemq.command.ActiveMQDestination;
1:bbb2acc: import org.slf4j.Logger;
1:bbb2acc: import org.slf4j.LoggerFactory;
1:bbb2acc: 
1:bbb2acc: public class BatchedMessagePriorityConsumerTest extends JmsTestSupport {
1:bbb2acc: 
1:bbb2acc:     private static final Logger LOG = LoggerFactory.getLogger(BatchedMessagePriorityConsumerTest.class);
1:bbb2acc: 
1:bbb2acc:     public void testBatchWithLowPriorityFirstAndClientSupport() throws Exception {
1:bbb2acc:         doTestBatchWithLowPriorityFirst(true);
1:bbb2acc:     }
1:bbb2acc: 
1:bbb2acc:     public void testBatchWithLowPriorityFirstAndClientSupportOff() throws Exception {
1:bbb2acc:         doTestBatchWithLowPriorityFirst(false);
1:bbb2acc:     }
1:bbb2acc: 
1:bbb2acc:     public void doTestBatchWithLowPriorityFirst(boolean clientPrioritySupport) throws Exception {
1:bbb2acc: 
1:bbb2acc:         connection.start();
1:bbb2acc:         connection.setMessagePrioritySupported(clientPrioritySupport);
1:bbb2acc: 
1:bbb2acc:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bbb2acc:         ActiveMQDestination destination = createDestination(session, ActiveMQDestination.QUEUE_TYPE);
1:bbb2acc: 
1:bbb2acc: 
1:bbb2acc:         MessageProducer producer = session.createProducer(destination);
1:bbb2acc:         producer.setPriority(0);
1:bbb2acc:         sendMessages(session, producer, 2);
1:bbb2acc:         producer.close();
1:bbb2acc: 
1:bbb2acc:         MessageProducer producer2 = session.createProducer(destination);
1:bbb2acc:         producer2.setPriority(9);
1:bbb2acc:         sendMessages(session, producer2, 3);
1:bbb2acc:         producer2.close();
1:bbb2acc: 
1:bbb2acc:         session.close();
1:bbb2acc: 
1:bbb2acc:         Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:bbb2acc:         MessageConsumer messageConsumer = consumerSession.createConsumer(destination);
1:bbb2acc: 
1:bbb2acc:         for (int i = 0; i < 5; i++) {
1:bbb2acc:             Message message = messageConsumer.receive(4000);
1:bbb2acc:             LOG.info("MessageID: " + message.getJMSMessageID());
1:bbb2acc:         }
1:bbb2acc: 
1:bbb2acc:         consumerSession.commit();
1:bbb2acc:         consumerSession.close();
1:bbb2acc: 
1:bbb2acc:         // should be nothing left
1:bbb2acc:         consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bbb2acc:         messageConsumer = consumerSession.createConsumer(destination);
1:bbb2acc: 
1:bbb2acc:         assertNull("No message left", messageConsumer.receive(1000));
1:bbb2acc: 
1:bbb2acc:         consumerSession.close();
1:bbb2acc: 
1:bbb2acc:     }
1:bbb2acc: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:bbb2acc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class BatchedMessagePriorityConsumerTest extends JmsTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(BatchedMessagePriorityConsumerTest.class);
1: 
1:     public void testBatchWithLowPriorityFirstAndClientSupport() throws Exception {
1:         doTestBatchWithLowPriorityFirst(true);
1:     }
1: 
1:     public void testBatchWithLowPriorityFirstAndClientSupportOff() throws Exception {
1:         doTestBatchWithLowPriorityFirst(false);
1:     }
1: 
1:     public void doTestBatchWithLowPriorityFirst(boolean clientPrioritySupport) throws Exception {
1: 
1:         connection.start();
1:         connection.setMessagePrioritySupported(clientPrioritySupport);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQDestination destination = createDestination(session, ActiveMQDestination.QUEUE_TYPE);
1: 
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setPriority(0);
1:         sendMessages(session, producer, 2);
1:         producer.close();
1: 
1:         MessageProducer producer2 = session.createProducer(destination);
1:         producer2.setPriority(9);
1:         sendMessages(session, producer2, 3);
1:         producer2.close();
1: 
1:         session.close();
1: 
1:         Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer messageConsumer = consumerSession.createConsumer(destination);
1: 
1:         for (int i = 0; i < 5; i++) {
1:             Message message = messageConsumer.receive(4000);
1:             LOG.info("MessageID: " + message.getJMSMessageID());
1:         }
1: 
1:         consumerSession.commit();
1:         consumerSession.close();
1: 
1:         // should be nothing left
1:         consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         messageConsumer = consumerSession.createConsumer(destination);
1: 
1:         assertNull("No message left", messageConsumer.receive(1000));
1: 
1:         consumerSession.close();
1: 
1:     }
1: }
============================================================================