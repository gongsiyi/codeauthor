1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
1:a107823: 
1:a107823: import java.util.ArrayList;
1:a107823: import java.util.Iterator;
1:a107823: import java.util.List;
1:a107823: 
1:a107823: public abstract class ResultTransformFilter implements QueryFilter {
1:a107823:     private QueryFilter next;
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Constructs a query filter that transform the format of the query result
1:5f1adbe:      * 
1:a107823:      * @param next - the query filter to retrieve the results from
1:a107823:      */
1:a107823:     protected ResultTransformFilter(QueryFilter next) {
1:a107823:         this.next = next;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transforms the queried results to a collection of different objects
1:5f1adbe:      * 
1:a107823:      * @param query - the query string
1:a107823:      * @return collections of transformed objects
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     public List query(String query) throws Exception {
1:a107823:         return transformList(next.query(query));
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transforms the queried results to a collection of different objects
1:5f1adbe:      * 
1:a107823:      * @param queries - the query map
1:a107823:      * @return collections of transformed objects
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     public List<Object> query(List queries) throws Exception {
1:a107823:         return transformList(next.query(queries));
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transforms a collection to a collection of different objects.
1:5f1adbe:      * 
1:a107823:      * @param result - the collection to transform
1:a107823:      * @return collection of properties objects
1:a107823:      */
1:5f1adbe:     protected List<Object> transformList(List<Object> result) throws Exception {
1:5f1adbe:         List<Object> props = new ArrayList<Object>();
1:a107823: 
1:5f1adbe:         for (Iterator<Object> i = result.iterator(); i.hasNext();) {
1:a107823:             props.add(transformElement(i.next()));
1:a107823:         }
1:a107823: 
1:a107823:         return props;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Transform a result object
1:5f1adbe:      * 
1:a107823:      * @param obj - the object instance to transform
1:a107823:      * @return the transformed object
1:a107823:      */
1:a107823:     protected abstract Object transformElement(Object obj) throws Exception;
1:a107823: 
1:a107823: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:      * Constructs a query filter that transform the format of the query result
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     public List<Object> query(List queries) throws Exception {
1:      * 
1:     protected List<Object> transformList(List<Object> result) throws Exception {
1:         List<Object> props = new ArrayList<Object>();
1:         for (Iterator<Object> i = result.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: public abstract class ResultTransformFilter implements QueryFilter {
1:     private QueryFilter next;
1: 
1:     /**
0:      * Contructs a query filter that transform the format of the query result
1:      * @param next - the query filter to retrieve the results from
1:      */
1:     protected ResultTransformFilter(QueryFilter next) {
1:         this.next = next;
1:     }
1: 
1:     /**
1:      * Transforms the queried results to a collection of different objects
1:      * @param query - the query string
1:      * @return collections of transformed objects
1:      * @throws Exception
1:      */
1:     public List query(String query) throws Exception {
1:         return transformList(next.query(query));
1:     }
1: 
1:     /**
1:      * Transforms the queried results to a collection of different objects
1:      * @param queries - the query map
1:      * @return collections of transformed objects
1:      * @throws Exception
1:      */
0:     public List query(List queries) throws Exception {
1:         return transformList(next.query(queries));
1:     }
1: 
1:     /**
1:      * Transforms a collection to a collection of different objects.
1:      * @param result - the collection to transform
1:      * @return collection of properties objects
1:      */
0:     protected List transformList(List result) throws Exception {
0:         List props = new ArrayList();
1: 
0:         for (Iterator i=result.iterator(); i.hasNext();) {
1:             props.add(transformElement(i.next()));
1:         }
1: 
1:         return props;
1:     }
1: 
1:     /**
1:      * Transform a result object
1:      * @param obj - the object instance to transform
1:      * @return the transformed object
1:      */
1:     protected abstract Object transformElement(Object obj) throws Exception;
1: 
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
0: 
0: public abstract class ResultTransformFilter implements QueryFilter {
0:     private QueryFilter next;
0: 
0:     /**
0:      * Contructs a query filter that transform the format of the query result
0:      * @param next - the query filter to retrieve the results from
0:      */
0:     protected ResultTransformFilter(QueryFilter next) {
0:         this.next = next;
0:     }
0: 
0:     /**
0:      * Transforms the queried results to a collection of different objects
0:      * @param query - the query string
0:      * @return collections of transformed objects
0:      * @throws Exception
0:      */
0:     public List query(String query) throws Exception {
0:         return transformList(next.query(query));
0:     }
0: 
0:     /**
0:      * Transforms the queried results to a collection of different objects
0:      * @param queries - the query map
0:      * @return collections of transformed objects
0:      * @throws Exception
0:      */
0:     public List query(List queries) throws Exception {
0:         return transformList(next.query(queries));
0:     }
0: 
0:     /**
0:      * Transforms a collection to a collection of different objects.
0:      * @param result - the collection to transform
0:      * @return collection of properties objects
0:      */
0:     protected List transformList(List result) throws Exception {
0:         List props = new ArrayList();
0: 
0:         for (Iterator i=result.iterator(); i.hasNext();) {
0:             props.add(transformElement(i.next()));
0:         }
0: 
0:         return props;
0:     }
0: 
0:     /**
0:      * Transform a result object
0:      * @param obj - the object instance to transform
0:      * @return the transformed object
0:      */
0:     protected abstract Object transformElement(Object obj) throws Exception;
0: 
0: }
============================================================================