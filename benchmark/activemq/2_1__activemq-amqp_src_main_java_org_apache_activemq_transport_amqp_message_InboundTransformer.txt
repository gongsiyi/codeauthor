1:4d6f4d7: /*
1:6e69319:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e69319:  * contributor license agreements.  See the NOTICE file distributed with
1:6e69319:  * this work for additional information regarding copyright ownership.
1:6e69319:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e69319:  * (the "License"); you may not use this file except in compliance with
1:6e69319:  * the License.  You may obtain a copy of the License at
1:6e69319:  *
1:6e69319:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e69319:  *
1:6e69319:  * Unless required by applicable law or agreed to in writing, software
1:6e69319:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e69319:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e69319:  * See the License for the specific language governing permissions and
1:6e69319:  * limitations under the License.
1:6e69319:  */
1:6e69319: package org.apache.activemq.transport.amqp.message;
29:6e69319: 
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_CONTENT_ENCODING;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_CONTENT_TYPE;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_FIRST_ACQUIRER;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_FOOTER_PREFIX;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_HEADER;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_MESSAGE_ANNOTATION_PREFIX;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_PROPERTIES;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_REPLYTO_GROUP_ID;
1:63d62a7: 
1:63d62a7: import java.nio.charset.StandardCharsets;
1:6e69319: import java.util.Map;
1:6e69319: import java.util.Set;
1:13b915a: 
1:6e69319: import javax.jms.JMSException;
1:6e69319: import javax.jms.Message;
1:6e69319: 
1:480b3e7: import org.apache.activemq.ScheduledMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQDestination;
1:63d62a7: import org.apache.activemq.command.ActiveMQMessage;
1:d54e21b: import org.apache.activemq.transport.amqp.AmqpProtocolException;
1:6e69319: import org.apache.qpid.proton.amqp.Binary;
1:6e69319: import org.apache.qpid.proton.amqp.Decimal128;
1:6e69319: import org.apache.qpid.proton.amqp.Decimal32;
1:6e69319: import org.apache.qpid.proton.amqp.Decimal64;
1:6e69319: import org.apache.qpid.proton.amqp.Symbol;
1:6e69319: import org.apache.qpid.proton.amqp.UnsignedByte;
1:6e69319: import org.apache.qpid.proton.amqp.UnsignedInteger;
1:6e69319: import org.apache.qpid.proton.amqp.UnsignedLong;
1:6e69319: import org.apache.qpid.proton.amqp.UnsignedShort;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.Footer;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.Header;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.Properties;
1:6e69319: 
1:6e69319: public abstract class InboundTransformer {
1:6e69319: 
1:6e69319:     public static final String TRANSFORMER_NATIVE = "native";
1:6e69319:     public static final String TRANSFORMER_RAW = "raw";
1:6e69319:     public static final String TRANSFORMER_JMS = "jms";
1:6e69319: 
1:13b915a:     public abstract String getTransformerName();
1:13b915a: 
1:13b915a:     public abstract InboundTransformer getFallbackTransformer();
1:6e69319: 
1:63d62a7:     public final ActiveMQMessage transform(EncodedMessage amqpMessage) throws Exception {
1:d54e21b:         InboundTransformer transformer = this;
1:63d62a7:         ActiveMQMessage message = null;
1:d54e21b: 
1:d54e21b:         while (transformer != null) {
1:d54e21b:             try {
1:d54e21b:                 message = transformer.doTransform(amqpMessage);
1:d54e21b:                 break;
1:d54e21b:             } catch (Exception e) {
1:d54e21b:                 transformer = transformer.getFallbackTransformer();
1:d54e21b:             }
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         if (message == null) {
1:d54e21b:             throw new AmqpProtocolException("Failed to transform incoming delivery, skipping.", false);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return message;
1:d54e21b:     }
1:d54e21b: 
1:63d62a7:     protected abstract ActiveMQMessage doTransform(EncodedMessage amqpMessage) throws Exception;
1:d54e21b: 
1:6e69319:     @SuppressWarnings("unchecked")
1:63d62a7:     protected void populateMessage(ActiveMQMessage jms, org.apache.qpid.proton.message.Message amqp) throws Exception {
1:6e69319:         Header header = amqp.getHeader();
1:63d62a7:         if (header != null) {
1:63d62a7:             jms.setBooleanProperty(JMS_AMQP_HEADER, true);
1:4d6f4d7: 
1:63d62a7:             if (header.getDurable() != null) {
1:63d62a7:                 jms.setPersistent(header.getDurable().booleanValue());
1:63d62a7:             }
1:63d62a7: 
1:63d62a7:             if (header.getPriority() != null) {
1:63d62a7:                 jms.setJMSPriority(header.getPriority().intValue());
1:63d62a7:             } else {
1:63d62a7:                 jms.setPriority((byte) Message.DEFAULT_PRIORITY);
1:63d62a7:             }
1:63d62a7: 
1:63d62a7:             if (header.getFirstAcquirer() != null) {
1:63d62a7:                 jms.setBooleanProperty(JMS_AMQP_FIRST_ACQUIRER, header.getFirstAcquirer());
1:63d62a7:             }
1:63d62a7: 
1:63d62a7:             if (header.getDeliveryCount() != null) {
1:63d62a7:                 jms.setRedeliveryCounter(header.getDeliveryCount().intValue());
1:63d62a7:             }
7:6e69319:         } else {
1:63d62a7:             jms.setPriority((byte) Message.DEFAULT_PRIORITY);
1:a2d92ef:             jms.setPersistent(false);
35:6e69319:         }
1:4d6f4d7: 
1:6e69319:         final MessageAnnotations ma = amqp.getMessageAnnotations();
1:6e69319:         if (ma != null) {
1:6e69319:             for (Map.Entry<?, ?> entry : ma.getValue().entrySet()) {
3:6e69319:                 String key = entry.getKey().toString();
1:63d62a7:                 if ("x-opt-delivery-time".equals(key) && entry.getValue() != null) {
1:480b3e7:                     long deliveryTime = ((Number) entry.getValue()).longValue();
1:480b3e7:                     long delay = deliveryTime - System.currentTimeMillis();
1:480b3e7:                     if (delay > 0) {
1:480b3e7:                         jms.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);
1:480b3e7:                     }
1:5d353e2:                 } else if ("x-opt-delivery-delay".equals(key) && entry.getValue() != null) {
1:5d353e2:                     long delay = ((Number) entry.getValue()).longValue();
1:5d353e2:                     if (delay > 0) {
1:5d353e2:                         jms.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);
1:5d353e2:                     }
1:5d353e2:                 } else if ("x-opt-delivery-repeat".equals(key) && entry.getValue() != null) {
1:5d353e2:                     int repeat = ((Number) entry.getValue()).intValue();
1:5d353e2:                     if (repeat > 0) {
1:5d353e2:                         jms.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, repeat);
1:5d353e2:                     }
1:5d353e2:                 } else if ("x-opt-delivery-period".equals(key) && entry.getValue() != null) {
1:5d353e2:                     long period = ((Number) entry.getValue()).longValue();
1:5d353e2:                     if (period > 0) {
1:5d353e2:                         jms.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, period);
1:5d353e2:                     }
1:5d353e2:                 } else if ("x-opt-delivery-cron".equals(key) && entry.getValue() != null) {
1:5d353e2:                     String cronEntry = (String) entry.getValue();
1:5d353e2:                     if (cronEntry != null) {
1:5d353e2:                         jms.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, cronEntry);
1:5d353e2:                     }
1:480b3e7:                 }
1:4d6f4d7: 
1:63d62a7:                 setProperty(jms, JMS_AMQP_MESSAGE_ANNOTATION_PREFIX + key, entry.getValue());
1:6e69319:             }
1:6e69319:         }
1:6e69319: 
1:6e69319:         final ApplicationProperties ap = amqp.getApplicationProperties();
1:6e69319:         if (ap != null) {
1:36a2871:             for (Map.Entry<String, Object> entry : ((Map<String, Object>) ap.getValue()).entrySet()) {
1:e7bce02:                 setProperty(jms,  entry.getKey(), entry.getValue());
1:6e69319:             }
1:6e69319:         }
1:6e69319: 
1:6e69319:         final Properties properties = amqp.getProperties();
1:6e69319:         if (properties != null) {
1:63d62a7:             jms.setBooleanProperty(JMS_AMQP_PROPERTIES, true);
1:6e69319:             if (properties.getMessageId() != null) {
1:4d6f4d7:                 jms.setJMSMessageID(AMQPMessageIdHelper.INSTANCE.toBaseMessageIdString(properties.getMessageId()));
1:6e69319:             }
1:6e69319:             Binary userId = properties.getUserId();
1:6e69319:             if (userId != null) {
1:63d62a7:                 jms.setUserID(new String(userId.getArray(), userId.getArrayOffset(), userId.getLength(), StandardCharsets.UTF_8));
1:6e69319:             }
1:6e69319:             if (properties.getTo() != null) {
1:63d62a7:                 jms.setDestination((ActiveMQDestination.createDestination(properties.getTo(), ActiveMQDestination.QUEUE_TYPE)));
1:6e69319:             }
1:6e69319:             if (properties.getSubject() != null) {
1:63d62a7:                 jms.setType(properties.getSubject());
1:6e69319:             }
1:6e69319:             if (properties.getReplyTo() != null) {
1:63d62a7:                 jms.setReplyTo((ActiveMQDestination.createDestination(properties.getReplyTo(), ActiveMQDestination.QUEUE_TYPE)));
1:6e69319:             }
1:6e69319:             if (properties.getCorrelationId() != null) {
1:63d62a7:                 jms.setCorrelationId(AMQPMessageIdHelper.INSTANCE.toBaseMessageIdString(properties.getCorrelationId()));
1:6e69319:             }
1:6e69319:             if (properties.getContentType() != null) {
1:63d62a7:                 jms.setStringProperty(JMS_AMQP_CONTENT_TYPE, properties.getContentType().toString());
1:6e69319:             }
1:6e69319:             if (properties.getContentEncoding() != null) {
1:63d62a7:                 jms.setStringProperty(JMS_AMQP_CONTENT_ENCODING, properties.getContentEncoding().toString());
1:6e69319:             }
1:6e69319:             if (properties.getCreationTime() != null) {
1:63d62a7:                 jms.setTimestamp(properties.getCreationTime().getTime());
1:6e69319:             }
1:6e69319:             if (properties.getGroupId() != null) {
1:63d62a7:                 jms.setGroupID(properties.getGroupId());
1:6e69319:             }
1:6e69319:             if (properties.getGroupSequence() != null) {
1:63d62a7:                 jms.setGroupSequence(properties.getGroupSequence().intValue());
1:6e69319:             }
1:6e69319:             if (properties.getReplyToGroupId() != null) {
1:63d62a7:                 jms.setStringProperty(JMS_AMQP_REPLYTO_GROUP_ID, properties.getReplyToGroupId());
1:6e69319:             }
1:6e69319:             if (properties.getAbsoluteExpiryTime() != null) {
1:63d62a7:                 jms.setExpiration(properties.getAbsoluteExpiryTime().getTime());
1:6e69319:             }
1:6e69319:         }
1:6e69319: 
1:6e69319:         // If the jms expiration has not yet been set...
1:63d62a7:         if (header != null && jms.getJMSExpiration() == 0) {
1:6e69319:             // Then lets try to set it based on the message ttl.
1:63d62a7:             long ttl = Message.DEFAULT_TIME_TO_LIVE;
1:6e69319:             if (header.getTtl() != null) {
1:6e69319:                 ttl = header.getTtl().longValue();
1:6e69319:             }
1:4d6f4d7: 
1:63d62a7:             if (ttl != javax.jms.Message.DEFAULT_TIME_TO_LIVE) {
1:63d62a7:                 jms.setExpiration(System.currentTimeMillis() + ttl);
1:6e69319:             }
1:6e69319:         }
1:6e69319: 
1:6e69319:         final Footer fp = amqp.getFooter();
1:6e69319:         if (fp != null) {
1:6e69319:             for (Map.Entry<Object, Object> entry : (Set<Map.Entry<Object, Object>>) fp.getValue().entrySet()) {
1:6e69319:                 String key = entry.getKey().toString();
1:63d62a7:                 setProperty(jms, JMS_AMQP_FOOTER_PREFIX + key, entry.getValue());
1:6e69319:             }
1:6e69319:         }
1:6e69319:     }
1:6e69319: 
1:6e69319:     private void setProperty(Message msg, String key, Object value) throws JMSException {
1:6e69319:         if (value instanceof UnsignedLong) {
1:6e69319:             long v = ((UnsignedLong) value).longValue();
1:6e69319:             msg.setLongProperty(key, v);
1:6e69319:         } else if (value instanceof UnsignedInteger) {
1:6e69319:             long v = ((UnsignedInteger) value).longValue();
1:6e69319:             if (Integer.MIN_VALUE <= v && v <= Integer.MAX_VALUE) {
1:6e69319:                 msg.setIntProperty(key, (int) v);
1:6e69319:             } else {
1:6e69319:                 msg.setLongProperty(key, v);
1:6e69319:             }
1:6e69319:         } else if (value instanceof UnsignedShort) {
1:6e69319:             int v = ((UnsignedShort) value).intValue();
1:6e69319:             if (Short.MIN_VALUE <= v && v <= Short.MAX_VALUE) {
1:6e69319:                 msg.setShortProperty(key, (short) v);
1:6e69319:             } else {
1:6e69319:                 msg.setIntProperty(key, v);
1:6e69319:             }
1:6e69319:         } else if (value instanceof UnsignedByte) {
1:6e69319:             short v = ((UnsignedByte) value).shortValue();
1:6e69319:             if (Byte.MIN_VALUE <= v && v <= Byte.MAX_VALUE) {
1:6e69319:                 msg.setByteProperty(key, (byte) v);
1:6e69319:             } else {
1:6e69319:                 msg.setShortProperty(key, v);
1:6e69319:             }
1:6e69319:         } else if (value instanceof Symbol) {
1:6e69319:             msg.setStringProperty(key, value.toString());
1:6e69319:         } else if (value instanceof Decimal128) {
1:6e69319:             msg.setDoubleProperty(key, ((Decimal128) value).doubleValue());
1:6e69319:         } else if (value instanceof Decimal64) {
1:6e69319:             msg.setDoubleProperty(key, ((Decimal64) value).doubleValue());
1:6e69319:         } else if (value instanceof Decimal32) {
1:6e69319:             msg.setFloatProperty(key, ((Decimal32) value).floatValue());
1:6e69319:         } else if (value instanceof Binary) {
1:6e69319:             msg.setStringProperty(key, value.toString());
1:6e69319:         } else {
1:6e69319:             msg.setObjectProperty(key, value);
1:6e69319:         }
1:6e69319:     }
1:6e69319: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:36a2871
/////////////////////////////////////////////////////////////////////////
1:             for (Map.Entry<String, Object> entry : ((Map<String, Object>) ap.getValue()).entrySet()) {
commit:e7bce02
/////////////////////////////////////////////////////////////////////////
0:             for (Map.Entry<String, Object> entry : ap.getValue().entrySet()) {
1:                 setProperty(jms,  entry.getKey(), entry.getValue());
commit:a2d92ef
/////////////////////////////////////////////////////////////////////////
1:             jms.setPersistent(false);
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_CONTENT_ENCODING;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_CONTENT_TYPE;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_FIRST_ACQUIRER;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_FOOTER_PREFIX;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_HEADER;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_MESSAGE_ANNOTATION_PREFIX;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_PROPERTIES;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_REPLYTO_GROUP_ID;
1: 
1: import java.nio.charset.StandardCharsets;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
1:     public final ActiveMQMessage transform(EncodedMessage amqpMessage) throws Exception {
1:         ActiveMQMessage message = null;
/////////////////////////////////////////////////////////////////////////
1:     protected abstract ActiveMQMessage doTransform(EncodedMessage amqpMessage) throws Exception;
1:     protected void populateMessage(ActiveMQMessage jms, org.apache.qpid.proton.message.Message amqp) throws Exception {
1:         if (header != null) {
1:             jms.setBooleanProperty(JMS_AMQP_HEADER, true);
1:             if (header.getDurable() != null) {
1:                 jms.setPersistent(header.getDurable().booleanValue());
1:             }
1: 
1:             if (header.getPriority() != null) {
1:                 jms.setJMSPriority(header.getPriority().intValue());
1:             } else {
1:                 jms.setPriority((byte) Message.DEFAULT_PRIORITY);
1:             }
1: 
1:             if (header.getFirstAcquirer() != null) {
1:                 jms.setBooleanProperty(JMS_AMQP_FIRST_ACQUIRER, header.getFirstAcquirer());
1:             }
1: 
1:             if (header.getDeliveryCount() != null) {
1:                 jms.setRedeliveryCounter(header.getDeliveryCount().intValue());
1:             }
1:             jms.setPriority((byte) Message.DEFAULT_PRIORITY);
1:                 if ("x-opt-delivery-time".equals(key) && entry.getValue() != null) {
/////////////////////////////////////////////////////////////////////////
1:                 setProperty(jms, JMS_AMQP_MESSAGE_ANNOTATION_PREFIX + key, entry.getValue());
0:                 setProperty(jms,  entry.getKey().toString(), entry.getValue());
1:             jms.setBooleanProperty(JMS_AMQP_PROPERTIES, true);
1:                 jms.setUserID(new String(userId.getArray(), userId.getArrayOffset(), userId.getLength(), StandardCharsets.UTF_8));
1:                 jms.setDestination((ActiveMQDestination.createDestination(properties.getTo(), ActiveMQDestination.QUEUE_TYPE)));
1:                 jms.setType(properties.getSubject());
1:                 jms.setReplyTo((ActiveMQDestination.createDestination(properties.getReplyTo(), ActiveMQDestination.QUEUE_TYPE)));
1:                 jms.setCorrelationId(AMQPMessageIdHelper.INSTANCE.toBaseMessageIdString(properties.getCorrelationId()));
1:                 jms.setStringProperty(JMS_AMQP_CONTENT_TYPE, properties.getContentType().toString());
1:                 jms.setStringProperty(JMS_AMQP_CONTENT_ENCODING, properties.getContentEncoding().toString());
1:                 jms.setTimestamp(properties.getCreationTime().getTime());
1:                 jms.setGroupID(properties.getGroupId());
1:                 jms.setGroupSequence(properties.getGroupSequence().intValue());
1:                 jms.setStringProperty(JMS_AMQP_REPLYTO_GROUP_ID, properties.getReplyToGroupId());
1:                 jms.setExpiration(properties.getAbsoluteExpiryTime().getTime());
1:         if (header != null && jms.getJMSExpiration() == 0) {
1:             long ttl = Message.DEFAULT_TIME_TO_LIVE;
1:             if (ttl != javax.jms.Message.DEFAULT_TIME_TO_LIVE) {
1:                 jms.setExpiration(System.currentTimeMillis() + ttl);
/////////////////////////////////////////////////////////////////////////
1:                 setProperty(jms, JMS_AMQP_FOOTER_PREFIX + key, entry.getValue());
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.AmqpProtocolException;
/////////////////////////////////////////////////////////////////////////
0:     protected final ActiveMQJMSVendor vendor;
0:     protected String prefixVendor = "JMS_AMQP_";
0:     protected String prefixDeliveryAnnotations = "DA_";
0:     protected String prefixMessageAnnotations = "MA_";
0:     protected String prefixFooter = "FT_";
0:     protected int defaultDeliveryMode = javax.jms.DeliveryMode.NON_PERSISTENT;
0:     protected int defaultPriority = javax.jms.Message.DEFAULT_PRIORITY;
0:     protected long defaultTtl = javax.jms.Message.DEFAULT_TIME_TO_LIVE;
0:     public InboundTransformer(ActiveMQJMSVendor vendor) {
0:     public final Message transform(EncodedMessage amqpMessage) throws Exception {
1:         InboundTransformer transformer = this;
0:         Message message = null;
1: 
1:         while (transformer != null) {
1:             try {
1:                 message = transformer.doTransform(amqpMessage);
1:                 break;
1:             } catch (Exception e) {
1:                 transformer = transformer.getFallbackTransformer();
1:             }
1:         }
1: 
1:         if (message == null) {
1:             throw new AmqpProtocolException("Failed to transform incoming delivery, skipping.", false);
1:         }
1: 
1:         return message;
1:     }
1: 
0:     protected abstract Message doTransform(EncodedMessage amqpMessage) throws Exception;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public ActiveMQJMSVendor getVendor() {
commit:16c487a
/////////////////////////////////////////////////////////////////////////
0:                 jms.setJMSCorrelationID(AMQPMessageIdHelper.INSTANCE.toBaseMessageIdString(properties.getCorrelationId()));
commit:4d6f4d7
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                 jms.setJMSMessageID(AMQPMessageIdHelper.INSTANCE.toBaseMessageIdString(properties.getMessageId()));
/////////////////////////////////////////////////////////////////////////
1: 
commit:5d353e2
/////////////////////////////////////////////////////////////////////////
0:                 } else if ("x-opt-delivery-time".equals(key) && entry.getValue() != null) {
1:                 } else if ("x-opt-delivery-delay".equals(key) && entry.getValue() != null) {
1:                     long delay = ((Number) entry.getValue()).longValue();
1:                     if (delay > 0) {
1:                         jms.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);
1:                     }
1:                 } else if ("x-opt-delivery-repeat".equals(key) && entry.getValue() != null) {
1:                     int repeat = ((Number) entry.getValue()).intValue();
1:                     if (repeat > 0) {
1:                         jms.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, repeat);
1:                     }
1:                 } else if ("x-opt-delivery-period".equals(key) && entry.getValue() != null) {
1:                     long period = ((Number) entry.getValue()).longValue();
1:                     if (period > 0) {
1:                         jms.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, period);
1:                     }
1:                 } else if ("x-opt-delivery-cron".equals(key) && entry.getValue() != null) {
1:                     String cronEntry = (String) entry.getValue();
1:                     if (cronEntry != null) {
1:                         jms.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, cronEntry);
1:                     }
commit:480b3e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ScheduledMessage;
/////////////////////////////////////////////////////////////////////////
0:                 if ("x-opt-delivery-time".equals(key) && entry.getValue() != null) {
1:                     long deliveryTime = ((Number) entry.getValue()).longValue();
1:                     long delay = deliveryTime - System.currentTimeMillis();
1:                     if (delay > 0) {
1:                         jms.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);
1:                     }
1:                 }
commit:11da37b
/////////////////////////////////////////////////////////////////////////
0:     int defaultDeliveryMode = javax.jms.DeliveryMode.NON_PERSISTENT;
commit:13b915a
/////////////////////////////////////////////////////////////////////////
0:     public abstract Message transform(EncodedMessage amqpMessage) throws Exception;
1: 
1:     public abstract String getTransformerName();
1: 
1:     public abstract InboundTransformer getFallbackTransformer();
commit:f05ff94
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:2ec586f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 jms.setJMSDestination(vendor.createDestination(properties.getTo()));
0:                 jms.setJMSReplyTo(vendor.createDestination(properties.getReplyTo()));
/////////////////////////////////////////////////////////////////////////
commit:6e69319
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
0: import java.util.Collections;
0: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
0: import javax.jms.DeliveryMode;
0: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
0: import javax.jms.Queue;
0: import javax.jms.TemporaryQueue;
0: import javax.jms.TemporaryTopic;
0: import javax.jms.Topic;
1: 
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.Decimal128;
1: import org.apache.qpid.proton.amqp.Decimal32;
1: import org.apache.qpid.proton.amqp.Decimal64;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.UnsignedByte;
1: import org.apache.qpid.proton.amqp.UnsignedInteger;
1: import org.apache.qpid.proton.amqp.UnsignedLong;
1: import org.apache.qpid.proton.amqp.UnsignedShort;
1: import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;
0: import org.apache.qpid.proton.amqp.messaging.DeliveryAnnotations;
1: import org.apache.qpid.proton.amqp.messaging.Footer;
1: import org.apache.qpid.proton.amqp.messaging.Header;
1: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1: import org.apache.qpid.proton.amqp.messaging.Properties;
1: 
1: public abstract class InboundTransformer {
1: 
0:     JMSVendor vendor;
1: 
1:     public static final String TRANSFORMER_NATIVE = "native";
1:     public static final String TRANSFORMER_RAW = "raw";
1:     public static final String TRANSFORMER_JMS = "jms";
1: 
0:     String prefixVendor = "JMS_AMQP_";
0:     String prefixDeliveryAnnotations = "DA_";
0:     String prefixMessageAnnotations = "MA_";
0:     String prefixFooter = "FT_";
1: 
0:     int defaultDeliveryMode = javax.jms.Message.DEFAULT_DELIVERY_MODE;
0:     int defaultPriority = javax.jms.Message.DEFAULT_PRIORITY;
0:     long defaultTtl = javax.jms.Message.DEFAULT_TIME_TO_LIVE;
1: 
0:     private boolean useByteDestinationTypeAnnotations = false;
1: 
0:     public InboundTransformer(JMSVendor vendor) {
0:         this.vendor = vendor;
1:     }
1: 
0:     abstract public Message transform(EncodedMessage amqpMessage) throws Exception;
1: 
0:     public boolean isUseByteDestinationTypeAnnotations() {
0:         return useByteDestinationTypeAnnotations;
1:     }
1: 
0:     public void setUseByteDestinationTypeAnnotations(boolean useByteDestinationTypeAnnotations) {
0:         this.useByteDestinationTypeAnnotations = useByteDestinationTypeAnnotations;
1:     }
1: 
0:     public int getDefaultDeliveryMode() {
0:         return defaultDeliveryMode;
1:     }
1: 
0:     public void setDefaultDeliveryMode(int defaultDeliveryMode) {
0:         this.defaultDeliveryMode = defaultDeliveryMode;
1:     }
1: 
0:     public int getDefaultPriority() {
0:         return defaultPriority;
1:     }
1: 
0:     public void setDefaultPriority(int defaultPriority) {
0:         this.defaultPriority = defaultPriority;
1:     }
1: 
0:     public long getDefaultTtl() {
0:         return defaultTtl;
1:     }
1: 
0:     public void setDefaultTtl(long defaultTtl) {
0:         this.defaultTtl = defaultTtl;
1:     }
1: 
0:     public String getPrefixVendor() {
0:         return prefixVendor;
1:     }
1: 
0:     public void setPrefixVendor(String prefixVendor) {
0:         this.prefixVendor = prefixVendor;
1:     }
1: 
0:     public JMSVendor getVendor() {
0:         return vendor;
1:     }
1: 
0:     public void setVendor(JMSVendor vendor) {
0:         this.vendor = vendor;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
0:     protected void populateMessage(Message jms, org.apache.qpid.proton.message.Message amqp) throws Exception {
1:         Header header = amqp.getHeader();
0:         if (header == null) {
0:             header = new Header();
1:         }
1: 
0:         if (header.getDurable() != null) {
0:             jms.setJMSDeliveryMode(header.getDurable().booleanValue() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT);
1:         } else {
0:             jms.setJMSDeliveryMode(defaultDeliveryMode);
1:         }
0:         if (header.getPriority() != null) {
0:             jms.setJMSPriority(header.getPriority().intValue());
1:         } else {
0:             jms.setJMSPriority(defaultPriority);
1:         }
0:         if (header.getFirstAcquirer() != null) {
0:             jms.setBooleanProperty(prefixVendor + "FirstAcquirer", header.getFirstAcquirer());
1:         }
0:         if (header.getDeliveryCount() != null) {
0:             vendor.setJMSXDeliveryCount(jms, header.getDeliveryCount().longValue());
1:         }
1: 
0:         final DeliveryAnnotations da = amqp.getDeliveryAnnotations();
0:         if (da != null) {
0:             for (Map.Entry<?, ?> entry : da.getValue().entrySet()) {
1:                 String key = entry.getKey().toString();
0:                 setProperty(jms, prefixVendor + prefixDeliveryAnnotations + key, entry.getValue());
1:             }
1:         }
1: 
0:         Class<? extends Destination> toAttributes = null;
0:         Class<? extends Destination> replyToAttributes = null;
1: 
0:         if (isUseByteDestinationTypeAnnotations()) {
0:             toAttributes = Queue.class;
0:             replyToAttributes = Queue.class;
1:         } else {
0:             toAttributes = Destination.class;
0:             replyToAttributes = Destination.class;
1:         }
1: 
1:         final MessageAnnotations ma = amqp.getMessageAnnotations();
1:         if (ma != null) {
1:             for (Map.Entry<?, ?> entry : ma.getValue().entrySet()) {
1:                 String key = entry.getKey().toString();
0:                 if ("x-opt-jms-type".equals(key.toString()) && entry.getValue() != null) {
0:                     jms.setJMSType(entry.getValue().toString());
0:                 } else if ("x-opt-to-type".equals(key.toString())) {
0:                     toAttributes = toClassFromAttributes(entry.getValue());
0:                 } else if ("x-opt-reply-type".equals(key.toString())) {
0:                     replyToAttributes = toClassFromAttributes(entry.getValue());
1:                 } else {
0:                     setProperty(jms, prefixVendor + prefixMessageAnnotations + key, entry.getValue());
1:                 }
1:             }
1:         }
1: 
1:         final ApplicationProperties ap = amqp.getApplicationProperties();
1:         if (ap != null) {
0:             for (Map.Entry<Object, Object> entry : (Set<Map.Entry<Object, Object>>) ap.getValue().entrySet()) {
1:                 String key = entry.getKey().toString();
0:                 if ("JMSXGroupID".equals(key)) {
0:                     vendor.setJMSXGroupID(jms, entry.getValue().toString());
0:                 } else if ("JMSXGroupSequence".equals(key)) {
0:                     vendor.setJMSXGroupSequence(jms, ((Number) entry.getValue()).intValue());
0:                 } else if ("JMSXUserID".equals(key)) {
0:                     vendor.setJMSXUserID(jms, entry.getValue().toString());
1:                 } else {
0:                     setProperty(jms, key, entry.getValue());
1:                 }
1:             }
1:         }
1: 
1:         final Properties properties = amqp.getProperties();
1:         if (properties != null) {
1:             if (properties.getMessageId() != null) {
0:                 jms.setJMSMessageID(properties.getMessageId().toString());
1:             }
1:             Binary userId = properties.getUserId();
1:             if (userId != null) {
0:                 vendor.setJMSXUserID(jms, new String(userId.getArray(), userId.getArrayOffset(), userId.getLength(), "UTF-8"));
1:             }
1:             if (properties.getTo() != null) {
0:                 jms.setJMSDestination(vendor.createDestination(properties.getTo(), toAttributes));
1:             }
1:             if (properties.getSubject() != null) {
0:                 jms.setStringProperty(prefixVendor + "Subject", properties.getSubject());
1:             }
1:             if (properties.getReplyTo() != null) {
0:                 jms.setJMSReplyTo(vendor.createDestination(properties.getReplyTo(), replyToAttributes));
1:             }
1:             if (properties.getCorrelationId() != null) {
0:                 jms.setJMSCorrelationID(properties.getCorrelationId().toString());
1:             }
1:             if (properties.getContentType() != null) {
0:                 jms.setStringProperty(prefixVendor + "ContentType", properties.getContentType().toString());
1:             }
1:             if (properties.getContentEncoding() != null) {
0:                 jms.setStringProperty(prefixVendor + "ContentEncoding", properties.getContentEncoding().toString());
1:             }
1:             if (properties.getCreationTime() != null) {
0:                 jms.setJMSTimestamp(properties.getCreationTime().getTime());
1:             }
1:             if (properties.getGroupId() != null) {
0:                 vendor.setJMSXGroupID(jms, properties.getGroupId());
1:             }
1:             if (properties.getGroupSequence() != null) {
0:                 vendor.setJMSXGroupSequence(jms, properties.getGroupSequence().intValue());
1:             }
1:             if (properties.getReplyToGroupId() != null) {
0:                 jms.setStringProperty(prefixVendor + "ReplyToGroupID", properties.getReplyToGroupId());
1:             }
1:             if (properties.getAbsoluteExpiryTime() != null) {
0:                 jms.setJMSExpiration(properties.getAbsoluteExpiryTime().getTime());
1:             }
1:         }
1: 
1:         // If the jms expiration has not yet been set...
0:         if (jms.getJMSExpiration() == 0) {
1:             // Then lets try to set it based on the message ttl.
0:             long ttl = defaultTtl;
1:             if (header.getTtl() != null) {
1:                 ttl = header.getTtl().longValue();
1:             }
0:             if (ttl == 0) {
0:                 jms.setJMSExpiration(0);
1:             } else {
0:                 jms.setJMSExpiration(System.currentTimeMillis() + ttl);
1:             }
1:         }
1: 
1:         final Footer fp = amqp.getFooter();
1:         if (fp != null) {
1:             for (Map.Entry<Object, Object> entry : (Set<Map.Entry<Object, Object>>) fp.getValue().entrySet()) {
1:                 String key = entry.getKey().toString();
0:                 setProperty(jms, prefixVendor + prefixFooter + key, entry.getValue());
1:             }
1:         }
1:     }
1: 
0:     private static final Set<String> QUEUE_ATTRIBUTES = createSet("queue");
0:     private static final Set<String> TOPIC_ATTRIBUTES = createSet("topic");
0:     private static final Set<String> TEMP_QUEUE_ATTRIBUTES = createSet("queue", "temporary");
0:     private static final Set<String> TEMP_TOPIC_ATTRIBUTES = createSet("topic", "temporary");
1: 
0:     private static Set<String> createSet(String... args) {
0:         HashSet<String> s = new HashSet<String>();
0:         for (String arg : args) {
0:             s.add(arg);
1:         }
0:         return Collections.unmodifiableSet(s);
1:     }
1: 
0:     Class<? extends Destination> toClassFromAttributes(Object value) {
0:         if (isUseByteDestinationTypeAnnotations()) {
0:             if (value instanceof Byte) {
0:                 switch ((Byte) value) {
0:                     case JMSVendor.QUEUE_TYPE:
0:                         return Queue.class;
0:                     case JMSVendor.TOPIC_TYPE:
0:                         return Topic.class;
0:                     case JMSVendor.TEMP_QUEUE_TYPE:
0:                         return TemporaryQueue.class;
0:                     case JMSVendor.TEMP_TOPIC_TYPE:
0:                         return TemporaryTopic.class;
0:                     default:
0:                         return Queue.class;
1:                 }
1:             }
1: 
0:             return Queue.class;
1:         } else {
0:             if (value == null) {
0:                 return null;
1:             }
0:             String valueString = value.toString();
0:             HashSet<String> attributes = new HashSet<String>();
0:             for (String x : valueString.split("\\s*,\\s*")) {
0:                 attributes.add(x);
1:             }
1: 
0:             if (QUEUE_ATTRIBUTES.equals(attributes)) {
0:                 return Queue.class;
1:             }
0:             if (TOPIC_ATTRIBUTES.equals(attributes)) {
0:                 return Topic.class;
1:             }
0:             if (TEMP_QUEUE_ATTRIBUTES.equals(attributes)) {
0:                 return TemporaryQueue.class;
1:             }
0:             if (TEMP_TOPIC_ATTRIBUTES.equals(attributes)) {
0:                 return TemporaryTopic.class;
1:             }
0:             return Destination.class;
1:         }
1:     }
1: 
1:     private void setProperty(Message msg, String key, Object value) throws JMSException {
1:         if (value instanceof UnsignedLong) {
1:             long v = ((UnsignedLong) value).longValue();
1:             msg.setLongProperty(key, v);
1:         } else if (value instanceof UnsignedInteger) {
1:             long v = ((UnsignedInteger) value).longValue();
1:             if (Integer.MIN_VALUE <= v && v <= Integer.MAX_VALUE) {
1:                 msg.setIntProperty(key, (int) v);
1:             } else {
1:                 msg.setLongProperty(key, v);
1:             }
1:         } else if (value instanceof UnsignedShort) {
1:             int v = ((UnsignedShort) value).intValue();
1:             if (Short.MIN_VALUE <= v && v <= Short.MAX_VALUE) {
1:                 msg.setShortProperty(key, (short) v);
1:             } else {
1:                 msg.setIntProperty(key, v);
1:             }
1:         } else if (value instanceof UnsignedByte) {
1:             short v = ((UnsignedByte) value).shortValue();
1:             if (Byte.MIN_VALUE <= v && v <= Byte.MAX_VALUE) {
1:                 msg.setByteProperty(key, (byte) v);
1:             } else {
1:                 msg.setShortProperty(key, v);
1:             }
1:         } else if (value instanceof Symbol) {
1:             msg.setStringProperty(key, value.toString());
1:         } else if (value instanceof Decimal128) {
1:             msg.setDoubleProperty(key, ((Decimal128) value).doubleValue());
1:         } else if (value instanceof Decimal64) {
1:             msg.setDoubleProperty(key, ((Decimal64) value).doubleValue());
1:         } else if (value instanceof Decimal32) {
1:             msg.setFloatProperty(key, ((Decimal32) value).floatValue());
1:         } else if (value instanceof Binary) {
1:             msg.setStringProperty(key, value.toString());
1:         } else {
1:             msg.setObjectProperty(key, value);
1:         }
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:6b18857
/////////////////////////////////////////////////////////////////////////
0:                 if ("x-opt-jms-type".equals(key) && entry.getValue() != null) {
0:                     // Legacy annotation, JMSType value will be replaced by Subject further down if also present.
0: 
0:                 setProperty(jms, prefixVendor + prefixMessageAnnotations + key, entry.getValue());
/////////////////////////////////////////////////////////////////////////
0:                 jms.setJMSType(properties.getSubject());
commit:37b1b6a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Class<? extends Destination> toAttributes = Destination.class;
0:         Class<? extends Destination> replyToAttributes = Destination.class;
/////////////////////////////////////////////////////////////////////////
0:                     toAttributes = toClassFromAttributes(entry.getValue().toString());
0:                     replyToAttributes = toClassFromAttributes(entry.getValue().toString());
/////////////////////////////////////////////////////////////////////////
0:     Class<? extends Destination> toClassFromAttributes(String value) {
0:         if( value ==null ) {
0:             return null;
0:         HashSet<String> attributes = new HashSet<String>();
0:         for( String x: value.split("\\s*,\\s*") ) {
0:             attributes.add(x);
0:         }
0:          if( QUEUE_ATTRIBUTES.equals(attributes) ) {
0:             return Queue.class;
0:         }
0:         if( TOPIC_ATTRIBUTES.equals(attributes) ) {
0:             return Topic.class;
0:         }
0:         if( TEMP_QUEUE_ATTRIBUTES.equals(attributes) ) {
0:             return TemporaryQueue.class;
0:         }
0:         if( TEMP_TOPIC_ATTRIBUTES.equals(attributes) ) {
0:             return TemporaryTopic.class;
0:         }
0:         return Destination.class;
============================================================================