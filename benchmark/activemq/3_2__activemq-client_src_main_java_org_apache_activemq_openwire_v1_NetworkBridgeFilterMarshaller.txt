1:aecbd1c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:aecbd1c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:aecbd1c:  *
1:aecbd1c:  * Unless required by applicable law or agreed to in writing, software
1:aecbd1c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:aecbd1c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aecbd1c:  * See the License for the specific language governing permissions and
1:aecbd1c:  * limitations under the License.
1:aecbd1c:  */
1:aecbd1c: 
1:aecbd1c: package org.apache.activemq.openwire.v1;
1:aecbd1c: 
1:4821b9d: import java.io.DataInput;
1:4821b9d: import java.io.DataOutput;
1:aecbd1c: import java.io.IOException;
1:aecbd1c: 
1:74a7a8b: import org.apache.activemq.command.DataStructure;
1:74a7a8b: import org.apache.activemq.command.NetworkBridgeFilter;
1:74a7a8b: import org.apache.activemq.openwire.BooleanStream;
1:74a7a8b: import org.apache.activemq.openwire.OpenWireFormat;
1:aecbd1c: 
1:aecbd1c: 
1:aecbd1c: 
1:aecbd1c: /**
1:aecbd1c:  * Marshalling code for Open Wire Format for NetworkBridgeFilterMarshaller
1:aecbd1c:  *
1:aecbd1c:  *
1:aecbd1c:  * NOTE!: This file is auto generated - do not modify!
1:aecbd1c:  *        if you need to make a change, please see the modify the groovy scripts in the
1:aecbd1c:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:aecbd1c:  *        this file.
1:b0c2a40:  *
1:aecbd1c:  * 
1:aecbd1c:  */
1:aecbd1c: public class NetworkBridgeFilterMarshaller extends BaseDataStreamMarshaller {
1:aecbd1c: 
1:aecbd1c:     /**
1:aecbd1c:      * Return the type of Data Structure we marshal
1:aecbd1c:      * @return short representation of the type data structure
1:aecbd1c:      */
1:aecbd1c:     public byte getDataStructureType() {
1:aecbd1c:         return NetworkBridgeFilter.DATA_STRUCTURE_TYPE;
1:aecbd1c:     }
1:aecbd1c:     
1:aecbd1c:     /**
1:aecbd1c:      * @return a new object instance
1:aecbd1c:      */
1:aecbd1c:     public DataStructure createObject() {
1:aecbd1c:         return new NetworkBridgeFilter();
1:aecbd1c:     }
1:aecbd1c: 
1:aecbd1c:     /**
1:aecbd1c:      * Un-marshal an object instance from the data input stream
1:aecbd1c:      *
1:aecbd1c:      * @param o the object to un-marshal
1:aecbd1c:      * @param dataIn the data input stream to build the object from
1:aecbd1c:      * @throws IOException
1:aecbd1c:      */
1:4821b9d:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:aecbd1c:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1:aecbd1c: 
1:aecbd1c:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1:aecbd1c:         info.setNetworkTTL(dataIn.readInt());
1:aecbd1c:         info.setNetworkBrokerId((org.apache.activemq.command.BrokerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:aecbd1c: 
1:aecbd1c:     }
1:aecbd1c: 
1:aecbd1c: 
1:aecbd1c:     /**
1:aecbd1c:      * Write the booleans that this object uses to a BooleanStream
1:aecbd1c:      */
1:aecbd1c:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:aecbd1c: 
1:aecbd1c:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1:aecbd1c: 
1:aecbd1c:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:aecbd1c:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getNetworkBrokerId(), bs);
1:aecbd1c: 
1:aecbd1c:         return rc + 4;
1:aecbd1c:     }
1:aecbd1c: 
1:aecbd1c:     /**
1:aecbd1c:      * Write a object instance to data output stream
1:aecbd1c:      *
1:aecbd1c:      * @param o the instance to be marshaled
1:aecbd1c:      * @param dataOut the output stream
1:aecbd1c:      * @throws IOException thrown if an error occurs
1:aecbd1c:      */
1:4821b9d:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:aecbd1c:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1:aecbd1c: 
1:aecbd1c:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1:aecbd1c:         dataOut.writeInt(info.getNetworkTTL());
1:aecbd1c:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getNetworkBrokerId(), dataOut, bs);
1:aecbd1c: 
1:aecbd1c:     }
1:aecbd1c: 
1:aecbd1c:     /**
1:aecbd1c:      * Un-marshal an object instance from the data input stream
1:aecbd1c:      *
1:aecbd1c:      * @param o the object to un-marshal
1:aecbd1c:      * @param dataIn the data input stream to build the object from
1:aecbd1c:      * @throws IOException
1:aecbd1c:      */
1:4821b9d:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:aecbd1c:         super.looseUnmarshal(wireFormat, o, dataIn);
1:aecbd1c: 
1:aecbd1c:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1:aecbd1c:         info.setNetworkTTL(dataIn.readInt());
1:aecbd1c:         info.setNetworkBrokerId((org.apache.activemq.command.BrokerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:aecbd1c: 
1:aecbd1c:     }
1:aecbd1c: 
1:aecbd1c: 
1:aecbd1c:     /**
1:aecbd1c:      * Write the booleans that this object uses to a BooleanStream
1:aecbd1c:      */
1:4821b9d:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:aecbd1c: 
1:aecbd1c:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1:aecbd1c: 
1:aecbd1c:         super.looseMarshal(wireFormat, o, dataOut);
1:aecbd1c:         dataOut.writeInt(info.getNetworkTTL());
1:aecbd1c:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getNetworkBrokerId(), dataOut);
1:aecbd1c: 
1:aecbd1c:     }
1:aecbd1c: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.DataStructure;
1: import org.apache.activemq.command.NetworkBridgeFilter;
1: import org.apache.activemq.openwire.BooleanStream;
1: import org.apache.activemq.openwire.OpenWireFormat;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:aecbd1c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.openwire.v1;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
0: import org.apache.activemq.openwire.*;
0: import org.apache.activemq.command.*;
1: 
1: 
1: 
1: /**
1:  * Marshalling code for Open Wire Format for NetworkBridgeFilterMarshaller
1:  *
1:  *
1:  * NOTE!: This file is auto generated - do not modify!
1:  *        if you need to make a change, please see the modify the groovy scripts in the
1:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:  *        this file.
1:  *
0:  * @version $Revision$
1:  */
1: public class NetworkBridgeFilterMarshaller extends BaseDataStreamMarshaller {
1: 
1:     /**
1:      * Return the type of Data Structure we marshal
1:      * @return short representation of the type data structure
1:      */
1:     public byte getDataStructureType() {
1:         return NetworkBridgeFilter.DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     /**
1:      * @return a new object instance
1:      */
1:     public DataStructure createObject() {
1:         return new NetworkBridgeFilter();
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
0:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {
1:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1: 
1:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1:         info.setNetworkTTL(dataIn.readInt());
1:         info.setNetworkBrokerId((org.apache.activemq.command.BrokerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1: 
1:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1: 
1:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getNetworkBrokerId(), bs);
1: 
1:         return rc + 4;
1:     }
1: 
1:     /**
1:      * Write a object instance to data output stream
1:      *
1:      * @param o the instance to be marshaled
1:      * @param dataOut the output stream
1:      * @throws IOException thrown if an error occurs
1:      */
0:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
1:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1: 
1:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1:         dataOut.writeInt(info.getNetworkTTL());
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getNetworkBrokerId(), dataOut, bs);
1: 
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
0:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn) throws IOException {
1:         super.looseUnmarshal(wireFormat, o, dataIn);
1: 
1:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1:         info.setNetworkTTL(dataIn.readInt());
1:         info.setNetworkBrokerId((org.apache.activemq.command.BrokerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
0:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut) throws IOException {
1: 
1:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
1: 
1:         super.looseMarshal(wireFormat, o, dataOut);
1:         dataOut.writeInt(info.getNetworkTTL());
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getNetworkBrokerId(), dataOut);
1: 
1:     }
1: }
commit:fd5ce05
/////////////////////////////////////////////////////////////////////////
0: /**
commit:6583ef1
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.activemq.openwire.v1;
0: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: 
0: import org.apache.activemq.openwire.*;
0: import org.apache.activemq.command.*;
0: 
0: 
0: 
0: /**
0:  * Marshalling code for Open Wire Format for NetworkBridgeFilterMarshaller
0:  *
0:  *
0:  * NOTE!: This file is auto generated - do not modify!
0:  *        if you need to make a change, please see the modify the groovy scripts in the
0:  *        under src/gram/script and then use maven openwire:generate to regenerate 
0:  *        this file.
0:  *
0:  * @version $Revision$
0:  */
0: public class NetworkBridgeFilterMarshaller extends BaseDataStreamMarshaller {
0: 
0:     /**
0:      * Return the type of Data Structure we marshal
0:      * @return short representation of the type data structure
0:      */
0:     public byte getDataStructureType() {
0:         return NetworkBridgeFilter.DATA_STRUCTURE_TYPE;
0:     }
0:     
0:     /**
0:      * @return a new object instance
0:      */
0:     public DataStructure createObject() {
0:         return new NetworkBridgeFilter();
0:     }
0: 
0:     /**
0:      * Un-marshal an object instance from the data input stream
0:      *
0:      * @param o the object to un-marshal
0:      * @param dataIn the data input stream to build the object from
0:      * @throws IOException
0:      */
0:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {
0:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0:         info.setNetworkTTL(dataIn.readInt());
0:         info.setNetworkBrokerId((org.apache.activemq.command.BrokerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0: 
0:     }
0: 
0: 
0:     /**
0:      * Write the booleans that this object uses to a BooleanStream
0:      */
0:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0: 
0:         int rc = super.tightMarshal1(wireFormat, o, bs);
0:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getNetworkBrokerId(), bs);
0: 
0:         return rc + 4;
0:     }
0: 
0:     /**
0:      * Write a object instance to data output stream
0:      *
0:      * @param o the instance to be marshaled
0:      * @param dataOut the output stream
0:      * @throws IOException thrown if an error occurs
0:      */
0:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         super.tightMarshal2(wireFormat, o, dataOut, bs);
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0:         dataOut.writeInt(info.getNetworkTTL());
0:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getNetworkBrokerId(), dataOut, bs);
0: 
0:     }
0: 
0:     /**
0:      * Un-marshal an object instance from the data input stream
0:      *
0:      * @param o the object to un-marshal
0:      * @param dataIn the data input stream to build the object from
0:      * @throws IOException
0:      */
0:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn) throws IOException {
0:         super.looseUnmarshal(wireFormat, o, dataIn);
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0:         info.setNetworkTTL(dataIn.readInt());
0:         info.setNetworkBrokerId((org.apache.activemq.command.BrokerId) looseUnmarsalCachedObject(wireFormat, dataIn));
0: 
0:     }
0: 
0: 
0:     /**
0:      * Write the booleans that this object uses to a BooleanStream
0:      */
0:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut) throws IOException {
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0: 
0:         super.looseMarshal(wireFormat, o, dataOut);
0:         dataOut.writeInt(info.getNetworkTTL());
0:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getNetworkBrokerId(), dataOut);
0: 
0:     }
0: }
commit:cd0fb61
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.activemq.openwire.v1;
0: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: 
0: import org.apache.activemq.openwire.*;
0: import org.apache.activemq.command.*;
0: 
0: 
0: 
0: /**
0:  * Marshalling code for Open Wire Format for NetworkBridgeFilterMarshaller
0:  *
0:  *
0:  * NOTE!: This file is auto generated - do not modify!
0:  *        if you need to make a change, please see the modify the groovy scripts in the
0:  *        under src/gram/script and then use maven openwire:generate to regenerate 
0:  *        this file.
0:  *
0:  * @version $Revision$
0:  */
0: public class NetworkBridgeFilterMarshaller extends BaseDataStreamMarshaller {
0: 
0:     /**
0:      * Return the type of Data Structure we marshal
0:      * @return short representation of the type data structure
0:      */
0:     public byte getDataStructureType() {
0:         return NetworkBridgeFilter.DATA_STRUCTURE_TYPE;
0:     }
0:     
0:     /**
0:      * @return a new object instance
0:      */
0:     public DataStructure createObject() {
0:         return new NetworkBridgeFilter();
0:     }
0: 
0:     /**
0:      * Un-marshal an object instance from the data input stream
0:      *
0:      * @param o the object to un-marshal
0:      * @param dataIn the data input stream to build the object from
0:      * @throws IOException
0:      */
0:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {
0:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0:         info.setNetworkTTL(dataIn.readInt());
0:         info.setNetworkBrokerId((org.apache.activemq.command.BrokerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0: 
0:     }
0: 
0: 
0:     /**
0:      * Write the booleans that this object uses to a BooleanStream
0:      */
0:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0: 
0:         int rc = super.tightMarshal1(wireFormat, o, bs);
0:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getNetworkBrokerId(), bs);
0: 
0:         return rc + 4;
0:     }
0: 
0:     /**
0:      * Write a object instance to data output stream
0:      *
0:      * @param o the instance to be marshaled
0:      * @param dataOut the output stream
0:      * @throws IOException thrown if an error occurs
0:      */
0:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         super.tightMarshal2(wireFormat, o, dataOut, bs);
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0:         dataOut.writeInt(info.getNetworkTTL());
0:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getNetworkBrokerId(), dataOut, bs);
0: 
0:     }
0: 
0:     /**
0:      * Un-marshal an object instance from the data input stream
0:      *
0:      * @param o the object to un-marshal
0:      * @param dataIn the data input stream to build the object from
0:      * @throws IOException
0:      */
0:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn) throws IOException {
0:         super.looseUnmarshal(wireFormat, o, dataIn);
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0:         info.setNetworkTTL(dataIn.readInt());
0:         info.setNetworkBrokerId((org.apache.activemq.command.BrokerId) looseUnmarsalCachedObject(wireFormat, dataIn));
0: 
0:     }
0: 
0: 
0:     /**
0:      * Write the booleans that this object uses to a BooleanStream
0:      */
0:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut) throws IOException {
0: 
0:         NetworkBridgeFilter info = (NetworkBridgeFilter)o;
0: 
0:         super.looseMarshal(wireFormat, o, dataOut);
0:         dataOut.writeInt(info.getNetworkTTL());
0:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getNetworkBrokerId(), dataOut);
0: 
0:     }
0: }
commit:446629b
/////////////////////////////////////////////////////////////////////////
0: /**
author:Robert Davies
-------------------------------------------------------------------------------
commit:4821b9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
/////////////////////////////////////////////////////////////////////////
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
author:James Strachan
-------------------------------------------------------------------------------
commit:2cd1437
/////////////////////////////////////////////////////////////////////////
0: /**
============================================================================