3:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:5f1adbe:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f1adbe:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
3:a107823:  */
1:54eb93e: package org.apache.activemq.console;
2:a107823: 
1:5f1adbe: import java.io.OutputStream;
1:5f1adbe: import java.util.Collection;
1:5f1adbe: import java.util.Map;
1:5f1adbe: 
1:5f1adbe: import javax.jms.Message;
1:5f1adbe: import javax.management.AttributeList;
1:a107823: import javax.management.ObjectInstance;
1:a107823: import javax.management.ObjectName;
1:a107823: 
1:54eb93e: import org.apache.activemq.console.formatter.OutputFormatter;
1:a107823: 
1:54eb93e: public final class CommandContext {
1:54eb93e:     private OutputFormatter formatter;
1:a107823: 
1:a107823:     /**
1:a107823:      * Retrieve the output stream being used by the global formatter
1:f1486c6:      *
1:f1486c6:      * @return formatter's output stream
1:a107823:      */
1:54eb93e:     public OutputStream getOutputStream() {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
4:a107823:         }
1:a107823:         return formatter.getOutputStream();
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an ObjectInstance format of an mbean
1:f1486c6:      *
1:a107823:      * @param mbean - mbean to print
1:a107823:      */
1:54eb93e:     public void printMBean(ObjectInstance mbean) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printMBean(mbean);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an ObjectName format of an mbean
1:f1486c6:      *
1:a107823:      * @param mbean - mbean to print
1:a107823:      */
1:54eb93e:     public void printMBean(ObjectName mbean) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printMBean(mbean);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an AttributeList format of an mbean
1:f1486c6:      *
1:a107823:      * @param mbean - mbean to print
1:a107823:      */
1:54eb93e:     public void printMBean(AttributeList mbean) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printMBean(mbean);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a Map format of an mbean
1:f1486c6:      *
1:a107823:      * @param mbean
1:a107823:      */
1:f1486c6:     @SuppressWarnings("rawtypes")
1:54eb93e:     public void printMBean(Map mbean) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printMBean(mbean);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a Collection format of mbeans
1:f1486c6:      *
1:a107823:      * @param mbean - collection of mbeans
1:a107823:      */
1:f1486c6:     @SuppressWarnings("rawtypes")
1:54eb93e:     public void printMBean(Collection mbean) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printMBean(mbean);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a Map format of a JMS message
1:f1486c6:      *
1:a107823:      * @param msg
1:a107823:      */
1:f1486c6:     @SuppressWarnings("rawtypes")
1:54eb93e:     public void printMessage(Map msg) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printMessage(msg);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a Message format of a JMS message
1:f1486c6:      *
1:a107823:      * @param msg - JMS message to print
1:a107823:      */
1:54eb93e:     public void printMessage(Message msg) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printMessage(msg);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a collection of JMS messages
1:f1486c6:      *
1:a107823:      * @param msg - collection of JMS messages
1:a107823:      */
1:f1486c6:     @SuppressWarnings("rawtypes")
1:54eb93e:     public void printMessage(Collection msg) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printMessage(msg);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print help messages
1:f1486c6:      *
1:a107823:      * @param helpMsgs - help messages to print
1:a107823:      */
1:54eb93e:     public void printHelp(String[] helpMsgs) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printHelp(helpMsgs);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an information message
1:f1486c6:      *
1:a107823:      * @param info - information message to print
1:a107823:      */
1:54eb93e:     public void printInfo(String info) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printInfo(info);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print an exception message
1:f1486c6:      *
1:a107823:      * @param e - exception to print
1:a107823:      */
1:54eb93e:     public void printException(Exception e) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printException(e);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a version information
1:f1486c6:      *
1:a107823:      * @param version - version info to print
1:a107823:      */
1:54eb93e:     public void printVersion(String version) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.printVersion(version);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a generic key value mapping
1:f1486c6:      *
1:a107823:      * @param map to print
1:a107823:      */
1:f1486c6:     @SuppressWarnings("rawtypes")
1:54eb93e:     public void print(Map map) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.print(map);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a generic array of strings
1:f1486c6:      *
1:a107823:      * @param strings - string array to print
1:a107823:      */
1:54eb93e:     public void print(String[] strings) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.print(strings);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a collection of objects
1:f1486c6:      *
1:a107823:      * @param collection - collection to print
1:a107823:      */
1:f1486c6:     @SuppressWarnings("rawtypes")
1:54eb93e:     public void print(Collection collection) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.print(collection);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print a java string
1:f1486c6:      *
1:a107823:      * @param string - string to print
1:a107823:      */
1:54eb93e:     public void print(String string) {
1:a107823:         if (formatter == null) {
1:a107823:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:a107823:         }
1:a107823:         formatter.print(string);
1:a107823:     }
1:54eb93e: 
1:54eb93e:     public OutputFormatter getFormatter() {
1:54eb93e:         return formatter;
1:54eb93e:     }
1:54eb93e: 
1:54eb93e:     public void setFormatter(OutputFormatter formatter) {
1:54eb93e:         this.formatter = formatter;
1:54eb93e:     }
1:a107823: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f1486c6
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return formatter's output stream
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.console;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.console.formatter.OutputFormatter;
1: public final class CommandContext {
1:     private OutputFormatter formatter;
1:     public OutputStream getOutputStream() {
/////////////////////////////////////////////////////////////////////////
1:     public void printMBean(ObjectInstance mbean) {
/////////////////////////////////////////////////////////////////////////
1:     public void printMBean(ObjectName mbean) {
/////////////////////////////////////////////////////////////////////////
1:     public void printMBean(AttributeList mbean) {
/////////////////////////////////////////////////////////////////////////
1:     public void printMBean(Map mbean) {
/////////////////////////////////////////////////////////////////////////
1:     public void printMBean(Collection mbean) {
/////////////////////////////////////////////////////////////////////////
1:     public void printMessage(Map msg) {
/////////////////////////////////////////////////////////////////////////
1:     public void printMessage(Message msg) {
/////////////////////////////////////////////////////////////////////////
1:     public void printMessage(Collection msg) {
/////////////////////////////////////////////////////////////////////////
1:     public void printHelp(String[] helpMsgs) {
/////////////////////////////////////////////////////////////////////////
1:     public void printInfo(String info) {
/////////////////////////////////////////////////////////////////////////
1:     public void printException(Exception e) {
/////////////////////////////////////////////////////////////////////////
1:     public void printVersion(String version) {
/////////////////////////////////////////////////////////////////////////
1:     public void print(Map map) {
/////////////////////////////////////////////////////////////////////////
1:     public void print(String[] strings) {
/////////////////////////////////////////////////////////////////////////
1:     public void print(Collection collection) {
/////////////////////////////////////////////////////////////////////////
1:     public void print(String string) {
1: 
1:     public OutputFormatter getFormatter() {
1:         return formatter;
1:     }
1: 
1:     public void setFormatter(OutputFormatter formatter) {
1:         this.formatter = formatter;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStream;
1: import java.util.Collection;
1: import java.util.Map;
1: 
1: import javax.jms.Message;
1: import javax.management.AttributeList;
0: public final class GlobalWriter {
/////////////////////////////////////////////////////////////////////////
1:      * 
0:         GlobalWriter.formatter = formatter;
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.console.formatter;
1: 
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
0: import javax.management.AttributeList;
0: import javax.jms.Message;
0: import java.util.Map;
0: import java.util.Collection;
0: import java.io.OutputStream;
1: 
0: public class GlobalWriter {
0:     private static OutputFormatter formatter;
1: 
1:     /**
0:      * Creates a singleton global writer
1:      */
0:     private GlobalWriter() {
1:     }
1: 
1:     /**
0:      * Maintains a global output formatter
0:      * @param formatter - the output formatter to use
1:      */
0:     public static void instantiate(OutputFormatter formatter) {
0:         if (GlobalWriter.formatter == null) {
0:             GlobalWriter.formatter = formatter;
1:         }
1:     }
1: 
1:     /**
1:      * Retrieve the output stream being used by the global formatter
0:      * @return
1:      */
0:     public static OutputStream getOutputStream() {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         return formatter.getOutputStream();
1:     }
1: 
1:     /**
1:      * Print an ObjectInstance format of an mbean
1:      * @param mbean - mbean to print
1:      */
0:     public static void printMBean(ObjectInstance mbean) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printMBean(mbean);
1:     }
1: 
1:     /**
1:      * Print an ObjectName format of an mbean
1:      * @param mbean - mbean to print
1:      */
0:     public static void printMBean(ObjectName mbean) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printMBean(mbean);
1:     }
1: 
1:     /**
1:      * Print an AttributeList format of an mbean
1:      * @param mbean - mbean to print
1:      */
0:     public static void printMBean(AttributeList mbean) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printMBean(mbean);
1:     }
1: 
1:     /**
1:      * Print a Map format of an mbean
1:      * @param mbean
1:      */
0:     public static void printMBean(Map mbean) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printMBean(mbean);
1:     }
1: 
1:     /**
1:      * Print a Collection format of mbeans
1:      * @param mbean - collection of mbeans
1:      */
0:     public static void printMBean(Collection mbean) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printMBean(mbean);
1:     }
1: 
1:     /**
1:      * Print a Map format of a JMS message
1:      * @param msg
1:      */
0:     public static void printMessage(Map msg) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printMessage(msg);
1:     }
1: 
1:     /**
1:      * Print a Message format of a JMS message
1:      * @param msg - JMS message to print
1:      */
0:     public static void printMessage(Message msg) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printMessage(msg);
1:     }
1: 
1:     /**
1:      * Print a collection of JMS messages
1:      * @param msg - collection of JMS messages
1:      */
0:     public static void printMessage(Collection msg) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printMessage(msg);
1:     }
1: 
1:     /**
1:      * Print help messages
1:      * @param helpMsgs - help messages to print
1:      */
0:     public static void printHelp(String[] helpMsgs) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printHelp(helpMsgs);
1:     }
1: 
1:     /**
1:      * Print an information message
1:      * @param info - information message to print
1:      */
0:     public static void printInfo(String info) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printInfo(info);
1:     }
1: 
1:     /**
1:      * Print an exception message
1:      * @param e - exception to print
1:      */
0:     public static void printException(Exception e) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printException(e);
1:     }
1: 
1:     /**
1:      * Print a version information
1:      * @param version - version info to print
1:      */
0:     public static void printVersion(String version) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.printVersion(version);
1:     }
1: 
1:     /**
1:      * Print a generic key value mapping
1:      * @param map to print
1:      */
0:     public static void print(Map map) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.print(map);
1:     }
1: 
1:     /**
1:      * Print a generic array of strings
1:      * @param strings - string array to print
1:      */
0:     public static void print(String[] strings) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.print(strings);
1:     }
1: 
1:     /**
1:      * Print a collection of objects
1:      * @param collection - collection to print
1:      */
0:     public static void print(Collection collection) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.print(collection);
1:     }
1: 
1:     /**
1:      * Print a java string
1:      * @param string - string to print
1:      */
0:     public static void print(String string) {
1:         if (formatter == null) {
1:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
1:         }
1:         formatter.print(string);
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:540ebc6
/////////////////////////////////////////////////////////////////////////
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.formatter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.formatter;
0: 
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.AttributeList;
0: import javax.jms.Message;
0: import java.util.Map;
0: import java.util.Collection;
0: import java.io.OutputStream;
0: 
0: public class GlobalWriter {
0:     private static OutputFormatter formatter;
0: 
0:     /**
0:      * Creates a singleton global writer
0:      */
0:     private GlobalWriter() {
0:     }
0: 
0:     /**
0:      * Maintains a global output formatter
0:      * @param formatter - the output formatter to use
0:      */
0:     public static void instantiate(OutputFormatter formatter) {
0:         if (GlobalWriter.formatter == null) {
0:             GlobalWriter.formatter = formatter;
0:         }
0:     }
0: 
0:     /**
0:      * Retrieve the output stream being used by the global formatter
0:      * @return
0:      */
0:     public static OutputStream getOutputStream() {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         return formatter.getOutputStream();
0:     }
0: 
0:     /**
0:      * Print an ObjectInstance format of an mbean
0:      * @param mbean - mbean to print
0:      */
0:     public static void printMBean(ObjectInstance mbean) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printMBean(mbean);
0:     }
0: 
0:     /**
0:      * Print an ObjectName format of an mbean
0:      * @param mbean - mbean to print
0:      */
0:     public static void printMBean(ObjectName mbean) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printMBean(mbean);
0:     }
0: 
0:     /**
0:      * Print an AttributeList format of an mbean
0:      * @param mbean - mbean to print
0:      */
0:     public static void printMBean(AttributeList mbean) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printMBean(mbean);
0:     }
0: 
0:     /**
0:      * Print a Map format of an mbean
0:      * @param mbean
0:      */
0:     public static void printMBean(Map mbean) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printMBean(mbean);
0:     }
0: 
0:     /**
0:      * Print a Collection format of mbeans
0:      * @param mbean - collection of mbeans
0:      */
0:     public static void printMBean(Collection mbean) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printMBean(mbean);
0:     }
0: 
0:     /**
0:      * Print a Map format of a JMS message
0:      * @param msg
0:      */
0:     public static void printMessage(Map msg) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printMessage(msg);
0:     }
0: 
0:     /**
0:      * Print a Message format of a JMS message
0:      * @param msg - JMS message to print
0:      */
0:     public static void printMessage(Message msg) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printMessage(msg);
0:     }
0: 
0:     /**
0:      * Print a collection of JMS messages
0:      * @param msg - collection of JMS messages
0:      */
0:     public static void printMessage(Collection msg) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printMessage(msg);
0:     }
0: 
0:     /**
0:      * Print help messages
0:      * @param helpMsgs - help messages to print
0:      */
0:     public static void printHelp(String[] helpMsgs) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printHelp(helpMsgs);
0:     }
0: 
0:     /**
0:      * Print an information message
0:      * @param info - information message to print
0:      */
0:     public static void printInfo(String info) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printInfo(info);
0:     }
0: 
0:     /**
0:      * Print an exception message
0:      * @param e - exception to print
0:      */
0:     public static void printException(Exception e) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printException(e);
0:     }
0: 
0:     /**
0:      * Print a version information
0:      * @param version - version info to print
0:      */
0:     public static void printVersion(String version) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.printVersion(version);
0:     }
0: 
0:     /**
0:      * Print a generic key value mapping
0:      * @param map to print
0:      */
0:     public static void print(Map map) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.print(map);
0:     }
0: 
0:     /**
0:      * Print a generic array of strings
0:      * @param strings - string array to print
0:      */
0:     public static void print(String[] strings) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.print(strings);
0:     }
0: 
0:     /**
0:      * Print a collection of objects
0:      * @param collection - collection to print
0:      */
0:     public static void print(Collection collection) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.print(collection);
0:     }
0: 
0:     /**
0:      * Print a java string
0:      * @param string - string to print
0:      */
0:     public static void print(String string) {
0:         if (formatter == null) {
0:             throw new IllegalStateException("No OutputFormatter specified. Use GlobalWriter.instantiate(OutputFormatter).");
0:         }
0:         formatter.print(string);
0:     }
0: }
============================================================================