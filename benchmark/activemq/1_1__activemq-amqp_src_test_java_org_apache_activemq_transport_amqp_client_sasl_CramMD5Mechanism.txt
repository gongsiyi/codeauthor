1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client.sasl;
1:72839b7: 
1:72839b7: import java.io.UnsupportedEncodingException;
1:72839b7: import java.security.InvalidKeyException;
1:72839b7: import java.security.NoSuchAlgorithmException;
1:72839b7: 
1:72839b7: import javax.crypto.Mac;
1:72839b7: import javax.crypto.spec.SecretKeySpec;
1:72839b7: import javax.security.sasl.SaslException;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Implements the SASL PLAIN authentication Mechanism.
1:72839b7:  *
1:72839b7:  * User name and Password values are sent without being encrypted.
1:72839b7:  */
1:72839b7: public class CramMD5Mechanism extends AbstractMechanism {
1:72839b7: 
1:72839b7:     private static final String ASCII = "ASCII";
1:72839b7:     private static final String HMACMD5 = "HMACMD5";
1:72839b7:     private boolean sentResponse;
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public int getPriority() {
1:72839b7:         return PRIORITY.HIGH.getValue();
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public String getName() {
1:72839b7:         return "CRAM-MD5";
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public byte[] getInitialResponse() {
1:72839b7:         return EMPTY;
1:72839b7:     }
1:b5dd0a1: 
1:b5dd0a1:     @Override
1:72839b7:     public byte[] getChallengeResponse(byte[] challenge) throws SaslException {
1:72839b7:         if (!sentResponse && challenge != null && challenge.length != 0) {
1:72839b7:             try {
1:72839b7:                 SecretKeySpec key = new SecretKeySpec(getPassword().getBytes(ASCII), HMACMD5);
1:72839b7:                 Mac mac = Mac.getInstance(HMACMD5);
1:72839b7:                 mac.init(key);
1:72839b7: 
1:72839b7:                 byte[] bytes = mac.doFinal(challenge);
1:72839b7: 
1:72839b7:                 StringBuffer hash = new StringBuffer(getUsername());
1:72839b7:                 hash.append(' ');
1:72839b7:                 for (int i = 0; i < bytes.length; i++) {
1:72839b7:                     String hex = Integer.toHexString(0xFF & bytes[i]);
1:72839b7:                     if (hex.length() == 1) {
1:72839b7:                         hash.append('0');
1:72839b7:                     }
1:72839b7:                     hash.append(hex);
1:72839b7:                 }
1:72839b7: 
1:72839b7:                 sentResponse = true;
1:72839b7:                 return hash.toString().getBytes(ASCII);
1:72839b7:             } catch (UnsupportedEncodingException e) {
1:72839b7:                 throw new SaslException("Unable to utilise required encoding", e);
1:72839b7:             } catch (InvalidKeyException e) {
1:72839b7:                 throw new SaslException("Unable to utilise key", e);
1:72839b7:             } catch (NoSuchAlgorithmException e) {
1:72839b7:                 throw new SaslException("Unable to utilise required algorithm", e);
1:72839b7:             }
1:72839b7:         } else {
1:72839b7:             return EMPTY;
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:b5dd0a1:     public boolean isApplicable(String username, String password) {
1:b5dd0a1:         return username != null && username.length() > 0 && password != null && password.length() > 0;
1:b5dd0a1:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b5dd0a1
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean isApplicable(String username, String password) {
1:         return username != null && username.length() > 0 && password != null && password.length() > 0;
1:     }
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.sasl;
1: 
1: import java.io.UnsupportedEncodingException;
1: import java.security.InvalidKeyException;
1: import java.security.NoSuchAlgorithmException;
1: 
1: import javax.crypto.Mac;
1: import javax.crypto.spec.SecretKeySpec;
1: import javax.security.sasl.SaslException;
1: 
1: /**
1:  * Implements the SASL PLAIN authentication Mechanism.
1:  *
1:  * User name and Password values are sent without being encrypted.
1:  */
1: public class CramMD5Mechanism extends AbstractMechanism {
1: 
1:     private static final String ASCII = "ASCII";
1:     private static final String HMACMD5 = "HMACMD5";
1:     private boolean sentResponse;
1: 
1:     @Override
1:     public int getPriority() {
1:         return PRIORITY.HIGH.getValue();
1:     }
1: 
1:     @Override
1:     public String getName() {
1:         return "CRAM-MD5";
1:     }
1: 
1:     @Override
1:     public byte[] getInitialResponse() {
1:         return EMPTY;
1:     }
1: 
1:     @Override
1:     public byte[] getChallengeResponse(byte[] challenge) throws SaslException {
1:         if (!sentResponse && challenge != null && challenge.length != 0) {
1:             try {
1:                 SecretKeySpec key = new SecretKeySpec(getPassword().getBytes(ASCII), HMACMD5);
1:                 Mac mac = Mac.getInstance(HMACMD5);
1:                 mac.init(key);
1: 
1:                 byte[] bytes = mac.doFinal(challenge);
1: 
1:                 StringBuffer hash = new StringBuffer(getUsername());
1:                 hash.append(' ');
1:                 for (int i = 0; i < bytes.length; i++) {
1:                     String hex = Integer.toHexString(0xFF & bytes[i]);
1:                     if (hex.length() == 1) {
1:                         hash.append('0');
1:                     }
1:                     hash.append(hex);
1:                 }
1: 
1:                 sentResponse = true;
1:                 return hash.toString().getBytes(ASCII);
1:             } catch (UnsupportedEncodingException e) {
1:                 throw new SaslException("Unable to utilise required encoding", e);
1:             } catch (InvalidKeyException e) {
1:                 throw new SaslException("Unable to utilise key", e);
1:             } catch (NoSuchAlgorithmException e) {
1:                 throw new SaslException("Unable to utilise required algorithm", e);
1:             }
1:         } else {
1:             return EMPTY;
1:         }
1:     }
1: }
============================================================================