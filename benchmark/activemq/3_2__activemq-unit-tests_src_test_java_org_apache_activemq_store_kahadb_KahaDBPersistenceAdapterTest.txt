1:1d5bcaf: /**
1:1d5bcaf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d5bcaf:  * contributor license agreements.  See the NOTICE file distributed with
1:1d5bcaf:  * this work for additional information regarding copyright ownership.
1:1d5bcaf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d5bcaf:  * (the "License"); you may not use this file except in compliance with
1:1d5bcaf:  * the License.  You may obtain a copy of the License at
1:1d5bcaf:  *
1:1d5bcaf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1d5bcaf:  *
1:1d5bcaf:  * Unless required by applicable law or agreed to in writing, software
1:1d5bcaf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d5bcaf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d5bcaf:  * See the License for the specific language governing permissions and
1:1d5bcaf:  * limitations under the License.
1:1d5bcaf:  */
1:1d5bcaf: package org.apache.activemq.store.kahadb;
2:1d5bcaf: 
1:a359d81: import org.apache.activemq.broker.BrokerService;
1:1d5bcaf: import org.apache.activemq.store.PersistenceAdapter;
1:1d5bcaf: import org.apache.activemq.store.PersistenceAdapterTestSupport;
1:a359d81: import org.apache.activemq.util.DefaultTestAppender;
1:a359d81: import org.apache.log4j.Appender;
1:a359d81: import org.apache.log4j.Level;
1:a359d81: import org.apache.log4j.Logger;
1:a359d81: import org.apache.log4j.spi.LoggingEvent;
1:a359d81: 
1:a359d81: import java.io.File;
1:a359d81: import java.io.IOException;
1:a359d81: import java.util.concurrent.atomic.AtomicBoolean;
1:1d5bcaf: 
1:1d5bcaf: /**
1:1d5bcaf:  * 
1:1d5bcaf:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:1d5bcaf:  */
1:1d5bcaf: public class KahaDBPersistenceAdapterTest extends PersistenceAdapterTestSupport {
1:1d5bcaf:     
1:1d5bcaf:     protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws IOException {
1:1d5bcaf:         KahaDBStore kaha = new KahaDBStore();
1:1d5bcaf:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:1d5bcaf:         if (delete) {
1:1d5bcaf:             kaha.deleteAllMessages();
1:1d5bcaf:         }
1:1d5bcaf:         return kaha;
1:1d5bcaf:     }
1:a359d81: 
1:a359d81:     public void testNoReplayOnStop() throws Exception {
1:a359d81:         brokerService.getPersistenceAdapter().checkpoint(true);
1:a359d81:         brokerService.stop();
1:a359d81: 
1:a359d81:         final AtomicBoolean gotSomeReplay = new AtomicBoolean(Boolean.FALSE);
1:a359d81:         final AtomicBoolean trappedLogMessages = new AtomicBoolean(Boolean.FALSE);
1:a359d81: 
1:a359d81:         Appender appender = new DefaultTestAppender() {
1:a359d81:             @Override
1:a359d81:             public void doAppend(LoggingEvent event) {
1:a359d81:                 trappedLogMessages.set(true);
1:a359d81:                 if (event.getLevel().equals(Level.INFO)) {
1:a359d81:                     if (event.getMessage().toString().contains("Recovery replayed ")) {
1:a359d81:                         gotSomeReplay.set(true);
1:a359d81:                     }
1:a359d81:                 }
1:a359d81:             }
1:a359d81:         };
1:a359d81: 
1:a359d81:         try {
1:a359d81:             Logger.getLogger(MessageDatabase.class.getName()).addAppender(appender);
1:a359d81:             Logger.getLogger(MessageDatabase.class.getName()).setLevel(Level.INFO);
1:a359d81: 
1:a359d81:             brokerService = new BrokerService();
1:a359d81:             pa = createPersistenceAdapter(false);
1:a359d81:             brokerService.setPersistenceAdapter(pa);
1:a359d81:             brokerService.start();
1:a359d81: 
1:a359d81:         } finally {
1:a359d81:             Logger.getRootLogger().removeAppender(appender);
1:a359d81:             Logger.getLogger(MessageDatabase.class.getName()).removeAppender(appender);
1:a359d81:         }
1:a359d81:         assertTrue("log capture working", trappedLogMessages.get());
1:a359d81:         assertFalse("no replay message in the log", gotSomeReplay.get());
1:a359d81:     }
1:1d5bcaf: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:a359d81
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testNoReplayOnStop() throws Exception {
1:         brokerService.getPersistenceAdapter().checkpoint(true);
1:         brokerService.stop();
1: 
1:         final AtomicBoolean gotSomeReplay = new AtomicBoolean(Boolean.FALSE);
1:         final AtomicBoolean trappedLogMessages = new AtomicBoolean(Boolean.FALSE);
1: 
1:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 trappedLogMessages.set(true);
1:                 if (event.getLevel().equals(Level.INFO)) {
1:                     if (event.getMessage().toString().contains("Recovery replayed ")) {
1:                         gotSomeReplay.set(true);
1:                     }
1:                 }
1:             }
1:         };
1: 
1:         try {
1:             Logger.getLogger(MessageDatabase.class.getName()).addAppender(appender);
1:             Logger.getLogger(MessageDatabase.class.getName()).setLevel(Level.INFO);
1: 
1:             brokerService = new BrokerService();
1:             pa = createPersistenceAdapter(false);
1:             brokerService.setPersistenceAdapter(pa);
1:             brokerService.start();
1: 
1:         } finally {
1:             Logger.getRootLogger().removeAppender(appender);
1:             Logger.getLogger(MessageDatabase.class.getName()).removeAppender(appender);
1:         }
1:         assertTrue("log capture working", trappedLogMessages.get());
1:         assertFalse("no replay message in the log", gotSomeReplay.get());
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1d5bcaf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
0: import java.io.File;
0: import java.io.IOException;
1: 
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.PersistenceAdapterTestSupport;
1: 
1: /**
1:  * 
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class KahaDBPersistenceAdapterTest extends PersistenceAdapterTestSupport {
1:     
1:     protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws IOException {
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:         if (delete) {
1:             kaha.deleteAllMessages();
1:         }
1:         return kaha;
1:     }
1: }
============================================================================