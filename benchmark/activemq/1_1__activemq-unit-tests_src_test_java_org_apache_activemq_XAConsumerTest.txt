1:004be56: /**
1:004be56:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:004be56:  * contributor license agreements. See the NOTICE file distributed with
1:004be56:  * this work for additional information regarding copyright ownership.
1:004be56:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:004be56:  * (the "License"); you may not use this file except in compliance with
1:004be56:  * the License. You may obtain a copy of the License at
1:004be56:  * <p>
1:004be56:  * http://www.apache.org/licenses/LICENSE-2.0
1:004be56:  * <p>
1:004be56:  * Unless required by applicable law or agreed to in writing, software
1:004be56:  * distributed under the License is distributed on an "AS IS" BASIS,
1:004be56:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:004be56:  * See the License for the specific language governing permissions and
1:004be56:  * limitations under the License.
1:004be56:  */
1:004be56: 
1:004be56: package org.apache.activemq;
1:004be56: 
1:004be56: import junit.framework.TestCase;
1:004be56: import org.apache.activemq.broker.BrokerService;
1:004be56: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:004be56: import org.apache.activemq.broker.region.policy.PolicyMap;
1:004be56: import org.apache.activemq.command.ActiveMQMessage;
1:004be56: import org.apache.activemq.command.XATransactionId;
1:004be56: import org.slf4j.Logger;
1:004be56: import org.slf4j.LoggerFactory;
1:004be56: 
1:004be56: import javax.jms.Connection;
1:004be56: import javax.jms.Destination;
1:004be56: import javax.jms.JMSException;
1:004be56: import javax.jms.Message;
1:004be56: import javax.jms.MessageConsumer;
1:004be56: import javax.jms.MessageProducer;
1:004be56: import javax.jms.Session;
1:004be56: import javax.jms.XAConnection;
1:004be56: import javax.jms.XASession;
1:004be56: import javax.transaction.xa.XAResource;
1:004be56: import javax.transaction.xa.Xid;
1:004be56: import java.io.ByteArrayOutputStream;
1:004be56: import java.io.DataOutputStream;
1:004be56: import java.io.IOException;
1:004be56: import java.util.ArrayList;
1:004be56: import java.util.List;
1:004be56: import java.util.concurrent.CountDownLatch;
1:004be56: import java.util.concurrent.TimeUnit;
1:004be56: 
1:004be56: public class XAConsumerTest extends TestCase {
1:004be56: 
1:004be56:     static final Logger LOG = LoggerFactory.getLogger(XAConsumerTest.class);
1:004be56:     private static final String TEST_AMQ_BROKER_URI = "tcp://localhost:0";
1:004be56:     private String brokerUri;
1:004be56:     private static long txGenerator = 21;
1:004be56: 
1:004be56:     private BrokerService broker;
1:004be56: 
1:004be56: 
1:004be56:     protected void setUp() throws Exception {
1:004be56:         broker = createBroker();
1:004be56:         broker.start();
1:004be56:         broker.waitUntilStarted();
1:004be56:         brokerUri = broker.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:004be56:     }
1:004be56: 
1:004be56:     protected void tearDown() throws Exception {
1:004be56:         if (broker != null) {
1:004be56:             broker.stop();
1:004be56:         }
1:004be56:     }
1:004be56: 
1:004be56: 
1:004be56:     public void testPullRequestXAConsumer() throws Exception {
1:004be56: 
1:004be56:         ActiveMQXAConnectionFactory activeMQConnectionFactory =
1:004be56:                 new ActiveMQXAConnectionFactory("admin", "admin", brokerUri + "?trace=true&jms.prefetchPolicy.all=0");
1:004be56:         XAConnection connection = activeMQConnectionFactory.createXAConnection();
1:004be56:         connection.start();
1:004be56: 
1:004be56:         ActiveMQXAConnectionFactory activeMQConnectionFactoryAutoAck =
1:004be56:                 new ActiveMQXAConnectionFactory("admin", "admin", brokerUri + "?trace=true&jms.prefetchPolicy.all=0");
1:004be56:         // allow non xa use of connections
1:004be56:         activeMQConnectionFactoryAutoAck.setXaAckMode(Session.AUTO_ACKNOWLEDGE);
1:004be56:         Connection autoAckConnection = activeMQConnectionFactoryAutoAck.createConnection();
1:004be56:         autoAckConnection.start();
1:004be56: 
1:004be56:         try {
1:004be56: 
1:004be56:             LOG.info(">>>INVOKE XA receive with PullRequest Consumer...");
1:004be56: 
1:004be56:             XASession xaSession = connection.createXASession();
1:004be56:             XAResource xaResource = xaSession.getXAResource();
1:004be56:             Xid xid = createXid();
1:004be56:             xaResource.start(xid, 0);
1:004be56: 
1:004be56:             Destination destination = xaSession.createQueue("TEST.T2");
1:004be56: 
1:004be56:             final MessageConsumer messageConsumer = xaSession.createConsumer(destination);
1:004be56:             final CountDownLatch receiveThreadDone = new CountDownLatch(1);
1:004be56: 
1:004be56:             final CountDownLatch receiveLatch = new CountDownLatch(1);
1:004be56:             // do a message receive
1:004be56: 
1:004be56:             Thread receiveThread = new Thread(new Runnable() {
1:004be56:                 public void run() {
1:004be56:                     try {
1:004be56:                         messageConsumer.receive(600000);
1:004be56:                     } catch (JMSException expected) {
1:004be56:                         receiveLatch.countDown();
1:004be56:                         LOG.info("got expected ex: ", expected);
1:004be56:                     } finally {
1:004be56:                         receiveThreadDone.countDown();
1:004be56:                     }
1:004be56:                 }
1:004be56:             });
1:004be56: 
1:004be56:             receiveThread.start();
1:004be56: 
1:004be56:             LOG.info(">>>simulate Transaction Rollback");
1:004be56:             xaResource.end(xid, XAResource.TMFAIL);
1:004be56:             xaResource.rollback(xid);
1:004be56: 
1:004be56:             // send a message after transaction is rolled back.
1:004be56:             LOG.info(">>>Sending message...");
1:004be56: 
1:004be56:             Session session = autoAckConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:004be56:             Message messageToSend = session.createMessage();
1:004be56:             MessageProducer messageProducer = session.createProducer(destination);
1:004be56:             messageProducer.send(messageToSend);
1:004be56: 
1:004be56:             receiveThreadDone.await(30, TimeUnit.SECONDS);
1:004be56:             receiveLatch.await(5, TimeUnit.SECONDS);
1:004be56: 
1:004be56: 
1:004be56:             // consume with non transacted consumer to verify not autoacked
1:004be56:             messageConsumer.close();
1:004be56:             xaSession.close();
1:004be56: 
1:004be56:             MessageConsumer messageConsumer1 = session.createConsumer(destination);
1:004be56:             javax.jms.Message message = messageConsumer1.receive(5000);
1:004be56: 
1:004be56:             assertNotNull("Got message", message);
1:004be56:             LOG.info("Got message on new session", message);
1:004be56:             message.acknowledge();
1:004be56: 
1:004be56:         } finally {
1:004be56:             LOG.info(">>>Closing Connection");
1:004be56:             if (connection != null) {
1:004be56:                 connection.close();
1:004be56:             }
1:004be56:             if (autoAckConnection != null) {
1:004be56:                 autoAckConnection.close();
1:004be56:             }
1:004be56:         }
1:004be56: 
1:004be56:     }
1:004be56: 
1:004be56: 
1:004be56:     public void testPullRequestXAConsumerSingleConsumer() throws Exception {
1:004be56: 
1:004be56:         ActiveMQXAConnectionFactory activeMQConnectionFactory =
1:004be56:                 new ActiveMQXAConnectionFactory("admin", "admin", brokerUri + "?trace=true&jms.prefetchPolicy.all=0");
1:004be56:         XAConnection connection = activeMQConnectionFactory.createXAConnection();
1:004be56:         connection.start();
1:004be56: 
1:004be56:         try {
1:004be56: 
1:004be56:             LOG.info(">>>INVOKE XA receive with PullRequest Consumer...");
1:004be56: 
1:004be56:             XASession xaSession = connection.createXASession();
1:004be56:             XAResource xaResource = xaSession.getXAResource();
1:004be56:             Xid xid = createXid();
1:004be56:             xaResource.start(xid, 0);
1:004be56: 
1:004be56:             Destination destination = xaSession.createQueue("TEST.T2");
1:004be56: 
1:004be56:             final MessageConsumer messageConsumer = xaSession.createConsumer(destination);
1:004be56:             final CountDownLatch receiveThreadDone = new CountDownLatch(1);
1:004be56: 
1:004be56:             final CountDownLatch receiveLatch = new CountDownLatch(1);
1:004be56:             // do a message receive
1:004be56: 
1:004be56:             Thread receiveThread = new Thread(new Runnable() {
1:004be56:                 public void run() {
1:004be56:                     try {
1:004be56:                         messageConsumer.receive(600000);
1:004be56:                     } catch (JMSException expected) {
1:004be56:                         receiveLatch.countDown();
1:004be56:                         LOG.info("got expected ex: ", expected);
1:004be56:                     } finally {
1:004be56:                         receiveThreadDone.countDown();
1:004be56:                     }
1:004be56:                 }
1:004be56:             });
1:004be56: 
1:004be56:             receiveThread.start();
1:004be56: 
1:004be56:             LOG.info(">>>simulate Transaction Rollback");
1:004be56:             xaResource.end(xid, XAResource.TMFAIL);
1:004be56:             xaResource.rollback(xid);
1:004be56: 
1:004be56:             {
1:004be56:                 XASession xaSessionSend = connection.createXASession();
1:004be56:                 XAResource xaResourceSend = xaSessionSend.getXAResource();
1:004be56:                 Xid xidSend = createXid();
1:004be56:                 xaResourceSend.start(xidSend, 0);
1:004be56: 
1:004be56:                 // send a message after transaction is rolled back.
1:004be56:                 LOG.info(">>>Sending message...");
1:004be56: 
1:004be56:                 ActiveMQMessage messageToSend = (ActiveMQMessage) xaSessionSend.createMessage();
1:004be56:                 messageToSend.setTransactionId(new XATransactionId(xidSend));
1:004be56:                 MessageProducer messageProducer = xaSessionSend.createProducer(destination);
1:004be56:                 messageProducer.send(messageToSend);
1:004be56: 
1:004be56:                 xaResourceSend.end(xidSend, XAResource.TMSUCCESS);
1:004be56:                 xaResourceSend.commit(xidSend, true);
1:004be56:             }
1:004be56: 
1:004be56:             receiveThreadDone.await(30, TimeUnit.SECONDS);
1:004be56:             receiveLatch.await(5, TimeUnit.SECONDS);
1:004be56: 
1:004be56:             // after jms exception we need to close
1:004be56:             messageConsumer.close();
1:004be56: 
1:004be56:             MessageConsumer messageConsumerTwo = xaSession.createConsumer(destination);
1:004be56:             Xid xidReceiveOk = createXid();
1:004be56:             xaResource.start(xidReceiveOk, 0);
1:004be56: 
1:004be56:             javax.jms.Message message = messageConsumerTwo.receive(10000);
1:004be56: 
1:004be56:             assertNotNull("Got message", message);
1:004be56:             LOG.info("Got message on new session", message);
1:004be56: 
1:004be56:             xaResource.end(xidReceiveOk, XAResource.TMSUCCESS);
1:004be56:             xaResource.commit(xidReceiveOk, true);
1:004be56: 
1:004be56:         } finally {
1:004be56:             LOG.info(">>>Closing Connection");
1:004be56:             if (connection != null) {
1:004be56:                 connection.close();
1:004be56:             }
1:004be56:         }
1:004be56: 
1:004be56:     }
1:004be56: 
1:004be56:     public Xid createXid() throws IOException {
1:004be56: 
1:004be56:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:004be56:         DataOutputStream os = new DataOutputStream(baos);
1:004be56:         os.writeLong(++txGenerator);
1:004be56:         os.close();
1:004be56:         final byte[] bs = baos.toByteArray();
1:004be56: 
1:004be56:         return new Xid() {
1:004be56: 
1:004be56:             public int getFormatId() {
1:004be56:                 return 86;
1:004be56:             }
1:004be56: 
1:004be56: 
1:004be56:             public byte[] getGlobalTransactionId() {
1:004be56:                 return bs;
1:004be56:             }
1:004be56: 
1:004be56: 
1:004be56:             public byte[] getBranchQualifier() {
1:004be56:                 return bs;
1:004be56:             }
1:004be56:         };
1:004be56:     }
1:004be56: 
1:004be56: 
1:004be56:     private BrokerService createBroker() throws Exception {
1:004be56:         BrokerService broker = new BrokerService();
1:004be56: 
1:004be56:         PolicyMap policyMap = new PolicyMap();
1:004be56:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:004be56:         PolicyEntry pe = new PolicyEntry();
1:004be56: 
1:004be56: 
1:004be56:         pe.setProducerFlowControl(true);
1:004be56:         pe.setUseCache(true);
1:004be56: 
1:004be56:         pe.setPrioritizedMessages(false);
1:004be56:         pe.setExpireMessagesPeriod(0);
1:004be56:         pe.setQueuePrefetch(0);
1:004be56: 
1:004be56:         pe.setQueue(">");
1:004be56:         entries.add(pe);
1:004be56:         policyMap.setPolicyEntries(entries);
1:004be56:         broker.setDestinationPolicy(policyMap);
1:004be56: 
1:004be56: 
1:004be56:         broker.addConnector(TEST_AMQ_BROKER_URI);
1:004be56:         broker.deleteAllMessages();
1:004be56:         return broker;
1:004be56:     }
1:004be56: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:004be56
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.XATransactionId;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.XAConnection;
1: import javax.jms.XASession;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: public class XAConsumerTest extends TestCase {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(XAConsumerTest.class);
1:     private static final String TEST_AMQ_BROKER_URI = "tcp://localhost:0";
1:     private String brokerUri;
1:     private static long txGenerator = 21;
1: 
1:     private BrokerService broker;
1: 
1: 
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:         brokerUri = broker.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1: 
1:     public void testPullRequestXAConsumer() throws Exception {
1: 
1:         ActiveMQXAConnectionFactory activeMQConnectionFactory =
1:                 new ActiveMQXAConnectionFactory("admin", "admin", brokerUri + "?trace=true&jms.prefetchPolicy.all=0");
1:         XAConnection connection = activeMQConnectionFactory.createXAConnection();
1:         connection.start();
1: 
1:         ActiveMQXAConnectionFactory activeMQConnectionFactoryAutoAck =
1:                 new ActiveMQXAConnectionFactory("admin", "admin", brokerUri + "?trace=true&jms.prefetchPolicy.all=0");
1:         // allow non xa use of connections
1:         activeMQConnectionFactoryAutoAck.setXaAckMode(Session.AUTO_ACKNOWLEDGE);
1:         Connection autoAckConnection = activeMQConnectionFactoryAutoAck.createConnection();
1:         autoAckConnection.start();
1: 
1:         try {
1: 
1:             LOG.info(">>>INVOKE XA receive with PullRequest Consumer...");
1: 
1:             XASession xaSession = connection.createXASession();
1:             XAResource xaResource = xaSession.getXAResource();
1:             Xid xid = createXid();
1:             xaResource.start(xid, 0);
1: 
1:             Destination destination = xaSession.createQueue("TEST.T2");
1: 
1:             final MessageConsumer messageConsumer = xaSession.createConsumer(destination);
1:             final CountDownLatch receiveThreadDone = new CountDownLatch(1);
1: 
1:             final CountDownLatch receiveLatch = new CountDownLatch(1);
1:             // do a message receive
1: 
1:             Thread receiveThread = new Thread(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         messageConsumer.receive(600000);
1:                     } catch (JMSException expected) {
1:                         receiveLatch.countDown();
1:                         LOG.info("got expected ex: ", expected);
1:                     } finally {
1:                         receiveThreadDone.countDown();
1:                     }
1:                 }
1:             });
1: 
1:             receiveThread.start();
1: 
1:             LOG.info(">>>simulate Transaction Rollback");
1:             xaResource.end(xid, XAResource.TMFAIL);
1:             xaResource.rollback(xid);
1: 
1:             // send a message after transaction is rolled back.
1:             LOG.info(">>>Sending message...");
1: 
1:             Session session = autoAckConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Message messageToSend = session.createMessage();
1:             MessageProducer messageProducer = session.createProducer(destination);
1:             messageProducer.send(messageToSend);
1: 
1:             receiveThreadDone.await(30, TimeUnit.SECONDS);
1:             receiveLatch.await(5, TimeUnit.SECONDS);
1: 
1: 
1:             // consume with non transacted consumer to verify not autoacked
1:             messageConsumer.close();
1:             xaSession.close();
1: 
1:             MessageConsumer messageConsumer1 = session.createConsumer(destination);
1:             javax.jms.Message message = messageConsumer1.receive(5000);
1: 
1:             assertNotNull("Got message", message);
1:             LOG.info("Got message on new session", message);
1:             message.acknowledge();
1: 
1:         } finally {
1:             LOG.info(">>>Closing Connection");
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:             if (autoAckConnection != null) {
1:                 autoAckConnection.close();
1:             }
1:         }
1: 
1:     }
1: 
1: 
1:     public void testPullRequestXAConsumerSingleConsumer() throws Exception {
1: 
1:         ActiveMQXAConnectionFactory activeMQConnectionFactory =
1:                 new ActiveMQXAConnectionFactory("admin", "admin", brokerUri + "?trace=true&jms.prefetchPolicy.all=0");
1:         XAConnection connection = activeMQConnectionFactory.createXAConnection();
1:         connection.start();
1: 
1:         try {
1: 
1:             LOG.info(">>>INVOKE XA receive with PullRequest Consumer...");
1: 
1:             XASession xaSession = connection.createXASession();
1:             XAResource xaResource = xaSession.getXAResource();
1:             Xid xid = createXid();
1:             xaResource.start(xid, 0);
1: 
1:             Destination destination = xaSession.createQueue("TEST.T2");
1: 
1:             final MessageConsumer messageConsumer = xaSession.createConsumer(destination);
1:             final CountDownLatch receiveThreadDone = new CountDownLatch(1);
1: 
1:             final CountDownLatch receiveLatch = new CountDownLatch(1);
1:             // do a message receive
1: 
1:             Thread receiveThread = new Thread(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         messageConsumer.receive(600000);
1:                     } catch (JMSException expected) {
1:                         receiveLatch.countDown();
1:                         LOG.info("got expected ex: ", expected);
1:                     } finally {
1:                         receiveThreadDone.countDown();
1:                     }
1:                 }
1:             });
1: 
1:             receiveThread.start();
1: 
1:             LOG.info(">>>simulate Transaction Rollback");
1:             xaResource.end(xid, XAResource.TMFAIL);
1:             xaResource.rollback(xid);
1: 
1:             {
1:                 XASession xaSessionSend = connection.createXASession();
1:                 XAResource xaResourceSend = xaSessionSend.getXAResource();
1:                 Xid xidSend = createXid();
1:                 xaResourceSend.start(xidSend, 0);
1: 
1:                 // send a message after transaction is rolled back.
1:                 LOG.info(">>>Sending message...");
1: 
1:                 ActiveMQMessage messageToSend = (ActiveMQMessage) xaSessionSend.createMessage();
1:                 messageToSend.setTransactionId(new XATransactionId(xidSend));
1:                 MessageProducer messageProducer = xaSessionSend.createProducer(destination);
1:                 messageProducer.send(messageToSend);
1: 
1:                 xaResourceSend.end(xidSend, XAResource.TMSUCCESS);
1:                 xaResourceSend.commit(xidSend, true);
1:             }
1: 
1:             receiveThreadDone.await(30, TimeUnit.SECONDS);
1:             receiveLatch.await(5, TimeUnit.SECONDS);
1: 
1:             // after jms exception we need to close
1:             messageConsumer.close();
1: 
1:             MessageConsumer messageConsumerTwo = xaSession.createConsumer(destination);
1:             Xid xidReceiveOk = createXid();
1:             xaResource.start(xidReceiveOk, 0);
1: 
1:             javax.jms.Message message = messageConsumerTwo.receive(10000);
1: 
1:             assertNotNull("Got message", message);
1:             LOG.info("Got message on new session", message);
1: 
1:             xaResource.end(xidReceiveOk, XAResource.TMSUCCESS);
1:             xaResource.commit(xidReceiveOk, true);
1: 
1:         } finally {
1:             LOG.info(">>>Closing Connection");
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:     }
1: 
1:     public Xid createXid() throws IOException {
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(++txGenerator);
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1: 
1:             public int getFormatId() {
1:                 return 86;
1:             }
1: 
1: 
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1: 
1: 
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1:     }
1: 
1: 
1:     private BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1: 
1:         pe.setProducerFlowControl(true);
1:         pe.setUseCache(true);
1: 
1:         pe.setPrioritizedMessages(false);
1:         pe.setExpireMessagesPeriod(0);
1:         pe.setQueuePrefetch(0);
1: 
1:         pe.setQueue(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1: 
1:         broker.addConnector(TEST_AMQ_BROKER_URI);
1:         broker.deleteAllMessages();
1:         return broker;
1:     }
1: }
============================================================================