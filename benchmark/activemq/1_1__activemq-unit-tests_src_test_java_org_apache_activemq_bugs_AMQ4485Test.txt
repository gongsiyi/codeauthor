1:66e8011: /**
1:66e8011:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:66e8011:  * contributor license agreements.  See the NOTICE file distributed with
1:66e8011:  * this work for additional information regarding copyright ownership.
1:66e8011:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:66e8011:  * (the "License"); you may not use this file except in compliance with
1:66e8011:  * the License.  You may obtain a copy of the License at
1:66e8011:  *
1:66e8011:  *      http://www.apache.org/licenses/LICENSE-2.0
1:66e8011:  *
1:66e8011:  * Unless required by applicable law or agreed to in writing, software
1:66e8011:  * distributed under the License is distributed on an "AS IS" BASIS,
1:66e8011:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:66e8011:  * See the License for the specific language governing permissions and
1:66e8011:  * limitations under the License.
1:66e8011:  */
1:66e8011: package org.apache.activemq.bugs;
1:66e8011: 
1:66e8011: import java.util.HashSet;
1:66e8011: import java.util.Set;
1:66e8011: import java.util.Vector;
1:66e8011: import java.util.concurrent.CountDownLatch;
1:66e8011: import java.util.concurrent.ExecutorService;
1:66e8011: import java.util.concurrent.Executors;
1:66e8011: import java.util.concurrent.TimeUnit;
1:66e8011: import javax.jms.BytesMessage;
1:66e8011: import javax.jms.Connection;
1:66e8011: import javax.jms.MessageConsumer;
1:66e8011: import javax.jms.MessageProducer;
1:66e8011: import javax.jms.Session;
1:66e8011: import junit.framework.TestCase;
1:66e8011: import org.apache.activemq.ActiveMQConnectionFactory;
1:66e8011: import org.apache.activemq.broker.BrokerPlugin;
1:66e8011: import org.apache.activemq.broker.BrokerPluginSupport;
1:66e8011: import org.apache.activemq.broker.BrokerService;
1:66e8011: import org.apache.activemq.broker.ProducerBrokerExchange;
1:66e8011: import org.apache.activemq.broker.TransactionBroker;
1:66e8011: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:66e8011: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:66e8011: import org.apache.activemq.broker.region.policy.PolicyMap;
1:66e8011: import org.apache.activemq.command.ActiveMQBytesMessage;
1:66e8011: import org.apache.activemq.command.ActiveMQQueue;
1:66e8011: import org.apache.activemq.command.Message;
1:66e8011: import org.apache.activemq.command.MessageId;
1:66e8011: import org.apache.activemq.transaction.Synchronization;
1:66e8011: import org.apache.activemq.util.Wait;
1:66e8011: import org.slf4j.Logger;
1:66e8011: import org.slf4j.LoggerFactory;
1:66e8011: 
1:66e8011: public class AMQ4485Test extends TestCase {
1:66e8011:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4485Test.class);
1:66e8011:     BrokerService broker;
1:66e8011:     ActiveMQConnectionFactory factory;
1:66e8011:     final int messageCount = 20;
1:66e8011:     int memoryLimit = 40 * 1024;
1:66e8011:     final ActiveMQQueue destination = new ActiveMQQueue("QUEUE." + this.getClass().getName());
1:66e8011:     final Vector<Throwable> exceptions = new Vector<Throwable>();
1:66e8011:     final CountDownLatch slowSendResume = new CountDownLatch(1);
1:66e8011: 
1:66e8011: 
1:66e8011:     protected void configureBroker(long memoryLimit) throws Exception {
1:66e8011:         broker.setDeleteAllMessagesOnStartup(true);
1:66e8011:         broker.setAdvisorySupport(false);
1:66e8011: 
1:66e8011:         PolicyEntry policy = new PolicyEntry();
1:66e8011:         policy.setExpireMessagesPeriod(0);
1:66e8011:         policy.setMemoryLimit(memoryLimit);
1:66e8011:         policy.setProducerFlowControl(false);
1:66e8011:         PolicyMap pMap = new PolicyMap();
1:66e8011:         pMap.setDefaultEntry(policy);
1:66e8011:         broker.setDestinationPolicy(pMap);
1:66e8011: 
1:66e8011:         broker.setPlugins(new BrokerPlugin[] {new BrokerPluginSupport() {
1:66e8011:             @Override
1:66e8011:             public void send(ProducerBrokerExchange producerExchange, final Message messageSend) throws Exception {
1:66e8011:                 if (messageSend.isInTransaction() && messageSend.getProperty("NUM") != null) {
1:66e8011:                     final Integer num = (Integer) messageSend.getProperty("NUM");
1:66e8011:                     if (true) {
1:66e8011:                         TransactionBroker transactionBroker = (TransactionBroker)broker.getBroker().getAdaptor(TransactionBroker.class);
1:66e8011:                         transactionBroker.getTransaction(producerExchange.getConnectionContext(), messageSend.getTransactionId(), false).addSynchronization(
1:66e8011:                                 new Synchronization() {
1:66e8011:                                     public void afterCommit() throws Exception {
1:66e8011:                                         LOG.error("AfterCommit, NUM:" + num + ", " + messageSend.getMessageId() + ", tx: " + messageSend.getTransactionId());
1:66e8011:                                         if (num == 5) {
1:66e8011:                                             // we want to add to cursor after usage is exhausted by message 20 and when
1:66e8011:                                             // all other messages have been processed
1:66e8011:                                             LOG.error("Pausing on latch in afterCommit for: " + num + ", " + messageSend.getMessageId());
1:66e8011:                                             slowSendResume.await(20, TimeUnit.SECONDS);
1:66e8011:                                             LOG.error("resuming on latch afterCommit for: " + num + ", " + messageSend.getMessageId());
1:66e8011:                                         } else if (messageCount + 1 == num) {
1:66e8011:                                             LOG.error("releasing latch. " + num + ", " + messageSend.getMessageId());
1:66e8011:                                             slowSendResume.countDown();
1:66e8011:                                             // for message X, we need to delay so message 5 can setBatch
1:66e8011:                                             TimeUnit.SECONDS.sleep(5);
1:66e8011:                                             LOG.error("resuming afterCommit for: " + num + ", " + messageSend.getMessageId());
1:66e8011:                                         }
1:66e8011:                                     }
1:66e8011:                                 });
1:66e8011:                     }
1:66e8011:                 }
1:66e8011:                 super.send(producerExchange, messageSend);
1:66e8011:             }
1:66e8011:         }
1:66e8011:         });
1:66e8011: 
1:66e8011:     }
1:66e8011: 
1:66e8011: 
1:66e8011:     public void testOutOfOrderTransactionCompletionOnMemoryLimit() throws Exception {
1:66e8011: 
1:66e8011:         Set<Integer> expected = new HashSet<Integer>();
1:66e8011:         final Vector<Session> sessionVector = new Vector<Session>();
1:66e8011:         ExecutorService executorService = Executors.newCachedThreadPool();
1:66e8011:         for (int i = 1; i <= messageCount; i++) {
1:66e8011:            sessionVector.add(send(i, 1, true));
1:66e8011:            expected.add(i);
1:66e8011:         }
1:66e8011: 
1:66e8011:         // get parallel commit so that the sync writes are batched
1:66e8011:         for (int i = 0; i < messageCount; i++) {
1:66e8011:             final int id = i;
1:66e8011:             executorService.submit(new Runnable() {
1:66e8011:                 @Override
1:66e8011:                 public void run() {
1:66e8011:                     try {
1:66e8011:                         sessionVector.get(id).commit();
1:66e8011:                     } catch (Exception fail) {
1:66e8011:                         exceptions.add(fail);
1:66e8011:                     }
1:66e8011:                 }
1:66e8011:             });
1:66e8011:         }
1:66e8011: 
1:66e8011:         final DestinationViewMBean queueViewMBean = (DestinationViewMBean)
1:66e8011:                 broker.getManagementContext().newProxyInstance(broker.getAdminView().getQueues()[0], DestinationViewMBean.class, false);
1:66e8011: 
1:66e8011:         // not sure how many messages will get enqueued
1:66e8011:         TimeUnit.SECONDS.sleep(3);
1:66e8011:         if (false)
1:66e8011:         assertTrue("all " + messageCount + " on the q", Wait.waitFor(new Wait.Condition() {
1:66e8011:             @Override
1:66e8011:             public boolean isSatisified() throws Exception {
1:66e8011:                 LOG.info("enqueueCount: " + queueViewMBean.getEnqueueCount());
1:66e8011:                 return messageCount == queueViewMBean.getEnqueueCount();
1:66e8011:             }
1:66e8011:         }));
1:66e8011: 
1:66e8011:         LOG.info("Big send to blow available destination usage before slow send resumes");
1:66e8011:         send(messageCount + 1, 35*1024, true).commit();
1:66e8011: 
1:66e8011: 
1:66e8011:         // consume and verify all received
1:66e8011:         Connection cosumerConnection = factory.createConnection();
1:66e8011:         cosumerConnection.start();
1:66e8011:         MessageConsumer consumer = cosumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(destination);
1:66e8011:         for (int i = 1; i <= messageCount + 1; i++) {
1:66e8011:             BytesMessage bytesMessage = (BytesMessage) consumer.receive(10000);
1:66e8011:             assertNotNull("Got message: " + i + ", " + expected, bytesMessage);
1:66e8011:             MessageId mqMessageId = ((ActiveMQBytesMessage) bytesMessage).getMessageId();
1:66e8011:             LOG.info("got: " + expected + ", "  + mqMessageId + ", NUM=" + ((ActiveMQBytesMessage) bytesMessage).getProperty("NUM"));
1:66e8011:             expected.remove(((ActiveMQBytesMessage) bytesMessage).getProperty("NUM"));
1:66e8011:         }
1:66e8011:     }
1:66e8011: 
1:66e8011:     private Session send(int id, int messageSize, boolean transacted) throws Exception {
1:66e8011:         Connection connection = factory.createConnection();
1:66e8011:         connection.start();
1:66e8011:         Session session = connection.createSession(transacted, transacted ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
1:66e8011:         MessageProducer producer = session.createProducer(destination);
1:66e8011:         BytesMessage bytesMessage = session.createBytesMessage();
1:66e8011:         bytesMessage.writeBytes(new byte[messageSize]);
1:66e8011:         bytesMessage.setIntProperty("NUM", id);
1:66e8011:         producer.send(bytesMessage);
1:66e8011:         LOG.info("Sent:" + bytesMessage.getJMSMessageID() + " session tx: " + ((ActiveMQBytesMessage) bytesMessage).getTransactionId());
1:66e8011:         return session;
1:66e8011:     }
1:66e8011: 
1:66e8011:     protected void setUp() throws Exception {
1:66e8011:         super.setUp();
1:66e8011:         broker = new BrokerService();
1:66e8011:         broker.setBrokerName("thisOne");
1:66e8011:         configureBroker(memoryLimit);
1:66e8011:         broker.start();
1:66e8011:         factory = new ActiveMQConnectionFactory("vm://thisOne?jms.alwaysSyncSend=true");
1:66e8011:         factory.setWatchTopicAdvisories(false);
1:66e8011: 
1:66e8011:     }
1:66e8011: 
1:66e8011:     protected void tearDown() throws Exception {
1:66e8011:         super.tearDown();
1:66e8011:         if (broker != null) {
1:66e8011:             broker.stop();
1:66e8011:             broker = null;
1:66e8011:         }
1:66e8011:     }
1:66e8011: 
1:66e8011: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:66e8011
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.HashSet;
1: import java.util.Set;
1: import java.util.Vector;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.TransactionBroker;
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.transaction.Synchronization;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4485Test extends TestCase {
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4485Test.class);
1:     BrokerService broker;
1:     ActiveMQConnectionFactory factory;
1:     final int messageCount = 20;
1:     int memoryLimit = 40 * 1024;
1:     final ActiveMQQueue destination = new ActiveMQQueue("QUEUE." + this.getClass().getName());
1:     final Vector<Throwable> exceptions = new Vector<Throwable>();
1:     final CountDownLatch slowSendResume = new CountDownLatch(1);
1: 
1: 
1:     protected void configureBroker(long memoryLimit) throws Exception {
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setAdvisorySupport(false);
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setExpireMessagesPeriod(0);
1:         policy.setMemoryLimit(memoryLimit);
1:         policy.setProducerFlowControl(false);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(pMap);
1: 
1:         broker.setPlugins(new BrokerPlugin[] {new BrokerPluginSupport() {
1:             @Override
1:             public void send(ProducerBrokerExchange producerExchange, final Message messageSend) throws Exception {
1:                 if (messageSend.isInTransaction() && messageSend.getProperty("NUM") != null) {
1:                     final Integer num = (Integer) messageSend.getProperty("NUM");
1:                     if (true) {
1:                         TransactionBroker transactionBroker = (TransactionBroker)broker.getBroker().getAdaptor(TransactionBroker.class);
1:                         transactionBroker.getTransaction(producerExchange.getConnectionContext(), messageSend.getTransactionId(), false).addSynchronization(
1:                                 new Synchronization() {
1:                                     public void afterCommit() throws Exception {
1:                                         LOG.error("AfterCommit, NUM:" + num + ", " + messageSend.getMessageId() + ", tx: " + messageSend.getTransactionId());
1:                                         if (num == 5) {
1:                                             // we want to add to cursor after usage is exhausted by message 20 and when
1:                                             // all other messages have been processed
1:                                             LOG.error("Pausing on latch in afterCommit for: " + num + ", " + messageSend.getMessageId());
1:                                             slowSendResume.await(20, TimeUnit.SECONDS);
1:                                             LOG.error("resuming on latch afterCommit for: " + num + ", " + messageSend.getMessageId());
1:                                         } else if (messageCount + 1 == num) {
1:                                             LOG.error("releasing latch. " + num + ", " + messageSend.getMessageId());
1:                                             slowSendResume.countDown();
1:                                             // for message X, we need to delay so message 5 can setBatch
1:                                             TimeUnit.SECONDS.sleep(5);
1:                                             LOG.error("resuming afterCommit for: " + num + ", " + messageSend.getMessageId());
1:                                         }
1:                                     }
1:                                 });
1:                     }
1:                 }
1:                 super.send(producerExchange, messageSend);
1:             }
1:         }
1:         });
1: 
1:     }
1: 
1: 
1:     public void testOutOfOrderTransactionCompletionOnMemoryLimit() throws Exception {
1: 
1:         Set<Integer> expected = new HashSet<Integer>();
1:         final Vector<Session> sessionVector = new Vector<Session>();
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         for (int i = 1; i <= messageCount; i++) {
1:            sessionVector.add(send(i, 1, true));
1:            expected.add(i);
1:         }
1: 
1:         // get parallel commit so that the sync writes are batched
1:         for (int i = 0; i < messageCount; i++) {
1:             final int id = i;
1:             executorService.submit(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         sessionVector.get(id).commit();
1:                     } catch (Exception fail) {
1:                         exceptions.add(fail);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         final DestinationViewMBean queueViewMBean = (DestinationViewMBean)
1:                 broker.getManagementContext().newProxyInstance(broker.getAdminView().getQueues()[0], DestinationViewMBean.class, false);
1: 
1:         // not sure how many messages will get enqueued
1:         TimeUnit.SECONDS.sleep(3);
1:         if (false)
1:         assertTrue("all " + messageCount + " on the q", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("enqueueCount: " + queueViewMBean.getEnqueueCount());
1:                 return messageCount == queueViewMBean.getEnqueueCount();
1:             }
1:         }));
1: 
1:         LOG.info("Big send to blow available destination usage before slow send resumes");
1:         send(messageCount + 1, 35*1024, true).commit();
1: 
1: 
1:         // consume and verify all received
1:         Connection cosumerConnection = factory.createConnection();
1:         cosumerConnection.start();
1:         MessageConsumer consumer = cosumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(destination);
1:         for (int i = 1; i <= messageCount + 1; i++) {
1:             BytesMessage bytesMessage = (BytesMessage) consumer.receive(10000);
1:             assertNotNull("Got message: " + i + ", " + expected, bytesMessage);
1:             MessageId mqMessageId = ((ActiveMQBytesMessage) bytesMessage).getMessageId();
1:             LOG.info("got: " + expected + ", "  + mqMessageId + ", NUM=" + ((ActiveMQBytesMessage) bytesMessage).getProperty("NUM"));
1:             expected.remove(((ActiveMQBytesMessage) bytesMessage).getProperty("NUM"));
1:         }
1:     }
1: 
1:     private Session send(int id, int messageSize, boolean transacted) throws Exception {
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(transacted, transacted ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         BytesMessage bytesMessage = session.createBytesMessage();
1:         bytesMessage.writeBytes(new byte[messageSize]);
1:         bytesMessage.setIntProperty("NUM", id);
1:         producer.send(bytesMessage);
1:         LOG.info("Sent:" + bytesMessage.getJMSMessageID() + " session tx: " + ((ActiveMQBytesMessage) bytesMessage).getTransactionId());
1:         return session;
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         broker = new BrokerService();
1:         broker.setBrokerName("thisOne");
1:         configureBroker(memoryLimit);
1:         broker.start();
1:         factory = new ActiveMQConnectionFactory("vm://thisOne?jms.alwaysSyncSend=true");
1:         factory.setWatchTopicAdvisories(false);
1: 
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (broker != null) {
1:             broker.stop();
1:             broker = null;
1:         }
1:     }
1: 
1: }
============================================================================