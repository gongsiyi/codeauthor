1:582fc08: /**
1:582fc08:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:582fc08:  * contributor license agreements.  See the NOTICE file distributed with
1:582fc08:  * this work for additional information regarding copyright ownership.
1:582fc08:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:582fc08:  * (the "License"); you may not use this file except in compliance with
1:582fc08:  * the License.  You may obtain a copy of the License at
1:582fc08:  *
1:582fc08:  *      http://www.apache.org/licenses/LICENSE-2.0
1:582fc08:  *
1:582fc08:  * Unless required by applicable law or agreed to in writing, software
1:582fc08:  * distributed under the License is distributed on an "AS IS" BASIS,
1:582fc08:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:582fc08:  * See the License for the specific language governing permissions and
1:582fc08:  * limitations under the License.
1:582fc08:  */
1:582fc08: package org.apache.activemq.store.kahadb;
1:582fc08: 
1:582fc08: import static org.junit.Assert.assertEquals;
1:582fc08: import static org.junit.Assert.assertNotNull;
1:582fc08: import static org.junit.Assert.assertNull;
1:582fc08: import static org.junit.Assert.assertTrue;
1:582fc08: 
1:582fc08: import java.io.File;
1:582fc08: import java.io.FilenameFilter;
1:582fc08: 
1:582fc08: import javax.jms.Connection;
1:582fc08: import javax.jms.MessageConsumer;
1:582fc08: import javax.jms.MessageProducer;
1:582fc08: import javax.jms.Queue;
1:582fc08: import javax.jms.Session;
1:582fc08: 
1:582fc08: import org.apache.activemq.ActiveMQConnectionFactory;
1:582fc08: import org.apache.activemq.broker.BrokerService;
1:65cef69: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:582fc08: import org.junit.After;
1:582fc08: import org.junit.Before;
1:582fc08: import org.junit.Rule;
1:582fc08: import org.junit.Test;
1:582fc08: import org.junit.rules.TestName;
1:582fc08: import org.slf4j.Logger;
1:582fc08: import org.slf4j.LoggerFactory;
1:582fc08: 
1:582fc08: /**
1:582fc08:  *
1:582fc08:  */
1:582fc08: public class KahaDBIndexLocationTest {
1:582fc08: 
1:582fc08:     private static final Logger LOG = LoggerFactory.getLogger(KahaDBIndexLocationTest.class);
1:582fc08: 
1:582fc08:     @Rule public TestName name = new TestName();
1:582fc08: 
1:582fc08:     private BrokerService broker;
1:582fc08: 
1:582fc08:     private final File testDataDir = new File("target/activemq-data/QueuePurgeTest");
1:582fc08:     private final File kahaDataDir = new File(testDataDir, "kahadb");
1:582fc08:     private final File kahaIndexDir = new File(testDataDir, "kahadb/index");
1:582fc08: 
1:582fc08:     /**
1:582fc08:      * @throws java.lang.Exception
1:582fc08:      */
1:582fc08:     @Before
1:582fc08:     public void setUp() throws Exception {
1:582fc08:         startBroker();
1:582fc08:     }
1:582fc08: 
1:582fc08:     @After
1:582fc08:     public void tearDown() throws Exception {
1:582fc08:         stopBroker();
1:582fc08:     }
1:582fc08: 
1:582fc08:     private void startBroker() throws Exception {
1:582fc08:         createBroker();
1:582fc08:         broker.start();
1:582fc08:         broker.waitUntilStarted();
1:582fc08:     }
1:582fc08: 
1:582fc08:     private void stopBroker() throws Exception {
1:582fc08:         if (broker != null) {
1:582fc08:             broker.stop();
1:582fc08:             broker.waitUntilStopped();
1:582fc08:         }
1:582fc08:     }
1:582fc08: 
1:582fc08:     private void restartBroker() throws Exception {
1:582fc08:         stopBroker();
1:582fc08:         createBroker();
1:582fc08:         broker.start();
1:582fc08:         broker.waitUntilStarted();
1:582fc08:     }
1:582fc08: 
1:582fc08:     private void createBroker() throws Exception {
1:582fc08:         broker = new BrokerService();
1:582fc08: 
1:582fc08:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:582fc08:         persistenceAdapter.setDirectory(kahaDataDir);
1:582fc08:         persistenceAdapter.setIndexDirectory(kahaIndexDir);
1:65cef69:         persistenceAdapter.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL.name());
1:582fc08: 
1:582fc08:         broker.setDataDirectoryFile(testDataDir);
1:582fc08:         broker.setUseJmx(false);
1:582fc08:         broker.setAdvisorySupport(false);
1:582fc08:         broker.setSchedulerSupport(false);
1:582fc08:         broker.setDeleteAllMessagesOnStartup(true);
1:582fc08:         broker.setPersistenceAdapter(persistenceAdapter);
1:582fc08:     }
1:582fc08: 
1:582fc08:     @Test
1:582fc08:     public void testIndexDirExists() throws Exception {
1:582fc08:         LOG.info("Index dir is configured as: {}", kahaIndexDir);
1:582fc08:         assertTrue(kahaDataDir.exists());
1:582fc08:         assertTrue(kahaIndexDir.exists());
1:582fc08: 
1:582fc08:         String[] index = kahaIndexDir.list(new FilenameFilter() {
1:582fc08: 
1:582fc08:             @Override
1:582fc08:             public boolean accept(File dir, String name) {
1:582fc08:                 LOG.info("Testing filename: {}", name);
1:582fc08:                 return name.endsWith("data") || name.endsWith("redo");
1:582fc08:             }
1:582fc08:         });
1:582fc08: 
1:582fc08:         String[] journal = kahaDataDir.list(new FilenameFilter() {
1:582fc08: 
1:582fc08:             @Override
1:582fc08:             public boolean accept(File dir, String name) {
1:582fc08:                 LOG.info("Testing filename: {}", name);
1:582fc08:                 return name.endsWith("log") || name.equals("lock");
1:582fc08:             }
1:582fc08:         });
1:582fc08: 
1:582fc08:         produceMessages();
1:582fc08: 
1:582fc08:         // Should be db.data and db.redo and nothing else.
1:582fc08:         assertNotNull(index);
1:582fc08:         assertEquals(2, index.length);
1:582fc08: 
1:582fc08:         // Should contain the initial log for the journal and the lock.
1:582fc08:         assertNotNull(journal);
1:65cef69:         assertEquals(2, journal.length);
1:582fc08:     }
1:582fc08: 
1:582fc08:     @Test
1:582fc08:     public void testRestartWithDeleteWorksWhenIndexIsSeparate() throws Exception {
1:582fc08:         produceMessages();
1:582fc08:         restartBroker();
1:582fc08: 
1:582fc08:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:582fc08:         Connection connection = cf.createConnection();
1:582fc08:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:582fc08:         Queue queue = session.createQueue(name.getMethodName());
1:582fc08:         MessageConsumer consumer = session.createConsumer(queue);
1:582fc08:         assertNull(consumer.receive(2000));
1:582fc08:     }
1:582fc08: 
1:582fc08:     private void produceMessages() throws Exception {
1:582fc08:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:582fc08:         Connection connection = cf.createConnection();
1:582fc08:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:582fc08:         Queue queue = session.createQueue(name.getMethodName());
1:582fc08:         MessageProducer producer = session.createProducer(queue);
1:582fc08:         for (int i = 0; i < 5; ++i) {
1:582fc08:             producer.send(session.createTextMessage("test:" + i));
1:582fc08:         }
1:582fc08:         connection.close();
1:582fc08:     }
1:582fc08: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:65cef69
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
/////////////////////////////////////////////////////////////////////////
1:         persistenceAdapter.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL.name());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(2, journal.length);
commit:62bdbb0
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(3, journal.length);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:582fc08
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.FilenameFilter;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  *
1:  */
1: public class KahaDBIndexLocationTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(KahaDBIndexLocationTest.class);
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     private BrokerService broker;
1: 
1:     private final File testDataDir = new File("target/activemq-data/QueuePurgeTest");
1:     private final File kahaDataDir = new File(testDataDir, "kahadb");
1:     private final File kahaIndexDir = new File(testDataDir, "kahadb/index");
1: 
1:     /**
1:      * @throws java.lang.Exception
1:      */
1:     @Before
1:     public void setUp() throws Exception {
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         stopBroker();
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     private void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     private void restartBroker() throws Exception {
1:         stopBroker();
1:         createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         broker = new BrokerService();
1: 
1:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:         persistenceAdapter.setDirectory(kahaDataDir);
1:         persistenceAdapter.setIndexDirectory(kahaIndexDir);
1: 
1:         broker.setDataDirectoryFile(testDataDir);
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setSchedulerSupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:     }
1: 
1:     @Test
1:     public void testIndexDirExists() throws Exception {
1:         LOG.info("Index dir is configured as: {}", kahaIndexDir);
1:         assertTrue(kahaDataDir.exists());
1:         assertTrue(kahaIndexDir.exists());
1: 
1:         String[] index = kahaIndexDir.list(new FilenameFilter() {
1: 
1:             @Override
1:             public boolean accept(File dir, String name) {
1:                 LOG.info("Testing filename: {}", name);
1:                 return name.endsWith("data") || name.endsWith("redo");
1:             }
1:         });
1: 
1:         String[] journal = kahaDataDir.list(new FilenameFilter() {
1: 
1:             @Override
1:             public boolean accept(File dir, String name) {
1:                 LOG.info("Testing filename: {}", name);
1:                 return name.endsWith("log") || name.equals("lock");
1:             }
1:         });
1: 
1:         produceMessages();
1: 
1:         // Should be db.data and db.redo and nothing else.
1:         assertNotNull(index);
1:         assertEquals(2, index.length);
1: 
1:         // Should contain the initial log for the journal and the lock.
1:         assertNotNull(journal);
0:         assertEquals(2, journal.length);
1:     }
1: 
1:     @Test
1:     public void testRestartWithDeleteWorksWhenIndexIsSeparate() throws Exception {
1:         produceMessages();
1:         restartBroker();
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         Connection connection = cf.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(name.getMethodName());
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         assertNull(consumer.receive(2000));
1:     }
1: 
1:     private void produceMessages() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         Connection connection = cf.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(name.getMethodName());
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < 5; ++i) {
1:             producer.send(session.createTextMessage("test:" + i));
1:         }
1:         connection.close();
1:     }
1: }
============================================================================