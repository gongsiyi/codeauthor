1:66c8f9c: /**
1:66c8f9c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:66c8f9c:  * contributor license agreements.  See the NOTICE file distributed with
1:66c8f9c:  * this work for additional information regarding copyright ownership.
1:66c8f9c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:66c8f9c:  * (the "License"); you may not use this file except in compliance with
1:66c8f9c:  * the License.  You may obtain a copy of the License at
1:66c8f9c:  *
1:66c8f9c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:66c8f9c:  *
1:66c8f9c:  * Unless required by applicable law or agreed to in writing, software
1:66c8f9c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:66c8f9c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:66c8f9c:  * See the License for the specific language governing permissions and
1:66c8f9c:  * limitations under the License.
1:66c8f9c:  */
1:2bd0e57: package org.apache.activemq.bugs;
1:2bd0e57: 
1:2bd0e57: import static org.hamcrest.Matchers.equalTo;
1:2bd0e57: import static org.hamcrest.Matchers.greaterThan;
1:2bd0e57: import static org.hamcrest.core.Is.is;
1:2bd0e57: import static org.junit.Assert.assertNotNull;
1:2bd0e57: import static org.junit.Assert.assertThat;
1:2bd0e57: 
1:2bd0e57: import java.util.Map;
1:2bd0e57: 
1:2bd0e57: import javax.jms.Connection;
1:2bd0e57: import javax.jms.Destination;
1:2bd0e57: import javax.jms.JMSException;
1:2bd0e57: import javax.jms.Message;
1:2bd0e57: import javax.jms.MessageProducer;
1:2bd0e57: import javax.jms.Session;
1:2bd0e57: import javax.management.MalformedObjectNameException;
1:2bd0e57: import javax.management.ObjectName;
1:2bd0e57: import javax.management.openmbean.CompositeData;
1:2bd0e57: import javax.management.openmbean.TabularDataSupport;
1:2bd0e57: 
1:2bd0e57: import org.apache.activemq.ActiveMQConnectionFactory;
1:2bd0e57: import org.apache.activemq.broker.BrokerService;
1:2bd0e57: import org.apache.activemq.broker.jmx.CompositeDataConstants;
1:2bd0e57: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:2bd0e57: import org.apache.activemq.command.ActiveMQQueue;
1:2bd0e57: import org.junit.After;
1:2bd0e57: import org.junit.Before;
1:2bd0e57: import org.junit.Test;
1:2bd0e57: 
1:2bd0e57: public class AMQ4530Test {
1:2bd0e57: 
1:2bd0e57:     private static BrokerService brokerService;
1:2bd0e57:     private static String TEST_QUEUE = "testQueue";
1:2bd0e57:     private static ActiveMQQueue queue = new ActiveMQQueue(TEST_QUEUE);
1:2bd0e57:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:2bd0e57:     private static String KEY = "testproperty";
1:2bd0e57:     private static String VALUE = "propvalue";
1:2bd0e57: 
1:2bd0e57:     private ActiveMQConnectionFactory connectionFactory;
1:2bd0e57:     private String connectionUri;
1:2bd0e57: 
1:2bd0e57:     @Before
1:2bd0e57:     public void setUp() throws Exception {
1:2bd0e57:         brokerService = new BrokerService();
1:2bd0e57:         brokerService.setPersistent(false);
1:2bd0e57:         brokerService.setUseJmx(true);
1:2bd0e57:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:2bd0e57:         brokerService.start();
1:2bd0e57:         brokerService.waitUntilStarted();
1:2bd0e57: 
1:2bd0e57:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:2bd0e57:         sendMessage();
1:2bd0e57:     }
1:2bd0e57: 
1:2bd0e57:     public void sendMessage() throws Exception {
1:2bd0e57:         final Connection conn = connectionFactory.createConnection();
1:2bd0e57:         try {
1:2bd0e57:             conn.start();
1:2bd0e57:             final Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2bd0e57:             final Destination queue = session.createQueue(TEST_QUEUE);
1:2bd0e57:             final Message toSend = session.createMessage();
1:2bd0e57:             toSend.setStringProperty(KEY, VALUE);
1:2bd0e57:             final MessageProducer producer = session.createProducer(queue);
1:2bd0e57:             producer.send(queue, toSend);
1:2bd0e57:         } finally {
1:2bd0e57:             conn.close();
1:2bd0e57:         }
1:2bd0e57:     }
1:2bd0e57: 
1:2bd0e57:     @After
1:2bd0e57:     public void tearDown() throws Exception {
1:2bd0e57:         brokerService.stop();
1:2bd0e57:         brokerService.waitUntilStopped();
1:2bd0e57:     }
1:2bd0e57: 
1:2bd0e57:     @SuppressWarnings("unchecked")
1:2bd0e57:     @Test
1:2bd0e57:     public void testStringPropertiesFromCompositeData() throws Exception {
1:2bd0e57:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:2bd0e57:         final CompositeData message = queueView.browse()[0];
1:2bd0e57:         assertNotNull(message);
1:2bd0e57:         TabularDataSupport stringProperties = (TabularDataSupport) message.get(CompositeDataConstants.STRING_PROPERTIES);
1:2bd0e57:         assertNotNull(stringProperties);
1:2bd0e57:         assertThat(stringProperties.size(), is(greaterThan(0)));
1:2bd0e57:         Map.Entry<Object, Object> compositeDataEntry = (Map.Entry<Object, Object>) stringProperties.entrySet().toArray()[0];
1:2bd0e57:         CompositeData stringEntry = (CompositeData) compositeDataEntry.getValue();
1:2bd0e57:         assertThat(String.valueOf(stringEntry.get("key")), equalTo(KEY));
1:2bd0e57:         assertThat(String.valueOf(stringEntry.get("value")), equalTo(VALUE));
1:2bd0e57:     }
1:2bd0e57: 
1:2bd0e57:     private QueueViewMBean getProxyToQueueViewMBean() throws MalformedObjectNameException, NullPointerException,
1:2bd0e57:             JMSException {
1:2bd0e57:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queue.getQueueName());
1:2bd0e57:         final QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext().newProxyInstance(
1:2bd0e57:                 queueViewMBeanName, QueueViewMBean.class, true);
1:2bd0e57:         return proxy;
1:2bd0e57:     }
1:2bd0e57: 
1:2bd0e57: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:66c8f9c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2bd0e57
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
1: 
1: import static org.hamcrest.Matchers.equalTo;
1: import static org.hamcrest.Matchers.greaterThan;
1: import static org.hamcrest.core.Is.is;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertThat;
1: 
1: import java.util.Map;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.CompositeDataConstants;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ4530Test {
1: 
1:     private static BrokerService brokerService;
1:     private static String TEST_QUEUE = "testQueue";
1:     private static ActiveMQQueue queue = new ActiveMQQueue(TEST_QUEUE);
1:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:     private static String KEY = "testproperty";
1:     private static String VALUE = "propvalue";
1: 
1:     private ActiveMQConnectionFactory connectionFactory;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         sendMessage();
1:     }
1: 
1:     public void sendMessage() throws Exception {
1:         final Connection conn = connectionFactory.createConnection();
1:         try {
1:             conn.start();
1:             final Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             final Destination queue = session.createQueue(TEST_QUEUE);
1:             final Message toSend = session.createMessage();
1:             toSend.setStringProperty(KEY, VALUE);
1:             final MessageProducer producer = session.createProducer(queue);
1:             producer.send(queue, toSend);
1:         } finally {
1:             conn.close();
1:         }
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testStringPropertiesFromCompositeData() throws Exception {
1:         final QueueViewMBean queueView = getProxyToQueueViewMBean();
1:         final CompositeData message = queueView.browse()[0];
1:         assertNotNull(message);
1:         TabularDataSupport stringProperties = (TabularDataSupport) message.get(CompositeDataConstants.STRING_PROPERTIES);
1:         assertNotNull(stringProperties);
1:         assertThat(stringProperties.size(), is(greaterThan(0)));
1:         Map.Entry<Object, Object> compositeDataEntry = (Map.Entry<Object, Object>) stringProperties.entrySet().toArray()[0];
1:         CompositeData stringEntry = (CompositeData) compositeDataEntry.getValue();
1:         assertThat(String.valueOf(stringEntry.get("key")), equalTo(KEY));
1:         assertThat(String.valueOf(stringEntry.get("value")), equalTo(VALUE));
1:     }
1: 
1:     private QueueViewMBean getProxyToQueueViewMBean() throws MalformedObjectNameException, NullPointerException,
1:             JMSException {
1:         final ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queue.getQueueName());
1:         final QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext().newProxyInstance(
1:                 queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1: }
============================================================================