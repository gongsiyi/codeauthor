1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b3001f2:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:82d60e1: import java.io.Serializable;
1:9eb7fb9: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b3001f2:  * Defines the prefetch message policies for different types of consumers
1:b3001f2:  *
1:b3001f2:  * @org.apache.xbean.XBean element="prefetchPolicy"
1:b0c2a40:  *
1:d29ca2a:  */
1:fef66a6: @SuppressWarnings("serial")
1:fc63a92: public class ActiveMQPrefetchPolicy extends Object implements Serializable {
1:9eb7fb9: 
1:fef66a6:     public static final int MAX_PREFETCH_SIZE = Short.MAX_VALUE;
1:fc63a92:     public static final int DEFAULT_QUEUE_PREFETCH = 1000;
1:fc63a92:     public static final int DEFAULT_QUEUE_BROWSER_PREFETCH = 500;
1:fc63a92:     public static final int DEFAULT_DURABLE_TOPIC_PREFETCH = 100;
1:9eb7fb9:     public static final int DEFAULT_OPTIMIZE_DURABLE_TOPIC_PREFETCH = 1000;
1:fc63a92:     public static final int DEFAULT_TOPIC_PREFETCH = MAX_PREFETCH_SIZE;
1:d29ca2a: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQPrefetchPolicy.class);
1:d29ca2a: 
1:d29ca2a:     private int queuePrefetch;
1:d29ca2a:     private int queueBrowserPrefetch;
1:d29ca2a:     private int topicPrefetch;
1:d29ca2a:     private int durableTopicPrefetch;
1:fa8b889:     private int optimizeDurableTopicPrefetch;
1:bed10aa:     private int maximumPendingMessageLimit;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Initialize default prefetch policies
1:d29ca2a:      */
1:d29ca2a:     public ActiveMQPrefetchPolicy() {
1:fc63a92:         this.queuePrefetch = DEFAULT_QUEUE_PREFETCH;
1:fc63a92:         this.queueBrowserPrefetch = DEFAULT_QUEUE_BROWSER_PREFETCH;
1:fc63a92:         this.topicPrefetch = DEFAULT_TOPIC_PREFETCH;
1:fc63a92:         this.durableTopicPrefetch = DEFAULT_DURABLE_TOPIC_PREFETCH;
1:fc63a92:         this.optimizeDurableTopicPrefetch = DEFAULT_OPTIMIZE_DURABLE_TOPIC_PREFETCH;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the durableTopicPrefetch.
1:d29ca2a:      */
1:d29ca2a:     public int getDurableTopicPrefetch() {
1:d29ca2a:         return durableTopicPrefetch;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:9eb7fb9:      * @param durableTopicPrefetch
1:9eb7fb9:      *            The durableTopicPrefetch to set.
1:d29ca2a:      */
1:d29ca2a:     public void setDurableTopicPrefetch(int durableTopicPrefetch) {
1:d29ca2a:         this.durableTopicPrefetch = getMaxPrefetchLimit(durableTopicPrefetch);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the queuePrefetch.
1:d29ca2a:      */
1:d29ca2a:     public int getQueuePrefetch() {
1:d29ca2a:         return queuePrefetch;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:9eb7fb9:      * @param queuePrefetch
1:9eb7fb9:      *            The queuePrefetch to set.
1:d29ca2a:      */
1:d29ca2a:     public void setQueuePrefetch(int queuePrefetch) {
1:d29ca2a:         this.queuePrefetch = getMaxPrefetchLimit(queuePrefetch);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the queueBrowserPrefetch.
1:d29ca2a:      */
1:d29ca2a:     public int getQueueBrowserPrefetch() {
1:d29ca2a:         return queueBrowserPrefetch;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:9eb7fb9:      * @param queueBrowserPrefetch
1:9eb7fb9:      *            The queueBrowserPrefetch to set.
1:d29ca2a:      */
1:d29ca2a:     public void setQueueBrowserPrefetch(int queueBrowserPrefetch) {
1:d29ca2a:         this.queueBrowserPrefetch = getMaxPrefetchLimit(queueBrowserPrefetch);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the topicPrefetch.
1:d29ca2a:      */
1:d29ca2a:     public int getTopicPrefetch() {
1:d29ca2a:         return topicPrefetch;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:9eb7fb9:      * @param topicPrefetch
1:9eb7fb9:      *            The topicPrefetch to set.
1:d29ca2a:      */
1:d29ca2a:     public void setTopicPrefetch(int topicPrefetch) {
1:d29ca2a:         this.topicPrefetch = getMaxPrefetchLimit(topicPrefetch);
1:d29ca2a:     }
1:230a86c: 
1:fa8b889:     /**
1:fa8b889:      * @return Returns the optimizeDurableTopicPrefetch.
1:fa8b889:      */
1:230a86c:     public int getOptimizeDurableTopicPrefetch() {
1:fa8b889:         return optimizeDurableTopicPrefetch;
1:d29ca2a:     }
1:d29ca2a: 
1:fa8b889:     /**
1:9eb7fb9:      * @param optimizeAcknowledgePrefetch
1:9eb7fb9:      *            The optimizeDurableTopicPrefetch to set.
1:fa8b889:      */
1:230a86c:     public void setOptimizeDurableTopicPrefetch(int optimizeAcknowledgePrefetch) {
1:230a86c:         this.optimizeDurableTopicPrefetch = optimizeAcknowledgePrefetch;
1:fc63a92:     }
1:230a86c: 
1:bed10aa:     public int getMaximumPendingMessageLimit() {
1:bed10aa:         return maximumPendingMessageLimit;
1:fa8b889:     }
1:d29ca2a: 
1:bed10aa:     /**
1:230a86c:      * Sets how many messages a broker will keep around, above the prefetch
1:230a86c:      * limit, for non-durable topics before starting to discard older messages.
1:bed10aa:      */
1:bed10aa:     public void setMaximumPendingMessageLimit(int maximumPendingMessageLimit) {
1:bed10aa:         this.maximumPendingMessageLimit = maximumPendingMessageLimit;
1:fa8b889:     }
1:d29ca2a: 
1:d29ca2a:     private int getMaxPrefetchLimit(int value) {
1:d29ca2a:         int result = Math.min(value, MAX_PREFETCH_SIZE);
1:d29ca2a:         if (result < value) {
1:fc00993:             LOG.warn("maximum prefetch limit has been reset from " + value + " to " + MAX_PREFETCH_SIZE);
1:d29ca2a:         }
1:d29ca2a:         return result;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setAll(int i) {
1:9eb7fb9:         this.durableTopicPrefetch = getMaxPrefetchLimit(i);
1:9eb7fb9:         this.queueBrowserPrefetch = getMaxPrefetchLimit(i);
1:9eb7fb9:         this.queuePrefetch = getMaxPrefetchLimit(i);
1:9eb7fb9:         this.topicPrefetch = getMaxPrefetchLimit(i);
1:9eb7fb9:         this.optimizeDurableTopicPrefetch = getMaxPrefetchLimit(i);
1:d29ca2a:     }
1:d29ca2a: 
1:9eb7fb9:     @Override
1:9eb7fb9:     public boolean equals(Object object) {
1:9eb7fb9:         if (object instanceof ActiveMQPrefetchPolicy) {
1:fc63a92:             ActiveMQPrefetchPolicy other = (ActiveMQPrefetchPolicy) object;
1:fc63a92:             return this.queuePrefetch == other.queuePrefetch &&
1:9eb7fb9:                    this.queueBrowserPrefetch == other.queueBrowserPrefetch &&
1:9eb7fb9:                    this.topicPrefetch == other.topicPrefetch &&
1:9eb7fb9:                    this.durableTopicPrefetch == other.durableTopicPrefetch &&
1:da36f78:                    this.optimizeDurableTopicPrefetch == other.optimizeDurableTopicPrefetch;
1:d29ca2a:         }
1:fc63a92:         return false;
1:d29ca2a:     }
1:fc63a92: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:da36f78
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                    this.optimizeDurableTopicPrefetch == other.optimizeDurableTopicPrefetch;
commit:9eb7fb9
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static final int DEFAULT_OPTIMIZE_DURABLE_TOPIC_PREFETCH = 1000;
0:     public static final int DEFAULT_INPUT_STREAM_PREFETCH = 100;
/////////////////////////////////////////////////////////////////////////
1:      * @param durableTopicPrefetch
1:      *            The durableTopicPrefetch to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param queuePrefetch
1:      *            The queuePrefetch to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param queueBrowserPrefetch
1:      *            The queueBrowserPrefetch to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param topicPrefetch
1:      *            The topicPrefetch to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param optimizeAcknowledgePrefetch
1:      *            The optimizeDurableTopicPrefetch to set.
/////////////////////////////////////////////////////////////////////////
1:         this.durableTopicPrefetch = getMaxPrefetchLimit(i);
1:         this.queueBrowserPrefetch = getMaxPrefetchLimit(i);
1:         this.queuePrefetch = getMaxPrefetchLimit(i);
1:         this.topicPrefetch = getMaxPrefetchLimit(i);
0:         this.inputStreamPrefetch = getMaxPrefetchLimit(i);
1:         this.optimizeDurableTopicPrefetch = getMaxPrefetchLimit(i);
0:     @Deprecated
0:     @Deprecated
1:     @Override
1:     public boolean equals(Object object) {
1:         if (object instanceof ActiveMQPrefetchPolicy) {
1:                    this.queueBrowserPrefetch == other.queueBrowserPrefetch &&
1:                    this.topicPrefetch == other.topicPrefetch &&
1:                    this.durableTopicPrefetch == other.durableTopicPrefetch &&
0:                    this.optimizeDurableTopicPrefetch == other.optimizeDurableTopicPrefetch &&
0:                    this.inputStreamPrefetch == other.inputStreamPrefetch;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ActiveMQPrefetchPolicy.class);
0:     private static final int MAX_PREFETCH_SIZE = Short.MAX_VALUE - 1;
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("maximum prefetch limit has been reset from " + value + " to " + MAX_PREFETCH_SIZE);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     private static final int MAX_PREFETCH_SIZE = (Short.MAX_VALUE - 1);
/////////////////////////////////////////////////////////////////////////
0:         this.optimizeDurableTopicPrefetch = 1000;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getOptimizeDurableTopicPrefetch() {
0:      * @param optimizeAcknowledgePrefetch The optimizeDurableTopicPrefetch to
0:      *                set.
1:     public void setOptimizeDurableTopicPrefetch(int optimizeAcknowledgePrefetch) {
1:         this.optimizeDurableTopicPrefetch = optimizeAcknowledgePrefetch;
1: 
1:      * Sets how many messages a broker will keep around, above the prefetch
1:      * limit, for non-durable topics before starting to discard older messages.
/////////////////////////////////////////////////////////////////////////
0:         this.durableTopicPrefetch = i;
0:         this.queueBrowserPrefetch = i;
0:         this.queuePrefetch = i;
0:         this.topicPrefetch = i;
0:         this.inputStreamPrefetch = 1;
0:         this.optimizeDurableTopicPrefetch = i;
/////////////////////////////////////////////////////////////////////////
commit:b3001f2
/////////////////////////////////////////////////////////////////////////
1:  * Defines the prefetch message policies for different types of consumers
1:  * 
1:  * @org.apache.xbean.XBean element="prefetchPolicy"
1:  * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: /**
0:  * Defines the pretech message policies for different types of consumers
0:  * @version $Revision: 1.3 $
1:  */
0: public class ActiveMQPrefetchPolicy {
0:     private static final Log log = LogFactory.getLog(ActiveMQPrefetchPolicy.class);
0:     private static final int MAX_PREFETCH_SIZE = (Short.MAX_VALUE -1);
1:     private int queuePrefetch;
1:     private int queueBrowserPrefetch;
1:     private int topicPrefetch;
1:     private int durableTopicPrefetch;
0:     private int inputStreamPrefetch;
1: 
1: 
1:     /**
1:      * Initialize default prefetch policies
1:      */
1:     public ActiveMQPrefetchPolicy() {
0:         this.queuePrefetch = 1000;
0:         this.queueBrowserPrefetch = 500;
0:         this.topicPrefetch = MAX_PREFETCH_SIZE;
0:         this.durableTopicPrefetch = 100;
0:         this.inputStreamPrefetch = 100;
1:     }
1: 
1:     /**
1:      * @return Returns the durableTopicPrefetch.
1:      */
1:     public int getDurableTopicPrefetch() {
1:         return durableTopicPrefetch;
1:     }
1: 
1:     /**
0:      * @param durableTopicPrefetch The durableTopicPrefetch to set.
1:      */
1:     public void setDurableTopicPrefetch(int durableTopicPrefetch) {
1:         this.durableTopicPrefetch = getMaxPrefetchLimit(durableTopicPrefetch);
1:     }
1: 
1:     /**
1:      * @return Returns the queuePrefetch.
1:      */
1:     public int getQueuePrefetch() {
1:         return queuePrefetch;
1:     }
1: 
1:     /**
0:      * @param queuePrefetch The queuePrefetch to set.
1:      */
1:     public void setQueuePrefetch(int queuePrefetch) {
1:         this.queuePrefetch = getMaxPrefetchLimit(queuePrefetch);
1:     }
1: 
1:     /**
1:      * @return Returns the queueBrowserPrefetch.
1:      */
1:     public int getQueueBrowserPrefetch() {
1:         return queueBrowserPrefetch;
1:     }
1: 
1:     /**
0:      * @param queueBrowserPrefetch The queueBrowserPrefetch to set.
1:      */
1:     public void setQueueBrowserPrefetch(int queueBrowserPrefetch) {
1:         this.queueBrowserPrefetch = getMaxPrefetchLimit(queueBrowserPrefetch);
1:     }
1: 
1:     /**
1:      * @return Returns the topicPrefetch.
1:      */
1:     public int getTopicPrefetch() {
1:         return topicPrefetch;
1:     }
1: 
1:     /**
0:      * @param topicPrefetch The topicPrefetch to set.
1:      */
1:     public void setTopicPrefetch(int topicPrefetch) {
1:         this.topicPrefetch = getMaxPrefetchLimit(topicPrefetch);
1:     }
1:     
1:     private int getMaxPrefetchLimit(int value) {
1:         int result = Math.min(value, MAX_PREFETCH_SIZE);
1:         if (result < value) {
0:             log.warn("maximum prefetch limit has been reset from " + value + " to " + MAX_PREFETCH_SIZE);
1:         }
1:         return result;
1:     }
1: 
1:     public void setAll(int i) {
0:         this.durableTopicPrefetch=i;
0:         this.queueBrowserPrefetch=i;
0:         this.queuePrefetch=i;
0:         this.topicPrefetch=i;
0:         this.inputStreamPrefetch=1;
1:     }
1: 
0:     public int getInputStreamPrefetch() {
0:         return inputStreamPrefetch;
1:     }
1: 
0:     public void setInputStreamPrefetch(int inputStreamPrefetch) {
0:         this.inputStreamPrefetch = getMaxPrefetchLimit(inputStreamPrefetch);
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:fef66a6
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
1: @SuppressWarnings("serial")
1:     public static final int MAX_PREFETCH_SIZE = Short.MAX_VALUE;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQPrefetchPolicy.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:fc63a92
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQPrefetchPolicy extends Object implements Serializable {
0:     public static final int MAX_PREFETCH_SIZE = Short.MAX_VALUE - 1;
1:     public static final int DEFAULT_QUEUE_PREFETCH = 1000;
1:     public static final int DEFAULT_QUEUE_BROWSER_PREFETCH = 500;
1:     public static final int DEFAULT_DURABLE_TOPIC_PREFETCH = 100;
0:     public static final int DEFAULT_OPTIMIZE_DURABLE_TOPIC_PREFETCH=1000;
0:     public static final int DEFAULT_INPUT_STREAM_PREFETCH=100;
1:     public static final int DEFAULT_TOPIC_PREFETCH = MAX_PREFETCH_SIZE;
0:     
0:     
/////////////////////////////////////////////////////////////////////////
1:         this.queuePrefetch = DEFAULT_QUEUE_PREFETCH;
1:         this.queueBrowserPrefetch = DEFAULT_QUEUE_BROWSER_PREFETCH;
1:         this.topicPrefetch = DEFAULT_TOPIC_PREFETCH;
1:         this.durableTopicPrefetch = DEFAULT_DURABLE_TOPIC_PREFETCH;
1:         this.optimizeDurableTopicPrefetch = DEFAULT_OPTIMIZE_DURABLE_TOPIC_PREFETCH;
0:         this.inputStreamPrefetch = DEFAULT_INPUT_STREAM_PREFETCH;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public boolean equals(Object object){
0:         if (object instanceof ActiveMQPrefetchPolicy){
1:             ActiveMQPrefetchPolicy other = (ActiveMQPrefetchPolicy) object;
1:             return this.queuePrefetch == other.queuePrefetch &&
0:             this.queueBrowserPrefetch == other.queueBrowserPrefetch &&
0:             this.topicPrefetch == other.topicPrefetch &&
0:             this.durableTopicPrefetch == other.durableTopicPrefetch &&
0:             this.optimizeDurableTopicPrefetch == other.optimizeDurableTopicPrefetch &&
0:             this.inputStreamPrefetch == other.inputStreamPrefetch;
1:         }
1:         return false;
1:     }
commit:fa8b889
/////////////////////////////////////////////////////////////////////////
1:     private int optimizeDurableTopicPrefetch;
/////////////////////////////////////////////////////////////////////////
0:         this.optimizeDurableTopicPrefetch=1000;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return Returns the optimizeDurableTopicPrefetch.
1:      */
0:     public int getOptimizeDurableTopicPrefetch(){
1:         return optimizeDurableTopicPrefetch;
1:     }
0: 
1:     /**
0:      * @param optimizeDurableTopicPrefetch The optimizeDurableTopicPrefetch to set.
1:      */
0:     public void setOptimizeDurableTopicPrefetch(int optimizeAcknowledgePrefetch){
0:         this.optimizeDurableTopicPrefetch=optimizeAcknowledgePrefetch;
1:     }
0:     
/////////////////////////////////////////////////////////////////////////
0:         this.optimizeDurableTopicPrefetch=i;
/////////////////////////////////////////////////////////////////////////
0: 
0:     
author:James Strachan
-------------------------------------------------------------------------------
commit:d96a43d
/////////////////////////////////////////////////////////////////////////
0:      * @param optimizeAcknowledgePrefetch The optimizeDurableTopicPrefetch to set.
commit:bed10aa
/////////////////////////////////////////////////////////////////////////
1:     private int maximumPendingMessageLimit;
/////////////////////////////////////////////////////////////////////////
1:     public int getMaximumPendingMessageLimit() {
1:         return maximumPendingMessageLimit;
0:     }
0: 
1:     /**
0:      * Sets how many messages a broker will keep around, above the prefetch limit, for non-durable
0:      * topics before starting to discard older messages.
1:      */
1:     public void setMaximumPendingMessageLimit(int maximumPendingMessageLimit) {
1:         this.maximumPendingMessageLimit = maximumPendingMessageLimit;
0:     }
0: 
0:     
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:82d60e1
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
0: public class ActiveMQPrefetchPolicy implements Serializable {
============================================================================