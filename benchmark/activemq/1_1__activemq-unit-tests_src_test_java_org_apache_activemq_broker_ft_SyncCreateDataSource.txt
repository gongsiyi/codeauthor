1:efaa351: /**
1:efaa351:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:efaa351:  * contributor license agreements.  See the NOTICE file distributed with
1:efaa351:  * this work for additional information regarding copyright ownership.
1:efaa351:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:efaa351:  * (the "License"); you may not use this file except in compliance with
1:efaa351:  * the License.  You may obtain a copy of the License at
1:efaa351:  *
1:efaa351:  *      http://www.apache.org/licenses/LICENSE-2.0
1:efaa351:  *
1:efaa351:  * Unless required by applicable law or agreed to in writing, software
1:efaa351:  * distributed under the License is distributed on an "AS IS" BASIS,
1:efaa351:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:efaa351:  * See the License for the specific language governing permissions and
1:efaa351:  * limitations under the License.
1:efaa351:  */
1:efaa351: package org.apache.activemq.broker.ft;
1:efaa351: 
1:efaa351: import java.io.PrintWriter;
1:efaa351: import java.sql.Connection;
1:efaa351: import java.sql.SQLException;
1:efaa351: import java.sql.SQLFeatureNotSupportedException;
1:efaa351: import java.util.logging.Logger;
1:efaa351: import javax.sql.DataSource;
1:efaa351: import org.apache.derby.jdbc.EmbeddedDataSource;
1:efaa351: 
1:efaa351: // prevent concurrent calls from attempting to create the db at the same time
1:efaa351: // can result in "already exists in this jvm" errors
1:efaa351: 
1:efaa351: public class SyncCreateDataSource implements DataSource {
1:efaa351:     final EmbeddedDataSource delegate;
1:efaa351: 
1:6f1f06f:     public SyncCreateDataSource(EmbeddedDataSource dataSource) {
1:efaa351:         this.delegate = dataSource;
1:efaa351:     }
1:efaa351: 
1:efaa351:     @Override
1:efaa351:     public Connection getConnection() throws SQLException {
1:efaa351:         synchronized (this) {
1:efaa351:             return delegate.getConnection();
1:efaa351:         }
1:efaa351:     }
1:efaa351: 
1:efaa351:     @Override
1:efaa351:     public Connection getConnection(String username, String password) throws SQLException {
1:efaa351:         synchronized (this) {
1:efaa351:             return delegate.getConnection();
1:efaa351:         }
1:efaa351:     }
1:efaa351: 
1:efaa351:     @Override
1:efaa351:     public PrintWriter getLogWriter() throws SQLException {
1:efaa351:         return null;
1:efaa351:     }
1:efaa351: 
1:efaa351:     @Override
1:efaa351:     public void setLogWriter(PrintWriter out) throws SQLException {
1:efaa351:     }
1:efaa351: 
1:efaa351:     @Override
1:efaa351:     public int getLoginTimeout() throws SQLException {
1:efaa351:         return 0;
1:efaa351:     }
1:efaa351: 
1:efaa351:     @Override
1:efaa351:     public void setLoginTimeout(int seconds) throws SQLException {
1:efaa351:     }
1:efaa351: 
1:efaa351:     @Override
1:efaa351:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:efaa351:         return null;
1:efaa351:     }
1:efaa351: 
1:efaa351:     @Override
1:efaa351:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:efaa351:         return false;
1:efaa351:     }
1:efaa351: 
1:6f1f06f:     public EmbeddedDataSource getDelegate() {
1:efaa351:         return delegate;
1:efaa351:     }
1:efaa351: 
1:efaa351:     public Logger getParentLogger() throws SQLFeatureNotSupportedException {
1:efaa351:         return null;
1:efaa351:     }
1:efaa351: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:6f1f06f
/////////////////////////////////////////////////////////////////////////
1:     public SyncCreateDataSource(EmbeddedDataSource dataSource) {
/////////////////////////////////////////////////////////////////////////
1:     public EmbeddedDataSource getDelegate() {
commit:efaa351
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.ft;
1: 
1: import java.io.PrintWriter;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.util.logging.Logger;
1: import javax.sql.DataSource;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: 
1: // prevent concurrent calls from attempting to create the db at the same time
1: // can result in "already exists in this jvm" errors
1: 
1: public class SyncCreateDataSource implements DataSource {
1:     final EmbeddedDataSource delegate;
1: 
0:     SyncCreateDataSource(EmbeddedDataSource dataSource) {
1:         this.delegate = dataSource;
1:     }
1: 
1:     @Override
1:     public Connection getConnection() throws SQLException {
1:         synchronized (this) {
1:             return delegate.getConnection();
1:         }
1:     }
1: 
1:     @Override
1:     public Connection getConnection(String username, String password) throws SQLException {
1:         synchronized (this) {
1:             return delegate.getConnection();
1:         }
1:     }
1: 
1:     @Override
1:     public PrintWriter getLogWriter() throws SQLException {
1:         return null;
1:     }
1: 
1:     @Override
1:     public void setLogWriter(PrintWriter out) throws SQLException {
1:     }
1: 
1:     @Override
1:     public int getLoginTimeout() throws SQLException {
1:         return 0;
1:     }
1: 
1:     @Override
1:     public void setLoginTimeout(int seconds) throws SQLException {
1:     }
1: 
1:     @Override
1:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:         return null;
1:     }
1: 
1:     @Override
1:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:         return false;
1:     }
1: 
0:     EmbeddedDataSource getDelegate() {
1:         return delegate;
1:     }
1: 
1:     public Logger getParentLogger() throws SQLFeatureNotSupportedException {
1:         return null;
1:     }
1: }
============================================================================