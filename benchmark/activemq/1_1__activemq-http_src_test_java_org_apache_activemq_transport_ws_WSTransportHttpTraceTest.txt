1:4fb8083: /**
1:4fb8083:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4fb8083:  * contributor license agreements.  See the NOTICE file distributed with
1:4fb8083:  * this work for additional information regarding copyright ownership.
1:4fb8083:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4fb8083:  * (the "License"); you may not use this file except in compliance with
1:4fb8083:  * the License.  You may obtain a copy of the License at
1:4fb8083:  *
1:4fb8083:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4fb8083:  *
1:4fb8083:  * Unless required by applicable law or agreed to in writing, software
1:4fb8083:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4fb8083:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4fb8083:  * See the License for the specific language governing permissions and
1:4fb8083:  * limitations under the License.
1:4fb8083:  */
3:4fb8083: 
1:4fb8083: package org.apache.activemq.transport.ws;
1:4fb8083: 
1:4fb8083: import java.util.Collection;
1:4fb8083: 
1:473b328: import org.apache.activemq.transport.http.HttpTraceTestSupport;
1:4fb8083: import org.junit.Test;
1:4fb8083: import org.junit.runner.RunWith;
1:4fb8083: import org.junit.runners.Parameterized;
1:4fb8083: import org.junit.runners.Parameterized.Parameters;
1:4fb8083: 
1:4fb8083: @RunWith(Parameterized.class)
1:f40532a: public class WSTransportHttpTraceTest extends WSTransportTestSupport {
1:4fb8083: 
1:473b328:     protected String enableTraceParam;
1:473b328:     protected int expectedStatus;
1:4fb8083: 
1:4fb8083:     @Parameters
1:4fb8083:     public static Collection<Object[]> data() {
1:473b328:         return HttpTraceTestSupport.getTestParameters();
3:4fb8083:     }
1:4fb8083: 
1:4fb8083:     public WSTransportHttpTraceTest(final String enableTraceParam, final int expectedStatus) {
1:4fb8083:         this.enableTraceParam = enableTraceParam;
1:4fb8083:         this.expectedStatus = expectedStatus;
1:4fb8083:     }
1:4fb8083: 
3:4fb8083:     @Override
1:4fb8083:     protected String getWSConnectorURI() {
1:4fb8083:         String uri = "ws://127.0.0.1:61623?websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001";
1:4fb8083:         uri = enableTraceParam != null ? uri + "&" + enableTraceParam : uri;
1:4fb8083:         return uri;
1:4fb8083:     }
1:4fb8083: 
1:4fb8083:     /**
1:4fb8083:      * This tests whether the TRACE method is enabled or not
1:4fb8083:      * @throws Exception
1:4fb8083:      */
1:7335f69:     @Test(timeout=10000)
1:4fb8083:     public void testHttpTraceEnabled() throws Exception {
1:473b328:         HttpTraceTestSupport.testHttpTraceEnabled("http://127.0.0.1:61623", expectedStatus, null);
1:4fb8083:     }
1:4fb8083: 
1:4fb8083: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f40532a
/////////////////////////////////////////////////////////////////////////
1: public class WSTransportHttpTraceTest extends WSTransportTestSupport {
/////////////////////////////////////////////////////////////////////////
commit:473b328
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.http.HttpTraceTestSupport;
/////////////////////////////////////////////////////////////////////////
1:     protected String enableTraceParam;
1:     protected int expectedStatus;
1:         return HttpTraceTestSupport.getTestParameters();
/////////////////////////////////////////////////////////////////////////
1:         HttpTraceTestSupport.testHttpTraceEnabled("http://127.0.0.1:61623", expectedStatus, null);
commit:7335f69
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=10000)
commit:4fb8083
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.ws;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: import java.util.Arrays;
1: import java.util.Collection;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.atomic.AtomicInteger;
1: 
0: import org.eclipse.jetty.client.HttpClient;
0: import org.eclipse.jetty.client.api.Request;
0: import org.eclipse.jetty.client.api.Result;
0: import org.eclipse.jetty.client.util.BufferingResponseListener;
0: import org.eclipse.jetty.http.HttpMethod;
0: import org.eclipse.jetty.http.HttpStatus;
0: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
0: public class WSTransportHttpTraceTest extends WSTransportTest {
1: 
0:     private String enableTraceParam;
0:     private int expectedStatus;
1: 
1:     @Parameters
1:     public static Collection<Object[]> data() {
0:         return Arrays.asList(new Object[][] {
0:                 //value is empty
0:                 {"http.enableTrace=", HttpStatus.FORBIDDEN_403},
0:                 //default, trace method not specified
0:                 {null, HttpStatus.FORBIDDEN_403},
0:                 // enable http trace method
0:                 {"http.enableTrace=true", HttpStatus.OK_200},
0:                 // disable trace method
0:                 {"http.enableTrace=false", HttpStatus.FORBIDDEN_403}
0:         });
1:     }
1: 
1:     public WSTransportHttpTraceTest(final String enableTraceParam, final int expectedStatus) {
1:         this.enableTraceParam = enableTraceParam;
1:         this.expectedStatus = expectedStatus;
1:     }
1: 
1:     @Override
1:     protected String getWSConnectorURI() {
1:         String uri = "ws://127.0.0.1:61623?websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001";
1:         uri = enableTraceParam != null ? uri + "&" + enableTraceParam : uri;
1:         return uri;
1:     }
1: 
1:     /**
1:      * This tests whether the TRACE method is enabled or not
1:      * @throws Exception
1:      */
0:     @Test
1:     public void testHttpTraceEnabled() throws Exception {
0:         HttpClient httpClient = new HttpClient();
0:         httpClient.start();
1: 
0:         final CountDownLatch latch = new CountDownLatch(1);
0:         Request request = httpClient.newRequest("http://127.0.0.1:61623").method(HttpMethod.TRACE);
0:         final AtomicInteger status = new AtomicInteger();
0:         request.send(new BufferingResponseListener() {
1:             @Override
0:             public void onComplete(Result result) {
0:                 status.set(result.getResponse().getStatus());
0:                 latch.countDown();
1:             }
0:         });
0:         latch.await();
0:         assertEquals(expectedStatus, status.get());
1:     }
1: 
1:     @Override
0:     @Ignore
0:     @Test
0:     public void testBrokerStart() throws Exception {
1:     }
1: }
============================================================================