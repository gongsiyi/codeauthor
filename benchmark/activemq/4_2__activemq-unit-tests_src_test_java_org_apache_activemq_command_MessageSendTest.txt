1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
2:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:f451ad0: 
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: public class MessageSendTest extends DataStructureTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MessageSendTest.class);
1:d29ca2a: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(MessageSendTest.class);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void initCombosForTestMessageSendMarshaling() {
1:ecf89a6:         addCombinationValues("cacheEnabled", new Object[] {Boolean.TRUE, Boolean.FALSE});
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testMessageSendMarshaling() throws IOException {
1:d29ca2a:         ActiveMQMessage message = new ActiveMQMessage();
1:ecf89a6:         message.setCommandId((short)1);
1:d29ca2a:         message.setDestination(new ActiveMQQueue("queue"));
1:d29ca2a:         message.setGroupID("group");
1:d29ca2a:         message.setGroupSequence(4);
1:d29ca2a:         message.setCorrelationId("correlation");
1:d29ca2a:         message.setMessageId(new MessageId("c1:1:1", 1));
1:d29ca2a: 
1:d29ca2a:         assertBeanMarshalls(message);
1:d29ca2a:         assertBeanMarshalls(message);
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void xtestPerformance() throws IOException {
1:d29ca2a:         ActiveMQMessage message = new ActiveMQMessage();
1:d29ca2a:         message.setProducerId(new ProducerId(new SessionId(new ConnectionId(new ConnectionId("test")), 1), 1));
1:d29ca2a:         message.setMessageId(new MessageId(message.getProducerId(), 1));
1:ecf89a6:         message.setCommandId((short)1);
1:d29ca2a:         message.setGroupID("group");
1:d29ca2a:         message.setGroupSequence(4);
1:d29ca2a:         message.setCorrelationId("correlation");
1:d29ca2a:         message.setContent(new ByteSequence(new byte[1024], 0, 1024));
1:d29ca2a:         message.setTimestamp(System.currentTimeMillis());
1:d29ca2a:         message.setDestination(new ActiveMQQueue("TEST"));
1:d29ca2a: 
1:d29ca2a:         int p = 1000000;
1:d29ca2a: 
1:d29ca2a:         long start = System.currentTimeMillis();
1:d29ca2a:         for (int i = 0; i < p; i++) {
1:d29ca2a:             marshalAndUnmarshall(message, wireFormat);
1:d29ca2a:         }
1:d29ca2a:         long end = System.currentTimeMillis();
1:d29ca2a: 
1:fc00993:         LOG.info("marshaled/unmarshaled: " + p + " msgs at " + (p * 1000f / (end - start)) + " msgs/sec");
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("cacheEnabled", new Object[] {Boolean.TRUE, Boolean.FALSE});
1:         message.setCommandId((short)1);
/////////////////////////////////////////////////////////////////////////
1:         message.setCommandId((short)1);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(MessageSendTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("marshaled/unmarshaled: " + p + " msgs at " + (p * 1000f / (end - start)) + " msgs/sec");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteSequence;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("marshaled/unmarshaled: " + p + " msgs at " + (p * 1000f / (end - start)) + " msgs/sec");
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.packet.ByteSequence;
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import org.activeio.ByteSequence;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ConnectionId;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.command.SessionId;
1: 
1: import java.io.IOException;
1: 
1: import junit.framework.Test;
1: 
1: public class MessageSendTest extends DataStructureTestSupport {
1: 
1:     public static Test suite() {
1:         return suite(MessageSendTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     public void initCombosForTestMessageSendMarshaling() {
0:         addCombinationValues("cacheEnabled", new Object[] { Boolean.TRUE, Boolean.FALSE });
1:     }
1: 
1:     public void testMessageSendMarshaling() throws IOException {
1:         ActiveMQMessage message = new ActiveMQMessage();
0:         message.setCommandId((short) 1);
1:         message.setDestination(new ActiveMQQueue("queue"));
1:         message.setGroupID("group");
1:         message.setGroupSequence(4);
1:         message.setCorrelationId("correlation");
1:         message.setMessageId(new MessageId("c1:1:1", 1));
1: 
1:         assertBeanMarshalls(message);
1:         assertBeanMarshalls(message);
1: 
1:     }
1: 
1:     public void xtestPerformance() throws IOException {
1:         ActiveMQMessage message = new ActiveMQMessage();
1:         message.setProducerId(new ProducerId(new SessionId(new ConnectionId(new ConnectionId("test")), 1), 1));
1:         message.setMessageId(new MessageId(message.getProducerId(), 1));
0:         message.setCommandId((short) 1);
1:         message.setGroupID("group");
1:         message.setGroupSequence(4);
1:         message.setCorrelationId("correlation");
1:         message.setContent(new ByteSequence(new byte[1024], 0, 1024));
1:         message.setTimestamp(System.currentTimeMillis());
1:         message.setDestination(new ActiveMQQueue("TEST"));
1: 
1:         int p = 1000000;
1: 
1:         long start = System.currentTimeMillis();
1:         for (int i = 0; i < p; i++) {
1:             marshalAndUnmarshall(message, wireFormat);
1:         }
1:         long end = System.currentTimeMillis();
1: 
0:         System.out.println("marshaled/unmarshaled: " + p + " msgs at " + (p * 1000f / (end - start)) + " msgs/sec");
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(MessageSendTest.class);
============================================================================