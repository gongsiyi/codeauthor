1:0cc5fd3: /**
1:0cc5fd3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0cc5fd3:  * contributor license agreements.  See the NOTICE file distributed with
1:0cc5fd3:  * this work for additional information regarding copyright ownership.
1:0cc5fd3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0cc5fd3:  * (the "License"); you may not use this file except in compliance with
1:0cc5fd3:  * the License.  You may obtain a copy of the License at
1:0cc5fd3:  *
1:0cc5fd3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0cc5fd3:  *
1:0cc5fd3:  * Unless required by applicable law or agreed to in writing, software
1:0cc5fd3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0cc5fd3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0cc5fd3:  * See the License for the specific language governing permissions and
1:0cc5fd3:  * limitations under the License.
1:0cc5fd3:  */
1:0cc5fd3: 
1:0cc5fd3: package org.apache.activemq.store.jdbc;
1:0cc5fd3: 
1:0cc5fd3: import java.io.IOException;
1:0cc5fd3: 
1:0cc5fd3: import org.apache.activemq.broker.ConnectionContext;
1:0cc5fd3: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:0cc5fd3: 
1:0cc5fd3: class BrokenPersistenceAdapter extends JDBCPersistenceAdapter {
1:0cc5fd3: 
1:8bf987b:     private final Logger LOG = LoggerFactory.getLogger(BrokenPersistenceAdapter.class);
1:0cc5fd3: 
1:0cc5fd3:     private boolean shouldBreak = false;
1:0cc5fd3: 
1:0cc5fd3:     @Override
1:0cc5fd3:     public void commitTransaction(ConnectionContext context) throws IOException {
1:0cc5fd3:         if ( shouldBreak ) {
1:0cc5fd3:             LOG.warn("Throwing exception on purpose");
1:0cc5fd3:             throw new IOException("Breaking on purpose");
1:0cc5fd3:         }
1:0cc5fd3:         LOG.debug("in commitTransaction");
1:0cc5fd3:         super.commitTransaction(context);
1:0cc5fd3:     }
1:0cc5fd3: 
1:0cc5fd3:     public void setShouldBreak(boolean shouldBreak) {
1:0cc5fd3:         this.shouldBreak = shouldBreak;
1:0cc5fd3:     }
1:0cc5fd3: }
1:0cc5fd3: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private final Logger LOG = LoggerFactory.getLogger(BrokenPersistenceAdapter.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:0cc5fd3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store.jdbc;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: class BrokenPersistenceAdapter extends JDBCPersistenceAdapter {
1: 
0:     private final Log LOG = LogFactory.getLog(BrokenPersistenceAdapter.class);
1: 
1:     private boolean shouldBreak = false;
1: 
1:     @Override
1:     public void commitTransaction(ConnectionContext context) throws IOException {
1:         if ( shouldBreak ) {
1:             LOG.warn("Throwing exception on purpose");
1:             throw new IOException("Breaking on purpose");
1:         }
1:         LOG.debug("in commitTransaction");
1:         super.commitTransaction(context);
1:     }
1: 
1:     public void setShouldBreak(boolean shouldBreak) {
1:         this.shouldBreak = shouldBreak;
1:     }
1: }
1: 
============================================================================