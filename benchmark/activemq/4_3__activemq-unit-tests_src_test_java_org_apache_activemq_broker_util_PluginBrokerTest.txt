1:a49ba6c: /**
1:a49ba6c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a49ba6c:  * contributor license agreements.  See the NOTICE file distributed with
1:a49ba6c:  * this work for additional information regarding copyright ownership.
1:a49ba6c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a49ba6c:  * (the "License"); you may not use this file except in compliance with
1:a49ba6c:  * the License.  You may obtain a copy of the License at
1:a49ba6c:  *
1:a49ba6c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a49ba6c:  *
1:a49ba6c:  * Unless required by applicable law or agreed to in writing, software
1:a49ba6c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a49ba6c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a49ba6c:  * See the License for the specific language governing permissions and
1:a49ba6c:  * limitations under the License.
1:a49ba6c:  */
1:a49ba6c: package org.apache.activemq.broker.util;
1:a49ba6c: 
1:a49ba6c: import java.net.URI;
1:a49ba6c: 
1:a49ba6c: import javax.jms.JMSException;
1:a49ba6c: import javax.jms.Message;
1:a49ba6c: 
1:a49ba6c: import org.apache.activemq.broker.BrokerFactory;
1:a49ba6c: import org.apache.activemq.broker.BrokerService;
1:a49ba6c: import org.apache.activemq.command.ActiveMQMessage;
1:a49ba6c: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a49ba6c: 
1:a49ba6c: /**
1:0bbc0ac:  * 
1:a49ba6c:  * 
1:a49ba6c:  */
1:a49ba6c: public class PluginBrokerTest extends JmsTopicSendReceiveTest {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(PluginBrokerTest.class);
1:a49ba6c:     private BrokerService broker;
1:a49ba6c: 
1:a49ba6c:     protected void setUp() throws Exception {
1:a49ba6c:         broker = createBroker();
1:a49ba6c:         super.setUp();
1:a49ba6c:     }
1:a49ba6c: 
1:a49ba6c:     protected void tearDown() throws Exception {
1:a49ba6c:         super.tearDown();
1:a49ba6c:         if (broker != null) {
1:a49ba6c:             broker.stop();
1:a49ba6c:         }   
1:a49ba6c:     }
1:a49ba6c: 
1:a49ba6c:     protected BrokerService createBroker() throws Exception {
1:a49ba6c:         return createBroker("org/apache/activemq/util/plugin-broker.xml");
1:a49ba6c:     }
1:a49ba6c: 
1:a49ba6c:     protected BrokerService createBroker(String uri) throws Exception {
1:a49ba6c:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:a49ba6c:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:a49ba6c:     }
1:a49ba6c: 
1:a49ba6c: 	protected void assertMessageValid(int index, Message message)
1:a49ba6c: 			throws JMSException {
1:a49ba6c: 		// check if broker path has been set 
1:a49ba6c: 		assertEquals("localhost", message.getStringProperty("BrokerPath"));
1:a49ba6c: 		ActiveMQMessage amqMsg = (ActiveMQMessage)message;
1:a49ba6c: 		if (index == 7) {
1:a49ba6c: 			// check custom expiration
1:9124460: 			assertTrue("expiration is in range, depends on two distinct calls to System.currentTimeMillis", 1500 < amqMsg.getExpiration() - amqMsg.getTimestamp());
1:a49ba6c: 		} else if (index == 9) {
1:a49ba6c: 			// check ceiling
1:9124460: 			assertTrue("expiration ceeling is in range, depends on two distinct calls to System.currentTimeMillis", 59500 < amqMsg.getExpiration() - amqMsg.getTimestamp());
1:a49ba6c: 		} else {
1:a49ba6c: 			// check default expiration
1:a49ba6c: 			assertEquals(1000, amqMsg.getExpiration() - amqMsg.getTimestamp());
1:a49ba6c: 		}
1:a49ba6c: 		super.assertMessageValid(index, message);
1:a49ba6c: 	}
1:a49ba6c: 	
1:a49ba6c:     protected void sendMessage(int index, Message message) throws Exception {
1:a49ba6c:     	if (index == 7) {
1:a49ba6c:     		producer.send(producerDestination, message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, 2000);
1:a49ba6c:     	} else if (index == 9) {
1:a49ba6c:     		producer.send(producerDestination, message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, 200000);
1:a49ba6c:     	} else {
1:a49ba6c:     		super.sendMessage(index, message);
1:a49ba6c:     	}
1:a49ba6c:     }
1:a49ba6c:     
1:a49ba6c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(PluginBrokerTest.class);
commit:a49ba6c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.test.JmsTopicSendReceiveTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * 
0:  * @version $Revision: 564271 $
1:  */
1: public class PluginBrokerTest extends JmsTopicSendReceiveTest {
0:     private static final Log LOG = LogFactory.getLog(PluginBrokerTest.class);
1:     private BrokerService broker;
1: 
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (broker != null) {
1:             broker.stop();
1:         }   
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker("org/apache/activemq/util/plugin-broker.xml");
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:     }
1: 
1: 	protected void assertMessageValid(int index, Message message)
1: 			throws JMSException {
1: 		// check if broker path has been set 
1: 		assertEquals("localhost", message.getStringProperty("BrokerPath"));
1: 		ActiveMQMessage amqMsg = (ActiveMQMessage)message;
1: 		if (index == 7) {
1: 			// check custom expiration
0: 			assertEquals(2000, amqMsg.getExpiration() - amqMsg.getTimestamp());
1: 		} else if (index == 9) {
1: 			// check ceiling
0: 			assertEquals(60000, amqMsg.getExpiration() - amqMsg.getTimestamp());
1: 		} else {
1: 			// check default expiration
1: 			assertEquals(1000, amqMsg.getExpiration() - amqMsg.getTimestamp());
1: 		}
1: 		super.assertMessageValid(index, message);
1: 	}
1: 	
1:     protected void sendMessage(int index, Message message) throws Exception {
1:     	if (index == 7) {
1:     		producer.send(producerDestination, message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, 2000);
1:     	} else if (index == 9) {
1:     		producer.send(producerDestination, message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, 200000);
1:     	} else {
1:     		super.sendMessage(index, message);
1:     	}
1:     }
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:9124460
/////////////////////////////////////////////////////////////////////////
1: 			assertTrue("expiration is in range, depends on two distinct calls to System.currentTimeMillis", 1500 < amqMsg.getExpiration() - amqMsg.getTimestamp());
1: 			assertTrue("expiration ceeling is in range, depends on two distinct calls to System.currentTimeMillis", 59500 < amqMsg.getExpiration() - amqMsg.getTimestamp());
============================================================================