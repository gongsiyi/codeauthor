1:17851fa: /**
1:17851fa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:17851fa:  * contributor license agreements.  See the NOTICE file distributed with
1:17851fa:  * this work for additional information regarding copyright ownership.
1:17851fa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:17851fa:  * (the "License"); you may not use this file except in compliance with
1:17851fa:  * the License.  You may obtain a copy of the License at
1:17851fa:  *
1:17851fa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:17851fa:  *
1:17851fa:  * Unless required by applicable law or agreed to in writing, software
1:17851fa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:17851fa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:17851fa:  * See the License for the specific language governing permissions and
1:17851fa:  * limitations under the License.
1:17851fa:  */
1:17851fa: package org.apache.activemq.broker.advisory;
4:17851fa: 
1:0683d8b: import javax.jms.Connection;
1:0683d8b: import javax.jms.Destination;
1:0683d8b: import javax.jms.JMSException;
1:0683d8b: import javax.jms.MessageConsumer;
1:0683d8b: import javax.jms.Session;
1:0683d8b: import javax.management.MalformedObjectNameException;
1:0683d8b: import javax.management.ObjectName;
1:0683d8b: 
1:17851fa: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:17851fa: import org.apache.activemq.broker.BrokerService;
1:17851fa: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:17851fa: import org.apache.activemq.broker.jmx.ManagementContext;
1:17851fa: import org.apache.activemq.command.ActiveMQMessage;
1:17851fa: import org.apache.activemq.command.DestinationInfo;
1:17851fa: 
1:17851fa: public class AdvisoryJmxTest extends EmbeddedBrokerTestSupport {
1:17851fa: 
1:0683d8b:     @Override
1:0683d8b:     protected BrokerService createBroker() throws Exception {
1:17851fa:         BrokerService answer = new BrokerService();
1:17851fa:         answer.setPersistent(isPersistent());
1:17851fa:         answer.addConnector(bindAddress);
1:17851fa:         ManagementContext context = new ManagementContext();
1:17851fa:         context.setConnectorPort(1199);
1:17851fa:         answer.setManagementContext(context);
1:17851fa:         return answer;
1:17851fa:     }
1:17851fa: 
1:0683d8b:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:0683d8b:         ObjectName brokerViewMBean = new ObjectName(
1:0683d8b:             "org.apache.activemq:type=Broker,brokerName=localhost");
1:0683d8b:         BrokerViewMBean proxy = (BrokerViewMBean) broker.getManagementContext()
1:0683d8b:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:0683d8b:         return proxy;
1:0683d8b:     }
1:0683d8b: 
1:17851fa:     public void testCreateDeleteDestinations() throws Exception {
1:0683d8b:         BrokerViewMBean brokerMbean = getProxyToBroker();
1:17851fa:         Connection conn = createConnection();
1:17851fa:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:17851fa:         MessageConsumer consumer = sess.createConsumer(sess.createTopic("ActiveMQ.Advisory.Queue"));
1:17851fa:         conn.start();
1:17851fa:         Destination dest = sess.createQueue("test");
1:17851fa: 
1:17851fa:         brokerMbean.addQueue("test");
1:17851fa: 
1:0683d8b:         ActiveMQMessage msg = (ActiveMQMessage) consumer.receive(1000);
1:17851fa:         assertNotNull(msg);
1:17851fa:         assertTrue(msg.getDataStructure() instanceof DestinationInfo);
1:0683d8b:         assertEquals(((DestinationInfo) msg.getDataStructure()).getDestination(), dest);
1:0683d8b:         assertEquals(((DestinationInfo) msg.getDataStructure()).getOperationType(), 0);
1:17851fa: 
1:17851fa:         brokerMbean.removeQueue("test");
1:17851fa: 
1:0683d8b:         msg = (ActiveMQMessage) consumer.receive(1000);
1:17851fa:         assertNotNull(msg);
1:17851fa:         assertTrue(msg.getDataStructure() instanceof DestinationInfo);
1:0683d8b:         assertEquals(((DestinationInfo) msg.getDataStructure()).getDestination(), dest);
1:0683d8b:         assertEquals(((DestinationInfo) msg.getDataStructure()).getOperationType(), 1);
1:17851fa: 
1:17851fa:         brokerMbean.addQueue("test");
1:0683d8b:         msg = (ActiveMQMessage) consumer.receive(1000);
1:17851fa:         assertNotNull(msg);
1:17851fa:         assertTrue(msg.getDataStructure() instanceof DestinationInfo);
1:0683d8b:         assertEquals(((DestinationInfo) msg.getDataStructure()).getDestination(), dest);
1:0683d8b:         assertEquals(((DestinationInfo) msg.getDataStructure()).getOperationType(), 0);
1:0683d8b:         assertEquals(((DestinationInfo) msg.getDataStructure()).getOperationType(), 0);
1:17851fa:     }
1:17851fa: 
1:17851fa: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:0683d8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:         ObjectName brokerViewMBean = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=localhost");
1:         BrokerViewMBean proxy = (BrokerViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:         BrokerViewMBean brokerMbean = getProxyToBroker();
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQMessage msg = (ActiveMQMessage) consumer.receive(1000);
1:         assertEquals(((DestinationInfo) msg.getDataStructure()).getDestination(), dest);
1:         assertEquals(((DestinationInfo) msg.getDataStructure()).getOperationType(), 0);
1:         msg = (ActiveMQMessage) consumer.receive(1000);
1:         assertEquals(((DestinationInfo) msg.getDataStructure()).getDestination(), dest);
1:         assertEquals(((DestinationInfo) msg.getDataStructure()).getOperationType(), 1);
1:         msg = (ActiveMQMessage) consumer.receive(1000);
1:         assertEquals(((DestinationInfo) msg.getDataStructure()).getDestination(), dest);
1:         assertEquals(((DestinationInfo) msg.getDataStructure()).getOperationType(), 0);
1:         assertEquals(((DestinationInfo) msg.getDataStructure()).getOperationType(), 0);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
0:         ObjectName name = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:17851fa
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.advisory;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.ManagementContext;
0: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.DestinationInfo;
1: 
0: import javax.jms.*;
0: import javax.management.MBeanServerConnection;
0: import javax.management.MBeanServerInvocationHandler;
0: import javax.management.ObjectName;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXServiceURL;
1: 
1: public class AdvisoryJmxTest extends EmbeddedBrokerTestSupport {
1: 
0:         protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(isPersistent());
1:         answer.addConnector(bindAddress);
1:         ManagementContext context = new ManagementContext();
1:         context.setConnectorPort(1199);
1:         answer.setManagementContext(context);
1:         return answer;
1:     }
1: 
1:     public void testCreateDeleteDestinations() throws Exception {
0:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1199/jmxrmi");
0:         JMXConnector connector = JMXConnectorFactory.connect(url, null);
0:         connector.connect();
0:         MBeanServerConnection connection = connector.getMBeanServerConnection();
0:         ObjectName name = new ObjectName("org.apache.activemq:Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean brokerMbean = (BrokerViewMBean) MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
1:         Connection conn = createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = sess.createConsumer(sess.createTopic("ActiveMQ.Advisory.Queue"));
1:         conn.start();
1:         Destination dest = sess.createQueue("test");
1: 
1:         brokerMbean.addQueue("test");
1: 
0:         ActiveMQMessage msg = (ActiveMQMessage)consumer.receive(1000);
1:         assertNotNull(msg);
1:         assertTrue(msg.getDataStructure() instanceof DestinationInfo);
0:         assertEquals(((DestinationInfo)msg.getDataStructure()).getDestination(), dest);
0:         assertEquals(((DestinationInfo)msg.getDataStructure()).getOperationType(), 0);
1: 
1:         brokerMbean.removeQueue("test");
1: 
0:         msg = (ActiveMQMessage)consumer.receive(1000);
1:         assertNotNull(msg);
1:         assertTrue(msg.getDataStructure() instanceof DestinationInfo);
0:         assertEquals(((DestinationInfo)msg.getDataStructure()).getDestination(), dest);
0:         assertEquals(((DestinationInfo)msg.getDataStructure()).getOperationType(), 1);
1: 
1: 
1:         brokerMbean.addQueue("test");
0:         msg = (ActiveMQMessage)consumer.receive(1000);
1:         assertNotNull(msg);
1:         assertTrue(msg.getDataStructure() instanceof DestinationInfo);
0:         assertEquals(((DestinationInfo)msg.getDataStructure()).getDestination(), dest);
0:         assertEquals(((DestinationInfo)msg.getDataStructure()).getOperationType(), 0);
0:         assertEquals(((DestinationInfo)msg.getDataStructure()).getOperationType(), 0);
1:     }
1: 
1: 
1: }
============================================================================