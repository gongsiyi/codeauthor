1:ff457e2: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:ff457e2:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ff457e2:  *
1:ff457e2:  * Unless required by applicable law or agreed to in writing, software
1:ff457e2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ff457e2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff457e2:  * See the License for the specific language governing permissions and
1:ff457e2:  * limitations under the License.
1:ff457e2:  */
1:ff457e2: package org.apache.activemq.broker;
8:ff457e2: 
1:ff457e2: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.JmsMultipleClientsTestSupport;
1:ff457e2: import org.apache.activemq.command.ActiveMQDestination;
1:bec711c: import org.junit.After;
1:bec711c: import org.junit.Before;
1:bec711c: import org.junit.Test;
1:bec711c: import org.junit.runner.RunWith;
1:bec711c: import org.junit.runners.BlockJUnit4ClassRunner;
1:ff457e2: 
1:bec711c: @RunWith(BlockJUnit4ClassRunner.class)
1:ff457e2: public class QueueSubscriptionTest extends JmsMultipleClientsTestSupport {
1:230a86c:     protected int messageCount = 1000; // 1000 Messages per producer
1:ff457e2:     protected int prefetchCount = 10;
1:ff457e2: 
1:bec711c:     @Before
1:bec711c:     @Override
1:bec711c:     public void setUp() throws Exception {
1:ff457e2:         super.setUp();
1:ff457e2:         durable = false;
1:ff457e2:         topic = false;
2:ff457e2:     }
1:ff457e2: 
1:bec711c:     @After
1:bec711c:     @Override
1:bec711c:     public void tearDown() throws Exception {
1:bec711c:         super.tearDown();
1:bec711c:     }
1:bec711c: 
1:bec711c: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:4759253:     public void testManyProducersOneConsumer() throws Exception {
1:4759253:         consumerCount = 1;
1:4759253:         producerCount = 10;
1:230a86c:         messageCount = 100;
1:230a86c:         messageSize = 1; // 1 byte
1:4759253:         prefetchCount = 10;
1:4759253: 
1:4759253:         doMultipleClientsTest();
1:4759253: 
1:4759253:         assertTotalMessagesReceived(messageCount * producerCount);
1:ad1f751:         assertDestinationMemoryUsageGoesToZero();
1:4759253:     }
1:4759253: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception {
1:ff457e2:         consumerCount = 2;
1:ff457e2:         producerCount = 1;
1:230a86c:         messageCount = 1000;
1:230a86c:         messageSize = 1024; // 1 Kb
1:544ffe9:         configurePrefetchOfOne();
1:ff457e2: 
2:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
2:ff457e2:         assertTotalMessagesReceived(messageCount * producerCount);
1:ad1f751:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:ff457e2:         consumerCount = 2;
1:ff457e2:         producerCount = 1;
1:230a86c:         messageCount = 1000;
1:ff457e2:         prefetchCount = messageCount * 2;
1:230a86c:         messageSize = 1024; // 1 Kb
1:ff457e2: 
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * producerCount);
1:ad1f751:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:fa6aaf9:     @Test(timeout = 2 * 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
1:ff457e2:         consumerCount = 2;
1:ff457e2:         producerCount = 1;
1:230a86c:         messageCount = 10;
1:230a86c:         messageSize = 1024 * 1024 * 1; // 2 MB
1:544ffe9:         configurePrefetchOfOne();
1:ff457e2: 
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * producerCount);
1:ad1f751:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:ff457e2:         consumerCount = 2;
1:ff457e2:         producerCount = 1;
1:230a86c:         messageCount = 10;
1:ff457e2:         prefetchCount = messageCount * 2;
1:230a86c:         messageSize = 1024 * 1024 * 1; // 2 MB
1:ff457e2: 
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * producerCount);
1:ad1f751:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerManyConsumersFewMessages() throws Exception {
2:ff457e2:         consumerCount = 50;
1:ff457e2:         producerCount = 1;
1:230a86c:         messageCount = 10;
1:230a86c:         messageSize = 1; // 1 byte
4:ff457e2:         prefetchCount = 10;
1:ff457e2: 
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * producerCount);
1:ad1f751:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerManyConsumersManyMessages() throws Exception {
1:ff457e2:         consumerCount = 50;
1:ff457e2:         producerCount = 1;
1:230a86c:         messageCount = 1000;
1:230a86c:         messageSize = 1; // 1 byte
1:230a86c:         prefetchCount = messageCount / consumerCount;
1:4188ed0:         allMessagesList.setMaximumDuration(allMessagesList.getMaximumDuration() * 20);
1:ff457e2:         doMultipleClientsTest();
1:a08a4a8: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * producerCount);
1:ad1f751:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:fa6aaf9:     @Test(timeout = 2 * 60 * 1000)
1:ff457e2:     public void testManyProducersManyConsumers() throws Exception {
1:c02d246:         consumerCount = 200;
2:ff457e2:         producerCount = 50;
1:230a86c:         messageCount = 100;
1:230a86c:         messageSize = 1; // 1 byte
1:d9987ff:         prefetchCount = 100;
1:4188ed0:         allMessagesList.setMaximumDuration(allMessagesList.getMaximumDuration() * 20);
1:ff457e2:         doMultipleClientsTest();
1:ff457e2: 
1:ff457e2:         assertTotalMessagesReceived(messageCount * producerCount);
1:ad1f751:         assertDestinationMemoryUsageGoesToZero();
1:ff457e2:     }
1:ff457e2: 
1:544ffe9:     protected void configurePrefetchOfOne() {
1:544ffe9:         prefetchCount = 1;
1:544ffe9: 
1:230a86c:         // this is gonna be a bit slow what with the low prefetch so bump up the
1:230a86c:         // wait time
1:544ffe9:         allMessagesList.setMaximumDuration(allMessagesList.getMaximumDuration() * 20);
1:544ffe9:     }
1:544ffe9: 
1:ff457e2:     public void doMultipleClientsTest() throws Exception {
1:ff457e2:         // Create destination
1:ff457e2:         final ActiveMQDestination dest = createDestination();
1:ff457e2: 
1:ff457e2:         // Create consumers
1:ff457e2:         ActiveMQConnectionFactory consumerFactory = (ActiveMQConnectionFactory)createConnectionFactory();
1:ff457e2:         consumerFactory.getPrefetchPolicy().setAll(prefetchCount);
1:ff457e2: 
1:ff457e2:         startConsumers(consumerFactory, dest);
1:ff457e2: 
1:ff457e2:         startProducers(dest, messageCount);
1:ff457e2: 
1:230a86c:         // Wait for messages to be received. Make it proportional to the
1:230a86c:         // messages delivered.
1:14f96a9:         int totalMessageCount = messageCount * producerCount;
1:fc00993:         if (dest.isTopic()) {
1:230a86c:             totalMessageCount *= consumerCount;
1:fc00993:         }
1:14f96a9:         waitForAllMessagesToBeReceived(totalMessageCount);
1:ff457e2:     }
1:ff457e2: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ad1f751
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
/////////////////////////////////////////////////////////////////////////
1:         assertDestinationMemoryUsageGoesToZero();
author:Kevin Earls
-------------------------------------------------------------------------------
commit:fa6aaf9
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 2 * 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 2 * 60 * 1000)
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: @RunWith(BlockJUnit4ClassRunner.class)
1:     @Before
1:     @Override
1:     public void setUp() throws Exception {
1:     @After
1:     @Override
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1: 
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 60 * 1000)
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:c02d246
/////////////////////////////////////////////////////////////////////////
1:         consumerCount = 200;
commit:4188ed0
/////////////////////////////////////////////////////////////////////////
1:         allMessagesList.setMaximumDuration(allMessagesList.getMaximumDuration() * 20);
/////////////////////////////////////////////////////////////////////////
1:         allMessagesList.setMaximumDuration(allMessagesList.getMaximumDuration() * 20);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         if (dest.isTopic()) {
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.JmsMultipleClientsTestSupport;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     protected int messageCount = 1000; // 1000 Messages per producer
/////////////////////////////////////////////////////////////////////////
1:         messageCount = 100;
1:         messageSize = 1; // 1 byte
/////////////////////////////////////////////////////////////////////////
1:         messageCount = 1000;
1:         messageSize = 1024; // 1 Kb
/////////////////////////////////////////////////////////////////////////
1:         messageCount = 1000;
1:         messageSize = 1024; // 1 Kb
/////////////////////////////////////////////////////////////////////////
1:         messageCount = 10;
1:         messageSize = 1024 * 1024 * 1; // 2 MB
/////////////////////////////////////////////////////////////////////////
1:         messageCount = 10;
1:         messageSize = 1024 * 1024 * 1; // 2 MB
/////////////////////////////////////////////////////////////////////////
1:         messageCount = 10;
1:         messageSize = 1; // 1 byte
/////////////////////////////////////////////////////////////////////////
1:         messageCount = 1000;
1:         messageSize = 1; // 1 byte
1:         prefetchCount = messageCount / consumerCount;
/////////////////////////////////////////////////////////////////////////
1:         messageCount = 100;
1:         messageSize = 1; // 1 byte
/////////////////////////////////////////////////////////////////////////
1:         // this is gonna be a bit slow what with the low prefetch so bump up the
1:         // wait time
/////////////////////////////////////////////////////////////////////////
1:         // Wait for messages to be received. Make it proportional to the
1:         // messages delivered.
0:         if (dest.isTopic())
1:             totalMessageCount *= consumerCount;
commit:f90c62c
/////////////////////////////////////////////////////////////////////////
0:         prefetchCount = messageCount/consumerCount;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:d9987ff
/////////////////////////////////////////////////////////////////////////
1:         prefetchCount = 100;
commit:14f96a9
/////////////////////////////////////////////////////////////////////////
1:         int totalMessageCount = messageCount * producerCount;
0:         if( dest.isTopic() )
0:             totalMessageCount *= consumerCount;       
1:         waitForAllMessagesToBeReceived(totalMessageCount);
commit:7703aee
/////////////////////////////////////////////////////////////////////////
commit:4759253
/////////////////////////////////////////////////////////////////////////
1:     public void testManyProducersOneConsumer() throws Exception {
1:         consumerCount = 1;
1:         producerCount = 10;
0:         messageCount  = 100;
0:         messageSize   = 1; // 1 byte
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: //        Thread.sleep(1000);
author:James Strachan
-------------------------------------------------------------------------------
commit:544ffe9
/////////////////////////////////////////////////////////////////////////
1:         configurePrefetchOfOne();
/////////////////////////////////////////////////////////////////////////
1:         configurePrefetchOfOne();
/////////////////////////////////////////////////////////////////////////
1:     protected void configurePrefetchOfOne() {
1:         prefetchCount = 1;
1: 
0:         // this is gonna be a bit slow what with the low prefetch so bump up the wait time
1:         allMessagesList.setMaximumDuration(allMessagesList.getMaximumDuration() * 20);
1:     }
1: 
commit:a08a4a8
/////////////////////////////////////////////////////////////////////////
0:         // this is gonna be a bit slow what with the low prefetch so bump up the wait time
0:         allMessagesList.setMaximumDuration(allMessagesList.getMaximumDuration() * 20);
1:         
commit:f1dc477
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(1000);
0:         waitForAllMessagesToBeReceived(messageCount * producerCount);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:ff457e2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
0: import org.apache.activemq.JmsMultipleClientsTestSupport;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: public class QueueSubscriptionTest extends JmsMultipleClientsTestSupport {
0:     protected int messageCount  = 1000; // 1000 Messages per producer
1:     protected int prefetchCount = 10;
1: 
0:     protected void setUp() throws Exception {
1:         super.setUp();
1:         durable = false;
1:         topic = false;
1:     }
1: 
1:     public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception {
1:         consumerCount = 2;
1:         producerCount = 1;
0:         messageCount  = 1000;
0:         prefetchCount = 1;
0:         messageSize   = 1024; // 1 Kb
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount);
1:     }
1: 
1:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:         consumerCount = 2;
1:         producerCount = 1;
0:         messageCount  = 1000;
1:         prefetchCount = messageCount * 2;
0:         messageSize   = 1024; // 1 Kb
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount);
1:     }
1: 
1:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
1:         consumerCount = 2;
1:         producerCount = 1;
0:         messageCount  = 10;
0:         prefetchCount = 1;
0:         messageSize   = 1024 * 1024 * 1; // 2 MB
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount);
1:     }
1: 
1:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:         consumerCount = 2;
1:         producerCount = 1;
0:         messageCount  = 10;
1:         prefetchCount = messageCount * 2;
0:         messageSize   = 1024 * 1024 * 1; // 2 MB
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount);
1:     }
1: 
1:     public void testOneProducerManyConsumersFewMessages() throws Exception {
1:         consumerCount = 50;
1:         producerCount = 1;
0:         messageCount  = 10;
0:         messageSize   = 1; // 1 byte
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount);
1:     }
1: 
1:     public void testOneProducerManyConsumersManyMessages() throws Exception {
1:         consumerCount = 50;
1:         producerCount = 1;
0:         messageCount  = 1000;
0:         messageSize   = 1; // 1 byte
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount);
1:     }
1: 
0:     public void testManyProducersOneConsumer() throws Exception {
0:         consumerCount = 1;
1:         producerCount = 50;
0:         messageCount  = 100;
0:         messageSize   = 1; // 1 byte
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount);
1:     }
1: 
1:     public void testManyProducersManyConsumers() throws Exception {
1:         consumerCount = 50;
1:         producerCount = 50;
0:         messageCount  = 100;
0:         messageSize   = 1; // 1 byte
1:         prefetchCount = 10;
1: 
1:         doMultipleClientsTest();
1: 
1:         assertTotalMessagesReceived(messageCount * producerCount);
1:     }
1: 
1:     public void doMultipleClientsTest() throws Exception {
1:         // Create destination
1:         final ActiveMQDestination dest = createDestination();
1: 
1:         // Create consumers
1:         ActiveMQConnectionFactory consumerFactory = (ActiveMQConnectionFactory)createConnectionFactory();
1:         consumerFactory.getPrefetchPolicy().setAll(prefetchCount);
1: 
1:         startConsumers(consumerFactory, dest);
1: 
0:         // Wait for consumers to setup
0:         Thread.sleep(500);
1: 
1:         startProducers(dest, messageCount);
1: 
0:         // Wait for messages to be received. Make it proportional to the messages delivered.
0:         waitForAllMessagesToBeReceived((producerCount * messageCount) / 2000);
1:     }
1: }
============================================================================