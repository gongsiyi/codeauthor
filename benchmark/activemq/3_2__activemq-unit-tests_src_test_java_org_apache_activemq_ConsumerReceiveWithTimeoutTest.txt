3:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f812e34:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
3:a107823:  */
1:a107823: package org.apache.activemq;
7:a107823: 
1:b84413a: import static org.junit.Assert.assertNotNull;
1:b84413a: import static org.junit.Assert.assertNull;
1:b84413a: 
1:a107823: import javax.jms.JMSException;
1:a107823: import javax.jms.Message;
1:a107823: import javax.jms.MessageConsumer;
1:a107823: import javax.jms.MessageProducer;
1:a107823: import javax.jms.Queue;
1:a107823: import javax.jms.Session;
1:b84413a: import javax.jms.TextMessage;
1:a107823: 
1:b84413a: import org.apache.activemq.broker.BrokerService;
1:b84413a: import org.junit.After;
1:b84413a: import org.junit.Before;
1:b84413a: import org.junit.Test;
1:a107823: 
1:b84413a: public class ConsumerReceiveWithTimeoutTest {
1:a107823: 
1:b84413a:     private ActiveMQConnection connection;
1:b84413a:     private BrokerService broker;
1:b84413a:     private String connectionUri;
1:b84413a: 
1:b84413a:     @Before
1:b84413a:     public void setUp() throws Exception {
1:b84413a:         createBroker();
1:b84413a: 
1:a107823:         connection = createConnection();
1:86cbdfd:     }
1:a107823: 
1:b84413a:     @After
1:b84413a:     public void tearDown() throws Exception {
1:a107823:         if (connection != null) {
1:b84413a:             try {
1:b84413a:                 connection.close();
1:b84413a:             } catch (Exception e) {}
2:a107823:         }
1:b84413a: 
1:b84413a:         if (broker != null) {
1:b84413a:             broker.stop();
1:b84413a:             broker.waitUntilStopped();
1:b84413a:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:f812e34:      * Test to check if consumer thread wakes up inside a receive(timeout) after
1:f812e34:      * a message is dispatched to the consumer
1:b84413a:      *
1:a107823:      * @throws javax.jms.JMSException
1:a107823:      */
1:b84413a:     @Test(timeout = 30000)
1:a107823:     public void testConsumerReceiveBeforeMessageDispatched() throws JMSException {
1:a107823: 
1:a107823:         connection.start();
1:a107823: 
1:a107823:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a107823:         final Queue queue = session.createQueue("test");
1:a107823: 
1:a107823:         Thread t = new Thread() {
1:b84413a:             @Override
1:f812e34:             public void run() {
1:f812e34:                 try {
1:f812e34:                     // wait for 10 seconds to allow consumer.receive to be run
1:f812e34:                     // first
1:f812e34:                     Thread.sleep(10000);
1:f812e34:                     MessageProducer producer = session.createProducer(queue);
1:f812e34:                     producer.send(session.createTextMessage("Hello"));
1:f812e34:                 } catch (Exception e) {
1:f812e34:                     e.printStackTrace();
1:f812e34:                 }
1:f812e34:             }
1:f812e34:         };
1:a107823: 
1:a107823:         t.start();
1:a107823: 
1:a107823:         // Consume the message...
1:a107823:         MessageConsumer consumer = session.createConsumer(queue);
1:a107823:         Message msg = consumer.receive(60000);
1:a107823:         assertNotNull(msg);
1:a107823:         session.close();
1:a107823:     }
1:a107823: 
1:b84413a:     /**
1:b84413a:      * check if receive(timeout) does timeout when prefetch=0 and redeliveries=0
1:b84413a:      * <p/>
1:b84413a:      * send a message.
1:b84413a:      * consume and rollback to ensure redeliverCount is incremented
1:b84413a:      * try to consume message with a timeout.
1:b84413a:      */
1:b84413a:     @Test(timeout=20000)
1:b84413a:     public void testConsumerReceivePrefetchZeroRedeliveryZero() throws Exception {
1:b84413a: 
1:b84413a:         connection.start();
1:b84413a: 
1:b84413a:         // push message to queue
1:b84413a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b84413a:         Queue queue = session.createQueue("test.prefetch.zero");
1:b84413a:         MessageProducer producer = session.createProducer(queue);
1:b84413a:         TextMessage textMessage = session.createTextMessage("test Message");
1:b84413a:         producer.send(textMessage);
1:b84413a:         session.close();
1:b84413a: 
1:b84413a:         // consume and rollback - increase redelivery counter on message
1:b84413a:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:b84413a:         MessageConsumer consumer = session.createConsumer(queue);
1:b84413a:         Message message = consumer.receive(2000);
1:b84413a:         assertNotNull(message);
1:b84413a:         session.rollback();
1:b84413a:         session.close();
1:b84413a: 
1:b84413a:         // Reconnect with zero prefetch and zero redeliveries allowed.
1:b84413a:         connection.close();
1:b84413a:         connection = createConnection();
1:b84413a:         connection.getPrefetchPolicy().setQueuePrefetch(0);
1:b84413a:         connection.getRedeliveryPolicy().setMaximumRedeliveries(0);
1:b84413a:         connection.start();
1:b84413a: 
1:b84413a:         // try consume with timeout - expect it to timeout and return NULL message
1:b84413a:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:b84413a:         consumer = session.createConsumer(queue);
1:b84413a:         message = consumer.receive(3000);
1:b84413a: 
1:b84413a:         assertNull(message);
1:b84413a:     }
1:b84413a: 
1:b84413a:     private void createBroker() throws Exception {
1:b84413a:         broker = new BrokerService();
1:b84413a:         broker.setUseJmx(false);
1:b84413a:         broker.setPersistent(false);
1:b84413a:         broker.addConnector("tcp://localhost:0");
1:b84413a:         broker.start();
1:b84413a:         broker.waitUntilStarted();
1:b84413a: 
1:b84413a:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:b84413a:     }
1:b84413a: 
1:b84413a:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:b84413a:         return new ActiveMQConnectionFactory(connectionUri);
1:b84413a:     }
1:b84413a: 
1:b84413a:     protected ActiveMQConnection createConnection() throws Exception {
1:b84413a:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:b84413a:     }
1:a107823: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b84413a
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import javax.jms.TextMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class ConsumerReceiveWithTimeoutTest {
1:     private ActiveMQConnection connection;
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         createBroker();
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:             try {
1:                 connection.close();
1:             } catch (Exception e) {}
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:      *
1:     @Test(timeout = 30000)
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * check if receive(timeout) does timeout when prefetch=0 and redeliveries=0
1:      * <p/>
1:      * send a message.
1:      * consume and rollback to ensure redeliverCount is incremented
1:      * try to consume message with a timeout.
1:      */
1:     @Test(timeout=20000)
1:     public void testConsumerReceivePrefetchZeroRedeliveryZero() throws Exception {
1: 
1:         connection.start();
1: 
1:         // push message to queue
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test.prefetch.zero");
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage textMessage = session.createTextMessage("test Message");
1:         producer.send(textMessage);
1:         session.close();
1: 
1:         // consume and rollback - increase redelivery counter on message
1:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message message = consumer.receive(2000);
1:         assertNotNull(message);
1:         session.rollback();
1:         session.close();
1: 
1:         // Reconnect with zero prefetch and zero redeliveries allowed.
1:         connection.close();
1:         connection = createConnection();
1:         connection.getPrefetchPolicy().setQueuePrefetch(0);
1:         connection.getRedeliveryPolicy().setMaximumRedeliveries(0);
1:         connection.start();
1: 
1:         // try consume with timeout - expect it to timeout and return NULL message
1:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         consumer = session.createConsumer(queue);
1:         message = consumer.receive(3000);
1: 
1:         assertNull(message);
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setPersistent(false);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     protected ActiveMQConnection createConnection() throws Exception {
1:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0: public class ConsumerReceiveWithTimeoutTest extends TestSupport {
/////////////////////////////////////////////////////////////////////////
1:      * Test to check if consumer thread wakes up inside a receive(timeout) after
1:      * a message is dispatched to the consumer
1:      * 
/////////////////////////////////////////////////////////////////////////
1:             public void run() {
1:                 try {
1:                     // wait for 10 seconds to allow consumer.receive to be run
1:                     // first
1:                     Thread.sleep(10000);
1:                     MessageProducer producer = session.createProducer(queue);
1:                     producer.send(session.createTextMessage("Hello"));
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         };
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class ConsumerReceiveWithTimeoutTest  extends TestSupport {
1: 
0:     private Connection connection;
1: 
0:     protected void setUp() throws Exception {
0:         super.setUp();
1:         connection = createConnection();
1:     }
1: 
1:     /**
0:      * @see junit.framework.TestCase#tearDown()
1:      */
0:     protected void tearDown() throws Exception {
1:         if (connection != null) {
0:             connection.close();
0:             connection = null;
1:         }
0:         super.tearDown();
1:     }
1: 
1:     /**
0:      * Test to check if consumer thread wakes up inside a receive(timeout) after a message is dispatched to the consumer
0:      *
1:      * @throws javax.jms.JMSException
1:      */
1:     public void testConsumerReceiveBeforeMessageDispatched() throws JMSException {
1: 
1:         connection.start();
1: 
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue queue = session.createQueue("test");
1: 
1:         Thread t = new Thread() {
0:                public void run(){
0:                   try {
0:                      //wait for 10 seconds to allow consumer.receive to be run first
0:                      Thread.sleep(10000);
0:                      MessageProducer producer = session.createProducer(queue);
0:                      producer.send(session.createTextMessage("Hello"));
0:                   }catch(Exception e){e.printStackTrace();}
1:                }
0:            };
1: 
1:         t.start();
1: 
1:         // Consume the message...
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(60000);
1:         assertNotNull(msg);
1:         session.close();
1: 
1:     }
1: 
1: 
1: 
1: 
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq;
0: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: 
0: 
0: /**
0:  * @version $Revision: 1.1.1.1 $
0:  */
0: public class ConsumerReceiveWithTimeoutTest  extends TestSupport {
0: 
0:     private Connection connection;
0: 
0:     protected void setUp() throws Exception {
0:         super.setUp();
0:         connection = createConnection();
0:     }
0: 
0:     /**
0:      * @see junit.framework.TestCase#tearDown()
0:      */
0:     protected void tearDown() throws Exception {
0:         if (connection != null) {
0:             connection.close();
0:             connection = null;
0:         }
0:         super.tearDown();
0:     }
0: 
0:     /**
0:      * Test to check if consumer thread wakes up inside a receive(timeout) after a message is dispatched to the consumer
0:      *
0:      * @throws javax.jms.JMSException
0:      */
0:     public void testConsumerReceiveBeforeMessageDispatched() throws JMSException {
0: 
0:         connection.start();
0: 
0:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         final Queue queue = session.createQueue("test");
0: 
0:         Thread t = new Thread() {
0:                public void run(){
0:                   try {
0:                      //wait for 10 seconds to allow consumer.receive to be run first
0:                      Thread.sleep(10000);
0:                      MessageProducer producer = session.createProducer(queue);
0:                      producer.send(session.createTextMessage("Hello"));
0:                   }catch(Exception e){e.printStackTrace();}
0:                }
0:            };
0: 
0:         t.start();
0: 
0:         // Consume the message...
0:         MessageConsumer consumer = session.createConsumer(queue);
0:         Message msg = consumer.receive(60000);
0:         assertNotNull(msg);
0:         session.close();
0: 
0:     }
0: 
0: 
0: 
0: 
0: 
0: }
============================================================================