1:f3e6039: /**
1:f3e6039:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f3e6039:  * contributor license agreements.  See the NOTICE file distributed with
1:f3e6039:  * this work for additional information regarding copyright ownership.
1:f3e6039:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f3e6039:  * (the "License"); you may not use this file except in compliance with
1:f3e6039:  * the License.  You may obtain a copy of the License at
2:f3e6039:  *
1:f3e6039:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f3e6039:  *
1:f3e6039:  * Unless required by applicable law or agreed to in writing, software
1:f3e6039:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f3e6039:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f3e6039:  * See the License for the specific language governing permissions and
1:f3e6039:  * limitations under the License.
1:f3e6039:  */
1:f3e6039: package org.apache.activemq;
13:f3e6039: 
1:02dc6ce: import static org.junit.Assert.assertEquals;
1:02dc6ce: import static org.junit.Assert.assertTrue;
1:02dc6ce: 
1:f3e6039: import java.util.Vector;
1:f3e6039: import java.util.concurrent.CountDownLatch;
1:f3e6039: import java.util.concurrent.TimeUnit;
1:f3e6039: import java.util.concurrent.atomic.AtomicBoolean;
1:f3e6039: 
1:f3e6039: import javax.jms.Connection;
1:f3e6039: import javax.jms.DeliveryMode;
1:f3e6039: import javax.jms.Destination;
1:f3e6039: import javax.jms.JMSException;
1:f3e6039: import javax.jms.Message;
1:f3e6039: import javax.jms.MessageConsumer;
1:f3e6039: import javax.jms.MessageListener;
1:f3e6039: import javax.jms.MessageProducer;
1:f3e6039: import javax.jms.Session;
1:f3e6039: import javax.jms.TextMessage;
1:f3e6039: 
1:02dc6ce: import org.junit.After;
1:02dc6ce: import org.junit.Before;
1:02dc6ce: import org.junit.Rule;
1:02dc6ce: import org.junit.Test;
1:02dc6ce: import org.junit.rules.TestName;
1:f3e6039: 
1:02dc6ce: public class JmsConsumerResetActiveListenerTest {
1:f3e6039: 
1:f3e6039:     private Connection connection;
1:f3e6039:     private ActiveMQConnectionFactory factory;
1:02dc6ce: 
1:02dc6ce:     @Rule
1:02dc6ce:     public final TestName name = new TestName();
1:02dc6ce: 
1:02dc6ce:     @Before
1:02dc6ce:     public void setUp() throws Exception {
1:02dc6ce:         factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
1:f3e6039:         connection = factory.createConnection();
1:f3e6039:     }
1:f3e6039: 
1:02dc6ce:     @After
1:02dc6ce:     public void tearDown() throws Exception {
1:f3e6039:         if (connection != null) {
1:f3e6039:             connection.close();
1:f3e6039:             connection = null;
1:f3e6039:         }
1:f3e6039:     }
1:02dc6ce: 
1:f3e6039:     /**
1:f3e6039:      * verify the (undefined by spec) behaviour of setting a listener while receiving a message.
1:02dc6ce:      *
1:f3e6039:      * @throws Exception
1:f3e6039:      */
1:02dc6ce:     @Test(timeout = 60000)
1:f3e6039:     public void testSetListenerFromListener() throws Exception {
1:f3e6039:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:02dc6ce:         Destination dest = session.createQueue("Queue-" + name.getMethodName());
1:f3e6039:         final MessageConsumer consumer = session.createConsumer(dest);
1:02dc6ce: 
1:f3e6039:         final CountDownLatch latch = new CountDownLatch(2);
1:f3e6039:         final AtomicBoolean first = new AtomicBoolean(true);
1:f3e6039:         final Vector<Object> results = new Vector<Object>();
1:f3e6039:         consumer.setMessageListener(new MessageListener() {
1:f3e6039: 
1:02dc6ce:             @Override
1:f3e6039:             public void onMessage(Message message) {
1:f3e6039:                 if (first.compareAndSet(true, false)) {
1:f3e6039:                     try {
1:f3e6039:                         consumer.setMessageListener(this);
1:f3e6039:                         results.add(message);
1:f3e6039:                     } catch (JMSException e) {
1:f3e6039:                         results.add(e);
1:f3e6039:                     }
1:f3e6039:                 } else {
1:f3e6039:                     results.add(message);
1:f3e6039:                 }
1:f3e6039:                 latch.countDown();
1:f3e6039:             }
1:f3e6039:         });
1:f3e6039: 
1:f3e6039:         connection.start();
1:02dc6ce: 
1:f3e6039:         MessageProducer producer = session.createProducer(dest);
1:f3e6039:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:f3e6039:         producer.send(session.createTextMessage("First"));
1:f3e6039:         producer.send(session.createTextMessage("Second"));
1:02dc6ce: 
1:f3e6039:         assertTrue("we did not timeout", latch.await(5, TimeUnit.SECONDS));
1:02dc6ce: 
1:f3e6039:         assertEquals("we have a result", 2, results.size());
1:f3e6039:         Object result = results.get(0);
1:f3e6039:         assertTrue(result instanceof TextMessage);
1:f3e6039:         assertEquals("result is first", "First", ((TextMessage)result).getText());
1:f3e6039:         result = results.get(1);
1:f3e6039:         assertTrue(result instanceof TextMessage);
1:f3e6039:         assertEquals("result is first", "Second", ((TextMessage)result).getText());
1:f3e6039:     }
1:02dc6ce: 
1:f3e6039:     /**
1:f3e6039:      * and a listener on a new consumer, just in case.
1:f3e6039:       *
1:f3e6039:      * @throws Exception
1:f3e6039:      */
1:02dc6ce:     @Test(timeout = 60000)
1:f3e6039:     public void testNewConsumerSetListenerFromListener() throws Exception {
1:f3e6039:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:02dc6ce:         final Destination dest = session.createQueue("Queue-" + name.getMethodName());
1:f3e6039:         final MessageConsumer consumer = session.createConsumer(dest);
1:02dc6ce: 
1:f3e6039:         final CountDownLatch latch = new CountDownLatch(2);
1:f3e6039:         final AtomicBoolean first = new AtomicBoolean(true);
1:f3e6039:         final Vector<Object> results = new Vector<Object>();
1:f3e6039:         consumer.setMessageListener(new MessageListener() {
1:02dc6ce: 
1:02dc6ce:             @Override
1:f3e6039:             public void onMessage(Message message) {
1:f3e6039:                 if (first.compareAndSet(true, false)) {
1:f3e6039:                     try {
1:f3e6039:                         MessageConsumer anotherConsumer = session.createConsumer(dest);
1:f3e6039:                         anotherConsumer.setMessageListener(this);
1:f3e6039:                         results.add(message);
1:f3e6039:                     } catch (JMSException e) {
1:f3e6039:                         results.add(e);
1:f3e6039:                     }
1:f3e6039:                 } else {
1:f3e6039:                     results.add(message);
1:f3e6039:                 }
1:f3e6039:                 latch.countDown();
1:f3e6039:             }
1:f3e6039:         });
1:02dc6ce: 
1:f3e6039:         connection.start();
1:02dc6ce: 
1:f3e6039:         MessageProducer producer = session.createProducer(dest);
1:f3e6039:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:f3e6039:         producer.send(session.createTextMessage("First"));
1:f3e6039:         producer.send(session.createTextMessage("Second"));
1:f3e6039: 
1:f3e6039:         assertTrue("we did not timeout", latch.await(5, TimeUnit.SECONDS));
1:f3e6039: 
1:f3e6039:         assertEquals("we have a result", 2, results.size());
1:f3e6039:         Object result = results.get(0);
1:f3e6039:         assertTrue(result instanceof TextMessage);
1:f3e6039:         assertEquals("result is first", "First", ((TextMessage)result).getText());
1:f3e6039:         result = results.get(1);
1:f3e6039:         assertTrue(result instanceof TextMessage);
1:f3e6039:         assertEquals("result is first", "Second", ((TextMessage)result).getText());
1:f3e6039:     }
1:f3e6039:  }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:02dc6ce
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: public class JmsConsumerResetActiveListenerTest {
1: 
1:     @Rule
1:     public final TestName name = new TestName();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
1:     @After
1:     public void tearDown() throws Exception {
1: 
1:      *
1:     @Test(timeout = 60000)
1:         Destination dest = session.createQueue("Queue-" + name.getMethodName());
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:         final Destination dest = session.createQueue("Queue-" + name.getMethodName());
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:f3e6039
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.Vector;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import junit.framework.TestCase;
1: 
1: 
0: public class JmsConsumerResetActiveListenerTest extends TestCase {
1: 
1:     private Connection connection;
1:     private ActiveMQConnectionFactory factory;
1:    
0:     protected void setUp() throws Exception {
0:         factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         connection = factory.createConnection();
1:     }
1: 
0:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:     }
1:     
1:     /**
1:      * verify the (undefined by spec) behaviour of setting a listener while receiving a message.
1:      * 
1:      * @throws Exception
1:      */
1:     public void testSetListenerFromListener() throws Exception {
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         Destination dest = session.createQueue("Queue-" + getName());
1:         final MessageConsumer consumer = session.createConsumer(dest);
1:        
1:         final CountDownLatch latch = new CountDownLatch(2);
1:         final AtomicBoolean first = new AtomicBoolean(true);
1:         final Vector<Object> results = new Vector<Object>();
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             public void onMessage(Message message) {
1:                 if (first.compareAndSet(true, false)) {
1:                     try {
1:                         consumer.setMessageListener(this);
1:                         results.add(message);
1:                     } catch (JMSException e) {
1:                         results.add(e);
1:                     }
1:                 } else {
1:                     results.add(message);
1:                 }
1:                 latch.countDown();
1:             }
1:         });
1: 
1:         connection.start();
1:         
1:         MessageProducer producer = session.createProducer(dest);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         producer.send(session.createTextMessage("First"));
1:         producer.send(session.createTextMessage("Second"));
1:         
1:         assertTrue("we did not timeout", latch.await(5, TimeUnit.SECONDS));
1:         
1:         assertEquals("we have a result", 2, results.size());
1:         Object result = results.get(0);
1:         assertTrue(result instanceof TextMessage);
1:         assertEquals("result is first", "First", ((TextMessage)result).getText());
1:         result = results.get(1);
1:         assertTrue(result instanceof TextMessage);
1:         assertEquals("result is first", "Second", ((TextMessage)result).getText());
1:     }
1:     
1:     /**
1:      * and a listener on a new consumer, just in case.
1:       *
1:      * @throws Exception
1:      */
1:     public void testNewConsumerSetListenerFromListener() throws Exception {
1:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         final Destination dest = session.createQueue("Queue-" + getName());
1:         final MessageConsumer consumer = session.createConsumer(dest);
1:        
1:         final CountDownLatch latch = new CountDownLatch(2);
1:         final AtomicBoolean first = new AtomicBoolean(true);
1:         final Vector<Object> results = new Vector<Object>();
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             public void onMessage(Message message) {
1:                 if (first.compareAndSet(true, false)) {
1:                     try {
1:                         MessageConsumer anotherConsumer = session.createConsumer(dest);
1:                         anotherConsumer.setMessageListener(this);
1:                         results.add(message);
1:                     } catch (JMSException e) {
1:                         results.add(e);
1:                     }
1:                 } else {
1:                     results.add(message);
1:                 }
1:                 latch.countDown();
1:             }
1:         });
1: 
1:         connection.start();
1:         
1:         MessageProducer producer = session.createProducer(dest);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         producer.send(session.createTextMessage("First"));
1:         producer.send(session.createTextMessage("Second"));
1:         
1:         assertTrue("we did not timeout", latch.await(5, TimeUnit.SECONDS));
1:         
1:         assertEquals("we have a result", 2, results.size());
1:         Object result = results.get(0);
1:         assertTrue(result instanceof TextMessage);
1:         assertEquals("result is first", "First", ((TextMessage)result).getText());
1:         result = results.get(1);
1:         assertTrue(result instanceof TextMessage);
1:         assertEquals("result is first", "Second", ((TextMessage)result).getText());
1:     }
1:  }
============================================================================