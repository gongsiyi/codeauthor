1:88acb0e: /**
1:88acb0e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:88acb0e:  * contributor license agreements.  See the NOTICE file distributed with
1:88acb0e:  * this work for additional information regarding copyright ownership.
1:88acb0e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:88acb0e:  * (the "License"); you may not use this file except in compliance with
1:88acb0e:  * the License.  You may obtain a copy of the License at
1:7638179:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f812e34:  *
1:88acb0e:  * Unless required by applicable law or agreed to in writing, software
1:88acb0e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88acb0e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88acb0e:  * See the License for the specific language governing permissions and
1:88acb0e:  * limitations under the License.
1:88acb0e:  */
1:88acb0e: package org.apache.activemq.util;
11:88acb0e: 
1:88acb0e: import java.io.BufferedInputStream;
1:88acb0e: import java.io.IOException;
1:88acb0e: import java.io.InputStream;
1:88acb0e: import java.util.Properties;
1:86cbdfd: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:88acb0e: 
1:7638179: /**
1:9ef4259:  *
1:7638179:  */
1:88acb0e: public class FactoryFinder {
1:88acb0e: 
1:7638179:     /**
1:cd694f7:      * The strategy that the FactoryFinder uses to find load and instantiate Objects
1:cd694f7:      * can be changed out by calling the
1:7638179:      * {@link org.apache.activemq.util.FactoryFinder#setObjectFactory(org.apache.activemq.util.FactoryFinder.ObjectFactory)}
1:cd694f7:      * method with a custom implementation of ObjectFactory.
1:7638179:      *
1:7638179:      * The default ObjectFactory is typically changed out when running in a specialized container
1:cd694f7:      * environment where service discovery needs to be done via the container system.  For example,
1:7638179:      * in an OSGi scenario.
1:7638179:      */
1:7638179:     public interface ObjectFactory {
1:7638179:         /**
1:9ef4259:          * @param path the full service path
1:7638179:          * @return
1:7638179:          */
1:7638179:         public Object create(String path) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException;
1:7638179: 
1:7638179:     }
1:7638179: 
1:7638179:     /**
1:7638179:      * The default implementation of Object factory which works well in standalone applications.
1:7638179:      */
1:7638179:     protected static class StandaloneObjectFactory implements ObjectFactory {
1:9ef4259:         final ConcurrentMap<String, Class> classMap = new ConcurrentHashMap<String, Class>();
1:7638179: 
1:9ef4259:         @Override
1:7638179:         public Object create(final String path) throws InstantiationException, IllegalAccessException, ClassNotFoundException, IOException {
1:7638179:             Class clazz = classMap.get(path);
1:7638179:             if (clazz == null) {
1:7638179:                 clazz = loadClass(loadProperties(path));
1:7638179:                 classMap.put(path, clazz);
1:7638179:             }
1:7638179:             return clazz.newInstance();
1:7638179:         }
1:7638179: 
1:7638179:         static public Class loadClass(Properties properties) throws ClassNotFoundException, IOException {
1:7638179: 
1:7638179:             String className = properties.getProperty("class");
1:7638179:             if (className == null) {
1:7638179:                 throw new IOException("Expected property is missing: class");
1:7638179:             }
1:7638179:             Class clazz = null;
1:7638179:             ClassLoader loader = Thread.currentThread().getContextClassLoader();
1:7638179:             if (loader != null) {
1:7638179:                 try {
1:7638179:                     clazz = loader.loadClass(className);
1:7638179:                 } catch (ClassNotFoundException e) {
1:7638179:                     // ignore
1:7638179:                 }
1:7638179:             }
1:7638179:             if (clazz == null) {
1:7638179:                 clazz = FactoryFinder.class.getClassLoader().loadClass(className);
1:7638179:             }
1:7638179: 
1:7638179:             return clazz;
1:7638179:         }
1:7638179: 
1:7638179:         static public Properties loadProperties(String uri) throws IOException {
1:7638179:             // lets try the thread context class loader first
1:7638179:             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
1:7638179:             if (classLoader == null) {
1:7638179:                 classLoader = StandaloneObjectFactory.class.getClassLoader();
1:7638179:             }
1:7638179:             InputStream in = classLoader.getResourceAsStream(uri);
1:7638179:             if (in == null) {
1:7638179:                 in = FactoryFinder.class.getClassLoader().getResourceAsStream(uri);
1:7638179:                 if (in == null) {
1:7638179:                     throw new IOException("Could not find factory class for resource: " + uri);
1:7638179:                 }
1:7638179:             }
1:7638179: 
1:7638179:             // lets load the file
1:7638179:             BufferedInputStream reader = null;
1:7638179:             try {
1:7638179:                 reader = new BufferedInputStream(in);
1:7638179:                 Properties properties = new Properties();
1:7638179:                 properties.load(reader);
1:7638179:                 return properties;
1:7638179:             } finally {
1:7638179:                 try {
1:7638179:                     reader.close();
1:7638179:                 } catch (Exception e) {
1:7638179:                 }
1:7638179:             }
1:7638179:         }
1:7638179:     }
1:7638179: 
1:7638179:     // ================================================================
1:7638179:     // Class methods and properties
1:7638179:     // ================================================================
1:7638179:     private static ObjectFactory objectFactory = new StandaloneObjectFactory();
1:7638179: 
1:7638179:     public static ObjectFactory getObjectFactory() {
1:7638179:         return objectFactory;
1:7638179:     }
1:7638179: 
1:7638179:     public static void setObjectFactory(ObjectFactory objectFactory) {
1:7638179:         FactoryFinder.objectFactory = objectFactory;
1:7638179:     }
1:7638179: 
1:7638179:     // ================================================================
1:7638179:     // Instance methods and properties
1:7638179:     // ================================================================
1:88acb0e:     private final String path;
1:88acb0e: 
1:88acb0e:     public FactoryFinder(String path) {
1:88acb0e:         this.path = path;
1:fc00993:     }
1:88acb0e: 
1:88acb0e:     /**
1:88acb0e:      * Creates a new instance of the given key
1:7638179:      *
1:f812e34:      * @param key is the key to add to the path to find a text file containing
1:f812e34:      *                the factory name
1:88acb0e:      * @return a newly created instance
1:88acb0e:      */
1:f812e34:     public Object newInstance(String key) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException {
1:7638179:         return objectFactory.create(path+key);
1:f812e34:     }
1:9ef4259: 
1:7638179: 
1:86cbdfd: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
1:  *
/////////////////////////////////////////////////////////////////////////
1:          * @param path the full service path
/////////////////////////////////////////////////////////////////////////
1:         final ConcurrentMap<String, Class> classMap = new ConcurrentHashMap<String, Class>();
1:         @Override
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:7638179
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * 
1:  */
1:     /**
0:      * The strategey that the FactoryFinder uses to find load and instanciate Objects
0:      * can be chagned out by calling the
1:      * {@link org.apache.activemq.util.FactoryFinder#setObjectFactory(org.apache.activemq.util.FactoryFinder.ObjectFactory)}
0:      * method with a custom implemenation of ObjectFactory.
1:      *
1:      * The default ObjectFactory is typically changed out when running in a specialized container
0:      * enviorment where service discovery needs to be done via the container system.  For example,
1:      * in an OSGi scenario.
1:      */
1:     public interface ObjectFactory {
1:         /**
0:          * @param path the full service path 
1:          * @return
1:          */
1:         public Object create(String path) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException;
1: 
1:     }
1: 
1:     /**
1:      * The default implementation of Object factory which works well in standalone applications.
1:      */
1:     protected static class StandaloneObjectFactory implements ObjectFactory {
0:         final ConcurrentHashMap<String, Class> classMap = new ConcurrentHashMap<String, Class>();
1: 
1:         public Object create(final String path) throws InstantiationException, IllegalAccessException, ClassNotFoundException, IOException {
1:             Class clazz = classMap.get(path);
1:             if (clazz == null) {
1:                 clazz = loadClass(loadProperties(path));
1:                 classMap.put(path, clazz);
1:             }
1:             return clazz.newInstance();
1:         }
1: 
1:         static public Class loadClass(Properties properties) throws ClassNotFoundException, IOException {
1: 
1:             String className = properties.getProperty("class");
1:             if (className == null) {
1:                 throw new IOException("Expected property is missing: class");
1:             }
1:             Class clazz = null;
1:             ClassLoader loader = Thread.currentThread().getContextClassLoader();
1:             if (loader != null) {
1:                 try {
1:                     clazz = loader.loadClass(className);
1:                 } catch (ClassNotFoundException e) {
1:                     // ignore
1:                 }
1:             }
1:             if (clazz == null) {
1:                 clazz = FactoryFinder.class.getClassLoader().loadClass(className);
1:             }
1: 
1:             return clazz;
1:         }
1: 
1:         static public Properties loadProperties(String uri) throws IOException {
1:             // lets try the thread context class loader first
1:             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
1:             if (classLoader == null) {
1:                 classLoader = StandaloneObjectFactory.class.getClassLoader();
1:             }
1:             InputStream in = classLoader.getResourceAsStream(uri);
1:             if (in == null) {
1:                 in = FactoryFinder.class.getClassLoader().getResourceAsStream(uri);
1:                 if (in == null) {
1:                     throw new IOException("Could not find factory class for resource: " + uri);
1:                 }
1:             }
1: 
1:             // lets load the file
1:             BufferedInputStream reader = null;
1:             try {
1:                 reader = new BufferedInputStream(in);
1:                 Properties properties = new Properties();
1:                 properties.load(reader);
1:                 return properties;
1:             } finally {
1:                 try {
1:                     reader.close();
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         }
1:     }
1: 
1:     // ================================================================
1:     // Class methods and properties
1:     // ================================================================
1:     private static ObjectFactory objectFactory = new StandaloneObjectFactory();
1: 
1:     public static ObjectFactory getObjectFactory() {
1:         return objectFactory;
1:     }
1: 
1:     public static void setObjectFactory(ObjectFactory objectFactory) {
1:         FactoryFinder.objectFactory = objectFactory;
1:     }
1: 
1:     // ================================================================
1:     // Instance methods and properties
1:     // ================================================================
/////////////////////////////////////////////////////////////////////////
1:      *
1:         return objectFactory.create(path+key);
1:     
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private final ConcurrentHashMap<String, Class> classMap = new ConcurrentHashMap<String, Class>();
/////////////////////////////////////////////////////////////////////////
0:         Class clazz = classMap.get(propertyPrefix + key);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:         if (classLoader == null) {
1:         }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @param key is the key to add to the path to find a text file containing
1:      *                the factory name
1:     public Object newInstance(String key) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException {
0:     public Object newInstance(String key, String propertyPrefix) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException {
0:         if (propertyPrefix == null) {
1:         }
0:         Class clazz = (Class)classMap.get(propertyPrefix + key);
/////////////////////////////////////////////////////////////////////////
0:             } catch (ClassNotFoundException e) {
/////////////////////////////////////////////////////////////////////////
0:         if (classLoader == null)
0:             classLoader = getClass().getClassLoader();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1: }
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.BufferedInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Properties;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: 
1: public class FactoryFinder {
1: 
1:     private final String path;
0:     private final ConcurrentHashMap classMap = new ConcurrentHashMap();
1: 
1:     public FactoryFinder(String path) {
1:         this.path = path;
0:     }
1: 
1:     /**
1:      * Creates a new instance of the given key
0:      *
0:      * @param key is the key to add to the path to find a text file
0:      *            containing the factory name
1:      * @return a newly created instance
1:      */
0:     public Object newInstance(String key)
0:             throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException
0:     {
0:         return newInstance(key, null);
0:     }
1: 
0:     public Object newInstance(String key, String propertyPrefix)
0:             throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException
0:     {
0:         if (propertyPrefix == null)
0:             propertyPrefix = "";
1: 
0:         Class clazz = (Class) classMap.get(propertyPrefix + key);
0:         if (clazz == null) {
0:             clazz = newInstance(doFindFactoryProperies(key), propertyPrefix);
0:             classMap.put(propertyPrefix + key, clazz);
0:         }
0:         return clazz.newInstance();
0:     }
1: 
0:     private Class newInstance(Properties properties, String propertyPrefix) throws ClassNotFoundException, IOException {
1: 
0:         String className = properties.getProperty(propertyPrefix + "class");
0:         if (className == null) {
0:             throw new IOException("Expected property is missing: " + propertyPrefix + "class");
0:         }
0:         Class clazz;
0:         try {
0:             clazz = Thread.currentThread().getContextClassLoader().loadClass(className);
0:         } catch (ClassNotFoundException e) {
0:             clazz = FactoryFinder.class.getClassLoader().loadClass(className);
0:         }
1: 
0:         return clazz;
0:     }
1: 
0:     private Properties doFindFactoryProperies(String key) throws IOException {
0:         String uri = path + key;
1: 
0:         // lets try the thread context class loader first
0:         InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(uri);
0:         if (in == null) {
0:             in = FactoryFinder.class.getClassLoader().getResourceAsStream(uri);
0:             if (in == null) {
0:                 throw new IOException("Could not find factory class for resource: " + uri);
0:             }
0:         }
1: 
0:         // lets load the file
0:         BufferedInputStream reader = null;
0:         try {
0:             reader = new BufferedInputStream(in);
0:             Properties properties = new Properties();
0:             properties.load(reader);
0:             return properties;
0:         } finally {
0:             try {
0:                 reader.close();
0:             } catch (Exception e) {
0:             }
0:         }
0:     }
0: }
author:David Jencks
-------------------------------------------------------------------------------
commit:cd694f7
/////////////////////////////////////////////////////////////////////////
1:      * The strategy that the FactoryFinder uses to find load and instantiate Objects
1:      * can be changed out by calling the
1:      * method with a custom implementation of ObjectFactory.
1:      * environment where service discovery needs to be done via the container system.  For example,
author:James Strachan
-------------------------------------------------------------------------------
commit:5cb9419
/////////////////////////////////////////////////////////////////////////
0:         Class clazz = null;
0:         ClassLoader loader = Thread.currentThread().getContextClassLoader();
0:         if (loader != null) {
0:             try {
0:                 clazz = loader.loadClass(className);
0:             }
0:             catch (ClassNotFoundException e) {
0:                 // ignore
0:             }
0:         }
0:         if (clazz == null) {
author:Dain Sundstrom
-------------------------------------------------------------------------------
commit:eb19487
/////////////////////////////////////////////////////////////////////////
0:         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
0:         if (classLoader == null) classLoader = getClass().getClassLoader();
0:         InputStream in = classLoader.getResourceAsStream(uri);
============================================================================