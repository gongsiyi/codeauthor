1:31c55f7: /*
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82a5839:  * contributor license agreements.  See the NOTICE file distributed with
1:82a5839:  * this work for additional information regarding copyright ownership.
1:82a5839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82a5839:  * (the "License"); you may not use this file except in compliance with
1:82a5839:  * the License.  You may obtain a copy of the License at
1:31c55f7:  *
1:82a5839:  *      http://www.apache.org/licenses/LICENSE-2.0
5:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing, software
1:82a5839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82a5839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82a5839:  * See the License for the specific language governing permissions and
1:82a5839:  * limitations under the License.
5:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.transport;
1:f6d2584: 
1:82a5839: import java.io.IOException;
1:82a5839: import java.net.URI;
1:82a5839: import java.security.Principal;
1:f6d2584: 
1:31c55f7: import io.netty.buffer.ByteBuf;
1:f6d2584: 
6:82a5839: /**
1:4b018b4:  * Base for all Netty based Transports in this client.
1:82a5839:  */
1:31c55f7: public interface NettyTransport {
1:f6d2584: 
1:31c55f7:     void connect() throws IOException;
51:82a5839: 
1:31c55f7:     boolean isConnected();
1:82a5839: 
1:31c55f7:     boolean isSSL();
1:82a5839: 
1:31c55f7:     void close() throws IOException;
1:82a5839: 
1:31c55f7:     ByteBuf allocateSendBuffer(int size) throws IOException;
1:82a5839: 
1:31c55f7:     void send(ByteBuf output) throws IOException;
1:82a5839: 
1:31c55f7:     NettyTransportListener getTransportListener();
1:82a5839: 
1:31c55f7:     void setTransportListener(NettyTransportListener listener);
1:82a5839: 
1:31c55f7:     NettyTransportOptions getTransportOptions();
1:82a5839: 
1:31c55f7:     URI getRemoteLocation();
1:82a5839: 
1:31c55f7:     Principal getLocalPrincipal();
1:82a5839: 
1:88efa01:     void setMaxFrameSize(int maxFrameSize);
1:88efa01: 
1:88efa01:     int getMaxFrameSize();
1:88efa01: 
1:31c55f7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:88efa01
/////////////////////////////////////////////////////////////////////////
1:     void setMaxFrameSize(int maxFrameSize);
1: 
1:     int getMaxFrameSize();
1: 
commit:4b018b4
/////////////////////////////////////////////////////////////////////////
1:  * Base for all Netty based Transports in this client.
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
1:  *
1: public interface NettyTransport {
1:     void connect() throws IOException;
1:     boolean isConnected();
1:     boolean isSSL();
1:     void close() throws IOException;
1:     ByteBuf allocateSendBuffer(int size) throws IOException;
1:     void send(ByteBuf output) throws IOException;
1:     NettyTransportListener getTransportListener();
1:     void setTransportListener(NettyTransportListener listener);
1:     NettyTransportOptions getTransportOptions();
1:     URI getRemoteLocation();
1:     Principal getLocalPrincipal();
1: }
commit:f6d2584
/////////////////////////////////////////////////////////////////////////
0:                     connectionFailed(future.channel(), new IOException("Connection attempt was cancelled"));
0:                     connectionFailed(future.channel(), IOExceptionSupport.create(future.cause()));
/////////////////////////////////////////////////////////////////////////
0:                 channel.close().syncUninterruptibly();
/////////////////////////////////////////////////////////////////////////
0:     public boolean isSSL() {
0:         return secure;
0:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected void configureChannel(final Channel channel) throws Exception {
0:             SslHandler sslHandler = NettyTransportSupport.createSslHandler(getRemoteLocation(), getSslOptions());
0:             sslHandler.handshakeFuture().addListener(new GenericFutureListener<Future<Channel>>() {
/////////////////////////////////////////////////////////////////////////
0:                         connectionFailed(channel, IOExceptionSupport.create(future.cause()));
1: 
0:             channel.pipeline().addLast(sslHandler);
0:         }
1: 
0:         channel.pipeline().addLast(new NettyTcpTransportHandler());
0:     }
1: 
0:     protected void handleConnected(final Channel channel) throws Exception {
0:         if (!isSSL()) {
/////////////////////////////////////////////////////////////////////////
0:      * @param failedChannel
0:      *      The Channel instance that failed.
0:     protected void connectionFailed(Channel failedChannel, IOException cause) {
0:         channel = failedChannel;
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
0: import io.netty.bootstrap.Bootstrap;
0: import io.netty.buffer.ByteBuf;
0: import io.netty.channel.Channel;
0: import io.netty.channel.ChannelFuture;
0: import io.netty.channel.ChannelFutureListener;
0: import io.netty.channel.ChannelHandlerContext;
0: import io.netty.channel.ChannelInitializer;
0: import io.netty.channel.ChannelOption;
0: import io.netty.channel.EventLoopGroup;
0: import io.netty.channel.FixedRecvByteBufAllocator;
0: import io.netty.channel.SimpleChannelInboundHandler;
0: import io.netty.channel.nio.NioEventLoopGroup;
0: import io.netty.channel.socket.nio.NioSocketChannel;
0: import io.netty.handler.ssl.SslHandler;
0: import io.netty.util.concurrent.Future;
0: import io.netty.util.concurrent.GenericFutureListener;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.security.Principal;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import org.apache.activemq.transport.amqp.client.util.IOExceptionSupport;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * TCP based transport that uses Netty as the underlying IO layer.
1:  */
0: public class NettyTransport {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(NettyTransport.class);
1: 
0:     private static final int QUIET_PERIOD = 20;
0:     private static final int SHUTDOWN_TIMEOUT = 100;
1: 
0:     protected Bootstrap bootstrap;
0:     protected EventLoopGroup group;
0:     protected Channel channel;
0:     protected NettyTransportListener listener;
0:     protected NettyTransportOptions options;
0:     protected final URI remote;
0:     protected boolean secure;
1: 
0:     private final AtomicBoolean connected = new AtomicBoolean();
0:     private final AtomicBoolean closed = new AtomicBoolean();
0:     private final CountDownLatch connectLatch = new CountDownLatch(1);
0:     private IOException failureCause;
0:     private Throwable pendingFailure;
1: 
1:     /**
0:      * Create a new transport instance
1:      *
0:      * @param remoteLocation
0:      *        the URI that defines the remote resource to connect to.
0:      * @param options
0:      *        the transport options used to configure the socket connection.
1:      */
0:     public NettyTransport(URI remoteLocation, NettyTransportOptions options) {
0:         this(null, remoteLocation, options);
0:     }
1: 
1:     /**
0:      * Create a new transport instance
1:      *
0:      * @param listener
0:      *        the TransportListener that will receive events from this Transport.
0:      * @param remoteLocation
0:      *        the URI that defines the remote resource to connect to.
0:      * @param options
0:      *        the transport options used to configure the socket connection.
1:      */
0:     public NettyTransport(NettyTransportListener listener, URI remoteLocation, NettyTransportOptions options) {
0:         this.options = options;
0:         this.listener = listener;
0:         this.remote = remoteLocation;
0:         this.secure = remoteLocation.getScheme().equalsIgnoreCase("ssl");
0:     }
1: 
0:     public void connect() throws IOException {
1: 
0:         if (listener == null) {
0:             throw new IllegalStateException("A transport listener must be set before connection attempts.");
0:         }
1: 
0:         group = new NioEventLoopGroup(1);
1: 
0:         bootstrap = new Bootstrap();
0:         bootstrap.group(group);
0:         bootstrap.channel(NioSocketChannel.class);
0:         bootstrap.handler(new ChannelInitializer<Channel>() {
1: 
0:             @Override
0:             public void initChannel(Channel connectedChannel) throws Exception {
0:                 configureChannel(connectedChannel);
0:             }
0:         });
1: 
0:         configureNetty(bootstrap, getTransportOptions());
1: 
0:         ChannelFuture future = bootstrap.connect(getRemoteHost(), getRemotePort());
0:         future.addListener(new ChannelFutureListener() {
1: 
0:             @Override
0:             public void operationComplete(ChannelFuture future) throws Exception {
0:                 if (future.isSuccess()) {
0:                     handleConnected(future.channel());
0:                 } else if (future.isCancelled()) {
0:                     connectionFailed(new IOException("Connection attempt was cancelled"));
0:                 } else {
0:                     connectionFailed(IOExceptionSupport.create(future.cause()));
0:                 }
0:             }
0:         });
1: 
0:         try {
0:             connectLatch.await();
0:         } catch (InterruptedException ex) {
0:             LOG.debug("Transport connection was interrupted.");
0:             Thread.interrupted();
0:             failureCause = IOExceptionSupport.create(ex);
0:         }
1: 
0:         if (failureCause != null) {
0:             // Close out any Netty resources now as they are no longer needed.
0:             if (channel != null) {
0:                 channel.close();
0:                 channel = null;
0:             }
0:             if (group != null) {
0:                 group.shutdownGracefully(QUIET_PERIOD, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
0:                 group = null;
0:             }
1: 
0:             throw failureCause;
0:         } else {
0:             // Connected, allow any held async error to fire now and close the transport.
0:             channel.eventLoop().execute(new Runnable() {
1: 
0:                 @Override
0:                 public void run() {
0:                     if (pendingFailure != null) {
0:                         channel.pipeline().fireExceptionCaught(pendingFailure);
0:                     }
0:                 }
0:             });
0:         }
0:     }
1: 
0:     public boolean isSSL() {
0:         return secure;
0:     }
1: 
0:     public boolean isConnected() {
0:         return connected.get();
0:     }
1: 
0:     public void close() throws IOException {
0:         if (closed.compareAndSet(false, true)) {
0:             connected.set(false);
0:             if (channel != null) {
0:                 channel.close().syncUninterruptibly();
0:             }
0:             if (group != null) {
0:                 group.shutdownGracefully(QUIET_PERIOD, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
0:             }
0:         }
0:     }
1: 
0:     public ByteBuf allocateSendBuffer(int size) throws IOException {
0:         checkConnected();
0:         return channel.alloc().ioBuffer(size, size);
0:     }
1: 
0:     public void send(ByteBuf output) throws IOException {
0:         checkConnected();
0:         int length = output.readableBytes();
0:         if (length == 0) {
0:             return;
0:         }
1: 
0:         LOG.trace("Attempted write of: {} bytes", length);
1: 
0:         channel.writeAndFlush(output);
0:     }
1: 
0:     public NettyTransportListener getTransportListener() {
0:         return listener;
0:     }
1: 
0:     public void setTransportListener(NettyTransportListener listener) {
0:         this.listener = listener;
0:     }
1: 
0:     public NettyTransportOptions getTransportOptions() {
0:         if (options == null) {
0:             if (isSSL()) {
0:                 options = NettyTransportSslOptions.INSTANCE;
0:             } else {
0:                 options = NettyTransportOptions.INSTANCE;
0:             }
0:         }
1: 
0:         return options;
0:     }
1: 
0:     public URI getRemoteLocation() {
0:         return remote;
0:     }
1: 
0:     public Principal getLocalPrincipal() {
0:         if (!isSSL()) {
0:             throw new UnsupportedOperationException("Not connected to a secure channel");
0:         }
1: 
0:         SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
1: 
0:         return sslHandler.engine().getSession().getLocalPrincipal();
0:     }
1: 
0:     //----- Internal implementation details, can be overridden as needed --//
1: 
0:     protected String getRemoteHost() {
0:         return remote.getHost();
0:     }
1: 
0:     protected int getRemotePort() {
0:         int port = remote.getPort();
1: 
0:         if (port <= 0) {
0:             if (isSSL()) {
0:                 port = getSslOptions().getDefaultSslPort();
0:             } else {
0:                 port = getTransportOptions().getDefaultTcpPort();
0:             }
0:         }
1: 
0:         return port;
0:     }
1: 
0:     protected void configureNetty(Bootstrap bootstrap, NettyTransportOptions options) {
0:         bootstrap.option(ChannelOption.TCP_NODELAY, options.isTcpNoDelay());
0:         bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, options.getConnectTimeout());
0:         bootstrap.option(ChannelOption.SO_KEEPALIVE, options.isTcpKeepAlive());
0:         bootstrap.option(ChannelOption.SO_LINGER, options.getSoLinger());
0:         bootstrap.option(ChannelOption.ALLOCATOR, PartialPooledByteBufAllocator.INSTANCE);
1: 
0:         if (options.getSendBufferSize() != -1) {
0:             bootstrap.option(ChannelOption.SO_SNDBUF, options.getSendBufferSize());
0:         }
1: 
0:         if (options.getReceiveBufferSize() != -1) {
0:             bootstrap.option(ChannelOption.SO_RCVBUF, options.getReceiveBufferSize());
0:             bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR, new FixedRecvByteBufAllocator(options.getReceiveBufferSize()));
0:         }
1: 
0:         if (options.getTrafficClass() != -1) {
0:             bootstrap.option(ChannelOption.IP_TOS, options.getTrafficClass());
0:         }
0:     }
1: 
0:     protected void configureChannel(Channel channel) throws Exception {
0:         if (isSSL()) {
0:             channel.pipeline().addLast(NettyTransportSupport.createSslHandler(getRemoteLocation(), getSslOptions()));
0:         }
1: 
0:         channel.pipeline().addLast(new NettyTcpTransportHandler());
0:     }
1: 
0:     protected void handleConnected(final Channel channel) throws Exception {
0:         if (isSSL()) {
0:             SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
1: 
0:             Future<Channel> channelFuture = sslHandler.handshakeFuture();
0:             channelFuture.addListener(new GenericFutureListener<Future<Channel>>() {
0:                 @Override
0:                 public void operationComplete(Future<Channel> future) throws Exception {
0:                     if (future.isSuccess()) {
0:                         LOG.trace("SSL Handshake has completed: {}", channel);
0:                         connectionEstablished(channel);
0:                     } else {
0:                         LOG.trace("SSL Handshake has failed: {}", channel);
0:                         connectionFailed(IOExceptionSupport.create(future.cause()));
0:                     }
0:                 }
0:             });
0:         } else {
0:             connectionEstablished(channel);
0:         }
0:     }
1: 
0:     //----- State change handlers and checks ---------------------------------//
1: 
1:     /**
0:      * Called when the transport has successfully connected and is ready for use.
1:      */
0:     protected void connectionEstablished(Channel connectedChannel) {
0:         channel = connectedChannel;
0:         connected.set(true);
0:         connectLatch.countDown();
0:     }
1: 
1:     /**
0:      * Called when the transport connection failed and an error should be returned.
1:      *
0:      * @param cause
0:      *      An IOException that describes the cause of the failed connection.
1:      */
0:     protected void connectionFailed(IOException cause) {
0:         failureCause = IOExceptionSupport.create(cause);
0:         connected.set(false);
0:         connectLatch.countDown();
0:     }
1: 
0:     private NettyTransportSslOptions getSslOptions() {
0:         return (NettyTransportSslOptions) getTransportOptions();
0:     }
1: 
0:     private void checkConnected() throws IOException {
0:         if (!connected.get()) {
0:             throw new IOException("Cannot send to a non-connected transport.");
0:         }
0:     }
1: 
0:     //----- Handle connection events -----------------------------------------//
1: 
0:     private class NettyTcpTransportHandler extends SimpleChannelInboundHandler<ByteBuf> {
1: 
0:         @Override
0:         public void channelActive(ChannelHandlerContext context) throws Exception {
0:             LOG.trace("Channel has become active! Channel is {}", context.channel());
0:         }
1: 
0:         @Override
0:         public void channelInactive(ChannelHandlerContext context) throws Exception {
0:             LOG.trace("Channel has gone inactive! Channel is {}", context.channel());
0:             if (connected.compareAndSet(true, false) && !closed.get()) {
0:                 LOG.trace("Firing onTransportClosed listener");
0:                 listener.onTransportClosed();
0:             }
0:         }
1: 
0:         @Override
0:         public void exceptionCaught(ChannelHandlerContext context, Throwable cause) throws Exception {
0:             LOG.trace("Exception on channel! Channel is {}", context.channel());
0:             if (connected.compareAndSet(true, false) && !closed.get()) {
0:                 LOG.trace("Firing onTransportError listener");
0:                 if (pendingFailure != null) {
0:                     listener.onTransportError(pendingFailure);
0:                 } else {
0:                     listener.onTransportError(cause);
0:                 }
0:             } else {
0:                 // Hold the first failure for later dispatch if connect succeeds.
0:                 // This will then trigger disconnect using the first error reported.
0:                 if (pendingFailure != null) {
0:                     LOG.trace("Holding error until connect succeeds: {}", cause.getMessage());
0:                     pendingFailure = cause;
0:                 }
0:             }
0:         }
1: 
0:         @Override
0:         protected void channelRead0(ChannelHandlerContext ctx, ByteBuf buffer) throws Exception {
0:             LOG.trace("New data read: {} bytes incoming: {}", buffer.readableBytes(), buffer);
0:             listener.onData(buffer);
0:         }
0:     }
0: }
============================================================================