1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
5:d29ca2a: 
1:74a7a8b: import java.util.Iterator;
1:74a7a8b: import java.util.Set;
1:86cbdfd: import java.util.concurrent.CopyOnWriteArraySet;
1:86cbdfd: import java.util.concurrent.atomic.AtomicBoolean;
1:230a86c: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.ThreadPriorities;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Used to provide information on the status of the Connection
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:230a86c: public class TransportStatusDetector implements Service, Runnable {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TransportStatusDetector.class);
1:d29ca2a:     private TransportConnector connector;
1:933eb2f:     private Set<TransportConnection> collectionCandidates = new CopyOnWriteArraySet<TransportConnection>();
1:230a86c:     private AtomicBoolean started = new AtomicBoolean(false);
1:d29ca2a:     private Thread runner;
1:230a86c:     private int sweepInterval = 5000;
1:230a86c: 
1:230a86c:     TransportStatusDetector(TransportConnector connector) {
1:230a86c:         this.connector = connector;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the sweepInterval.
1:d29ca2a:      */
1:230a86c:     public int getSweepInterval() {
1:d29ca2a:         return sweepInterval;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:230a86c:      * The sweepInterval to set.
1:230a86c:      * 
1:d29ca2a:      * @param sweepInterval
1:d29ca2a:      */
1:230a86c:     public void setSweepInterval(int sweepInterval) {
1:230a86c:         this.sweepInterval = sweepInterval;
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     protected void doCollection() {
1:933eb2f:         for (Iterator<TransportConnection> i = collectionCandidates.iterator(); i.hasNext();) {
1:933eb2f:             TransportConnection tc = i.next();
1:230a86c:             if (tc.isMarkedCandidate()) {
1:230a86c:                 if (tc.isBlockedCandidate()) {
1:d29ca2a:                     collectionCandidates.remove(tc);
1:d29ca2a:                     doCollection(tc);
1:230a86c:                 } else {
2:d29ca2a:                     tc.doMark();
1:d29ca2a:                 }
1:230a86c:             } else {
1:d29ca2a:                 collectionCandidates.remove(tc);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     protected void doSweep() {
1:230a86c:         for (Iterator i = connector.getConnections().iterator(); i.hasNext();) {
1:230a86c:             TransportConnection connection = (TransportConnection)i.next();
1:230a86c:             if (connection.isMarkedCandidate()) {
1:d2d1c6d:                 connection.doMark();
1:d2d1c6d:                 collectionCandidates.add(connection);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     protected void doCollection(TransportConnection tc) {
1:e1bbde7:         LOG.warn("found a blocked client - stopping: {}", tc);
1:230a86c:         try {
1:d29ca2a:             tc.stop();
1:230a86c:         } catch (Exception e) {
1:e1bbde7:             LOG.error("Error stopping {}", tc, e);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void run() {
1:230a86c:         while (started.get()) {
1:230a86c:             try {
1:d29ca2a:                 doCollection();
1:d29ca2a:                 doSweep();
1:d29ca2a:                 Thread.sleep(sweepInterval);
1:230a86c:             } catch (Throwable e) {
1:fc00993:                 LOG.error("failed to complete a sweep for blocked clients", e);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void start() throws Exception {
1:230a86c:         if (started.compareAndSet(false, true)) {
1:230a86c:             runner = new Thread(this, "ActiveMQ Transport Status Monitor: " + connector);
1:d29ca2a:             runner.setDaemon(true);
1:d29ca2a:             runner.setPriority(ThreadPriorities.BROKER_MANAGEMENT);
1:d29ca2a:             runner.start();
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void stop() throws Exception {
1:d29ca2a:         started.set(false);
1:4d2b20b:         if (runner != null) {
1:4d2b20b:             runner.join(getSweepInterval() * 5);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:         LOG.warn("found a blocked client - stopping: {}", tc);
1:             LOG.error("Error stopping {}", tc, e);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private Set<TransportConnection> collectionCandidates = new CopyOnWriteArraySet<TransportConnection>();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<TransportConnection> i = collectionCandidates.iterator(); i.hasNext();) {
1:             TransportConnection tc = i.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TransportStatusDetector.class);
/////////////////////////////////////////////////////////////////////////
0:         LOG.warn("found a blocked client - stopping: " + tc);
0:             LOG.error("Error stopping " + tc, e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("failed to complete a sweep for blocked clients", e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: public class TransportStatusDetector implements Service, Runnable {
0:     private static final Log log = LogFactory.getLog(TransportStatusDetector.class);
0:     private Set collectionCandidates = new CopyOnWriteArraySet();
1:     private AtomicBoolean started = new AtomicBoolean(false);
1:     private int sweepInterval = 5000;
1: 
1:     TransportStatusDetector(TransportConnector connector) {
1:         this.connector = connector;
1: 
1:     public int getSweepInterval() {
1: 
1:      * The sweepInterval to set.
1:      * 
1:     public void setSweepInterval(int sweepInterval) {
1:         this.sweepInterval = sweepInterval;
1: 
1:     protected void doCollection() {
0:         for (Iterator i = collectionCandidates.iterator(); i.hasNext();) {
0:             TransportConnection tc = (TransportConnection)i.next();
1:             if (tc.isMarkedCandidate()) {
1:                 if (tc.isBlockedCandidate()) {
1:                 } else {
1:             } else {
1: 
1:     protected void doSweep() {
1:         for (Iterator i = connector.getConnections().iterator(); i.hasNext();) {
1:             TransportConnection connection = (TransportConnection)i.next();
1:             if (connection.isMarkedCandidate()) {
1: 
1:     protected void doCollection(TransportConnection tc) {
0:         log.warn("found a blocked client - stopping: " + tc);
1:         try {
1:         } catch (Exception e) {
0:             log.error("Error stopping " + tc, e);
1: 
1:     public void run() {
1:         while (started.get()) {
1:             try {
1:             } catch (Throwable e) {
0:                 log.error("failed to complete a sweep for blocked clients", e);
1: 
1:     public void start() throws Exception {
1:         if (started.compareAndSet(false, true)) {
1:             runner = new Thread(this, "ActiveMQ Transport Status Monitor: " + connector);
1: 
1:     public void stop() throws Exception {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CopyOnWriteArraySet;
1: import java.util.concurrent.atomic.AtomicBoolean;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:e2aad41
/////////////////////////////////////////////////////////////////////////
0:             runner=new Thread(this,"ActiveMQ Transport Status Monitor: "+connector);
commit:d2d1c6d
/////////////////////////////////////////////////////////////////////////
0:             TransportConnection connection=(TransportConnection) i.next();
0:             if(connection.isMarkedCandidate()){
1:                 connection.doMark();
1:                 collectionCandidates.add(connection);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArraySet;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.ThreadPriorities;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import java.util.Iterator;
0: import java.util.Set;
1: /**
1:  * Used to provide information on the status of the Connection
1:  * 
0:  * @version $Revision: 1.5 $
1:  */
0: public class TransportStatusDetector implements Service,Runnable{
0:     private static final Log log=LogFactory.getLog(TransportStatusDetector.class);
1:     private TransportConnector connector;
0:     private Set collectionCandidates=new CopyOnWriteArraySet();
0:     private AtomicBoolean started=new AtomicBoolean(false);
1:     private Thread runner;
0:     private int sweepInterval=5000;
1:     
0:     TransportStatusDetector(TransportConnector connector){
0:         this.connector=connector;
1:     }
1:     /**
1:      * @return Returns the sweepInterval.
1:      */
0:     public int getSweepInterval(){
1:         return sweepInterval;
1:     }
1:     
1:     /**
0:      *  The sweepInterval to set.
1:      * @param sweepInterval
1:      *           
1:      */
0:     public void setSweepInterval(int sweepInterval){
0:         this.sweepInterval=sweepInterval;
1:     }
1:     
0:     protected void doCollection(){
0:         for(Iterator i=collectionCandidates.iterator();i.hasNext();){
0:             TransportConnection tc=(TransportConnection) i.next();
0:             if(tc.isMarkedCandidate()){
0:                 if(tc.isBlockedCandidate()){
1:                     collectionCandidates.remove(tc);
1:                     doCollection(tc);
0:                 }else{
1:                     tc.doMark();
1:                 }
0:             }else{
1:                 collectionCandidates.remove(tc);
1:             }
1:         }
1:     }
0:     protected void doSweep(){
0:         for(Iterator i=connector.getConnections().iterator();i.hasNext();){
0:             ConnectionContext cc=(ConnectionContext) i.next();
0:             Connection connection=cc.getConnection();
0:             if(connection instanceof TransportConnection){
0:                 TransportConnection tc=(TransportConnection) connection;
0:                 if(tc.isMarkedCandidate()){
1:                     tc.doMark();
0:                     collectionCandidates.add(tc);
1:                 }
1:             }
1:         }
1:     }
0:     protected void doCollection(TransportConnection tc){
0:         log.warn("found a blocked client - stopping: "+tc);
0:         try{
1:             tc.stop();
0:         }catch(Exception e){
0:             log.error("Error stopping "+tc,e);
1:         }
1:     }
0:     public void run(){
0:         while(started.get()){
0:             try{
1:                 doCollection();
1:                 doSweep();
1:                 Thread.sleep(sweepInterval);
0:             }catch(Throwable e){
0:                 log.error("failed to complete a sweep for blocked clients",e);
1:             }
1:         }
1:     }
0:     public void start() throws Exception{
0:         if(started.compareAndSet(false,true)){
0:             runner=new Thread(this,"Transport Status Dector "+connector);
1:             runner.setDaemon(true);
1:             runner.setPriority(ThreadPriorities.BROKER_MANAGEMENT);
1:             runner.start();
1:         }
1:     }
0:     public void stop() throws Exception{
1:         started.set(false);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TransportStatusDetector.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:4d2b20b
/////////////////////////////////////////////////////////////////////////
1:         if (runner != null) {
1:             runner.join(getSweepInterval() * 5);
0:         }
============================================================================