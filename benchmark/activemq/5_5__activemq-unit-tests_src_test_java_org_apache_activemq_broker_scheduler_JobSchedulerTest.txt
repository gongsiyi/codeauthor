1:7ae2055: /**
1:7ae2055:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7ae2055:  * contributor license agreements.  See the NOTICE file distributed with
1:7ae2055:  * this work for additional information regarding copyright ownership.
1:7ae2055:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7ae2055:  * (the "License"); you may not use this file except in compliance with
1:7ae2055:  * the License.  You may obtain a copy of the License at
1:7ae2055:  *
1:7ae2055:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7ae2055:  *
1:7ae2055:  * Unless required by applicable law or agreed to in writing, software
1:7ae2055:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7ae2055:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ae2055:  * See the License for the specific language governing permissions and
1:7ae2055:  * limitations under the License.
1:7ae2055:  */
1:7ae2055: package org.apache.activemq.broker.scheduler;
22:7ae2055: 
1:7ae2055: import static org.junit.Assert.assertEquals;
1:7ae2055: import static org.junit.Assert.assertTrue;
1:739a13d: 
1:7ae2055: import java.io.File;
1:3d61acf: import java.util.Calendar;
1:c7c8e53: import java.util.List;
1:7ae2055: import java.util.concurrent.CountDownLatch;
1:7ae2055: import java.util.concurrent.TimeUnit;
1:739a13d: 
1:0484af1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1:1aab71b: import org.apache.activemq.util.ByteSequence;
1:af9a1f0: import org.apache.activemq.util.IOHelper;
1:7ae2055: import org.junit.After;
1:7ae2055: import org.junit.Before;
1:7ae2055: import org.junit.Test;
1:74846bb: import org.slf4j.Logger;
1:74846bb: import org.slf4j.LoggerFactory;
1:3d61acf: 
1:7ae2055: public class JobSchedulerTest {
1:74846bb: 
1:74846bb:     private static final Logger LOG = LoggerFactory.getLogger(JobSchedulerTest.class);
1:74846bb: 
1:7ae2055:     private JobSchedulerStore store;
1:7ae2055:     private JobScheduler scheduler;
1:c7c8e53: 
1:7ae2055:     @Test
1:7ae2055:     public void testAddLongStringByteSequence() throws Exception {
1:7ae2055:         final int COUNT = 10;
1:7ae2055:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:7ae2055:         scheduler.addListener(new JobListener() {
1:af9a1f0:             @Override
1:7ae2055:             public void scheduledJob(String id, ByteSequence job) {
1:7ae2055:                 latch.countDown();
4:7ae2055:             }
1:3d61acf: 
1:7ae2055:         });
1:7ae2055:         for (int i = 0; i < COUNT; i++) {
1:7ae2055:             String test = new String("test" + i);
1:e3154c3:             scheduler.schedule("id" + i, new ByteSequence(test.getBytes()), 1000);
1:7ae2055:         }
1:e3154c3:         latch.await(5, TimeUnit.SECONDS);
1:af9a1f0:         assertEquals(0, latch.getCount());
1:7ae2055:     }
1:3d61acf: 
1:7ae2055:     @Test
1:3d61acf:     public void testAddCronAndByteSequence() throws Exception {
1:3d61acf: 
1:3d61acf:         final CountDownLatch latch = new CountDownLatch(1);
1:3d61acf:         scheduler.addListener(new JobListener() {
1:af9a1f0:             @Override
1:3d61acf:             public void scheduledJob(String id, ByteSequence job) {
1:3d61acf:                 latch.countDown();
1:3d61acf:             }
1:3d61acf:         });
1:3d61acf: 
1:3d61acf:         Calendar current = Calendar.getInstance();
1:af9a1f0:         current.add(Calendar.MINUTE, 1);
1:af9a1f0:         int minutes = current.get(Calendar.MINUTE);
1:3d61acf:         int hour = current.get(Calendar.HOUR_OF_DAY);
1:3d61acf:         int day = current.get(Calendar.DAY_OF_WEEK) - 1;
1:3d61acf: 
1:3d61acf:         String cronTab = String.format("%d %d * * %d", minutes, hour, day);
1:3d61acf: 
1:3d61acf:         String str = new String("test1");
1:3d61acf:         scheduler.schedule("id:1", new ByteSequence(str.getBytes()), cronTab, 0, 0, 0);
1:3d61acf: 
1:49bb4bf:         // need a little slack so go over 60 seconds
1:49bb4bf:         assertTrue(latch.await(70, TimeUnit.SECONDS));
1:3d61acf:         assertEquals(0, latch.getCount());
1:3d61acf:     }
1:3d61acf: 
1:3d61acf:     @Test
1:7ae2055:     public void testAddLongLongIntStringByteSequence() throws Exception {
1:7ae2055:         final int COUNT = 10;
1:7ae2055:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:7ae2055:         scheduler.addListener(new JobListener() {
1:af9a1f0:             @Override
1:7ae2055:             public void scheduledJob(String id, ByteSequence job) {
1:7ae2055:                 latch.countDown();
1:7ae2055:             }
1:7ae2055:         });
1:e3154c3:         long time = 2000;
1:7ae2055:         for (int i = 0; i < COUNT; i++) {
1:7ae2055:             String test = new String("test" + i);
1:e3154c3:             scheduler.schedule("id" + i, new ByteSequence(test.getBytes()), "", time, 10, -1);
1:7ae2055:         }
1:7ae2055:         assertTrue(latch.getCount() == COUNT);
1:7ae2055:         latch.await(3000, TimeUnit.SECONDS);
2:7ae2055:         assertTrue(latch.getCount() == 0);
1:7ae2055:     }
1:c7c8e53: 
1:7ae2055:     @Test
1:7ae2055:     public void testAddStopThenDeliver() throws Exception {
1:7ae2055:         final int COUNT = 10;
1:7ae2055:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:af9a1f0:         long time = 2000;
1:7ae2055:         for (int i = 0; i < COUNT; i++) {
1:7ae2055:             String test = new String("test" + i);
1:e3154c3:             scheduler.schedule("id" + i, new ByteSequence(test.getBytes()), "", time, 1000, -1);
1:7ae2055:         }
1:7ae2055:         File directory = store.getDirectory();
1:7ae2055:         tearDown();
1:7ae2055:         startStore(directory);
1:7ae2055:         scheduler.addListener(new JobListener() {
1:af9a1f0:             @Override
1:7ae2055:             public void scheduledJob(String id, ByteSequence job) {
1:7ae2055:                 latch.countDown();
1:7ae2055:             }
1:7ae2055:         });
1:7ae2055:         assertTrue(latch.getCount() == COUNT);
1:7ae2055:         latch.await(3000, TimeUnit.SECONDS);
1:7ae2055:         assertTrue(latch.getCount() == 0);
1:7ae2055:     }
1:c7c8e53: 
1:7ae2055:     @Test
1:7ae2055:     public void testRemoveLong() throws Exception {
1:7ae2055:         final int COUNT = 10;
1:c7c8e53: 
1:739a13d:         long time = 60000;
1:7ae2055:         for (int i = 0; i < COUNT; i++) {
1:7ae2055:             String str = new String("test" + i);
1:e3154c3:             scheduler.schedule("id" + i, new ByteSequence(str.getBytes()), "", time, 1000, -1);
1:7ae2055:         }
1:af9a1f0: 
1:739a13d:         int size = scheduler.getAllJobs().size();
1:7ae2055:         assertEquals(size, COUNT);
1:af9a1f0: 
1:7ae2055:         long removeTime = scheduler.getNextScheduleTime();
1:7ae2055:         scheduler.remove(removeTime);
1:af9a1f0: 
1:af9a1f0:         // If all jobs are not started within the same second we need to call remove again
1:af9a1f0:         if (size != 0) {
1:af9a1f0:             removeTime = scheduler.getNextScheduleTime();
1:af9a1f0:             scheduler.remove(removeTime);
1:af9a1f0:         }
1:af9a1f0: 
1:739a13d:         size = scheduler.getAllJobs().size();
1:7ae2055:         assertEquals(0, size);
1:c7c8e53:     }
1:595e44c: 
1:c7c8e53:     @Test
1:c7c8e53:     public void testRemoveString() throws Exception {
1:c7c8e53:         final int COUNT = 10;
1:7ae2055:         final String test = "TESTREMOVE";
1:e3154c3:         long time = 20000;
1:af9a1f0: 
1:7ae2055:         for (int i = 0; i < COUNT; i++) {
1:7ae2055:             String str = new String("test" + i);
1:739a13d:             scheduler.schedule("id" + i, new ByteSequence(str.getBytes()), "", time, 1000, -1);
1:7ae2055:             if (i == COUNT / 2) {
1:739a13d:                 scheduler.schedule(test, new ByteSequence(test.getBytes()), "", time, 1000, -1);
1:c7c8e53:             }
1:c7c8e53:         }
1:595e44c: 
1:739a13d:         int size = scheduler.getAllJobs().size();
1:7ae2055:         assertEquals(size, COUNT + 1);
1:7ae2055:         scheduler.remove(test);
1:739a13d:         size = scheduler.getAllJobs().size();
1:7ae2055:         assertEquals(size, COUNT);
1:7ae2055:     }
1:c7c8e53: 
1:c7c8e53:     @Test
1:74846bb:     public void testGetExecutionCount() throws Exception {
1:74846bb:         final String jobId = "Job-1";
1:74846bb:         long time = 10000;
1:74846bb:         final CountDownLatch done = new CountDownLatch(10);
1:74846bb: 
1:74846bb:         String str = new String("test");
1:74846bb:         scheduler.schedule(jobId, new ByteSequence(str.getBytes()), "", time, 1000, 10);
1:74846bb: 
1:74846bb:         int size = scheduler.getAllJobs().size();
1:74846bb:         assertEquals(size, 1);
1:74846bb: 
1:74846bb:         scheduler.addListener(new JobListener() {
1:74846bb:             @Override
1:74846bb:             public void scheduledJob(String id, ByteSequence job) {
1:74846bb:                 LOG.info("Job exectued: {}", 11 - done.getCount());
1:74846bb:                 done.countDown();
1:74846bb:             }
1:74846bb:         });
1:74846bb: 
1:74846bb:         List<Job> jobs = scheduler.getNextScheduleJobs();
1:74846bb:         assertEquals(1, jobs.size());
1:74846bb:         Job job = jobs.get(0);
1:74846bb:         assertEquals(jobId, job.getJobId());
1:74846bb:         assertEquals(0, job.getExecutionCount());
1:74846bb:         assertTrue("Should have fired ten times.", done.await(60, TimeUnit.SECONDS));
1:74846bb:         // The job is not updated on the last firing as it is removed from the store following
1:74846bb:         // it's last execution so the count will always be one less than the max firings.
1:74846bb:         assertTrue(job.getExecutionCount() >= 9);
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:c7c8e53:     public void testgetAllJobs() throws Exception {
1:c7c8e53:         final int COUNT = 10;
1:c7c8e53:         final String ID = "id:";
1:af9a1f0:         long time = 20000;
1:af9a1f0: 
1:c7c8e53:         for (int i = 0; i < COUNT; i++) {
1:c7c8e53:             String str = new String("test" + i);
1:e3154c3:             scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), "", time, 10 + i, -1);
1:c7c8e53:         }
1:af9a1f0: 
2:c7c8e53:         List<Job> list = scheduler.getAllJobs();
1:e3154c3: 
1:c7c8e53:         assertEquals(list.size(), COUNT);
1:c7c8e53:         int count = 0;
2:c7c8e53:         for (Job job : list) {
2:c7c8e53:             assertEquals(job.getJobId(), ID + count);
2:c7c8e53:             count++;
1:c7c8e53:         }
1:c7c8e53:     }
1:e3154c3: 
1:c7c8e53:     @Test
1:c7c8e53:     public void testgetAllJobsInRange() throws Exception {
1:c7c8e53:         final int COUNT = 10;
1:c7c8e53:         final String ID = "id:";
1:e3154c3:         long start = 10000;
1:e3154c3: 
1:c7c8e53:         for (int i = 0; i < COUNT; i++) {
1:c7c8e53:             String str = new String("test" + i);
1:af9a1f0:             scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), "", start + (i * 1000), 10000 + i, 0);
1:c7c8e53:         }
1:af9a1f0: 
1:e3154c3:         start = System.currentTimeMillis();
1:af9a1f0:         long finish = start + 12000 + (COUNT * 1000);
1:c7c8e53:         List<Job> list = scheduler.getAllJobs(start, finish);
1:595e44c: 
1:af9a1f0:         assertEquals(COUNT, list.size());
1:c7c8e53:         int count = 0;
1:c7c8e53:         for (Job job : list) {
1:c7c8e53:             assertEquals(job.getJobId(), ID + count);
1:c7c8e53:             count++;
1:c7c8e53:         }
1:c7c8e53:     }
1:595e44c: 
1:7ae2055:     @Test
1:c7c8e53:     public void testRemoveAllJobsInRange() throws Exception {
1:7ae2055:         final int COUNT = 10;
1:c7c8e53:         final String ID = "id:";
1:e3154c3:         long start = 10000;
1:e3154c3: 
1:c7c8e53:         for (int i = 0; i < COUNT; i++) {
1:c7c8e53:             String str = new String("test" + i);
1:af9a1f0:             scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), "", start + (i * 1000), 10000 + i, 0);
1:c7c8e53:         }
1:e3154c3:         start = System.currentTimeMillis();
1:af9a1f0:         long finish = start + 12000 + (COUNT * 1000);
1:c7c8e53:         scheduler.removeAllJobs(start, finish);
1:e3154c3: 
1:e3154c3:         assertTrue(scheduler.getAllJobs().isEmpty());
1:c7c8e53:     }
1:c7c8e53: 
1:7ae2055:     @Before
1:7ae2055:     public void setUp() throws Exception {
1:595e44c:         File directory = new File("target/test/ScheduledJobsDB");
1:7ae2055:         IOHelper.mkdirs(directory);
1:7ae2055:         IOHelper.deleteChildren(directory);
1:7ae2055:         startStore(directory);
1:433912f:     }
1:c7c8e53: 
1:433912f:     protected JobSchedulerStore createJobSchedulerStore() throws Exception {
1:433912f:         return new JobSchedulerStoreImpl();
1:7ae2055:     }
1:c7c8e53: 
1:7ae2055:     protected void startStore(File directory) throws Exception {
1:433912f:         store = createJobSchedulerStore();
1:7ae2055:         store.setDirectory(directory);
1:7ae2055:         store.start();
1:7ae2055:         scheduler = store.getJobScheduler("test");
1:b3c1327:         scheduler.startDispatching();
1:7ae2055:     }
1:c7c8e53: 
1:7ae2055:     @After
1:7ae2055:     public void tearDown() throws Exception {
1:dd0c9c4:         scheduler.stopDispatching();
1:7ae2055:         store.stop();
1:7ae2055:     }
1:7ae2055: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:433912f
/////////////////////////////////////////////////////////////////////////
1:     }
1:     protected JobSchedulerStore createJobSchedulerStore() throws Exception {
1:         return new JobSchedulerStoreImpl();
1:         store = createJobSchedulerStore();
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JobSchedulerTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testGetExecutionCount() throws Exception {
1:         final String jobId = "Job-1";
1:         long time = 10000;
1:         final CountDownLatch done = new CountDownLatch(10);
1: 
1:         String str = new String("test");
1:         scheduler.schedule(jobId, new ByteSequence(str.getBytes()), "", time, 1000, 10);
1: 
1:         int size = scheduler.getAllJobs().size();
1:         assertEquals(size, 1);
1: 
1:         scheduler.addListener(new JobListener() {
1:             @Override
1:             public void scheduledJob(String id, ByteSequence job) {
1:                 LOG.info("Job exectued: {}", 11 - done.getCount());
1:                 done.countDown();
1:             }
1:         });
1: 
1:         List<Job> jobs = scheduler.getNextScheduleJobs();
1:         assertEquals(1, jobs.size());
1:         Job job = jobs.get(0);
1:         assertEquals(jobId, job.getJobId());
1:         assertEquals(0, job.getExecutionCount());
1:         assertTrue("Should have fired ten times.", done.await(60, TimeUnit.SECONDS));
1:         // The job is not updated on the last firing as it is removed from the store following
1:         // it's last execution so the count will always be one less than the max firings.
1:         assertTrue(job.getExecutionCount() >= 9);
1:     }
1: 
1:     @Test
commit:dd0c9c4
/////////////////////////////////////////////////////////////////////////
1:         scheduler.stopDispatching();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b3c1327
/////////////////////////////////////////////////////////////////////////
1:         scheduler.startDispatching();
commit:ef24cc9
commit:af9a1f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IOHelper;
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(0, latch.getCount());
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:         current.add(Calendar.MINUTE, 1);
1:         int minutes = current.get(Calendar.MINUTE);
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         long time = 2000;
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:         // If all jobs are not started within the same second we need to call remove again
1:         if (size != 0) {
1:             removeTime = scheduler.getNextScheduleTime();
1:             scheduler.remove(removeTime);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         long time = 20000;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), "", start + (i * 1000), 10000 + i, 0);
1: 
1:         long finish = start + 12000 + (COUNT * 1000);
1:         assertEquals(COUNT, list.size());
/////////////////////////////////////////////////////////////////////////
1:             scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), "", start + (i * 1000), 10000 + i, 0);
1:         long finish = start + 12000 + (COUNT * 1000);
/////////////////////////////////////////////////////////////////////////
commit:739a13d
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         long time = 60000;
1:         int size = scheduler.getAllJobs().size();
1:         size = scheduler.getAllJobs().size();
/////////////////////////////////////////////////////////////////////////
1:             scheduler.schedule("id" + i, new ByteSequence(str.getBytes()), "", time, 1000, -1);
1:                 scheduler.schedule(test, new ByteSequence(test.getBytes()), "", time, 1000, -1);
1:         int size = scheduler.getAllJobs().size();
1:         size = scheduler.getAllJobs().size();
commit:3d61acf
/////////////////////////////////////////////////////////////////////////
1: import java.util.Calendar;
/////////////////////////////////////////////////////////////////////////
1:     public void testAddCronAndByteSequence() throws Exception {
1: 
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         scheduler.addListener(new JobListener() {
1: 
1:             public void scheduledJob(String id, ByteSequence job) {
1:                 latch.countDown();
1:             }
1: 
1:         });
1: 
1:         Calendar current = Calendar.getInstance();
1: 
0:         int minutes = current.get(Calendar.MINUTE) + 1;
1:         int hour = current.get(Calendar.HOUR_OF_DAY);
1:         int day = current.get(Calendar.DAY_OF_WEEK) - 1;
1: 
1:         String cronTab = String.format("%d %d * * %d", minutes, hour, day);
1: 
1:         String str = new String("test1");
1:         scheduler.schedule("id:1", new ByteSequence(str.getBytes()), cronTab, 0, 0, 0);
1: 
0:         assertTrue(latch.await(60, TimeUnit.SECONDS));
1:         assertEquals(0, latch.getCount());
1:     }
1: 
1:     @Test
commit:595e44c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         File directory = new File("target/test/ScheduledJobsDB");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0484af1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
/////////////////////////////////////////////////////////////////////////
0:         store = new JobSchedulerStoreImpl();
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteSequence;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:49bb4bf
/////////////////////////////////////////////////////////////////////////
1:         // need a little slack so go over 60 seconds
1:         assertTrue(latch.await(70, TimeUnit.SECONDS));
author:Robert Davies
-------------------------------------------------------------------------------
commit:e3154c3
/////////////////////////////////////////////////////////////////////////
1:             scheduler.schedule("id" + i, new ByteSequence(test.getBytes()), 1000);
1:         latch.await(5, TimeUnit.SECONDS);
0:         assertEquals(0,latch.getCount());
/////////////////////////////////////////////////////////////////////////
1:         long time = 2000;
1:             scheduler.schedule("id" + i, new ByteSequence(test.getBytes()), "", time, 10, -1);
/////////////////////////////////////////////////////////////////////////
0:         long time =  2000;
1:             scheduler.schedule("id" + i, new ByteSequence(test.getBytes()), "", time, 1000, -1);
/////////////////////////////////////////////////////////////////////////
1:         long time = 20000;
1:             scheduler.schedule("id" + i, new ByteSequence(str.getBytes()), "", time, 1000, -1);
/////////////////////////////////////////////////////////////////////////
0:         long time = 20000;
0:             scheduler.schedule("id" + i, new ByteSequence(str.getBytes()), "", time, 10, -1);
0:                 scheduler.schedule(test, new ByteSequence(test.getBytes()), "", time, 10, -1);
/////////////////////////////////////////////////////////////////////////
0:         long time =  20000;
1:             scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), "", time, 10 + i, -1);
/////////////////////////////////////////////////////////////////////////
1:         long start = 10000;
1:            
0:                 scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), "", start + (i * 1000), 10000 + i, 0);
1:            
1:         start = System.currentTimeMillis();
0:         long finish = start + 12000+ (COUNT * 1000);
0:         assertEquals( COUNT,list.size());
/////////////////////////////////////////////////////////////////////////
1:         long start = 10000;
1:            
0:                 scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), "", start + (i * 1000), 10000 + i, 0);
1:            
1:         start = System.currentTimeMillis();
0:         long finish = start + 12000+ (COUNT * 1000);
1: 
1:         assertTrue(scheduler.getAllJobs().isEmpty());
commit:c7c8e53
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     public void testRemoveString() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testgetAllJobs() throws Exception {
1:         final int COUNT = 10;
1:         final String ID = "id:";
0:         final String test = "TEST";
0:         long time = System.currentTimeMillis() + 20000;
1:         for (int i = 0; i < COUNT; i++) {
1:             String str = new String("test" + i);
0:             scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), time, 10 + i, -1);
1:         }
1:         List<Job> list = scheduler.getAllJobs();
1: 
1:         assertEquals(list.size(), COUNT);
1:         int count = 0;
1:         for (Job job : list) {
1: 
1:             assertEquals(job.getJobId(), ID + count);
1:             count++;
1:         }
1:     }
1: 
1:     @Test
1:     public void testgetAllJobsInRange() throws Exception {
1:         final int COUNT = 10;
1:         final String ID = "id:";
0:         final String test = "TEST";
0:         long start = System.currentTimeMillis() + 10000;
1: 
0:         long time = System.currentTimeMillis() + 20000;
1:         for (int i = 0; i < COUNT; i++) {
1:             String str = new String("test" + i);
0:             if (i < (COUNT - 2)) {
0:                 scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), start + (i * 1000), 10000 + i, 0);
0:             } else {
0:                 scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), start + start, 10000 + i, 0);
1:             }
1:         }
0:         long finish = start + ((COUNT - 2) * 1000);
1:         List<Job> list = scheduler.getAllJobs(start, finish);
1: 
0:         assertEquals(list.size(), COUNT - 2);
1:         int count = 0;
1:         for (Job job : list) {
1: 
1:             assertEquals(job.getJobId(), ID + count);
1:             count++;
1:         }
1:     }
1: 
1:     @Test
1:     public void testRemoveAllJobsInRange() throws Exception {
1:         final int COUNT = 10;
1:         final String ID = "id:";
0:         final String test = "TEST";
0:         long start = System.currentTimeMillis() + 10000;
1: 
0:         long time = System.currentTimeMillis() + 20000;
1:         for (int i = 0; i < COUNT; i++) {
1:             String str = new String("test" + i);
0:             if (i < (COUNT - 2)) {
0:                 scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), start + (i * 1000), 10000 + i, 0);
0:             } else {
0:                 scheduler.schedule(ID + i, new ByteSequence(str.getBytes()), start + start, 10000 + i, 0);
1:             }
1:         }
0:         long finish = start + ((COUNT - 2) * 1000);
1:         scheduler.removeAllJobs(start, finish);
1:         List<Job> list = scheduler.getAllJobs();
0:         assertEquals(list.size(), 2);
0:         int count = COUNT - 2;
1:         for (Job job : list) {
1:             assertEquals(job.getJobId(), ID + count);
1:             count++;
1:         }
1:     }
1: 
commit:7ae2055
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import java.io.File;
0: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
0: import org.apache.activemq.util.IOHelper;
0: import org.apache.kahadb.util.ByteSequence;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class JobSchedulerTest {
1: 
1:     private JobSchedulerStore store;
1:     private JobScheduler scheduler;
1: 
1:     @Test
1:     public void testAddLongStringByteSequence() throws Exception {
1:         final int COUNT = 10;
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:         scheduler.addListener(new JobListener() {
1: 
1:             public void scheduledJob(String id, ByteSequence job) {
1:                 latch.countDown();
1:             }
1: 
1:         });
1:         for (int i = 0; i < COUNT; i++) {
1:             String test = new String("test" + i);
0:             scheduler.schedule("id" + i, new ByteSequence(test.getBytes()), 10);
1:         }
0:         latch.await(1, TimeUnit.SECONDS);
1:         assertTrue(latch.getCount() == 0);
1:     }
1: 
1:     @Test
1:     public void testAddLongLongIntStringByteSequence() throws Exception {
1:         final int COUNT = 10;
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:         scheduler.addListener(new JobListener() {
1: 
1:             public void scheduledJob(String id, ByteSequence job) {
1:                 latch.countDown();
1:             }
1: 
1:         });
0:         long time = System.currentTimeMillis() + 2000;
1:         for (int i = 0; i < COUNT; i++) {
1:             String test = new String("test" + i);
0:             scheduler.schedule("id" + i, new ByteSequence(test.getBytes()), time, 10, -1);
1:         }
1:         assertTrue(latch.getCount() == COUNT);
1:         latch.await(3000, TimeUnit.SECONDS);
1:         assertTrue(latch.getCount() == 0);
1:     }
1: 
1:     @Test
1:     public void testAddStopThenDeliver() throws Exception {
1:         final int COUNT = 10;
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
0:         long time = System.currentTimeMillis() + 2000;
1:         for (int i = 0; i < COUNT; i++) {
1:             String test = new String("test" + i);
0:             scheduler.schedule("id" + i, new ByteSequence(test.getBytes()), time, 10, -1);
1:         }
1:         File directory = store.getDirectory();
1:         tearDown();
1:         startStore(directory);
1:         scheduler.addListener(new JobListener() {
1: 
1:             public void scheduledJob(String id, ByteSequence job) {
1:                 latch.countDown();
1:             }
1: 
1:         });
1:         assertTrue(latch.getCount() == COUNT);
1:         latch.await(3000, TimeUnit.SECONDS);
1:         assertTrue(latch.getCount() == 0);
1:     }
1: 
1:     @Test
1:     public void testRemoveLong() throws Exception {
1:         final int COUNT = 10;
1: 
0:         long time = System.currentTimeMillis() + 20000;
1:         for (int i = 0; i < COUNT; i++) {
1:             String str = new String("test" + i);
0:             scheduler.schedule("id" + i, new ByteSequence(str.getBytes()), time, 10, -1);
1: 
1:         }
0:         int size = scheduler.getNextScheduleJobs().size();
1:         assertEquals(size, COUNT);
1:         long removeTime = scheduler.getNextScheduleTime();
1:         scheduler.remove(removeTime);
0:         size = scheduler.getNextScheduleJobs().size();
1:         assertEquals(0, size);
1:     }
1: 
1:     @Test
0:     public void testRemoveString() throws IOException {
1:         final int COUNT = 10;
1:         final String test = "TESTREMOVE";
0:         long time = System.currentTimeMillis() + 20000;
1:         for (int i = 0; i < COUNT; i++) {
1:             String str = new String("test" + i);
0:             scheduler.schedule("id" + i, new ByteSequence(str.getBytes()), time, 10, -1);
1:             if (i == COUNT / 2) {
0:                 scheduler.schedule(test, new ByteSequence(test.getBytes()), time, 10, -1);
1:             }
1:         }
1: 
0:         int size = scheduler.getNextScheduleJobs().size();
1:         assertEquals(size, COUNT + 1);
1:         scheduler.remove(test);
0:         size = scheduler.getNextScheduleJobs().size();
1:         assertEquals(size, COUNT);
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
0:         File directory = new File("target/test/ScheduledDB");
1:         IOHelper.mkdirs(directory);
1:         IOHelper.deleteChildren(directory);
1:         startStore(directory);
1: 
1:     }
1: 
1:     protected void startStore(File directory) throws Exception {
0:         store = new JobSchedulerStore();
1:         store.setDirectory(directory);
1:         store.start();
1:         scheduler = store.getJobScheduler("test");
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         store.stop();
1:     }
1: 
1: }
============================================================================