1:44488a5: /**
1:44488a5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:44488a5:  * contributor license agreements.  See the NOTICE file distributed with
1:44488a5:  * this work for additional information regarding copyright ownership.
1:44488a5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:44488a5:  * (the "License"); you may not use this file except in compliance with
1:44488a5:  * the License.  You may obtain a copy of the License at
1:44488a5:  *
1:44488a5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:44488a5:  *
1:44488a5:  * Unless required by applicable law or agreed to in writing, software
1:44488a5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44488a5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44488a5:  * See the License for the specific language governing permissions and
1:44488a5:  * limitations under the License.
1:44488a5:  */
1:44488a5: package org.apache.activemq.bugs;
1:44488a5: 
1:44488a5: import java.util.ArrayList;
1:44488a5: import java.util.List;
1:44488a5: import java.util.concurrent.CountDownLatch;
1:44488a5: import java.util.concurrent.TimeUnit;
1:44488a5: import java.util.concurrent.atomic.AtomicInteger;
1:44488a5: import javax.jms.Connection;
1:44488a5: import javax.jms.DeliveryMode;
1:44488a5: import javax.jms.JMSException;
1:44488a5: import javax.jms.Message;
1:44488a5: import javax.jms.MessageConsumer;
1:44488a5: import javax.jms.MessageListener;
1:44488a5: import javax.jms.MessageProducer;
1:44488a5: import javax.jms.Session;
1:44488a5: import javax.jms.TextMessage;
1:44488a5: import org.apache.activemq.ActiveMQConnectionFactory;
1:44488a5: import org.apache.activemq.broker.BrokerService;
1:44488a5: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1:44488a5: import org.apache.activemq.broker.region.policy.OldestMessageEvictionStrategy;
1:44488a5: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:44488a5: import org.apache.activemq.broker.region.policy.PolicyMap;
1:44488a5: import org.apache.activemq.command.ActiveMQTopic;
1:44488a5: import org.junit.Assert;
1:44488a5: import org.junit.Test;
1:44488a5: 
1:44488a5: /**
1:44488a5:  * @author James Furness
1:44488a5:  *         https://issues.apache.org/jira/browse/AMQ-3607
1:44488a5:  */
1:44488a5: public class ActiveMQSlowConsumerManualTest {
1:44488a5:     private static final int PORT = 12345;
1:44488a5:     private static final ActiveMQTopic TOPIC = new ActiveMQTopic("TOPIC");
1:44488a5:     private static final String URL = "nio://localhost:" + PORT + "?socket.tcpNoDelay=true";
1:44488a5: 
1:44488a5:     @Test(timeout = 60000)
1:44488a5:     public void testDefaultSettings() throws Exception {
1:44488a5:         runTest("testDefaultSettings", 30, -1, -1, false, false, false, false);
1:44488a5:     }
1:44488a5: 
1:44488a5:     @Test(timeout = 60000)
1:44488a5:     public void testDefaultSettingsWithOptimiseAcknowledge() throws Exception {
1:44488a5:         runTest("testDefaultSettingsWithOptimiseAcknowledge", 30, -1, -1, false, false, true, false);
1:44488a5:     }
1:44488a5: 
1:44488a5:     @Test(timeout = 60000)
1:44488a5:     public void testBounded() throws Exception {
1:44488a5:         runTest("testBounded", 30, 5, 25, false, false, false, false);
1:44488a5:     }
1:44488a5: 
1:44488a5:     @Test(timeout = 60000)
1:44488a5:     public void testBoundedWithOptimiseAcknowledge() throws Exception {
1:44488a5:         runTest("testBoundedWithOptimiseAcknowledge", 30, 5, 25, false, false, true, false);
1:44488a5:     }
1:44488a5: 
1:44488a5:     public void runTest(String name, int sendMessageCount, int prefetchLimit, int messageLimit, boolean evictOldestMessage, boolean disableFlowControl, boolean optimizeAcknowledge, boolean persistent) throws Exception {
1:44488a5:         BrokerService broker = createBroker(persistent);
1:44488a5:         broker.setDestinationPolicy(buildPolicy(TOPIC, prefetchLimit, messageLimit, evictOldestMessage, disableFlowControl));
1:44488a5:         broker.start();
1:44488a5: 
1:44488a5:         // Slow consumer
1:44488a5:         Session slowConsumerSession = buildSession("SlowConsumer", URL, optimizeAcknowledge);
1:44488a5:         final CountDownLatch blockSlowConsumer = new CountDownLatch(1);
1:44488a5:         final AtomicInteger slowConsumerReceiveCount = new AtomicInteger();
1:44488a5:         final List<Integer> slowConsumerReceived = sendMessageCount <= 1000 ? new ArrayList<Integer>() : null;
1:44488a5:         MessageConsumer slowConsumer = createSubscriber(slowConsumerSession,
1:44488a5:                 new MessageListener() {
1:44488a5:                     @Override
1:44488a5:                     public void onMessage(Message message) {
1:44488a5:                         try {
1:44488a5:                             slowConsumerReceiveCount.incrementAndGet();
1:44488a5:                             int count = Integer.parseInt(((TextMessage) message).getText());
1:44488a5:                             if (slowConsumerReceived != null) slowConsumerReceived.add(count);
1:44488a5:                             if (count % 10000 == 0) System.out.println("SlowConsumer: Receive " + count);
1:44488a5:                             blockSlowConsumer.await();
1:44488a5:                         } catch (Exception ignored) {
1:44488a5:                         }
1:44488a5:                     }
1:44488a5:                 }
1:44488a5:         );
1:44488a5: 
1:44488a5:         // Fast consumer
1:44488a5:         Session fastConsumerSession = buildSession("FastConsumer", URL, optimizeAcknowledge);
1:44488a5:         final AtomicInteger fastConsumerReceiveCount = new AtomicInteger();
1:44488a5:         final List<Integer> fastConsumerReceived = sendMessageCount <= 1000 ? new ArrayList<Integer>() : null;
1:44488a5:         MessageConsumer fastConsumer = createSubscriber(fastConsumerSession,
1:44488a5:                 new MessageListener() {
1:44488a5:                     @Override
1:44488a5:                     public void onMessage(Message message) {
1:44488a5:                         try {
1:44488a5:                             fastConsumerReceiveCount.incrementAndGet();
1:44488a5:                             TimeUnit.MILLISECONDS.sleep(5);
1:44488a5:                             int count = Integer.parseInt(((TextMessage) message).getText());
1:44488a5:                             if (fastConsumerReceived != null) fastConsumerReceived.add(count);
1:44488a5:                             if (count % 10000 == 0) System.out.println("FastConsumer: Receive " + count);
1:44488a5:                         } catch (Exception ignored) {
1:44488a5:                         }
1:44488a5:                     }
1:44488a5:                 }
1:44488a5:         );
1:44488a5: 
1:44488a5:         // Wait for consumers to connect
1:44488a5:         Thread.sleep(500);
1:44488a5: 
1:44488a5:         // Publisher
1:44488a5:         AtomicInteger sentCount = new AtomicInteger();
1:44488a5:         List<Integer> sent = sendMessageCount <= 1000 ? new ArrayList<Integer>() : null;
1:44488a5:         Session publisherSession = buildSession("Publisher", URL, optimizeAcknowledge);
1:44488a5:         MessageProducer publisher = createPublisher(publisherSession);
1:44488a5:         for (int i = 0; i < sendMessageCount; i++) {
1:44488a5:             sentCount.incrementAndGet();
1:44488a5:             if (sent != null) sent.add(i);
1:44488a5:             if (i % 10000 == 0) System.out.println("Publisher: Send " + i);
1:44488a5:             publisher.send(publisherSession.createTextMessage(Integer.toString(i)));
1:44488a5:         }
1:44488a5: 
1:44488a5:         // Wait for messages to arrive
1:44488a5:         Thread.sleep(500);
1:44488a5: 
1:44488a5:         System.out.println(name + ": Publisher Sent: " + sentCount + " " + sent);
1:44488a5:         System.out.println(name + ": Whilst slow consumer blocked:");
1:44488a5:         System.out.println("\t\t- SlowConsumer Received: " + slowConsumerReceiveCount + " " + slowConsumerReceived);
1:44488a5:         System.out.println("\t\t- FastConsumer Received: " + fastConsumerReceiveCount + " " + fastConsumerReceived);
1:44488a5: 
1:44488a5:         // Unblock slow consumer
1:44488a5:         blockSlowConsumer.countDown();
1:44488a5: 
1:44488a5:         // Wait for messages to arrive
1:44488a5:         Thread.sleep(500);
1:44488a5: 
1:44488a5:         System.out.println(name + ": After slow consumer unblocked:");
1:44488a5:         System.out.println("\t\t- SlowConsumer Received: " + slowConsumerReceiveCount + " " + slowConsumerReceived);
1:44488a5:         System.out.println("\t\t- FastConsumer Received: " + fastConsumerReceiveCount + " " + fastConsumerReceived);
1:44488a5:         System.out.println();
1:44488a5: 
1:44488a5:         publisher.close();
1:44488a5:         publisherSession.close();
1:44488a5:         slowConsumer.close();
1:44488a5:         slowConsumerSession.close();
1:44488a5:         fastConsumer.close();
1:44488a5:         fastConsumerSession.close();
1:44488a5:         broker.stop();
1:44488a5: 
1:44488a5:         Assert.assertEquals("Fast consumer missed messages whilst slow consumer was blocking", sent, fastConsumerReceived);
1:44488a5:         // this is too timine dependent  as sometimes there is message eviction, would need to check the dlq
1:44488a5:         //Assert.assertEquals("Slow consumer received incorrect message count", Math.min(sendMessageCount, prefetchLimit + (messageLimit > 0 ? messageLimit : Integer.MAX_VALUE)), slowConsumerReceived.size());
1:44488a5:     }
1:44488a5: 
1:44488a5:     private static BrokerService createBroker(boolean persistent) throws Exception {
1:44488a5:         BrokerService broker = new BrokerService();
1:44488a5:         broker.setBrokerName("TestBroker");
1:44488a5:         broker.setPersistent(persistent);
1:44488a5:         broker.addConnector(URL);
1:44488a5:         return broker;
1:44488a5:     }
1:44488a5: 
1:44488a5:     private static MessageConsumer createSubscriber(Session session, MessageListener messageListener) throws JMSException {
1:44488a5:         MessageConsumer consumer = session.createConsumer(TOPIC);
1:44488a5:         consumer.setMessageListener(messageListener);
1:44488a5:         return consumer;
1:44488a5:     }
1:44488a5: 
1:44488a5:     private static MessageProducer createPublisher(Session session) throws JMSException {
1:44488a5:         MessageProducer producer = session.createProducer(TOPIC);
1:44488a5:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:44488a5:         return producer;
1:44488a5:     }
1:44488a5: 
1:44488a5:     private static Session buildSession(String clientId, String url, boolean optimizeAcknowledge) throws JMSException {
1:44488a5:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
1:44488a5: 
1:44488a5:         connectionFactory.setCopyMessageOnSend(false);
1:44488a5:         connectionFactory.setDisableTimeStampsByDefault(true);
1:44488a5:         connectionFactory.setOptimizeAcknowledge(optimizeAcknowledge);
1:44488a5:         if (optimizeAcknowledge) {
1:44488a5:             connectionFactory.setOptimizeAcknowledgeTimeOut(1);
1:44488a5:         }
1:44488a5: 
1:44488a5:         Connection connection = connectionFactory.createConnection();
1:44488a5:         connection.setClientID(clientId);
1:44488a5: 
1:44488a5:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:44488a5: 
1:44488a5:         connection.start();
1:44488a5: 
1:44488a5:         return session;
1:44488a5:     }
1:44488a5: 
1:44488a5:     private static PolicyMap buildPolicy(ActiveMQTopic topic, int prefetchLimit, int messageLimit, boolean evictOldestMessage, boolean disableFlowControl) {
1:44488a5:         PolicyMap policyMap = new PolicyMap();
1:44488a5: 
1:44488a5:         PolicyEntry policyEntry = new PolicyEntry();
1:44488a5: 
1:44488a5:         if (evictOldestMessage) {
1:44488a5:             policyEntry.setMessageEvictionStrategy(new OldestMessageEvictionStrategy());
1:44488a5:         }
1:44488a5: 
1:44488a5:         if (disableFlowControl) {
1:44488a5:             policyEntry.setProducerFlowControl(false);
1:44488a5:         }
1:44488a5: 
1:44488a5:         if (prefetchLimit > 0) {
1:44488a5:             policyEntry.setTopicPrefetch(prefetchLimit);
1:44488a5:         }
1:44488a5: 
1:44488a5:         if (messageLimit > 0) {
1:44488a5:             ConstantPendingMessageLimitStrategy messageLimitStrategy = new ConstantPendingMessageLimitStrategy();
1:44488a5:             messageLimitStrategy.setLimit(messageLimit);
1:44488a5:             policyEntry.setPendingMessageLimitStrategy(messageLimitStrategy);
1:44488a5:         }
1:44488a5: 
1:44488a5:         policyMap.put(topic, policyEntry);
1:44488a5: 
1:44488a5:         return policyMap;
1:44488a5:     }
1:44488a5: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:44488a5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1: import org.apache.activemq.broker.region.policy.OldestMessageEvictionStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: /**
1:  * @author James Furness
1:  *         https://issues.apache.org/jira/browse/AMQ-3607
1:  */
1: public class ActiveMQSlowConsumerManualTest {
1:     private static final int PORT = 12345;
1:     private static final ActiveMQTopic TOPIC = new ActiveMQTopic("TOPIC");
1:     private static final String URL = "nio://localhost:" + PORT + "?socket.tcpNoDelay=true";
1: 
1:     @Test(timeout = 60000)
1:     public void testDefaultSettings() throws Exception {
1:         runTest("testDefaultSettings", 30, -1, -1, false, false, false, false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDefaultSettingsWithOptimiseAcknowledge() throws Exception {
1:         runTest("testDefaultSettingsWithOptimiseAcknowledge", 30, -1, -1, false, false, true, false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testBounded() throws Exception {
1:         runTest("testBounded", 30, 5, 25, false, false, false, false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testBoundedWithOptimiseAcknowledge() throws Exception {
1:         runTest("testBoundedWithOptimiseAcknowledge", 30, 5, 25, false, false, true, false);
1:     }
1: 
1:     public void runTest(String name, int sendMessageCount, int prefetchLimit, int messageLimit, boolean evictOldestMessage, boolean disableFlowControl, boolean optimizeAcknowledge, boolean persistent) throws Exception {
1:         BrokerService broker = createBroker(persistent);
1:         broker.setDestinationPolicy(buildPolicy(TOPIC, prefetchLimit, messageLimit, evictOldestMessage, disableFlowControl));
1:         broker.start();
1: 
1:         // Slow consumer
1:         Session slowConsumerSession = buildSession("SlowConsumer", URL, optimizeAcknowledge);
1:         final CountDownLatch blockSlowConsumer = new CountDownLatch(1);
1:         final AtomicInteger slowConsumerReceiveCount = new AtomicInteger();
1:         final List<Integer> slowConsumerReceived = sendMessageCount <= 1000 ? new ArrayList<Integer>() : null;
1:         MessageConsumer slowConsumer = createSubscriber(slowConsumerSession,
1:                 new MessageListener() {
1:                     @Override
1:                     public void onMessage(Message message) {
1:                         try {
1:                             slowConsumerReceiveCount.incrementAndGet();
1:                             int count = Integer.parseInt(((TextMessage) message).getText());
1:                             if (slowConsumerReceived != null) slowConsumerReceived.add(count);
1:                             if (count % 10000 == 0) System.out.println("SlowConsumer: Receive " + count);
1:                             blockSlowConsumer.await();
1:                         } catch (Exception ignored) {
1:                         }
1:                     }
1:                 }
1:         );
1: 
1:         // Fast consumer
1:         Session fastConsumerSession = buildSession("FastConsumer", URL, optimizeAcknowledge);
1:         final AtomicInteger fastConsumerReceiveCount = new AtomicInteger();
1:         final List<Integer> fastConsumerReceived = sendMessageCount <= 1000 ? new ArrayList<Integer>() : null;
1:         MessageConsumer fastConsumer = createSubscriber(fastConsumerSession,
1:                 new MessageListener() {
1:                     @Override
1:                     public void onMessage(Message message) {
1:                         try {
1:                             fastConsumerReceiveCount.incrementAndGet();
1:                             TimeUnit.MILLISECONDS.sleep(5);
1:                             int count = Integer.parseInt(((TextMessage) message).getText());
1:                             if (fastConsumerReceived != null) fastConsumerReceived.add(count);
1:                             if (count % 10000 == 0) System.out.println("FastConsumer: Receive " + count);
1:                         } catch (Exception ignored) {
1:                         }
1:                     }
1:                 }
1:         );
1: 
1:         // Wait for consumers to connect
1:         Thread.sleep(500);
1: 
1:         // Publisher
1:         AtomicInteger sentCount = new AtomicInteger();
1:         List<Integer> sent = sendMessageCount <= 1000 ? new ArrayList<Integer>() : null;
1:         Session publisherSession = buildSession("Publisher", URL, optimizeAcknowledge);
1:         MessageProducer publisher = createPublisher(publisherSession);
1:         for (int i = 0; i < sendMessageCount; i++) {
1:             sentCount.incrementAndGet();
1:             if (sent != null) sent.add(i);
1:             if (i % 10000 == 0) System.out.println("Publisher: Send " + i);
1:             publisher.send(publisherSession.createTextMessage(Integer.toString(i)));
1:         }
1: 
1:         // Wait for messages to arrive
1:         Thread.sleep(500);
1: 
1:         System.out.println(name + ": Publisher Sent: " + sentCount + " " + sent);
1:         System.out.println(name + ": Whilst slow consumer blocked:");
1:         System.out.println("\t\t- SlowConsumer Received: " + slowConsumerReceiveCount + " " + slowConsumerReceived);
1:         System.out.println("\t\t- FastConsumer Received: " + fastConsumerReceiveCount + " " + fastConsumerReceived);
1: 
1:         // Unblock slow consumer
1:         blockSlowConsumer.countDown();
1: 
1:         // Wait for messages to arrive
1:         Thread.sleep(500);
1: 
1:         System.out.println(name + ": After slow consumer unblocked:");
1:         System.out.println("\t\t- SlowConsumer Received: " + slowConsumerReceiveCount + " " + slowConsumerReceived);
1:         System.out.println("\t\t- FastConsumer Received: " + fastConsumerReceiveCount + " " + fastConsumerReceived);
1:         System.out.println();
1: 
1:         publisher.close();
1:         publisherSession.close();
1:         slowConsumer.close();
1:         slowConsumerSession.close();
1:         fastConsumer.close();
1:         fastConsumerSession.close();
1:         broker.stop();
1: 
1:         Assert.assertEquals("Fast consumer missed messages whilst slow consumer was blocking", sent, fastConsumerReceived);
1:         // this is too timine dependent  as sometimes there is message eviction, would need to check the dlq
1:         //Assert.assertEquals("Slow consumer received incorrect message count", Math.min(sendMessageCount, prefetchLimit + (messageLimit > 0 ? messageLimit : Integer.MAX_VALUE)), slowConsumerReceived.size());
1:     }
1: 
1:     private static BrokerService createBroker(boolean persistent) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("TestBroker");
1:         broker.setPersistent(persistent);
1:         broker.addConnector(URL);
1:         return broker;
1:     }
1: 
1:     private static MessageConsumer createSubscriber(Session session, MessageListener messageListener) throws JMSException {
1:         MessageConsumer consumer = session.createConsumer(TOPIC);
1:         consumer.setMessageListener(messageListener);
1:         return consumer;
1:     }
1: 
1:     private static MessageProducer createPublisher(Session session) throws JMSException {
1:         MessageProducer producer = session.createProducer(TOPIC);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         return producer;
1:     }
1: 
1:     private static Session buildSession(String clientId, String url, boolean optimizeAcknowledge) throws JMSException {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
1: 
1:         connectionFactory.setCopyMessageOnSend(false);
1:         connectionFactory.setDisableTimeStampsByDefault(true);
1:         connectionFactory.setOptimizeAcknowledge(optimizeAcknowledge);
1:         if (optimizeAcknowledge) {
1:             connectionFactory.setOptimizeAcknowledgeTimeOut(1);
1:         }
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(clientId);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         connection.start();
1: 
1:         return session;
1:     }
1: 
1:     private static PolicyMap buildPolicy(ActiveMQTopic topic, int prefetchLimit, int messageLimit, boolean evictOldestMessage, boolean disableFlowControl) {
1:         PolicyMap policyMap = new PolicyMap();
1: 
1:         PolicyEntry policyEntry = new PolicyEntry();
1: 
1:         if (evictOldestMessage) {
1:             policyEntry.setMessageEvictionStrategy(new OldestMessageEvictionStrategy());
1:         }
1: 
1:         if (disableFlowControl) {
1:             policyEntry.setProducerFlowControl(false);
1:         }
1: 
1:         if (prefetchLimit > 0) {
1:             policyEntry.setTopicPrefetch(prefetchLimit);
1:         }
1: 
1:         if (messageLimit > 0) {
1:             ConstantPendingMessageLimitStrategy messageLimitStrategy = new ConstantPendingMessageLimitStrategy();
1:             messageLimitStrategy.setLimit(messageLimit);
1:             policyEntry.setPendingMessageLimitStrategy(messageLimitStrategy);
1:         }
1: 
1:         policyMap.put(topic, policyEntry);
1: 
1:         return policyMap;
1:     }
1: }
============================================================================