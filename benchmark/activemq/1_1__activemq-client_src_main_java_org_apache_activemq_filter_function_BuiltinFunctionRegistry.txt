1:bf07137: /**
1:bf07137:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bf07137:  * contributor license agreements.  See the NOTICE file distributed with
1:bf07137:  * this work for additional information regarding copyright ownership.
1:bf07137:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bf07137:  * (the "License"); you may not use this file except in compliance with
1:bf07137:  * the License.  You may obtain a copy of the License at
1:bf07137:  *
1:bf07137:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bf07137:  *
1:bf07137:  * Unless required by applicable law or agreed to in writing, software
1:bf07137:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf07137:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf07137:  * See the License for the specific language governing permissions and
1:bf07137:  * limitations under the License.
1:bf07137:  */
1:bf07137: package org.apache.activemq.filter.function;
1:bf07137: 
1:bf07137: import org.apache.activemq.filter.FunctionCallExpression;
1:bf07137: 
1:bf07137: /**
1:bf07137:  * Registry of built-in functions.  Add built-in functions to this list to make sure they are registered at startup.
1:bf07137:  * <p/>
1:bf07137:  * Custom add-ons that are not built-in to the core ActiveMQ should not be listed here.
1:bf07137:  * Use FunctionCallExpression.registerFunction() directly.
1:bf07137:  */
1:bf07137: 
1:bf07137: public class BuiltinFunctionRegistry {
1:bf07137:     public static void register() {
1:bf07137:         FunctionCallExpression.registerFunction("INLIST", new inListFunction());
1:bf07137:         FunctionCallExpression.registerFunction("MAKELIST", new makeListFunction());
1:bf07137:         FunctionCallExpression.registerFunction("REGEX", new regexMatchFunction());
1:bf07137:         FunctionCallExpression.registerFunction("REPLACE", new replaceFunction());
1:bf07137:         FunctionCallExpression.registerFunction("SPLIT", new splitFunction());
1:bf07137:     }
1:bf07137: }
1:bf07137: 
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter.function;
1: 
1: import org.apache.activemq.filter.FunctionCallExpression;
1: 
1: /**
1:  * Registry of built-in functions.  Add built-in functions to this list to make sure they are registered at startup.
1:  * <p/>
1:  * Custom add-ons that are not built-in to the core ActiveMQ should not be listed here.
1:  * Use FunctionCallExpression.registerFunction() directly.
1:  */
1: 
1: public class BuiltinFunctionRegistry {
1:     public static void register() {
1:         FunctionCallExpression.registerFunction("INLIST", new inListFunction());
1:         FunctionCallExpression.registerFunction("MAKELIST", new makeListFunction());
1:         FunctionCallExpression.registerFunction("REGEX", new regexMatchFunction());
1:         FunctionCallExpression.registerFunction("REPLACE", new replaceFunction());
1:         FunctionCallExpression.registerFunction("SPLIT", new splitFunction());
1:     }
1: }
1: 
============================================================================