1:aad7e73: /**
1:aad7e73:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:aad7e73:  * contributor license agreements.  See the NOTICE file distributed with
1:aad7e73:  * this work for additional information regarding copyright ownership.
1:aad7e73:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:aad7e73:  * (the "License"); you may not use this file except in compliance with
1:aad7e73:  * the License.  You may obtain a copy of the License at
1:aad7e73:  *
1:aad7e73:  *      http://www.apache.org/licenses/LICENSE-2.0
1:aad7e73:  *
1:aad7e73:  * Unless required by applicable law or agreed to in writing, software
1:aad7e73:  * distributed under the License is distributed on an "AS IS" BASIS,
1:aad7e73:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aad7e73:  * See the License for the specific language governing permissions and
1:aad7e73:  * limitations under the License.
1:aad7e73:  */
1:aad7e73: package org.apache.activemq.bugs;
4:aad7e73: 
1:a8da85f: import static org.junit.Assert.assertEquals;
1:a8da85f: import static org.junit.Assert.assertTrue;
1:a8da85f: 
1:aad7e73: import javax.jms.Connection;
1:aad7e73: import javax.jms.ConnectionFactory;
1:aad7e73: import javax.jms.JMSException;
1:aad7e73: import javax.jms.Message;
1:aad7e73: import javax.jms.MessageConsumer;
1:aad7e73: import javax.jms.MessageProducer;
1:aad7e73: import javax.jms.Queue;
1:aad7e73: import javax.jms.Session;
1:aad7e73: import javax.jms.TextMessage;
1:aad7e73: import javax.management.MalformedObjectNameException;
1:aad7e73: import javax.management.ObjectName;
1:a8da85f: 
1:aad7e73: import org.apache.activemq.ActiveMQConnectionFactory;
1:aad7e73: import org.apache.activemq.broker.BrokerService;
1:aad7e73: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:aad7e73: import org.junit.After;
1:aad7e73: import org.junit.Before;
1:aad7e73: import org.junit.Test;
1:a8da85f: import org.slf4j.Logger;
1:a8da85f: import org.slf4j.LoggerFactory;
1:aad7e73: 
1:aad7e73: public class AMQ3145Test {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3145Test.class);
1:aad7e73:     private final String MESSAGE_TEXT = new String(new byte[1024]);
1:aad7e73:     BrokerService broker;
1:aad7e73:     ConnectionFactory factory;
1:aad7e73:     Connection connection;
1:aad7e73:     Session session;
1:aad7e73:     Queue queue;
1:aad7e73:     MessageConsumer consumer;
1:aad7e73: 
1:aad7e73:     @Before
1:aad7e73:     public void createBroker() throws Exception {
1:aad7e73:         createBroker(true);
3:aad7e73:     }
1:aad7e73: 
1:aad7e73:     public void createBroker(boolean deleteAll) throws Exception {
1:aad7e73:         broker = new BrokerService();
1:aad7e73:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1:aad7e73:         broker.setDataDirectory("target/AMQ3145Test");
1:aad7e73:         broker.setUseJmx(true);
1:55ae21c:         broker.getManagementContext().setCreateConnector(false);
1:aad7e73:         broker.addConnector("tcp://localhost:0");
1:aad7e73:         broker.start();
1:acc3d4f:         broker.waitUntilStarted();
1:aad7e73:         factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri().toString());
1:aad7e73:         connection = factory.createConnection();
1:aad7e73:         connection.start();
1:aad7e73:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:aad7e73:     }
1:aad7e73: 
1:aad7e73:     @After
1:aad7e73:     public void tearDown() throws Exception {
1:aad7e73:         if (consumer != null) {
1:aad7e73:             consumer.close();
1:8bf987b:         }
1:aad7e73:         session.close();
1:aad7e73:         connection.stop();
1:aad7e73:         connection.close();
1:aad7e73:         broker.stop();
1:aad7e73:     }
1:aad7e73: 
1:aad7e73:     @Test
1:aad7e73:     public void testCacheDisableReEnable() throws Exception {
1:aad7e73:         createProducerAndSendMessages(1);
1:aad7e73:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:aad7e73:         assertTrue("cache is enabled", proxy.isCacheEnabled());
1:aad7e73:         tearDown();
1:aad7e73:         createBroker(false);
1:aad7e73:         proxy = getProxyToQueueViewMBean();
1:aad7e73:         assertEquals("one pending message", 1, proxy.getQueueSize());
1:aad7e73:         assertTrue("cache is disabled when there is a pending message", !proxy.isCacheEnabled());
1:aad7e73: 
1:aad7e73:         createConsumer(1);
1:aad7e73:         createProducerAndSendMessages(1);
1:aad7e73:         assertTrue("cache is enabled again on next send when there are no messages", proxy.isCacheEnabled());
1:aad7e73:     }
1:aad7e73: 
1:aad7e73:     private QueueViewMBean getProxyToQueueViewMBean()
1:aad7e73:             throws MalformedObjectNameException, JMSException {
1:aad7e73:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
1:a8da85f:                 + ":destinationType=Queue,destinationName=" + queue.getQueueName()
1:a8da85f:                 + ",type=Broker,brokerName=localhost");
1:aad7e73:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:aad7e73:                 .newProxyInstance(queueViewMBeanName,
1:aad7e73:                         QueueViewMBean.class, true);
1:aad7e73:         return proxy;
1:aad7e73:     }
1:aad7e73: 
1:aad7e73:     private void createProducerAndSendMessages(int numToSend) throws Exception {
1:aad7e73:         queue = session.createQueue("test1");
1:aad7e73:         MessageProducer producer = session.createProducer(queue);
1:aad7e73:         for (int i = 0; i < numToSend; i++) {
1:aad7e73:             TextMessage message = session.createTextMessage(MESSAGE_TEXT + i);
1:aad7e73:             if (i  != 0 && i % 50000 == 0) {
1:aad7e73:                 LOG.info("sent: " + i);
1:aad7e73:             }
1:aad7e73:             producer.send(message);
1:aad7e73:         }
1:aad7e73:         producer.close();
1:aad7e73:     }
1:aad7e73: 
1:aad7e73:     private void createConsumer(int numToConsume) throws Exception {
1:aad7e73:         consumer = session.createConsumer(queue);
1:aad7e73:         // wait for buffer fill out
1:aad7e73:         for (int i = 0; i < numToConsume; ++i) {
1:aad7e73:             Message message = consumer.receive(2000);
1:aad7e73:             message.acknowledge();
1:aad7e73:         }
1:aad7e73:         consumer.close();
1:aad7e73:     }
1:aad7e73: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:a8da85f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:                 + ":destinationType=Queue,destinationName=" + queue.getQueueName()
1:                 + ",type=Broker,brokerName=localhost");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3145Test.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:55ae21c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         broker.getManagementContext().setCreateConnector(false);
commit:acc3d4f
/////////////////////////////////////////////////////////////////////////
1:         broker.waitUntilStarted();
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
0: import org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
1: public class AMQ3145Test {
0:     private static final Log LOG = LogFactory.getLog(AMQ3145Test.class);
1:     private final String MESSAGE_TEXT = new String(new byte[1024]);
1:     BrokerService broker;
1:     ConnectionFactory factory;
1:     Connection connection;
1:     Session session;
1:     Queue queue;
1:     MessageConsumer consumer;
1: 
1:     @Before
1:     public void createBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     public void createBroker(boolean deleteAll) throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1:         broker.setDataDirectory("target/AMQ3145Test");
1:         broker.setUseJmx(true);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1:         factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri().toString());
1:         connection = factory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (consumer != null) {
1:             consumer.close();
1:         }
1:         session.close();
1:         connection.stop();
1:         connection.close();
1:         broker.stop();
1:     }
1: 
1:     @Test
1:     public void testCacheDisableReEnable() throws Exception {
1:         createProducerAndSendMessages(1);
1:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:         assertTrue("cache is enabled", proxy.isCacheEnabled());
1:         tearDown();
1:         createBroker(false);
1:         proxy = getProxyToQueueViewMBean();
1:         assertEquals("one pending message", 1, proxy.getQueueSize());
1:         assertTrue("cache is disabled when there is a pending message", !proxy.isCacheEnabled());
1: 
1:         createConsumer(1);
1:         createProducerAndSendMessages(1);
1:         assertTrue("cache is enabled again on next send when there are no messages", proxy.isCacheEnabled());
1:     }
1: 
0:     private void applyBrokerSpoolingPolicy() {
0:         PolicyMap policyMap = new PolicyMap();
0:         PolicyEntry defaultEntry = new PolicyEntry();
0:         defaultEntry.setProducerFlowControl(false);
0:         PendingQueueMessageStoragePolicy pendingQueuePolicy = new FilePendingQueueMessageStoragePolicy();
0:         defaultEntry.setPendingQueuePolicy(pendingQueuePolicy);
0:         policyMap.setDefaultEntry(defaultEntry);
0:         broker.setDestinationPolicy(policyMap);
1:     }
1: 
1:     private QueueViewMBean getProxyToQueueViewMBean()
1:             throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
0:                 + ":Type=Queue,Destination=" + queue.getQueueName()
0:                 + ",BrokerName=localhost");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName,
1:                         QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     private void createProducerAndSendMessages(int numToSend) throws Exception {
1:         queue = session.createQueue("test1");
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < numToSend; i++) {
1:             TextMessage message = session.createTextMessage(MESSAGE_TEXT + i);
1:             if (i  != 0 && i % 50000 == 0) {
1:                 LOG.info("sent: " + i);
1:             }
1:             producer.send(message);
1:         }
1:         producer.close();
1:     }
1: 
1:     private void createConsumer(int numToConsume) throws Exception {
1:         consumer = session.createConsumer(queue);
1:         // wait for buffer fill out
1:         for (int i = 0; i < numToConsume; ++i) {
1:             Message message = consumer.receive(2000);
1:             message.acknowledge();
1:         }
1:         consumer.close();
1:     }
1: }
============================================================================