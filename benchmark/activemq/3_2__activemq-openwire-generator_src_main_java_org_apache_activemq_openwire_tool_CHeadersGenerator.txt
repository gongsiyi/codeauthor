1:bd0ad68: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
3:bd0ad68:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
1:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
6:bd0ad68: 
1:bd0ad68: import java.io.File;
1:bd0ad68: import java.io.PrintWriter;
1:bd0ad68: import java.util.ArrayList;
1:bd0ad68: import java.util.Collections;
1:bd0ad68: import java.util.Comparator;
1:bd0ad68: import java.util.HashMap;
1:bd0ad68: import java.util.Iterator;
1:bd0ad68: import java.util.LinkedHashMap;
1:bd0ad68: import java.util.List;
1:bd0ad68: 
1:bd0ad68: import org.codehaus.jam.JAnnotation;
1:bd0ad68: import org.codehaus.jam.JAnnotationValue;
1:bd0ad68: import org.codehaus.jam.JClass;
1:bd0ad68: import org.codehaus.jam.JProperty;
1:bd0ad68: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class CHeadersGenerator extends SingleSourceGenerator {
1:bd0ad68: 
1:bd0ad68:     protected String targetDir = "./src/lib/openwire";
1:bd0ad68: 
1:bd0ad68:     public Object run() {
1:bd0ad68:         filePostFix = ".h";
1:bd0ad68:         if (destFile == null) {
1:bd0ad68:             destFile = new File(targetDir + "/ow_commands_v" + getOpenwireVersion() + ".h");
3:bd0ad68:         }
1:bd0ad68:         return super.run();
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     public String getTargetDir() {
1:bd0ad68:         return targetDir;
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     public void setTargetDir(String targetDir) {
1:bd0ad68:         this.targetDir = targetDir;
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     protected void generateLicence(PrintWriter out) {
1:540dd5c:         out.println("/**");
1:540dd5c:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:540dd5c:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:540dd5c:         out.println(" * this work for additional information regarding copyright ownership.");
1:540dd5c:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:540dd5c:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:540dd5c:         out.println(" * the License.  You may obtain a copy of the License at");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *      http://www.apache.org/licenses/LICENSE-2.0");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:540dd5c:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:540dd5c:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:540dd5c:         out.println(" * See the License for the specific language governing permissions and");
1:540dd5c:         out.println(" * limitations under the License.");
1:540dd5c:         out.println(" */");
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     String changeCase(String value) {
1:bd0ad68:         StringBuffer b = new StringBuffer();
1:bd0ad68:         char[] cs = value.toCharArray();
1:bd0ad68:         for (int i = 0; i < cs.length; i++) {
1:bd0ad68:             char c = cs[i];
1:540dd5c:             if (Character.isUpperCase((char)c)) {
1:bd0ad68:                 b.append('_');
1:540dd5c:                 b.append(Character.toLowerCase((char)c));
1:bd0ad68:             } else {
1:bd0ad68:                 b.append(c);
1:bd0ad68:             }
1:bd0ad68:         }
1:bd0ad68:         return b.toString();
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     String toPropertyCase(String value) {
1:bd0ad68:         return value.substring(0, 1).toLowerCase() + value.substring(1);
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     /**
1:bd0ad68:      * Sort the class list so that base classes come up first.
1:bd0ad68:      */
1:c454fe3:     protected List<JClass> sort(List<JClass> source) {
1:933eb2f:         LinkedHashMap<JClass, JClass> rc = new LinkedHashMap<JClass, JClass>();
1:c454fe3:         ArrayList<JClass> classes = new ArrayList<JClass>(source);
1:c454fe3:         Collections.sort(classes, new Comparator<JClass>() {
1:c454fe3:             public int compare(JClass c1, JClass c2) {
1:540dd5c:                 return c1.getSimpleName().compareTo(c2.getSimpleName());
1:540dd5c:             }
1:540dd5c:         });
1:540dd5c: 
1:bd0ad68:         // lets make a map of all the class names
1:933eb2f:         HashMap<JClass, JClass> classNames = new HashMap<JClass, JClass>();
1:bd0ad68:         for (Iterator iter = classes.iterator(); iter.hasNext();) {
1:540dd5c:             JClass c = (JClass)iter.next();
1:bd0ad68:             classNames.put(c, c);
1:bd0ad68:         }
1:bd0ad68: 
1:bd0ad68:         // Add all classes that have no parent first
1:bd0ad68:         for (Iterator iter = classes.iterator(); iter.hasNext();) {
1:540dd5c:             JClass c = (JClass)iter.next();
1:540dd5c:             if (!classNames.containsKey(c.getSuperclass())) {
1:bd0ad68:                 rc.put(c, c);
1:540dd5c:             }
1:bd0ad68:         }
1:bd0ad68: 
1:bd0ad68:         // now lets add the rest
1:bd0ad68:         for (Iterator iter = classes.iterator(); iter.hasNext();) {
1:540dd5c:             JClass c = (JClass)iter.next();
1:540dd5c:             if (!rc.containsKey(c)) {
1:540dd5c:                 rc.put(c, c);
1:540dd5c:             }
1:bd0ad68:         }
1:bd0ad68: 
1:933eb2f:         return new ArrayList<JClass>(rc.keySet());
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     void generateFields(PrintWriter out, JClass jclass) {
1:bd0ad68: 
1:bd0ad68:         if (jclass.getSuperclass() == null || jclass.getSuperclass().getSimpleName().equals("Object")) {
8:bd0ad68:             out.println("");
1:bd0ad68:             out.println("   ow_byte structType;");
1:bd0ad68:         } else {
1:bd0ad68:             generateFields(out, jclass.getSuperclass());
1:bd0ad68:         }
1:bd0ad68: 
1:933eb2f:         ArrayList<JProperty> properties = new ArrayList<JProperty>();
1:bd0ad68:         jclass.getDeclaredProperties();
1:bd0ad68:         for (int i = 0; i < jclass.getDeclaredProperties().length; i++) {
1:bd0ad68:             JProperty p = jclass.getDeclaredProperties()[i];
1:bd0ad68:             if (isValidProperty(p)) {
1:bd0ad68:                 properties.add(p);
1:bd0ad68:             }
1:bd0ad68:         }
1:933eb2f:         for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {
1:933eb2f:             JProperty property = iter.next();
1:bd0ad68:             JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
1:540dd5c: //            JAnnotationValue size = annotation.getValue("size");
1:bd0ad68:             String name = toPropertyCase(property.getSimpleName());
1:540dd5c: //            boolean cached = isCachedProperty(property);
1:bd0ad68: 
1:bd0ad68:             String type = property.getType().getQualifiedName();
1:bd0ad68:             if (type.equals("boolean")) {
1:540dd5c:                 out.println("   ow_" + type + " " + name + ";");
1:bd0ad68:             } else if (type.equals("byte")) {
1:540dd5c:                 out.println("   ow_" + type + " " + name + ";");
1:bd0ad68:             } else if (type.equals("char")) {
1:540dd5c:                 out.println("   ow_" + type + " " + name + ";");
1:bd0ad68:             } else if (type.equals("short")) {
1:540dd5c:                 out.println("   ow_" + type + " " + name + ";");
1:bd0ad68:             } else if (type.equals("int")) {
1:540dd5c:                 out.println("   ow_" + type + " " + name + ";");
1:bd0ad68:             } else if (type.equals("long")) {
1:540dd5c:                 out.println("   ow_" + type + " " + name + ";");
1:bd0ad68:             } else if (type.equals("byte[]")) {
1:540dd5c:                 out.println("   ow_byte_array *" + name + ";");
1:bd0ad68:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
1:540dd5c:                 out.println("   ow_byte_array *" + name + ";");
1:bd0ad68:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
1:540dd5c:                 out.println("   ow_byte_array *" + name + ";");
1:bd0ad68:             } else if (type.equals("java.lang.String")) {
1:540dd5c:                 out.println("   ow_string *" + name + ";");
1:bd0ad68:             } else {
1:bd0ad68:                 if (property.getType().isArrayType()) {
1:540dd5c:                     out.println("   ow_DataStructure_array *" + name + ";");
1:bd0ad68:                 } else if (isThrowable(property.getType())) {
1:540dd5c:                     out.println("   ow_throwable *" + name + ";");
1:bd0ad68:                 } else {
1:540dd5c:                     out.println("   struct ow_" + property.getType().getSimpleName() + " *" + name + ";");
1:bd0ad68:                 }
1:bd0ad68:             }
1:bd0ad68:         }
1:bd0ad68:     }
1:540dd5c: 
1:bd0ad68:     protected void generateSetup(PrintWriter out) {
1:bd0ad68:         generateLicence(out);
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/*****************************************************************************************");
1:540dd5c:         out.println(" *  ");
1:540dd5c:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:540dd5c:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:540dd5c:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:540dd5c:         out.println(" *        this file.");
1:540dd5c:         out.println(" *  ");
1:540dd5c:         out.println(" *****************************************************************************************/");
1:540dd5c:         out.println(" ");
1:540dd5c:         out.println("#ifndef OW_COMMANDS_V" + openwireVersion + "_H");
1:540dd5c:         out.println("#define OW_COMMANDS_V" + openwireVersion + "_H");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include \"ow.h\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#ifdef __cplusplus");
1:540dd5c:         out.println("extern \"C\" {");
1:540dd5c:         out.println("#endif /* __cplusplus */");
1:540dd5c:         out.println("      ");
1:540dd5c:         out.println("#define OW_WIREFORMAT_VERSION " + openwireVersion + "");
1:bd0ad68: 
1:540dd5c:         out.println("#define OW_WIREFORMAT_STACK_TRACE_MASK     0x00000001;");
1:540dd5c:         out.println("#define OW_WIREFORMAT_TCP_NO_DELAY_MASK    0x00000002;");
1:540dd5c:         out.println("#define OW_WIREFORMAT_CACHE_MASK           0x00000004;");
1:540dd5c:         out.println("#define OW_WIREFORMAT_COMPRESSION_MASK     0x00000008;");
1:bd0ad68: 
1:540dd5c:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:540dd5c:             JClass jclass = (JClass)iterator.next();
1:540dd5c:             String name = jclass.getSimpleName();
1:540dd5c:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:540dd5c:             if (!isAbstract(jclass)) {
1:540dd5c:                 out.println("#define " + type + " " + getOpenWireOpCode(jclass));
1:540dd5c:             }
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("      ");
1:540dd5c:         out.println("apr_status_t ow_bitmarshall(ow_bit_buffer *buffer, ow_DataStructure *object);");
1:540dd5c:         out.println("apr_status_t ow_marshall(ow_byte_buffer *buffer, ow_DataStructure *object);");
1:bd0ad68:     }
1:540dd5c: 
1:bd0ad68:     protected void generateFile(PrintWriter out) throws Exception {
1:bd0ad68: 
1:bd0ad68:         String structName = jclass.getSimpleName();
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("typedef struct ow_" + structName + " {");
1:bd0ad68: 
1:540dd5c:         // This recusivly generates the field definitions of the class and it's
1:540dd5c:         // supper classes.
1:bd0ad68:         generateFields(out, jclass);
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("} ow_" + structName + ";");
1:540dd5c:         out.println("ow_" + structName + " *ow_" + structName + "_create(apr_pool_t *pool);");
1:540dd5c:         out.println("ow_boolean ow_is_a_" + structName + "(ow_DataStructure *object);");
1:540dd5c: 
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     protected void generateTearDown(PrintWriter out) {
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#ifdef __cplusplus");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("#endif");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#endif  /* ! OW_COMMANDS_V" + openwireVersion + "_H */");
1:bd0ad68:     }
1:bd0ad68: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c454fe3
/////////////////////////////////////////////////////////////////////////
1:     protected List<JClass> sort(List<JClass> source) {
1:         ArrayList<JClass> classes = new ArrayList<JClass>(source);
1:         Collections.sort(classes, new Comparator<JClass>() {
1:             public int compare(JClass c1, JClass c2) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         out.println("/**");
1:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:         out.println(" * this work for additional information regarding copyright ownership.");
1:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:         out.println(" * the License.  You may obtain a copy of the License at");
1:         out.println(" *");
1:         out.println(" *      http://www.apache.org/licenses/LICENSE-2.0");
1:         out.println(" *");
1:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:         out.println(" * See the License for the specific language governing permissions and");
1:         out.println(" * limitations under the License.");
1:         out.println(" */");
/////////////////////////////////////////////////////////////////////////
1:             if (Character.isUpperCase((char)c)) {
1:                 b.append(Character.toLowerCase((char)c));
/////////////////////////////////////////////////////////////////////////
0:         ArrayList classes = new ArrayList(source);
0:         Collections.sort(classes, new Comparator() {
0:             public int compare(Object o1, Object o2) {
0:                 JClass c1 = (JClass)o1;
0:                 JClass c2 = (JClass)o2;
1:                 return c1.getSimpleName().compareTo(c2.getSimpleName());
1:             }
1:         });
1: 
1:             JClass c = (JClass)iter.next();
1:             JClass c = (JClass)iter.next();
1:             if (!classNames.containsKey(c.getSuperclass())) {
1:             }
1:             JClass c = (JClass)iter.next();
1:             if (!rc.containsKey(c)) {
1:                 rc.put(c, c);
1:             }
/////////////////////////////////////////////////////////////////////////
1: //            JAnnotationValue size = annotation.getValue("size");
1: //            boolean cached = isCachedProperty(property);
1:                 out.println("   ow_" + type + " " + name + ";");
1:                 out.println("   ow_" + type + " " + name + ";");
1:                 out.println("   ow_" + type + " " + name + ";");
1:                 out.println("   ow_" + type + " " + name + ";");
1:                 out.println("   ow_" + type + " " + name + ";");
1:                 out.println("   ow_" + type + " " + name + ";");
1:                 out.println("   ow_byte_array *" + name + ";");
1:                 out.println("   ow_byte_array *" + name + ";");
1:                 out.println("   ow_byte_array *" + name + ";");
1:                 out.println("   ow_string *" + name + ";");
1:                     out.println("   ow_DataStructure_array *" + name + ";");
1:                     out.println("   ow_throwable *" + name + ";");
1:                     out.println("   struct ow_" + property.getType().getSimpleName() + " *" + name + ";");
1: 
1:         out.println("");
1:         out.println("/*****************************************************************************************");
1:         out.println(" *  ");
1:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:         out.println(" *        this file.");
1:         out.println(" *  ");
1:         out.println(" *****************************************************************************************/");
1:         out.println(" ");
1:         out.println("#ifndef OW_COMMANDS_V" + openwireVersion + "_H");
1:         out.println("#define OW_COMMANDS_V" + openwireVersion + "_H");
1:         out.println("");
1:         out.println("#include \"ow.h\"");
1:         out.println("");
1:         out.println("#ifdef __cplusplus");
1:         out.println("extern \"C\" {");
1:         out.println("#endif /* __cplusplus */");
1:         out.println("      ");
1:         out.println("#define OW_WIREFORMAT_VERSION " + openwireVersion + "");
1:         out.println("#define OW_WIREFORMAT_STACK_TRACE_MASK     0x00000001;");
1:         out.println("#define OW_WIREFORMAT_TCP_NO_DELAY_MASK    0x00000002;");
1:         out.println("#define OW_WIREFORMAT_CACHE_MASK           0x00000004;");
1:         out.println("#define OW_WIREFORMAT_COMPRESSION_MASK     0x00000008;");
1:         for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:             JClass jclass = (JClass)iterator.next();
1:             String name = jclass.getSimpleName();
1:             String type = ("ow_" + name).toUpperCase() + "_TYPE";
1:             if (!isAbstract(jclass)) {
1:                 out.println("#define " + type + " " + getOpenWireOpCode(jclass));
1:             }
1:         }
1:         out.println("      ");
1:         out.println("apr_status_t ow_bitmarshall(ow_bit_buffer *buffer, ow_DataStructure *object);");
1:         out.println("apr_status_t ow_marshall(ow_byte_buffer *buffer, ow_DataStructure *object);");
1: 
1:         out.println("");
1:         out.println("typedef struct ow_" + structName + " {");
1:         // This recusivly generates the field definitions of the class and it's
1:         // supper classes.
1:         out.println("");
1:         out.println("} ow_" + structName + ";");
1:         out.println("ow_" + structName + " *ow_" + structName + "_create(apr_pool_t *pool);");
1:         out.println("ow_boolean ow_is_a_" + structName + "(ow_DataStructure *object);");
1: 
1:         out.println("");
1:         out.println("#ifdef __cplusplus");
1:         out.println("}");
1:         out.println("#endif");
1:         out.println("");
1:         out.println("#endif  /* ! OW_COMMANDS_V" + openwireVersion + "_H */");
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     protected List<JClass> sort(List source) {
1:         LinkedHashMap<JClass, JClass> rc = new LinkedHashMap<JClass, JClass>();
/////////////////////////////////////////////////////////////////////////
1:         HashMap<JClass, JClass> classNames = new HashMap<JClass, JClass>();
/////////////////////////////////////////////////////////////////////////
1:         return new ArrayList<JClass>(rc.keySet());
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<JProperty> properties = new ArrayList<JProperty>();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = iter.next();
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: import java.io.PrintWriter;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.LinkedHashMap;
1: import java.util.List;
1: 
1: import org.codehaus.jam.JAnnotation;
1: import org.codehaus.jam.JAnnotationValue;
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JProperty;
1: 
1: /**
1:  * 
0:  * @version $Revision: 383749 $
1:  */
1: public class CHeadersGenerator extends SingleSourceGenerator {
1: 
1:     protected String targetDir = "./src/lib/openwire";
1: 
1:     public Object run() {
1:         filePostFix = ".h";
1:         if (destFile == null) {
1:             destFile = new File(targetDir + "/ow_commands_v" + getOpenwireVersion() + ".h");
1:         }
1:         return super.run();
1:     }
1: 
1:     public String getTargetDir() {
1:         return targetDir;
1:     }
1: 
1:     public void setTargetDir(String targetDir) {
1:         this.targetDir = targetDir;
1:     }
1: 
1:     protected void generateLicence(PrintWriter out) {
0: out.println("/**");
0: out.println(" *");
0: out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
0: out.println(" * contributor license agreements.  See the NOTICE file distributed with");
0: out.println(" * this work for additional information regarding copyright ownership.");
0: out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
0: out.println(" * (the \"License\"); you may not use this file except in compliance with");
0: out.println(" * the License.  You may obtain a copy of the License at");
0: out.println(" *");
0: out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
0: out.println(" *");
0: out.println(" * Unless required by applicable law or agreed to in writing, software");
0: out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
0: out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
0: out.println(" * See the License for the specific language governing permissions and");
0: out.println(" * limitations under the License.");
0: out.println(" */");
1:     }
1: 
1:     String changeCase(String value) {
1:         StringBuffer b = new StringBuffer();
1:         char[] cs = value.toCharArray();
1:         for (int i = 0; i < cs.length; i++) {
1:             char c = cs[i];
0:             if (Character.isUpperCase((char) c)) {
1:                 b.append('_');
0:                 b.append(Character.toLowerCase((char) c));
1:             } else {
1:                 b.append(c);
1:             }
1:         }
1:         return b.toString();
1:     }
1: 
1:     String toPropertyCase(String value) {
1:         return value.substring(0, 1).toLowerCase() + value.substring(1);
1:     }
1: 
1:     /**
1:      * Sort the class list so that base classes come up first.
1:      */
0:     protected List sort(List source) {
0:         LinkedHashMap rc = new LinkedHashMap();
0:     	ArrayList classes = new ArrayList(source);
0:         Collections.sort(classes, new Comparator(){
0: 			public int compare(Object o1, Object o2) {
0: 				JClass c1 = (JClass) o1;
0: 				JClass c2 = (JClass) o2;
0: 				return c1.getSimpleName().compareTo(c2.getSimpleName());
0: 			}});
1:     	
1:         // lets make a map of all the class names
0:         HashMap classNames = new HashMap();
1:         for (Iterator iter = classes.iterator(); iter.hasNext();) {
0:             JClass c = (JClass) iter.next();
1:             classNames.put(c, c);
1:         }
1: 
1:         // Add all classes that have no parent first
1:         for (Iterator iter = classes.iterator(); iter.hasNext();) {
0:             JClass c = (JClass) iter.next();
0:             if (!classNames.containsKey(c.getSuperclass()))
1:                 rc.put(c, c);
1:         }
1: 
1:         // now lets add the rest
1:         for (Iterator iter = classes.iterator(); iter.hasNext();) {
0:             JClass c = (JClass) iter.next();
0:             if (!rc.containsKey(c))
0:                 rc.put(c,c);
1:         }
1: 
0:         return new ArrayList(rc.keySet());
1:     }
1: 
1:     void generateFields(PrintWriter out, JClass jclass) {
1: 
1:         if (jclass.getSuperclass() == null || jclass.getSuperclass().getSimpleName().equals("Object")) {
1:             out.println("");
1:             out.println("   ow_byte structType;");
1:         } else {
1:             generateFields(out, jclass.getSuperclass());
1:         }
1: 
0:         ArrayList properties = new ArrayList();
1:         jclass.getDeclaredProperties();
1:         for (int i = 0; i < jclass.getDeclaredProperties().length; i++) {
1:             JProperty p = jclass.getDeclaredProperties()[i];
1:             if (isValidProperty(p)) {
1:                 properties.add(p);
1:             }
1:         }
0:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
0:             JProperty property = (JProperty) iter.next();
1:             JAnnotation annotation = property.getGetter().getAnnotation("openwire:property");
0:             JAnnotationValue size = annotation.getValue("size");
1:             String name = toPropertyCase(property.getSimpleName());
0:             boolean cached = isCachedProperty(property);
1: 
1:             String type = property.getType().getQualifiedName();
1:             if (type.equals("boolean")) {
0:                 out.println("   ow_"+type+" "+name+";");
1:             } else if (type.equals("byte")) {
0:                 out.println("   ow_"+type+" "+name+";");
1:             } else if (type.equals("char")) {
0:                 out.println("   ow_"+type+" "+name+";");
1:             } else if (type.equals("short")) {
0:                 out.println("   ow_"+type+" "+name+";");
1:             } else if (type.equals("int")) {
0:                 out.println("   ow_"+type+" "+name+";");
1:             } else if (type.equals("long")) {
0:                 out.println("   ow_"+type+" "+name+";");
1:             } else if (type.equals("byte[]")) {
0:                 out.println("   ow_byte_array *"+name+";");
1:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
0:                 out.println("   ow_byte_array *"+name+";");
1:             } else if (type.equals("org.apache.activeio.packet.ByteSequence")) {
0:                 out.println("   ow_byte_array *"+name+";");
1:             } else if (type.equals("java.lang.String")) {
0:                 out.println("   ow_string *"+name+";");
1:             } else {
1:                 if (property.getType().isArrayType()) {
0:                     out.println("   ow_DataStructure_array *"+name+";");
1:                 } else if (isThrowable(property.getType())) {
0:                     out.println("   ow_throwable *"+name+";");
1:                 } else {
0:                     out.println("   struct ow_" + property.getType().getSimpleName() + " *"+name+";");
1:                 }
1:             }
1:         }
1:     }
1:     
1:     
1:     protected void generateSetup(PrintWriter out) {
1:         generateLicence(out);
1: out.println("");
0: out.println("/*****************************************************************************************");
0: out.println(" *  ");
0: out.println(" * NOTE!: This file is auto generated - do not modify!");
0: out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
0: out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
0: out.println(" *        this file.");
0: out.println(" *  ");
0: out.println(" *****************************************************************************************/");
0: out.println(" ");
0: out.println("#ifndef OW_COMMANDS_V"+openwireVersion+"_H");
0: out.println("#define OW_COMMANDS_V"+openwireVersion+"_H");
1: out.println("");
0: out.println("#include \"ow.h\"");
1: out.println("");
0: out.println("#ifdef __cplusplus");
0: out.println("extern \"C\" {");
0: out.println("#endif /* __cplusplus */");
0: out.println("      ");
0: out.println("#define OW_WIREFORMAT_VERSION "+openwireVersion+"");
1: 
0: out.println("#define OW_WIREFORMAT_STACK_TRACE_MASK     0x00000001;");
0: out.println("#define OW_WIREFORMAT_TCP_NO_DELAY_MASK    0x00000002;");
0: out.println("#define OW_WIREFORMAT_CACHE_MASK           0x00000004;");
0: out.println("#define OW_WIREFORMAT_COMPRESSION_MASK     0x00000008;");
1: 
0: 		for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
0: 			JClass jclass = (JClass) iterator.next();
0: 		    String name = jclass.getSimpleName();
0: 		    String type = ("ow_"+name).toUpperCase()+"_TYPE";
0: 		    if( !isAbstract(jclass) ) {
0: 		    	out.println("#define "+type+" "+getOpenWireOpCode(jclass));
1: 		    }
1: 		 }
1: 
0: out.println("      ");
0: out.println("apr_status_t ow_bitmarshall(ow_bit_buffer *buffer, ow_DataStructure *object);");
0: out.println("apr_status_t ow_marshall(ow_byte_buffer *buffer, ow_DataStructure *object);");
1:     }
1:     
1:     protected void generateFile(PrintWriter out) throws Exception {
1: 
1:         String structName = jclass.getSimpleName();
0:         String type = "OW_" + structName.toUpperCase() + "_TYPE";
1: 
1: out.println("");
0: out.println("typedef struct ow_"+structName+" {");
1: 
0:         // This recusivly generates the field definitions of the class and it's supper classes.
1:         generateFields(out, jclass);
1: 
1: out.println("");
0: out.println("} ow_"+structName+";");
0: out.println("ow_"+structName+" *ow_"+structName+"_create(apr_pool_t *pool);");
0: out.println("ow_boolean ow_is_a_"+structName+"(ow_DataStructure *object);");
1: 
1:     }
1:     
1:     protected void generateTearDown(PrintWriter out) {
1: out.println("");
0: out.println("#ifdef __cplusplus");
0: out.println("}");
0: out.println("#endif");
1: out.println("");
0: out.println("#endif  /* ! OW_COMMANDS_V"+openwireVersion+"_H */");
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f50bf9c
/////////////////////////////////////////////////////////////////////////
============================================================================