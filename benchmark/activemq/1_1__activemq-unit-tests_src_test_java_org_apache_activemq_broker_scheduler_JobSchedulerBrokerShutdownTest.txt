1:d1446c3: /**
1:d1446c3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d1446c3:  * contributor license agreements.  See the NOTICE file distributed with
1:d1446c3:  * this work for additional information regarding copyright ownership.
1:d1446c3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d1446c3:  * (the "License"); you may not use this file except in compliance with
1:d1446c3:  * the License.  You may obtain a copy of the License at
1:d1446c3:  *
1:d1446c3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d1446c3:  *
1:d1446c3:  * Unless required by applicable law or agreed to in writing, software
1:d1446c3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d1446c3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d1446c3:  * See the License for the specific language governing permissions and
1:d1446c3:  * limitations under the License.
1:d1446c3:  */
1:d1446c3: package org.apache.activemq.broker.scheduler;
1:d1446c3: 
1:d1446c3: import java.io.File;
1:d1446c3: 
1:d1446c3: import javax.jms.Connection;
1:d1446c3: import javax.jms.Message;
1:d1446c3: import javax.jms.Session;
1:d1446c3: 
1:d1446c3: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:d1446c3: import org.apache.activemq.ScheduledMessage;
1:d1446c3: import org.apache.activemq.broker.BrokerService;
1:d1446c3: import org.apache.activemq.util.IOHelper;
1:d1446c3: import org.apache.activemq.util.ProducerThread;
1:d1446c3: 
1:d1446c3: public class JobSchedulerBrokerShutdownTest extends EmbeddedBrokerTestSupport {
1:d1446c3: 
1:d1446c3:     @Override
1:d1446c3:     protected BrokerService createBroker() throws Exception {
1:d1446c3:         File schedulerDirectory = new File("target/scheduler");
1:d1446c3: 
1:d1446c3:         IOHelper.mkdirs(schedulerDirectory);
1:d1446c3:         IOHelper.deleteChildren(schedulerDirectory);
1:d1446c3: 
1:d1446c3:         BrokerService broker = super.createBroker();
1:d1446c3:         broker.setSchedulerSupport(true);
1:74846bb:         broker.setDataDirectory("target");
1:d1446c3:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1:d1446c3:         broker.getSystemUsage().getStoreUsage().setLimit(1 * 512);
1:d1446c3:         broker.deleteAllMessages();
1:d1446c3:         return broker;
1:d1446c3:     }
1:d1446c3: 
1:d1446c3:     @Override
1:d1446c3:     protected boolean isPersistent() {
1:d1446c3:         return true;
1:d1446c3:     }
1:d1446c3: 
1:d1446c3:     public void testSchedule() throws Exception {
1:d1446c3: 
1:d1446c3:         Connection connection = createConnection();
1:d1446c3:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d1446c3: 
1:d1446c3:         connection.start();
1:d1446c3:         final long time = 1000;
1:d1446c3: 
1:d1446c3:         ProducerThread producer = new ProducerThread(session, destination) {
1:d1446c3:             @Override
1:d1446c3:             protected Message createMessage(int i) throws Exception {
1:d1446c3:                 Message message = super.createMessage(i);
1:d1446c3:                 message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:d1446c3:                 return message;
1:d1446c3:             }
1:d1446c3:         };
1:d1446c3: 
1:d1446c3:         producer.setMessageCount(200);
1:d1446c3:         producer.setDaemon(true);
1:d1446c3: 
1:d1446c3:         producer.start();
1:d1446c3: 
1:d1446c3:         Thread.sleep(5000);
1:d1446c3:     }
1:d1446c3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1:         broker.setDataDirectory("target");
commit:d1446c3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.ProducerThread;
1: 
1: public class JobSchedulerBrokerShutdownTest extends EmbeddedBrokerTestSupport {
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         File schedulerDirectory = new File("target/scheduler");
1: 
1:         IOHelper.mkdirs(schedulerDirectory);
1:         IOHelper.deleteChildren(schedulerDirectory);
1: 
1:         BrokerService broker = super.createBroker();
1:         broker.setSchedulerSupport(true);
1:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1:         broker.getSystemUsage().getStoreUsage().setLimit(1 * 512);
1:         broker.deleteAllMessages();
1:         return broker;
1:     }
1: 
1:     @Override
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1: 
1:     public void testSchedule() throws Exception {
1: 
1:         Connection connection = createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         connection.start();
1:         final long time = 1000;
1: 
1:         ProducerThread producer = new ProducerThread(session, destination) {
1:             @Override
1:             protected Message createMessage(int i) throws Exception {
1:                 Message message = super.createMessage(i);
1:                 message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:                 return message;
1:             }
1:         };
1: 
1:         producer.setMessageCount(200);
1:         producer.setDaemon(true);
1: 
1:         producer.start();
1: 
1:         Thread.sleep(5000);
1:     }
1: }
============================================================================