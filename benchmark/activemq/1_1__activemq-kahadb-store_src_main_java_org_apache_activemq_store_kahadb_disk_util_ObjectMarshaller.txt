3:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
3:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
3:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:456a2ba: 
1:456a2ba: import java.io.ByteArrayInputStream;
1:456a2ba: import java.io.ByteArrayOutputStream;
1:456a2ba: import java.io.DataInput;
1:456a2ba: import java.io.DataOutput;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.io.ObjectInputStream;
1:456a2ba: import java.io.ObjectOutputStream;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Implementation of a Marshaller for Objects
1:0bbc0ac:  * 
1:456a2ba:  * 
1:456a2ba:  */
1:e22a37a: public class ObjectMarshaller extends VariableMarshaller<Object> {
1:456a2ba: 
1:456a2ba:     public void writePayload(Object object, DataOutput dataOut) throws IOException {
1:456a2ba:         ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:456a2ba:         ObjectOutputStream objectOut = new ObjectOutputStream(bytesOut);
1:456a2ba:         objectOut.writeObject(object);
1:456a2ba:         objectOut.close();
1:456a2ba:         byte[] data = bytesOut.toByteArray();
1:456a2ba:         dataOut.writeInt(data.length);
1:456a2ba:         dataOut.write(data);
2:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Object readPayload(DataInput dataIn) throws IOException {
1:456a2ba:         int size = dataIn.readInt();
1:456a2ba:         byte[] data = new byte[size];
1:456a2ba:         dataIn.readFully(data);
1:456a2ba:         ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
1:456a2ba:         ObjectInputStream objectIn = new ObjectInputStream(bytesIn);
1:456a2ba:         try {
1:456a2ba:             return objectIn.readObject();
1:456a2ba:         } catch (ClassNotFoundException e) {
1:456a2ba:             throw new IOException(e.getMessage());
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba:     
1:456a2ba: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:e22a37a
/////////////////////////////////////////////////////////////////////////
1: public class ObjectMarshaller extends VariableMarshaller<Object> {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: 
1: /**
1:  * Implementation of a Marshaller for Objects
1:  * 
0:  * @version $Revision$
1:  */
0: public class ObjectMarshaller implements Marshaller {
1: 
1:     /**
0:      * Write the payload of this entry to the RawContainer
1:      * 
0:      * @param object
0:      * @param dataOut
0:      * @throws IOException
1:      */
1:     public void writePayload(Object object, DataOutput dataOut) throws IOException {
1:         ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:         ObjectOutputStream objectOut = new ObjectOutputStream(bytesOut);
1:         objectOut.writeObject(object);
1:         objectOut.close();
1:         byte[] data = bytesOut.toByteArray();
1:         dataOut.writeInt(data.length);
1:         dataOut.write(data);
1:     }
1: 
1:     /**
0:      * Read the entry from the RawContainer
1:      * 
0:      * @param dataIn
0:      * @return unmarshalled object
0:      * @throws IOException
1:      */
1:     public Object readPayload(DataInput dataIn) throws IOException {
1:         int size = dataIn.readInt();
1:         byte[] data = new byte[size];
1:         dataIn.readFully(data);
1:         ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
1:         ObjectInputStream objectIn = new ObjectInputStream(bytesIn);
1:         try {
1:             return objectIn.readObject();
1:         } catch (ClassNotFoundException e) {
1:             throw new IOException(e.getMessage());
1:         }
1:     }
1:     
0:     public Class getType() {
0:         return Object.class;
1:     }
1: }
============================================================================