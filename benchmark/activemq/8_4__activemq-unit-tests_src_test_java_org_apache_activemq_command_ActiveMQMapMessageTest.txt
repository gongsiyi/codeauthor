3:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:933eb2f:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
5:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
21:d29ca2a: 
1:6e038d5: import static org.junit.Assert.assertEquals;
1:6e038d5: import static org.junit.Assert.assertFalse;
1:6e038d5: import static org.junit.Assert.assertNull;
1:6e038d5: import static org.junit.Assert.assertTrue;
1:6e038d5: import static org.junit.Assert.fail;
1:6e038d5: 
1:d29ca2a: import java.io.IOException;
1:9befb11: import java.util.Arrays;
1:d29ca2a: import java.util.Collections;
1:d29ca2a: import java.util.Enumeration;
1:933eb2f: import java.util.List;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MessageFormatException;
1:d29ca2a: import javax.jms.MessageNotReadableException;
1:d29ca2a: import javax.jms.MessageNotWriteableException;
1:230a86c: 
1:6e038d5: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:933eb2f: /**
1:6e038d5:  * Test the MapMessage implementation for spec compliance.
1:933eb2f:  */
1:6e038d5: public class ActiveMQMapMessageTest {
1:6e038d5: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQMapMessageTest.class);
1:d29ca2a: 
1:6e038d5:     private final String name = "testName";
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:d29ca2a:     public void testBytesConversion() throws JMSException, IOException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:d29ca2a:         msg.setBoolean("boolean", true);
1:6e038d5:         msg.setByte("byte", (byte) 1);
1:d29ca2a:         msg.setBytes("bytes", new byte[1]);
1:d29ca2a:         msg.setChar("char", 'a');
1:d29ca2a:         msg.setDouble("double", 1.5);
1:d29ca2a:         msg.setFloat("float", 1.5f);
1:d29ca2a:         msg.setInt("int", 1);
1:d29ca2a:         msg.setLong("long", 1);
1:d29ca2a:         msg.setObject("object", "stringObj");
1:6e038d5:         msg.setShort("short", (short) 1);
1:d29ca2a:         msg.setString("string", "string");
1:230a86c: 
1:9befb11:         // Test with a 1Meg String
1:230a86c:         StringBuffer bigSB = new StringBuffer(1024 * 1024);
1:230a86c:         for (int i = 0; i < 1024 * 1024; i++) {
1:6e038d5:             bigSB.append('a' + i % 26);
1:933eb2f:         }
1:9befb11:         String bigString = bigSB.toString();
1:933eb2f: 
1:9befb11:         msg.setString("bigString", bigString);
1:230a86c: 
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:230a86c: 
1:d29ca2a:         assertEquals(msg.getBoolean("boolean"), true);
1:6e038d5:         assertEquals(msg.getByte("byte"), (byte) 1);
1:d29ca2a:         assertEquals(msg.getBytes("bytes").length, 1);
1:d29ca2a:         assertEquals(msg.getChar("char"), 'a');
1:d29ca2a:         assertEquals(msg.getDouble("double"), 1.5, 0);
1:d29ca2a:         assertEquals(msg.getFloat("float"), 1.5f, 0);
1:d29ca2a:         assertEquals(msg.getInt("int"), 1);
1:d29ca2a:         assertEquals(msg.getLong("long"), 1);
1:d29ca2a:         assertEquals(msg.getObject("object"), "stringObj");
1:6e038d5:         assertEquals(msg.getShort("short"), (short) 1);
1:d29ca2a:         assertEquals(msg.getString("string"), "string");
1:9befb11:         assertEquals(msg.getString("bigString"), bigString);
1:9befb11:     }
1:9befb11: 
1:6e038d5:     @Test(timeout = 10000)
1:d29ca2a:     public void testGetBoolean() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:d29ca2a:         msg.setBoolean(name, true);
10:d29ca2a:         msg.setReadOnlyBody(true);
1:d29ca2a:         assertTrue(msg.getBoolean(name));
1:d29ca2a:         msg.clearBody();
1:d29ca2a:         msg.setString(name, "true");
1:230a86c: 
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:230a86c: 
1:d29ca2a:         assertTrue(msg.getBoolean(name));
14:d29ca2a:     }
1:230a86c: 
1:6e038d5:     @Test(timeout = 10000)
1:d29ca2a:     public void testGetByte() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         msg.setByte(this.name, (byte) 1);
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:6e038d5:         assertTrue(msg.getByte(this.name) == (byte) 1);
1:d29ca2a:     }
1:9befb11: 
1:6e038d5:     @Test(timeout = 10000)
1:6e038d5:     public void testGetShort() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         msg.setShort(this.name, (short) 1);
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:6e038d5:         assertTrue(msg.getShort(this.name) == (short) 1);
1:d29ca2a:     }
1:9befb11: 
1:6e038d5:     @Test(timeout = 10000)
1:6e038d5:     public void testGetChar() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         msg.setChar(this.name, 'a');
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:6e038d5:         assertTrue(msg.getChar(this.name) == 'a');
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:6e038d5:     public void testGetInt() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         msg.setInt(this.name, 1);
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:6e038d5:         assertTrue(msg.getInt(this.name) == 1);
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:6e038d5:     public void testGetLong() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         msg.setLong(this.name, 1);
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:6e038d5:         assertTrue(msg.getLong(this.name) == 1);
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:6e038d5:     public void testGetFloat() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         msg.setFloat(this.name, 1.5f);
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:6e038d5:         assertTrue(msg.getFloat(this.name) == 1.5f);
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:6e038d5:     public void testGetDouble() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         msg.setDouble(this.name, 1.5);
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:6e038d5:         assertTrue(msg.getDouble(this.name) == 1.5);
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:4b34636:     public void testGetDoubleWithMaxValue() throws JMSException {
1:4b34636:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:4b34636:         msg.setDouble(this.name, Double.MAX_VALUE);
1:4b34636:         msg = (ActiveMQMapMessage) msg.copy();
1:4b34636:         assertEquals(Double.MAX_VALUE, msg.getDouble(this.name), 1.0);
1:4b34636:     }
1:4b34636: 
1:4b34636:     @Test(timeout = 10000)
1:4b34636:     public void testGetDoubleWithMaxValueAsString() throws JMSException {
1:4b34636:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:4b34636:         msg.setString(this.name, String.valueOf(Double.MAX_VALUE));
1:4b34636:         msg = (ActiveMQMapMessage) msg.copy();
1:4b34636:         assertEquals(Double.MAX_VALUE, msg.getDouble(this.name), 1.0);
1:4b34636:     }
1:4b34636: 
1:4b34636:     @Test(timeout = 10000)
1:6e038d5:     public void testGetString() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         String str = "test";
1:6e038d5:         msg.setString(this.name, str);
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:6e038d5:         assertEquals(msg.getString(this.name), str);
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:6e038d5:     public void testGetBytes() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         byte[] bytes1 = new byte[3];
1:6e038d5:         byte[] bytes2 = new byte[2];
1:6e038d5: 
1:6e038d5:         System.arraycopy(bytes1, 0, bytes2, 0, 2);
1:6e038d5:         msg.setBytes(this.name, bytes1);
1:6e038d5:         msg.setBytes(this.name + "2", bytes1, 0, 2);
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:6e038d5: 
1:6e038d5:         assertTrue(Arrays.equals(msg.getBytes(this.name), bytes1));
1:6e038d5:         assertEquals(msg.getBytes(this.name + "2").length, bytes2.length);
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:6e038d5:     public void testGetBytesWithNullValue() throws JMSException {
1:6e038d5:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:6e038d5:         assertNull(msg.getBytes(this.name));
1:6e038d5:     }
1:6e038d5: 
1:6e038d5:     @Test(timeout = 10000)
1:d29ca2a:     public void testGetObject() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:d29ca2a:         Boolean booleanValue = Boolean.TRUE;
1:d29ca2a:         Byte byteValue = Byte.valueOf("1");
1:d29ca2a:         byte[] bytesValue = new byte[3];
1:d29ca2a:         Character charValue = new Character('a');
1:d29ca2a:         Double doubleValue = Double.valueOf("1.5");
1:d29ca2a:         Float floatValue = Float.valueOf("1.5");
1:d29ca2a:         Integer intValue = Integer.valueOf("1");
1:d29ca2a:         Long longValue = Long.valueOf("1");
1:d29ca2a:         Short shortValue = Short.valueOf("1");
1:d29ca2a:         String stringValue = "string";
1:d29ca2a: 
9:d29ca2a:         try {
1:d29ca2a:             msg.setObject("boolean", booleanValue);
1:d29ca2a:             msg.setObject("byte", byteValue);
1:d29ca2a:             msg.setObject("bytes", bytesValue);
1:d29ca2a:             msg.setObject("char", charValue);
1:d29ca2a:             msg.setObject("double", doubleValue);
1:d29ca2a:             msg.setObject("float", floatValue);
1:d29ca2a:             msg.setObject("int", intValue);
1:d29ca2a:             msg.setObject("long", longValue);
1:d29ca2a:             msg.setObject("short", shortValue);
1:d29ca2a:             msg.setObject("string", stringValue);
1:d29ca2a:         } catch (MessageFormatException mfe) {
1:fc00993:             LOG.warn("Caught: " + mfe);
1:ca067a6:             mfe.printStackTrace();
1:d29ca2a:             fail("object formats should be correct");
1:d29ca2a:         }
1:230a86c: 
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:d29ca2a: 
1:d29ca2a:         assertTrue(msg.getObject("boolean") instanceof Boolean);
1:d29ca2a:         assertEquals(msg.getObject("boolean"), booleanValue);
1:d29ca2a:         assertEquals(msg.getBoolean("boolean"), booleanValue.booleanValue());
1:d29ca2a:         assertTrue(msg.getObject("byte") instanceof Byte);
1:d29ca2a:         assertEquals(msg.getObject("byte"), byteValue);
1:d29ca2a:         assertEquals(msg.getByte("byte"), byteValue.byteValue());
1:d29ca2a:         assertTrue(msg.getObject("bytes") instanceof byte[]);
1:6e038d5:         assertEquals(((byte[]) msg.getObject("bytes")).length, bytesValue.length);
1:d29ca2a:         assertEquals(msg.getBytes("bytes").length, bytesValue.length);
1:d29ca2a:         assertTrue(msg.getObject("char") instanceof Character);
1:d29ca2a:         assertEquals(msg.getObject("char"), charValue);
1:d29ca2a:         assertEquals(msg.getChar("char"), charValue.charValue());
1:d29ca2a:         assertTrue(msg.getObject("double") instanceof Double);
1:d29ca2a:         assertEquals(msg.getObject("double"), doubleValue);
1:d29ca2a:         assertEquals(msg.getDouble("double"), doubleValue.doubleValue(), 0);
1:d29ca2a:         assertTrue(msg.getObject("float") instanceof Float);
1:d29ca2a:         assertEquals(msg.getObject("float"), floatValue);
1:d29ca2a:         assertEquals(msg.getFloat("float"), floatValue.floatValue(), 0);
1:d29ca2a:         assertTrue(msg.getObject("int") instanceof Integer);
1:d29ca2a:         assertEquals(msg.getObject("int"), intValue);
1:d29ca2a:         assertEquals(msg.getInt("int"), intValue.intValue());
1:d29ca2a:         assertTrue(msg.getObject("long") instanceof Long);
1:d29ca2a:         assertEquals(msg.getObject("long"), longValue);
1:d29ca2a:         assertEquals(msg.getLong("long"), longValue.longValue());
1:d29ca2a:         assertTrue(msg.getObject("short") instanceof Short);
1:d29ca2a:         assertEquals(msg.getObject("short"), shortValue);
1:d29ca2a:         assertEquals(msg.getShort("short"), shortValue.shortValue());
1:d29ca2a:         assertTrue(msg.getObject("string") instanceof String);
1:d29ca2a:         assertEquals(msg.getObject("string"), stringValue);
1:d29ca2a:         assertEquals(msg.getString("string"), stringValue);
1:d29ca2a: 
1:d29ca2a:         msg.clearBody();
1:d29ca2a:         try {
1:d29ca2a:             msg.setObject("object", new Object());
1:d29ca2a:             fail("should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:d29ca2a:     public void testGetMapNames() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:d29ca2a:         msg.setBoolean("boolean", true);
1:6e038d5:         msg.setByte("byte", (byte) 1);
1:d29ca2a:         msg.setBytes("bytes1", new byte[1]);
1:d29ca2a:         msg.setBytes("bytes2", new byte[3], 0, 2);
1:d29ca2a:         msg.setChar("char", 'a');
1:d29ca2a:         msg.setDouble("double", 1.5);
1:d29ca2a:         msg.setFloat("float", 1.5f);
1:d29ca2a:         msg.setInt("int", 1);
1:d29ca2a:         msg.setLong("long", 1);
1:d29ca2a:         msg.setObject("object", "stringObj");
1:6e038d5:         msg.setShort("short", (short) 1);
1:d29ca2a:         msg.setString("string", "string");
1:d29ca2a: 
1:6e038d5:         msg = (ActiveMQMapMessage) msg.copy();
1:d29ca2a: 
1:933eb2f:         Enumeration<String> mapNamesEnum = msg.getMapNames();
1:933eb2f:         List<String> mapNamesList = Collections.list(mapNamesEnum);
1:d29ca2a: 
1:d29ca2a:         assertEquals(mapNamesList.size(), 12);
1:d29ca2a:         assertTrue(mapNamesList.contains("boolean"));
1:d29ca2a:         assertTrue(mapNamesList.contains("byte"));
1:d29ca2a:         assertTrue(mapNamesList.contains("bytes1"));
1:d29ca2a:         assertTrue(mapNamesList.contains("bytes2"));
1:d29ca2a:         assertTrue(mapNamesList.contains("char"));
1:d29ca2a:         assertTrue(mapNamesList.contains("double"));
1:d29ca2a:         assertTrue(mapNamesList.contains("float"));
1:d29ca2a:         assertTrue(mapNamesList.contains("int"));
1:d29ca2a:         assertTrue(mapNamesList.contains("long"));
1:d29ca2a:         assertTrue(mapNamesList.contains("object"));
1:d29ca2a:         assertTrue(mapNamesList.contains("short"));
1:d29ca2a:         assertTrue(mapNamesList.contains("string"));
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:d29ca2a:     public void testItemExists() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage mapMessage = new ActiveMQMapMessage();
1:d29ca2a: 
1:d29ca2a:         mapMessage.setString("exists", "test");
1:230a86c: 
1:6e038d5:         mapMessage = (ActiveMQMapMessage) mapMessage.copy();
1:d29ca2a: 
1:d29ca2a:         assertTrue(mapMessage.itemExists("exists"));
1:d29ca2a:         assertFalse(mapMessage.itemExists("doesntExist"));
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:d29ca2a:     public void testClearBody() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage mapMessage = new ActiveMQMapMessage();
1:d29ca2a:         mapMessage.setString("String", "String");
1:d29ca2a:         mapMessage.clearBody();
1:d29ca2a:         assertFalse(mapMessage.isReadOnlyBody());
1:230a86c: 
3:d29ca2a:         mapMessage.onSend();
3:d29ca2a:         mapMessage.setContent(mapMessage.getContent());
1:d29ca2a:         assertNull(mapMessage.getString("String"));
1:d29ca2a:         mapMessage.clearBody();
1:d29ca2a:         mapMessage.setString("String", "String");
1:230a86c: 
1:6e038d5:         mapMessage = (ActiveMQMapMessage) mapMessage.copy();
1:230a86c: 
1:230a86c:         mapMessage.getString("String");
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:d29ca2a:     public void testReadOnlyBody() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:d29ca2a:         msg.setBoolean("boolean", true);
1:6e038d5:         msg.setByte("byte", (byte) 1);
1:d29ca2a:         msg.setBytes("bytes", new byte[1]);
1:d29ca2a:         msg.setBytes("bytes2", new byte[3], 0, 2);
1:d29ca2a:         msg.setChar("char", 'a');
1:d29ca2a:         msg.setDouble("double", 1.5);
1:d29ca2a:         msg.setFloat("float", 1.5f);
1:d29ca2a:         msg.setInt("int", 1);
1:d29ca2a:         msg.setLong("long", 1);
1:d29ca2a:         msg.setObject("object", "stringObj");
1:6e038d5:         msg.setShort("short", (short) 1);
1:d29ca2a:         msg.setString("string", "string");
1:d29ca2a: 
1:d29ca2a:         msg.setReadOnlyBody(true);
1:d29ca2a: 
1:d29ca2a:         try {
1:d29ca2a:             msg.getBoolean("boolean");
1:d29ca2a:             msg.getByte("byte");
1:d29ca2a:             msg.getBytes("bytes");
1:d29ca2a:             msg.getChar("char");
1:d29ca2a:             msg.getDouble("double");
1:d29ca2a:             msg.getFloat("float");
1:d29ca2a:             msg.getInt("int");
1:d29ca2a:             msg.getLong("long");
1:d29ca2a:             msg.getObject("object");
1:d29ca2a:             msg.getShort("short");
1:d29ca2a:             msg.getString("string");
1:d29ca2a:         } catch (MessageNotReadableException mnre) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setBoolean("boolean", true);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:6e038d5:             msg.setByte("byte", (byte) 1);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setBytes("bytes", new byte[1]);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setBytes("bytes2", new byte[3], 0, 2);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setChar("char", 'a');
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setDouble("double", 1.5);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setFloat("float", 1.5f);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setInt("int", 1);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setLong("long", 1);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setObject("object", "stringObj");
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:6e038d5:             msg.setShort("short", (short) 1);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setString("string", "string");
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:6e038d5:     @Test(timeout = 10000)
1:d29ca2a:     public void testWriteOnlyBody() throws JMSException {
1:d29ca2a:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:d29ca2a:         msg.setReadOnlyBody(false);
1:d29ca2a: 
1:d29ca2a:         msg.setBoolean("boolean", true);
1:6e038d5:         msg.setByte("byte", (byte) 1);
1:d29ca2a:         msg.setBytes("bytes", new byte[1]);
1:d29ca2a:         msg.setBytes("bytes2", new byte[3], 0, 2);
1:d29ca2a:         msg.setChar("char", 'a');
1:d29ca2a:         msg.setDouble("double", 1.5);
1:d29ca2a:         msg.setFloat("float", 1.5f);
1:d29ca2a:         msg.setInt("int", 1);
1:d29ca2a:         msg.setLong("long", 1);
1:d29ca2a:         msg.setObject("object", "stringObj");
1:6e038d5:         msg.setShort("short", (short) 1);
1:d29ca2a:         msg.setString("string", "string");
1:d29ca2a: 
1:d29ca2a:         msg.setReadOnlyBody(true);
1:d29ca2a: 
1:d29ca2a:         msg.getBoolean("boolean");
1:d29ca2a:         msg.getByte("byte");
1:d29ca2a:         msg.getBytes("bytes");
1:d29ca2a:         msg.getChar("char");
1:d29ca2a:         msg.getDouble("double");
1:d29ca2a:         msg.getFloat("float");
1:d29ca2a:         msg.getInt("int");
1:d29ca2a:         msg.getLong("long");
1:d29ca2a:         msg.getObject("object");
1:d29ca2a:         msg.getShort("short");
1:d29ca2a:         msg.getString("string");
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4b34636
/////////////////////////////////////////////////////////////////////////
1:     public void testGetDoubleWithMaxValue() throws JMSException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         msg.setDouble(this.name, Double.MAX_VALUE);
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertEquals(Double.MAX_VALUE, msg.getDouble(this.name), 1.0);
1:     }
1: 
1:     @Test(timeout = 10000)
1:     public void testGetDoubleWithMaxValueAsString() throws JMSException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         msg.setString(this.name, String.valueOf(Double.MAX_VALUE));
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertEquals(Double.MAX_VALUE, msg.getDouble(this.name), 1.0);
1:     }
1: 
1:     @Test(timeout = 10000)
commit:6e038d5
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1:  * Test the MapMessage implementation for spec compliance.
1: public class ActiveMQMapMessageTest {
1: 
1:     private final String name = "testName";
1:     @Test(timeout = 10000)
1:         msg.setByte("byte", (byte) 1);
/////////////////////////////////////////////////////////////////////////
1:         msg.setShort("short", (short) 1);
1:             bigSB.append('a' + i % 26);
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertEquals(msg.getByte("byte"), (byte) 1);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(msg.getShort("short"), (short) 1);
1:     @Test(timeout = 10000)
/////////////////////////////////////////////////////////////////////////
1:         msg = (ActiveMQMapMessage) msg.copy();
1:     @Test(timeout = 10000)
1:         msg.setByte(this.name, (byte) 1);
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertTrue(msg.getByte(this.name) == (byte) 1);
1:     @Test(timeout = 10000)
1:     public void testGetShort() throws JMSException {
1:         msg.setShort(this.name, (short) 1);
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertTrue(msg.getShort(this.name) == (short) 1);
1:     @Test(timeout = 10000)
1:     public void testGetChar() throws JMSException {
1:         msg.setChar(this.name, 'a');
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertTrue(msg.getChar(this.name) == 'a');
1:     @Test(timeout = 10000)
1:     public void testGetInt() throws JMSException {
1:         msg.setInt(this.name, 1);
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertTrue(msg.getInt(this.name) == 1);
1:     @Test(timeout = 10000)
1:     public void testGetLong() throws JMSException {
1:         msg.setLong(this.name, 1);
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertTrue(msg.getLong(this.name) == 1);
1:     @Test(timeout = 10000)
1:     public void testGetFloat() throws JMSException {
1:         msg.setFloat(this.name, 1.5f);
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertTrue(msg.getFloat(this.name) == 1.5f);
1:     @Test(timeout = 10000)
1:     public void testGetDouble() throws JMSException {
1:         msg.setDouble(this.name, 1.5);
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertTrue(msg.getDouble(this.name) == 1.5);
1:     @Test(timeout = 10000)
1:     public void testGetString() throws JMSException {
1:         String str = "test";
1:         msg.setString(this.name, str);
1:         msg = (ActiveMQMapMessage) msg.copy();
1:         assertEquals(msg.getString(this.name), str);
1:     @Test(timeout = 10000)
1:     public void testGetBytes() throws JMSException {
1:         byte[] bytes1 = new byte[3];
1:         byte[] bytes2 = new byte[2];
1: 
1:         System.arraycopy(bytes1, 0, bytes2, 0, 2);
1:         msg.setBytes(this.name, bytes1);
1:         msg.setBytes(this.name + "2", bytes1, 0, 2);
1:         msg = (ActiveMQMapMessage) msg.copy();
1: 
1:         assertTrue(Arrays.equals(msg.getBytes(this.name), bytes1));
1:         assertEquals(msg.getBytes(this.name + "2").length, bytes2.length);
1:     @Test(timeout = 10000)
1:     public void testGetBytesWithNullValue() throws JMSException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         assertNull(msg.getBytes(this.name));
1:     }
1: 
1:     @Test(timeout = 10000)
/////////////////////////////////////////////////////////////////////////
1:         msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(((byte[]) msg.getObject("bytes")).length, bytesValue.length);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 10000)
1:         msg.setByte("byte", (byte) 1);
/////////////////////////////////////////////////////////////////////////
1:         msg.setShort("short", (short) 1);
1:         msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 10000)
1:         mapMessage = (ActiveMQMapMessage) mapMessage.copy();
1:     @Test(timeout = 10000)
/////////////////////////////////////////////////////////////////////////
1:         mapMessage = (ActiveMQMapMessage) mapMessage.copy();
1:     @Test(timeout = 10000)
1:         msg.setByte("byte", (byte) 1);
/////////////////////////////////////////////////////////////////////////
1:         msg.setShort("short", (short) 1);
/////////////////////////////////////////////////////////////////////////
1:             msg.setByte("byte", (byte) 1);
/////////////////////////////////////////////////////////////////////////
1:             msg.setShort("short", (short) 1);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 10000)
1:         msg.setByte("byte", (byte) 1);
/////////////////////////////////////////////////////////////////////////
1:         msg.setShort("short", (short) 1);
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Constructor for ActiveMQMapMessageTest.
1:      * 
0:      * @param name
1:      */
0:     public ActiveMQMapMessageTest(String name) {
0:         super(name);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Enumeration<String> mapNamesEnum = msg.getMapNames();
1:         List<String> mapNamesList = Collections.list(mapNamesEnum);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ActiveMQMapMessageTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Caught: " + mfe);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1: 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:         msg.setByte("byte", (byte)1);
/////////////////////////////////////////////////////////////////////////
0:         msg.setShort("short", (short)1);
1:         StringBuffer bigSB = new StringBuffer(1024 * 1024);
1:         for (int i = 0; i < 1024 * 1024; i++) {
0:             bigSB.append((char)'a' + i % 26);
1: 
1: 
0:         msg = (ActiveMQMapMessage)msg.copy();
1: 
0:         assertEquals(msg.getByte("byte"), (byte)1);
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(msg.getShort("short"), (short)1);
/////////////////////////////////////////////////////////////////////////
1: 
0:         msg = (ActiveMQMapMessage)msg.copy();
1: 
0:         msg.setByte(this.name, (byte)1);
0:         msg = (ActiveMQMapMessage)msg.copy();
0:         assertTrue(msg.getByte(this.name) == (byte)1);
0:             msg.setShort(this.name, (short)1);
0:             msg = (ActiveMQMapMessage)msg.copy();
0:             assertTrue(msg.getShort(this.name) == (short)1);
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage)msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage)msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage)msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage)msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage)msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage)msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage)msg.copy();
0:             assertTrue(Arrays.equals(msg.getBytes(this.name), bytes1));
/////////////////////////////////////////////////////////////////////////
1: 
0:         msg = (ActiveMQMapMessage)msg.copy();
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(((byte[])msg.getObject("bytes")).length, bytesValue.length);
/////////////////////////////////////////////////////////////////////////
0:         msg.setByte("byte", (byte)1);
/////////////////////////////////////////////////////////////////////////
0:         msg.setShort("short", (short)1);
0:         msg = (ActiveMQMapMessage)msg.copy();
/////////////////////////////////////////////////////////////////////////
1: 
0:         mapMessage = (ActiveMQMapMessage)mapMessage.copy();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         mapMessage = (ActiveMQMapMessage)mapMessage.copy();
1: 
1:         mapMessage.getString("String");
0:         msg.setByte("byte", (byte)1);
/////////////////////////////////////////////////////////////////////////
0:         msg.setShort("short", (short)1);
/////////////////////////////////////////////////////////////////////////
0:             msg.setByte("byte", (byte)1);
/////////////////////////////////////////////////////////////////////////
0:             msg.setShort("short", (short)1);
/////////////////////////////////////////////////////////////////////////
0:         msg.setByte("byte", (byte)1);
/////////////////////////////////////////////////////////////////////////
0:         msg.setShort("short", (short)1);
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:9befb11
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:         // Test with a 1Meg String
0:         StringBuffer bigSB = new StringBuffer(1024*1024);
0:         for( int i=0; i < 1024*1024; i++ ) {
0:             bigSB.append((char)'a'+i%26);
1:         }
1:         String bigString = bigSB.toString();
1:         
1:         msg.setString("bigString", bigString);
1:         
0:         msg = (ActiveMQMapMessage) msg.copy();
1:         
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(msg.getString("bigString"), bigString);
/////////////////////////////////////////////////////////////////////////
0:         msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:         msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage) msg.copy();
0:             assertEquals(msg.getString(this.name), str);
/////////////////////////////////////////////////////////////////////////
0:             msg = (ActiveMQMapMessage) msg.copy();
0:             assertTrue( Arrays.equals(msg.getBytes(this.name), bytes1));
/////////////////////////////////////////////////////////////////////////
0:         msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:         msg = (ActiveMQMapMessage) msg.copy();
/////////////////////////////////////////////////////////////////////////
0:         mapMessage = (ActiveMQMapMessage) mapMessage.copy();
/////////////////////////////////////////////////////////////////////////
0:         mapMessage = (ActiveMQMapMessage) mapMessage.copy();
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.io.IOException;
0: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Enumeration;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageFormatException;
1: import javax.jms.MessageNotReadableException;
1: import javax.jms.MessageNotWriteableException;
1: 
0: import org.apache.activemq.command.ActiveMQMapMessage;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class ActiveMQMapMessageTest extends TestCase {
0:     private String name = "testName";
1: 
0:     public static void main(String[] args) {
0:         junit.textui.TestRunner.run(ActiveMQMapMessageTest.class);
1:     }
1: 
0:     /*
0:      * @see TestCase#setUp()
1:      */
0:     protected void setUp() throws Exception {
0:         super.setUp();
1:     }
1: 
0:     /*
0:      * @see TestCase#tearDown()
1:      */
0:     protected void tearDown() throws Exception {
0:         super.tearDown();
1:     }
1: 
1:     /**
0:      * Constructor for ActiveMQMapMessageTest.
0:      *
0:      * @param arg0
1:      */
0:     public ActiveMQMapMessageTest(String arg0) {
0:         super(arg0);
1:     }
1: 
1:     public void testBytesConversion() throws JMSException, IOException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         msg.setBoolean("boolean", true);
0:         msg.setByte("byte", (byte) 1);
1:         msg.setBytes("bytes", new byte[1]);
1:         msg.setChar("char", 'a');
1:         msg.setDouble("double", 1.5);
1:         msg.setFloat("float", 1.5f);
1:         msg.setInt("int", 1);
1:         msg.setLong("long", 1);
1:         msg.setObject("object", "stringObj");
0:         msg.setShort("short", (short) 1);
1:         msg.setString("string", "string");
1: 
0:         msg.onSend();
0:         msg.setContent(msg.getContent());
1: 
1:         assertEquals(msg.getBoolean("boolean"), true);
0:         assertEquals(msg.getByte("byte"), (byte) 1);
1:         assertEquals(msg.getBytes("bytes").length, 1);
1:         assertEquals(msg.getChar("char"), 'a');
1:         assertEquals(msg.getDouble("double"), 1.5, 0);
1:         assertEquals(msg.getFloat("float"), 1.5f, 0);
1:         assertEquals(msg.getInt("int"), 1);
1:         assertEquals(msg.getLong("long"), 1);
1:         assertEquals(msg.getObject("object"), "stringObj");
0:         assertEquals(msg.getShort("short"), (short) 1);
1:         assertEquals(msg.getString("string"), "string");
1:     }
1: 
1:     public void testGetBoolean() throws JMSException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         msg.setBoolean(name, true);
1:         msg.setReadOnlyBody(true);
1:         assertTrue(msg.getBoolean(name));
1:         msg.clearBody();
1:         msg.setString(name, "true");
1:         
0:         msg.onSend();
0:         msg.setContent(msg.getContent());
1:         
1:         assertTrue(msg.getBoolean(name));
1:     }
1: 
1:     public void testGetByte() throws JMSException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
0:         msg.setByte(this.name, (byte) 1);
1:         msg.setReadOnlyBody(true);
0:         assertTrue(msg.getByte(this.name) == (byte) 1);
1:     }
1: 
0:     public void testGetShort() {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         try {
0:             msg.setShort(this.name, (short) 1);
1:             msg.setReadOnlyBody(true);
0:             assertTrue(msg.getShort(this.name) == (short) 1);
0:         } catch (JMSException jmsEx) {
0:             jmsEx.printStackTrace();
0:             assertTrue(false);
1:         }
1:     }
1: 
0:     public void testGetChar() {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         try {
0:             msg.setChar(this.name, 'a');
1:             msg.setReadOnlyBody(true);
0:             assertTrue(msg.getChar(this.name) == 'a');
0:         } catch (JMSException jmsEx) {
0:             jmsEx.printStackTrace();
0:             assertTrue(false);
1:         }
1:     }
1: 
0:     public void testGetInt() {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         try {
0:             msg.setInt(this.name, 1);
1:             msg.setReadOnlyBody(true);
0:             assertTrue(msg.getInt(this.name) == 1);
0:         } catch (JMSException jmsEx) {
0:             jmsEx.printStackTrace();
0:             assertTrue(false);
1:         }
1:     }
1: 
0:     public void testGetLong() {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         try {
0:             msg.setLong(this.name, 1);
1:             msg.setReadOnlyBody(true);
0:             assertTrue(msg.getLong(this.name) == 1);
0:         } catch (JMSException jmsEx) {
0:             jmsEx.printStackTrace();
0:             assertTrue(false);
1:         }
1:     }
1: 
0:     public void testGetFloat() {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         try {
0:             msg.setFloat(this.name, 1.5f);
1:             msg.setReadOnlyBody(true);
0:             assertTrue(msg.getFloat(this.name) == 1.5f);
0:         } catch (JMSException jmsEx) {
0:             jmsEx.printStackTrace();
0:             assertTrue(false);
1:         }
1:     }
1: 
0:     public void testGetDouble() {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         try {
0:             msg.setDouble(this.name, 1.5);
1:             msg.setReadOnlyBody(true);
0:             assertTrue(msg.getDouble(this.name) == 1.5);
0:         } catch (JMSException jmsEx) {
0:             jmsEx.printStackTrace();
0:             assertTrue(false);
1:         }
1:     }
1: 
0:     public void testGetString() {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         try {
0:             String str = "test";
0:             msg.setString(this.name, str);
1:             msg.setReadOnlyBody(true);
0:             assertTrue(msg.getString(this.name) == str);
0:         } catch (JMSException jmsEx) {
0:             jmsEx.printStackTrace();
0:             assertTrue(false);
1:         }
1:     }
1: 
0:     public void testGetBytes() {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         try {
0:             byte[] bytes1 = new byte[3];
0:             byte[] bytes2 = new byte[2];
0:             System.arraycopy(bytes1, 0, bytes2, 0, 2);
0:             msg.setBytes(this.name, bytes1);
0:             msg.setBytes(this.name + "2", bytes1, 0, 2);
1:             msg.setReadOnlyBody(true);
0:             assertTrue(msg.getBytes(this.name) == bytes1);
0:             assertEquals(msg.getBytes(this.name + "2").length, bytes2.length);
0:         } catch (JMSException jmsEx) {
0:             jmsEx.printStackTrace();
0:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testGetObject() throws JMSException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         Boolean booleanValue = Boolean.TRUE;
1:         Byte byteValue = Byte.valueOf("1");
1:         byte[] bytesValue = new byte[3];
1:         Character charValue = new Character('a');
1:         Double doubleValue = Double.valueOf("1.5");
1:         Float floatValue = Float.valueOf("1.5");
1:         Integer intValue = Integer.valueOf("1");
1:         Long longValue = Long.valueOf("1");
1:         Short shortValue = Short.valueOf("1");
1:         String stringValue = "string";
1: 
1:         try {
1:             msg.setObject("boolean", booleanValue);
1:             msg.setObject("byte", byteValue);
1:             msg.setObject("bytes", bytesValue);
1:             msg.setObject("char", charValue);
1:             msg.setObject("double", doubleValue);
1:             msg.setObject("float", floatValue);
1:             msg.setObject("int", intValue);
1:             msg.setObject("long", longValue);
1:             msg.setObject("short", shortValue);
1:             msg.setObject("string", stringValue);
1:         } catch (MessageFormatException mfe) {
1:             fail("object formats should be correct");
1:         }
1:         
0:         msg.onSend();
0:         msg.setContent(msg.getContent());
1: 
1:         assertTrue(msg.getObject("boolean") instanceof Boolean);
1:         assertEquals(msg.getObject("boolean"), booleanValue);
1:         assertEquals(msg.getBoolean("boolean"), booleanValue.booleanValue());
1:         assertTrue(msg.getObject("byte") instanceof Byte);
1:         assertEquals(msg.getObject("byte"), byteValue);
1:         assertEquals(msg.getByte("byte"), byteValue.byteValue());
1:         assertTrue(msg.getObject("bytes") instanceof byte[]);
0:         assertEquals(((byte[]) msg.getObject("bytes")).length, bytesValue.length);
1:         assertEquals(msg.getBytes("bytes").length, bytesValue.length);
1:         assertTrue(msg.getObject("char") instanceof Character);
1:         assertEquals(msg.getObject("char"), charValue);
1:         assertEquals(msg.getChar("char"), charValue.charValue());
1:         assertTrue(msg.getObject("double") instanceof Double);
1:         assertEquals(msg.getObject("double"), doubleValue);
1:         assertEquals(msg.getDouble("double"), doubleValue.doubleValue(), 0);
1:         assertTrue(msg.getObject("float") instanceof Float);
1:         assertEquals(msg.getObject("float"), floatValue);
1:         assertEquals(msg.getFloat("float"), floatValue.floatValue(), 0);
1:         assertTrue(msg.getObject("int") instanceof Integer);
1:         assertEquals(msg.getObject("int"), intValue);
1:         assertEquals(msg.getInt("int"), intValue.intValue());
1:         assertTrue(msg.getObject("long") instanceof Long);
1:         assertEquals(msg.getObject("long"), longValue);
1:         assertEquals(msg.getLong("long"), longValue.longValue());
1:         assertTrue(msg.getObject("short") instanceof Short);
1:         assertEquals(msg.getObject("short"), shortValue);
1:         assertEquals(msg.getShort("short"), shortValue.shortValue());
1:         assertTrue(msg.getObject("string") instanceof String);
1:         assertEquals(msg.getObject("string"), stringValue);
1:         assertEquals(msg.getString("string"), stringValue);
1: 
1:         msg.clearBody();
1:         try {
1:             msg.setObject("object", new Object());
1:             fail("should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1: 
1:     }
1: 
1:     public void testGetMapNames() throws JMSException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         msg.setBoolean("boolean", true);
0:         msg.setByte("byte", (byte) 1);
1:         msg.setBytes("bytes1", new byte[1]);
1:         msg.setBytes("bytes2", new byte[3], 0, 2);
1:         msg.setChar("char", 'a');
1:         msg.setDouble("double", 1.5);
1:         msg.setFloat("float", 1.5f);
1:         msg.setInt("int", 1);
1:         msg.setLong("long", 1);
1:         msg.setObject("object", "stringObj");
0:         msg.setShort("short", (short) 1);
1:         msg.setString("string", "string");
1: 
0:         msg.onSend();
0:         msg.setContent(msg.getContent());
1: 
0:         Enumeration mapNamesEnum = msg.getMapNames();
0:         ArrayList mapNamesList = Collections.list(mapNamesEnum);
1: 
1:         assertEquals(mapNamesList.size(), 12);
1:         assertTrue(mapNamesList.contains("boolean"));
1:         assertTrue(mapNamesList.contains("byte"));
1:         assertTrue(mapNamesList.contains("bytes1"));
1:         assertTrue(mapNamesList.contains("bytes2"));
1:         assertTrue(mapNamesList.contains("char"));
1:         assertTrue(mapNamesList.contains("double"));
1:         assertTrue(mapNamesList.contains("float"));
1:         assertTrue(mapNamesList.contains("int"));
1:         assertTrue(mapNamesList.contains("long"));
1:         assertTrue(mapNamesList.contains("object"));
1:         assertTrue(mapNamesList.contains("short"));
1:         assertTrue(mapNamesList.contains("string"));
1:     }
1: 
1:     public void testItemExists() throws JMSException {
1:         ActiveMQMapMessage mapMessage = new ActiveMQMapMessage();
1: 
1:         mapMessage.setString("exists", "test");
1:         
1:         mapMessage.onSend();
1:         mapMessage.setContent(mapMessage.getContent());
1: 
1:         assertTrue(mapMessage.itemExists("exists"));
1:         assertFalse(mapMessage.itemExists("doesntExist"));
1:     }
1: 
1:     public void testClearBody() throws JMSException {
1:         ActiveMQMapMessage mapMessage = new ActiveMQMapMessage();
1:         mapMessage.setString("String", "String");
1:         mapMessage.clearBody();
1:         assertFalse(mapMessage.isReadOnlyBody());
1:         
1:         mapMessage.onSend();
1:         mapMessage.setContent(mapMessage.getContent());
1:         
1:         assertNull(mapMessage.getString("String"));
1:         mapMessage.clearBody();
1:         mapMessage.setString("String", "String");
1:         
1:         mapMessage.onSend();
1:         mapMessage.setContent(mapMessage.getContent());
1: 
0:         mapMessage.getString("String");            
1:     }
1: 
1:     public void testReadOnlyBody() throws JMSException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         msg.setBoolean("boolean", true);
0:         msg.setByte("byte", (byte) 1);
1:         msg.setBytes("bytes", new byte[1]);
1:         msg.setBytes("bytes2", new byte[3], 0, 2);
1:         msg.setChar("char", 'a');
1:         msg.setDouble("double", 1.5);
1:         msg.setFloat("float", 1.5f);
1:         msg.setInt("int", 1);
1:         msg.setLong("long", 1);
1:         msg.setObject("object", "stringObj");
0:         msg.setShort("short", (short) 1);
1:         msg.setString("string", "string");
1: 
1:         msg.setReadOnlyBody(true);
1: 
1:         try {
1:             msg.getBoolean("boolean");
1:             msg.getByte("byte");
1:             msg.getBytes("bytes");
1:             msg.getChar("char");
1:             msg.getDouble("double");
1:             msg.getFloat("float");
1:             msg.getInt("int");
1:             msg.getLong("long");
1:             msg.getObject("object");
1:             msg.getShort("short");
1:             msg.getString("string");
1:         } catch (MessageNotReadableException mnre) {
1:             fail("should be readable");
1:         }
1:         try {
1:             msg.setBoolean("boolean", true);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
0:             msg.setByte("byte", (byte) 1);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             msg.setBytes("bytes", new byte[1]);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             msg.setBytes("bytes2", new byte[3], 0, 2);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             msg.setChar("char", 'a');
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             msg.setDouble("double", 1.5);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             msg.setFloat("float", 1.5f);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             msg.setInt("int", 1);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             msg.setLong("long", 1);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             msg.setObject("object", "stringObj");
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
0:             msg.setShort("short", (short) 1);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             msg.setString("string", "string");
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:     }
1: 
1:     public void testWriteOnlyBody() throws JMSException {
1:         ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:         msg.setReadOnlyBody(false);
1: 
1:         msg.setBoolean("boolean", true);
0:         msg.setByte("byte", (byte) 1);
1:         msg.setBytes("bytes", new byte[1]);
1:         msg.setBytes("bytes2", new byte[3], 0, 2);
1:         msg.setChar("char", 'a');
1:         msg.setDouble("double", 1.5);
1:         msg.setFloat("float", 1.5f);
1:         msg.setInt("int", 1);
1:         msg.setLong("long", 1);
1:         msg.setObject("object", "stringObj");
0:         msg.setShort("short", (short) 1);
1:         msg.setString("string", "string");
1: 
1:         msg.setReadOnlyBody(true);
1:         
1:         msg.getBoolean("boolean");
1:         msg.getByte("byte");
1:         msg.getBytes("bytes");
1:         msg.getChar("char");
1:         msg.getDouble("double");
1:         msg.getFloat("float");
1:         msg.getInt("int");
1:         msg.getLong("long");
1:         msg.getObject("object");
1:         msg.getShort("short");
1:         msg.getString("string");
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQMapMessageTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:7a59d28
/////////////////////////////////////////////////////////////////////////
0:         assertNull(mapMessage.getString("String"));
author:Robert Davies
-------------------------------------------------------------------------------
commit:8c70e4a
/////////////////////////////////////////////////////////////////////////
0:         try {
0:         mapMessage.getString("String");
0:         fail("Should throw a Null pointer");
0:         }catch(NullPointerException e){
0:             
0:         }
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final transient Log log = LogFactory.getLog(ActiveMQMapMessageTest.class);
0:     
/////////////////////////////////////////////////////////////////////////
0:             log.warn("Caught: " + mfe);
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
0:             System.out.println("Caught: " + mfe);
1:             mfe.printStackTrace();
============================================================================