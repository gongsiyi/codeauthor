1:ec87b17: /**
1:ec87b17:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ec87b17:  * contributor license agreements.  See the NOTICE file distributed with
1:ec87b17:  * this work for additional information regarding copyright ownership.
1:ec87b17:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ec87b17:  * (the "License"); you may not use this file except in compliance with
1:ec87b17:  * the License.  You may obtain a copy of the License at
1:ec87b17:  *
1:ec87b17:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ec87b17:  *
1:ec87b17:  * Unless required by applicable law or agreed to in writing, software
1:ec87b17:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ec87b17:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ec87b17:  * See the License for the specific language governing permissions and
1:ec87b17:  * limitations under the License.
1:ec87b17:  */
11:ec87b17: 
1:ec87b17: package org.apache.activemq.transport.stomp;
1:ec87b17: 
1:ec87b17: import static org.junit.Assert.assertNotNull;
1:ec87b17: import static org.junit.Assert.assertTrue;
1:ec87b17: 
1:540a66b: import java.util.ArrayList;
1:ec87b17: import java.util.HashMap;
1:540a66b: import java.util.List;
1:ec87b17: import java.util.concurrent.CountDownLatch;
1:ec87b17: import java.util.concurrent.ExecutorService;
1:ec87b17: import java.util.concurrent.Executors;
1:ec87b17: import java.util.concurrent.ThreadFactory;
1:ec87b17: import java.util.concurrent.TimeUnit;
1:ec87b17: import java.util.concurrent.atomic.AtomicInteger;
1:ec87b17: 
1:ec87b17: import org.apache.activemq.util.Wait;
1:ec87b17: import org.junit.Test;
1:ec87b17: import org.slf4j.Logger;
1:ec87b17: import org.slf4j.LoggerFactory;
1:ec87b17: 
1:1236bbf: public class StompLoadTest extends StompTestSupport {
1:ec87b17: 
1:ec87b17:     private static final Logger LOG = LoggerFactory.getLogger(StompLoadTest.class);
1:ec87b17: 
1:ec87b17:     private static final int TASK_COUNT = 100;
1:ec87b17:     private static final int MSG_COUNT = 250;  // AMQ-3819: Above 250 or so and the CPU goes bonkers with NOI+SSL.
1:ec87b17: 
1:ec87b17:     private ExecutorService executor;
1:ec87b17:     private CountDownLatch started;
1:ec87b17:     private CountDownLatch ready;
1:ec87b17:     private AtomicInteger receiveCount;
1:1236bbf: 
1:1236bbf:     @Override
1:ec87b17:     public void setUp() throws Exception {
1:ec87b17: 
1:1236bbf:         super.setUp();
1:ec87b17: 
1:ec87b17:         stompConnect();
1:1236bbf:         stompConnection.connect("system", "manager");
1:ec87b17: 
1:ec87b17:         executor = Executors.newFixedThreadPool(TASK_COUNT, new ThreadFactory() {
1:ec87b17: 
1:ec87b17:             private long i = 0;
1:ec87b17: 
1:1236bbf:             @Override
1:ec87b17:             public Thread newThread(Runnable runnable) {
1:ec87b17:                 this.i++;
1:ec87b17:                 final Thread t = new Thread(runnable, "Test Worker " + this.i);
1:ec87b17:                 return t;
1:1236bbf:             }
1:ec87b17:         });
1:ec87b17: 
1:ec87b17:         started = new CountDownLatch(TASK_COUNT);
1:ec87b17:         ready = new CountDownLatch(1);
1:ec87b17:         receiveCount = new AtomicInteger(0);
8:ec87b17:     }
1:ec87b17: 
1:1236bbf:     @Override
1:ec87b17:     public void tearDown() throws Exception {
1:ec87b17:         try {
1:ec87b17:             executor.shutdownNow();
1:1236bbf:         } catch (Exception e) {
1:ec87b17:         } finally {
1:1236bbf:             super.tearDown();
1:ec87b17:         }
1:ec87b17:     }
1:ec87b17: 
1:7e28d2a:     @Test(timeout=5*60*1000)
1:ec87b17:     public void testStompUnloadLoad() throws Exception {
1:ec87b17: 
1:540a66b:         final List<StompConnection> taskConnections = new ArrayList<>();
1:540a66b: 
1:ec87b17:         for (int i = 0; i < TASK_COUNT; ++i) {
1:ec87b17:             executor.execute(new Runnable() {
1:ec87b17: 
1:1236bbf:                 @Override
1:ec87b17:                 public void run() {
1:ec87b17: 
1:ec87b17:                     LOG.debug("Receive Thread Connecting to Broker.");
1:ec87b17: 
1:ec87b17:                     int numReceived = 0;
1:ec87b17: 
1:ec87b17:                     StompConnection connection = new StompConnection();
1:ec87b17:                     try {
1:ec87b17:                         stompConnect(connection);
1:1236bbf:                         connection.connect("system", "manager");
1:ec87b17:                     } catch (Exception e) {
1:ec87b17:                         LOG.error("Caught Exception while connecting: " + e.getMessage());
1:ec87b17:                     }
1:ec87b17: 
1:540a66b:                     taskConnections.add(connection);
1:540a66b: 
1:ec87b17:                     try {
1:ec87b17: 
1:ec87b17:                         for (int i = 0; i < 10; i++) {
1:ec87b17:                             connection.subscribe("/queue/test-" + i, "auto");
1:ec87b17:                             connection.subscribe("/topic/test-" + i, "auto");
1:ec87b17:                         }
1:ec87b17: 
1:ec87b17:                         HashMap<String, String> headers = new HashMap<String, String>();
1:ec87b17:                         headers.put("activemq.prefetchSize", "1");
1:1236bbf:                         connection.subscribe("/topic/" + getTopicName(), "auto", headers);
1:ec87b17:                         ready.await();
1:ec87b17: 
1:ec87b17:                         // Now that the main test thread is ready we wait a bit to let the tasks
1:ec87b17:                         // all subscribe and the CPU to settle a bit.
1:ec87b17:                         TimeUnit.SECONDS.sleep(3);
1:ec87b17:                         started.countDown();
1:ec87b17: 
1:540a66b:                         while (receiveCount.get() != TASK_COUNT * MSG_COUNT) {
1:ec87b17:                             // Read Timeout ends this task, we override the default here since there
1:ec87b17:                             // are so many threads running and we don't know how slow the test box is.
1:ec87b17:                             StompFrame frame = connection.receive(TimeUnit.SECONDS.toMillis(60));
1:ec87b17:                             assertNotNull(frame);
1:ec87b17:                             numReceived++;
1:ec87b17:                             if (LOG.isDebugEnabled() && (numReceived % 50) == 0 || numReceived == MSG_COUNT) {
1:ec87b17:                                 LOG.debug("Receiver thread got message: " + frame.getHeaders().get("message-id"));
1:ec87b17:                             }
1:ec87b17:                             receiveCount.incrementAndGet();
1:ec87b17:                         }
1:ec87b17: 
1:ec87b17:                     } catch (Exception e) {
1:ec87b17:                         if (numReceived != MSG_COUNT) {
1:ec87b17:                             LOG.warn("Receive task caught exception after receipt of ["+numReceived+
1:ec87b17:                                      "] messages: " + e.getMessage());
1:ec87b17:                         }
1:ec87b17:                     }
1:ec87b17:                 }
1:ec87b17:             });
1:ec87b17:         }
1:ec87b17: 
1:ec87b17:         ready.countDown();
1:ec87b17:         assertTrue("Timed out waiting for receivers to start.", started.await(5, TimeUnit.MINUTES));
1:ec87b17:         String frame;
1:ec87b17: 
1:ec87b17:         // Lets still wait a bit to make sure all subscribers get a fair shake at
1:ec87b17:         // getting online before we send.  Account for slow Hudson machines
1:ec87b17:         TimeUnit.SECONDS.sleep(5);
1:ec87b17: 
1:ec87b17:         for( int ix = 0; ix < MSG_COUNT; ix++) {
1:b4f21b6:             frame = "SEND\n" +
1:1236bbf:                     "destination:/topic/" + getTopicName() +
1:ec87b17:                     "\nid:" + ix +
1:ec87b17:                     "\ncontent-length:5" + " \n\n" +
1:ec87b17:                     "\u0001\u0002\u0000\u0004\u0005" + Stomp.NULL;
2:ec87b17:             stompConnection.sendFrame(frame);
1:ec87b17:         }
1:ec87b17: 
1:ec87b17:         LOG.info("All " + MSG_COUNT + " message have been sent, awaiting receipt.");
1:ec87b17: 
1:ec87b17:         assertTrue("Should get [" + TASK_COUNT * MSG_COUNT + "] message but was: " + receiveCount.get(), Wait.waitFor(new Wait.Condition() {
1:ec87b17: 
2:ec87b17:             @Override
1:ec87b17:             public boolean isSatisified() throws Exception {
1:ec87b17:                 return receiveCount.get() == TASK_COUNT * MSG_COUNT;
1:ec87b17:             }
1:ec87b17:         }, TimeUnit.MINUTES.toMillis(10)));
1:ec87b17: 
1:ec87b17:         LOG.info("Test Completed and all messages received, shutting down.");
1:ec87b17: 
1:540a66b:         for (StompConnection taskConnection : taskConnections) {
1:540a66b:             try {
1:540a66b:                 taskConnection.disconnect();
1:540a66b:                 taskConnection.close();
1:540a66b:             } catch (Exception ex) {
1:540a66b:             }
1:540a66b:         }
1:540a66b: 
1:ec87b17:         executor.shutdown();
1:ec87b17:         executor.awaitTermination(2, TimeUnit.MINUTES);
1:540a66b: 
1:540a66b:         stompDisconnect();
1:ec87b17:     }
1:ec87b17: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final List<StompConnection> taskConnections = new ArrayList<>();
1: 
/////////////////////////////////////////////////////////////////////////
1:                     taskConnections.add(connection);
1: 
/////////////////////////////////////////////////////////////////////////
1:                         while (receiveCount.get() != TASK_COUNT * MSG_COUNT) {
/////////////////////////////////////////////////////////////////////////
1:         for (StompConnection taskConnection : taskConnections) {
1:             try {
1:                 taskConnection.disconnect();
1:                 taskConnection.close();
1:             } catch (Exception ex) {
1:             }
1:         }
1: 
1: 
1:         stompDisconnect();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7e28d2a
/////////////////////////////////////////////////////////////////////////
0:     protected void addStompConnector() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=5*60*1000)
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.TransportConnector;
1: public class StompLoadTest extends StompTestSupport {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	protected void addStompConnector() throws Exception {
0:         TransportConnector connector = brokerService.addConnector("stomp://0.0.0.0:"+port);
0:         port = connector.getConnectUri().getPort();
1:     }
1: 
1:     @Override
1:         super.setUp();
1:         stompConnection.connect("system", "manager");
0:         queue = new ActiveMQQueue(getTopicName());
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         } catch (Exception e) {
1:             super.tearDown();
/////////////////////////////////////////////////////////////////////////
1:                         connection.connect("system", "manager");
/////////////////////////////////////////////////////////////////////////
1:                         connection.subscribe("/topic/" + getTopicName(), "auto", headers);
/////////////////////////////////////////////////////////////////////////
1:                     "destination:/topic/" + getTopicName() +
/////////////////////////////////////////////////////////////////////////
commit:b4f21b6
/////////////////////////////////////////////////////////////////////////
1:             frame = "SEND\n" +
0:                     "destination:/topic/" + getDestinationName() +
commit:ec87b17
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
0: import java.io.IOException;
0: import java.net.Socket;
0: import java.net.URI;
1: import java.util.HashMap;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Session;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.Wait;
0: import org.junit.After;
0: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class StompLoadTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompLoadTest.class);
1: 
0:     protected String bindAddress = "stomp://localhost:61613";
0:     protected String confUri = "xbean:org/apache/activemq/transport/stomp/stomp-auth-broker.xml";
0:     protected String jmsUri = "vm://localhost";
1: 
1:     private static final int TASK_COUNT = 100;
1:     private static final int MSG_COUNT = 250;  // AMQ-3819: Above 250 or so and the CPU goes bonkers with NOI+SSL.
1: 
0:     private BrokerService broker;
0:     protected StompConnection stompConnection = new StompConnection();
0:     protected Connection connection;
0:     protected Session session;
0:     protected ActiveMQQueue queue;
1: 
1:     private ExecutorService executor;
1:     private CountDownLatch started;
1:     private CountDownLatch ready;
1:     private AtomicInteger receiveCount;
1: 
0:     @Before
1:     public void setUp() throws Exception {
1: 
0:         broker = BrokerFactory.createBroker(new URI(confUri));
0:         broker.setDeleteAllMessagesOnStartup(true);
0:         broker.start();
0:         broker.waitUntilStarted();
1: 
1:         stompConnect();
1: 
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(jmsUri);
0:         connection = cf.createConnection("system", "manager");
0:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         queue = new ActiveMQQueue(getDestinationName());
0:         connection.start();
1: 
1:         executor = Executors.newFixedThreadPool(TASK_COUNT, new ThreadFactory() {
1: 
1:             private long i = 0;
1: 
1:             public Thread newThread(Runnable runnable) {
1:                 this.i++;
1:                 final Thread t = new Thread(runnable, "Test Worker " + this.i);
1:                 return t;
1:             }
1:         });
1: 
1:         started = new CountDownLatch(TASK_COUNT);
1:         ready = new CountDownLatch(1);
1:         receiveCount = new AtomicInteger(0);
1:     }
1: 
0:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             executor.shutdownNow();
0:             connection.close();
0:             stompDisconnect();
0:         } catch(Exception e) {
1:         } finally {
0:             broker.stop();
0:             broker.waitUntilStopped();
1:         }
1:     }
1: 
0:     @Test(timeout=20*60*1000*1000)
1:     public void testStompUnloadLoad() throws Exception {
1: 
1:         for (int i = 0; i < TASK_COUNT; ++i) {
1:             executor.execute(new Runnable() {
1: 
1:                 @Override
1:                 public void run() {
1: 
1:                     LOG.debug("Receive Thread Connecting to Broker.");
1: 
1:                     int numReceived = 0;
1: 
1:                     StompConnection connection = new StompConnection();
1:                     try {
1:                         stompConnect(connection);
1:                     } catch (Exception e) {
1:                         LOG.error("Caught Exception while connecting: " + e.getMessage());
1:                     }
1: 
1:                     try {
1: 
1:                         for (int i = 0; i < 10; i++) {
1:                             connection.subscribe("/queue/test-" + i, "auto");
1:                             connection.subscribe("/topic/test-" + i, "auto");
1:                         }
1: 
1:                         HashMap<String, String> headers = new HashMap<String, String>();
1:                         headers.put("activemq.prefetchSize", "1");
0:                         connection.subscribe("/topic/" + getDestinationName(), "auto", headers);
1:                         ready.await();
1: 
1:                         // Now that the main test thread is ready we wait a bit to let the tasks
1:                         // all subscribe and the CPU to settle a bit.
1:                         TimeUnit.SECONDS.sleep(3);
1:                         started.countDown();
1: 
0:                         while (true) {
1:                             // Read Timeout ends this task, we override the default here since there
1:                             // are so many threads running and we don't know how slow the test box is.
1:                             StompFrame frame = connection.receive(TimeUnit.SECONDS.toMillis(60));
1:                             assertNotNull(frame);
1:                             numReceived++;
1:                             if (LOG.isDebugEnabled() && (numReceived % 50) == 0 || numReceived == MSG_COUNT) {
1:                                 LOG.debug("Receiver thread got message: " + frame.getHeaders().get("message-id"));
1:                             }
1:                             receiveCount.incrementAndGet();
1:                         }
1: 
1:                     } catch (Exception e) {
1:                         if (numReceived != MSG_COUNT) {
1:                             LOG.warn("Receive task caught exception after receipt of ["+numReceived+
1:                                      "] messages: " + e.getMessage());
1:                         }
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         ready.countDown();
1:         assertTrue("Timed out waiting for receivers to start.", started.await(5, TimeUnit.MINUTES));
1:         String frame;
1: 
1:         // Lets still wait a bit to make sure all subscribers get a fair shake at
1:         // getting online before we send.  Account for slow Hudson machines
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         for( int ix = 0; ix < MSG_COUNT; ix++) {
0:             frame = "SEND\n destination:/topic/" + getDestinationName() +
1:                     "\nid:" + ix +
1:                     "\ncontent-length:5" + " \n\n" +
1:                     "\u0001\u0002\u0000\u0004\u0005" + Stomp.NULL;
1:             stompConnection.sendFrame(frame);
1:         }
1: 
1:         LOG.info("All " + MSG_COUNT + " message have been sent, awaiting receipt.");
1: 
1:         assertTrue("Should get [" + TASK_COUNT * MSG_COUNT + "] message but was: " + receiveCount.get(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return receiveCount.get() == TASK_COUNT * MSG_COUNT;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(10)));
1: 
1:         LOG.info("Test Completed and all messages received, shutting down.");
1: 
1:         executor.shutdown();
1:         executor.awaitTermination(2, TimeUnit.MINUTES);
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
0:         LOG.info("Test Finished.");
1:     }
1: 
0:     protected void stompConnect() throws Exception {
0:         URI connectUri = new URI(bindAddress);
0:         LOG.debug("Attempting connection to: " + bindAddress);
0:         stompConnection.open(createSocket(connectUri));
0:         stompConnection.connect("system", "manager");
1:     }
1: 
0:     private void stompConnect(StompConnection connection) throws Exception {
0:         URI connectUri = new URI(bindAddress);
0:         LOG.debug("Attempting connection to: " + bindAddress);
0:         connection.open(createSocket(connectUri));
0:         connection.connect("system", "manager");
1:     }
1: 
0:     protected Socket createSocket(URI connectUri) throws IOException {
0:         return new Socket("127.0.0.1", connectUri.getPort());
1:     }
1: 
0:     protected String getDestinationName() {
0:         return getClass().getName() + ".Tester";
1:     }
1: 
0:     protected void stompDisconnect() throws IOException {
0:         if (stompConnection != null) {
0:             stompConnection.close();
0:             stompConnection = null;
1:         }
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3b7a297
/////////////////////////////////////////////////////////////////////////
commit:1554954
/////////////////////////////////////////////////////////////////////////
0:     final int testTime = 30 * 60 * 1000;
0:     final String bindAddress = "stomp://0.0.0.0:61612";
commit:026c120
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.transport.stomp;
0: 
0: import java.net.Socket;
0: import java.net.URI;
0: import java.util.HashMap;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.apache.activemq.transport.stomp.StompConnection;
0: import org.apache.activemq.transport.stomp.StompFrame;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: /**
0:  * 
0:  * Simulates load on the Stomp connector. All producers/consumers open/close a
0:  * connection on every command Configurable number of producers/consumers, their
0:  * speed and duration of test
0:  * 
0:  * Start a broker with the desired configuration to test and then run this test
0:  * 
0:  */
0: public class StompLoadTest extends TestCase {
0: 
0:     private static final Log LOG = LogFactory.getLog(StompLoadTest.class);
0: 
0:     final int producerSleep = 10;
0:     final int consumerSleep = 10;
0:     final int msgCount = 10000;
0:     final int producerCount = 5;
0:     final int consumerCount = 5;
0:     final int testTime = 10 * 60 * 1000;
0:     final String bindAddress = "stomp://0.0.0.0:61613";
0: 
0:     public void testLoad() throws Exception {
0: 
0:         for (int i = 0; i < producerCount; i++) {
0:             ProducerThread producerThread = new ProducerThread("producer" + i);
0:             producerThread.start();
0:         }
0: 
0:         for (int i = 0; i < consumerCount; i++) {
0:             Thread consumerThread = new ConsumerThread("consumer" + i);
0:             consumerThread.start();
0:         }
0: 
0:         Thread.sleep(testTime);
0:     }
0: 
0:     public StompConnection createConnection() throws Exception {
0:         StompConnection conn = new StompConnection();
0:         URI connectUri = new URI(bindAddress);
0:         conn.open(new Socket(connectUri.getHost(), connectUri.getPort()));
0:         conn.connect("", "");
0:         return conn;
0:     }
0: 
0:     class ProducerThread extends Thread {
0: 
0:         String name;
0: 
0:         public ProducerThread(String name) {
0:             this.name = name;
0:         }
0: 
0:         public void run() {
0:             for (int i = 0; i < msgCount; i++) {
0:                 try {
0:                     StompConnection conn = createConnection();
0:                     String msg = "test message " + i;
0:                     LOG.info(name + " sending " + msg);
0:                     conn.send("/queue/test", msg);
0:                     conn.disconnect();
0:                     Thread.sleep(producerSleep);
0:                 } catch (Exception e) {
0:                     e.printStackTrace();
0:                 }
0:             }
0:         }
0:     }
0: 
0:     class ConsumerThread extends Thread {
0: 
0:         String name;
0: 
0:         public ConsumerThread(String name) {
0:             this.name = name;
0:         }
0: 
0:         public void run() {
0:             for (int i = 0; i < msgCount; i++) {
0:                 try {
0:                     StompConnection conn = createConnection();
0:                     HashMap<String, String> headers = new HashMap<String, String>();
0:                     headers.put("activemq.prefetchSize", "1");
0:                     conn.subscribe("/queue/test", "client", headers);
0:                     StompFrame frame = conn.receive(1000);
0:                     conn.ack(frame);
0:                     LOG.info(name + " received " + frame.getBody());
0:                     conn.disconnect();
0:                     Thread.sleep(consumerSleep);
0:                 } catch (Exception e) {
0:                     e.printStackTrace();
0:                 }
0:             }
0:         }
0:     }
0: 
0: }
============================================================================