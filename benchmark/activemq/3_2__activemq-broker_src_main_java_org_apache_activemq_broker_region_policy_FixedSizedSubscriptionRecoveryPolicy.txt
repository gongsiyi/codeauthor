1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region.policy;
1:d29ca2a: 
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.List;
1:1a5ad28: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:a110604: import org.apache.activemq.broker.region.SubscriptionRecovery;
1:d29ca2a: import org.apache.activemq.broker.region.Topic;
1:2748ae1: import org.apache.activemq.command.ActiveMQDestination;
1:2748ae1: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.memory.list.DestinationBasedMessageList;
1:d29ca2a: import org.apache.activemq.memory.list.MessageList;
1:d29ca2a: import org.apache.activemq.memory.list.SimpleMessageList;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * This implementation of {@link SubscriptionRecoveryPolicy} will keep a fixed
1:d29ca2a:  * amount of memory available in RAM for message history which is evicted in
1:d29ca2a:  * time order.
1:d29ca2a:  * 
1:68d245f:  * @org.apache.xbean.XBean
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class FixedSizedSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1:d29ca2a: 
1:d29ca2a:     private MessageList buffer;
1:bca3d9e:     private int maximumSize =  64 * 1024;
1:d29ca2a:     private boolean useSharedBuffer = true;
1:d29ca2a: 
1:bca3d9e:     public FixedSizedSubscriptionRecoveryPolicy() {
1:d29ca2a:         
1:d29ca2a:     }
1:1a5ad28:     
1:c1a0cd6:     public SubscriptionRecoveryPolicy copy() {
1:c1a0cd6:         FixedSizedSubscriptionRecoveryPolicy rc = new FixedSizedSubscriptionRecoveryPolicy();
1:c1a0cd6:         rc.setMaximumSize(maximumSize);
1:c1a0cd6:         rc.setUseSharedBuffer(useSharedBuffer);
1:c1a0cd6:         return rc;
1:c1a0cd6:     }
1:c1a0cd6: 
1:7f5213b:     public boolean add(ConnectionContext context, MessageReference message) throws Exception {
1:d29ca2a:         buffer.add(message);
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
1:d29ca2a:         // Re-dispatch the messages from the buffer.
1:230a86c:         List copy = buffer.getMessages(sub.getActiveMQDestination());
1:230a86c:         if (!copy.isEmpty()) {
1:230a86c:             for (Iterator iter = copy.iterator(); iter.hasNext();) {
1:230a86c:                 MessageReference node = (MessageReference)iter.next();
1:230a86c:                 sub.addRecoveredMessage(context, node);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:         buffer = createMessageList();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void stop() throws Exception {
1:d29ca2a:         buffer.clear();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // Properties
1:d29ca2a:     // -------------------------------------------------------------------------
1:d29ca2a:     public MessageList getBuffer() {
1:d29ca2a:         return buffer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setBuffer(MessageList buffer) {
1:d29ca2a:         this.buffer = buffer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int getMaximumSize() {
1:d29ca2a:         return maximumSize;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sets the maximum amount of RAM in bytes that this buffer can hold in RAM
1:d29ca2a:      */
1:d29ca2a:     public void setMaximumSize(int maximumSize) {
1:d29ca2a:         this.maximumSize = maximumSize;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isUseSharedBuffer() {
1:d29ca2a:         return useSharedBuffer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setUseSharedBuffer(boolean useSharedBuffer) {
1:d29ca2a:         this.useSharedBuffer = useSharedBuffer;
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public Message[] browse(ActiveMQDestination destination) throws Exception {
1:2748ae1:         return buffer.browse(destination);
1:d29ca2a:     }
1:d29ca2a:     
1:1a5ad28:     public void setBroker(Broker broker) {        
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // Implementation methods
1:230a86c: 
1:d29ca2a:     // -------------------------------------------------------------------------
1:d29ca2a:     protected MessageList createMessageList() {
1:d29ca2a:         if (useSharedBuffer) {
1:d29ca2a:             return new SimpleMessageList(maximumSize);
1:230a86c:         } else {
1:d29ca2a:             return new DestinationBasedMessageList(maximumSize);
1:d29ca2a:         }
1:d29ca2a:     }
1:c1a0cd6: 
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
1:         List copy = buffer.getMessages(sub.getActiveMQDestination());
1:         if (!copy.isEmpty()) {
1:             for (Iterator iter = copy.iterator(); iter.hasNext();) {
1:                 MessageReference node = (MessageReference)iter.next();
1:                 sub.addRecoveredMessage(context, node);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Message[] browse(ActiveMQDestination destination) throws Exception {
1: 
1:         } else {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c1a0cd6
/////////////////////////////////////////////////////////////////////////
1:     public SubscriptionRecoveryPolicy copy() {
1:         FixedSizedSubscriptionRecoveryPolicy rc = new FixedSizedSubscriptionRecoveryPolicy();
1:         rc.setMaximumSize(maximumSize);
1:         rc.setUseSharedBuffer(useSharedBuffer);
1:         return rc;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public boolean add(ConnectionContext context, MessageReference message) throws Exception {
0:     public void recover(ConnectionContext context, Topic topic, Subscription sub) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public Message[] browse(ActiveMQDestination destination) throws Exception{
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.Topic;
0: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.memory.list.DestinationBasedMessageList;
1: import org.apache.activemq.memory.list.MessageList;
1: import org.apache.activemq.memory.list.SimpleMessageList;
1: 
1: /**
1:  * This implementation of {@link SubscriptionRecoveryPolicy} will keep a fixed
1:  * amount of memory available in RAM for message history which is evicted in
1:  * time order.
1:  * 
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
1: public class FixedSizedSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1: 
1:     private MessageList buffer;
0:     private int maximumSize = 100 * 64 * 1024;
1:     private boolean useSharedBuffer = true;
1: 
0:     public boolean add(ConnectionContext context, MessageReference message) throws Throwable {
1:         buffer.add(message);
1:         return true;
1:     }
1: 
0:     public void recover(ConnectionContext context, Topic topic, Subscription sub) throws Throwable {
1:         // Re-dispatch the messages from the buffer.
0:         List copy = buffer.getMessages(sub);
0:         if( !copy.isEmpty() ) {
0:             MessageEvaluationContext msgContext = context.getMessageEvaluationContext();
0:             try {
0:                 for (Iterator iter = copy.iterator(); iter.hasNext();) {
0:                     MessageReference node = (MessageReference) iter.next();
0:                     msgContext.setDestination(node.getRegionDestination().getActiveMQDestination());
0:                     msgContext.setMessageReference(node);
0:                     if (sub.matches(node, msgContext) ) {
0:                         sub.add(node);
1:                     }
1:                 }
0:             } finally {
0:                 msgContext.clear();
1:             }
1:         }
1:     }
1: 
1:     public void start() throws Exception {
1:         buffer = createMessageList();
1:     }
1: 
1:     public void stop() throws Exception {
1:         buffer.clear();
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1:     public MessageList getBuffer() {
1:         return buffer;
1:     }
1: 
1:     public void setBuffer(MessageList buffer) {
1:         this.buffer = buffer;
1:     }
1: 
1:     public int getMaximumSize() {
1:         return maximumSize;
1:     }
1: 
1:     /**
1:      * Sets the maximum amount of RAM in bytes that this buffer can hold in RAM
1:      */
1:     public void setMaximumSize(int maximumSize) {
1:         this.maximumSize = maximumSize;
1:     }
1: 
1:     public boolean isUseSharedBuffer() {
1:         return useSharedBuffer;
1:     }
1: 
1:     public void setUseSharedBuffer(boolean useSharedBuffer) {
1:         this.useSharedBuffer = useSharedBuffer;
1:     }
1: 
1:     // Implementation methods
1:     
1:     // -------------------------------------------------------------------------
1:     protected MessageList createMessageList() {
1:         if (useSharedBuffer) {
1:             return new SimpleMessageList(maximumSize);
1:         }
0:         else {
1:             return new DestinationBasedMessageList(maximumSize);
1:         }
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void setBroker(Broker broker) {        
0:     }
commit:bca3d9e
/////////////////////////////////////////////////////////////////////////
1:     private int maximumSize =  64 * 1024;
1:     public FixedSizedSubscriptionRecoveryPolicy() {
0:         
0:     }
0:     
commit:a110604
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
0: import java.util.List;
1: import org.apache.activemq.broker.region.SubscriptionRecovery;
/////////////////////////////////////////////////////////////////////////
0:     public void recover(ConnectionContext context,Topic topic,SubscriptionRecovery sub) throws Exception{
0:         List copy=buffer.getMessages(sub.getActiveMQDestination());
0:         if(!copy.isEmpty()){
0:             for(Iterator iter=copy.iterator();iter.hasNext();){
0:                 MessageReference node=(MessageReference)iter.next();
0:                 sub.addRecoveredMessage(context,node);
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy.TimestampWrapper;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
0: import org.apache.activemq.filter.DestinationFilter;
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Message[] browse(ActiveMQDestination destination) throws Throwable{
1:         return buffer.browse(destination);
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:88203ae
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
0: import java.util.List;
0: 
============================================================================