1:5cbb4bf: /**
1:5cbb4bf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5cbb4bf:  * contributor license agreements.  See the NOTICE file distributed with
1:5cbb4bf:  * this work for additional information regarding copyright ownership.
1:5cbb4bf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5cbb4bf:  * (the "License"); you may not use this file except in compliance with
1:5cbb4bf:  * the License.  You may obtain a copy of the License at
1:5cbb4bf:  *
1:5cbb4bf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5cbb4bf:  *
1:5cbb4bf:  * Unless required by applicable law or agreed to in writing, software
1:5cbb4bf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5cbb4bf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5cbb4bf:  * See the License for the specific language governing permissions and
1:5cbb4bf:  * limitations under the License.
1:5cbb4bf:  */
1:5cbb4bf: package org.apache.activemq.bugs;
1:5cbb4bf: 
1:5cbb4bf: import org.apache.activemq.ActiveMQConnectionFactory;
1:5cbb4bf: import org.apache.activemq.broker.BrokerService;
1:5cbb4bf: import org.apache.activemq.broker.BrokerTestSupport;
1:5cbb4bf: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:5cbb4bf: import org.apache.activemq.store.kahadb.KahaDBStore;
1:5cbb4bf: import org.apache.activemq.util.IOHelper;
1:5cbb4bf: import org.slf4j.Logger;
1:5cbb4bf: import org.slf4j.LoggerFactory;
1:5cbb4bf: 
1:5cbb4bf: import javax.jms.*;
1:5cbb4bf: import java.io.File;
1:5cbb4bf: 
1:5cbb4bf: public class MemoryUsageBrokerTest extends BrokerTestSupport {
1:5cbb4bf:     private static final Logger LOG = LoggerFactory.getLogger(MemoryUsageBrokerTest.class);
1:5cbb4bf: 
1:5cbb4bf:     protected void setUp() throws Exception {
1:5cbb4bf:         this.setAutoFail(true);
1:5cbb4bf:         super.setUp();
1:5cbb4bf:     }
1:5cbb4bf: 
1:5cbb4bf:     @Override
1:5cbb4bf:     protected PolicyEntry getDefaultPolicy() {
1:5cbb4bf:         PolicyEntry policy = super.getDefaultPolicy();
1:5cbb4bf:         // Disable PFC and assign a large memory limit that's larger than the default broker memory limit for queues
1:5cbb4bf:         policy.setProducerFlowControl(false);
1:5cbb4bf:         policy.setQueue(">");
1:5cbb4bf:         policy.setMemoryLimit(128 * 1024 * 1024);
1:5cbb4bf:         return policy;
1:5cbb4bf:     }
1:5cbb4bf: 
1:5cbb4bf:     protected BrokerService createBroker() throws Exception {
1:5cbb4bf:         BrokerService broker = new BrokerService();
1:5cbb4bf:         KahaDBStore kaha = new KahaDBStore();
1:5cbb4bf:         File directory = new File("target/activemq-data/kahadb");
1:5cbb4bf:         IOHelper.deleteChildren(directory);
1:5cbb4bf:         kaha.setDirectory(directory);
1:5cbb4bf:         kaha.deleteAllMessages();
1:5cbb4bf:         broker.setPersistenceAdapter(kaha);
1:5cbb4bf:         return broker;
1:5cbb4bf:     }
1:5cbb4bf: 
1:5cbb4bf:     protected ConnectionFactory createConnectionFactory() {
1:5cbb4bf:         return new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:5cbb4bf:     }
1:5cbb4bf: 
1:5cbb4bf:     protected Connection createJmsConnection() throws JMSException {
1:5cbb4bf:         return createConnectionFactory().createConnection();
1:5cbb4bf:     }
1:5cbb4bf: 
1:5cbb4bf:     public void testMemoryUsage() throws Exception {
1:5cbb4bf:         Connection conn = createJmsConnection();
1:5cbb4bf:         Session session = conn.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:5cbb4bf:         Queue queue = session.createQueue("queue.a.b");
1:5cbb4bf:         MessageProducer producer = session.createProducer(queue);
1:5cbb4bf:         for (int i = 0; i < 100000; i++) {
1:5cbb4bf:             BytesMessage bm = session.createBytesMessage();
1:5cbb4bf:             bm.writeBytes(new byte[1024]);
1:5cbb4bf:             producer.send(bm);
1:5cbb4bf:             if ((i + 1) % 100 == 0) {
1:5cbb4bf:                 session.commit();
1:5cbb4bf:                 int memoryUsagePercent = broker.getSystemUsage().getMemoryUsage().getPercentUsage();
1:5cbb4bf:                 LOG.info((i + 1) + " messages have been sent; broker memory usage " + memoryUsagePercent + "%");
1:5cbb4bf:                 assertTrue("Used more than available broker memory", memoryUsagePercent <= 100);
1:5cbb4bf:             }
1:5cbb4bf:         }
1:5cbb4bf:         session.commit();
1:5cbb4bf:         producer.close();
1:5cbb4bf:         session.close();
1:5cbb4bf:         conn.close();
1:5cbb4bf:     }
1:5cbb4bf: 
1:5cbb4bf: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:5cbb4bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerTestSupport;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.IOHelper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.*;
1: import java.io.File;
1: 
1: public class MemoryUsageBrokerTest extends BrokerTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(MemoryUsageBrokerTest.class);
1: 
1:     protected void setUp() throws Exception {
1:         this.setAutoFail(true);
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     protected PolicyEntry getDefaultPolicy() {
1:         PolicyEntry policy = super.getDefaultPolicy();
1:         // Disable PFC and assign a large memory limit that's larger than the default broker memory limit for queues
1:         policy.setProducerFlowControl(false);
1:         policy.setQueue(">");
1:         policy.setMemoryLimit(128 * 1024 * 1024);
1:         return policy;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         KahaDBStore kaha = new KahaDBStore();
1:         File directory = new File("target/activemq-data/kahadb");
1:         IOHelper.deleteChildren(directory);
1:         kaha.setDirectory(directory);
1:         kaha.deleteAllMessages();
1:         broker.setPersistenceAdapter(kaha);
1:         return broker;
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() {
1:         return new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:     }
1: 
1:     protected Connection createJmsConnection() throws JMSException {
1:         return createConnectionFactory().createConnection();
1:     }
1: 
1:     public void testMemoryUsage() throws Exception {
1:         Connection conn = createJmsConnection();
1:         Session session = conn.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("queue.a.b");
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < 100000; i++) {
1:             BytesMessage bm = session.createBytesMessage();
1:             bm.writeBytes(new byte[1024]);
1:             producer.send(bm);
1:             if ((i + 1) % 100 == 0) {
1:                 session.commit();
1:                 int memoryUsagePercent = broker.getSystemUsage().getMemoryUsage().getPercentUsage();
1:                 LOG.info((i + 1) + " messages have been sent; broker memory usage " + memoryUsagePercent + "%");
1:                 assertTrue("Used more than available broker memory", memoryUsagePercent <= 100);
1:             }
1:         }
1:         session.commit();
1:         producer.close();
1:         session.close();
1:         conn.close();
1:     }
1: 
1: }
============================================================================