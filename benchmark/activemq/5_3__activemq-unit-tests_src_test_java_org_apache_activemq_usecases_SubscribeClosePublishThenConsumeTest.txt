1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
4:a677c21: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.DeliveryMode;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: import javax.jms.Session;
1:a677c21: import javax.jms.TextMessage;
1:a677c21: import javax.jms.Topic;
1:a677c21: import javax.jms.TopicSubscriber;
1:a677c21: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.test.TestSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:a677c21: /**
1:a677c21:  * @author Paul Smith
1:b0c2a40:  * 
1:a677c21:  */
1:a677c21: public class SubscribeClosePublishThenConsumeTest extends TestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SubscribeClosePublishThenConsumeTest.class);
1:a677c21: 
1:a677c21:     public void testDurableTopic() throws Exception {
1:a677c21:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://locahost");
1:a677c21: 
1:a677c21:         String topicName = "TestTopic";
1:a677c21:         String clientID = getName();
1:230a86c:         String subscriberName = "MySubscriber:" + System.currentTimeMillis();
1:a677c21: 
1:a677c21:         Connection connection = connectionFactory.createConnection();
1:a677c21:         connection.setClientID(clientID);
1:a677c21: 
1:a677c21:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         Topic topic = session.createTopic(topicName);
1:a677c21: 
1:a677c21:         // this should register a durable subscriber, we then close it to
1:a677c21:         // test that we get messages from the producer later on
1:a677c21:         TopicSubscriber subscriber = session.createDurableSubscriber(topic, subscriberName);
1:a677c21:         connection.start();
1:a677c21: 
1:a677c21:         topic = null;
1:a677c21:         subscriber.close();
1:a677c21:         subscriber = null;
1:a677c21:         session.close();
1:a677c21:         session = null;
1:a677c21: 
1:230a86c:         // Create the new connection before closing to avoid the broker shutting
1:230a86c:         // down.
1:230a86c:         // now create a new Connection, Session & Producer, send some messages &
1:230a86c:         // then close
1:230a86c:         Connection t = connectionFactory.createConnection();
1:a677c21:         connection.close();
1:a677c21:         connection = t;
1:230a86c: 
1:a677c21:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         topic = session.createTopic(topicName);
1:a677c21:         MessageProducer producer = session.createProducer(topic);
1:a677c21:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:a677c21:         TextMessage textMessage = session.createTextMessage("Hello World");
1:a677c21:         producer.send(textMessage);
1:a677c21:         textMessage = null;
1:a677c21: 
1:a677c21:         topic = null;
1:a677c21:         session.close();
1:a677c21:         session = null;
1:a677c21: 
1:230a86c:         // Now (re)register the Durable subscriber, setup a listener and wait
1:230a86c:         // for messages that should
1:a677c21:         // have been published by the previous producer
1:230a86c:         t = connectionFactory.createConnection();
1:a677c21:         connection.close();
1:a677c21:         connection = t;
1:230a86c: 
1:a677c21:         connection.setClientID(clientID);
1:a677c21:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         topic = session.createTopic(topicName);
1:a677c21: 
1:a677c21:         subscriber = session.createDurableSubscriber(topic, subscriberName);
1:a677c21:         connection.start();
1:a677c21: 
1:fc00993:         LOG.info("Started connection - now about to try receive the textMessage");
1:a677c21: 
1:a677c21:         long time = System.currentTimeMillis();
1:a677c21:         Message message = subscriber.receive(15000L);
1:a677c21:         long elapsed = System.currentTimeMillis() - time;
1:a677c21: 
1:fc00993:         LOG.info("Waited for: " + elapsed + " millis");
1:a677c21: 
1:a677c21:         assertNotNull("Should have received the message we published by now", message);
1:a677c21:         assertTrue("should be text textMessage", message instanceof TextMessage);
1:230a86c:         textMessage = (TextMessage)message;
1:a677c21:         assertEquals("Hello World", textMessage.getText());
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(SubscribeClosePublishThenConsumeTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Started connection - now about to try receive the textMessage");
1:         LOG.info("Waited for: " + elapsed + " millis");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.test.TestSupport;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:         String subscriberName = "MySubscriber:" + System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
1:         // Create the new connection before closing to avoid the broker shutting
1:         // down.
1:         // now create a new Connection, Session & Producer, send some messages &
1:         // then close
1:         Connection t = connectionFactory.createConnection();
1: 
/////////////////////////////////////////////////////////////////////////
1:         // Now (re)register the Durable subscriber, setup a listener and wait
1:         // for messages that should
1:         t = connectionFactory.createConnection();
1: 
/////////////////////////////////////////////////////////////////////////
1:         textMessage = (TextMessage)message;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SubscribeClosePublishThenConsumeTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.test.TestSupport;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: 
1: /**
1:  * @author Paul Smith
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class SubscribeClosePublishThenConsumeTest extends TestSupport {
1: 
1:     public void testDurableTopic() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://locahost");
1: 
1:         String topicName = "TestTopic";
1:         String clientID = getName();
0:         String subscriberName = "MySubscriber:"+System.currentTimeMillis();
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(clientID);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(topicName);
1: 
1:         // this should register a durable subscriber, we then close it to
1:         // test that we get messages from the producer later on
1:         TopicSubscriber subscriber = session.createDurableSubscriber(topic, subscriberName);
1:         connection.start();
1: 
1:         topic = null;
1:         subscriber.close();
1:         subscriber = null;
1:         session.close();
1:         session = null;
1: 
0:         // Create the new connection before closing to avoid the broker shutting down.
0:         // now create a new Connection, Session &  Producer, send some messages & then close
0:         Connection t = connectionFactory.createConnection();        
1:         connection.close();
1:         connection = t;
1:         
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         topic = session.createTopic(topicName);
1:         MessageProducer producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         TextMessage textMessage = session.createTextMessage("Hello World");
1:         producer.send(textMessage);
1:         textMessage = null;
1: 
1:         topic = null;
1:         session.close();
1:         session = null;
1: 
0:         // Now (re)register the Durable subscriber, setup a listener and wait for messages that should
1:         // have been published by the previous producer
0:         t = connectionFactory.createConnection();        
1:         connection.close();
1:         connection = t;
1:         
1:         connection.setClientID(clientID);
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         topic = session.createTopic(topicName);
1: 
1:         subscriber = session.createDurableSubscriber(topic, subscriberName);
1:         connection.start();
1: 
0:         log.info("Started connection - now about to try receive the textMessage");
1: 
1:         long time = System.currentTimeMillis();
1:         Message message = subscriber.receive(15000L);
1:         long elapsed = System.currentTimeMillis() - time;
1: 
0:         log.info("Waited for: " + elapsed + " millis");
1: 
1:         assertNotNull("Should have received the message we published by now", message);
1:         assertTrue("should be text textMessage", message instanceof TextMessage);
0:         textMessage = (TextMessage) message;
1:         assertEquals("Hello World", textMessage.getText());
1:     }
1: }
============================================================================