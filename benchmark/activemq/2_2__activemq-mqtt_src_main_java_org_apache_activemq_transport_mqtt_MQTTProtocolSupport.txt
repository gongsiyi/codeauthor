1:d8f9686: /**
1:d8f9686:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d8f9686:  * contributor license agreements.  See the NOTICE file distributed with
1:d8f9686:  * this work for additional information regarding copyright ownership.
1:d8f9686:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d8f9686:  * (the "License"); you may not use this file except in compliance with
1:d8f9686:  * the License.  You may obtain a copy of the License at
1:d8f9686:  *
1:d8f9686:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d8f9686:  *
1:d8f9686:  * Unless required by applicable law or agreed to in writing, software
1:d8f9686:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d8f9686:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d8f9686:  * See the License for the specific language governing permissions and
1:d8f9686:  * limitations under the License.
1:d8f9686:  */
1:d8f9686: package org.apache.activemq.transport.mqtt;
1:d8f9686: 
1:5d6d42c: import java.io.UnsupportedEncodingException;
1:5d6d42c: 
1:7c04ead: import org.fusesource.mqtt.codec.CONNECT;
1:7c04ead: import org.fusesource.mqtt.codec.DISCONNECT;
1:7c04ead: import org.fusesource.mqtt.codec.PINGREQ;
1:7c04ead: import org.fusesource.mqtt.codec.PUBACK;
1:7c04ead: import org.fusesource.mqtt.codec.PUBCOMP;
1:7c04ead: import org.fusesource.mqtt.codec.PUBLISH;
1:7c04ead: import org.fusesource.mqtt.codec.PUBREC;
1:7c04ead: import org.fusesource.mqtt.codec.PUBREL;
1:7c04ead: import org.fusesource.mqtt.codec.SUBSCRIBE;
1:7c04ead: import org.fusesource.mqtt.codec.UNSUBSCRIBE;
1:7c04ead: 
1:d8f9686: /**
1:d8f9686:  * A set of static methods useful for handling MQTT based client connections.
1:d8f9686:  */
1:d8f9686: public class MQTTProtocolSupport {
1:d8f9686: 
1:5d6d42c:     private static final int TOPIC_NAME_MIN_LENGTH = 1;
1:5d6d42c:     private static final int TOPIC_NAME_MAX_LENGTH = 65535;
1:5d6d42c: 
1:5d6d42c:     private static final String MULTI_LEVEL_WILDCARD = "#";
1:5d6d42c:     private static final String SINGLE_LEVEL_WILDCARD = "+";
1:5d6d42c: 
1:5d6d42c:     private static final char MULTI_LEVEL_WILDCARD_CHAR = '#';
1:5d6d42c:     private static final char SINGLE_LEVEL_WILDCARD_CHAR = '+';
1:5d6d42c:     private static final char TOPIC_LEVEL_SEPERATOR_CHAR = '/';
1:5d6d42c: 
1:d8f9686:     /**
1:d8f9686:      * Converts an MQTT formatted Topic name into a suitable ActiveMQ Destination
1:d8f9686:      * name string.
1:d8f9686:      *
1:d8f9686:      * @param name
1:d8f9686:      *        the MQTT formatted topic name.
1:d8f9686:      *
1:d8f9686:      * @return an destination name that fits the ActiveMQ conventions.
1:d8f9686:      */
1:d8f9686:     public static String convertMQTTToActiveMQ(String name) {
1:d8f9686:         char[] chars = name.toCharArray();
1:d8f9686:         for (int i = 0; i < chars.length; i++) {
1:d8f9686:             switch(chars[i]) {
1:d8f9686:                 case '#':
1:d8f9686:                     chars[i] = '>';
1:d8f9686:                     break;
1:d8f9686:                 case '>':
1:d8f9686:                     chars[i] = '#';
1:d8f9686:                     break;
1:d8f9686:                 case '+':
1:d8f9686:                     chars[i] = '*';
1:d8f9686:                     break;
1:d8f9686:                 case '*':
1:d8f9686:                     chars[i] = '+';
1:d8f9686:                     break;
1:d8f9686:                 case '/':
1:d8f9686:                     chars[i] = '.';
1:d8f9686:                     break;
1:d8f9686:                 case '.':
1:d8f9686:                     chars[i] = '/';
1:d8f9686:                     break;
1:d8f9686:             }
1:d8f9686:         }
1:d8f9686:         String rc = new String(chars);
1:d8f9686:         return rc;
1:d8f9686:     }
1:d8f9686: 
1:d8f9686:     /**
1:d8f9686:      * Converts an ActiveMQ destination name into a correctly formatted
1:d8f9686:      * MQTT destination name.
1:d8f9686:      *
1:d8f9686:      * @param destinationName
1:d8f9686:      *        the ActiveMQ destination name to process.
1:d8f9686:      *
1:d8f9686:      * @return a destination name formatted for MQTT.
1:d8f9686:      */
1:d8f9686:     public static String convertActiveMQToMQTT(String destinationName) {
1:fc3d90e:         char[] chars = destinationName.toCharArray();
1:fc3d90e:         for (int i = 0; i < chars.length; i++) {
1:fc3d90e:             switch(chars[i]) {
1:fc3d90e:                 case '>':
1:fc3d90e:                     chars[i] = '#';
1:fc3d90e:                     break;
1:fc3d90e:                 case '#':
1:fc3d90e:                     chars[i] = '>';
1:fc3d90e:                     break;
1:fc3d90e:                 case '*':
1:fc3d90e:                     chars[i] = '+';
1:fc3d90e:                     break;
1:fc3d90e:                 case '+':
1:fc3d90e:                     chars[i] = '*';
1:fc3d90e:                     break;
1:fc3d90e:                 case '.':
1:fc3d90e:                     chars[i] = '/';
1:fc3d90e:                     break;
1:fc3d90e:                 case '/':
1:fc3d90e:                     chars[i] = '.';
1:fc3d90e:                     break;
1:d8f9686:             }
1:d8f9686:         }
1:fc3d90e:         String rc = new String(chars);
1:fc3d90e:         return rc;
1:fc3d90e:     }
1:7c04ead: 
1:7c04ead:     /**
1:7c04ead:      * Given an MQTT header byte, determine the command type that the header
1:7c04ead:      * represents.
1:7c04ead:      *
1:7c04ead:      * @param header
1:7c04ead:      *        the byte value for the MQTT frame header.
1:7c04ead:      *
1:7c04ead:      * @return a string value for the given command type.
1:7c04ead:      */
1:7c04ead:     public static String commandType(byte header) {
1:7c04ead:         byte messageType = (byte) ((header & 0xF0) >>> 4);
1:7c04ead:         switch (messageType) {
1:7c04ead:             case PINGREQ.TYPE:
1:7c04ead:                 return "PINGREQ";
1:7c04ead:             case CONNECT.TYPE:
1:7c04ead:                 return "CONNECT";
1:7c04ead:             case DISCONNECT.TYPE:
1:7c04ead:                 return "DISCONNECT";
1:7c04ead:             case SUBSCRIBE.TYPE:
1:7c04ead:                 return "SUBSCRIBE";
1:7c04ead:             case UNSUBSCRIBE.TYPE:
1:7c04ead:                 return "UNSUBSCRIBE";
1:7c04ead:             case PUBLISH.TYPE:
1:7c04ead:                 return "PUBLISH";
1:7c04ead:             case PUBACK.TYPE:
1:7c04ead:                 return "PUBACK";
1:7c04ead:             case PUBREC.TYPE:
1:7c04ead:                 return "PUBREC";
1:7c04ead:             case PUBREL.TYPE:
1:7c04ead:                 return "PUBREL";
1:7c04ead:             case PUBCOMP.TYPE:
1:7c04ead:                 return "PUBCOMP";
1:7c04ead:             default:
1:7c04ead:                 return "UNKNOWN";
1:7c04ead:         }
1:7c04ead:     }
1:5d6d42c: 
1:5d6d42c:     /**
1:5d6d42c:      * Validate that the Topic names given by client commands are valid
1:5d6d42c:      * based on the MQTT protocol specification.
1:5d6d42c:      *
1:5d6d42c:      * @param topicName
1:5d6d42c:      *      the given Topic name provided by the client.
1:5d6d42c:      *
1:5d6d42c:      * @throws MQTTProtocolException if the value given is invalid.
1:5d6d42c:      */
1:5d6d42c:     public static void validate(String topicName) throws MQTTProtocolException {
1:5d6d42c:         int topicLen = 0;
1:5d6d42c:         try {
1:5d6d42c:             topicLen = topicName.getBytes("UTF-8").length;
1:5d6d42c:         } catch (UnsupportedEncodingException e) {
1:5d6d42c:             throw new MQTTProtocolException("Topic name contained invalid UTF-8 encoding.");
1:5d6d42c:         }
1:5d6d42c: 
1:5d6d42c:         // Spec: Unless stated otherwise all UTF-8 encoded strings can have any length in
1:5d6d42c:         //       the range 0 to 65535 bytes.
1:5d6d42c:         if (topicLen < TOPIC_NAME_MIN_LENGTH || topicLen > TOPIC_NAME_MAX_LENGTH) {
1:5d6d42c:             throw new MQTTProtocolException("Topic name given had invliad length.");
1:5d6d42c:         }
1:5d6d42c: 
1:5d6d42c:         // 4.7.1.2 and 4.7.1.3 these can stand alone
1:5d6d42c:         if (MULTI_LEVEL_WILDCARD.equals(topicName) || SINGLE_LEVEL_WILDCARD.equals(topicName)) {
1:5d6d42c:             return;
1:5d6d42c:         }
1:5d6d42c: 
1:5d6d42c:         // Spec: 4.7.1.2
1:5d6d42c:         //  The multi-level wildcard character MUST be specified either on its own or following a
1:5d6d42c:         //  topic level separator. In either case it MUST be the last character specified in the
1:5d6d42c:         //  Topic Filter [MQTT-4.7.1-2].
1:5d6d42c:         int numWildCards = 0;
1:5d6d42c:         for (int i = 0; i < topicName.length(); ++i) {
1:5d6d42c:             if (topicName.charAt(i) == MULTI_LEVEL_WILDCARD_CHAR) {
1:5d6d42c:                 numWildCards++;
1:5d6d42c: 
1:5d6d42c:                 // If prev exists it must be a separator
1:5d6d42c:                 if (i > 0 && topicName.charAt(i - 1) != TOPIC_LEVEL_SEPERATOR_CHAR) {
1:5d6d42c:                     throw new MQTTProtocolException("The multi level wildcard must stand alone: " + topicName);
1:5d6d42c:                 }
1:5d6d42c:             }
1:5d6d42c: 
1:5d6d42c:             if (numWildCards > 1) {
1:5d6d42c:                 throw new MQTTProtocolException("Topic Filter can only have one multi-level filter: " + topicName);
1:5d6d42c:             }
1:5d6d42c:         }
1:5d6d42c: 
1:5d6d42c:         if (topicName.contains(MULTI_LEVEL_WILDCARD) && !topicName.endsWith(MULTI_LEVEL_WILDCARD)) {
1:5d6d42c:             throw new MQTTProtocolException("The multi-level filter must be at the end of the Topic name: " + topicName);
1:5d6d42c:         }
1:5d6d42c: 
1:5d6d42c:         // Spec: 4.7.1.3
1:5d6d42c:         // The single-level wildcard can be used at any level in the Topic Filter, including
1:5d6d42c:         // first and last levels. Where it is used it MUST occupy an entire level of the filter
1:5d6d42c:         //
1:5d6d42c:         // [MQTT-4.7.1-3]. It can be used at more than one level in the Topic Filter and can be
1:5d6d42c:         // used in conjunction with the multilevel wildcard.
1:5d6d42c:         for (int i = 0; i < topicName.length(); ++i) {
1:5d6d42c:             if (topicName.charAt(i) != SINGLE_LEVEL_WILDCARD_CHAR) {
1:5d6d42c:                 continue;
1:5d6d42c:             }
1:5d6d42c: 
1:5d6d42c:             // If prev exists it must be a separator
1:5d6d42c:             if (i > 0 && topicName.charAt(i - 1) != TOPIC_LEVEL_SEPERATOR_CHAR) {
1:5d6d42c:                 throw new MQTTProtocolException("The single level wildcard must stand alone: " + topicName);
1:5d6d42c:             }
1:5d6d42c: 
1:5d6d42c:             // If next exists it must be a separator
1:5d6d42c:             if (i < topicName.length() - 1 && topicName.charAt(i + 1) != TOPIC_LEVEL_SEPERATOR_CHAR) {
1:5d6d42c:                 throw new MQTTProtocolException("The single level wildcard must stand alone: " + topicName);
1:5d6d42c:             }
1:5d6d42c:         }
1:5d6d42c:     }
1:fc3d90e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5d6d42c
/////////////////////////////////////////////////////////////////////////
1: import java.io.UnsupportedEncodingException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final int TOPIC_NAME_MIN_LENGTH = 1;
1:     private static final int TOPIC_NAME_MAX_LENGTH = 65535;
1: 
1:     private static final String MULTI_LEVEL_WILDCARD = "#";
1:     private static final String SINGLE_LEVEL_WILDCARD = "+";
1: 
1:     private static final char MULTI_LEVEL_WILDCARD_CHAR = '#';
1:     private static final char SINGLE_LEVEL_WILDCARD_CHAR = '+';
1:     private static final char TOPIC_LEVEL_SEPERATOR_CHAR = '/';
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Validate that the Topic names given by client commands are valid
1:      * based on the MQTT protocol specification.
1:      *
1:      * @param topicName
1:      *      the given Topic name provided by the client.
1:      *
1:      * @throws MQTTProtocolException if the value given is invalid.
1:      */
1:     public static void validate(String topicName) throws MQTTProtocolException {
1:         int topicLen = 0;
1:         try {
1:             topicLen = topicName.getBytes("UTF-8").length;
1:         } catch (UnsupportedEncodingException e) {
1:             throw new MQTTProtocolException("Topic name contained invalid UTF-8 encoding.");
1:         }
1: 
1:         // Spec: Unless stated otherwise all UTF-8 encoded strings can have any length in
1:         //       the range 0 to 65535 bytes.
1:         if (topicLen < TOPIC_NAME_MIN_LENGTH || topicLen > TOPIC_NAME_MAX_LENGTH) {
1:             throw new MQTTProtocolException("Topic name given had invliad length.");
1:         }
1: 
1:         // 4.7.1.2 and 4.7.1.3 these can stand alone
1:         if (MULTI_LEVEL_WILDCARD.equals(topicName) || SINGLE_LEVEL_WILDCARD.equals(topicName)) {
1:             return;
1:         }
1: 
1:         // Spec: 4.7.1.2
1:         //  The multi-level wildcard character MUST be specified either on its own or following a
1:         //  topic level separator. In either case it MUST be the last character specified in the
1:         //  Topic Filter [MQTT-4.7.1-2].
1:         int numWildCards = 0;
1:         for (int i = 0; i < topicName.length(); ++i) {
1:             if (topicName.charAt(i) == MULTI_LEVEL_WILDCARD_CHAR) {
1:                 numWildCards++;
1: 
1:                 // If prev exists it must be a separator
1:                 if (i > 0 && topicName.charAt(i - 1) != TOPIC_LEVEL_SEPERATOR_CHAR) {
1:                     throw new MQTTProtocolException("The multi level wildcard must stand alone: " + topicName);
1:                 }
1:             }
1: 
1:             if (numWildCards > 1) {
1:                 throw new MQTTProtocolException("Topic Filter can only have one multi-level filter: " + topicName);
1:             }
1:         }
1: 
1:         if (topicName.contains(MULTI_LEVEL_WILDCARD) && !topicName.endsWith(MULTI_LEVEL_WILDCARD)) {
1:             throw new MQTTProtocolException("The multi-level filter must be at the end of the Topic name: " + topicName);
1:         }
1: 
1:         // Spec: 4.7.1.3
1:         // The single-level wildcard can be used at any level in the Topic Filter, including
1:         // first and last levels. Where it is used it MUST occupy an entire level of the filter
1:         //
1:         // [MQTT-4.7.1-3]. It can be used at more than one level in the Topic Filter and can be
1:         // used in conjunction with the multilevel wildcard.
1:         for (int i = 0; i < topicName.length(); ++i) {
1:             if (topicName.charAt(i) != SINGLE_LEVEL_WILDCARD_CHAR) {
1:                 continue;
1:             }
1: 
1:             // If prev exists it must be a separator
1:             if (i > 0 && topicName.charAt(i - 1) != TOPIC_LEVEL_SEPERATOR_CHAR) {
1:                 throw new MQTTProtocolException("The single level wildcard must stand alone: " + topicName);
1:             }
1: 
1:             // If next exists it must be a separator
1:             if (i < topicName.length() - 1 && topicName.charAt(i + 1) != TOPIC_LEVEL_SEPERATOR_CHAR) {
1:                 throw new MQTTProtocolException("The single level wildcard must stand alone: " + topicName);
1:             }
1:         }
1:     }
commit:7c04ead
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.mqtt.codec.CONNECT;
1: import org.fusesource.mqtt.codec.DISCONNECT;
1: import org.fusesource.mqtt.codec.PINGREQ;
1: import org.fusesource.mqtt.codec.PUBACK;
1: import org.fusesource.mqtt.codec.PUBCOMP;
1: import org.fusesource.mqtt.codec.PUBLISH;
1: import org.fusesource.mqtt.codec.PUBREC;
1: import org.fusesource.mqtt.codec.PUBREL;
1: import org.fusesource.mqtt.codec.SUBSCRIBE;
1: import org.fusesource.mqtt.codec.UNSUBSCRIBE;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Given an MQTT header byte, determine the command type that the header
1:      * represents.
1:      *
1:      * @param header
1:      *        the byte value for the MQTT frame header.
1:      *
1:      * @return a string value for the given command type.
1:      */
1:     public static String commandType(byte header) {
1:         byte messageType = (byte) ((header & 0xF0) >>> 4);
1:         switch (messageType) {
1:             case PINGREQ.TYPE:
1:                 return "PINGREQ";
1:             case CONNECT.TYPE:
1:                 return "CONNECT";
1:             case DISCONNECT.TYPE:
1:                 return "DISCONNECT";
1:             case SUBSCRIBE.TYPE:
1:                 return "SUBSCRIBE";
1:             case UNSUBSCRIBE.TYPE:
1:                 return "UNSUBSCRIBE";
1:             case PUBLISH.TYPE:
1:                 return "PUBLISH";
1:             case PUBACK.TYPE:
1:                 return "PUBACK";
1:             case PUBREC.TYPE:
1:                 return "PUBREC";
1:             case PUBREL.TYPE:
1:                 return "PUBREL";
1:             case PUBCOMP.TYPE:
1:                 return "PUBCOMP";
1:             default:
1:                 return "UNKNOWN";
1:         }
1:     }
commit:d8f9686
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: /**
1:  * A set of static methods useful for handling MQTT based client connections.
1:  */
1: public class MQTTProtocolSupport {
1: 
1:     /**
1:      * Converts an MQTT formatted Topic name into a suitable ActiveMQ Destination
1:      * name string.
1:      *
1:      * @param name
1:      *        the MQTT formatted topic name.
1:      *
1:      * @return an destination name that fits the ActiveMQ conventions.
1:      */
1:     public static String convertMQTTToActiveMQ(String name) {
1:         char[] chars = name.toCharArray();
1:         for (int i = 0; i < chars.length; i++) {
1:             switch(chars[i]) {
1:                 case '#':
1:                     chars[i] = '>';
1:                     break;
1:                 case '>':
1:                     chars[i] = '#';
1:                     break;
1:                 case '+':
1:                     chars[i] = '*';
1:                     break;
1:                 case '*':
1:                     chars[i] = '+';
1:                     break;
1:                 case '/':
1:                     chars[i] = '.';
1:                     break;
1:                 case '.':
1:                     chars[i] = '/';
1:                     break;
1:             }
1:         }
1:         String rc = new String(chars);
1:         return rc;
1:     }
1: 
1:     /**
1:      * Converts an ActiveMQ destination name into a correctly formatted
1:      * MQTT destination name.
1:      *
1:      * @param destinationName
1:      *        the ActiveMQ destination name to process.
1:      *
1:      * @return a destination name formatted for MQTT.
1:      */
1:     public static String convertActiveMQToMQTT(String destinationName) {
0:         return destinationName.replace('.', '/');
1:     }
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:fc3d90e
/////////////////////////////////////////////////////////////////////////
1:         char[] chars = destinationName.toCharArray();
1:         for (int i = 0; i < chars.length; i++) {
1:             switch(chars[i]) {
1:                 case '>':
1:                     chars[i] = '#';
1:                     break;
1:                 case '#':
1:                     chars[i] = '>';
1:                     break;
1:                 case '*':
1:                     chars[i] = '+';
1:                     break;
1:                 case '+':
1:                     chars[i] = '*';
1:                     break;
1:                 case '.':
1:                     chars[i] = '/';
1:                     break;
1:                 case '/':
1:                     chars[i] = '.';
1:                     break;
1:             }
1:         }
1:         String rc = new String(chars);
1:         return rc;
============================================================================