1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
30:a677c21: 
1:81f3935: import java.util.concurrent.atomic.AtomicBoolean;
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.DeliveryMode;
1:a677c21: import javax.jms.Destination;
1:81f3935: import javax.jms.ExceptionListener;
1:81f3935: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: import javax.jms.Session;
1:a677c21: import javax.jms.TextMessage;
1:a677c21: import javax.jms.Topic;
1:a677c21: 
1:a677c21: import org.apache.activemq.test.TestSupport;
1:a677c21: import org.apache.activemq.util.IdGenerator;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a677c21: 
1:a677c21: /**
1:b0c2a40:  * 
1:a677c21:  */
1:a677c21: public class TopicRedeliverTest extends TestSupport {
1:230a86c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TopicRedeliverTest.class);
1:a677c21:     private static final int RECEIVE_TIMEOUT = 10000;
1:933eb2f: 
1:a677c21:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:933eb2f:     private IdGenerator idGen = new IdGenerator();
1:230a86c: 
1:230a86c:     public TopicRedeliverTest() {
1:a677c21:     }
1:230a86c: 
1:230a86c:     public TopicRedeliverTest(String n) {
1:a677c21:         super(n);
1:a677c21:     }
1:230a86c: 
1:230a86c:     protected void setUp() throws Exception {
1:a677c21:         super.setUp();
1:a677c21:         topic = true;
1:a677c21:     }
1:230a86c: 
1:a677c21:     /**
1:a677c21:      * test messages are acknowledged and recovered properly
1:230a86c:      * 
1:a677c21:      * @throws Exception
1:a677c21:      */
1:a677c21:     public void testClientAcknowledge() throws Exception {
1:a677c21:         Destination destination = createDestination(getClass().getName());
1:a677c21:         Connection connection = createConnection();
1:a677c21:         connection.setClientID(idGen.generateId());
1:a677c21:         connection.start();
1:a677c21:         Session consumerSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:a677c21:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:a677c21:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageProducer producer = producerSession.createProducer(destination);
1:a677c21:         producer.setDeliveryMode(deliveryMode);
1:230a86c: 
1:230a86c:         // send some messages
1:230a86c: 
1:a677c21:         TextMessage sent1 = producerSession.createTextMessage();
1:a677c21:         sent1.setText("msg1");
1:a677c21:         producer.send(sent1);
1:230a86c: 
1:a677c21:         TextMessage sent2 = producerSession.createTextMessage();
1:a677c21:         sent1.setText("msg2");
1:a677c21:         producer.send(sent2);
1:230a86c: 
1:a677c21:         TextMessage sent3 = producerSession.createTextMessage();
1:a677c21:         sent1.setText("msg3");
1:a677c21:         producer.send(sent3);
1:230a86c: 
1:933eb2f:         consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         Message rec2 = consumer.receive(RECEIVE_TIMEOUT);
1:933eb2f:         consumer.receive(RECEIVE_TIMEOUT);
1:230a86c: 
1:230a86c:         // ack rec2
1:a677c21:         rec2.acknowledge();
1:230a86c: 
1:a677c21:         TextMessage sent4 = producerSession.createTextMessage();
1:a677c21:         sent4.setText("msg4");
1:a677c21:         producer.send(sent4);
1:230a86c: 
1:a677c21:         Message rec4 = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         assertTrue(rec4.equals(sent4));
1:a677c21:         consumerSession.recover();
1:a677c21:         rec4 = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         assertTrue(rec4.equals(sent4));
1:a677c21:         assertTrue(rec4.getJMSRedelivered());
1:a677c21:         rec4.acknowledge();
1:a677c21:         connection.close();
1:230a86c: 
1:a677c21:     }
1:230a86c: 
1:a677c21:     /**
1:a677c21:      * Test redelivered flag is set on rollbacked transactions
1:230a86c:      * 
1:a677c21:      * @throws Exception
1:a677c21:      */
1:a677c21:     public void testRedilveredFlagSetOnRollback() throws Exception {
1:a677c21:         Destination destination = createDestination(getClass().getName());
1:a677c21:         Connection connection = createConnection();
1:a677c21:         connection.setClientID(idGen.generateId());
1:a677c21:         connection.start();
1:a677c21:         Session consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:a677c21:         MessageConsumer consumer = null;
1:230a86c:         if (topic) {
1:a677c21:             consumer = consumerSession.createDurableSubscriber((Topic)destination, "TESTRED");
1:230a86c:         } else {
1:230a86c:             consumer = consumerSession.createConsumer(destination);
1:a677c21:         }
1:a677c21:         Session producerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageProducer producer = producerSession.createProducer(destination);
1:a677c21:         producer.setDeliveryMode(deliveryMode);
1:230a86c: 
1:a677c21:         TextMessage sentMsg = producerSession.createTextMessage();
1:a677c21:         sentMsg.setText("msg1");
1:a677c21:         producer.send(sentMsg);
1:a677c21:         producerSession.commit();
1:230a86c: 
1:a677c21:         Message recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:74a7a8b:         assertFalse(recMsg.getJMSRedelivered());
1:a677c21:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         consumerSession.rollback();
1:a677c21:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         assertTrue(recMsg.getJMSRedelivered());
1:a677c21:         consumerSession.commit();
1:a677c21:         assertTrue(recMsg.equals(sentMsg));
1:a677c21:         assertTrue(recMsg.getJMSRedelivered());
1:a677c21:         connection.close();
1:a677c21:     }
1:230a86c: 
1:81f3935:     public void testNoExceptionOnRedeliveryAckWithSimpleTopicConsumer() throws Exception {
1:81f3935:         Destination destination = createDestination(getClass().getName());
1:81f3935:         Connection connection = createConnection();
1:81f3935:         final AtomicBoolean gotException = new AtomicBoolean();
1:81f3935:         connection.setExceptionListener(new ExceptionListener() {
1:81f3935:             public void onException(JMSException exception) {
1:81f3935:                 LOG.error("unexpected ex:" + exception);
1:81f3935:                     gotException.set(true);
1:81f3935:             }
1:81f3935:         });
1:81f3935:         connection.setClientID(idGen.generateId());
1:81f3935:         connection.start();
1:81f3935:         Session consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:81f3935:         MessageConsumer consumer = null;
1:230a86c:         if (topic) {
1:81f3935:             consumer = consumerSession.createConsumer((Topic)destination);
1:230a86c:         } else {
1:230a86c:             consumer = consumerSession.createConsumer(destination);
1:81f3935:         }
1:81f3935:         Session producerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:81f3935:         MessageProducer producer = producerSession.createProducer(destination);
1:81f3935:         producer.setDeliveryMode(deliveryMode);
1:230a86c: 
1:81f3935:         TextMessage sentMsg = producerSession.createTextMessage();
1:81f3935:         sentMsg.setText("msg1");
1:81f3935:         producer.send(sentMsg);
1:81f3935:         producerSession.commit();
1:230a86c: 
1:81f3935:         Message recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:74a7a8b:         assertFalse(recMsg.getJMSRedelivered());
1:81f3935:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:81f3935:         consumerSession.rollback();
1:81f3935:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:81f3935:         assertTrue(recMsg.getJMSRedelivered());
1:81f3935:         consumerSession.rollback();
1:81f3935:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:81f3935:         assertTrue(recMsg.getJMSRedelivered());
1:81f3935:         consumerSession.commit();
1:81f3935:         assertTrue(recMsg.equals(sentMsg));
1:81f3935:         assertTrue(recMsg.getJMSRedelivered());
1:81f3935:         connection.close();
1:230a86c: 
1:81f3935:         assertFalse("no exception", gotException.get());
1:81f3935:     }
1:230a86c: 
1:a677c21:     /**
1:a677c21:      * Check a session is rollbacked on a Session close();
1:230a86c:      * 
1:a677c21:      * @throws Exception
1:a677c21:      */
1:230a86c: 
1:fc00993:     public void xtestTransactionRollbackOnSessionClose() throws Exception {
1:a677c21:         Destination destination = createDestination(getClass().getName());
1:a677c21:         Connection connection = createConnection();
1:a677c21:         connection.setClientID(idGen.generateId());
1:a677c21:         connection.start();
1:a677c21:         Session consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:a677c21:         MessageConsumer consumer = null;
1:81f3935:         if (topic) {
1:a677c21:             consumer = consumerSession.createDurableSubscriber((Topic)destination, "TESTRED");
1:81f3935:         } else {
1:81f3935:             consumer = consumerSession.createConsumer(destination);
1:a677c21:         }
1:a677c21:         Session producerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageProducer producer = producerSession.createProducer(destination);
1:a677c21:         producer.setDeliveryMode(deliveryMode);
1:230a86c: 
1:a677c21:         TextMessage sentMsg = producerSession.createTextMessage();
1:a677c21:         sentMsg.setText("msg1");
1:a677c21:         producer.send(sentMsg);
1:81f3935: 
1:a677c21:         producerSession.commit();
1:81f3935: 
1:a677c21:         Message recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:81f3935:         assertFalse(recMsg.getJMSRedelivered());
1:a677c21:         consumerSession.close();
1:a677c21:         consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
3:a677c21:         consumer = consumerSession.createConsumer(destination);
1:230a86c: 
1:a677c21:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         consumerSession.commit();
1:a677c21:         assertTrue(recMsg.equals(sentMsg));
1:a677c21:         connection.close();
1:a677c21:     }
1:81f3935: 
1:a677c21:     /**
1:a677c21:      * check messages are actuallly sent on a tx rollback
1:230a86c:      * 
1:a677c21:      * @throws Exception
1:a677c21:      */
1:81f3935: 
1:a677c21:     public void testTransactionRollbackOnSend() throws Exception {
1:a677c21:         Destination destination = createDestination(getClass().getName());
1:a677c21:         Connection connection = createConnection();
1:a677c21:         connection.setClientID(idGen.generateId());
1:a677c21:         connection.start();
1:a677c21:         Session consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:a677c21:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:a677c21:         Session producerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageProducer producer = producerSession.createProducer(destination);
1:a677c21:         producer.setDeliveryMode(deliveryMode);
1:a677c21: 
1:a677c21:         TextMessage sentMsg = producerSession.createTextMessage();
1:a677c21:         sentMsg.setText("msg1");
1:a677c21:         producer.send(sentMsg);
1:a677c21:         producerSession.commit();
1:a677c21: 
1:a677c21:         Message recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         consumerSession.commit();
1:a677c21:         assertTrue(recMsg.equals(sentMsg));
1:a677c21: 
1:a677c21:         sentMsg = producerSession.createTextMessage();
1:a677c21:         sentMsg.setText("msg2");
1:a677c21:         producer.send(sentMsg);
1:a677c21:         producerSession.rollback();
1:230a86c: 
1:a677c21:         sentMsg = producerSession.createTextMessage();
1:a677c21:         sentMsg.setText("msg3");
1:a677c21:         producer.send(sentMsg);
1:a677c21:         producerSession.commit();
1:230a86c: 
1:a677c21:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         assertTrue(recMsg.equals(sentMsg));
1:a677c21:         consumerSession.commit();
1:230a86c: 
1:a677c21:         connection.close();
1:a677c21:     }
1:a677c21: 
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: 
1:     private IdGenerator idGen = new IdGenerator();
/////////////////////////////////////////////////////////////////////////
1:         consumer.receive(RECEIVE_TIMEOUT);
1:         consumer.receive(RECEIVE_TIMEOUT);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public void xtestTransactionRollbackOnSessionClose() throws Exception {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(recMsg.getJMSRedelivered());
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(recMsg.getJMSRedelivered());
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public TopicRedeliverTest() {
1: 
1:     public TopicRedeliverTest(String n) {
1: 
1:     protected void setUp() throws Exception {
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
1:         // send some messages
1: 
1: 
1: 
1: 
1: 
1:         // ack rec2
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         if (topic) {
1:         } else {
1:             consumer = consumerSession.createConsumer(destination);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         if (topic) {
1:         } else {
1:             consumer = consumerSession.createConsumer(destination);
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TopicRedeliverTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:81f3935
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(TopicRedeliverTest.class);
/////////////////////////////////////////////////////////////////////////
1:     public void testNoExceptionOnRedeliveryAckWithSimpleTopicConsumer() throws Exception {
1:         Destination destination = createDestination(getClass().getName());
1:         Connection connection = createConnection();
1:         final AtomicBoolean gotException = new AtomicBoolean();
1:         connection.setExceptionListener(new ExceptionListener() {
1:             public void onException(JMSException exception) {
1:                 LOG.error("unexpected ex:" + exception);
1:                     gotException.set(true);
1:             }
1:         });
1:         connection.setClientID(idGen.generateId());
1:         connection.start();
1:         Session consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = null;
1:         if (topic) {
1:             consumer = consumerSession.createConsumer((Topic)destination);
1:         } else {
1:             consumer = consumerSession.createConsumer(destination);
1:         }
1:         Session producerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1: 
1:         TextMessage sentMsg = producerSession.createTextMessage();
1:         sentMsg.setText("msg1");
1:         producer.send(sentMsg);
1:         producerSession.commit();
1: 
1:         Message recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:         assertFalse(recMsg.getJMSRedelivered());
1:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:         consumerSession.rollback();
1:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:         assertTrue(recMsg.getJMSRedelivered());
1:         consumerSession.rollback();
1:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:         assertTrue(recMsg.getJMSRedelivered());
1:         consumerSession.commit();
1:         assertTrue(recMsg.equals(sentMsg));
1:         assertTrue(recMsg.getJMSRedelivered());
1:         connection.close();
1: 
1:         assertFalse("no exception", gotException.get());
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:     protected void setUp() throws Exception{
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.test.TestSupport;
1: import org.apache.activemq.util.IdGenerator;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class TopicRedeliverTest extends TestSupport {
1:     
1:     private static final int RECEIVE_TIMEOUT = 10000;
0:     private IdGenerator idGen = new IdGenerator();
1:     protected int deliveryMode = DeliveryMode.PERSISTENT;
0:     public TopicRedeliverTest(){       
1:     }
1:     
0:     public TopicRedeliverTest(String n){
1:         super(n);
1:     }
1:     
0:     protected void setup() throws Exception{
1:         super.setUp();
1:         topic = true;
1:     }
1:     
1:     
1:     /**
1:      * test messages are acknowledged and recovered properly
1:      * @throws Exception
1:      */
1:     public void testClientAcknowledge() throws Exception {
1:         Destination destination = createDestination(getClass().getName());
1:         Connection connection = createConnection();
1:         connection.setClientID(idGen.generateId());
1:         connection.start();
1:         Session consumerSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:         Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1:         
0:         //send some messages
1:         
1:         TextMessage sent1 = producerSession.createTextMessage();
1:         sent1.setText("msg1");
1:         producer.send(sent1);
1:         
1:         TextMessage sent2 = producerSession.createTextMessage();
1:         sent1.setText("msg2");
1:         producer.send(sent2);
1:         
1:         TextMessage sent3 = producerSession.createTextMessage();
1:         sent1.setText("msg3");
1:         producer.send(sent3);
1:         
0:         Message rec1 = consumer.receive(RECEIVE_TIMEOUT);
1:         Message rec2 = consumer.receive(RECEIVE_TIMEOUT);
0:         Message rec3 = consumer.receive(RECEIVE_TIMEOUT);
1:         
0:         //ack rec2
1:         rec2.acknowledge();
1:         
1:         TextMessage sent4 = producerSession.createTextMessage();
1:         sent4.setText("msg4");
1:         producer.send(sent4);
1:         
1:         Message rec4 = consumer.receive(RECEIVE_TIMEOUT);
1:         assertTrue(rec4.equals(sent4));
1:         consumerSession.recover();
1:         rec4 = consumer.receive(RECEIVE_TIMEOUT);
1:         assertTrue(rec4.equals(sent4));
1:         assertTrue(rec4.getJMSRedelivered());
1:         rec4.acknowledge();
1:         connection.close();
1:         
1:     }
1:     
1:     /**
1:      * Test redelivered flag is set on rollbacked transactions
1:      * @throws Exception
1:      */
1:     public void testRedilveredFlagSetOnRollback() throws Exception {
1:         Destination destination = createDestination(getClass().getName());
1:         Connection connection = createConnection();
1:         connection.setClientID(idGen.generateId());
1:         connection.start();
1:         Session consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = null;
0:         if (topic){
1:             consumer = consumerSession.createDurableSubscriber((Topic)destination, "TESTRED");
0:         }else{
1:         consumer = consumerSession.createConsumer(destination);
1:         }
1:         Session producerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1:         
1:         TextMessage sentMsg = producerSession.createTextMessage();
1:         sentMsg.setText("msg1");
1:         producer.send(sentMsg);
1:         producerSession.commit();
1:         
1:         Message recMsg = consumer.receive(RECEIVE_TIMEOUT);
0:         assertTrue(recMsg.getJMSRedelivered() == false);
1:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:         consumerSession.rollback();
1:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:         assertTrue(recMsg.getJMSRedelivered());
1:         consumerSession.commit();
1:         assertTrue(recMsg.equals(sentMsg));
1:         assertTrue(recMsg.getJMSRedelivered());
1:         connection.close();
1:     }
1: 
1: 
1:     /**
1:      * Check a session is rollbacked on a Session close();
1:      * @throws Exception
1:      */
1: 
0:     public void XtestTransactionRollbackOnSessionClose() throws Exception {
1:         Destination destination = createDestination(getClass().getName());
1:         Connection connection = createConnection();
1:         connection.setClientID(idGen.generateId());
1:         connection.start();
1:         Session consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = null;
0:         if (topic){
1:             consumer = consumerSession.createDurableSubscriber((Topic)destination, "TESTRED");
0:         }else{
1:         consumer = consumerSession.createConsumer(destination);
1:         }
1:         Session producerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1:         
1:         TextMessage sentMsg = producerSession.createTextMessage();
1:         sentMsg.setText("msg1");
1:         producer.send(sentMsg);
1:       
1:         producerSession.commit();
1:         
1:         Message recMsg = consumer.receive(RECEIVE_TIMEOUT);
0:         assertTrue(recMsg.getJMSRedelivered() == false);
1:         consumerSession.close();
1:         consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:         consumer = consumerSession.createConsumer(destination);
1:         
1:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:         consumerSession.commit();
1:         assertTrue(recMsg.equals(sentMsg));
1:         connection.close();
1:     }
1: 
1:     /**
1:      * check messages are actuallly sent on a tx rollback
1:      * @throws Exception
1:      */
1: 
1:     public void testTransactionRollbackOnSend() throws Exception {
1:         Destination destination = createDestination(getClass().getName());
1:         Connection connection = createConnection();
1:         connection.setClientID(idGen.generateId());
1:         connection.start();
1:         Session consumerSession = connection.createSession(true, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:         Session producerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1:         
1:         TextMessage sentMsg = producerSession.createTextMessage();
1:         sentMsg.setText("msg1");
1:         producer.send(sentMsg);
1:         producerSession.commit();
1:         
1:         Message recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:         consumerSession.commit();
1:         assertTrue(recMsg.equals(sentMsg));
1:         
1:         sentMsg = producerSession.createTextMessage();
1:         sentMsg.setText("msg2");
1:         producer.send(sentMsg);
1:         producerSession.rollback();
1:         
1:         sentMsg = producerSession.createTextMessage();
1:         sentMsg.setText("msg3");
1:         producer.send(sentMsg);
1:         producerSession.commit();
1:         
1:         recMsg = consumer.receive(RECEIVE_TIMEOUT);
1:         assertTrue(recMsg.equals(sentMsg));
1:         consumerSession.commit();
1:         
1:         connection.close();
1:     }
1:    
1: }
============================================================================