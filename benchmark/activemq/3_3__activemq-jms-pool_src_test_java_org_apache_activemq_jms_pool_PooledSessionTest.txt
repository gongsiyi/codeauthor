1:a59c9ba: /**
1:a59c9ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a59c9ba:  * contributor license agreements.  See the NOTICE file distributed with
1:a59c9ba:  * this work for additional information regarding copyright ownership.
1:a59c9ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a59c9ba:  * (the "License"); you may not use this file except in compliance with
1:a59c9ba:  * the License.  You may obtain a copy of the License at
1:a59c9ba:  *
1:a59c9ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a59c9ba:  *
1:a59c9ba:  * Unless required by applicable law or agreed to in writing, software
1:a59c9ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a59c9ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a59c9ba:  * See the License for the specific language governing permissions and
1:a59c9ba:  * limitations under the License.
1:a59c9ba:  */
1:b66559e: package org.apache.activemq.jms.pool;
4:a59c9ba: 
1:a59c9ba: import static org.junit.Assert.assertEquals;
1:f91abd3: import static org.junit.Assert.assertNotNull;
1:2a7c349: import static org.junit.Assert.assertSame;
1:f91abd3: import static org.junit.Assert.assertTrue;
1:2a7c349: import static org.junit.Assert.fail;
1:a59c9ba: 
1:f91abd3: import javax.jms.Destination;
1:f91abd3: import javax.jms.MessageProducer;
1:2a7c349: import javax.jms.Queue;
1:2a7c349: import javax.jms.QueueSession;
1:a59c9ba: import javax.jms.Session;
1:2a7c349: import javax.jms.Topic;
1:2a7c349: import javax.jms.TopicSession;
1:a59c9ba: 
1:a59c9ba: import org.apache.activemq.ActiveMQConnectionFactory;
1:a59c9ba: import org.apache.activemq.broker.BrokerService;
1:a59c9ba: import org.apache.activemq.broker.TransportConnector;
1:27ce49f: import org.junit.After;
1:a59c9ba: import org.junit.Before;
1:a59c9ba: import org.junit.Test;
1:a59c9ba: 
1:e6597c4: public class PooledSessionTest extends JmsPoolTestSupport {
1:a59c9ba: 
1:a59c9ba:     private ActiveMQConnectionFactory factory;
1:a59c9ba:     private PooledConnectionFactory pooledFactory;
1:a59c9ba:     private String connectionUri;
1:a59c9ba: 
1:e6597c4:     @Override
1:a59c9ba:     @Before
1:a59c9ba:     public void setUp() throws Exception {
1:e6597c4:         super.setUp();
1:e6597c4: 
1:e6597c4:         brokerService = new BrokerService();
1:e6597c4:         brokerService.setPersistent(false);
1:e6597c4:         brokerService.setUseJmx(true);
1:e6597c4:         brokerService.getManagementContext().setCreateConnector(false);
1:e6597c4:         brokerService.setAdvisorySupport(false);
1:e6597c4:         brokerService.setSchedulerSupport(false);
1:e6597c4:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:e6597c4:         brokerService.start();
1:e6597c4: 
1:a59c9ba:         connectionUri = connector.getPublishableConnectString();
1:a59c9ba:         factory = new ActiveMQConnectionFactory(connectionUri);
1:b66559e:         pooledFactory = new PooledConnectionFactory();
1:b66559e:         pooledFactory.setConnectionFactory(factory);
1:a59c9ba:         pooledFactory.setMaxConnections(1);
1:a59c9ba:         pooledFactory.setBlockIfSessionPoolIsFull(false);
2:a59c9ba:     }
1:2a7c349: 
1:27ce49f:     @Override
1:27ce49f:     @After
1:27ce49f:     public void tearDown() throws Exception {
1:27ce49f:         try {
1:27ce49f:             pooledFactory.stop();
1:27ce49f:         } catch (Exception ex) {
1:27ce49f:             // ignored
1:27ce49f:         }
1:27ce49f: 
1:27ce49f:         super.tearDown();
1:27ce49f:     }
1:27ce49f:         
1:f91abd3:     @Test(timeout = 60000)
1:a59c9ba:     public void testPooledSessionStats() throws Exception {
1:a59c9ba:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:a59c9ba: 
1:a59c9ba:         assertEquals(0, connection.getNumActiveSessions());
1:a59c9ba:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a59c9ba:         assertEquals(1, connection.getNumActiveSessions());
1:a59c9ba:         session.close();
1:a59c9ba:         assertEquals(0, connection.getNumActiveSessions());
1:a59c9ba:         assertEquals(1, connection.getNumtIdleSessions());
1:a59c9ba:         assertEquals(1, connection.getNumSessions());
1:f91abd3: 
1:f91abd3:         connection.close();
1:a59c9ba:     }
1:2a7c349: 
1:f91abd3:     @Test(timeout = 60000)
1:2a7c349:     public void testMessageProducersAreAllTheSame() throws Exception {
1:2a7c349:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:2a7c349:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a7c349: 
1:2a7c349:         Queue queue1 = session.createTemporaryQueue();
1:2a7c349:         Queue queue2 = session.createTemporaryQueue();
1:2a7c349: 
1:2a7c349:         PooledProducer producer1 = (PooledProducer) session.createProducer(queue1);
1:2a7c349:         PooledProducer producer2 = (PooledProducer) session.createProducer(queue2);
1:2a7c349: 
1:2a7c349:         assertSame(producer1.getMessageProducer(), producer2.getMessageProducer());
1:f91abd3: 
1:f91abd3:         connection.close();
1:2a7c349:     }
1:2a7c349: 
1:f91abd3:     @Test(timeout = 60000)
1:2a7c349:     public void testThrowsWhenDifferentDestinationGiven() throws Exception {
1:2a7c349:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:2a7c349:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a7c349: 
1:2a7c349:         Queue queue1 = session.createTemporaryQueue();
1:2a7c349:         Queue queue2 = session.createTemporaryQueue();
1:2a7c349: 
1:2a7c349:         PooledProducer producer = (PooledProducer) session.createProducer(queue1);
1:2a7c349: 
1:2a7c349:         try {
1:2a7c349:             producer.send(queue2, session.createTextMessage());
1:2a7c349:             fail("Should only be able to send to queue 1");
1:2a7c349:         } catch (Exception ex) {
1:2a7c349:         }
1:f91abd3: 
1:2a7c349:         try {
1:2a7c349:             producer.send(null, session.createTextMessage());
1:2a7c349:             fail("Should only be able to send to queue 1");
1:2a7c349:         } catch (Exception ex) {
1:2a7c349:         }
1:2a7c349: 
1:f91abd3:         connection.close();
1:2a7c349:     }
1:a59c9ba: 
1:f91abd3:     @Test(timeout = 60000)
1:2a7c349:     public void testCreateTopicPublisher() throws Exception {
1:2a7c349:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:2a7c349:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a7c349: 
1:2a7c349:         Topic topic1 = session.createTopic("Topic-1");
1:2a7c349:         Topic topic2 = session.createTopic("Topic-2");
1:2a7c349: 
1:2a7c349:         PooledTopicPublisher publisher1 = (PooledTopicPublisher) session.createPublisher(topic1);
1:2a7c349:         PooledTopicPublisher publisher2 = (PooledTopicPublisher) session.createPublisher(topic2);
1:2a7c349: 
1:2a7c349:         assertSame(publisher1.getMessageProducer(), publisher2.getMessageProducer());
1:f91abd3:         connection.close();
1:2a7c349:     }
1:2a7c349: 
1:f91abd3:     @Test(timeout = 60000)
1:2a7c349:     public void testQueueSender() throws Exception {
1:2a7c349:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:2a7c349:         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a7c349: 
1:2a7c349:         Queue queue1 = session.createTemporaryQueue();
1:2a7c349:         Queue queue2 = session.createTemporaryQueue();
1:2a7c349: 
1:2a7c349:         PooledQueueSender sender1 = (PooledQueueSender) session.createSender(queue1);
1:2a7c349:         PooledQueueSender sender2 = (PooledQueueSender) session.createSender(queue2);
1:2a7c349: 
1:2a7c349:         assertSame(sender1.getMessageProducer(), sender2.getMessageProducer());
1:f91abd3:         connection.close();
1:f91abd3:     }
1:f91abd3: 
1:f91abd3:     @Test(timeout = 60000)
1:f91abd3:     public void testRepeatedCreateSessionProducerResultsInSame() throws Exception {
1:f91abd3:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:f91abd3: 
1:f91abd3:         assertTrue(pooledFactory.isUseAnonymousProducers());
1:f91abd3: 
1:f91abd3:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f91abd3:         Destination destination = session.createTopic("test-topic");
1:f91abd3:         PooledProducer producer = (PooledProducer) session.createProducer(destination);
1:f91abd3:         MessageProducer original = producer.getMessageProducer();
1:f91abd3:         assertNotNull(original);
1:f91abd3:         session.close();
1:f91abd3: 
1:e6597c4:         assertEquals(1, brokerService.getAdminView().getDynamicDestinationProducers().length);
1:f91abd3: 
1:f91abd3:         for (int i = 0; i < 20; ++i) {
1:f91abd3:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f91abd3:             producer = (PooledProducer) session.createProducer(destination);
1:f91abd3:             assertSame(original, producer.getMessageProducer());
1:f91abd3:             session.close();
1:f91abd3:         }
1:f91abd3: 
1:e6597c4:         assertEquals(1, brokerService.getAdminView().getDynamicDestinationProducers().length);
1:f91abd3: 
1:f91abd3:         connection.close();
1:f91abd3:         pooledFactory.clear();
1:2a7c349:     }
1:a59c9ba: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             pooledFactory.stop();
1:         } catch (Exception ex) {
1:             // ignored
1:         }
1: 
1:         super.tearDown();
1:     }
1:         
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: public class PooledSessionTest extends JmsPoolTestSupport {
1:     @Override
1:         super.setUp();
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(false);
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(1, brokerService.getAdminView().getDynamicDestinationProducers().length);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(1, brokerService.getAdminView().getDynamicDestinationProducers().length);
commit:f91abd3
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import javax.jms.Destination;
1: import javax.jms.MessageProducer;
/////////////////////////////////////////////////////////////////////////
0:         broker.setUseJmx(true);
0:         broker.getManagementContext().setCreateMBeanServer(false);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testRepeatedCreateSessionProducerResultsInSame() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1: 
1:         assertTrue(pooledFactory.isUseAnonymousProducers());
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createTopic("test-topic");
1:         PooledProducer producer = (PooledProducer) session.createProducer(destination);
1:         MessageProducer original = producer.getMessageProducer();
1:         assertNotNull(original);
1:         session.close();
1: 
0:         assertEquals(1, broker.getAdminView().getDynamicDestinationProducers().length);
1: 
1:         for (int i = 0; i < 20; ++i) {
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             producer = (PooledProducer) session.createProducer(destination);
1:             assertSame(original, producer.getMessageProducer());
1:             session.close();
1:         }
1: 
0:         assertEquals(1, broker.getAdminView().getDynamicDestinationProducers().length);
1: 
1:         connection.close();
1:         pooledFactory.clear();
commit:2a7c349
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.fail;
1: import javax.jms.Queue;
1: import javax.jms.QueueSession;
1: import javax.jms.Topic;
1: import javax.jms.TopicSession;
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Test
1:     public void testMessageProducersAreAllTheSame() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Queue queue1 = session.createTemporaryQueue();
1:         Queue queue2 = session.createTemporaryQueue();
1: 
1:         PooledProducer producer1 = (PooledProducer) session.createProducer(queue1);
1:         PooledProducer producer2 = (PooledProducer) session.createProducer(queue2);
1: 
1:         assertSame(producer1.getMessageProducer(), producer2.getMessageProducer());
1:     }
1: 
0:     @Test
1:     public void testThrowsWhenDifferentDestinationGiven() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Queue queue1 = session.createTemporaryQueue();
1:         Queue queue2 = session.createTemporaryQueue();
1: 
1:         PooledProducer producer = (PooledProducer) session.createProducer(queue1);
1: 
1:         try {
1:             producer.send(queue2, session.createTextMessage());
1:             fail("Should only be able to send to queue 1");
1:         } catch (Exception ex) {
1:         }
1: 
1:         try {
1:             producer.send(null, session.createTextMessage());
1:             fail("Should only be able to send to queue 1");
1:         } catch (Exception ex) {
1:         }
1:     }
1: 
0:     @Test
1:     public void testCreateTopicPublisher() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Topic topic1 = session.createTopic("Topic-1");
1:         Topic topic2 = session.createTopic("Topic-2");
1: 
1:         PooledTopicPublisher publisher1 = (PooledTopicPublisher) session.createPublisher(topic1);
1:         PooledTopicPublisher publisher2 = (PooledTopicPublisher) session.createPublisher(topic2);
1: 
1:         assertSame(publisher1.getMessageProducer(), publisher2.getMessageProducer());
1:     }
1: 
0:     @Test
1:     public void testQueueSender() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Queue queue1 = session.createTemporaryQueue();
1:         Queue queue2 = session.createTemporaryQueue();
1: 
1:         PooledQueueSender sender1 = (PooledQueueSender) session.createSender(queue1);
1:         PooledQueueSender sender2 = (PooledQueueSender) session.createSender(queue2);
1: 
1:         assertSame(sender1.getMessageProducer(), sender2.getMessageProducer());
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
/////////////////////////////////////////////////////////////////////////
1:         pooledFactory = new PooledConnectionFactory();
1:         pooledFactory.setConnectionFactory(factory);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a59c9ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.pool;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.log4j.Logger;
0: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: public class PooledSessionTest {
1: 
0:     private Logger LOG = Logger.getLogger(getClass());
1: 
0:     private BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1:     private PooledConnectionFactory pooledFactory;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
0:         broker = new BrokerService();
0:         broker.setPersistent(false);
0:         broker.setUseJmx(false);
0:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
0:         broker.start();
1:         connectionUri = connector.getPublishableConnectString();
1:         factory = new ActiveMQConnectionFactory(connectionUri);
0:         pooledFactory = new PooledConnectionFactory(factory);
1:         pooledFactory.setMaxConnections(1);
1:         pooledFactory.setBlockIfSessionPoolIsFull(false);
1:     }
1: 
0:     @After
0:     public void tearDown() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
0:         broker = null;
1:     }
1: 
0:     @Test
1:     public void testPooledSessionStats() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1: 
1:         assertEquals(0, connection.getNumActiveSessions());
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         assertEquals(1, connection.getNumActiveSessions());
1:         session.close();
1:         assertEquals(0, connection.getNumActiveSessions());
1:         assertEquals(1, connection.getNumtIdleSessions());
1:         assertEquals(1, connection.getNumSessions());
1:     }
1: 
1: }
============================================================================