1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.advisory;
1:d29ca2a: 
1:6a631a9: import java.util.ArrayList;
1:74a7a8b: 
1:74a7a8b: import javax.jms.Destination;
1:69e3b6c: import javax.jms.JMSException;
1:6c703ac: 
1:c866f88: import org.apache.activemq.ActiveMQMessageTransformation;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:230a86c: 
1:933eb2f: public final class AdvisorySupport {
1:d29ca2a:     public static final String ADVISORY_TOPIC_PREFIX = "ActiveMQ.Advisory.";
1:c866f88:     public static final ActiveMQTopic CONNECTION_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX
1:c866f88:             + "Connection");
1:230a86c:     public static final ActiveMQTopic QUEUE_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX + "Queue");
1:230a86c:     public static final ActiveMQTopic TOPIC_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX + "Topic");
1:230a86c:     public static final ActiveMQTopic TEMP_QUEUE_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX + "TempQueue");
1:230a86c:     public static final ActiveMQTopic TEMP_TOPIC_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX + "TempTopic");
1:230a86c:     public static final String PRODUCER_ADVISORY_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "Producer.";
1:230a86c:     public static final String QUEUE_PRODUCER_ADVISORY_TOPIC_PREFIX = PRODUCER_ADVISORY_TOPIC_PREFIX + "Queue.";
1:230a86c:     public static final String TOPIC_PRODUCER_ADVISORY_TOPIC_PREFIX = PRODUCER_ADVISORY_TOPIC_PREFIX + "Topic.";
1:230a86c:     public static final String CONSUMER_ADVISORY_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "Consumer.";
1:cc81680:     public static final String VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "VirtualDestination.Consumer.";
1:230a86c:     public static final String QUEUE_CONSUMER_ADVISORY_TOPIC_PREFIX = CONSUMER_ADVISORY_TOPIC_PREFIX + "Queue.";
1:230a86c:     public static final String TOPIC_CONSUMER_ADVISORY_TOPIC_PREFIX = CONSUMER_ADVISORY_TOPIC_PREFIX + "Topic.";
1:cc81680:     public static final String QUEUE_VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX = VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX + "Queue.";
1:cc81680:     public static final String TOPIC_VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX = VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX + "Topic.";
1:230a86c:     public static final String EXPIRED_TOPIC_MESSAGES_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "Expired.Topic.";
1:230a86c:     public static final String EXPIRED_QUEUE_MESSAGES_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "Expired.Queue.";
1:230a86c:     public static final String NO_TOPIC_CONSUMERS_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "NoConsumer.Topic.";
1:230a86c:     public static final String NO_QUEUE_CONSUMERS_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "NoConsumer.Queue.";
1:cdc2fd3:     public static final String SLOW_CONSUMER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "SlowConsumer.";
1:780e448:     public static final String FAST_PRODUCER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "FastProducer.";
1:cdc2fd3:     public static final String MESSAGE_DISCAREDED_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MessageDiscarded.";
1:cdc2fd3:     public static final String FULL_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "FULL.";
1:cdc2fd3:     public static final String MESSAGE_DELIVERED_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MessageDelivered.";
1:cdc2fd3:     public static final String MESSAGE_CONSUMED_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MessageConsumed.";
1:69e3b6c:     public static final String MESSAGE_DLQ_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MessageDLQd.";
1:4ee029e:     public static final String MASTER_BROKER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MasterBroker";
1:663d5db:     public static final String NETWORK_BRIDGE_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "NetworkBridge";
1:8012f28:     public static final String NETWORK_BRIDGE_FORWARD_FAILURE_TOPIC_PREFIX = NETWORK_BRIDGE_TOPIC_PREFIX + ".ForwardFailure";
1:9408509:     public static final String AGENT_TOPIC = "ActiveMQ.Agent";
1:d29ca2a:     public static final String ADIVSORY_MESSAGE_TYPE = "Advisory";
1:c866f88:     public static final String MSG_PROPERTY_ORIGIN_BROKER_ID = "originBrokerId";
1:c866f88:     public static final String MSG_PROPERTY_ORIGIN_BROKER_NAME = "originBrokerName";
1:c866f88:     public static final String MSG_PROPERTY_ORIGIN_BROKER_URL = "originBrokerURL";
1:c866f88:     public static final String MSG_PROPERTY_USAGE_NAME = "usageName";
1:078f39f:     public static final String MSG_PROPERTY_USAGE_COUNT = "usageCount";
1:078f39f: 
1:c866f88:     public static final String MSG_PROPERTY_CONSUMER_ID = "consumerId";
1:c866f88:     public static final String MSG_PROPERTY_PRODUCER_ID = "producerId";
1:c866f88:     public static final String MSG_PROPERTY_MESSAGE_ID = "orignalMessageId";
1:6c703ac:     public static final String MSG_PROPERTY_DESTINATION = "orignalDestination";
1:3e4fc0a:     public static final String MSG_PROPERTY_CONSUMER_COUNT = "consumerCount";
1:3e4fc0a:     public static final String MSG_PROPERTY_DISCARDED_COUNT = "discardedCount";
1:3e4fc0a: 
1:68bcf0f:     public static final ActiveMQTopic ALL_DESTINATIONS_COMPOSITE_ADVISORY_TOPIC = new ActiveMQTopic(
1:68bcf0f:             TOPIC_ADVISORY_TOPIC.getPhysicalName() + "," + QUEUE_ADVISORY_TOPIC.getPhysicalName() + "," +
1:74bed6b:                     TEMP_QUEUE_ADVISORY_TOPIC.getPhysicalName() + "," + TEMP_TOPIC_ADVISORY_TOPIC.getPhysicalName());
1:c866f88:     public static final ActiveMQTopic TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC = new ActiveMQTopic(
1:68bcf0f:             TEMP_QUEUE_ADVISORY_TOPIC.getPhysicalName() + "," + TEMP_TOPIC_ADVISORY_TOPIC.getPhysicalName());
1:9408509:     private static final ActiveMQTopic AGENT_TOPIC_DESTINATION = new ActiveMQTopic(AGENT_TOPIC);
1:d29ca2a: 
1:933eb2f:     private AdvisorySupport() {
1:933eb2f:     }
1:933eb2f: 
1:d29ca2a:     public static ActiveMQTopic getConnectionAdvisoryTopic() {
1:d29ca2a:         return CONNECTION_ADVISORY_TOPIC;
1:d29ca2a:     }
1:d29ca2a: 
1:6a631a9:     public static ActiveMQTopic[] getAllDestinationAdvisoryTopics(Destination destination) throws JMSException {
1:6a631a9:         return getAllDestinationAdvisoryTopics(ActiveMQMessageTransformation.transformDestination(destination));
1:6a631a9:     }
1:d29ca2a: 
1:6a631a9:     public static ActiveMQTopic[] getAllDestinationAdvisoryTopics(ActiveMQDestination destination) throws JMSException {
1:6a631a9:         ArrayList<ActiveMQTopic> result = new ArrayList<ActiveMQTopic>();
1:d29ca2a: 
1:6a631a9:         result.add(getConsumerAdvisoryTopic(destination));
1:6a631a9:         result.add(getProducerAdvisoryTopic(destination));
1:6a631a9:         result.add(getExpiredMessageTopic(destination));
1:6a631a9:         result.add(getNoConsumersAdvisoryTopic(destination));
1:6a631a9:         result.add(getSlowConsumerAdvisoryTopic(destination));
1:6a631a9:         result.add(getFastProducerAdvisoryTopic(destination));
1:6a631a9:         result.add(getMessageDiscardedAdvisoryTopic(destination));
1:6a631a9:         result.add(getMessageDeliveredAdvisoryTopic(destination));
1:6a631a9:         result.add(getMessageConsumedAdvisoryTopic(destination));
1:6a631a9:         result.add(getMessageDLQdAdvisoryTopic(destination));
1:6a631a9:         result.add(getFullAdvisoryTopic(destination));
1:74bed6b: 
1:6a631a9:         return result.toArray(new ActiveMQTopic[0]);
1:6a631a9:     }
1:c866f88: 
1:c866f88:     public static ActiveMQTopic getConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:d29ca2a:     public static ActiveMQTopic getConsumerAdvisoryTopic(ActiveMQDestination destination) {
1:94b404d:         String prefix;
1:f812e34:         if (destination.isQueue()) {
1:94b404d:             prefix = QUEUE_CONSUMER_ADVISORY_TOPIC_PREFIX;
1:f812e34:         } else {
1:94b404d:             prefix = TOPIC_CONSUMER_ADVISORY_TOPIC_PREFIX;
1:f812e34:         }
1:94b404d:         return getAdvisoryTopic(destination, prefix, true);
1:d29ca2a:     }
1:230a86c: 
1:cc81680:     public static ActiveMQTopic getVirtualDestinationConsumerAdvisoryTopic(ActiveMQDestination destination) {
1:cc81680:         String prefix;
1:cc81680:         if (destination.isQueue()) {
1:cc81680:             prefix = QUEUE_VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX;
1:cc81680:         } else {
1:cc81680:             prefix = TOPIC_VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX;
1:cc81680:         }
1:cc81680:         return getAdvisoryTopic(destination, prefix, true);
1:cc81680:     }
1:cc81680: 
1:c866f88:     public static ActiveMQTopic getProducerAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getProducerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:d29ca2a: 
1:d29ca2a:     public static ActiveMQTopic getProducerAdvisoryTopic(ActiveMQDestination destination) {
1:94b404d:         String prefix;
1:f812e34:         if (destination.isQueue()) {
1:94b404d:             prefix = QUEUE_PRODUCER_ADVISORY_TOPIC_PREFIX;
1:f812e34:         } else {
1:94b404d:             prefix = TOPIC_PRODUCER_ADVISORY_TOPIC_PREFIX;
1:f812e34:         }
1:94b404d:         return getAdvisoryTopic(destination, prefix, false);
1:94b404d:     }
1:94b404d: 
1:94b404d:     private static ActiveMQTopic getAdvisoryTopic(ActiveMQDestination destination, String prefix, boolean consumerTopics) {
1:94b404d:         return new ActiveMQTopic(prefix + destination.getPhysicalName().replaceAll(",", "&sbquo;"));
1:7880521:     }
1:230a86c: 
1:c866f88:     public static ActiveMQTopic getExpiredMessageTopic(Destination destination) throws JMSException {
1:c866f88:         return getExpiredMessageTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:a414c20:     public static ActiveMQTopic getExpiredMessageTopic(ActiveMQDestination destination) {
1:a414c20:         if (destination.isQueue()) {
1:a414c20:             return getExpiredQueueMessageAdvisoryTopic(destination);
1:a414c20:         }
1:a414c20:         return getExpiredTopicMessageAdvisoryTopic(destination);
1:a414c20:     }
1:230a86c: 
1:c2408b8:     public static ActiveMQTopic getExpiredTopicMessageAdvisoryTopic(ActiveMQDestination destination) {
1:230a86c:         String name = EXPIRED_TOPIC_MESSAGES_TOPIC_PREFIX + destination.getPhysicalName();
1:d29ca2a:         return new ActiveMQTopic(name);
1:d29ca2a:     }
1:230a86c: 
1:c866f88:     public static ActiveMQTopic getExpiredQueueMessageAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getExpiredQueueMessageAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:d29ca2a: 
1:c2408b8:     public static ActiveMQTopic getExpiredQueueMessageAdvisoryTopic(ActiveMQDestination destination) {
1:230a86c:         String name = EXPIRED_QUEUE_MESSAGES_TOPIC_PREFIX + destination.getPhysicalName();
1:d29ca2a:         return new ActiveMQTopic(name);
1:49e10d3:     }
1:230a86c: 
1:6a631a9:     public static ActiveMQTopic getNoConsumersAdvisoryTopic(Destination destination) throws JMSException {
1:6a631a9:         return getExpiredMessageTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:6a631a9:     }
1:c866f88: 
1:6a631a9:     public static ActiveMQTopic getNoConsumersAdvisoryTopic(ActiveMQDestination destination) {
1:6a631a9:         if (destination.isQueue()) {
1:6a631a9:             return getNoQueueConsumersAdvisoryTopic(destination);
1:6a631a9:         }
1:6a631a9:         return getNoTopicConsumersAdvisoryTopic(destination);
1:6a631a9:     }
1:c866f88: 
1:c866f88:     public static ActiveMQTopic getNoTopicConsumersAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getNoTopicConsumersAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:c2408b8:     public static ActiveMQTopic getNoTopicConsumersAdvisoryTopic(ActiveMQDestination destination) {
1:230a86c:         String name = NO_TOPIC_CONSUMERS_TOPIC_PREFIX + destination.getPhysicalName();
3:c2408b8:         return new ActiveMQTopic(name);
2:c2408b8:     }
1:230a86c: 
1:c866f88:     public static ActiveMQTopic getNoQueueConsumersAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getNoQueueConsumersAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:c2408b8:     public static ActiveMQTopic getNoQueueConsumersAdvisoryTopic(ActiveMQDestination destination) {
1:230a86c:         String name = NO_QUEUE_CONSUMERS_TOPIC_PREFIX + destination.getPhysicalName();
1:c2408b8:         return new ActiveMQTopic(name);
1:c2408b8:     }
1:230a86c: 
1:c866f88:     public static ActiveMQTopic getSlowConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getSlowConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static ActiveMQTopic getSlowConsumerAdvisoryTopic(ActiveMQDestination destination) {
1:c866f88:         String name = SLOW_CONSUMER_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1:cdc2fd3:                 + destination.getPhysicalName();
1:cdc2fd3:         return new ActiveMQTopic(name);
1:cdc2fd3:     }
1:69e3b6c: 
1:c866f88:     public static ActiveMQTopic getFastProducerAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getFastProducerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static ActiveMQTopic getFastProducerAdvisoryTopic(ActiveMQDestination destination) {
1:c866f88:         String name = FAST_PRODUCER_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1:cdc2fd3:                 + destination.getPhysicalName();
1:cdc2fd3:         return new ActiveMQTopic(name);
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static ActiveMQTopic getMessageDiscardedAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getMessageDiscardedAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static ActiveMQTopic getMessageDiscardedAdvisoryTopic(ActiveMQDestination destination) {
1:c866f88:         String name = MESSAGE_DISCAREDED_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1:cdc2fd3:                 + destination.getPhysicalName();
1:cdc2fd3:         return new ActiveMQTopic(name);
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static ActiveMQTopic getMessageDeliveredAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getMessageDeliveredAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static ActiveMQTopic getMessageDeliveredAdvisoryTopic(ActiveMQDestination destination) {
1:c866f88:         String name = MESSAGE_DELIVERED_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1:cdc2fd3:                 + destination.getPhysicalName();
1:cdc2fd3:         return new ActiveMQTopic(name);
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static ActiveMQTopic getMessageConsumedAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getMessageConsumedAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static ActiveMQTopic getMessageConsumedAdvisoryTopic(ActiveMQDestination destination) {
1:c866f88:         String name = MESSAGE_CONSUMED_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1:cdc2fd3:                 + destination.getPhysicalName();
1:cdc2fd3:         return new ActiveMQTopic(name);
1:c866f88:     }
1:c866f88: 
1:69e3b6c:     public static ActiveMQTopic getMessageDLQdAdvisoryTopic(ActiveMQDestination destination) {
1:69e3b6c:         String name = MESSAGE_DLQ_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1:69e3b6c:                 + destination.getPhysicalName();
1:69e3b6c:         return new ActiveMQTopic(name);
1:69e3b6c:     }
1:c866f88: 
1:4ee029e:     public static ActiveMQTopic getMasterBrokerAdvisoryTopic() {
1:4ee029e:         return new ActiveMQTopic(MASTER_BROKER_TOPIC_PREFIX);
1:4ee029e:     }
1:c866f88: 
1:663d5db:     public static ActiveMQTopic getNetworkBridgeAdvisoryTopic() {
1:663d5db:         return new ActiveMQTopic(NETWORK_BRIDGE_TOPIC_PREFIX);
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static ActiveMQTopic getFullAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getFullAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static ActiveMQTopic getFullAdvisoryTopic(ActiveMQDestination destination) {
1:c866f88:         String name = FULL_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1:cdc2fd3:                 + destination.getPhysicalName();
1:cdc2fd3:         return new ActiveMQTopic(name);
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static ActiveMQTopic getDestinationAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return getDestinationAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:d29ca2a:     public static ActiveMQTopic getDestinationAdvisoryTopic(ActiveMQDestination destination) {
1:230a86c:         switch (destination.getDestinationType()) {
1:d29ca2a:             case ActiveMQDestination.QUEUE_TYPE:
1:d29ca2a:                 return QUEUE_ADVISORY_TOPIC;
1:d29ca2a:             case ActiveMQDestination.TOPIC_TYPE:
1:d29ca2a:                 return TOPIC_ADVISORY_TOPIC;
1:d29ca2a:             case ActiveMQDestination.TEMP_QUEUE_TYPE:
1:d29ca2a:                 return TEMP_QUEUE_ADVISORY_TOPIC;
1:d29ca2a:             case ActiveMQDestination.TEMP_TOPIC_TYPE:
1:d29ca2a:                 return TEMP_TOPIC_ADVISORY_TOPIC;
1:74a7a8b:             default:
1:74a7a8b:                 throw new RuntimeException("Unknown destination type: " + destination.getDestinationType());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:c866f88:     public static boolean isDestinationAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isDestinationAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:68bcf0f:     public static boolean isTempDestinationAdvisoryTopic(ActiveMQDestination destination) {
1:74bed6b:         if (destination.isComposite()) {
1:74bed6b:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:74bed6b:             for (int i = 0; i < compositeDestinations.length; i++) {
1:68bcf0f:                 if (!isTempDestinationAdvisoryTopic(compositeDestinations[i])) {
1:cdc2fd3:                     return false;
1:68bcf0f:                 }
1:68bcf0f:             }
1:cdc2fd3:             return true;
1:cdc2fd3:         } else {
1:68bcf0f:             return destination.equals(TEMP_QUEUE_ADVISORY_TOPIC) || destination.equals(TEMP_TOPIC_ADVISORY_TOPIC);
1:cdc2fd3:         }
1:68bcf0f:     }
1:c866f88: 
1:d29ca2a:     public static boolean isDestinationAdvisoryTopic(ActiveMQDestination destination) {
1:230a86c:         if (destination.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < compositeDestinations.length; i++) {
1:230a86c:                 if (isDestinationAdvisoryTopic(compositeDestinations[i])) {
1:d29ca2a:                     return true;
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:             return false;
1:d29ca2a:         } else {
1:c866f88:             return destination.equals(TEMP_QUEUE_ADVISORY_TOPIC) || destination.equals(TEMP_TOPIC_ADVISORY_TOPIC)
1:c866f88:                     || destination.equals(QUEUE_ADVISORY_TOPIC) || destination.equals(TOPIC_ADVISORY_TOPIC);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:c866f88:     public static boolean isAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:d29ca2a:     public static boolean isAdvisoryTopic(ActiveMQDestination destination) {
1:74bed6b:         if (destination != null) {
1:230a86c:             if (destination.isComposite()) {
1:d29ca2a:                 ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:d29ca2a:                 for (int i = 0; i < compositeDestinations.length; i++) {
1:230a86c:                     if (isAdvisoryTopic(compositeDestinations[i])) {
1:d29ca2a:                         return true;
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:                 return false;
1:d29ca2a:             } else {
1:d29ca2a:                 return destination.isTopic() && destination.getPhysicalName().startsWith(ADVISORY_TOPIC_PREFIX);
1:d29ca2a:             }
1:d29ca2a:         }
1:74bed6b:         return false;
1:74bed6b:     }
1:d29ca2a: 
1:c866f88:     public static boolean isConnectionAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isConnectionAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:d29ca2a:     public static boolean isConnectionAdvisoryTopic(ActiveMQDestination destination) {
1:230a86c:         if (destination.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < compositeDestinations.length; i++) {
1:230a86c:                 if (isConnectionAdvisoryTopic(compositeDestinations[i])) {
1:d29ca2a:                     return true;
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:             return false;
1:d29ca2a:         } else {
1:d29ca2a:             return destination.equals(CONNECTION_ADVISORY_TOPIC);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:c866f88:     public static boolean isProducerAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isProducerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:d29ca2a:     public static boolean isProducerAdvisoryTopic(ActiveMQDestination destination) {
1:230a86c:         if (destination.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < compositeDestinations.length; i++) {
1:230a86c:                 if (isProducerAdvisoryTopic(compositeDestinations[i])) {
1:d29ca2a:                     return true;
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:             return false;
1:d29ca2a:         } else {
1:d29ca2a:             return destination.isTopic() && destination.getPhysicalName().startsWith(PRODUCER_ADVISORY_TOPIC_PREFIX);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:c866f88:     public static boolean isConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:d29ca2a:     public static boolean isConsumerAdvisoryTopic(ActiveMQDestination destination) {
1:230a86c:         if (destination.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < compositeDestinations.length; i++) {
1:230a86c:                 if (isConsumerAdvisoryTopic(compositeDestinations[i])) {
1:d29ca2a:                     return true;
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:             return false;
1:d29ca2a:         } else {
1:d29ca2a:             return destination.isTopic() && destination.getPhysicalName().startsWith(CONSUMER_ADVISORY_TOPIC_PREFIX);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:cc81680:     public static boolean isVirtualDestinationConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:cc81680:         return isVirtualDestinationConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:cc81680:     }
1:cc81680: 
1:cc81680:     public static boolean isVirtualDestinationConsumerAdvisoryTopic(ActiveMQDestination destination) {
1:cc81680:         if (destination.isComposite()) {
1:cc81680:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:cc81680:             for (int i = 0; i < compositeDestinations.length; i++) {
1:cc81680:                 if (isVirtualDestinationConsumerAdvisoryTopic(compositeDestinations[i])) {
1:cc81680:                     return true;
1:cc81680:                 }
1:cc81680:             }
1:cc81680:             return false;
1:cc81680:         } else {
1:cc81680:             return destination.isTopic() && destination.getPhysicalName().startsWith(VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX);
1:cc81680:         }
1:cc81680:     }
1:cc81680: 
1:c866f88:     public static boolean isSlowConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isSlowConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:d29ca2a:     }
1:c866f88: 
1:cdc2fd3:     public static boolean isSlowConsumerAdvisoryTopic(ActiveMQDestination destination) {
1:cdc2fd3:         if (destination.isComposite()) {
1:cdc2fd3:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:cdc2fd3:             for (int i = 0; i < compositeDestinations.length; i++) {
1:cdc2fd3:                 if (isSlowConsumerAdvisoryTopic(compositeDestinations[i])) {
1:74bed6b:                     return true;
1:c866f88:                 }
1:cdc2fd3:             }
1:74bed6b:             return false;
1:74bed6b:         } else {
1:cdc2fd3:             return destination.isTopic() && destination.getPhysicalName().startsWith(SLOW_CONSUMER_TOPIC_PREFIX);
1:cdc2fd3:         }
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static boolean isFastProducerAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isFastProducerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static boolean isFastProducerAdvisoryTopic(ActiveMQDestination destination) {
1:cdc2fd3:         if (destination.isComposite()) {
1:cdc2fd3:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:cdc2fd3:             for (int i = 0; i < compositeDestinations.length; i++) {
1:cdc2fd3:                 if (isFastProducerAdvisoryTopic(compositeDestinations[i])) {
1:cdc2fd3:                     return true;
1:cdc2fd3:                 }
1:cdc2fd3:             }
1:cdc2fd3:             return false;
1:cdc2fd3:         } else {
1:cdc2fd3:             return destination.isTopic() && destination.getPhysicalName().startsWith(FAST_PRODUCER_TOPIC_PREFIX);
1:cdc2fd3:         }
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static boolean isMessageConsumedAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isMessageConsumedAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static boolean isMessageConsumedAdvisoryTopic(ActiveMQDestination destination) {
1:cdc2fd3:         if (destination.isComposite()) {
1:cdc2fd3:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:cdc2fd3:             for (int i = 0; i < compositeDestinations.length; i++) {
1:cdc2fd3:                 if (isMessageConsumedAdvisoryTopic(compositeDestinations[i])) {
1:cdc2fd3:                     return true;
1:cdc2fd3:                 }
1:cdc2fd3:             }
1:cdc2fd3:             return false;
1:cdc2fd3:         } else {
1:cdc2fd3:             return destination.isTopic() && destination.getPhysicalName().startsWith(MESSAGE_CONSUMED_TOPIC_PREFIX);
1:cdc2fd3:         }
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static boolean isMasterBrokerAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isMasterBrokerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:4ee029e:     public static boolean isMasterBrokerAdvisoryTopic(ActiveMQDestination destination) {
1:4ee029e:         if (destination.isComposite()) {
1:4ee029e:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:4ee029e:             for (int i = 0; i < compositeDestinations.length; i++) {
1:4ee029e:                 if (isMasterBrokerAdvisoryTopic(compositeDestinations[i])) {
1:4ee029e:                     return true;
1:4ee029e:                 }
1:4ee029e:             }
1:4ee029e:             return false;
1:4ee029e:         } else {
1:4ee029e:             return destination.isTopic() && destination.getPhysicalName().startsWith(MASTER_BROKER_TOPIC_PREFIX);
1:4ee029e:         }
1:4ee029e:     }
1:c866f88: 
1:c866f88:     public static boolean isMessageDeliveredAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isMessageDeliveredAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static boolean isMessageDeliveredAdvisoryTopic(ActiveMQDestination destination) {
1:cdc2fd3:         if (destination.isComposite()) {
1:cdc2fd3:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:cdc2fd3:             for (int i = 0; i < compositeDestinations.length; i++) {
1:cdc2fd3:                 if (isMessageDeliveredAdvisoryTopic(compositeDestinations[i])) {
1:cdc2fd3:                     return true;
1:cdc2fd3:                 }
1:cdc2fd3:             }
1:cdc2fd3:             return false;
1:cdc2fd3:         } else {
1:cdc2fd3:             return destination.isTopic() && destination.getPhysicalName().startsWith(MESSAGE_DELIVERED_TOPIC_PREFIX);
1:cdc2fd3:         }
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static boolean isMessageDiscardedAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isMessageDiscardedAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static boolean isMessageDiscardedAdvisoryTopic(ActiveMQDestination destination) {
1:cdc2fd3:         if (destination.isComposite()) {
1:cdc2fd3:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:cdc2fd3:             for (int i = 0; i < compositeDestinations.length; i++) {
1:cdc2fd3:                 if (isMessageDiscardedAdvisoryTopic(compositeDestinations[i])) {
1:cdc2fd3:                     return true;
1:cdc2fd3:                 }
1:cdc2fd3:             }
1:cdc2fd3:             return false;
1:cdc2fd3:         } else {
1:cdc2fd3:             return destination.isTopic() && destination.getPhysicalName().startsWith(MESSAGE_DISCAREDED_TOPIC_PREFIX);
1:cdc2fd3:         }
1:cdc2fd3:     }
1:c866f88: 
1:c866f88:     public static boolean isFullAdvisoryTopic(Destination destination) throws JMSException {
1:c866f88:         return isFullAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:c866f88:     }
1:c866f88: 
1:cdc2fd3:     public static boolean isFullAdvisoryTopic(ActiveMQDestination destination) {
1:cdc2fd3:         if (destination.isComposite()) {
1:cdc2fd3:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:cdc2fd3:             for (int i = 0; i < compositeDestinations.length; i++) {
1:cdc2fd3:                 if (isFullAdvisoryTopic(compositeDestinations[i])) {
1:cdc2fd3:                     return true;
1:cdc2fd3:                 }
1:cdc2fd3:             }
1:cdc2fd3:             return false;
1:cdc2fd3:         } else {
1:cdc2fd3:             return destination.isTopic() && destination.getPhysicalName().startsWith(FULL_TOPIC_PREFIX);
1:cdc2fd3:         }
1:cdc2fd3:     }
1:4ee029e: 
1:7880521:     public static boolean isNetworkBridgeAdvisoryTopic(Destination destination) throws JMSException {
1:7880521:         return isNetworkBridgeAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:68bcf0f:     }
1:4ee029e: 
1:7880521:     public static boolean isNetworkBridgeAdvisoryTopic(ActiveMQDestination destination) {
1:68bcf0f:         if (destination.isComposite()) {
1:68bcf0f:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:68bcf0f:             for (int i = 0; i < compositeDestinations.length; i++) {
1:7880521:                 if (isNetworkBridgeAdvisoryTopic(compositeDestinations[i])) {
1:68bcf0f:                     return true;
1:7880521:                 }
1:7880521:             }
1:68bcf0f:             return false;
1:68bcf0f:         } else {
1:7880521:             return destination.isTopic() && destination.getPhysicalName().startsWith(NETWORK_BRIDGE_TOPIC_PREFIX);
1:7880521:         }
1:7880521:     }
6:cdc2fd3: 
1:9408509:     /**
1:9408509:      * Returns the agent topic which is used to send commands to the broker
1:9408509:      */
1:9408509:     public static Destination getAgentDestination() {
1:9408509:         return AGENT_TOPIC_DESTINATION;
1:663d5db:     }
1:8012f28: 
1:8012f28:     public static ActiveMQTopic getNetworkBridgeForwardFailureAdvisoryTopic() {
1:8012f28:         return new ActiveMQTopic(NETWORK_BRIDGE_FORWARD_FAILURE_TOPIC_PREFIX);
1:8012f28:     }
1:c2408b8: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:078f39f
/////////////////////////////////////////////////////////////////////////
1:     public static final String MSG_PROPERTY_USAGE_COUNT = "usageCount";
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1:     public static final String VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "VirtualDestination.Consumer.";
1:     public static final String QUEUE_VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX = VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX + "Queue.";
1:     public static final String TOPIC_VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX = VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX + "Topic.";
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic getVirtualDestinationConsumerAdvisoryTopic(ActiveMQDestination destination) {
1:         String prefix;
1:         if (destination.isQueue()) {
1:             prefix = QUEUE_VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX;
1:         } else {
1:             prefix = TOPIC_VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX;
1:         }
1:         return getAdvisoryTopic(destination, prefix, true);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isVirtualDestinationConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:         return isVirtualDestinationConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1:     public static boolean isVirtualDestinationConsumerAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (isVirtualDestinationConsumerAdvisoryTopic(compositeDestinations[i])) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(VIRTUAL_DESTINATION_CONSUMER_ADVISORY_TOPIC_PREFIX);
1:         }
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6c703ac
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static final String MSG_PROPERTY_DESTINATION = "orignalDestination";
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:94b404d
/////////////////////////////////////////////////////////////////////////
1:         String prefix;
1:             prefix = QUEUE_CONSUMER_ADVISORY_TOPIC_PREFIX;
1:             prefix = TOPIC_CONSUMER_ADVISORY_TOPIC_PREFIX;
1:         return getAdvisoryTopic(destination, prefix, true);
/////////////////////////////////////////////////////////////////////////
1:         String prefix;
1:             prefix = QUEUE_PRODUCER_ADVISORY_TOPIC_PREFIX;
1:             prefix = TOPIC_PRODUCER_ADVISORY_TOPIC_PREFIX;
1:         return getAdvisoryTopic(destination, prefix, false);
1:     }
1: 
1:     private static ActiveMQTopic getAdvisoryTopic(ActiveMQDestination destination, String prefix, boolean consumerTopics) {
1:         return new ActiveMQTopic(prefix + destination.getPhysicalName().replaceAll(",", "&sbquo;"));
author:Gary Tully
-------------------------------------------------------------------------------
commit:8012f28
/////////////////////////////////////////////////////////////////////////
1:     public static final String NETWORK_BRIDGE_FORWARD_FAILURE_TOPIC_PREFIX = NETWORK_BRIDGE_TOPIC_PREFIX + ".ForwardFailure";
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static ActiveMQTopic getNetworkBridgeForwardFailureAdvisoryTopic() {
1:         return new ActiveMQTopic(NETWORK_BRIDGE_FORWARD_FAILURE_TOPIC_PREFIX);
1:     }
commit:eca00f9
/////////////////////////////////////////////////////////////////////////
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
1:     public static final String MSG_PROPERTY_CONSUMER_COUNT = "consumerCount";
1:     public static final String MSG_PROPERTY_DISCARDED_COUNT = "discardedCount";
1:     
commit:780e448
/////////////////////////////////////////////////////////////////////////
1:     public static final String FAST_PRODUCER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "FastProducer.";
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class AdvisorySupport {
/////////////////////////////////////////////////////////////////////////
1:     private AdvisorySupport() {        
1:     }
1:     
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: 
/////////////////////////////////////////////////////////////////////////
1:         default:
1:             throw new RuntimeException("Unknown destination type: " + destination.getDestinationType());
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         if (destination.isQueue()) {
1:         } else {
1:         }
1:         if (destination.isQueue()) {
1:         } else {
1:         }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
0:     public static final ActiveMQTopic CONNECTION_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX + "Connection");
1:     public static final ActiveMQTopic QUEUE_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX + "Queue");
1:     public static final ActiveMQTopic TOPIC_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX + "Topic");
1:     public static final ActiveMQTopic TEMP_QUEUE_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX + "TempQueue");
1:     public static final ActiveMQTopic TEMP_TOPIC_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX + "TempTopic");
1:     public static final String PRODUCER_ADVISORY_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "Producer.";
1:     public static final String QUEUE_PRODUCER_ADVISORY_TOPIC_PREFIX = PRODUCER_ADVISORY_TOPIC_PREFIX + "Queue.";
1:     public static final String TOPIC_PRODUCER_ADVISORY_TOPIC_PREFIX = PRODUCER_ADVISORY_TOPIC_PREFIX + "Topic.";
1:     public static final String CONSUMER_ADVISORY_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "Consumer.";
1:     public static final String QUEUE_CONSUMER_ADVISORY_TOPIC_PREFIX = CONSUMER_ADVISORY_TOPIC_PREFIX + "Queue.";
1:     public static final String TOPIC_CONSUMER_ADVISORY_TOPIC_PREFIX = CONSUMER_ADVISORY_TOPIC_PREFIX + "Topic.";
1:     public static final String EXPIRED_TOPIC_MESSAGES_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "Expired.Topic.";
1:     public static final String EXPIRED_QUEUE_MESSAGES_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "Expired.Queue.";
1:     public static final String NO_TOPIC_CONSUMERS_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "NoConsumer.Topic.";
1:     public static final String NO_QUEUE_CONSUMERS_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "NoConsumer.Queue.";
0:     public static final ActiveMQTopic TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC = new ActiveMQTopic(TEMP_QUEUE_ADVISORY_TOPIC + "," + TEMP_TOPIC_ADVISORY_TOPIC);
/////////////////////////////////////////////////////////////////////////
0:         if (destination.isQueue())
0:             return new ActiveMQTopic(QUEUE_CONSUMER_ADVISORY_TOPIC_PREFIX + destination.getPhysicalName());
0:         else
0:             return new ActiveMQTopic(TOPIC_CONSUMER_ADVISORY_TOPIC_PREFIX + destination.getPhysicalName());
1: 
0:         if (destination.isQueue())
0:             return new ActiveMQTopic(QUEUE_PRODUCER_ADVISORY_TOPIC_PREFIX + destination.getPhysicalName());
0:         else
0:             return new ActiveMQTopic(TOPIC_PRODUCER_ADVISORY_TOPIC_PREFIX + destination.getPhysicalName());
1: 
1: 
1:         String name = EXPIRED_TOPIC_MESSAGES_TOPIC_PREFIX + destination.getPhysicalName();
1: 
1:         String name = EXPIRED_QUEUE_MESSAGES_TOPIC_PREFIX + destination.getPhysicalName();
1: 
1:         String name = NO_TOPIC_CONSUMERS_TOPIC_PREFIX + destination.getPhysicalName();
1: 
1:         String name = NO_QUEUE_CONSUMERS_TOPIC_PREFIX + destination.getPhysicalName();
1: 
1:         switch (destination.getDestinationType()) {
/////////////////////////////////////////////////////////////////////////
0:         throw new RuntimeException("Unknown destination type: " + destination.getDestinationType());
1:         if (destination.isComposite()) {
1:                 if (isDestinationAdvisoryTopic(compositeDestinations[i])) {
0:             return destination.equals(TEMP_QUEUE_ADVISORY_TOPIC) || destination.equals(TEMP_TOPIC_ADVISORY_TOPIC) || destination.equals(QUEUE_ADVISORY_TOPIC)
0:                    || destination.equals(TOPIC_ADVISORY_TOPIC);
1:         if (destination.isComposite()) {
1:                 if (isAdvisoryTopic(compositeDestinations[i])) {
/////////////////////////////////////////////////////////////////////////
1:         if (destination.isComposite()) {
1:                 if (isConnectionAdvisoryTopic(compositeDestinations[i])) {
/////////////////////////////////////////////////////////////////////////
1:         if (destination.isComposite()) {
1:                 if (isProducerAdvisoryTopic(compositeDestinations[i])) {
/////////////////////////////////////////////////////////////////////////
1:         if (destination.isComposite()) {
1:                 if (isConsumerAdvisoryTopic(compositeDestinations[i])) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:3852a53
/////////////////////////////////////////////////////////////////////////
0:     public static final String QUEUE_PRODUCER_ADVISORY_TOPIC_PREFIX = PRODUCER_ADVISORY_TOPIC_PREFIX+"Queue.";
0:     public static final String TOPIC_PRODUCER_ADVISORY_TOPIC_PREFIX = PRODUCER_ADVISORY_TOPIC_PREFIX+"Topic.";
0:     public static final String QUEUE_CONSUMER_ADVISORY_TOPIC_PREFIX = CONSUMER_ADVISORY_TOPIC_PREFIX+"Queue.";
0:     public static final String TOPIC_CONSUMER_ADVISORY_TOPIC_PREFIX = CONSUMER_ADVISORY_TOPIC_PREFIX+"Topic.";
/////////////////////////////////////////////////////////////////////////
0:         if( destination.isQueue() ) 
0:             return new ActiveMQTopic(QUEUE_CONSUMER_ADVISORY_TOPIC_PREFIX+destination.getPhysicalName());
0:         else 
0:             return new ActiveMQTopic(TOPIC_CONSUMER_ADVISORY_TOPIC_PREFIX+destination.getPhysicalName());
0:         if( destination.isQueue() ) 
0:             return new ActiveMQTopic(QUEUE_PRODUCER_ADVISORY_TOPIC_PREFIX+destination.getPhysicalName());
0:         else 
0:             return new ActiveMQTopic(TOPIC_PRODUCER_ADVISORY_TOPIC_PREFIX+destination.getPhysicalName());
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
0: public class AdvisorySupport {
1:     
1:     public static final String ADVISORY_TOPIC_PREFIX = "ActiveMQ.Advisory.";
0:     public static final ActiveMQTopic CONNECTION_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX+"Connection");
0:     public static final ActiveMQTopic QUEUE_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX+"Queue");
0:     public static final ActiveMQTopic TOPIC_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX+"Topic");
0:     public static final ActiveMQTopic TEMP_QUEUE_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX+"TempQueue");
0:     public static final ActiveMQTopic TEMP_TOPIC_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX+"TempTopic");
0:     public static final String PRODUCER_ADVISORY_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX+"Producer.";
0:     public static final String CONSUMER_ADVISORY_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX+"Consumer.";
1:     public static final String ADIVSORY_MESSAGE_TYPE = "Advisory";
0:     public static final ActiveMQTopic TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC = new ActiveMQTopic(TEMP_QUEUE_ADVISORY_TOPIC+","+TEMP_TOPIC_ADVISORY_TOPIC);
1: 
1:     public static ActiveMQTopic getConnectionAdvisoryTopic() {
1:         return CONNECTION_ADVISORY_TOPIC;
1:     }
1: 
1:     public static ActiveMQTopic getConsumerAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = CONSUMER_ADVISORY_TOPIC_PREFIX+destination.getQualifiedName();
1:         return new ActiveMQTopic(name);
1:     }
1:     
1:     public static ActiveMQTopic getProducerAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = PRODUCER_ADVISORY_TOPIC_PREFIX+destination.getQualifiedName();
1:         return new ActiveMQTopic(name);
1:     }
1:     
1:     public static ActiveMQTopic getDestinationAdvisoryTopic(ActiveMQDestination destination) {
0:         switch( destination.getDestinationType() ) {
1:         case ActiveMQDestination.QUEUE_TYPE:
1:             return QUEUE_ADVISORY_TOPIC;
1:         case ActiveMQDestination.TOPIC_TYPE:
1:             return TOPIC_ADVISORY_TOPIC;
1:         case ActiveMQDestination.TEMP_QUEUE_TYPE:
1:             return TEMP_QUEUE_ADVISORY_TOPIC;
1:         case ActiveMQDestination.TEMP_TOPIC_TYPE:
1:             return TEMP_TOPIC_ADVISORY_TOPIC;
1:         }
0:         throw new RuntimeException("Unknown destination type: "+destination.getDestinationType());
1:     }
1: 
1:     public static boolean isDestinationAdvisoryTopic(ActiveMQDestination destination) {
0:         if( destination.isComposite() ) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
0:                 if( isDestinationAdvisoryTopic(compositeDestinations[i]) ) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
0:             return 
0:                 destination.equals(TEMP_QUEUE_ADVISORY_TOPIC)
0:                 || destination.equals(TEMP_TOPIC_ADVISORY_TOPIC)
0:                 || destination.equals(QUEUE_ADVISORY_TOPIC)
0:                 || destination.equals(TOPIC_ADVISORY_TOPIC);
1:         }
1:     }
1: 
1:     public static boolean isAdvisoryTopic(ActiveMQDestination destination) {
0:         if( destination.isComposite() ) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
0:                 if( isAdvisoryTopic(compositeDestinations[i]) ) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(ADVISORY_TOPIC_PREFIX);
1:         }
1:     }
1: 
1:     public static boolean isConnectionAdvisoryTopic(ActiveMQDestination destination) {
0:         if( destination.isComposite() ) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
0:                 if( isConnectionAdvisoryTopic(compositeDestinations[i]) ) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.equals(CONNECTION_ADVISORY_TOPIC);
1:         }
1:     }
1: 
1:     public static boolean isProducerAdvisoryTopic(ActiveMQDestination destination) {
0:         if( destination.isComposite() ) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
0:                 if( isProducerAdvisoryTopic(compositeDestinations[i]) ) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(PRODUCER_ADVISORY_TOPIC_PREFIX);
1:         }
1:     }
1: 
1:     public static boolean isConsumerAdvisoryTopic(ActiveMQDestination destination) {
0:         if( destination.isComposite() ) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
0:                 if( isConsumerAdvisoryTopic(compositeDestinations[i]) ) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(CONSUMER_ADVISORY_TOPIC_PREFIX);
1:         }
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:74bed6b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                     TEMP_QUEUE_ADVISORY_TOPIC.getPhysicalName() + "," + TEMP_TOPIC_ADVISORY_TOPIC.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
0:             case ActiveMQDestination.QUEUE_TYPE:
0:                 return QUEUE_ADVISORY_TOPIC;
0:             case ActiveMQDestination.TOPIC_TYPE:
0:                 return TOPIC_ADVISORY_TOPIC;
0:             case ActiveMQDestination.TEMP_QUEUE_TYPE:
0:                 return TEMP_QUEUE_ADVISORY_TOPIC;
0:             case ActiveMQDestination.TEMP_TOPIC_TYPE:
0:                 return TEMP_TOPIC_ADVISORY_TOPIC;
0:             default:
0:                 throw new RuntimeException("Unknown destination type: " + destination.getDestinationType());
/////////////////////////////////////////////////////////////////////////
1:         if (destination != null) {
1:             if (destination.isComposite()) {
1:                 ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:                 for (int i = 0; i < compositeDestinations.length; i++) {
0:                     if (isAdvisoryTopic(compositeDestinations[i])) {
1:                         return true;
1:                     }
1:                 return false;
1:             } else {
0:                 return destination.isTopic() && destination.getPhysicalName().startsWith(ADVISORY_TOPIC_PREFIX);
1:         return false;
commit:69e3b6c
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Destination;
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1:     public static final String MESSAGE_DLQ_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MessageDLQd.";
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static ActiveMQTopic getMessageDLQdAdvisoryTopic(ActiveMQDestination destination) {
1:         String name = MESSAGE_DLQ_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1:                 + destination.getPhysicalName();
1:         return new ActiveMQTopic(name);
1:     }
commit:c866f88
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQMessageTransformation;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
1:     public static final ActiveMQTopic CONNECTION_ADVISORY_TOPIC = new ActiveMQTopic(ADVISORY_TOPIC_PREFIX
1:             + "Connection");
/////////////////////////////////////////////////////////////////////////
1:     public static final String MSG_PROPERTY_ORIGIN_BROKER_ID = "originBrokerId";
1:     public static final String MSG_PROPERTY_ORIGIN_BROKER_NAME = "originBrokerName";
1:     public static final String MSG_PROPERTY_ORIGIN_BROKER_URL = "originBrokerURL";
1:     public static final String MSG_PROPERTY_USAGE_NAME = "usageName";
1:     public static final String MSG_PROPERTY_CONSUMER_ID = "consumerId";
1:     public static final String MSG_PROPERTY_PRODUCER_ID = "producerId";
1:     public static final String MSG_PROPERTY_MESSAGE_ID = "orignalMessageId";
1:     public static final ActiveMQTopic TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC = new ActiveMQTopic(
0:             TEMP_QUEUE_ADVISORY_TOPIC + "," + TEMP_TOPIC_ADVISORY_TOPIC);
0:     private AdvisorySupport() {
1: 
1:     public static ActiveMQTopic getConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:         return getConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic getProducerAdvisoryTopic(Destination destination) throws JMSException {
1:         return getProducerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic getExpiredMessageTopic(Destination destination) throws JMSException {
1:         return getExpiredMessageTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic getExpiredQueueMessageAdvisoryTopic(Destination destination) throws JMSException {
1:         return getExpiredQueueMessageAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1:     public static ActiveMQTopic getNoTopicConsumersAdvisoryTopic(Destination destination) throws JMSException {
1:         return getNoTopicConsumersAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1:     public static ActiveMQTopic getNoQueueConsumersAdvisoryTopic(Destination destination) throws JMSException {
1:         return getNoQueueConsumersAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1: 
1:     public static ActiveMQTopic getSlowConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:         return getSlowConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1:         String name = SLOW_CONSUMER_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1: 
1:     public static ActiveMQTopic getFastProducerAdvisoryTopic(Destination destination) throws JMSException {
1:         return getFastProducerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1:         String name = FAST_PRODUCER_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1: 
1:     public static ActiveMQTopic getMessageDiscardedAdvisoryTopic(Destination destination) throws JMSException {
1:         return getMessageDiscardedAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1:         String name = MESSAGE_DISCAREDED_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1: 
1:     public static ActiveMQTopic getMessageDeliveredAdvisoryTopic(Destination destination) throws JMSException {
1:         return getMessageDeliveredAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1:         String name = MESSAGE_DELIVERED_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1: 
1:     public static ActiveMQTopic getMessageConsumedAdvisoryTopic(Destination destination) throws JMSException {
1:         return getMessageConsumedAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1:         String name = MESSAGE_CONSUMED_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1: 
0:     public static ActiveMQTopic getMasterBrokerAdvisoryTopic(Destination destination) throws JMSException {
0:         return getMasterBrokerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1: 
1:     public static ActiveMQTopic getFullAdvisoryTopic(Destination destination) throws JMSException {
1:         return getFullAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
1:         String name = FULL_TOPIC_PREFIX + destination.getDestinationTypeAsString() + "."
1:     public static ActiveMQTopic getDestinationAdvisoryTopic(Destination destination) throws JMSException {
1:         return getDestinationAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isDestinationAdvisoryTopic(Destination destination) throws JMSException {
1:         return isDestinationAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             return destination.equals(TEMP_QUEUE_ADVISORY_TOPIC) || destination.equals(TEMP_TOPIC_ADVISORY_TOPIC)
1:                     || destination.equals(QUEUE_ADVISORY_TOPIC) || destination.equals(TOPIC_ADVISORY_TOPIC);
1:     public static boolean isAdvisoryTopic(Destination destination) throws JMSException {
1:         return isAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isConnectionAdvisoryTopic(Destination destination) throws JMSException {
1:         return isConnectionAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isProducerAdvisoryTopic(Destination destination) throws JMSException {
1:         return isProducerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:         return isConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static boolean isSlowConsumerAdvisoryTopic(Destination destination) throws JMSException {
1:         return isSlowConsumerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static boolean isFastProducerAdvisoryTopic(Destination destination) throws JMSException {
1:         return isFastProducerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static boolean isMessageConsumedAdvisoryTopic(Destination destination) throws JMSException {
1:         return isMessageConsumedAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static boolean isMasterBrokerAdvisoryTopic(Destination destination) throws JMSException {
1:         return isMasterBrokerAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static boolean isMessageDeliveredAdvisoryTopic(Destination destination) throws JMSException {
1:         return isMessageDeliveredAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static boolean isMessageDiscardedAdvisoryTopic(Destination destination) throws JMSException {
1:         return isMessageDiscardedAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static boolean isFullAdvisoryTopic(Destination destination) throws JMSException {
1:         return isFullAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
1: 
commit:db4f602
/////////////////////////////////////////////////////////////////////////
0:     public static final String FAST_PRODUCER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "FastPorducer.";
/////////////////////////////////////////////////////////////////////////
0:     public static final String MSG_PROPERTY_ORIGIN_BROKER_URL="originBrokerURL";
0:     public static final String MSG_PROPERTY_USAGE_NAME="usageName";
0:     public static final String MSG_PROPERTY_CONSUMER_ID="consumerId";
0:     public static final String MSG_PROPERTY_PRODUCER_ID="producerId";
0:     public static final String MSG_PROPERTY_MESSAGE_ID="orignalMessageId";
commit:4ee029e
/////////////////////////////////////////////////////////////////////////
1:     public static final String MASTER_BROKER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MasterBroker";
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic getMasterBrokerAdvisoryTopic() {
1:         return new ActiveMQTopic(MASTER_BROKER_TOPIC_PREFIX);
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isMasterBrokerAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (isMasterBrokerAdvisoryTopic(compositeDestinations[i])) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(MASTER_BROKER_TOPIC_PREFIX);
1:         }
1:     }
1:     
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1:     public static final String SLOW_CONSUMER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "SlowConsumer.";
0:     public static final String FAST_PRODUCER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "FastConsumer.";
1:     public static final String MESSAGE_DISCAREDED_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MessageDiscarded.";
1:     public static final String FULL_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "FULL.";
1:     public static final String MESSAGE_DELIVERED_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MessageDelivered.";
1:     public static final String MESSAGE_CONSUMED_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "MessageConsumed.";
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static ActiveMQTopic getSlowConsumerAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = SLOW_CONSUMER_TOPIC_PREFIX
0:                 + destination.getDestinationTypeAsString() + "."
1:                 + destination.getPhysicalName();
1:         return new ActiveMQTopic(name);
1:     }
1:     
1:     public static ActiveMQTopic getFastProducerAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = FAST_PRODUCER_TOPIC_PREFIX
0:                 + destination.getDestinationTypeAsString() + "."
1:                 + destination.getPhysicalName();
1:         return new ActiveMQTopic(name);
1:     }
1:     
1:     public static ActiveMQTopic getMessageDiscardedAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = MESSAGE_DISCAREDED_TOPIC_PREFIX
0:                 + destination.getDestinationTypeAsString() + "."
1:                 + destination.getPhysicalName();
1:         return new ActiveMQTopic(name);
1:     }
1:     
1:     public static ActiveMQTopic getMessageDeliveredAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = MESSAGE_DELIVERED_TOPIC_PREFIX
0:                 + destination.getDestinationTypeAsString() + "."
1:                 + destination.getPhysicalName();
1:         return new ActiveMQTopic(name);
1:     }
1:     
1:     public static ActiveMQTopic getMessageConsumedAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = MESSAGE_CONSUMED_TOPIC_PREFIX
0:                 + destination.getDestinationTypeAsString() + "."
1:                 + destination.getPhysicalName();
1:         return new ActiveMQTopic(name);
1:     }
1:     
1:     public static ActiveMQTopic getFullAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = FULL_TOPIC_PREFIX
0:                 + destination.getDestinationTypeAsString() + "."
1:                 + destination.getPhysicalName();
1:         return new ActiveMQTopic(name);
1:     }
/////////////////////////////////////////////////////////////////////////
0:     
1:     public static boolean isSlowConsumerAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (isSlowConsumerAdvisoryTopic(compositeDestinations[i])) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(SLOW_CONSUMER_TOPIC_PREFIX);
1:         }
1:     }
0:     
1:     public static boolean isFastProducerAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (isFastProducerAdvisoryTopic(compositeDestinations[i])) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(FAST_PRODUCER_TOPIC_PREFIX);
1:         }
1:     }
0:     
1:     public static boolean isMessageConsumedAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (isMessageConsumedAdvisoryTopic(compositeDestinations[i])) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(MESSAGE_CONSUMED_TOPIC_PREFIX);
1:         }
1:     }
0:     
1:     public static boolean isMessageDeliveredAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (isMessageDeliveredAdvisoryTopic(compositeDestinations[i])) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(MESSAGE_DELIVERED_TOPIC_PREFIX);
1:         }
1:     }
0:     
1:     public static boolean isMessageDiscardedAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (isMessageDiscardedAdvisoryTopic(compositeDestinations[i])) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(MESSAGE_DISCAREDED_TOPIC_PREFIX);
1:         }
1:     }
0:     
1:     public static boolean isFullAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (isFullAdvisoryTopic(compositeDestinations[i])) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(FULL_TOPIC_PREFIX);
1:         }
1:     }
commit:88fbb05
/////////////////////////////////////////////////////////////////////////
0:     public static final String MSG_PROPERTY_ORIGIN_BROKER_ID="originBrokerId";
0:     public static final String MSG_PROPERTY_ORIGIN_BROKER_NAME="originBrokerName";
commit:a414c20
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic getExpiredMessageTopic(ActiveMQDestination destination) {
1:         if (destination.isQueue()) {
1:             return getExpiredQueueMessageAdvisoryTopic(destination);
1:         }
1:         return getExpiredTopicMessageAdvisoryTopic(destination);
1:     }
0:     
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6a631a9
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic[] getAllDestinationAdvisoryTopics(Destination destination) throws JMSException {
1:         return getAllDestinationAdvisoryTopics(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
0: 
1:     public static ActiveMQTopic[] getAllDestinationAdvisoryTopics(ActiveMQDestination destination) throws JMSException {
1:         ArrayList<ActiveMQTopic> result = new ArrayList<ActiveMQTopic>();
0: 
1:         result.add(getConsumerAdvisoryTopic(destination));
1:         result.add(getProducerAdvisoryTopic(destination));
1:         result.add(getExpiredMessageTopic(destination));
1:         result.add(getNoConsumersAdvisoryTopic(destination));
1:         result.add(getSlowConsumerAdvisoryTopic(destination));
1:         result.add(getFastProducerAdvisoryTopic(destination));
1:         result.add(getMessageDiscardedAdvisoryTopic(destination));
1:         result.add(getMessageDeliveredAdvisoryTopic(destination));
1:         result.add(getMessageConsumedAdvisoryTopic(destination));
1:         result.add(getMessageDLQdAdvisoryTopic(destination));
1:         result.add(getFullAdvisoryTopic(destination));
0: 
1:         return result.toArray(new ActiveMQTopic[0]);
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic getNoConsumersAdvisoryTopic(Destination destination) throws JMSException {
1:         return getExpiredMessageTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
0: 
1:     public static ActiveMQTopic getNoConsumersAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isQueue()) {
1:             return getNoQueueConsumersAdvisoryTopic(destination);
1:         }
1:         return getNoTopicConsumersAdvisoryTopic(destination);
1:     }
0: 
commit:68bcf0f
/////////////////////////////////////////////////////////////////////////
0: 
1:     public static final ActiveMQTopic ALL_DESTINATIONS_COMPOSITE_ADVISORY_TOPIC = new ActiveMQTopic(
1:             TOPIC_ADVISORY_TOPIC.getPhysicalName() + "," + QUEUE_ADVISORY_TOPIC.getPhysicalName() + "," +
1:             TEMP_QUEUE_ADVISORY_TOPIC.getPhysicalName() + "," + TEMP_TOPIC_ADVISORY_TOPIC.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isTempDestinationAdvisoryTopic(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (!isTempDestinationAdvisoryTopic(compositeDestinations[i])) {
1:                     return false;
1:                 }
1:             }
1:             return true;
1:         } else {
1:             return destination.equals(TEMP_QUEUE_ADVISORY_TOPIC) || destination.equals(TEMP_TOPIC_ADVISORY_TOPIC);
1:         }
1:     }
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7880521
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isNetworkBridgeAdvisoryTopic(Destination destination) throws JMSException {
1:         return isNetworkBridgeAdvisoryTopic(ActiveMQMessageTransformation.transformDestination(destination));
1:     }
0: 
1:     public static boolean isNetworkBridgeAdvisoryTopic(ActiveMQDestination destination) {
0:         if (destination.isComposite()) {
0:             ActiveMQDestination[] compositeDestinations = destination.getCompositeDestinations();
0:             for (int i = 0; i < compositeDestinations.length; i++) {
1:                 if (isNetworkBridgeAdvisoryTopic(compositeDestinations[i])) {
0:                     return true;
1:                 }
1:             }
0:             return false;
0:         } else {
1:             return destination.isTopic() && destination.getPhysicalName().startsWith(NETWORK_BRIDGE_TOPIC_PREFIX);
1:         }
1:     }
0: 
commit:008b3e5
/////////////////////////////////////////////////////////////////////////
0:             TEMP_QUEUE_ADVISORY_TOPIC.getPhysicalName() + "," + TEMP_TOPIC_ADVISORY_TOPIC.getPhysicalName());
commit:663d5db
/////////////////////////////////////////////////////////////////////////
1:     public static final String NETWORK_BRIDGE_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "NetworkBridge";
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic getNetworkBridgeAdvisoryTopic() {
1:         return new ActiveMQTopic(NETWORK_BRIDGE_TOPIC_PREFIX);
1:     }
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:9408509
/////////////////////////////////////////////////////////////////////////
1:     public static final String AGENT_TOPIC = "ActiveMQ.Agent";
1:     private static final ActiveMQTopic AGENT_TOPIC_DESTINATION = new ActiveMQTopic(AGENT_TOPIC);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the agent topic which is used to send commands to the broker
1:      */
1:     public static Destination getAgentDestination() {
1:         return AGENT_TOPIC_DESTINATION;
commit:49e10d3
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Destination;
0: 
/////////////////////////////////////////////////////////////////////////
0:     public static final String AGENT_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX+"Agent.";
0: 
/////////////////////////////////////////////////////////////////////////
0:     public static Destination getAgentDestination(String brokerName) {
0:         return new ActiveMQTopic(AGENT_TOPIC_PREFIX + brokerName);
1:     }
commit:27f7cab
/////////////////////////////////////////////////////////////////////////
0:         String name = EXPIRED_TOPIC_MESSAGES_TOPIC_PREFIX+destination.getPhysicalName();
0:         String name = EXPIRED_QUEUE_MESSAGES_TOPIC_PREFIX+destination.getPhysicalName();
0:         String name = NO_TOPIC_CONSUMERS_TOPIC_PREFIX+destination.getPhysicalName();
0:         String name = NO_QUEUE_CONSUMERS_TOPIC_PREFIX+destination.getPhysicalName();
commit:c2408b8
/////////////////////////////////////////////////////////////////////////
0:     public static final String EXPIRED_TOPIC_MESSAGES_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX+"Expired.Topic.";
0:     public static final String EXPIRED_QUEUE_MESSAGES_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX+"Expired.Queue.";
0:     public static final String NO_TOPIC_CONSUMERS_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX+"NoConsumer.Topic.";
0:     public static final String NO_QUEUE_CONSUMERS_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX+"NoConsumer.Queue.";
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQTopic getExpiredTopicMessageAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = EXPIRED_TOPIC_MESSAGES_TOPIC_PREFIX+destination.getQualifiedName();
1:         return new ActiveMQTopic(name);
1:     }
0:     
1:     public static ActiveMQTopic getExpiredQueueMessageAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = EXPIRED_QUEUE_MESSAGES_TOPIC_PREFIX+destination.getQualifiedName();
1:         return new ActiveMQTopic(name);
1:     }
0:     
1:     public static ActiveMQTopic getNoTopicConsumersAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = NO_TOPIC_CONSUMERS_TOPIC_PREFIX+destination.getQualifiedName();
1:         return new ActiveMQTopic(name);
1:     }
0:     
1:     public static ActiveMQTopic getNoQueueConsumersAdvisoryTopic(ActiveMQDestination destination) {
0:         String name = NO_QUEUE_CONSUMERS_TOPIC_PREFIX+destination.getQualifiedName();
1:         return new ActiveMQTopic(name);
1:     }
0:     
============================================================================