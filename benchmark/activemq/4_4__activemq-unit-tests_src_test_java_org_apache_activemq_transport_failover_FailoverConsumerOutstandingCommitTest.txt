1:6efc268: /**
1:6efc268:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6efc268:  * contributor license agreements.  See the NOTICE file distributed with
1:6efc268:  * this work for additional information regarding copyright ownership.
1:6efc268:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6efc268:  * (the "License"); you may not use this file except in compliance with
1:6efc268:  * the License.  You may obtain a copy of the License at
1:6efc268:  *
1:6efc268:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6efc268:  *
1:6efc268:  * Unless required by applicable law or agreed to in writing, software
1:6efc268:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6efc268:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6efc268:  * See the License for the specific language governing permissions and
1:6efc268:  * limitations under the License.
1:6efc268:  */
1:6efc268: package org.apache.activemq.transport.failover;
7:6efc268: 
1:b836af8: import static org.junit.Assert.assertEquals;
1:6efc268: import static org.junit.Assert.assertNotNull;
1:62daac4: import static org.junit.Assert.assertNull;
1:6efc268: import static org.junit.Assert.assertTrue;
1:a2af47b: import static org.junit.Assert.fail;
1:6efc268: 
1:b836af8: import java.util.ArrayList;
1:6efc268: import java.util.concurrent.CountDownLatch;
1:6efc268: import java.util.concurrent.Executors;
1:6efc268: import java.util.concurrent.TimeUnit;
1:b836af8: import java.util.concurrent.atomic.AtomicBoolean;
1:6efc268: 
1:6efc268: import javax.jms.JMSException;
1:6efc268: import javax.jms.Message;
1:6efc268: import javax.jms.MessageConsumer;
1:6efc268: import javax.jms.MessageListener;
1:6efc268: import javax.jms.MessageProducer;
1:6efc268: import javax.jms.Queue;
1:6efc268: import javax.jms.Session;
1:6efc268: import javax.jms.TextMessage;
1:6efc268: 
1:6efc268: import org.apache.activemq.ActiveMQConnection;
1:6efc268: import org.apache.activemq.ActiveMQConnectionFactory;
1:6efc268: import org.apache.activemq.broker.BrokerPlugin;
1:6efc268: import org.apache.activemq.broker.BrokerPluginSupport;
1:6efc268: import org.apache.activemq.broker.BrokerService;
1:6efc268: import org.apache.activemq.broker.ConnectionContext;
1:6efc268: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:6efc268: import org.apache.activemq.broker.region.policy.PolicyMap;
1:6efc268: import org.apache.activemq.command.TransactionId;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:6efc268: import org.junit.After;
1:6efc268: import org.junit.Test;
1:6efc268: 
1:6efc268: public class FailoverConsumerOutstandingCommitTest {
1:6efc268: 
1:883eed0:     private static final Logger LOG = LoggerFactory.getLogger(FailoverConsumerOutstandingCommitTest.class);
1:6efc268:     private static final String QUEUE_NAME = "FailoverWithOutstandingCommit";
1:b836af8:     private static final String MESSAGE_TEXT = "Test message ";
1:883eed0:     private static final String TRANSPORT_URI = "tcp://localhost:0";
1:883eed0:     private String url;
1:6efc268:     final int prefetch = 10;
1:6efc268:     BrokerService broker;
1:6efc268: 
1:6efc268:     @After
1:6efc268:     public void stopBroker() throws Exception {
1:6efc268:         if (broker != null) {
1:6efc268:             broker.stop();
1:6efc268:         }
1:6efc268:     }
1:6efc268: 
1:6efc268:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:6efc268:         broker = createBroker(deleteAllMessagesOnStartup);
1:6efc268:         broker.start();
1:6efc268:     }
1:8d3ca90: 
1:6efc268:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:883eed0:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
1:6efc268:     }
1:8d3ca90: 
1:883eed0:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:6efc268:         broker = new BrokerService();
1:883eed0:         broker.addConnector(bindAddress);
1:6efc268:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1:6efc268:         PolicyMap policyMap = new PolicyMap();
1:6efc268:         PolicyEntry defaultEntry = new PolicyEntry();
1:6efc268: 
1:6efc268:         // optimizedDispatche and sync dispatch ensure that the dispatch happens
1:6efc268:         // before the commit reply that the consumer.clearDispatchList is waiting for.
1:6efc268:         defaultEntry.setOptimizedDispatch(true);
1:6efc268:         policyMap.setDefaultEntry(defaultEntry);
1:6efc268:         broker.setDestinationPolicy(policyMap);
1:6efc268: 
1:883eed0:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:6efc268: 
1:6efc268:         return broker;
1:6efc268:     }
1:6efc268: 
1:8d3ca90:     @Test
1:6efc268:     public void testFailoverConsumerDups() throws Exception {
1:6efc268:         doTestFailoverConsumerDups(true);
1:6efc268:     }
1:6efc268: 
1:7d8ce02:     @SuppressWarnings("unchecked")
1:6efc268:     public void doTestFailoverConsumerDups(final boolean watchTopicAdvisories) throws Exception {
1:6efc268: 
1:6efc268:         broker = createBroker(true);
1:8d3ca90: 
1:6efc268:         broker.setPlugins(new BrokerPlugin[] {
1:6efc268:                 new BrokerPluginSupport() {
1:6efc268:                     @Override
1:6efc268:                     public void commitTransaction(ConnectionContext context,
1:6efc268:                             TransactionId xid, boolean onePhase) throws Exception {
1:6efc268:                         // so commit will hang as if reply is lost
1:6efc268:                         context.setDontSendReponse(true);
1:6efc268:                         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:6efc268:                             public void run() {
1:6efc268:                                 LOG.info("Stopping broker before commit...");
1:6efc268:                                 try {
1:6efc268:                                     broker.stop();
1:6efc268:                                 } catch (Exception e) {
2:6efc268:                                     e.printStackTrace();
1:6efc268:                                 }
1:6efc268:                             }
1:6efc268:                         });
1:6efc268:                     }
1:6efc268:                 }
1:6efc268:         });
1:6efc268:         broker.start();
1:6efc268: 
1:b836af8:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:6efc268:         cf.setWatchTopicAdvisories(watchTopicAdvisories);
1:6efc268:         cf.setDispatchAsync(false);
1:6efc268: 
1:6efc268:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:6efc268:         connection.start();
1:8d3ca90: 
1:6efc268:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b836af8:         final Queue destination = producerSession.createQueue(QUEUE_NAME + "?consumer.prefetchSize=" + prefetch);
1:8d3ca90: 
1:6efc268:         final Session consumerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:6efc268: 
1:6efc268:         final CountDownLatch commitDoneLatch = new CountDownLatch(1);
1:8d3ca90:         final CountDownLatch messagesReceived = new CountDownLatch(2);
1:8d3ca90: 
1:6efc268:         final MessageConsumer testConsumer = consumerSession.createConsumer(destination);
1:6efc268:         testConsumer.setMessageListener(new MessageListener() {
1:8d3ca90: 
1:6efc268:             public void onMessage(Message message) {
1:8d3ca90:                 LOG.info("consume one and commit");
1:6efc268: 
1:6efc268:                 assertNotNull("got message", message);
1:8d3ca90: 
1:6efc268:                 try {
1:6efc268:                     consumerSession.commit();
1:6efc268:                 } catch (JMSException e) {
1:8d3ca90:                     e.printStackTrace();
1:6efc268:                 }
1:6efc268:                 commitDoneLatch.countDown();
1:8d3ca90:                 messagesReceived.countDown();
1:6efc268:                 LOG.info("done commit");
1:6efc268:             }
1:6efc268:         });
1:6efc268: 
1:a2af47b:         // may block if broker shutodwn happens quickly
1:a2af47b:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:a2af47b:             public void run() {
1:a2af47b:                 LOG.info("producer started");
1:a2af47b:                 try {
1:a2af47b:                     produceMessage(producerSession, destination, prefetch * 2);
1:dc0291b:                 } catch (javax.jms.IllegalStateException SessionClosedExpectedOnShutdown) {
1:a2af47b:                 } catch (JMSException e) {
1:a2af47b:                     e.printStackTrace();
1:a2af47b:                     fail("unexpceted ex on producer: " + e);
1:a2af47b:                 }
1:a2af47b:                 LOG.info("producer done");
1:a2af47b:             }
1:a2af47b:         });
1:6efc268: 
1:6efc268:         // will be stopped by the plugin
1:6efc268:         broker.waitUntilStopped();
1:883eed0:         broker = createBroker(false, url);
1:6efc268:         broker.start();
1:6efc268: 
1:8d3ca90:         assertTrue("consumer added through failover", commitDoneLatch.await(20, TimeUnit.SECONDS));
1:8d3ca90:         assertTrue("another message was recieved after failover", messagesReceived.await(20, TimeUnit.SECONDS));
1:8d3ca90: 
1:6efc268:         connection.close();
1:6efc268:     }
1:62daac4: 
1:b836af8:     @Test
1:b836af8:     public void TestFailoverConsumerOutstandingSendTxIncomplete() throws Exception {
1:b836af8:         doTestFailoverConsumerOutstandingSendTx(false);
1:b836af8:     }
1:b836af8: 
1:b836af8:     @Test
1:b836af8:     public void TestFailoverConsumerOutstandingSendTxComplete() throws Exception {
1:b836af8:         doTestFailoverConsumerOutstandingSendTx(true);
1:b836af8:     }
1:b836af8: 
1:7d8ce02:     @SuppressWarnings("unchecked")
1:b836af8:     public void doTestFailoverConsumerOutstandingSendTx(final boolean doActualBrokerCommit) throws Exception {
1:8d3ca90:         final boolean watchTopicAdvisories = true;
1:8d3ca90:         broker = createBroker(true);
1:8d3ca90: 
1:8d3ca90:         broker.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1:8d3ca90:             @Override
1:8d3ca90:             public void commitTransaction(ConnectionContext context,
1:8d3ca90:                     TransactionId xid, boolean onePhase) throws Exception {
1:50dadbb:                 // from the consumer perspective whether the commit completed on the broker or
1:50dadbb:                 // not is irrelevant, the transaction is still in doubt in the absence of a reply
1:b836af8:                 if (doActualBrokerCommit) {
1:b836af8:                     LOG.info("doing actual broker commit...");
1:b836af8:                     super.commitTransaction(context, xid, onePhase);
1:b836af8:                 }
1:8d3ca90:                 // so commit will hang as if reply is lost
1:8d3ca90:                 context.setDontSendReponse(true);
1:8d3ca90:                 Executors.newSingleThreadExecutor().execute(new Runnable() {
1:8d3ca90:                     public void run() {
1:8d3ca90:                         LOG.info("Stopping broker before commit...");
1:8d3ca90:                         try {
1:8d3ca90:                             broker.stop();
1:8d3ca90:                         } catch (Exception e) {
1:8d3ca90:                             e.printStackTrace();
1:8d3ca90:                         }
1:8d3ca90:                     }
1:8d3ca90:                 });
1:8d3ca90:             }
1:8d3ca90:         } });
1:8d3ca90:         broker.start();
1:8d3ca90: 
1:8d3ca90:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:8d3ca90:         cf.setWatchTopicAdvisories(watchTopicAdvisories);
1:8d3ca90:         cf.setDispatchAsync(false);
1:8d3ca90: 
1:8d3ca90:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:8d3ca90:         connection.start();
1:8d3ca90: 
1:8d3ca90:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8d3ca90:         final Queue destination = producerSession.createQueue(QUEUE_NAME
1:b836af8:                 + "?consumer.prefetchSize=" + prefetch);
1:50dadbb: 
1:50dadbb:         final Queue signalDestination = producerSession.createQueue(QUEUE_NAME + ".signal"
1:50dadbb:                 + "?consumer.prefetchSize=" + prefetch);
1:50dadbb: 
1:8d3ca90:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:8d3ca90: 
1:8d3ca90:         final CountDownLatch commitDoneLatch = new CountDownLatch(1);
1:b836af8:         final CountDownLatch messagesReceived = new CountDownLatch(3);
1:b836af8:         final AtomicBoolean gotCommitException = new AtomicBoolean(false);
1:b836af8:         final ArrayList<TextMessage> receivedMessages = new ArrayList<TextMessage>();
1:8d3ca90:         final MessageConsumer testConsumer = consumerSession.createConsumer(destination);
1:8d3ca90:         testConsumer.setMessageListener(new MessageListener() {
1:8d3ca90: 
1:8d3ca90:             public void onMessage(Message message) {
1:b836af8:                 LOG.info("consume one and commit: " + message);
1:8d3ca90:                 assertNotNull("got message", message);
1:b836af8:                 receivedMessages.add((TextMessage) message);
1:8d3ca90:                 try {
1:50dadbb:                     produceMessage(consumerSession, signalDestination, 1);
1:8d3ca90:                     consumerSession.commit();
1:8d3ca90:                 } catch (JMSException e) {
1:b836af8:                     LOG.info("commit exception", e);
1:b836af8:                     gotCommitException.set(true);
1:8d3ca90:                 }
1:8d3ca90:                 commitDoneLatch.countDown();
1:8d3ca90:                 messagesReceived.countDown();
1:8d3ca90:                 LOG.info("done commit");
1:8d3ca90:             }
1:8d3ca90:         });
1:8d3ca90: 
1:a2af47b:         // may block if broker shutdown happens quickly
1:a2af47b:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:a2af47b:             public void run() {
1:a2af47b:                 LOG.info("producer started");
1:a2af47b:                 try {
1:a2af47b:                     produceMessage(producerSession, destination, prefetch * 2);
1:dc0291b:                 } catch (javax.jms.IllegalStateException SessionClosedExpectedOnShutdown) {
1:a2af47b:                 } catch (JMSException e) {
1:a2af47b:                     e.printStackTrace();
1:a2af47b:                     fail("unexpceted ex on producer: " + e);
1:a2af47b:                 }
1:a2af47b:                 LOG.info("producer done");
1:a2af47b:             }
1:a2af47b:         });
1:8d3ca90: 
1:8d3ca90:         // will be stopped by the plugin
1:8d3ca90:         broker.waitUntilStopped();
1:883eed0:         broker = createBroker(false, url);
1:8d3ca90:         broker.start();
1:6efc268: 
1:b836af8:         assertTrue("commit done through failover", commitDoneLatch.await(20, TimeUnit.SECONDS));
1:b836af8:         assertTrue("commit failed", gotCommitException.get());
1:8d3ca90:         assertTrue("another message was received after failover", messagesReceived.await(20, TimeUnit.SECONDS));
1:82c4ab8:         int receivedIndex = 0;
1:82c4ab8:         assertEquals("get message 0 first", MESSAGE_TEXT + "0", receivedMessages.get(receivedIndex++).getText());
1:82c4ab8:         if (!doActualBrokerCommit) {
1:82c4ab8:             // it will be redelivered and not tracked as a duplicate
1:82c4ab8:             assertEquals("get message 0 second", MESSAGE_TEXT + "0", receivedMessages.get(receivedIndex++).getText());
1:82c4ab8:         }
1:b836af8:         assertTrue("another message was received", messagesReceived.await(20, TimeUnit.SECONDS));
1:82c4ab8:         assertEquals("get message 1 eventually", MESSAGE_TEXT + "1", receivedMessages.get(receivedIndex++).getText());
1:50dadbb: 
1:8d3ca90:         connection.close();
1:8d3ca90:     }
1:8d3ca90: 
1:62daac4:     @Test
1:62daac4:     public void testRollbackFailoverConsumerTx() throws Exception {
1:62daac4:         broker = createBroker(true);
1:62daac4:         broker.start();
1:62daac4: 
1:62daac4:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:b836af8:         cf.setConsumerFailoverRedeliveryWaitPeriod(10000);
1:62daac4:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:62daac4:         connection.start();
1:6efc268: 
1:62daac4:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:62daac4:         final Queue destination = producerSession.createQueue(QUEUE_NAME);
1:62daac4: 
1:62daac4:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:62daac4:         final MessageConsumer testConsumer = consumerSession.createConsumer(destination);
1:62daac4:         assertNull("no message yet", testConsumer.receiveNoWait());
1:62daac4: 
1:62daac4:         produceMessage(producerSession, destination, 1);
1:62daac4:         producerSession.close();
1:62daac4: 
1:62daac4:         // consume then rollback after restart
1:62daac4:         Message msg = testConsumer.receive(5000);
1:62daac4:         assertNotNull(msg);
1:62daac4: 
1:39d0717:         // restart with outstanding delivered message
1:62daac4:         broker.stop();
1:62daac4:         broker.waitUntilStopped();
1:883eed0:         broker = createBroker(false, url);
1:62daac4:         broker.start();
1:62daac4: 
1:62daac4:         consumerSession.rollback();
1:62daac4: 
1:62daac4:         // receive again
1:62daac4:         msg = testConsumer.receive(10000);
1:62daac4:         assertNotNull("got message again after rollback", msg);
1:62daac4: 
1:62daac4:         consumerSession.commit();
1:62daac4: 
1:62daac4:         // close before sweep
1:62daac4:         consumerSession.close();
1:62daac4:         msg = receiveMessage(cf, destination);
1:62daac4:         assertNull("should be nothing left after commit", msg);
1:62daac4:         connection.close();
1:62daac4:     }
1:62daac4: 
1:62daac4:     private Message receiveMessage(ActiveMQConnectionFactory cf,
1:62daac4:             Queue destination) throws Exception {
1:62daac4:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:62daac4:         connection.start();
1:62daac4:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:62daac4:         final MessageConsumer consumer = consumerSession.createConsumer(destination);
1:62daac4:         Message msg = consumer.receive(5000);
1:62daac4:         consumerSession.commit();
1:62daac4:         connection.close();
1:62daac4:         return msg;
1:62daac4:     }
1:62daac4: 
1:6efc268:     private void produceMessage(final Session producerSession, Queue destination, long count)
1:6efc268:         throws JMSException {
1:6efc268:         MessageProducer producer = producerSession.createProducer(destination);
1:6efc268:         for (int i=0; i<count; i++) {
1:b836af8:             TextMessage message = producerSession.createTextMessage(MESSAGE_TEXT + i);
1:6efc268:             producer.send(message);
1:6efc268:         }
1:6efc268:         producer.close();
1:6efc268:     }
1:6efc268: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:dc0291b
/////////////////////////////////////////////////////////////////////////
1:                 } catch (javax.jms.IllegalStateException SessionClosedExpectedOnShutdown) {
/////////////////////////////////////////////////////////////////////////
1:                 } catch (javax.jms.IllegalStateException SessionClosedExpectedOnShutdown) {
author:Gary Tully
-------------------------------------------------------------------------------
commit:82c4ab8
/////////////////////////////////////////////////////////////////////////
1:         int receivedIndex = 0;
1:         assertEquals("get message 0 first", MESSAGE_TEXT + "0", receivedMessages.get(receivedIndex++).getText());
1:         if (!doActualBrokerCommit) {
1:             // it will be redelivered and not tracked as a duplicate
1:             assertEquals("get message 0 second", MESSAGE_TEXT + "0", receivedMessages.get(receivedIndex++).getText());
1:         }
1:         assertEquals("get message 1 eventually", MESSAGE_TEXT + "1", receivedMessages.get(receivedIndex++).getText());
commit:50dadbb
/////////////////////////////////////////////////////////////////////////
1:                 // from the consumer perspective whether the commit completed on the broker or
1:                 // not is irrelevant, the transaction is still in doubt in the absence of a reply
/////////////////////////////////////////////////////////////////////////
1:         
1:         final Queue signalDestination = producerSession.createQueue(QUEUE_NAME + ".signal"
1:                 + "?consumer.prefetchSize=" + prefetch);
1: 
/////////////////////////////////////////////////////////////////////////
1:                     produceMessage(consumerSession, signalDestination, 1);
/////////////////////////////////////////////////////////////////////////
1:         
commit:a2af47b
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:         // may block if broker shutodwn happens quickly
1:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:             public void run() {
1:                 LOG.info("producer started");
1:                 try {
1:                     produceMessage(producerSession, destination, prefetch * 2);
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                     fail("unexpceted ex on producer: " + e);
1:                 }
1:                 LOG.info("producer done");
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:         // may block if broker shutdown happens quickly
1:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:             public void run() {
1:                 LOG.info("producer started");
1:                 try {
1:                     produceMessage(producerSession, destination, prefetch * 2);
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                     fail("unexpceted ex on producer: " + e);
1:                 }
1:                 LOG.info("producer done");
1:             }
1:         });
commit:39d0717
/////////////////////////////////////////////////////////////////////////
1:         // restart with outstanding delivered message
commit:b836af8
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import java.util.ArrayList;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     private static final String MESSAGE_TEXT = "Test message ";
/////////////////////////////////////////////////////////////////////////
1:         final Queue destination = producerSession.createQueue(QUEUE_NAME + "?consumer.prefetchSize=" + prefetch);
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void TestFailoverConsumerOutstandingSendTxIncomplete() throws Exception {
1:         doTestFailoverConsumerOutstandingSendTx(false);
1:     }
1: 	
1:     @Test
1:     public void TestFailoverConsumerOutstandingSendTxComplete() throws Exception {
1:         doTestFailoverConsumerOutstandingSendTx(true);
1:     }
1:     
1:     public void doTestFailoverConsumerOutstandingSendTx(final boolean doActualBrokerCommit) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:                 if (doActualBrokerCommit) {
1:                     LOG.info("doing actual broker commit...");
1:                     super.commitTransaction(context, xid, onePhase);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                 + "?consumer.prefetchSize=" + prefetch);
1:         final CountDownLatch messagesReceived = new CountDownLatch(3);
1:         final AtomicBoolean gotCommitException = new AtomicBoolean(false);
1:         final ArrayList<TextMessage> receivedMessages = new ArrayList<TextMessage>();
1:                 LOG.info("consume one and commit: " + message);
1:                 receivedMessages.add((TextMessage) message);
1:                     LOG.info("commit exception", e);
1:                     gotCommitException.set(true);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("commit done through failover", commitDoneLatch.await(20, TimeUnit.SECONDS));
1:         assertTrue("commit failed", gotCommitException.get());
0:         assertEquals("get message 0 first", MESSAGE_TEXT + "0", receivedMessages.get(0).getText());
0:         // it was redelivered
0:         assertEquals("get message 0 second", MESSAGE_TEXT + "0", receivedMessages.get(1).getText());
1:         assertTrue("another message was received", messagesReceived.await(20, TimeUnit.SECONDS));
0:         assertEquals("get message 1 eventually", MESSAGE_TEXT + "1", receivedMessages.get(2).getText());
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:         cf.setConsumerFailoverRedeliveryWaitPeriod(10000);
/////////////////////////////////////////////////////////////////////////
1:             TextMessage message = producerSession.createTextMessage(MESSAGE_TEXT + i);
commit:62daac4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testRollbackFailoverConsumerTx() throws Exception {
1:         broker = createBroker(true);
1:         broker.start();
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");        
1:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1: 
1:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue destination = producerSession.createQueue(QUEUE_NAME);
1: 
1:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         final MessageConsumer testConsumer = consumerSession.createConsumer(destination);
1:         assertNull("no message yet", testConsumer.receiveNoWait());
1:         
1:         produceMessage(producerSession, destination, 1);
1:         producerSession.close();
1: 
1:         // consume then rollback after restart
1:         Message msg = testConsumer.receive(5000);
1:         assertNotNull(msg);
1:         
0:         // restart with out standing delivered message
1:         broker.stop();
1:         broker.waitUntilStopped();
0:         broker = createBroker(false);
1:         broker.start();
1:         
1:         consumerSession.rollback();
1:         
1:         // receive again
1:         msg = testConsumer.receive(10000);
1:         assertNotNull("got message again after rollback", msg);
1: 
1:         consumerSession.commit();
1:         
1:         // close before sweep
1:         consumerSession.close();
1:         msg = receiveMessage(cf, destination);
1:         assertNull("should be nothing left after commit", msg);
1:         connection.close();
1:     }
1: 
1:     private Message receiveMessage(ActiveMQConnectionFactory cf,
1:             Queue destination) throws Exception {
1:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         final MessageConsumer consumer = consumerSession.createConsumer(destination);
1:         Message msg = consumer.receive(5000);
1:         consumerSession.commit();
1:         connection.close();
1:         return msg;
1:     }
1: 
commit:8d3ca90
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch messagesReceived = new CountDownLatch(2);
1: 
/////////////////////////////////////////////////////////////////////////
1:                
1:                 messagesReceived.countDown();
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("another message was recieved after failover", messagesReceived.await(20, TimeUnit.SECONDS));
1:         
1: 
1: 	@Test
0: 	public void testFailoverConsumerOutstandingSendTx() throws Exception {
1:         final boolean watchTopicAdvisories = true;
1:         broker = createBroker(true);
1: 
1:         broker.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1:             @Override
1:             public void commitTransaction(ConnectionContext context,
1:                     TransactionId xid, boolean onePhase) throws Exception {
1:                 // so commit will hang as if reply is lost
1:                 context.setDontSendReponse(true);
1:                 Executors.newSingleThreadExecutor().execute(new Runnable() {
1:                     public void run() {
1:                         LOG.info("Stopping broker before commit...");
1:                         try {
1:                             broker.stop();
1:                         } catch (Exception e) {
1:                             e.printStackTrace();
1:                         }
1:                     }
1:                 });
1:             }
1:         } });
1:         broker.start();
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:         cf.setWatchTopicAdvisories(watchTopicAdvisories);
1:         cf.setDispatchAsync(false);
1: 
1:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1: 
1:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue destination = producerSession.createQueue(QUEUE_NAME
0:                 + "?jms.consumer.prefetch=" + prefetch);
1: 
1:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:         final CountDownLatch commitDoneLatch = new CountDownLatch(1);
0:         final CountDownLatch messagesReceived = new CountDownLatch(2);
1: 
1:         final MessageConsumer testConsumer = consumerSession.createConsumer(destination);
1:         testConsumer.setMessageListener(new MessageListener() {
1: 
1:             public void onMessage(Message message) {
1:                 LOG.info("consume one and commit");
1: 
1:                 assertNotNull("got message", message);
1:                 try {
0:                     produceMessage(consumerSession, destination, 1);
1:                     consumerSession.commit();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:                 commitDoneLatch.countDown();
1:                 messagesReceived.countDown();
1:                 LOG.info("done commit");
1:             }
1:         });
1: 
0:         produceMessage(producerSession, destination, prefetch * 2);
1: 
1:         // will be stopped by the plugin
1:         broker.waitUntilStopped();
0:         broker = createBroker(false);
1:         broker.start();
1: 
1:         assertTrue("consumer added through failover", commitDoneLatch.await(20, TimeUnit.SECONDS));
1: 
1:         assertTrue("another message was received after failover", messagesReceived.await(20, TimeUnit.SECONDS));
1:         connection.close();
1:     }
1: 
commit:6efc268
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
0: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.ActiveMQMessageConsumer;
0: import org.apache.activemq.ActiveMQMessageTransformation;
0: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.command.ConsumerId;
0: import org.apache.activemq.command.SessionId;
1: import org.apache.activemq.command.TransactionId;
0: import org.apache.activemq.util.Wait;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.After;
1: import org.junit.Test;
1: 
1: public class FailoverConsumerOutstandingCommitTest {
1: 	
0:     private static final Log LOG = LogFactory.getLog(FailoverConsumerOutstandingCommitTest.class);
1: 	private static final String QUEUE_NAME = "FailoverWithOutstandingCommit";
0: 	private String url = "tcp://localhost:61616";
1: 	final int prefetch = 10;
1: 	BrokerService broker;
1: 	
0: 	public void startCleanBroker() throws Exception {
0: 	    startBroker(true);
1: 	}
1: 	
1: 	@After
1: 	public void stopBroker() throws Exception {
1: 	    if (broker != null) {
1: 	        broker.stop();
1: 	    }
1: 	}
1: 	
1: 	public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1: 	    broker = createBroker(deleteAllMessagesOnStartup);
1:         broker.start();
1: 	}
1: 
1: 	public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {   
1: 	    broker = new BrokerService();
0: 	    broker.addConnector(url);
1: 	    broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1: 	    PolicyMap policyMap = new PolicyMap();
1: 	    PolicyEntry defaultEntry = new PolicyEntry();
1: 	    
1: 	    // optimizedDispatche and sync dispatch ensure that the dispatch happens
1: 	    // before the commit reply that the consumer.clearDispatchList is waiting for.
1: 	    defaultEntry.setOptimizedDispatch(true);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 	    
1: 	    return broker;
1: 	}
1: 
0: 	@Test
1: 	public void testFailoverConsumerDups() throws Exception {
1: 	    doTestFailoverConsumerDups(true);
1: 	}
1: 	
1: 	public void doTestFailoverConsumerDups(final boolean watchTopicAdvisories) throws Exception {
1: 	    
1:         broker = createBroker(true);
1:             
1:         broker.setPlugins(new BrokerPlugin[] {
1:                 new BrokerPluginSupport() {
1:                     @Override
1:                     public void commitTransaction(ConnectionContext context,
1:                             TransactionId xid, boolean onePhase) throws Exception {
1:                         // so commit will hang as if reply is lost
1:                         context.setDontSendReponse(true);
1:                         Executors.newSingleThreadExecutor().execute(new Runnable() {   
1:                             public void run() {
1:                                 LOG.info("Stopping broker before commit...");
1:                                 try {
1:                                     broker.stop();
1:                                 } catch (Exception e) {
1:                                     e.printStackTrace();
1:                                 }
1:                             }
1:                         });
1:                     }
1:                 }
1:         });
1:         broker.start();
1:         
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:         cf.setWatchTopicAdvisories(watchTopicAdvisories);
1:         cf.setDispatchAsync(false);
1:         
1:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1:         
1:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         final Queue destination = producerSession.createQueue(QUEUE_NAME + "?jms.consumer.prefetch=" + prefetch);
1:         
1:         final Session consumerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1: 
1: 
1:         final CountDownLatch commitDoneLatch = new CountDownLatch(1);
1:         final MessageConsumer testConsumer = consumerSession.createConsumer(destination);
1:         testConsumer.setMessageListener(new MessageListener() {
1: 
1:             public void onMessage(Message message) {
0:                 LOG.info("consume one and commit");
1:                
1:                 assertNotNull("got message", message);
1:                 try {
1:                     consumerSession.commit();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:                 commitDoneLatch.countDown();
1:                 LOG.info("done commit");
1:             }
1:         });
1:         
0:         produceMessage(producerSession, destination, prefetch * 2);
1:      
1:         // will be stopped by the plugin
1:         broker.waitUntilStopped();
0:         broker = createBroker(false);
1:         broker.start();
1: 
0:         assertTrue("consumer added through failover", commitDoneLatch.await(20, TimeUnit.SECONDS));
1:           
1:         connection.close();
1:     }
1:         
1:     private void produceMessage(final Session producerSession, Queue destination, long count)
1:         throws JMSException {
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         for (int i=0; i<count; i++) {
0:             TextMessage message = producerSession.createTextMessage("Test message " + i);
1:             producer.send(message);
1:         }
1:         producer.close();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:7d8ce02
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:883eed0
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverConsumerOutstandingCommitTest.class);
0:     private static final String QUEUE_NAME = "FailoverWithOutstandingCommit";
0:     private static final String MESSAGE_TEXT = "Test message ";
1:     private static final String TRANSPORT_URI = "tcp://localhost:0";
1:     private String url;
0:     final int prefetch = 10;
0:     BrokerService broker;
0: 
0:     @After
0:     public void stopBroker() throws Exception {
0:         if (broker != null) {
0:             broker.stop();
0:         }
0:     }
0: 
0:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
0:         broker = createBroker(deleteAllMessagesOnStartup);
0:         broker.start();
0:     }
0: 
0:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
0:     }
0: 
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
0:         broker = new BrokerService();
1:         broker.addConnector(bindAddress);
0:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
0:         PolicyMap policyMap = new PolicyMap();
0:         PolicyEntry defaultEntry = new PolicyEntry();
0: 
0:         // optimizedDispatche and sync dispatch ensure that the dispatch happens
0:         // before the commit reply that the consumer.clearDispatchList is waiting for.
0:         defaultEntry.setOptimizedDispatch(true);
1:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
0: 
0:         return broker;
0:     }
0: 
0:     @Test
0:     public void testFailoverConsumerDups() throws Exception {
0:         doTestFailoverConsumerDups(true);
0:     }
0: 
0:     public void doTestFailoverConsumerDups(final boolean watchTopicAdvisories) throws Exception {
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:                         Executors.newSingleThreadExecutor().execute(new Runnable() {
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:         broker = createBroker(false, url);
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:         broker = createBroker(false, url);
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:         broker = createBroker(false, url);
0: 
0: 
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0:     private static final Logger LOG = LoggerFactory.getLogger(FailoverConsumerOutstandingCommitTest.class);
============================================================================