1:4229aee: /**
1:4229aee:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4229aee:  * contributor license agreements.  See the NOTICE file distributed with
1:4229aee:  * this work for additional information regarding copyright ownership.
1:4229aee:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4229aee:  * (the "License"); you may not use this file except in compliance with
1:4229aee:  * the License.  You may obtain a copy of the License at
1:4229aee:  *
1:4229aee:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4229aee:  *
1:4229aee:  * Unless required by applicable law or agreed to in writing, software
1:4229aee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4229aee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4229aee:  * See the License for the specific language governing permissions and
1:4229aee:  * limitations under the License.
1:4229aee:  */
1:4229aee: package org.apache.activemq.test.rollback;
1:4229aee: 
1:4229aee: import javax.jms.Connection;
1:4229aee: import javax.jms.ConnectionFactory;
1:4229aee: import javax.jms.JMSException;
1:4229aee: import javax.jms.Message;
1:4229aee: import javax.jms.MessageConsumer;
1:4229aee: import javax.jms.Session;
1:4229aee: import javax.jms.TextMessage;
1:4229aee: 
1:4229aee: import org.apache.activemq.ActiveMQConnectionFactory;
1:4229aee: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:4229aee: import org.springframework.jms.core.MessageCreator;
1:4229aee: 
1:4229aee: public class CloseRollbackRedeliveryQueueTest extends EmbeddedBrokerTestSupport {
1:4229aee: 
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(CloseRollbackRedeliveryQueueTest.class);
1:4229aee: 
1:4229aee:     protected int numberOfMessagesOnQueue = 1;
1:4229aee:     private Connection connection;
1:4229aee:    
1:50a98e3:     public void testVerifySessionCloseRedeliveryWithFailoverTransport() throws Throwable {
1:4229aee:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:4229aee:         MessageConsumer consumer = session.createConsumer(destination);
1:4229aee: 
1:4229aee:         Message message = consumer.receive(1000);
1:4229aee:         String id = message.getJMSMessageID();
1:4229aee:         assertNotNull(message);
1:4229aee:         LOG.info("got message " + message);
1:4229aee:         // close will rollback the current tx
1:4229aee:         session.close();
1:4229aee:         
1:4229aee:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:4229aee:         consumer = session.createConsumer(destination);
1:4229aee: 
1:4229aee:         message = consumer.receive(1000);
1:4229aee:         session.commit();
1:4229aee:         assertNotNull(message);
1:4229aee:         assertEquals("redelivered message", id, message.getJMSMessageID());
1:3804d66:         assertEquals(2, message.getLongProperty("JMSXDeliveryCount"));
1:4229aee:     }
1:50a98e3:     
1:50a98e3:     public void testVerifyConsumerAndSessionCloseRedeliveryWithFailoverTransport() throws Throwable {
1:50a98e3:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:50a98e3:         MessageConsumer consumer = session.createConsumer(destination);
1:50a98e3: 
1:50a98e3:         Message message = consumer.receive(1000);
1:50a98e3:         String id = message.getJMSMessageID();
1:50a98e3:         assertNotNull(message);
1:50a98e3:         LOG.info("got message " + message);
1:50a98e3:         consumer.close();
1:50a98e3:         session.close();
1:50a98e3:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:50a98e3:         consumer = session.createConsumer(destination);
1:50a98e3: 
1:50a98e3:         message = consumer.receive(1000);
1:50a98e3:         session.commit();
1:50a98e3:         assertNotNull(message);
1:50a98e3:         assertEquals("redelivered message", id, message.getJMSMessageID());
1:3804d66:         assertEquals(2, message.getLongProperty("JMSXDeliveryCount"));
1:50a98e3:     }
1:50a98e3: 
1:50a98e3:     public void testVerifyConsumerCloseSessionRollbackRedeliveryWithFailoverTransport() throws Throwable {
1:50a98e3:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:50a98e3:         MessageConsumer consumer = session.createConsumer(destination);
1:50a98e3: 
1:50a98e3:         Message message = consumer.receive(1000);
1:50a98e3:         String id = message.getJMSMessageID();
1:50a98e3:         assertNotNull(message);
1:50a98e3:         LOG.info("got message " + message);
1:50a98e3:         consumer.close();
1:50a98e3:         session.rollback();
1:50a98e3:         
1:50a98e3:         consumer = session.createConsumer(destination);
1:50a98e3:         message = consumer.receive(1000);
1:50a98e3:         session.commit();
1:50a98e3:         assertNotNull(message);
1:50a98e3:         assertEquals("redelivered message", id, message.getJMSMessageID());
1:3804d66:         assertEquals(2, message.getLongProperty("JMSXDeliveryCount"));
1:50a98e3:     }
1:4229aee:     
1:4229aee:     protected void setUp() throws Exception {
1:4229aee:         super.setUp();
1:4229aee: 
1:4229aee:         connection = createConnection();
1:4229aee:         connection.start();
1:4229aee: 
1:4229aee:         // lets fill the queue up
1:4229aee:         for (int i = 0; i < numberOfMessagesOnQueue; i++) {
1:4229aee:             template.send(createMessageCreator(i));
1:4229aee:         }
1:4229aee: 
1:4229aee:     }
1:4229aee: 
1:4229aee:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:4229aee:         // failover: enables message audit - which could get in the way of redelivery 
1:4229aee:         return new ActiveMQConnectionFactory("failover:" + bindAddress);
1:4229aee:     }
1:4229aee:     
1:4229aee:     protected void tearDown() throws Exception {
1:4229aee:         if (connection != null) {
1:4229aee:             connection.close();
1:4229aee:         }
1:4229aee:         super.tearDown();
1:4229aee:     }
1:4229aee: 
1:4229aee:     protected MessageCreator createMessageCreator(final int i) {
1:4229aee:         return new MessageCreator() {
1:4229aee:             public Message createMessage(Session session) throws JMSException {
1:4229aee:                 TextMessage answer = session.createTextMessage("Message: " + i);
1:4229aee:                 answer.setIntProperty("Counter", i);
1:4229aee:                 return answer;
1:4229aee:             }
1:4229aee:         };
1:4229aee:     }
1:4229aee: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(CloseRollbackRedeliveryQueueTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:3804d66
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(2, message.getLongProperty("JMSXDeliveryCount"));
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(2, message.getLongProperty("JMSXDeliveryCount"));
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(2, message.getLongProperty("JMSXDeliveryCount"));
commit:50a98e3
/////////////////////////////////////////////////////////////////////////
1:     public void testVerifySessionCloseRedeliveryWithFailoverTransport() throws Throwable {
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testVerifyConsumerAndSessionCloseRedeliveryWithFailoverTransport() throws Throwable {
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         Message message = consumer.receive(1000);
1:         String id = message.getJMSMessageID();
1:         assertNotNull(message);
1:         LOG.info("got message " + message);
1:         consumer.close();
1:         session.close();
1:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         consumer = session.createConsumer(destination);
1: 
1:         message = consumer.receive(1000);
1:         session.commit();
1:         assertNotNull(message);
1:         assertEquals("redelivered message", id, message.getJMSMessageID());
0:         assertEquals(3, message.getLongProperty("JMSXDeliveryCount"));
1:     }
1: 
1:     public void testVerifyConsumerCloseSessionRollbackRedeliveryWithFailoverTransport() throws Throwable {
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         Message message = consumer.receive(1000);
1:         String id = message.getJMSMessageID();
1:         assertNotNull(message);
1:         LOG.info("got message " + message);
1:         consumer.close();
1:         session.rollback();
1:         
1:         consumer = session.createConsumer(destination);
1:         message = consumer.receive(1000);
1:         session.commit();
1:         assertNotNull(message);
1:         assertEquals("redelivered message", id, message.getJMSMessageID());
0:         assertEquals(3, message.getLongProperty("JMSXDeliveryCount"));
1:     }
1:     
commit:4229aee
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test.rollback;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.jms.core.MessageCreator;
1: 
1: public class CloseRollbackRedeliveryQueueTest extends EmbeddedBrokerTestSupport {
1: 
0:     private static final transient Log LOG = LogFactory.getLog(CloseRollbackRedeliveryQueueTest.class);
1: 
1:     protected int numberOfMessagesOnQueue = 1;
1:     private Connection connection;
1:    
0:     public void testVerifyCloseRedeliveryWithFailoverTransport() throws Throwable {
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         Message message = consumer.receive(1000);
1:         String id = message.getJMSMessageID();
1:         assertNotNull(message);
1:         LOG.info("got message " + message);
1:         // close will rollback the current tx
1:         session.close();
1:         
1:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         consumer = session.createConsumer(destination);
1: 
1:         message = consumer.receive(1000);
1:         session.commit();
1:         assertNotNull(message);
1:         assertEquals("redelivered message", id, message.getJMSMessageID());
0:         assertEquals(3, message.getLongProperty("JMSXDeliveryCount"));
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         connection = createConnection();
1:         connection.start();
1: 
1:         // lets fill the queue up
1:         for (int i = 0; i < numberOfMessagesOnQueue; i++) {
1:             template.send(createMessageCreator(i));
1:         }
1: 
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         // failover: enables message audit - which could get in the way of redelivery 
1:         return new ActiveMQConnectionFactory("failover:" + bindAddress);
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected MessageCreator createMessageCreator(final int i) {
1:         return new MessageCreator() {
1:             public Message createMessage(Session session) throws JMSException {
1:                 TextMessage answer = session.createTextMessage("Message: " + i);
1:                 answer.setIntProperty("Counter", i);
1:                 return answer;
1:             }
1:         };
1:     }
1: }
============================================================================