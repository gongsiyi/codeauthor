1:ad76330: /**
1:ad76330:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ad76330:  * contributor license agreements.  See the NOTICE file distributed with
1:ad76330:  * this work for additional information regarding copyright ownership.
1:ad76330:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ad76330:  * (the "License"); you may not use this file except in compliance with
1:ad76330:  * the License.  You may obtain a copy of the License at
1:ad76330:  *
1:ad76330:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ad76330:  *
1:ad76330:  * Unless required by applicable law or agreed to in writing, software
1:ad76330:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad76330:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad76330:  * See the License for the specific language governing permissions and
1:ad76330:  * limitations under the License.
1:ad76330:  */
1:ad76330: package org.apache.activemq.transport.failover;
1:ad76330: 
1:0a676e5: import static org.junit.Assert.assertNotNull;
1:0a676e5: import static org.junit.Assert.assertTrue;
1:0a676e5: import static org.junit.Assert.fail;
1:0a676e5: 
1:0a676e5: import java.io.IOException;
1:0a676e5: import java.net.URI;
1:0a676e5: 
1:ad76330: import org.apache.activemq.command.ConnectionId;
1:ad76330: import org.apache.activemq.command.ConnectionInfo;
1:ad76330: import org.apache.activemq.command.MessageAck;
1:ad76330: import org.apache.activemq.command.RemoveInfo;
1:ad76330: import org.apache.activemq.command.ShutdownInfo;
1:ad76330: import org.apache.activemq.state.ConnectionStateTracker;
1:ad76330: import org.apache.activemq.transport.Transport;
1:ad76330: import org.apache.activemq.transport.TransportFactory;
1:ad76330: import org.apache.activemq.transport.TransportListener;
1:599abc5: import org.apache.activemq.util.Wait;
1:ad76330: import org.junit.After;
1:ad76330: import org.junit.Before;
1:bdc676b: import org.junit.Ignore;
1:ad76330: import org.junit.Test;
1:ad76330: 
1:ad76330: public class FailoverTransportTest {
1:ad76330: 
1:ad76330:     protected Transport transport;
1:ad76330:     protected FailoverTransport failoverTransport;
1:ad76330: 
1:0a676e5:     @Before
1:0a676e5:     public void setUp() throws Exception {
1:0a676e5:     }
1:ad76330: 
1:0a676e5:     @After
1:0a676e5:     public void tearDown() throws Exception {
1:ad76330:         if (transport != null) {
1:ad76330:             transport.stop();
1:ad76330:         }
1:ad76330:     }
1:ad76330: 
1:599abc5:     @Test(timeout = 30000)
1:bdc676b:     @Ignore("Test fails on windows")
1:599abc5:     public void testReconnectUnlimited() throws Exception {
1:ad76330: 
1:ad76330:         Transport transport = TransportFactory.connect(
1:67b0c18:                 new URI("failover://(tcp://0.0.0.0:61616)?useExponentialBackOff=false&reconnectDelay=0&initialReconnectDelay=0"));
1:ad76330: 
1:599abc5:         transport.setTransportListener(new TransportListener() {
1:91059de: 
1:599abc5:             public void onCommand(Object command) {
1:ad76330:             }
1:91059de: 
1:599abc5:             public void onException(IOException error) {
1:ad76330:             }
5:599abc5: 
1:599abc5:             public void transportInterupted() {
1:ad76330:             }
1:599abc5: 
1:599abc5:             public void transportResumed() {
1:ad76330:             }
1:599abc5:         });
1:599abc5:         transport.start();
1:599abc5: 
1:599abc5:         this.failoverTransport = transport.narrow(FailoverTransport.class);
1:599abc5: 
1:599abc5:         assertTrue("no implicit limit of 1000", Wait.waitFor(new Wait.Condition() {
1:599abc5:             @Override
1:599abc5:             public boolean isSatisified() throws Exception {
1:599abc5:                 return failoverTransport.getConnectFailures() > 1002;
1:ad76330:             }
1:599abc5:         }));
6:599abc5:     }
1:599abc5: 
2:ad76330:     @Test(timeout=30000)
1:0a676e5:     public void testCommandsIgnoredWhenOffline() throws Exception {
1:0a676e5:         this.transport = createTransport();
1:ad76330: 
1:0a676e5:         assertNotNull(failoverTransport);
1:ad76330: 
1:0a676e5:         ConnectionStateTracker tracker = failoverTransport.getStateTracker();
1:0a676e5:         assertNotNull(tracker);
1:ad76330: 
1:0a676e5:         ConnectionId id = new ConnectionId("1");
1:0a676e5:         ConnectionInfo connection = new ConnectionInfo(id);
1:ad76330: 
1:0a676e5:         // Track a connection
1:0a676e5:         tracker.track(connection);
1:0a676e5:         try {
1:0a676e5:             this.transport.oneway(new RemoveInfo(new ConnectionId("1")));
1:0a676e5:         } catch(Exception e) {
1:0a676e5:             fail("Should not have failed to remove this known connection");
1:0a676e5:         }
1:ad76330: 
1:0a676e5:         try {
1:0a676e5:             this.transport.oneway(new RemoveInfo(new ConnectionId("2")));
1:0a676e5:         } catch(Exception e) {
1:0a676e5:             fail("Should not have failed to remove this unknown connection");
1:0a676e5:         }
1:ad76330: 
1:0a676e5:         this.transport.oneway(new MessageAck());
1:0a676e5:         this.transport.oneway(new ShutdownInfo());
1:0a676e5:     }
1:ad76330: 
1:0a676e5:     @Test(timeout=30000)
1:0a676e5:     public void testResponsesSentWhenRequestForIgnoredCommands() throws Exception {
1:0a676e5:         this.transport = createTransport();
1:0a676e5:         assertNotNull(failoverTransport);
1:0a676e5:         MessageAck ack = new MessageAck();
1:0a676e5:         assertNotNull("Should have received a Response", this.transport.request(ack));
1:0a676e5:         RemoveInfo info = new RemoveInfo(new ConnectionId("2"));
1:0a676e5:         assertNotNull("Should have received a Response", this.transport.request(info));
1:0a676e5:     }
1:ad76330: 
1:af9134a:     @Test
1:af9134a:     public void testLocalhostPortSyntax() throws Exception {
1:af9134a:         transport = TransportFactory.connect(
1:af9134a:                 new URI("failover://(tcp://localhost:1111/localhost:2111)"));
1:af9134a: 
1:af9134a:         transport.setTransportListener(new TransportListener() {
1:af9134a: 
1:af9134a:             public void onCommand(Object command) {
1:af9134a:             }
1:af9134a: 
1:af9134a:             public void onException(IOException error) {
1:af9134a:             }
1:af9134a: 
1:af9134a:             public void transportInterupted() {
1:af9134a:             }
1:af9134a: 
1:af9134a:             public void transportResumed() {
1:af9134a:             }
1:af9134a:         });
1:af9134a: 
1:af9134a:         failoverTransport = transport.narrow(FailoverTransport.class);
1:af9134a: 
1:af9134a:         transport.start();
1:af9134a: 
1:af9134a:     }
1:af9134a: 
1:ad76330:     protected Transport createTransport() throws Exception {
1:0a676e5:         Transport transport = TransportFactory.connect(
1:0a676e5:                 new URI("failover://(tcp://localhost:1234?transport.connectTimeout=10000)"));
1:ad76330:         transport.setTransportListener(new TransportListener() {
1:ad76330: 
1:ad76330:             public void onCommand(Object command) {
1:ad76330:             }
1:ad76330: 
1:ad76330:             public void onException(IOException error) {
1:ad76330:             }
1:ad76330: 
1:ad76330:             public void transportInterupted() {
1:ad76330:             }
1:ad76330: 
1:ad76330:             public void transportResumed() {
1:ad76330:             }
1:ad76330:         });
1:ad76330:         transport.start();
1:ad76330: 
1:ad76330:         this.failoverTransport = transport.narrow(FailoverTransport.class);
1:ad76330: 
1:ad76330:         return transport;
1:ad76330:     }
1:ad76330: 
1:ad76330: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:af9134a
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testLocalhostPortSyntax() throws Exception {
1:         transport = TransportFactory.connect(
1:                 new URI("failover://(tcp://localhost:1111/localhost:2111)"));
1: 
1:         transport.setTransportListener(new TransportListener() {
1: 
1:             public void onCommand(Object command) {
1:             }
1: 
1:             public void onException(IOException error) {
1:             }
1: 
1:             public void transportInterupted() {
1:             }
1: 
1:             public void transportResumed() {
1:             }
1:         });
1: 
1:         failoverTransport = transport.narrow(FailoverTransport.class);
1: 
1:         transport.start();
1: 
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:0a676e5
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
1:     }
1:     @After
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testCommandsIgnoredWhenOffline() throws Exception {
1:         this.transport = createTransport();
1:         assertNotNull(failoverTransport);
1:         ConnectionStateTracker tracker = failoverTransport.getStateTracker();
1:         assertNotNull(tracker);
1:         ConnectionId id = new ConnectionId("1");
1:         ConnectionInfo connection = new ConnectionInfo(id);
1:         // Track a connection
1:         tracker.track(connection);
1:         try {
1:             this.transport.oneway(new RemoveInfo(new ConnectionId("1")));
1:         } catch(Exception e) {
1:             fail("Should not have failed to remove this known connection");
1:         }
1:         try {
1:             this.transport.oneway(new RemoveInfo(new ConnectionId("2")));
1:         } catch(Exception e) {
1:             fail("Should not have failed to remove this unknown connection");
1:         }
1:         this.transport.oneway(new MessageAck());
1:         this.transport.oneway(new ShutdownInfo());
1:     }
1:     @Test(timeout=30000)
1:     public void testResponsesSentWhenRequestForIgnoredCommands() throws Exception {
1:         this.transport = createTransport();
1:         assertNotNull(failoverTransport);
1:         MessageAck ack = new MessageAck();
1:         assertNotNull("Should have received a Response", this.transport.request(ack));
1:         RemoveInfo info = new RemoveInfo(new ConnectionId("2"));
1:         assertNotNull("Should have received a Response", this.transport.request(info));
1:     }
1:         Transport transport = TransportFactory.connect(
1:                 new URI("failover://(tcp://localhost:1234?transport.connectTimeout=10000)"));
commit:ad76330
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
0: import java.io.IOException;
0: import java.net.URI;
1: 
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.RemoveInfo;
1: import org.apache.activemq.command.ShutdownInfo;
1: import org.apache.activemq.state.ConnectionStateTracker;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportListener;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import static org.junit.Assert.*;
1: 
1: public class FailoverTransportTest {
1: 
1:     protected Transport transport;
1:     protected FailoverTransport failoverTransport;
0:     private int commandsReceived;
1: 
0: 	@Before
0: 	public void setUp() throws Exception {
1: 	}
1: 
0: 	@After
0: 	public void tearDown() throws Exception {
1:         if (transport != null) {
1:             transport.stop();
1:         }
1:     }
1: 
1: 	@Test(timeout=30000)
0: 	public void testCommandsIgnoredWhenOffline() throws Exception {
0: 		this.transport = createTransport();
1: 
0: 		assertNotNull(failoverTransport);
1: 
0: 		ConnectionStateTracker tracker = failoverTransport.getStateTracker();
0: 		assertNotNull(tracker);
1: 
0: 		ConnectionId id = new ConnectionId("1");
0: 		ConnectionInfo connection = new ConnectionInfo(id);
1: 
0: 		// Track a connection
0: 		tracker.track(connection);
1: 
0: 		try {
0: 			this.transport.oneway(new RemoveInfo(new ConnectionId("1")));
0: 		} catch(Exception e) {
0: 			fail("Should not have failed to remove this known connection");
1: 		}
1: 
0: 		try {
0: 			this.transport.oneway(new RemoveInfo(new ConnectionId("2")));
0: 		} catch(Exception e) {
0: 			fail("Should not have failed to remove this unknown connection");
1: 		}
1: 
0: 		this.transport.oneway(new MessageAck());
0: 		this.transport.oneway(new ShutdownInfo());
1: 	}
1: 
1: 	@Test(timeout=30000)
0: 	public void testResponsesSentWhenRequestForIgnoredCommands() throws Exception {
0: 		this.transport = createTransport();
0: 		assertNotNull(failoverTransport);
0: 		MessageAck ack = new MessageAck();
0: 		assertNotNull("Should have received a Response", this.transport.request(ack));
0: 		RemoveInfo info = new RemoveInfo(new ConnectionId("2"));
0: 		assertNotNull("Should have received a Response", this.transport.request(info));
1: 	}
1: 
1:     protected Transport createTransport() throws Exception {
1:     	Transport transport = TransportFactory.connect(
0:     			new URI("failover://(tcp://doesNotExist:1234)"));
1:         transport.setTransportListener(new TransportListener() {
1: 
1:             public void onCommand(Object command) {
0:             	commandsReceived++;
1:             }
1: 
1:             public void onException(IOException error) {
1:             }
1: 
1:             public void transportInterupted() {
1:             }
1: 
1:             public void transportResumed() {
1:             }
1:         });
1:         transport.start();
1: 
1:         this.failoverTransport = transport.narrow(FailoverTransport.class);
1: 
1:         return transport;
1:     }
1: 
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:67b0c18
/////////////////////////////////////////////////////////////////////////
1:                 new URI("failover://(tcp://0.0.0.0:61616)?useExponentialBackOff=false&reconnectDelay=0&initialReconnectDelay=0"));
commit:bdc676b
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1:     @Ignore("Test fails on windows")
0:                 new URI("failover://(tcp://0.0.0.0:61616)?useExponentialBackOff=false&reconnectDelay=100&initialReconnectDelay=0"));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:91059de
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0: import java.io.IOException;
0: import java.net.URI;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     			new URI("failover://(tcp://localhost:1234)"));
author:Gary Tully
-------------------------------------------------------------------------------
commit:599abc5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
0:         commandsReceived = 0;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30000)
1:     public void testReconnectUnlimited() throws Exception {
1: 
0:         Transport transport = TransportFactory.connect(
0:                 new URI("failover://(tcp://0.0.0.0:61616)?useExponentialBackOff=false&reconnectDelay=0&initialReconnectDelay=0"));
1: 
1:         transport.setTransportListener(new TransportListener() {
1: 
1:             public void onCommand(Object command) {
0:                 commandsReceived++;
1:             }
1: 
1:             public void onException(IOException error) {
1:             }
1: 
1:             public void transportInterupted() {
1:             }
1: 
1:             public void transportResumed() {
1:             }
1:         });
1:         transport.start();
1: 
1:         this.failoverTransport = transport.narrow(FailoverTransport.class);
1: 
1:         assertTrue("no implicit limit of 1000", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return failoverTransport.getConnectFailures() > 1002;
1:             }
1:         }));
1:     }
1: 
0:     @Test(timeout=30000)
============================================================================