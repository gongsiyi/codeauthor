1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
3:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
12:a677c21: 
1:a58b008: import java.net.URI;
1:a58b008: import java.util.ArrayList;
1:a58b008: import java.util.LinkedList;
1:a58b008: import javax.jms.Connection;
1:a677c21: import javax.jms.ExceptionListener;
1:a677c21: import javax.jms.JMSException;
1:a58b008: import javax.jms.JMSSecurityException;
1:a58b008: import javax.jms.Session;
1:a58b008: import org.apache.activemq.ActiveMQConnectionFactory;
1:a58b008: import org.apache.activemq.ConnectionFailedException;
1:a58b008: import org.apache.activemq.broker.BrokerPlugin;
1:a58b008: import org.apache.activemq.broker.BrokerService;
1:a58b008: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:a58b008: import org.apache.activemq.util.Wait;
1:a58b008: import org.junit.After;
1:a58b008: import org.junit.Before;
1:a58b008: import org.junit.Test;
1:a58b008: import org.slf4j.Logger;
1:a58b008: import org.slf4j.LoggerFactory;
1:a58b008: 
1:a677c21: 
1:a58b008: import static org.junit.Assert.assertNotNull;
1:a58b008: import static org.junit.Assert.assertTrue;
1:a58b008: import static org.junit.Assert.fail;
1:a677c21: 
1:a677c21: /**
1:a677c21:  * @author Oliver Belikan
1:230a86c:  */
1:a58b008: public class ExceptionListenerTest implements ExceptionListener {
1:a58b008:     private static final Logger LOG = LoggerFactory.getLogger(ExceptionListenerTest.class);
1:a58b008:     BrokerService brokerService;
1:a58b008:     URI brokerUri;
1:a58b008:     LinkedList<Throwable> exceptionsViaListener = new LinkedList<Throwable>();
1:a677c21: 
1:a58b008:     @Before
1:a58b008:     public void startBroker() throws Exception {
1:a58b008:         brokerService = new BrokerService();
1:a58b008:         brokerService.setAdvisorySupport(false);
1:a58b008:         brokerService.setUseJmx(false);
1:a58b008:         brokerService.setPersistent(false);
1:23052aa:         brokerService.setPlugins(new BrokerPlugin[]{new SimpleAuthenticationPlugin(new ArrayList())});
1:a58b008:         brokerUri = brokerService.addConnector("tcp://0.0.0.0:0").getConnectUri();
1:a58b008:         brokerService.start();
7:a677c21:     }
1:a677c21: 
1:a58b008:     @After
1:a58b008:     public void stopBroker() throws Exception {
1:a58b008:         exceptionsViaListener.clear();
1:a58b008:         if (brokerService != null) {
1:a58b008:             brokerService.stop();
1:a58b008:         }
1:a58b008:     }
1:a58b008: 
1:a58b008:     @Test
1:a58b008:     public void fireOnSecurityException() throws Exception {
1:a58b008:         doFireOnSecurityException(new ActiveMQConnectionFactory(brokerUri));
1:a58b008:     }
1:a58b008: 
1:a58b008:     @Test
1:a58b008:     public void fireOnSecurityExceptionFailover() throws Exception {
1:a58b008:         doFireOnSecurityException(new ActiveMQConnectionFactory("failover://" + brokerUri));
1:a58b008:     }
1:a58b008: 
1:a58b008:     public void doFireOnSecurityException(ActiveMQConnectionFactory factory) throws Exception {
1:a58b008:         factory.setWatchTopicAdvisories(false);
1:a58b008:         Connection connection = factory.createConnection();
1:a58b008:         connection.setExceptionListener(this);
1:a58b008: 
1:a58b008:         try {
1:a58b008:             connection.start();
1:a58b008:             fail("Expect securityException");
1:a58b008:         } catch (JMSSecurityException expected) {
1:a58b008:             expected.printStackTrace();
1:a58b008:             assertTrue("nested security exception: " + expected, expected.getCause() instanceof SecurityException);
1:a58b008:         }
1:a58b008: 
1:a58b008:         Wait.waitFor(new Wait.Condition() {
1:a58b008:             @Override
1:a58b008:             public boolean isSatisified() throws Exception {
1:a58b008:                 return !exceptionsViaListener.isEmpty();
1:a58b008:             }
1:a58b008:         });
1:a58b008:         Throwable expected = exceptionsViaListener.getFirst();
1:a58b008:         assertNotNull(expected);
1:a58b008:         assertNotNull(expected.getCause());
1:a58b008: 
1:a58b008:         assertTrue("expected exception: " + expected, expected.getCause().getCause() instanceof SecurityException);
1:a58b008: 
1:a58b008:         try {
1:a58b008:             connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a58b008:             fail("Expect error b/c connection is auto closed on security exception above");
1:a58b008:         } catch (ConnectionFailedException e) {
1:a58b008:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void onException(JMSException e) {
1:a58b008:         LOG.info("onException:" + e, new Throwable("FromHere"));
1:a58b008:         exceptionsViaListener.add(e);
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:gtully
-------------------------------------------------------------------------------
commit:23052aa
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setPlugins(new BrokerPlugin[]{new SimpleAuthenticationPlugin(new ArrayList())});
commit:a58b008
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.LinkedList;
1: import javax.jms.Connection;
1: import javax.jms.JMSSecurityException;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ConnectionFailedException;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: public class ExceptionListenerTest implements ExceptionListener {
1:     private static final Logger LOG = LoggerFactory.getLogger(ExceptionListenerTest.class);
1:     BrokerService brokerService;
1:     URI brokerUri;
1:     LinkedList<Throwable> exceptionsViaListener = new LinkedList<Throwable>();
1:     @Before
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setPersistent(false);
0:         brokerService.setPlugins(new BrokerPlugin[]{new SimpleAuthenticationPlugin(new ArrayList<>())});
1:         brokerUri = brokerService.addConnector("tcp://0.0.0.0:0").getConnectUri();
1:         brokerService.start();
1:     @After
1:     public void stopBroker() throws Exception {
1:         exceptionsViaListener.clear();
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void fireOnSecurityException() throws Exception {
1:         doFireOnSecurityException(new ActiveMQConnectionFactory(brokerUri));
1:     }
1: 
1:     @Test
1:     public void fireOnSecurityExceptionFailover() throws Exception {
1:         doFireOnSecurityException(new ActiveMQConnectionFactory("failover://" + brokerUri));
1:     }
1: 
1:     public void doFireOnSecurityException(ActiveMQConnectionFactory factory) throws Exception {
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.setExceptionListener(this);
1: 
1:         try {
1:             connection.start();
1:             fail("Expect securityException");
1:         } catch (JMSSecurityException expected) {
1:             expected.printStackTrace();
1:             assertTrue("nested security exception: " + expected, expected.getCause() instanceof SecurityException);
1:         }
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !exceptionsViaListener.isEmpty();
1:             }
1:         });
1:         Throwable expected = exceptionsViaListener.getFirst();
1:         assertNotNull(expected);
1:         assertNotNull(expected.getCause());
1: 
1:         assertTrue("expected exception: " + expected, expected.getCause().getCause() instanceof SecurityException);
1: 
1:         try {
1:             connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             fail("Expect error b/c connection is auto closed on security exception above");
1:         } catch (ConnectionFailedException e) {
1:         }
1:         LOG.info("onException:" + e, new Throwable("FromHere"));
1:         exceptionsViaListener.add(e);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     boolean isException;
0:         /*
0:          * TODO not sure yet if this is a valid test
0:          * System.setProperty("activemq.persistenceAdapter",
0:          * "org.apache.activemq.store.vm.VMPersistenceAdapter"); //
0:          * configuration of container and all protocolls BrokerContainerImpl
0:          * container = new BrokerContainerImpl("DefaultBroker");
0:          * BrokerConnectorImpl connector = new BrokerConnectorImpl(container,
0:          * "vm://localhost", new DefaultWireFormat()); container.start();
0:          * ActiveMQConnectionFactory factory = new
0:          * ActiveMQConnectionFactory("vm://localhost"); factory.start();
0:          * Connection connection = factory.createConnection();
0:          * connection.setExceptionListener(this); connection.start(); Session
0:          * session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:          * Destination destination = session.createTopic(getClass().getName());
0:          * MessageProducer producer = session.createProducer(destination); try {
0:          * Thread.currentThread().sleep(1000); } catch (Exception e) { }
0:          * container.stop(); // now lets try send try {
0:          * producer.send(session.createTextMessage("This will never get
0:          * anywhere")); } catch (JMSException e) { log.info("Caught: " + e); }
0:          * try { Thread.currentThread().sleep(1000); } catch (Exception e) { }
0:          * assertTrue("Should have received an exception", isException);
1:          */
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
1:  * @author Oliver Belikan
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class ExceptionListenerTest extends TestCase implements ExceptionListener {
0:     boolean isException = false;
1: 
1: 
0:     public ExceptionListenerTest(String arg) {
0:         super(arg);
1:     }
1: 
1: 
0:     public void testOnException() throws Exception {
0:         /* TODO not sure yet if this is a valid test
1: 
0:         System.setProperty("activemq.persistenceAdapter",
0:                 "org.apache.activemq.store.vm.VMPersistenceAdapter");
0:         // configuration of container and all protocolls
0:         BrokerContainerImpl container = new
0:                 BrokerContainerImpl("DefaultBroker");
0:         BrokerConnectorImpl connector = new
0:                 BrokerConnectorImpl(container,
0:                         "vm://localhost", new DefaultWireFormat());
0:         container.start();
1: 
0:         ActiveMQConnectionFactory factory = new
0:                 ActiveMQConnectionFactory("vm://localhost");
0:         factory.start();
1: 
0:         Connection connection = factory.createConnection();
0:         connection.setExceptionListener(this);
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Destination destination = session.createTopic(getClass().getName());
0:         MessageProducer producer = session.createProducer(destination);
1: 
0:         try {
0:             Thread.currentThread().sleep(1000);
1:         }
0:         catch (Exception e) {
1:         }
1: 
0:         container.stop();
1: 
0:         // now lets try send
0:         try {
0:             producer.send(session.createTextMessage("This will never get anywhere"));
1:         }
0:         catch (JMSException e) {
0:             log.info("Caught: " + e);
1:         }
1: 
0:         try {
0:             Thread.currentThread().sleep(1000);
1:         }
0:         catch (Exception e) {
1:         }
1: 
0:         assertTrue("Should have received an exception", isException);
1:         */
1:     }
1: 
1: 
1:     public void onException(JMSException e) {
0:         isException = true;
1:     }
1: }
============================================================================