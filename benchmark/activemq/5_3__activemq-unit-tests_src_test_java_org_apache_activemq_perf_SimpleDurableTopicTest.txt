1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.perf;
1:7dbbe0c: 
1:b2fca26: import org.apache.activemq.ActiveMQConnectionFactory;
1:b2fca26: import org.apache.activemq.broker.BrokerService;
1:b2fca26: import org.apache.activemq.leveldb.LevelDBStoreFactory;
1:b2fca26: 
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:230a86c: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:230a86c: public class SimpleDurableTopicTest extends SimpleTopicTest {
1:c75001c:     protected long initialConsumerDelay = 0;
1:c75001c:     @Override
1:7f0583d:     protected void setUp() throws Exception {
1:1595378:         numberOfDestinations=1;
1:dc6dc7e:         numberOfConsumers = 1;
1:1595378:         numberofProducers = Integer.parseInt(System.getProperty("SimpleDurableTopicTest.numberofProducers", "20"), 20);
1:c92fe99:         sampleCount= Integer.parseInt(System.getProperty("SimpleDurableTopicTest.sampleCount", "1000"), 10);
1:7f0583d:         playloadSize = 1024;
1:7f0583d:         super.setUp();
1:6f69f19:     }
1:b2fca26: 
1:b2fca26: 
1:c75001c:     @Override
1:6f69f19:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:b2fca26:         LevelDBStoreFactory persistenceFactory = new LevelDBStoreFactory();
1:6f69f19:         answer.setPersistenceFactory(persistenceFactory);
1:0706a4c:         //answer.setDeleteAllMessagesOnStartup(true);
1:6f69f19:         answer.addConnector(uri);
1:6f69f19:         answer.setUseShutdownHook(false);
1:86cbdfd:     }
1:7dbbe0c:     
1:c75001c:     @Override
1:230a86c:     protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte payload[]) throws JMSException {
1:230a86c:         PerfProducer pp = new PerfProducer(fac, dest, payload);
1:d29ca2a:         pp.setDeliveryMode(DeliveryMode.PERSISTENT);
1:d29ca2a:         return pp;
1:7dbbe0c:     }
1:d29ca2a: 
1:c75001c:     @Override
1:230a86c:     protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
1:f12c100:         PerfConsumer result = new PerfConsumer(fac, dest, "subs:" + number);
1:c75001c:         result.setInitialDelay(this.initialConsumerDelay);
1:6f69f19:         return result;
1:d29ca2a:     }
1:230a86c:     
1:c75001c:     @Override
1:6f69f19:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:6f69f19:         ActiveMQConnectionFactory result = super.createConnectionFactory(uri);
1:0706a4c:         //result.setSendAcksAsync(false);
1:f12c100:         return result;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.leveldb.LevelDBStoreFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         LevelDBStoreFactory persistenceFactory = new LevelDBStoreFactory();
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: public class SimpleDurableTopicTest extends SimpleTopicTest {
1:     protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte payload[]) throws JMSException {
1:         PerfProducer pp = new PerfProducer(fac, dest, payload);
1:     protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
0:         return new PerfConsumer(fac, dest, "subs:" + number);
1: 
commit:e0fdce4
/////////////////////////////////////////////////////////////////////////
0:     protected PerfProducer createProducer(ConnectionFactory fac,Destination dest,int number, byte payload[]) throws JMSException{
0:         PerfProducer pp=new PerfProducer(fac,dest, payload);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7dbbe0c
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         ActiveMQConnectionFactory cf = super.createConnectionFactory();
0:         cf.setClientID(getName());
0:         return cf;
1:     }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class SimpleDurableTopicTest extends SimpleTopicTest{
0:     protected PerfProducer createProducer(ConnectionFactory fac,Destination dest,int number) throws JMSException{
0:         PerfProducer pp=new PerfProducer(fac,dest);
1:         pp.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         return pp;
1:     }
1: 
0:     protected PerfConsumer createConsumer(ConnectionFactory fac,Destination dest,int number) throws JMSException{
0:         return new PerfConsumer(fac,dest,"subs:"+number);
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:1595378
/////////////////////////////////////////////////////////////////////////
1:         numberOfDestinations=1;
1:         numberofProducers = Integer.parseInt(System.getProperty("SimpleDurableTopicTest.numberofProducers", "20"), 20);
commit:c92fe99
/////////////////////////////////////////////////////////////////////////
0:         numberofProducers = Integer.parseInt(System.getProperty("SimpleDurableTopicTest.numberofProducers", "1"), 10);
1:         sampleCount= Integer.parseInt(System.getProperty("SimpleDurableTopicTest.sampleCount", "1000"), 10);
author:Robert Davies
-------------------------------------------------------------------------------
commit:8e61f51
/////////////////////////////////////////////////////////////////////////
0:         numberOfDestinations=10;
0:         numberofProducers = Integer.parseInt(System.getProperty("SimpleDurableTopicTest.numberofProducers", "1"));
commit:dc6dc7e
/////////////////////////////////////////////////////////////////////////
1:         numberOfConsumers = 1;
0:         numberofProducers = Integer.parseInt(System.getProperty("SimpleDurableTopicTest.numberofProducers", "20"), 20);
commit:c75001c
/////////////////////////////////////////////////////////////////////////
1:     protected long initialConsumerDelay = 0;
1:     @Override
0:         numberOfDestinations=1;
0:         numberOfConsumers = 2;
0:         numberofProducers = 1;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:         result.setInitialDelay(this.initialConsumerDelay);
1:     @Override
commit:0706a4c
/////////////////////////////////////////////////////////////////////////
0:         numberOfDestinations=10;
0:         numberOfConsumers = 10;
/////////////////////////////////////////////////////////////////////////
1:         //answer.setDeleteAllMessagesOnStartup(true);
/////////////////////////////////////////////////////////////////////////
1:         //result.setSendAcksAsync(false);
commit:9ce91fa
/////////////////////////////////////////////////////////////////////////
0:         numberOfConsumers = 2;
0:         numberofProducers = 2;
/////////////////////////////////////////////////////////////////////////
0:         persistenceFactory.setPersistentIndex(true);
0:         persistenceFactory.setCleanupInterval(10000);
/////////////////////////////////////////////////////////////////////////
0:         result.setInitialDelay(0);
commit:6f69f19
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapterFactory;
/////////////////////////////////////////////////////////////////////////
0:         numberOfConsumers = 4;
0:     
1:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
0:         AMQPersistenceAdapterFactory persistenceFactory = new AMQPersistenceAdapterFactory();
0:         persistenceFactory.setMaxFileLength(1024*16);
1:         answer.setPersistenceFactory(persistenceFactory);
0:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.addConnector(uri);
1:         answer.setUseShutdownHook(false);
1:     }
0:     
/////////////////////////////////////////////////////////////////////////
0:         result.setInitialDelay(2000);
1:         return result;
0:     }
0:     
1:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:         ActiveMQConnectionFactory result = super.createConnectionFactory(uri);
0:         result.setSendAcksAsync(false);
commit:f12c100
/////////////////////////////////////////////////////////////////////////
0:         numberOfConsumers = 1;
/////////////////////////////////////////////////////////////////////////
1:         PerfConsumer result = new PerfConsumer(fac, dest, "subs:" + number);
0:         result.setInitialDelay(20000);
1:         return result;
commit:cbb290c
/////////////////////////////////////////////////////////////////////////
0:         numberOfDestinations=1;
0:         numberOfConsumers = 4;
commit:7f0583d
/////////////////////////////////////////////////////////////////////////
0:     
1:     protected void setUp() throws Exception {
0:         numberOfDestinations=6;
0:         numberOfConsumers = 1;
0:         numberofProducers = 1;
0:         samepleCount=1000;
1:         playloadSize = 1024;
1:         super.setUp();
0:     }
commit:a38a906
/////////////////////////////////////////////////////////////////////////
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:c4aae53
/////////////////////////////////////////////////////////////////////////
0:         sampleCount=1000;
============================================================================