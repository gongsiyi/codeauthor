1:8d42343: /**
1:8d42343:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8d42343:  * contributor license agreements.  See the NOTICE file distributed with
1:8d42343:  * this work for additional information regarding copyright ownership.
1:8d42343:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8d42343:  * (the "License"); you may not use this file except in compliance with
1:8d42343:  * the License.  You may obtain a copy of the License at
1:8d42343:  *
1:8d42343:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8d42343:  *
1:8d42343:  * Unless required by applicable law or agreed to in writing, software
1:8d42343:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d42343:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d42343:  * See the License for the specific language governing permissions and
1:8d42343:  * limitations under the License.
1:8d42343:  */
1:8d42343: package org.apache.activemq.transport.stomp;
2:8d42343: 
1:8d42343: import static org.junit.Assert.assertEquals;
1:8d42343: import static org.junit.Assert.assertNotNull;
1:8d42343: import static org.junit.Assert.assertTrue;
1:8d42343: 
1:8d42343: import java.io.IOException;
1:8d42343: import java.net.Socket;
1:8d42343: import java.util.Arrays;
1:8d42343: 
1:8d42343: import javax.net.SocketFactory;
1:8d42343: import javax.net.ssl.SSLSocketFactory;
1:8d42343: 
1:8d42343: import org.junit.Test;
1:8d42343: 
1:8d42343: public class StompMaxDataSizeTest extends StompTestSupport {
1:8d42343: 
1:8d42343:     private static final int TEST_MAX_DATA_SIZE = 64 * 1024;
1:8d42343: 
1:8d42343:     private StompConnection connection;
1:8d42343: 
2:8d42343:     @Override
1:8d42343:     public void tearDown() throws Exception {
1:8d42343:         if (connection != null) {
1:8d42343:             try {
1:8d42343:                 connection.close();
1:8d42343:             } catch (Throwable ex) {}
2:8d42343:         }
1:8d42343:         super.tearDown();
1:8d42343:     }
1:8d42343: 
1:8d42343:     @Override
1:540a66b:     protected boolean isUseSslConnector() {
1:540a66b:         return true;
1:540a66b:     }
1:8d42343: 
1:540a66b:     @Override
1:540a66b:     protected boolean isUseNioConnector() {
1:540a66b:         return true;
1:540a66b:     }
1:540a66b: 
1:540a66b:     @Override
1:540a66b:     protected boolean isUseNioPlusSslConnector() {
1:540a66b:         return true;
1:540a66b:     }
1:540a66b: 
1:540a66b:     @Override
1:540a66b:     protected String getAdditionalConfig() {
1:540a66b:         return "?transport.maxDataLength=" + TEST_MAX_DATA_SIZE;
1:8d42343:     }
1:8d42343: 
1:8d42343:     @Test(timeout = 60000)
1:8d42343:     public void testOversizedMessageOnPlainSocket() throws Exception {
1:8d42343:         doTestOversizedMessage(port, false);
1:8d42343:     }
1:8d42343: 
1:8d42343:     @Test(timeout = 60000)
1:8d42343:     public void testOversizedMessageOnNioSocket() throws Exception {
1:8d42343:         doTestOversizedMessage(nioPort, false);
1:8d42343:     }
1:8d42343: 
1:8d42343:     @Test//(timeout = 60000)
1:8d42343:     public void testOversizedMessageOnSslSocket() throws Exception {
1:8d42343:         doTestOversizedMessage(sslPort, true);
1:8d42343:     }
1:8d42343: 
1:8d42343:     @Test(timeout = 60000)
1:8d42343:     public void testOversizedMessageOnNioSslSocket() throws Exception {
1:8d42343:         doTestOversizedMessage(nioSslPort, true);
1:8d42343:     }
1:8d42343: 
1:8d42343:     protected void doTestOversizedMessage(int port, boolean useSsl) throws Exception {
1:8d42343:         stompConnect(port, useSsl);
1:8d42343: 
1:8d42343:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:8d42343:         stompConnection.sendFrame(frame);
1:8d42343: 
1:8d42343:         frame = stompConnection.receiveFrame();
1:8d42343:         assertTrue(frame.startsWith("CONNECTED"));
1:8d42343: 
1:8d42343:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:8d42343:         stompConnection.sendFrame(frame);
1:8d42343: 
1:8d42343:         int size = 100;
1:8d42343:         char[] bigBodyArray = new char[size];
1:8d42343:         Arrays.fill(bigBodyArray, 'a');
1:8d42343:         String bigBody = new String(bigBodyArray);
1:8d42343: 
1:8d42343:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1:8d42343: 
1:8d42343:         stompConnection.sendFrame(frame);
1:8d42343: 
1:8d42343:         StompFrame received = stompConnection.receive();
1:8d42343:         assertNotNull(received);
1:8d42343:         assertEquals("MESSAGE", received.getAction());
1:8d42343:         assertEquals(bigBody, received.getBody());
1:8d42343: 
1:8d42343:         size = TEST_MAX_DATA_SIZE + 100;
1:8d42343:         bigBodyArray = new char[size];
1:8d42343:         Arrays.fill(bigBodyArray, 'a');
1:8d42343:         bigBody = new String(bigBodyArray);
1:8d42343: 
1:8d42343:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1:8d42343: 
1:8d42343:         stompConnection.sendFrame(frame);
1:8d42343: 
1:8d42343:         received = stompConnection.receive(5000);
1:8d42343:         assertNotNull(received);
1:8d42343:         assertEquals("ERROR", received.getAction());
1:8d42343:     }
1:8d42343: 
1:8d42343:     protected StompConnection stompConnect(int port, boolean ssl) throws Exception {
1:8d42343:         if (stompConnection == null) {
1:8d42343:             stompConnection = new StompConnection();
1:8d42343:         }
1:8d42343: 
1:8d42343:         Socket socket = null;
1:8d42343:         if (ssl) {
1:8d42343:             socket = createSslSocket(port);
1:8d42343:         } else {
1:8d42343:             socket = createSocket(port);
1:8d42343:         }
1:8d42343: 
1:8d42343:         stompConnection.open(socket);
1:8d42343: 
1:8d42343:         return stompConnection;
1:8d42343:     }
1:8d42343: 
1:8d42343:     protected Socket createSocket(int port) throws IOException {
1:8d42343:         return new Socket("127.0.0.1", port);
1:8d42343:     }
1:8d42343: 
1:8d42343:     protected Socket createSslSocket(int port) throws IOException {
1:8d42343:         SocketFactory factory = SSLSocketFactory.getDefault();
1:8d42343:         return factory.createSocket("127.0.0.1", port);
1:8d42343:     }
1:8d42343: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isUseSslConnector() {
1:         return true;
1:     }
1:     @Override
1:     protected boolean isUseNioConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected String getAdditionalConfig() {
1:         return "?transport.maxDataLength=" + TEST_MAX_DATA_SIZE;
commit:8d42343
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.util.Arrays;
1: 
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
1: 
0: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.Test;
1: 
1: public class StompMaxDataSizeTest extends StompTestSupport {
1: 
1:     private static final int TEST_MAX_DATA_SIZE = 64 * 1024;
1: 
1:     private StompConnection connection;
1: 
1:     @Override
0:     public void setUp() throws Exception {
0:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/client.keystore");
0:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
0:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
0:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/server.keystore");
0:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
0:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
0:         super.setUp();
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Throwable ex) {}
1:         }
1:         super.tearDown();
1:     }
1: 
1:     @Override
0:     protected void addStompConnector() throws Exception {
0:         TransportConnector connector = null;
1: 
0:         connector = brokerService.addConnector("stomp+ssl://0.0.0.0:"+ sslPort +
0:             "?transport.maxDataLength=" + TEST_MAX_DATA_SIZE);
0:         sslPort = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp://0.0.0.0:" + port +
0:             "?transport.maxDataLength=" + TEST_MAX_DATA_SIZE);
0:         port = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp+nio://0.0.0.0:" + nioPort +
0:             "?transport.maxDataLength=" + TEST_MAX_DATA_SIZE);
0:         nioPort = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp+nio+ssl://0.0.0.0:" + nioSslPort +
0:             "?transport.maxDataLength=" + TEST_MAX_DATA_SIZE);
0:         nioSslPort = connector.getConnectUri().getPort();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedMessageOnPlainSocket() throws Exception {
1:         doTestOversizedMessage(port, false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedMessageOnNioSocket() throws Exception {
1:         doTestOversizedMessage(nioPort, false);
1:     }
1: 
1:     @Test//(timeout = 60000)
1:     public void testOversizedMessageOnSslSocket() throws Exception {
1:         doTestOversizedMessage(sslPort, true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedMessageOnNioSslSocket() throws Exception {
1:         doTestOversizedMessage(nioSslPort, true);
1:     }
1: 
1:     protected void doTestOversizedMessage(int port, boolean useSsl) throws Exception {
1:         stompConnect(port, useSsl);
1: 
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         int size = 100;
1:         char[] bigBodyArray = new char[size];
1:         Arrays.fill(bigBodyArray, 'a');
1:         String bigBody = new String(bigBodyArray);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertNotNull(received);
1:         assertEquals("MESSAGE", received.getAction());
1:         assertEquals(bigBody, received.getBody());
1: 
1:         size = TEST_MAX_DATA_SIZE + 100;
1:         bigBodyArray = new char[size];
1:         Arrays.fill(bigBodyArray, 'a');
1:         bigBody = new String(bigBodyArray);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         received = stompConnection.receive(5000);
1:         assertNotNull(received);
1:         assertEquals("ERROR", received.getAction());
1:     }
1: 
1:     protected StompConnection stompConnect(int port, boolean ssl) throws Exception {
1:         if (stompConnection == null) {
1:             stompConnection = new StompConnection();
1:         }
1: 
1:         Socket socket = null;
1:         if (ssl) {
1:             socket = createSslSocket(port);
1:         } else {
1:             socket = createSocket(port);
1:         }
1: 
1:         stompConnection.open(socket);
1: 
1:         return stompConnection;
1:     }
1: 
1:     protected Socket createSocket(int port) throws IOException {
1:         return new Socket("127.0.0.1", port);
1:     }
1: 
1:     protected Socket createSslSocket(int port) throws IOException {
1:         SocketFactory factory = SSLSocketFactory.getDefault();
1:         return factory.createSocket("127.0.0.1", port);
1:     }
1: }
============================================================================