1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network;
1:f812e34: 
1:9ca56a0: import java.io.IOException;
1:ec6e6a5: import java.util.concurrent.atomic.AtomicLong;
1:ec6e6a5: 
1:ae73f86: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.command.BrokerId;
1:d29ca2a: import org.apache.activemq.command.BrokerInfo;
1:d29ca2a: import org.apache.activemq.command.Command;
1:d29ca2a: import org.apache.activemq.command.ConnectionId;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:84fd773: import org.apache.activemq.command.ExceptionResponse;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.MessageDispatch;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:84fd773: import org.apache.activemq.command.Response;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: import org.apache.activemq.command.ShutdownInfo;
1:068c646: import org.apache.activemq.transport.DefaultTransportListener;
1:84fd773: import org.apache.activemq.transport.FutureResponse;
1:84fd773: import org.apache.activemq.transport.ResponseCallback;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.util.IdGenerator;
1:d29ca2a: import org.apache.activemq.util.ServiceStopper;
1:d29ca2a: import org.apache.activemq.util.ServiceSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ec6e6a5: 
1:d29ca2a: /**
1:d29ca2a:  * Forwards all messages from the local broker to the remote broker.
1:d29ca2a:  *
1:68d245f:  * @org.apache.xbean.XBean
1:b0c2a40:  *
1:d29ca2a:  */
1:f812e34: public class ForwardingBridge implements Service {
1:f812e34: 
1:ecf89a6:     private static final IdGenerator ID_GENERATOR = new IdGenerator();
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ForwardingBridge.class);
1:f812e34: 
1:ecf89a6:     final AtomicLong enqueueCounter = new AtomicLong();
1:ecf89a6:     final AtomicLong dequeueCounter = new AtomicLong();
1:d29ca2a:     ConnectionInfo connectionInfo;
1:d29ca2a:     SessionInfo sessionInfo;
1:d29ca2a:     ProducerInfo producerInfo;
1:d29ca2a:     ConsumerInfo queueConsumerInfo;
1:d29ca2a:     ConsumerInfo topicConsumerInfo;
1:ecf89a6:     BrokerId localBrokerId;
1:ecf89a6:     BrokerId remoteBrokerId;
1:ecf89a6:     BrokerInfo localBrokerInfo;
1:ecf89a6:     BrokerInfo remoteBrokerInfo;
1:ec6e6a5: 
1:ecf89a6:     private final Transport localBroker;
1:ecf89a6:     private final Transport remoteBroker;
1:d29ca2a:     private String clientId;
1:f812e34:     private int prefetchSize = 1000;
1:d29ca2a:     private boolean dispatchAsync;
1:d29ca2a:     private String destinationFilter = ">";
1:ec6e6a5:     private NetworkBridgeListener bridgeFailedListener;
1:41c9366:     private boolean useCompression = false;
1:f812e34: 
1:d29ca2a:     public ForwardingBridge(Transport localBroker, Transport remoteBroker) {
1:d29ca2a:         this.localBroker = localBroker;
1:d29ca2a:         this.remoteBroker = remoteBroker;
6:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void start() throws Exception {
1:e1bbde7:         LOG.info("Starting a network connection between {} and {} has been established.", localBroker, remoteBroker);
1:9ca56a0: 
1:f812e34:         localBroker.setTransportListener(new DefaultTransportListener() {
1:9ca56a0:             public void onCommand(Object o) {
1:f812e34:                 Command command = (Command)o;
1:d29ca2a:                 serviceLocalCommand(command);
1:ec6e6a5:             }
1:f812e34: 
1:d29ca2a:             public void onException(IOException error) {
1:d29ca2a:                 serviceLocalException(error);
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34: 
1:f812e34:         remoteBroker.setTransportListener(new DefaultTransportListener() {
1:9ca56a0:             public void onCommand(Object o) {
1:f812e34:                 Command command = (Command)o;
1:d29ca2a:                 serviceRemoteCommand(command);
1:d29ca2a:             }
1:f812e34: 
1:d29ca2a:             public void onException(IOException error) {
1:d29ca2a:                 serviceRemoteException(error);
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34: 
1:d29ca2a:         localBroker.start();
1:d29ca2a:         remoteBroker.start();
1:d29ca2a:     }
27:d29ca2a: 
1:d29ca2a:     protected void triggerStartBridge() throws IOException {
1:d29ca2a:         Thread thead = new Thread() {
1:d29ca2a:             public void run() {
1:d29ca2a:                 try {
1:d29ca2a:                     startBridge();
1:f812e34:                 } catch (IOException e) {
1:e1bbde7:                     LOG.error("Failed to start network bridge: ", e);
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:         thead.start();
1:d29ca2a:     }
1:ec6e6a5: 
1:d29ca2a:     /**
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:a3e3821:     final void startBridge() throws IOException {
1:d29ca2a:         connectionInfo = new ConnectionInfo();
1:ecf89a6:         connectionInfo.setConnectionId(new ConnectionId(ID_GENERATOR.generateId()));
1:d29ca2a:         connectionInfo.setClientId(clientId);
1:d29ca2a:         localBroker.oneway(connectionInfo);
1:d29ca2a:         remoteBroker.oneway(connectionInfo);
1:ec6e6a5: 
1:f812e34:         sessionInfo = new SessionInfo(connectionInfo, 1);
1:d29ca2a:         localBroker.oneway(sessionInfo);
1:d29ca2a:         remoteBroker.oneway(sessionInfo);
1:f812e34: 
1:d29ca2a:         queueConsumerInfo = new ConsumerInfo(sessionInfo, 1);
1:d29ca2a:         queueConsumerInfo.setDispatchAsync(dispatchAsync);
1:d29ca2a:         queueConsumerInfo.setDestination(new ActiveMQQueue(destinationFilter));
1:d29ca2a:         queueConsumerInfo.setPrefetchSize(prefetchSize);
1:d29ca2a:         queueConsumerInfo.setPriority(ConsumerInfo.NETWORK_CONSUMER_PRIORITY);
1:d29ca2a:         localBroker.oneway(queueConsumerInfo);
1:f812e34: 
1:d29ca2a:         producerInfo = new ProducerInfo(sessionInfo, 1);
1:d29ca2a:         producerInfo.setResponseRequired(false);
1:d29ca2a:         remoteBroker.oneway(producerInfo);
1:f812e34: 
1:f812e34:         if (connectionInfo.getClientId() != null) {
1:d29ca2a:             topicConsumerInfo = new ConsumerInfo(sessionInfo, 2);
1:d29ca2a:             topicConsumerInfo.setDispatchAsync(dispatchAsync);
1:333158a:             topicConsumerInfo.setSubscriptionName("topic-bridge");
1:d29ca2a:             topicConsumerInfo.setRetroactive(true);
1:d29ca2a:             topicConsumerInfo.setDestination(new ActiveMQTopic(destinationFilter));
1:d29ca2a:             topicConsumerInfo.setPrefetchSize(prefetchSize);
1:d29ca2a:             topicConsumerInfo.setPriority(ConsumerInfo.NETWORK_CONSUMER_PRIORITY);
1:d29ca2a:             localBroker.oneway(topicConsumerInfo);
1:d29ca2a:         }
1:f812e34: 
1:e1bbde7:         LOG.info("Network connection between {} and {} has been established.", localBroker, remoteBroker);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void stop() throws Exception {
1:d29ca2a:         try {
1:f812e34:             if (connectionInfo != null) {
1:d29ca2a:                 localBroker.request(connectionInfo.createRemoveCommand());
1:d29ca2a:                 remoteBroker.request(connectionInfo.createRemoveCommand());
1:d29ca2a:             }
1:d29ca2a:             localBroker.setTransportListener(null);
1:d29ca2a:             remoteBroker.setTransportListener(null);
1:d29ca2a:             localBroker.oneway(new ShutdownInfo());
1:d29ca2a:             remoteBroker.oneway(new ShutdownInfo());
1:d29ca2a:         } finally {
1:d29ca2a:             ServiceStopper ss = new ServiceStopper();
1:d29ca2a:             ss.stop(localBroker);
1:d29ca2a:             ss.stop(remoteBroker);
1:d29ca2a:             ss.throwFirstException();
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:ae73f86:     public void serviceRemoteException(Throwable error) {
1:e1bbde7:         LOG.info("Unexpected remote exception: {}", error.getMessage());
1:e1bbde7:         LOG.debug("Exception trace: ", error);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     protected void serviceRemoteCommand(Command command) {
1:d29ca2a:         try {
1:f812e34:             if (command.isBrokerInfo()) {
1:f812e34:                 synchronized (this) {
1:ecf89a6:                     remoteBrokerInfo = (BrokerInfo)command;
1:ec6e6a5:                     remoteBrokerId = remoteBrokerInfo.getBrokerId();
1:f812e34:                     if (localBrokerId != null) {
1:f812e34:                         if (localBrokerId.equals(remoteBrokerId)) {
1:fc00993:                             LOG.info("Disconnecting loop back connection.");
1:d29ca2a:                             ServiceSupport.dispose(this);
2:d29ca2a:                         } else {
1:f812e34:                             triggerStartBridge();
1:d29ca2a:                         }
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:             } else {
1:e1bbde7:                 LOG.warn("Unexpected remote command: {}", command);
1:d29ca2a:             }
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             serviceLocalException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:84fd773: 
1:ae73f86:     public void serviceLocalException(Throwable error) {
1:e1bbde7:         LOG.info("Unexpected local exception: {}", error.getMessage());
1:fc00993:         LOG.debug("Exception trace: ", error);
1:ae73f86:         fireBridgeFailed();
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     protected void serviceLocalCommand(Command command) {
1:d29ca2a:         try {
1:f812e34:             if (command.isMessageDispatch()) {
1:f812e34: 
1:f812e34:                 enqueueCounter.incrementAndGet();
1:f812e34: 
1:f812e34:                 final MessageDispatch md = (MessageDispatch)command;
1:d29ca2a:                 Message message = md.getMessage();
1:d29ca2a:                 message.setProducerId(producerInfo.getProducerId());
1:f812e34: 
1:ecf89a6:                 if (message.getOriginalTransactionId() == null) {
1:d29ca2a:                     message.setOriginalTransactionId(message.getTransactionId());
1:ecf89a6:                 }
1:d29ca2a:                 message.setTransactionId(null);
1:84fd773: 
1:41c9366:                 if (isUseCompression()) {
1:41c9366:                     message.compress();
1:d29ca2a:                 }
1:84fd773: 
1:f812e34:                 if (!message.isResponseRequired()) {
1:41c9366:                     // If the message was originally sent using async send, we will preserve that
1:41c9366:                     // QOS by bridging it using an async send (small chance of message loss).
1:84fd773:                     remoteBroker.oneway(message);
1:f812e34:                     dequeueCounter.incrementAndGet();
1:f812e34:                     localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1));
1:f812e34: 
1:84fd773:                 } else {
1:f812e34: 
1:f812e34:                     // The message was not sent using async send, so we should
1:f812e34:                     // only ack the local
1:f812e34:                     // broker when we get confirmation that the remote broker
1:f812e34:                     // has received the message.
1:84fd773:                     ResponseCallback callback = new ResponseCallback() {
1:84fd773:                         public void onCompletion(FutureResponse future) {
1:84fd773:                             try {
1:84fd773:                                 Response response = future.getResult();
1:f812e34:                                 if (response.isException()) {
1:f812e34:                                     ExceptionResponse er = (ExceptionResponse)response;
1:84fd773:                                     serviceLocalException(er.getException());
1:84fd773:                                 } else {
1:f812e34:                                     dequeueCounter.incrementAndGet();
1:f812e34:                                     localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1));
1:84fd773:                                 }
1:84fd773:                             } catch (IOException e) {
1:84fd773:                                 serviceLocalException(e);
1:84fd773:                             }
1:84fd773:                         }
1:84fd773:                     };
1:84fd773: 
1:84fd773:                     remoteBroker.asyncRequest(message, callback);
1:84fd773:                 }
1:84fd773: 
1:f812e34:                 // Ack on every message since we don't know if the broker is
1:f812e34:                 // blocked due to memory
1:f812e34:                 // usage and is waiting for an Ack to un-block him.
1:f812e34: 
1:f812e34:                 // Acking a range is more efficient, but also more prone to
1:f812e34:                 // locking up a server
1:f812e34:                 // Perhaps doing something like the following should be policy
1:f812e34:                 // based.
1:f812e34:                 // if(
1:f812e34:                 // md.getConsumerId().equals(queueConsumerInfo.getConsumerId())
1:f812e34:                 // ) {
1:f812e34:                 // queueDispatched++;
1:f812e34:                 // if( queueDispatched > (queueConsumerInfo.getPrefetchSize()/2)
1:f812e34:                 // ) {
1:f812e34:                 // localBroker.oneway(new MessageAck(md,
1:f812e34:                 // MessageAck.STANDARD_ACK_TYPE, queueDispatched));
1:f812e34:                 // queueDispatched=0;
1:f812e34:                 // }
1:f812e34:                 // } else {
1:f812e34:                 // topicDispatched++;
1:f812e34:                 // if( topicDispatched > (topicConsumerInfo.getPrefetchSize()/2)
1:f812e34:                 // ) {
1:f812e34:                 // localBroker.oneway(new MessageAck(md,
1:f812e34:                 // MessageAck.STANDARD_ACK_TYPE, topicDispatched));
1:f812e34:                 // topicDispatched=0;
1:f812e34:                 // }
1:f812e34:                 // }
1:f812e34:             } else if (command.isBrokerInfo()) {
1:f812e34:                 synchronized (this) {
1:ecf89a6:                     localBrokerInfo = (BrokerInfo)command;
1:ec6e6a5:                     localBrokerId = localBrokerInfo.getBrokerId();
1:f812e34:                     if (remoteBrokerId != null) {
1:f812e34:                         if (remoteBrokerId.equals(localBrokerId)) {
1:fc00993:                             LOG.info("Disconnecting loop back connection.");
1:d29ca2a:                             ServiceSupport.dispose(this);
1:d29ca2a:                         } else {
1:f812e34:                             triggerStartBridge();
1:d29ca2a:                         }
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:             } else {
1:e1bbde7:                 LOG.debug("Unexpected local command: {}", command);
1:d29ca2a:             }
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             serviceLocalException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:84fd773: 
1:d29ca2a:     public String getClientId() {
1:d29ca2a:         return clientId;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setClientId(String clientId) {
1:d29ca2a:         this.clientId = clientId;
1:d29ca2a:     }
1:6a89f08: 
1:d29ca2a:     public int getPrefetchSize() {
1:d29ca2a:         return prefetchSize;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setPrefetchSize(int prefetchSize) {
1:d29ca2a:         this.prefetchSize = prefetchSize;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isDispatchAsync() {
1:d29ca2a:         return dispatchAsync;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setDispatchAsync(boolean dispatchAsync) {
1:d29ca2a:         this.dispatchAsync = dispatchAsync;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getDestinationFilter() {
1:d29ca2a:         return destinationFilter;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setDestinationFilter(String destinationFilter) {
1:d29ca2a:         this.destinationFilter = destinationFilter;
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public void setNetworkBridgeFailedListener(NetworkBridgeListener listener) {
1:f812e34:         this.bridgeFailedListener = listener;
1:d29ca2a:     }
1:f812e34: 
1:ae73f86:     private void fireBridgeFailed() {
1:ec6e6a5:         NetworkBridgeListener l = this.bridgeFailedListener;
1:f812e34:         if (l != null) {
1:ae73f86:             l.bridgeFailed();
1:ec6e6a5:         }
1:ec6e6a5:     }
1:ec6e6a5: 
1:f812e34:     public String getRemoteAddress() {
1:f812e34:         return remoteBroker.getRemoteAddress();
1:f812e34:     }
1:ec6e6a5: 
1:f812e34:     public String getLocalAddress() {
1:f812e34:         return localBroker.getRemoteAddress();
1:f812e34:     }
1:ec6e6a5: 
1:f812e34:     public String getLocalBrokerName() {
1:f812e34:         return localBrokerInfo == null ? null : localBrokerInfo.getBrokerName();
1:f812e34:     }
1:ec6e6a5: 
1:f812e34:     public String getRemoteBrokerName() {
1:f812e34:         return remoteBrokerInfo == null ? null : remoteBrokerInfo.getBrokerName();
1:f812e34:     }
1:ec6e6a5: 
1:f812e34:     public long getDequeueCounter() {
1:f812e34:         return dequeueCounter.get();
1:f812e34:     }
1:f812e34: 
1:f812e34:     public long getEnqueueCounter() {
1:f812e34:         return enqueueCounter.get();
1:f812e34:     }
1:ec6e6a5: 
1:41c9366:     /**
1:41c9366:      * @param useCompression
1:41c9366:      *      True if forwarded Messages should have their bodies compressed.
1:41c9366:      */
1:41c9366:     public void setUseCompression(boolean useCompression) {
1:41c9366:         this.useCompression = useCompression;
1:ec6e6a5:     }
1:ec6e6a5: 
1:41c9366:     /**
1:41c9366:      * @return the vale of the useCompression setting, true if forwarded messages will be compressed.
1:41c9366:      */
1:41c9366:     public boolean isUseCompression() {
1:41c9366:         return useCompression;
1:ec6e6a5:     }
1:ec6e6a5: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Starting a network connection between {} and {} has been established.", localBroker, remoteBroker);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.error("Failed to start network bridge: ", e);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Network connection between {} and {} has been established.", localBroker, remoteBroker);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Unexpected remote exception: {}", error.getMessage());
1:         LOG.debug("Exception trace: ", error);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Unexpected remote command: {}", command);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Unexpected local exception: {}", error.getMessage());
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Unexpected local command: {}", command);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     private static final IdGenerator ID_GENERATOR = new IdGenerator();
1:     final AtomicLong enqueueCounter = new AtomicLong();
1:     final AtomicLong dequeueCounter = new AtomicLong();
1:     BrokerId localBrokerId;
1:     BrokerId remoteBrokerId;
1:     BrokerInfo localBrokerInfo;
1:     BrokerInfo remoteBrokerInfo;
1:     private final Transport localBroker;
1:     private final Transport remoteBroker;
/////////////////////////////////////////////////////////////////////////
1:         connectionInfo.setConnectionId(new ConnectionId(ID_GENERATOR.generateId()));
/////////////////////////////////////////////////////////////////////////
1:                     remoteBrokerInfo = (BrokerInfo)command;
/////////////////////////////////////////////////////////////////////////
1:                 if (message.getOriginalTransactionId() == null) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                     localBrokerInfo = (BrokerInfo)command;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ForwardingBridge.class);
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Starting a network connection between " + localBroker + " and " + remoteBroker
/////////////////////////////////////////////////////////////////////////
0:                     LOG.error("Failed to start network bridge: " + e, e);
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Network connection between " + localBroker + " and " + remoteBroker
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Unexpected remote exception: " + error);
1:         LOG.debug("Exception trace: ", error);
/////////////////////////////////////////////////////////////////////////
1:                             LOG.info("Disconnecting loop back connection.");
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Unexpected remote command: " + command);
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Unexpected local exception: " + error);
0:         LOG.debug("Exception trace: ", error);
/////////////////////////////////////////////////////////////////////////
1:                             LOG.info("Disconnecting loop back connection.");
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug("Unexpected local command: " + command);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class ForwardingBridge implements Service {
1: 
1: 
1: 
1:     private int prefetchSize = 1000;
1: 
0:     BrokerInfo localBrokerInfo;
0:     BrokerInfo remoteBrokerInfo;
1: 
0:     final AtomicLong enqueueCounter = new AtomicLong();
0:     final AtomicLong dequeueCounter = new AtomicLong();
/////////////////////////////////////////////////////////////////////////
0:         log.info("Starting a network connection between " + localBroker + " and " + remoteBroker
0:                  + " has been established.");
1:         localBroker.setTransportListener(new DefaultTransportListener() {
1:                 Command command = (Command)o;
1: 
1: 
1:         remoteBroker.setTransportListener(new DefaultTransportListener() {
1:                 Command command = (Command)o;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                 } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
1:         sessionInfo = new SessionInfo(connectionInfo, 1);
1: 
1: 
1: 
1:         if (connectionInfo.getClientId() != null) {
/////////////////////////////////////////////////////////////////////////
0:         log.info("Network connection between " + localBroker + " and " + remoteBroker
0:                  + " has been established.");
1: 
1:             if (connectionInfo != null) {
/////////////////////////////////////////////////////////////////////////
1: 
0:         log.info("Unexpected remote exception: " + error);
1: 
1:             if (command.isBrokerInfo()) {
1:                 synchronized (this) {
0:                     remoteBrokerInfo = ((BrokerInfo)command);
1:                     if (localBrokerId != null) {
1:                         if (localBrokerId.equals(remoteBrokerId)) {
1:                             triggerStartBridge();
0:                 log.warn("Unexpected remote command: " + command);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Unexpected local exception: " + error);
1:     }
1: 
1:             if (command.isMessageDispatch()) {
1: 
1:                 enqueueCounter.incrementAndGet();
1: 
1:                 final MessageDispatch md = (MessageDispatch)command;
1: 
0:                 if (message.getOriginalTransactionId() == null)
1:                 if (!message.isResponseRequired()) {
0:                     // If the message was originally sent using async send, we
0:                     // will preserve that QOS
0:                     // by bridging it using an async send (small chance of
0:                     // message loss).
1:                     dequeueCounter.incrementAndGet();
1:                     localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1));
1: 
1: 
1:                     // The message was not sent using async send, so we should
1:                     // only ack the local
1:                     // broker when we get confirmation that the remote broker
1:                     // has received the message.
1:                                 if (response.isException()) {
1:                                     ExceptionResponse er = (ExceptionResponse)response;
1:                                     dequeueCounter.incrementAndGet();
1:                                     localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1));
/////////////////////////////////////////////////////////////////////////
1:                 // Ack on every message since we don't know if the broker is
1:                 // blocked due to memory
1:                 // usage and is waiting for an Ack to un-block him.
1: 
1:                 // Acking a range is more efficient, but also more prone to
1:                 // locking up a server
1:                 // Perhaps doing something like the following should be policy
1:                 // based.
1:                 // if(
1:                 // md.getConsumerId().equals(queueConsumerInfo.getConsumerId())
1:                 // ) {
1:                 // queueDispatched++;
1:                 // if( queueDispatched > (queueConsumerInfo.getPrefetchSize()/2)
1:                 // ) {
1:                 // localBroker.oneway(new MessageAck(md,
1:                 // MessageAck.STANDARD_ACK_TYPE, queueDispatched));
1:                 // queueDispatched=0;
1:                 // }
1:                 // } else {
1:                 // topicDispatched++;
1:                 // if( topicDispatched > (topicConsumerInfo.getPrefetchSize()/2)
1:                 // ) {
1:                 // localBroker.oneway(new MessageAck(md,
1:                 // MessageAck.STANDARD_ACK_TYPE, topicDispatched));
1:                 // topicDispatched=0;
1:                 // }
1:                 // }
1:             } else if (command.isBrokerInfo()) {
1:                 synchronized (this) {
0:                     localBrokerInfo = ((BrokerInfo)command);
1:                     if (remoteBrokerId != null) {
1:                         if (remoteBrokerId.equals(localBrokerId)) {
1:                             triggerStartBridge();
0:                 log.debug("Unexpected local command: " + command);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setNetworkBridgeFailedListener(NetworkBridgeListener listener) {
1:         this.bridgeFailedListener = listener;
1: 
1:         if (l != null) {
1:     public String getRemoteAddress() {
1:         return remoteBroker.getRemoteAddress();
1:     }
1:     public String getLocalAddress() {
1:         return localBroker.getRemoteAddress();
1:     }
1:     public String getLocalBrokerName() {
1:         return localBrokerInfo == null ? null : localBrokerInfo.getBrokerName();
1:     }
1:     public String getRemoteBrokerName() {
1:         return remoteBrokerInfo == null ? null : remoteBrokerInfo.getBrokerName();
1:     }
1:     public long getDequeueCounter() {
1:         return dequeueCounter.get();
1:     }
1: 
1:     public long getEnqueueCounter() {
1:         return enqueueCounter.get();
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ec6e6a5
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private NetworkBridgeListener bridgeFailedListener;
1: 
0: 	BrokerInfo localBrokerInfo;
0: 	BrokerInfo remoteBrokerInfo;
1: 	
0: 	final AtomicLong enqueueCounter = new AtomicLong();
0: 	final AtomicLong dequeueCounter = new AtomicLong();
/////////////////////////////////////////////////////////////////////////
0:                 	remoteBrokerInfo = ((BrokerInfo)command);
1:                     remoteBrokerId = remoteBrokerInfo.getBrokerId();
/////////////////////////////////////////////////////////////////////////
1:             	
0:             	enqueueCounter.incrementAndGet();
1:             	
/////////////////////////////////////////////////////////////////////////
0:                 	dequeueCounter.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
0:                                 	dequeueCounter.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
0:                 	localBrokerInfo = ((BrokerInfo)command);
1:                     localBrokerId = localBrokerInfo.getBrokerId();
/////////////////////////////////////////////////////////////////////////
0:     public void setNetworkBridgeFailedListener(NetworkBridgeListener listener){
1:         NetworkBridgeListener l = this.bridgeFailedListener;
1: 
0: 	public String getRemoteAddress() {
0: 		return remoteBroker.getRemoteAddress();
1: 	}
1: 
0: 	public String getLocalAddress() {
0: 		return localBroker.getRemoteAddress();
1: 	}
1: 
0: 	public String getLocalBrokerName() {
0: 		return localBrokerInfo == null ? null : localBrokerInfo.getBrokerName();
1: 	}
1: 
0: 	public String getRemoteBrokerName() {
0: 		return remoteBrokerInfo == null ? null : remoteBrokerInfo.getBrokerName();
1: 	}
1: 	
0: 	public long getDequeueCounter() {
0: 		return dequeueCounter.get();
1: 	}
1: 
0: 	public long getEnqueueCounter() {
0: 		return enqueueCounter.get();
1: 	}
1: 
commit:a0e92d7
/////////////////////////////////////////////////////////////////////////
commit:333158a
/////////////////////////////////////////////////////////////////////////
1:             topicConsumerInfo.setSubscriptionName("topic-bridge");
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             public void onCommand(Object o) {
0:             	Command command = (Command) o;
/////////////////////////////////////////////////////////////////////////
1:             public void onCommand(Object o) {
0:             	Command command = (Command) o;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a42fac7
/////////////////////////////////////////////////////////////////////////
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Unexpected remote exception: "+error);
0:         log.debug("Exception trace: ", error);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Unexpected local exception: "+error);
0:         log.debug("Exception trace: ", error);
/////////////////////////////////////////////////////////////////////////
0:                 log.debug("Unexpected local command: "+command);
commit:84fd773
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ExceptionResponse;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.transport.FutureResponse;
1: import org.apache.activemq.transport.ResponseCallback;
/////////////////////////////////////////////////////////////////////////
0:     protected void serviceLocalException(Throwable error) {
0:                 final MessageDispatch md = (MessageDispatch) command;
/////////////////////////////////////////////////////////////////////////
0:                 if( !message.isResponseRequired() ) {
1:                     
0:                     // If the message was originally sent using async send, we will preserve that QOS
0:                     // by bridging it using an async send (small chance of message loss).
1:                     remoteBroker.oneway(message);
0:                     localBroker.oneway(new MessageAck(md,MessageAck.STANDARD_ACK_TYPE,1));
1:                     
1:                 } else {
1:                     
0:                     // The message was not sent using async send, so we should only ack the local 
0:                     // broker when we get confirmation that the remote broker has received the message.
1:                     ResponseCallback callback = new ResponseCallback() {
1:                         public void onCompletion(FutureResponse future) {
1:                             try {
1:                                 Response response = future.getResult();
0:                                 if(response.isException()){
0:                                     ExceptionResponse er=(ExceptionResponse) response;
1:                                     serviceLocalException(er.getException());
1:                                 } else {
0:                                     localBroker.oneway(new MessageAck(md,MessageAck.STANDARD_ACK_TYPE,1));
1:                                 }
1:                             } catch (IOException e) {
1:                                 serviceLocalException(e);
1:                             }
1:                         }
1:                     };
1: 
1:                     remoteBroker.asyncRequest(message, callback);
1:                 }
1:                 
1:                                 
commit:6a89f08
/////////////////////////////////////////////////////////////////////////
0:                 // Ack on every message since we don't know if the broker is blocked due to memory
0:                 // usage and is waiting for an Ack to un-block him. 
0:                 localBroker.oneway(new MessageAck(md,MessageAck.STANDARD_ACK_TYPE,1));
1: 
0:                 // Acking a range is more efficient, but also more prone to locking up a server
0:                 // Perhaps doing something like the following should be policy based.
0: //                if( md.getConsumerId().equals(queueConsumerInfo.getConsumerId()) ) {
0: //                    queueDispatched++;
0: //                    if( queueDispatched > (queueConsumerInfo.getPrefetchSize()/2) ) {
0: //                        localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, queueDispatched));
0: //                        queueDispatched=0;
0: //                    }
0: //                } else {
0: //                    topicDispatched++;
0: //                    if( topicDispatched > (topicConsumerInfo.getPrefetchSize()/2) ) {
0: //                        localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, topicDispatched));
0: //                        topicDispatched=0;
0: //                    }
0: //                }
commit:b2ad8fa
/////////////////////////////////////////////////////////////////////////
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
0: import java.io.IOException;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.BrokerId;
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.command.ShutdownInfo;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.util.IdGenerator;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.util.ServiceSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Forwards all messages from the local broker to the remote broker.
1:  * 
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
0: public class ForwardingBridge implements Bridge {
1:     
0:     static final private Log log = LogFactory.getLog(ForwardingBridge.class);
1: 
0:     private final Transport localBroker;
0:     private final Transport remoteBroker;
1:     
0:     IdGenerator idGenerator = new IdGenerator();
1:     ConnectionInfo connectionInfo;
1:     SessionInfo sessionInfo;
1:     ProducerInfo producerInfo;
1:     ConsumerInfo queueConsumerInfo;
1:     ConsumerInfo topicConsumerInfo;
1:     
1:     private String clientId;
0:     private int prefetchSize=1000;
1:     private boolean dispatchAsync;
1:     private String destinationFilter = ">";
1:     
0:     private int queueDispatched;
0:     private int topicDispatched;
1:     
0:     BrokerId localBrokerId;
0:     BrokerId remoteBrokerId;
1: 
1:     public ForwardingBridge(Transport localBroker, Transport remoteBroker) {
1:         this.localBroker = localBroker;
1:         this.remoteBroker = remoteBroker;
1:     }
1: 
1:     public void start() throws Exception {
0:         log.info("Starting a network connection between " + localBroker + " and " + remoteBroker + " has been established.");
1: 
0:         localBroker.setTransportListener(new TransportListener(){
0:             public void onCommand(Command command) {
1:                 serviceLocalCommand(command);
1:             }
1:             public void onException(IOException error) {
1:                 serviceLocalException(error);
1:             }
1:         });
1:         
0:         remoteBroker.setTransportListener(new TransportListener(){
0:             public void onCommand(Command command) {
1:                 serviceRemoteCommand(command);
1:             }
1:             public void onException(IOException error) {
1:                 serviceRemoteException(error);
1:             }
1:         });
1:         
1:         localBroker.start();
1:         remoteBroker.start();
1:     }
1: 
1:     protected void triggerStartBridge() throws IOException {
1:         Thread thead = new Thread() {
1:             public void run() {
1:                 try {
1:                     startBridge();
1:                 }
0:                 catch (IOException e) {
0:                     log.error("Failed to start network bridge: " + e, e);
1:                 }
1:             }
1:         };
1:         thead.start();
1:     }
1: 
1:     /**
1:      * @throws IOException
1:      */
0:     private void startBridge() throws IOException {
1:         connectionInfo = new ConnectionInfo();
0:         connectionInfo.setConnectionId(new ConnectionId(idGenerator.generateId()));
1:         connectionInfo.setClientId(clientId);
1:         localBroker.oneway(connectionInfo);
1:         remoteBroker.oneway(connectionInfo);
1: 
0:         sessionInfo=new SessionInfo(connectionInfo, 1);
1:         localBroker.oneway(sessionInfo);
1:         remoteBroker.oneway(sessionInfo);
1:         
1:         queueConsumerInfo = new ConsumerInfo(sessionInfo, 1);
1:         queueConsumerInfo.setDispatchAsync(dispatchAsync);
1:         queueConsumerInfo.setDestination(new ActiveMQQueue(destinationFilter));
1:         queueConsumerInfo.setPrefetchSize(prefetchSize);
1:         queueConsumerInfo.setPriority(ConsumerInfo.NETWORK_CONSUMER_PRIORITY);
1:         localBroker.oneway(queueConsumerInfo);
1:         
1:         producerInfo = new ProducerInfo(sessionInfo, 1);
1:         producerInfo.setResponseRequired(false);
1:         remoteBroker.oneway(producerInfo);
1:         
0:         if( connectionInfo.getClientId()!=null ) {
1:             topicConsumerInfo = new ConsumerInfo(sessionInfo, 2);
1:             topicConsumerInfo.setDispatchAsync(dispatchAsync);
0:             topicConsumerInfo.setSubcriptionName("topic-bridge");
1:             topicConsumerInfo.setRetroactive(true);
1:             topicConsumerInfo.setDestination(new ActiveMQTopic(destinationFilter));
1:             topicConsumerInfo.setPrefetchSize(prefetchSize);
1:             topicConsumerInfo.setPriority(ConsumerInfo.NETWORK_CONSUMER_PRIORITY);
1:             localBroker.oneway(topicConsumerInfo);
1:         }
0:         log.info("Network connection between " + localBroker + " and " + remoteBroker + " has been established.");
1:     }
1:     
1:     public void stop() throws Exception {
1:         try {
0:             if( connectionInfo!=null ) {
1:                 localBroker.request(connectionInfo.createRemoveCommand());
1:                 remoteBroker.request(connectionInfo.createRemoveCommand());
1:             }
1:             localBroker.setTransportListener(null);
1:             remoteBroker.setTransportListener(null);
1:             localBroker.oneway(new ShutdownInfo());
1:             remoteBroker.oneway(new ShutdownInfo());
1:         } finally {
1:             ServiceStopper ss = new ServiceStopper();
1:             ss.stop(localBroker);
1:             ss.stop(remoteBroker);
1:             ss.throwFirstException();
1:         }
1:     }
1:     
0:     protected void serviceRemoteException(IOException error) {
0:         System.out.println("Unexpected remote exception: "+error);
0:         error.printStackTrace();
1:     }
1:     
1:     protected void serviceRemoteCommand(Command command) {
1:         try {
0:             if(command.isBrokerInfo() ) {
0:                 synchronized( this ) {
0:                     remoteBrokerId = ((BrokerInfo)command).getBrokerId();
0:                     if( localBrokerId !=null) {
0:                         if( localBrokerId.equals(remoteBrokerId) ) {
0:                             log.info("Disconnecting loop back connection.");
1:                             ServiceSupport.dispose(this);
1:                         } else {
0:                             triggerStartBridge();                            
1:                         }
1:                     }
1:                 }
1:             } else {
0:                 System.out.println("Unexpected remote command: "+command);
1:             }
1:         } catch (IOException e) {
1:             serviceLocalException(e);
1:         }
1:     }
1: 
0:     protected void serviceLocalException(IOException error) {
0:         System.out.println("Unexpected local exception: "+error);
0:         error.printStackTrace();
1:     }    
1:     protected void serviceLocalCommand(Command command) {
1:         try {
0:             if( command.isMessageDispatch() ) {
0:                 MessageDispatch md = (MessageDispatch) command;
1:                 Message message = md.getMessage();
1:                 message.setProducerId(producerInfo.getProducerId());
0:                 message.setDestination( md.getDestination() );
1:                 
0:                 if( message.getOriginalTransactionId()==null )
1:                     message.setOriginalTransactionId(message.getTransactionId());
1:                 message.setTransactionId(null);
0:                 message.evictMarshlledForm();
1: 
0:                 remoteBroker.oneway( message );
1:                 
0:                 if( md.getConsumerId().equals(queueConsumerInfo.getConsumerId()) ) {
0:                     queueDispatched++;
0:                     if( queueDispatched > (queueConsumerInfo.getPrefetchSize()/2) ) {
0:                         localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, queueDispatched));
0:                         queueDispatched=0;
1:                     }
1:                 } else {
0:                     topicDispatched++;
0:                     if( topicDispatched > (topicConsumerInfo.getPrefetchSize()/2) ) {
0:                         localBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, topicDispatched));
0:                         topicDispatched=0;
1:                     }
1:                 }
0:             } else if(command.isBrokerInfo() ) {
0:                 synchronized( this ) {
0:                     localBrokerId = ((BrokerInfo)command).getBrokerId();
0:                     if( remoteBrokerId !=null) {
0:                         if( remoteBrokerId.equals(localBrokerId) ) {
0:                             log.info("Disconnecting loop back connection.");
1:                             ServiceSupport.dispose(this);
1:                         } else {
0:                             triggerStartBridge();                            
1:                         }
1:                     }
1:                 }
1:             } else {
0:                 System.out.println("Unexpected local command: "+command);
1:             }
1:         } catch (IOException e) {
1:             serviceLocalException(e);
1:         }
1:     }
1: 
1:     public String getClientId() {
1:         return clientId;
1:     }
1:     public void setClientId(String clientId) {
1:         this.clientId = clientId;
1:     }
1: 
1:     public int getPrefetchSize() {
1:         return prefetchSize;
1:     }
1:     public void setPrefetchSize(int prefetchSize) {
1:         this.prefetchSize = prefetchSize;
1:     }
1: 
1:     public boolean isDispatchAsync() {
1:         return dispatchAsync;
1:     }
1:     public void setDispatchAsync(boolean dispatchAsync) {
1:         this.dispatchAsync = dispatchAsync;
1:     }
1: 
1:     public String getDestinationFilter() {
1:         return destinationFilter;
1:     }
1:     public void setDestinationFilter(String destinationFilter) {
1:         this.destinationFilter = destinationFilter;
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:         if (LOG.isInfoEnabled()) {
0:             LOG.info("Network connection between " + localBroker + " and " + remoteBroker
0:                      + " has been established.");
0:         }
/////////////////////////////////////////////////////////////////////////
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug("Exception trace: ", error);
0:         }
/////////////////////////////////////////////////////////////////////////
commit:41c9366
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1:     private boolean useCompression = false;
/////////////////////////////////////////////////////////////////////////
1:                 if (isUseCompression()) {
1:                     message.compress();
0:                 }
0: 
1:                     // If the message was originally sent using async send, we will preserve that
1:                     // QOS by bridging it using an async send (small chance of message loss).
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param useCompression
1:      *      True if forwarded Messages should have their bodies compressed.
1:      */
1:     public void setUseCompression(boolean useCompression) {
1:         this.useCompression = useCompression;
0:     }
0: 
1:     /**
1:      * @return the vale of the useCompression setting, true if forwarded messages will be compressed.
1:      */
1:     public boolean isUseCompression() {
1:         return useCompression;
0:     }
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ForwardingBridge.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
1:     final void startBridge() throws IOException {
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
/////////////////////////////////////////////////////////////////////////
0: public class ForwardingBridge  implements Service{
/////////////////////////////////////////////////////////////////////////
0:     private NetworkBridgeFailedListener bridgeFailedListener;
/////////////////////////////////////////////////////////////////////////
1:     public void serviceRemoteException(Throwable error) {
/////////////////////////////////////////////////////////////////////////
1:     public void serviceLocalException(Throwable error) {
1:         fireBridgeFailed();
/////////////////////////////////////////////////////////////////////////
0: 
0:    
0:     public void setNetworkBridgeFailedListener(NetworkBridgeFailedListener listener){
0:       this.bridgeFailedListener=listener;  
0:     }
0:     
1:     private void fireBridgeFailed() {
0:         NetworkBridgeFailedListener l = this.bridgeFailedListener;
0:         if (l!=null) {
1:             l.bridgeFailed();
0:         }
0:     }
commit:068c646
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.DefaultTransportListener;
/////////////////////////////////////////////////////////////////////////
0:         localBroker.setTransportListener(new DefaultTransportListener(){
/////////////////////////////////////////////////////////////////////////
0:         remoteBroker.setTransportListener(new DefaultTransportListener(){
/////////////////////////////////////////////////////////////////////////
0:                 log.warn("Unexpected remote command: "+command);
author:James Strachan
-------------------------------------------------------------------------------
commit:400b1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: 
============================================================================