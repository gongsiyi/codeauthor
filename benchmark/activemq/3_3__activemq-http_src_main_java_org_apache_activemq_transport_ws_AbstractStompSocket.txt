1:eea3230: /**
1:eea3230:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:eea3230:  * contributor license agreements.  See the NOTICE file distributed with
1:eea3230:  * this work for additional information regarding copyright ownership.
1:eea3230:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:eea3230:  * (the "License"); you may not use this file except in compliance with
1:eea3230:  * the License.  You may obtain a copy of the License at
1:eea3230:  *
1:eea3230:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eea3230:  *
1:eea3230:  * Unless required by applicable law or agreed to in writing, software
1:eea3230:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eea3230:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eea3230:  * See the License for the specific language governing permissions and
1:eea3230:  * limitations under the License.
1:eea3230:  */
1:eea3230: package org.apache.activemq.transport.ws;
1:eea3230: 
1:eea3230: import java.io.IOException;
1:f8bfff0: import java.security.cert.X509Certificate;
1:eea3230: import java.util.concurrent.CountDownLatch;
1:caa6b8e: import java.util.concurrent.locks.ReentrantLock;
1:eea3230: 
1:eea3230: import org.apache.activemq.command.Command;
1:eea3230: import org.apache.activemq.command.KeepAliveInfo;
1:eea3230: import org.apache.activemq.transport.TransportSupport;
1:eea3230: import org.apache.activemq.transport.stomp.ProtocolConverter;
1:eea3230: import org.apache.activemq.transport.stomp.StompFrame;
1:eea3230: import org.apache.activemq.transport.stomp.StompInactivityMonitor;
1:eea3230: import org.apache.activemq.transport.stomp.StompTransport;
1:eea3230: import org.apache.activemq.transport.stomp.StompWireFormat;
1:eea3230: import org.apache.activemq.util.ByteSequence;
1:eea3230: import org.apache.activemq.util.IOExceptionSupport;
1:eea3230: import org.apache.activemq.util.ServiceStopper;
1:eea3230: import org.slf4j.Logger;
1:eea3230: import org.slf4j.LoggerFactory;
1:eea3230: 
1:eea3230: /**
1:eea3230:  * Base implementation of a STOMP based WebSocket handler.
1:eea3230:  */
1:eea3230: public abstract class AbstractStompSocket extends TransportSupport implements StompTransport {
1:eea3230: 
1:eea3230:     private static final Logger LOG = LoggerFactory.getLogger(AbstractStompSocket.class);
1:eea3230: 
1:caa6b8e:     protected ReentrantLock protocolLock = new ReentrantLock();
1:eea3230:     protected ProtocolConverter protocolConverter = new ProtocolConverter(this, null);
1:eea3230:     protected StompWireFormat wireFormat = new StompWireFormat();
1:eea3230:     protected final CountDownLatch socketTransportStarted = new CountDownLatch(1);
1:eea3230:     protected final StompInactivityMonitor stompInactivityMonitor = new StompInactivityMonitor(this, wireFormat);
1:eea3230:     protected volatile int receiveCounter;
1:be10b86:     protected final String remoteAddress;
1:f8bfff0:     protected X509Certificate[] certificates;
1:eea3230: 
1:be10b86:     public AbstractStompSocket(String remoteAddress) {
1:be10b86:         super();
1:be10b86:         this.remoteAddress = remoteAddress;
1:f8bfff0:     }
1:eea3230: 
2:eea3230:     @Override
1:eea3230:     public void oneway(Object command) throws IOException {
1:caa6b8e:         protocolLock.lock();
1:eea3230:         try {
1:eea3230:             protocolConverter.onActiveMQCommand((Command)command);
1:eea3230:         } catch (Exception e) {
1:eea3230:             onException(IOExceptionSupport.create(e));
1:caa6b8e:         } finally {
1:caa6b8e:             protocolLock.unlock();
1:eea3230:         }
1:eea3230:     }
1:eea3230: 
1:eea3230:     @Override
1:eea3230:     public void sendToActiveMQ(Command command) {
1:caa6b8e:         protocolLock.lock();
1:caa6b8e:         try {
1:caa6b8e:             doConsume(command);
1:caa6b8e:         } finally {
1:caa6b8e:             protocolLock.unlock();
1:caa6b8e:         }
1:eea3230:     }
1:eea3230: 
1:eea3230:     @Override
1:eea3230:     protected void doStop(ServiceStopper stopper) throws Exception {
1:eea3230:         stompInactivityMonitor.stop();
1:f05f83b:         handleStopped();
1:eea3230:     }
1:eea3230: 
1:eea3230:     @Override
1:eea3230:     protected void doStart() throws Exception {
1:eea3230:         socketTransportStarted.countDown();
1:eea3230:         stompInactivityMonitor.setTransportListener(getTransportListener());
1:3125cae:         stompInactivityMonitor.startConnectCheckTask();
1:eea3230:     }
1:eea3230: 
1:f05f83b:     //----- Abstract methods for subclasses to implement ---------------------//
1:f05f83b: 
1:f05f83b:     @Override
1:f05f83b:     public abstract void sendToStomp(StompFrame command) throws IOException;
1:f05f83b: 
1:f05f83b:     /**
1:f05f83b:      * Called when the transport is stopping to allow the dervied classes
1:f05f83b:      * a chance to close WebSocket resources.
1:f05f83b:      *
1:f05f83b:      * @throws IOException if an error occurs during the stop.
1:f05f83b:      */
1:f05f83b:     public abstract void handleStopped() throws IOException;
1:f05f83b: 
1:eea3230:     //----- Accessor methods -------------------------------------------------//
1:eea3230: 
1:eea3230:     @Override
1:eea3230:     public StompInactivityMonitor getInactivityMonitor() {
1:eea3230:         return stompInactivityMonitor;
1:eea3230:     }
1:eea3230: 
1:eea3230:     @Override
1:eea3230:     public StompWireFormat getWireFormat() {
1:eea3230:         return wireFormat;
1:eea3230:     }
1:eea3230: 
1:eea3230:     @Override
1:eea3230:     public String getRemoteAddress() {
1:be10b86:         return remoteAddress;
1:eea3230:     }
1:eea3230: 
1:eea3230:     @Override
1:eea3230:     public int getReceiveCounter() {
1:eea3230:         return receiveCounter;
1:eea3230:     }
1:eea3230: 
1:eea3230:     //----- Internal implementation ------------------------------------------//
1:eea3230: 
1:eea3230:     protected void processStompFrame(String data) {
1:eea3230:         if (!transportStartedAtLeastOnce()) {
1:eea3230:             LOG.debug("Waiting for StompSocket to be properly started...");
1:eea3230:             try {
1:eea3230:                 socketTransportStarted.await();
1:eea3230:             } catch (InterruptedException e) {
1:eea3230:                 LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:eea3230:             }
1:eea3230:         }
1:eea3230: 
1:caa6b8e:         protocolLock.lock();
1:eea3230:         try {
1:eea3230:             if (data != null) {
1:eea3230:                 receiveCounter += data.length();
1:eea3230: 
1:eea3230:                 if (data.equals("\n")) {
1:eea3230:                     stompInactivityMonitor.onCommand(new KeepAliveInfo());
1:eea3230:                 } else {
1:f8bfff0:                     StompFrame frame = (StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8")));
1:31c55f7:                     frame.setTransportContext(getPeerCertificates());
1:f8bfff0:                     protocolConverter.onStompCommand(frame);
1:eea3230:                 }
1:eea3230:             }
1:eea3230:         } catch (Exception e) {
1:eea3230:             onException(IOExceptionSupport.create(e));
1:caa6b8e:         } finally {
1:caa6b8e:             protocolLock.unlock();
1:eea3230:         }
1:eea3230:     }
1:eea3230: 
1:eea3230:     private boolean transportStartedAtLeastOnce() {
1:eea3230:         return socketTransportStarted.getCount() == 0;
1:eea3230:     }
1:eea3230: 
1:31c55f7:     @Override
1:31c55f7:     public X509Certificate[] getPeerCertificates() {
1:f8bfff0:         return certificates;
1:eea3230:     }
2:f8bfff0: 
1:31c55f7:     @Override
1:31c55f7:     public void setPeerCertificates(X509Certificate[] certificates) {
1:f8bfff0:         this.certificates = certificates;
1:f8bfff0:     }
1:be10b86: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1:                     frame.setTransportContext(getPeerCertificates());
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public X509Certificate[] getPeerCertificates() {
1:     @Override
1:     public void setPeerCertificates(X509Certificate[] certificates) {
commit:caa6b8e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.locks.ReentrantLock;
/////////////////////////////////////////////////////////////////////////
1:     protected ReentrantLock protocolLock = new ReentrantLock();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         protocolLock.lock();
1:         } finally {
1:             protocolLock.unlock();
1:         protocolLock.lock();
1:         try {
1:             doConsume(command);
1:         } finally {
1:             protocolLock.unlock();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         protocolLock.lock();
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             protocolLock.unlock();
commit:3125cae
/////////////////////////////////////////////////////////////////////////
1:         stompInactivityMonitor.startConnectCheckTask();
commit:f05f83b
/////////////////////////////////////////////////////////////////////////
1:         handleStopped();
/////////////////////////////////////////////////////////////////////////
1:     //----- Abstract methods for subclasses to implement ---------------------//
1: 
1:     @Override
1:     public abstract void sendToStomp(StompFrame command) throws IOException;
1: 
1:     /**
1:      * Called when the transport is stopping to allow the dervied classes
1:      * a chance to close WebSocket resources.
1:      *
1:      * @throws IOException if an error occurs during the stop.
1:      */
1:     public abstract void handleStopped() throws IOException;
1: 
commit:eea3230
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.KeepAliveInfo;
1: import org.apache.activemq.transport.TransportSupport;
1: import org.apache.activemq.transport.stomp.ProtocolConverter;
1: import org.apache.activemq.transport.stomp.StompFrame;
1: import org.apache.activemq.transport.stomp.StompInactivityMonitor;
1: import org.apache.activemq.transport.stomp.StompTransport;
1: import org.apache.activemq.transport.stomp.StompWireFormat;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Base implementation of a STOMP based WebSocket handler.
1:  */
1: public abstract class AbstractStompSocket extends TransportSupport implements StompTransport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AbstractStompSocket.class);
1: 
1:     protected ProtocolConverter protocolConverter = new ProtocolConverter(this, null);
1:     protected StompWireFormat wireFormat = new StompWireFormat();
1:     protected final CountDownLatch socketTransportStarted = new CountDownLatch(1);
1:     protected final StompInactivityMonitor stompInactivityMonitor = new StompInactivityMonitor(this, wireFormat);
1:     protected volatile int receiveCounter;
1: 
1:     @Override
1:     public void oneway(Object command) throws IOException {
1:         try {
1:             protocolConverter.onActiveMQCommand((Command)command);
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
1:     @Override
1:     public void sendToActiveMQ(Command command) {
0:         doConsume(command);
1:     }
1: 
1:     @Override
0:     public abstract void sendToStomp(StompFrame command) throws IOException;
1: 
1:     @Override
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         stompInactivityMonitor.stop();
1:     }
1: 
1:     @Override
1:     protected void doStart() throws Exception {
1:         socketTransportStarted.countDown();
1:         stompInactivityMonitor.setTransportListener(getTransportListener());
1:     }
1: 
1:     //----- Accessor methods -------------------------------------------------//
1: 
1:     @Override
1:     public StompInactivityMonitor getInactivityMonitor() {
1:         return stompInactivityMonitor;
1:     }
1: 
1:     @Override
1:     public StompWireFormat getWireFormat() {
1:         return wireFormat;
1:     }
1: 
1:     @Override
1:     public String getRemoteAddress() {
0:         return "StompSocket_" + this.hashCode();
1:     }
1: 
1:     @Override
1:     public int getReceiveCounter() {
1:         return receiveCounter;
1:     }
1: 
1:     //----- Internal implementation ------------------------------------------//
1: 
1:     protected void processStompFrame(String data) {
1: 
1:         if (!transportStartedAtLeastOnce()) {
1:             LOG.debug("Waiting for StompSocket to be properly started...");
1:             try {
1:                 socketTransportStarted.await();
1:             } catch (InterruptedException e) {
1:                 LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:             }
1:         }
1: 
1:         try {
1:             if (data != null) {
1:                 receiveCounter += data.length();
1: 
1:                 if (data.equals("\n")) {
1:                     stompInactivityMonitor.onCommand(new KeepAliveInfo());
1:                 } else {
0:                     protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));
1:                 }
1:             }
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
1:     private boolean transportStartedAtLeastOnce() {
1:         return socketTransportStarted.getCount() == 0;
1:     }
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:f8bfff0
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
/////////////////////////////////////////////////////////////////////////
1:     protected X509Certificate[] certificates;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     StompFrame frame = (StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8")));
0:                     frame.setTransportContext(getCertificates());
1:                     protocolConverter.onStompCommand(frame);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public X509Certificate[] getCertificates() {
1:         return certificates;
1:     }
1: 
0:     public void setCertificates(X509Certificate[] certificates) {
1:         this.certificates = certificates;
1:     }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:be10b86
/////////////////////////////////////////////////////////////////////////
1:     protected final String remoteAddress;
0: 
0: 
1:     public AbstractStompSocket(String remoteAddress) {
1:         super();
1:         this.remoteAddress = remoteAddress;
1:     }
/////////////////////////////////////////////////////////////////////////
1:         return remoteAddress;
============================================================================