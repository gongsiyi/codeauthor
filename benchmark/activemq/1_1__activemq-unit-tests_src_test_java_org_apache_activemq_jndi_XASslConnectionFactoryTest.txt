1:016ae05: /**
1:016ae05:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:016ae05:  * contributor license agreements.  See the NOTICE file distributed with
1:016ae05:  * this work for additional information regarding copyright ownership.
1:016ae05:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:016ae05:  * (the "License"); you may not use this file except in compliance with
1:016ae05:  * the License.  You may obtain a copy of the License at
1:016ae05:  *
1:016ae05:  *      http://www.apache.org/licenses/LICENSE-2.0
1:016ae05:  *
1:016ae05:  * Unless required by applicable law or agreed to in writing, software
1:016ae05:  * distributed under the License is distributed on an "AS IS" BASIS,
1:016ae05:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:016ae05:  * See the License for the specific language governing permissions and
1:016ae05:  * limitations under the License.
1:016ae05:  */
1:016ae05: package org.apache.activemq.jndi;
1:016ae05: 
1:016ae05: import javax.jms.XAConnectionFactory;
1:016ae05: import javax.naming.Context;
1:016ae05: import javax.naming.NamingException;
1:016ae05: import javax.naming.spi.InitialContextFactory;
1:016ae05: 
1:016ae05: import org.apache.activemq.ActiveMQXASslConnectionFactory;
1:016ae05: 
1:016ae05: public class XASslConnectionFactoryTest extends ActiveMQInitialContextFactoryTest {
1:016ae05: 
1:016ae05:     public void testConnectionFactoriesIsXA() throws NamingException {
1:016ae05:         Object factory = context.lookup(getConnectionFactoryLookupName());
1:016ae05:         assertTrue("connection factory implements XA", factory instanceof XAConnectionFactory);
1:016ae05:         assertTrue("is always sync send", ((ActiveMQXASslConnectionFactory)factory).isAlwaysSyncSend());
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     protected void configureEnvironment() {
1:016ae05:         environment.put("xa", "true");
1:016ae05:         environment.put(Context.PROVIDER_URL, "vm://locahost?jms.alwaysSyncSend=true");
1:016ae05:         super.configureEnvironment();
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     protected InitialContextFactory getInitialContextFactory() {
1:016ae05:         return new ActiveMQSslInitialContextFactory();
1:016ae05:     }
1:016ae05: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:016ae05
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jndi;
1: 
1: import javax.jms.XAConnectionFactory;
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.spi.InitialContextFactory;
1: 
1: import org.apache.activemq.ActiveMQXASslConnectionFactory;
1: 
1: public class XASslConnectionFactoryTest extends ActiveMQInitialContextFactoryTest {
1: 
1:     public void testConnectionFactoriesIsXA() throws NamingException {
1:         Object factory = context.lookup(getConnectionFactoryLookupName());
1:         assertTrue("connection factory implements XA", factory instanceof XAConnectionFactory);
1:         assertTrue("is always sync send", ((ActiveMQXASslConnectionFactory)factory).isAlwaysSyncSend());
1:     }
1: 
1:     @Override
1:     protected void configureEnvironment() {
1:         environment.put("xa", "true");
1:         environment.put(Context.PROVIDER_URL, "vm://locahost?jms.alwaysSyncSend=true");
1:         super.configureEnvironment();
1:     }
1: 
1:     @Override
1:     protected InitialContextFactory getInitialContextFactory() {
1:         return new ActiveMQSslInitialContextFactory();
1:     }
1: }
============================================================================