1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq.plugin;
1:bbc039f: 
1:4a603a9: 
1:bbc039f: import java.lang.reflect.Method;
1:b488df6: import java.lang.reflect.Modifier;
1:b488df6: import java.util.Collection;
1:bbc039f: import java.util.HashSet;
1:bbc039f: import java.util.List;
1:bbc039f: import java.util.Set;
1:bbc039f: 
1:4a603a9: import org.apache.activemq.broker.region.virtual.FilteredDestination;
1:bbc039f: import org.apache.activemq.command.ActiveMQQueue;
1:bbc039f: import org.apache.activemq.command.ActiveMQTopic;
1:bbc039f: import org.apache.activemq.schema.core.DtoAuthenticationUser;
1:b488df6: import org.apache.activemq.schema.core.DtoFilteredDestination;
1:b488df6: import org.apache.activemq.schema.core.DtoQueue;
1:b488df6: import org.apache.activemq.schema.core.DtoSslContext;
1:b488df6: import org.apache.activemq.schema.core.DtoTopic;
1:bbc039f: import org.apache.activemq.security.AuthenticationUser;
1:b488df6: import org.apache.activemq.spring.SpringSslContext;
1:bbc039f: 
1:bbc039f: public class JAXBUtils {
1:bbc039f: 
1:bbc039f:     public static Method findSetter(Object instance, String elementName) {
1:bbc039f:         String setter = "set" + elementName;
1:bbc039f:         for (Method m : instance.getClass().getMethods()) {
1:bbc039f:             if (setter.equals(m.getName())) {
1:bbc039f:                 return m;
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         return null;
1:bbc039f:     }
1:bbc039f: 
1:b488df6:     public static void ensureAccessible(Method m) {
1:b488df6:         if ((!Modifier.isPublic(m.getModifiers()) || !Modifier.isPublic(m.getDeclaringClass().getModifiers())) && !m.isAccessible()) {
1:b488df6:             m.setAccessible(true);
1:b488df6:         }
1:b488df6:     }
1:b488df6: 
1:bbc039f:     public static Object inferTargetObject(Object elementContent) {
1:bbc039f:         if (DtoTopic.class.isAssignableFrom(elementContent.getClass())) {
1:bbc039f:             return new ActiveMQTopic();
1:bbc039f:         } else if (DtoQueue.class.isAssignableFrom(elementContent.getClass())) {
1:bbc039f:             return new ActiveMQQueue();
1:bbc039f:         } else if (DtoAuthenticationUser.class.isAssignableFrom(elementContent.getClass())) {
1:bbc039f:             return new AuthenticationUser();
1:4a603a9:         } else if (DtoFilteredDestination.class.isAssignableFrom(elementContent.getClass())) {
1:b488df6:             return new FilteredDestination();
1:b488df6:         } else if (DtoSslContext.class.isAssignableFrom(elementContent.getClass())) {
1:b488df6:             return new SpringSslContext();
1:bbc039f:         } else {
1:bbc039f:             return new Object();
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     public static Object matchType(List<Object> parameterValues, Class<?> aClass) {
1:bbc039f:         Object result = parameterValues;
1:bbc039f:         if (Set.class.isAssignableFrom(aClass)) {
1:bbc039f:             result = new HashSet(parameterValues);
1:b488df6:         } else if (!Collection.class.isAssignableFrom(aClass)) {
1:b488df6:             result = parameterValues.get(0);
1:bbc039f:         }
1:bbc039f:         return result;
1:bbc039f:     }
1:bbc039f: 
1:bbc039f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b488df6
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Modifier;
1: import java.util.Collection;
1: import org.apache.activemq.schema.core.DtoFilteredDestination;
1: import org.apache.activemq.schema.core.DtoQueue;
1: import org.apache.activemq.schema.core.DtoSslContext;
1: import org.apache.activemq.schema.core.DtoTopic;
1: import org.apache.activemq.spring.SpringSslContext;
/////////////////////////////////////////////////////////////////////////
1:     public static void ensureAccessible(Method m) {
1:         if ((!Modifier.isPublic(m.getModifiers()) || !Modifier.isPublic(m.getDeclaringClass().getModifiers())) && !m.isAccessible()) {
1:             m.setAccessible(true);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             return new FilteredDestination();
1:         } else if (DtoSslContext.class.isAssignableFrom(elementContent.getClass())) {
1:             return new SpringSslContext();
/////////////////////////////////////////////////////////////////////////
1:         } else if (!Collection.class.isAssignableFrom(aClass)) {
1:             result = parameterValues.get(0);
commit:4a603a9
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.broker.region.virtual.FilteredDestination;
0: import org.apache.activemq.schema.core.DtoFilteredDestination;
/////////////////////////////////////////////////////////////////////////
1:         } else if (DtoFilteredDestination.class.isAssignableFrom(elementContent.getClass())) {
0:             return new FilteredDestination();            
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
0: import javax.xml.bind.JAXBElement;
1: import java.lang.reflect.Method;
1: import java.util.HashSet;
0: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.schema.core.DtoTopic;
0: import org.apache.activemq.schema.core.DtoQueue;
1: import org.apache.activemq.schema.core.DtoAuthenticationUser;
1: import org.apache.activemq.security.AuthenticationUser;
1: 
1: public class JAXBUtils {
1: 
1:     public static Method findSetter(Object instance, String elementName) {
1:         String setter = "set" + elementName;
1:         for (Method m : instance.getClass().getMethods()) {
1:             if (setter.equals(m.getName())) {
1:                 return m;
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     public static Object inferTargetObject(Object elementContent) {
1:         if (DtoTopic.class.isAssignableFrom(elementContent.getClass())) {
1:             return new ActiveMQTopic();
1:         } else if (DtoQueue.class.isAssignableFrom(elementContent.getClass())) {
1:             return new ActiveMQQueue();
1:         } else if (DtoAuthenticationUser.class.isAssignableFrom(elementContent.getClass())) {
1:             return new AuthenticationUser();
1:         } else {
1:             return new Object();
1:         }
1:     }
1: 
1:     public static Object matchType(List<Object> parameterValues, Class<?> aClass) {
1:         Object result = parameterValues;
1:         if (Set.class.isAssignableFrom(aClass)) {
1:             result = new HashSet(parameterValues);
1:         }
1:         return result;
1:     }
1: 
1: }
============================================================================