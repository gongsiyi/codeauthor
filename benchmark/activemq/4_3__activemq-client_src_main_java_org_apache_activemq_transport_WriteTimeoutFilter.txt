1:f561d6b: /**
1:f561d6b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f561d6b:  * contributor license agreements.  See the NOTICE file distributed with
1:f561d6b:  * this work for additional information regarding copyright ownership.
1:f561d6b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f561d6b:  * (the "License"); you may not use this file except in compliance with
1:f561d6b:  * the License.  You may obtain a copy of the License at
1:f561d6b:  *
1:f561d6b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f561d6b:  *
1:f561d6b:  * Unless required by applicable law or agreed to in writing, software
1:f561d6b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f561d6b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f561d6b:  * See the License for the specific language governing permissions and
1:f561d6b:  * limitations under the License.
1:f561d6b:  */
18:f561d6b: 
1:f561d6b: package org.apache.activemq.transport;
1:739e137: 
1:f561d6b: import java.io.IOException;
1:739e137: import java.net.Socket;
1:f561d6b: import java.util.Iterator;
1:f561d6b: import java.util.concurrent.ConcurrentLinkedQueue;
1:f561d6b: import java.util.concurrent.atomic.AtomicInteger;
1:739e137: 
1:2189100: import org.apache.activemq.transport.tcp.TimeStampStream;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:f561d6b: 
1:f561d6b: /**
1:f561d6b:  * This filter implements write timeouts for socket write operations.
1:f561d6b:  * When using blocking IO, the Java implementation doesn't have an explicit flag
1:f561d6b:  * to set a timeout, and can cause operations to block forever (or until the TCP stack implementation times out the retransmissions,
1:f561d6b:  * which is usually around 13-30 minutes).<br/>
1:f561d6b:  * To enable this transport, in the transport URI, simpley add<br/>
1:f561d6b:  * <code>transport.soWriteTimeout=<value in millis></code>.<br/>
1:f561d6b:  * For example (15 second timeout on write operations to the socket):</br>
1:f561d6b:  * <pre><code>
1:0885c60:  * &lt;transportConnector
1:0885c60:  *     name=&quot;tcp1&quot;
1:f561d6b:  *     uri=&quot;tcp://127.0.0.1:61616?transport.soTimeout=10000&amp;transport.soWriteTimeout=15000"
1:f561d6b:  * /&gt;
1:f561d6b:  * </code></pre><br/>
1:f561d6b:  * For example (enable default timeout on the socket):</br>
1:f561d6b:  * <pre><code>
1:0885c60:  * &lt;transportConnector
1:0885c60:  *     name=&quot;tcp1&quot;
1:f561d6b:  *     uri=&quot;tcp://127.0.0.1:61616?transport.soTimeout=10000&amp;transport.soWriteTimeout=15000"
1:f561d6b:  * /&gt;
1:f561d6b:  * </code></pre>
1:f561d6b:  * @author Filip Hanik
1:f561d6b:  *
1:f561d6b:  */
1:f561d6b: public class WriteTimeoutFilter extends TransportFilter {
1:739e137: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(WriteTimeoutFilter.class);
1:f561d6b:     protected static ConcurrentLinkedQueue<WriteTimeoutFilter> writers = new ConcurrentLinkedQueue<WriteTimeoutFilter>();
1:f561d6b:     protected static AtomicInteger messageCounter = new AtomicInteger(0);
1:0885c60:     protected static TimeoutThread timeoutThread = new TimeoutThread();
1:0885c60: 
1:739e137:     protected static long sleep = 5000l;
1:739e137: 
1:739e137:     protected long writeTimeout = -1;
1:0885c60: 
1:f561d6b:     public WriteTimeoutFilter(Transport next) {
1:f561d6b:         super(next);
5:f561d6b:     }
1:739e137: 
1:f561d6b:     @Override
1:f561d6b:     public void oneway(Object command) throws IOException {
1:f561d6b:         try {
1:f561d6b:             registerWrite(this);
1:f561d6b:             super.oneway(command);
1:f561d6b:         } catch (IOException x) {
1:f561d6b:             throw x;
1:f561d6b:         } finally {
1:f561d6b:             deRegisterWrite(this,false,null);
1:f561d6b:         }
1:f561d6b:     }
1:0885c60: 
1:739e137:     public long getWriteTimeout() {
1:739e137:         return writeTimeout;
1:739e137:     }
1:739e137: 
1:739e137:     public void setWriteTimeout(long writeTimeout) {
1:739e137:         this.writeTimeout = writeTimeout;
1:739e137:     }
1:0885c60: 
1:739e137:     public static long getSleep() {
1:739e137:         return sleep;
1:739e137:     }
1:739e137: 
1:739e137:     public static void setSleep(long sleep) {
1:739e137:         WriteTimeoutFilter.sleep = sleep;
1:739e137:     }
1:0885c60: 
1:739e137: 
1:2189100:     protected TimeStampStream getWriter() {
1:2189100:         return next.narrow(TimeStampStream.class);
1:739e137:     }
1:0885c60: 
1:739e137:     protected Socket getSocket() {
1:739e137:         return next.narrow(Socket.class);
1:739e137:     }
1:0885c60: 
1:739e137:     protected static void registerWrite(WriteTimeoutFilter filter) {
1:739e137:         writers.add(filter);
1:739e137:     }
1:0885c60: 
1:f561d6b:     protected static boolean deRegisterWrite(WriteTimeoutFilter filter, boolean fail, IOException iox) {
1:0885c60:         boolean result = writers.remove(filter);
1:f561d6b:         if (result) {
1:f561d6b:             if (fail) {
1:739e137:                 String message = "Forced write timeout for:"+filter.getNext().getRemoteAddress();
1:739e137:                 LOG.warn(message);
1:739e137:                 Socket sock = filter.getSocket();
1:739e137:                 if (sock==null) {
1:739e137:                     LOG.error("Destination socket is null, unable to close socket.("+message+")");
1:739e137:                 } else {
1:739e137:                     try {
1:739e137:                         sock.close();
1:739e137:                     }catch (IOException ignore) {
1:739e137:                     }
1:739e137:                 }
1:f561d6b:             }
1:f561d6b:         }
1:f561d6b:         return result;
1:f561d6b:     }
1:0885c60: 
1:f561d6b:     @Override
1:f561d6b:     public void start() throws Exception {
1:f561d6b:         super.start();
1:f561d6b:     }
1:0885c60: 
1:f561d6b:     @Override
1:f561d6b:     public void stop() throws Exception {
1:f561d6b:         super.stop();
1:f561d6b:     }
1:0885c60: 
1:f561d6b:     protected static class TimeoutThread extends Thread {
1:f561d6b:         static AtomicInteger instance = new AtomicInteger(0);
1:f561d6b:         boolean run = true;
1:f561d6b:         public TimeoutThread() {
1:f561d6b:             setName("WriteTimeoutFilter-Timeout-"+instance.incrementAndGet());
1:f561d6b:             setDaemon(true);
1:f561d6b:             setPriority(Thread.MIN_PRIORITY);
1:f561d6b:             start();
1:f561d6b:         }
1:0885c60: 
1:739e137: 
1:f561d6b:         public void run() {
1:f561d6b:             while (run) {
1:0885c60:                 boolean error = false;
1:f561d6b:                 try {
1:0885c60:                     if (!interrupted()) {
1:0885c60:                         Iterator<WriteTimeoutFilter> filters = writers.iterator();
1:0885c60:                         while (run && filters.hasNext()) {
1:739e137:                             WriteTimeoutFilter filter = filters.next();
1:739e137:                             if (filter.getWriteTimeout()<=0) continue; //no timeout set
1:739e137:                             long writeStart = filter.getWriter().getWriteTimestamp();
1:739e137:                             long delta = (filter.getWriter().isWriting() && writeStart>0)?System.currentTimeMillis() - writeStart:-1;
1:739e137:                             if (delta>filter.getWriteTimeout()) {
1:739e137:                                 WriteTimeoutFilter.deRegisterWrite(filter, true,null);
1:739e137:                             }//if timeout
1:739e137:                         }//while
1:739e137:                     }//if interrupted
1:739e137:                     try {
1:739e137:                         Thread.sleep(getSleep());
1:739e137:                         error = false;
1:739e137:                     } catch (InterruptedException x) {
1:739e137:                         //do nothing
1:739e137:                     }
1:739e137:                 }catch (Throwable t) { //make sure this thread never dies
1:739e137:                     if (!error) { //use error flag to avoid filling up the logs
1:739e137:                         LOG.error("WriteTimeout thread unable validate existing sockets.",t);
1:739e137:                         error = true;
1:739e137:                     }
1:f561d6b:                 }
1:f561d6b:             }
1:f561d6b:         }
1:f561d6b:     }
1:739e137: 
1:f561d6b: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0885c60
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * &lt;transportConnector
1:  *     name=&quot;tcp1&quot;
1:  * &lt;transportConnector
1:  *     name=&quot;tcp1&quot;
/////////////////////////////////////////////////////////////////////////
1:     protected static TimeoutThread timeoutThread = new TimeoutThread();
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:         boolean result = writers.remove(filter);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:                 boolean error = false;
1:                     if (!interrupted()) {
1:                         Iterator<WriteTimeoutFilter> filters = writers.iterator();
1:                         while (run && filters.hasNext()) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(WriteTimeoutFilter.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:2189100
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TimeStampStream;
/////////////////////////////////////////////////////////////////////////
1:     protected TimeStampStream getWriter() {
1:         return next.narrow(TimeStampStream.class);
commit:739e137
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final Log LOG = LogFactory.getLog(WriteTimeoutFilter.class);
1:     protected static long sleep = 5000l;
1: 
1:     protected long writeTimeout = -1;
1:     
/////////////////////////////////////////////////////////////////////////
1:     public long getWriteTimeout() {
1:         return writeTimeout;
1:     }
1:     public void setWriteTimeout(long writeTimeout) {
1:         this.writeTimeout = writeTimeout;
1:     }
1:     
1:     public static long getSleep() {
1:         return sleep;
1:     }
1: 
1:     public static void setSleep(long sleep) {
1:         WriteTimeoutFilter.sleep = sleep;
1:     }
1: 
1:     
0:     protected TcpBufferedOutputStream getWriter() {
0:         return next.narrow(TcpBufferedOutputStream.class);
1:     }
1:     
1:     protected Socket getSocket() {
1:         return next.narrow(Socket.class);
1:     }
1:     
1:     protected static void registerWrite(WriteTimeoutFilter filter) {
1:         writers.add(filter);
1:     }
1:     
1:                 String message = "Forced write timeout for:"+filter.getNext().getRemoteAddress();
1:                 LOG.warn(message);
1:                 Socket sock = filter.getSocket();
1:                 if (sock==null) {
1:                     LOG.error("Destination socket is null, unable to close socket.("+message+")");
1:                 } else {
1:                     try {
1:                         sock.close();
1:                     }catch (IOException ignore) {
1:                     }
1:                 }
/////////////////////////////////////////////////////////////////////////
0:             	boolean error = false;
0:                 	if (!interrupted()) {
0:                 		Iterator<WriteTimeoutFilter> filters = writers.iterator();
0:                 	    while (run && filters.hasNext()) { 
1:                             WriteTimeoutFilter filter = filters.next();
1:                             if (filter.getWriteTimeout()<=0) continue; //no timeout set
1:                             long writeStart = filter.getWriter().getWriteTimestamp();
1:                             long delta = (filter.getWriter().isWriting() && writeStart>0)?System.currentTimeMillis() - writeStart:-1;
1:                             if (delta>filter.getWriteTimeout()) {
1:                                 WriteTimeoutFilter.deRegisterWrite(filter, true,null);
1:                             }//if timeout
1:                         }//while
1:                     }//if interrupted
1:                     try {
1:                         Thread.sleep(getSleep());
1:                         error = false;
1:                     } catch (InterruptedException x) {
1:                         //do nothing
1:                     }
1:                 }catch (Throwable t) { //make sure this thread never dies
1:                     if (!error) { //use error flag to avoid filling up the logs
1:                         LOG.error("WriteTimeout thread unable validate existing sockets.",t);
1:                         error = true;
1:                     }
commit:f561d6b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport;
1: 
1: import java.io.IOException;
1: import java.util.Iterator;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.atomic.AtomicInteger;
0: import java.util.concurrent.locks.Condition;
0: import java.util.concurrent.locks.ReentrantLock;
1: 
0: import org.apache.activemq.transport.tcp.TcpBufferedOutputStream;
0: import org.apache.activemq.transport.tcp.TcpTransport;
1: 
1: /**
1:  * This filter implements write timeouts for socket write operations.
1:  * When using blocking IO, the Java implementation doesn't have an explicit flag
1:  * to set a timeout, and can cause operations to block forever (or until the TCP stack implementation times out the retransmissions,
1:  * which is usually around 13-30 minutes).<br/>
1:  * To enable this transport, in the transport URI, simpley add<br/>
1:  * <code>transport.soWriteTimeout=<value in millis></code>.<br/>
1:  * For example (15 second timeout on write operations to the socket):</br>
1:  * <pre><code>
0:  * &lt;transportConnector 
0:  *     name=&quot;tcp1&quot; 
1:  *     uri=&quot;tcp://127.0.0.1:61616?transport.soTimeout=10000&amp;transport.soWriteTimeout=15000"
1:  * /&gt;
1:  * </code></pre><br/>
1:  * For example (enable default timeout on the socket):</br>
1:  * <pre><code>
0:  * &lt;transportConnector 
0:  *     name=&quot;tcp1&quot; 
1:  *     uri=&quot;tcp://127.0.0.1:61616?transport.soTimeout=10000&amp;transport.soWriteTimeout=15000"
1:  * /&gt;
1:  * </code></pre>
1:  * @author Filip Hanik
1:  *
1:  */
1: public class WriteTimeoutFilter extends TransportFilter {
1: 	
1:     protected static ConcurrentLinkedQueue<WriteTimeoutFilter> writers = new ConcurrentLinkedQueue<WriteTimeoutFilter>();
1:     protected static AtomicInteger messageCounter = new AtomicInteger(0);
0:     protected static TimeoutThread timeoutThread = new TimeoutThread(); 
1:     
0: 	protected long writeTimeout = -1;
1: 	
1:     public WriteTimeoutFilter(Transport next) {
1:         super(next);
1:     }
1: 
1:     @Override
1:     public void oneway(Object command) throws IOException {
1:         try {
1:             registerWrite(this);
1:             super.oneway(command);
1:         } catch (IOException x) {
0:             deRegisterWrite(this,true,x);
1:             throw x;
1:         } finally {
1:             deRegisterWrite(this,false,null);
1:         }
1:     }
1:     
0: 	public long getWriteTimeout() {
0: 		return writeTimeout;
1: 	}
1: 
0: 	public void setWriteTimeout(long writeTimeout) {
0: 		this.writeTimeout = writeTimeout;
1: 	}
1: 	
0: 	protected TcpBufferedOutputStream getWriter() {
0: 	    return next.narrow(TcpBufferedOutputStream.class);
1: 	}
1: 	
0: 	protected static void registerWrite(WriteTimeoutFilter filter) {
0: 	    writers.add(filter);
1: 	}
1: 	
1:     protected static boolean deRegisterWrite(WriteTimeoutFilter filter, boolean fail, IOException iox) {
0:         boolean result = writers.remove(filter); 
1:         if (result) {
1:             if (fail) {
0:                 IOException ex = (iox!=null)?iox:new IOException("Forced write timeout for:"+filter.getNext().getRemoteAddress());
0:                 filter.getTransportListener().onException(ex);
1:             }
1:         }
1:         return result;
1:     }
1:     
1:     @Override
1:     public void start() throws Exception {
1:         super.start();
1:     }
1:     
1:     @Override
1:     public void stop() throws Exception {
1:         super.stop();
1:     }
1:     
1:     protected static class TimeoutThread extends Thread {
1:         static AtomicInteger instance = new AtomicInteger(0);
1:         boolean run = true;
1:         public TimeoutThread() {
1:             setName("WriteTimeoutFilter-Timeout-"+instance.incrementAndGet());
1:             setDaemon(true);
1:             setPriority(Thread.MIN_PRIORITY);
1:             start();
1:         }
1: 
1:         
1:         public void run() {
1:             while (run) {
0:                 if (!interrupted()) {
0:                     Iterator<WriteTimeoutFilter> filters = writers.iterator();
0:                     while (run && filters.hasNext()) { 
0:                         WriteTimeoutFilter filter = filters.next();
0:                         if (filter.getWriteTimeout()<=0) continue; //no timeout set
0:                         long writeStart = filter.getWriter().getWriteTimestamp();
0:                         long delta = (filter.getWriter().isWriting() && writeStart>0)?System.currentTimeMillis() - writeStart:-1;
0:                         if (delta>filter.getWriteTimeout()) {
0:                             WriteTimeoutFilter.deRegisterWrite(filter, true,null);
0:                         }//if timeout
0:                     }//while
0:                 }//if interrupted
1:                 try {
0:                     Thread.sleep(5000);
0:                 } catch (InterruptedException x) {
0:                     //do nothing
1:                 }
1:             }
1:         }
1:     }
1: 
1: }
============================================================================