1:f1e4459: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:f1e4459:  *
1:f1e4459:  * Unless required by applicable law or agreed to in writing, software
1:f1e4459:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f1e4459:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f1e4459:  * See the License for the specific language governing permissions and
1:f1e4459:  * limitations under the License.
1:f1e4459:  */
1:f1e4459: package org.apache.activemq.openwire;
14:f1e4459: 
1:f1e4459: import java.io.ByteArrayInputStream;
1:f1e4459: import java.io.ByteArrayOutputStream;
1:f1e4459: import java.io.DataInputStream;
1:f1e4459: import java.io.DataOutputStream;
1:f1e4459: import java.io.IOException;
1:f1e4459: 
1:f1e4459: import junit.framework.TestCase;
1:c7d559f: 
1:8a82119: import org.apache.activemq.command.ActiveMQTextMessage;
1:f812e34: import org.apache.activemq.command.SessionId;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:f1e4459: 
1:f1e4459: /**
1:c7d559f:  *
1:f1e4459:  */
1:f1e4459: public class NumberRangesWhileMarshallingTest extends TestCase {
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NumberRangesWhileMarshallingTest.class);
1:9f9fe90: 
1:f1e4459:     protected String connectionId = "Cheese";
1:f1e4459:     protected ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:f1e4459:     protected DataOutputStream ds = new DataOutputStream(buffer);
1:f1e4459:     protected OpenWireFormat openWireformat;
1:f1e4459:     protected int endOfStreamMarker = 0x12345678;
1:f812e34: 
1:f1e4459:     public void testLongNumberRanges() throws Exception {
1:f812e34:         long[] numberValues = {
1:ecf89a6:             // bytes
1:ecf89a6:             0, 1, 0x7e, 0x7f, 0x80, 0x81, 0xf0, 0xff,
1:ecf89a6:             // shorts
1:ecf89a6:             0x7eff, 0x7fffL, 0x8001L, 0x8000L, 0xe000L, 0xe0001L, 0xff00L, 0xffffL,
1:ecf89a6:             // ints
1:ecf89a6:             0x10000L, 0x700000L, 0x12345678L, 0x72345678L, 0x7fffffffL, 0x80000000L, 0x80000001L, 0xE0000001L, 0xFFFFFFFFL,
1:ecf89a6:             // 3 byte longs
1:ecf89a6:             0x123456781L, 0x1234567812L, 0x12345678123L, 0x123456781234L, 0x1234567812345L, 0x12345678123456L, 0x7e345678123456L, 0x7fffffffffffffL,
1:ecf89a6:             0x80000000000000L, 0x80000000000001L, 0xe0000000000001L, 0xffffffffffffffL,
1:ecf89a6:             // 4 byte longs
1:ecf89a6:             0x1234567812345678L, 0x7fffffffffffffffL, 0x8000000000000000L, 0x8000000000000001L, 0xe000000000000001L, 0xffffffffffffffffL, 1
1:ecf89a6:         };
1:f812e34: 
1:f1e4459:         for (int i = 0; i < numberValues.length; i++) {
1:f1e4459:             long value = numberValues[i];
1:f812e34: 
1:f1e4459:             SessionId object = new SessionId();
1:f1e4459:             object.setConnectionId(connectionId);
1:f1e4459:             object.setValue(value);
1:f1e4459:             writeObject(object);
2:f1e4459:         }
1:f1e4459:         ds.writeInt(endOfStreamMarker);
1:f812e34: 
1:f1e4459:         // now lets read from the stream
1:f1e4459:         ds.close();
1:f812e34: 
1:f1e4459:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:f1e4459:         DataInputStream dis = new DataInputStream(in);
1:f1e4459:         for (int i = 0; i < numberValues.length; i++) {
1:f1e4459:             long value = numberValues[i];
1:f1e4459:             String expected = Long.toHexString(value);
1:fc00993:             LOG.info("Unmarshaling value: " + i + " = " + expected);
1:f812e34: 
1:f812e34:             SessionId command = (SessionId)openWireformat.unmarshal(dis);
1:f812e34:             assertEquals("connection ID in object: " + i, connectionId, command.getConnectionId());
1:f1e4459:             String actual = Long.toHexString(command.getValue());
1:f812e34:             assertEquals("value of object: " + i + " was: " + actual, expected, actual);
1:f1e4459:         }
1:f1e4459:         int marker = dis.readInt();
1:f1e4459:         assertEquals("Marker int", Integer.toHexString(endOfStreamMarker), Integer.toHexString(marker));
1:f812e34: 
1:f1e4459:         // lets try read and we should get an exception
1:f1e4459:         try {
1:f1e4459:             byte value = dis.readByte();
1:c7d559f:             fail("Should have reached the end of the stream: " + value);
1:f812e34:         } catch (IOException e) {
1:f1e4459:             // worked!
1:f1e4459:         }
1:f1e4459:     }
1:f812e34: 
1:8a82119:     public void testMaxFrameSize() throws Exception {
1:8a82119:         OpenWireFormat wf = new OpenWireFormat();
1:8a82119:         wf.setMaxFrameSize(10);
1:8a82119:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:8a82119:         msg.setText("This is a test");
1:8a82119: 
1:8a82119:         writeObject(msg);
1:8a82119:         ds.writeInt(endOfStreamMarker);
1:8a82119: 
1:8a82119:         // now lets read from the stream
1:8a82119:         ds.close();
1:8a82119: 
1:8a82119:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:8a82119:         DataInputStream dis = new DataInputStream(in);
1:8a82119: 
1:8a82119:         try {
1:8a82119:             wf.unmarshal(dis);
1:8a82119:         } catch (IOException ioe) {
1:8a82119:            return;
1:8a82119:         }
1:8a82119: 
1:8a82119:         fail("Should fail because of the large frame size");
1:8a82119: 
1:8a82119: 
1:8a82119:     }
1:8a82119: 
1:c50c1f5:     public void testDefaultMaxFrameSizeUnlimited() {
1:c50c1f5:         OpenWireFormat wf = new OpenWireFormat();
1:c50c1f5:         assertEquals(Long.MAX_VALUE, wf.getMaxFrameSize());
1:c50c1f5:     }
1:c50c1f5: 
1:c7d559f:     @Override
1:f1e4459:     protected void setUp() throws Exception {
1:f1e4459:         super.setUp();
1:f1e4459:         openWireformat = createOpenWireFormat();
1:f1e4459:     }
1:f1e4459: 
1:f1e4459:     protected OpenWireFormat createOpenWireFormat() {
1:f1e4459:         OpenWireFormat wf = new OpenWireFormat();
1:f1e4459:         wf.setCacheEnabled(true);
1:f1e4459:         wf.setStackTraceEnabled(false);
1:f1e4459:         wf.setVersion(1);
1:f1e4459:         return wf;
1:f1e4459:     }
1:f1e4459: 
1:f1e4459:     private void writeObject(Object object) throws IOException {
1:f1e4459:         openWireformat.marshal(object, ds);
1:f1e4459:     }
1:f1e4459: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
1:  *
/////////////////////////////////////////////////////////////////////////
1:             fail("Should have reached the end of the stream: " + value);
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:c50c1f5
/////////////////////////////////////////////////////////////////////////
1:     public void testDefaultMaxFrameSizeUnlimited() {
1:         OpenWireFormat wf = new OpenWireFormat();
1:         assertEquals(Long.MAX_VALUE, wf.getMaxFrameSize());
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8a82119
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTextMessage;
/////////////////////////////////////////////////////////////////////////
1:     public void testMaxFrameSize() throws Exception {
1:         OpenWireFormat wf = new OpenWireFormat();
1:         wf.setMaxFrameSize(10);
1:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:         msg.setText("This is a test");
1: 
1:         writeObject(msg);
1:         ds.writeInt(endOfStreamMarker);
1: 
1:         // now lets read from the stream
1:         ds.close();
1: 
1:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:         DataInputStream dis = new DataInputStream(in);
1: 
1:         try {
1:             wf.unmarshal(dis);
1:         } catch (IOException ioe) {
1:            return;
1:         }
1: 
1:         fail("Should fail because of the large frame size");
1: 
1: 
1:     }
1: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(NumberRangesWhileMarshallingTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:             // bytes
1:             0, 1, 0x7e, 0x7f, 0x80, 0x81, 0xf0, 0xff,
1:             // shorts
1:             0x7eff, 0x7fffL, 0x8001L, 0x8000L, 0xe000L, 0xe0001L, 0xff00L, 0xffffL,
1:             // ints
1:             0x10000L, 0x700000L, 0x12345678L, 0x72345678L, 0x7fffffffL, 0x80000000L, 0x80000001L, 0xE0000001L, 0xFFFFFFFFL,
1:             // 3 byte longs
1:             0x123456781L, 0x1234567812L, 0x12345678123L, 0x123456781234L, 0x1234567812345L, 0x12345678123456L, 0x7e345678123456L, 0x7fffffffffffffL,
1:             0x80000000000000L, 0x80000000000001L, 0xe0000000000001L, 0xffffffffffffffL,
1:             // 4 byte longs
1:             0x1234567812345678L, 0x7fffffffffffffffL, 0x8000000000000000L, 0x8000000000000001L, 0xe000000000000001L, 0xffffffffffffffffL, 1
1:         };
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(NumberRangesWhileMarshallingTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Unmarshaling value: " + i + " = " + expected);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.SessionId;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1:         long[] numberValues = {
0:                                // bytes
0:                                0, 1, 0x7e, 0x7f, 0x80, 0x81, 0xf0, 0xff,
0:                                // shorts
0:                                0x7eff, 0x7fffL, 0x8001L, 0x8000L, 0xe000L, 0xe0001L, 0xff00L, 0xffffL,
0:                                // ints
0:                                0x10000L, 0x700000L, 0x12345678L, 0x72345678L, 0x7fffffffL, 0x80000000L, 0x80000001L, 0xE0000001L, 0xFFFFFFFFL,
1: 
0:                                // 3 byte longs
0:                                0x123456781L, 0x1234567812L, 0x12345678123L, 0x123456781234L, 0x1234567812345L, 0x12345678123456L, 0x7e345678123456L, 0x7fffffffffffffL,
0:                                0x80000000000000L, 0x80000000000001L, 0xe0000000000001L, 0xffffffffffffffL,
1: 
0:                                // 4 byte longs
0:                                0x1234567812345678L, 0x7fffffffffffffffL, 0x8000000000000000L, 0x8000000000000001L, 0xe000000000000001L, 0xffffffffffffffffL, 1};
1: 
1: 
1: 
1: 
1: 
1:             SessionId command = (SessionId)openWireformat.unmarshal(dis);
1:             assertEquals("connection ID in object: " + i, connectionId, command.getConnectionId());
1:             assertEquals("value of object: " + i + " was: " + actual, expected, actual);
1: 
1:         } catch (IOException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:9f9fe90
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(NumberRangesWhileMarshallingTest.class);
1:     
/////////////////////////////////////////////////////////////////////////
0:             log.info("Unmarshaling value: " + i + " = " + expected);
commit:f1e4459
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire;
1: 
0: import org.apache.activemq.command.SessionId;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
1:  *
0:  * @version $Revision$
1:  */
1: public class NumberRangesWhileMarshallingTest extends TestCase {
1: 
1:     protected String connectionId = "Cheese";
1:     protected ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:     protected DataOutputStream ds = new DataOutputStream(buffer);
1:     protected OpenWireFormat openWireformat;
1:     protected int endOfStreamMarker = 0x12345678;
1: 
1:     
1:     public void testLongNumberRanges() throws Exception {
0:         long[] numberValues = { 
0:                 // bytes
0:                 0, 1, 0x7e, 0x7f, 0x80, 0x81, 0xf0, 0xff,
0:                 // shorts
0:                 0x7eff, 0x7fffL, 0x8001L, 0x8000L, 0xe000L, 0xe0001L, 0xff00L, 0xffffL,
0:                 // ints
0:                 0x10000L, 
0:                 0x700000L, 
0:                 0x12345678L, 
0:                 0x72345678L, 
0:                 0x7fffffffL, 
0:                 0x80000000L, 
0:                 0x80000001L, 
0:                 0xE0000001L, 
0:                 0xFFFFFFFFL,
1:                 
0:                 // 3 byte longs
0:                 0x123456781L, 
0:                 0x1234567812L, 
0:                 0x12345678123L, 
0:                 0x123456781234L, 
0:                 0x1234567812345L, 
0:                 0x12345678123456L, 
0:                 0x7e345678123456L, 
0:                 0x7fffffffffffffL, 
0:                 0x80000000000000L, 
0:                 0x80000000000001L,
0:                 0xe0000000000001L, 
0:                 0xffffffffffffffL,
1:                 
0:                 // 4 byte longs
0:                 0x1234567812345678L, 
0:                 0x7fffffffffffffffL, 
0:                 0x8000000000000000L, 
0:                 0x8000000000000001L,
0:                 0xe000000000000001L, 
0:                 0xffffffffffffffffL,
0:                 1 };
1:         
1:         for (int i = 0; i < numberValues.length; i++) {
1:             long value = numberValues[i];
1:             
1:             SessionId object = new SessionId();
1:             object.setConnectionId(connectionId);
1:             object.setValue(value);
1:             writeObject(object);
1:         }
1:         ds.writeInt(endOfStreamMarker);
1:         
1:         // now lets read from the stream
1:         ds.close();
1:         
1:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:         DataInputStream dis = new DataInputStream(in);
1:         for (int i = 0; i < numberValues.length; i++) {
1:             long value = numberValues[i];
1:             String expected = Long.toHexString(value);
0:             System.out.println("Unmarshaling value: " + i + " = " + expected);
1:             
0:             SessionId command = (SessionId) openWireformat.unmarshal(dis);
0:             assertEquals("connection ID in object: "+ i, connectionId, command.getConnectionId());
1:             String actual = Long.toHexString(command.getValue());
0:             assertEquals("value of object: "+ i + " was: " + actual, expected, actual);
1:         }
1:         int marker = dis.readInt();
1:         assertEquals("Marker int", Integer.toHexString(endOfStreamMarker), Integer.toHexString(marker));
1:         
1:         // lets try read and we should get an exception
1:         try {
1:             byte value = dis.readByte();
0:             fail("Should have reached the end of the stream");
1:         }
0:         catch (IOException e) {
1:             // worked!
1:         }
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         openWireformat = createOpenWireFormat();
1:     }
1: 
1:     protected OpenWireFormat createOpenWireFormat() {
1:         OpenWireFormat wf = new OpenWireFormat();
1:         wf.setCacheEnabled(true);
1:         wf.setStackTraceEnabled(false);
1:         wf.setVersion(1);
1:         return wf;
1:     }
1: 
1:     private void writeObject(Object object) throws IOException {
1:         openWireformat.marshal(object, ds);
1:     }
1: }
============================================================================