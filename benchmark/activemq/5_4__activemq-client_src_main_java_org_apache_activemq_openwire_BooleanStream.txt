1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.openwire;
8:d29ca2a: 
1:4821b9d: import java.io.DataInput;
1:4821b9d: import java.io.DataOutput;
1:d29ca2a: import java.io.IOException;
1:c2fc820: import java.nio.ByteBuffer;
1:d29ca2a: 
1:fc00993: public final class BooleanStream {
1:d29ca2a: 
1:d29ca2a:     byte data[] = new byte[48];
1:f812e34:     short arrayLimit;
1:f812e34:     short arrayPos;
1:d29ca2a:     byte bytePos;
1:f812e34: 
1:d29ca2a:     public boolean readBoolean() throws IOException {
1:d29ca2a:         assert arrayPos <= arrayLimit;
1:d29ca2a:         byte b = data[arrayPos];
1:f812e34:         boolean rc = ((b >> bytePos) & 0x01) != 0;
1:d29ca2a:         bytePos++;
1:f812e34:         if (bytePos >= 8) {
1:f812e34:             bytePos = 0;
1:d29ca2a:             arrayPos++;
1:d29ca2a:         }
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void writeBoolean(boolean value) throws IOException {
1:f812e34:         if (bytePos == 0) {
1:d29ca2a:             arrayLimit++;
1:f812e34:             if (arrayLimit >= data.length) {
1:d29ca2a:                 // re-grow the array.
1:f812e34:                 byte d[] = new byte[data.length * 2];
1:d29ca2a:                 System.arraycopy(data, 0, d, 0, data.length);
1:d29ca2a:                 data = d;
1:d29ca2a:             }
1:d29ca2a:         }
1:f812e34:         if (value) {
1:ecf89a6:             data[arrayPos] |= 0x01 << bytePos;
1:d29ca2a:         }
1:d29ca2a:         bytePos++;
1:f812e34:         if (bytePos >= 8) {
1:f812e34:             bytePos = 0;
1:d29ca2a:             arrayPos++;
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:4821b9d:     public void marshal(DataOutput dataOut) throws IOException {
1:f812e34:         if (arrayLimit < 64) {
2:d29ca2a:             dataOut.writeByte(arrayLimit);
1:f812e34:         } else if (arrayLimit < 256) { // max value of unsigned byte
1:d29ca2a:             dataOut.writeByte(0xC0);
1:f812e34:             dataOut.writeByte(arrayLimit);
1:d29ca2a:         } else {
1:c874b21:             dataOut.writeByte(0x80);
1:f812e34:             dataOut.writeShort(arrayLimit);
1:d29ca2a:         }
1:f812e34: 
1:d29ca2a:         dataOut.write(data, 0, arrayLimit);
1:d29ca2a:         clear();
1:d29ca2a:     }
1:f812e34: 
1:c2fc820:     public void marshal(ByteBuffer dataOut) {
1:f812e34:         if (arrayLimit < 64) {
1:f812e34:             dataOut.put((byte)arrayLimit);
1:f812e34:         } else if (arrayLimit < 256) { // max value of unsigned byte
1:f812e34:             dataOut.put((byte)0xC0);
1:f812e34:             dataOut.put((byte)arrayLimit);
1:c2fc820:         } else {
1:f812e34:             dataOut.put((byte)0x80);
1:f812e34:             dataOut.putShort(arrayLimit);
1:d29ca2a:         }
1:f812e34: 
1:c2fc820:         dataOut.put(data, 0, arrayLimit);
1:d29ca2a:     }
1:d29ca2a: 
1:4821b9d:     public void unmarshal(DataInput dataIn) throws IOException {
1:f812e34: 
1:f812e34:         arrayLimit = (short)(dataIn.readByte() & 0xFF);
1:f812e34:         if (arrayLimit == 0xC0) {
1:d29ca2a:             arrayLimit = (short)(dataIn.readByte() & 0xFF);
1:f812e34:         } else if (arrayLimit == 0x80) {
1:4a65a33:             arrayLimit = dataIn.readShort();
1:f812e34:         }
1:f812e34:         if (data.length < arrayLimit) {
1:d29ca2a:             data = new byte[arrayLimit];
1:d29ca2a:         }
1:d29ca2a:         dataIn.readFully(data, 0, arrayLimit);
1:d29ca2a:         clear();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void clear() {
1:f812e34:         arrayPos = 0;
1:f812e34:         bytePos = 0;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int marshalledSize() {
1:f812e34:         if (arrayLimit < 64) {
1:f812e34:             return 1 + arrayLimit;
1:1d6fb63:         } else if (arrayLimit < 256) {
1:f812e34:             return 2 + arrayLimit;
1:d29ca2a:         } else {
1:f812e34:             return 3 + arrayLimit;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
2:c2fc820: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:             data[arrayPos] |= 0x01 << bytePos;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public final class BooleanStream {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     short arrayLimit;
1:     short arrayPos;
1: 
1:         boolean rc = ((b >> bytePos) & 0x01) != 0;
1:         if (bytePos >= 8) {
1:             bytePos = 0;
1: 
1:         if (bytePos == 0) {
1:             if (arrayLimit >= data.length) {
1:                 byte d[] = new byte[data.length * 2];
1:         if (value) {
0:             data[arrayPos] |= (0x01 << bytePos);
1:         if (bytePos >= 8) {
1:             bytePos = 0;
1: 
1:         if (arrayLimit < 64) {
1:         } else if (arrayLimit < 256) { // max value of unsigned byte
1:             dataOut.writeByte(arrayLimit);
1:             dataOut.writeShort(arrayLimit);
1: 
1: 
1:         if (arrayLimit < 64) {
1:             dataOut.put((byte)arrayLimit);
1:         } else if (arrayLimit < 256) { // max value of unsigned byte
1:             dataOut.put((byte)0xC0);
1:             dataOut.put((byte)arrayLimit);
1:             dataOut.put((byte)0x80);
1:             dataOut.putShort(arrayLimit);
1: 
1: 
1:         arrayLimit = (short)(dataIn.readByte() & 0xFF);
1:         if (arrayLimit == 0xC0) {
1:         } else if (arrayLimit == 0x80) {
1:         }
1:         if (data.length < arrayLimit) {
1: 
1:         arrayPos = 0;
1:         bytePos = 0;
1:         if (arrayLimit < 64) {
1:             return 1 + arrayLimit;
1:             return 2 + arrayLimit;
1:             return 3 + arrayLimit;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:4a65a33
/////////////////////////////////////////////////////////////////////////
0:         arrayLimit = (short) (dataIn.readByte() & 0xFF);
0:         if ( arrayLimit == 0xC0 ) {
0:         } else if( arrayLimit == 0x80 ) {
1:             arrayLimit = dataIn.readShort();
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
0: final public class BooleanStream {
1: 
1:     byte data[] = new byte[48];
0:     short arrayLimit;    
0:     short arrayPos;    
1:     byte bytePos;
1:     
1:     public boolean readBoolean() throws IOException {
1:         assert arrayPos <= arrayLimit;
1:         byte b = data[arrayPos];
0:         boolean rc = ((b>>bytePos)&0x01)!=0;
1:         bytePos++;
0:         if( bytePos >= 8 ) {
0:             bytePos=0;
1:             arrayPos++;
1:         }
1:         return rc;
1:     }
1:     
1:     public void writeBoolean(boolean value) throws IOException {
0:         if( bytePos == 0 ) {
1:             arrayLimit++;
0:             if( arrayLimit >= data.length ) {
1:                 // re-grow the array.
0:                 byte d[] = new byte[data.length*2];
1:                 System.arraycopy(data, 0, d, 0, data.length);
1:                 data = d;
1:             }
1:         }
0:         if( value ) {
0:             data[arrayPos] |= (0x01 << bytePos); 
1:         }
1:         bytePos++;
0:         if( bytePos >= 8 ) {
0:             bytePos=0;
1:             arrayPos++;
1:         }
1:     }
1:     
0:     public void marshal(DataOutputStream dataOut) throws IOException {
0:         if( arrayLimit < 64 ) {
1:             dataOut.writeByte(arrayLimit);
0:         } else if( arrayLimit < 256 ) { // max value of unsigned byte
1:             dataOut.writeByte(0xC0);
1:             dataOut.writeByte(arrayLimit);            
1:         } else {
0:             dataOut.writeByte(0xE0);
0:             dataOut.writeShort(arrayLimit);            
1:         }
1:         
1:         dataOut.write(data, 0, arrayLimit);
1:         clear();
1:     }
1:     
0:     public void unmarshal(DataInputStream dataIn) throws IOException {
1:         
0:         arrayLimit = dataIn.readByte();
0:         if( (arrayLimit & 0xE0)!=0 ) {
0:             arrayLimit = dataIn.readShort();
0:         } else if ( (arrayLimit & 0xC0)!=0 ) {
1:             arrayLimit = (short)(dataIn.readByte() & 0xFF);
1:         } 
0:         if( data.length < arrayLimit ) {
1:             data = new byte[arrayLimit];
1:         }
1:         dataIn.readFully(data, 0, arrayLimit);
1:         clear();
1:     }
1:     
1:     public void clear() {
0:         arrayPos=0;
0:         bytePos=0;
1:     }
1: 
1:     public int marshalledSize() {
0:         if( arrayLimit < 64 ) {
0:             return 1+arrayLimit;
1:         } else {
0:             return 2+arrayLimit;
1:         }
1:     }
1: 
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:4821b9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
/////////////////////////////////////////////////////////////////////////
1:     public void marshal(DataOutput dataOut) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void unmarshal(DataInput dataIn) throws IOException {
author:James Strachan
-------------------------------------------------------------------------------
commit:c2fc820
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:     public void marshal(ByteBuffer dataOut) {
0:         if( arrayLimit < 64 ) {
0:             dataOut.put((byte) arrayLimit);
0:         } else if( arrayLimit < 256 ) { // max value of unsigned byte
0:             dataOut.put((byte) 0xC0);
0:             dataOut.put((byte) arrayLimit);            
1:         } else {
0:             dataOut.put((byte) 0x80);
0:             dataOut.putShort(arrayLimit);            
1:         }
0:         
1:         dataOut.put(data, 0, arrayLimit);
1:     }
0: 
0: 
commit:c874b21
/////////////////////////////////////////////////////////////////////////
1:             dataOut.writeByte(0x80);
/////////////////////////////////////////////////////////////////////////
0:         if( (arrayLimit & 0x80)!=0 ) {
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:1d6fb63
/////////////////////////////////////////////////////////////////////////
1:         } else if (arrayLimit < 256) {
0:         } else {
0:             return 3+arrayLimit;
============================================================================