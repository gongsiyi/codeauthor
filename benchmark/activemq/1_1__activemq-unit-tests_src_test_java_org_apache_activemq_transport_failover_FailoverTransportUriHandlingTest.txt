1:1d52f3b: /**
1:1d52f3b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d52f3b:  * contributor license agreements.  See the NOTICE file distributed with
1:1d52f3b:  * this work for additional information regarding copyright ownership.
1:1d52f3b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d52f3b:  * (the "License"); you may not use this file except in compliance with
1:1d52f3b:  * the License.  You may obtain a copy of the License at
1:1d52f3b:  *
1:1d52f3b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1d52f3b:  *
1:1d52f3b:  * Unless required by applicable law or agreed to in writing, software
1:1d52f3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d52f3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d52f3b:  * See the License for the specific language governing permissions and
1:1d52f3b:  * limitations under the License.
1:1d52f3b:  */
1:1d52f3b: package org.apache.activemq.transport.failover;
1:1d52f3b: 
1:1d52f3b: import static org.junit.Assert.*;
1:1d52f3b: 
1:1d52f3b: import java.lang.reflect.Field;
1:1d52f3b: import java.net.URI;
1:1d52f3b: import java.util.Collection;
1:1d52f3b: 
1:1d52f3b: import org.apache.activemq.transport.failover.FailoverTransport;
1:1d52f3b: import org.junit.Test;
1:1d52f3b: 
1:1d52f3b: public class FailoverTransportUriHandlingTest {
1:1d52f3b: 
1:1d52f3b:     @Test
1:1d52f3b:     public void testFailoverTransportAddWithInitialUnknown() throws Exception {
1:1d52f3b:         FailoverTransport transport = new FailoverTransport();
1:1d52f3b: 
1:1d52f3b:         final String initialUri = "tcp://no.existing.hostname:61616";
1:1d52f3b: 
1:1d52f3b:         transport.add(false, initialUri);
1:1d52f3b: 
1:1d52f3b:         String[] uriArray = new String[] {"tcp://127.0.0.2:61616",
1:1d52f3b:                                           "tcp://localhost:61616",
1:1d52f3b:                                           "tcp://localhost:61617"};
1:1d52f3b: 
1:1d52f3b:         for(String uri : uriArray) {
1:1d52f3b:             transport.add(false, uri);
1:1d52f3b:         }
1:1d52f3b: 
1:1d52f3b:         Collection<URI> uris = getRegisteredUrlsFromPrivateField(transport);
1:1d52f3b: 
1:1d52f3b:         for(String uri : uriArray) {
1:1d52f3b:             assertTrue("Collection should contain: " + uri, uris.contains(new URI(uri)));
1:1d52f3b:         }
1:1d52f3b:     }
1:1d52f3b: 
1:1d52f3b:     @Test
1:1d52f3b:     public void testFailoverTransportAddWithInitialKnown() throws Exception {
1:1d52f3b:         FailoverTransport transport = new FailoverTransport();
1:1d52f3b: 
1:1d52f3b:         final String initialUri = "tcp://localhost:61616";
1:1d52f3b: 
1:1d52f3b:         transport.add(false, initialUri);
1:1d52f3b: 
1:1d52f3b:         String[] uriArray = new String[] {"tcp://127.0.0.2:61616",
1:1d52f3b:                                           "tcp://no.existing.hostname:61616",
1:1d52f3b:                                           "tcp://localhost:61617"};
1:1d52f3b: 
1:1d52f3b:         for(String uri : uriArray) {
1:1d52f3b:             transport.add(false, uri);
1:1d52f3b:         }
1:1d52f3b: 
1:1d52f3b:         Collection<URI> uris = getRegisteredUrlsFromPrivateField(transport);
1:1d52f3b: 
1:1d52f3b:         for(String uri : uriArray) {
1:1d52f3b:             assertTrue("Collection should contain: " + uri, uris.contains(new URI(uri)));
1:1d52f3b:         }
1:1d52f3b:     }
1:1d52f3b: 
1:1d52f3b:     @Test
1:1d52f3b:     public void testFailoverTransportAddWithPreventsDups() throws Exception {
1:1d52f3b:         FailoverTransport transport = new FailoverTransport();
1:1d52f3b: 
1:1d52f3b:         final String initialUri = "tcp://localhost:61616";
1:1d52f3b: 
1:1d52f3b:         transport.add(false, initialUri);
1:1d52f3b: 
1:1d52f3b:         String[] uriArray = new String[] {"tcp://127.0.0.2:61616",
1:1d52f3b:                                           "tcp://localhost:61616",
1:1d52f3b:                                           "tcp://no.existing.hostname:61616",
1:1d52f3b:                                           "tcp://localhost:61617",
1:1d52f3b:                                           "tcp://127.0.0.1:61616"};
1:1d52f3b: 
1:1d52f3b:         for(String uri : uriArray) {
1:1d52f3b:             transport.add(false, uri);
1:1d52f3b:         }
1:1d52f3b: 
1:1d52f3b:         Collection<URI> uris = getRegisteredUrlsFromPrivateField(transport);
1:1d52f3b: 
1:1d52f3b:         assertEquals(4, uris.size());
1:1d52f3b: 
1:1d52f3b:         // Ensure even the unknowns get checked.
1:1d52f3b:         transport.add(false, "tcp://no.existing.hostname:61616");
1:1d52f3b: 
1:1d52f3b:         uris = getRegisteredUrlsFromPrivateField(transport);
1:1d52f3b: 
1:1d52f3b:         assertEquals(4, uris.size());
1:1d52f3b:     }
1:1d52f3b: 
1:1d52f3b:     @Test
1:1d52f3b:     public void testFailoverTransportAddArray() throws Exception {
1:1d52f3b:         FailoverTransport transport = new FailoverTransport();
1:1d52f3b: 
1:1d52f3b:         final String initialUri = "tcp://no.existing.hostname:61616";
1:1d52f3b: 
1:1d52f3b:         transport.add(false, initialUri);
1:1d52f3b: 
1:1d52f3b:         URI[] uriArray = new URI[] {new URI("tcp://127.0.0.2:61616"),
1:1d52f3b:                                     new URI("tcp://localhost:61616"),
1:1d52f3b:                                     new URI("tcp://localhost:61617")};
1:1d52f3b: 
1:1d52f3b:         transport.add(false, uriArray);
1:1d52f3b: 
1:1d52f3b:         Collection<URI> uris = getRegisteredUrlsFromPrivateField(transport);
1:1d52f3b: 
1:1d52f3b:         for(URI uri : uriArray) {
1:1d52f3b:             assertTrue("Collection should contain: " + uri, uris.contains(uri));
1:1d52f3b:         }
1:1d52f3b: 
1:1d52f3b:         assertEquals(4, uris.size());
1:1d52f3b: 
1:1d52f3b:         // Ensure even the unknowns get checked.
1:1d52f3b:         transport.add(false, "tcp://no.existing.hostname:61616");
1:1d52f3b: 
1:1d52f3b:         uris = getRegisteredUrlsFromPrivateField(transport);
1:1d52f3b: 
1:1d52f3b:         assertEquals(4, uris.size());
1:1d52f3b: 
1:1d52f3b:         transport.add(false, uriArray);
1:1d52f3b: 
1:1d52f3b:         assertEquals(4, uris.size());
1:1d52f3b:     }
1:1d52f3b: 
1:1d52f3b:     @SuppressWarnings("unchecked")
1:1d52f3b:     private Collection<URI> getRegisteredUrlsFromPrivateField(FailoverTransport failoverTransport) throws SecurityException, NoSuchFieldException, IllegalAccessException {
1:1d52f3b:         Field urisField = failoverTransport.getClass().getDeclaredField("uris");
1:1d52f3b:         urisField.setAccessible(true);
1:1d52f3b:         return (Collection<URI>) urisField.get(failoverTransport);
1:1d52f3b:     }
1:1d52f3b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:1d52f3b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.lang.reflect.Field;
1: import java.net.URI;
1: import java.util.Collection;
1: 
1: import org.apache.activemq.transport.failover.FailoverTransport;
1: import org.junit.Test;
1: 
1: public class FailoverTransportUriHandlingTest {
1: 
1:     @Test
1:     public void testFailoverTransportAddWithInitialUnknown() throws Exception {
1:         FailoverTransport transport = new FailoverTransport();
1: 
1:         final String initialUri = "tcp://no.existing.hostname:61616";
1: 
1:         transport.add(false, initialUri);
1: 
1:         String[] uriArray = new String[] {"tcp://127.0.0.2:61616",
1:                                           "tcp://localhost:61616",
1:                                           "tcp://localhost:61617"};
1: 
1:         for(String uri : uriArray) {
1:             transport.add(false, uri);
1:         }
1: 
1:         Collection<URI> uris = getRegisteredUrlsFromPrivateField(transport);
1: 
1:         for(String uri : uriArray) {
1:             assertTrue("Collection should contain: " + uri, uris.contains(new URI(uri)));
1:         }
1:     }
1: 
1:     @Test
1:     public void testFailoverTransportAddWithInitialKnown() throws Exception {
1:         FailoverTransport transport = new FailoverTransport();
1: 
1:         final String initialUri = "tcp://localhost:61616";
1: 
1:         transport.add(false, initialUri);
1: 
1:         String[] uriArray = new String[] {"tcp://127.0.0.2:61616",
1:                                           "tcp://no.existing.hostname:61616",
1:                                           "tcp://localhost:61617"};
1: 
1:         for(String uri : uriArray) {
1:             transport.add(false, uri);
1:         }
1: 
1:         Collection<URI> uris = getRegisteredUrlsFromPrivateField(transport);
1: 
1:         for(String uri : uriArray) {
1:             assertTrue("Collection should contain: " + uri, uris.contains(new URI(uri)));
1:         }
1:     }
1: 
1:     @Test
1:     public void testFailoverTransportAddWithPreventsDups() throws Exception {
1:         FailoverTransport transport = new FailoverTransport();
1: 
1:         final String initialUri = "tcp://localhost:61616";
1: 
1:         transport.add(false, initialUri);
1: 
1:         String[] uriArray = new String[] {"tcp://127.0.0.2:61616",
1:                                           "tcp://localhost:61616",
1:                                           "tcp://no.existing.hostname:61616",
1:                                           "tcp://localhost:61617",
1:                                           "tcp://127.0.0.1:61616"};
1: 
1:         for(String uri : uriArray) {
1:             transport.add(false, uri);
1:         }
1: 
1:         Collection<URI> uris = getRegisteredUrlsFromPrivateField(transport);
1: 
1:         assertEquals(4, uris.size());
1: 
1:         // Ensure even the unknowns get checked.
1:         transport.add(false, "tcp://no.existing.hostname:61616");
1: 
1:         uris = getRegisteredUrlsFromPrivateField(transport);
1: 
1:         assertEquals(4, uris.size());
1:     }
1: 
1:     @Test
1:     public void testFailoverTransportAddArray() throws Exception {
1:         FailoverTransport transport = new FailoverTransport();
1: 
1:         final String initialUri = "tcp://no.existing.hostname:61616";
1: 
1:         transport.add(false, initialUri);
1: 
1:         URI[] uriArray = new URI[] {new URI("tcp://127.0.0.2:61616"),
1:                                     new URI("tcp://localhost:61616"),
1:                                     new URI("tcp://localhost:61617")};
1: 
1:         transport.add(false, uriArray);
1: 
1:         Collection<URI> uris = getRegisteredUrlsFromPrivateField(transport);
1: 
1:         for(URI uri : uriArray) {
1:             assertTrue("Collection should contain: " + uri, uris.contains(uri));
1:         }
1: 
1:         assertEquals(4, uris.size());
1: 
1:         // Ensure even the unknowns get checked.
1:         transport.add(false, "tcp://no.existing.hostname:61616");
1: 
1:         uris = getRegisteredUrlsFromPrivateField(transport);
1: 
1:         assertEquals(4, uris.size());
1: 
1:         transport.add(false, uriArray);
1: 
1:         assertEquals(4, uris.size());
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private Collection<URI> getRegisteredUrlsFromPrivateField(FailoverTransport failoverTransport) throws SecurityException, NoSuchFieldException, IllegalAccessException {
1:         Field urisField = failoverTransport.getClass().getDeclaredField("uris");
1:         urisField.setAccessible(true);
1:         return (Collection<URI>) urisField.get(failoverTransport);
1:     }
1: }
============================================================================