1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.jndi;
3:d29ca2a: 
1:230a86c: import java.util.Hashtable;
1:d29ca2a: 
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:230a86c: import javax.naming.Binding;
1:230a86c: import javax.naming.Context;
1:230a86c: import javax.naming.NamingEnumeration;
1:230a86c: import javax.naming.NamingException;
1:230a86c: import javax.naming.spi.InitialContextFactory;
1:d29ca2a: 
1:230a86c: import junit.framework.TestCase;
1:c7d559f: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnectionFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:c7d559f:  *
1:d29ca2a:  */
1:d29ca2a: public abstract class JNDITestSupport extends TestCase {
1:c7d559f: 
1:fc00993:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
1:d29ca2a:             .getLog(JNDITestSupport.class);
1:c7d559f: 
1:c7d559f:     protected Hashtable<String, String> environment = new Hashtable<String, String>();
1:d29ca2a:     protected Context context;
1:d29ca2a: 
1:d29ca2a:     protected void assertConnectionFactoryPresent(String lookupName) throws NamingException {
1:d29ca2a:         Object connectionFactory = context.lookup(lookupName);
1:d29ca2a: 
1:d29ca2a:         assertTrue("Should have created a ConnectionFactory for key: " + lookupName
1:d29ca2a:                 + " but got: " + connectionFactory, connectionFactory instanceof ConnectionFactory);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertBinding(Binding binding) throws NamingException {
1:d29ca2a:         Object object = binding.getObject();
1:d29ca2a:         assertTrue("Should have got a child context but got: " + object, object instanceof Context);
1:d29ca2a: 
1:d29ca2a:         Context childContext = (Context) object;
1:c7d559f:         NamingEnumeration<Binding> iter = childContext.listBindings("");
1:d29ca2a:         while (iter.hasMore()) {
1:c7d559f:             Binding destinationBinding = iter.next();
1:fc00993:             LOG.info("Found destination: " + destinationBinding.getName());
1:d29ca2a:             Object destination = destinationBinding.getObject();
1:d29ca2a:             assertTrue("Should have a Destination but got: " + destination, destination instanceof Destination);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:c7d559f:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a: 
1:d29ca2a:         configureEnvironment();
1:d29ca2a: 
1:016ae05:         InitialContextFactory factory = getInitialContextFactory();
1:d29ca2a:         context = factory.getInitialContext(environment);
1:d29ca2a:         assertTrue("No context created", context != null);
1:d29ca2a:     }
1:d29ca2a: 
1:016ae05:     protected InitialContextFactory getInitialContextFactory() {
1:016ae05:         return new ActiveMQInitialContextFactory();
1:016ae05:     }
1:d29ca2a:     /**
1:d29ca2a:      * Stops all existing ActiveMQConnectionFactory in Context.
1:b0c2a40:      *
1:d29ca2a:      * @throws javax.naming.NamingException
1:d29ca2a:      */
1:c7d559f:     @Override
1:d29ca2a:     protected void tearDown() throws NamingException, JMSException {
1:c7d559f:         NamingEnumeration<Binding> iter = context.listBindings("");
1:d29ca2a:         while (iter.hasMore()) {
1:c7d559f:             Binding binding = iter.next();
1:d29ca2a:             Object connFactory = binding.getObject();
1:d29ca2a:             if (connFactory instanceof ActiveMQConnectionFactory) {
1:d29ca2a:                // ((ActiveMQConnectionFactory) connFactory).stop();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void configureEnvironment() {
1:d29ca2a:         environment.put("brokerURL", "vm://localhost");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertDestinationExists(String name) throws NamingException {
1:d29ca2a:         Object object = context.lookup(name);
1:d29ca2a:         assertTrue("Should have received a Destination for name: " + name + " but instead found: " + object,
1:d29ca2a:                 object instanceof Destination);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:016ae05
/////////////////////////////////////////////////////////////////////////
1:         InitialContextFactory factory = getInitialContextFactory();
1:     protected InitialContextFactory getInitialContextFactory() {
1:         return new ActiveMQInitialContextFactory();
1:     }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
1:  *
1: 
1: 
1:     protected Hashtable<String, String> environment = new Hashtable<String, String>();
/////////////////////////////////////////////////////////////////////////
1:         NamingEnumeration<Binding> iter = childContext.listBindings("");
1:             Binding destinationBinding = iter.next();
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         NamingEnumeration<Binding> iter = context.listBindings("");
1:             Binding binding = iter.next();
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Found destination: " + destinationBinding.getName());
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
1: import javax.naming.Binding;
1: import javax.naming.Context;
1: import javax.naming.NamingEnumeration;
1: import javax.naming.NamingException;
1: import javax.naming.spi.InitialContextFactory;
1: import junit.framework.TestCase;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jndi;
1: 
0: import junit.framework.TestCase;
1: 
0: import javax.naming.NamingException;
0: import javax.naming.Binding;
0: import javax.naming.Context;
0: import javax.naming.NamingEnumeration;
0: import javax.naming.spi.InitialContextFactory;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
0: import java.util.Hashtable;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.jndi.ActiveMQInitialContextFactory;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public abstract class JNDITestSupport extends TestCase {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
1:             .getLog(JNDITestSupport.class);
1:     
0:     protected Hashtable environment = new Hashtable();
1:     protected Context context;
1: 
1:     protected void assertConnectionFactoryPresent(String lookupName) throws NamingException {
1:         Object connectionFactory = context.lookup(lookupName);
1: 
1:         assertTrue("Should have created a ConnectionFactory for key: " + lookupName
1:                 + " but got: " + connectionFactory, connectionFactory instanceof ConnectionFactory);
1:     }
1: 
1:     protected void assertBinding(Binding binding) throws NamingException {
1:         Object object = binding.getObject();
1:         assertTrue("Should have got a child context but got: " + object, object instanceof Context);
1: 
1:         Context childContext = (Context) object;
0:         NamingEnumeration iter = childContext.listBindings("");
1:         while (iter.hasMore()) {
0:             Binding destinationBinding = (Binding) iter.next();
0:             log.info("Found destination: " + destinationBinding.getName());
1:             Object destination = destinationBinding.getObject();
1:             assertTrue("Should have a Destination but got: " + destination, destination instanceof Destination);
1:         }
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         configureEnvironment();
1: 
0:         InitialContextFactory factory = new ActiveMQInitialContextFactory();
1:         context = factory.getInitialContext(environment);
1:         assertTrue("No context created", context != null);
1:     }
1: 
1:     /**
1:      * Stops all existing ActiveMQConnectionFactory in Context.
1:      *
1:      * @throws javax.naming.NamingException
1:      */
1:     protected void tearDown() throws NamingException, JMSException {
0:         NamingEnumeration iter = context.listBindings("");
1:         while (iter.hasMore()) {
0:             Binding binding = (Binding) iter.next();
1:             Object connFactory = binding.getObject();
1:             if (connFactory instanceof ActiveMQConnectionFactory) {
1:                // ((ActiveMQConnectionFactory) connFactory).stop();
1:             }
1:         }
1:     }
1: 
1:     protected void configureEnvironment() {
1:         environment.put("brokerURL", "vm://localhost");
1:     }
1: 
1:     protected void assertDestinationExists(String name) throws NamingException {
1:         Object object = context.lookup(name);
1:         assertTrue("Should have received a Destination for name: " + name + " but instead found: " + object,
1:                 object instanceof Destination);
1:     }
1: }
============================================================================