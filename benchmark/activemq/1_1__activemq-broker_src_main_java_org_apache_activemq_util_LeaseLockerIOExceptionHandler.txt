1:e16815a: /**
1:e16815a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e16815a:  * contributor license agreements.  See the NOTICE file distributed with
1:e16815a:  * this work for additional information regarding copyright ownership.
1:e16815a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e16815a:  * (the "License"); you may not use this file except in compliance with
1:e16815a:  * the License.  You may obtain a copy of the License at
1:e16815a:  *
1:e16815a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e16815a:  *
1:e16815a:  * Unless required by applicable law or agreed to in writing, software
1:e16815a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e16815a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e16815a:  * See the License for the specific language governing permissions and
1:e16815a:  * limitations under the License.
1:e16815a:  */
1:e16815a: package org.apache.activemq.util;
1:e16815a: 
1:e16815a: import org.apache.activemq.broker.LockableServiceSupport;
1:e16815a: import org.apache.activemq.broker.Locker;
1:e16815a: import org.apache.activemq.broker.SuppressReplyException;
1:e16815a: import org.slf4j.Logger;
1:e16815a: import org.slf4j.LoggerFactory;
1:e16815a: 
1:e16815a: import java.io.IOException;
1:e16815a: 
1:e16815a: /**
1:e16815a:  * @org.apache.xbean.XBean
1:e16815a:  */
1:e16815a: public class LeaseLockerIOExceptionHandler extends DefaultIOExceptionHandler {
1:e16815a:     private static final Logger LOG = LoggerFactory.getLogger(LeaseLockerIOExceptionHandler.class);
1:e16815a: 
1:e16815a:     public LeaseLockerIOExceptionHandler() {
1:e16815a:         setIgnoreSQLExceptions(false);
1:e16815a:         setStopStartConnectors(true);
1:e16815a:     }
1:e16815a: 
1:e16815a:     // fail only when we get an authoritative answer from the db w/o exceptions
1:e16815a:     @Override
1:e16815a:     protected boolean hasLockOwnership() throws IOException {
1:e16815a:         boolean hasLock = true;
1:e16815a: 
1:e16815a:         if (broker.getPersistenceAdapter() instanceof LockableServiceSupport) {
1:e16815a:             Locker locker = ((LockableServiceSupport) broker.getPersistenceAdapter()).getLocker();
1:e16815a: 
1:e16815a:             if (locker != null) {
1:e16815a:                 try {
1:e16815a:                     if (!locker.keepAlive()) {
1:e16815a:                         hasLock = false;
1:e16815a:                     }
1:e16815a:                 }
1:e16815a:                 catch (SuppressReplyException ignoreWhileHandlingInProgress) {
1:e16815a:                 }
1:e16815a:                 catch (IOException ignored) {
1:e16815a:                 }
1:e16815a: 
1:e16815a:                 if (!hasLock) {
1:e16815a:                     LOG.warn("Lock keepAlive failed, no longer lock owner with: {}", locker);
1:e16815a:                     throw new IOException("Lock keepAlive failed, no longer lock owner with: " + locker);
1:e16815a:                 }
1:e16815a:             }
1:e16815a:         }
1:e16815a: 
1:e16815a:         return hasLock;
1:e16815a:     }
1:e16815a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e16815a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import org.apache.activemq.broker.LockableServiceSupport;
1: import org.apache.activemq.broker.Locker;
1: import org.apache.activemq.broker.SuppressReplyException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * @org.apache.xbean.XBean
1:  */
1: public class LeaseLockerIOExceptionHandler extends DefaultIOExceptionHandler {
1:     private static final Logger LOG = LoggerFactory.getLogger(LeaseLockerIOExceptionHandler.class);
1: 
1:     public LeaseLockerIOExceptionHandler() {
1:         setIgnoreSQLExceptions(false);
1:         setStopStartConnectors(true);
1:     }
1: 
1:     // fail only when we get an authoritative answer from the db w/o exceptions
1:     @Override
1:     protected boolean hasLockOwnership() throws IOException {
1:         boolean hasLock = true;
1: 
1:         if (broker.getPersistenceAdapter() instanceof LockableServiceSupport) {
1:             Locker locker = ((LockableServiceSupport) broker.getPersistenceAdapter()).getLocker();
1: 
1:             if (locker != null) {
1:                 try {
1:                     if (!locker.keepAlive()) {
1:                         hasLock = false;
1:                     }
1:                 }
1:                 catch (SuppressReplyException ignoreWhileHandlingInProgress) {
1:                 }
1:                 catch (IOException ignored) {
1:                 }
1: 
1:                 if (!hasLock) {
1:                     LOG.warn("Lock keepAlive failed, no longer lock owner with: {}", locker);
1:                     throw new IOException("Lock keepAlive failed, no longer lock owner with: " + locker);
1:                 }
1:             }
1:         }
1: 
1:         return hasLock;
1:     }
1: }
============================================================================