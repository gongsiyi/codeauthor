3:eba4c9c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:4446d55:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:eba4c9c:  *
1:eba4c9c:  * Unless required by applicable law or agreed to in writing, software
1:eba4c9c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eba4c9c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eba4c9c:  * See the License for the specific language governing permissions and
1:eba4c9c:  * limitations under the License.
1:4f446eb:  */
1:eba4c9c: package org.apache.activemq.transport.udp;
1:72b382d: 
1:74a7a8b: import java.io.IOException;
1:74a7a8b: import java.net.SocketAddress;
1:74a7a8b: 
1:eba4c9c: import org.apache.activemq.Service;
1:eba4c9c: import org.apache.activemq.command.Command;
1:f3ef1a9: import org.apache.activemq.transport.reliable.ReplayBuffer;
1:8d589ec: import org.apache.activemq.transport.reliable.Replayer;
1:72b382d: 
1:4f446eb: /**
1:0bbc0ac:  *
1:5739c6c:  * 
1:4446d55:  */
1:8d589ec: public interface CommandChannel extends Replayer, Service {
6:c2fc820: 
1:fc00993:     Command read() throws IOException;
1:c2fc820: 
1:fc00993:     void write(Command command, SocketAddress address) throws IOException;
1:c2fc820: 
1:fc00993:     int getDatagramSize();
1:c2fc820: 
1:eba4c9c:     /**
1:1c5ecb3:      * Sets the default size of a datagram on the network.
1:4f446eb:      */
1:fc00993:     void setDatagramSize(int datagramSize);
1:f3ef1a9: 
1:fc00993:     DatagramHeaderMarshaller getHeaderMarshaller();
1:c2fc820: 
1:fc00993:     void setHeaderMarshaller(DatagramHeaderMarshaller headerMarshaller);
1:c2fc820: 
1:fc00993:     void setTargetAddress(SocketAddress address);
1:c2fc820: 
1:fc00993:     void setReplayAddress(SocketAddress address);
1:c2fc820: 
1:fc00993:     void setReplayBuffer(ReplayBuffer replayBuffer);
1:8978ac0:     
1:8978ac0:     public int getReceiveCounter();
1:8978ac0: 
1:86cbdfd: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:8978ac0
/////////////////////////////////////////////////////////////////////////
1:     
1:     public int getReceiveCounter();
1: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     Command read() throws IOException;
1:     void write(Command command, SocketAddress address) throws IOException;
1:     int getDatagramSize();
1:     void setDatagramSize(int datagramSize);
1:     DatagramHeaderMarshaller getHeaderMarshaller();
1:     void setHeaderMarshaller(DatagramHeaderMarshaller headerMarshaller);
1:     void setTargetAddress(SocketAddress address);
1:     void setReplayAddress(SocketAddress address);
1:     void setReplayBuffer(ReplayBuffer replayBuffer);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.SocketAddress;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.reliable.ReplayBuffer;
/////////////////////////////////////////////////////////////////////////
0:     public Command read() throws IOException;
0:     public void write(Command command, SocketAddress address) throws IOException;
0:     public int getDatagramSize();
0:     public void setDatagramSize(int datagramSize);
0:     public DatagramHeaderMarshaller getHeaderMarshaller();
0:     public void setHeaderMarshaller(DatagramHeaderMarshaller headerMarshaller);
0:     public void setTargetAddress(SocketAddress address);
0:     public void setReplayAddress(SocketAddress address);
1: 
0:     public void setReplayBuffer(ReplayBuffer replayBuffer);
commit:8d589ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.reliable.Replayer;
/////////////////////////////////////////////////////////////////////////
1: public interface CommandChannel extends Replayer, Service {
/////////////////////////////////////////////////////////////////////////
0:     public abstract void setReplayAddress(SocketAddress address);
commit:364337b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public abstract void write(Command command, SocketAddress address) throws IOException;
commit:72b382d
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.Future;
1: 
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     public abstract void write(Command command, SocketAddress address, Map requestMap, Future future) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     public abstract void setTargetAddress(SocketAddress address);
1: 
commit:5739c6c
/////////////////////////////////////////////////////////////////////////
1:  *
0: public interface CommandChannel extends Service {
0:     public abstract Command read() throws IOException;
0:     public abstract void write(Command command) throws IOException;
0:     public abstract void write(Command command, SocketAddress address) throws IOException;
0:     public abstract int getDatagramSize();
0:     public abstract void setDatagramSize(int datagramSize);
0:     public abstract DatagramHeaderMarshaller getHeaderMarshaller();
0:     public abstract void setHeaderMarshaller(DatagramHeaderMarshaller headerMarshaller);
0: }
commit:95ab99c
/////////////////////////////////////////////////////////////////////////
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
/////////////////////////////////////////////////////////////////////////
commit:c2fc820
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.openwire.BooleanStream;
/////////////////////////////////////////////////////////////////////////
0:             // the ByteBuffer to avoid object allocation and unnecessary
0:             // buffering?
/////////////////////////////////////////////////////////////////////////
0:             if (size >= datagramSize) {
/////////////////////////////////////////////////////////////////////////
1: 
0:                     // we need to remove the amount of overhead to write the
0:                     // partial command
1: 
0:                     // lets write the flags in there
0:                     BooleanStream bs = null;
0:                     if (wireFormat.isTightEncodingEnabled()) {
0:                         bs = new BooleanStream();
0:                         bs.writeBoolean(true); // the partial data byte[] is
0:                         // never null
0:                     }
0:                     // which is the byte for the type and an int for the size of
0:                     // the byte[]
0:                     chunkSize -= 1 // the data type
0:                     + 4 // the command ID
0:                     + 4; // the size of the partial data
1: 
0:                     // the boolean flags
0:                     if (bs != null) {
0:                         chunkSize -= bs.marshalledSize();
0:                     }
0:                     else {
0:                         chunkSize -= 1;
0:                     }
1: 
1: 
0:                     writeBuffer.put(PartialCommand.DATA_STRUCTURE_TYPE);
1: 
0:                     if (bs != null) {
0:                         bs.marshal(writeBuffer);
1: 
0:                     if (bs == null) {
0:                         writeBuffer.put((byte) 1);
0:                     }
1: 
1: 
1:                 
0:                 // now lets write the last partial command
0:                 command = new LastPartialCommand(command);
0:                 largeBuffer = new ByteArrayOutputStream(defaultMarshalBufferSize);
0:                 wireFormat.marshal(command, new DataOutputStream(largeBuffer));
0:                 data = largeBuffer.toByteArray();
1:             
0:             writeBuffer.clear();
0:             headerMarshaller.writeHeader(command, writeBuffer);
1: 
0:             writeBuffer.put(data);
1: 
0:             sendWriteBuffer(address);
/////////////////////////////////////////////////////////////////////////
commit:f51ac13
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             SocketAddress address = channel.receive(readBuffer);
0:             Endpoint from = headerMarshaller.createEndpoint(readBuffer, address);
0:             // the ByteBuffer to avoid object allocation and unnecessary buffering?
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8704338
/////////////////////////////////////////////////////////////////////////
0: import org.activeio.ByteSequence;
0: import org.apache.activemq.command.Endpoint;
0: import org.apache.activemq.command.LastPartialCommand;
0: import org.apache.activemq.command.PartialCommand;
0: import org.apache.activemq.transport.TransportListener;
/////////////////////////////////////////////////////////////////////////
0:     private int defaultMarshalBufferSize = 64 * 1024;
0:             SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public Command read() throws IOException {
/////////////////////////////////////////////////////////////////////////
0:             Endpoint from = headerMarshaller.createEndpoint(readBuffer, lastReadDatagramAddress);
0:             
0:             byte[] data = new byte[remaining];
0:             readBuffer.get(data);
0:             // TODO could use a DataInput implementation that talks direct to
0:             // the
0:             // ByteBuffer
0:             DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(data));
0:             answer = (Command) wireFormat.unmarshal(dataIn);
0:             answer.setFrom(from);
0:         return answer;
/////////////////////////////////////////////////////////////////////////
0:     public void setWireFormatInfoEndpoint(DatagramEndpoint endpoint) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:             ByteArrayOutputStream largeBuffer = new ByteArrayOutputStream(defaultMarshalBufferSize);
0:                 headerMarshaller.writeHeader(command, writeBuffer);
0:                     headerMarshaller.writeHeader(command, writeBuffer);
0:                     
0:                     int chunkSize = writeBuffer.remaining();
0: 
0:                     // we need to remove the amount of overhead to write the partial command
0: 
0:                     // lets remove the header of the partial command
0:                     // which is the byte for the type and an int for the size of the byte[]
0:                     chunkSize -= 1 + 4 + 4;
0:                     
0:                     if (!wireFormat.isSizePrefixDisabled()) {
0:                         // lets write the size of the command buffer
0:                         writeBuffer.putInt(chunkSize);
0:                         chunkSize -= 4;
0:                     }
0:                     
0:                     if (lastFragment) {
0:                         writeBuffer.put(LastPartialCommand.DATA_STRUCTURE_TYPE);
0:                     }
0:                     else {
0:                         writeBuffer.put(PartialCommand.DATA_STRUCTURE_TYPE);
0:                     }
0:                     
0:                     writeBuffer.putInt(command.getCommandId());
0:                     
0:                     // size of byte array
0:                     writeBuffer.putInt(chunkSize);
0:                     
0: 
/////////////////////////////////////////////////////////////////////////
0:             log.debug("Channel: " + name + " sending datagram to: " + address);
commit:df26287
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private DatagramHeaderMarshaller headerMarshaller;
/////////////////////////////////////////////////////////////////////////
0:             DatagramReplayStrategy replayStrategy, SocketAddress targetAddress, boolean checkSequenceNumbers, DatagramHeaderMarshaller headerMarshaller) {
/////////////////////////////////////////////////////////////////////////
0:         this.headerMarshaller = headerMarshaller;
commit:2f1dcea
/////////////////////////////////////////////////////////////////////////
0:                     writeBuffer.clear();
0:                     if (chunkSize + offset > length) {
commit:3d7f767
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 header.incrementCounter();
/////////////////////////////////////////////////////////////////////////
0:                     if (lastFragment) {
0:                         chunkSize = length - offset;
0:                     }
0:                     header.incrementCounter();
commit:4446d55
/////////////////////////////////////////////////////////////////////////
0:     private final String name;
/////////////////////////////////////////////////////////////////////////
0:     private final boolean checkSequenceNumbers;
0:     private DatagramReadBuffer readStack;
/////////////////////////////////////////////////////////////////////////
0:     public CommandChannel(String name, DatagramChannel channel, OpenWireFormat wireFormat, ByteBufferPool bufferPool, int datagramSize,
0:             DatagramReplayStrategy replayStrategy, SocketAddress targetAddress, boolean checkSequenceNumbers) {
0:         this.name = name;
0:         this.checkSequenceNumbers = checkSequenceNumbers;
0:     }
0: 
0:     public String toString() {
0:         return "CommandChannel#" + name;
/////////////////////////////////////////////////////////////////////////
0:         if (checkSequenceNumbers) {
0:             readStack = new CommandReadBuffer(name, wireFormat, replayStrategy);
0:         }
/////////////////////////////////////////////////////////////////////////
0: 
0:                 log.debug("Received datagram on: " + name + " from: " + lastReadDatagramAddress + " header: " + header);
0:              * if (size > remaining) { throw new IOException("Invalid command
0:              * size: " + size + " when there are only: " + remaining + " byte(s)
0:              * remaining"); } else if (size < remaining) { log.warn("Extra bytes
0:              * in buffer. Expecting: " + size + " but has: " + remaining); }
1:              */
/////////////////////////////////////////////////////////////////////////
0:                 Command command = (Command) wireFormat.unmarshal(dataIn);
0:                 // Command command = (Command) wireFormat.doUnmarshal(dataIn);
0:             if (readStack != null) {
0:                 answer = readStack.read(header);
0:             }
0:             else {
0:                 answer = header.getCommand();
0:             }
0:             if (log.isDebugEnabled()) {
0:                 log.debug("Channel: " + name + " about to process: " + answer);
0:             }
0:      * Called if a packet is received on a different channel from a remote
0:      * client
1:      * 
0:      * @throws IOException
0:         if (readStack != null) {
0:             return readStack.read(header);
0:         }
0:         else {
0:             return header.getCommand();
0:         }
/////////////////////////////////////////////////////////////////////////
0: 
0:             ByteArrayOutputStream largeBuffer = new ByteArrayOutputStream(largeMessageBufferSize);
0:             wireFormat.marshal(command, new DataOutputStream(largeBuffer));
0:             byte[] data = largeBuffer.toByteArray();
0:             int size = data.length;
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:             log.debug("Channel: " + name + " sending datagram to: " + address + " header: " + header);
commit:4f446eb
/////////////////////////////////////////////////////////////////////////
0:     private SocketAddress lastReadDatagramAddress;
/////////////////////////////////////////////////////////////////////////
0:     public CommandChannel(DatagramChannel channel, OpenWireFormat wireFormat, ByteBufferPool bufferPool, int datagramSize,
0:             DatagramReplayStrategy replayStrategy, SocketAddress targetAddress) {
/////////////////////////////////////////////////////////////////////////
0:         // wireFormat.setPrefixPacketSize(false);
/////////////////////////////////////////////////////////////////////////
0:         DatagramHeader header = null;
0:         lastReadDatagramAddress = null;
0:             lastReadDatagramAddress = channel.receive(readBuffer);
0:             
0:             if (log.isDebugEnabled()) {
0:                 log.debug("Read a datagram from: " + lastReadDatagramAddress);
0:             }
0:             header = headerMarshaller.readHeader(readBuffer);
0:             header.setFromAddress(lastReadDatagramAddress);
0:                 log.debug("Received datagram from: " + lastReadDatagramAddress + " header: " + header);
0:             /*
1:             */
0:             if (size != remaining) {
0:                 log.warn("Expecting: " + size + " but has: " + remaining);
0:             }
0:                 byte[] data = new byte[remaining];
/////////////////////////////////////////////////////////////////////////
0:             processor.process(answer, header);
1:     /**
0:      * Called if a packet is received on a different channel from a remote client
0:      * @throws IOException 
1:      */
0:     public Command onDatagramReceived(DatagramHeader header) throws IOException {
0:         return readStack.read(header);
0:     }
0: 
0: 
0:             bs = new BooleanStream();
0:             // TODO
0:             //bs.clear();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public SocketAddress getLastReadDatagramAddress() {
0:         synchronized (readLock) {
0:             return lastReadDatagramAddress;
0:         }
0:     }
0:     
0: 
0:     // Implementation methods
0:     // -------------------------------------------------------------------------
0:     protected void sendWriteBuffer(SocketAddress address) throws IOException {
0:         writeBuffer.flip();
0:         
0:         if (log.isDebugEnabled()) {
0:             log.debug("Sending datagram to: " + address + " header: " + header);
0:         }
0:         channel.send(writeBuffer, address);
0:     }
commit:08f4639
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetSocketAddress;
/////////////////////////////////////////////////////////////////////////
0:     public void read(CommandProcessor processor) throws IOException {
0:         Command answer = null;
0:         SocketAddress address = null;
0:             address = channel.receive(readBuffer);
/////////////////////////////////////////////////////////////////////////
0:             answer = readStack.read(header);
0:         }
0:         if (answer != null) {
0:             processor.process(answer, address);
0:         write(command, targetAddress);
0:     }
0:         
0:     public void write(Command command, SocketAddress address) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:                 sendWriteBuffer(address);
/////////////////////////////////////////////////////////////////////////
0:                     sendWriteBuffer(address);
0:     protected void sendWriteBuffer(SocketAddress address) throws IOException {
0:         channel.send(writeBuffer, address);
/////////////////////////////////////////////////////////////////////////
0: 
commit:187f884
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
0: import java.net.SocketAddress;
0: import java.nio.channels.DatagramChannel;
/////////////////////////////////////////////////////////////////////////
0:     private DatagramChannel channel;
0:     private SocketAddress targetAddress;
0:     private Object readLock = new Object();
0:     private Object writeLock = new Object();
0:     public CommandChannel(DatagramChannel channel, OpenWireFormat wireFormat, ByteBufferPool bufferPool, int datagramSize, DatagramReplayStrategy replayStrategy, SocketAddress targetAddress) {
0:         this.targetAddress = targetAddress;
0:         //wireFormat.setPrefixPacketSize(false);
0:         wireFormat.setCacheEnabled(false);
0:         wireFormat.setTightEncodingEnabled(true);
0: 
0:     public Command read() throws IOException {
0:         synchronized (readLock) {
0:             readBuffer.clear();
0:             SocketAddress address = channel.receive(readBuffer);
0:             readBuffer.flip();
0:             if (log.isDebugEnabled()) {
0:                 log.debug("Read a datagram from: " + address);
0:             }
0:             DatagramHeader header = headerMarshaller.readHeader(readBuffer);
0:             int remaining = readBuffer.remaining();
0:             int size = header.getDataSize();
0:             if (size > remaining) {
0:                 throw new IOException("Invalid command size: " + size + " when there are only: " + remaining + " byte(s) remaining");
0:             }
0:             else if (size < remaining) {
0:                 log.warn("Extra bytes in buffer. Expecting: " + size + " but has: " + remaining);
0:             }
0:             if (header.isPartial()) {
0:                 byte[] data = new byte[size];
0:                 readBuffer.get(data);
0:                 header.setPartialData(data);
0:             }
0:             else {
0:                 byte[] data = new byte[size];
0:                 readBuffer.get(data);
0: 
0:                 // TODO use a DataInput implementation that talks direct to the
0:                 // ByteBuffer
0:                 DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(data));
0:                 Command command = (Command) wireFormat.doUnmarshal(dataIn);
0:                 header.setCommand(command);
0:             }
0: 
0:             return readStack.read(header);
0:         }
0:     public void write(Command command) throws IOException {
0:         synchronized (writeLock) {
0:             header.incrementCounter();
0:             int size = wireFormat.tightMarshal1(command, bs);
0:             if (size < datagramSize) {
0:                 header.setPartial(false);
0:                 header.setComplete(true);
0:                 header.setDataSize(size);
0:                 writeBuffer.clear();
0:                 // TODO use a DataOutput implementation that talks direct to the
0:                 // ByteBuffer
0:                 ByteArrayOutputStream buffer = new ByteArrayOutputStream();
0:                 DataOutputStream dataOut = new DataOutputStream(buffer);
0:                 wireFormat.tightMarshal2(command, dataOut, bs);
0:                 dataOut.close();
0:                 byte[] data = buffer.toByteArray();
0:                 writeBuffer.put(data);
0: 
0:                 sendWriteBuffer();
0:             }
0:             else {
0:                 header.setPartial(true);
0:                 header.setComplete(false);
0: 
0:                 // lets split the command up into chunks
0:                 ByteArrayOutputStream largeBuffer = new ByteArrayOutputStream(largeMessageBufferSize);
0:                 wireFormat.marshal(command, new DataOutputStream(largeBuffer));
0: 
0:                 byte[] data = largeBuffer.toByteArray();
0:                 int offset = 0;
0:                 boolean lastFragment = false;
0:                 for (int fragment = 0, length = data.length; !lastFragment; fragment++) {
0:                     // write the header
0:                     writeBuffer.rewind();
0:                     int chunkSize = writeBuffer.capacity() - headerMarshaller.getHeaderSize(header);
0:                     lastFragment = offset + chunkSize >= length;
0:                     header.setDataSize(chunkSize);
0:                     header.setComplete(lastFragment);
0:                     headerMarshaller.writeHeader(header, writeBuffer);
0: 
0:                     // now the data
0:                     writeBuffer.put(data, offset, chunkSize);
0:                     offset += chunkSize;
0:                     sendWriteBuffer();
0:                 }
0:     protected void sendWriteBuffer() throws IOException {
0:         writeBuffer.flip();
0:         channel.send(writeBuffer, targetAddress);
0:     }
0: 
commit:1c5ecb3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.udp.replay.DatagramReplayStrategy;
/////////////////////////////////////////////////////////////////////////
0: 
0:     private DatagramReplayStrategy replayStrategy;
0: 
0: 
0:     private BooleanStream bs = new BooleanStream();
0:     public CommandChannel(ByteChannel channel, OpenWireFormat wireFormat, ByteBufferPool bufferPool, int datagramSize, DatagramReplayStrategy replayStrategy) {
0:         this.replayStrategy = replayStrategy;
0:         readStack = new CommandReadBuffer(wireFormat, replayStrategy);
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         if (size < datagramSize) {
0:             headerMarshaller.writeHeader(header, writeBuffer);
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:             for (int fragment = 0, length = data.length; !lastFragment; fragment++) {
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:      * Sets the default size of a datagram on the network.
/////////////////////////////////////////////////////////////////////////
0:     public DatagramHeaderMarshaller getHeaderMarshaller() {
0:         return headerMarshaller;
0:     }
0: 
0:     public void setHeaderMarshaller(DatagramHeaderMarshaller headerMarshaller) {
0:         this.headerMarshaller = headerMarshaller;
0:     }
0: 
commit:fcd06b2
/////////////////////////////////////////////////////////////////////////
0:             header.setDataSize(size);
/////////////////////////////////////////////////////////////////////////
0:                 header.setDataSize(chunkSize);
commit:eba4c9c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.transport.udp;
0: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.command.Command;
0: import org.apache.activemq.openwire.BooleanStream;
0: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.nio.ByteBuffer;
0: import java.nio.channels.ByteChannel;
0: import java.nio.channels.Channels;
0: 
1: /**
0:  * A strategy for reading datagrams and de-fragmenting them together.
1:  * 
0:  * @version $Revision$
0:  */
0: public class CommandChannel implements Service {
0: 
0:     private static final Log log = LogFactory.getLog(CommandChannel.class);
0:     
0:     private ByteChannel channel;
0:     private OpenWireFormat wireFormat;
0:     private ByteBufferPool bufferPool;
0:     private int datagramSize = 4 * 1024;
0:     private DatagramHeaderMarshaller headerMarshaller = new DatagramHeaderMarshaller();
0:     
0:     // reading
0:     private ByteBuffer readBuffer;
0:     private DataInputStream dataIn;
0:     private CommandReadBuffer readStack;
0:     
0:     // writing
0:     private ByteBuffer writeBuffer;
0:     private BooleanStream bs = new BooleanStream(); 
0:     private DataOutputStream dataOut;
0:     private int largeMessageBufferSize = 128 * 1024;
0:     private DatagramHeader header = new DatagramHeader();
0: 
0: 
0:     public CommandChannel(ByteChannel channel, OpenWireFormat wireFormat, ByteBufferPool bufferPool, int datagramSize) {
0:         this.channel = channel;
0:         this.wireFormat = wireFormat;
0:         this.bufferPool = bufferPool;
0:         this.datagramSize = datagramSize;
0:     }
0: 
0:     public void start() throws Exception {
0:         readStack = new CommandReadBuffer(wireFormat);
0:         bufferPool.setDefaultSize(datagramSize);
0:         bufferPool.start();
0:         readBuffer = bufferPool.borrowBuffer();
0:         writeBuffer = bufferPool.borrowBuffer();
0:         dataIn = new DataInputStream(Channels.newInputStream(channel));
0:         dataOut = new DataOutputStream(Channels.newOutputStream(channel));
0:     }
0: 
0:     public void stop() throws Exception {
0:         bufferPool.stop();
0:     }
0:     
0:     public synchronized Command read() throws IOException {
0:         readBuffer.clear();
0:         int read = channel.read(readBuffer);
0:         DatagramHeader header = headerMarshaller.readHeader(readBuffer);
0: 
0:         int remaining = readBuffer.remaining();
0:         int size = header.getDataSize();
0:         if (size > remaining) {
0:             throw new IOException("Invalid command size: " + size + " when there are only: " + remaining + " byte(s) remaining");
0:         }
0:         else if (size < remaining) {
0:             log.warn("Extra bytes in buffer. Expecting: " + size + " but has: " + remaining);
0:         }
0:         if (header.isPartial()) {
0:             byte[] data = new byte[size];
0:             readBuffer.get(data);
0:             header.setPartialData(data);
0:         }
0:         else {
0:             Command command = (Command) wireFormat.unmarshal(dataIn);
0:             header.setCommand(command);
0:         }
0: 
0:         return readStack.read(header);
0:     }
0: 
0:     public synchronized void write(Command command) throws IOException {
0:         header.incrementCounter();
0:         int size = wireFormat.tightMarshalNestedObject1(command, bs);
0:         if (size < datagramSize ) {
0:             header.setPartial(false);
0:             writeBuffer.rewind();
0:             wireFormat.marshal(command, dataOut);
0:             dataOut.flush();
0:             channel.write(writeBuffer);
0:         }
0:         else {
0:             header.setPartial(true);
0:             header.setComplete(false);
0:             
0:             // lets split the command up into chunks
0:             ByteArrayOutputStream largeBuffer = new ByteArrayOutputStream(largeMessageBufferSize);
0:             wireFormat.marshal(command, new DataOutputStream(largeBuffer));
0:             
0:             byte[] data = largeBuffer.toByteArray();
0:             int offset = 0;
0:             boolean lastFragment = false;
0:             for (int fragment = 0, length = data.length; !lastFragment; fragment++ ) {
0:                 // write the header
0:                 writeBuffer.rewind();
0:                 int chunkSize = writeBuffer.capacity() - headerMarshaller.getHeaderSize(header);
0:                 lastFragment = offset + chunkSize >= length;
0:                 header.setComplete(lastFragment);
0:                 headerMarshaller.writeHeader(header, writeBuffer);
0: 
0:                 // now the data
0:                 writeBuffer.put(data, offset, chunkSize);
0:                 offset += chunkSize;
0:                 channel.write(writeBuffer);
0:             }
0:         }
0:     }
0:     
0:     // Properties
0:     // -------------------------------------------------------------------------
0: 
0:     public int getDatagramSize() {
0:         return datagramSize;
0:     }
0: 
1:     /**
0:      * Sets the default size of a datagram on the network. 
0:      */
0:     public void setDatagramSize(int datagramSize) {
0:         this.datagramSize = datagramSize;
0:     }
0: 
0:     public ByteBufferPool getBufferPool() {
0:         return bufferPool;
0:     }
0: 
1:     /**
0:      * Sets the implementation of the byte buffer pool to use
0:      */
0:     public void setBufferPool(ByteBufferPool bufferPool) {
0:         this.bufferPool = bufferPool;
0:     }
0: 
0: }
============================================================================