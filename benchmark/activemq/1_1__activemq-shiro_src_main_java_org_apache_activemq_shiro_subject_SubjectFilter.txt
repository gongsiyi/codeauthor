1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.subject;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.broker.ConnectionContext;
1:f9451e5: import org.apache.activemq.command.ConnectionInfo;
1:f9451e5: import org.apache.activemq.security.SecurityContext;
1:f9451e5: import org.apache.activemq.shiro.ConnectionReference;
1:f9451e5: import org.apache.activemq.shiro.DefaultSecurityContextFactory;
1:f9451e5: import org.apache.activemq.shiro.SecurityContextFactory;
1:f9451e5: import org.apache.activemq.shiro.env.EnvironmentFilter;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * The {@code SubjectFilter} ensures a Shiro {@link Subject} representing the client's identity is associated with
1:f9451e5:  * every connection to the ActiveMQ Broker.  The {@code Subject} is made available to downstream broker filters so
1:f9451e5:  * they may perform security checks as necessary.
1:f9451e5:  * <p/>
1:f9451e5:  * This implementation does not perform any security checks/assertions itself.  It is expected that other broker filters
1:f9451e5:  * will be configured after this one and those will perform any security behavior or checks as necessary.
1:f9451e5:  *
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class SubjectFilter extends EnvironmentFilter {
1:f9451e5: 
1:f9451e5:     private ConnectionSubjectFactory connectionSubjectFactory;
1:f9451e5:     private SecurityContextFactory securityContextFactory;
1:f9451e5: 
1:f9451e5:     public SubjectFilter() {
1:f9451e5:         this.connectionSubjectFactory = new DefaultConnectionSubjectFactory();
1:f9451e5:         this.securityContextFactory = new DefaultSecurityContextFactory();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public ConnectionSubjectFactory getConnectionSubjectFactory() {
1:f9451e5:         return connectionSubjectFactory;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setConnectionSubjectFactory(ConnectionSubjectFactory connectionSubjectFactory) {
1:f9451e5:         if (connectionSubjectFactory == null) {
1:f9451e5:             throw new IllegalArgumentException("ConnectionSubjectFactory argument cannot be null.");
1:f9451e5:         }
1:f9451e5:         this.connectionSubjectFactory = connectionSubjectFactory;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public SecurityContextFactory getSecurityContextFactory() {
1:f9451e5:         return this.securityContextFactory;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setSecurityContextFactory(SecurityContextFactory securityContextFactory) {
1:f9451e5:         if (securityContextFactory == null) {
1:f9451e5:             throw new IllegalArgumentException("SecurityContextFactory argument cannot be null.");
1:f9451e5:         }
1:f9451e5:         this.securityContextFactory = securityContextFactory;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected Subject createSubject(ConnectionReference conn) {
1:f9451e5:         return this.connectionSubjectFactory.createSubject(conn);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected SecurityContext createSecurityContext(SubjectConnectionReference conn) {
1:f9451e5:         return this.securityContextFactory.createSecurityContext(conn);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Creates a {@link Subject} instance reflecting the specified Connection.  The {@code Subject} is then stored in
1:f9451e5:      * a {@link SecurityContext} instance which is set as the Connection's
1:f9451e5:      * {@link ConnectionContext#setSecurityContext(org.apache.activemq.security.SecurityContext) securityContext}.
1:f9451e5:      *
1:f9451e5:      * @param context state associated with the client's connection
1:f9451e5:      * @param info    info about the client's connection
1:f9451e5:      * @throws Exception if there is a problem creating a Subject or {@code SecurityContext} instance.
1:f9451e5:      */
1:f9451e5:     @Override
1:f9451e5:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:f9451e5: 
1:f9451e5:         if (isEnabled()) {
1:f9451e5: 
1:f9451e5:             SecurityContext secCtx = context.getSecurityContext();
1:f9451e5: 
1:f9451e5:             if (secCtx == null) {
1:f9451e5:                 ConnectionReference conn = new ConnectionReference(context, info, getEnvironment());
1:f9451e5:                 Subject subject = createSubject(conn);
1:f9451e5:                 SubjectConnectionReference subjectConn = new SubjectConnectionReference(context, info, getEnvironment(), subject);
1:f9451e5:                 secCtx = createSecurityContext(subjectConn);
1:f9451e5:                 context.setSecurityContext(secCtx);
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         try {
1:f9451e5:             super.addConnection(context, info);
1:f9451e5:         } catch (Exception e) {
1:f9451e5:             context.setSecurityContext(null);
1:f9451e5:             throw e;
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:f9451e5:         try {
1:f9451e5:             super.removeConnection(context, info, error);
1:f9451e5:         } finally {
1:f9451e5:             context.setSecurityContext(null);
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.subject;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.security.SecurityContext;
1: import org.apache.activemq.shiro.ConnectionReference;
1: import org.apache.activemq.shiro.DefaultSecurityContextFactory;
1: import org.apache.activemq.shiro.SecurityContextFactory;
1: import org.apache.activemq.shiro.env.EnvironmentFilter;
1: import org.apache.shiro.subject.Subject;
1: 
1: /**
1:  * The {@code SubjectFilter} ensures a Shiro {@link Subject} representing the client's identity is associated with
1:  * every connection to the ActiveMQ Broker.  The {@code Subject} is made available to downstream broker filters so
1:  * they may perform security checks as necessary.
1:  * <p/>
1:  * This implementation does not perform any security checks/assertions itself.  It is expected that other broker filters
1:  * will be configured after this one and those will perform any security behavior or checks as necessary.
1:  *
1:  * @since 5.10.0
1:  */
1: public class SubjectFilter extends EnvironmentFilter {
1: 
1:     private ConnectionSubjectFactory connectionSubjectFactory;
1:     private SecurityContextFactory securityContextFactory;
1: 
1:     public SubjectFilter() {
1:         this.connectionSubjectFactory = new DefaultConnectionSubjectFactory();
1:         this.securityContextFactory = new DefaultSecurityContextFactory();
1:     }
1: 
1:     public ConnectionSubjectFactory getConnectionSubjectFactory() {
1:         return connectionSubjectFactory;
1:     }
1: 
1:     public void setConnectionSubjectFactory(ConnectionSubjectFactory connectionSubjectFactory) {
1:         if (connectionSubjectFactory == null) {
1:             throw new IllegalArgumentException("ConnectionSubjectFactory argument cannot be null.");
1:         }
1:         this.connectionSubjectFactory = connectionSubjectFactory;
1:     }
1: 
1:     public SecurityContextFactory getSecurityContextFactory() {
1:         return this.securityContextFactory;
1:     }
1: 
1:     public void setSecurityContextFactory(SecurityContextFactory securityContextFactory) {
1:         if (securityContextFactory == null) {
1:             throw new IllegalArgumentException("SecurityContextFactory argument cannot be null.");
1:         }
1:         this.securityContextFactory = securityContextFactory;
1:     }
1: 
1:     protected Subject createSubject(ConnectionReference conn) {
1:         return this.connectionSubjectFactory.createSubject(conn);
1:     }
1: 
1:     protected SecurityContext createSecurityContext(SubjectConnectionReference conn) {
1:         return this.securityContextFactory.createSecurityContext(conn);
1:     }
1: 
1:     /**
1:      * Creates a {@link Subject} instance reflecting the specified Connection.  The {@code Subject} is then stored in
1:      * a {@link SecurityContext} instance which is set as the Connection's
1:      * {@link ConnectionContext#setSecurityContext(org.apache.activemq.security.SecurityContext) securityContext}.
1:      *
1:      * @param context state associated with the client's connection
1:      * @param info    info about the client's connection
1:      * @throws Exception if there is a problem creating a Subject or {@code SecurityContext} instance.
1:      */
1:     @Override
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1: 
1:         if (isEnabled()) {
1: 
1:             SecurityContext secCtx = context.getSecurityContext();
1: 
1:             if (secCtx == null) {
1:                 ConnectionReference conn = new ConnectionReference(context, info, getEnvironment());
1:                 Subject subject = createSubject(conn);
1:                 SubjectConnectionReference subjectConn = new SubjectConnectionReference(context, info, getEnvironment(), subject);
1:                 secCtx = createSecurityContext(subjectConn);
1:                 context.setSecurityContext(secCtx);
1:             }
1:         }
1: 
1:         try {
1:             super.addConnection(context, info);
1:         } catch (Exception e) {
1:             context.setSecurityContext(null);
1:             throw e;
1:         }
1:     }
1: 
1:     @Override
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:         try {
1:             super.removeConnection(context, info, error);
1:         } finally {
1:             context.setSecurityContext(null);
1:         }
1:     }
1: }
============================================================================