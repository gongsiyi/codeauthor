1:83760fd: /**
1:83760fd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:83760fd:  * contributor license agreements.  See the NOTICE file distributed with
1:83760fd:  * this work for additional information regarding copyright ownership.
1:83760fd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:83760fd:  * (the "License"); you may not use this file except in compliance with
1:83760fd:  * the License.  You may obtain a copy of the License at
1:83760fd:  *
1:83760fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:83760fd:  *
1:83760fd:  * Unless required by applicable law or agreed to in writing, software
1:83760fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:83760fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:83760fd:  * See the License for the specific language governing permissions and
1:83760fd:  * limitations under the License.
1:83760fd:  */
1:83760fd: package org.apache.activemq.joramtests;
2:83760fd: 
1:fefb228: import java.io.File;
1:fefb228: import java.net.URI;
1:fefb228: import java.util.Hashtable;
1:fefb228: 
1:fefb228: import javax.jms.ConnectionFactory;
1:fefb228: import javax.naming.Context;
1:fefb228: import javax.naming.InitialContext;
1:fefb228: import javax.naming.NamingException;
1:fefb228: 
1:83760fd: import org.apache.activemq.ActiveMQConnectionFactory;
1:83760fd: import org.apache.activemq.broker.BrokerFactory;
1:83760fd: import org.apache.activemq.broker.BrokerService;
1:83760fd: import org.apache.activemq.command.ActiveMQQueue;
1:83760fd: import org.apache.activemq.command.ActiveMQTopic;
1:83760fd: import org.objectweb.jtests.jms.admin.Admin;
1:83760fd: 
1:83760fd: /**
1:83760fd:  *
1:83760fd:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:83760fd:  */
1:83760fd: public class ActiveMQAdmin implements Admin {
1:83760fd: 
1:83760fd:     Context context;
1:83760fd:     {
1:83760fd:         try {
1:83760fd:             // Use the jetty JNDI context since it's mutable.
1:83760fd:             final Hashtable<String, String> env = new Hashtable<String, String>();
1:83760fd:             env.put("java.naming.factory.initial", "org.eclipse.jetty.jndi.InitialContextFactory");
1:83760fd:             env.put("java.naming.factory.url.pkgs", "org.eclipse.jetty.jndi");;
1:83760fd:             context = new InitialContext(env);
1:83760fd:         } catch (NamingException e) {
1:83760fd:             throw new RuntimeException(e);
1:83760fd:         }
1:83760fd:     }
1:83760fd: 
1:83760fd:     protected BrokerService createBroker() throws Exception {
1:83760fd:         return BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false"));
1:83760fd:     }
1:83760fd: 
1:83760fd:     public String getName() {
1:83760fd:         return getClass().getName();
1:83760fd:     }
1:83760fd: 
1:83760fd:     BrokerService broker;
1:83760fd:     public void startServer() throws Exception {
1:83760fd:         if (System.getProperty("basedir") == null) {
1:83760fd:             File file = new File(".");
1:83760fd:             System.setProperty("basedir", file.getAbsolutePath());
1:83760fd:         }
1:83760fd:         broker = createBroker();
1:83760fd:         broker.start();
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void stopServer() throws Exception {
1:83760fd:         broker.stop();
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void start() throws Exception {
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void stop() throws Exception {
1:83760fd:     }
1:83760fd: 
1:83760fd:     public Context createContext() throws NamingException {
1:83760fd:         return context;
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void createQueue(String name) {
1:83760fd:         try {
1:83760fd:             context.bind(name, new ActiveMQQueue(name));
1:83760fd:         } catch (NamingException e) {
1:83760fd:             throw new RuntimeException(e);
1:83760fd:         }
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void createTopic(String name) {
1:83760fd:         try {
1:83760fd:             context.bind(name, new ActiveMQTopic(name));
1:83760fd:         } catch (NamingException e) {
1:83760fd:             throw new RuntimeException(e);
1:83760fd:         }
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void deleteQueue(String name) {
1:83760fd:         // BrokerTestSupport.delete_queue((Broker)base.broker, name);
1:83760fd:         try {
1:83760fd:             context.unbind(name);
1:83760fd:         } catch (NamingException e) {
1:83760fd:             throw new RuntimeException(e);
1:83760fd:         }
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void deleteTopic(String name) {
1:83760fd:         try {
1:83760fd:             context.unbind(name);
1:83760fd:         } catch (NamingException e) {
1:83760fd:             throw new RuntimeException(e);
1:83760fd:         }
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void createConnectionFactory(String name) {
1:83760fd:         try {
1:83760fd:             final ConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:fefb228:             ((ActiveMQConnectionFactory) factory).setNestedMapAndListEnabled(false);
1:83760fd:             context.bind(name, factory);
1:83760fd:         } catch (NamingException e) {
1:83760fd:             throw new RuntimeException(e);
1:83760fd:         }
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void deleteConnectionFactory(String name) {
1:83760fd:         try {
1:83760fd:             context.unbind(name);
1:83760fd:         } catch (NamingException e) {
1:83760fd:             throw new RuntimeException(e);
1:83760fd:         }
1:83760fd:     }
1:83760fd: 
1:83760fd:     public void createQueueConnectionFactory(String name) {
1:83760fd:         createConnectionFactory(name);
1:83760fd:     }
1:83760fd:     public void createTopicConnectionFactory(String name) {
1:83760fd:         createConnectionFactory(name);
1:83760fd:     }
1:83760fd:     public void deleteQueueConnectionFactory(String name) {
1:83760fd:         deleteConnectionFactory(name);
1:83760fd:     }
1:83760fd:     public void deleteTopicConnectionFactory(String name) {
1:83760fd:         deleteConnectionFactory(name);
1:83760fd:     }
1:83760fd: 
1:83760fd: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:fefb228
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.net.URI;
1: import java.util.Hashtable;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.NamingException;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             ((ActiveMQConnectionFactory) factory).setNestedMapAndListEnabled(false);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:83760fd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.joramtests;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.objectweb.jtests.jms.admin.Admin;
1: 
0: import javax.jms.ConnectionFactory;
0: import javax.naming.Context;
0: import javax.naming.InitialContext;
0: import javax.naming.NamingException;
0: import java.io.File;
0: import java.net.URI;
0: import java.util.Hashtable;
1: 
1: /**
1:  *
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class ActiveMQAdmin implements Admin {
1: 
1:     Context context;
1:     {
1:         try {
1:             // Use the jetty JNDI context since it's mutable.
1:             final Hashtable<String, String> env = new Hashtable<String, String>();
1:             env.put("java.naming.factory.initial", "org.eclipse.jetty.jndi.InitialContextFactory");
1:             env.put("java.naming.factory.url.pkgs", "org.eclipse.jetty.jndi");;
1:             context = new InitialContext(env);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false"));
1:     }
1: 
1:     public String getName() {
1:         return getClass().getName();
1:     }
1: 
1:     BrokerService broker;
1:     public void startServer() throws Exception {
1:         if (System.getProperty("basedir") == null) {
1:             File file = new File(".");
1:             System.setProperty("basedir", file.getAbsolutePath());
1:         }
1:         broker = createBroker();
1:         broker.start();
1:     }
1: 
1:     public void stopServer() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     public void start() throws Exception {
1:     }
1: 
1:     public void stop() throws Exception {
1:     }
1: 
1:     public Context createContext() throws NamingException {
1:         return context;
1:     }
1: 
1:     public void createQueue(String name) {
1:         try {
1:             context.bind(name, new ActiveMQQueue(name));
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void createTopic(String name) {
1:         try {
1:             context.bind(name, new ActiveMQTopic(name));
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void deleteQueue(String name) {
1:         // BrokerTestSupport.delete_queue((Broker)base.broker, name);
1:         try {
1:             context.unbind(name);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void deleteTopic(String name) {
1:         try {
1:             context.unbind(name);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void createConnectionFactory(String name) {
1:         try {
1:             final ConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:             context.bind(name, factory);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void deleteConnectionFactory(String name) {
1:         try {
1:             context.unbind(name);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void createQueueConnectionFactory(String name) {
1:         createConnectionFactory(name);
1:     }
1:     public void createTopicConnectionFactory(String name) {
1:         createConnectionFactory(name);
1:     }
1:     public void deleteQueueConnectionFactory(String name) {
1:         deleteConnectionFactory(name);
1:     }
1:     public void deleteTopicConnectionFactory(String name) {
1:         deleteConnectionFactory(name);
1:     }
1: 
1: }
============================================================================