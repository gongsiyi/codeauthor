1:2a815c2: /**
1:2a815c2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2a815c2:  * contributor license agreements.  See the NOTICE file distributed with
1:2a815c2:  * this work for additional information regarding copyright ownership.
1:2a815c2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2a815c2:  * (the "License"); you may not use this file except in compliance with
1:2a815c2:  * the License.  You may obtain a copy of the License at
1:2a815c2:  * <p>
1:2a815c2:  * http://www.apache.org/licenses/LICENSE-2.0
1:2a815c2:  * <p>
1:2a815c2:  * Unless required by applicable law or agreed to in writing, software
1:2a815c2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a815c2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a815c2:  * See the License for the specific language governing permissions and
1:2a815c2:  * limitations under the License.
1:2a815c2:  */
1:2a815c2: package org.apache.activemq.store.jdbc;
1:2a815c2: 
1:2a815c2: import org.apache.activemq.ActiveMQXAConnection;
1:2a815c2: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:e52a052: import org.apache.activemq.TestSupport;
1:2a815c2: import org.apache.activemq.broker.BrokerService;
1:2a815c2: import org.apache.activemq.util.IOHelper;
1:2a815c2: import org.apache.commons.dbcp2.BasicDataSource;
1:2a815c2: import org.apache.derby.jdbc.EmbeddedDataSource;
1:2a815c2: import org.apache.derby.jdbc.EmbeddedDriver;
1:2a815c2: import org.junit.After;
1:2a815c2: import org.junit.Before;
1:2a815c2: import org.junit.Test;
1:2a815c2: 
1:2a815c2: import javax.jms.MessageProducer;
1:2a815c2: import javax.jms.XASession;
1:2a815c2: import javax.sql.DataSource;
1:2a815c2: import javax.transaction.xa.XAResource;
1:2a815c2: import javax.transaction.xa.Xid;
1:2a815c2: import java.io.File;
1:2a815c2: import java.util.concurrent.CountDownLatch;
1:2a815c2: import java.util.concurrent.ExecutorService;
1:2a815c2: import java.util.concurrent.Executors;
1:2a815c2: import java.util.concurrent.TimeUnit;
1:2a815c2: 
1:2a815c2: import static junit.framework.TestCase.assertTrue;
1:2a815c2: import static org.apache.activemq.util.TestUtils.createXid;
1:2a815c2: 
1:2a815c2: 
1:2a815c2: public class JDBCCleanupLimitedPoolTest {
1:2a815c2: 
1:2a815c2:     BrokerService broker;
1:2a815c2:     JDBCPersistenceAdapter jdbcPersistenceAdapter;
1:2a815c2:     BasicDataSource pool;
1:2a815c2:     EmbeddedDataSource derby;
1:2a815c2: 
1:2a815c2:     @Before
1:2a815c2:     public void setUp() throws Exception {
1:2a815c2:         System.setProperty("derby.system.home", new File(IOHelper.getDefaultDataDirectory()).getCanonicalPath());
1:2a815c2:         derby = new EmbeddedDataSource();
1:2a815c2:         derby.setDatabaseName("derbyDb");
1:2a815c2:         derby.setCreateDatabase("create");
1:ad657cc:         derby.getConnection().close();
1:2a815c2: 
1:2a815c2:         broker = createBroker();
1:2a815c2:         broker.start();
1:2a815c2:         broker.waitUntilStarted();
1:2a815c2:     }
1:2a815c2: 
1:2a815c2:     @After
1:2a815c2:     public void tearDown() throws Exception {
1:2a815c2:         broker.stop();
1:2a815c2:         pool.close();
1:2a815c2:         DataSourceServiceSupport.shutdownDefaultDataSource(derby);
1:2a815c2:     }
1:2a815c2: 
1:2a815c2:     protected BrokerService createBroker() throws Exception {
1:2a815c2:         broker = new BrokerService();
1:2a815c2:         broker.setUseJmx(false);
1:2a815c2:         jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:2a815c2:         jdbcPersistenceAdapter.deleteAllMessages();
1:2a815c2:         jdbcPersistenceAdapter.setCleanupPeriod(0);
1:2a815c2:         jdbcPersistenceAdapter.setUseLock(false);
1:2a815c2:         pool = new BasicDataSource();
1:2a815c2:         pool.setDriverClassName(EmbeddedDriver.class.getCanonicalName());
1:2a815c2:         pool.setUrl("jdbc:derby:derbyDb;create=false");
1:2a815c2:         pool.setUsername("uid");
1:2a815c2:         pool.setPassword("pwd");
1:2a815c2:         pool.setMaxTotal(2);
1:2a815c2:         jdbcPersistenceAdapter.setDataSource(pool);
1:2a815c2:         broker.setPersistenceAdapter(jdbcPersistenceAdapter);
1:2a815c2:         broker.addConnector("tcp://0.0.0.0:0");
1:2a815c2:         return broker;
1:2a815c2:     }
1:2a815c2: 
1:2a815c2: 
1:2a815c2:     @Test
1:2a815c2:     public void testNoDeadlockOnXaPoolExhaustion() throws Exception {
1:2a815c2:         final CountDownLatch done = new CountDownLatch(1);
1:2985651:         final CountDownLatch doneCommit = new CountDownLatch(1000);
1:2a815c2: 
1:2a815c2:         final ActiveMQXAConnectionFactory factory = new ActiveMQXAConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:2a815c2: 
1:2a815c2:         ExecutorService executorService = Executors.newCachedThreadPool();
1:2a815c2:         // some contention over pool of 2
1:2a815c2:         for (int i = 0; i < 3; i++) {
1:2a815c2:             executorService.execute(new Runnable() {
1:2a815c2:                 @Override
1:2a815c2:                 public void run() {
1:2a815c2:                     try {
1:2a815c2:                         ActiveMQXAConnection conn = (ActiveMQXAConnection) factory.createXAConnection();
1:2a815c2:                         conn.start();
1:2a815c2:                         XASession sess = conn.createXASession();
1:2a815c2:                         while (done.getCount() > 0 && doneCommit.getCount() > 0) {
1:2a815c2:                             Xid xid = createXid();
1:2a815c2:                             sess.getXAResource().start(xid, XAResource.TMNOFLAGS);
1:2a815c2:                             MessageProducer producer = sess.createProducer(sess.createQueue("test"));
1:2a815c2:                             producer.send(sess.createTextMessage("test"));
1:2a815c2:                             sess.getXAResource().end(xid, XAResource.TMSUCCESS);
1:2a815c2:                             sess.getXAResource().prepare(xid);
1:2a815c2:                             sess.getXAResource().commit(xid, false);
1:2a815c2:                             doneCommit.countDown();
1:2a815c2:                         }
1:2a815c2: 
1:2a815c2:                         conn.close();
1:2a815c2: 
1:2a815c2:                     } catch (Exception ignored) {
1:2a815c2:                         ignored.printStackTrace();
1:2a815c2:                     }
1:2a815c2:                 }
1:2a815c2:             });
1:2a815c2:         }
1:2a815c2: 
1:2a815c2: 
1:2a815c2:         executorService.execute(new Runnable() {
1:2a815c2:             @Override
1:2a815c2:             public void run() {
1:2a815c2:                 try {
1:2a815c2:                     while (!done.await(10, TimeUnit.MILLISECONDS) && doneCommit.getCount() > 0) {
1:2a815c2:                         jdbcPersistenceAdapter.cleanup();
1:2a815c2:                     }
1:2a815c2:                 } catch (Exception ignored) {
1:2a815c2:                 }
1:2a815c2: 
1:2a815c2:             }
1:2a815c2:         });
1:2a815c2: 
1:2a815c2:         executorService.shutdown();
1:2985651:         boolean allComplete = executorService.awaitTermination(40, TimeUnit.SECONDS);
1:e52a052:         if (!allComplete) {
1:e52a052:             TestSupport.dumpAllThreads("Why-at-count-" + doneCommit.getCount() +"-");
1:e52a052:         }
1:2a815c2:         done.countDown();
1:2a815c2:         assertTrue("all complete", allComplete);
1:2a815c2:         executorService.shutdownNow();
1:2a815c2: 
1:2a815c2:         assertTrue("xa tx done", doneCommit.await(10, TimeUnit.SECONDS));
1:2a815c2:     }
1:2a815c2: 
1:2a815c2: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e52a052
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TestSupport;
/////////////////////////////////////////////////////////////////////////
1:         if (!allComplete) {
1:             TestSupport.dumpAllThreads("Why-at-count-" + doneCommit.getCount() +"-");
1:         }
commit:2985651
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch doneCommit = new CountDownLatch(1000);
/////////////////////////////////////////////////////////////////////////
1:         boolean allComplete = executorService.awaitTermination(40, TimeUnit.SECONDS);
commit:ad657cc
/////////////////////////////////////////////////////////////////////////
1:         derby.getConnection().close();
commit:2a815c2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import org.apache.activemq.ActiveMQXAConnection;
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.commons.dbcp2.BasicDataSource;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.apache.derby.jdbc.EmbeddedDriver;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import javax.jms.MessageProducer;
1: import javax.jms.XASession;
1: import javax.sql.DataSource;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: import java.io.File;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static junit.framework.TestCase.assertTrue;
1: import static org.apache.activemq.util.TestUtils.createXid;
1: 
1: 
1: public class JDBCCleanupLimitedPoolTest {
1: 
1:     BrokerService broker;
1:     JDBCPersistenceAdapter jdbcPersistenceAdapter;
1:     BasicDataSource pool;
1:     EmbeddedDataSource derby;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         System.setProperty("derby.system.home", new File(IOHelper.getDefaultDataDirectory()).getCanonicalPath());
1:         derby = new EmbeddedDataSource();
1:         derby.setDatabaseName("derbyDb");
1:         derby.setCreateDatabase("create");
1: 
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:         pool.close();
1:         DataSourceServiceSupport.shutdownDefaultDataSource(derby);
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:         jdbcPersistenceAdapter.deleteAllMessages();
1:         jdbcPersistenceAdapter.setCleanupPeriod(0);
1:         jdbcPersistenceAdapter.setUseLock(false);
1:         pool = new BasicDataSource();
1:         pool.setDriverClassName(EmbeddedDriver.class.getCanonicalName());
1:         pool.setUrl("jdbc:derby:derbyDb;create=false");
1:         pool.setUsername("uid");
1:         pool.setPassword("pwd");
1:         pool.setMaxTotal(2);
1:         jdbcPersistenceAdapter.setDataSource(pool);
1:         broker.setPersistenceAdapter(jdbcPersistenceAdapter);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         return broker;
1:     }
1: 
1: 
1:     @Test
1:     public void testNoDeadlockOnXaPoolExhaustion() throws Exception {
1:         final CountDownLatch done = new CountDownLatch(1);
0:         final CountDownLatch doneCommit = new CountDownLatch(2000);
1: 
1:         final ActiveMQXAConnectionFactory factory = new ActiveMQXAConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1: 
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         // some contention over pool of 2
1:         for (int i = 0; i < 3; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         ActiveMQXAConnection conn = (ActiveMQXAConnection) factory.createXAConnection();
1:                         conn.start();
1:                         XASession sess = conn.createXASession();
1:                         while (done.getCount() > 0 && doneCommit.getCount() > 0) {
1:                             Xid xid = createXid();
1:                             sess.getXAResource().start(xid, XAResource.TMNOFLAGS);
1:                             MessageProducer producer = sess.createProducer(sess.createQueue("test"));
1:                             producer.send(sess.createTextMessage("test"));
1:                             sess.getXAResource().end(xid, XAResource.TMSUCCESS);
1:                             sess.getXAResource().prepare(xid);
1:                             sess.getXAResource().commit(xid, false);
1:                             doneCommit.countDown();
1:                         }
1: 
1:                         conn.close();
1: 
1:                     } catch (Exception ignored) {
1:                         ignored.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1: 
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     while (!done.await(10, TimeUnit.MILLISECONDS) && doneCommit.getCount() > 0) {
1:                         jdbcPersistenceAdapter.cleanup();
1:                     }
1:                 } catch (Exception ignored) {
1:                 }
1: 
1:             }
1:         });
1: 
1:         executorService.shutdown();
0:         boolean allComplete = executorService.awaitTermination(20, TimeUnit.SECONDS);
1:         done.countDown();
1:         assertTrue("all complete", allComplete);
1:         executorService.shutdownNow();
1: 
1:         assertTrue("xa tx done", doneCommit.await(10, TimeUnit.SECONDS));
1:     }
1: 
1: }
============================================================================