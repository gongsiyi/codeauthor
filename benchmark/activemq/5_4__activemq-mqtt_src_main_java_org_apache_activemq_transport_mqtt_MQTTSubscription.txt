1:cfc6917: /**
1:cfc6917:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cfc6917:  * contributor license agreements.  See the NOTICE file distributed with
1:cfc6917:  * this work for additional information regarding copyright ownership.
1:cfc6917:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cfc6917:  * (the "License"); you may not use this file except in compliance with
1:cfc6917:  * the License.  You may obtain a copy of the License at
1:cfc6917:  *
1:cfc6917:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cfc6917:  *
1:cfc6917:  * Unless required by applicable law or agreed to in writing, software
1:cfc6917:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cfc6917:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cfc6917:  * See the License for the specific language governing permissions and
1:cfc6917:  * limitations under the License.
2:cfc6917:  */
1:cfc6917: package org.apache.activemq.transport.mqtt;
1:4c38438: 
1:4c38438: import java.io.IOException;
1:4c38438: import java.util.zip.DataFormatException;
1:d8f9686: 
1:4c38438: import javax.jms.JMSException;
1:67f151f: 
1:cfc6917: import org.apache.activemq.command.ActiveMQDestination;
1:4c38438: import org.apache.activemq.command.ActiveMQMessage;
1:cfc6917: import org.apache.activemq.command.ConsumerInfo;
1:cfc6917: import org.apache.activemq.command.MessageAck;
1:cfc6917: import org.apache.activemq.command.MessageDispatch;
1:0f5b406: import org.fusesource.mqtt.client.QoS;
1:4c38438: import org.fusesource.mqtt.codec.PUBLISH;
13:cfc6917: 
1:cfc6917: /**
1:0f5b406:  * Keeps track of the MQTT client subscription so that acking is correctly done.
1:cfc6917:  */
1:d8f9686: public class MQTTSubscription {
1:d8f9686: 
1:0f5b406:     private final MQTTProtocolConverter protocolConverter;
1:cfc6917: 
1:0f5b406:     private final ConsumerInfo consumerInfo;
1:d8f9686:     private final String topicName;
1:0f5b406:     private final QoS qos;
1:cfc6917: 
1:d8f9686:     public MQTTSubscription(MQTTProtocolConverter protocolConverter, String topicName, QoS qos, ConsumerInfo consumerInfo) {
1:cfc6917:         this.protocolConverter = protocolConverter;
1:cfc6917:         this.consumerInfo = consumerInfo;
1:0f5b406:         this.qos = qos;
1:d8f9686:         this.topicName = topicName;
7:cfc6917:     }
1:67f151f: 
1:d8f9686:     /**
1:d8f9686:      * Create a {@link MessageAck} that will acknowledge the given {@link MessageDispatch}.
1:d8f9686:      *
1:d8f9686:      * @param md
1:d8f9686:      *        the {@link MessageDispatch} to acknowledge.
1:d8f9686:      *
1:d8f9686:      * @return a new {@link MessageAck} command to acknowledge the message.
1:d8f9686:      */
1:d8f9686:     public MessageAck createMessageAck(MessageDispatch md) {
1:28b4534:         return new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1);
1:cfc6917:     }
1:0f5b406: 
1:d8f9686:     /**
1:d8f9686:      * Creates a PUBLISH command that can be sent to a remote client from an
1:d8f9686:      * incoming {@link ActiveMQMessage} instance.
1:d8f9686:      *
1:d8f9686:      * @param message
1:d8f9686:      *        the message to convert to a PUBLISH command.
1:d8f9686:      *
1:d8f9686:      * @return a new PUBLISH command that is populated from the {@link ActiveMQMessage}.
1:d8f9686:      *
1:d8f9686:      * @throws DataFormatException
1:d8f9686:      * @throws IOException
1:d8f9686:      * @throws JMSException
1:d8f9686:      */
1:d8f9686:     public PUBLISH createPublish(ActiveMQMessage message) throws DataFormatException, IOException, JMSException {
1:4c38438:         PUBLISH publish = protocolConverter.convertMessage(message);
1:4c38438:         if (publish.qos().ordinal() > this.qos.ordinal()) {
1:4c38438:             publish.qos(this.qos);
1:4c38438:         }
1:67f151f:         switch (publish.qos()) {
1:67f151f:             case AT_LEAST_ONCE:
1:67f151f:             case EXACTLY_ONCE:
1:67f151f:                 // set packet id, and optionally dup flag
1:afddc1a:                 protocolConverter.getPacketIdGenerator().setPacketId(protocolConverter.getClientId(), this, message, publish);
1:67f151f:             case AT_MOST_ONCE:
1:67f151f:         }
1:4c38438:         return publish;
1:4c38438:     }
1:4c38438: 
1:d8f9686:     /**
1:d8f9686:      * Given a PUBLISH command determine if it will expect an ACK based on the
1:d8f9686:      * QoS of the Publish command and the QoS of this subscription.
1:d8f9686:      *
1:d8f9686:      * @param publish
1:d8f9686:      *        The publish command to inspect.
1:d8f9686:      *
1:d8f9686:      * @return true if the client will expect an PUBACK for this PUBLISH.
1:d8f9686:      */
1:09c4500:     public boolean expectAck(PUBLISH publish) {
1:09c4500:         QoS publishQoS = publish.qos();
1:09c4500:         if (publishQoS.compareTo(this.qos) > 0){
1:09c4500:             publishQoS = this.qos;
1:09c4500:         }
1:09c4500:         return !publishQoS.equals(QoS.AT_MOST_ONCE);
1:4c38438:     }
1:0f5b406: 
1:d8f9686:     /**
1:d8f9686:      * @returns the original topic name value the client used when subscribing.
1:d8f9686:      */
1:d8f9686:     public String getTopicName() {
1:d8f9686:         return this.topicName;
1:d8f9686:     }
1:d8f9686: 
1:d8f9686:     /**
1:d8f9686:      * The real {@link ActiveMQDestination} that this subscription is assigned.
1:d8f9686:      *
1:d8f9686:      * @return the real {@link ActiveMQDestination} assigned to this subscription.
1:d8f9686:      */
1:d8f9686:     public ActiveMQDestination getDestination() {
1:d8f9686:         return consumerInfo.getDestination();
1:d8f9686:     }
1:d8f9686: 
1:d8f9686:     /**
1:d8f9686:      * Gets the {@link ConsumerInfo} that describes the subscription sent to ActiveMQ.
1:d8f9686:      *
1:d8f9686:      * @return the {@link ConsumerInfo} used to create this subscription.
1:d8f9686:      */
1:cfc6917:     public ConsumerInfo getConsumerInfo() {
1:cfc6917:         return consumerInfo;
1:cfc6917:     }
1:7e56f34: 
1:d8f9686:     /**
1:d8f9686:      * @return the assigned QoS value for this subscription.
1:d8f9686:      */
1:413e484:     public QoS getQoS() {
1:7e56f34:         return qos;
1:7e56f34:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public String toString() {
1:413e484:         return "MQTT Sub: topic[" + topicName + "] -> [" + consumerInfo.getDestination() + "]";
1:413e484:     }
1:cfc6917: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:28b4534
/////////////////////////////////////////////////////////////////////////
1:         return new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:413e484
/////////////////////////////////////////////////////////////////////////
1:     public QoS getQoS() {
1: 
1:     @Override
1:     public String toString() {
1:         return "MQTT Sub: topic[" + topicName + "] -> [" + consumerInfo.getDestination() + "]";
1:     }
commit:d8f9686
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: public class MQTTSubscription {
1: 
1:     private final String topicName;
1:     public MQTTSubscription(MQTTProtocolConverter protocolConverter, String topicName, QoS qos, ConsumerInfo consumerInfo) {
1:         this.topicName = topicName;
1:     /**
1:      * Create a {@link MessageAck} that will acknowledge the given {@link MessageDispatch}.
1:      *
1:      * @param md
1:      *        the {@link MessageDispatch} to acknowledge.
1:      *
1:      * @return a new {@link MessageAck} command to acknowledge the message.
1:      */
1:     public MessageAck createMessageAck(MessageDispatch md) {
1:     /**
1:      * Creates a PUBLISH command that can be sent to a remote client from an
1:      * incoming {@link ActiveMQMessage} instance.
1:      *
1:      * @param message
1:      *        the message to convert to a PUBLISH command.
1:      *
1:      * @return a new PUBLISH command that is populated from the {@link ActiveMQMessage}.
1:      *
1:      * @throws DataFormatException
1:      * @throws IOException
1:      * @throws JMSException
1:      */
1:     public PUBLISH createPublish(ActiveMQMessage message) throws DataFormatException, IOException, JMSException {
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Given a PUBLISH command determine if it will expect an ACK based on the
1:      * QoS of the Publish command and the QoS of this subscription.
1:      *
1:      * @param publish
1:      *        The publish command to inspect.
1:      *
1:      * @return true if the client will expect an PUBACK for this PUBLISH.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @returns the original topic name value the client used when subscribing.
1:      */
1:     public String getTopicName() {
1:         return this.topicName;
1:     }
1: 
1:     /**
1:      * The real {@link ActiveMQDestination} that this subscription is assigned.
1:      *
1:      * @return the real {@link ActiveMQDestination} assigned to this subscription.
1:      */
1:     public ActiveMQDestination getDestination() {
1:         return consumerInfo.getDestination();
1:     }
1: 
1:     /**
1:      * Gets the {@link ConsumerInfo} that describes the subscription sent to ActiveMQ.
1:      *
1:      * @return the {@link ConsumerInfo} used to create this subscription.
1:      */
1:     /**
1:      * @return the assigned QoS value for this subscription.
1:      */
commit:afddc1a
/////////////////////////////////////////////////////////////////////////
1:                 protocolConverter.getPacketIdGenerator().setPacketId(protocolConverter.getClientId(), this, message, publish);
commit:7e56f34
/////////////////////////////////////////////////////////////////////////
1: 
0:     public QoS qos() {
1:         return qos;
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:67f151f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         switch (publish.qos()) {
1:             case AT_LEAST_ONCE:
1:             case EXACTLY_ONCE:
1:                 // set packet id, and optionally dup flag
0:                 protocolConverter.setPacketId(this, message, publish);
1:             case AT_MOST_ONCE:
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:09c4500
/////////////////////////////////////////////////////////////////////////
1:     public boolean expectAck(PUBLISH publish) {
1:         QoS publishQoS = publish.qos();
1:         if (publishQoS.compareTo(this.qos) > 0){
1:             publishQoS = this.qos;
1:         }
1:         return !publishQoS.equals(QoS.AT_MOST_ONCE);
commit:4c38438
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.zip.DataFormatException;
1: 
1: import javax.jms.JMSException;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.fusesource.mqtt.codec.PUBLISH;
/////////////////////////////////////////////////////////////////////////
0:     PUBLISH createPublish(ActiveMQMessage message) throws DataFormatException, IOException, JMSException {
1:         PUBLISH publish = protocolConverter.convertMessage(message);
1:         if (publish.qos().ordinal() > this.qos.ordinal()) {
1:             publish.qos(this.qos);
1:         }
1:         return publish;
1:     }
1: 
0:     public boolean expectAck() {
0:         return qos != QoS.AT_MOST_ONCE;
1:     }
commit:0f5b406
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.mqtt.client.QoS;
1:  * Keeps track of the MQTT client subscription so that acking is correctly done.
0: class MQTTSubscription {
1:     private final MQTTProtocolConverter protocolConverter;
1:     private final ConsumerInfo consumerInfo;
0:     private ActiveMQDestination destination;
1:     private final QoS qos;
0:     public MQTTSubscription(MQTTProtocolConverter protocolConverter, QoS qos, ConsumerInfo consumerInfo) {
1:         this.qos = qos;
0:     MessageAck createMessageAck(MessageDispatch md) {
1: 
0:         switch (qos) {
0:             case AT_MOST_ONCE: {
0:                 return null;
1: 
0:         return new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);
commit:cfc6917
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
0: import java.io.IOException;
0: import java.util.LinkedHashMap;
0: import java.util.LinkedList;
1: 
0: import javax.jms.JMSException;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
0: import org.apache.activemq.command.MessageId;
0: import org.fusesource.mqtt.codec.MQTTFrame;
1: 
1: /**
0:  * Keeps track of the STOMP subscription so that acking is correctly done.
1:  */
0: public class MQTTSubscription {
1: 
1: 
0:     protected final MQTTProtocolConverter protocolConverter;
0:     protected final String subscriptionId;
0:     protected final ConsumerInfo consumerInfo;
1: 
0:     protected final LinkedHashMap<MessageId, MessageDispatch> dispatchedMessage = new LinkedHashMap<MessageId, MessageDispatch>();
0:     protected final LinkedList<MessageDispatch> unconsumedMessage = new LinkedList<MessageDispatch>();
1: 
0:     protected ActiveMQDestination destination;
0:     protected String transformation;
1: 
0:     public MQTTSubscription(MQTTProtocolConverter protocolConverter, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
1:         this.protocolConverter = protocolConverter;
0:         this.subscriptionId = subscriptionId;
1:         this.consumerInfo = consumerInfo;
0:         this.transformation = transformation;
1:     }
1: 
0:     void onMessageDispatch(MessageDispatch md) throws IOException, JMSException {
0:         ActiveMQMessage message = (ActiveMQMessage) md.getMessage();
0:         /*
0:         if (ackMode == CLIENT_ACK) {
0:             synchronized (this) {
0:                 dispatchedMessage.put(message.getMessageId(), md);
1:             }
0:         } else if (ackMode == INDIVIDUAL_ACK) {
0:             synchronized (this) {
0:                 dispatchedMessage.put(message.getMessageId(), md);
1:             }
0:         } else if (ackMode == AUTO_ACK) {
0:             MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);
0:             protocolConverter.getStompTransport().sendToActiveMQ(ack);
1:         }
1:         */
0:         MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);
0:         protocolConverter.getMQTTTransport().sendToActiveMQ(ack);
1: 
0:         MQTTFrame command = protocolConverter.convertMessage(message);
0:         protocolConverter.getMQTTTransport().sendToMQTT(command);
1:     }
1: 
1: 
0:     public String getSubscriptionId() {
0:         return subscriptionId;
1:     }
1: 
0:     public void setDestination(ActiveMQDestination destination) {
0:         this.destination = destination;
1:     }
1: 
0:     public ActiveMQDestination getDestination() {
0:         return destination;
1:     }
1: 
1:     public ConsumerInfo getConsumerInfo() {
1:         return consumerInfo;
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
============================================================================