1:63e3f41: /**
1:63e3f41:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:63e3f41:  * contributor license agreements.  See the NOTICE file distributed with
1:63e3f41:  * this work for additional information regarding copyright ownership.
1:63e3f41:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:63e3f41:  * (the "License"); you may not use this file except in compliance with
1:63e3f41:  * the License.  You may obtain a copy of the License at
1:ea84378:  *
1:63e3f41:  *      http://www.apache.org/licenses/LICENSE-2.0
2:63e3f41:  *
1:63e3f41:  * Unless required by applicable law or agreed to in writing, software
1:63e3f41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:63e3f41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:63e3f41:  * See the License for the specific language governing permissions and
1:63e3f41:  * limitations under the License.
1:63e3f41:  */
1:63e3f41: package org.apache.activemq.store;
1:d40f398: 
1:180b0ec: import java.io.IOException;
1:180b0ec: 
1:affd91e: import org.apache.activemq.broker.ConnectionContext;
1:63e3f41: import org.apache.activemq.command.ActiveMQDestination;
1:ea84378: import org.apache.activemq.command.Message;
1:ea84378: import org.apache.activemq.command.MessageAck;
1:37c2a95: import org.apache.activemq.command.MessageId;
1:63e3f41: import org.apache.activemq.usage.MemoryUsage;
1:ea84378: 
1:63e3f41: abstract public class AbstractMessageStore implements MessageStore {
1:ad1f751:     public static final ListenableFuture<Object> FUTURE;
1:63e3f41:     protected final ActiveMQDestination destination;
1:03f38ae:     protected boolean prioritizedMessages;
1:54e2e3b:     protected IndexListener indexListener;
1:785b16b:     protected final MessageStoreStatistics messageStoreStatistics = new MessageStoreStatistics();
1:affd91e: 
1:63e3f41:     public AbstractMessageStore(ActiveMQDestination destination) {
1:63e3f41:         this.destination = destination;
2:63e3f41:     }
1:d40f398: 
1:d40f398:     @Override
1:63e3f41:     public void dispose(ConnectionContext context) {
1:63e3f41:     }
1:ea84378: 
1:d40f398:     @Override
1:63e3f41:     public void start() throws Exception {
1:785b16b:         recoverMessageStoreStatistics();
1:63e3f41:     }
1:ea84378: 
1:d40f398:     @Override
1:63e3f41:     public void stop() throws Exception {
1:63e3f41:     }
1:ea84378: 
1:d40f398:     @Override
1:63e3f41:     public ActiveMQDestination getDestination() {
1:63e3f41:         return destination;
1:63e3f41:     }
1:ea84378: 
1:d40f398:     @Override
1:63e3f41:     public void setMemoryUsage(MemoryUsage memoryUsage) {
1:63e3f41:     }
1:ea84378: 
1:d40f398:     @Override
1:2739333:     public void setBatch(MessageId messageId) throws IOException, Exception {
1:affd91e:     }
1:ea84378: 
1:affd91e:     /**
1:affd91e:      * flag to indicate if the store is empty
1:d40f398:      *
1:affd91e:      * @return true if the message count is 0
1:ea84378:      * @throws Exception
1:affd91e:      */
1:d40f398:     @Override
1:ea84378:     public boolean isEmpty() throws Exception {
1:ea84378:         return getMessageCount() == 0;
1:ea84378:     }
1:d40f398: 
1:d40f398:     @Override
1:03f38ae:     public void setPrioritizedMessages(boolean prioritizedMessages) {
1:03f38ae:         this.prioritizedMessages = prioritizedMessages;
1:d40f398:     }
1:ea84378: 
1:d40f398:     @Override
1:03f38ae:     public boolean isPrioritizedMessages() {
1:03f38ae:         return this.prioritizedMessages;
1:f4d4c3b:     }
1:f4d4c3b: 
1:d40f398:     @Override
1:d40f398:     public void addMessage(final ConnectionContext context, final Message message, final boolean canOptimizeHint) throws IOException{
1:d40f398:         addMessage(context, message);
1:ea84378:     }
1:f4d4c3b: 
1:d40f398:     @Override
1:ad1f751:     public ListenableFuture<Object> asyncAddQueueMessage(final ConnectionContext context, final Message message) throws IOException {
1:ea84378:         addMessage(context, message);
2:ea84378:         return FUTURE;
1:f4d4c3b:     }
1:f4d4c3b: 
1:d40f398:     @Override
1:ad1f751:     public ListenableFuture<Object> asyncAddQueueMessage(final ConnectionContext context, final Message message, final boolean canOptimizeHint) throws IOException {
1:d40f398:         addMessage(context, message, canOptimizeHint);
1:f4d4c3b:         return FUTURE;
1:f4d4c3b:     }
1:f4d4c3b: 
1:d40f398:     @Override
1:ad1f751:     public ListenableFuture<Object> asyncAddTopicMessage(final ConnectionContext context, final Message message, final boolean canOptimizeHint) throws IOException {
1:d40f398:         addMessage(context, message, canOptimizeHint);
1:f4d4c3b:         return FUTURE;
1:ea84378:     }
1:f4d4c3b: 
1:d40f398:     @Override
1:ad1f751:     public ListenableFuture<Object> asyncAddTopicMessage(final ConnectionContext context, final Message message) throws IOException {
1:ea84378:         addMessage(context, message);
1:ad1f751:         return new InlineListenableFuture();
1:ea84378:     }
1:ea84378: 
1:d40f398:     @Override
1:ea84378:     public void removeAsyncMessage(ConnectionContext context, MessageAck ack) throws IOException {
1:ea84378:         removeMessage(context, ack);
1:ea84378:     }
1:d40f398: 
1:54e2e3b:     @Override
1:266d23e:     public void updateMessage(Message message) throws IOException {
1:266d23e:         throw new IOException("update is not supported by: " + this);
1:266d23e:     }
1:266d23e: 
1:54e2e3b:     @Override
1:54e2e3b:     public void registerIndexListener(IndexListener indexListener) {
1:54e2e3b:         this.indexListener = indexListener;
1:54e2e3b:     }
1:54e2e3b: 
1:3155c62:     public IndexListener getIndexListener() {
1:3155c62:         return indexListener;
1:3155c62:     }
1:3155c62: 
1:ea84378:     static {
1:ad1f751:        FUTURE = new InlineListenableFuture();
1:ea84378:     }
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     public int getMessageCount() throws IOException {
1:785b16b:         return (int) getMessageStoreStatistics().getMessageCount().getCount();
1:785b16b:     }
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     public long getMessageSize() throws IOException {
1:785b16b:         return getMessageStoreStatistics().getMessageSize().getTotalSize();
1:785b16b:     }
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     public MessageStoreStatistics getMessageStoreStatistics() {
1:785b16b:         return messageStoreStatistics;
1:785b16b:     }
1:785b16b: 
1:785b16b:     protected void recoverMessageStoreStatistics() throws IOException {
1:785b16b: 
1:785b16b:     }
1:ea84378: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1:     protected final MessageStoreStatistics messageStoreStatistics = new MessageStoreStatistics();
/////////////////////////////////////////////////////////////////////////
1:         recoverMessageStoreStatistics();
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public int getMessageCount() throws IOException {
1:         return (int) getMessageStoreStatistics().getMessageCount().getCount();
1:     }
1: 
1:     @Override
1:     public long getMessageSize() throws IOException {
1:         return getMessageStoreStatistics().getMessageSize().getTotalSize();
1:     }
1: 
1:     @Override
1:     public MessageStoreStatistics getMessageStoreStatistics() {
1:         return messageStoreStatistics;
1:     }
1: 
1:     protected void recoverMessageStoreStatistics() throws IOException {
1: 
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:3155c62
/////////////////////////////////////////////////////////////////////////
1:     public IndexListener getIndexListener() {
1:         return indexListener;
1:     }
1: 
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1:     protected IndexListener indexListener;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     public void registerIndexListener(IndexListener indexListener) {
1:         this.indexListener = indexListener;
1:     }
1: 
commit:ad1f751
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final ListenableFuture<Object> FUTURE;
/////////////////////////////////////////////////////////////////////////
1:     public ListenableFuture<Object> asyncAddQueueMessage(final ConnectionContext context, final Message message) throws IOException {
1:     public ListenableFuture<Object> asyncAddQueueMessage(final ConnectionContext context, final Message message, final boolean canOptimizeHint) throws IOException {
1:     public ListenableFuture<Object> asyncAddTopicMessage(final ConnectionContext context, final Message message, final boolean canOptimizeHint) throws IOException {
1:     public ListenableFuture<Object> asyncAddTopicMessage(final ConnectionContext context, final Message message) throws IOException {
1:         return new InlineListenableFuture();
/////////////////////////////////////////////////////////////////////////
1:        FUTURE = new InlineListenableFuture();
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1:     public void updateMessage(Message message) throws IOException {
1:         throw new IOException("update is not supported by: " + this);
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:2739333
/////////////////////////////////////////////////////////////////////////
1:     public void setBatch(MessageId messageId) throws IOException, Exception {
commit:180b0ec
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void setBatch(MessageId messageId) throws IOException {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d40f398
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:      *
1:     @Override
1: 
1:     @Override
1:     }
1:     @Override
1:     @Override
1:     public void addMessage(final ConnectionContext context, final Message message, final boolean canOptimizeHint) throws IOException{
1:         addMessage(context, message);
1:     @Override
1:     @Override
1:         addMessage(context, message, canOptimizeHint);
1:     @Override
1:         addMessage(context, message, canOptimizeHint);
1:     @Override
1:     @Override
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:f4d4c3b
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void addMessage(final ConnectionContext context, final Message message,final boolean canOptimizeHint) throws IOException{
0:         addMessage(context,message);
1:     }
1: 
1: 
0:     public Future<Object> asyncAddQueueMessage(final ConnectionContext context, final Message message,final boolean canOptimizeHint) throws IOException {
0:         addMessage(context, message,canOptimizeHint);
1:         return FUTURE;
1:     }
1: 
0:     public Future<Object> asyncAddTopicMessage(final ConnectionContext context, final Message message,final boolean canOptimizeHint) throws IOException {
0:         addMessage(context, message,canOptimizeHint);
1:         return FUTURE;
1:     }
1: 
commit:ea84378
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.Future;
0: import java.util.concurrent.FutureTask;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
0:     static final FutureTask<Object> FUTURE;
1:     
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      * 
1:      * @throws Exception
1:     public boolean isEmpty() throws Exception {
1:         return getMessageCount() == 0;
1:     }
1: 
0:     public Future<Object> asyncAddQueueMessage(final ConnectionContext context, final Message message) throws IOException {
1:         addMessage(context, message);
1:         return FUTURE;
1:     }
1: 
1:        
0:     public Future<Object> asyncAddTopicMessage(final ConnectionContext context, final Message message) throws IOException {
1:         addMessage(context, message);
1:         return FUTURE;
1:     }
1: 
1:     public void removeAsyncMessage(ConnectionContext context, MessageAck ack) throws IOException {
1:         removeMessage(context, ack);
1:     }
1:     
0:     static class CallableImplementation implements Callable<Object> {
0:         public Object call() throws Exception {
0:             return null;
1:         }
1:     }
1: 
1:     static {
0:        FUTURE = new FutureTask<Object>(new CallableImplementation());
0:        FUTURE.run();
1:     }
commit:affd91e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ConnectionContext;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * flag to indicate if the store is empty
1:      * @return true if the message count is 0
0:      * @throws Exception 
1:      */
0:      public boolean isEmpty() throws Exception{
0:          return getMessageCount()==0;
1:      }
commit:63e3f41
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
0: 
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.usage.MemoryUsage;
0: 
1: abstract public class AbstractMessageStore implements MessageStore {
1:     protected final ActiveMQDestination destination;
0: 
1:     public AbstractMessageStore(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
0: 
1:     public void dispose(ConnectionContext context) {
1:     }
0: 
1:     public void start() throws Exception {
1:     }
0: 
1:     public void stop() throws Exception {
1:     }
0: 
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
0: 
1:     public void setMemoryUsage(MemoryUsage memoryUsage) {
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:03f38ae
/////////////////////////////////////////////////////////////////////////
1:     protected boolean prioritizedMessages;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void setPrioritizedMessages(boolean prioritizedMessages) {
1:         this.prioritizedMessages = prioritizedMessages;
0:     }    
0: 
1:     public boolean isPrioritizedMessages() {
1:         return this.prioritizedMessages;
0:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:50daa35
/////////////////////////////////////////////////////////////////////////
0:     public static final FutureTask<Object> FUTURE;
commit:37c2a95
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageId;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void setBatch(MessageId messageId) {
0:     }
============================================================================