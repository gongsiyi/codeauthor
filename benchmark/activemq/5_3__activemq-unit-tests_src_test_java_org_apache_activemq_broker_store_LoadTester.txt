1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.store;
11:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: 
1:d29ca2a: import javax.jms.BytesMessage;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnectionFactory;
1:d29ca2a: import org.apache.activemq.JmsTestSupport;
1:d29ca2a: import org.apache.activemq.broker.BrokerFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.ProgressPrinter;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:c7d559f:  *
1:d29ca2a:  */
1:d29ca2a: public class LoadTester extends JmsTestSupport {
1:fc00993: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(LoadTester.class);
1:c7d559f: 
1:fc00993:     protected int messageSize = 1024 * 64;
1:fc00993:     protected int produceCount = 10000;
1:75b1c94: 
1:c7d559f:     @Override
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:230a86c:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/broker/store/loadtester.xml"));
1:d29ca2a:     }
1:230a86c: 
1:c7d559f:     @Override
1:d29ca2a:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException, IOException {
1:c7d559f:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getServer().getConnectURI());
1:d29ca2a:         factory.setUseAsyncSend(true);
1:d29ca2a:         return factory;
1:d29ca2a:     }
1:230a86c: 
1:7f5213b:     public void testQueueSendThenAddConsumer() throws Exception {
1:fc00993:         ProgressPrinter printer = new ProgressPrinter(produceCount, 20);
1:230a86c: 
1:d29ca2a:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:230a86c: 
1:d29ca2a:         connection.setUseCompression(false);
1:d29ca2a:         connection.getPrefetchPolicy().setAll(10);
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:d29ca2a: 
1:fc00993:         LOG.info("Sending " + produceCount + " messages that are " + (messageSize / 1024.0) + "k large, for a total of " + (produceCount * messageSize / (1024.0 * 1024.0))
1:230a86c:                  + " megs of data.");
1:d29ca2a:         // Send a message to the broker.
1:d29ca2a:         long start = System.currentTimeMillis();
1:fc00993:         for (int i = 0; i < produceCount; i++) {
1:d29ca2a:             printer.increment();
1:230a86c:             BytesMessage msg = session.createBytesMessage();
1:fc00993:             msg.writeBytes(new byte[messageSize]);
1:d29ca2a:             producer.send(msg);
1:d29ca2a:         }
1:d29ca2a:         long end1 = System.currentTimeMillis();
1:230a86c: 
1:fc00993:         LOG.info("Produced messages/sec: " + (produceCount * 1000.0 / (end1 - start)));
1:230a86c: 
1:fc00993:         printer = new ProgressPrinter(produceCount, 10);
1:d29ca2a:         start = System.currentTimeMillis();
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:fc00993:         for (int i = 0; i < produceCount; i++) {
1:d29ca2a:             printer.increment();
1:230a86c:             assertNotNull("Getting message: " + i, consumer.receive(20000));
1:d29ca2a:         }
1:d29ca2a:         end1 = System.currentTimeMillis();
1:fc00993:         LOG.info("Consumed messages/sec: " + (produceCount * 1000.0 / (end1 - start)));
1:230a86c: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(LoadTester.class);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
1:     @Override
1:     @Override
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getServer().getConnectURI());
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.memory.list.SimpleMessageList;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(LoadTester.class);
1:     
1:     protected int messageSize = 1024 * 64;
1:     protected int produceCount = 10000;
/////////////////////////////////////////////////////////////////////////
1:         ProgressPrinter printer = new ProgressPrinter(produceCount, 20);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Sending " + produceCount + " messages that are " + (messageSize / 1024.0) + "k large, for a total of " + (produceCount * messageSize / (1024.0 * 1024.0))
1:         for (int i = 0; i < produceCount; i++) {
1:             msg.writeBytes(new byte[messageSize]);
1:         LOG.info("Produced messages/sec: " + (produceCount * 1000.0 / (end1 - start)));
1:         printer = new ProgressPrinter(produceCount, 10);
1:         for (int i = 0; i < produceCount; i++) {
1:         LOG.info("Consumed messages/sec: " + (produceCount * 1000.0 / (end1 - start)));
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     protected int MESSAGE_SIZE = 1024 * 64;
0:     protected int PRODUCE_COUNT = 10000;
1:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/broker/store/loadtester.xml"));
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         log.info("Sending " + PRODUCE_COUNT + " messages that are " + (MESSAGE_SIZE / 1024.0) + "k large, for a total of " + (PRODUCE_COUNT * MESSAGE_SIZE / (1024.0 * 1024.0))
1:                  + " megs of data.");
0:         for (int i = 0; i < PRODUCE_COUNT; i++) {
1:             BytesMessage msg = session.createBytesMessage();
1: 
0:         log.info("Produced messages/sec: " + (PRODUCE_COUNT * 1000.0 / (end1 - start)));
1: 
0:         for (int i = 0; i < PRODUCE_COUNT; i++) {
1:             assertNotNull("Getting message: " + i, consumer.receive(20000));
0:         log.info("Consumed messages/sec: " + (PRODUCE_COUNT * 1000.0 / (end1 - start)));
1: 
1: 
commit:75b1c94
/////////////////////////////////////////////////////////////////////////
0: 	protected int MESSAGE_SIZE=1024*64;
0: 	protected int PRODUCE_COUNT=10000;
1: 
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Sending "+ PRODUCE_COUNT+" messages that are "+(MESSAGE_SIZE/1024.0)+"k large, for a total of "+(PRODUCE_COUNT*MESSAGE_SIZE/(1024.0*1024.0))+" megs of data.");
/////////////////////////////////////////////////////////////////////////
0:         log.info("Produced messages/sec: "+ (PRODUCE_COUNT*1000.0/(end1-start)));
/////////////////////////////////////////////////////////////////////////
0:         log.info("Consumed messages/sec: "+ (PRODUCE_COUNT*1000.0/(end1-start)));
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testQueueSendThenAddConsumer() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.store;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ProgressPrinter;
0: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class LoadTester extends JmsTestSupport {
1: 
1:     protected BrokerService createBroker() throws Exception {
0:          return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/broker/store/loadtester.xml"));
1:     }
1:     
1:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException, IOException {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(((TransportConnector)broker.getTransportConnectors().get(0)).getServer().getConnectURI());
1:         factory.setUseAsyncSend(true);
1:         return factory;
1:     }
1:     
0:     public void testQueueSendThenAddConsumer() throws Throwable {
0:         int MESSAGE_SIZE=1024*64;
0:         int PRODUCE_COUNT=10000;
0:         ProgressPrinter printer = new ProgressPrinter(PRODUCE_COUNT, 20);
1:    
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:         
1:         connection.setUseCompression(false);
1:         connection.getPrefetchPolicy().setAll(10);
1:         connection.start();
1:         Session session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
0:         System.out.println("Sending "+ PRODUCE_COUNT+" messages that are "+(MESSAGE_SIZE/1024.0)+"k large, for a total of "+(PRODUCE_COUNT*MESSAGE_SIZE/(1024.0*1024.0))+" megs of data.");
1:         // Send a message to the broker.
1:         long start = System.currentTimeMillis();
0:         for( int i=0; i < PRODUCE_COUNT; i++) {
1:             printer.increment();
0:             BytesMessage  msg = session.createBytesMessage();
0:             msg.writeBytes(new byte[MESSAGE_SIZE]);
1:             producer.send(msg);
1:         }
1:         long end1 = System.currentTimeMillis();
1:         
0:         System.out.println("Produced messages/sec: "+ (PRODUCE_COUNT*1000.0/(end1-start)));
1:         
0:         printer = new ProgressPrinter(PRODUCE_COUNT, 10);
1:         start = System.currentTimeMillis();
1:         MessageConsumer consumer = session.createConsumer(destination);
0:         for( int i=0; i < PRODUCE_COUNT; i++) {
1:             printer.increment();
0:             assertNotNull("Getting message: "+i,consumer.receive(5000));
1:         }
1:         end1 = System.currentTimeMillis();
0:         System.out.println("Consumed messages/sec: "+ (PRODUCE_COUNT*1000.0/(end1-start)));
1:         
1:         
1:     }
1: 
1:     public static Test suite() {
1:         return suite(LoadTester.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(LoadTester.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:1ffd9f8
/////////////////////////////////////////////////////////////////////////
0:             assertNotNull("Getting message: "+i,consumer.receive(20000));
============================================================================