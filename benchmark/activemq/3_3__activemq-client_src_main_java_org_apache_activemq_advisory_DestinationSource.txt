1:f6efc56: /**
1:f6efc56:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f6efc56:  * contributor license agreements.  See the NOTICE file distributed with
1:f6efc56:  * this work for additional information regarding copyright ownership.
1:f6efc56:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f6efc56:  * (the "License"); you may not use this file except in compliance with
1:f6efc56:  * the License.  You may obtain a copy of the License at
1:f6efc56:  *
1:f6efc56:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f6efc56:  *
1:f6efc56:  * Unless required by applicable law or agreed to in writing, software
1:f6efc56:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f6efc56:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f6efc56:  * See the License for the specific language governing permissions and
1:f6efc56:  * limitations under the License.
1:f6efc56:  */
1:f6efc56: package org.apache.activemq.advisory;
2:f6efc56: 
1:f6efc56: import java.util.Set;
1:f6efc56: import java.util.concurrent.CopyOnWriteArraySet;
1:f6efc56: import java.util.concurrent.atomic.AtomicBoolean;
1:f6efc56: 
1:f6efc56: import javax.jms.Connection;
1:f6efc56: import javax.jms.JMSException;
1:f6efc56: import javax.jms.Message;
1:f6efc56: import javax.jms.MessageConsumer;
1:f6efc56: import javax.jms.MessageListener;
1:f6efc56: import javax.jms.Session;
1:f6efc56: 
1:f6efc56: import org.apache.activemq.command.ActiveMQDestination;
1:f6efc56: import org.apache.activemq.command.ActiveMQMessage;
1:f6efc56: import org.apache.activemq.command.ActiveMQQueue;
1:f6efc56: import org.apache.activemq.command.ActiveMQTempQueue;
1:f6efc56: import org.apache.activemq.command.ActiveMQTempTopic;
1:f6efc56: import org.apache.activemq.command.ActiveMQTopic;
1:f6efc56: import org.apache.activemq.command.DestinationInfo;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:f6efc56: 
1:f6efc56: /**
1:f6efc56:  * A helper class which keeps track of the Destinations available in a broker and allows you to listen to them
1:f6efc56:  * being created or deleted.
1:0bbc0ac:  *
1:f6efc56:  * 
1:f6efc56:  */
1:f6efc56: public class DestinationSource implements MessageListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerEventSource.class);
1:f6efc56:     private AtomicBoolean started = new AtomicBoolean(false);
1:f6efc56:     private final Connection connection;
1:f6efc56:     private Session session;
1:f6efc56:     private MessageConsumer queueConsumer;
1:f6efc56:     private MessageConsumer topicConsumer;
1:f6efc56:     private MessageConsumer tempTopicConsumer;
1:f6efc56:     private MessageConsumer tempQueueConsumer;
1:f6efc56:     private Set<ActiveMQQueue> queues = new CopyOnWriteArraySet<ActiveMQQueue>();
1:f6efc56:     private Set<ActiveMQTopic> topics = new CopyOnWriteArraySet<ActiveMQTopic>();
1:f6efc56:     private Set<ActiveMQTempQueue> temporaryQueues = new CopyOnWriteArraySet<ActiveMQTempQueue>();
1:f6efc56:     private Set<ActiveMQTempTopic> temporaryTopics = new CopyOnWriteArraySet<ActiveMQTempTopic>();
1:f6efc56:     private DestinationListener listener;
1:f6efc56: 
1:f6efc56:     public DestinationSource(Connection connection) throws JMSException {
1:f6efc56:         this.connection = connection;
3:f6efc56:     }
1:f6efc56: 
1:f6efc56:     public DestinationListener getListener() {
1:f6efc56:         return listener;
1:f6efc56:     }
1:f6efc56: 
1:5e897d6:     public void setDestinationListener(DestinationListener listener) {
1:f6efc56:         this.listener = listener;
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     /**
1:f6efc56:      * Returns the current queues available on the broker
1:f6efc56:      */
1:f6efc56:     public Set<ActiveMQQueue> getQueues() {
1:f6efc56:         return queues;
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     /**
1:f6efc56:      * Returns the current topics on the broker
1:f6efc56:      */
1:f6efc56:     public Set<ActiveMQTopic> getTopics() {
1:f6efc56:         return topics;
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     /**
1:f6efc56:      * Returns the current temporary topics available on the broker
1:f6efc56:      */
1:f6efc56:     public Set<ActiveMQTempQueue> getTemporaryQueues() {
1:f6efc56:         return temporaryQueues;
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     /**
1:f6efc56:      * Returns the current temporary queues available on the broker
1:f6efc56:      */
1:f6efc56:     public Set<ActiveMQTempTopic> getTemporaryTopics() {
1:f6efc56:         return temporaryTopics;
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     public void start() throws JMSException {
1:f6efc56:         if (started.compareAndSet(false, true)) {
1:f6efc56:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f6efc56:             queueConsumer = session.createConsumer(AdvisorySupport.QUEUE_ADVISORY_TOPIC);
1:f6efc56:             queueConsumer.setMessageListener(this);
1:f6efc56: 
1:f6efc56:             topicConsumer = session.createConsumer(AdvisorySupport.TOPIC_ADVISORY_TOPIC);
1:f6efc56:             topicConsumer.setMessageListener(this);
1:f6efc56: 
1:f6efc56:             tempQueueConsumer = session.createConsumer(AdvisorySupport.TEMP_QUEUE_ADVISORY_TOPIC);
1:f6efc56:             tempQueueConsumer.setMessageListener(this);
1:f6efc56: 
1:f6efc56:             tempTopicConsumer = session.createConsumer(AdvisorySupport.TEMP_TOPIC_ADVISORY_TOPIC);
1:f6efc56:             tempTopicConsumer.setMessageListener(this);
1:f6efc56:         }
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     public void stop() throws JMSException {
1:f6efc56:         if (started.compareAndSet(true, false)) {
1:f6efc56:             if (session != null) {
1:f6efc56:                 session.close();
1:f6efc56:             }
1:f6efc56:         }
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     public void onMessage(Message message) {
1:f6efc56:         if (message instanceof ActiveMQMessage) {
1:f6efc56:             ActiveMQMessage activeMessage = (ActiveMQMessage) message;
1:f6efc56:             Object command = activeMessage.getDataStructure();
1:f6efc56:             if (command instanceof DestinationInfo) {
1:f6efc56:                 DestinationInfo destinationInfo = (DestinationInfo) command;
1:f6efc56:                 DestinationEvent event = new DestinationEvent(this, destinationInfo);
1:f6efc56:                 fireDestinationEvent(event);
1:f6efc56:             }
1:f6efc56:             else {
1:f6efc56:                 LOG.warn("Unknown dataStructure: " + command);
1:f6efc56:             }
1:f6efc56:         }
1:f6efc56:         else {
1:f6efc56:             LOG.warn("Unknown message type: " + message + ". Message ignored");
1:f6efc56:         }
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     protected void fireDestinationEvent(DestinationEvent event) {
1:f6efc56:         // now lets update the data structures
1:f6efc56:         ActiveMQDestination destination = event.getDestination();
1:f6efc56:         boolean add = event.isAddOperation();
1:f6efc56:         if (destination instanceof ActiveMQQueue) {
1:f6efc56:             ActiveMQQueue queue = (ActiveMQQueue) destination;
1:f6efc56:             if (add) {
1:f6efc56:                 queues.add(queue);
1:f6efc56:             }
1:f6efc56:             else {
1:f6efc56:                 queues.remove(queue);
1:f6efc56:             }
1:f6efc56:         }
1:f6efc56:         else if (destination instanceof ActiveMQTopic) {
1:f6efc56:             ActiveMQTopic topic = (ActiveMQTopic) destination;
1:f6efc56:             if (add) {
1:f6efc56:                 topics.add(topic);
1:f6efc56:             }
1:f6efc56:             else {
1:f6efc56:                 topics.remove(topic);
1:f6efc56:             }
1:f6efc56:         }
1:f6efc56:         else if (destination instanceof ActiveMQTempQueue) {
1:f6efc56:             ActiveMQTempQueue queue = (ActiveMQTempQueue) destination;
1:f6efc56:             if (add) {
1:f6efc56:                 temporaryQueues.add(queue);
1:f6efc56:             }
1:f6efc56:             else {
1:f6efc56:                 temporaryQueues.remove(queue);
1:f6efc56:             }
1:f6efc56:         }
1:f6efc56:         else if (destination instanceof ActiveMQTempTopic) {
1:f6efc56:             ActiveMQTempTopic topic = (ActiveMQTempTopic) destination;
1:f6efc56:             if (add) {
1:f6efc56:                 temporaryTopics.add(topic);
1:f6efc56:             }
1:f6efc56:             else {
1:f6efc56:                 temporaryTopics.remove(topic);
1:f6efc56:             }
1:f6efc56:         }
1:f6efc56:         else {
1:f6efc56:             LOG.warn("Unknown destination type: " + destination);
1:f6efc56:         }
1:3a77300:         if (listener != null) {
1:3a77300:             listener.onDestinationEvent(event);
1:8bf987b:         }
1:3a77300:     }
1:f6efc56: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerEventSource.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:3a77300
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (listener != null) {
1:             listener.onDestinationEvent(event);
1:         }
commit:5e897d6
/////////////////////////////////////////////////////////////////////////
1:     public void setDestinationListener(DestinationListener listener) {
commit:f6efc56
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
1: import java.util.Set;
1: import java.util.concurrent.CopyOnWriteArraySet;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
0: import org.apache.activemq.Service;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTempQueue;
1: import org.apache.activemq.command.ActiveMQTempTopic;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.DestinationInfo;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * A helper class which keeps track of the Destinations available in a broker and allows you to listen to them
1:  * being created or deleted.
1:  *
0:  * @version $Revision$
1:  */
1: public class DestinationSource implements MessageListener {
0:     private static final Log LOG = LogFactory.getLog(ConsumerEventSource.class);
1:     private AtomicBoolean started = new AtomicBoolean(false);
1:     private final Connection connection;
1:     private Session session;
1:     private MessageConsumer queueConsumer;
1:     private MessageConsumer topicConsumer;
1:     private MessageConsumer tempTopicConsumer;
1:     private MessageConsumer tempQueueConsumer;
1:     private Set<ActiveMQQueue> queues = new CopyOnWriteArraySet<ActiveMQQueue>();
1:     private Set<ActiveMQTopic> topics = new CopyOnWriteArraySet<ActiveMQTopic>();
1:     private Set<ActiveMQTempQueue> temporaryQueues = new CopyOnWriteArraySet<ActiveMQTempQueue>();
1:     private Set<ActiveMQTempTopic> temporaryTopics = new CopyOnWriteArraySet<ActiveMQTempTopic>();
1:     private DestinationListener listener;
1: 
1:     public DestinationSource(Connection connection) throws JMSException {
1:         this.connection = connection;
1:     }
1: 
1:     public DestinationListener getListener() {
1:         return listener;
1:     }
1: 
0:     public void setConsumerListener(DestinationListener listener) {
1:         this.listener = listener;
1:     }
1: 
1:     /**
1:      * Returns the current queues available on the broker
1:      */
1:     public Set<ActiveMQQueue> getQueues() {
1:         return queues;
1:     }
1: 
1:     /**
1:      * Returns the current topics on the broker
1:      */
1:     public Set<ActiveMQTopic> getTopics() {
1:         return topics;
1:     }
1: 
1:     /**
1:      * Returns the current temporary topics available on the broker
1:      */
1:     public Set<ActiveMQTempQueue> getTemporaryQueues() {
1:         return temporaryQueues;
1:     }
1: 
1:     /**
1:      * Returns the current temporary queues available on the broker
1:      */
1:     public Set<ActiveMQTempTopic> getTemporaryTopics() {
1:         return temporaryTopics;
1:     }
1: 
1:     public void start() throws JMSException {
1:         if (started.compareAndSet(false, true)) {
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             queueConsumer = session.createConsumer(AdvisorySupport.QUEUE_ADVISORY_TOPIC);
1:             queueConsumer.setMessageListener(this);
1: 
1:             topicConsumer = session.createConsumer(AdvisorySupport.TOPIC_ADVISORY_TOPIC);
1:             topicConsumer.setMessageListener(this);
1: 
1:             tempQueueConsumer = session.createConsumer(AdvisorySupport.TEMP_QUEUE_ADVISORY_TOPIC);
1:             tempQueueConsumer.setMessageListener(this);
1: 
1:             tempTopicConsumer = session.createConsumer(AdvisorySupport.TEMP_TOPIC_ADVISORY_TOPIC);
1:             tempTopicConsumer.setMessageListener(this);
1:         }
1:     }
1: 
1:     public void stop() throws JMSException {
1:         if (started.compareAndSet(true, false)) {
1:             if (session != null) {
1:                 session.close();
1:             }
1:         }
1:     }
1: 
1:     public void onMessage(Message message) {
1:         if (message instanceof ActiveMQMessage) {
1:             ActiveMQMessage activeMessage = (ActiveMQMessage) message;
1:             Object command = activeMessage.getDataStructure();
1:             if (command instanceof DestinationInfo) {
1:                 DestinationInfo destinationInfo = (DestinationInfo) command;
1:                 DestinationEvent event = new DestinationEvent(this, destinationInfo);
1:                 fireDestinationEvent(event);
1:             }
1:             else {
1:                 LOG.warn("Unknown dataStructure: " + command);
1:             }
1:         }
1:         else {
1:             LOG.warn("Unknown message type: " + message + ". Message ignored");
1:         }
1:     }
1: 
1:     protected void fireDestinationEvent(DestinationEvent event) {
0:         if (listener != null) {
0:             listener.onDestinationEvent(event);
1:         }
1: 
1:         // now lets update the data structures
1:         ActiveMQDestination destination = event.getDestination();
1:         boolean add = event.isAddOperation();
1:         if (destination instanceof ActiveMQQueue) {
1:             ActiveMQQueue queue = (ActiveMQQueue) destination;
1:             if (add) {
1:                 queues.add(queue);
1:             }
1:             else {
1:                 queues.remove(queue);
1:             }
1:         }
1:         else if (destination instanceof ActiveMQTopic) {
1:             ActiveMQTopic topic = (ActiveMQTopic) destination;
1:             if (add) {
1:                 topics.add(topic);
1:             }
1:             else {
1:                 topics.remove(topic);
1:             }
1:         }
1:         else if (destination instanceof ActiveMQTempQueue) {
1:             ActiveMQTempQueue queue = (ActiveMQTempQueue) destination;
1:             if (add) {
1:                 temporaryQueues.add(queue);
1:             }
1:             else {
1:                 temporaryQueues.remove(queue);
1:             }
1:         }
1:         else if (destination instanceof ActiveMQTempTopic) {
1:             ActiveMQTempTopic topic = (ActiveMQTempTopic) destination;
1:             if (add) {
1:                 temporaryTopics.add(topic);
1:             }
1:             else {
1:                 temporaryTopics.remove(topic);
1:             }
1:         }
1:         else {
1:             LOG.warn("Unknown destination type: " + destination);
1:         }
1:     }
1: }
============================================================================