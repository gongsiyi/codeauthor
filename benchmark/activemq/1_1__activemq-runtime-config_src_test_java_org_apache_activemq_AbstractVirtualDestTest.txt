1:43c3cae: /**
1:43c3cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43c3cae:  * contributor license agreements.  See the NOTICE file distributed with
1:43c3cae:  * this work for additional information regarding copyright ownership.
1:43c3cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43c3cae:  * (the "License"); you may not use this file except in compliance with
1:43c3cae:  * the License.  You may obtain a copy of the License at
1:43c3cae:  *
1:43c3cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43c3cae:  *
1:43c3cae:  * Unless required by applicable law or agreed to in writing, software
1:43c3cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43c3cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43c3cae:  * See the License for the specific language governing permissions and
1:43c3cae:  * limitations under the License.
1:43c3cae:  */
1:43c3cae: package org.apache.activemq;
1:43c3cae: 
1:43c3cae: import static org.junit.Assert.assertEquals;
1:43c3cae: import static org.junit.Assert.assertNotNull;
1:43c3cae: import static org.junit.Assert.assertNull;
1:43c3cae: 
1:43c3cae: import java.util.Collections;
1:43c3cae: import java.util.Map;
1:43c3cae: 
1:43c3cae: import javax.jms.Message;
1:43c3cae: import javax.jms.MessageProducer;
1:43c3cae: import javax.jms.Session;
1:43c3cae: import javax.jms.TextMessage;
1:43c3cae: 
1:43c3cae: /**
1:43c3cae:  *
1:43c3cae:  *
1:43c3cae:  */
1:43c3cae: public abstract class AbstractVirtualDestTest extends RuntimeConfigTestSupport {
1:43c3cae: 
1:43c3cae:     protected void forceAddDestination(String dest) throws Exception {
1:43c3cae:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:43c3cae:         connection.start();
1:43c3cae:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:43c3cae:         session.createConsumer(session.createQueue("Consumer.A." + dest));
1:43c3cae:         connection.close();
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void exerciseVirtualTopic(String topic) throws Exception {
1:43c3cae:         exerciseVirtualTopic("Consumer.A.", topic);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void exerciseVirtualTopic(String prefix, String topic) throws Exception {
1:43c3cae:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:43c3cae:         connection.start();
1:43c3cae:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:43c3cae: 
1:43c3cae:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(prefix + topic));
1:43c3cae:         LOG.info("new consumer for: " + consumer.getDestination());
1:43c3cae:         MessageProducer producer = session.createProducer(session.createTopic(topic));
1:43c3cae:         final String body = "To vt:" + topic;
1:43c3cae:         Message message = sendAndReceiveMessage(session, consumer, producer, body);
1:43c3cae:         assertNotNull("got message", message);
1:43c3cae:         assertEquals("got expected message", body, ((TextMessage) message).getText());
1:43c3cae:         connection.close();
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void exerciseCompositeQueue(String dest, String consumerQ) throws Exception {
1:43c3cae:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:43c3cae:         connection.start();
1:43c3cae:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:43c3cae: 
1:43c3cae:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerQ));
1:43c3cae:         LOG.info("new consumer for: " + consumer.getDestination());
1:43c3cae:         MessageProducer producer = session.createProducer(session.createQueue(dest));
1:43c3cae:         final String body = "To cq:" + dest;
1:43c3cae:         Message message = sendAndReceiveMessage(session, consumer, producer, body);
1:43c3cae:         assertNotNull("got message", message);
1:43c3cae:         assertEquals("got expected message", body, ((TextMessage) message).getText());
1:43c3cae:         connection.close();
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void exerciseFilteredCompositeQueue(String dest, String consumerDestination, String acceptedHeaderValue) throws Exception {
1:43c3cae:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:43c3cae:         connection.start();
1:43c3cae:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:43c3cae: 
1:43c3cae:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerDestination));
1:43c3cae:         LOG.info("new consumer for: " + consumer.getDestination());
1:43c3cae:         MessageProducer producer = session.createProducer(session.createQueue(dest));
1:43c3cae: 
1:43c3cae:         // positive test
1:43c3cae:         String body = "To filtered cq:" + dest;
1:43c3cae: 
1:43c3cae:         Message message = sendAndReceiveMessage(session, consumer, producer, body, Collections.singletonMap("odd", acceptedHeaderValue));
1:43c3cae:         assertNotNull("The message did not reach the destination even though it should pass through the filter.", message);
1:43c3cae:         assertEquals("Did not get expected message", body, ((TextMessage) message).getText());
1:43c3cae: 
1:43c3cae:         // negative test
1:43c3cae:         message = sendAndReceiveMessage(session, consumer, producer, "Not to filtered cq:" + dest, Collections.singletonMap("odd", "somethingElse"));
1:43c3cae:         assertNull("The message reached the destination, but it should have been removed by the filter.", message);
1:43c3cae: 
1:43c3cae:         connection.close();
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected Message sendAndReceiveMessage(Session session,
1:43c3cae:             ActiveMQMessageConsumer consumer, MessageProducer producer,
1:43c3cae:             final String messageBody) throws Exception {
1:43c3cae:         return sendAndReceiveMessage(session, consumer, producer, messageBody,
1:43c3cae:                 null);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected Message sendAndReceiveMessage(Session session,
1:43c3cae:             ActiveMQMessageConsumer consumer, MessageProducer producer,
1:43c3cae:             final String messageBody, Map<String, String> propertiesMap)
1:43c3cae:             throws Exception {
1:43c3cae:         TextMessage messageToSend = session.createTextMessage(messageBody);
1:43c3cae:         if (propertiesMap != null) {
1:43c3cae:             for (String headerKey : propertiesMap.keySet()) {
1:43c3cae:                 messageToSend.setStringProperty(headerKey,
1:43c3cae:                         propertiesMap.get(headerKey));
1:43c3cae:             }
1:43c3cae:         }
1:43c3cae:         producer.send(messageToSend);
1:43c3cae:         LOG.info("sent to: " + producer.getDestination());
1:43c3cae: 
1:43c3cae:         Message message = null;
1:43c3cae:         for (int i = 0; i < 10 && message == null; i++) {
1:43c3cae:             message = consumer.receive(1000);
1:43c3cae:         }
1:43c3cae:         return message;
1:43c3cae:     }
1:43c3cae: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.util.Collections;
1: import java.util.Map;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: /**
1:  *
1:  *
1:  */
1: public abstract class AbstractVirtualDestTest extends RuntimeConfigTestSupport {
1: 
1:     protected void forceAddDestination(String dest) throws Exception {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createConsumer(session.createQueue("Consumer.A." + dest));
1:         connection.close();
1:     }
1: 
1:     protected void exerciseVirtualTopic(String topic) throws Exception {
1:         exerciseVirtualTopic("Consumer.A.", topic);
1:     }
1: 
1:     protected void exerciseVirtualTopic(String prefix, String topic) throws Exception {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(prefix + topic));
1:         LOG.info("new consumer for: " + consumer.getDestination());
1:         MessageProducer producer = session.createProducer(session.createTopic(topic));
1:         final String body = "To vt:" + topic;
1:         Message message = sendAndReceiveMessage(session, consumer, producer, body);
1:         assertNotNull("got message", message);
1:         assertEquals("got expected message", body, ((TextMessage) message).getText());
1:         connection.close();
1:     }
1: 
1:     protected void exerciseCompositeQueue(String dest, String consumerQ) throws Exception {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerQ));
1:         LOG.info("new consumer for: " + consumer.getDestination());
1:         MessageProducer producer = session.createProducer(session.createQueue(dest));
1:         final String body = "To cq:" + dest;
1:         Message message = sendAndReceiveMessage(session, consumer, producer, body);
1:         assertNotNull("got message", message);
1:         assertEquals("got expected message", body, ((TextMessage) message).getText());
1:         connection.close();
1:     }
1: 
1:     protected void exerciseFilteredCompositeQueue(String dest, String consumerDestination, String acceptedHeaderValue) throws Exception {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerDestination));
1:         LOG.info("new consumer for: " + consumer.getDestination());
1:         MessageProducer producer = session.createProducer(session.createQueue(dest));
1: 
1:         // positive test
1:         String body = "To filtered cq:" + dest;
1: 
1:         Message message = sendAndReceiveMessage(session, consumer, producer, body, Collections.singletonMap("odd", acceptedHeaderValue));
1:         assertNotNull("The message did not reach the destination even though it should pass through the filter.", message);
1:         assertEquals("Did not get expected message", body, ((TextMessage) message).getText());
1: 
1:         // negative test
1:         message = sendAndReceiveMessage(session, consumer, producer, "Not to filtered cq:" + dest, Collections.singletonMap("odd", "somethingElse"));
1:         assertNull("The message reached the destination, but it should have been removed by the filter.", message);
1: 
1:         connection.close();
1:     }
1: 
1:     protected Message sendAndReceiveMessage(Session session,
1:             ActiveMQMessageConsumer consumer, MessageProducer producer,
1:             final String messageBody) throws Exception {
1:         return sendAndReceiveMessage(session, consumer, producer, messageBody,
1:                 null);
1:     }
1: 
1:     protected Message sendAndReceiveMessage(Session session,
1:             ActiveMQMessageConsumer consumer, MessageProducer producer,
1:             final String messageBody, Map<String, String> propertiesMap)
1:             throws Exception {
1:         TextMessage messageToSend = session.createTextMessage(messageBody);
1:         if (propertiesMap != null) {
1:             for (String headerKey : propertiesMap.keySet()) {
1:                 messageToSend.setStringProperty(headerKey,
1:                         propertiesMap.get(headerKey));
1:             }
1:         }
1:         producer.send(messageToSend);
1:         LOG.info("sent to: " + producer.getDestination());
1: 
1:         Message message = null;
1:         for (int i = 0; i < 10 && message == null; i++) {
1:             message = consumer.receive(1000);
1:         }
1:         return message;
1:     }
1: }
============================================================================