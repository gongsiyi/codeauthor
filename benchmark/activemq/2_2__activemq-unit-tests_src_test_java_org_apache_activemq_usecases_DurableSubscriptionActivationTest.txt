1:9c47f6b: /**
1:9c47f6b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9c47f6b:  * contributor license agreements.  See the NOTICE file distributed with
1:9c47f6b:  * this work for additional information regarding copyright ownership.
1:9c47f6b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9c47f6b:  * (the "License"); you may not use this file except in compliance with
1:9c47f6b:  * the License.  You may obtain a copy of the License at
1:9c47f6b:  *
1:9c47f6b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9c47f6b:  *
1:9c47f6b:  * Unless required by applicable law or agreed to in writing, software
1:9c47f6b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9c47f6b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9c47f6b:  * See the License for the specific language governing permissions and
1:9c47f6b:  * limitations under the License.
1:9c47f6b:  */
1:9c47f6b: package org.apache.activemq.usecases;
8:9c47f6b: 
1:9c47f6b: import java.io.File;
1:9c47f6b: 
1:9c47f6b: import javax.jms.Connection;
1:9c47f6b: import javax.jms.Session;
1:9c47f6b: 
1:9c47f6b: import org.apache.activemq.ActiveMQConnectionFactory;
1:9c47f6b: import org.apache.activemq.broker.BrokerFactory;
1:9c47f6b: import org.apache.activemq.broker.BrokerService;
1:9c47f6b: import org.apache.activemq.broker.region.Destination;
1:9c47f6b: import org.apache.activemq.command.ActiveMQDestination;
1:9c47f6b: import org.apache.activemq.command.ActiveMQTopic;
1:4ae6807: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:9c47f6b: 
1:9c47f6b: public class DurableSubscriptionActivationTest extends org.apache.activemq.TestSupport {
1:9c47f6b: 
1:9c47f6b:     private BrokerService broker;
1:9c47f6b:     private Connection connection;
1:9c47f6b:     private ActiveMQTopic topic;
1:9c47f6b: 
1:9c47f6b:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:9c47f6b:         return new ActiveMQConnectionFactory("vm://" + getName());
1:4ae6807:     }
1:4ae6807: 
1:9c47f6b:     protected Connection createConnection() throws Exception {
1:9c47f6b:         Connection rc = super.createConnection();
1:9c47f6b:         rc.setClientID(getName());
1:9c47f6b:         return rc;
2:9c47f6b:     }
1:9c47f6b: 
1:9c47f6b:     protected void setUp() throws Exception {
1:9c47f6b:         topic = (ActiveMQTopic) createDestination();
1:4ae6807:         createBroker(true);
1:9c47f6b:         super.setUp();
1:9c47f6b:     }
1:9c47f6b: 
1:9c47f6b:     protected void tearDown() throws Exception {
1:9c47f6b:         super.tearDown();
1:9c47f6b:         destroyBroker();
1:9c47f6b:     }
1:9c47f6b: 
1:9c47f6b:     protected void restartBroker() throws Exception {
1:9c47f6b:         destroyBroker();
1:4ae6807:         createBroker(false);
1:9c47f6b:     }
1:9c47f6b: 
1:4ae6807:     private void createBroker(boolean delete) throws Exception {
1:9c47f6b:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:9c47f6b:         broker.setKeepDurableSubsActive(true);
1:9c47f6b:         broker.setPersistent(true);
1:4ae6807:         broker.setDeleteAllMessagesOnStartup(delete);
1:4ae6807:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:4ae6807:         kahadb.setDirectory(new File("activemq-data/" + getName() + "-kahadb"));
1:4ae6807:         kahadb.setJournalMaxFileLength(500 * 1024);
1:4ae6807:         broker.setPersistenceAdapter(kahadb);
1:9c47f6b:         broker.setBrokerName(getName());
1:9c47f6b: 
1:9c47f6b:         // only if we pre-create the destinations
1:9c47f6b:         broker.setDestinations(new ActiveMQDestination[]{topic});
1:9c47f6b: 
1:9c47f6b:         broker.start();
1:e66967b:         broker.waitUntilStarted();
1:9c47f6b: 
2:9c47f6b:         connection = createConnection();
1:9c47f6b:     }
1:9c47f6b: 
1:9c47f6b:     private void destroyBroker() throws Exception {
1:9c47f6b:         if (connection != null)
2:9c47f6b:             connection.close();
1:e66967b:         if (broker != null) {
1:9c47f6b:             broker.stop();
1:e66967b:             broker.waitUntilStopped();
1:e66967b:         }
1:9c47f6b:     }
1:9c47f6b: 
1:ac64a72:     public void testActivateWithExistingTopic() throws Exception {
1:4ae6807:         // create durable subscription
1:4ae6807:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4ae6807:         session.createDurableSubscriber(topic, "SubsId");
1:4ae6807: 
1:4ae6807:         Destination d = broker.getDestination(topic);
1:4ae6807:         assertTrue("More than one consumer found: " + d.getConsumers().size(), d.getConsumers().size() == 1);
1:4ae6807: 
1:4ae6807:         // restart the broker
1:4ae6807:         restartBroker();
1:4ae6807: 
1:ac64a72:         d = broker.getDestination(topic);
2:4ae6807:         assertTrue("More than one consumer found: " + d.getConsumers().size(), d.getConsumers().size() == 1);
1:e66967b: 
1:4ae6807:         // activate
1:4ae6807:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4ae6807:         session.createDurableSubscriber(topic, "SubsId");
1:4ae6807: 
1:4ae6807:         assertTrue("More than one consumer found: " + d.getConsumers().size(), d.getConsumers().size() == 1);
1:4ae6807: 
1:4ae6807:         // re-activate
1:4ae6807:         connection.close();
1:4ae6807:         connection = createConnection();
1:4ae6807:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4ae6807:         session.createDurableSubscriber(topic, "SubsId");
1:4ae6807: 
1:4ae6807:         assertTrue("More than one consumer found: " + d.getConsumers().size(), d.getConsumers().size() == 1);
1:9c47f6b:     }
1:e66967b: 
1:9c47f6b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:4ae6807
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:         createBroker(true);
/////////////////////////////////////////////////////////////////////////
1:         createBroker(false);
1:     private void createBroker(boolean delete) throws Exception {
1:         broker.setDeleteAllMessagesOnStartup(delete);
1:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:         kahadb.setDirectory(new File("activemq-data/" + getName() + "-kahadb"));
1:         kahadb.setJournalMaxFileLength(500 * 1024);
1:         broker.setPersistenceAdapter(kahadb);
/////////////////////////////////////////////////////////////////////////
0:     public void testActivateWithExistingTopic1() throws Exception {
1:         assertTrue("More than one consumer found: " + d.getConsumers().size(), d.getConsumers().size() == 1);
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("More than one consumer found: " + d.getConsumers().size(), d.getConsumers().size() == 1);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("More than one consumer found: " + d.getConsumers().size(), d.getConsumers().size() == 1);
1:     }
1: 
0:     public void testActivateWithExistingTopic2() throws Exception {
1:         // create durable subscription
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId");
1: 
1:         // restart the broker
1:         restartBroker();
1: 
1:         // activate
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId");
1: 
1:         Destination d = broker.getDestination(topic);
1:         assertTrue("More than one consumer found: " + d.getConsumers().size(), d.getConsumers().size() == 1);
1: 
1:         // re-activate
1:         connection.close();
1:         connection = createConnection();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId");
1: 
1:         assertTrue("More than one consumer found: " + d.getConsumers().size(), d.getConsumers().size() == 1);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:ac64a72
/////////////////////////////////////////////////////////////////////////
1:     public void testActivateWithExistingTopic() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         d = broker.getDestination(topic);
commit:e66967b
/////////////////////////////////////////////////////////////////////////
1:         broker.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
1:         if (broker != null) {
1:             broker.waitUntilStopped();
1:         }
/////////////////////////////////////////////////////////////////////////
0:         Destination d1 = broker.getDestination(topic);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:9c47f6b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
1: 
1: public class DurableSubscriptionActivationTest extends org.apache.activemq.TestSupport {
1: 
1:     private BrokerService broker;
1:     private Connection connection;
1:     private ActiveMQTopic topic;
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://" + getName());
1:     }
1: 
1:     protected Connection createConnection() throws Exception {
1:         Connection rc = super.createConnection();
1:         rc.setClientID(getName());
1:         return rc;
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         topic = (ActiveMQTopic) createDestination();
0:         createBroker();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         destroyBroker();
1:     }
1: 
1:     protected void restartBroker() throws Exception {
1:         destroyBroker();
0:         createBroker();
1:     }
1: 
0:     private void createBroker() throws Exception {
1:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:         broker.setKeepDurableSubsActive(true);
1:         broker.setPersistent(true);
0:         AMQPersistenceAdapter persistenceAdapter = new AMQPersistenceAdapter();
0:         persistenceAdapter.setDirectory(new File("activemq-data/" + getName()));
0:         broker.setPersistenceAdapter(persistenceAdapter);
1:         broker.setBrokerName(getName());
1: 
1:         // only if we pre-create the destinations
1:         broker.setDestinations(new ActiveMQDestination[]{topic});
1: 
1:         broker.start();
1: 
1:         connection = createConnection();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (connection != null)
1:             connection.close();
0:         if (broker != null)
1:             broker.stop();
1:     }
1: 
0:     public void testActivateWithExistingTopic() throws Exception {
0:         // create durable subscription
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         session.createDurableSubscriber(topic, "SubsId");
1: 
0:         Destination d = broker.getDestination(topic);
0:         assertTrue("More than one consumer.", d.getConsumers().size() == 1);
1:         
0:         // restart the broker
0:         restartBroker();
1: 
0:         // activate
0:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         session.createDurableSubscriber(topic, "SubsId");
1: 
0:         assertTrue("More than one consumer.", d.getConsumers().size() == 1);
1: 
0:         // re-activate
1:         connection.close();
1:         connection = createConnection();
0:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         session.createDurableSubscriber(topic, "SubsId");
1: 
0:         assertTrue("More than one consumer.", d.getConsumers().size() == 1);
1:     }
1: }
============================================================================