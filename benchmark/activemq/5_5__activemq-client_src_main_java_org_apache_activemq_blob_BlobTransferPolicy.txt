1:fc00993: /**
1:05a8cba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:05a8cba:  * contributor license agreements.  See the NOTICE file distributed with
1:05a8cba:  * this work for additional information regarding copyright ownership.
1:05a8cba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:05a8cba:  * (the "License"); you may not use this file except in compliance with
1:05a8cba:  * the License.  You may obtain a copy of the License at
1:05a8cba:  *
1:05a8cba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:05a8cba:  *
1:05a8cba:  * Unless required by applicable law or agreed to in writing, software
1:05a8cba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:05a8cba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:05a8cba:  * See the License for the specific language governing permissions and
1:05a8cba:  * limitations under the License.
1:05a8cba:  */
1:05a8cba: package org.apache.activemq.blob;
1:05a8cba: 
1:b08ae50: import java.net.MalformedURLException;
1:9d4f30c: import java.net.URISyntaxException;
1:b08ae50: import java.net.URL;
1:b08ae50: 
1:05a8cba: /**
1:05a8cba:  * The policy for configuring how BLOBs (Binary Large OBjects) are transferred
1:05a8cba:  * out of band between producers, brokers and consumers.
1:b0c2a40:  *
1:05a8cba:  * 
1:05a8cba:  */
1:05a8cba: public class BlobTransferPolicy {
1:cbb458c:     private String defaultUploadUrl = "http://localhost:8080/uploads/";
1:05a8cba:     private String brokerUploadUrl;
1:05a8cba:     private String uploadUrl;
1:52c22cc:     private int bufferSize = 128 * 1024;
1:05a8cba:     private BlobUploadStrategy uploadStrategy;
1:b08ae50:     private BlobDownloadStrategy downloadStrategy;
1:05a8cba: 
1:05a8cba:     /**
1:05a8cba:      * Returns a copy of this policy object
1:05a8cba:      */
1:05a8cba:     public BlobTransferPolicy copy() {
1:05a8cba:         BlobTransferPolicy that = new BlobTransferPolicy();
1:05a8cba:         that.defaultUploadUrl = this.defaultUploadUrl;
1:05a8cba:         that.brokerUploadUrl = this.brokerUploadUrl;
1:05a8cba:         that.uploadUrl = this.uploadUrl;
1:c70d97f:         that.bufferSize = this.bufferSize;
1:05a8cba:         that.uploadStrategy = this.uploadStrategy;
1:c70d97f:         that.downloadStrategy = this.downloadStrategy;
1:05a8cba:         return that;
3:05a8cba:     }
1:05a8cba: 
1:05a8cba:     public String getUploadUrl() {
1:05a8cba:         if (uploadUrl == null) {
1:05a8cba:             uploadUrl = getBrokerUploadUrl();
1:05a8cba:             if (uploadUrl == null) {
1:05a8cba:                 uploadUrl = getDefaultUploadUrl();
1:05a8cba:             }
1:05a8cba:         }
1:05a8cba:         return uploadUrl;
1:05a8cba:     }
1:05a8cba: 
1:05a8cba:     /**
1:05a8cba:      * Sets the upload URL to use explicitly on the client which will
1:05a8cba:      * overload the default or the broker's URL. This allows the client to decide
1:05a8cba:      * where to upload files to irrespective of the brokers configuration.
1:05a8cba:      */
1:05a8cba:     public void setUploadUrl(String uploadUrl) {
1:05a8cba:         this.uploadUrl = uploadUrl;
1:05a8cba:     }
1:05a8cba: 
1:05a8cba:     public String getBrokerUploadUrl() {
1:05a8cba:         return brokerUploadUrl;
1:05a8cba:     }
1:05a8cba: 
1:05a8cba:     /**
1:05a8cba:      * Called by the JMS client when a broker advertises its upload URL
1:05a8cba:      */
1:05a8cba:     public void setBrokerUploadUrl(String brokerUploadUrl) {
1:05a8cba:         this.brokerUploadUrl = brokerUploadUrl;
1:05a8cba:     }
1:05a8cba: 
1:05a8cba:     public String getDefaultUploadUrl() {
1:05a8cba:         return defaultUploadUrl;
1:05a8cba:     }
1:05a8cba: 
1:05a8cba:     /**
1:05a8cba:      * Sets the default upload URL to use if the broker does not
1:05a8cba:      * have a configured upload URL
1:05a8cba:      */
1:05a8cba:     public void setDefaultUploadUrl(String defaultUploadUrl) {
1:05a8cba:         this.defaultUploadUrl = defaultUploadUrl;
1:05a8cba:     }
1:05a8cba: 
1:05a8cba:     public BlobUploadStrategy getUploadStrategy() {
1:05a8cba:         if (uploadStrategy == null) {
1:05a8cba:             uploadStrategy = createUploadStrategy();
1:05a8cba:         }
1:05a8cba:         return uploadStrategy;
1:05a8cba:     }
1:05a8cba: 
1:b08ae50:     public BlobDownloadStrategy getDownloadStrategy() {
1:b08ae50:         if(downloadStrategy == null) {
1:b08ae50:             downloadStrategy = createDownloadStrategy();
1:b08ae50:         }
1:b08ae50:         return downloadStrategy;
1:b08ae50:     }
1:b08ae50: 
1:05a8cba:     /**
1:05a8cba:      * Sets the upload strategy to use for uploading BLOBs to some URL
1:05a8cba:      */
1:05a8cba:     public void setUploadStrategy(BlobUploadStrategy uploadStrategy) {
1:05a8cba:         this.uploadStrategy = uploadStrategy;
1:05a8cba:     }
1:05a8cba: 
1:52c22cc:     public int getBufferSize() {
1:52c22cc:         return bufferSize;
1:52c22cc:     }
1:52c22cc: 
1:52c22cc:     /**
1:52c22cc:      * Sets the default buffer size used when uploading or downloading files
1:52c22cc:      */
1:52c22cc:     public void setBufferSize(int bufferSize) {
1:52c22cc:         this.bufferSize = bufferSize;
1:b08ae50:     }
1:52c22cc: 
1:b08ae50:     /**
1:b08ae50:      * Returns the upload strategy depending on the information from the
1:b08ae50:      * uploadURL. Currently supportet HTTP and FTP
1:b08ae50:      * 
1:b08ae50:      * @return
1:b08ae50:      */
1:05a8cba:     protected BlobUploadStrategy createUploadStrategy() {
1:b08ae50:     	BlobUploadStrategy strategy;
1:b08ae50:     	try {
1:b08ae50:             URL url = new URL(getUploadUrl());
1:b08ae50: 
1:b08ae50:             if(url.getProtocol().equalsIgnoreCase("FTP")) {
1:b08ae50:                 strategy = new FTPBlobUploadStrategy(this);
1:9d4f30c:             } else if (url.getProtocol().equalsIgnoreCase("FILE")) {
1:9d4f30c:                 strategy = new FileSystemBlobStrategy(this);
1:b08ae50:             } else {
2:b08ae50:                 strategy = new DefaultBlobUploadStrategy(this);
1:af159dd:             }
1:b08ae50:         } catch (MalformedURLException e) {
1:9d4f30c:             strategy = new DefaultBlobUploadStrategy(this);
1:9d4f30c:         } catch (URISyntaxException e) {
1:9d4f30c:             strategy = new DefaultBlobUploadStrategy(this);
1:af159dd:         }
1:b08ae50:         return strategy;
1:b08ae50:     }
1:b08ae50:     
1:b08ae50:     /**
1:b08ae50:      * Returns the download strategy depending on the information from the
1:b08ae50:      * uploadURL. Currently supportet HTTP and FTP
1:b08ae50:      * 
1:b08ae50:      * @return
1:b08ae50:      */
1:b08ae50:     protected BlobDownloadStrategy createDownloadStrategy() {
1:b08ae50:         BlobDownloadStrategy strategy;
1:b08ae50:         try {
1:b08ae50:             URL url = new URL(getUploadUrl());
1:b08ae50:             
1:b08ae50:             if(url.getProtocol().equalsIgnoreCase("FTP")) {
1:af159dd:                 strategy = new FTPBlobDownloadStrategy(this);
1:9d4f30c:             } else if (url.getProtocol().equalsIgnoreCase("FILE")) {
1:9d4f30c:                 strategy = new FileSystemBlobStrategy(this);
1:b08ae50:             } else {
1:af159dd:                 strategy = new DefaultBlobDownloadStrategy(this);
1:b08ae50:             }
1:b08ae50:         } catch (MalformedURLException e) {
1:9d4f30c:             strategy = new DefaultBlobDownloadStrategy(this);
1:9d4f30c:         } catch (URISyntaxException e) {
1:af159dd:             strategy = new DefaultBlobDownloadStrategy(this);
1:b08ae50:         }
1:b08ae50:         return strategy;
1:b08ae50:     }
1:b08ae50: 
1:b08ae50:     
1:52c22cc: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:c70d97f
/////////////////////////////////////////////////////////////////////////
1:         that.bufferSize = this.bufferSize;
1:         that.downloadStrategy = this.downloadStrategy;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9d4f30c
/////////////////////////////////////////////////////////////////////////
1: import java.net.URISyntaxException;
/////////////////////////////////////////////////////////////////////////
1:             } else if (url.getProtocol().equalsIgnoreCase("FILE")) {
1:                 strategy = new FileSystemBlobStrategy(this);
1:             strategy = new DefaultBlobUploadStrategy(this);
1:         } catch (URISyntaxException e) {
1:             strategy = new DefaultBlobUploadStrategy(this);
/////////////////////////////////////////////////////////////////////////
1:             } else if (url.getProtocol().equalsIgnoreCase("FILE")) {
1:                 strategy = new FileSystemBlobStrategy(this);
1:         } catch (URISyntaxException e) {
1:             strategy = new DefaultBlobDownloadStrategy(this);
commit:af159dd
/////////////////////////////////////////////////////////////////////////
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 strategy = new FTPBlobDownloadStrategy(this);
1:                 strategy = new DefaultBlobDownloadStrategy(this);
1:             strategy = new DefaultBlobDownloadStrategy(this);
author:Robert Davies
-------------------------------------------------------------------------------
commit:b08ae50
/////////////////////////////////////////////////////////////////////////
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private BlobDownloadStrategy downloadStrategy;
/////////////////////////////////////////////////////////////////////////
1:     public BlobDownloadStrategy getDownloadStrategy() {
1:         if(downloadStrategy == null) {
1:             downloadStrategy = createDownloadStrategy();
1:         }
1:         return downloadStrategy;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the upload strategy depending on the information from the
1:      * uploadURL. Currently supportet HTTP and FTP
1:      * 
1:      * @return
1:      */
1:     	BlobUploadStrategy strategy;
1:     	try {
1:             URL url = new URL(getUploadUrl());
1: 
1:             if(url.getProtocol().equalsIgnoreCase("FTP")) {
1:                 strategy = new FTPBlobUploadStrategy(this);
1:             } else {
1:                 strategy = new DefaultBlobUploadStrategy(this);
1:         } catch (MalformedURLException e) {
1:                 strategy = new DefaultBlobUploadStrategy(this);
1: }
1:         return strategy;
1:     }
1:     
1:     /**
1:      * Returns the download strategy depending on the information from the
1:      * uploadURL. Currently supportet HTTP and FTP
1:      * 
1:      * @return
1:      */
1:     protected BlobDownloadStrategy createDownloadStrategy() {
1:         BlobDownloadStrategy strategy;
1:         try {
1:             URL url = new URL(getUploadUrl());
1:             
1:             if(url.getProtocol().equalsIgnoreCase("FTP")) {
0:                 strategy = new FTPBlobDownloadStrategy();
1:             } else {
0:                 strategy = new DefaultBlobDownloadStrategy();
1:             }
1:         } catch (MalformedURLException e) {
0:             strategy = new DefaultBlobDownloadStrategy();
1:         }
1:         return strategy;
1:     }
1: 
1:     
author:James Strachan
-------------------------------------------------------------------------------
commit:cbb458c
/////////////////////////////////////////////////////////////////////////
1:     private String defaultUploadUrl = "http://localhost:8080/uploads/";
commit:52c22cc
/////////////////////////////////////////////////////////////////////////
1:     private int bufferSize = 128 * 1024;
/////////////////////////////////////////////////////////////////////////
1:     public int getBufferSize() {
1:         return bufferSize;
1:     }
1: 
1:     /**
1:      * Sets the default buffer size used when uploading or downloading files
1:      */
1:     public void setBufferSize(int bufferSize) {
1:         this.bufferSize = bufferSize;
1:     }
1: 
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
1: 
1: /**
1:  * The policy for configuring how BLOBs (Binary Large OBjects) are transferred
1:  * out of band between producers, brokers and consumers.
1:  *
0:  * @version $Revision: $
1:  */
1: public class BlobTransferPolicy {
0:     private String defaultUploadUrl = "http://localhost:8080";
1:     private String brokerUploadUrl;
1:     private String uploadUrl;
1:     private BlobUploadStrategy uploadStrategy;
1: 
1:     /**
1:      * Returns a copy of this policy object
1:      */
1:     public BlobTransferPolicy copy() {
1:         BlobTransferPolicy that = new BlobTransferPolicy();
1:         that.defaultUploadUrl = this.defaultUploadUrl;
1:         that.brokerUploadUrl = this.brokerUploadUrl;
1:         that.uploadUrl = this.uploadUrl;
1:         that.uploadStrategy = this.uploadStrategy;
1:         return that;
1:     }
1: 
1:     public String getUploadUrl() {
1:         if (uploadUrl == null) {
1:             uploadUrl = getBrokerUploadUrl();
1:             if (uploadUrl == null) {
1:                 uploadUrl = getDefaultUploadUrl();
1:             }
1:         }
1:         return uploadUrl;
1:     }
1: 
1:     /**
1:      * Sets the upload URL to use explicitly on the client which will
1:      * overload the default or the broker's URL. This allows the client to decide
1:      * where to upload files to irrespective of the brokers configuration.
1:      */
1:     public void setUploadUrl(String uploadUrl) {
1:         this.uploadUrl = uploadUrl;
1:     }
1: 
1:     public String getBrokerUploadUrl() {
1:         return brokerUploadUrl;
1:     }
1: 
1:     /**
1:      * Called by the JMS client when a broker advertises its upload URL
1:      */
1:     public void setBrokerUploadUrl(String brokerUploadUrl) {
1:         this.brokerUploadUrl = brokerUploadUrl;
1:     }
1: 
1:     public String getDefaultUploadUrl() {
1:         return defaultUploadUrl;
1:     }
1: 
1:     /**
1:      * Sets the default upload URL to use if the broker does not
1:      * have a configured upload URL
1:      */
1:     public void setDefaultUploadUrl(String defaultUploadUrl) {
1:         this.defaultUploadUrl = defaultUploadUrl;
1:     }
1: 
1:     public BlobUploadStrategy getUploadStrategy() {
1:         if (uploadStrategy == null) {
1:             uploadStrategy = createUploadStrategy();
1:         }
1:         return uploadStrategy;
1:     }
1: 
1:     /**
1:      * Sets the upload strategy to use for uploading BLOBs to some URL
1:      */
1:     public void setUploadStrategy(BlobUploadStrategy uploadStrategy) {
1:         this.uploadStrategy = uploadStrategy;
1:     }
1: 
1:     protected BlobUploadStrategy createUploadStrategy() {
0:         return new DefaultBlobUploadStrategy(this);
1:     }
1: }
============================================================================