1:6fc3744: /**
1:6fc3744:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6fc3744:  * contributor license agreements.  See the NOTICE file distributed with
1:6fc3744:  * this work for additional information regarding copyright ownership.
1:6fc3744:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6fc3744:  * (the "License"); you may not use this file except in compliance with
1:6fc3744:  * the License.  You may obtain a copy of the License at
1:6fc3744:  *
1:6fc3744:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6fc3744:  *
1:6fc3744:  * Unless required by applicable law or agreed to in writing, software
1:6fc3744:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6fc3744:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6fc3744:  * See the License for the specific language governing permissions and
1:6fc3744:  * limitations under the License.
1:6fc3744:  */
1:6fc3744: package org.apache.activemq.plugin;
1:6fc3744: 
1:6fc3744: import java.io.File;
1:6fc3744: import java.net.URI;
1:6fc3744: import java.util.Set;
1:ccf601e: 
1:ccf601e: import javax.jms.JMSException;
1:ccf601e: import javax.management.ObjectName;
1:da37753: 
1:6fc3744: import org.apache.activemq.advisory.AdvisorySupport;
1:6fc3744: import org.apache.activemq.broker.Broker;
1:6fc3744: import org.apache.activemq.broker.BrokerFilter;
1:6fc3744: import org.apache.activemq.broker.BrokerService;
1:6fc3744: import org.apache.activemq.broker.ConnectionContext;
1:6fc3744: import org.apache.activemq.broker.ProducerBrokerExchange;
1:e5c4ffd: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:e5c4ffd: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
1:6fc3744: import org.apache.activemq.broker.region.Destination;
1:6fc3744: import org.apache.activemq.broker.region.DestinationStatistics;
1:6fc3744: import org.apache.activemq.broker.region.RegionBroker;
1:6fc3744: import org.apache.activemq.command.ActiveMQDestination;
1:6fc3744: import org.apache.activemq.command.ActiveMQMapMessage;
1:6fc3744: import org.apache.activemq.command.Message;
1:6fc3744: import org.apache.activemq.command.MessageId;
1:6fc3744: import org.apache.activemq.command.ProducerId;
1:6fc3744: import org.apache.activemq.command.ProducerInfo;
1:6fc3744: import org.apache.activemq.state.ProducerState;
1:6fc3744: import org.apache.activemq.usage.SystemUsage;
1:6fc3744: import org.apache.activemq.util.IdGenerator;
1:6fc3744: import org.apache.activemq.util.LongSequenceGenerator;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:6fc3744: /**
1:6fc3744:  * A StatisticsBroker You can retrieve a Map Message for a Destination - or
1:6fc3744:  * Broker containing statistics as key-value pairs The message must contain a
1:6fc3744:  * replyTo Destination - else its ignored
1:6fc3744:  *
1:6fc3744:  */
1:6fc3744: public class StatisticsBroker extends BrokerFilter {
1:8bf987b:     private static Logger LOG = LoggerFactory.getLogger(StatisticsBroker.class);
1:6fc3744:     static final String STATS_DESTINATION_PREFIX = "ActiveMQ.Statistics.Destination";
1:6fc3744:     static final String STATS_BROKER_PREFIX = "ActiveMQ.Statistics.Broker";
1:ccf601e:     static final String STATS_BROKER_RESET_HEADER = "ActiveMQ.Statistics.Broker.Reset";
1:e5c4ffd:     static final String STATS_SUBSCRIPTION_PREFIX = "ActiveMQ.Statistics.Subscription";
1:19622d3:     static final String STATS_DENOTE_END_LIST = STATS_DESTINATION_PREFIX + ".List.End.With.Null";
1:6fc3744:     private static final IdGenerator ID_GENERATOR = new IdGenerator();
1:6fc3744:     private final LongSequenceGenerator messageIdGenerator = new LongSequenceGenerator();
1:6fc3744:     protected final ProducerId advisoryProducerId = new ProducerId();
1:e5c4ffd:     protected BrokerViewMBean brokerView;
1:6fc3744: 
1:6fc3744:     /**
1:6fc3744:      *
1:6fc3744:      * Constructor
1:6fc3744:      *
1:6fc3744:      * @param next
1:6fc3744:      */
1:6fc3744:     public StatisticsBroker(Broker next) {
1:6fc3744:         super(next);
1:6fc3744:         this.advisoryProducerId.setConnectionId(ID_GENERATOR.generateId());
1:6fc3744:     }
1:6fc3744: 
1:6fc3744:     /**
1:6fc3744:      * Sets the persistence mode
1:6fc3744:      *
1:6fc3744:      * @see org.apache.activemq.broker.BrokerFilter#send(org.apache.activemq.broker.ProducerBrokerExchange,
1:6fc3744:      *      org.apache.activemq.command.Message)
1:6fc3744:      */
1:da37753:     @Override
1:6fc3744:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:6fc3744:         ActiveMQDestination msgDest = messageSend.getDestination();
1:6fc3744:         ActiveMQDestination replyTo = messageSend.getReplyTo();
1:6fc3744:         if (replyTo != null) {
1:6fc3744:             String physicalName = msgDest.getPhysicalName();
1:6fc3744:             boolean destStats = physicalName.regionMatches(true, 0, STATS_DESTINATION_PREFIX, 0,
1:6fc3744:                     STATS_DESTINATION_PREFIX.length());
1:6fc3744:             boolean brokerStats = physicalName.regionMatches(true, 0, STATS_BROKER_PREFIX, 0, STATS_BROKER_PREFIX
1:6fc3744:                     .length());
1:e5c4ffd:             boolean subStats = physicalName.regionMatches(true, 0, STATS_SUBSCRIPTION_PREFIX, 0, STATS_SUBSCRIPTION_PREFIX
1:e5c4ffd:                     .length());
1:6fc3744:             BrokerService brokerService = getBrokerService();
1:6fc3744:             RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:6fc3744:             if (destStats) {
1:19622d3:                 String destinationName = physicalName.substring(STATS_DESTINATION_PREFIX.length(), physicalName.length());
1:4eb5097:                 if (destinationName.startsWith(".")) {
1:4eb5097:                     destinationName = destinationName.substring(1);
1:4eb5097:                 }
1:19622d3:                 String destinationQuery = destinationName.replace(STATS_DENOTE_END_LIST,"");
1:19622d3:                 boolean endListMessage = !destinationName.equals(destinationQuery);
1:19622d3:                 ActiveMQDestination queryDestination = ActiveMQDestination.createDestination(destinationQuery,msgDest.getDestinationType());
1:19622d3:                 Set<Destination> destinations = getDestinations(queryDestination);
1:19622d3: 
1:19622d3:                 for (Destination dest : destinations) {
1:6fc3744:                     DestinationStatistics stats = dest.getDestinationStatistics();
1:6fc3744:                     if (stats != null) {
1:6fc3744:                         ActiveMQMapMessage statsMessage = new ActiveMQMapMessage();
1:3797da6:                         statsMessage.setString("brokerName", regionBroker.getBrokerName());
1:3797da6:                         statsMessage.setString("brokerId", regionBroker.getBrokerId().toString());
1:6fc3744:                         statsMessage.setString("destinationName", dest.getActiveMQDestination().toString());
1:6fc3744:                         statsMessage.setLong("size", stats.getMessages().getCount());
1:6fc3744:                         statsMessage.setLong("enqueueCount", stats.getEnqueues().getCount());
1:6fc3744:                         statsMessage.setLong("dequeueCount", stats.getDequeues().getCount());
1:6fc3744:                         statsMessage.setLong("dispatchCount", stats.getDispatched().getCount());
1:6fc3744:                         statsMessage.setLong("expiredCount", stats.getExpired().getCount());
1:6fc3744:                         statsMessage.setLong("inflightCount", stats.getInflight().getCount());
1:6fc3744:                         statsMessage.setLong("messagesCached", stats.getMessagesCached().getCount());
1:5c7985c:                         // we are okay with the size without decimals so cast to long
1:cfdff4e:                         statsMessage.setLong("averageMessageSize", (long) stats.getMessageSize().getAverageSize());
1:6fc3744:                         statsMessage.setInt("memoryPercentUsage", dest.getMemoryUsage().getPercentUsage());
1:6fc3744:                         statsMessage.setLong("memoryUsage", dest.getMemoryUsage().getUsage());
1:6fc3744:                         statsMessage.setLong("memoryLimit", dest.getMemoryUsage().getLimit());
1:6fc3744:                         statsMessage.setDouble("averageEnqueueTime", stats.getProcessTime().getAverageTime());
1:6fc3744:                         statsMessage.setDouble("maxEnqueueTime", stats.getProcessTime().getMaxTime());
1:6fc3744:                         statsMessage.setDouble("minEnqueueTime", stats.getProcessTime().getMinTime());
1:6fc3744:                         statsMessage.setLong("consumerCount", stats.getConsumers().getCount());
1:6fc3744:                         statsMessage.setLong("producerCount", stats.getProducers().getCount());
1:592e18e:                         statsMessage.setJMSCorrelationID(messageSend.getCorrelationId());
1:6fc3744:                         sendStats(producerExchange.getConnectionContext(), statsMessage, replyTo);
1:6fc3744:                     }
1:6fc3744:                 }
1:19622d3:                 if(endListMessage){
1:19622d3:                     ActiveMQMapMessage statsMessage = new ActiveMQMapMessage();
1:19622d3:                     statsMessage.setJMSCorrelationID(messageSend.getCorrelationId());
1:19622d3:                     sendStats(producerExchange.getConnectionContext(),statsMessage,replyTo);
1:19622d3:                 }
1:19622d3: 
1:e5c4ffd:             } else if (subStats) {
1:e5c4ffd:                 sendSubStats(producerExchange.getConnectionContext(), getBrokerView().getQueueSubscribers(), replyTo);
1:e5c4ffd:                 sendSubStats(producerExchange.getConnectionContext(), getBrokerView().getTopicSubscribers(), replyTo);
1:6fc3744:             } else if (brokerStats) {
1:ccf601e: 
1:ccf601e:                 if (messageSend.getProperties().containsKey(STATS_BROKER_RESET_HEADER)) {
1:ccf601e:                     getBrokerView().resetStatistics();
1:ccf601e:                 }
1:ccf601e: 
1:6fc3744:                 ActiveMQMapMessage statsMessage = new ActiveMQMapMessage();
1:6fc3744:                 SystemUsage systemUsage = brokerService.getSystemUsage();
1:6fc3744:                 DestinationStatistics stats = regionBroker.getDestinationStatistics();
1:6fc3744:                 statsMessage.setString("brokerName", regionBroker.getBrokerName());
1:6fc3744:                 statsMessage.setString("brokerId", regionBroker.getBrokerId().toString());
1:6fc3744:                 statsMessage.setLong("size", stats.getMessages().getCount());
1:6fc3744:                 statsMessage.setLong("enqueueCount", stats.getEnqueues().getCount());
1:6fc3744:                 statsMessage.setLong("dequeueCount", stats.getDequeues().getCount());
1:6fc3744:                 statsMessage.setLong("dispatchCount", stats.getDispatched().getCount());
1:6fc3744:                 statsMessage.setLong("expiredCount", stats.getExpired().getCount());
1:6fc3744:                 statsMessage.setLong("inflightCount", stats.getInflight().getCount());
1:5c7985c:                 // we are okay with the size without decimals so cast to long
1:5c7985c:                 statsMessage.setLong("averageMessageSize",(long) stats.getMessageSize().getAverageSize());
1:6fc3744:                 statsMessage.setLong("messagesCached", stats.getMessagesCached().getCount());
1:6fc3744:                 statsMessage.setInt("memoryPercentUsage", systemUsage.getMemoryUsage().getPercentUsage());
1:6fc3744:                 statsMessage.setLong("memoryUsage", systemUsage.getMemoryUsage().getUsage());
1:6fc3744:                 statsMessage.setLong("memoryLimit", systemUsage.getMemoryUsage().getLimit());
1:6fc3744:                 statsMessage.setInt("storePercentUsage", systemUsage.getStoreUsage().getPercentUsage());
1:6fc3744:                 statsMessage.setLong("storeUsage", systemUsage.getStoreUsage().getUsage());
1:6fc3744:                 statsMessage.setLong("storeLimit", systemUsage.getStoreUsage().getLimit());
1:6fc3744:                 statsMessage.setInt("tempPercentUsage", systemUsage.getTempUsage().getPercentUsage());
1:6fc3744:                 statsMessage.setLong("tempUsage", systemUsage.getTempUsage().getUsage());
1:6fc3744:                 statsMessage.setLong("tempLimit", systemUsage.getTempUsage().getLimit());
1:6fc3744:                 statsMessage.setDouble("averageEnqueueTime", stats.getProcessTime().getAverageTime());
1:6fc3744:                 statsMessage.setDouble("maxEnqueueTime", stats.getProcessTime().getMaxTime());
1:6fc3744:                 statsMessage.setDouble("minEnqueueTime", stats.getProcessTime().getMinTime());
1:6fc3744:                 statsMessage.setLong("consumerCount", stats.getConsumers().getCount());
1:6fc3744:                 statsMessage.setLong("producerCount", stats.getProducers().getCount());
1:6fc3744:                 String answer = brokerService.getTransportConnectorURIsAsMap().get("tcp");
1:6fc3744:                 answer = answer != null ? answer : "";
1:6fc3744:                 statsMessage.setString("openwire", answer);
1:6fc3744:                 answer = brokerService.getTransportConnectorURIsAsMap().get("stomp");
1:6fc3744:                 answer = answer != null ? answer : "";
1:6fc3744:                 statsMessage.setString("stomp", answer);
1:6fc3744:                 answer = brokerService.getTransportConnectorURIsAsMap().get("ssl");
1:6fc3744:                 answer = answer != null ? answer : "";
1:6fc3744:                 statsMessage.setString("ssl", answer);
1:6fc3744:                 answer = brokerService.getTransportConnectorURIsAsMap().get("stomp+ssl");
1:6fc3744:                 answer = answer != null ? answer : "";
1:6fc3744:                 statsMessage.setString("stomp+ssl", answer);
1:6fc3744:                 URI uri = brokerService.getVmConnectorURI();
1:6fc3744:                 answer = uri != null ? uri.toString() : "";
1:6fc3744:                 statsMessage.setString("vm", answer);
1:6fc3744:                 File file = brokerService.getDataDirectoryFile();
1:6fc3744:                 answer = file != null ? file.getCanonicalPath() : "";
1:6fc3744:                 statsMessage.setString("dataDirectory", answer);
1:592e18e:                 statsMessage.setJMSCorrelationID(messageSend.getCorrelationId());
1:6fc3744:                 sendStats(producerExchange.getConnectionContext(), statsMessage, replyTo);
1:6fc3744:             } else {
1:6fc3744:                 super.send(producerExchange, messageSend);
1:6fc3744:             }
1:6fc3744:         } else {
1:6fc3744:             super.send(producerExchange, messageSend);
1:6fc3744:         }
1:6fc3744:     }
1:6fc3744: 
1:e5c4ffd:     BrokerViewMBean getBrokerView() throws Exception {
1:e5c4ffd:         if (this.brokerView == null) {
1:e5c4ffd:             ObjectName brokerName = getBrokerService().getBrokerObjectName();
1:e5c4ffd:             this.brokerView = (BrokerViewMBean) getBrokerService().getManagementContext().newProxyInstance(brokerName,
1:e5c4ffd:                     BrokerViewMBean.class, true);
1:e5c4ffd:         }
1:e5c4ffd:         return this.brokerView;
1:e5c4ffd:     }
1:ccf601e: 
1:da37753:     @Override
1:6fc3744:     public void start() throws Exception {
1:6fc3744:         super.start();
1:6fc3744:         LOG.info("Starting StatisticsBroker");
1:6fc3744:     }
1:6fc3744: 
1:da37753:     @Override
1:6fc3744:     public void stop() throws Exception {
1:6fc3744:         super.stop();
1:6fc3744:     }
1:6fc3744: 
1:e5c4ffd:     protected void sendSubStats(ConnectionContext context, ObjectName[] subscribers, ActiveMQDestination replyTo) throws Exception {
1:e5c4ffd:         for (int i = 0; i < subscribers.length; i++) {
1:e5c4ffd:             ObjectName name = subscribers[i];
1:e5c4ffd:             SubscriptionViewMBean subscriber = (SubscriptionViewMBean)getBrokerService().getManagementContext().newProxyInstance(name, SubscriptionViewMBean.class, true);
1:e5c4ffd:             ActiveMQMapMessage statsMessage = prepareSubscriptionMessage(subscriber);
1:e5c4ffd:             sendStats(context, statsMessage, replyTo);
1:e5c4ffd:         }
1:e5c4ffd:     }
1:e5c4ffd: 
1:e5c4ffd:     protected ActiveMQMapMessage prepareSubscriptionMessage(SubscriptionViewMBean subscriber) throws JMSException {
1:3797da6:         Broker regionBroker = getBrokerService().getRegionBroker();
1:e5c4ffd:         ActiveMQMapMessage statsMessage = new ActiveMQMapMessage();
1:3797da6:         statsMessage.setString("brokerName", regionBroker.getBrokerName());
1:3797da6:         statsMessage.setString("brokerId", regionBroker.getBrokerId().toString());
1:e5c4ffd:         statsMessage.setString("destinationName", subscriber.getDestinationName());
1:e5c4ffd:         statsMessage.setString("clientId", subscriber.getClientId());
1:e5c4ffd:         statsMessage.setString("connectionId", subscriber.getConnectionId());
1:e5c4ffd:         statsMessage.setLong("sessionId", subscriber.getSessionId());
1:e5c4ffd:         statsMessage.setString("selector", subscriber.getSelector());
1:e5c4ffd:         statsMessage.setLong("enqueueCounter", subscriber.getEnqueueCounter());
1:e5c4ffd:         statsMessage.setLong("dequeueCounter", subscriber.getDequeueCounter());
1:e5c4ffd:         statsMessage.setLong("dispatchedCounter", subscriber.getDispatchedCounter());
1:e5c4ffd:         statsMessage.setLong("dispatchedQueueSize", subscriber.getDispatchedQueueSize());
1:e5c4ffd:         statsMessage.setInt("prefetchSize", subscriber.getPrefetchSize());
1:e5c4ffd:         statsMessage.setInt("maximumPendingMessageLimit", subscriber.getMaximumPendingMessageLimit());
1:e5c4ffd:         statsMessage.setBoolean("exclusive", subscriber.isExclusive());
1:e5c4ffd:         statsMessage.setBoolean("retroactive", subscriber.isRetroactive());
1:e5c4ffd:         statsMessage.setBoolean("slowConsumer", subscriber.isSlowConsumer());
1:e5c4ffd:         return statsMessage;
1:e5c4ffd:     }
1:e5c4ffd: 
1:6fc3744:     protected void sendStats(ConnectionContext context, ActiveMQMapMessage msg, ActiveMQDestination replyTo)
1:6fc3744:             throws Exception {
1:6fc3744:         msg.setPersistent(false);
1:da37753:         msg.setTimestamp(System.currentTimeMillis());
1:da37753:         msg.setPriority((byte) javax.jms.Message.DEFAULT_PRIORITY);
1:6fc3744:         msg.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
1:6fc3744:         msg.setMessageId(new MessageId(this.advisoryProducerId, this.messageIdGenerator.getNextSequenceId()));
1:6fc3744:         msg.setDestination(replyTo);
1:6fc3744:         msg.setResponseRequired(false);
1:6fc3744:         msg.setProducerId(this.advisoryProducerId);
1:6fc3744:         boolean originalFlowControl = context.isProducerFlowControl();
1:6fc3744:         final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:6fc3744:         producerExchange.setConnectionContext(context);
1:6fc3744:         producerExchange.setMutable(true);
1:6fc3744:         producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
1:6fc3744:         try {
1:6fc3744:             context.setProducerFlowControl(false);
1:6fc3744:             this.next.send(producerExchange, msg);
1:6fc3744:         } finally {
1:6fc3744:             context.setProducerFlowControl(originalFlowControl);
1:6fc3744:         }
1:6fc3744:     }
1:19622d3: 
1:6fc3744: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cfdff4e
/////////////////////////////////////////////////////////////////////////
1:                         statsMessage.setLong("averageMessageSize", (long) stats.getMessageSize().getAverageSize());
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:5c7985c
/////////////////////////////////////////////////////////////////////////
1:                         // we are okay with the size without decimals so cast to long
0:                         statsMessage.setLong("averageMessageSize", (long) stats.getMessageSize().getAveragePerSecond());
/////////////////////////////////////////////////////////////////////////
1:                 // we are okay with the size without decimals so cast to long
1:                 statsMessage.setLong("averageMessageSize",(long) stats.getMessageSize().getAverageSize());
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4eb5097
/////////////////////////////////////////////////////////////////////////
1:                 if (destinationName.startsWith(".")) {
1:                     destinationName = destinationName.substring(1);
1:                 }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:da37753
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         msg.setTimestamp(System.currentTimeMillis());
1:         msg.setPriority((byte) javax.jms.Message.DEFAULT_PRIORITY);
author:rajdavies
-------------------------------------------------------------------------------
commit:3797da6
/////////////////////////////////////////////////////////////////////////
1:                         statsMessage.setString("brokerName", regionBroker.getBrokerName());
1:                         statsMessage.setString("brokerId", regionBroker.getBrokerId().toString());
/////////////////////////////////////////////////////////////////////////
1:         Broker regionBroker = getBrokerService().getRegionBroker();
1:         statsMessage.setString("brokerName", regionBroker.getBrokerName());
1:         statsMessage.setString("brokerId", regionBroker.getBrokerId().toString());
author:Robert Davies
-------------------------------------------------------------------------------
commit:f71e2fe
/////////////////////////////////////////////////////////////////////////
0:                         statsMessage.setDouble("averageMessageSize", stats.getMessageSize().getAveragePerSecond());
/////////////////////////////////////////////////////////////////////////
0:                 statsMessage.setDouble("averageMessageSize",stats.getMessageSize().getAverageSize());
commit:19622d3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     static final String STATS_DENOTE_END_LIST = STATS_DESTINATION_PREFIX + ".List.End.With.Null";
/////////////////////////////////////////////////////////////////////////
1:                 String destinationName = physicalName.substring(STATS_DESTINATION_PREFIX.length(), physicalName.length());
1:                 String destinationQuery = destinationName.replace(STATS_DENOTE_END_LIST,"");
1:                 boolean endListMessage = !destinationName.equals(destinationQuery);
1:                 ActiveMQDestination queryDestination = ActiveMQDestination.createDestination(destinationQuery,msgDest.getDestinationType());
1:                 Set<Destination> destinations = getDestinations(queryDestination);
1: 
1:                 for (Destination dest : destinations) {
/////////////////////////////////////////////////////////////////////////
1:                 if(endListMessage){
1:                     ActiveMQMapMessage statsMessage = new ActiveMQMapMessage();
1:                     statsMessage.setJMSCorrelationID(messageSend.getCorrelationId());
1:                     sendStats(producerExchange.getConnectionContext(),statsMessage,replyTo);
1:                 }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:592e18e
/////////////////////////////////////////////////////////////////////////
1:                         statsMessage.setJMSCorrelationID(messageSend.getCorrelationId());
/////////////////////////////////////////////////////////////////////////
1:                 statsMessage.setJMSCorrelationID(messageSend.getCorrelationId());
commit:6fc3744
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationStatistics;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.state.ProducerState;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.apache.activemq.util.IdGenerator;
1: import org.apache.activemq.util.LongSequenceGenerator;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import java.io.File;
1: import java.net.URI;
1: import java.util.Set;
1: /**
1:  * A StatisticsBroker You can retrieve a Map Message for a Destination - or
1:  * Broker containing statistics as key-value pairs The message must contain a
1:  * replyTo Destination - else its ignored
1:  * 
1:  */
1: public class StatisticsBroker extends BrokerFilter {
0:     private static Log LOG = LogFactory.getLog(StatisticsBroker.class);
1:     static final String STATS_DESTINATION_PREFIX = "ActiveMQ.Statistics.Destination";
1:     static final String STATS_BROKER_PREFIX = "ActiveMQ.Statistics.Broker";
1:     private static final IdGenerator ID_GENERATOR = new IdGenerator();
1:     private final LongSequenceGenerator messageIdGenerator = new LongSequenceGenerator();
1:     protected final ProducerId advisoryProducerId = new ProducerId();
1: 
1:     /**
1:      * 
1:      * Constructor
1:      * 
1:      * @param next
1:      */
1:     public StatisticsBroker(Broker next) {
1:         super(next);
1:         this.advisoryProducerId.setConnectionId(ID_GENERATOR.generateId());
1:     }
1: 
1:     /**
1:      * Sets the persistence mode
1:      * 
1:      * @see org.apache.activemq.broker.BrokerFilter#send(org.apache.activemq.broker.ProducerBrokerExchange,
1:      *      org.apache.activemq.command.Message)
1:      */
1:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:         ActiveMQDestination msgDest = messageSend.getDestination();
1:         ActiveMQDestination replyTo = messageSend.getReplyTo();
1:         if (replyTo != null) {
1:             String physicalName = msgDest.getPhysicalName();
1:             boolean destStats = physicalName.regionMatches(true, 0, STATS_DESTINATION_PREFIX, 0,
1:                     STATS_DESTINATION_PREFIX.length());
1:             boolean brokerStats = physicalName.regionMatches(true, 0, STATS_BROKER_PREFIX, 0, STATS_BROKER_PREFIX
1:                     .length());
1:             if (destStats) {
0:                 String queueryName = physicalName.substring(STATS_DESTINATION_PREFIX.length(), physicalName.length());
0:                 ActiveMQDestination queryDest = ActiveMQDestination.createDestination(queueryName,msgDest.getDestinationType());
0:                 Set<Destination> set = getDestinations(queryDest);
0:                 for (Destination dest : set) {
1:                     DestinationStatistics stats = dest.getDestinationStatistics();
1:                     if (stats != null) {
1:                         ActiveMQMapMessage statsMessage = new ActiveMQMapMessage();
1:                         statsMessage.setString("destinationName", dest.getActiveMQDestination().toString());
1:                         statsMessage.setLong("size", stats.getMessages().getCount());
1:                         statsMessage.setLong("enqueueCount", stats.getEnqueues().getCount());
1:                         statsMessage.setLong("dequeueCount", stats.getDequeues().getCount());
1:                         statsMessage.setLong("dispatchCount", stats.getDispatched().getCount());
1:                         statsMessage.setLong("expiredCount", stats.getExpired().getCount());
1:                         statsMessage.setLong("inflightCount", stats.getInflight().getCount());
1:                         statsMessage.setLong("messagesCached", stats.getMessagesCached().getCount());
1:                         statsMessage.setInt("memoryPercentUsage", dest.getMemoryUsage().getPercentUsage());
1:                         statsMessage.setLong("memoryUsage", dest.getMemoryUsage().getUsage());
1:                         statsMessage.setLong("memoryLimit", dest.getMemoryUsage().getLimit());
1:                         statsMessage.setDouble("averageEnqueueTime", stats.getProcessTime().getAverageTime());
1:                         statsMessage.setDouble("maxEnqueueTime", stats.getProcessTime().getMaxTime());
1:                         statsMessage.setDouble("minEnqueueTime", stats.getProcessTime().getMinTime());
1:                         statsMessage.setLong("consumerCount", stats.getConsumers().getCount());
1:                         statsMessage.setLong("producerCount", stats.getProducers().getCount());
1:                         sendStats(producerExchange.getConnectionContext(), statsMessage, replyTo);
1:                     }
1:                 }
1:             } else if (brokerStats) {
1:                 ActiveMQMapMessage statsMessage = new ActiveMQMapMessage();
1:                 BrokerService brokerService = getBrokerService();
1:                 RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:                 SystemUsage systemUsage = brokerService.getSystemUsage();
1:                 DestinationStatistics stats = regionBroker.getDestinationStatistics();
1:                 statsMessage.setString("brokerName", regionBroker.getBrokerName());
1:                 statsMessage.setString("brokerId", regionBroker.getBrokerId().toString());
1:                 statsMessage.setLong("size", stats.getMessages().getCount());
1:                 statsMessage.setLong("enqueueCount", stats.getEnqueues().getCount());
1:                 statsMessage.setLong("dequeueCount", stats.getDequeues().getCount());
1:                 statsMessage.setLong("dispatchCount", stats.getDispatched().getCount());
1:                 statsMessage.setLong("expiredCount", stats.getExpired().getCount());
1:                 statsMessage.setLong("inflightCount", stats.getInflight().getCount());
1:                 statsMessage.setLong("messagesCached", stats.getMessagesCached().getCount());
1:                 statsMessage.setInt("memoryPercentUsage", systemUsage.getMemoryUsage().getPercentUsage());
1:                 statsMessage.setLong("memoryUsage", systemUsage.getMemoryUsage().getUsage());
1:                 statsMessage.setLong("memoryLimit", systemUsage.getMemoryUsage().getLimit());
1:                 statsMessage.setInt("storePercentUsage", systemUsage.getStoreUsage().getPercentUsage());
1:                 statsMessage.setLong("storeUsage", systemUsage.getStoreUsage().getUsage());
1:                 statsMessage.setLong("storeLimit", systemUsage.getStoreUsage().getLimit());
1:                 statsMessage.setInt("tempPercentUsage", systemUsage.getTempUsage().getPercentUsage());
1:                 statsMessage.setLong("tempUsage", systemUsage.getTempUsage().getUsage());
1:                 statsMessage.setLong("tempLimit", systemUsage.getTempUsage().getLimit());
1:                 statsMessage.setDouble("averageEnqueueTime", stats.getProcessTime().getAverageTime());
1:                 statsMessage.setDouble("maxEnqueueTime", stats.getProcessTime().getMaxTime());
1:                 statsMessage.setDouble("minEnqueueTime", stats.getProcessTime().getMinTime());
1:                 statsMessage.setLong("consumerCount", stats.getConsumers().getCount());
1:                 statsMessage.setLong("producerCount", stats.getProducers().getCount());
1:                 String answer = brokerService.getTransportConnectorURIsAsMap().get("tcp");
1:                 answer = answer != null ? answer : "";
1:                 statsMessage.setString("openwire", answer);
1:                 answer = brokerService.getTransportConnectorURIsAsMap().get("stomp");
1:                 answer = answer != null ? answer : "";
1:                 statsMessage.setString("stomp", answer);
1:                 answer = brokerService.getTransportConnectorURIsAsMap().get("ssl");
1:                 answer = answer != null ? answer : "";
1:                 statsMessage.setString("ssl", answer);
1:                 answer = brokerService.getTransportConnectorURIsAsMap().get("stomp+ssl");
1:                 answer = answer != null ? answer : "";
1:                 statsMessage.setString("stomp+ssl", answer);
1:                 URI uri = brokerService.getVmConnectorURI();
1:                 answer = uri != null ? uri.toString() : "";
1:                 statsMessage.setString("vm", answer);
1:                 File file = brokerService.getDataDirectoryFile();
1:                 answer = file != null ? file.getCanonicalPath() : "";
1:                 statsMessage.setString("dataDirectory", answer);
1:                 sendStats(producerExchange.getConnectionContext(), statsMessage, replyTo);
1:             } else {
1:                 super.send(producerExchange, messageSend);
1:             }
1:         } else {
1:             super.send(producerExchange, messageSend);
1:         }
1:     }
1: 
1:     public void start() throws Exception {
1:         super.start();
1:         LOG.info("Starting StatisticsBroker");
1:     }
1: 
1:     public void stop() throws Exception {
1:         super.stop();
1:     }
1: 
1:     protected void sendStats(ConnectionContext context, ActiveMQMapMessage msg, ActiveMQDestination replyTo)
1:             throws Exception {
1:         msg.setPersistent(false);
1:         msg.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
1:         msg.setMessageId(new MessageId(this.advisoryProducerId, this.messageIdGenerator.getNextSequenceId()));
1:         msg.setDestination(replyTo);
1:         msg.setResponseRequired(false);
1:         msg.setProducerId(this.advisoryProducerId);
1:         boolean originalFlowControl = context.isProducerFlowControl();
1:         final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:         producerExchange.setConnectionContext(context);
1:         producerExchange.setMutable(true);
1:         producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
1:         try {
1:             context.setProducerFlowControl(false);
1:             this.next.send(producerExchange, msg);
1:         } finally {
1:             context.setProducerFlowControl(originalFlowControl);
1:         }
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ccf601e
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.net.URI;
0: import java.util.Set;
1: 
1: import javax.jms.JMSException;
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
0:  *
1:     static final String STATS_BROKER_RESET_HEADER = "ActiveMQ.Statistics.Broker.Reset";
/////////////////////////////////////////////////////////////////////////
0:      *
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1: 
1:                 if (messageSend.getProperties().containsKey(STATS_BROKER_RESET_HEADER)) {
1:                     getBrokerView().resetStatistics();
1:                 }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e5c4ffd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
/////////////////////////////////////////////////////////////////////////
1: 
0: import javax.jms.JMSException;
0: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:     static final String STATS_SUBSCRIPTION_PREFIX = "ActiveMQ.Statistics.Subscription";
1:     protected BrokerViewMBean brokerView;
/////////////////////////////////////////////////////////////////////////
1:             boolean subStats = physicalName.regionMatches(true, 0, STATS_SUBSCRIPTION_PREFIX, 0, STATS_SUBSCRIPTION_PREFIX
1:                     .length());
0:             BrokerService brokerService = getBrokerService();
0:             RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
/////////////////////////////////////////////////////////////////////////
1:             } else if (subStats) {
1:                 sendSubStats(producerExchange.getConnectionContext(), getBrokerView().getQueueSubscribers(), replyTo);
1:                 sendSubStats(producerExchange.getConnectionContext(), getBrokerView().getTopicSubscribers(), replyTo);
/////////////////////////////////////////////////////////////////////////
1:     BrokerViewMBean getBrokerView() throws Exception {
1:         if (this.brokerView == null) {
1:             ObjectName brokerName = getBrokerService().getBrokerObjectName();
1:             this.brokerView = (BrokerViewMBean) getBrokerService().getManagementContext().newProxyInstance(brokerName,
1:                     BrokerViewMBean.class, true);
1:         }
1:         return this.brokerView;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void sendSubStats(ConnectionContext context, ObjectName[] subscribers, ActiveMQDestination replyTo) throws Exception {
1:         for (int i = 0; i < subscribers.length; i++) {
1:             ObjectName name = subscribers[i];
1:             SubscriptionViewMBean subscriber = (SubscriptionViewMBean)getBrokerService().getManagementContext().newProxyInstance(name, SubscriptionViewMBean.class, true);
1:             ActiveMQMapMessage statsMessage = prepareSubscriptionMessage(subscriber);
1:             sendStats(context, statsMessage, replyTo);
1:         }
1:     }
0: 
1:     protected ActiveMQMapMessage prepareSubscriptionMessage(SubscriptionViewMBean subscriber) throws JMSException {
1:         ActiveMQMapMessage statsMessage = new ActiveMQMapMessage();
1:         statsMessage.setString("destinationName", subscriber.getDestinationName());
1:         statsMessage.setString("clientId", subscriber.getClientId());
1:         statsMessage.setString("connectionId", subscriber.getConnectionId());
1:         statsMessage.setLong("sessionId", subscriber.getSessionId());
1:         statsMessage.setString("selector", subscriber.getSelector());
1:         statsMessage.setLong("enqueueCounter", subscriber.getEnqueueCounter());
1:         statsMessage.setLong("dequeueCounter", subscriber.getDequeueCounter());
1:         statsMessage.setLong("dispatchedCounter", subscriber.getDispatchedCounter());
1:         statsMessage.setLong("dispatchedQueueSize", subscriber.getDispatchedQueueSize());
1:         statsMessage.setInt("prefetchSize", subscriber.getPrefetchSize());
1:         statsMessage.setInt("maximumPendingMessageLimit", subscriber.getMaximumPendingMessageLimit());
1:         statsMessage.setBoolean("exclusive", subscriber.isExclusive());
1:         statsMessage.setBoolean("retroactive", subscriber.isRetroactive());
1:         statsMessage.setBoolean("slowConsumer", subscriber.isSlowConsumer());
1:         return statsMessage;
1:     }
0: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static Logger LOG = LoggerFactory.getLogger(StatisticsBroker.class);
============================================================================