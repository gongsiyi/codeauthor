1:cdd5150: /**
1:cdd5150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdd5150:  * contributor license agreements.  See the NOTICE file distributed with
1:cdd5150:  * this work for additional information regarding copyright ownership.
1:cdd5150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdd5150:  * (the "License"); you may not use this file except in compliance with
1:cdd5150:  * the License.  You may obtain a copy of the License at
1:cdd5150:  *
1:cdd5150:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cdd5150:  *
1:cdd5150:  * Unless required by applicable law or agreed to in writing, software
1:cdd5150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdd5150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdd5150:  * See the License for the specific language governing permissions and
1:cdd5150:  * limitations under the License.
1:cdd5150:  */
1:cdd5150: package org.apache.activemq.transport.amqp;
1:2360fb8: 
1:6fa0598: import java.io.File;
1:5e7b70f: import java.io.IOException;
1:31c55f7: import java.net.ServerSocket;
1:36bd069: import java.net.URI;
1:0f9a347: import java.security.SecureRandom;
1:98c5866: import java.util.ArrayList;
1:98c5866: import java.util.List;
1:cf2083f: import java.util.Set;
1:6fa0598: import java.util.Vector;
1:2360fb8: 
1:c5c4caa: import javax.jms.Connection;
1:c5c4caa: import javax.jms.Destination;
1:c5c4caa: import javax.jms.JMSException;
1:c5c4caa: import javax.jms.MessageProducer;
1:c5c4caa: import javax.jms.Session;
1:c5c4caa: import javax.jms.TextMessage;
1:c5c4caa: import javax.management.MalformedObjectNameException;
1:c5c4caa: import javax.management.ObjectName;
1:31c55f7: import javax.net.ServerSocketFactory;
1:0f9a347: import javax.net.ssl.KeyManager;
1:0f9a347: import javax.net.ssl.SSLContext;
1:0f9a347: import javax.net.ssl.TrustManager;
1:c5c4caa: 
1:72839b7: import org.apache.activemq.ActiveMQConnectionFactory;
1:98c5866: import org.apache.activemq.broker.BrokerPlugin;
1:cdd5150: import org.apache.activemq.broker.BrokerService;
1:cdd5150: import org.apache.activemq.broker.TransportConnector;
1:c5c4caa: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:cf2083f: import org.apache.activemq.broker.jmx.ConnectorViewMBean;
1:c5c4caa: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:5e7b70f: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
1:934ad44: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:2db73e2: import org.apache.activemq.spring.SpringSslContext;
1:36bd069: import org.apache.activemq.store.kahadb.KahaDBStore;
1:3306467: import org.apache.activemq.transport.amqp.protocol.AmqpConnection;
1:cdd5150: import org.junit.After;
1:cdd5150: import org.junit.Before;
1:1dd34a1: import org.junit.Rule;
1:1dd34a1: import org.junit.rules.TestName;
1:cdd5150: import org.slf4j.Logger;
1:cdd5150: import org.slf4j.LoggerFactory;
4:c5c4caa: 
1:7fe30bc: public class AmqpTestSupport {
1:1dd34a1: 
1:9edf907:     public static final String MESSAGE_NUMBER = "MessageNumber";
1:36bd069:     public static final String KAHADB_DIRECTORY = "target/activemq-data/";
1:9edf907: 
1:1dd34a1:     @Rule public TestName name = new TestName();
1:a2b78fd: 
1:7fe30bc:     protected static final Logger LOG = LoggerFactory.getLogger(AmqpTestSupport.class);
1:a2b78fd: 
1:cdd5150:     protected BrokerService brokerService;
1:0752d84:     protected Vector<Throwable> exceptions = new Vector<>();
1:cdd5150:     protected int numberOfMessages;
1:c5c4caa: 
1:36bd069:     protected URI amqpURI;
1:36bd069:     protected int amqpPort;
1:36bd069:     protected URI amqpSslURI;
1:36bd069:     protected int amqpSslPort;
1:36bd069:     protected URI amqpNioURI;
1:36bd069:     protected int amqpNioPort;
1:36bd069:     protected URI amqpNioPlusSslURI;
1:36bd069:     protected int amqpNioPlusSslPort;
1:36bd069: 
1:31c55f7:     protected URI amqpWsURI;
1:31c55f7:     protected int amqpWsPort;
1:31c55f7:     protected URI amqpWssURI;
1:31c55f7:     protected int amqpWssPort;
1:31c55f7: 
1:04ee70a:     protected URI autoURI;
1:04ee70a:     protected int autoPort;
1:04ee70a:     protected URI autoSslURI;
1:04ee70a:     protected int autoSslPort;
1:04ee70a:     protected URI autoNioURI;
1:04ee70a:     protected int autoNioPort;
1:04ee70a:     protected URI autoNioPlusSslURI;
1:04ee70a:     protected int autoNioPlusSslPort;
1:04ee70a: 
1:36bd069:     protected URI openwireURI;
1:36bd069:     protected int openwirePort;
1:c5c4caa: 
1:cdd5150:     @Before
1:2db73e2:     public void setUp() throws Exception {
1:94937e8:         LOG.info("========== start " + getTestName() + " ==========");
1:cdd5150:         exceptions.clear();
1:2360fb8: 
1:a2b78fd:         startBroker();
1:2360fb8: 
1:e3fed4b:         this.numberOfMessages = 2000;
1:2360fb8:     }
1:b83a3d4: 
1:78c4e43:     protected void createBroker(boolean deleteAllMessages) throws Exception {
1:cdd5150:         brokerService = new BrokerService();
1:36bd069: 
1:36bd069:         brokerService.setPersistent(isPersistent());
1:36bd069:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:36bd069:         if (isPersistent()) {
1:36bd069:             KahaDBStore kaha = new KahaDBStore();
1:36bd069:             kaha.setDirectory(new File(KAHADB_DIRECTORY + getTestName()));
1:36bd069:             brokerService.setPersistenceAdapter(kaha);
1:36bd069:         }
1:480b3e7:         brokerService.setSchedulerSupport(isSchedulerEnabled());
1:cdd5150:         brokerService.setAdvisorySupport(false);
1:3e599a5:         brokerService.setUseJmx(isUseJmx());
1:4c272e3:         brokerService.getManagementContext().setCreateConnector(false);
1:2360fb8: 
1:25c99a6:         performAdditionalConfiguration(brokerService);
1:25c99a6: 
1:0f9a347:         SSLContext ctx = SSLContext.getInstance("TLS");
1:0f9a347:         ctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());
1:0f9a347:         SSLContext.setDefault(ctx);
1:0f9a347: 
1:2db73e2:         // Setup SSL context...
1:3306467:         final File classesDir = new File(AmqpConnection.class.getProtectionDomain().getCodeSource().getLocation().getFile());
1:2db73e2:         File keystore = new File(classesDir, "../../src/test/resources/keystore");
1:2db73e2:         final SpringSslContext sslContext = new SpringSslContext();
1:2db73e2:         sslContext.setKeyStore(keystore.getCanonicalPath());
1:2db73e2:         sslContext.setKeyStorePassword("password");
1:2db73e2:         sslContext.setTrustStore(keystore.getCanonicalPath());
1:2db73e2:         sslContext.setTrustStorePassword("password");
1:2db73e2:         sslContext.afterPropertiesSet();
1:2db73e2:         brokerService.setSslContext(sslContext);
1:2360fb8: 
1:36bd069:         System.setProperty("javax.net.ssl.trustStore", keystore.getCanonicalPath());
1:36bd069:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:36bd069:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:36bd069:         System.setProperty("javax.net.ssl.keyStore", keystore.getCanonicalPath());
1:36bd069:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:36bd069:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:98c5866: 
1:0752d84:         ArrayList<BrokerPlugin> plugins = new ArrayList<>();
1:36bd069: 
1:98c5866:         addAdditionalPlugins(plugins);
1:98c5866: 
1:98c5866:         if (!plugins.isEmpty()) {
1:98c5866:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:98c5866:             brokerService.setPlugins(plugins.toArray(array));
1:98c5866:         }
1:98c5866: 
1:36bd069:         addTranportConnectors();
1:b83a3d4:     }
1:2360fb8: 
1:25c99a6:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1:25c99a6: 
1:25c99a6:     }
1:25c99a6: 
1:98c5866:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1:98c5866: 
1:98c5866:     }
1:98c5866: 
1:36bd069:     protected void addTranportConnectors() throws Exception {
1:6d8449f:         TransportConnector connector = null;
1:6d8449f: 
1:b83a3d4:         if (isUseOpenWireConnector()) {
1:b83a3d4:             connector = brokerService.addConnector(
1:b83a3d4:                 "tcp://0.0.0.0:" + openwirePort);
1:b83a3d4:             openwirePort = connector.getConnectUri().getPort();
1:36bd069:             openwireURI = connector.getPublishableConnectURI();
1:b83a3d4:             LOG.debug("Using openwire port " + openwirePort);
1:b83a3d4:         }
1:6d8449f:         if (isUseTcpConnector()) {
1:8f3e08c:             connector = brokerService.addConnector(
1:0752d84:                 "amqp://0.0.0.0:" + amqpPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:36bd069:             amqpPort = connector.getConnectUri().getPort();
1:36bd069:             amqpURI = connector.getPublishableConnectURI();
1:36bd069:             LOG.debug("Using amqp port " + amqpPort);
1:6d8449f:         }
1:6d8449f:         if (isUseSslConnector()) {
1:8f3e08c:             connector = brokerService.addConnector(
1:1e31df9:                 "amqp+ssl://0.0.0.0:" + amqpSslPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:36bd069:             amqpSslPort = connector.getConnectUri().getPort();
1:36bd069:             amqpSslURI = connector.getPublishableConnectURI();
1:36bd069:             LOG.debug("Using amqp+ssl port " + amqpSslPort);
1:6d8449f:         }
1:6d8449f:         if (isUseNioConnector()) {
1:8f3e08c:             connector = brokerService.addConnector(
1:0752d84:                 "amqp+nio://0.0.0.0:" + amqpNioPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:36bd069:             amqpNioPort = connector.getConnectUri().getPort();
1:36bd069:             amqpNioURI = connector.getPublishableConnectURI();
1:36bd069:             LOG.debug("Using amqp+nio port " + amqpNioPort);
1:6d8449f:         }
1:6d8449f:         if (isUseNioPlusSslConnector()) {
1:8f3e08c:             connector = brokerService.addConnector(
1:1e31df9:                 "amqp+nio+ssl://0.0.0.0:" + amqpNioPlusSslPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:36bd069:             amqpNioPlusSslPort = connector.getConnectUri().getPort();
1:36bd069:             amqpNioPlusSslURI = connector.getPublishableConnectURI();
1:36bd069:             LOG.debug("Using amqp+nio+ssl port " + amqpNioPlusSslPort);
1:6d8449f:         }
1:04ee70a:         if (isUseAutoConnector()) {
1:04ee70a:             connector = brokerService.addConnector(
1:04ee70a:                 "auto://0.0.0.0:" + autoPort + getAdditionalConfig());
1:04ee70a:             autoPort = connector.getConnectUri().getPort();
1:04ee70a:             autoURI = connector.getPublishableConnectURI();
1:04ee70a:             LOG.debug("Using auto port " + autoPort);
1:04ee70a:         }
1:04ee70a:         if (isUseAutoSslConnector()) {
1:04ee70a:             connector = brokerService.addConnector(
1:04ee70a:                 "auto+ssl://0.0.0.0:" + autoSslPort + getAdditionalConfig());
1:04ee70a:             autoSslPort = connector.getConnectUri().getPort();
1:04ee70a:             autoSslURI = connector.getPublishableConnectURI();
1:04ee70a:             LOG.debug("Using auto+ssl port " + autoSslPort);
1:04ee70a:         }
1:04ee70a:         if (isUseAutoNioConnector()) {
1:04ee70a:             connector = brokerService.addConnector(
1:04ee70a:                 "auto+nio://0.0.0.0:" + autoNioPort + getAdditionalConfig());
1:04ee70a:             autoNioPort = connector.getConnectUri().getPort();
1:04ee70a:             autoNioURI = connector.getPublishableConnectURI();
1:04ee70a:             LOG.debug("Using auto+nio port " + autoNioPort);
1:04ee70a:         }
1:04ee70a:         if (isUseAutoNioPlusSslConnector()) {
1:04ee70a:             connector = brokerService.addConnector(
1:04ee70a:                 "auto+nio+ssl://0.0.0.0:" + autoNioPlusSslPort + getAdditionalConfig());
1:04ee70a:             autoNioPlusSslPort = connector.getConnectUri().getPort();
1:04ee70a:             autoNioPlusSslURI = connector.getPublishableConnectURI();
1:04ee70a:             LOG.debug("Using auto+nio+ssl port " + autoNioPlusSslPort);
1:04ee70a:         }
1:31c55f7:         if (isUseWsConnector()) {
1:31c55f7:             connector = brokerService.addConnector(
1:0752d84:                 "ws://0.0.0.0:" + getProxyPort(amqpWsPort) + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:31c55f7:             amqpWsPort = connector.getConnectUri().getPort();
1:31c55f7:             amqpWsURI = connector.getPublishableConnectURI();
1:31c55f7:             LOG.debug("Using amqp+ws port " + amqpWsPort);
1:31c55f7:         }
1:31c55f7:         if (isUseWssConnector()) {
1:31c55f7:             connector = brokerService.addConnector(
1:0752d84:                 "wss://0.0.0.0:" + getProxyPort(amqpWssPort) + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:31c55f7:             amqpWssPort = connector.getConnectUri().getPort();
1:31c55f7:             amqpWssURI = connector.getPublishableConnectURI();
1:31c55f7:             LOG.debug("Using amqp+wss port " + amqpWssPort);
1:31c55f7:         }
1:6d8449f:     }
1:6d8449f: 
1:36bd069:     protected boolean isPersistent() {
1:36bd069:         return false;
1:36bd069:     }
1:36bd069: 
1:3e599a5:     protected boolean isUseJmx() {
1:3e599a5:         return true;
1:3e599a5:     }
1:3e599a5: 
1:480b3e7:     protected boolean isSchedulerEnabled() {
1:480b3e7:         return false;
1:480b3e7:     }
1:480b3e7: 
1:b83a3d4:     protected boolean isUseOpenWireConnector() {
1:b83a3d4:         return false;
1:36bd069:     }
1:36bd069: 
1:6d8449f:     protected boolean isUseTcpConnector() {
1:6d8449f:         return true;
1:6d8449f:     }
1:6d8449f: 
1:6d8449f:     protected boolean isUseSslConnector() {
1:6d8449f:         return false;
1:6d8449f:     }
1:6d8449f: 
1:6d8449f:     protected boolean isUseNioConnector() {
1:6d8449f:         return false;
1:6d8449f:     }
1:6d8449f: 
1:6d8449f:     protected boolean isUseNioPlusSslConnector() {
1:6d8449f:         return false;
4:2360fb8:     }
1:2360fb8: 
1:04ee70a:     protected boolean isUseAutoConnector() {
1:04ee70a:         return false;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     protected boolean isUseAutoSslConnector() {
1:04ee70a:         return false;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     protected boolean isUseAutoNioConnector() {
1:04ee70a:         return false;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     protected boolean isUseAutoNioPlusSslConnector() {
1:04ee70a:         return false;
1:04ee70a:     }
1:04ee70a: 
1:31c55f7:     protected boolean isUseWsConnector() {
1:31c55f7:         return false;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     protected boolean isUseWssConnector() {
1:31c55f7:         return false;
1:31c55f7:     }
1:31c55f7: 
1:8f3e08c:     protected String getAmqpTransformer() {
1:8f3e08c:         return "jms";
1:8f3e08c:     }
1:8f3e08c: 
1:8b36701:     protected String getAdditionalConfig() {
1:8b36701:         return "";
1:8b36701:     }
1:8b36701: 
1:e3fed4b:     public void startBroker() throws Exception {
1:e3fed4b:         if (brokerService != null) {
1:e3fed4b:             throw new IllegalStateException("Broker is already created.");
1:e3fed4b:         }
1:e3fed4b: 
1:e3fed4b:         createBroker(true);
1:e3fed4b:         brokerService.start();
1:e3fed4b:         brokerService.waitUntilStarted();
1:e3fed4b:     }
1:e3fed4b: 
1:e3fed4b:     public void restartBroker() throws Exception {
1:36bd069:         restartBroker(false);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public void restartBroker(boolean deleteAllOnStartup) throws Exception {
2:e3fed4b:         stopBroker();
1:36bd069:         createBroker(deleteAllOnStartup);
1:e3fed4b:         brokerService.start();
1:e3fed4b:         brokerService.waitUntilStarted();
1:e3fed4b:     }
1:e3fed4b: 
1:cdd5150:     public void stopBroker() throws Exception {
1:2360fb8:         LOG.debug("entering AmqpTestSupport.stopBroker");
1:cdd5150:         if (brokerService != null) {
1:cdd5150:             brokerService.stop();
1:e3fed4b:             brokerService.waitUntilStopped();
1:cdd5150:             brokerService = null;
1:e3fed4b:         }
1:2360fb8:         LOG.debug("exiting AmqpTestSupport.stopBroker");
1:2360fb8:     }
1:e3fed4b: 
1:e3fed4b:     @After
1:e3fed4b:     public void tearDown() throws Exception {
1:a2b78fd:         stopBroker();
1:94937e8:         LOG.info("========== tearDown " + getTestName() + " ==========");
1:2360fb8:     }
1:2360fb8: 
1:72839b7:     public Connection createJMSConnection() throws JMSException {
1:72839b7:         if (!isUseOpenWireConnector()) {
1:72839b7:             throw new javax.jms.IllegalStateException("OpenWire TransportConnector was not configured.");
1:2360fb8:         }
1:2360fb8: 
1:72839b7:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(openwireURI);
1:72839b7: 
1:72839b7:         return factory.createConnection();
1:72839b7:     }
1:72839b7: 
1:72839b7:     public void sendMessages(String destinationName, int count, boolean topic) throws Exception {
1:72839b7:         Connection connection = createJMSConnection();
1:72839b7:         try {
1:72839b7:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:72839b7:             Destination destination = null;
1:72839b7:             if (topic) {
1:72839b7:                 destination = session.createTopic(destinationName);
1:72839b7:             } else {
1:72839b7:                 destination = session.createQueue(destinationName);
1:72839b7:             }
1:72839b7: 
1:72839b7:             sendMessages(connection, destination, count);
1:72839b7:         } finally {
1:72839b7:             connection.close();
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     public void sendMessages(Connection connection, Destination destination, int count) throws Exception {
1:72839b7:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:72839b7:         try {
1:72839b7:             MessageProducer p = session.createProducer(destination);
1:72839b7: 
1:72839b7:             for (int i = 1; i <= count; i++) {
1:72839b7:                 TextMessage message = session.createTextMessage();
1:72839b7:                 message.setText("TextMessage: " + i);
1:72839b7:                 message.setIntProperty(MESSAGE_NUMBER, i);
1:72839b7:                 p.send(message);
1:72839b7:             }
1:72839b7:         } finally {
1:72839b7:             session.close();
1:72839b7:         }
1:db65c2e:     }
1:2360fb8: 
1:94937e8:     public String getTestName() {
1:94937e8:         return name.getMethodName();
1:94937e8:     }
1:94937e8: 
1:31c55f7:     protected int getProxyPort(int proxyPort) {
1:31c55f7:         if (proxyPort == 0) {
1:31c55f7:             ServerSocket ss = null;
1:31c55f7:             try {
1:31c55f7:                 ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:31c55f7:                 proxyPort = ss.getLocalPort();
1:31c55f7:             } catch (IOException e) { // ignore
1:31c55f7:             } finally {
1:31c55f7:                 try {
1:31c55f7:                     if (ss != null ) {
1:31c55f7:                         ss.close();
1:31c55f7:                     }
1:31c55f7:                 } catch (IOException e) { // ignore
1:31c55f7:                 }
1:31c55f7:             }
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         return proxyPort;
1:31c55f7:     }
1:31c55f7: 
1:c5c4caa:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:c5c4caa:         ObjectName brokerViewMBean = new ObjectName(
1:c5c4caa:             "org.apache.activemq:type=Broker,brokerName=localhost");
1:c5c4caa:         BrokerViewMBean proxy = (BrokerViewMBean) brokerService.getManagementContext()
1:c5c4caa:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:c5c4caa:         return proxy;
1:2360fb8:     }
1:2360fb8: 
1:cf2083f:     protected ConnectorViewMBean getProxyToConnectionView(String connectionType) throws Exception {
1:cf2083f:         ObjectName connectorQuery = new ObjectName(
1:cf2083f:             "org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName="+connectionType+"_//*");
1:cf2083f: 
1:cf2083f:         Set<ObjectName> results = brokerService.getManagementContext().queryNames(connectorQuery, null);
1:cf2083f: 
1:cf2083f:         if (results == null || results.isEmpty() || results.size() > 1) {
1:cf2083f:             throw new Exception("Unable to find the exact Connector instance.");
1:cf2083f:         }
1:cf2083f: 
1:cf2083f:         ConnectorViewMBean proxy = (ConnectorViewMBean) brokerService.getManagementContext()
1:cf2083f:                 .newProxyInstance(results.iterator().next(), ConnectorViewMBean.class, true);
1:cf2083f:         return proxy;
1:cf2083f:     }
1:cf2083f: 
1:c5c4caa:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:c5c4caa:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
2:c5c4caa:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
2:c5c4caa:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:c5c4caa:         return proxy;
1:2360fb8:     }
1:2360fb8: 
1:5e7b70f:     protected SubscriptionViewMBean getProxyToQueueSubscriber(String name) throws MalformedObjectNameException, JMSException, IOException {
1:5e7b70f:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:5e7b70f:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:5e7b70f:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:5e7b70f:         SubscriptionViewMBean subscription = null;
1:5e7b70f:         for (ObjectName subscriber : proxy.getSubscriptions()) {
1:5e7b70f:             subscription = (SubscriptionViewMBean) brokerService.getManagementContext()
1:5e7b70f:                 .newProxyInstance(subscriber, SubscriptionViewMBean.class, true);
1:5e7b70f:         }
1:5e7b70f: 
1:5e7b70f:         return subscription;
1:5e7b70f:     }
1:5e7b70f: 
1:934ad44:     protected TopicViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:c5c4caa:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="+name);
1:934ad44:         TopicViewMBean proxy = (TopicViewMBean) brokerService.getManagementContext()
1:934ad44:                 .newProxyInstance(queueViewMBeanName, TopicViewMBean.class, true);
1:c5c4caa:         return proxy;
1:2360fb8:     }
1:2360fb8: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
1:                 "amqp+ssl://0.0.0.0:" + amqpSslPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
/////////////////////////////////////////////////////////////////////////
1:                 "amqp+nio+ssl://0.0.0.0:" + amqpNioPlusSslPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
0:                 "amqp+ssl://0.0.0.0:" + amqpSslPort + "?transport.verifyHostName=false&transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
/////////////////////////////////////////////////////////////////////////
0:                 "amqp+nio+ssl://0.0.0.0:" + amqpNioPlusSslPort + "?transport.verifyHostName=false&transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
commit:98c5866
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerPlugin;
/////////////////////////////////////////////////////////////////////////
0:         ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();
1: 
1:         addAdditionalPlugins(plugins);
1: 
1:         if (!plugins.isEmpty()) {
1:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:             brokerService.setPlugins(plugins.toArray(array));
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1: 
1:     }
1: 
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1:     protected URI autoURI;
1:     protected int autoPort;
1:     protected URI autoSslURI;
1:     protected int autoSslPort;
1:     protected URI autoNioURI;
1:     protected int autoNioPort;
1:     protected URI autoNioPlusSslURI;
1:     protected int autoNioPlusSslPort;
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (isUseAutoConnector()) {
1:             connector = brokerService.addConnector(
1:                 "auto://0.0.0.0:" + autoPort + getAdditionalConfig());
1:             autoPort = connector.getConnectUri().getPort();
1:             autoURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using auto port " + autoPort);
1:         }
1:         if (isUseAutoSslConnector()) {
1:             connector = brokerService.addConnector(
1:                 "auto+ssl://0.0.0.0:" + autoSslPort + getAdditionalConfig());
1:             autoSslPort = connector.getConnectUri().getPort();
1:             autoSslURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using auto+ssl port " + autoSslPort);
1:         }
1:         if (isUseAutoNioConnector()) {
1:             connector = brokerService.addConnector(
1:                 "auto+nio://0.0.0.0:" + autoNioPort + getAdditionalConfig());
1:             autoNioPort = connector.getConnectUri().getPort();
1:             autoNioURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using auto+nio port " + autoNioPort);
1:         }
1:         if (isUseAutoNioPlusSslConnector()) {
1:             connector = brokerService.addConnector(
1:                 "auto+nio+ssl://0.0.0.0:" + autoNioPlusSslPort + getAdditionalConfig());
1:             autoNioPlusSslPort = connector.getConnectUri().getPort();
1:             autoNioPlusSslURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using auto+nio+ssl port " + autoNioPlusSslPort);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isUseAutoConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseAutoSslConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseAutoNioConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseAutoNioPlusSslConnector() {
1:         return false;
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ce551cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0752d84
/////////////////////////////////////////////////////////////////////////
1:     protected Vector<Throwable> exceptions = new Vector<>();
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<BrokerPlugin> plugins = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:                 "amqp://0.0.0.0:" + amqpPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
0:                 "amqp+ssl://0.0.0.0:" + amqpSslPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:                 "amqp+nio://0.0.0.0:" + amqpNioPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
0:                 "amqp+nio+ssl://0.0.0.0:" + amqpNioPlusSslPort + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
/////////////////////////////////////////////////////////////////////////
1:                 "ws://0.0.0.0:" + getProxyPort(amqpWsPort) + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:                 "wss://0.0.0.0:" + getProxyPort(amqpWssPort) + "?transport.tcpNoDelay=true&transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: import java.net.ServerSocket;
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ServerSocketFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected URI amqpWsURI;
1:     protected int amqpWsPort;
1:     protected URI amqpWssURI;
1:     protected int amqpWssPort;
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (isUseWsConnector()) {
1:             connector = brokerService.addConnector(
0:                 "ws://0.0.0.0:" + getProxyPort(amqpWsPort) + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:             amqpWsPort = connector.getConnectUri().getPort();
1:             amqpWsURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using amqp+ws port " + amqpWsPort);
1:         }
1:         if (isUseWssConnector()) {
1:             connector = brokerService.addConnector(
0:                 "wss://0.0.0.0:" + getProxyPort(amqpWssPort) + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:             amqpWssPort = connector.getConnectUri().getPort();
1:             amqpWssURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using amqp+wss port " + amqpWssPort);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isUseWsConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseWssConnector() {
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected int getProxyPort(int proxyPort) {
1:         if (proxyPort == 0) {
1:             ServerSocket ss = null;
1:             try {
1:                 ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:                 proxyPort = ss.getLocalPort();
1:             } catch (IOException e) { // ignore
1:             } finally {
1:                 try {
1:                     if (ss != null ) {
1:                         ss.close();
1:                     }
1:                 } catch (IOException e) { // ignore
1:                 }
1:             }
1:         }
1: 
1:         return proxyPort;
1:     }
1: 
commit:480b3e7
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setSchedulerSupport(isSchedulerEnabled());
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isSchedulerEnabled() {
1:         return false;
1:     }
1: 
commit:13044de
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:833d308
/////////////////////////////////////////////////////////////////////////
0:             brokerService.setStoreOpenWireVersion(getStoreOpenWireVersion());
/////////////////////////////////////////////////////////////////////////
0:     protected int getStoreOpenWireVersion() {
0:         return OpenWireFormat.DEFAULT_WIRE_VERSION;
commit:5e7b70f
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     protected SubscriptionViewMBean getProxyToQueueSubscriber(String name) throws MalformedObjectNameException, JMSException, IOException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         SubscriptionViewMBean subscription = null;
1:         for (ObjectName subscriber : proxy.getSubscriptions()) {
1:             subscription = (SubscriptionViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(subscriber, SubscriptionViewMBean.class, true);
1:         }
1: 
1:         return subscription;
1:     }
1: 
commit:3e599a5
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(isUseJmx());
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isUseJmx() {
1:         return true;
1:     }
1: 
commit:25c99a6
/////////////////////////////////////////////////////////////////////////
1:         performAdditionalConfiguration(brokerService);
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1: 
1:     }
1: 
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.protocol.AmqpConnection;
/////////////////////////////////////////////////////////////////////////
1:         final File classesDir = new File(AmqpConnection.class.getProtectionDomain().getCodeSource().getLocation().getFile());
commit:934ad44
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     protected TopicViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:         TopicViewMBean proxy = (TopicViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, TopicViewMBean.class, true);
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     public Connection createJMSConnection() throws JMSException {
1:         if (!isUseOpenWireConnector()) {
1:             throw new javax.jms.IllegalStateException("OpenWire TransportConnector was not configured.");
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(openwireURI);
1: 
1:         return factory.createConnection();
1:     }
1: 
1:     public void sendMessages(String destinationName, int count, boolean topic) throws Exception {
1:         Connection connection = createJMSConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = null;
1:             if (topic) {
1:                 destination = session.createTopic(destinationName);
1:             } else {
1:                 destination = session.createQueue(destinationName);
1:             }
1: 
1:             sendMessages(connection, destination, count);
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     public void sendMessages(Connection connection, Destination destination, int count) throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         try {
1:             MessageProducer p = session.createProducer(destination);
1: 
1:             for (int i = 1; i <= count; i++) {
1:                 TextMessage message = session.createTextMessage();
1:                 message.setText("TextMessage: " + i);
1:                 message.setIntProperty(MESSAGE_NUMBER, i);
1:                 p.send(message);
1:             }
1:         } finally {
1:             session.close();
1:         }
commit:36bd069
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
/////////////////////////////////////////////////////////////////////////
1:     public static final String KAHADB_DIRECTORY = "target/activemq-data/";
/////////////////////////////////////////////////////////////////////////
1:     protected URI amqpURI;
1:     protected int amqpPort;
1:     protected URI amqpSslURI;
1:     protected int amqpSslPort;
1:     protected URI amqpNioURI;
1:     protected int amqpNioPort;
1:     protected URI amqpNioPlusSslURI;
1:     protected int amqpNioPlusSslPort;
1: 
1:     protected URI openwireURI;
1:     protected int openwirePort;
/////////////////////////////////////////////////////////////////////////
1: 
1:         brokerService.setPersistent(isPersistent());
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         if (isPersistent()) {
1:             KahaDBStore kaha = new KahaDBStore();
1:             kaha.setDirectory(new File(KAHADB_DIRECTORY + getTestName()));
1:             brokerService.setPersistenceAdapter(kaha);
0:             brokerService.setStoreOpenWireVersion(getstoreOpenWireVersion());
1:         }
/////////////////////////////////////////////////////////////////////////
1:         System.setProperty("javax.net.ssl.trustStore", keystore.getCanonicalPath());
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:         System.setProperty("javax.net.ssl.keyStore", keystore.getCanonicalPath());
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1: 
1:         addTranportConnectors();
1:     protected void addTranportConnectors() throws Exception {
1:             openwireURI = connector.getPublishableConnectURI();
0:                 "amqp://0.0.0.0:" + amqpPort + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:             amqpPort = connector.getConnectUri().getPort();
1:             amqpURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using amqp port " + amqpPort);
0:                 "amqp+ssl://0.0.0.0:" + amqpSslPort + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:             amqpSslPort = connector.getConnectUri().getPort();
1:             amqpSslURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using amqp+ssl port " + amqpSslPort);
0:                 "amqp+nio://0.0.0.0:" + amqpNioPort + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:             amqpNioPort = connector.getConnectUri().getPort();
1:             amqpNioURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using amqp+nio port " + amqpNioPort);
0:                 "amqp+nio+ssl://0.0.0.0:" + amqpNioPlusSslPort + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
1:             amqpNioPlusSslPort = connector.getConnectUri().getPort();
1:             amqpNioPlusSslURI = connector.getPublishableConnectURI();
1:             LOG.debug("Using amqp+nio+ssl port " + amqpNioPlusSslPort);
1:     protected boolean isPersistent() {
1:         return false;
1:     }
1: 
0:     protected int getstoreOpenWireVersion() {
0:         return OpenWireFormat.DEFAULT_VERSION;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         restartBroker(false);
1:     }
1: 
1:     public void restartBroker(boolean deleteAllOnStartup) throws Exception {
1:         createBroker(deleteAllOnStartup);
commit:a2b78fd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected ExecutorService testService = Executors.newSingleThreadExecutor();
1: 
/////////////////////////////////////////////////////////////////////////
1:         startBroker();
/////////////////////////////////////////////////////////////////////////
1:         stopBroker();
/////////////////////////////////////////////////////////////////////////
commit:4c272e3
/////////////////////////////////////////////////////////////////////////
1:         brokerService.getManagementContext().setCreateConnector(false);
commit:94937e8
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("========== start " + getTestName() + " ==========");
/////////////////////////////////////////////////////////////////////////
0:         brokerService.setSchedulerSupport(false);
0:         brokerService.getManagementContext().setCreateMBeanServer(false);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("========== tearDown " + getTestName() + " ==========");
/////////////////////////////////////////////////////////////////////////
1:     public String getTestName() {
1:         return name.getMethodName();
1:     }
1: 
commit:8b36701
/////////////////////////////////////////////////////////////////////////
0:                 "amqp://0.0.0.0:" + port + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
0:                 "amqp+ssl://0.0.0.0:" + sslPort + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
0:                 "amqp+nio://0.0.0.0:" + nioPort + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
0:                 "amqp+nio+ssl://0.0.0.0:" + nioPlusSslPort + "?transport.transformer=" + getAmqpTransformer() + getAdditionalConfig());
/////////////////////////////////////////////////////////////////////////
1:     protected String getAdditionalConfig() {
1:         return "";
1:     }
1: 
commit:9edf907
/////////////////////////////////////////////////////////////////////////
1:     public static final String MESSAGE_NUMBER = "MessageNumber";
1: 
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 1; i <= count; i++) {
0:             message.setIntProperty(MESSAGE_NUMBER, i);
commit:b83a3d4
/////////////////////////////////////////////////////////////////////////
0:     protected int openwirePort;
/////////////////////////////////////////////////////////////////////////
1:         if (isUseOpenWireConnector()) {
1:             connector = brokerService.addConnector(
1:                 "tcp://0.0.0.0:" + openwirePort);
1:             openwirePort = connector.getConnectUri().getPort();
1:             LOG.debug("Using openwire port " + openwirePort);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isUseOpenWireConnector() {
1:         return false;
1:     }
1: 
commit:8f3e08c
/////////////////////////////////////////////////////////////////////////
1:             connector = brokerService.addConnector(
0:                 "amqp://0.0.0.0:" + port + "?transport.transformer=" + getAmqpTransformer());
1:             connector = brokerService.addConnector(
0:                 "amqp+ssl://0.0.0.0:" + sslPort + "?transport.transformer=" + getAmqpTransformer());
1:             connector = brokerService.addConnector(
0:                 "amqp+nio://0.0.0.0:" + nioPort + "?transport.transformer=" + getAmqpTransformer());
1:             connector = brokerService.addConnector(
0:                 "amqp+nio+ssl://0.0.0.0:" + nioPlusSslPort + "?transport.transformer=" + getAmqpTransformer());
/////////////////////////////////////////////////////////////////////////
1:     protected String getAmqpTransformer() {
1:         return "jms";
1:     }
1: 
commit:1dd34a1
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
1:     @Rule public TestName name = new TestName();
1: 
commit:6d8449f
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector connector = null;
1: 
1:         if (isUseTcpConnector()) {
0:             connector = brokerService.addConnector("amqp://0.0.0.0:" + port);
0:             port = connector.getConnectUri().getPort();
0:             LOG.debug("Using amqp port " + port);
1:         }
1:         if (isUseSslConnector()) {
0:             connector = brokerService.addConnector("amqp+ssl://0.0.0.0:" + sslPort);
0:             sslPort = connector.getConnectUri().getPort();
0:             LOG.debug("Using amqp+ssl port " + sslPort);
1:         }
1:         if (isUseNioConnector()) {
0:             connector = brokerService.addConnector("amqp+nio://0.0.0.0:" + nioPort);
0:             nioPort = connector.getConnectUri().getPort();
0:             LOG.debug("Using amqp+nio port " + nioPort);
1:         }
1:         if (isUseNioPlusSslConnector()) {
0:             connector = brokerService.addConnector("amqp+nio+ssl://0.0.0.0:" + nioPlusSslPort);
0:             nioPlusSslPort = connector.getConnectUri().getPort();
0:             LOG.debug("Using amqp+nio+ssl port " + nioPlusSslPort);
1:         }
1:     }
1: 
1:     protected boolean isUseTcpConnector() {
1:         return true;
1:     }
1: 
1:     protected boolean isUseSslConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseNioConnector() {
1:         return false;
1:     }
1: 
1:     protected boolean isUseNioPlusSslConnector() {
1:         return false;
commit:da5d0d8
/////////////////////////////////////////////////////////////////////////
0:             future.get(60, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
0:             future.get(60, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
0:         @SuppressWarnings("unused")
/////////////////////////////////////////////////////////////////////////
0:         @SuppressWarnings("unused")
/////////////////////////////////////////////////////////////////////////
commit:cf2083f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.ConnectorViewMBean;
/////////////////////////////////////////////////////////////////////////
0:         brokerService.setUseJmx(true);
/////////////////////////////////////////////////////////////////////////
1:     protected ConnectorViewMBean getProxyToConnectionView(String connectionType) throws Exception {
1:         ObjectName connectorQuery = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName="+connectionType+"_//*");
1: 
1:         Set<ObjectName> results = brokerService.getManagementContext().queryNames(connectorQuery, null);
1: 
1:         if (results == null || results.isEmpty() || results.size() > 1) {
1:             throw new Exception("Unable to find the exact Connector instance.");
1:         }
1: 
1:         ConnectorViewMBean proxy = (ConnectorViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(results.iterator().next(), ConnectorViewMBean.class, true);
1:         return proxy;
1:     }
1: 
commit:78c4e43
/////////////////////////////////////////////////////////////////////////
1:     protected void createBroker(boolean deleteAllMessages) throws Exception {
commit:e3fed4b
/////////////////////////////////////////////////////////////////////////
1:         this.numberOfMessages = 2000;
0:     private void createBroker(boolean deleteAllMessages) throws Exception {
0:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void startBroker() throws Exception {
1:         if (brokerService != null) {
1:             throw new IllegalStateException("Broker is already created.");
1:         }
1: 
1:         createBroker(true);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     public void restartBroker() throws Exception {
1:         stopBroker();
0:         createBroker(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:             brokerService.waitUntilStopped();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         stopBroker();
commit:0f9a347
/////////////////////////////////////////////////////////////////////////
1: import java.security.SecureRandom;
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.KeyManager;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.TrustManager;
/////////////////////////////////////////////////////////////////////////
0:     AutoFailTestSupport autoFailTestSupport = new AutoFailTestSupport() {};
0:     protected int nioPort;
0:     protected int nioPlusSslPort;
/////////////////////////////////////////////////////////////////////////
1:         SSLContext ctx = SSLContext.getInstance("TLS");
1:         ctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());
1:         SSLContext.setDefault(ctx);
1: 
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug("Using amqp+ssl port " + sslPort);
0:         LOG.debug("Using amqp port " + port);
0:         connector = brokerService.addConnector("amqp+nio://0.0.0.0:" + nioPort);
0:         nioPort = connector.getConnectUri().getPort();
0:         LOG.debug("Using amqp+nio port " + nioPort);
0:         connector = brokerService.addConnector("amqp+nio+ssl://0.0.0.0:" + nioPlusSslPort);
0:         nioPlusSslPort = connector.getConnectUri().getPort();
0:         LOG.debug("Using amqp+nio+ssl port " + nioPlusSslPort);
author:gtully
-------------------------------------------------------------------------------
commit:db65c2e
/////////////////////////////////////////////////////////////////////////
0:             throw new Exception("stopBroker timed out");
0:         } finally {
0:             executor.shutdownNow();
0:             if (killHungThreads("tearDown")) {
0:                 LOG.warn("HUNG THREADS in tearDown");
1:             }
author:Kevin Earls
-------------------------------------------------------------------------------
commit:2360fb8
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.Future;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.TimeoutException;
/////////////////////////////////////////////////////////////////////////
0:         if (killHungThreads("setUp")) {
0:             LOG.warn("HUNG THREADS in setUp");
1:         }
1: 
0:         ExecutorService executor = Executors.newSingleThreadExecutor();
0:         Future<Boolean> future = executor.submit(new SetUpTask());
0:         try {
0:             LOG.debug("SetUpTask started.");
0:             Boolean result =  future.get(60, TimeUnit.SECONDS);
0:         } catch (TimeoutException e) {
0:             throw new Exception("startBroker timed out");
1:         }
0:         executor.shutdownNow();
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("entering AmqpTestSupport.stopBroker");
1:         LOG.debug("exiting AmqpTestSupport.stopBroker");
0:         ExecutorService executor = Executors.newSingleThreadExecutor();
0:         Future<Boolean> future = executor.submit(new TearDownTask());
0:         try {
0:             LOG.debug("tearDown started.");
0:             Boolean result =  future.get(60, TimeUnit.SECONDS);
0:         } catch (TimeoutException e) {
0:             throw new Exception("startBroker timed out");
1:         }
0:         executor.shutdownNow();
1: 
0:         if (killHungThreads("tearDown")) {
0:             LOG.warn("HUNG THREADS in setUp");
1:         }
1:     }
1: 
0:     private boolean killHungThreads(String stage) throws Exception{
0:         Thread.sleep(500);
0:         if (Thread.activeCount() == 1) {
0:             return false;
1:         }
0:         LOG.warn("Hung Thread(s) on {} entry threadCount {} ", stage, Thread.activeCount());
1: 
0:         Thread[] threads = new Thread[Thread.activeCount()];
0:         Thread.enumerate(threads);
0:         for (int i=0; i < threads.length; i++) {
0:             Thread t = threads[i];
0:             if (!t.getName().equals("main")) {
0:                 LOG.warn("KillHungThreads: Interrupting thread {}", t.getName());
0:                 t.interrupt();
1:             }
1:         }
1: 
0:         LOG.warn("Hung Thread on {} exit threadCount {} ", stage, Thread.activeCount());
0:         return true;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public class SetUpTask implements Callable<Boolean> {
0:         private String testName;
1: 
0:         @Override
0:         public Boolean call() throws Exception {
0:             LOG.debug("in SetUpTask.call, calling startBroker");
0:             startBroker();
1: 
0:             return Boolean.TRUE;
1:         }
1:     }
1: 
0:     public class TearDownTask implements Callable<Boolean> {
0:         private String testName;
1: 
0:         @Override
0:         public Boolean call() throws Exception {
0:             LOG.debug("in TearDownTask.call(), calling stopBroker");
0:             stopBroker();
1: 
0:             return Boolean.TRUE;
1:         }
1:     }
1: 
commit:2ba6689
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ed5d841
/////////////////////////////////////////////////////////////////////////
0:         session.close();
commit:c5c4caa
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void sendMessages(Connection connection, Destination destination, int count) throws Exception {
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer p = session.createProducer(destination);
1: 
0:         for (int i = 0; i < count; i++) {
0:             TextMessage message = session.createTextMessage();
0:             message.setText("TextMessage: " + i);
0:             p.send(message);
0:         }
1: 
0:         p.close();
0:     }
1: 
1:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:         ObjectName brokerViewMBean = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=localhost");
1:         BrokerViewMBean proxy = (BrokerViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:         return proxy;
0:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
0:     }
1: 
0:     protected QueueViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
0:     }
commit:6fa0598
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.Vector;
0: 
/////////////////////////////////////////////////////////////////////////
0:     AutoFailTestSupport autoFailTestSupport = new AutoFailTestSupport() {
0:     };
0:         while (true) {
/////////////////////////////////////////////////////////////////////////
0:         TransportConnector connector = brokerService.addConnector("amqp+ssl://0.0.0.0:" + sslPort);
0:         connector = brokerService.addConnector("amqp://0.0.0.0:" + port);
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:943011e
/////////////////////////////////////////////////////////////////////////
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:2db73e2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.SslContext;
1: import org.apache.activemq.spring.SpringSslContext;
0: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0:     protected int sslPort;
0: 
0: 
0:     public static void main(String[] args) throws Exception {
0:         final AmqpTestSupport s = new AmqpTestSupport();
0:         s.sslPort = 5671;
0:         s.port = 5672;
0:         s.startBroker();
0:         while(true) {
0:             Thread.sleep(100000);
0:         }
0:     }
1:     public void setUp() throws Exception {
0:         startBroker();
0:     }
0: 
0:     public void startBroker() throws Exception {
0: 
1:         // Setup SSL context...
0:         final File classesDir = new File(AmqpProtocolConverter.class.getProtectionDomain().getCodeSource().getLocation().getFile());
1:         File keystore = new File(classesDir, "../../src/test/resources/keystore");
1:         final SpringSslContext sslContext = new SpringSslContext();
1:         sslContext.setKeyStore(keystore.getCanonicalPath());
1:         sslContext.setKeyStorePassword("password");
1:         sslContext.setTrustStore(keystore.getCanonicalPath());
1:         sslContext.setTrustStorePassword("password");
1:         sslContext.afterPropertiesSet();
1:         brokerService.setSslContext(sslContext);
0: 
0:         TransportConnector connector =brokerService.addConnector("amqp+ssl://0.0.0.0:"+sslPort);
0:         sslPort = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("amqp://0.0.0.0:"+port);
commit:7fe30bc
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1: public class AmqpTestSupport {
0: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(AmqpTestSupport.class);
commit:cdd5150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
0: 
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.AutoFailTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.util.ByteSequence;
1: import org.junit.After;
1: import org.junit.Before;
0: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import java.util.Vector;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
0: 
0: import static org.fusesource.hawtbuf.UTF8Buffer.utf8;
0: import static org.junit.Assert.assertArrayEquals;
0: import static org.junit.Assert.assertEquals;
0: 
0: 
0: public class AmqpTest {
0:     protected static final Logger LOG = LoggerFactory.getLogger(AmqpTest.class);
1:     protected BrokerService brokerService;
0:     protected Vector<Throwable> exceptions = new Vector<Throwable>();
1:     protected int numberOfMessages;
0:     AutoFailTestSupport autoFailTestSupport = new AutoFailTestSupport() {};
0:     protected int port;
0: 
1:     @Before
0:     public void startBroker() throws Exception {
0:         autoFailTestSupport.startAutoFailThread();
1:         exceptions.clear();
1:         brokerService = new BrokerService();
0:         brokerService.setPersistent(false);
1:         brokerService.setAdvisorySupport(false);
0:         addAMQPConnector();
0:         brokerService.start();
0:         this.numberOfMessages = 2000;
0:     }
0: 
0:     protected void addAMQPConnector() throws Exception {
0:         final TransportConnector connector = brokerService.addConnector("amqp://localhost:0");
0:         port = connector.getConnectUri().getPort();
0:     }
0: 
0: 
0:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService = null;
0:         }
0:         autoFailTestSupport.stopAutoFailThread();
0:     }
0: 
0: 
0: 
0: //    @Test
0: //    public void testSendAndReceiveAMQP() throws Exception {
0: //        addAMQPConnector(brokerService);
0: //        brokerService.start();
0: //        AMQP amqp = new AMQP();
0: //        final BlockingConnection subscribeConnection = amqp.blockingConnection();
0: //        subscribeConnection.connect();
0: //        Topic topic = new Topic("foo/bah",QoS.AT_MOST_ONCE);
0: //        Topic[] topics = {topic};
0: //        subscribeConnection.subscribe(topics);
0: //        final CountDownLatch latch = new CountDownLatch(numberOfMessages);
0: //
0: //        Thread thread = new Thread(new Runnable() {
0: //            public void run() {
0: //                for (int i = 0; i < numberOfMessages; i++){
0: //                    try {
0: //                        Message message = subscribeConnection.receive();
0: //                        message.ack();
0: //                        latch.countDown();
0: //                    } catch (Exception e) {
0: //                        e.printStackTrace();
0: //                        break;
0: //                    }
0: //
0: //                }
0: //            }
0: //        });
0: //        thread.start();
0: //
0: //        BlockingConnection publisherConnection = amqp.blockingConnection();
0: //        publisherConnection.connect();
0: //        for (int i = 0; i < numberOfMessages; i++){
0: //            String payload = "Message " + i;
0: //            publisherConnection.publish(topic.name().toString(),payload.getBytes(),QoS.AT_LEAST_ONCE,false);
0: //        }
0: //
0: //        latch.await(10, TimeUnit.SECONDS);
0: //        assertEquals(0, latch.getCount());
0: //    }
0: //
0: //    @Test
0: //    public void testSendAndReceiveAtMostOnce() throws Exception {
0: //        addAMQPConnector(brokerService);
0: //        brokerService.start();
0: //        AMQP amqp = createAMQPConnection();
0: //        amqp.setKeepAlive(Short.MAX_VALUE);
0: //        BlockingConnection connection = amqp.blockingConnection();
0: //
0: //        connection.connect();
0: //
0: //
0: //        Topic[] topics = {new Topic(utf8("foo"), QoS.AT_MOST_ONCE)};
0: //        connection.subscribe(topics);
0: //        for (int i = 0; i < numberOfMessages; i++) {
0: //            String payload = "Test Message: " + i;
0: //            connection.publish("foo", payload.getBytes(), QoS.AT_MOST_ONCE, false);
0: //            Message message = connection.receive();
0: //            assertEquals(payload, new String(message.getPayload()));
0: //        }
0: //        connection.disconnect();
0: //    }
0: //
0: //    @Test
0: //    public void testSendAndReceiveAtLeastOnce() throws Exception {
0: //        addAMQPConnector(brokerService);
0: //        brokerService.start();
0: //        AMQP amqp = createAMQPConnection();
0: //        amqp.setKeepAlive(Short.MAX_VALUE);
0: //        BlockingConnection connection = amqp.blockingConnection();
0: //
0: //        connection.connect();
0: //
0: //        Topic[] topics = {new Topic(utf8("foo"), QoS.AT_LEAST_ONCE)};
0: //        connection.subscribe(topics);
0: //        for (int i = 0; i < numberOfMessages; i++) {
0: //            String payload = "Test Message: " + i;
0: //            connection.publish("foo", payload.getBytes(), QoS.AT_LEAST_ONCE, false);
0: //            Message message = connection.receive();
0: //            message.ack();
0: //            assertEquals(payload, new String(message.getPayload()));
0: //        }
0: //        connection.disconnect();
0: //    }
0: //
0: //    @Test
0: //    public void testSendAndReceiveExactlyOnce() throws Exception {
0: //        addAMQPConnector(brokerService);
0: //        brokerService.start();
0: //        AMQP publisher = createAMQPConnection();
0: //        BlockingConnection pubConnection = publisher.blockingConnection();
0: //
0: //        pubConnection.connect();
0: //
0: //        AMQP subscriber = createAMQPConnection();
0: //        BlockingConnection subConnection = subscriber.blockingConnection();
0: //
0: //        subConnection.connect();
0: //
0: //        Topic[] topics = {new Topic(utf8("foo"), QoS.EXACTLY_ONCE)};
0: //        subConnection.subscribe(topics);
0: //        for (int i = 0; i < numberOfMessages; i++) {
0: //            String payload = "Test Message: " + i;
0: //            pubConnection.publish("foo", payload.getBytes(), QoS.EXACTLY_ONCE, false);
0: //            Message message = subConnection.receive();
0: //            message.ack();
0: //            assertEquals(payload, new String(message.getPayload()));
0: //        }
0: //        subConnection.disconnect();
0: //        pubConnection.disconnect();
0: //    }
0: //
0: //    @Test
0: //    public void testSendAndReceiveLargeMessages() throws Exception {
0: //        byte[] payload = new byte[1024 * 32];
0: //        for (int i = 0; i < payload.length; i++){
0: //            payload[i] = '2';
0: //        }
0: //        addAMQPConnector(brokerService);
0: //        brokerService.start();
0: //
0: //        AMQP publisher = createAMQPConnection();
0: //        BlockingConnection pubConnection = publisher.blockingConnection();
0: //
0: //        pubConnection.connect();
0: //
0: //        AMQP subscriber = createAMQPConnection();
0: //        BlockingConnection subConnection = subscriber.blockingConnection();
0: //
0: //        subConnection.connect();
0: //
0: //        Topic[] topics = {new Topic(utf8("foo"), QoS.AT_LEAST_ONCE)};
0: //        subConnection.subscribe(topics);
0: //        for (int i = 0; i < 10; i++) {
0: //            pubConnection.publish("foo", payload, QoS.AT_LEAST_ONCE, false);
0: //            Message message = subConnection.receive();
0: //            message.ack();
0: //            assertArrayEquals(payload, message.getPayload());
0: //        }
0: //        subConnection.disconnect();
0: //        pubConnection.disconnect();
0: //    }
0: //
0: //
0: //    @Test
0: //    public void testSendAMQPReceiveJMS() throws Exception {
0: //        addAMQPConnector(brokerService);
0: //        brokerService.addConnector(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL);
0: //        brokerService.start();
0: //        AMQP amqp = createAMQPConnection();
0: //        BlockingConnection connection = amqp.blockingConnection();
0: //        final String DESTINATION_NAME = "foo.*";
0: //        connection.connect();
0: //
0: //        ActiveMQConnection activeMQConnection = (ActiveMQConnection) new ActiveMQConnectionFactory().createConnection();
0: //        activeMQConnection.start();
0: //        Session s = activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: //        javax.jms.Topic jmsTopic = s.createTopic(DESTINATION_NAME);
0: //        MessageConsumer consumer = s.createConsumer(jmsTopic);
0: //
0: //        for (int i = 0; i < numberOfMessages; i++) {
0: //            String payload = "Test Message: " + i;
0: //            connection.publish("foo/bah", payload.getBytes(), QoS.AT_LEAST_ONCE, false);
0: //            ActiveMQMessage message = (ActiveMQMessage) consumer.receive();
0: //            ByteSequence bs = message.getContent();
0: //            assertEquals(payload, new String(bs.data, bs.offset, bs.length));
0: //        }
0: //
0: //
0: //        activeMQConnection.close();
0: //        connection.disconnect();
0: //    }
0: //
0: //    @Test
0: //    public void testSendJMSReceiveAMQP() throws Exception {
0: //        addAMQPConnector(brokerService);
0: //        brokerService.addConnector(ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL);
0: //        brokerService.start();
0: //        AMQP amqp = createAMQPConnection();
0: //        amqp.setKeepAlive(Short.MAX_VALUE);
0: //        BlockingConnection connection = amqp.blockingConnection();
0: //        connection.connect();
0: //
0: //        ActiveMQConnection activeMQConnection = (ActiveMQConnection) new ActiveMQConnectionFactory().createConnection();
0: //        activeMQConnection.start();
0: //        Session s = activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: //        javax.jms.Topic jmsTopic = s.createTopic("foo.far");
0: //        MessageProducer producer = s.createProducer(jmsTopic);
0: //
0: //        Topic[] topics = {new Topic(utf8("foo/+"), QoS.AT_MOST_ONCE)};
0: //        connection.subscribe(topics);
0: //        for (int i = 0; i < numberOfMessages; i++) {
0: //            String payload = "This is Test Message: " + i;
0: //            TextMessage sendMessage = s.createTextMessage(payload);
0: //            producer.send(sendMessage);
0: //            Message message = connection.receive();
0: //            message.ack();
0: //            assertEquals(payload, new String(message.getPayload()));
0: //        }
0: //        connection.disconnect();
0: //    }
0: //
0: //
0: 
0: 
0: }
============================================================================