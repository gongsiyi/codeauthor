1:8787134: /**
1:ed96e2e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed96e2e:  * contributor license agreements.  See the NOTICE file distributed with
1:ed96e2e:  * this work for additional information regarding copyright ownership.
1:ed96e2e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed96e2e:  * (the "License"); you may not use this file except in compliance with
1:ed96e2e:  * the License.  You may obtain a copy of the License at
1:8787134:  *
1:ed96e2e:  *      http://www.apache.org/licenses/LICENSE-2.0
2:ed96e2e:  *
1:ed96e2e:  * Unless required by applicable law or agreed to in writing, software
1:ed96e2e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed96e2e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed96e2e:  * See the License for the specific language governing permissions and
1:ed96e2e:  * limitations under the License.
1:ed96e2e:  */
1:ed96e2e: package org.apache.activemq.broker.jmx;
5:8787134: 
1:8787134: import java.io.File;
1:8787134: import java.util.ArrayList;
1:8787134: import java.util.List;
1:8787134: import java.util.Map;
1:8787134: 
1:ed96e2e: import javax.management.ObjectName;
1:ed96e2e: import javax.management.openmbean.CompositeDataSupport;
1:ed96e2e: import javax.management.openmbean.CompositeType;
1:ed96e2e: import javax.management.openmbean.TabularData;
1:ed96e2e: import javax.management.openmbean.TabularDataSupport;
1:ed96e2e: import javax.management.openmbean.TabularType;
1:541ed8c: 
1:8787134: import org.apache.activemq.broker.BrokerService;
1:8787134: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1:8787134: import org.apache.activemq.store.PersistenceAdapter;
1:8787134: import org.apache.activemq.usage.SystemUsage;
1:8787134: 
1:973909a: public class HealthView implements HealthViewMBean {
1:8787134: 
1:19fd084:     private ManagedRegionBroker broker;
1:19fd084:     private volatile String currentState = "Good";
1:8787134: 
1:973909a:     public HealthView(ManagedRegionBroker broker) {
1:ed96e2e:         this.broker = broker;
1:3cf129a:     }
1:8787134: 
1:ed96e2e:     @Override
1:1797ce9:     public TabularData health() throws Exception {
1:973909a:         OpenTypeSupport.OpenTypeFactory factory = OpenTypeSupport.getFactory(HealthStatus.class);
1:ed96e2e:         CompositeType ct = factory.getCompositeType();
1:541ed8c:         TabularType tt = new TabularType("HealthStatus", "HealthStatus", ct, new String[] { "healthId", "level", "message", "resource" });
1:ed96e2e:         TabularDataSupport rc = new TabularDataSupport(tt);
1:8787134: 
1:973909a:         List<HealthStatus> list = healthList();
1:973909a:         for (HealthStatus healthStatus : list) {
1:973909a:             rc.put(new CompositeDataSupport(ct, factory.getFields(healthStatus)));
1:c37859a:         }
1:3cf129a:         return rc;
1:c37859a:     }
1:8787134: 
1:3cf129a:     @Override
1:973909a:     public List<HealthStatus> healthList() throws Exception {
1:973909a:         List<HealthStatus> answer = new ArrayList<HealthStatus>();
1:ed96e2e:         Map<ObjectName, DestinationView> queueViews = broker.getQueueViews();
1:ed96e2e:         for (Map.Entry<ObjectName, DestinationView> entry : queueViews.entrySet()) {
1:ed96e2e:             DestinationView queue = entry.getValue();
1:ed96e2e:             if (queue.getConsumerCount() == 0 && queue.getProducerCount() > 0) {
1:973909a:                 ObjectName key = entry.getKey();
1:973909a:                 String message = "Queue " + queue.getName() + " has no consumers";
1:973909a:                 answer.add(new HealthStatus("org.apache.activemq.noConsumer", "WARNING", message, key.toString()));
1:3cf129a:             }
2:ed96e2e:         }
1:8787134: 
1:c37859a:         /**
1:8787134:          * Check persistence store directory limits
1:8787134:          */
1:8787134:         BrokerService brokerService = broker.getBrokerService();
1:8787134:         if (brokerService != null && brokerService.getPersistenceAdapter() != null) {
1:8787134:             PersistenceAdapter adapter = brokerService.getPersistenceAdapter();
1:8787134:             File dir = adapter.getDirectory();
1:8787134:             if (brokerService.isPersistent()) {
1:8787134:                 SystemUsage usage = brokerService.getSystemUsage();
1:8787134:                 if (dir != null && usage != null) {
1:8787134:                     String dirPath = dir.getAbsolutePath();
1:8787134:                     if (!dir.isAbsolute()) {
1:8787134:                         dir = new File(dirPath);
1:8787134:                     }
1:8787134: 
1:8787134:                     while (dir != null && !dir.isDirectory()) {
1:8787134:                         dir = dir.getParentFile();
1:8787134:                     }
1:19fd084: 
1:8787134:                     long storeSize = adapter.size();
1:8787134:                     long storeLimit = usage.getStoreUsage().getLimit();
1:8787134:                     long dirFreeSpace = dir.getUsableSpace();
1:8787134: 
1:541ed8c:                     if (storeSize != 0 && storeLimit != 0) {
2:8787134:                         int val = (int) ((storeSize * 100) / storeLimit);
2:8787134:                         if (val > 90) {
1:541ed8c:                             answer.add(new HealthStatus("org.apache.activemq.StoreLimit", "WARNING", "Message Store size is within " + val + "% of its limit",
1:541ed8c:                                 adapter.toString()));
1:8787134:                         }
1:8787134:                     }
1:8787134: 
1:8787134:                     if ((storeLimit - storeSize) > dirFreeSpace) {
1:541ed8c:                         String message = "Store limit is " + storeLimit / (1024 * 1024) + " mb, whilst the data directory: " + dir.getAbsolutePath()
1:541ed8c:                             + " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space";
1:8787134:                         answer.add(new HealthStatus("org.apache.activemq.FreeDiskSpaceLeft", "WARNING", message, adapter.toString()));
1:8787134:                     }
1:8787134:                 }
1:541ed8c: 
1:8787134:                 File tmpDir = brokerService.getTmpDataDirectory();
1:8787134:                 if (tmpDir != null) {
1:8787134: 
1:8787134:                     String tmpDirPath = tmpDir.getAbsolutePath();
1:8787134:                     if (!tmpDir.isAbsolute()) {
1:8787134:                         tmpDir = new File(tmpDirPath);
1:8787134:                     }
1:8787134: 
1:8787134:                     long storeSize = usage.getTempUsage().getUsage();
1:8787134:                     long storeLimit = usage.getTempUsage().getLimit();
1:8787134:                     while (tmpDir != null && !tmpDir.isDirectory()) {
1:8787134:                         tmpDir = tmpDir.getParentFile();
1:8787134:                     }
1:8787134: 
1:541ed8c:                     if (storeLimit != 0) {
1:541ed8c:                         int val = (int) ((storeSize * 100) / storeLimit);
1:541ed8c:                         if (val > 90) {
1:541ed8c:                             answer.add(new HealthStatus("org.apache.activemq.TempStoreLimit", "WARNING", "TempMessage Store size is within " + val
1:541ed8c:                                 + "% of its limit", adapter.toString()));
1:541ed8c:                         }
1:8787134:                     }
1:8787134:                 }
1:8787134:             }
1:8787134:         }
1:8787134: 
1:8787134:         if (brokerService != null && brokerService.getJobSchedulerStore() != null) {
1:8787134:             JobSchedulerStore scheduler = brokerService.getJobSchedulerStore();
1:8787134:             File dir = scheduler.getDirectory();
1:8787134:             if (brokerService.isPersistent()) {
1:8787134:                 SystemUsage usage = brokerService.getSystemUsage();
1:8787134:                 if (dir != null && usage != null) {
1:8787134:                     String dirPath = dir.getAbsolutePath();
1:8787134:                     if (!dir.isAbsolute()) {
1:8787134:                         dir = new File(dirPath);
1:8787134:                     }
1:8787134: 
1:8787134:                     while (dir != null && !dir.isDirectory()) {
1:8787134:                         dir = dir.getParentFile();
1:8787134:                     }
1:8787134:                     long storeSize = scheduler.size();
1:8787134:                     long storeLimit = usage.getJobSchedulerUsage().getLimit();
1:8787134:                     long dirFreeSpace = dir.getUsableSpace();
1:8787134: 
1:541ed8c:                     if (storeSize != 0 && storeLimit != 0) {
1:8787134:                         int val = (int) ((storeSize * 100) / storeLimit);
1:8787134:                         if (val > 90) {
1:541ed8c:                             answer.add(new HealthStatus("org.apache.activemq.JobSchedulerLimit", "WARNING", "JobSchedulerMessage Store size is within " + val
1:541ed8c:                                 + "% of its limit", scheduler.toString()));
1:8787134:                         }
1:8787134:                     }
1:8787134: 
1:8787134:                     if ((storeLimit - storeSize) > dirFreeSpace) {
1:541ed8c:                         String message = "JobSchedulerStore limit is " + storeLimit / (1024 * 1024) + " mb, whilst the data directory: "
1:541ed8c:                             + dir.getAbsolutePath() + " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space";
1:8787134:                         answer.add(new HealthStatus("org.apache.activemq.FreeDiskSpaceLeft", "WARNING", message, scheduler.toString()));
1:8787134:                     }
1:8787134:                 }
1:8787134:             }
1:8787134:         }
1:8787134: 
1:19fd084:         StringBuilder currentState = new StringBuilder();
1:541ed8c:         if (answer != null && !answer.isEmpty()) {
1:19fd084:             currentState.append("Getting Worried {");
1:541ed8c:             for (HealthStatus hs : answer) {
1:19fd084:                 currentState.append(hs).append(" , ");
1:541ed8c:             }
1:19fd084:             currentState.append(" }");
1:541ed8c:         } else {
1:19fd084:             currentState.append("Good");
1:ed96e2e:         }
1:19fd084: 
1:19fd084:         this.currentState = currentState.toString();
1:19fd084: 
1:3cf129a:         return answer;
1:ed96e2e:     }
1:c37859a: 
1:19fd084:     @Override
1:19fd084:     public String healthStatus() throws Exception {
1:19fd084:         // Must invoke healthList in order to update state.
1:19fd084:         healthList();
1:19fd084: 
1:19fd084:         return getCurrentStatus();
1:19fd084:     }
1:19fd084: 
1:ed96e2e:     /**
1:c37859a:      * @return String representation of the current Broker state
1:c37859a:      */
1:c37859a:     @Override
1:c37859a:     public String getCurrentStatus() {
1:c37859a:         return this.currentState;
1:c37859a:     }
1:ed96e2e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:19fd084
/////////////////////////////////////////////////////////////////////////
1:     private ManagedRegionBroker broker;
1:     private volatile String currentState = "Good";
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         StringBuilder currentState = new StringBuilder();
1:             currentState.append("Getting Worried {");
1:                 currentState.append(hs).append(" , ");
1:             currentState.append(" }");
1:             currentState.append("Good");
1: 
1:         this.currentState = currentState.toString();
1: 
1:     @Override
1:     public String healthStatus() throws Exception {
1:         // Must invoke healthList in order to update state.
1:         healthList();
1: 
1:         return getCurrentStatus();
1:     }
1: 
commit:541ed8c
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         TabularType tt = new TabularType("HealthStatus", "HealthStatus", ct, new String[] { "healthId", "level", "message", "resource" });
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     if (storeSize != 0 && storeLimit != 0) {
1:                             answer.add(new HealthStatus("org.apache.activemq.StoreLimit", "WARNING", "Message Store size is within " + val + "% of its limit",
1:                                 adapter.toString()));
1:                         String message = "Store limit is " + storeLimit / (1024 * 1024) + " mb, whilst the data directory: " + dir.getAbsolutePath()
1:                             + " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space";
1: 
/////////////////////////////////////////////////////////////////////////
1:                     if (storeLimit != 0) {
1:                         int val = (int) ((storeSize * 100) / storeLimit);
1:                         if (val > 90) {
1:                             answer.add(new HealthStatus("org.apache.activemq.TempStoreLimit", "WARNING", "TempMessage Store size is within " + val
1:                                 + "% of its limit", adapter.toString()));
1:                         }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     if (storeSize != 0 && storeLimit != 0) {
1:                             answer.add(new HealthStatus("org.apache.activemq.JobSchedulerLimit", "WARNING", "JobSchedulerMessage Store size is within " + val
1:                                 + "% of its limit", scheduler.toString()));
1:                         String message = "JobSchedulerStore limit is " + storeLimit / (1024 * 1024) + " mb, whilst the data directory: "
1:                             + dir.getAbsolutePath() + " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space";
1:         if (answer != null && !answer.isEmpty()) {
0:             this.currentState = "Getting Worried {";
1:             for (HealthStatus hs : answer) {
0:                 currentState += hs + " , ";
1:             }
0:             currentState += " }";
1:         } else {
0:             this.currentState = "Good";
/////////////////////////////////////////////////////////////////////////
author:Christian Posta
-------------------------------------------------------------------------------
commit:f406e86
/////////////////////////////////////////////////////////////////////////
0:          this.currentState = "Getting Worried {";
author:Robert Davies
-------------------------------------------------------------------------------
commit:c37859a
/////////////////////////////////////////////////////////////////////////
0:     String currentState = "Good";
/////////////////////////////////////////////////////////////////////////
0:     if (answer != null && !answer.isEmpty()){
0:          this.currentState = "Feeling Ill {";
0:         for (HealthStatus hs: answer){
0:             currentState += hs + " , ";
1:         }
0:         currentState += " }";
0:     } else{
0:         this.currentState="Good";
1:     }
1:     /**
1:      * @return String representation of the current Broker state
1:      */
1:     @Override
1:     public String getCurrentStatus() {
1:         return this.currentState;
1:     }
1: 
commit:8787134
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1: 
1:         /**
1:          * Check persistence store directory limits
1:          *
1:          */
1:         BrokerService brokerService = broker.getBrokerService();
1:         if (brokerService != null && brokerService.getPersistenceAdapter() != null) {
1:             PersistenceAdapter adapter = brokerService.getPersistenceAdapter();
1:             File dir = adapter.getDirectory();
1:             if (brokerService.isPersistent()) {
1:                 SystemUsage usage = brokerService.getSystemUsage();
1:                 if (dir != null && usage != null) {
1:                     String dirPath = dir.getAbsolutePath();
1:                     if (!dir.isAbsolute()) {
1:                         dir = new File(dirPath);
1:                     }
1: 
1: 
1:                     while (dir != null && !dir.isDirectory()) {
1:                         dir = dir.getParentFile();
1:                     }
1:                     long storeSize = adapter.size();
1:                     long storeLimit = usage.getStoreUsage().getLimit();
1:                     long dirFreeSpace = dir.getUsableSpace();
1: 
0:                     if (storeSize != 0) {
1:                         int val = (int) ((storeSize * 100) / storeLimit);
1:                         if (val > 90) {
0:                             answer.add(new HealthStatus("org.apache.activemq.StoreLimit", "WARNING", "Message Store size is within " + val + "% of its limit", adapter.toString()));
1:                         }
1:                     }
1: 
1: 
1:                     if ((storeLimit - storeSize) > dirFreeSpace) {
0:                         String message = "Store limit is " + storeLimit / (1024 * 1024) +
0:                                 " mb, whilst the data directory: " + dir.getAbsolutePath() +
0:                                 " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space";
1:                         answer.add(new HealthStatus("org.apache.activemq.FreeDiskSpaceLeft", "WARNING", message, adapter.toString()));
1:                     }
1: 
1: 
1:                 }
1:                 File tmpDir = brokerService.getTmpDataDirectory();
1:                 if (tmpDir != null) {
1: 
1:                     String tmpDirPath = tmpDir.getAbsolutePath();
1:                     if (!tmpDir.isAbsolute()) {
1:                         tmpDir = new File(tmpDirPath);
1:                     }
1: 
1:                     long storeSize = usage.getTempUsage().getUsage();
1:                     long storeLimit = usage.getTempUsage().getLimit();
1:                     while (tmpDir != null && !tmpDir.isDirectory()) {
1:                         tmpDir = tmpDir.getParentFile();
1:                     }
1: 
1:                     int val = (int) ((storeSize * 100) / storeLimit);
1:                     if (val > 90) {
0:                         answer.add(new HealthStatus("org.apache.activemq.TempStoreLimit", "WARNING", "TempMessage Store size is within " + val + "% of its limit", adapter.toString()));
1:                     }
1: 
1: 
1:                 }
1: 
1: 
1:             }
1:         }
1: 
1:         if (brokerService != null && brokerService.getJobSchedulerStore() != null) {
1:             JobSchedulerStore scheduler = brokerService.getJobSchedulerStore();
1:             File dir = scheduler.getDirectory();
1:             if (brokerService.isPersistent()) {
1:                 SystemUsage usage = brokerService.getSystemUsage();
1:                 if (dir != null && usage != null) {
1:                     String dirPath = dir.getAbsolutePath();
1:                     if (!dir.isAbsolute()) {
1:                         dir = new File(dirPath);
1:                     }
1: 
1: 
1:                     while (dir != null && !dir.isDirectory()) {
1:                         dir = dir.getParentFile();
1:                     }
1:                     long storeSize = scheduler.size();
1:                     long storeLimit = usage.getJobSchedulerUsage().getLimit();
1:                     long dirFreeSpace = dir.getUsableSpace();
1: 
0:                     if (storeSize != 0) {
1:                         int val = (int) ((storeSize * 100) / storeLimit);
1:                         if (val > 90) {
0:                             answer.add(new HealthStatus("org.apache.activemq.JobSchedulerLimit", "WARNING", "JobSchedulerMessage Store size is within " + val + "% of its limit", scheduler.toString()));
1:                         }
1:                     }
1: 
1: 
1:                     if ((storeLimit - storeSize) > dirFreeSpace) {
0:                         String message = "JobSchedulerStore limit is " + storeLimit / (1024 * 1024) +
0:                                 " mb, whilst the data directory: " + dir.getAbsolutePath() +
0:                                 " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space";
1:                         answer.add(new HealthStatus("org.apache.activemq.FreeDiskSpaceLeft", "WARNING", message, scheduler.toString()));
1:                     }
1: 
1:                 }
1:             }
1:         }
1: 
author:James Strachan
-------------------------------------------------------------------------------
commit:973909a
/////////////////////////////////////////////////////////////////////////
1: public class HealthView implements HealthViewMBean {
1:     public HealthView(ManagedRegionBroker broker) {
1:         OpenTypeSupport.OpenTypeFactory factory = OpenTypeSupport.getFactory(HealthStatus.class);
0:         TabularType tt = new TabularType("HealthStatus", "HealthStatus", ct, new String[]{"healthId", "level", "message", "resource"});
1:         List<HealthStatus> list = healthList();
1:         for (HealthStatus healthStatus : list) {
1:             rc.put(new CompositeDataSupport(ct, factory.getFields(healthStatus)));
1:     public List<HealthStatus> healthList() throws Exception {
1:         List<HealthStatus> answer = new ArrayList<HealthStatus>();
1:                 ObjectName key = entry.getKey();
1:                 String message = "Queue " + queue.getName() + " has no consumers";
1:                 answer.add(new HealthStatus("org.apache.activemq.noConsumer", "WARNING", message, key.toString()));
commit:1797ce9
/////////////////////////////////////////////////////////////////////////
1:     public TabularData health() throws Exception {
0:         List<StatusEvent> list = healthList();
/////////////////////////////////////////////////////////////////////////
0:     public List<StatusEvent> healthList() throws Exception {
commit:3cf129a
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:         List<StatusEvent> list = statusList();
0:         for (StatusEvent statusEvent : list) {
0:             rc.put(new CompositeDataSupport(ct, factory.getFields(statusEvent)));
1:         }
1:         return rc;
1:     }
0: 
1:     @Override
0:     public List<StatusEvent> statusList() throws Exception {
0:         List<StatusEvent> answer = new ArrayList<StatusEvent>();
0:                 answer.add(new StatusEvent("AMQ-NoConsumer", entry.getKey().toString()));
1:         return answer;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:ed96e2e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
0: 
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: import javax.management.openmbean.TabularType;
0: import java.util.Map;
0: 
0: public class StatusView implements StatusViewMBean {
0: 
0:     ManagedRegionBroker broker;
0: 
0:     public StatusView(ManagedRegionBroker broker) {
1:         this.broker = broker;
1:     }
0: 
1:     @Override
0:     public TabularData status() throws Exception {
0:         OpenTypeSupport.OpenTypeFactory factory = OpenTypeSupport.getFactory(StatusEvent.class);
1:         CompositeType ct = factory.getCompositeType();
0:         TabularType tt = new TabularType("Status", "Status", ct, new String[]{"id", "resource"});
1:         TabularDataSupport rc = new TabularDataSupport(tt);
0: 
1:         Map<ObjectName, DestinationView> queueViews = broker.getQueueViews();
1:         for (Map.Entry<ObjectName, DestinationView> entry : queueViews.entrySet()) {
1:             DestinationView queue = entry.getValue();
1:             if (queue.getConsumerCount() == 0 && queue.getProducerCount() > 0) {
0:                 rc.put(new CompositeDataSupport(ct, factory.getFields(new StatusEvent("AMQ-NoConsumer", entry.getKey().toString()))));
1:             }
1:         }
0:         return rc;
1:     }
0: 
1: }
============================================================================