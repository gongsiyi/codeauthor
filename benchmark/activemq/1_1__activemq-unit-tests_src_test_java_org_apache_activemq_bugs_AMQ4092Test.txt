1:25e6b99: /**
1:25e6b99:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:25e6b99:  * contributor license agreements.  See the NOTICE file distributed with
1:25e6b99:  * this work for additional information regarding copyright ownership.
1:25e6b99:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:25e6b99:  * (the "License"); you may not use this file except in compliance with
1:25e6b99:  * the License.  You may obtain a copy of the License at
1:25e6b99:  *
1:25e6b99:  *      http://www.apache.org/licenses/LICENSE-2.0
1:25e6b99:  *
1:25e6b99:  * Unless required by applicable law or agreed to in writing, software
1:25e6b99:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25e6b99:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25e6b99:  * See the License for the specific language governing permissions and
1:25e6b99:  * limitations under the License.
1:25e6b99:  */
1:25e6b99: package org.apache.activemq.bugs;
1:25e6b99: 
1:25e6b99: import java.util.HashMap;
1:25e6b99: import java.util.concurrent.CountDownLatch;
1:25e6b99: import java.util.concurrent.ExecutorService;
1:25e6b99: import java.util.concurrent.Executors;
1:25e6b99: import java.util.concurrent.TimeUnit;
1:25e6b99: import java.util.concurrent.atomic.AtomicInteger;
1:25e6b99: import javax.jms.Connection;
1:25e6b99: import javax.jms.DeliveryMode;
1:25e6b99: import javax.jms.ExceptionListener;
1:25e6b99: import javax.jms.JMSException;
1:25e6b99: import javax.jms.Message;
1:25e6b99: import javax.jms.MessageConsumer;
1:25e6b99: import javax.jms.MessageListener;
1:25e6b99: import javax.jms.MessageProducer;
1:25e6b99: import javax.jms.Session;
1:25e6b99: import javax.jms.TextMessage;
1:25e6b99: import junit.framework.TestCase;
1:25e6b99: import org.apache.activemq.ActiveMQConnectionFactory;
1:25e6b99: import org.apache.activemq.broker.BrokerService;
1:25e6b99: import org.apache.activemq.command.ActiveMQQueue;
1:25e6b99: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:25e6b99: import org.slf4j.Logger;
1:25e6b99: import org.slf4j.LoggerFactory;
1:25e6b99: 
1:25e6b99: public class AMQ4092Test extends TestCase {
1:25e6b99: 
1:25e6b99:     private static final Logger log = LoggerFactory.getLogger(AMQ4092Test.class);
1:25e6b99: 
1:25e6b99:     static final String QUEUE_NAME = "TEST";
1:25e6b99: 
1:25e6b99:     // increase limits to expedite failure
1:25e6b99:     static final int NUM_TO_SEND_PER_PRODUCER = 1000; // 10000
1:25e6b99:     static final int NUM_PRODUCERS = 5; // 40
1:25e6b99: 
1:25e6b99:     static final ActiveMQQueue[] DESTINATIONS = new ActiveMQQueue[]{
1:25e6b99:             new ActiveMQQueue("A"),
1:25e6b99:             new ActiveMQQueue("B")
1:25e6b99:             // A/B seems to be sufficient for concurrentStoreAndDispatch=true
1:25e6b99:     };
1:25e6b99: 
1:25e6b99:     static final boolean debug = false;
1:25e6b99: 
1:25e6b99:     private BrokerService brokerService;
1:25e6b99: 
1:25e6b99:     private ActiveMQQueue destination;
1:25e6b99:     private HashMap<Thread, Throwable> exceptions = new HashMap<Thread, Throwable>();
1:25e6b99:     private ExceptionListener exceptionListener = new ExceptionListener() {
1:25e6b99:         @Override
1:25e6b99:         public void onException(JMSException exception) {
1:25e6b99:             exception.printStackTrace();
1:25e6b99:             exceptions.put(Thread.currentThread(), exception);
1:25e6b99:         }
1:25e6b99:     };
1:25e6b99: 
1:25e6b99:     @Override
1:25e6b99:     protected void setUp() throws Exception {
1:25e6b99:         brokerService = new BrokerService();
1:25e6b99:         brokerService.setDeleteAllMessagesOnStartup(true);
1:25e6b99:         ((KahaDBPersistenceAdapter)brokerService.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(false);
1:25e6b99:         brokerService.addConnector("tcp://localhost:0");
1:25e6b99:         brokerService.start();
1:25e6b99:         destination = new ActiveMQQueue();
1:25e6b99:         destination.setCompositeDestinations(DESTINATIONS);
1:25e6b99:         Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
1:25e6b99:             @Override
1:25e6b99:             public void uncaughtException(Thread t, Throwable e) {
1:25e6b99:                 exceptions.put(t, e);
1:25e6b99:             }
1:25e6b99:         });
1:25e6b99:     }
1:25e6b99: 
1:25e6b99:     @Override
1:25e6b99:     protected void tearDown() throws Exception {
1:25e6b99:         // Stop any running threads.
1:25e6b99:         brokerService.stop();
1:25e6b99:     }
1:25e6b99: 
1:25e6b99: 
1:25e6b99:     public void testConcurrentGroups() throws Exception {
1:25e6b99:         ExecutorService executorService = Executors.newCachedThreadPool();
1:25e6b99:         executorService.submit(new TestConsumer());
1:25e6b99:         for (int i=0; i<NUM_PRODUCERS; i++) {
1:25e6b99:             executorService.submit(new TestProducer());
1:25e6b99:         }
1:25e6b99:         executorService.shutdown();
1:25e6b99:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1:25e6b99:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:25e6b99:     }
1:25e6b99: 
1:25e6b99:     
1:25e6b99:     class TestProducer implements Runnable {
1:25e6b99: 
1:25e6b99:         public void produceMessages() throws Exception {
1:25e6b99:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:25e6b99:                     brokerService.getTransportConnectors().get(0).getConnectUri().toString()
1:25e6b99:             );
1:25e6b99:             connectionFactory.setExceptionListener(exceptionListener);
1:25e6b99:             connectionFactory.setUseAsyncSend(true);
1:25e6b99:             Connection connection = connectionFactory.createConnection();
1:25e6b99:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:25e6b99:             MessageProducer producer = session.createProducer(destination);
1:25e6b99:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:25e6b99: 
1:25e6b99:                 String name = new String(new byte[2*1024]);
1:25e6b99:                 for (int i = 1; i <= NUM_TO_SEND_PER_PRODUCER; i++) {
1:25e6b99: 
1:25e6b99:                     TextMessage message = session.createTextMessage(name + "_" + i);
1:25e6b99:                     for (int j=0; j<100; j++) {
1:25e6b99:                         message.setStringProperty("Prop" + j, ""+j);
1:25e6b99:                     }
1:25e6b99:                     message.setStringProperty("JMSXGroupID", Thread.currentThread().getName()+i);
1:25e6b99:                     message.setIntProperty("JMSXGroupSeq", 1);
1:25e6b99:                     producer.send(message);
1:25e6b99:                 }
1:25e6b99: 
1:25e6b99:             producer.close();
1:25e6b99:             session.close();
1:25e6b99:             connection.close();
1:25e6b99:         }
1:25e6b99: 
1:25e6b99:         @Override
1:25e6b99:         public void run() {
1:25e6b99:             try {
1:25e6b99:                 produceMessages();
1:25e6b99:             } catch (Exception e) {
1:25e6b99:                 e.printStackTrace();
1:25e6b99:                 exceptions.put(Thread.currentThread(), e);
1:25e6b99:             }
1:25e6b99:         }
1:25e6b99:     }
1:25e6b99: 
1:25e6b99:     class TestConsumer implements Runnable {
1:25e6b99: 
1:25e6b99:         private CountDownLatch finishLatch = new CountDownLatch(1);
1:25e6b99: 
1:25e6b99: 
1:25e6b99: 
1:25e6b99:         public void consume() throws Exception {
1:25e6b99:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:25e6b99:                     brokerService.getTransportConnectors().get(0).getConnectUri().toString()
1:25e6b99:             );
1:25e6b99: 
1:25e6b99:             connectionFactory.setExceptionListener(exceptionListener);
1:25e6b99:             final int totalMessageCount = NUM_TO_SEND_PER_PRODUCER * DESTINATIONS.length * NUM_PRODUCERS;
1:25e6b99:             final AtomicInteger counter = new AtomicInteger();
1:25e6b99:             final MessageListener listener = new MessageListener() {
1:25e6b99:                 public void onMessage(Message message) {
1:25e6b99: 
1:25e6b99:                     if (debug) {
1:25e6b99:                         try {
1:25e6b99:                             log.info(((TextMessage) message).getText());
1:25e6b99:                         } catch (JMSException e) {
1:25e6b99:                             e.printStackTrace();
1:25e6b99:                         }
1:25e6b99:                     }
1:25e6b99: 
1:25e6b99:                     boolean first = false;
1:25e6b99:                     try {
1:25e6b99:                         first = message.getBooleanProperty("JMSXGroupFirstForConsumer");
1:25e6b99:                     } catch (JMSException e) {
1:25e6b99:                         e.printStackTrace();
1:25e6b99:                         exceptions.put(Thread.currentThread(), e);
1:25e6b99:                     }
1:25e6b99:                     assertTrue("Always is first message", first);
1:25e6b99:                     if (counter.incrementAndGet() == totalMessageCount) {
1:25e6b99:                             log.info("Got all:" + counter.get());
1:25e6b99:                             finishLatch.countDown();
1:25e6b99: 
1:25e6b99:                     }
1:25e6b99:                 }
1:25e6b99:             };
1:25e6b99: 
1:25e6b99:             int consumerCount = DESTINATIONS.length * 100;
1:25e6b99:             Connection[] connections = new Connection[consumerCount];
1:25e6b99: 
1:25e6b99:             Session[] sessions = new Session[consumerCount];
1:25e6b99:             MessageConsumer[] consumers = new MessageConsumer[consumerCount];
1:25e6b99: 
1:25e6b99:             for (int i = 0; i < consumerCount; i++) {
1:25e6b99:                 connections[i] = connectionFactory.createConnection();
1:25e6b99:                 connections[i].start();
1:25e6b99: 
1:25e6b99:                 sessions[i] = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1:25e6b99: 
1:25e6b99:                 consumers[i] = sessions[i].createConsumer(DESTINATIONS[i%DESTINATIONS.length], null);
1:25e6b99:                 consumers[i].setMessageListener(listener);
1:25e6b99:             }
1:25e6b99: 
1:25e6b99: 
1:25e6b99:             log.info("received " + counter.get() + " messages");
1:25e6b99: 
1:25e6b99:             assertTrue("got all messages in time", finishLatch.await(4, TimeUnit.MINUTES));
1:25e6b99: 
1:25e6b99:             log.info("received " + counter.get() + " messages");
1:25e6b99: 
1:25e6b99:             for (MessageConsumer consumer : consumers) {
1:25e6b99:                 consumer.close();
1:25e6b99:             }
1:25e6b99: 
1:25e6b99:             for (Session session : sessions) {
1:25e6b99:                 session.close();
1:25e6b99:             }
1:25e6b99: 
1:25e6b99:             for (Connection connection : connections) {
1:25e6b99:                 connection.close();
1:25e6b99:             }
1:25e6b99:         }
1:25e6b99: 
1:25e6b99:         @Override
1:25e6b99:         public void run() {
1:25e6b99:             try {
1:25e6b99:                 consume();
1:25e6b99:             } catch (Exception e) {
1:25e6b99:                 e.printStackTrace();
1:25e6b99:                 exceptions.put(Thread.currentThread(), e);
1:25e6b99:             }
1:25e6b99:         }
1:25e6b99:     }
1:25e6b99: 
1:25e6b99: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:25e6b99
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.HashMap;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4092Test extends TestCase {
1: 
1:     private static final Logger log = LoggerFactory.getLogger(AMQ4092Test.class);
1: 
1:     static final String QUEUE_NAME = "TEST";
1: 
1:     // increase limits to expedite failure
1:     static final int NUM_TO_SEND_PER_PRODUCER = 1000; // 10000
1:     static final int NUM_PRODUCERS = 5; // 40
1: 
1:     static final ActiveMQQueue[] DESTINATIONS = new ActiveMQQueue[]{
1:             new ActiveMQQueue("A"),
1:             new ActiveMQQueue("B")
1:             // A/B seems to be sufficient for concurrentStoreAndDispatch=true
1:     };
1: 
1:     static final boolean debug = false;
1: 
1:     private BrokerService brokerService;
1: 
1:     private ActiveMQQueue destination;
1:     private HashMap<Thread, Throwable> exceptions = new HashMap<Thread, Throwable>();
1:     private ExceptionListener exceptionListener = new ExceptionListener() {
1:         @Override
1:         public void onException(JMSException exception) {
1:             exception.printStackTrace();
1:             exceptions.put(Thread.currentThread(), exception);
1:         }
1:     };
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         ((KahaDBPersistenceAdapter)brokerService.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(false);
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1:         destination = new ActiveMQQueue();
1:         destination.setCompositeDestinations(DESTINATIONS);
1:         Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
1:             @Override
1:             public void uncaughtException(Thread t, Throwable e) {
1:                 exceptions.put(t, e);
1:             }
1:         });
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         // Stop any running threads.
1:         brokerService.stop();
1:     }
1: 
1: 
1:     public void testConcurrentGroups() throws Exception {
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         executorService.submit(new TestConsumer());
1:         for (int i=0; i<NUM_PRODUCERS; i++) {
1:             executorService.submit(new TestProducer());
1:         }
1:         executorService.shutdown();
1:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:     }
1: 
1:     
1:     class TestProducer implements Runnable {
1: 
1:         public void produceMessages() throws Exception {
1:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:                     brokerService.getTransportConnectors().get(0).getConnectUri().toString()
1:             );
1:             connectionFactory.setExceptionListener(exceptionListener);
1:             connectionFactory.setUseAsyncSend(true);
1:             Connection connection = connectionFactory.createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(destination);
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:                 String name = new String(new byte[2*1024]);
1:                 for (int i = 1; i <= NUM_TO_SEND_PER_PRODUCER; i++) {
1: 
1:                     TextMessage message = session.createTextMessage(name + "_" + i);
1:                     for (int j=0; j<100; j++) {
1:                         message.setStringProperty("Prop" + j, ""+j);
1:                     }
1:                     message.setStringProperty("JMSXGroupID", Thread.currentThread().getName()+i);
1:                     message.setIntProperty("JMSXGroupSeq", 1);
1:                     producer.send(message);
1:                 }
1: 
1:             producer.close();
1:             session.close();
1:             connection.close();
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 produceMessages();
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:                 exceptions.put(Thread.currentThread(), e);
1:             }
1:         }
1:     }
1: 
1:     class TestConsumer implements Runnable {
1: 
1:         private CountDownLatch finishLatch = new CountDownLatch(1);
1: 
1: 
1: 
1:         public void consume() throws Exception {
1:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:                     brokerService.getTransportConnectors().get(0).getConnectUri().toString()
1:             );
1: 
1:             connectionFactory.setExceptionListener(exceptionListener);
1:             final int totalMessageCount = NUM_TO_SEND_PER_PRODUCER * DESTINATIONS.length * NUM_PRODUCERS;
1:             final AtomicInteger counter = new AtomicInteger();
1:             final MessageListener listener = new MessageListener() {
1:                 public void onMessage(Message message) {
1: 
1:                     if (debug) {
1:                         try {
1:                             log.info(((TextMessage) message).getText());
1:                         } catch (JMSException e) {
1:                             e.printStackTrace();
1:                         }
1:                     }
1: 
1:                     boolean first = false;
1:                     try {
1:                         first = message.getBooleanProperty("JMSXGroupFirstForConsumer");
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                         exceptions.put(Thread.currentThread(), e);
1:                     }
1:                     assertTrue("Always is first message", first);
1:                     if (counter.incrementAndGet() == totalMessageCount) {
1:                             log.info("Got all:" + counter.get());
1:                             finishLatch.countDown();
1: 
1:                     }
1:                 }
1:             };
1: 
1:             int consumerCount = DESTINATIONS.length * 100;
1:             Connection[] connections = new Connection[consumerCount];
1: 
1:             Session[] sessions = new Session[consumerCount];
1:             MessageConsumer[] consumers = new MessageConsumer[consumerCount];
1: 
1:             for (int i = 0; i < consumerCount; i++) {
1:                 connections[i] = connectionFactory.createConnection();
1:                 connections[i].start();
1: 
1:                 sessions[i] = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:                 consumers[i] = sessions[i].createConsumer(DESTINATIONS[i%DESTINATIONS.length], null);
1:                 consumers[i].setMessageListener(listener);
1:             }
1: 
1: 
1:             log.info("received " + counter.get() + " messages");
1: 
1:             assertTrue("got all messages in time", finishLatch.await(4, TimeUnit.MINUTES));
1: 
1:             log.info("received " + counter.get() + " messages");
1: 
1:             for (MessageConsumer consumer : consumers) {
1:                 consumer.close();
1:             }
1: 
1:             for (Session session : sessions) {
1:                 session.close();
1:             }
1: 
1:             for (Connection connection : connections) {
1:                 connection.close();
1:             }
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 consume();
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:                 exceptions.put(Thread.currentThread(), e);
1:             }
1:         }
1:     }
1: 
1: }
============================================================================