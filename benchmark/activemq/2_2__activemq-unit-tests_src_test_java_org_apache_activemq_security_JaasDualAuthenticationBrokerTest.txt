1:0d05af6: /**
1:0d05af6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0d05af6:  * contributor license agreements.  See the NOTICE file distributed with
1:0d05af6:  * this work for additional information regarding copyright ownership.
1:0d05af6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0d05af6:  * (the "License"); you may not use this file except in compliance with
1:0d05af6:  * the License.  You may obtain a copy of the License at
1:0d05af6:  *
1:0d05af6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0d05af6:  *
1:0d05af6:  * Unless required by applicable law or agreed to in writing, software
1:0d05af6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0d05af6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d05af6:  * See the License for the specific language governing permissions and
1:0d05af6:  * limitations under the License.
1:0d05af6:  */
4:0d05af6: 
1:0d05af6: package org.apache.activemq.security;
1:0d05af6: 
1:4743a20: import java.net.URI;
1:4743a20: import java.security.Principal;
1:4743a20: import java.util.HashMap;
1:4743a20: import java.util.Iterator;
1:4743a20: import java.util.Set;
1:4743a20: 
1:4743a20: import javax.net.ssl.SSLServerSocket;
1:4743a20: import javax.security.auth.login.AppConfigurationEntry;
1:4743a20: import javax.security.auth.login.Configuration;
1:4743a20: 
1:0d05af6: import junit.framework.TestCase;
1:4743a20: 
1:0d05af6: import org.apache.activemq.broker.ConnectionContext;
1:0d05af6: import org.apache.activemq.broker.Connector;
1:0d05af6: import org.apache.activemq.broker.StubBroker;
1:0d05af6: import org.apache.activemq.broker.TransportConnector;
1:0d05af6: import org.apache.activemq.command.ConnectionInfo;
1:0d05af6: import org.apache.activemq.jaas.GroupPrincipal;
1:0d05af6: import org.apache.activemq.jaas.UserPrincipal;
1:4743a20: import org.apache.activemq.transport.tcp.SslTransportServer;
1:4743a20: import org.apache.activemq.transport.tcp.StubSSLServerSocket;
1:4743a20: import org.apache.activemq.transport.tcp.StubSSLSocketFactory;
1:4743a20: import org.apache.activemq.transport.tcp.StubX509Certificate;
1:4743a20: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:0d05af6: 
1:0d05af6: /**
1:0d05af6:  *
1:0d05af6:  */
1:0d05af6: public class JaasDualAuthenticationBrokerTest extends TestCase {
1:0d05af6: 
1:0d05af6:     private static final String INSECURE_GROUP = "insecureGroup";
1:0d05af6:     private static final String INSECURE_USERNAME = "insecureUserName";
1:0d05af6:     private static final String DN_GROUP = "dnGroup";
1:0d05af6:     private static final String DN_USERNAME = "dnUserName";
1:0d05af6: 
1:0d05af6:     StubBroker receiveBroker;
1:0d05af6:     JaasDualAuthenticationBroker authBroker;
1:0d05af6: 
1:0d05af6:     ConnectionContext connectionContext;
1:0d05af6:     ConnectionInfo connectionInfo;
1:0d05af6: 
1:0d05af6:     SslTransportServer sslTransportServer;
1:0d05af6:     TcpTransportServer nonSslTransportServer;
1:0d05af6: 
1:0d05af6:     /** create a dual login config, for both SSL and non-SSL connections
1:0d05af6:      * using the StubLoginModule
1:0d05af6:      *
1:0d05af6:      */
1:0d05af6:     void createLoginConfig() {
1:0d05af6:         HashMap<String, String> sslConfigOptions = new HashMap<String, String>();
1:0d05af6:         HashMap<String, String> configOptions = new HashMap<String, String>();
1:0d05af6: 
1:0d05af6:         sslConfigOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY, "true");
1:0d05af6:         sslConfigOptions.put(StubLoginModule.USERS_PROPERTY, DN_USERNAME);
1:0d05af6:         sslConfigOptions.put(StubLoginModule.GROUPS_PROPERTY, DN_GROUP);
1:0d05af6:         AppConfigurationEntry sslConfigEntry = new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule",
1:0d05af6:                 AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, sslConfigOptions);
1:0d05af6: 
1:0d05af6:         configOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY, "true");
1:0d05af6:         configOptions.put(StubLoginModule.USERS_PROPERTY, INSECURE_USERNAME);
1:0d05af6:         configOptions.put(StubLoginModule.GROUPS_PROPERTY, INSECURE_GROUP);
1:0d05af6:         AppConfigurationEntry configEntry = new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule",
1:0d05af6:                 AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, configOptions);
1:0d05af6: 
1:0d05af6:         StubDualJaasConfiguration jaasConfig = new StubDualJaasConfiguration(configEntry, sslConfigEntry);
1:0d05af6: 
1:0d05af6:         Configuration.setConfiguration(jaasConfig);
1:0d05af6:     }
1:0d05af6: 
1:4743a20:     @Override
1:0d05af6:     protected void setUp() throws Exception {
1:0d05af6:         receiveBroker = new StubBroker();
1:0d05af6: 
1:0d05af6:         authBroker = new JaasDualAuthenticationBroker(receiveBroker, "activemq-domain", "activemq-ssl-domain");
1:0d05af6: 
1:0d05af6:         connectionContext = new ConnectionContext();
1:0d05af6: 
1:0d05af6:         SSLServerSocket sslServerSocket = new StubSSLServerSocket();
1:0d05af6:         StubSSLSocketFactory socketFactory = new StubSSLSocketFactory(sslServerSocket);
1:0d05af6: 
1:0d05af6:         try {
1:0d05af6:             sslTransportServer = new SslTransportServer(null, new URI("ssl://localhost:61616?needClientAuth=true"),
1:0d05af6:                     socketFactory);
1:0d05af6:         } catch (Exception e) {
1:0d05af6:             fail("Unable to create SslTransportServer.");
1:0d05af6:         }
1:0d05af6:         sslTransportServer.setNeedClientAuth(true);
1:0d05af6:         sslTransportServer.bind();
1:0d05af6: 
1:0d05af6:         try {
1:4743a20:             nonSslTransportServer = new TcpTransportServer(null, new URI("tcp://localhost:61613"), socketFactory);
1:0d05af6:         } catch (Exception e) {
1:0d05af6:             fail("Unable to create TcpTransportServer.");
1:0d05af6:         }
1:0d05af6: 
1:0d05af6: 
1:0d05af6:         connectionInfo = new ConnectionInfo();
1:0d05af6: 
1:0d05af6:         createLoginConfig();
1:0d05af6:     }
1:0d05af6: 
1:4743a20:     @Override
1:0d05af6:     protected void tearDown() throws Exception {
1:0d05af6:             super.tearDown();
1:0d05af6:     }
1:0d05af6: 
1:0d05af6: 
1:0d05af6:     public void testSecureConnector() {
1:0d05af6:         Connector connector = new TransportConnector(sslTransportServer);
1:0d05af6:         connectionContext.setConnector(connector);
1:0d05af6:         connectionInfo.setTransportContext(new StubX509Certificate[] {});
1:0d05af6: 
1:0d05af6:         try {
1:0d05af6:             authBroker.addConnection(connectionContext, connectionInfo);
1:0d05af6:         } catch (Exception e) {
1:0d05af6:             fail("Call to addConnection failed: " + e.getMessage());
1:0d05af6:         }
1:0d05af6: 
1:0d05af6:         assertEquals("Number of addConnection calls to underlying Broker must match number of calls made to " +
1:0d05af6:                 "AuthenticationBroker.", 1, receiveBroker.addConnectionData.size());
1:0d05af6: 
1:0d05af6:         ConnectionContext receivedContext = receiveBroker.addConnectionData.getFirst().connectionContext;
1:0d05af6: 
1:0d05af6:         assertEquals("The SecurityContext's userName must be set to that of the UserPrincipal.",
1:0d05af6:                 DN_USERNAME, receivedContext.getSecurityContext().getUserName());
1:0d05af6: 
1:4743a20:         Set<Principal> receivedPrincipals = receivedContext.getSecurityContext().getPrincipals();
1:0d05af6: 
1:0d05af6: 
1:0d05af6:         assertEquals("2 Principals received", 2, receivedPrincipals.size());
1:4743a20: 
1:4743a20:         for (Iterator<Principal> iter = receivedPrincipals.iterator(); iter.hasNext();) {
1:4743a20:             Principal currentPrincipal = iter.next();
1:0d05af6: 
1:0d05af6:             if (currentPrincipal instanceof UserPrincipal) {
1:0d05af6:                 assertEquals("UserPrincipal is '" + DN_USERNAME + "'", DN_USERNAME, currentPrincipal.getName());
1:0d05af6:             } else if (currentPrincipal instanceof GroupPrincipal) {
1:0d05af6:                 assertEquals("GroupPrincipal is '" + DN_GROUP + "'", DN_GROUP, currentPrincipal.getName());
1:0d05af6:             } else {
1:0d05af6:                 fail("Unexpected Principal subclass found.");
1:0d05af6:             }
1:0d05af6:         }
1:0d05af6: 
1:0d05af6:         try {
1:0d05af6:             authBroker.removeConnection(connectionContext, connectionInfo, null);
1:0d05af6:         } catch (Exception e) {
1:0d05af6:             fail("Call to removeConnection failed: " + e.getMessage());
1:0d05af6:         }
1:0d05af6:         assertEquals("Number of removeConnection calls to underlying Broker must match number of calls made to " +
1:0d05af6:                 "AuthenticationBroker.", 1, receiveBroker.removeConnectionData.size());
1:0d05af6:     }
1:0d05af6: 
1:0d05af6:     public void testInsecureConnector() {
1:0d05af6:         Connector connector = new TransportConnector(nonSslTransportServer);
1:0d05af6:         connectionContext.setConnector(connector);
1:0d05af6:         connectionInfo.setUserName(INSECURE_USERNAME);
1:4743a20: 
1:0d05af6:         try {
1:0d05af6:             authBroker.addConnection(connectionContext, connectionInfo);
1:0d05af6:         } catch (Exception e) {
1:0d05af6:             fail("Call to addConnection failed: " + e.getMessage());
1:0d05af6:         }
1:0d05af6: 
1:0d05af6:         assertEquals("Number of addConnection calls to underlying Broker must match number of calls made to " +
1:0d05af6:                 "AuthenticationBroker.", 1, receiveBroker.addConnectionData.size());
1:0d05af6: 
1:0d05af6:         ConnectionContext receivedContext = receiveBroker.addConnectionData.getFirst().connectionContext;
1:0d05af6: 
1:0d05af6:         assertEquals("The SecurityContext's userName must be set to that of the UserPrincipal.",
1:0d05af6:                 INSECURE_USERNAME, receivedContext.getSecurityContext().getUserName());
1:0d05af6: 
1:4743a20:         Set<Principal> receivedPrincipals = receivedContext.getSecurityContext().getPrincipals();
1:0d05af6: 
1:0d05af6:         assertEquals("2 Principals received", 2, receivedPrincipals.size());
1:4743a20:         for (Iterator<Principal> iter = receivedPrincipals.iterator(); iter.hasNext();) {
1:4743a20:             Principal currentPrincipal = iter.next();
1:0d05af6: 
1:0d05af6:             if (currentPrincipal instanceof UserPrincipal) {
1:0d05af6:                 assertEquals("UserPrincipal is '" + INSECURE_USERNAME + "'",
1:0d05af6:                         INSECURE_USERNAME, currentPrincipal.getName());
1:0d05af6:             } else if (currentPrincipal instanceof GroupPrincipal) {
1:0d05af6:                 assertEquals("GroupPrincipal is '" + INSECURE_GROUP + "'",
1:0d05af6:                         INSECURE_GROUP, currentPrincipal.getName());
1:0d05af6:             } else {
1:0d05af6:                 fail("Unexpected Principal subclass found.");
1:0d05af6:             }
1:0d05af6:         }
1:0d05af6: 
1:0d05af6:         try {
1:0d05af6:             authBroker.removeConnection(connectionContext, connectionInfo, null);
1:0d05af6:         } catch (Exception e) {
1:0d05af6:             fail("Call to removeConnection failed: " + e.getMessage());
1:0d05af6:         }
1:0d05af6:         assertEquals("Number of removeConnection calls to underlying Broker must match number of calls made to " +
1:0d05af6:                 "AuthenticationBroker.", 1, receiveBroker.removeConnectionData.size());
1:0d05af6:     }
1:0d05af6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.security.Principal;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.Set;
1: 
1: import javax.net.ssl.SSLServerSocket;
1: import javax.security.auth.login.AppConfigurationEntry;
1: import javax.security.auth.login.Configuration;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.SslTransportServer;
1: import org.apache.activemq.transport.tcp.StubSSLServerSocket;
1: import org.apache.activemq.transport.tcp.StubSSLSocketFactory;
1: import org.apache.activemq.transport.tcp.StubX509Certificate;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             nonSslTransportServer = new TcpTransportServer(null, new URI("tcp://localhost:61613"), socketFactory);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         Set<Principal> receivedPrincipals = receivedContext.getSecurityContext().getPrincipals();
1: 
1:         for (Iterator<Principal> iter = receivedPrincipals.iterator(); iter.hasNext();) {
1:             Principal currentPrincipal = iter.next();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         Set<Principal> receivedPrincipals = receivedContext.getSecurityContext().getPrincipals();
1:         for (Iterator<Principal> iter = receivedPrincipals.iterator(); iter.hasNext();) {
1:             Principal currentPrincipal = iter.next();
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0d05af6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.security;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.Connector;
1: import org.apache.activemq.broker.StubBroker;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.jaas.GroupPrincipal;
1: import org.apache.activemq.jaas.UserPrincipal;
0: import org.apache.activemq.transport.tcp.*;
1: 
0: import javax.net.ssl.SSLServerSocket;
0: import javax.security.auth.login.AppConfigurationEntry;
0: import javax.security.auth.login.Configuration;
0: import java.net.URI;
0: import java.security.Principal;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Iterator;
0: import java.util.Set;
1: 
1: /**
1:  *
1:  */
1: public class JaasDualAuthenticationBrokerTest extends TestCase {
1: 
1:     private static final String INSECURE_GROUP = "insecureGroup";
1:     private static final String INSECURE_USERNAME = "insecureUserName";
1:     private static final String DN_GROUP = "dnGroup";
1:     private static final String DN_USERNAME = "dnUserName";
1: 
1:     StubBroker receiveBroker;
1:     JaasDualAuthenticationBroker authBroker;
1: 
1:     ConnectionContext connectionContext;
1:     ConnectionInfo connectionInfo;
1: 
1:     SslTransportServer sslTransportServer;
1:     TcpTransportServer nonSslTransportServer;
1: 
1:     /** create a dual login config, for both SSL and non-SSL connections
1:      * using the StubLoginModule
1:      *
1:      */
1:     void createLoginConfig() {
1:         HashMap<String, String> sslConfigOptions = new HashMap<String, String>();
1:         HashMap<String, String> configOptions = new HashMap<String, String>();
1: 
1:         sslConfigOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY, "true");
1:         sslConfigOptions.put(StubLoginModule.USERS_PROPERTY, DN_USERNAME);
1:         sslConfigOptions.put(StubLoginModule.GROUPS_PROPERTY, DN_GROUP);
1:         AppConfigurationEntry sslConfigEntry = new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule",
1:                 AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, sslConfigOptions);
1: 
1:         configOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY, "true");
1:         configOptions.put(StubLoginModule.USERS_PROPERTY, INSECURE_USERNAME);
1:         configOptions.put(StubLoginModule.GROUPS_PROPERTY, INSECURE_GROUP);
1:         AppConfigurationEntry configEntry = new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule",
1:                 AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, configOptions);
1: 
1:         StubDualJaasConfiguration jaasConfig = new StubDualJaasConfiguration(configEntry, sslConfigEntry);
1: 
1:         Configuration.setConfiguration(jaasConfig);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         receiveBroker = new StubBroker();
1: 
1:         authBroker = new JaasDualAuthenticationBroker(receiveBroker, "activemq-domain", "activemq-ssl-domain");
1: 
1:         connectionContext = new ConnectionContext();
1: 
1:         SSLServerSocket sslServerSocket = new StubSSLServerSocket();
1:         StubSSLSocketFactory socketFactory = new StubSSLSocketFactory(sslServerSocket);
1: 
1:         try {
1:             sslTransportServer = new SslTransportServer(null, new URI("ssl://localhost:61616?needClientAuth=true"),
1:                     socketFactory);
1:         } catch (Exception e) {
1:             fail("Unable to create SslTransportServer.");
1:         }
1:         sslTransportServer.setNeedClientAuth(true);
1:         sslTransportServer.bind();
1: 
1:         try {
0:             nonSslTransportServer = new TcpTransportServer(null, new URI("tcp://localhost:61613"), socketFactory); 
1:         } catch (Exception e) {
1:             fail("Unable to create TcpTransportServer.");
1:         }
1: 
1: 
1:         connectionInfo = new ConnectionInfo();
1: 
1:         createLoginConfig();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:             super.tearDown();
1:     }
1: 
1: 
1:     public void testSecureConnector() {
1:         Connector connector = new TransportConnector(sslTransportServer);
1:         connectionContext.setConnector(connector);
1:         connectionInfo.setTransportContext(new StubX509Certificate[] {});
1: 
1:         try {
1:             authBroker.addConnection(connectionContext, connectionInfo);
1:         } catch (Exception e) {
1:             fail("Call to addConnection failed: " + e.getMessage());
1:         }
1: 
1:         assertEquals("Number of addConnection calls to underlying Broker must match number of calls made to " +
1:                 "AuthenticationBroker.", 1, receiveBroker.addConnectionData.size());
1: 
1:         ConnectionContext receivedContext = receiveBroker.addConnectionData.getFirst().connectionContext;
1: 
1:         assertEquals("The SecurityContext's userName must be set to that of the UserPrincipal.",
1:                 DN_USERNAME, receivedContext.getSecurityContext().getUserName());
1: 
0:         Set receivedPrincipals = receivedContext.getSecurityContext().getPrincipals();
1: 
1: 
1:         assertEquals("2 Principals received", 2, receivedPrincipals.size());
1:         
0:         for (Iterator iter = receivedPrincipals.iterator(); iter.hasNext();) {
0:             Principal currentPrincipal = (Principal)iter.next();
1: 
1:             if (currentPrincipal instanceof UserPrincipal) {
1:                 assertEquals("UserPrincipal is '" + DN_USERNAME + "'", DN_USERNAME, currentPrincipal.getName());
1:             } else if (currentPrincipal instanceof GroupPrincipal) {
1:                 assertEquals("GroupPrincipal is '" + DN_GROUP + "'", DN_GROUP, currentPrincipal.getName());
1:             } else {
1:                 fail("Unexpected Principal subclass found.");
1:             }
1:         }
1: 
1:         try {
1:             authBroker.removeConnection(connectionContext, connectionInfo, null);
1:         } catch (Exception e) {
1:             fail("Call to removeConnection failed: " + e.getMessage());
1:         }
1:         assertEquals("Number of removeConnection calls to underlying Broker must match number of calls made to " +
1:                 "AuthenticationBroker.", 1, receiveBroker.removeConnectionData.size());
1:     }
1: 
1:     public void testInsecureConnector() {
1:         Connector connector = new TransportConnector(nonSslTransportServer);
1:         connectionContext.setConnector(connector);
1:         connectionInfo.setUserName(INSECURE_USERNAME);
1:         
1:         try {
1:             authBroker.addConnection(connectionContext, connectionInfo);
1:         } catch (Exception e) {
1:             fail("Call to addConnection failed: " + e.getMessage());
1:         }
1: 
1:         assertEquals("Number of addConnection calls to underlying Broker must match number of calls made to " +
1:                 "AuthenticationBroker.", 1, receiveBroker.addConnectionData.size());
1: 
1:         ConnectionContext receivedContext = receiveBroker.addConnectionData.getFirst().connectionContext;
1: 
1:         assertEquals("The SecurityContext's userName must be set to that of the UserPrincipal.",
1:                 INSECURE_USERNAME, receivedContext.getSecurityContext().getUserName());
1: 
0:         Set receivedPrincipals = receivedContext.getSecurityContext().getPrincipals();
1: 
1:         assertEquals("2 Principals received", 2, receivedPrincipals.size());
0:         for (Iterator iter = receivedPrincipals.iterator(); iter.hasNext();) {
0:             Principal currentPrincipal = (Principal)iter.next();
1: 
1:             if (currentPrincipal instanceof UserPrincipal) {
1:                 assertEquals("UserPrincipal is '" + INSECURE_USERNAME + "'",
1:                         INSECURE_USERNAME, currentPrincipal.getName());
1:             } else if (currentPrincipal instanceof GroupPrincipal) {
1:                 assertEquals("GroupPrincipal is '" + INSECURE_GROUP + "'",
1:                         INSECURE_GROUP, currentPrincipal.getName());
1:             } else {
1:                 fail("Unexpected Principal subclass found.");
1:             }
1:         }
1: 
1:         try {
1:             authBroker.removeConnection(connectionContext, connectionInfo, null);
1:         } catch (Exception e) {
1:             fail("Call to removeConnection failed: " + e.getMessage());
1:         }
1:         assertEquals("Number of removeConnection calls to underlying Broker must match number of calls made to " +
1:                 "AuthenticationBroker.", 1, receiveBroker.removeConnectionData.size());
1:     }
1: }
============================================================================