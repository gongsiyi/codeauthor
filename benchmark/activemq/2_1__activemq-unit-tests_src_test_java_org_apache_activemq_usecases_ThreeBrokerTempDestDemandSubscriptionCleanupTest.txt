1:fc706d0: /**
1:fc706d0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc706d0:  * contributor license agreements.  See the NOTICE file distributed with
1:fc706d0:  * this work for additional information regarding copyright ownership.
1:fc706d0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc706d0:  * (the "License"); you may not use this file except in compliance with
1:fc706d0:  * the License.  You may obtain a copy of the License at
1:fc706d0:  *
1:fc706d0:  * http://www.apache.org/licenses/LICENSE-2.0
1:fc706d0:  *
1:fc706d0:  * Unless required by applicable law or agreed to in writing, software
1:fc706d0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc706d0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc706d0:  * See the License for the specific language governing permissions and
1:fc706d0:  * limitations under the License.
1:fc706d0:  */
1:fc706d0: package org.apache.activemq.usecases;
1:fc706d0: 
1:fc706d0: import javax.jms.Connection;
1:fc706d0: import javax.jms.Destination;
1:fc706d0: import javax.jms.JMSException;
1:fc706d0: import javax.jms.Message;
1:fc706d0: import javax.jms.MessageConsumer;
1:fc706d0: import javax.jms.MessageListener;
1:fc706d0: import javax.jms.MessageProducer;
1:fc706d0: import javax.jms.Session;
1:fc706d0: import javax.jms.TextMessage;
1:fc706d0: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:fc706d0: import org.apache.activemq.broker.region.AbstractRegion;
1:fc706d0: import org.apache.activemq.broker.region.RegionBroker;
1:fc706d0: import org.apache.activemq.network.NetworkConnector;
1:fc706d0: import org.apache.activemq.util.Wait;
1:fc706d0: import org.slf4j.Logger;
1:fc706d0: import org.slf4j.LoggerFactory;
1:fc706d0: 
1:fc706d0: import java.net.URI;
1:fc706d0: import java.util.concurrent.ExecutorService;
1:fc706d0: import java.util.concurrent.Executors;
1:fc706d0: import java.util.concurrent.TimeUnit;
1:fc706d0: 
1:fc706d0: /**
1:fc706d0:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:fc706d0:  */
1:fc706d0: public class ThreeBrokerTempDestDemandSubscriptionCleanupTest extends JmsMultipleBrokersTestSupport {
1:fc706d0:     private static final Logger LOG = LoggerFactory.getLogger(ThreeBrokerTempDestDemandSubscriptionCleanupTest.class);
1:fc706d0: 
1:fc706d0:     boolean enableTempDestinationBridging = true;
1:fc706d0: 
1:fc706d0:     private static final String BROKER_A = "BrokerA";
1:fc706d0:     private static final String BROKER_B = "BrokerB";
1:fc706d0:     private static final String BROKER_C = "BrokerC";
1:fc706d0: 
1:fc706d0:     private static final String ECHO_QUEUE_NAME = "echo";
1:fc706d0:     private static final int NUM_ITER = 100;
1:fc706d0:     private static final long CONSUME_TIMEOUT = 500;
1:fc706d0: 
1:fc706d0: 
1:fc706d0:     /**
1:fc706d0:      * So we network three brokers together, and send a message with request-reply semantics.
1:fc706d0:      * The message goes to an echo service listening on broker C. We send a message on a queue
1:fc706d0:      * to broker A which gets demand forwarded to broker C. the echo service will respond to the
1:fc706d0:      * temp destination listed in the JMSReplyTo header. that will get demand forwarded back to
1:fc706d0:      * broker A. When the consumer of the temp dest on broker A closes, that subscription should
1:fc706d0:      * be removed on broker A. advisories firing from broker A to broker B should remove that
1:fc706d0:      * subscription on broker B. advisories firing from broker B to broker C should remove that
1:fc706d0:      * subscription on broker C.
1:fc706d0:      *
1:fc706d0:      * @throws Exception
1:fc706d0:      */
1:fc706d0:     public void testSubscriptionsCleanedUpRace() throws Exception {
1:fc706d0: 
1:fc706d0:         final BrokerItem brokerA = brokers.get(BROKER_A);
1:fc706d0: 
1:fc706d0: 
1:fc706d0:         Runnable tester = new Runnable() {
1:fc706d0: 
1:fc706d0:             @Override
1:fc706d0:             public void run() {
1:fc706d0:                 for (int i = 0; i < NUM_ITER; i++) {
1:fc706d0: 
1:fc706d0:                     Connection conn = null;
1:fc706d0:                     try {
1:fc706d0:                         conn = brokerA.createConnection();
1:fc706d0: 
1:fc706d0:                         conn.start();
1:fc706d0: 
1:fc706d0:                         final Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:fc706d0:                         Destination destination = sess.createQueue(ECHO_QUEUE_NAME);
1:fc706d0: 
1:fc706d0:                         MessageProducer producer = sess.createProducer(destination);
1:fc706d0: 
1:fc706d0:                         LOG.info("Starting iter: " + i);
1:fc706d0:                         Destination replyTo = sess.createTemporaryQueue();
1:fc706d0:                         MessageConsumer responseConsumer = sess.createConsumer(replyTo);
1:fc706d0: 
1:fc706d0:                         Message message = sess.createTextMessage("Iteration: " + i);
1:fc706d0:                         message.setJMSReplyTo(replyTo);
1:fc706d0: 
1:fc706d0:                         producer.send(message);
1:fc706d0: 
1:fc706d0:                         TextMessage response = (TextMessage)responseConsumer.receive(CONSUME_TIMEOUT);
1:fc706d0:                         assertNotNull("We should have gotten a response, but didn't for iter: " + i, response);
1:fc706d0:                         assertEquals("We got the wrong response from the echo service", "Iteration: " + i, response.getText());
1:fc706d0: 
1:fc706d0: 
1:fc706d0:                         // so we close the consumer so that an actual RemoveInfo command gets propogated through the
1:fc706d0:                         // network
1:fc706d0:                         responseConsumer.close();
1:fc706d0:                         conn.close();
1:fc706d0: 
1:fc706d0:                     } catch (Exception e) {
1:fc706d0:                         e.printStackTrace();
1:fc706d0:                         fail();
1:fc706d0:                     }
1:fc706d0: 
1:fc706d0:                 }
1:fc706d0:             }
1:fc706d0:         };
1:fc706d0: 
1:fc706d0:         ExecutorService threadService = Executors.newFixedThreadPool(2);
1:fc706d0:         threadService.submit(tester);
1:fc706d0:         threadService.submit(tester);
1:fc706d0: 
1:fc706d0:         threadService.shutdown();
1:ba2e8d4:         assertTrue("executor done on time", threadService.awaitTermination(30l, TimeUnit.SECONDS));
1:fc706d0: 
1:fc706d0:         // for the real test... we should not have any subscriptions left on broker C for the temp dests
1:fc706d0:         BrokerItem brokerC = brokers.get(BROKER_C);
1:fc706d0:         RegionBroker regionBroker = (RegionBroker) brokerC.broker.getRegionBroker();
1:fc706d0:         final AbstractRegion region = (AbstractRegion) regionBroker.getTempQueueRegion();
1:fc706d0: 
1:fc706d0:         assertTrue("There were no lingering temp-queue destinations", Wait.waitFor(new Wait.Condition() {
1:fc706d0:             @Override
1:fc706d0:             public boolean isSatisified() throws Exception {
1:fc706d0:                 LOG.info("Lingering temps: " + region.getSubscriptions().size());
1:fc706d0:                 return 0 == region.getSubscriptions().size();
1:fc706d0:             }
1:fc706d0:         }));
1:fc706d0:     }
1:fc706d0: 
1:fc706d0: 
1:fc706d0:     /**
1:fc706d0:      * This test is slightly different from the above. We don't explicitly close the consumer down
1:fc706d0:      * (which we did in the previous test to force the RemoveInfo to be sent). Here we just close
1:fc706d0:      * the connection which should still clean up the subscriptions and temp destinations on the
1:fc706d0:      * networked brokers.
1:fc706d0:      *
1:fc706d0:      * @throws Exception
1:fc706d0:      */
1:fc706d0:     public void testSubscriptionsCleanedUpAfterConnectionClose() throws Exception {
1:fc706d0: 
1:fc706d0:         final BrokerItem brokerA = brokers.get(BROKER_A);
1:fc706d0: 
1:fc706d0:         for (int i = 0; i < NUM_ITER; i++) {
1:fc706d0: 
1:fc706d0:             Connection conn = null;
1:fc706d0:             try {
1:fc706d0:                 conn = brokerA.createConnection();
1:fc706d0: 
1:fc706d0:                 conn.start();
1:fc706d0: 
1:fc706d0:                 final Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:fc706d0:                 Destination destination = sess.createQueue(ECHO_QUEUE_NAME);
1:fc706d0: 
1:fc706d0:                 MessageProducer producer = sess.createProducer(destination);
1:fc706d0: 
1:fc706d0:                 LOG.info("Starting iter: " + i);
1:fc706d0:                 Destination replyTo = sess.createTemporaryQueue();
1:fc706d0:                 MessageConsumer responseConsumer = sess.createConsumer(replyTo);
1:fc706d0: 
1:fc706d0:                 Message message = sess.createTextMessage("Iteration: " + i);
1:fc706d0:                 message.setJMSReplyTo(replyTo);
1:fc706d0: 
1:fc706d0:                 producer.send(message);
1:fc706d0: 
1:fc706d0:                 TextMessage response = (TextMessage)responseConsumer.receive(CONSUME_TIMEOUT);
1:fc706d0:                 assertNotNull("We should have gotten a response, but didn't for iter: " + i, response);
1:fc706d0:                 assertEquals("We got the wrong response from the echo service", "Iteration: " + i, response.getText());
1:fc706d0: 
1:fc706d0: 
1:fc706d0:                 // so closing the connection without closing the consumer first will leak subscriptions
1:fc706d0:                 // in a nob?
1:fc706d0: //              responseConsumer.close();
1:fc706d0:                 conn.close();
1:fc706d0: 
1:fc706d0:             } catch (Exception e) {
1:fc706d0:                 e.printStackTrace();
1:fc706d0:                 fail();
1:fc706d0:             }
1:fc706d0: 
1:fc706d0:         }
1:fc706d0: 
1:fc706d0:         // for the real test... we should not have any subscriptions left on broker C for the temp dests
1:fc706d0:         BrokerItem brokerC = brokers.get(BROKER_C);
1:fc706d0:         RegionBroker regionBroker = (RegionBroker) brokerC.broker.getRegionBroker();
1:fc706d0:         final AbstractRegion region = (AbstractRegion) regionBroker.getTempQueueRegion();
1:fc706d0: 
1:fc706d0:         assertTrue("There were no lingering temp-queue destinations", Wait.waitFor(new Wait.Condition() {
1:fc706d0:             @Override
1:fc706d0:             public boolean isSatisified() throws Exception {
1:fc706d0:                 LOG.info("Lingering temps: " + region.getSubscriptions().size());
1:fc706d0:                 return 0 == region.getSubscriptions().size();
1:fc706d0:             }
1:fc706d0:         }));
1:fc706d0: 
1:fc706d0:     }
1:fc706d0: 
1:fc706d0:     private void installEchoClientOnBrokerC() throws Exception {
1:fc706d0:         BrokerItem brokerC = brokers.get(BROKER_C);
1:fc706d0:         Connection conn = brokerC.createConnection();
1:fc706d0:         conn.start();
1:fc706d0: 
1:fc706d0:         final Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:fc706d0:         Destination destination = sess.createQueue(ECHO_QUEUE_NAME);
1:fc706d0:         MessageConsumer consumer = sess.createConsumer(destination);
1:fc706d0: 
1:fc706d0:         consumer.setMessageListener(new MessageListener() {
1:fc706d0:             @Override
1:fc706d0:             public void onMessage(Message message) {
1:fc706d0: 
1:fc706d0:                 TextMessage textMessage = (TextMessage) message;
1:fc706d0: 
1:fc706d0:                 try {
1:fc706d0:                     Destination replyTo = message.getJMSReplyTo();
1:fc706d0: 
1:fc706d0:                     MessageProducer producer = sess.createProducer(replyTo);
1:fc706d0:                     Message response = sess.createTextMessage(textMessage.getText());
1:fc706d0: 
1:fc706d0:                     LOG.info("Replying to this request: "  + textMessage.getText());
1:fc706d0:                     producer.send(response);
1:fc706d0:                     producer.close();
1:fc706d0: 
1:fc706d0:                 } catch (JMSException e) {
1:fc706d0:                     e.printStackTrace();
1:fc706d0:                     fail("Could not respond to an echo request");
1:fc706d0:                 }
1:fc706d0:             }
1:fc706d0:         });
1:fc706d0:     }
1:fc706d0: 
1:fc706d0: 
1:fc706d0:     @Override
1:fc706d0:     protected void setUp() throws Exception {
1:fc706d0:         super.setUp();
1:fc706d0:         createBroker(new URI("broker:(tcp://localhost:61616)/" + BROKER_A + "?persistent=false&useJmx=false"));
1:fc706d0:         createBroker(new URI("broker:(tcp://localhost:61617)/" + BROKER_B + "?persistent=false&useJmx=false"));
1:fc706d0:         createBroker(new URI("broker:(tcp://localhost:61618)/" + BROKER_C + "?persistent=false&useJmx=false"));
1:fc706d0: 
1:fc706d0:         bridgeBrokers("BrokerA", "BrokerB", false, 3);
1:fc706d0:         bridgeBrokers("BrokerB", "BrokerC", false, 3);
1:fc706d0: 
1:fc706d0:         startAllBrokers();
1:fc706d0: 
1:fc706d0:         // set up a listener on broker C that will demand forward subscriptions over the network
1:fc706d0:         installEchoClientOnBrokerC();
1:fc706d0:     }
1:fc706d0: 
1:fc706d0:     protected NetworkConnector bridgeBrokers(String localBrokerName, String remoteBrokerName, boolean dynamicOnly, int networkTTL) throws Exception {
1:fc706d0:         NetworkConnector connector = super.bridgeBrokers(localBrokerName, remoteBrokerName, dynamicOnly, networkTTL, true);
1:fc706d0:         connector.setBridgeTempDestinations(enableTempDestinationBridging);
1:fc706d0:         connector.setDuplex(true);
1:fc706d0:         return connector;
1:fc706d0:     }
1:fc706d0: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:ba2e8d4
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("executor done on time", threadService.awaitTermination(30l, TimeUnit.SECONDS));
commit:fc706d0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.region.AbstractRegion;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.net.URI;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class ThreeBrokerTempDestDemandSubscriptionCleanupTest extends JmsMultipleBrokersTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(ThreeBrokerTempDestDemandSubscriptionCleanupTest.class);
1: 
1:     boolean enableTempDestinationBridging = true;
1: 
1:     private static final String BROKER_A = "BrokerA";
1:     private static final String BROKER_B = "BrokerB";
1:     private static final String BROKER_C = "BrokerC";
1: 
1:     private static final String ECHO_QUEUE_NAME = "echo";
1:     private static final int NUM_ITER = 100;
1:     private static final long CONSUME_TIMEOUT = 500;
1: 
1: 
1:     /**
1:      * So we network three brokers together, and send a message with request-reply semantics.
1:      * The message goes to an echo service listening on broker C. We send a message on a queue
1:      * to broker A which gets demand forwarded to broker C. the echo service will respond to the
1:      * temp destination listed in the JMSReplyTo header. that will get demand forwarded back to
1:      * broker A. When the consumer of the temp dest on broker A closes, that subscription should
1:      * be removed on broker A. advisories firing from broker A to broker B should remove that
1:      * subscription on broker B. advisories firing from broker B to broker C should remove that
1:      * subscription on broker C.
1:      *
1:      * @throws Exception
1:      */
1:     public void testSubscriptionsCleanedUpRace() throws Exception {
1: 
1:         final BrokerItem brokerA = brokers.get(BROKER_A);
1: 
1: 
1:         Runnable tester = new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 for (int i = 0; i < NUM_ITER; i++) {
1: 
1:                     Connection conn = null;
1:                     try {
1:                         conn = brokerA.createConnection();
1: 
1:                         conn.start();
1: 
1:                         final Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         Destination destination = sess.createQueue(ECHO_QUEUE_NAME);
1: 
1:                         MessageProducer producer = sess.createProducer(destination);
1: 
1:                         LOG.info("Starting iter: " + i);
1:                         Destination replyTo = sess.createTemporaryQueue();
1:                         MessageConsumer responseConsumer = sess.createConsumer(replyTo);
1: 
1:                         Message message = sess.createTextMessage("Iteration: " + i);
1:                         message.setJMSReplyTo(replyTo);
1: 
1:                         producer.send(message);
1: 
1:                         TextMessage response = (TextMessage)responseConsumer.receive(CONSUME_TIMEOUT);
1:                         assertNotNull("We should have gotten a response, but didn't for iter: " + i, response);
1:                         assertEquals("We got the wrong response from the echo service", "Iteration: " + i, response.getText());
1: 
1: 
1:                         // so we close the consumer so that an actual RemoveInfo command gets propogated through the
1:                         // network
1:                         responseConsumer.close();
1:                         conn.close();
1: 
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                         fail();
1:                     }
1: 
1:                 }
1:             }
1:         };
1: 
1:         ExecutorService threadService = Executors.newFixedThreadPool(2);
1:         threadService.submit(tester);
1:         threadService.submit(tester);
1: 
1:         threadService.shutdown();
0:         assertTrue("executor done on time", threadService.awaitTermination(10l, TimeUnit.SECONDS));
1: 
1:         // for the real test... we should not have any subscriptions left on broker C for the temp dests
1:         BrokerItem brokerC = brokers.get(BROKER_C);
1:         RegionBroker regionBroker = (RegionBroker) brokerC.broker.getRegionBroker();
1:         final AbstractRegion region = (AbstractRegion) regionBroker.getTempQueueRegion();
1: 
1:         assertTrue("There were no lingering temp-queue destinations", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Lingering temps: " + region.getSubscriptions().size());
1:                 return 0 == region.getSubscriptions().size();
1:             }
1:         }));
1:     }
1: 
1: 
1:     /**
1:      * This test is slightly different from the above. We don't explicitly close the consumer down
1:      * (which we did in the previous test to force the RemoveInfo to be sent). Here we just close
1:      * the connection which should still clean up the subscriptions and temp destinations on the
1:      * networked brokers.
1:      *
1:      * @throws Exception
1:      */
1:     public void testSubscriptionsCleanedUpAfterConnectionClose() throws Exception {
1: 
1:         final BrokerItem brokerA = brokers.get(BROKER_A);
1: 
1:         for (int i = 0; i < NUM_ITER; i++) {
1: 
1:             Connection conn = null;
1:             try {
1:                 conn = brokerA.createConnection();
1: 
1:                 conn.start();
1: 
1:                 final Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 Destination destination = sess.createQueue(ECHO_QUEUE_NAME);
1: 
1:                 MessageProducer producer = sess.createProducer(destination);
1: 
1:                 LOG.info("Starting iter: " + i);
1:                 Destination replyTo = sess.createTemporaryQueue();
1:                 MessageConsumer responseConsumer = sess.createConsumer(replyTo);
1: 
1:                 Message message = sess.createTextMessage("Iteration: " + i);
1:                 message.setJMSReplyTo(replyTo);
1: 
1:                 producer.send(message);
1: 
1:                 TextMessage response = (TextMessage)responseConsumer.receive(CONSUME_TIMEOUT);
1:                 assertNotNull("We should have gotten a response, but didn't for iter: " + i, response);
1:                 assertEquals("We got the wrong response from the echo service", "Iteration: " + i, response.getText());
1: 
1: 
1:                 // so closing the connection without closing the consumer first will leak subscriptions
1:                 // in a nob?
1: //              responseConsumer.close();
1:                 conn.close();
1: 
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:                 fail();
1:             }
1: 
1:         }
1: 
1:         // for the real test... we should not have any subscriptions left on broker C for the temp dests
1:         BrokerItem brokerC = brokers.get(BROKER_C);
1:         RegionBroker regionBroker = (RegionBroker) brokerC.broker.getRegionBroker();
1:         final AbstractRegion region = (AbstractRegion) regionBroker.getTempQueueRegion();
1: 
1:         assertTrue("There were no lingering temp-queue destinations", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Lingering temps: " + region.getSubscriptions().size());
1:                 return 0 == region.getSubscriptions().size();
1:             }
1:         }));
1: 
1:     }
1: 
1:     private void installEchoClientOnBrokerC() throws Exception {
1:         BrokerItem brokerC = brokers.get(BROKER_C);
1:         Connection conn = brokerC.createConnection();
1:         conn.start();
1: 
1:         final Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = sess.createQueue(ECHO_QUEUE_NAME);
1:         MessageConsumer consumer = sess.createConsumer(destination);
1: 
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1: 
1:                 TextMessage textMessage = (TextMessage) message;
1: 
1:                 try {
1:                     Destination replyTo = message.getJMSReplyTo();
1: 
1:                     MessageProducer producer = sess.createProducer(replyTo);
1:                     Message response = sess.createTextMessage(textMessage.getText());
1: 
1:                     LOG.info("Replying to this request: "  + textMessage.getText());
1:                     producer.send(response);
1:                     producer.close();
1: 
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                     fail("Could not respond to an echo request");
1:                 }
1:             }
1:         });
1:     }
1: 
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         createBroker(new URI("broker:(tcp://localhost:61616)/" + BROKER_A + "?persistent=false&useJmx=false"));
1:         createBroker(new URI("broker:(tcp://localhost:61617)/" + BROKER_B + "?persistent=false&useJmx=false"));
1:         createBroker(new URI("broker:(tcp://localhost:61618)/" + BROKER_C + "?persistent=false&useJmx=false"));
1: 
1:         bridgeBrokers("BrokerA", "BrokerB", false, 3);
1:         bridgeBrokers("BrokerB", "BrokerC", false, 3);
1: 
1:         startAllBrokers();
1: 
1:         // set up a listener on broker C that will demand forward subscriptions over the network
1:         installEchoClientOnBrokerC();
1:     }
1: 
1:     protected NetworkConnector bridgeBrokers(String localBrokerName, String remoteBrokerName, boolean dynamicOnly, int networkTTL) throws Exception {
1:         NetworkConnector connector = super.bridgeBrokers(localBrokerName, remoteBrokerName, dynamicOnly, networkTTL, true);
1:         connector.setBridgeTempDestinations(enableTempDestinationBridging);
1:         connector.setDuplex(true);
1:         return connector;
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
============================================================================