1:ef0734b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:ef0734b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:ef0734b:  * Unless required by applicable law or agreed to in writing, software
1:ef0734b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ef0734b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ef0734b:  * See the License for the specific language governing permissions and
1:ef0734b:  * limitations under the License.
1:ef0734b:  */
1:ef0734b: package org.apache.activemq.command;
1:8d3ca90: 
1:ef0734b: import org.apache.activemq.state.CommandVisitor;
20:5c4bd06: 
1:ef0734b: /**
1:ef0734b:  * Used to start and stop transports as well as terminating clients.
1:25c99a6:  *
1:ef0734b:  * @openwire:marshaller code="17"
1:25c99a6:  *
1:ef0734b:  */
1:ef0734b: public class ConsumerControl extends BaseCommand {
1:5c4bd06: 
1:ef0734b:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.CONSUMER_CONTROL;
1:5c4bd06: 
1:ef0734b:     protected ConsumerId consumerId;
1:ef0734b:     protected boolean close;
1:5c4bd06:     protected boolean stop;
1:5c4bd06:     protected boolean start;
1:5c4bd06:     protected boolean flush;
1:ef0734b:     protected int prefetch;
1:8d3ca90:     protected ActiveMQDestination destination;
1:230a86c: 
1:8d3ca90:     /**
1:8d3ca90:      * @openwire:property version=6
1:8d3ca90:      * @return Returns the destination.
1:8d3ca90:      */
1:8d3ca90:     public ActiveMQDestination getDestination() {
1:8d3ca90:         return destination;
1:8d3ca90:     }
1:8d3ca90: 
1:8d3ca90:     public void setDestination(ActiveMQDestination destination) {
1:8d3ca90:         this.destination = destination;
1:8d3ca90:     }
1:5c4bd06: 
1:25c99a6:     @Override
1:ef0734b:     public byte getDataStructureType() {
1:ef0734b:         return DATA_STRUCTURE_TYPE;
1:ef0734b:     }
1:5c4bd06: 
1:25c99a6:     @Override
1:ef0734b:     public Response visit(CommandVisitor visitor) throws Exception {
1:230a86c:         return visitor.processConsumerControl(this);
1:ef0734b:     }
1:5c4bd06: 
1:25c99a6:     @Override
1:25c99a6:     public boolean isConsumerControl() {
1:25c99a6:         return true;
1:25c99a6:     }
1:25c99a6: 
1:5c4bd06:     /**
1:ef0734b:      * @openwire:property version=1
1:ef0734b:      * @return Returns the close.
1:ef0734b:      */
1:230a86c:     public boolean isClose() {
1:ef0734b:         return close;
1:ef0734b:     }
1:5c4bd06: 
1:ef0734b:     /**
1:25c99a6:      * @param close
1:25c99a6:      *        The new value to assign the close state flag.
1:ef0734b:      */
1:230a86c:     public void setClose(boolean close) {
1:230a86c:         this.close = close;
1:ef0734b:     }
1:5c4bd06: 
1:ef0734b:     /**
1:ef0734b:      * @openwire:property version=1
1:ef0734b:      * @return Returns the consumerId.
1:ef0734b:      */
1:230a86c:     public ConsumerId getConsumerId() {
1:ef0734b:         return consumerId;
1:ef0734b:     }
1:5c4bd06: 
1:ef0734b:     /**
1:25c99a6:      * @param consumerId
1:25c99a6:      *        The consumerId to set.
1:ef0734b:      */
1:230a86c:     public void setConsumerId(ConsumerId consumerId) {
1:230a86c:         this.consumerId = consumerId;
1:ef0734b:     }
1:5c4bd06: 
1:ef0734b:     /**
1:ef0734b:      * @openwire:property version=1
1:ef0734b:      * @return Returns the prefetch.
1:ef0734b:      */
1:230a86c:     public int getPrefetch() {
1:ef0734b:         return prefetch;
1:ef0734b:     }
1:5c4bd06: 
1:ef0734b:     /**
1:25c99a6:      * @param prefetch
1:25c99a6:      *        The prefetch to set.
1:ef0734b:      */
1:230a86c:     public void setPrefetch(int prefetch) {
1:230a86c:         this.prefetch = prefetch;
1:ef0734b:     }
1:5c4bd06: 
1:ef0734b:     /**
1:5c4bd06:      * @openwire:property version=2
1:5c4bd06:      * @return the flush
1:5c4bd06:      */
1:230a86c:     public boolean isFlush() {
1:5c4bd06:         return this.flush;
1:5c4bd06:     }
1:5c4bd06: 
1:5c4bd06:     /**
1:25c99a6:      * @param flush
1:25c99a6:      *        The flush value to set on this command.
1:5c4bd06:      */
1:230a86c:     public void setFlush(boolean flush) {
1:230a86c:         this.flush = flush;
1:5c4bd06:     }
1:5c4bd06: 
1:5c4bd06:     /**
1:230a86c:      * @openwire:property version=2
1:5c4bd06:      * @return the start
1:5c4bd06:      */
1:230a86c:     public boolean isStart() {
1:5c4bd06:         return this.start;
1:5c4bd06:     }
1:5c4bd06: 
1:5c4bd06:     /**
1:25c99a6:      * @param start
1:25c99a6:      *        The start value to set on this command.
1:5c4bd06:      */
1:230a86c:     public void setStart(boolean start) {
1:230a86c:         this.start = start;
1:5c4bd06:     }
1:5c4bd06: 
1:5c4bd06:     /**
1:230a86c:      * @openwire:property version=2
1:5c4bd06:      * @return the stop
1:5c4bd06:      */
1:230a86c:     public boolean isStop() {
1:5c4bd06:         return this.stop;
1:5c4bd06:     }
1:5c4bd06: 
1:5c4bd06:     /**
1:25c99a6:      * @param stop
1:25c99a6:      *        the stop value to set on this Command.
1:5c4bd06:      */
1:230a86c:     public void setStop(boolean stop) {
1:230a86c:         this.stop = stop;
1:5c4bd06:     }
1:ef0734b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:25c99a6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     public boolean isConsumerControl() {
1:         return true;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param close
1:      *        The new value to assign the close state flag.
/////////////////////////////////////////////////////////////////////////
1:      * @param consumerId
1:      *        The consumerId to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param prefetch
1:      *        The prefetch to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param flush
1:      *        The flush value to set on this command.
/////////////////////////////////////////////////////////////////////////
1:      * @param start
1:      *        The start value to set on this command.
/////////////////////////////////////////////////////////////////////////
1:      * @param stop
1:      *        the stop value to set on this Command.
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         return visitor.processConsumerControl(this);
1:     public boolean isClose() {
1:     public void setClose(boolean close) {
1:         this.close = close;
1:     public ConsumerId getConsumerId() {
1:     public void setConsumerId(ConsumerId consumerId) {
1:         this.consumerId = consumerId;
1:     public int getPrefetch() {
1:     public void setPrefetch(int prefetch) {
1:         this.prefetch = prefetch;
1:     public boolean isFlush() {
1:     public void setFlush(boolean flush) {
1:         this.flush = flush;
1:      * @openwire:property version=2
1:     public boolean isStart() {
1:     public void setStart(boolean start) {
1:         this.start = start;
1:      * @openwire:property version=2
1:     public boolean isStop() {
1:     public void setStop(boolean stop) {
1:         this.stop = stop;
commit:fb3b6db
/////////////////////////////////////////////////////////////////////////
0:     	return visitor.processConsumerControl(this);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:8d3ca90
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination destination;
1: 
1:     /**
1:      * @openwire:property version=6
1:      * @return Returns the destination.
1:      */
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
1: 
1:     public void setDestination(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:5c4bd06
/////////////////////////////////////////////////////////////////////////
1:     protected boolean stop;
1:     protected boolean start;
1:     protected boolean flush;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1:     
1:     /**
1:      * @openwire:property version=2
1:      * @return the flush
1:      */
0:     public boolean isFlush(){
1:         return this.flush;
1:     }
1: 
1: 
1: 
1: 
1: 
1:     
1:     /**
0:      * @param flush the flush to set
1:      */
0:     public void setFlush(boolean flush){
0:         this.flush=flush;
1:     }
1: 
1: 
1: 
1: 
1: 
1:     
1:     /**
0:      *  @openwire:property version=2
1:      * @return the start
1:      */
0:     public boolean isStart(){
1:         return this.start;
1:     }
1: 
1: 
1: 
1: 
1: 
1:     
1:     /**
0:      * @param start the start to set
1:      */
0:     public void setStart(boolean start){
0:         this.start=start;
1:     }
1: 
1: 
1: 
1: 
1: 
1:     
1:     /**
0:      *  @openwire:property version=2
1:      * @return the stop
1:      */
0:     public boolean isStop(){
1:         return this.stop;
1:     }
1: 
1: 
1: 
1: 
1: 
1:     
1:     /**
0:      * @param stop the stop to set
1:      */
0:     public void setStop(boolean stop){
0:         this.stop=stop;
1:     }
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
0: 
1: import org.apache.activemq.state.CommandVisitor;
0: 
1: /**
1:  * Used to start and stop transports as well as terminating clients.
1:  * 
1:  * @openwire:marshaller code="17"
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class ConsumerControl extends BaseCommand {
0: 
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.CONSUMER_CONTROL;
0: 
1:     protected ConsumerId consumerId;
1:     protected boolean close;
1:     protected int prefetch;
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
0: 
0:     
0: 
0:    
0: 
1:     public Response visit(CommandVisitor visitor) throws Exception {
0:     return null;
1:     }
0: 
0: 
0: 
0: 
0: 
1:     /**
1:      * @openwire:property version=1
1:      * @return Returns the close.
1:      */
0:     public boolean isClose(){
1:         return close;
1:     }
0: 
0: 
0: 
0: 
0: 
1:     /**
0:      * @param close The close to set.
1:      */
0:     public void setClose(boolean close){
0:         this.close=close;
1:     }
0: 
0: 
0: 
0: 
0: 
1:     /**
1:      * @openwire:property version=1
1:      * @return Returns the consumerId.
1:      */
0:     public ConsumerId getConsumerId(){
1:         return consumerId;
1:     }
0: 
0: 
0: 
0: 
0: 
1:     /**
0:      * @param consumerId The consumerId to set.
1:      */
0:     public void setConsumerId(ConsumerId consumerId){
0:         this.consumerId=consumerId;
1:     }
0: 
0: 
0: 
0: 
0: 
1:     /**
1:      * @openwire:property version=1
1:      * @return Returns the prefetch.
1:      */
0:     public int getPrefetch(){
1:         return prefetch;
1:     }
0: 
0: 
0: 
0: 
0: 
1:     /**
0:      * @param prefetch The prefetch to set.
1:      */
0:     public void setPrefetch(int prefetch){
0:         this.prefetch=prefetch;
1:     }
1: }
============================================================================