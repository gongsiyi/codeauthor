1:49f16ce: /**
1:49f16ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:49f16ce:  * contributor license agreements.  See the NOTICE file distributed with
1:49f16ce:  * this work for additional information regarding copyright ownership.
1:49f16ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:49f16ce:  * (the "License"); you may not use this file except in compliance with
1:49f16ce:  * the License.  You may obtain a copy of the License at
1:49f16ce:  *
1:49f16ce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:49f16ce:  *
1:49f16ce:  * Unless required by applicable law or agreed to in writing, software
1:49f16ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:49f16ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:49f16ce:  * See the License for the specific language governing permissions and
1:49f16ce:  * limitations under the License.
1:49f16ce:  */
4:49f16ce: 
1:b66559e: package org.apache.activemq.jms.pool;
1:49f16ce: 
1:49f16ce: import static org.junit.Assert.assertNotNull;
1:49f16ce: import static org.junit.Assert.assertNull;
1:49f16ce: import static org.junit.Assert.assertTrue;
1:49f16ce: 
1:49f16ce: import java.util.concurrent.TimeUnit;
1:49f16ce: 
1:49f16ce: import javax.jms.Connection;
1:49f16ce: import javax.jms.JMSException;
1:49f16ce: import javax.jms.MessageConsumer;
1:49f16ce: import javax.jms.MessageProducer;
1:49f16ce: import javax.jms.Session;
1:49f16ce: 
1:49f16ce: import org.apache.activemq.ActiveMQConnectionFactory;
1:49f16ce: import org.apache.activemq.broker.BrokerService;
1:49f16ce: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:49f16ce: import org.apache.activemq.command.ActiveMQQueue;
1:49f16ce: import org.apache.activemq.util.Wait;
1:49f16ce: import org.junit.After;
1:49f16ce: import org.junit.Before;
1:49f16ce: import org.junit.Test;
1:49f16ce: 
1:e6597c4: public class PooledConnectionSessionCleanupTest extends JmsPoolTestSupport {
1:49f16ce: 
1:49f16ce:     protected ActiveMQConnectionFactory directConnFact;
1:49f16ce:     protected Connection directConn1;
1:49f16ce:     protected Connection directConn2;
1:49f16ce: 
1:49f16ce:     protected PooledConnectionFactory pooledConnFact;
1:49f16ce:     protected Connection pooledConn1;
1:49f16ce:     protected Connection pooledConn2;
1:49f16ce: 
1:49f16ce:     private final ActiveMQQueue queue = new ActiveMQQueue("ContendedQueue");
1:49f16ce:     private final int MESSAGE_COUNT = 50;
1:49f16ce: 
1:49f16ce:     /**
1:49f16ce:      * Prepare to run a test case: create, configure, and start the embedded
1:49f16ce:      * broker, as well as creating the client connections to the broker.
1:49f16ce:      */
1:e6597c4:     @Override
1:49f16ce:     @Before
1:e6597c4:     public void setUp() throws java.lang.Exception {
1:e6597c4:         super.setUp();
1:e6597c4: 
1:e6597c4:         brokerService = new BrokerService();
1:e6597c4:         brokerService.setBrokerName("PooledConnectionSessionCleanupTestBroker");
1:e6597c4:         brokerService.setUseJmx(true);
1:e6597c4:         brokerService.getManagementContext().setCreateConnector(false);
1:e6597c4:         brokerService.setPersistent(false);
1:e6597c4:         brokerService.setSchedulerSupport(false);
1:e6597c4:         brokerService.setAdvisorySupport(false);
1:e6597c4:         brokerService.start();
1:e6597c4:         brokerService.waitUntilStarted();
1:49f16ce: 
1:49f16ce:         // Create the ActiveMQConnectionFactory and the PooledConnectionFactory.
1:49f16ce:         // Set a long idle timeout on the pooled connections to better show the
1:49f16ce:         // problem of holding onto created resources on close.
1:e6597c4:         directConnFact = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:b66559e:         pooledConnFact = new PooledConnectionFactory();
1:b66559e:         pooledConnFact.setConnectionFactory(directConnFact);
1:49f16ce:         pooledConnFact.setIdleTimeout((int)TimeUnit.MINUTES.toMillis(60));
1:49f16ce:         pooledConnFact.setMaxConnections(1);
1:49f16ce: 
1:49f16ce:         // Prepare the connections
1:49f16ce:         directConn1 = directConnFact.createConnection();
1:49f16ce:         directConn1.start();
1:49f16ce:         directConn2 = directConnFact.createConnection();
1:49f16ce:         directConn2.start();
1:49f16ce: 
1:49f16ce:         // The pooled Connections should have the same underlying connection
1:49f16ce:         pooledConn1 = pooledConnFact.createConnection();
1:49f16ce:         pooledConn1.start();
1:49f16ce:         pooledConn2 = pooledConnFact.createConnection();
1:49f16ce:         pooledConn2.start();
4:49f16ce:     }
1:49f16ce: 
1:e6597c4:     @Override
1:49f16ce:     @After
1:e6597c4:     public void tearDown() throws java.lang.Exception {
2:49f16ce:         try {
1:7a7d551:             if (pooledConn1 != null) {
1:7a7d551:                 pooledConn1.close();
1:7a7d551:             }
2:49f16ce:         } catch (JMSException jms_exc) {
1:49f16ce:         }
1:49f16ce:         try {
1:7a7d551:             if (pooledConn2 != null) {
1:7a7d551:                 pooledConn2.close();
1:7a7d551:             }
1:49f16ce:         } catch (JMSException jms_exc) {
1:49f16ce:         }
1:49f16ce:         try {
1:7a7d551:             if (directConn1 != null) {
1:7a7d551:                 directConn1.close();
1:7a7d551:             }
1:49f16ce:         } catch (JMSException jms_exc) {
1:49f16ce:         }
1:49f16ce:         try {
1:7a7d551:             if (directConn2 != null) {
1:7a7d551:                 directConn2.close();
1:7a7d551:             }
1:49f16ce:         } catch (JMSException jms_exc) {
1:7a7d551:         }
1:e6597c4: 
1:e6597c4:         super.tearDown();
1:49f16ce:     }
1:49f16ce: 
1:49f16ce:     private void produceMessages() throws Exception {
1:49f16ce: 
1:49f16ce:         Session session = directConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:49f16ce:         MessageProducer producer = session.createProducer(queue);
1:49f16ce:         for (int i = 0; i < MESSAGE_COUNT; ++i) {
1:49f16ce:             producer.send(session.createTextMessage("Test Message: " + i));
1:49f16ce:         }
1:49f16ce:         producer.close();
1:49f16ce:     }
1:49f16ce: 
1:e6597c4:     @Test(timeout = 60000)
1:49f16ce:     public void testLingeringPooledSessionsHoldingPrefetchedMessages() throws Exception {
1:49f16ce: 
1:49f16ce:         produceMessages();
1:49f16ce: 
1:49f16ce:         Session pooledSession1 = pooledConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:49f16ce:         pooledSession1.createConsumer(queue);
1:49f16ce: 
1:49f16ce:         final QueueViewMBean view = getProxyToQueue(queue.getPhysicalName());
1:49f16ce: 
1:49f16ce:         assertTrue("Should have all sent messages in flight:", Wait.waitFor(new Wait.Condition() {
1:49f16ce: 
1:49f16ce:             @Override
1:49f16ce:             public boolean isSatisified() throws Exception {
1:49f16ce:                 return view.getInFlightCount() == MESSAGE_COUNT;
1:49f16ce:             }
1:e6597c4:         }, TimeUnit.SECONDS.toMillis(20), TimeUnit.MILLISECONDS.toMillis(25)));
1:49f16ce: 
1:49f16ce:         // While all the message are in flight we should get anything on this consumer.
1:49f16ce:         Session session = directConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:49f16ce:         MessageConsumer consumer = session.createConsumer(queue);
1:e6597c4:         assertNull(consumer.receive(1000));
1:49f16ce: 
2:49f16ce:         pooledConn1.close();
1:49f16ce: 
1:49f16ce:         assertTrue("Should have only one consumer now:", Wait.waitFor(new Wait.Condition() {
1:49f16ce: 
1:49f16ce:             @Override
1:49f16ce:             public boolean isSatisified() throws Exception {
1:49f16ce:                 return view.getSubscriptions().length == 1;
1:49f16ce:             }
1:e6597c4:         }, TimeUnit.SECONDS.toMillis(20), TimeUnit.MILLISECONDS.toMillis(25)));
1:49f16ce: 
1:49f16ce:         // Now we'd expect that the message stuck in the prefetch of the pooled session's
1:49f16ce:         // consumer would be rerouted to the non-pooled session's consumer.
1:49f16ce:         assertNotNull(consumer.receive(10000));
1:49f16ce:     }
1:49f16ce: 
1:e6597c4:     @Test(timeout = 60000)
1:49f16ce:     public void testNonPooledConnectionCloseNotHoldingPrefetchedMessages() throws Exception {
1:49f16ce: 
1:49f16ce:         produceMessages();
1:49f16ce: 
1:49f16ce:         Session directSession = directConn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:49f16ce:         directSession.createConsumer(queue);
1:49f16ce: 
1:49f16ce:         final QueueViewMBean view = getProxyToQueue(queue.getPhysicalName());
1:49f16ce: 
1:49f16ce:         assertTrue("Should have all sent messages in flight:", Wait.waitFor(new Wait.Condition() {
1:49f16ce: 
1:49f16ce:             @Override
1:49f16ce:             public boolean isSatisified() throws Exception {
1:49f16ce:                 return view.getInFlightCount() == MESSAGE_COUNT;
1:49f16ce:             }
1:e6597c4:         }, TimeUnit.SECONDS.toMillis(20), TimeUnit.MILLISECONDS.toMillis(25)));
1:49f16ce: 
1:49f16ce:         // While all the message are in flight we should get anything on this consumer.
1:49f16ce:         Session session = directConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:49f16ce:         MessageConsumer consumer = session.createConsumer(queue);
1:e6597c4:         assertNull(consumer.receive(1000));
1:49f16ce: 
2:49f16ce:         directConn2.close();
1:49f16ce: 
1:49f16ce:         assertTrue("Should have only one consumer now:", Wait.waitFor(new Wait.Condition() {
1:49f16ce: 
1:49f16ce:             @Override
1:49f16ce:             public boolean isSatisified() throws Exception {
1:49f16ce:                 return view.getSubscriptions().length == 1;
1:49f16ce:             }
1:e6597c4:         }, TimeUnit.SECONDS.toMillis(20), TimeUnit.MILLISECONDS.toMillis(25)));
1:49f16ce: 
1:49f16ce:         // Now we'd expect that the message stuck in the prefetch of the first session's
1:49f16ce:         // consumer would be rerouted to the alternate session's consumer.
1:49f16ce:         assertNotNull(consumer.receive(10000));
1:49f16ce:     }
1:49f16ce: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class PooledConnectionSessionCleanupTest extends JmsPoolTestSupport {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void setUp() throws java.lang.Exception {
1:         super.setUp();
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setBrokerName("PooledConnectionSessionCleanupTestBroker");
1:         brokerService.setUseJmx(true);
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.setPersistent(false);
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:         directConnFact = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void tearDown() throws java.lang.Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:         super.tearDown();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(20), TimeUnit.MILLISECONDS.toMillis(25)));
1:         assertNull(consumer.receive(1000));
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(20), TimeUnit.MILLISECONDS.toMillis(25)));
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(20), TimeUnit.MILLISECONDS.toMillis(25)));
1:         assertNull(consumer.receive(1000));
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(20), TimeUnit.MILLISECONDS.toMillis(25)));
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
/////////////////////////////////////////////////////////////////////////
1:         pooledConnFact = new PooledConnectionFactory();
1:         pooledConnFact.setConnectionFactory(directConnFact);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7a7d551
/////////////////////////////////////////////////////////////////////////
0:         service.setBrokerName("PooledConnectionSessionCleanupTestBroker");
/////////////////////////////////////////////////////////////////////////
1:             if (pooledConn1 != null) {
1:                 pooledConn1.close();
1:             }
1:             if (pooledConn2 != null) {
1:                 pooledConn2.close();
1:             }
1:             if (directConn1 != null) {
1:                 directConn1.close();
1:             }
1:             if (directConn2 != null) {
1:                 directConn2.close();
1:             }
0:             if (service != null) {
0:                 service.stop();
0:                 service.waitUntilStopped();
0:                 service = null;
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 + ",type=Broker,brokerName=" + service.getBrokerName());
commit:e06c23e
/////////////////////////////////////////////////////////////////////////
0:                 + ":destinationType=Queue,destinationName=" + name
0:                 + ",type=Broker,brokerName=localhost");
commit:49f16ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.activemq.pool;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import javax.management.MalformedObjectNameException;
0: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: public class PooledConnectionSessionCleanupTest {
1: 
0:     @SuppressWarnings("unused")
0:     private static final Logger LOG = LoggerFactory.getLogger(PooledConnectionSessionCleanupTest.class);
1: 
0:     protected BrokerService service;
1: 
1:     protected ActiveMQConnectionFactory directConnFact;
1:     protected Connection directConn1;
1:     protected Connection directConn2;
1: 
1:     protected PooledConnectionFactory pooledConnFact;
1:     protected Connection pooledConn1;
1:     protected Connection pooledConn2;
1: 
1:     private final ActiveMQQueue queue = new ActiveMQQueue("ContendedQueue");
1:     private final int MESSAGE_COUNT = 50;
1: 
1:     /**
1:      * Prepare to run a test case: create, configure, and start the embedded
1:      * broker, as well as creating the client connections to the broker.
1:      */
1:     @Before
0:     public void prepTest() throws java.lang.Exception {
0:         service = new BrokerService();
0:         service.setUseJmx(true);
0:         service.setPersistent(false);
0:         service.setSchedulerSupport(false);
0:         service.start();
0:         service.waitUntilStarted();
1: 
1:         // Create the ActiveMQConnectionFactory and the PooledConnectionFactory.
1:         // Set a long idle timeout on the pooled connections to better show the
1:         // problem of holding onto created resources on close.
0:         directConnFact = new ActiveMQConnectionFactory(service.getVmConnectorURI());
0:         pooledConnFact = new PooledConnectionFactory(directConnFact);
1:         pooledConnFact.setIdleTimeout((int)TimeUnit.MINUTES.toMillis(60));
1:         pooledConnFact.setMaxConnections(1);
1: 
1:         // Prepare the connections
1:         directConn1 = directConnFact.createConnection();
1:         directConn1.start();
1:         directConn2 = directConnFact.createConnection();
1:         directConn2.start();
1: 
1:         // The pooled Connections should have the same underlying connection
1:         pooledConn1 = pooledConnFact.createConnection();
1:         pooledConn1.start();
1:         pooledConn2 = pooledConnFact.createConnection();
1:         pooledConn2.start();
1:     }
1: 
1:     @After
0:     public void cleanupTest() throws java.lang.Exception {
1:         try {
1:             pooledConn1.close();
1:         } catch (JMSException jms_exc) {
1:         }
1:         try {
0:             pooledConn2.close();
1:         } catch (JMSException jms_exc) {
1:         }
1:         try {
0:             directConn1.close();
1:         } catch (JMSException jms_exc) {
1:         }
1:         try {
1:             directConn2.close();
1:         } catch (JMSException jms_exc) {
1:         }
1:         try {
0:             service.stop();
1:         } catch (JMSException jms_exc) {
1:         }
1:     }
1: 
1:     private void produceMessages() throws Exception {
1: 
1:         Session session = directConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < MESSAGE_COUNT; ++i) {
1:             producer.send(session.createTextMessage("Test Message: " + i));
1:         }
1:         producer.close();
1:     }
1: 
0:     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
0:                 + ":Type=Queue,Destination=" + name
0:                 + ",BrokerName=localhost");
0:         QueueViewMBean proxy = (QueueViewMBean) service.getManagementContext()
0:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
0:         return proxy;
1:     }
1: 
0:     @Test
1:     public void testLingeringPooledSessionsHoldingPrefetchedMessages() throws Exception {
1: 
1:         produceMessages();
1: 
1:         Session pooledSession1 = pooledConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         pooledSession1.createConsumer(queue);
1: 
1:         final QueueViewMBean view = getProxyToQueue(queue.getPhysicalName());
1: 
1:         assertTrue("Should have all sent messages in flight:", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getInFlightCount() == MESSAGE_COUNT;
1:             }
0:         }));
1: 
1:         // While all the message are in flight we should get anything on this consumer.
1:         Session session = directConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         assertNull(consumer.receive(2000));
1: 
1:         pooledConn1.close();
1: 
1:         assertTrue("Should have only one consumer now:", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getSubscriptions().length == 1;
1:             }
0:         }));
1: 
1:         // Now we'd expect that the message stuck in the prefetch of the pooled session's
1:         // consumer would be rerouted to the non-pooled session's consumer.
1:         assertNotNull(consumer.receive(10000));
1:     }
1: 
0:     @Test
1:     public void testNonPooledConnectionCloseNotHoldingPrefetchedMessages() throws Exception {
1: 
1:         produceMessages();
1: 
1:         Session directSession = directConn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         directSession.createConsumer(queue);
1: 
1:         final QueueViewMBean view = getProxyToQueue(queue.getPhysicalName());
1: 
1:         assertTrue("Should have all sent messages in flight:", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getInFlightCount() == MESSAGE_COUNT;
1:             }
0:         }));
1: 
1:         // While all the message are in flight we should get anything on this consumer.
1:         Session session = directConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         assertNull(consumer.receive(2000));
1: 
1:         directConn2.close();
1: 
1:         assertTrue("Should have only one consumer now:", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getSubscriptions().length == 1;
1:             }
0:         }));
1: 
1:         // Now we'd expect that the message stuck in the prefetch of the first session's
1:         // consumer would be rerouted to the alternate session's consumer.
1:         assertNotNull(consumer.receive(10000));
1:     }
1: }
============================================================================