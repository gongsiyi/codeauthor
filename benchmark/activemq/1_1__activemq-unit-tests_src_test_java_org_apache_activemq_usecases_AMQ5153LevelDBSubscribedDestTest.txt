1:01f56d0: /**
1:01f56d0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:01f56d0:  * contributor license agreements.  See the NOTICE file distributed with
1:01f56d0:  * this work for additional information regarding copyright ownership.
1:01f56d0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:01f56d0:  * (the "License"); you may not use this file except in compliance with
1:01f56d0:  * the License.  You may obtain a copy of the License at
1:01f56d0:  *
1:01f56d0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:01f56d0:  *
1:01f56d0:  * Unless required by applicable law or agreed to in writing, software
1:01f56d0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01f56d0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01f56d0:  * See the License for the specific language governing permissions and
1:01f56d0:  * limitations under the License.
1:01f56d0:  */
1:01f56d0: package org.apache.activemq.usecases;
1:01f56d0: 
1:01f56d0: import org.apache.activemq.ActiveMQConnectionFactory;
1:01f56d0: import org.apache.activemq.broker.BrokerFactory;
1:01f56d0: import org.apache.activemq.broker.BrokerService;
1:01f56d0: import org.apache.activemq.broker.region.*;
1:01f56d0: import org.apache.activemq.command.ActiveMQDestination;
1:01f56d0: import org.junit.Test;
1:01f56d0: import org.slf4j.Logger;
1:01f56d0: import org.slf4j.LoggerFactory;
1:01f56d0: 
1:01f56d0: import javax.jms.*;
1:01f56d0: import javax.jms.Destination;
1:01f56d0: import javax.jms.Topic;
1:01f56d0: import java.net.URI;
1:01f56d0: 
1:01f56d0: /**
1:01f56d0:  * Created by ceposta
1:01f56d0:  * <a href="http://christianposta.com/blog>http://christianposta.com/blog</a>.
1:01f56d0:  */
1:01f56d0: public class AMQ5153LevelDBSubscribedDestTest extends org.apache.activemq.TestSupport {
1:01f56d0: 
1:01f56d0:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5153LevelDBSubscribedDestTest.class);
1:01f56d0:     protected BrokerService brokerService;
1:01f56d0: 
1:01f56d0:     @Override
1:01f56d0:     protected void setUp() throws Exception {
1:01f56d0:         super.setUp();
1:01f56d0:         brokerService = createBroker();
1:01f56d0:         getConnectionFactory().setClientID(getName());
1:01f56d0:     }
1:01f56d0: 
1:01f56d0:     @Override
1:01f56d0:     protected void tearDown() throws Exception {
1:01f56d0:         brokerService.stop();
1:01f56d0:         brokerService.waitUntilStopped();
1:01f56d0:     }
1:01f56d0: 
1:01f56d0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:01f56d0:         return new ActiveMQConnectionFactory("vm://localhost");
1:01f56d0:     }
1:01f56d0: 
1:01f56d0:     protected BrokerService createBroker() throws Exception {
1:01f56d0:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=true"));
1:01f56d0:         setPersistenceAdapter(broker, PersistenceAdapterChoice.LevelDB);
1:01f56d0:         broker.deleteAllMessages();
1:01f56d0:         broker.start();
1:01f56d0:         broker.waitUntilStarted();
1:01f56d0:         return broker;
1:01f56d0:     }
1:01f56d0:     
1:01f56d0:     @Test
1:01f56d0:     public void testWildcardDurableSubscriptions() throws Exception {
1:01f56d0: 
1:01f56d0:         Destination wildcardJmsDest = createDestination("testing.durable.>");
1:01f56d0:         Destination testJmsDest = createDestination("testing.durable.test");
1:01f56d0: 
1:01f56d0:         Connection conn = createConnection();
1:01f56d0:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:01f56d0:         MessageConsumer wildcardConsumer = sess.createDurableSubscriber((Topic) wildcardJmsDest, "durable1");
1:01f56d0:         MessageConsumer testConsumer = sess.createDurableSubscriber((Topic) testJmsDest, "durable2");
1:01f56d0: 
1:01f56d0: 
1:01f56d0:         MessageProducer producer = sess.createProducer(createDestination("testing.durable.>"));
1:01f56d0:         producer.send(sess.createTextMessage("hello!"));
1:01f56d0: 
1:01f56d0:         org.apache.activemq.broker.region.Topic wildcardDest = (org.apache.activemq.broker.region.Topic) getDestination(brokerService, ActiveMQDestination.transform(wildcardJmsDest));
1:01f56d0:         org.apache.activemq.broker.region.Topic testDest = (org.apache.activemq.broker.region.Topic) getDestination(brokerService, ActiveMQDestination.transform(testJmsDest));
1:01f56d0: 
1:01f56d0: 
1:01f56d0:         wildcardConsumer.close();
1:01f56d0:         testConsumer.close();
1:01f56d0:         conn.close();
1:01f56d0: 
1:01f56d0:         assertEquals(1, wildcardDest.getDurableTopicSubs().size());
1:01f56d0:         assertEquals(2, testDest.getDurableTopicSubs().size());
1:01f56d0: 
1:01f56d0:         LOG.info("Stopping broker...");
1:01f56d0:         brokerService.stop();
1:01f56d0:         brokerService.waitUntilStopped();
1:01f56d0: 
1:01f56d0:         setPersistenceAdapter(brokerService, PersistenceAdapterChoice.LevelDB);
1:01f56d0:         brokerService.start(true);
1:01f56d0:         brokerService.waitUntilStarted();
1:01f56d0: 
1:01f56d0: 
1:01f56d0:         wildcardDest = (org.apache.activemq.broker.region.Topic) getDestination(brokerService, ActiveMQDestination.transform(wildcardJmsDest));
1:01f56d0:         assertNotNull(wildcardDest);
1:01f56d0:         testDest = (org.apache.activemq.broker.region.Topic) getDestination(brokerService, ActiveMQDestination.transform(testJmsDest));
1:01f56d0:         assertNotNull(testDest);
1:01f56d0: 
1:01f56d0:         assertEquals(2, testDest.getDurableTopicSubs().size());
1:01f56d0:         assertEquals(1, wildcardDest.getDurableTopicSubs().size());
1:01f56d0: 
1:01f56d0:     }
1:01f56d0: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:01f56d0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.*;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.*;
1: import javax.jms.Destination;
1: import javax.jms.Topic;
1: import java.net.URI;
1: 
1: /**
1:  * Created by ceposta
1:  * <a href="http://christianposta.com/blog>http://christianposta.com/blog</a>.
1:  */
1: public class AMQ5153LevelDBSubscribedDestTest extends org.apache.activemq.TestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5153LevelDBSubscribedDestTest.class);
1:     protected BrokerService brokerService;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         brokerService = createBroker();
1:         getConnectionFactory().setClientID(getName());
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://localhost");
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=true"));
1:         setPersistenceAdapter(broker, PersistenceAdapterChoice.LevelDB);
1:         broker.deleteAllMessages();
1:         broker.start();
1:         broker.waitUntilStarted();
1:         return broker;
1:     }
1:     
1:     @Test
1:     public void testWildcardDurableSubscriptions() throws Exception {
1: 
1:         Destination wildcardJmsDest = createDestination("testing.durable.>");
1:         Destination testJmsDest = createDestination("testing.durable.test");
1: 
1:         Connection conn = createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer wildcardConsumer = sess.createDurableSubscriber((Topic) wildcardJmsDest, "durable1");
1:         MessageConsumer testConsumer = sess.createDurableSubscriber((Topic) testJmsDest, "durable2");
1: 
1: 
1:         MessageProducer producer = sess.createProducer(createDestination("testing.durable.>"));
1:         producer.send(sess.createTextMessage("hello!"));
1: 
1:         org.apache.activemq.broker.region.Topic wildcardDest = (org.apache.activemq.broker.region.Topic) getDestination(brokerService, ActiveMQDestination.transform(wildcardJmsDest));
1:         org.apache.activemq.broker.region.Topic testDest = (org.apache.activemq.broker.region.Topic) getDestination(brokerService, ActiveMQDestination.transform(testJmsDest));
1: 
1: 
1:         wildcardConsumer.close();
1:         testConsumer.close();
1:         conn.close();
1: 
1:         assertEquals(1, wildcardDest.getDurableTopicSubs().size());
1:         assertEquals(2, testDest.getDurableTopicSubs().size());
1: 
1:         LOG.info("Stopping broker...");
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1: 
1:         setPersistenceAdapter(brokerService, PersistenceAdapterChoice.LevelDB);
1:         brokerService.start(true);
1:         brokerService.waitUntilStarted();
1: 
1: 
1:         wildcardDest = (org.apache.activemq.broker.region.Topic) getDestination(brokerService, ActiveMQDestination.transform(wildcardJmsDest));
1:         assertNotNull(wildcardDest);
1:         testDest = (org.apache.activemq.broker.region.Topic) getDestination(brokerService, ActiveMQDestination.transform(testJmsDest));
1:         assertNotNull(testDest);
1: 
1:         assertEquals(2, testDest.getDurableTopicSubs().size());
1:         assertEquals(1, wildcardDest.getDurableTopicSubs().size());
1: 
1:     }
1: }
============================================================================