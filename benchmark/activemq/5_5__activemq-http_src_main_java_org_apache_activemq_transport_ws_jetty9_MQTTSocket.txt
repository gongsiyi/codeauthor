1:33ec1cf: /**
1:33ec1cf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:33ec1cf:  * contributor license agreements.  See the NOTICE file distributed with
1:33ec1cf:  * this work for additional information regarding copyright ownership.
1:33ec1cf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:33ec1cf:  * (the "License"); you may not use this file except in compliance with
1:33ec1cf:  * the License.  You may obtain a copy of the License at
1:33ec1cf:  *
1:33ec1cf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:33ec1cf:  *
1:33ec1cf:  * Unless required by applicable law or agreed to in writing, software
1:33ec1cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:33ec1cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33ec1cf:  * See the License for the specific language governing permissions and
1:33ec1cf:  * limitations under the License.
1:33ec1cf:  */
1:3f82625: package org.apache.activemq.transport.ws.jetty9;
1:bc4f4e9: 
1:be10b86: import java.io.IOException;
1:be10b86: import java.nio.ByteBuffer;
1:96494f7: import java.util.concurrent.TimeUnit;
1:bd442a3: import java.util.concurrent.atomic.AtomicBoolean;
1:be10b86: 
1:e69367f: import org.apache.activemq.transport.mqtt.MQTTCodec;
1:be10b86: import org.apache.activemq.transport.ws.AbstractMQTTSocket;
1:33ec1cf: import org.apache.activemq.util.ByteSequence;
1:33ec1cf: import org.apache.activemq.util.IOExceptionSupport;
1:3f82625: import org.eclipse.jetty.websocket.api.Session;
1:3f82625: import org.eclipse.jetty.websocket.api.WebSocketListener;
1:e69367f: import org.fusesource.hawtbuf.Buffer;
1:e69367f: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1:33ec1cf: import org.fusesource.mqtt.codec.DISCONNECT;
1:33ec1cf: import org.fusesource.mqtt.codec.MQTTFrame;
1:33ec1cf: import org.slf4j.Logger;
1:33ec1cf: import org.slf4j.LoggerFactory;
1:3f82625: 
1:e69367f: public class MQTTSocket extends AbstractMQTTSocket implements MQTTCodec.MQTTFrameSink, WebSocketListener {
1:bc4f4e9: 
1:33ec1cf:     private static final Logger LOG = LoggerFactory.getLogger(MQTTSocket.class);
1:27edaff: 
1:96494f7:     private final int ORDERLY_CLOSE_TIMEOUT = 10;
1:27edaff:     private Session session;
1:e69367f:     private final AtomicBoolean receivedDisconnect = new AtomicBoolean();
1:e69367f: 
1:e69367f:     private final MQTTCodec codec;
19:33ec1cf: 
1:be10b86:     public MQTTSocket(String remoteAddress) {
1:be10b86:         super(remoteAddress);
1:e69367f: 
1:e69367f:         this.codec = new MQTTCodec(this, getWireFormat());
1:3f82625:     }
1:3f82625: 
1:3f82625:     @Override
1:33ec1cf:     public void sendToMQTT(MQTTFrame command) throws IOException {
1:33ec1cf:         ByteSequence bytes = wireFormat.marshal(command);
1:450cabe:         try {
1:450cabe:             //timeout after a period of time so we don't wait forever and hold the protocol lock
1:450cabe:             session.getRemote().sendBytesByFuture(
1:450cabe:                     ByteBuffer.wrap(bytes.getData(), 0, bytes.getLength())).get(getDefaultSendTimeOut(), TimeUnit.SECONDS);
1:450cabe:         } catch (Exception e) {
1:450cabe:             throw IOExceptionSupport.create(e);
1:450cabe:         }
1:3f82625:     }
1:3f82625: 
1:bc4f4e9:     @Override
1:27edaff:     public void handleStopped() throws IOException {
1:27edaff:         if (session != null && session.isOpen()) {
1:27edaff:             session.close();
1:27edaff:         }
1:27edaff:     }
1:27edaff: 
1:27edaff:     //----- WebSocket.OnTextMessage callback handlers ------------------------//
1:27edaff: 
1:27edaff:     @Override
1:3f82625:     public void onWebSocketBinary(byte[] bytes, int offset, int length) {
1:3f82625:         if (!transportStartedAtLeastOnce()) {
1:27edaff:             LOG.debug("Waiting for MQTTSocket to be properly started...");
1:3f82625:             try {
1:3f82625:                 socketTransportStarted.await();
1:3f82625:             } catch (InterruptedException e) {
1:27edaff:                 LOG.warn("While waiting for MQTTSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:3f82625:             }
1:3f82625:         }
1:3f82625: 
1:96494f7:         protocolLock.lock();
1:3f82625:         try {
1:96494f7:             receiveCounter += length;
1:e69367f:             codec.parse(new DataByteArrayInputStream(new Buffer(bytes, offset, length)), length);
1:3f82625:         } catch (Exception e) {
1:3f82625:             onException(IOExceptionSupport.create(e));
1:96494f7:         } finally {
1:96494f7:             protocolLock.unlock();
1:bd442a3:         }
1:3f82625:     }
1:f44c3d2: 
1:3f82625:     @Override
1:3f82625:     public void onWebSocketClose(int arg0, String arg1) {
1:3f82625:         try {
1:96494f7:             if (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {
1:96494f7:                 LOG.debug("MQTT WebSocket closed: code[{}] message[{}]", arg0, arg1);
1:bd442a3:                 //Check if we received a disconnect packet before closing
1:bd442a3:                 if (!receivedDisconnect.get()) {
1:bd442a3:                     getProtocolConverter().onTransportError();
1:bd442a3:                 }
1:96494f7:                 getProtocolConverter().onMQTTCommand(new DISCONNECT().encode());
1:96494f7:             }
1:3f82625:         } catch (Exception e) {
1:30d6ad7:             LOG.debug("Failed to close MQTT WebSocket cleanly", e);
1:96494f7:         } finally {
1:96494f7:             if (protocolLock.isHeldByCurrentThread()) {
1:96494f7:                 protocolLock.unlock();
1:96494f7:             }
1:be10b86:         }
1:3f82625:     }
1:3f82625: 
1:3f82625:     @Override
1:3f82625:     public void onWebSocketConnect(Session session) {
1:3f82625:         this.session = session;
1:3f82625:     }
1:3f82625: 
1:3f82625:     @Override
1:3f82625:     public void onWebSocketError(Throwable arg0) {
1:be10b86: 
1:3f82625:     }
1:3f82625: 
1:3f82625:     @Override
1:be10b86:     public void onWebSocketText(String arg0) {
1:3f82625:     }
1:450cabe: 
1:450cabe:     private static int getDefaultSendTimeOut() {
1:450cabe:         return Integer.getInteger("org.apache.activemq.transport.ws.MQTTSocket.sendTimeout", 30);
1:450cabe:     }
1:e69367f: 
1:e69367f:     //----- MQTTCodec Frame Sink event point ---------------------------------//
1:e69367f: 
1:e69367f:     @Override
1:e69367f:     public void onFrame(MQTTFrame mqttFrame) {
1:e69367f:         try {
1:e69367f:             if (mqttFrame.messageType() == DISCONNECT.TYPE) {
1:e69367f:                 receivedDisconnect.set(true);
1:e69367f:             }
1:e69367f:             getProtocolConverter().onMQTTCommand(mqttFrame);
1:e69367f:         } catch (Exception e) {
1:e69367f:             onException(IOExceptionSupport.create(e));
1:e69367f:         }
1:e69367f:     }
2:bc4f4e9: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e69367f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.mqtt.MQTTCodec;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1: public class MQTTSocket extends AbstractMQTTSocket implements MQTTCodec.MQTTFrameSink, WebSocketListener {
1:     private final AtomicBoolean receivedDisconnect = new AtomicBoolean();
1: 
1:     private final MQTTCodec codec;
1: 
1:         this.codec = new MQTTCodec(this, getWireFormat());
/////////////////////////////////////////////////////////////////////////
1:             codec.parse(new DataByteArrayInputStream(new Buffer(bytes, offset, length)), length);
/////////////////////////////////////////////////////////////////////////
1: 
1:     //----- MQTTCodec Frame Sink event point ---------------------------------//
1: 
1:     @Override
1:     public void onFrame(MQTTFrame mqttFrame) {
1:         try {
1:             if (mqttFrame.messageType() == DISCONNECT.TYPE) {
1:                 receivedDisconnect.set(true);
1:             }
1:             getProtocolConverter().onMQTTCommand(mqttFrame);
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
commit:30d6ad7
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Failed to close MQTT WebSocket cleanly", e);
commit:27edaff
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     private Session session;
1:     public void handleStopped() throws IOException {
1:         if (session != null && session.isOpen()) {
1:             session.close();
1:         }
1:     }
1: 
1:     //----- WebSocket.OnTextMessage callback handlers ------------------------//
1: 
1:     @Override
1:             LOG.debug("Waiting for MQTTSocket to be properly started...");
1:                 LOG.warn("While waiting for MQTTSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:450cabe
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             //timeout after a period of time so we don't wait forever and hold the protocol lock
1:             session.getRemote().sendBytesByFuture(
1:                     ByteBuffer.wrap(bytes.getData(), 0, bytes.getLength())).get(getDefaultSendTimeOut(), TimeUnit.SECONDS);
1:         } catch (Exception e) {
1:             throw IOExceptionSupport.create(e);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static int getDefaultSendTimeOut() {
1:         return Integer.getInteger("org.apache.activemq.transport.ws.MQTTSocket.sendTimeout", 30);
1:     }
commit:bd442a3
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
0:     final AtomicBoolean receivedDisconnect = new AtomicBoolean();
/////////////////////////////////////////////////////////////////////////
0:             if (frame.messageType() == DISCONNECT.TYPE) {
0:                 receivedDisconnect.set(true);
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 //Check if we received a disconnect packet before closing
1:                 if (!receivedDisconnect.get()) {
1:                     getProtocolConverter().onTransportError();
1:                 }
commit:96494f7
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:     private final int ORDERLY_CLOSE_TIMEOUT = 10;
/////////////////////////////////////////////////////////////////////////
1:         protocolLock.lock();
1:             receiveCounter += length;
1:         } finally {
1:             protocolLock.unlock();
1:             if (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {
1:                 LOG.debug("MQTT WebSocket closed: code[{}] message[{}]", arg0, arg1);
1:                 getProtocolConverter().onMQTTCommand(new DISCONNECT().encode());
1:             }
1:         } finally {
1:             if (protocolLock.isHeldByCurrentThread()) {
1:                 protocolLock.unlock();
1:             }
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
0:         receiveCounter += length;
1: 
commit:be10b86
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.activemq.transport.ws.AbstractMQTTSocket;
/////////////////////////////////////////////////////////////////////////
0: public class MQTTSocket extends AbstractMQTTSocket implements WebSocketListener {
1:     public MQTTSocket(String remoteAddress) {
1:         super(remoteAddress);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void onWebSocketText(String arg0) {
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3f82625
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.ws.jetty9;
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.websocket.api.Session;
1: import org.eclipse.jetty.websocket.api.WebSocketListener;
0: import java.nio.ByteBuffer;
0: public class MQTTSocket  extends TransportSupport implements WebSocketListener, MQTTTransport, BrokerServiceAware {
0:     Session session;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         session.getRemote().sendBytes(ByteBuffer.wrap(bytes.getData(), 0, bytes.getLength()));
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void onWebSocketBinary(byte[] bytes, int offset, int length) {
1:         if (!transportStartedAtLeastOnce()) {
0:             LOG.debug("Waiting for StompSocket to be properly started...");
1:             try {
1:                 socketTransportStarted.await();
1:             } catch (InterruptedException e) {
0:                 LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:             }
1:         }
1: 
1:         try {
0:             MQTTFrame frame = (MQTTFrame)wireFormat.unmarshal(new ByteSequence(bytes, offset, length));
0:             getProtocolConverter().onMQTTCommand(frame);
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
1:     @Override
1:     public void onWebSocketClose(int arg0, String arg1) {
1:         try {
0:             getProtocolConverter().onMQTTCommand(new DISCONNECT().encode());
1:         } catch (Exception e) {
0:             LOG.warn("Failed to close WebSocket", e);
1:         }        
1:     }
1: 
1:     @Override
1:     public void onWebSocketConnect(Session session) {
1:         this.session = session;
1:     }
1: 
1:     @Override
1:     public void onWebSocketError(Throwable arg0) {
1:         
1:     }
1: 
1:     @Override
0:     public void onWebSocketText(String arg0) {        
1:     }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:bc4f4e9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.BrokerServiceAware;
/////////////////////////////////////////////////////////////////////////
0: public class MQTTSocket  extends TransportSupport implements WebSocket.OnBinaryMessage, MQTTTransport, BrokerServiceAware {
0:     MQTTProtocolConverter protocolConverter = null;
0:     private BrokerService brokerService;
/////////////////////////////////////////////////////////////////////////
0:             getProtocolConverter().onMQTTCommand(frame);
0:     private MQTTProtocolConverter getProtocolConverter() {
0:         if( protocolConverter == null ) {
0:             protocolConverter = new MQTTProtocolConverter(this, brokerService);
1:         }
0:         return protocolConverter;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:             getProtocolConverter().onMQTTCommand(new DISCONNECT().encode());
/////////////////////////////////////////////////////////////////////////
0:             getProtocolConverter().onActiveMQCommand((Command) command);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public void setBrokerService(BrokerService brokerService) {
0:         this.brokerService = brokerService;
0:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:33ec1cf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.transport.ws;
1: 
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.transport.TransportSupport;
0: import org.apache.activemq.transport.mqtt.MQTTInactivityMonitor;
0: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
0: import org.apache.activemq.transport.mqtt.MQTTTransport;
0: import org.apache.activemq.transport.mqtt.MQTTWireFormat;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.ServiceStopper;
0: import org.eclipse.jetty.websocket.WebSocket;
1: import org.fusesource.mqtt.codec.DISCONNECT;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.io.IOException;
0: import java.security.cert.X509Certificate;
0: import java.util.concurrent.CountDownLatch;
1: 
0: public class MQTTSocket  extends TransportSupport implements WebSocket.OnBinaryMessage, MQTTTransport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTSocket.class);
0:     Connection outbound;
0:     MQTTProtocolConverter protocolConverter = new MQTTProtocolConverter(this, null);
0:     MQTTWireFormat wireFormat = new MQTTWireFormat();
0:     private final CountDownLatch socketTransportStarted = new CountDownLatch(1);
1: 
0:     @Override
0:     public void onMessage(byte[] bytes, int offset, int length) {
0:         if (!transportStartedAtLeastOnce()) {
0:             LOG.debug("Waiting for StompSocket to be properly started...");
0:             try {
0:                 socketTransportStarted.await();
0:             } catch (InterruptedException e) {
0:                 LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
0:             }
0:         }
1: 
0:         try {
0:             MQTTFrame frame = (MQTTFrame)wireFormat.unmarshal(new ByteSequence(bytes, offset, length));
0:             protocolConverter.onMQTTCommand(frame);
0:         } catch (Exception e) {
0:             onException(IOExceptionSupport.create(e));
0:         }
0:     }
1: 
0:     @Override
0:     public void onOpen(Connection connection) {
0:         this.outbound = connection;
0:     }
1: 
0:     @Override
0:     public void onClose(int closeCode, String message) {
0:         try {
0:             protocolConverter.onMQTTCommand(new DISCONNECT().encode());
0:         } catch (Exception e) {
0:             LOG.warn("Failed to close WebSocket", e);
0:         }
0:     }
1: 
0:     protected void doStart() throws Exception {
0:         socketTransportStarted.countDown();
0:     }
1: 
0:     @Override
0:     protected void doStop(ServiceStopper stopper) throws Exception {
0:     }
1: 
0:     private boolean transportStartedAtLeastOnce() {
0:         return socketTransportStarted.getCount() == 0;
0:     }
1: 
0:     @Override
0:     public int getReceiveCounter() {
0:         return 0;
0:     }
1: 
0:     @Override
0:     public String getRemoteAddress() {
0:         return "MQTTSocket_" + this.hashCode();
0:     }
1: 
0:     @Override
0:     public void oneway(Object command) throws IOException {
0:         try {
0:             protocolConverter.onActiveMQCommand((Command)command);
0:         } catch (Exception e) {
0:             onException(IOExceptionSupport.create(e));
0:         }
0:     }
1: 
0:     @Override
0:     public void sendToActiveMQ(Command command) {
0:         doConsume(command);
0:     }
1: 
0:     @Override
1:     public void sendToMQTT(MQTTFrame command) throws IOException {
1:         ByteSequence bytes = wireFormat.marshal(command);
0:         outbound.sendMessage(bytes.getData(), 0, bytes.getLength());
0:     }
1: 
0:     @Override
0:     public X509Certificate[] getPeerCertificates() {
0:         return new X509Certificate[0];
0:     }
1: 
0:     @Override
0:     public MQTTInactivityMonitor getInactivityMonitor() {
0:         return null;
0:     }
1: 
0:     @Override
0:     public MQTTWireFormat getWireFormat() {
0:         return wireFormat;
0:     }
0: }
============================================================================