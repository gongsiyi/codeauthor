1:9eb93f1: /**
1:9eb93f1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9eb93f1:  * contributor license agreements.  See the NOTICE file distributed with
1:9eb93f1:  * this work for additional information regarding copyright ownership.
1:9eb93f1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9eb93f1:  * (the "License"); you may not use this file except in compliance with
1:9eb93f1:  * the License.  You may obtain a copy of the License at
1:9eb93f1:  *
1:9eb93f1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9eb93f1:  *
1:9eb93f1:  * Unless required by applicable law or agreed to in writing, software
1:9eb93f1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9eb93f1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9eb93f1:  * See the License for the specific language governing permissions and
1:9eb93f1:  * limitations under the License.
1:9eb93f1:  */
13:9eb93f1: 
1:9eb93f1: package org.apache.activemq.store.jdbc;
1:9eb93f1: 
1:9eb93f1: import java.sql.PreparedStatement;
1:9eb93f1: import java.sql.ResultSet;
1:9eb93f1: 
1:9eb93f1: import javax.jms.DeliveryMode;
1:9eb93f1: import javax.jms.Destination;
1:9eb93f1: import javax.jms.Message;
1:9eb93f1: import javax.jms.MessageConsumer;
1:9eb93f1: import javax.jms.MessageProducer;
1:9eb93f1: import javax.jms.Session;
1:9eb93f1: 
1:c46c040: import junit.framework.TestCase;
1:c46c040: 
1:9eb93f1: import org.apache.activemq.ActiveMQConnectionFactory;
1:9eb93f1: import org.apache.activemq.broker.BrokerService;
1:9eb93f1: import org.apache.activemq.openwire.OpenWireFormat;
1:9eb93f1: import org.apache.activemq.util.ByteSequence;
1:9eb93f1: import org.apache.activemq.wireformat.WireFormat;
1:c46c040: import org.apache.derby.jdbc.EmbeddedDataSource;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:9eb93f1: 
1:9eb93f1: // https://issues.apache.org/activemq/browse/AMQ-2880
1:9eb93f1: public class JDBCCommitExceptionTest extends TestCase {
1:9eb93f1: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JDBCCommitExceptionTest.class);
1:9eb93f1: 
1:e5896c0:     protected static final int messagesExpected = 10;
1:c46c040:     protected ActiveMQConnectionFactory factory;
1:e5896c0:     protected BrokerService broker;
1:c46c040:     protected String connectionUri;
1:e5896c0:     protected BrokenPersistenceAdapter jdbc;
1:e5896c0: 
1:c46c040:     @Override
1:e5896c0:     public void setUp() throws Exception {
1:9eb93f1:         broker = createBroker();
1:9eb93f1:         broker.start();
1:c46c040: 
1:c46c040:         factory = new ActiveMQConnectionFactory(
1:c46c040:             connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries="+messagesExpected);
1:e5896c0:     }
1:9eb93f1: 
1:c46c040:     @Override
1:e5896c0:     public void tearDown() throws Exception {
1:e5896c0:         broker.stop();
1:e5896c0:     }
1:e5896c0: 
1:e5896c0:     public void testSqlException() throws Exception {
1:e5896c0:         doTestSqlException();
1:e5896c0:     }
1:e5896c0: 
1:e5896c0:     public void doTestSqlException() throws Exception {
1:9eb93f1:         sendMessages(messagesExpected);
1:9eb93f1:         int messagesReceived = receiveMessages(messagesExpected);
1:9eb93f1: 
1:9eb93f1:         dumpMessages();
1:9eb93f1:         assertEquals("Messages expected doesn't equal messages received", messagesExpected, messagesReceived);
1:9eb93f1:         broker.stop();
5:9eb93f1:     }
1:9eb93f1: 
1:bd45d93:      protected int dumpMessages() throws Exception {
1:bd45d93:         int count = 0;
1:9eb93f1:         WireFormat wireFormat = new OpenWireFormat();
1:9eb93f1:         java.sql.Connection conn = ((JDBCPersistenceAdapter) broker.getPersistenceAdapter()).getDataSource().getConnection();
1:bd45d93:         PreparedStatement statement = conn.prepareStatement("SELECT ID, XID, MSG FROM ACTIVEMQ_MSGS");
1:9eb93f1:         ResultSet result = statement.executeQuery();
1:9eb93f1:         LOG.info("Messages left in broker after test");
1:9eb93f1:         while(result.next()) {
1:9eb93f1:             long id = result.getLong(1);
1:bd45d93:             String xid = result.getString(2);
1:bd45d93:             org.apache.activemq.command.Message message = (org.apache.activemq.command.Message)wireFormat.unmarshal(new ByteSequence(result.getBytes(3)));
1:bd45d93:             LOG.info("id: " + id + ", xid: " + xid + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", MSG: " + message);
1:bd45d93:             count++;
1:9eb93f1:         }
1:9eb93f1:         statement.close();
1:9eb93f1:         conn.close();
1:bd45d93:         return count;
1:9eb93f1:     }
1:9eb93f1: 
1:9eb93f1:     protected int receiveMessages(int messagesExpected) throws Exception {
1:9eb93f1:         javax.jms.Connection connection = factory.createConnection();
1:9eb93f1:         connection.start();
1:9eb93f1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:9eb93f1: 
1:9eb93f1:         jdbc.setShouldBreak(true);
1:9eb93f1: 
1:9eb93f1:         // first try and receive these messages, they'll continually fail
1:9eb93f1:         receiveMessages(messagesExpected, session);
1:9eb93f1: 
1:9eb93f1:         jdbc.setShouldBreak(false);
1:9eb93f1: 
1:9eb93f1:         // now that the store is sane, try and get all the messages sent
1:9eb93f1:         return receiveMessages(messagesExpected, session);
1:9eb93f1:     }
1:9eb93f1: 
1:9eb93f1:     protected int receiveMessages(int messagesExpected, Session session) throws Exception {
1:9eb93f1:         int messagesReceived = 0;
1:9eb93f1: 
1:9eb93f1:         for (int i=0; i<messagesExpected; i++) {
2:9eb93f1:             Destination destination = session.createQueue("TEST");
1:9eb93f1:             MessageConsumer consumer = session.createConsumer(destination);
1:9eb93f1:             Message message = null;
1:9eb93f1:             try {
1:9eb93f1:                 LOG.debug("Receiving message " + (messagesReceived+1) + " of " + messagesExpected);
1:9eb93f1:                 message = consumer.receive(2000);
1:9eb93f1:                 LOG.info("Received : " + message);
1:9eb93f1:                 if (message != null) {
1:9eb93f1:                     session.commit();
1:9eb93f1:                     messagesReceived++;
1:9eb93f1:                 }
1:9eb93f1:             } catch (Exception e) {
1:9eb93f1:                 LOG.debug("Caught exception " + e);
1:9eb93f1:                 session.rollback();
1:9eb93f1:             } finally {
1:9eb93f1:                 if (consumer != null) {
1:9eb93f1:                     consumer.close();
1:9eb93f1:                 }
1:9eb93f1:             }
1:9eb93f1:         }
1:9eb93f1:         return messagesReceived;
1:9eb93f1:     }
1:9eb93f1: 
1:9eb93f1:     protected void sendMessages(int messagesExpected) throws Exception {
1:9eb93f1:         javax.jms.Connection connection = factory.createConnection();
1:9eb93f1:         connection.start();
1:9eb93f1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c46c040:         Destination destination = session.createQueue("TEST");
1:9eb93f1:         MessageProducer producer = session.createProducer(destination);
1:9eb93f1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:9eb93f1: 
1:9eb93f1:         for (int i=0; i<messagesExpected; i++) {
1:9eb93f1:             LOG.debug("Sending message " + (i+1) + " of " + messagesExpected);
1:9eb93f1:             producer.send(session.createTextMessage("test message " + (i+1)));
1:9eb93f1:         }
1:9eb93f1:     }
1:9eb93f1: 
1:9eb93f1:     protected BrokerService createBroker() throws Exception {
1:9eb93f1: 
1:9eb93f1:         BrokerService broker = new BrokerService();
1:ea70e82:         broker.setAdvisorySupport(false);
1:e5896c0:         jdbc = new BrokenPersistenceAdapter();
1:9eb93f1: 
1:170b86a:         jdbc.setUseLock(false);
1:9eb93f1:         jdbc.deleteAllMessages();
1:9eb93f1: 
1:9eb93f1:         broker.setPersistenceAdapter(jdbc);
1:9eb93f1:         broker.setPersistent(true);
1:c46c040:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:9eb93f1: 
1:9eb93f1:         return broker;
1:9eb93f1:     }
1:9eb93f1: }
1:9eb93f1: 
1:9eb93f1: 
1:9eb93f1: 
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:bd45d93
/////////////////////////////////////////////////////////////////////////
1:      protected int dumpMessages() throws Exception {
1:         int count = 0;
1:         PreparedStatement statement = conn.prepareStatement("SELECT ID, XID, MSG FROM ACTIVEMQ_MSGS");
1:             String xid = result.getString(2);
1:             org.apache.activemq.command.Message message = (org.apache.activemq.command.Message)wireFormat.unmarshal(new ByteSequence(result.getBytes(3)));
1:             LOG.info("id: " + id + ", xid: " + xid + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", MSG: " + message);
1:             count++;
1:         return count;
commit:ea70e82
/////////////////////////////////////////////////////////////////////////
1:         broker.setAdvisorySupport(false);
commit:165959e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c46c040
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: 
1: import org.apache.derby.jdbc.EmbeddedDataSource;
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQConnectionFactory factory;
1:     protected String connectionUri;
1:     @Override
1: 
1:         factory = new ActiveMQConnectionFactory(
1:             connectionUri + "?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries="+messagesExpected);
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         PreparedStatement statement = conn.prepareStatement("SELECT ID, MSG FROM ACTIVEMQ_MSGS");
/////////////////////////////////////////////////////////////////////////
1:         Destination destination = session.createQueue("TEST");
/////////////////////////////////////////////////////////////////////////
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:170b86a
/////////////////////////////////////////////////////////////////////////
1:         jdbc.setUseLock(false);
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(JDBCCommitExceptionTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:e5896c0
/////////////////////////////////////////////////////////////////////////
1:     protected static final int messagesExpected = 10;
0:     protected ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:     protected BrokerService broker;
0:     protected EmbeddedDataSource dataSource;
0:     protected java.sql.Connection dbConnection;
1:     protected BrokenPersistenceAdapter jdbc;
1: 
1:     public void setUp() throws Exception {
1:     }
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     public void testSqlException() throws Exception {
1:         doTestSqlException();
1:     }
1: 
1:     public void doTestSqlException() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         jdbc = new BrokenPersistenceAdapter();
/////////////////////////////////////////////////////////////////////////
commit:9eb93f1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store.jdbc;
1: 
0: import java.io.IOException;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
0: import java.util.Properties;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
0: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.derby.jdbc.EmbeddedDataSource;
1: 
0: import junit.framework.TestCase;
1: 
1: // https://issues.apache.org/activemq/browse/AMQ-2880
1: public class JDBCCommitExceptionTest extends TestCase {
1: 
0:     private static final Log LOG = LogFactory.getLog(JDBCCommitExceptionTest.class);
1: 
0:     private static final int messagesExpected = 10;
0:     private ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
0:             "tcp://localhost:61616?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries="+messagesExpected); 
0:     private BrokerService broker;
0:     private EmbeddedDataSource dataSource;
0:     private java.sql.Connection dbConnection;
0:     private MyPersistenceAdapter jdbc;
1: 
0:     public void testSqlException() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1: 
1: 
1:         sendMessages(messagesExpected);
1:         int messagesReceived = receiveMessages(messagesExpected);
1: 
1:         dumpMessages();
1: 
1:         assertEquals("Messages expected doesn't equal messages received", messagesExpected, messagesReceived);
1: 
1:         broker.stop();
1:     }
1: 
0:      protected void dumpMessages() throws Exception {
1:         WireFormat wireFormat = new OpenWireFormat();
1:         java.sql.Connection conn = ((JDBCPersistenceAdapter) broker.getPersistenceAdapter()).getDataSource().getConnection();
0:         PreparedStatement statement = conn.prepareStatement("SELECT ID, MSG FROM ACTIVEMQ_MSGS");    
1:         ResultSet result = statement.executeQuery();
1:         LOG.info("Messages left in broker after test");
1:         while(result.next()) {
1:             long id = result.getLong(1);
0:             org.apache.activemq.command.Message message = (org.apache.activemq.command.Message)wireFormat.unmarshal(new ByteSequence(result.getBytes(2)));
0:             LOG.info("id: " + id + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", MSG: " + message);
1:         }
1:         statement.close();
1:         conn.close();
1:     }
1: 
1:     protected int receiveMessages(int messagesExpected) throws Exception {
1:         javax.jms.Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:         jdbc.setShouldBreak(true);
1: 
1:         // first try and receive these messages, they'll continually fail
1:         receiveMessages(messagesExpected, session);
1: 
1:         jdbc.setShouldBreak(false);
1: 
1:         // now that the store is sane, try and get all the messages sent
1:         return receiveMessages(messagesExpected, session);
1:     }
1: 
1:     protected int receiveMessages(int messagesExpected, Session session) throws Exception {
1:         int messagesReceived = 0;
1: 
1:         for (int i=0; i<messagesExpected; i++) {
1:             Destination destination = session.createQueue("TEST");
1:             MessageConsumer consumer = session.createConsumer(destination);
1:             Message message = null;
1:             try {
1:                 LOG.debug("Receiving message " + (messagesReceived+1) + " of " + messagesExpected);
1:                 message = consumer.receive(2000);
1:                 LOG.info("Received : " + message);
1:                 if (message != null) {
1:                     session.commit();
1:                     messagesReceived++;
1:                 }
1:             } catch (Exception e) {
1:                 LOG.debug("Caught exception " + e);
1:                 session.rollback();
1:             } finally {
1:                 if (consumer != null) {
1:                     consumer.close();
1:                 }
1:             }
1:         }
1:         return messagesReceived;
1:     }
1: 
1:     protected void sendMessages(int messagesExpected) throws Exception {
1:         javax.jms.Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue("TEST");        
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         for (int i=0; i<messagesExpected; i++) {
1:             LOG.debug("Sending message " + (i+1) + " of " + messagesExpected);
1:             producer.send(session.createTextMessage("test message " + (i+1)));
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
0:         Properties p = System.getProperties();
1: 
1:         BrokerService broker = new BrokerService();
0:         jdbc = new MyPersistenceAdapter();
1: 
0:         dataSource = new EmbeddedDataSource();
0:         dataSource.setDatabaseName("target/derbyDb");
0:         dataSource.setCreateDatabase("create");
1: 
0:         jdbc.setDataSource(dataSource);
0:         jdbc.setUseDatabaseLock(false);
1:         jdbc.deleteAllMessages();
1: 
1:         broker.setPersistenceAdapter(jdbc);
1:         broker.setPersistent(true);
0:         broker.addConnector("tcp://localhost:61616");
1: 
1:         return broker;
1:     }
1: 
0:     class MyPersistenceAdapter extends JDBCPersistenceAdapter {
1: 
0:         private  final Log LOG = LogFactory.getLog(MyPersistenceAdapter.class);
1: 
0:         private boolean shouldBreak = false;
1: 
0:         @Override
0:         public void commitTransaction(ConnectionContext context) throws IOException {
0:             if ( shouldBreak ) {
0:                 LOG.warn("Throwing exception on purpose");
0:                 throw new IOException("Breaking on purpose");
1:             }
0:             LOG.debug("in commitTransaction");
0:             super.commitTransaction(context);
1:         }
1: 
0:         public void setShouldBreak(boolean shouldBreak) {
0:             this.shouldBreak = shouldBreak;
1:         }
1:     }
1: 
1: }
1: 
1: 
1: 
============================================================================