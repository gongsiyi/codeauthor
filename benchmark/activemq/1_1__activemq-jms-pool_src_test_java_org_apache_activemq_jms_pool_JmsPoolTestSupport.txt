1:e6597c4: /**
1:e6597c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6597c4:  * contributor license agreements.  See the NOTICE file distributed with
1:e6597c4:  * this work for additional information regarding copyright ownership.
1:e6597c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6597c4:  * (the "License"); you may not use this file except in compliance with
1:e6597c4:  * the License.  You may obtain a copy of the License at
1:e6597c4:  *
1:e6597c4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e6597c4:  *
1:e6597c4:  * Unless required by applicable law or agreed to in writing, software
1:e6597c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6597c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6597c4:  * See the License for the specific language governing permissions and
1:e6597c4:  * limitations under the License.
1:e6597c4:  */
1:e6597c4: package org.apache.activemq.jms.pool;
1:e6597c4: 
1:e6597c4: import java.util.Set;
1:e6597c4: 
1:e6597c4: import javax.jms.JMSException;
1:e6597c4: import javax.management.MalformedObjectNameException;
1:e6597c4: import javax.management.ObjectName;
1:e6597c4: 
1:e6597c4: import org.apache.activemq.broker.BrokerService;
1:e6597c4: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:e6597c4: import org.apache.activemq.broker.jmx.ConnectorViewMBean;
1:e6597c4: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:e6597c4: import org.junit.After;
1:e6597c4: import org.junit.Before;
1:e6597c4: import org.junit.Rule;
1:e6597c4: import org.junit.rules.TestName;
1:e6597c4: import org.slf4j.Logger;
1:e6597c4: import org.slf4j.LoggerFactory;
1:e6597c4: 
1:e6597c4: public class JmsPoolTestSupport {
1:e6597c4: 
1:e6597c4:     @Rule public TestName name = new TestName();
1:e6597c4: 
1:e6597c4:     protected static final Logger LOG = LoggerFactory.getLogger(JmsPoolTestSupport.class);
1:e6597c4: 
1:e6597c4:     protected BrokerService brokerService;
1:e6597c4: 
1:e6597c4:     @Before
1:e6597c4:     public void setUp() throws Exception {
1:e6597c4:         LOG.info("========== start " + getTestName() + " ==========");
1:e6597c4:     }
1:e6597c4: 
1:e6597c4:     @After
1:e6597c4:     public void tearDown() throws Exception {
1:e6597c4:         if (brokerService != null) {
1:e6597c4:             try {
1:e6597c4:                 brokerService.stop();
1:e6597c4:                 brokerService.waitUntilStopped();
1:e6597c4:                 brokerService = null;
1:e6597c4:             } catch (Exception ex) {
1:e6597c4:                 LOG.warn("Suppress error on shutdown: {}", ex);
1:e6597c4:             }
1:e6597c4:         }
1:e6597c4: 
1:e6597c4:         LOG.info("========== tearDown " + getTestName() + " ==========");
1:e6597c4:     }
1:e6597c4: 
1:e6597c4:     public String getTestName() {
1:e6597c4:         return name.getMethodName();
1:e6597c4:     }
1:e6597c4: 
1:e6597c4:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:e6597c4:         ObjectName brokerViewMBean = new ObjectName(
1:e6597c4:             "org.apache.activemq:type=Broker,brokerName=" + brokerService.getBrokerName());
1:e6597c4:         BrokerViewMBean proxy = (BrokerViewMBean) brokerService.getManagementContext()
1:e6597c4:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:e6597c4:         return proxy;
1:e6597c4:     }
1:e6597c4: 
1:e6597c4:     protected ConnectorViewMBean getProxyToConnectionView(String connectionType) throws Exception {
1:e6597c4:         ObjectName connectorQuery = new ObjectName(
1:e6597c4:             "org.apache.activemq:type=Broker,brokerName=" + brokerService.getBrokerName() + ",connector=clientConnectors,connectorName="+connectionType+"_//*");
1:e6597c4: 
1:e6597c4:         Set<ObjectName> results = brokerService.getManagementContext().queryNames(connectorQuery, null);
1:e6597c4: 
1:e6597c4:         if (results == null || results.isEmpty() || results.size() > 1) {
1:e6597c4:             throw new Exception("Unable to find the exact Connector instance.");
1:e6597c4:         }
1:e6597c4: 
1:e6597c4:         ConnectorViewMBean proxy = (ConnectorViewMBean) brokerService.getManagementContext()
1:e6597c4:                 .newProxyInstance(results.iterator().next(), ConnectorViewMBean.class, true);
1:e6597c4:         return proxy;
1:e6597c4:     }
1:e6597c4: 
1:e6597c4:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:e6597c4:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerService.getBrokerName() + ",destinationType=Queue,destinationName="+name);
1:e6597c4:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:e6597c4:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:e6597c4:         return proxy;
1:e6597c4:     }
1:e6597c4: 
1:e6597c4:     protected QueueViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:e6597c4:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerService.getBrokerName() + ",destinationType=Topic,destinationName="+name);
1:e6597c4:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:e6597c4:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:e6597c4:         return proxy;
1:e6597c4:     }
1:e6597c4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jms.pool;
1: 
1: import java.util.Set;
1: 
1: import javax.jms.JMSException;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.ConnectorViewMBean;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JmsPoolTestSupport {
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(JmsPoolTestSupport.class);
1: 
1:     protected BrokerService brokerService;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         LOG.info("========== start " + getTestName() + " ==========");
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             try {
1:                 brokerService.stop();
1:                 brokerService.waitUntilStopped();
1:                 brokerService = null;
1:             } catch (Exception ex) {
1:                 LOG.warn("Suppress error on shutdown: {}", ex);
1:             }
1:         }
1: 
1:         LOG.info("========== tearDown " + getTestName() + " ==========");
1:     }
1: 
1:     public String getTestName() {
1:         return name.getMethodName();
1:     }
1: 
1:     protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
1:         ObjectName brokerViewMBean = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=" + brokerService.getBrokerName());
1:         BrokerViewMBean proxy = (BrokerViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     protected ConnectorViewMBean getProxyToConnectionView(String connectionType) throws Exception {
1:         ObjectName connectorQuery = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=" + brokerService.getBrokerName() + ",connector=clientConnectors,connectorName="+connectionType+"_//*");
1: 
1:         Set<ObjectName> results = brokerService.getManagementContext().queryNames(connectorQuery, null);
1: 
1:         if (results == null || results.isEmpty() || results.size() > 1) {
1:             throw new Exception("Unable to find the exact Connector instance.");
1:         }
1: 
1:         ConnectorViewMBean proxy = (ConnectorViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(results.iterator().next(), ConnectorViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerService.getBrokerName() + ",destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     protected QueueViewMBean getProxyToTopic(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + brokerService.getBrokerName() + ",destinationType=Topic,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: }
============================================================================