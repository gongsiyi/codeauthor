1:bec711c: /**
1:bec711c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bec711c:  * contributor license agreements.  See the NOTICE file distributed with
1:bec711c:  * this work for additional information regarding copyright ownership.
1:bec711c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bec711c:  * (the "License"); you may not use this file except in compliance with
1:bec711c:  * the License.  You may obtain a copy of the License at
1:bec711c:  *
1:bec711c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bec711c:  *
1:bec711c:  * Unless required by applicable law or agreed to in writing, software
1:bec711c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bec711c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bec711c:  * See the License for the specific language governing permissions and
1:bec711c:  * limitations under the License.
1:bec711c:  */
1:bec711c: package org.apache.activemq.broker.policy;
5:bec711c: 
1:a0835c2: import static org.junit.Assert.assertEquals;
1:a0835c2: import static org.junit.Assert.assertNotNull;
1:a0835c2: import static org.junit.Assert.assertTrue;
1:a0835c2: import static org.junit.Assert.fail;
1:a0835c2: 
1:9bf9e1c: import java.lang.reflect.UndeclaredThrowableException;
1:9bf9e1c: import java.util.Arrays;
1:9bf9e1c: import java.util.Collection;
1:9bf9e1c: import java.util.Map.Entry;
1:9bf9e1c: import java.util.concurrent.TimeUnit;
1:a0835c2: 
1:bec711c: import javax.jms.Connection;
1:9bf9e1c: import javax.jms.Destination;
1:bec711c: import javax.jms.JMSException;
1:bec711c: import javax.jms.MessageConsumer;
1:bec711c: import javax.jms.Session;
1:bec711c: import javax.management.InstanceNotFoundException;
1:bec711c: import javax.management.ObjectName;
1:bec711c: import javax.management.openmbean.CompositeData;
1:bec711c: import javax.management.openmbean.TabularData;
1:a0835c2: 
1:9bf9e1c: import org.apache.activemq.ActiveMQConnectionFactory;
1:9bf9e1c: import org.apache.activemq.ActiveMQMessageConsumer;
1:9bf9e1c: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:9bf9e1c: import org.apache.activemq.broker.TransportConnector;
1:9bf9e1c: import org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyViewMBean;
1:9bf9e1c: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:9bf9e1c: import org.apache.activemq.command.ActiveMQDestination;
1:9bf9e1c: import org.apache.activemq.command.ActiveMQQueue;
1:9bf9e1c: import org.apache.activemq.command.ActiveMQTopic;
1:9bf9e1c: import org.apache.activemq.util.MessageIdList;
1:9bf9e1c: import org.apache.activemq.util.SocketProxy;
1:9bf9e1c: import org.apache.activemq.util.Wait;
1:9bf9e1c: import org.junit.Test;
1:9bf9e1c: import org.junit.runner.RunWith;
1:9bf9e1c: import org.junit.runners.Parameterized;
1:9bf9e1c: import org.slf4j.Logger;
1:9bf9e1c: import org.slf4j.LoggerFactory;
1:9bf9e1c: 
1:9bf9e1c: @RunWith(value = Parameterized.class)
1:bec711c: public class AbortSlowConsumer0Test extends AbortSlowConsumerBase {
1:bec711c: 
1:bec711c:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowConsumer0Test.class);
1:bec711c: 
1:9bf9e1c:     @Parameterized.Parameters(name = "isTopic({0})")
1:9bf9e1c:     public static Collection<Object[]> getTestParameters() {
1:9bf9e1c:         return Arrays.asList(new Object[][]{{Boolean.TRUE}, {Boolean.FALSE}});
1:9bf9e1c:     }
1:9bf9e1c: 
1:9bf9e1c:     public AbortSlowConsumer0Test(Boolean isTopic) {
1:9bf9e1c:         this.topic = isTopic;
1:9bf9e1c:     }
1:9bf9e1c: 
1:bec711c:     @Test
1:bec711c:     public void testRegularConsumerIsNotAborted() throws Exception {
3:bec711c:         startConsumers(destination);
1:bec711c:         for (Connection c : connections) {
1:bec711c:             c.setExceptionListener(this);
1:bec711c:         }
1:bec711c:         startProducers(destination, 100);
1:bec711c:         allMessagesList.waitForMessagesToArrive(10);
1:bec711c:         allMessagesList.assertAtLeastMessagesReceived(10);
1:bec711c:     }
1:bec711c: 
1:bec711c:     @Test
1:bec711c:     public void testSlowConsumerIsAbortedViaJmx() throws Exception {
1:bec711c:         underTest.setMaxSlowDuration(60*1000); // so jmx does the abort
1:9bf9e1c:         startConsumers(withPrefetch(2, destination));
1:bec711c:         Entry<MessageConsumer, MessageIdList> consumertoAbort = consumers.entrySet().iterator().next();
1:bec711c:         consumertoAbort.getValue().setProcessingDelay(8 * 1000);
1:bec711c:         for (Connection c : connections) {
1:bec711c:             c.setExceptionListener(this);
1:bec711c:         }
1:bec711c:         startProducers(destination, 100);
1:bec711c: 
1:bec711c:         consumertoAbort.getValue().assertMessagesReceived(1);
1:bec711c: 
1:bec711c:         ActiveMQDestination amqDest = (ActiveMQDestination)destination;
1:bec711c:         ObjectName destinationViewMBean = new ObjectName("org.apache.activemq:destinationType=" +
1:bec711c:                 (amqDest.isTopic() ? "Topic" : "Queue") +",destinationName="
1:bec711c:                 + amqDest.getPhysicalName() + ",type=Broker,brokerName=localhost");
1:bec711c: 
1:bec711c:         DestinationViewMBean queue = (DestinationViewMBean) broker.getManagementContext().newProxyInstance(destinationViewMBean, DestinationViewMBean.class, true);
1:bec711c:         ObjectName slowConsumerPolicyMBeanName = queue.getSlowConsumerStrategy();
1:bec711c: 
1:bec711c:         assertNotNull(slowConsumerPolicyMBeanName);
1:bec711c: 
1:bec711c:         AbortSlowConsumerStrategyViewMBean abortPolicy = (AbortSlowConsumerStrategyViewMBean)
1:bec711c:                 broker.getManagementContext().newProxyInstance(slowConsumerPolicyMBeanName, AbortSlowConsumerStrategyViewMBean.class, true);
1:bec711c: 
1:bec711c:         TimeUnit.SECONDS.sleep(3);
1:bec711c: 
1:bec711c:         TabularData slowOnes = abortPolicy.getSlowConsumers();
1:bec711c:         assertEquals("one slow consumers", 1, slowOnes.size());
1:bec711c: 
1:bec711c:         LOG.info("slow ones:"  + slowOnes);
1:bec711c: 
1:bec711c:         CompositeData slowOne = (CompositeData) slowOnes.values().iterator().next();
1:bec711c:         LOG.info("Slow one: " + slowOne);
1:bec711c: 
1:bec711c:         assertTrue("we have an object name", slowOne.get("subscription") instanceof ObjectName);
1:bec711c:         abortPolicy.abortConsumer((ObjectName)slowOne.get("subscription"));
1:bec711c: 
1:bec711c:         consumertoAbort.getValue().assertAtMostMessagesReceived(1);
1:bec711c: 
1:bec711c:         slowOnes = abortPolicy.getSlowConsumers();
1:bec711c:         assertEquals("no slow consumers left", 0, slowOnes.size());
1:bec711c: 
1:bec711c:         // verify mbean gone with destination
1:bec711c:         broker.getAdminView().removeTopic(amqDest.getPhysicalName());
1:bec711c: 
1:bec711c:         try {
1:bec711c:             abortPolicy.getSlowConsumers();
1:bec711c:             fail("expect not found post destination removal");
1:bec711c:         } catch(UndeclaredThrowableException expected) {
1:bec711c:             assertTrue("correct exception: " + expected.getCause(),
1:bec711c:                     expected.getCause() instanceof InstanceNotFoundException);
1:bec711c:         }
1:bec711c:     }
1:bec711c: 
1:9bf9e1c:     private Destination withPrefetch(int i, Destination destination) {
1:9bf9e1c:         String destWithPrefetch =
1:9bf9e1c:                 ((ActiveMQDestination) destination).getPhysicalName() + "?consumer.prefetchSize=" + i;
1:9bf9e1c:         return topic ? new ActiveMQTopic(destWithPrefetch) : new ActiveMQQueue(destWithPrefetch);
1:9bf9e1c:     }
1:9bf9e1c: 
1:bec711c:     @Test
1:bec711c:     public void testOnlyOneSlowConsumerIsAborted() throws Exception {
1:bec711c:         consumerCount = 10;
1:bec711c:         startConsumers(destination);
1:bec711c:         Entry<MessageConsumer, MessageIdList> consumertoAbort = consumers.entrySet().iterator().next();
1:bec711c:         consumertoAbort.getValue().setProcessingDelay(8 * 1000);
1:bec711c:         for (Connection c : connections) {
1:bec711c:             c.setExceptionListener(this);
1:bec711c:         }
1:bec711c:         startProducers(destination, 100);
1:bec711c: 
1:bec711c:         allMessagesList.waitForMessagesToArrive(99);
1:bec711c:         allMessagesList.assertAtLeastMessagesReceived(99);
1:bec711c: 
1:bec711c:         consumertoAbort.getValue().assertMessagesReceived(1);
1:bec711c:         TimeUnit.SECONDS.sleep(5);
1:bec711c:         consumertoAbort.getValue().assertAtMostMessagesReceived(1);
1:bec711c:     }
1:bec711c: 
1:bec711c:     @Test
1:bec711c:     public void testAbortAlreadyClosingConsumers() throws Exception {
1:bec711c:         consumerCount = 1;
1:9bf9e1c:         startConsumers(withPrefetch(2, destination));
1:bec711c:         for (MessageIdList list : consumers.values()) {
1:bec711c:             list.setProcessingDelay(6 * 1000);
1:bec711c:         }
1:bec711c:         for (Connection c : connections) {
1:bec711c:             c.setExceptionListener(this);
1:bec711c:         }
1:bec711c:         startProducers(destination, 100);
1:bec711c:         allMessagesList.waitForMessagesToArrive(consumerCount);
1:bec711c: 
1:bec711c:         for (MessageConsumer consumer : consumers.keySet()) {
1:bec711c:             LOG.info("closing consumer: " + consumer);
1:bec711c:             /// will block waiting for on message till 6secs expire
1:bec711c:             consumer.close();
1:bec711c:         }
1:bec711c:     }
1:bec711c: 
1:bec711c:     @Test
1:bec711c:     public void testAbortConsumerOnDeadConnection() throws Exception {
1:9bf9e1c:         TransportConnector transportConnector = broker.addConnector("tcp://0.0.0.0:0");
1:9bf9e1c:         transportConnector.setBrokerService(broker);
1:9bf9e1c:         transportConnector.setTaskRunnerFactory(broker.getTaskRunnerFactory());
1:9bf9e1c:         transportConnector.start();
1:9bf9e1c:         SocketProxy socketProxy = new SocketProxy(transportConnector.getPublishableConnectURI());
1:9bf9e1c:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(socketProxy.getUrl());
1:9bf9e1c:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:9bf9e1c:         prefetchPolicy.setAll(4);
1:9bf9e1c:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
1:9bf9e1c:         Connection c = connectionFactory.createConnection();
1:9bf9e1c:         connections.add(c);
1:9bf9e1c:         c.start();
1:9bf9e1c:         Session session = c.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:9bf9e1c:         final ActiveMQMessageConsumer messageconsumer = (ActiveMQMessageConsumer) session.createConsumer(destination);
1:9bf9e1c:         startProducers(destination, 10);
1:9bf9e1c: 
1:9bf9e1c:         messageconsumer.receive(4000).acknowledge();
1:9bf9e1c:         assertNotNull(messageconsumer.receive(4000));
1:9bf9e1c:         assertNotNull(messageconsumer.receive(4000));
1:9bf9e1c:         assertNotNull(messageconsumer.receive(4000));
1:9bf9e1c: 
1:9bf9e1c:         // close control command won't get through
1:9bf9e1c:         socketProxy.pause();
1:9bf9e1c: 
1:9bf9e1c:         ActiveMQDestination amqDest = (ActiveMQDestination)destination;
1:9bf9e1c:         ObjectName destinationViewMBean = new ObjectName("org.apache.activemq:destinationType=" +
1:9bf9e1c:                 (amqDest.isTopic() ? "Topic" : "Queue") +",destinationName="
1:9bf9e1c:                 + amqDest.getPhysicalName() + ",type=Broker,brokerName=localhost");
1:9bf9e1c: 
1:9bf9e1c:         final DestinationViewMBean destView = (DestinationViewMBean) broker.getManagementContext().newProxyInstance(destinationViewMBean, DestinationViewMBean.class, true);
1:9bf9e1c: 
1:9bf9e1c:         assertTrue("Consumer gone from broker view", Wait.waitFor(new Wait.Condition() {
1:9bf9e1c:             @Override
1:9bf9e1c:             public boolean isSatisified() throws Exception {
1:9bf9e1c:                 LOG.info("DestView {} comsumerCount {}", destView, destView.getConsumerCount());
1:9bf9e1c:                 return 0 == destView.getConsumerCount();
1:9bf9e1c:             }
1:9bf9e1c:         }));
1:9bf9e1c: 
1:9bf9e1c:         socketProxy.goOn();
1:9bf9e1c: 
1:9bf9e1c:         assertTrue("consumer was closed", Wait.waitFor(new Wait.Condition() {
1:9bf9e1c:             @Override
1:9bf9e1c:             public boolean isSatisified() throws Exception {
1:9bf9e1c:                 boolean closed = false;
1:9bf9e1c:                 try {
1:9bf9e1c:                     messageconsumer.receive(400);
1:9bf9e1c:                 } catch (javax.jms.IllegalStateException expected) {
1:9bf9e1c:                     closed = expected.toString().contains("closed");
1:9bf9e1c:                 }
1:9bf9e1c:                 return closed;
1:9bf9e1c:             }
1:9bf9e1c:         }));
1:bec711c:     }
1:bec711c: 
1:bec711c:     @Override
1:bec711c:     public void onException(JMSException exception) {
1:bec711c:         exceptions.add(exception);
1:bec711c:         exception.printStackTrace();
1:bec711c:     }
1:bec711c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a0835c2
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:9bf9e1c
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.UndeclaredThrowableException;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Map.Entry;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageConsumer;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyViewMBean;
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.MessageIdList;
1: import org.apache.activemq.util.SocketProxy;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.junit.runners.BlockJUnit4ClassRunner;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: @RunWith(value = Parameterized.class)
1:     @Parameterized.Parameters(name = "isTopic({0})")
1:     public static Collection<Object[]> getTestParameters() {
1:         return Arrays.asList(new Object[][]{{Boolean.TRUE}, {Boolean.FALSE}});
1:     }
1: 
1:     public AbortSlowConsumer0Test(Boolean isTopic) {
1:         this.topic = isTopic;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         startConsumers(withPrefetch(2, destination));
/////////////////////////////////////////////////////////////////////////
1:     private Destination withPrefetch(int i, Destination destination) {
1:         String destWithPrefetch =
1:                 ((ActiveMQDestination) destination).getPhysicalName() + "?consumer.prefetchSize=" + i;
1:         return topic ? new ActiveMQTopic(destWithPrefetch) : new ActiveMQQueue(destWithPrefetch);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         startConsumers(withPrefetch(2, destination));
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector transportConnector = broker.addConnector("tcp://0.0.0.0:0");
1:         transportConnector.setBrokerService(broker);
1:         transportConnector.setTaskRunnerFactory(broker.getTaskRunnerFactory());
1:         transportConnector.start();
1:         SocketProxy socketProxy = new SocketProxy(transportConnector.getPublishableConnectURI());
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(socketProxy.getUrl());
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setAll(4);
1:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
1:         Connection c = connectionFactory.createConnection();
1:         connections.add(c);
1:         c.start();
1:         Session session = c.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final ActiveMQMessageConsumer messageconsumer = (ActiveMQMessageConsumer) session.createConsumer(destination);
1:         startProducers(destination, 10);
1: 
1:         messageconsumer.receive(4000).acknowledge();
1:         assertNotNull(messageconsumer.receive(4000));
1:         assertNotNull(messageconsumer.receive(4000));
1:         assertNotNull(messageconsumer.receive(4000));
1: 
1:         // close control command won't get through
1:         socketProxy.pause();
1: 
1:         ActiveMQDestination amqDest = (ActiveMQDestination)destination;
1:         ObjectName destinationViewMBean = new ObjectName("org.apache.activemq:destinationType=" +
1:                 (amqDest.isTopic() ? "Topic" : "Queue") +",destinationName="
1:                 + amqDest.getPhysicalName() + ",type=Broker,brokerName=localhost");
1: 
1:         final DestinationViewMBean destView = (DestinationViewMBean) broker.getManagementContext().newProxyInstance(destinationViewMBean, DestinationViewMBean.class, true);
1: 
1:         assertTrue("Consumer gone from broker view", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("DestView {} comsumerCount {}", destView, destView.getConsumerCount());
1:                 return 0 == destView.getConsumerCount();
1:             }
1:         }));
1: 
1:         socketProxy.goOn();
1: 
1:         assertTrue("consumer was closed", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 boolean closed = false;
1:                 try {
1:                     messageconsumer.receive(400);
1:                 } catch (javax.jms.IllegalStateException expected) {
1:                     closed = expected.toString().contains("closed");
1:                 }
1:                 return closed;
1:             }
1:         }));
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
0: import org.apache.activemq.JmsMultipleClientsTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyViewMBean;
0: import org.apache.activemq.broker.jmx.DestinationViewMBean;
0: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.util.MessageIdList;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.junit.runners.BlockJUnit4ClassRunner;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
0: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
0: import java.lang.reflect.UndeclaredThrowableException;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Map.Entry;
0: import java.util.concurrent.TimeUnit;
1: 
0: import static org.junit.Assert.*;
1: 
1: 
0: @RunWith(BlockJUnit4ClassRunner.class)
1: public class AbortSlowConsumer0Test extends AbortSlowConsumerBase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowConsumer0Test.class);
1: 
1:     @Test
1:     public void testRegularConsumerIsNotAborted() throws Exception {
1:         startConsumers(destination);
1:         for (Connection c : connections) {
1:             c.setExceptionListener(this);
1:         }
1:         startProducers(destination, 100);
1:         allMessagesList.waitForMessagesToArrive(10);
1:         allMessagesList.assertAtLeastMessagesReceived(10);
1:     }
1: 
1:     @Test
1:     public void testSlowConsumerIsAbortedViaJmx() throws Exception {
1:         underTest.setMaxSlowDuration(60*1000); // so jmx does the abort
1:         startConsumers(destination);
1:         Entry<MessageConsumer, MessageIdList> consumertoAbort = consumers.entrySet().iterator().next();
1:         consumertoAbort.getValue().setProcessingDelay(8 * 1000);
1:         for (Connection c : connections) {
1:             c.setExceptionListener(this);
1:         }
1:         startProducers(destination, 100);
1: 
1:         consumertoAbort.getValue().assertMessagesReceived(1);
1: 
1:         ActiveMQDestination amqDest = (ActiveMQDestination)destination;
1:         ObjectName destinationViewMBean = new ObjectName("org.apache.activemq:destinationType=" +
1:                 (amqDest.isTopic() ? "Topic" : "Queue") +",destinationName="
1:                 + amqDest.getPhysicalName() + ",type=Broker,brokerName=localhost");
1: 
1:         DestinationViewMBean queue = (DestinationViewMBean) broker.getManagementContext().newProxyInstance(destinationViewMBean, DestinationViewMBean.class, true);
1:         ObjectName slowConsumerPolicyMBeanName = queue.getSlowConsumerStrategy();
1: 
1:         assertNotNull(slowConsumerPolicyMBeanName);
1: 
1:         AbortSlowConsumerStrategyViewMBean abortPolicy = (AbortSlowConsumerStrategyViewMBean)
1:                 broker.getManagementContext().newProxyInstance(slowConsumerPolicyMBeanName, AbortSlowConsumerStrategyViewMBean.class, true);
1: 
1:         TimeUnit.SECONDS.sleep(3);
1: 
1:         TabularData slowOnes = abortPolicy.getSlowConsumers();
1:         assertEquals("one slow consumers", 1, slowOnes.size());
1: 
1:         LOG.info("slow ones:"  + slowOnes);
1: 
1:         CompositeData slowOne = (CompositeData) slowOnes.values().iterator().next();
1:         LOG.info("Slow one: " + slowOne);
1: 
1:         assertTrue("we have an object name", slowOne.get("subscription") instanceof ObjectName);
1:         abortPolicy.abortConsumer((ObjectName)slowOne.get("subscription"));
1: 
1:         consumertoAbort.getValue().assertAtMostMessagesReceived(1);
1: 
1:         slowOnes = abortPolicy.getSlowConsumers();
1:         assertEquals("no slow consumers left", 0, slowOnes.size());
1: 
1:         // verify mbean gone with destination
1:         broker.getAdminView().removeTopic(amqDest.getPhysicalName());
1: 
1:         try {
1:             abortPolicy.getSlowConsumers();
1:             fail("expect not found post destination removal");
1:         } catch(UndeclaredThrowableException expected) {
1:             assertTrue("correct exception: " + expected.getCause(),
1:                     expected.getCause() instanceof InstanceNotFoundException);
1:         }
1:     }
1: 
1:     @Test
1:     public void testOnlyOneSlowConsumerIsAborted() throws Exception {
1:         consumerCount = 10;
1:         startConsumers(destination);
1:         Entry<MessageConsumer, MessageIdList> consumertoAbort = consumers.entrySet().iterator().next();
1:         consumertoAbort.getValue().setProcessingDelay(8 * 1000);
1:         for (Connection c : connections) {
1:             c.setExceptionListener(this);
1:         }
1:         startProducers(destination, 100);
1: 
1:         allMessagesList.waitForMessagesToArrive(99);
1:         allMessagesList.assertAtLeastMessagesReceived(99);
1: 
1:         consumertoAbort.getValue().assertMessagesReceived(1);
1:         TimeUnit.SECONDS.sleep(5);
1:         consumertoAbort.getValue().assertAtMostMessagesReceived(1);
1:     }
1: 
1:     @Test
1:     public void testAbortAlreadyClosingConsumers() throws Exception {
1:         consumerCount = 1;
1:         startConsumers(destination);
1:         for (MessageIdList list : consumers.values()) {
1:             list.setProcessingDelay(6 * 1000);
1:         }
1:         for (Connection c : connections) {
1:             c.setExceptionListener(this);
1:         }
1:         startProducers(destination, 100);
1:         allMessagesList.waitForMessagesToArrive(consumerCount);
1: 
1:         for (MessageConsumer consumer : consumers.keySet()) {
1:             LOG.info("closing consumer: " + consumer);
1:             /// will block waiting for on message till 6secs expire
1:             consumer.close();
1:         }
1:     }
1: 
1:     @Test
1:     public void testAbortConsumerOnDeadConnection() throws Exception {
0:         // socket proxy on pause, close could hang??
1:     }
1: 
1:     @Override
1:     public void onException(JMSException exception) {
1:         exceptions.add(exception);
1:         exception.printStackTrace();
1:     }
1: }
============================================================================