1:fd37e8c: /**
1:fd37e8c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fd37e8c:  * contributor license agreements.  See the NOTICE file distributed with
1:fd37e8c:  * this work for additional information regarding copyright ownership.
1:fd37e8c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fd37e8c:  * (the "License"); you may not use this file except in compliance with
1:fd37e8c:  * the License.  You may obtain a copy of the License at
1:fd37e8c:  *
1:fd37e8c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fd37e8c:  *
1:fd37e8c:  * Unless required by applicable law or agreed to in writing, software
1:fd37e8c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fd37e8c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd37e8c:  * See the License for the specific language governing permissions and
1:fd37e8c:  * limitations under the License.
1:fd37e8c:  */
1:fd37e8c: 
1:fd37e8c: package org.apache.activemq.usecases;
1:fd37e8c: 
1:fd37e8c: import java.io.File;
1:fd37e8c: import java.io.PrintWriter;
1:fd37e8c: import java.io.StringWriter;
1:fd37e8c: import java.io.Writer;
1:fd37e8c: import java.lang.management.ManagementFactory;
1:fd37e8c: import java.util.Date;
1:fd37e8c: 
1:fd37e8c: import javax.jms.Connection;
1:fd37e8c: import javax.jms.ConnectionFactory;
1:fd37e8c: import javax.jms.DeliveryMode;
1:fd37e8c: import javax.jms.Destination;
1:fd37e8c: import javax.jms.JMSException;
1:fd37e8c: import javax.jms.Message;
1:fd37e8c: import javax.jms.MessageConsumer;
1:fd37e8c: import javax.jms.MessageProducer;
1:fd37e8c: import javax.jms.Session;
1:fd37e8c: import javax.jms.TextMessage;
1:fd37e8c: import javax.jms.Topic;
1:fd37e8c: import javax.management.MBeanServer;
1:fd37e8c: import javax.management.ObjectName;
1:fd37e8c: 
1:fd37e8c: import junit.framework.Test;
1:fd37e8c: import junit.framework.TestCase;
1:fd37e8c: import junit.framework.TestSuite;
1:fd37e8c: 
1:fd37e8c: import org.apache.activemq.ActiveMQConnection;
1:fd37e8c: import org.apache.activemq.ActiveMQConnectionFactory;
1:fd37e8c: import org.apache.activemq.broker.BrokerService;
1:78022e2: import org.apache.activemq.broker.TransportConnector;
1:fd37e8c: import org.apache.activemq.store.kahadb.KahaDBStore;
1:fd37e8c: import org.apache.activemq.util.Wait;
1:fd37e8c: import org.slf4j.Logger;
1:fd37e8c: import org.slf4j.LoggerFactory;
1:fd37e8c: 
1:fd37e8c: public class DurableSubscriberNonPersistentMessageTest extends TestCase {
1:fd37e8c: 
1:fd37e8c:     private final Logger LOG = LoggerFactory.getLogger(DurableSubscriberNonPersistentMessageTest.class);
1:78022e2:     private String brokerURL;
1:78022e2:     private String consumerBrokerURL;
1:fd37e8c: 
1:fd37e8c:     int initialMaxMsgs = 10;
1:fd37e8c:     int cleanupMsgCount = 10;
1:fd37e8c:     int totalMsgCount = initialMaxMsgs + cleanupMsgCount;
1:fd37e8c:     int totalMsgReceived = 0;
1:fd37e8c:     int sleep = 500;
1:fd37e8c:     int reconnectSleep = 2000;
1:fd37e8c:     int messageTimeout = 1000;
1:fd37e8c:     int messageSize = 1024;
1:fd37e8c: 
1:fd37e8c:     // Note: If ttl is set 0, the default set by the broker will be used if any
1:fd37e8c:     // setting a value greater than 0 will enable the producer to set the ttl on
1:fd37e8c:     // the message
1:fd37e8c:     long ttl = 0;
1:fd37e8c: 
1:fd37e8c:     static String clientId = "Jason";
1:fd37e8c:     MBeanServer mbeanServer;
1:fd37e8c: 
1:fd37e8c:     BrokerService broker;
1:fd37e8c: 
1:fd37e8c:     @Override
1:fd37e8c:     protected void setUp() throws Exception {
1:fd37e8c:         super.setUp();
1:fd37e8c:         broker = new BrokerService();
1:78022e2:         TransportConnector transportConnector = broker.addConnector("tcp://localhost:0");
1:fd37e8c:         KahaDBStore store = new KahaDBStore();
1:fd37e8c:         store.setDirectory(new File("data"));
1:fd37e8c:         broker.setPersistenceAdapter(store);
1:fd37e8c:         broker.start();
1:fd37e8c: 
1:78022e2:         brokerURL = "failover:(" + transportConnector.getPublishableConnectString() + ")";
1:78022e2:         consumerBrokerURL = brokerURL + "?jms.prefetchPolicy.all=100";
1:fd37e8c: 
1:fd37e8c:         mbeanServer = ManagementFactory.getPlatformMBeanServer();
2:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Override
1:fd37e8c:     protected void tearDown() throws Exception {
1:fd37e8c:         broker.stop();
1:fd37e8c:         super.tearDown();
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     /**
1:fd37e8c:      * Create the test case
1:fd37e8c:      *
1:fd37e8c:      * @param testName
1:fd37e8c:      *            name of the test case
1:fd37e8c:      */
1:fd37e8c:     public DurableSubscriberNonPersistentMessageTest(String testName) {
1:fd37e8c:         super(testName);
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     /**
1:fd37e8c:      * @return the suite of tests being tested
1:fd37e8c:      */
1:fd37e8c:     public static Test suite() {
1:fd37e8c:         return new TestSuite(DurableSubscriberNonPersistentMessageTest.class);
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     public void testDurableSubscriberNonPersistentMessage() {
1:fd37e8c:         String interest = "TEST";
1:fd37e8c: 
1:fd37e8c:         LOG.info("Starting DurableSubscriberNonPersistentMessageTest");
1:fd37e8c: 
1:fd37e8c:         try {
1:fd37e8c:             // create durable topic consumer and disconnect
1:fd37e8c:             createConsumer(interest, 0);
1:fd37e8c:             Thread.sleep(1000);
1:fd37e8c: 
1:fd37e8c:             // produce 15 messages to topic
1:fd37e8c:             Producer producer = new Producer(brokerURL, interest, messageSize, ttl);
1:fd37e8c:             producer.sendMessages(totalMsgCount);
1:fd37e8c:             producer.close();
1:fd37e8c:             LOG.info(totalMsgCount + " messages sent");
1:fd37e8c: 
1:fd37e8c:             // durable topic consumer will consume 10 messages and disconnect
1:fd37e8c:             createConsumer(interest, initialMaxMsgs);
1:fd37e8c: 
1:fd37e8c:             Thread.sleep(reconnectSleep);
1:fd37e8c: 
1:fd37e8c:             createConsumer(interest, cleanupMsgCount);
1:fd37e8c: 
1:cbee1cc:             String brokerVersion = (String) mbeanServer.getAttribute(new ObjectName("org.apache.activemq:brokerName=localhost,type=Broker"), "BrokerVersion");
1:fd37e8c: 
1:fd37e8c:             LOG.info("Test run on: " + brokerVersion);
1:cbee1cc:             final String theJmxObject = "org.apache.activemq:type=Broker,brokerName=localhost," +
1:cbee1cc:                     "endpoint=Consumer,destinationType=Topic,destinationName=TEST,clientId=Jason," +
1:cbee1cc:                     "consumerId=Durable(Jason_MyDurableTopic)";
1:fd37e8c: 
1:fd37e8c:             assertTrue("pendingQueueSize should be zero", Wait.waitFor(new Wait.Condition() {
1:fd37e8c:                 @Override
1:fd37e8c:                 public boolean isSatisified() throws Exception {
1:fd37e8c:                     Integer pendingQueueSize = (Integer) mbeanServer.getAttribute(new ObjectName(theJmxObject), "PendingQueueSize");
1:fd37e8c:                     LOG.info("pendingQueueSize = " + pendingQueueSize);
1:fd37e8c:                     return pendingQueueSize.intValue() == 0;
1:fd37e8c:                 }
1:fd37e8c:             }));
1:fd37e8c: 
1:fd37e8c:             assertTrue("cursorMemoryUsage should be zero", Wait.waitFor(new Wait.Condition() {
1:fd37e8c:                 @Override
1:fd37e8c:                 public boolean isSatisified() throws Exception {
1:fd37e8c:                     Long cursorMemoryUsage = (Long) mbeanServer.getAttribute(new ObjectName(theJmxObject), "CursorMemoryUsage");
1:fd37e8c:                     LOG.info("cursorMemoryUsage = " + cursorMemoryUsage);
1:fd37e8c:                     return cursorMemoryUsage.longValue() == 0L;
1:fd37e8c:                 }
1:fd37e8c:             }));
1:fd37e8c: 
1:fd37e8c:             // Not sure what the behavior should be here, if the messages
1:fd37e8c:             // expired the received count shouldn't equal total message count
1:fd37e8c:             assertTrue(totalMsgReceived == initialMaxMsgs + cleanupMsgCount);
1:fd37e8c:         } catch (Exception e) {
1:fd37e8c:             LOG.error("Exception Executing DurableSubscriberNonPersistentMessageTest: " + getStackTrace(e));
1:fd37e8c:             fail("Should not throw any exceptions");
1:fd37e8c:         }
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     // create durable topic consumer and max number of messages
1:fd37e8c:     public void createConsumer(String interest, int maxMsgs) {
1:fd37e8c:         int messageReceived = 0;
1:fd37e8c:         int messagesNotReceived = 0;
1:fd37e8c: 
1:fd37e8c:         LOG.info("Starting DurableSubscriber");
1:fd37e8c: 
1:fd37e8c:         Consumer consumer = null;
1:fd37e8c: 
1:fd37e8c:         try {
1:fd37e8c:             consumer = new Consumer(consumerBrokerURL, interest, clientId);
1:fd37e8c: 
1:fd37e8c:             for (int i = 0; i < maxMsgs; i++) {
1:fd37e8c:                 try {
1:fd37e8c:                     Message msg = consumer.getMessage(messageTimeout);
1:fd37e8c:                     if (msg != null) {
1:fd37e8c:                         LOG.debug("Received Message: " + msg.toString());
1:fd37e8c:                         messageReceived++;
1:fd37e8c:                         totalMsgReceived++;
1:fd37e8c:                     } else {
1:fd37e8c:                         LOG.debug("message " + i + " not received");
1:fd37e8c:                         messagesNotReceived++;
1:fd37e8c:                     }
1:fd37e8c: 
1:fd37e8c:                     Thread.sleep(sleep);
1:fd37e8c:                 } catch (InterruptedException ie) {
1:fd37e8c:                     LOG.debug("Exception: " + ie);
1:fd37e8c:                 }
1:fd37e8c:             }
1:fd37e8c: 
1:fd37e8c:             consumer.close();
1:fd37e8c: 
1:fd37e8c:             LOG.info("Consumer Finished");
1:fd37e8c:             LOG.info("Received " + messageReceived);
1:fd37e8c:             LOG.info("Not Received " + messagesNotReceived);
1:fd37e8c:         } catch (JMSException e) {
1:fd37e8c:             LOG.error("Exception Executing SimpleConsumer: " + getStackTrace(e));
1:fd37e8c:         }
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     public String getStackTrace(Throwable aThrowable) {
1:fd37e8c:         final Writer result = new StringWriter();
1:fd37e8c:         final PrintWriter printWriter = new PrintWriter(result);
1:fd37e8c:         aThrowable.printStackTrace(printWriter);
1:fd37e8c:         return result.toString();
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     public class Producer {
1:fd37e8c: 
1:fd37e8c:         protected ConnectionFactory factory;
1:fd37e8c:         protected transient Connection connection;
1:fd37e8c:         protected transient Session session;
1:fd37e8c:         protected transient MessageProducer producer;
1:fd37e8c:         protected static final int messageSize = 1024;
1:fd37e8c: 
1:fd37e8c:         public Producer(String brokerURL, String interest, int messageSize, long ttl) throws JMSException {
1:fd37e8c: 
1:fd37e8c:             factory = new ActiveMQConnectionFactory(brokerURL);
1:fd37e8c:             connection = factory.createConnection();
1:fd37e8c:             connection.start();
1:fd37e8c:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:fd37e8c:             producer = session.createProducer(session.createTopic(interest));
1:fd37e8c:             producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:fd37e8c:             if (ttl > 0) {
1:fd37e8c:                 producer.setTimeToLive(ttl);
1:fd37e8c:             }
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         public void close() throws JMSException {
1:fd37e8c:             if (connection != null) {
1:fd37e8c:                 connection.close();
1:fd37e8c:             }
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         protected void sendMessage() throws JMSException {
1:fd37e8c:             TextMessage textMessage = session.createTextMessage("test message");
1:fd37e8c:             producer.send(textMessage);
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         protected void sendMessages(int count) throws JMSException {
1:fd37e8c:             for (int i = 0; i < count; i++) {
1:fd37e8c:                 TextMessage textMessage = session.createTextMessage(createMessageText(i));
1:fd37e8c:                 producer.send(textMessage);
1:fd37e8c:             }
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         private String createMessageText(int index) {
1:fd37e8c:             StringBuffer buffer = new StringBuffer(messageSize);
1:fd37e8c:             buffer.append("Message: " + index + " sent at: " + new Date());
1:fd37e8c:             if (buffer.length() > messageSize) {
1:fd37e8c:                 return buffer.substring(0, messageSize);
1:fd37e8c:             }
1:fd37e8c:             for (int i = buffer.length(); i < messageSize; i++) {
1:fd37e8c:                 buffer.append(' ');
1:fd37e8c:             }
1:fd37e8c:             return buffer.toString();
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         protected void commitTransaction() throws JMSException {
1:fd37e8c:             session.commit();
1:fd37e8c:         }
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     public class Consumer {
1:fd37e8c: 
1:cbee1cc:         private final ConnectionFactory factory;
1:cbee1cc:         private final ActiveMQConnection connection;
1:cbee1cc:         private final Session session;
1:cbee1cc:         private final MessageConsumer messageConsumer;
1:fd37e8c: 
1:fd37e8c:         public Consumer(String brokerURL, String interest, String clientId) throws JMSException {
1:fd37e8c:             factory = new ActiveMQConnectionFactory(brokerURL);
1:fd37e8c:             connection = (ActiveMQConnection) factory.createConnection();
1:fd37e8c:             connection.setClientID(clientId);
1:fd37e8c:             connection.start();
1:fd37e8c:             connection.getPrefetchPolicy().setAll(15);
1:fd37e8c:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:fd37e8c:             Destination destination = session.createTopic(interest);
1:fd37e8c:             messageConsumer = session.createDurableSubscriber((Topic) destination, "MyDurableTopic");
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         public void deleteAllMessages() throws JMSException {
1:fd37e8c:             while (getMessage(500) != null) {
1:fd37e8c:                 // empty queue
1:fd37e8c:             }
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         public Message getMessage(int timeout) throws JMSException {
1:fd37e8c:             return messageConsumer.receive(timeout);
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         public void close() throws JMSException {
1:fd37e8c:             if (messageConsumer != null) {
1:fd37e8c:                 messageConsumer.close();
1:fd37e8c:             }
1:fd37e8c:             if (session != null) {
1:fd37e8c:                 session.close();
1:fd37e8c:             }
1:fd37e8c:             if (connection != null) {
1:fd37e8c:                 connection.close();
1:fd37e8c:             }
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         public Session getSession() {
1:fd37e8c:             return session;
1:fd37e8c:         }
1:fd37e8c:     }
1:fd37e8c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:cbee1cc
/////////////////////////////////////////////////////////////////////////
1:             String brokerVersion = (String) mbeanServer.getAttribute(new ObjectName("org.apache.activemq:brokerName=localhost,type=Broker"), "BrokerVersion");
1:             final String theJmxObject = "org.apache.activemq:type=Broker,brokerName=localhost," +
1:                     "endpoint=Consumer,destinationType=Topic,destinationName=TEST,clientId=Jason," +
1:                     "consumerId=Durable(Jason_MyDurableTopic)";
/////////////////////////////////////////////////////////////////////////
1:         private final ConnectionFactory factory;
1:         private final ActiveMQConnection connection;
1:         private final Session session;
1:         private final MessageConsumer messageConsumer;
commit:fd37e8c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
1: import java.io.File;
1: import java.io.PrintWriter;
1: import java.io.StringWriter;
1: import java.io.Writer;
1: import java.lang.management.ManagementFactory;
1: import java.util.Date;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
1: import junit.framework.Test;
1: import junit.framework.TestCase;
1: import junit.framework.TestSuite;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DurableSubscriberNonPersistentMessageTest extends TestCase {
1: 
1:     private final Logger LOG = LoggerFactory.getLogger(DurableSubscriberNonPersistentMessageTest.class);
0:     private String brokerURL = "failover:(tcp://localhost:61616)";
0:     private String consumerBrokerURL = brokerURL + "?jms.prefetchPolicy.all=100";
1: 
1:     int initialMaxMsgs = 10;
1:     int cleanupMsgCount = 10;
1:     int totalMsgCount = initialMaxMsgs + cleanupMsgCount;
1:     int totalMsgReceived = 0;
1:     int sleep = 500;
1:     int reconnectSleep = 2000;
1:     int messageTimeout = 1000;
1:     int messageSize = 1024;
1: 
1:     // Note: If ttl is set 0, the default set by the broker will be used if any
1:     // setting a value greater than 0 will enable the producer to set the ttl on
1:     // the message
1:     long ttl = 0;
1: 
1:     static String clientId = "Jason";
1:     MBeanServer mbeanServer;
1: 
1:     BrokerService broker;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         broker = new BrokerService();
0:         broker.addConnector("tcp://localhost:61616");
1:         KahaDBStore store = new KahaDBStore();
1:         store.setDirectory(new File("data"));
1:         broker.setPersistenceAdapter(store);
1:         broker.start();
1: 
1:         mbeanServer = ManagementFactory.getPlatformMBeanServer();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Create the test case
1:      *
1:      * @param testName
1:      *            name of the test case
1:      */
1:     public DurableSubscriberNonPersistentMessageTest(String testName) {
1:         super(testName);
1:     }
1: 
1:     /**
1:      * @return the suite of tests being tested
1:      */
1:     public static Test suite() {
1:         return new TestSuite(DurableSubscriberNonPersistentMessageTest.class);
1:     }
1: 
1:     public void testDurableSubscriberNonPersistentMessage() {
1:         String interest = "TEST";
1: 
1:         LOG.info("Starting DurableSubscriberNonPersistentMessageTest");
1: 
1:         try {
1:             // create durable topic consumer and disconnect
1:             createConsumer(interest, 0);
1:             Thread.sleep(1000);
1: 
1:             // produce 15 messages to topic
1:             Producer producer = new Producer(brokerURL, interest, messageSize, ttl);
1:             producer.sendMessages(totalMsgCount);
1:             producer.close();
1:             LOG.info(totalMsgCount + " messages sent");
1: 
1:             // durable topic consumer will consume 10 messages and disconnect
1:             createConsumer(interest, initialMaxMsgs);
1: 
1:             Thread.sleep(reconnectSleep);
1: 
1:             createConsumer(interest, cleanupMsgCount);
1: 
0:             String brokerVersion = (String) mbeanServer.getAttribute(new ObjectName("org.apache.activemq:BrokerName=localhost,Type=Broker"), "BrokerVersion");
1: 
1:             LOG.info("Test run on: " + brokerVersion);
0:             // Fuse and Apache 5.6 use different object strings if the consumer
0:             // is offline, maybe this has something to do with the difference in
0:             // behavior?
0:             String jmxObject = "org.apache.activemq:BrokerName=localhost,Type=Subscription,active=false,name=Jason_MyDurableTopic";
0:             if (brokerVersion == null || brokerVersion.contains("fuse") || brokerVersion.contains("5.6")) {
0:                 jmxObject = "org.apache.activemq:BrokerName=localhost,Type=Subscription,persistentMode=Durable,subscriptionID=MyDurableTopic,destinationType=Topic,destinationName=TEST,clientId=Jason";
1:             }
1: 
0:             final String theJmxObject = jmxObject;
1: 
1:             assertTrue("pendingQueueSize should be zero", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     Integer pendingQueueSize = (Integer) mbeanServer.getAttribute(new ObjectName(theJmxObject), "PendingQueueSize");
1:                     LOG.info("pendingQueueSize = " + pendingQueueSize);
1:                     return pendingQueueSize.intValue() == 0;
1:                 }
1:             }));
1: 
1:             assertTrue("cursorMemoryUsage should be zero", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     Long cursorMemoryUsage = (Long) mbeanServer.getAttribute(new ObjectName(theJmxObject), "CursorMemoryUsage");
1:                     LOG.info("cursorMemoryUsage = " + cursorMemoryUsage);
1:                     return cursorMemoryUsage.longValue() == 0L;
1:                 }
1:             }));
1: 
1:             // Not sure what the behavior should be here, if the messages
1:             // expired the received count shouldn't equal total message count
1:             assertTrue(totalMsgReceived == initialMaxMsgs + cleanupMsgCount);
1:         } catch (Exception e) {
1:             LOG.error("Exception Executing DurableSubscriberNonPersistentMessageTest: " + getStackTrace(e));
1:             fail("Should not throw any exceptions");
1:         }
1:     }
1: 
1:     // create durable topic consumer and max number of messages
1:     public void createConsumer(String interest, int maxMsgs) {
1:         int messageReceived = 0;
1:         int messagesNotReceived = 0;
1: 
1:         LOG.info("Starting DurableSubscriber");
1: 
1:         Consumer consumer = null;
1: 
1:         try {
1:             consumer = new Consumer(consumerBrokerURL, interest, clientId);
1: 
1:             for (int i = 0; i < maxMsgs; i++) {
1:                 try {
1:                     Message msg = consumer.getMessage(messageTimeout);
1:                     if (msg != null) {
1:                         LOG.debug("Received Message: " + msg.toString());
1:                         messageReceived++;
1:                         totalMsgReceived++;
1:                     } else {
1:                         LOG.debug("message " + i + " not received");
1:                         messagesNotReceived++;
1:                     }
1: 
1:                     Thread.sleep(sleep);
1:                 } catch (InterruptedException ie) {
1:                     LOG.debug("Exception: " + ie);
1:                 }
1:             }
1: 
1:             consumer.close();
1: 
1:             LOG.info("Consumer Finished");
1:             LOG.info("Received " + messageReceived);
1:             LOG.info("Not Received " + messagesNotReceived);
1:         } catch (JMSException e) {
1:             LOG.error("Exception Executing SimpleConsumer: " + getStackTrace(e));
1:         }
1:     }
1: 
1:     public String getStackTrace(Throwable aThrowable) {
1:         final Writer result = new StringWriter();
1:         final PrintWriter printWriter = new PrintWriter(result);
1:         aThrowable.printStackTrace(printWriter);
1:         return result.toString();
1:     }
1: 
1:     public class Producer {
1: 
1:         protected ConnectionFactory factory;
1:         protected transient Connection connection;
1:         protected transient Session session;
1:         protected transient MessageProducer producer;
1:         protected static final int messageSize = 1024;
1: 
1:         public Producer(String brokerURL, String interest, int messageSize, long ttl) throws JMSException {
1: 
1:             factory = new ActiveMQConnectionFactory(brokerURL);
1:             connection = factory.createConnection();
1:             connection.start();
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             producer = session.createProducer(session.createTopic(interest));
1:             producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:             if (ttl > 0) {
1:                 producer.setTimeToLive(ttl);
1:             }
1:         }
1: 
1:         public void close() throws JMSException {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:         protected void sendMessage() throws JMSException {
1:             TextMessage textMessage = session.createTextMessage("test message");
1:             producer.send(textMessage);
1:         }
1: 
1:         protected void sendMessages(int count) throws JMSException {
1:             for (int i = 0; i < count; i++) {
1:                 TextMessage textMessage = session.createTextMessage(createMessageText(i));
1:                 producer.send(textMessage);
1:             }
1:         }
1: 
1:         private String createMessageText(int index) {
1:             StringBuffer buffer = new StringBuffer(messageSize);
1:             buffer.append("Message: " + index + " sent at: " + new Date());
1:             if (buffer.length() > messageSize) {
1:                 return buffer.substring(0, messageSize);
1:             }
1:             for (int i = buffer.length(); i < messageSize; i++) {
1:                 buffer.append(' ');
1:             }
1:             return buffer.toString();
1:         }
1: 
1:         protected void commitTransaction() throws JMSException {
1:             session.commit();
1:         }
1:     }
1: 
1:     public class Consumer {
1: 
0:         private ConnectionFactory factory;
0:         private ActiveMQConnection connection;
0:         private Session session;
0:         private MessageConsumer messageConsumer;
1: 
1:         public Consumer(String brokerURL, String interest, String clientId) throws JMSException {
1:             factory = new ActiveMQConnectionFactory(brokerURL);
1:             connection = (ActiveMQConnection) factory.createConnection();
1:             connection.setClientID(clientId);
1:             connection.start();
1:             connection.getPrefetchPolicy().setAll(15);
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createTopic(interest);
1:             messageConsumer = session.createDurableSubscriber((Topic) destination, "MyDurableTopic");
1:         }
1: 
1:         public void deleteAllMessages() throws JMSException {
1:             while (getMessage(500) != null) {
1:                 // empty queue
1:             }
1:         }
1: 
1:         public Message getMessage(int timeout) throws JMSException {
1:             return messageConsumer.receive(timeout);
1:         }
1: 
1:         public void close() throws JMSException {
1:             if (messageConsumer != null) {
1:                 messageConsumer.close();
1:             }
1:             if (session != null) {
1:                 session.close();
1:             }
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:         public Session getSession() {
1:             return session;
1:         }
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:78022e2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
1:     private String brokerURL;
1:     private String consumerBrokerURL;
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector transportConnector = broker.addConnector("tcp://localhost:0");
1:         brokerURL = "failover:(" + transportConnector.getPublishableConnectString() + ")";
1:         consumerBrokerURL = brokerURL + "?jms.prefetchPolicy.all=100";
0: 
/////////////////////////////////////////////////////////////////////////
0:             final String theJmxObject = "org.apache.activemq:BrokerName=localhost,Type=Subscription,persistentMode=Durable,subscriptionID=MyDurableTopic,destinationType=Topic,destinationName=TEST,clientId=Jason";
============================================================================