1:413e484: /**
1:413e484:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:413e484:  * contributor license agreements.  See the NOTICE file distributed with
1:413e484:  * this work for additional information regarding copyright ownership.
1:413e484:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:413e484:  * (the "License"); you may not use this file except in compliance with
1:413e484:  * the License.  You may obtain a copy of the License at
1:413e484:  *
1:413e484:  *      http://www.apache.org/licenses/LICENSE-2.0
1:413e484:  *
1:413e484:  * Unless required by applicable law or agreed to in writing, software
1:413e484:  * distributed under the License is distributed on an "AS IS" BASIS,
1:413e484:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:413e484:  * See the License for the specific language governing permissions and
1:413e484:  * limitations under the License.
1:413e484:  */
1:413e484: package org.apache.activemq.transport.mqtt.strategy;
11:413e484: 
1:413e484: import java.io.IOException;
1:413e484: import java.util.List;
1:413e484: 
1:d547025: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:413e484: import org.apache.activemq.command.ActiveMQDestination;
1:413e484: import org.apache.activemq.command.ActiveMQTopic;
1:413e484: import org.apache.activemq.command.ConsumerInfo;
1:413e484: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:413e484: import org.apache.activemq.command.Response;
1:413e484: import org.apache.activemq.command.SubscriptionInfo;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTProtocolException;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTProtocolSupport;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTSubscription;
1:413e484: import org.apache.activemq.transport.mqtt.ResponseHandler;
1:413e484: import org.fusesource.mqtt.client.QoS;
1:413e484: import org.fusesource.mqtt.codec.CONNECT;
1:413e484: 
1:413e484: /**
1:413e484:  * Default implementation that uses unmapped topic subscriptions.
1:413e484:  */
1:413e484: public class MQTTDefaultSubscriptionStrategy extends AbstractMQTTSubscriptionStrategy {
1:413e484: 
3:413e484:     @Override
1:413e484:     public void onConnect(CONNECT connect) throws MQTTProtocolException {
1:fd2805f:         List<SubscriptionInfo> subs = lookupSubscription(protocol.getClientId());
1:fd2805f: 
1:413e484:         if (connect.cleanSession()) {
1:413e484:             deleteDurableSubs(subs);
1:413e484:         } else {
1:413e484:             restoreDurableSubs(subs);
13:413e484:         }
1:fd2805f:     }
1:fd2805f: 
1:413e484:     @Override
1:413e484:     public byte onSubscribe(String topicName, QoS requestedQoS) throws MQTTProtocolException {
1:413e484:         ActiveMQDestination destination = new ActiveMQTopic(MQTTProtocolSupport.convertMQTTToActiveMQ(topicName));
1:fd2805f: 
1:ec049a0:         ConsumerInfo consumerInfo = new ConsumerInfo(getNextConsumerId());
1:413e484:         consumerInfo.setDestination(destination);
1:d547025:         consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_TOPIC_PREFETCH);
1:413e484:         consumerInfo.setRetroactive(true);
1:413e484:         consumerInfo.setDispatchAsync(true);
1:413e484:         // create durable subscriptions only when clean session is false
1:413e484:         if (!protocol.isCleanSession() && protocol.getClientId() != null && requestedQoS.ordinal() >= QoS.AT_LEAST_ONCE.ordinal()) {
1:413e484:             consumerInfo.setSubscriptionName(requestedQoS + ":" + topicName);
1:d547025:             consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_DURABLE_TOPIC_PREFETCH);
1:fd2805f:         }
1:fd2805f: 
1:d547025:         if (protocol.getActiveMQSubscriptionPrefetch() > 0) {
1:413e484:             consumerInfo.setPrefetchSize(protocol.getActiveMQSubscriptionPrefetch());
1:fd2805f:         }
1:fd2805f: 
1:ec049a0:         return doSubscribe(consumerInfo, topicName, requestedQoS);
1:fd2805f:     }
1:fd2805f: 
1:413e484:     @Override
1:413e484:     public void onReSubscribe(MQTTSubscription mqttSubscription) throws MQTTProtocolException {
1:fd2805f: 
1:413e484:         ActiveMQDestination destination = mqttSubscription.getDestination();
1:fd2805f: 
1:413e484:         // check whether the Topic has been recovered in restoreDurableSubs
1:413e484:         // mark subscription available for recovery for duplicate subscription
1:af999fe:         if (restoredDurableSubs.remove(destination.getPhysicalName())) {
1:413e484:             return;
1:413e484:         }
1:413e484: 
1:413e484:         super.onReSubscribe(mqttSubscription);
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:ec049a0:     public void onUnSubscribe(String topicName) throws MQTTProtocolException {
1:ec049a0:         MQTTSubscription subscription = mqttSubscriptionByTopic.remove(topicName);
1:ec049a0:         if (subscription != null) {
1:ec049a0:             doUnSubscribe(subscription);
1:413e484: 
1:ec049a0:             // check if the durable sub also needs to be removed
1:ec049a0:             if (subscription.getConsumerInfo().getSubscriptionName() != null) {
1:ec049a0:                 // also remove it from restored durable subscriptions set
1:af999fe:                 restoredDurableSubs.remove(MQTTProtocolSupport.convertMQTTToActiveMQ(subscription.getTopicName()));
1:ec049a0: 
1:ec049a0:                 RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
1:ec049a0:                 rsi.setConnectionId(protocol.getConnectionId());
1:ec049a0:                 rsi.setSubscriptionName(subscription.getConsumerInfo().getSubscriptionName());
1:ec049a0:                 rsi.setClientId(protocol.getClientId());
1:ec049a0:                 protocol.sendToActiveMQ(rsi, new ResponseHandler() {
1:ec049a0:                     @Override
1:ec049a0:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:ec049a0:                         // ignore failures..
1:ec049a0:                     }
1:ec049a0:                 });
1:ec049a0:             }
1:413e484:         }
1:413e484:     }
1:413e484: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:af999fe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (restoredDurableSubs.remove(destination.getPhysicalName())) {
/////////////////////////////////////////////////////////////////////////
1:                 restoredDurableSubs.remove(MQTTProtocolSupport.convertMQTTToActiveMQ(subscription.getTopicName()));
/////////////////////////////////////////////////////////////////////////
commit:47e954d
/////////////////////////////////////////////////////////////////////////
0:                 restoredSubs.add(MQTTProtocolSupport.convertMQTTToActiveMQ(split[1]));
commit:fd2805f
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import org.apache.activemq.broker.region.DurableTopicSubscription;
0: import org.apache.activemq.broker.region.RegionBroker;
0: import org.apache.activemq.broker.region.TopicRegion;
/////////////////////////////////////////////////////////////////////////
1:         List<SubscriptionInfo> subs = lookupSubscription(protocol.getClientId());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     List<SubscriptionInfo> lookupSubscription(String clientId) throws MQTTProtocolException {
0:         List<SubscriptionInfo> result = new ArrayList<SubscriptionInfo>();
0:         RegionBroker regionBroker;
1: 
0:         try {
0:             regionBroker = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
0:         } catch (Exception e) {
0:             throw new MQTTProtocolException("Error recovering durable subscriptions: " + e.getMessage(), false, e);
1:         }
1: 
0:         final TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
0:         List<DurableTopicSubscription> subscriptions = topicRegion.lookupSubscriptions(clientId);
0:         if (subscriptions != null) {
0:             for (DurableTopicSubscription subscription : subscriptions) {
0:                 LOG.debug("Recovered durable sub:{} on connect", subscription);
1: 
0:                 SubscriptionInfo info = new SubscriptionInfo();
1: 
0:                 info.setDestination(subscription.getActiveMQDestination());
0:                 info.setSubcriptionName(subscription.getSubscriptionKey().getSubscriptionName());
0:                 info.setClientId(clientId);
1: 
0:                 result.add(info);
1:             }
1:         }
1: 
0:         return result;
1:     }
commit:ec049a0
/////////////////////////////////////////////////////////////////////////
1:         ConsumerInfo consumerInfo = new ConsumerInfo(getNextConsumerId());
/////////////////////////////////////////////////////////////////////////
1:         return doSubscribe(consumerInfo, topicName, requestedQoS);
/////////////////////////////////////////////////////////////////////////
1:     public void onUnSubscribe(String topicName) throws MQTTProtocolException {
1:         MQTTSubscription subscription = mqttSubscriptionByTopic.remove(topicName);
1:         if (subscription != null) {
1:             doUnSubscribe(subscription);
1:             // check if the durable sub also needs to be removed
1:             if (subscription.getConsumerInfo().getSubscriptionName() != null) {
1:                 // also remove it from restored durable subscriptions set
0:                 restoredSubs.remove(MQTTProtocolSupport.convertMQTTToActiveMQ(subscription.getTopicName()));
1: 
1:                 RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
1:                 rsi.setConnectionId(protocol.getConnectionId());
1:                 rsi.setSubscriptionName(subscription.getConsumerInfo().getSubscriptionName());
1:                 rsi.setClientId(protocol.getClientId());
1:                 protocol.sendToActiveMQ(rsi, new ResponseHandler() {
1:                     @Override
1:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:                         // ignore failures..
1:                     }
1:                 });
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 onSubscribe(new Topic(split[1], qoS));
commit:413e484
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt.strategy;
1: 
1: import java.io.IOException;
0: import java.util.Collections;
0: import java.util.HashSet;
1: import java.util.List;
0: import java.util.Set;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.command.SubscriptionInfo;
0: import org.apache.activemq.store.PersistenceAdapterSupport;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolException;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolSupport;
1: import org.apache.activemq.transport.mqtt.MQTTSubscription;
1: import org.apache.activemq.transport.mqtt.ResponseHandler;
1: import org.fusesource.mqtt.client.QoS;
0: import org.fusesource.mqtt.client.Topic;
1: import org.fusesource.mqtt.codec.CONNECT;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Default implementation that uses unmapped topic subscriptions.
1:  */
1: public class MQTTDefaultSubscriptionStrategy extends AbstractMQTTSubscriptionStrategy {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(MQTTDefaultSubscriptionStrategy.class);
1: 
0:     private final Set<String> restoredSubs = Collections.synchronizedSet(new HashSet<String>());
1: 
1:     @Override
1:     public void onConnect(CONNECT connect) throws MQTTProtocolException {
0:         List<SubscriptionInfo> subs;
0:         try {
0:             subs = PersistenceAdapterSupport.listSubscriptions(brokerService.getPersistenceAdapter(), protocol.getClientId());
0:         } catch (IOException e) {
0:             throw new MQTTProtocolException("Error loading store subscriptions", true, e);
1:         }
1:         if (connect.cleanSession()) {
1:             deleteDurableSubs(subs);
1:         } else {
1:             restoreDurableSubs(subs);
1:         }
1:     }
1: 
1:     @Override
1:     public byte onSubscribe(String topicName, QoS requestedQoS) throws MQTTProtocolException {
1:         ActiveMQDestination destination = new ActiveMQTopic(MQTTProtocolSupport.convertMQTTToActiveMQ(topicName));
1: 
0:         ConsumerInfo consumerInfo = new ConsumerInfo(protocol.getNextConsumerId());
1:         consumerInfo.setDestination(destination);
1:         consumerInfo.setPrefetchSize(protocol.getActiveMQSubscriptionPrefetch());
1:         consumerInfo.setRetroactive(true);
1:         consumerInfo.setDispatchAsync(true);
1:         // create durable subscriptions only when clean session is false
1:         if (!protocol.isCleanSession() && protocol.getClientId() != null && requestedQoS.ordinal() >= QoS.AT_LEAST_ONCE.ordinal()) {
1:             consumerInfo.setSubscriptionName(requestedQoS + ":" + topicName);
1:         }
1: 
0:         return protocol.doSubscribe(consumerInfo, topicName, requestedQoS);
1:     }
1: 
1:     @Override
1:     public void onReSubscribe(MQTTSubscription mqttSubscription) throws MQTTProtocolException {
1: 
1:         ActiveMQDestination destination = mqttSubscription.getDestination();
1: 
1:         // check whether the Topic has been recovered in restoreDurableSubs
1:         // mark subscription available for recovery for duplicate subscription
0:         if (restoredSubs.remove(destination.getPhysicalName())) {
1:             return;
1:         }
1: 
1:         super.onReSubscribe(mqttSubscription);
1:     }
1: 
1:     @Override
0:     public void onUnSubscribe(MQTTSubscription subscription) throws MQTTProtocolException {
0:         // check if the durable sub also needs to be removed
0:         if (subscription.getConsumerInfo().getSubscriptionName() != null) {
0:             // also remove it from restored durable subscriptions set
0:             restoredSubs.remove(MQTTProtocolSupport.convertMQTTToActiveMQ(subscription.getTopicName()));
1: 
0:             RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
0:             rsi.setConnectionId(protocol.getConnectionId());
0:             rsi.setSubscriptionName(subscription.getConsumerInfo().getSubscriptionName());
0:             rsi.setClientId(protocol.getClientId());
0:             protocol.sendToActiveMQ(rsi, new ResponseHandler() {
1:                 @Override
0:                 public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
0:                     // ignore failures..
1:                 }
0:             });
1:         }
1:     }
1: 
0:     private void deleteDurableSubs(List<SubscriptionInfo> subs) {
0:         try {
0:             for (SubscriptionInfo sub : subs) {
0:                 RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
0:                 rsi.setConnectionId(protocol.getConnectionId());
0:                 rsi.setSubscriptionName(sub.getSubcriptionName());
0:                 rsi.setClientId(sub.getClientId());
0:                 protocol.sendToActiveMQ(rsi, new ResponseHandler() {
1:                     @Override
0:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
0:                         // ignore failures..
1:                     }
0:                 });
1:             }
0:         } catch (Throwable e) {
0:             LOG.warn("Could not delete the MQTT durable subs.", e);
1:         }
1:     }
1: 
0:     private void restoreDurableSubs(List<SubscriptionInfo> subs) {
0:         try {
0:             for (SubscriptionInfo sub : subs) {
0:                 String name = sub.getSubcriptionName();
0:                 String[] split = name.split(":", 2);
0:                 QoS qoS = QoS.valueOf(split[0]);
0:                 protocol.onSubscribe(new Topic(split[1], qoS));
0:                 // mark this durable subscription as restored by Broker
0:                 restoredSubs.add(split[1]);
1:             }
0:         } catch (IOException e) {
0:             LOG.warn("Could not restore the MQTT durable subs.", e);
1:         }
1:     }
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:d547025
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
/////////////////////////////////////////////////////////////////////////
1:         consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_TOPIC_PREFETCH);
1:             consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_DURABLE_TOPIC_PREFETCH);
0:         }
0: 
1:         if (protocol.getActiveMQSubscriptionPrefetch() > 0) {
0:             consumerInfo.setPrefetchSize(protocol.getActiveMQSubscriptionPrefetch());
============================================================================