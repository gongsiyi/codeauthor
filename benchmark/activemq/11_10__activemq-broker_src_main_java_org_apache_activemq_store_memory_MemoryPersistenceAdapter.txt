1:bb8d32c: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store.memory;
1:d29ca2a: 
1:d29ca2a: import java.io.File;
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.util.HashSet;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.Set;
1:74a7a8b: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:74846bb: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1:933eb2f: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:a6a6a70: import org.apache.activemq.command.ProducerId;
1:d29ca2a: import org.apache.activemq.store.MessageStore;
1:18571ce: import org.apache.activemq.store.NoLocalSubscriptionAware;
1:d29ca2a: import org.apache.activemq.store.PersistenceAdapter;
1:1a6cbfa: import org.apache.activemq.store.ProxyMessageStore;
1:d29ca2a: import org.apache.activemq.store.TopicMessageStore;
1:d29ca2a: import org.apache.activemq.store.TransactionStore;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:68d245f:  * @org.apache.xbean.XBean
1:d29ca2a:  */
1:18571ce: public class MemoryPersistenceAdapter implements PersistenceAdapter, NoLocalSubscriptionAware {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MemoryPersistenceAdapter.class);
1:d29ca2a: 
1:d29ca2a:     MemoryTransactionStore transactionStore;
1:9ef4259:     ConcurrentMap<ActiveMQDestination, TopicMessageStore> topics = new ConcurrentHashMap<ActiveMQDestination, TopicMessageStore>();
1:9ef4259:     ConcurrentMap<ActiveMQDestination, MessageStore> queues = new ConcurrentHashMap<ActiveMQDestination, MessageStore>();
1:d29ca2a:     private boolean useExternalMessageReferences;
1:f812e34: 
1:74846bb:     @Override
1:933eb2f:     public Set<ActiveMQDestination> getDestinations() {
1:933eb2f:         Set<ActiveMQDestination> rc = new HashSet<ActiveMQDestination>(queues.size() + topics.size());
1:933eb2f:         for (Iterator<ActiveMQDestination> iter = queues.keySet().iterator(); iter.hasNext();) {
1:f812e34:             rc.add(iter.next());
1:d29ca2a:         }
1:933eb2f:         for (Iterator<ActiveMQDestination> iter = topics.keySet().iterator(); iter.hasNext();) {
1:f812e34:             rc.add(iter.next());
1:d29ca2a:         }
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static MemoryPersistenceAdapter newInstance(File file) {
1:d29ca2a:         return new MemoryPersistenceAdapter();
1:d29ca2a:     }
1:f812e34: 
1:74846bb:     @Override
1:d29ca2a:     public MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException {
1:933eb2f:         MessageStore rc = queues.get(destination);
1:f812e34:         if (rc == null) {
1:d29ca2a:             rc = new MemoryMessageStore(destination);
1:f812e34:             if (transactionStore != null) {
1:d29ca2a:                 rc = transactionStore.proxy(rc);
1:d29ca2a:             }
1:d29ca2a:             queues.put(destination, rc);
1:d29ca2a:         }
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:d29ca2a: 
1:74846bb:     @Override
1:d29ca2a:     public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException {
1:933eb2f:         TopicMessageStore rc = topics.get(destination);
1:f812e34:         if (rc == null) {
1:d29ca2a:             rc = new MemoryTopicMessageStore(destination);
1:f812e34:             if (transactionStore != null) {
1:d29ca2a:                 rc = transactionStore.proxy(rc);
1:d29ca2a:             }
1:d29ca2a:             topics.put(destination, rc);
1:d29ca2a:         }
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:07b6a38:      * Cleanup method to remove any state associated with the given destination
1:74846bb:      *
1:bb8d32c:      * @param destination
1:bb8d32c:      *        Destination to forget
1:07b6a38:      */
1:74846bb:     @Override
1:07b6a38:     public void removeQueueMessageStore(ActiveMQQueue destination) {
1:07b6a38:         queues.remove(destination);
1:07b6a38:     }
1:d29ca2a: 
2:07b6a38:     /**
1:07b6a38:      * Cleanup method to remove any state associated with the given destination
1:b0c2a40:      *
1:bb8d32c:      * @param destination
1:bb8d32c:      *        Destination to forget
1:07b6a38:      */
1:74846bb:     @Override
1:07b6a38:     public void removeTopicMessageStore(ActiveMQTopic destination) {
1:07b6a38:         topics.remove(destination);
1:07b6a38:     }
1:d29ca2a: 
1:74846bb:     @Override
1:d29ca2a:     public TransactionStore createTransactionStore() throws IOException {
1:f812e34:         if (transactionStore == null) {
1:529e5c2:             transactionStore = new MemoryTransactionStore(this);
1:d29ca2a:         }
1:d29ca2a:         return transactionStore;
1:d29ca2a:     }
1:d29ca2a: 
1:74846bb:     @Override
1:d29ca2a:     public void beginTransaction(ConnectionContext context) {
1:d29ca2a:     }
1:d29ca2a: 
1:74846bb:     @Override
1:d29ca2a:     public void commitTransaction(ConnectionContext context) {
1:d29ca2a:     }
1:d29ca2a: 
1:74846bb:     @Override
1:d29ca2a:     public void rollbackTransaction(ConnectionContext context) {
1:d29ca2a:     }
1:d29ca2a: 
1:74846bb:     @Override
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:     }
1:d29ca2a: 
1:74846bb:     @Override
1:d29ca2a:     public void stop() throws Exception {
1:d29ca2a:     }
1:f812e34: 
1:74846bb:     @Override
1:d29ca2a:     public long getLastMessageBrokerSequenceId() throws IOException {
1:d29ca2a:         return 0;
1:d29ca2a:     }
1:d29ca2a: 
1:74846bb:     @Override
1:d29ca2a:     public void deleteAllMessages() throws IOException {
1:933eb2f:         for (Iterator<TopicMessageStore> iter = topics.values().iterator(); iter.hasNext();) {
1:1629774:             MemoryMessageStore store = asMemoryMessageStore(iter.next());
1:1629774:             if (store != null) {
1:d29ca2a:                 store.delete();
1:d29ca2a:             }
1:d29ca2a:         }
1:933eb2f:         for (Iterator<MessageStore> iter = queues.values().iterator(); iter.hasNext();) {
1:1629774:             MemoryMessageStore store = asMemoryMessageStore(iter.next());
1:1629774:             if (store != null) {
1:d29ca2a:                 store.delete();
1:1629774:             }
1:1629774:         }
1:d29ca2a: 
1:4f7235d:         if (transactionStore != null) {
1:d29ca2a:             transactionStore.delete();
1:d29ca2a:         }
1:4f7235d:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isUseExternalMessageReferences() {
1:d29ca2a:         return useExternalMessageReferences;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setUseExternalMessageReferences(boolean useExternalMessageReferences) {
1:d29ca2a:         this.useExternalMessageReferences = useExternalMessageReferences;
1:d29ca2a:     }
1:d29ca2a: 
1:1629774:     protected MemoryMessageStore asMemoryMessageStore(Object value) {
1:1629774:         if (value instanceof MemoryMessageStore) {
1:bb8d32c:             return (MemoryMessageStore) value;
1:d29ca2a:         }
1:1a6cbfa:         if (value instanceof ProxyMessageStore) {
1:bb8d32c:             MessageStore delegate = ((ProxyMessageStore) value).getDelegate();
1:1a6cbfa:             if (delegate instanceof MemoryMessageStore) {
1:1a6cbfa:                 return (MemoryMessageStore) delegate;
1:1a6cbfa:             }
1:1a6cbfa:         }
1:fc00993:         LOG.warn("Expected an instance of MemoryMessageStore but was: " + value);
1:1629774:         return null;
1:18d616c:     }
1:f812e34: 
1:18d616c:     /**
1:bb8d32c:      * @param usageManager
1:bb8d32c:      *        The UsageManager that is controlling the broker's memory usage.
1:18d616c:      */
1:74846bb:     @Override
1:6d8e2c5:     public void setUsageManager(SystemUsage usageManager) {
1:1629774:     }
1:d29ca2a: 
1:74846bb:     @Override
1:f812e34:     public String toString() {
1:415d46c:         return "MemoryPersistenceAdapter";
1:759fd28:     }
1:dbc661f: 
1:74846bb:     @Override
1:f812e34:     public void setBrokerName(String brokerName) {
1:759fd28:     }
1:6d8e2c5: 
1:74846bb:     @Override
1:f812e34:     public void setDirectory(File dir) {
1:dbc661f:     }
1:74846bb: 
1:74846bb:     @Override
1:bb8d32c:     public File getDirectory() {
1:dbc661f:         return null;
1:759fd28:     }
1:74846bb: 
1:74846bb:     @Override
1:f812e34:     public void checkpoint(boolean sync) throws IOException {
1:6d8e2c5:     }
1:74846bb: 
1:74846bb:     @Override
1:bb8d32c:     public long size() {
1:6d8e2c5:         return 0;
1:415d46c:     }
2:759fd28: 
1:d3fb1aa:     public void setCreateTransactionStore(boolean create) throws IOException {
1:d3fb1aa:         if (create) {
1:d3fb1aa:             createTransactionStore();
1:d3fb1aa:         }
1:d3fb1aa:     }
1:759fd28: 
1:74846bb:     @Override
1:a6a6a70:     public long getLastProducerSequenceId(ProducerId id) {
1:a6a6a70:         // memory map does duplicate suppression
1:a6a6a70:         return -1;
1:a6a6a70:     }
1:74846bb: 
1:74846bb:     @Override
1:b07821a:     public void allowIOResumption() {}
1:b07821a: 
1:b07821a:     @Override
1:74846bb:     public JobSchedulerStore createJobSchedulerStore() throws IOException, UnsupportedOperationException {
1:74846bb:         // We could eventuall implement an in memory scheduler.
1:74846bb:         throw new UnsupportedOperationException();
1:74846bb:     }
1:18571ce: 
1:18571ce:     /* (non-Javadoc)
1:18571ce:      * @see org.apache.activemq.store.NoLocalSubscriptionAware#isPersistNoLocal()
1:18571ce:      */
1:18571ce:     @Override
1:18571ce:     public boolean isPersistNoLocal() {
1:18571ce:         return true;
1:18571ce:     }
1:1629774: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b07821a
/////////////////////////////////////////////////////////////////////////
1:     public void allowIOResumption() {}
1: 
1:     @Override
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:18571ce
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.NoLocalSubscriptionAware;
/////////////////////////////////////////////////////////////////////////
1: public class MemoryPersistenceAdapter implements PersistenceAdapter, NoLocalSubscriptionAware {
/////////////////////////////////////////////////////////////////////////
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.store.NoLocalSubscriptionAware#isPersistNoLocal()
1:      */
1:     @Override
1:     public boolean isPersistNoLocal() {
1:         return true;
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:bb8d32c
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param destination
1:      *        Destination to forget
/////////////////////////////////////////////////////////////////////////
1:      * @param destination
1:      *        Destination to forget
/////////////////////////////////////////////////////////////////////////
1:             return (MemoryMessageStore) value;
1:             MessageStore delegate = ((ProxyMessageStore) value).getDelegate();
/////////////////////////////////////////////////////////////////////////
1:      * @param usageManager
1:      *        The UsageManager that is controlling the broker's memory usage.
/////////////////////////////////////////////////////////////////////////
1:     public File getDirectory() {
/////////////////////////////////////////////////////////////////////////
1:     public long size() {
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     ConcurrentMap<ActiveMQDestination, TopicMessageStore> topics = new ConcurrentHashMap<ActiveMQDestination, TopicMessageStore>();
1:     ConcurrentMap<ActiveMQDestination, MessageStore> queues = new ConcurrentHashMap<ActiveMQDestination, MessageStore>();
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
1:     @Override
1: 
1:     @Override
1: 
1:     @Override
1: 
1:     @Override
1:     public JobSchedulerStore createJobSchedulerStore() throws IOException, UnsupportedOperationException {
1:         // We could eventuall implement an in memory scheduler.
1:         throw new UnsupportedOperationException();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:529e5c2
/////////////////////////////////////////////////////////////////////////
1:             transactionStore = new MemoryTransactionStore(this);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
0:     ConcurrentHashMap<ActiveMQDestination, TopicMessageStore> topics = new ConcurrentHashMap<ActiveMQDestination, TopicMessageStore>();
0:     ConcurrentHashMap<ActiveMQDestination, MessageStore> queues = new ConcurrentHashMap<ActiveMQDestination, MessageStore>();
1:     public Set<ActiveMQDestination> getDestinations() {
1:         Set<ActiveMQDestination> rc = new HashSet<ActiveMQDestination>(queues.size() + topics.size());
1:         for (Iterator<ActiveMQDestination> iter = queues.keySet().iterator(); iter.hasNext();) {
1:         for (Iterator<ActiveMQDestination> iter = topics.keySet().iterator(); iter.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:         MessageStore rc = queues.get(destination);
/////////////////////////////////////////////////////////////////////////
1:         TopicMessageStore rc = topics.get(destination);
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<TopicMessageStore> iter = topics.values().iterator(); iter.hasNext();) {
1:         for (Iterator<MessageStore> iter = queues.values().iterator(); iter.hasNext();) {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(MemoryPersistenceAdapter.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.warn("Expected an instance of MemoryMessageStore but was: " + value);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:         Set rc = new HashSet(queues.size() + topics.size());
1:             rc.add(iter.next());
1:             rc.add(iter.next());
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (rc == null) {
1:             if (transactionStore != null) {
/////////////////////////////////////////////////////////////////////////
1:         if (rc == null) {
1:             if (transactionStore != null) {
/////////////////////////////////////////////////////////////////////////
1:         if (transactionStore == null) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:             return (MemoryMessageStore)value;
0:      * @param usageManager The UsageManager that is controlling the broker's
0:      *                memory usage.
1: 
1:     public String toString() {
1:     public void setBrokerName(String brokerName) {
1:     public void setDirectory(File dir) {
1:     public void checkpoint(boolean sync) throws IOException {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:18d616c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.memory.UsageManager;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @param usageManager The UsageManager that is controlling the broker's memory usage.
1:      */
0:     public void setUsageManager(UsageManager usageManager) {
1:     }
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.memory;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.TopicMessageStore;
1: import org.apache.activemq.store.TransactionStore;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision: 1.4 $
1:  */
0: public class MemoryPersistenceAdapter implements PersistenceAdapter {
1: 
1:     MemoryTransactionStore transactionStore;
0:     ConcurrentHashMap topics = new ConcurrentHashMap();
0:     ConcurrentHashMap queues = new ConcurrentHashMap();
1:     private boolean useExternalMessageReferences;
1:     
0:     public Set getDestinations() {
0:         Set rc = new HashSet(queues.size()+topics.size());
0:         for (Iterator iter = queues.keySet().iterator(); iter.hasNext();) {
0:             rc.add( iter.next() );
1:         }
0:         for (Iterator iter = topics.keySet().iterator(); iter.hasNext();) {
0:             rc.add( iter.next() );
1:         }
1:         return rc;
1:     }
1: 
1:     public static MemoryPersistenceAdapter newInstance(File file) {
1:         return new MemoryPersistenceAdapter();
1:     }
1:     
1:     public MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException {
0:         MessageStore rc = (MessageStore)queues.get(destination);
0:         if(rc==null) {
1:             rc = new MemoryMessageStore(destination);
0:             if( transactionStore !=null ) {
1:                 rc = transactionStore.proxy(rc);
1:             }
1:             queues.put(destination, rc);
1:         }
1:         return rc;
1:     }
1: 
1:     public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException {
0:         TopicMessageStore rc = (TopicMessageStore)topics.get(destination);
0:         if(rc==null) {
1:             rc = new MemoryTopicMessageStore(destination);
0:             if( transactionStore !=null ) {
1:                 rc = transactionStore.proxy(rc);
1:             }
1:             topics.put(destination, rc);
1:         }
1:         return rc;
1:     }
1: 
1:     public TransactionStore createTransactionStore() throws IOException {
0:         if( transactionStore==null ) {
0:             transactionStore = new MemoryTransactionStore();
1:         }
1:         return transactionStore;
1:     }
1: 
1:     public void beginTransaction(ConnectionContext context) {
1:     }
1: 
1:     public void commitTransaction(ConnectionContext context) {
1:     }
1: 
1:     public void rollbackTransaction(ConnectionContext context) {
1:     }
1: 
1:     public void start() throws Exception {
1:     }
1: 
1:     public void stop() throws Exception {
1:     }
1:     
1:     public long getLastMessageBrokerSequenceId() throws IOException {
1:         return 0;
1:     }
1: 
1:     public void deleteAllMessages() throws IOException {
0:         for (Iterator iter = topics.values().iterator(); iter.hasNext();) {
0:             MemoryMessageStore store = (MemoryMessageStore) iter.next();
1:             store.delete();
1:         }
0:         for (Iterator iter = queues.values().iterator(); iter.hasNext();) {
0:             MemoryMessageStore store = (MemoryMessageStore) iter.next();
1:             store.delete();
1:         }
1:         transactionStore.delete();
1:     }
1: 
1:     public boolean isUseExternalMessageReferences() {
1:         return useExternalMessageReferences;
1:     }
1: 
1:     public void setUseExternalMessageReferences(boolean useExternalMessageReferences) {
1:         this.useExternalMessageReferences = useExternalMessageReferences;
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:dbc661f
/////////////////////////////////////////////////////////////////////////
1:     
0:     public File getDirectory(){
1:         return null;
1:     }
commit:1a6cbfa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.ProxyMessageStore;
/////////////////////////////////////////////////////////////////////////
1:         if (value instanceof ProxyMessageStore) {
0:             MessageStore delegate = ((ProxyMessageStore)value).getDelegate();
1:             if (delegate instanceof MemoryMessageStore) {
1:                 return (MemoryMessageStore) delegate;
1:             }
1:         }
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:     public void setUsageManager(SystemUsage usageManager) {
/////////////////////////////////////////////////////////////////////////
1:     
0:     public long size(){
1:         return 0;
1:     }
commit:759fd28
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void setBrokerName(String brokerName){        
1:     }
1: 
0:     public void setDirectory(File dir){        
1:     }
1: 
0:     public void checkpoint(boolean sync) throws IOException{        
1:     }
commit:415d46c
/////////////////////////////////////////////////////////////////////////
0:     
0:     public String toString(){
1:         return "MemoryPersistenceAdapter";
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(MemoryPersistenceAdapter.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ProducerId;
/////////////////////////////////////////////////////////////////////////
0: 
1:     public long getLastProducerSequenceId(ProducerId id) {
1:         // memory map does duplicate suppression
1:         return -1;
1:     }
commit:d3fb1aa
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void setCreateTransactionStore(boolean create) throws IOException {
1:         if (create) {
1:             createTransactionStore();
1:         }
1:     }
author:David Jencks
-------------------------------------------------------------------------------
commit:07b6a38
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Cleanup method to remove any state associated with the given destination
0:      *
0:      * @param destination Destination to forget
1:      */
1:     public void removeQueueMessageStore(ActiveMQQueue destination) {
1:         queues.remove(destination);
1:     }
0: 
1:     /**
1:      * Cleanup method to remove any state associated with the given destination
0:      *
0:      * @param destination Destination to forget
1:      */
1:     public void removeTopicMessageStore(ActiveMQTopic destination) {
1:         topics.remove(destination);
1:     }
0: 
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:4f7235d
/////////////////////////////////////////////////////////////////////////
0: 
1:         if (transactionStore != null) {
0:             transactionStore.delete();
1:         }
author:James Strachan
-------------------------------------------------------------------------------
commit:1629774
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(MemoryPersistenceAdapter.class);
/////////////////////////////////////////////////////////////////////////
1:             MemoryMessageStore store = asMemoryMessageStore(iter.next());
1:             if (store != null) {
0:                 store.delete();
1:             }
1:             MemoryMessageStore store = asMemoryMessageStore(iter.next());
1:             if (store != null) {
0:                 store.delete();
1:             }
/////////////////////////////////////////////////////////////////////////
1:     protected MemoryMessageStore asMemoryMessageStore(Object value) {
1:         if (value instanceof MemoryMessageStore) {
0:             return (MemoryMessageStore) value;
1:         }
0:         log.warn("Expected an instance of MemoryMessageStore but was: " + value);
1:         return null;
1:     }
0: 
============================================================================