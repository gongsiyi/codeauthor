1:8493f6b: /**
1:8493f6b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8493f6b:  * contributor license agreements.  See the NOTICE file distributed with
1:8493f6b:  * this work for additional information regarding copyright ownership.
1:8493f6b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8493f6b:  * (the "License"); you may not use this file except in compliance with
1:8493f6b:  * the License.  You may obtain a copy of the License at
1:8493f6b:  * <p>
1:8493f6b:  * http://www.apache.org/licenses/LICENSE-2.0
1:8493f6b:  * <p>
1:8493f6b:  * Unless required by applicable law or agreed to in writing, software
1:8493f6b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8493f6b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8493f6b:  * See the License for the specific language governing permissions and
1:8493f6b:  * limitations under the License.
1:8493f6b:  */
1:8493f6b: package org.apache.activemq.bugs;
1:8493f6b: 
1:8493f6b: 
1:8493f6b: import org.apache.activemq.ActiveMQConnection;
1:8493f6b: import org.apache.activemq.ActiveMQConnectionFactory;
1:8493f6b: import org.apache.activemq.broker.BrokerService;
1:8493f6b: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:8493f6b: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:8493f6b: import org.apache.activemq.broker.region.policy.PolicyMap;
1:8493f6b: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
1:8493f6b: import org.apache.activemq.usage.SystemUsage;
1:8493f6b: import org.apache.activemq.util.Wait;
1:8493f6b: import org.junit.After;
1:8493f6b: import org.junit.Before;
1:8493f6b: import org.junit.Test;
1:8493f6b: import org.slf4j.Logger;
1:8493f6b: import org.slf4j.LoggerFactory;
1:8493f6b: 
1:8493f6b: import javax.jms.Connection;
1:8493f6b: import javax.jms.ConnectionFactory;
1:8493f6b: import javax.jms.Destination;
1:8493f6b: import javax.jms.Message;
1:8493f6b: import javax.jms.MessageConsumer;
1:8493f6b: import javax.jms.MessageProducer;
1:8493f6b: import javax.jms.Session;
1:8493f6b: import java.util.ArrayList;
1:8493f6b: import java.util.List;
1:8493f6b: 
1:8493f6b: import static org.junit.Assert.assertTrue;
1:8493f6b: 
1:8493f6b: /**
1:8493f6b:  * Ensure the tempPercentUsage JMX attribute decreases after temp store usage is decreased
1:8493f6b:  *
1:8493f6b:  */
1:8493f6b: public class AMQ6459Test {
1:8493f6b: 
1:8493f6b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6459Test.class);
1:8493f6b: 
1:8493f6b:     private static final String DESTINATION = "testQ1";
1:8493f6b:     private static final int MESSAGES_TO_SEND = 4000;
1:8493f6b: 
1:8493f6b:     private String TRANSPORT_URL = "tcp://0.0.0.0:0";
1:8493f6b: 
1:8493f6b:     BrokerService broker;
1:8493f6b: 
1:8493f6b:     @Before
1:8493f6b:     public void createBroker() throws Exception {
1:8493f6b: 
1:8493f6b:         broker = new BrokerService();
1:8493f6b:         broker.setDeleteAllMessagesOnStartup(true);
1:8493f6b:         broker.setUseJmx(true);
1:8493f6b: 
1:8493f6b:         PolicyMap policyMap = new PolicyMap();
1:8493f6b:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:8493f6b:         PolicyEntry pe = new PolicyEntry();
1:8493f6b:         pe.setTopicPrefetch(50);
1:8493f6b:         pe.setTopic(">");
1:8493f6b:         entries.add(pe);
1:8493f6b:         policyMap.setPolicyEntries(entries);
1:8493f6b:         broker.setDestinationPolicy(policyMap);
1:8493f6b: 
1:8493f6b:         SystemUsage systemUsage = broker.getSystemUsage();
1:8493f6b:         systemUsage.getTempUsage().setLimit(50 * 1024 * 1024);
1:8493f6b: 
1:8493f6b: 
1:8493f6b:         systemUsage.getMemoryUsage().setLimit(800 * 1024);
1:8493f6b: 
1:8493f6b:         PListStoreImpl pListStore = (PListStoreImpl) broker.getTempDataStore();
1:8493f6b:         pListStore.setJournalMaxFileLength(24 * 1024);
1:8493f6b:         pListStore.setCleanupInterval(2000);
1:8493f6b: 
1:8493f6b:         broker.addConnector(TRANSPORT_URL);
1:8493f6b: 
1:8493f6b:         broker.start();
1:8493f6b:         broker.waitUntilStarted();
1:8493f6b:         TRANSPORT_URL = broker.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:8493f6b: 
1:8493f6b:     }
1:8493f6b: 
1:8493f6b:     @After
1:8493f6b:     public void stopBroker() throws Exception {
1:8493f6b:         broker.stop();
1:8493f6b:     }
1:8493f6b: 
1:8493f6b:     @Test
1:8493f6b:     public void testTempPercentUsageDecreases() throws Exception {
1:8493f6b: 
1:8493f6b:         //create a topic subscriber, but do not consume messages
1:8493f6b:         MessageConsumer messageConsumer = createConsumer();
1:8493f6b: 
1:8493f6b: 
1:8493f6b:         //send X messages with with a sequence number number in the message property.
1:8493f6b:         sendMessages(MESSAGES_TO_SEND);
1:8493f6b: 
1:8493f6b: 
1:8493f6b:         final BrokerViewMBean brokerView = getBrokerView(broker);
1:8493f6b: 
1:8493f6b:         LOG.info("tempPercentageUsage is " + brokerView.getTempPercentUsage());
1:8493f6b: 
1:8493f6b: 
1:8493f6b:         Wait.waitFor(new Wait.Condition() {
1:8493f6b:             @Override
1:8493f6b:             public boolean isSatisified() throws Exception {
1:8493f6b:                 LOG.info("tempPercentageUsage now " + brokerView.getTempPercentUsage());
1:8493f6b:                 return brokerView.getTempPercentUsage() > 50;
1:8493f6b:             }
1:8493f6b:         });
1:8493f6b: 
1:8493f6b:         final int tempPercentUsageWithConsumer = brokerView.getTempPercentUsage();
1:8493f6b: 
1:8493f6b:         //ensure the tempPercentageUsage is at a high number
1:8493f6b:         assertTrue(" tempPercentageUsage ", (50 < tempPercentUsageWithConsumer));
1:8493f6b: 
1:8493f6b:         //close the consumer, releasing the temp storage
1:8493f6b:         messageConsumer.close();
1:8493f6b: 
1:8493f6b:         Wait.waitFor(new Wait.Condition() {
1:8493f6b:             @Override
1:8493f6b:             public boolean isSatisified() throws Exception {
1:8493f6b:                 LOG.info("tempPercentageUsage now (after consumer closed) " + brokerView.getTempPercentUsage());
1:8493f6b:                 return tempPercentUsageWithConsumer > brokerView.getTempPercentUsage();
1:8493f6b:             }
1:8493f6b:         });
1:8493f6b: 
1:8493f6b:         assertTrue("tempPercentageUsage should be less after consumer has closed",
1:8493f6b:                 tempPercentUsageWithConsumer > brokerView.getTempPercentUsage());
1:8493f6b: 
1:8493f6b: 
1:8493f6b:     }
1:8493f6b: 
1:8493f6b:     private MessageConsumer createConsumer() throws Exception {
1:8493f6b:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "admin", TRANSPORT_URL);
1:8493f6b:         Connection connection = connectionFactory.createConnection();
1:8493f6b: 
1:8493f6b:         connection.start();
1:8493f6b:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8493f6b:         Destination destination = session.createTopic(DESTINATION);
1:8493f6b: 
1:8493f6b:         MessageConsumer messageConsumer = session.createConsumer(destination);
1:8493f6b:         return messageConsumer;
1:8493f6b:     }
1:8493f6b: 
1:8493f6b: 
1:8493f6b:     /*
1:8493f6b:      Send X message with a sequence number held in "appID"
1:8493f6b:      */
1:8493f6b:     private Long sendMessages(int messageCount) throws Exception {
1:8493f6b: 
1:8493f6b:         long numberOfMessageSent = 0;
1:8493f6b: 
1:8493f6b:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "admin", TRANSPORT_URL);
1:8493f6b: 
1:8493f6b: 
1:8493f6b:         Connection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:8493f6b:         connection.start();
1:8493f6b: 
1:8493f6b: 
1:8493f6b:         final String blob = new String(new byte[4 * 1024]);
1:8493f6b:         try {
1:8493f6b: 
1:8493f6b:             Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:8493f6b:             MessageProducer jmsProducer = producerSession.createProducer(producerSession.createTopic(DESTINATION));
1:8493f6b: 
1:8493f6b:             Message sendMessage = producerSession.createTextMessage(blob);
1:8493f6b: 
1:8493f6b:             for (int i = 0; i < messageCount; i++) {
1:8493f6b: 
1:8493f6b:                 jmsProducer.send(sendMessage);
1:8493f6b:                 producerSession.commit();
1:8493f6b:                 numberOfMessageSent++;
1:8493f6b: 
1:8493f6b:             }
1:8493f6b: 
1:8493f6b:             LOG.info(" Finished after producing : " + numberOfMessageSent);
1:8493f6b:             return numberOfMessageSent;
1:8493f6b: 
1:8493f6b:         } catch (Exception ex) {
1:8493f6b:             LOG.info("Exception received producing ", ex);
1:8493f6b:             LOG.info("finishing after exception :" + numberOfMessageSent);
1:8493f6b:             return numberOfMessageSent;
1:8493f6b:         } finally {
1:8493f6b:             if (connection != null) {
1:8493f6b:                 connection.close();
1:8493f6b:             }
1:8493f6b:         }
1:8493f6b: 
1:8493f6b:     }
1:8493f6b: 
1:8493f6b: 
1:8493f6b:     private BrokerViewMBean getBrokerView(BrokerService broker) throws Exception {
1:8493f6b:         BrokerViewMBean brokerViewMBean = broker.getAdminView();
1:8493f6b:         return brokerViewMBean;
1:8493f6b: 
1:8493f6b:     }
1:8493f6b: 
1:8493f6b: }
1:8493f6b: 
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8493f6b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * Ensure the tempPercentUsage JMX attribute decreases after temp store usage is decreased
1:  *
1:  */
1: public class AMQ6459Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6459Test.class);
1: 
1:     private static final String DESTINATION = "testQ1";
1:     private static final int MESSAGES_TO_SEND = 4000;
1: 
1:     private String TRANSPORT_URL = "tcp://0.0.0.0:0";
1: 
1:     BrokerService broker;
1: 
1:     @Before
1:     public void createBroker() throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setUseJmx(true);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1:         pe.setTopicPrefetch(50);
1:         pe.setTopic(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         SystemUsage systemUsage = broker.getSystemUsage();
1:         systemUsage.getTempUsage().setLimit(50 * 1024 * 1024);
1: 
1: 
1:         systemUsage.getMemoryUsage().setLimit(800 * 1024);
1: 
1:         PListStoreImpl pListStore = (PListStoreImpl) broker.getTempDataStore();
1:         pListStore.setJournalMaxFileLength(24 * 1024);
1:         pListStore.setCleanupInterval(2000);
1: 
1:         broker.addConnector(TRANSPORT_URL);
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:         TRANSPORT_URL = broker.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1: 
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     @Test
1:     public void testTempPercentUsageDecreases() throws Exception {
1: 
1:         //create a topic subscriber, but do not consume messages
1:         MessageConsumer messageConsumer = createConsumer();
1: 
1: 
1:         //send X messages with with a sequence number number in the message property.
1:         sendMessages(MESSAGES_TO_SEND);
1: 
1: 
1:         final BrokerViewMBean brokerView = getBrokerView(broker);
1: 
1:         LOG.info("tempPercentageUsage is " + brokerView.getTempPercentUsage());
1: 
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("tempPercentageUsage now " + brokerView.getTempPercentUsage());
1:                 return brokerView.getTempPercentUsage() > 50;
1:             }
1:         });
1: 
1:         final int tempPercentUsageWithConsumer = brokerView.getTempPercentUsage();
1: 
1:         //ensure the tempPercentageUsage is at a high number
1:         assertTrue(" tempPercentageUsage ", (50 < tempPercentUsageWithConsumer));
1: 
1:         //close the consumer, releasing the temp storage
1:         messageConsumer.close();
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("tempPercentageUsage now (after consumer closed) " + brokerView.getTempPercentUsage());
1:                 return tempPercentUsageWithConsumer > brokerView.getTempPercentUsage();
1:             }
1:         });
1: 
1:         assertTrue("tempPercentageUsage should be less after consumer has closed",
1:                 tempPercentUsageWithConsumer > brokerView.getTempPercentUsage());
1: 
1: 
1:     }
1: 
1:     private MessageConsumer createConsumer() throws Exception {
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "admin", TRANSPORT_URL);
1:         Connection connection = connectionFactory.createConnection();
1: 
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createTopic(DESTINATION);
1: 
1:         MessageConsumer messageConsumer = session.createConsumer(destination);
1:         return messageConsumer;
1:     }
1: 
1: 
1:     /*
1:      Send X message with a sequence number held in "appID"
1:      */
1:     private Long sendMessages(int messageCount) throws Exception {
1: 
1:         long numberOfMessageSent = 0;
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "admin", TRANSPORT_URL);
1: 
1: 
1:         Connection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
1: 
1:         final String blob = new String(new byte[4 * 1024]);
1:         try {
1: 
1:             Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             MessageProducer jmsProducer = producerSession.createProducer(producerSession.createTopic(DESTINATION));
1: 
1:             Message sendMessage = producerSession.createTextMessage(blob);
1: 
1:             for (int i = 0; i < messageCount; i++) {
1: 
1:                 jmsProducer.send(sendMessage);
1:                 producerSession.commit();
1:                 numberOfMessageSent++;
1: 
1:             }
1: 
1:             LOG.info(" Finished after producing : " + numberOfMessageSent);
1:             return numberOfMessageSent;
1: 
1:         } catch (Exception ex) {
1:             LOG.info("Exception received producing ", ex);
1:             LOG.info("finishing after exception :" + numberOfMessageSent);
1:             return numberOfMessageSent;
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:     }
1: 
1: 
1:     private BrokerViewMBean getBrokerView(BrokerService broker) throws Exception {
1:         BrokerViewMBean brokerViewMBean = broker.getAdminView();
1:         return brokerViewMBean;
1: 
1:     }
1: 
1: }
1: 
============================================================================