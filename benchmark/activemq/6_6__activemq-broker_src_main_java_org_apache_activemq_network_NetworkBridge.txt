1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network;
1:d29ca2a: 
1:f793fbd: import javax.management.ObjectName;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Represents a network bridge interface
1:d29ca2a:  */
1:ae73f86: public interface NetworkBridge extends Service {
1:d29ca2a: 
1:ae73f86:     /**
1:a80acbb:      * Service an exception received from the Remote Broker connection.
1:ae73f86:      * @param error
1:ae73f86:      */
1:fc00993:     void serviceRemoteException(Throwable error);
2:a80acbb: 
1:ae73f86:     /**
1:a80acbb:      * Service an exception received from the Local Broker connection.
1:ae73f86:      * @param error
1:ae73f86:      */
1:fc00993:     void serviceLocalException(Throwable error);
1:a80acbb: 
1:ae73f86:     /**
1:ae73f86:      * Set the NetworkBridgeFailedListener
1:ae73f86:      * @param listener
1:ae73f86:      */
1:fc00993:     void setNetworkBridgeListener(NetworkBridgeListener listener);
1:ec6e6a5: 
1:a80acbb:     /**
1:a80acbb:      * @return the network address of the remote broker connection.
1:a80acbb:      */
1:fc00993:     String getRemoteAddress();
1:ec6e6a5: 
1:a80acbb:     /**
1:a80acbb:      * @return the name of the remote broker this bridge is connected to.
1:a80acbb:      */
1:fc00993:     String getRemoteBrokerName();
1:ec6e6a5: 
1:a80acbb:     /**
1:71e4585:      * @return the id of the remote broker this bridge is connected to.
1:71e4585:      */
1:71e4585:     String getRemoteBrokerId();
1:71e4585: 
1:71e4585:     /**
1:a80acbb:      * @return the network address of the local broker connection.
1:a80acbb:      */
1:fc00993:     String getLocalAddress();
1:ec6e6a5: 
1:a80acbb:     /**
1:a80acbb:      * @return the name of the local broker this bridge is connected to.
1:a80acbb:      */
1:fc00993:     String getLocalBrokerName();
1:ec6e6a5: 
1:a80acbb:     /**
1:a80acbb:      * @return the current number of enqueues this bridge has.
1:a80acbb:      */
1:fc00993:     long getEnqueueCounter();
1:ec6e6a5: 
1:a80acbb:     /**
1:a80acbb:      * @return the current number of dequeues this bridge has.
1:a80acbb:      */
1:fc00993:     long getDequeueCounter();
1:ec6e6a5: 
1:a80acbb:     /**
1:10c998b:      * @return the statistics for this NetworkBridge
1:10c998b:      */
1:10c998b:     NetworkBridgeStatistics getNetworkBridgeStatistics();
1:10c998b: 
1:10c998b:     /**
1:a80acbb:      * @param objectName
1:a80acbb:      *      The ObjectName assigned to this bridge in the MBean server.
1:a80acbb:      */
1:f793fbd:     void setMbeanObjectName(ObjectName objectName);
1:a80acbb: 
1:a80acbb:     /**
1:a80acbb:      * @return the MBean name used to identify this bridge in the MBean server.
1:a80acbb:      */
1:f793fbd:     ObjectName getMbeanObjectName();
1:374cab9: 
1:374cab9:     void resetStats();
1:d29ca2a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:10c998b
/////////////////////////////////////////////////////////////////////////
1:      * @return the statistics for this NetworkBridge
1:      */
1:     NetworkBridgeStatistics getNetworkBridgeStatistics();
1: 
1:     /**
author:rajdavies
-------------------------------------------------------------------------------
commit:71e4585
/////////////////////////////////////////////////////////////////////////
1:      * @return the id of the remote broker this bridge is connected to.
1:      */
1:     String getRemoteBrokerId();
1: 
1:     /**
commit:374cab9
/////////////////////////////////////////////////////////////////////////
1: 
1:     void resetStats();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     void serviceRemoteException(Throwable error);
1:     void serviceLocalException(Throwable error);
1:     void setNetworkBridgeListener(NetworkBridgeListener listener);
1:     String getRemoteAddress();
1:     String getRemoteBrokerName();
1:     String getLocalAddress();
1:     String getLocalBrokerName();
1:     long getEnqueueCounter();
1:     long getDequeueCounter();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ec6e6a5
/////////////////////////////////////////////////////////////////////////
0:     public void setNetworkBridgeListener(NetworkBridgeListener listener);
1:     
1:     
0:     public String getRemoteAddress();
1: 
0:     public String getRemoteBrokerName();
1: 
0:     public String getLocalAddress();
1: 
0:     public String getLocalBrokerName();
1: 
0:     public long getEnqueueCounter();
1: 
0:     public long getDequeueCounter();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import org.apache.activemq.Service;
1: 
1: 
1: /**
1:  * Represents a network bridge interface
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public interface Bridge extends Service {
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.Service;
1: 
1:      * Service an exception received from the Remote Broker connection.
1: 
1:      * Service an exception received from the Local Broker connection.
1: 
1: 
1:     /**
1:      * @return the network address of the remote broker connection.
1:      */
1:     /**
1:      * @return the name of the remote broker this bridge is connected to.
1:      */
1:     /**
1:      * @return the network address of the local broker connection.
1:      */
1:     /**
1:      * @return the name of the local broker this bridge is connected to.
1:      */
1:     /**
1:      * @return the current number of enqueues this bridge has.
1:      */
1:     /**
1:      * @return the current number of dequeues this bridge has.
1:      */
1:     /**
1:      * @param objectName
1:      *      The ObjectName assigned to this bridge in the MBean server.
1:      */
1:     /**
1:      * @return the MBean name used to identify this bridge in the MBean server.
1:      */
author:Gary Tully
-------------------------------------------------------------------------------
commit:f793fbd
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
0: 
1:     void setMbeanObjectName(ObjectName objectName);
0: 
1:     ObjectName getMbeanObjectName();
author:Robert Davies
-------------------------------------------------------------------------------
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
1: public interface NetworkBridge extends Service {
0:     
1:     /**
0:      * Service an exception
1:      * @param error
1:      */
0:     public void serviceRemoteException(Throwable error);
0:     
1:     /**
0:      * servicee an exception
1:      * @param error
1:      */
0:     public void serviceLocalException(Throwable error);
0:     
1:     /**
1:      * Set the NetworkBridgeFailedListener
1:      * @param listener
1:      */
0:     public void setNetworkBridgeFailedListener(NetworkBridgeFailedListener listener);
============================================================================