1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
1:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: 
1:88acb0e: import org.apache.activemq.util.FactoryFinder;
1:f451ad0: import org.apache.activemq.util.IOExceptionSupport;
1:f451ad0: 
1:d29ca2a: /**
1:f812e34:  * A helper class to create a fully configured broker service using a URI. The
1:f812e34:  * list of currently supported URI syntaxes is described <a
1:f812e34:  * href="http://activemq.apache.org/how-do-i-embed-a-broker-inside-a-connection.html">here</a>
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:933eb2f: public final class BrokerFactory {
1:d29ca2a: 
1:fc00993:     private static final FactoryFinder BROKER_FACTORY_HANDLER_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/broker/");
1:d29ca2a: 
1:933eb2f:     private BrokerFactory() {        
1:933eb2f:     }
1:933eb2f:     
1:d29ca2a:     public static BrokerFactoryHandler createBrokerFactoryHandler(String type) throws IOException {
1:d29ca2a:         try {
1:fc00993:             return (BrokerFactoryHandler)BROKER_FACTORY_HANDLER_FINDER.newInstance(type);
1:d29ca2a:         } catch (Throwable e) {
1:4a8ade0:             throw IOExceptionSupport.create("Could not load " + type + " factory:" + e, e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Creates a broker from a URI configuration
1:f812e34:      * 
1:a640190:      * @param brokerURI the URI scheme to configure the broker
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public static BrokerService createBroker(URI brokerURI) throws Exception {
1:a640190:         return createBroker(brokerURI, false);
1:d29ca2a:     }
1:d29ca2a: 
1:a640190:     /**
1:a640190:      * Creates a broker from a URI configuration
1:f812e34:      * 
1:a640190:      * @param brokerURI the URI scheme to configure the broker
1:f812e34:      * @param startBroker whether or not the broker should have its
1:f812e34:      *                {@link BrokerService#start()} method called after
1:f812e34:      *                construction
1:a640190:      * @throws Exception
1:a640190:      */
1:a640190:     public static BrokerService createBroker(URI brokerURI, boolean startBroker) throws Exception {
1:f812e34:         if (brokerURI.getScheme() == null) {
1:f812e34:             throw new IllegalArgumentException("Invalid broker URI, no scheme specified: " + brokerURI);
1:f812e34:         }
1:d29ca2a:         BrokerFactoryHandler handler = createBrokerFactoryHandler(brokerURI.getScheme());
1:d29ca2a:         BrokerService broker = handler.createBroker(brokerURI);
1:a640190:         if (startBroker) {
1:a640190:             broker.start();
1:a640190:         }
1:d29ca2a:         return broker;
1:d29ca2a:     }
1:d29ca2a: 
1:a640190:     /**
1:a640190:      * Creates a broker from a URI configuration
1:f812e34:      * 
1:a640190:      * @param brokerURI the URI scheme to configure the broker
1:a640190:      * @throws Exception
1:a640190:      */
1:0ae6a1d:     public static BrokerService createBroker(String brokerURI) throws Exception {
1:0ae6a1d:         return createBroker(new URI(brokerURI));
1:d29ca2a:     }
1:d29ca2a: 
1:0ae6a1d:     /**
1:0ae6a1d:      * Creates a broker from a URI configuration
1:f812e34:      * 
1:a640190:      * @param brokerURI the URI scheme to configure the broker
1:f812e34:      * @param startBroker whether or not the broker should have its
1:f812e34:      *                {@link BrokerService#start()} method called after
1:f812e34:      *                construction
1:a640190:      * @throws Exception
1:0ae6a1d:      */
1:a640190:     public static BrokerService createBroker(String brokerURI, boolean startBroker) throws Exception {
1:a640190:         return createBroker(new URI(brokerURI), startBroker);
1:a640190:     }
1:d29ca2a: 
1:60646c9:     private static final ThreadLocal<Boolean> START_DEFAULT = new ThreadLocal<Boolean>();
1:60646c9: 
1:60646c9:     public static void setStartDefault(boolean startDefault) {
1:60646c9:         START_DEFAULT.set(startDefault);
1:60646c9:     }
1:60646c9:     public static void resetStartDefault() {
1:60646c9:         START_DEFAULT.remove();
1:60646c9:     }
1:60646c9: 
1:60646c9:     public static boolean getStartDefault() {
1:60646c9:         Boolean value = START_DEFAULT.get();
1:60646c9:         if( value==null ) {
1:60646c9:             return true;
1:60646c9:         }
1:60646c9:         return value.booleanValue();
1:60646c9:     }
1:a640190: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1:     private static final ThreadLocal<Boolean> START_DEFAULT = new ThreadLocal<Boolean>();
1: 
1:     public static void setStartDefault(boolean startDefault) {
1:         START_DEFAULT.set(startDefault);
1:     }
1:     public static void resetStartDefault() {
1:         START_DEFAULT.remove();
1:     }
1: 
1:     public static boolean getStartDefault() {
1:         Boolean value = START_DEFAULT.get();
1:         if( value==null ) {
1:             return true;
1:         }
1:         return value.booleanValue();
1:     }
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class BrokerFactory {
1:     private BrokerFactory() {        
1:     }
1:     
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final FactoryFinder BROKER_FACTORY_HANDLER_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/broker/");
1:             return (BrokerFactoryHandler)BROKER_FACTORY_HANDLER_FINDER.newInstance(type);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * A helper class to create a fully configured broker service using a URI. The
1:  * list of currently supported URI syntaxes is described <a
1:  * href="http://activemq.apache.org/how-do-i-embed-a-broker-inside-a-connection.html">here</a>
0:     static final private FactoryFinder brokerFactoryHandlerFinder = new FactoryFinder(
0:                                                                                       "META-INF/services/org/apache/activemq/broker/");
0:             throw IOExceptionSupport.create("Could load " + type + " factory:" + e, e);
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @param startBroker whether or not the broker should have its
1:      *                {@link BrokerService#start()} method called after
1:      *                construction
1:         if (brokerURI.getScheme() == null) {
1:             throw new IllegalArgumentException("Invalid broker URI, no scheme specified: " + brokerURI);
1:         }
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @param startBroker whether or not the broker should have its
1:      *                {@link BrokerService#start()} method called after
1:      *                construction
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.FactoryFinder;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.util.FactoryFinder;
1: import org.apache.activemq.util.IOExceptionSupport;
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
0: import org.activeio.FactoryFinder;
0: import org.apache.activemq.util.IOExceptionSupport;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: 
1: /**
0:  * A helper class to create a fully configured broker service using a URI.
1:  * 
0:  * @version $Revision$
1:  */
0: public class BrokerFactory {
1: 
0:     static final private FactoryFinder brokerFactoryHandlerFinder = new FactoryFinder("META-INF/services/org/apache/activemq/broker/");    
1: 
0:     public interface BrokerFactoryHandler {
0:         public BrokerService createBroker(URI brokerURI) throws Exception;
1:     }
1:     
1:     public static BrokerFactoryHandler createBrokerFactoryHandler(String type) throws IOException {
1:         try {
0:             return (BrokerFactoryHandler)brokerFactoryHandlerFinder.newInstance(type);
1:         } catch (Throwable e) {
0:             throw IOExceptionSupport.create("Could load "+type+" factory:"+e, e);
1:         }
1:     }
1: 
1:     /**
1:      * Creates a broker from a URI configuration
0:      * @param brokerURI
1:      * @throws Exception 
1:      */
1:     public static BrokerService createBroker(URI brokerURI) throws Exception {
0:         if( brokerURI.getScheme() == null )
0:             throw new IllegalArgumentException("Invalid broker URI, no scheme specified: "+brokerURI);
1:         
1:         BrokerFactoryHandler handler = createBrokerFactoryHandler(brokerURI.getScheme());
1:         BrokerService broker = handler.createBroker(brokerURI);
1:         return broker;
1:     }
1: 
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:4a8ade0
/////////////////////////////////////////////////////////////////////////
1:             throw IOExceptionSupport.create("Could not load " + type + " factory:" + e, e);
author:James Strachan
-------------------------------------------------------------------------------
commit:a640190
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param brokerURI the URI scheme to configure the broker
1:      * @throws Exception
1:         return createBroker(brokerURI, false);
1:     }
0: 
1:     /**
1:      * Creates a broker from a URI configuration
1:      * @param brokerURI the URI scheme to configure the broker
0:      * @param startBroker whether or not the broker should have its {@link BrokerService#start()} method called after construction
1:      * @throws Exception
1:      */
1:     public static BrokerService createBroker(URI brokerURI, boolean startBroker) throws Exception {
1:         if (startBroker) {
1:             broker.start();
1:         }
1:      * @param brokerURI the URI scheme to configure the broker
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Creates a broker from a URI configuration
1:      * @param brokerURI the URI scheme to configure the broker
0:      * @param startBroker whether or not the broker should have its {@link BrokerService#start()} method called after construction
1:      * @throws Exception
1:      */
1:     public static BrokerService createBroker(String brokerURI, boolean startBroker) throws Exception {
1:         return createBroker(new URI(brokerURI), startBroker);
1:     }
0: 
0: 
commit:1d9737d
/////////////////////////////////////////////////////////////////////////
0:  * The list of currently supported URI syntaxes is described
0:  * <a href="http://activemq.apache.org/how-do-i-embed-a-broker-inside-a-connection.html">here</a>
commit:0ae6a1d
/////////////////////////////////////////////////////////////////////////
0:     static final private FactoryFinder brokerFactoryHandlerFinder = new FactoryFinder("META-INF/services/org/apache/activemq/broker/");
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * Creates a broker from a URI configuration
0:      * @param brokerURI
0:      * @throws Exception
1:      */
1:     public static BrokerService createBroker(String brokerURI) throws Exception {
1:         return createBroker(new URI(brokerURI));
0:     }
0: 
0: 
============================================================================