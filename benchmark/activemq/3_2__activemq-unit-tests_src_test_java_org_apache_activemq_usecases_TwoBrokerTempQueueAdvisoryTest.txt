1:d4ccc50: /**
1:d4ccc50:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d4ccc50:  * contributor license agreements.  See the NOTICE file distributed with
1:d4ccc50:  * this work for additional information regarding copyright ownership.
1:d4ccc50:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d4ccc50:  * (the "License"); you may not use this file except in compliance with
1:d4ccc50:  * the License.  You may obtain a copy of the License at
1:d4ccc50:  *
1:d4ccc50:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d4ccc50:  *
1:d4ccc50:  * Unless required by applicable law or agreed to in writing, software
1:d4ccc50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d4ccc50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d4ccc50:  * See the License for the specific language governing permissions and
1:d4ccc50:  * limitations under the License.
1:d4ccc50:  */
1:d4ccc50: /**
1:d4ccc50:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d4ccc50:  * contributor license agreements.  See the NOTICE file distributed with
1:d4ccc50:  * this work for additional information regarding copyright ownership.
1:d4ccc50:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d4ccc50:  * (the "License"); you may not use this file except in compliance with
1:d4ccc50:  * the License.  You may obtain a copy of the License at
1:d4ccc50:  *
1:d4ccc50:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d4ccc50:  *
1:d4ccc50:  * Unless required by applicable law or agreed to in writing, software
1:d4ccc50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d4ccc50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d4ccc50:  * See the License for the specific language governing permissions and
1:d4ccc50:  * limitations under the License.
1:d4ccc50:  */
1:d4ccc50: package org.apache.activemq.usecases;
1:d4ccc50: 
1:d4ccc50: import java.net.URI;
1:5ddc7d6: 
1:d4ccc50: import javax.jms.Connection;
1:d4ccc50: import javax.jms.ConnectionFactory;
1:179d95e: import javax.jms.MessageProducer;
1:d4ccc50: import javax.jms.Session;
1:179d95e: import javax.jms.TemporaryQueue;
1:d4ccc50: import javax.management.ObjectName;
1:5ddc7d6: 
1:179d95e: import junit.framework.Test;
1:5ddc7d6: 
1:179d95e: import org.apache.activemq.ActiveMQConnection;
1:179d95e: import org.apache.activemq.ActiveMQConnectionFactory;
1:179d95e: import org.apache.activemq.ActiveMQMessageConsumer;
1:d4ccc50: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:179d95e: import org.apache.activemq.broker.TransportConnector;
1:d4ccc50: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:d4ccc50: import org.apache.activemq.command.ActiveMQDestination;
1:179d95e: import org.apache.activemq.command.ActiveMQQueue;
1:179d95e: import org.apache.activemq.network.NetworkConnector;
1:d4ccc50: import org.apache.activemq.util.Wait;
1:d4ccc50: import org.slf4j.Logger;
1:d4ccc50: import org.slf4j.LoggerFactory;
1:d4ccc50: 
1:d4ccc50: 
1:d4ccc50: public class TwoBrokerTempQueueAdvisoryTest extends JmsMultipleBrokersTestSupport {
1:d4ccc50:     private static final Logger LOG = LoggerFactory.getLogger(TwoBrokerTempQueueAdvisoryTest.class);
1:d4ccc50: 
1:d4ccc50:     private void sendReceiveTempQueueMessage(String broker) throws Exception {
1:d4ccc50: 
1:5ddc7d6:         ConnectionFactory factory = getConnectionFactory(broker);
1:5ddc7d6:         Connection conn = factory.createConnection();
1:5ddc7d6:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5ddc7d6:         session.createTemporaryQueue();
1:5ddc7d6:         conn.close();
1:d4ccc50:     }
1:d4ccc50: 
1:d4ccc50:     public void testTemporaryQueueAdvisory() throws Exception {
1:5ddc7d6:         LOG.info("Running testTemporaryQueueAdvisory()");
1:d4ccc50: 
1:179d95e:         bridgeBrokers("BrokerA", "BrokerB");
1:179d95e:         bridgeBrokers("BrokerB", "BrokerA");
1:179d95e: 
1:5ddc7d6:         startAllBrokers();
1:d4ccc50:         waitForBridgeFormation();
1:d4ccc50:         waitForMinTopicRegionConsumerCount("BrokerB", 1);
1:d4ccc50:         waitForMinTopicRegionConsumerCount("BrokerA", 1);
1:d4ccc50: 
1:d4ccc50:         final int iterations = 30;
1:d4ccc50:         for (int i = 0; i < iterations; i++) {
1:5ddc7d6:             sendReceiveTempQueueMessage("BrokerA");
1:d4ccc50:         }
1:d4ccc50: 
1:d4ccc50:         waitForMinTopicRegionConsumerCount("BrokerB", 1);
1:d4ccc50:         waitForMinTopicRegionConsumerCount("BrokerA", 1);
1:d4ccc50: 
1:d4ccc50:         final DestinationViewMBean brokerAView = createView("BrokerA", "ActiveMQ.Advisory.TempQueue", ActiveMQDestination.TOPIC_TYPE);
1:d4ccc50:         assertTrue("exact amount of advisories created on A, one each for creation/deletion", Wait.waitFor(new Wait.Condition() {
1:d4ccc50:             @Override
1:d4ccc50:             public boolean isSatisified() throws Exception {
1:d4ccc50:                 LOG.info("BrokerA temp advisory enque count: " + brokerAView.getEnqueueCount());
1:d4ccc50:                 return iterations * 2 == brokerAView.getEnqueueCount();
1:d4ccc50:             }
1:d4ccc50:         }));
1:d4ccc50: 
1:d4ccc50:         final DestinationViewMBean brokerBView = createView("BrokerB", "ActiveMQ.Advisory.TempQueue", ActiveMQDestination.TOPIC_TYPE);
1:d4ccc50:         assertTrue("exact amount of advisories created on B, one each for creation/deletion", Wait.waitFor(new Wait.Condition() {
1:d4ccc50:             @Override
1:d4ccc50:             public boolean isSatisified() throws Exception {
1:d4ccc50:                 LOG.info("BrokerB temp advisory enque count: " + brokerBView.getEnqueueCount());
1:d4ccc50:                 return iterations * 2 == brokerBView.getEnqueueCount();
1:d4ccc50:             }
1:d4ccc50:         }));
1:d4ccc50:     }
1:d4ccc50: 
1:179d95e:     public boolean useDuplex = true;
1:179d95e:     public void initCombosForTestSendToRemovedTemp() {
1:179d95e:         addCombinationValues("useDuplex", new Boolean[]{Boolean.FALSE, Boolean.TRUE});
1:179d95e:     }
1:179d95e: 
1:179d95e:     public void testSendToRemovedTemp() throws Exception {
1:179d95e: 
1:179d95e:         ActiveMQQueue requestReplyDest = new ActiveMQQueue("RequestReply");
1:179d95e: 
1:179d95e:         NetworkConnector nc = bridgeBrokers("BrokerA", "BrokerB");
1:179d95e:         if (useDuplex) {
1:179d95e:             nc.setDuplex(true);
1:179d95e:         } else {
1:179d95e:             bridgeBrokers("BrokerB", "BrokerA");
1:179d95e:         }
1:179d95e: 
1:179d95e:         // destination advisory can loose the race with message dispatch, so we need to allow replies on network broker
1:179d95e:         // to work in the absence of an advisory, the destination will be cleaned up in the normal
1:179d95e:         // way
1:179d95e:         if (!useDuplex) {
1:179d95e:             brokers.get("BrokerB").broker.setAllowTempAutoCreationOnSend(true);
1:179d95e:         }
1:179d95e: 
1:179d95e:         TransportConnector forClient = brokers.get("BrokerA").broker.addConnector("tcp://localhost:0");
1:179d95e:         startAllBrokers();
1:179d95e:         waitForBridgeFormation();
1:179d95e:         waitForMinTopicRegionConsumerCount("BrokerB", 1);
1:179d95e:         waitForMinTopicRegionConsumerCount("BrokerA", 1);
1:179d95e: 
1:179d95e:         ConnectionFactory factory = new ActiveMQConnectionFactory(forClient.getConnectUri());
1:179d95e:         ActiveMQConnection conn = (ActiveMQConnection) factory.createConnection();
1:179d95e:         conn.setWatchTopicAdvisories(false);
1:179d95e:         conn.start();
1:179d95e:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:179d95e: 
1:179d95e:         ConnectionFactory replyFactory = getConnectionFactory("BrokerB");
1:179d95e:         for (int i = 0; i < 500; i++) {
1:179d95e:             TemporaryQueue tempDest = session.createTemporaryQueue();
1:179d95e:             MessageProducer producer = session.createProducer(requestReplyDest);
1:179d95e:             javax.jms.Message message = session.createTextMessage("req-" + i);
1:179d95e:             message.setJMSReplyTo(tempDest);
1:179d95e: 
1:179d95e:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(tempDest);
1:179d95e:             producer.send(message);
1:179d95e: 
1:179d95e:             ActiveMQConnection replyConnection = (ActiveMQConnection) replyFactory.createConnection();
1:179d95e:             replyConnection.setWatchTopicAdvisories(false);
1:179d95e:             replyConnection.start();
1:179d95e:             Session replySession = replyConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:179d95e:             ActiveMQMessageConsumer replyConsumer = (ActiveMQMessageConsumer) replySession.createConsumer(requestReplyDest);
1:179d95e:             javax.jms.Message msg = replyConsumer.receive(10000);
1:179d95e:             assertNotNull("request message not null: " + i, msg);
1:179d95e:             MessageProducer replyProducer = replySession.createProducer(msg.getJMSReplyTo());
1:179d95e:             replyProducer.send(session.createTextMessage("reply-" + i));
1:179d95e:             replyConnection.close();
1:179d95e: 
1:179d95e:             javax.jms.Message reply = consumer.receive(10000);
1:179d95e:             assertNotNull("reply message : " + i + ", to: " + tempDest + ", by consumer:" + consumer.getConsumerId(), reply);
1:179d95e:             consumer.close();
1:179d95e:             tempDest.delete();
1:179d95e:         }
1:179d95e:     }
1:d4ccc50: 
1:d4ccc50:     protected DestinationViewMBean createView(String broker, String destination, byte type) throws Exception {
1:d4ccc50:         String domain = "org.apache.activemq";
1:d4ccc50:         ObjectName name;
1:d4ccc50:         if (type == ActiveMQDestination.QUEUE_TYPE) {
1:5ddc7d6:             name = new ObjectName(domain + ":type=Broker,brokerName=" + broker + ",destinationType=Queue,destinationName=" + destination);
1:d4ccc50:         } else {
1:5ddc7d6:             name = new ObjectName(domain + ":type=Broker,brokerName=" + broker + ",destinationType=Topic,destinationName=" + destination);
1:d4ccc50:         }
1:5ddc7d6:         return (DestinationViewMBean) brokers.get(broker).broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class, true);
1:d4ccc50:     }
1:d4ccc50: 
1:5ddc7d6:     @Override
1:d4ccc50:     public void setUp() throws Exception {
1:d4ccc50:         super.setAutoFail(true);
1:d4ccc50:         super.setUp();
1:d4ccc50: 
1:d4ccc50:         String options = new String("?persistent=false");
1:d4ccc50:         createBroker(new URI("broker:(tcp://localhost:0)/BrokerA" + options));
1:d4ccc50:         createBroker(new URI("broker:(tcp://localhost:0)/BrokerB" + options));
1:179d95e:     }
1:d4ccc50: 
1:179d95e:     public static Test suite() {
1:179d95e:         return suite(TwoBrokerTempQueueAdvisoryTest.class);
1:d4ccc50:     }
1:d4ccc50: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:5ddc7d6
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         ConnectionFactory factory = getConnectionFactory(broker);
1:         Connection conn = factory.createConnection();
1:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createTemporaryQueue();
1:         conn.close();
1:         LOG.info("Running testTemporaryQueueAdvisory()");
1:         startAllBrokers();
1:             sendReceiveTempQueueMessage("BrokerA");
/////////////////////////////////////////////////////////////////////////
1:             name = new ObjectName(domain + ":type=Broker,brokerName=" + broker + ",destinationType=Queue,destinationName=" + destination);
1:             name = new ObjectName(domain + ":type=Broker,brokerName=" + broker + ",destinationType=Topic,destinationName=" + destination);
1:         return (DestinationViewMBean) brokers.get(broker).broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class, true);
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:179d95e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageProducer;
1: import javax.jms.TemporaryQueue;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageConsumer;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.network.NetworkConnector;
/////////////////////////////////////////////////////////////////////////
1:         bridgeBrokers("BrokerA", "BrokerB");
1:         bridgeBrokers("BrokerB", "BrokerA");
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean useDuplex = true;
1:     public void initCombosForTestSendToRemovedTemp() {
1:         addCombinationValues("useDuplex", new Boolean[]{Boolean.FALSE, Boolean.TRUE});
1:     }
1: 
1:     public void testSendToRemovedTemp() throws Exception {
1: 
1:         ActiveMQQueue requestReplyDest = new ActiveMQQueue("RequestReply");
1: 
1:         NetworkConnector nc = bridgeBrokers("BrokerA", "BrokerB");
1:         if (useDuplex) {
1:             nc.setDuplex(true);
1:         } else {
1:             bridgeBrokers("BrokerB", "BrokerA");
1:         }
1: 
1:         // destination advisory can loose the race with message dispatch, so we need to allow replies on network broker
1:         // to work in the absence of an advisory, the destination will be cleaned up in the normal
1:         // way
1:         if (!useDuplex) {
1:             brokers.get("BrokerB").broker.setAllowTempAutoCreationOnSend(true);
1:         }
1: 
1:         TransportConnector forClient = brokers.get("BrokerA").broker.addConnector("tcp://localhost:0");
1:         startAllBrokers();
1:         waitForBridgeFormation();
1:         waitForMinTopicRegionConsumerCount("BrokerB", 1);
1:         waitForMinTopicRegionConsumerCount("BrokerA", 1);
1: 
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(forClient.getConnectUri());
1:         ActiveMQConnection conn = (ActiveMQConnection) factory.createConnection();
1:         conn.setWatchTopicAdvisories(false);
1:         conn.start();
1:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ConnectionFactory replyFactory = getConnectionFactory("BrokerB");
1:         for (int i = 0; i < 500; i++) {
1:             TemporaryQueue tempDest = session.createTemporaryQueue();
1:             MessageProducer producer = session.createProducer(requestReplyDest);
1:             javax.jms.Message message = session.createTextMessage("req-" + i);
1:             message.setJMSReplyTo(tempDest);
1: 
1:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(tempDest);
1:             producer.send(message);
1: 
1:             ActiveMQConnection replyConnection = (ActiveMQConnection) replyFactory.createConnection();
1:             replyConnection.setWatchTopicAdvisories(false);
1:             replyConnection.start();
1:             Session replySession = replyConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             ActiveMQMessageConsumer replyConsumer = (ActiveMQMessageConsumer) replySession.createConsumer(requestReplyDest);
1:             javax.jms.Message msg = replyConsumer.receive(10000);
1:             assertNotNull("request message not null: " + i, msg);
1:             MessageProducer replyProducer = replySession.createProducer(msg.getJMSReplyTo());
1:             replyProducer.send(session.createTextMessage("reply-" + i));
1:             replyConnection.close();
1: 
1:             javax.jms.Message reply = consumer.receive(10000);
1:             assertNotNull("reply message : " + i + ", to: " + tempDest + ", by consumer:" + consumer.getConsumerId(), reply);
1:             consumer.close();
1:             tempDest.delete();
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
1:     }
1:     public static Test suite() {
1:         return suite(TwoBrokerTempQueueAdvisoryTest.class);
commit:d4ccc50
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
0: import javax.jms.Destination;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: public class TwoBrokerTempQueueAdvisoryTest extends JmsMultipleBrokersTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(TwoBrokerTempQueueAdvisoryTest.class);
1: 
1:     private void sendReceiveTempQueueMessage(String broker) throws Exception {
1: 
0:     	ConnectionFactory factory = getConnectionFactory(broker);
0:     	Connection conn = factory.createConnection();
0:     	Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:     	Destination dest = session.createTemporaryQueue();
0:     	conn.close();
1:     }
1: 
1:     public void testTemporaryQueueAdvisory() throws Exception {
0:     	LOG.info("Running testTemporaryQueueAdvisory()");
1: 
0:     	startAllBrokers();
1:         waitForBridgeFormation();
1:         waitForMinTopicRegionConsumerCount("BrokerB", 1);
1:         waitForMinTopicRegionConsumerCount("BrokerA", 1);
1: 
1:         final int iterations = 30;
1:         for (int i = 0; i < iterations; i++) {
0: 	        sendReceiveTempQueueMessage("BrokerA");
1:         }
1: 
1:         waitForMinTopicRegionConsumerCount("BrokerB", 1);
1:         waitForMinTopicRegionConsumerCount("BrokerA", 1);
1: 
1:         final DestinationViewMBean brokerAView = createView("BrokerA", "ActiveMQ.Advisory.TempQueue", ActiveMQDestination.TOPIC_TYPE);
1:         assertTrue("exact amount of advisories created on A, one each for creation/deletion", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("BrokerA temp advisory enque count: " + brokerAView.getEnqueueCount());
1:                 return iterations * 2 == brokerAView.getEnqueueCount();
1:             }
1:         }));
1: 
1:         final DestinationViewMBean brokerBView = createView("BrokerB", "ActiveMQ.Advisory.TempQueue", ActiveMQDestination.TOPIC_TYPE);
1:         assertTrue("exact amount of advisories created on B, one each for creation/deletion", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("BrokerB temp advisory enque count: " + brokerBView.getEnqueueCount());
1:                 return iterations * 2 == brokerBView.getEnqueueCount();
1:             }
1:         }));
1:     }
1: 
1: 
1:     protected DestinationViewMBean createView(String broker, String destination, byte type) throws Exception {
1:         String domain = "org.apache.activemq";
1:         ObjectName name;
1:         if (type == ActiveMQDestination.QUEUE_TYPE) {
0:             name = new ObjectName(domain + ":BrokerName=" + broker + ",Type=Queue,Destination=" + destination);
1:         } else {
0:             name = new ObjectName(domain + ":BrokerName=" + broker + ",Type=Topic,Destination=" + destination);
1:         }
0:         return (DestinationViewMBean) brokers.get(broker).broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class,
0:                 true);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1: 
1:         String options = new String("?persistent=false");
1:         createBroker(new URI("broker:(tcp://localhost:0)/BrokerA" + options));
1:         createBroker(new URI("broker:(tcp://localhost:0)/BrokerB" + options));
1: 
0:         bridgeBrokers("BrokerA", "BrokerB");
0:         bridgeBrokers("BrokerB", "BrokerA");
1:     }
1: }
============================================================================