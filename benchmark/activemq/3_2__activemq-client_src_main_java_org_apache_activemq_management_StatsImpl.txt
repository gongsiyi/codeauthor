1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.management;
3:d29ca2a: 
1:34b123e: import java.util.ArrayList;
1:34b123e: import java.util.List;
1:34b123e: import java.util.Set;
1:34b123e: import java.util.concurrent.CopyOnWriteArraySet;
1:d29ca2a: import javax.management.j2ee.statistics.Statistic;
1:d29ca2a: import javax.management.j2ee.statistics.Stats;
1:d29ca2a: /**
1:d29ca2a:  * Base class for a Stats implementation
1:b0c2a40:  * 
1:74a7a8b:  * 
1:d29ca2a:  */
1:74a7a8b: public class StatsImpl extends StatisticImpl implements Stats, Resettable {
1:34b123e:     //use a Set instead of a Map - to conserve Space
1:34b123e:     private Set<StatisticImpl> set;
1:d29ca2a: 
1:d29ca2a:     public StatsImpl() {
1:34b123e:         this(new CopyOnWriteArraySet<StatisticImpl>());
1:d29ca2a:     }
1:d29ca2a: 
1:34b123e:     public StatsImpl(Set<StatisticImpl> set) {
1:d29ca2a:         super("stats", "many", "Used only as container, not Statistic");
1:34b123e:         this.set = set;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void reset() {
1:d29ca2a:         Statistic[] stats = getStatistics();
1:933eb2f:         int size = stats.length;
1:933eb2f:         for (int i = 0; i < size; i++) {
1:d29ca2a:             Statistic stat = stats[i];
1:d29ca2a:             if (stat instanceof Resettable) {
1:d29ca2a:                 Resettable r = (Resettable) stat;
1:d29ca2a:                 r.reset();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Statistic getStatistic(String name) {
1:34b123e:         for (StatisticImpl stat : this.set) {
1:34b123e:             if (stat.getName() != null && stat.getName().equals(name)) {
1:34b123e:                 return stat;
1:d29ca2a:             }
1:34b123e:         }
1:34b123e:         return null;
1:34b123e:     }
1:d29ca2a: 
1:d29ca2a:     public String[] getStatisticNames() {
1:34b123e:         List<String> names = new ArrayList<String>();
1:34b123e:         for (StatisticImpl stat : this.set) {
1:34b123e:             names.add(stat.getName());
1:34b123e:         }
1:34b123e:         String[] answer = new String[names.size()];
1:34b123e:         names.toArray(answer);
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Statistic[] getStatistics() {
1:34b123e:         Statistic[] answer = new Statistic[this.set.size()];
1:34b123e:         set.toArray(answer);
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void addStatistic(String name, StatisticImpl statistic) {
1:34b123e:         this.set.add(statistic);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:         this(new HashMap<String, StatisticImpl>());
/////////////////////////////////////////////////////////////////////////
1:         int size = stats.length;
1:         for (int i = 0; i < size; i++) {
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private Map<String, StatisticImpl> map;
0:     public StatsImpl(Map<String, StatisticImpl> map) {
/////////////////////////////////////////////////////////////////////////
0:         return map.get(name);
0:         Set<String> keys = map.keySet();
0:         Collection<StatisticImpl> values = map.values();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:  * 
1: public class StatsImpl extends StatisticImpl implements Stats, Resettable {
/////////////////////////////////////////////////////////////////////////
0:                 Resettable r = (Resettable)stat;
0:         return (Statistic)map.get(name);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.management;
1: 
0: import java.util.*;
1: import javax.management.j2ee.statistics.Statistic;
1: import javax.management.j2ee.statistics.Stats;
1: 
1: 
1: /**
1:  * Base class for a Stats implementation
1:  *
0:  * @version $Revision: 1.2 $
1:  */
0: public class StatsImpl extends StatisticImpl implements Stats, Resettable{
0:     private Map map;
1: 
1:     public StatsImpl() {
0:         this(new HashMap());
1:     }
1: 
0:     public StatsImpl(Map map) {
1:         super("stats", "many", "Used only as container, not Statistic");
0:         this.map = map;
1:     }
1: 
1:     public void reset() {
1:         Statistic[] stats = getStatistics();
0:         for (int i = 0, size = stats.length; i < size; i++) {
1:             Statistic stat = stats[i];
1:             if (stat instanceof Resettable) {
1:                 Resettable r = (Resettable) stat;
1:                 r.reset();
1:             }
1:         }
1:     }
1: 
1:     public Statistic getStatistic(String name) {
0:         return (Statistic) map.get(name);
1:     }
1: 
1:     public String[] getStatisticNames() {
0:         Set keys = map.keySet();
0:         String[] answer = new String[keys.size()];
0:         keys.toArray(answer);
1:         return answer;
1:     }
1: 
1:     public Statistic[] getStatistics() {
0:         Collection values = map.values();
0:         Statistic[] answer = new Statistic[values.size()];
0:         values.toArray(answer);
1:         return answer;
1:     }
1: 
1:     protected void addStatistic(String name, StatisticImpl statistic) {
0:         map.put(name, statistic);
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:34b123e
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.concurrent.CopyOnWriteArraySet;
1:     //use a Set instead of a Map - to conserve Space
1:     private Set<StatisticImpl> set;
1:         this(new CopyOnWriteArraySet<StatisticImpl>());
1:     public StatsImpl(Set<StatisticImpl> set) {
1:         this.set = set;
/////////////////////////////////////////////////////////////////////////
0:                 Resettable r = (Resettable) stat;
1:         for (StatisticImpl stat : this.set) {
1:             if (stat.getName() != null && stat.getName().equals(name)) {
1:                 return stat;
1:             }
1:         }
1:         return null;
1:         List<String> names = new ArrayList<String>();
1:         for (StatisticImpl stat : this.set) {
1:             names.add(stat.getName());
1:         }
1:         String[] answer = new String[names.size()];
1:         names.toArray(answer);
1:         Statistic[] answer = new Statistic[this.set.size()];
1:         set.toArray(answer);
1:         this.set.add(statistic);
============================================================================