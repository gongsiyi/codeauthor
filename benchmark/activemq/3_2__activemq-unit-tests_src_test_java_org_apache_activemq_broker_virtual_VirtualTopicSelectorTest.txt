1:027d2e7: /**
1:027d2e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:027d2e7:  * contributor license agreements.  See the NOTICE file distributed with
1:027d2e7:  * this work for additional information regarding copyright ownership.
1:027d2e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:027d2e7:  * (the "License"); you may not use this file except in compliance with
1:027d2e7:  * the License.  You may obtain a copy of the License at
1:027d2e7:  *
1:027d2e7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:027d2e7:  *
1:027d2e7:  * Unless required by applicable law or agreed to in writing, software
1:027d2e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:027d2e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:027d2e7:  * See the License for the specific language governing permissions and
1:027d2e7:  * limitations under the License.
1:027d2e7:  */
1:027d2e7: package org.apache.activemq.broker.virtual;
1:027d2e7: 
1:027d2e7: import javax.jms.Destination;
1:027d2e7: import javax.jms.JMSException;
1:027d2e7: import javax.jms.MessageConsumer;
1:027d2e7: import javax.jms.MessageProducer;
1:027d2e7: import javax.jms.Session;
1:027d2e7: 
1:027d2e7: import org.apache.activemq.broker.BrokerService;
1:027d2e7: import org.apache.activemq.broker.region.DestinationInterceptor;
1:027d2e7: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:027d2e7: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:027d2e7: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:027d2e7: import org.apache.activemq.command.ActiveMQQueue;
1:027d2e7: import org.apache.activemq.command.ActiveMQTopic;
1:027d2e7: import org.apache.activemq.spring.ConsumerBean;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:027d2e7: 
1:027d2e7: public class VirtualTopicSelectorTest extends CompositeTopicTest {
1:027d2e7: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicSelectorTest.class);
1:027d2e7:             
1:027d2e7:     protected Destination getConsumer1Dsetination() {
1:027d2e7:         return new ActiveMQQueue("Consumer.1.VirtualTopic.TEST");
2:027d2e7:     }
1:027d2e7: 
1:027d2e7:     protected Destination getConsumer2Dsetination() {
1:027d2e7:         return new ActiveMQQueue("Consumer.2.VirtualTopic.TEST");
1:027d2e7:     }
1:027d2e7:     
1:027d2e7:     protected Destination getProducerDestination() {
1:027d2e7:         return new ActiveMQTopic("VirtualTopic.TEST");
1:027d2e7:     }
1:027d2e7:     
1:027d2e7:     @Override
1:027d2e7:     protected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) {
1:027d2e7:         messageList1.assertMessagesArrived(total/2);
1:027d2e7:         messageList2.assertMessagesArrived(total/2);
1:027d2e7:  
1:027d2e7:         messageList1.flushMessages();
1:027d2e7:         messageList2.flushMessages();
1:027d2e7:         
1:027d2e7:         LOG.info("validate no other messages on queues");
1:027d2e7:         try {
1:027d2e7:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:027d2e7:                 
1:027d2e7:             Destination destination1 = getConsumer1Dsetination();
1:027d2e7:             Destination destination2 = getConsumer2Dsetination();
1:027d2e7:             MessageConsumer c1 = session.createConsumer(destination1, null);
1:027d2e7:             MessageConsumer c2 = session.createConsumer(destination2, null);
1:027d2e7:             c1.setMessageListener(messageList1);
1:027d2e7:             c2.setMessageListener(messageList2);
1:027d2e7:             
1:027d2e7:             
1:027d2e7:             LOG.info("send one simple message that should go to both consumers");
1:027d2e7:             MessageProducer producer = session.createProducer(getProducerDestination());
1:027d2e7:             assertNotNull(producer);
1:027d2e7:             
1:027d2e7:             producer.send(session.createTextMessage("Last Message"));
1:027d2e7:             
1:027d2e7:             messageList1.assertMessagesArrived(1);
1:027d2e7:             messageList2.assertMessagesArrived(1);
1:027d2e7:         
1:027d2e7:         } catch (JMSException e) {
1:027d2e7:             e.printStackTrace();
1:027d2e7:             fail("unexpeced ex while waiting for last messages: " + e);
1:027d2e7:         }
1:027d2e7:     }
1:027d2e7:     
1:027d2e7:     @Override
1:027d2e7:     protected BrokerService createBroker() throws Exception {
1:027d2e7:         // use message selectors on consumers that need to propagate up to the virtual
1:027d2e7:         // topic dispatch so that un matched messages do not linger on subscription queues
1:027d2e7:         messageSelector1 = "odd = 'yes'";
1:027d2e7:         messageSelector2 = "odd = 'no'";
1:027d2e7:         
1:027d2e7:         BrokerService broker = new BrokerService();
1:027d2e7:         broker.setPersistent(false);
1:027d2e7: 
1:027d2e7:         VirtualTopic virtualTopic = new VirtualTopic();
1:027d2e7:         // the new config that enables selectors on the intercepter
1:027d2e7:         virtualTopic.setSelectorAware(true);
1:027d2e7:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:027d2e7:         interceptor.setVirtualDestinations(new VirtualDestination[]{virtualTopic});
1:027d2e7:         broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:027d2e7:         return broker;
1:8bf987b:     }
1:027d2e7: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicSelectorTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:027d2e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.spring.ConsumerBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class VirtualTopicSelectorTest extends CompositeTopicTest {
1: 
0:     private static final Log LOG = LogFactory.getLog(VirtualTopicSelectorTest.class);
1:             
1:     protected Destination getConsumer1Dsetination() {
1:         return new ActiveMQQueue("Consumer.1.VirtualTopic.TEST");
1:     }
1: 
1:     protected Destination getConsumer2Dsetination() {
1:         return new ActiveMQQueue("Consumer.2.VirtualTopic.TEST");
1:     }
1:     
1:     protected Destination getProducerDestination() {
1:         return new ActiveMQTopic("VirtualTopic.TEST");
1:     }
1:     
1:     @Override
1:     protected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) {
1:         messageList1.assertMessagesArrived(total/2);
1:         messageList2.assertMessagesArrived(total/2);
1:  
1:         messageList1.flushMessages();
1:         messageList2.flushMessages();
1:         
1:         LOG.info("validate no other messages on queues");
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 
1:             Destination destination1 = getConsumer1Dsetination();
1:             Destination destination2 = getConsumer2Dsetination();
1:             MessageConsumer c1 = session.createConsumer(destination1, null);
1:             MessageConsumer c2 = session.createConsumer(destination2, null);
1:             c1.setMessageListener(messageList1);
1:             c2.setMessageListener(messageList2);
1:             
1:             
1:             LOG.info("send one simple message that should go to both consumers");
1:             MessageProducer producer = session.createProducer(getProducerDestination());
1:             assertNotNull(producer);
1:             
1:             producer.send(session.createTextMessage("Last Message"));
1:             
1:             messageList1.assertMessagesArrived(1);
1:             messageList2.assertMessagesArrived(1);
1:         
1:         } catch (JMSException e) {
1:             e.printStackTrace();
1:             fail("unexpeced ex while waiting for last messages: " + e);
1:         }
1:     }
1:     
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         // use message selectors on consumers that need to propagate up to the virtual
1:         // topic dispatch so that un matched messages do not linger on subscription queues
1:         messageSelector1 = "odd = 'yes'";
1:         messageSelector2 = "odd = 'no'";
1:         
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1: 
1:         VirtualTopic virtualTopic = new VirtualTopic();
1:         // the new config that enables selectors on the intercepter
1:         virtualTopic.setSelectorAware(true);
1:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:         interceptor.setVirtualDestinations(new VirtualDestination[]{virtualTopic});
1:         broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:         return broker;
1:     }
1: }
============================================================================