1:0ee0cb9: /**
1:0ee0cb9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0ee0cb9:  * contributor license agreements.  See the NOTICE file distributed with
1:0ee0cb9:  * this work for additional information regarding copyright ownership.
1:0ee0cb9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0ee0cb9:  * (the "License"); you may not use this file except in compliance with
1:0ee0cb9:  * the License.  You may obtain a copy of the License at
1:0ee0cb9:  *
1:0ee0cb9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0ee0cb9:  *
1:0ee0cb9:  * Unless required by applicable law or agreed to in writing, software
1:0ee0cb9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0ee0cb9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0ee0cb9:  * See the License for the specific language governing permissions and
1:0ee0cb9:  * limitations under the License.
1:0ee0cb9:  */
1:0ee0cb9: package org.apache.activemq.bugs;
28:0ee0cb9: 
1:257a4fa: import static org.junit.Assert.fail;
1:257a4fa: 
1:0ee0cb9: import java.util.concurrent.CountDownLatch;
1:0ee0cb9: import java.util.concurrent.TimeUnit;
1:0ee0cb9: import java.util.concurrent.atomic.AtomicInteger;
1:0ee0cb9: 
1:0ee0cb9: import javax.jms.Connection;
1:0ee0cb9: import javax.jms.DeliveryMode;
1:0ee0cb9: import javax.jms.JMSException;
1:0ee0cb9: import javax.jms.Message;
1:0ee0cb9: import javax.jms.MessageListener;
1:0ee0cb9: import javax.jms.MessageProducer;
1:0ee0cb9: import javax.jms.Session;
1:257a4fa: 
1:0ee0cb9: import org.apache.activemq.ActiveMQConnectionFactory;
1:0ee0cb9: import org.apache.activemq.ActiveMQTopicSubscriber;
1:0ee0cb9: import org.apache.activemq.broker.BrokerService;
1:257a4fa: import org.apache.activemq.broker.TransportConnector;
1:0ee0cb9: import org.apache.activemq.command.ActiveMQTopic;
1:0ee0cb9: import org.junit.After;
1:0ee0cb9: import org.junit.Before;
1:0ee0cb9: import org.junit.Test;
1:257a4fa: import org.slf4j.Logger;
1:257a4fa: import org.slf4j.LoggerFactory;
1:0ee0cb9: 
1:0ee0cb9: public class AMQ3678Test implements MessageListener {
1:0ee0cb9: 
1:257a4fa:     private static Logger LOG = LoggerFactory.getLogger(AMQ3678Test.class);
1:0ee0cb9: 
1:0ee0cb9:     private BrokerService broker;
1:257a4fa:     private String connectionURI;
1:0ee0cb9: 
1:257a4fa:     private final AtomicInteger messagesSent = new AtomicInteger(0);
1:257a4fa:     private final AtomicInteger messagesReceived = new AtomicInteger(0);
1:257a4fa:     private final ActiveMQTopic destination = new ActiveMQTopic("XYZ");
1:257a4fa:     private final CountDownLatch latch = new CountDownLatch(2);
1:257a4fa:     private final int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:0ee0cb9: 
1:257a4fa:     @Test(timeout = 60000)
1:0ee0cb9:     public void countConsumers() throws JMSException {
1:257a4fa:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:0ee0cb9:         factory.setAlwaysSyncSend(true);
1:0ee0cb9:         factory.setDispatchAsync(false);
1:0ee0cb9: 
1:0ee0cb9:         final Connection producerConnection = factory.createConnection();
1:0ee0cb9:         producerConnection.start();
1:0ee0cb9: 
1:0ee0cb9:         final Connection consumerConnection = factory.createConnection();
1:0ee0cb9: 
1:0ee0cb9:         consumerConnection.setClientID("subscriber1");
1:0ee0cb9:         Session consumerMQSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:0ee0cb9: 
1:257a4fa:         ActiveMQTopicSubscriber activeConsumer = (ActiveMQTopicSubscriber) consumerMQSession.createDurableSubscriber(destination,
1:257a4fa:             "myTopic?consumer.prefetchSize=1");
1:0ee0cb9: 
1:0ee0cb9:         activeConsumer.setMessageListener(this);
1:0ee0cb9: 
1:0ee0cb9:         consumerConnection.start();
1:0ee0cb9: 
1:0ee0cb9:         final Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0ee0cb9:         final MessageProducer producer = producerSession.createProducer(destination);
1:0ee0cb9:         producer.setDeliveryMode(deliveryMode);
1:0ee0cb9: 
1:0ee0cb9:         Thread t = new Thread(new Runnable() {
1:0ee0cb9: 
1:0ee0cb9:             private boolean done = false;
1:0ee0cb9: 
1:257a4fa:             @Override
1:0ee0cb9:             public void run() {
1:0ee0cb9:                 while (!done) {
1:0ee0cb9:                     if (messagesSent.get() == 50) {
3:0ee0cb9:                         try {
1:0ee0cb9:                             broker.getAdminView().removeTopic(destination.getTopicName());
1:0ee0cb9:                         } catch (Exception e1) {
1:257a4fa:                             fail("Unable to remove destination:" + destination.getPhysicalName());
6:0ee0cb9:                         }
1:0ee0cb9:                     }
1:0ee0cb9: 
1:0ee0cb9:                     try {
1:0ee0cb9:                         producer.send(producerSession.createTextMessage());
1:0ee0cb9:                         int val = messagesSent.incrementAndGet();
1:0ee0cb9: 
1:257a4fa:                         LOG.trace("sent message (" + val + ")");
1:0ee0cb9: 
1:0ee0cb9:                         if (val == 100) {
1:0ee0cb9:                             done = true;
1:0ee0cb9:                             latch.countDown();
1:0ee0cb9:                             producer.close();
1:0ee0cb9:                             producerSession.close();
1:0ee0cb9:                         }
1:0ee0cb9:                     } catch (JMSException e) {
2:0ee0cb9:                         e.printStackTrace();
1:0ee0cb9:                     }
1:0ee0cb9:                 }
1:0ee0cb9:             }
1:0ee0cb9:         });
1:0ee0cb9: 
1:0ee0cb9:         t.start();
1:0ee0cb9: 
1:0ee0cb9:         try {
1:0ee0cb9:             if (!latch.await(10, TimeUnit.SECONDS)) {
1:0ee0cb9:                 fail("did not receive all the messages");
1:0ee0cb9:             }
1:0ee0cb9:         } catch (InterruptedException e) {
1:0ee0cb9:             fail("did not receive all the messages, exception waiting for latch");
1:0ee0cb9:         }
1:0ee0cb9:     }
1:0ee0cb9: 
1:0ee0cb9:     @Before
1:0ee0cb9:     public void setUp() throws Exception {
1:0ee0cb9:         broker = new BrokerService();
1:0ee0cb9:         broker.setPersistent(false);
1:0ee0cb9:         broker.setUseJmx(true);
1:257a4fa:         broker.getManagementContext().setCreateConnector(false);
1:257a4fa:         broker.setAdvisorySupport(false);
1:0ee0cb9: 
1:257a4fa:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
1:0ee0cb9:         broker.start();
1:257a4fa:         broker.waitUntilStarted();
1:0ee0cb9: 
1:257a4fa:         connectionURI = connector.getPublishableConnectString();
1:0ee0cb9:     }
1:0ee0cb9: 
1:0ee0cb9:     @After
1:0ee0cb9:     public void tearDown() throws Exception {
1:0ee0cb9:         broker.stop();
1:257a4fa:         broker.waitUntilStopped();
1:0ee0cb9:     }
1:0ee0cb9: 
1:0ee0cb9:     @Override
1:0ee0cb9:     public void onMessage(Message message) {
1:0ee0cb9:         try {
1:0ee0cb9:             message.acknowledge();
1:0ee0cb9:             int val = messagesReceived.incrementAndGet();
1:257a4fa:             LOG.trace("received message (" + val + ")");
1:0ee0cb9:             if (messagesReceived.get() == 100) {
1:0ee0cb9:                 latch.countDown();
1:0ee0cb9:             }
1:0ee0cb9:         } catch (JMSException e) {
1:0ee0cb9:             e.printStackTrace();
1:0ee0cb9:         }
1:0ee0cb9:     }
1:0ee0cb9: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:257a4fa
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.broker.TransportConnector;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ3678Test.class);
1:     private String connectionURI;
1:     private final AtomicInteger messagesSent = new AtomicInteger(0);
1:     private final AtomicInteger messagesReceived = new AtomicInteger(0);
1:     private final ActiveMQTopic destination = new ActiveMQTopic("XYZ");
1:     private final CountDownLatch latch = new CountDownLatch(2);
1:     private final int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:     @Test(timeout = 60000)
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQTopicSubscriber activeConsumer = (ActiveMQTopicSubscriber) consumerMQSession.createDurableSubscriber(destination,
1:             "myTopic?consumer.prefetchSize=1");
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:                             fail("Unable to remove destination:" + destination.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
1:                         LOG.trace("sent message (" + val + ")");
/////////////////////////////////////////////////////////////////////////
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setAdvisorySupport(false);
1:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
1:         broker.waitUntilStarted();
1:         connectionURI = connector.getPublishableConnectString();
1:         broker.waitUntilStopped();
1:             LOG.trace("received message (" + val + ")");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:0ee0cb9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
0: import java.io.IOException;
0: import java.lang.management.ManagementFactory;
0: import java.net.ServerSocket;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQTopicSubscriber;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import static org.junit.Assert.fail;
1: 
1: 
1: public class AMQ3678Test implements MessageListener {
1: 
0:     public int deliveryMode = DeliveryMode.NON_PERSISTENT;
1: 
1: 
1:     private BrokerService broker;
1: 
0:     AtomicInteger messagesSent = new AtomicInteger(0);
0:     AtomicInteger messagesReceived = new AtomicInteger(0);
1: 
0:     ActiveMQTopic destination = new ActiveMQTopic("XYZ");
1: 
0:     int port;
0:     int jmxport;
1: 
1: 
0:     final CountDownLatch latch = new CountDownLatch(2);
1: 
1: 
0:     public static void main(String[] args) throws Exception {
1: 
1:     }
1: 
1: 
0:     public static int findFreePort() throws IOException {
0:         ServerSocket socket = null;
1: 
1:         try {
0:             // 0 is open a socket on any free port
0:             socket = new ServerSocket(0);
0:             return socket.getLocalPort();
0:         } finally {
0:             if (socket != null) {
0:                 socket.close();
1:             }
1:         }
1:     }
1: 
1: 
0:     @Test
1:     public void countConsumers() throws JMSException {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:" + port);
1:         factory.setAlwaysSyncSend(true);
1:         factory.setDispatchAsync(false);
1: 
1:         final Connection producerConnection = factory.createConnection();
1:         producerConnection.start();
1: 
1:         final Connection consumerConnection = factory.createConnection();
1: 
1:         consumerConnection.setClientID("subscriber1");
1:         Session consumerMQSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
0:         ActiveMQTopicSubscriber activeConsumer = (ActiveMQTopicSubscriber) consumerMQSession.createDurableSubscriber(destination, "myTopic?consumer.prefetchSize=1");
1: 
1:         activeConsumer.setMessageListener(this);
1: 
1:         consumerConnection.start();
1: 
1: 
1:         final Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageProducer producer = producerSession.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1: 
1:         Thread t = new Thread(new Runnable() {
1: 
1:             private boolean done = false;
1: 
1:             public void run() {
1:                 while (!done) {
1:                     if (messagesSent.get() == 50) {
1:                         try {
1:                             broker.getAdminView().removeTopic(destination.getTopicName());
1:                         } catch (Exception e1) {
0:                             // TODO Auto-generated catch block
0:                             e1.printStackTrace();
0:                             System.err.flush();
0:                             fail("Unable to remove destination:"
0:                                     + destination.getPhysicalName());
1:                         }
1:                     }
1: 
1:                     try {
1:                         producer.send(producerSession.createTextMessage());
1:                         int val = messagesSent.incrementAndGet();
1: 
0:                         System.out.println("sent message (" + val + ")");
0:                         System.out.flush();
1: 
1:                         if (val == 100) {
1:                             done = true;
1:                             latch.countDown();
1:                             producer.close();
1:                             producerSession.close();
1: 
1:                         }
1:                     } catch (JMSException e) {
0:                         // TODO Auto-generated catch block
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             }
1:         });
1: 
1:         t.start();
1: 
1:         try {
1:             if (!latch.await(10, TimeUnit.SECONDS)) {
1:                 fail("did not receive all the messages");
1:             }
1:         } catch (InterruptedException e) {
0:             // TODO Auto-generated catch block
1:             fail("did not receive all the messages, exception waiting for latch");
1:             e.printStackTrace();
1:         }
1: 
1: 
0: //   
1: 
1: 
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         try {
0:             port = findFreePort();
0:             jmxport = findFreePort();
0:         } catch (Exception e) {
0:             fail("Unable to obtain a free port on which to start the broker");
1:         }
1: 
0:         System.out.println("Starting broker");
0:         System.out.flush();
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
0:         ManagementContext ctx = new ManagementContext(ManagementFactory.getPlatformMBeanServer());
0:         ctx.setConnectorPort(jmxport);
0:         broker.setManagementContext(ctx);
1:         broker.setUseJmx(true);
0: //        broker.setAdvisorySupport(false);
0: //        broker.setDeleteAllMessagesOnStartup(true);
1: 
0:         broker.addConnector("tcp://localhost:" + port).setName("Default");
1:         broker.start();
1: 
1: 
0:         System.out.println("End of Broker Setup");
0:         System.out.flush();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1: 
1:     @Override
1:     public void onMessage(Message message) {
1:         try {
1:             message.acknowledge();
1:             int val = messagesReceived.incrementAndGet();
0:             System.out.println("received message (" + val + ")");
0:             System.out.flush();
1:             if (messagesReceived.get() == 100) {
1:                 latch.countDown();
1:             }
1:         } catch (JMSException e) {
0:             // TODO Auto-generated catch block
1:             e.printStackTrace();
1:         }
1: 
1:     }
1: 
1: 
1: }
============================================================================