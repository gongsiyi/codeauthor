1:261ccab: /**
1:261ccab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:261ccab:  * contributor license agreements.  See the NOTICE file distributed with
1:261ccab:  * this work for additional information regarding copyright ownership.
1:261ccab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:261ccab:  * (the "License"); you may not use this file except in compliance with
1:261ccab:  * the License.  You may obtain a copy of the License at
1:261ccab:  *
1:261ccab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:261ccab:  *
1:261ccab:  * Unless required by applicable law or agreed to in writing, software
1:261ccab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:261ccab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:261ccab:  * See the License for the specific language governing permissions and
1:261ccab:  * limitations under the License.
1:261ccab:  */
1:5170a8b: package org.apache.activemq.store.jdbc;
3:5170a8b: 
1:5170a8b: import javax.jms.Connection;
1:5170a8b: import javax.jms.Destination;
1:5170a8b: import javax.jms.MessageConsumer;
1:5170a8b: import javax.jms.MessageProducer;
1:5170a8b: import javax.jms.Session;
1:5170a8b: 
1:5170a8b: import junit.framework.TestCase;
1:5170a8b: 
1:5170a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:5170a8b: import org.apache.activemq.broker.BrokerService;
1:5170a8b: import org.apache.derby.jdbc.EmbeddedDataSource;
1:b588d6c: import org.junit.Ignore;
1:5170a8b: 
1:5170a8b: 
1:5170a8b: public class JDBCTestMemory extends TestCase {
1:5170a8b: 
1:5170a8b:     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:5170a8b:     Connection conn;
1:5170a8b:     Session sess;
1:5170a8b:     Destination dest;
1:5170a8b:     
1:5170a8b:     BrokerService broker;
1:5170a8b:     
1:5170a8b:     protected void setUp() throws Exception {
1:5170a8b:         broker = createBroker();
1:5170a8b:         broker.start();
1:5170a8b:         broker.waitUntilStarted();
1:5170a8b:     }
1:5170a8b: 
1:5170a8b:     protected void tearDown() throws Exception {
1:5170a8b:         broker.stop();
1:5170a8b:     }
1:5170a8b: 
1:5170a8b:     protected BrokerService createBroker() throws Exception {
1:5170a8b:         BrokerService broker = new BrokerService();
1:5170a8b:         broker.setUseJmx(true);
1:5170a8b:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
1:5170a8b:         jdbc.deleteAllMessages();
1:5170a8b:         broker.setPersistenceAdapter(jdbc);
1:5170a8b:         broker.addConnector("tcp://0.0.0.0:61616");
1:5170a8b:         return broker;
1:5170a8b:     }
1:5170a8b:     
1:5170a8b:     protected BrokerService createRestartedBroker() throws Exception {
1:5170a8b:         BrokerService broker = new BrokerService();
1:5170a8b:         broker.setUseJmx(true);
1:5170a8b:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
1:5170a8b:         broker.setPersistenceAdapter(jdbc);
1:5170a8b:         broker.addConnector("tcp://0.0.0.0:61616");
1:5170a8b:         return broker;
1:5170a8b:     }
1:5170a8b:     
1:5170a8b:     public void init() throws Exception {
1:5170a8b:         conn = factory.createConnection();
1:5170a8b:         conn.start();
1:5170a8b:         sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5170a8b:         dest = sess.createQueue("test");        
1:5170a8b:     }
1:b588d6c: 
1:b588d6c:     @Ignore("requires human input to terminate!")
1:5170a8b:     public void testRecovery() throws Exception {
1:5170a8b:         init();
1:5170a8b:         MessageProducer producer = sess.createProducer(dest);
1:5170a8b:         for (int i = 0; i < 1000; i++) {
1:5170a8b:             producer.send(sess.createTextMessage("test"));
1:5170a8b:         }
1:5170a8b:         producer.close();
1:5170a8b:         sess.close();
1:5170a8b:         conn.close();
1:5170a8b:         
1:5170a8b:         broker.stop();
1:5170a8b:         broker.waitUntilStopped();
1:5170a8b:         broker = createRestartedBroker();
1:5170a8b:         broker.start();
1:5170a8b:         broker.waitUntilStarted();
1:5170a8b:         
1:5170a8b:         init();
1:5170a8b:         
1:5170a8b:         for (int i = 0; i < 10; i++) {
1:5170a8b:             new Thread("Producer " + i) {
1:5170a8b: 
1:5170a8b:                 public void run() {
1:5170a8b:                     try {
1:5170a8b:                         MessageProducer producer = sess.createProducer(dest);
1:5170a8b:                         for (int i = 0; i < 15000; i++) {
1:5170a8b:                             producer.send(sess.createTextMessage("test"));
1:5170a8b:                             if (i % 100 == 0) {
1:5170a8b:                                 System.out.println(getName() + " sent message " + i);
1:5170a8b:                             }
1:5170a8b:                         }
1:5170a8b:                         producer.close();
1:5170a8b:                     } catch (Exception e) {
1:5170a8b:                         e.printStackTrace();
1:5170a8b:                     }
1:5170a8b:                 }
1:5170a8b:                 
1:5170a8b:             }.start();
1:5170a8b:             
1:5170a8b:             new Thread("Consumer " + i) {
1:5170a8b: 
1:5170a8b:                 public void run() {
1:5170a8b:                     try {
1:5170a8b:                         MessageConsumer consumer = sess.createConsumer(dest);
1:5170a8b:                         for (int i = 0; i < 15000; i++) {
1:5170a8b:                             consumer.receive(2000);
1:5170a8b:                             if (i % 100 == 0) {
1:5170a8b:                                 System.out.println(getName() + " received message " + i);
1:5170a8b:                             }
1:5170a8b:                         }
1:5170a8b:                         consumer.close();
1:5170a8b:                     } catch (Exception e) {
1:5170a8b:                         e.printStackTrace();
1:5170a8b:                     }
1:5170a8b:                 }
1:5170a8b:                 
1:5170a8b:             }.start();
1:5170a8b:         }
1:5170a8b:         
1:5170a8b:         // Check out JConsole
1:5170a8b:         System.in.read();
1:5170a8b:         sess.close();
1:5170a8b:         conn.close();
1:5170a8b:     }
1:5170a8b:     
1:5170a8b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:165959e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:b588d6c
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Ignore("requires human input to terminate!")
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:261ccab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:5170a8b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.jdbc;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: 
1: 
1: public class JDBCTestMemory extends TestCase {
1: 
1:     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:     Connection conn;
1:     Session sess;
1:     Destination dest;
1:     
1:     BrokerService broker;
1:     
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(true);
1:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
0:         EmbeddedDataSource dataSource = new EmbeddedDataSource();
0:         dataSource.setDatabaseName("derbyDb");
0:         dataSource.setCreateDatabase("create");
0:         jdbc.setDataSource(dataSource);
1:         
1:         jdbc.deleteAllMessages();
1:         broker.setPersistenceAdapter(jdbc);
1:         broker.addConnector("tcp://0.0.0.0:61616");
1:         return broker;
1:     }
1:     
1:     protected BrokerService createRestartedBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(true);
1:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
0:         EmbeddedDataSource dataSource = new EmbeddedDataSource();
0:         dataSource.setDatabaseName("derbyDb");
0:         dataSource.setCreateDatabase("create");
0:         jdbc.setDataSource(dataSource);
1:         broker.setPersistenceAdapter(jdbc);
1:         broker.addConnector("tcp://0.0.0.0:61616");
1:         return broker;
1:     }
1:     
1:     public void init() throws Exception {
1:         conn = factory.createConnection();
1:         conn.start();
1:         sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         dest = sess.createQueue("test");        
1:     }
1:     
1:     public void testRecovery() throws Exception {
1:         init();
1:         MessageProducer producer = sess.createProducer(dest);
1:         for (int i = 0; i < 1000; i++) {
1:             producer.send(sess.createTextMessage("test"));
1:         }
1:         producer.close();
1:         sess.close();
1:         conn.close();
1:         
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = createRestartedBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:         
1:         init();
1:         
1:         for (int i = 0; i < 10; i++) {
1:             new Thread("Producer " + i) {
1: 
1:                 public void run() {
1:                     try {
1:                         MessageProducer producer = sess.createProducer(dest);
1:                         for (int i = 0; i < 15000; i++) {
1:                             producer.send(sess.createTextMessage("test"));
1:                             if (i % 100 == 0) {
1:                                 System.out.println(getName() + " sent message " + i);
1:                             }
1:                         }
1:                         producer.close();
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:                 
1:             }.start();
1:             
1:             new Thread("Consumer " + i) {
1: 
1:                 public void run() {
1:                     try {
1:                         MessageConsumer consumer = sess.createConsumer(dest);
1:                         for (int i = 0; i < 15000; i++) {
1:                             consumer.receive(2000);
1:                             if (i % 100 == 0) {
1:                                 System.out.println(getName() + " received message " + i);
1:                             }
1:                         }
1:                         consumer.close();
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:                 
1:             }.start();
1:         }
1:         
1:         // Check out JConsole
1:         System.in.read();
1:         sess.close();
1:         conn.close();
1:     }
1:     
1: }
============================================================================