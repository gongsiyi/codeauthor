1:903dec6: /**
1:903dec6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:903dec6:  * contributor license agreements.  See the NOTICE file distributed with
1:903dec6:  * this work for additional information regarding copyright ownership.
1:903dec6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:903dec6:  * (the "License"); you may not use this file except in compliance with
1:903dec6:  * the License.  You may obtain a copy of the License at
1:903dec6:  *
1:903dec6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:903dec6:  *
1:903dec6:  * Unless required by applicable law or agreed to in writing, software
1:903dec6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:903dec6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:903dec6:  * See the License for the specific language governing permissions and
1:903dec6:  * limitations under the License.
1:903dec6:  */
1:903dec6: package org.apache.activemq.bugs;
1:903dec6: 
1:903dec6: import static org.junit.Assert.assertEquals;
1:903dec6: 
1:903dec6: import java.util.Arrays;
1:903dec6: import java.util.Collection;
1:903dec6: 
1:903dec6: import javax.jms.Connection;
1:903dec6: import javax.jms.MessageProducer;
1:903dec6: import javax.jms.Session;
1:903dec6: import javax.jms.TemporaryQueue;
1:903dec6: import javax.jms.TextMessage;
1:903dec6: 
1:903dec6: import org.apache.activemq.ActiveMQConnectionFactory;
1:903dec6: import org.apache.activemq.broker.BrokerService;
1:903dec6: import org.apache.activemq.broker.TransportConnector;
1:903dec6: import org.apache.activemq.broker.region.Destination;
1:903dec6: import org.apache.activemq.command.ActiveMQDestination;
1:903dec6: import org.junit.After;
1:903dec6: import org.junit.Before;
1:903dec6: import org.junit.Test;
1:903dec6: import org.junit.runner.RunWith;
1:903dec6: import org.junit.runners.Parameterized;
1:903dec6: import org.junit.runners.Parameterized.Parameters;
1:903dec6: 
1:903dec6: /**
1:903dec6:  * Test that statistics for a sent message are properly counted for a temporary destination
1:903dec6:  * whether inside a transaction or not.
1:903dec6:  */
1:903dec6: @RunWith(Parameterized.class)
1:903dec6: public class AMQ6194Test {
1:903dec6: 
1:903dec6:     private boolean transaction;
1:903dec6: 
1:903dec6:     @Parameters(name = "transaction:{0}")
1:903dec6:     public static Collection<Object[]> data() {
1:903dec6:         return Arrays.asList(new Object[][] {
1:903dec6:             //!transaction
1:903dec6:             {false},
1:903dec6:             //transaction
1:903dec6:             {true}
1:903dec6:         });
1:903dec6:     }
1:903dec6: 
1:903dec6:     private BrokerService brokerService;
1:903dec6:     private String connectionUri;
1:903dec6: 
1:903dec6:     /**
1:903dec6:      * @param transaction
1:903dec6:      */
1:903dec6:     public AMQ6194Test(boolean transaction) {
1:903dec6:         super();
1:903dec6:         this.transaction = transaction;
1:903dec6:     }
1:903dec6: 
1:903dec6:     @Before
1:903dec6:     public void before() throws Exception {
1:903dec6:         brokerService = new BrokerService();
1:903dec6:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:903dec6:         connectionUri = connector.getPublishableConnectString();
1:903dec6:         brokerService.setPersistent(false);
1:903dec6:         brokerService.start();
1:903dec6:         brokerService.waitUntilStarted();
1:903dec6:     }
1:903dec6: 
1:903dec6:     @After
1:903dec6:     public void after() throws Exception {
1:903dec6:         if (brokerService != null) {
1:903dec6:             brokerService.stop();
1:903dec6:             brokerService.waitUntilStopped();
1:903dec6:         }
1:903dec6:     }
1:903dec6: 
1:903dec6:     @Test
1:903dec6:     public void testTempStatistics() throws Exception {
1:903dec6:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:903dec6:         Connection connection = null;
1:903dec6:         Session session = null;
1:903dec6:         MessageProducer producer = null;
1:903dec6:         TemporaryQueue temporaryQueue = null;
1:903dec6:         try {
1:903dec6:             connection = factory.createConnection();
1:903dec6:             connection.start();
1:903dec6:             if (transaction) {
1:903dec6:                 session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:903dec6:             } else {
1:903dec6:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:903dec6:             }
1:903dec6:             temporaryQueue = session.createTemporaryQueue();
1:903dec6:             producer = session.createProducer(temporaryQueue);
1:903dec6:             final TextMessage textMessage = session.createTextMessage();
1:903dec6:             textMessage.setText("Text Message");
1:903dec6: 
1:903dec6:             producer.send(textMessage);
1:903dec6: 
1:903dec6:             if (transaction) {
1:903dec6:                 session.commit();
1:903dec6:             }
1:903dec6:             Destination dest = brokerService.getDestination((ActiveMQDestination) temporaryQueue);
1:903dec6:             assertEquals(1, dest.getDestinationStatistics().getMessages().getCount());
1:903dec6:         } finally {
1:903dec6:             if (connection != null) {
1:903dec6:                 connection.close();
1:903dec6:             }
1:903dec6:         }
1:903dec6:     }
1:903dec6: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:903dec6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * Test that statistics for a sent message are properly counted for a temporary destination
1:  * whether inside a transaction or not.
1:  */
1: @RunWith(Parameterized.class)
1: public class AMQ6194Test {
1: 
1:     private boolean transaction;
1: 
1:     @Parameters(name = "transaction:{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:             //!transaction
1:             {false},
1:             //transaction
1:             {true}
1:         });
1:     }
1: 
1:     private BrokerService brokerService;
1:     private String connectionUri;
1: 
1:     /**
1:      * @param transaction
1:      */
1:     public AMQ6194Test(boolean transaction) {
1:         super();
1:         this.transaction = transaction;
1:     }
1: 
1:     @Before
1:     public void before() throws Exception {
1:         brokerService = new BrokerService();
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         connectionUri = connector.getPublishableConnectString();
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testTempStatistics() throws Exception {
1:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         Connection connection = null;
1:         Session session = null;
1:         MessageProducer producer = null;
1:         TemporaryQueue temporaryQueue = null;
1:         try {
1:             connection = factory.createConnection();
1:             connection.start();
1:             if (transaction) {
1:                 session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             } else {
1:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             }
1:             temporaryQueue = session.createTemporaryQueue();
1:             producer = session.createProducer(temporaryQueue);
1:             final TextMessage textMessage = session.createTextMessage();
1:             textMessage.setText("Text Message");
1: 
1:             producer.send(textMessage);
1: 
1:             if (transaction) {
1:                 session.commit();
1:             }
1:             Destination dest = brokerService.getDestination((ActiveMQDestination) temporaryQueue);
1:             assertEquals(1, dest.getDestinationStatistics().getMessages().getCount());
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: }
============================================================================