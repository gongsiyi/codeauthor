1:433912f: /**
1:433912f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:433912f:  * contributor license agreements.  See the NOTICE file distributed with
1:433912f:  * this work for additional information regarding copyright ownership.
1:433912f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:433912f:  * (the "License"); you may not use this file except in compliance with
1:433912f:  * the License.  You may obtain a copy of the License at
1:433912f:  *
1:433912f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:433912f:  *
1:433912f:  * Unless required by applicable law or agreed to in writing, software
1:433912f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:433912f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:433912f:  * See the License for the specific language governing permissions and
1:433912f:  * limitations under the License.
1:433912f:  */
1:433912f: 
1:433912f: package org.apache.activemq.broker.scheduler.memory;
1:433912f: 
1:433912f: import java.io.File;
1:433912f: import java.util.HashMap;
1:433912f: import java.util.Map;
1:433912f: import java.util.concurrent.locks.ReentrantLock;
1:433912f: 
1:433912f: import org.apache.activemq.broker.scheduler.JobScheduler;
1:433912f: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1:433912f: import org.apache.activemq.util.ServiceStopper;
1:433912f: import org.apache.activemq.util.ServiceSupport;
1:433912f: import org.slf4j.Logger;
1:433912f: import org.slf4j.LoggerFactory;
1:433912f: 
1:433912f: /**
1:433912f:  * An in-memory JobSchedulerStore implementation used for Brokers that have persistence
1:433912f:  * disabled or when the JobSchedulerStore usage doesn't require a file or DB based store
1:433912f:  * implementation allowing for better performance.
1:433912f:  */
1:433912f: public class InMemoryJobSchedulerStore extends ServiceSupport implements JobSchedulerStore {
1:433912f: 
1:433912f:     private static final Logger LOG = LoggerFactory.getLogger(InMemoryJobSchedulerStore.class);
1:433912f: 
1:433912f:     private final ReentrantLock lock = new ReentrantLock();
1:433912f:     private final Map<String, InMemoryJobScheduler> schedulers = new HashMap<String, InMemoryJobScheduler>();
1:433912f: 
1:433912f:     @Override
1:433912f:     protected void doStop(ServiceStopper stopper) throws Exception {
1:433912f:         for (InMemoryJobScheduler scheduler : schedulers.values()) {
1:433912f:             try {
1:433912f:                 scheduler.stop();
1:433912f:             } catch (Exception e) {
1:433912f:                 LOG.error("Failed to stop scheduler: {}", scheduler.getName(), e);
1:433912f:             }
1:433912f:         }
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     protected void doStart() throws Exception {
1:433912f:         for (InMemoryJobScheduler scheduler : schedulers.values()) {
1:433912f:             try {
1:433912f:                 scheduler.start();
1:433912f:             } catch (Exception e) {
1:433912f:                 LOG.error("Failed to start scheduler: {}", scheduler.getName(), e);
1:433912f:             }
1:433912f:         }
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public JobScheduler getJobScheduler(String name) throws Exception {
1:433912f:         this.lock.lock();
1:433912f:         try {
1:433912f:             InMemoryJobScheduler result = this.schedulers.get(name);
1:433912f:             if (result == null) {
1:433912f:                 LOG.debug("Creating new in-memory scheduler: {}", name);
1:433912f:                 result = new InMemoryJobScheduler(name);
1:433912f:                 this.schedulers.put(name, result);
1:433912f:                 if (isStarted()) {
1:433912f:                     result.start();
1:433912f:                 }
1:433912f:             }
1:433912f:             return result;
1:433912f:         } finally {
1:433912f:             this.lock.unlock();
1:433912f:         }
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public boolean removeJobScheduler(String name) throws Exception {
1:433912f:         boolean result = false;
1:433912f: 
1:433912f:         this.lock.lock();
1:433912f:         try {
1:433912f:             InMemoryJobScheduler scheduler = this.schedulers.remove(name);
1:433912f:             result = scheduler != null;
1:433912f:             if (result) {
1:433912f:                 LOG.debug("Removing in-memory Job Scheduler: {}", name);
1:433912f:                 scheduler.stop();
1:433912f:                 this.schedulers.remove(name);
1:433912f:             }
1:433912f:         } finally {
1:433912f:             this.lock.unlock();
1:433912f:         }
1:433912f:         return result;
1:433912f:     }
1:433912f: 
1:433912f:     //---------- Methods that don't really apply to this implementation ------//
1:433912f: 
1:433912f:     @Override
1:433912f:     public long size() {
1:433912f:         return 0;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public File getDirectory() {
1:433912f:         return null;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public void setDirectory(File directory) {
1:433912f:     }
1:433912f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:433912f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.scheduler.memory;
1: 
1: import java.io.File;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.locks.ReentrantLock;
1: 
1: import org.apache.activemq.broker.scheduler.JobScheduler;
1: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.util.ServiceSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * An in-memory JobSchedulerStore implementation used for Brokers that have persistence
1:  * disabled or when the JobSchedulerStore usage doesn't require a file or DB based store
1:  * implementation allowing for better performance.
1:  */
1: public class InMemoryJobSchedulerStore extends ServiceSupport implements JobSchedulerStore {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(InMemoryJobSchedulerStore.class);
1: 
1:     private final ReentrantLock lock = new ReentrantLock();
1:     private final Map<String, InMemoryJobScheduler> schedulers = new HashMap<String, InMemoryJobScheduler>();
1: 
1:     @Override
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         for (InMemoryJobScheduler scheduler : schedulers.values()) {
1:             try {
1:                 scheduler.stop();
1:             } catch (Exception e) {
1:                 LOG.error("Failed to stop scheduler: {}", scheduler.getName(), e);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     protected void doStart() throws Exception {
1:         for (InMemoryJobScheduler scheduler : schedulers.values()) {
1:             try {
1:                 scheduler.start();
1:             } catch (Exception e) {
1:                 LOG.error("Failed to start scheduler: {}", scheduler.getName(), e);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public JobScheduler getJobScheduler(String name) throws Exception {
1:         this.lock.lock();
1:         try {
1:             InMemoryJobScheduler result = this.schedulers.get(name);
1:             if (result == null) {
1:                 LOG.debug("Creating new in-memory scheduler: {}", name);
1:                 result = new InMemoryJobScheduler(name);
1:                 this.schedulers.put(name, result);
1:                 if (isStarted()) {
1:                     result.start();
1:                 }
1:             }
1:             return result;
1:         } finally {
1:             this.lock.unlock();
1:         }
1:     }
1: 
1:     @Override
1:     public boolean removeJobScheduler(String name) throws Exception {
1:         boolean result = false;
1: 
1:         this.lock.lock();
1:         try {
1:             InMemoryJobScheduler scheduler = this.schedulers.remove(name);
1:             result = scheduler != null;
1:             if (result) {
1:                 LOG.debug("Removing in-memory Job Scheduler: {}", name);
1:                 scheduler.stop();
1:                 this.schedulers.remove(name);
1:             }
1:         } finally {
1:             this.lock.unlock();
1:         }
1:         return result;
1:     }
1: 
1:     //---------- Methods that don't really apply to this implementation ------//
1: 
1:     @Override
1:     public long size() {
1:         return 0;
1:     }
1: 
1:     @Override
1:     public File getDirectory() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public void setDirectory(File directory) {
1:     }
1: }
============================================================================