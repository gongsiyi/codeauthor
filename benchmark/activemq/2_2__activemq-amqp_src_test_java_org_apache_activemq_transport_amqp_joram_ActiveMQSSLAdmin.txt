2:4a270fe: /**
1:4a270fe:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4a270fe:  * contributor license agreements.  See the NOTICE file distributed with
1:4a270fe:  * this work for additional information regarding copyright ownership.
1:4a270fe:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4a270fe:  * (the "License"); you may not use this file except in compliance with
1:4a270fe:  * the License.  You may obtain a copy of the License at
1:4a270fe:  *
1:4a270fe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4a270fe:  *
1:4a270fe:  * Unless required by applicable law or agreed to in writing, software
1:4a270fe:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4a270fe:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4a270fe:  * See the License for the specific language governing permissions and
1:4a270fe:  * limitations under the License.
2:4a270fe:  */
1:4a270fe: package org.apache.activemq.transport.amqp.joram;
1:7bafa7d: 
1:4a270fe: import java.io.File;
1:4a270fe: import java.security.SecureRandom;
2:4a270fe: 
1:4a270fe: import javax.naming.NamingException;
1:4a270fe: import javax.net.ssl.KeyManager;
1:4a270fe: import javax.net.ssl.SSLContext;
1:4a270fe: import javax.net.ssl.TrustManager;
1:4a270fe: 
1:4a270fe: import org.apache.activemq.broker.TransportConnector;
1:4a270fe: import org.apache.activemq.spring.SpringSslContext;
1:4a270fe: import org.apache.activemq.transport.amqp.DefaultTrustManager;
1:3051882: import org.apache.qpid.jms.JmsConnectionFactory;
1:4a270fe: import org.slf4j.Logger;
1:4a270fe: import org.slf4j.LoggerFactory;
1:4a270fe: 
1:4a270fe: public class ActiveMQSSLAdmin extends ActiveMQAdmin {
1:4a270fe: 
1:4a270fe:     private static final String AMQP_SSL_URI = "amqp+ssl://localhost:0";
1:4a270fe:     protected static final Logger LOG = LoggerFactory.getLogger(ActiveMQSSLAdmin.class);
1:4a270fe: 
1:4a270fe:     @Override
1:4a270fe:     public void startServer() throws Exception {
1:4a270fe:         SSLContext ctx = SSLContext.getInstance("TLS");
1:4a270fe:         ctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());
1:4a270fe:         SSLContext.setDefault(ctx);
1:4a270fe: 
1:4a270fe:         // Setup SSL context...
1:4a270fe:         final File classesDir = new File(ActiveMQSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile());
1:4a270fe:         File keystore = new File(classesDir, "../../src/test/resources/keystore");
1:4a270fe:         final SpringSslContext sslContext = new SpringSslContext();
1:4a270fe:         sslContext.setKeyStore(keystore.getCanonicalPath());
1:4a270fe:         sslContext.setKeyStorePassword("password");
1:4a270fe:         sslContext.setTrustStore(keystore.getCanonicalPath());
1:4a270fe:         sslContext.setTrustStorePassword("password");
1:4a270fe:         sslContext.afterPropertiesSet();
1:4a270fe: 
1:4a270fe:         if (broker != null) {
1:4a270fe:             stopServer();
1:4a270fe:         }
1:4a270fe:         if (System.getProperty("basedir") == null) {
1:4a270fe:             File file = new File(".");
1:4a270fe:             System.setProperty("basedir", file.getAbsolutePath());
1:4a270fe:         }
1:4a270fe:         broker = createBroker();
1:4a270fe:         broker.setSslContext(sslContext);
1:4a270fe: 
1:4a270fe:         String connectorURI = getConnectorURI();
1:4a270fe:         TransportConnector connector = broker.addConnector(connectorURI);
1:4a270fe:         port = connector.getConnectUri().getPort();
1:e1bbde7:         LOG.info("ssl port is {}", port);
1:4a270fe: 
1:4a270fe:         broker.start();
1:4a270fe:     }
1:4a270fe: 
1:4a270fe:     @Override
1:4a270fe:     protected String getConnectorURI() {
1:4a270fe:         return AMQP_SSL_URI;
1:4a270fe:     }
1:4a270fe: 
1:4a270fe:     @Override
1:4a270fe:     public void createConnectionFactory(String name) {
1:4a270fe:         try {
1:e1bbde7:             LOG.debug("Creating a connection factory using port {}", port);
1:3051882:             final JmsConnectionFactory factory =
1:3051882:                 new JmsConnectionFactory("amqps://localhost:" + port + "?transport.verifyHost=false");
1:7bafa7d: 
1:7bafa7d:             SpringSslContext sslContext = (SpringSslContext) broker.getSslContext();
1:3051882: 
1:3051882:             System.setProperty("javax.net.ssl.trustStore", sslContext.getTrustStore());
1:3051882:             System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:3051882:             System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:3051882:             System.setProperty("javax.net.ssl.keyStore", sslContext.getKeyStore());
1:3051882:             System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:3051882:             System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:7bafa7d: 
1:4a270fe:             context.bind(name, factory);
1:4a270fe:         } catch (NamingException e) {
1:4a270fe:             throw new RuntimeException(e);
1:4a270fe:         }
1:4a270fe:     }
1:4a270fe: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3051882
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.jms.JmsConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:             final JmsConnectionFactory factory =
1:                 new JmsConnectionFactory("amqps://localhost:" + port + "?transport.verifyHost=false");
1: 
1:             System.setProperty("javax.net.ssl.trustStore", sslContext.getTrustStore());
1:             System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:             System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:             System.setProperty("javax.net.ssl.keyStore", sslContext.getKeyStore());
1:             System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:             System.setProperty("javax.net.ssl.keyStoreType", "jks");
commit:7bafa7d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:             ConnectionFactoryImpl implFactory = (ConnectionFactoryImpl) factory;
1: 
1:             SpringSslContext sslContext = (SpringSslContext) broker.getSslContext();
0:             implFactory.setKeyStorePath(sslContext.getKeyStore());
0:             implFactory.setKeyStorePassword("password");
0:             implFactory.setTrustStorePath(sslContext.getTrustStore());
0:             implFactory.setTrustStorePassword("password");
1: 
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("ssl port is {}", port);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Creating a connection factory using port {}", port);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4a270fe
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.joram;
1: 
1: import java.io.File;
1: import java.security.SecureRandom;
1: 
0: import javax.jms.ConnectionFactory;
1: import javax.naming.NamingException;
1: import javax.net.ssl.KeyManager;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.TrustManager;
1: 
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.spring.SpringSslContext;
1: import org.apache.activemq.transport.amqp.DefaultTrustManager;
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  */
1: public class ActiveMQSSLAdmin extends ActiveMQAdmin {
1: 
1:     private static final String AMQP_SSL_URI = "amqp+ssl://localhost:0";
1:     protected static final Logger LOG = LoggerFactory.getLogger(ActiveMQSSLAdmin.class);
1: 
1:     @Override
1:     public void startServer() throws Exception {
1:         SSLContext ctx = SSLContext.getInstance("TLS");
1:         ctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());
1:         SSLContext.setDefault(ctx);
1: 
1:         // Setup SSL context...
1:         final File classesDir = new File(ActiveMQSSLAdmin.class.getProtectionDomain().getCodeSource().getLocation().getFile());
1:         File keystore = new File(classesDir, "../../src/test/resources/keystore");
1:         final SpringSslContext sslContext = new SpringSslContext();
1:         sslContext.setKeyStore(keystore.getCanonicalPath());
1:         sslContext.setKeyStorePassword("password");
1:         sslContext.setTrustStore(keystore.getCanonicalPath());
1:         sslContext.setTrustStorePassword("password");
1:         sslContext.afterPropertiesSet();
1: 
1:         if (broker != null) {
1:             stopServer();
1:         }
1:         if (System.getProperty("basedir") == null) {
1:             File file = new File(".");
1:             System.setProperty("basedir", file.getAbsolutePath());
1:         }
1:         broker = createBroker();
1:         broker.setSslContext(sslContext);
1: 
1:         String connectorURI = getConnectorURI();
1:         TransportConnector connector = broker.addConnector(connectorURI);
1:         port = connector.getConnectUri().getPort();
0:         LOG.info("ssl port is " + port);
1: 
1:         broker.start();
0:         //broker.
0:         //super.startServer();
1:     }
1: 
1:     @Override
1:     protected String getConnectorURI() {
1:         return AMQP_SSL_URI;
1:     }
1: 
1:     @Override
1:     public void createConnectionFactory(String name) {
1:         try {
0:             LOG.debug("Creating a connection factory using port " + port);
0:             final ConnectionFactory factory = new ConnectionFactoryImpl("localhost", port, null, null, null, true);
1:             context.bind(name, factory);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: }
============================================================================