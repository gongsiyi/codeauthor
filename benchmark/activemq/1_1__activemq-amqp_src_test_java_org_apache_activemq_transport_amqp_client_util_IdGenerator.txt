1:82a5839: /*
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82a5839:  * contributor license agreements.  See the NOTICE file distributed with
1:82a5839:  * this work for additional information regarding copyright ownership.
1:82a5839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82a5839:  * (the "License"); you may not use this file except in compliance with
1:82a5839:  * the License.  You may obtain a copy of the License at
1:82a5839:  *
1:82a5839:  *      http://www.apache.org/licenses/LICENSE-2.0
1:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing, software
1:82a5839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82a5839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82a5839:  * See the License for the specific language governing permissions and
1:82a5839:  * limitations under the License.
1:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.util;
1:82a5839: 
1:82a5839: import java.io.IOException;
1:82a5839: import java.net.InetAddress;
1:82a5839: import java.net.ServerSocket;
1:82a5839: import java.net.UnknownHostException;
1:82a5839: import java.util.concurrent.atomic.AtomicLong;
1:82a5839: 
1:82a5839: import org.slf4j.Logger;
1:82a5839: import org.slf4j.LoggerFactory;
1:82a5839: 
1:82a5839: /**
1:82a5839:  * Generator for Globally unique Strings.
1:82a5839:  */
1:82a5839: public class IdGenerator {
1:82a5839: 
1:82a5839:     private static final Logger LOG = LoggerFactory.getLogger(IdGenerator.class);
1:82a5839:     private static final String UNIQUE_STUB;
1:82a5839:     private static int instanceCount;
1:82a5839:     private static String hostName;
1:82a5839:     private String seed;
1:82a5839:     private final AtomicLong sequence = new AtomicLong(1);
1:82a5839:     private int length;
1:82a5839:     public static final String PROPERTY_IDGENERATOR_PORT = "activemq.idgenerator.port";
1:82a5839: 
1:82a5839:     static {
1:82a5839:         String stub = "";
1:82a5839:         boolean canAccessSystemProps = true;
1:82a5839:         try {
1:82a5839:             SecurityManager sm = System.getSecurityManager();
1:82a5839:             if (sm != null) {
1:82a5839:                 sm.checkPropertiesAccess();
1:82a5839:             }
1:82a5839:         } catch (SecurityException se) {
1:82a5839:             canAccessSystemProps = false;
1:82a5839:         }
1:82a5839: 
1:82a5839:         if (canAccessSystemProps) {
1:82a5839:             int idGeneratorPort = 0;
1:82a5839:             ServerSocket ss = null;
1:82a5839:             try {
1:82a5839:                 idGeneratorPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_PORT, "0"));
1:82a5839:                 LOG.trace("Using port {}", idGeneratorPort);
1:82a5839:                 hostName = getLocalHostName();
1:82a5839:                 ss = new ServerSocket(idGeneratorPort);
1:82a5839:                 stub = "-" + ss.getLocalPort() + "-" + System.currentTimeMillis() + "-";
1:82a5839:                 Thread.sleep(100);
1:82a5839:             } catch (Exception e) {
1:82a5839:                 if (LOG.isTraceEnabled()) {
1:82a5839:                     LOG.trace("could not generate unique stub by using DNS and binding to local port", e);
1:82a5839:                 } else {
1:82a5839:                     LOG.warn("could not generate unique stub by using DNS and binding to local port: {} {}", e.getClass().getCanonicalName(), e.getMessage());
1:82a5839:                 }
1:82a5839: 
1:82a5839:                 // Restore interrupted state so higher level code can deal with it.
1:82a5839:                 if (e instanceof InterruptedException) {
1:82a5839:                     Thread.currentThread().interrupt();
1:82a5839:                 }
1:82a5839:             } finally {
1:82a5839:                 if (ss != null) {
1:82a5839:                     try {
1:82a5839:                         ss.close();
1:82a5839:                     } catch (IOException ioe) {
1:82a5839:                         if (LOG.isTraceEnabled()) {
1:82a5839:                             LOG.trace("Closing the server socket failed", ioe);
1:82a5839:                         } else {
1:82a5839:                             LOG.warn("Closing the server socket failed" + " due " + ioe.getMessage());
1:82a5839:                         }
1:82a5839:                     }
1:82a5839:                 }
1:82a5839:             }
1:82a5839:         }
1:82a5839: 
1:82a5839:         if (hostName == null) {
1:82a5839:             hostName = "localhost";
1:82a5839:         }
1:82a5839:         hostName = sanitizeHostName(hostName);
1:82a5839: 
1:82a5839:         if (stub.length() == 0) {
1:82a5839:             stub = "-1-" + System.currentTimeMillis() + "-";
1:82a5839:         }
1:82a5839:         UNIQUE_STUB = stub;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Construct an IdGenerator
1:82a5839:      *
1:82a5839:      * @param prefix
1:82a5839:      *      The prefix value that is applied to all generated IDs.
1:82a5839:      */
1:82a5839:     public IdGenerator(String prefix) {
1:82a5839:         synchronized (UNIQUE_STUB) {
1:82a5839:             this.seed = prefix + UNIQUE_STUB + (instanceCount++) + ":";
1:82a5839:             this.length = this.seed.length() + ("" + Long.MAX_VALUE).length();
1:82a5839:         }
1:82a5839:     }
1:82a5839: 
1:82a5839:     public IdGenerator() {
1:82a5839:         this("ID:" + hostName);
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * As we have to find the host name as a side-affect of generating a unique stub, we allow
1:82a5839:      * it's easy retrieval here
1:82a5839:      *
1:82a5839:      * @return the local host name
1:82a5839:      */
1:82a5839:     public static String getHostName() {
1:82a5839:         return hostName;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Generate a unique id
1:82a5839:      *
1:82a5839:      * @return a unique id
1:82a5839:      */
1:82a5839:     public synchronized String generateId() {
1:82a5839:         StringBuilder sb = new StringBuilder(length);
1:82a5839:         sb.append(seed);
1:82a5839:         sb.append(sequence.getAndIncrement());
1:82a5839:         return sb.toString();
1:82a5839:     }
1:82a5839: 
1:82a5839:     public static String sanitizeHostName(String hostName) {
1:82a5839:         boolean changed = false;
1:82a5839: 
1:82a5839:         StringBuilder sb = new StringBuilder();
1:82a5839:         for (char ch : hostName.toCharArray()) {
1:82a5839:             // only include ASCII chars
1:82a5839:             if (ch < 127) {
1:82a5839:                 sb.append(ch);
1:82a5839:             } else {
1:82a5839:                 changed = true;
1:82a5839:             }
1:82a5839:         }
1:82a5839: 
1:82a5839:         if (changed) {
1:82a5839:             String newHost = sb.toString();
1:82a5839:             LOG.info("Sanitized hostname from: {} to: {}", hostName, newHost);
1:82a5839:             return newHost;
1:82a5839:         } else {
1:82a5839:             return hostName;
1:82a5839:         }
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Generate a unique ID - that is friendly for a URL or file system
1:82a5839:      *
1:82a5839:      * @return a unique id
1:82a5839:      */
1:82a5839:     public String generateSanitizedId() {
1:82a5839:         String result = generateId();
1:82a5839:         result = result.replace(':', '-');
1:82a5839:         result = result.replace('_', '-');
1:82a5839:         result = result.replace('.', '-');
1:82a5839:         return result;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * From a generated id - return the seed (i.e. minus the count)
1:82a5839:      *
1:82a5839:      * @param id
1:82a5839:      *        the generated identifier
1:82a5839:      * @return the seed
1:82a5839:      */
1:82a5839:     public static String getSeedFromId(String id) {
1:82a5839:         String result = id;
1:82a5839:         if (id != null) {
1:82a5839:             int index = id.lastIndexOf(':');
1:82a5839:             if (index > 0 && (index + 1) < id.length()) {
1:82a5839:                 result = id.substring(0, index);
1:82a5839:             }
1:82a5839:         }
1:82a5839:         return result;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * From a generated id - return the generator count
1:82a5839:      *
1:82a5839:      * @param id
1:82a5839:      *      The ID that will be parsed for a sequence number.
1:82a5839:      *
1:82a5839:      * @return the sequence value parsed from the given ID.
1:82a5839:      */
1:82a5839:     public static long getSequenceFromId(String id) {
1:82a5839:         long result = -1;
1:82a5839:         if (id != null) {
1:82a5839:             int index = id.lastIndexOf(':');
1:82a5839: 
1:82a5839:             if (index > 0 && (index + 1) < id.length()) {
1:82a5839:                 String numStr = id.substring(index + 1, id.length());
1:82a5839:                 result = Long.parseLong(numStr);
1:82a5839:             }
1:82a5839:         }
1:82a5839:         return result;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Does a proper compare on the Id's
1:82a5839:      *
1:82a5839:      * @param id1 the lhs of the comparison.
1:82a5839:      * @param id2 the rhs of the comparison.
1:82a5839:      *
1:82a5839:      * @return 0 if equal else a positive if {@literal id1 > id2} ...
1:82a5839:      */
1:82a5839:     public static int compare(String id1, String id2) {
1:82a5839:         int result = -1;
1:82a5839:         String seed1 = IdGenerator.getSeedFromId(id1);
1:82a5839:         String seed2 = IdGenerator.getSeedFromId(id2);
1:82a5839:         if (seed1 != null && seed2 != null) {
1:82a5839:             result = seed1.compareTo(seed2);
1:82a5839:             if (result == 0) {
1:82a5839:                 long count1 = IdGenerator.getSequenceFromId(id1);
1:82a5839:                 long count2 = IdGenerator.getSequenceFromId(id2);
1:82a5839:                 result = (int) (count1 - count2);
1:82a5839:             }
1:82a5839:         }
1:82a5839:         return result;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * When using the {@link java.net.InetAddress#getHostName()} method in an
1:82a5839:      * environment where neither a proper DNS lookup nor an <tt>/etc/hosts</tt>
1:82a5839:      * entry exists for a given host, the following exception will be thrown:
1:82a5839:      * <code>
1:82a5839:      * java.net.UnknownHostException: &lt;hostname&gt;: &lt;hostname&gt;
1:82a5839:      *  at java.net.InetAddress.getLocalHost(InetAddress.java:1425)
1:82a5839:      *   ...
1:82a5839:      * </code>
1:82a5839:      * Instead of just throwing an UnknownHostException and giving up, this
1:82a5839:      * method grabs a suitable hostname from the exception and prevents the
1:82a5839:      * exception from being thrown. If a suitable hostname cannot be acquired
1:82a5839:      * from the exception, only then is the <tt>UnknownHostException</tt> thrown.
1:82a5839:      *
1:82a5839:      * @return The hostname
1:82a5839:      *
1:82a5839:      * @throws UnknownHostException if the given host cannot be looked up.
1:82a5839:      *
1:82a5839:      * @see java.net.InetAddress#getLocalHost()
1:82a5839:      * @see java.net.InetAddress#getHostName()
1:82a5839:      */
1:82a5839:     protected static String getLocalHostName() throws UnknownHostException {
1:82a5839:         try {
1:82a5839:             return (InetAddress.getLocalHost()).getHostName();
1:82a5839:         } catch (UnknownHostException uhe) {
1:82a5839:             String host = uhe.getMessage(); // host = "hostname: hostname"
1:82a5839:             if (host != null) {
1:82a5839:                 int colon = host.indexOf(':');
1:82a5839:                 if (colon > 0) {
1:82a5839:                     return host.substring(0, colon);
1:82a5839:                 }
1:82a5839:             }
1:82a5839:             throw uhe;
1:82a5839:         }
1:82a5839:     }
1:82a5839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.util;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.ServerSocket;
1: import java.net.UnknownHostException;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Generator for Globally unique Strings.
1:  */
1: public class IdGenerator {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(IdGenerator.class);
1:     private static final String UNIQUE_STUB;
1:     private static int instanceCount;
1:     private static String hostName;
1:     private String seed;
1:     private final AtomicLong sequence = new AtomicLong(1);
1:     private int length;
1:     public static final String PROPERTY_IDGENERATOR_PORT = "activemq.idgenerator.port";
1: 
1:     static {
1:         String stub = "";
1:         boolean canAccessSystemProps = true;
1:         try {
1:             SecurityManager sm = System.getSecurityManager();
1:             if (sm != null) {
1:                 sm.checkPropertiesAccess();
1:             }
1:         } catch (SecurityException se) {
1:             canAccessSystemProps = false;
1:         }
1: 
1:         if (canAccessSystemProps) {
1:             int idGeneratorPort = 0;
1:             ServerSocket ss = null;
1:             try {
1:                 idGeneratorPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_PORT, "0"));
1:                 LOG.trace("Using port {}", idGeneratorPort);
1:                 hostName = getLocalHostName();
1:                 ss = new ServerSocket(idGeneratorPort);
1:                 stub = "-" + ss.getLocalPort() + "-" + System.currentTimeMillis() + "-";
1:                 Thread.sleep(100);
1:             } catch (Exception e) {
1:                 if (LOG.isTraceEnabled()) {
1:                     LOG.trace("could not generate unique stub by using DNS and binding to local port", e);
1:                 } else {
1:                     LOG.warn("could not generate unique stub by using DNS and binding to local port: {} {}", e.getClass().getCanonicalName(), e.getMessage());
1:                 }
1: 
1:                 // Restore interrupted state so higher level code can deal with it.
1:                 if (e instanceof InterruptedException) {
1:                     Thread.currentThread().interrupt();
1:                 }
1:             } finally {
1:                 if (ss != null) {
1:                     try {
1:                         ss.close();
1:                     } catch (IOException ioe) {
1:                         if (LOG.isTraceEnabled()) {
1:                             LOG.trace("Closing the server socket failed", ioe);
1:                         } else {
1:                             LOG.warn("Closing the server socket failed" + " due " + ioe.getMessage());
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         if (hostName == null) {
1:             hostName = "localhost";
1:         }
1:         hostName = sanitizeHostName(hostName);
1: 
1:         if (stub.length() == 0) {
1:             stub = "-1-" + System.currentTimeMillis() + "-";
1:         }
1:         UNIQUE_STUB = stub;
1:     }
1: 
1:     /**
1:      * Construct an IdGenerator
1:      *
1:      * @param prefix
1:      *      The prefix value that is applied to all generated IDs.
1:      */
1:     public IdGenerator(String prefix) {
1:         synchronized (UNIQUE_STUB) {
1:             this.seed = prefix + UNIQUE_STUB + (instanceCount++) + ":";
1:             this.length = this.seed.length() + ("" + Long.MAX_VALUE).length();
1:         }
1:     }
1: 
1:     public IdGenerator() {
1:         this("ID:" + hostName);
1:     }
1: 
1:     /**
1:      * As we have to find the host name as a side-affect of generating a unique stub, we allow
1:      * it's easy retrieval here
1:      *
1:      * @return the local host name
1:      */
1:     public static String getHostName() {
1:         return hostName;
1:     }
1: 
1:     /**
1:      * Generate a unique id
1:      *
1:      * @return a unique id
1:      */
1:     public synchronized String generateId() {
1:         StringBuilder sb = new StringBuilder(length);
1:         sb.append(seed);
1:         sb.append(sequence.getAndIncrement());
1:         return sb.toString();
1:     }
1: 
1:     public static String sanitizeHostName(String hostName) {
1:         boolean changed = false;
1: 
1:         StringBuilder sb = new StringBuilder();
1:         for (char ch : hostName.toCharArray()) {
1:             // only include ASCII chars
1:             if (ch < 127) {
1:                 sb.append(ch);
1:             } else {
1:                 changed = true;
1:             }
1:         }
1: 
1:         if (changed) {
1:             String newHost = sb.toString();
1:             LOG.info("Sanitized hostname from: {} to: {}", hostName, newHost);
1:             return newHost;
1:         } else {
1:             return hostName;
1:         }
1:     }
1: 
1:     /**
1:      * Generate a unique ID - that is friendly for a URL or file system
1:      *
1:      * @return a unique id
1:      */
1:     public String generateSanitizedId() {
1:         String result = generateId();
1:         result = result.replace(':', '-');
1:         result = result.replace('_', '-');
1:         result = result.replace('.', '-');
1:         return result;
1:     }
1: 
1:     /**
1:      * From a generated id - return the seed (i.e. minus the count)
1:      *
1:      * @param id
1:      *        the generated identifier
1:      * @return the seed
1:      */
1:     public static String getSeedFromId(String id) {
1:         String result = id;
1:         if (id != null) {
1:             int index = id.lastIndexOf(':');
1:             if (index > 0 && (index + 1) < id.length()) {
1:                 result = id.substring(0, index);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * From a generated id - return the generator count
1:      *
1:      * @param id
1:      *      The ID that will be parsed for a sequence number.
1:      *
1:      * @return the sequence value parsed from the given ID.
1:      */
1:     public static long getSequenceFromId(String id) {
1:         long result = -1;
1:         if (id != null) {
1:             int index = id.lastIndexOf(':');
1: 
1:             if (index > 0 && (index + 1) < id.length()) {
1:                 String numStr = id.substring(index + 1, id.length());
1:                 result = Long.parseLong(numStr);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * Does a proper compare on the Id's
1:      *
1:      * @param id1 the lhs of the comparison.
1:      * @param id2 the rhs of the comparison.
1:      *
1:      * @return 0 if equal else a positive if {@literal id1 > id2} ...
1:      */
1:     public static int compare(String id1, String id2) {
1:         int result = -1;
1:         String seed1 = IdGenerator.getSeedFromId(id1);
1:         String seed2 = IdGenerator.getSeedFromId(id2);
1:         if (seed1 != null && seed2 != null) {
1:             result = seed1.compareTo(seed2);
1:             if (result == 0) {
1:                 long count1 = IdGenerator.getSequenceFromId(id1);
1:                 long count2 = IdGenerator.getSequenceFromId(id2);
1:                 result = (int) (count1 - count2);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * When using the {@link java.net.InetAddress#getHostName()} method in an
1:      * environment where neither a proper DNS lookup nor an <tt>/etc/hosts</tt>
1:      * entry exists for a given host, the following exception will be thrown:
1:      * <code>
1:      * java.net.UnknownHostException: &lt;hostname&gt;: &lt;hostname&gt;
1:      *  at java.net.InetAddress.getLocalHost(InetAddress.java:1425)
1:      *   ...
1:      * </code>
1:      * Instead of just throwing an UnknownHostException and giving up, this
1:      * method grabs a suitable hostname from the exception and prevents the
1:      * exception from being thrown. If a suitable hostname cannot be acquired
1:      * from the exception, only then is the <tt>UnknownHostException</tt> thrown.
1:      *
1:      * @return The hostname
1:      *
1:      * @throws UnknownHostException if the given host cannot be looked up.
1:      *
1:      * @see java.net.InetAddress#getLocalHost()
1:      * @see java.net.InetAddress#getHostName()
1:      */
1:     protected static String getLocalHostName() throws UnknownHostException {
1:         try {
1:             return (InetAddress.getLocalHost()).getHostName();
1:         } catch (UnknownHostException uhe) {
1:             String host = uhe.getMessage(); // host = "hostname: hostname"
1:             if (host != null) {
1:                 int colon = host.indexOf(':');
1:                 if (colon > 0) {
1:                     return host.substring(0, colon);
1:                 }
1:             }
1:             throw uhe;
1:         }
1:     }
1: }
============================================================================