1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:540dd5c:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:540dd5c:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.maven;
3:a88906f: 
1:a88906f: import java.io.File;
1:a88906f: import java.io.FileInputStream;
1:a88906f: import java.io.FileOutputStream;
1:a88906f: import java.io.IOException;
1:a88906f: import java.nio.MappedByteBuffer;
1:a88906f: import java.nio.channels.FileChannel;
1:a88906f: 
1:540dd5c: import org.apache.activemq.console.Main;
1:540dd5c: import org.apache.maven.plugin.AbstractMojo;
1:540dd5c: import org.apache.maven.plugin.MojoExecutionException;
1:540dd5c: 
1:a88906f: /**
1:a88906f:  * Goal which starts activemq broker.
1:87e878b:  *
1:a88906f:  * @goal broker
1:a88906f:  * @phase process-sources
1:a88906f:  */
1:a88906f: public class ServerMojo extends AbstractMojo {
1:a88906f:     /**
1:a88906f:      * Location of the output directory. Defaults to target.
1:87e878b:      *
1:e33e994:      * @parameter property="project.build.directory"
1:a88906f:      * @required
1:a88906f:      */
1:a88906f:     private File outputDirectory;
1:a88906f: 
1:a88906f:     /**
1:a88906f:      * Location of the predefined config files.
1:87e878b:      *
1:e33e994:      * @parameter property="configDirectory"
1:540dd5c:      *            default-value="${basedir}/src/main/resources/broker-conf"
1:a88906f:      * @required
1:a88906f:      */
1:a88906f:     private String configDirectory;
1:a88906f: 
1:a88906f:     /**
1:a88906f:      * Type of activemq configuration to use. This is also the filename used.
1:87e878b:      *
1:e33e994:      * @parameter property="configType" default-value="activemq"
1:a88906f:      * @required
1:a88906f:      */
1:a88906f:     private String configType;
1:a88906f: 
1:a88906f:     /**
1:a88906f:      * Location of activemq config file other those found in resources/config.
1:87e878b:      *
1:e33e994:      * @parameter property="configFile"
1:a88906f:      */
1:a88906f:     private File configFile;
1:a88906f: 
1:a88906f:     /**
1:a88906f:      * Broker URL.
1:87e878b:      *
1:e33e994:      * @parameter property="url"
1:a88906f:      */
1:a88906f:     private String url;
1:a88906f: 
1:87e878b:     @Override
1:540dd5c:     public void execute() throws MojoExecutionException {
1:a88906f: 
1:a88906f:         File out = outputDirectory;
1:a88906f: 
1:a88906f:         // Create output directory if it doesn't exist.
1:a88906f:         if (!out.exists()) {
1:a88906f:             out.mkdirs();
1:a88906f:         }
1:a88906f: 
1:a88906f:         String[] args = new String[2];
1:a88906f:         if (url != null) {
1:540dd5c:             args[0] = "start";
1:540dd5c:             args[1] = url;
1:a88906f:         } else {
1:a88906f:             File config;
1:a88906f:             if (configFile != null) {
1:a88906f:                 config = configFile;
1:a88906f:             } else {
1:a88906f: 
1:a88906f:                 config = new File(configDirectory + File.separator + configType + ".xml");
1:a88906f:             }
1:a88906f: 
1:a88906f:             try {
1:a88906f:                 config = copy(config);
1:a88906f:             } catch (IOException e) {
1:a88906f:                 throw new MojoExecutionException(e.getMessage());
1:a88906f:             }
1:540dd5c:             args[0] = "start";
1:540dd5c:             args[1] = "xbean:" + (config.toURI()).toString();
1:a88906f:         }
1:a88906f: 
1:e33e994:         getLog().info("Starting broker with configuration in:  " + args[1]);
1:a88906f:         Main.main(args);
1:a88906f:     }
1:a88906f: 
1:a88906f:     /**
1:a88906f:      * Copy activemq configuration file to output directory.
1:87e878b:      *
1:a88906f:      * @param source
1:a88906f:      * @return
1:a88906f:      * @throws IOException
1:a88906f:      */
1:a88906f:     public File copy(File source) throws IOException {
1:540dd5c:         FileChannel in = null;
1:540dd5c:         FileChannel out = null;
1:a88906f: 
1:a88906f:         File dest = new File(outputDirectory.getAbsolutePath() + File.separator + "activemq.xml");
1:a88906f: 
1:a88906f:         try {
1:a88906f:             in = new FileInputStream(source).getChannel();
1:a88906f:             out = new FileOutputStream(dest).getChannel();
1:a88906f: 
1:a88906f:             long size = in.size();
1:a88906f:             MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
1:a88906f: 
1:a88906f:             out.write(buf);
1:a88906f: 
1:a88906f:         } finally {
1:540dd5c:             if (in != null) {
1:540dd5c:                 in.close();
1:540dd5c:             }
1:540dd5c:             if (out != null) {
1:540dd5c:                 out.close();
1:540dd5c:             }
1:a88906f:         }
1:a88906f: 
1:a88906f:         return dest;
1:86cbdfd:     }
1:a88906f: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:e33e994
/////////////////////////////////////////////////////////////////////////
1:      * @parameter property="project.build.directory"
/////////////////////////////////////////////////////////////////////////
1:      * @parameter property="configDirectory"
/////////////////////////////////////////////////////////////////////////
1:      * @parameter property="configType" default-value="activemq"
/////////////////////////////////////////////////////////////////////////
1:      * @parameter property="configFile"
1:      * @parameter property="url"
/////////////////////////////////////////////////////////////////////////
1:         getLog().info("Starting broker with configuration in:  " + args[1]);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
/////////////////////////////////////////////////////////////////////////
1:  *
1:      *
0:      * @parameter property="${project.build.directory}"
1:      *
0:      * @parameter property="${configDirectory}"
/////////////////////////////////////////////////////////////////////////
1:      *
0:      * @parameter property="${configType}" default-value="activemq"
1:      *
0:      * @parameter property="${configFile}"
1:      *
0:      * @parameter property="${url}"
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.console.Main;
1: import org.apache.maven.plugin.AbstractMojo;
1: import org.apache.maven.plugin.MojoExecutionException;
1: 
1:  * 
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * @parameter expression="${configDirectory}"
1:      *            default-value="${basedir}/src/main/resources/broker-conf"
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:      * 
1:     public void execute() throws MojoExecutionException {
/////////////////////////////////////////////////////////////////////////
1:             args[0] = "start";
1:             args[1] = url;
/////////////////////////////////////////////////////////////////////////
1:             args[0] = "start";
1:             args[1] = "xbean:" + (config.toURI()).toString();
0:      * 
1:         FileChannel in = null;
1:         FileChannel out = null;
/////////////////////////////////////////////////////////////////////////
1:             if (in != null) {
1:                 in.close();
1:             }
1:             if (out != null) {
1:                 out.close();
1:             }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.maven;
1: 
0: import org.apache.activemq.console.Main;
0: import org.apache.maven.plugin.AbstractMojo;
0: import org.apache.maven.plugin.MojoExecutionException;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.nio.MappedByteBuffer;
1: import java.nio.channels.FileChannel;
1: 
1: /**
1:  * Goal which starts activemq broker.
0:  *
1:  * @goal broker
1:  * @phase process-sources
1:  */
1: public class ServerMojo extends AbstractMojo {
1:     /**
1:      * Location of the output directory. Defaults to target.
0:      *
0:      * @parameter expression="${project.build.directory}"
1:      * @required
1:      */
1:     private File outputDirectory;
1: 
1:     /**
1:      * Location of the predefined config files.
0:      *
0:      * @parameter expression="${configDirectory}" default-value="${basedir}/src/main/resources/broker-conf"
1:      * @required
1:      */
1:     private String configDirectory;
1: 
1:     /**
1:      * Type of activemq configuration to use. This is also the filename used.
0:      *
0:      * @parameter expression="${configType}" default-value="activemq"
1:      * @required
1:      */
1:     private String configType;
1: 
1:     /**
1:      * Location of activemq config file other those found in resources/config.
0:      *
0:      * @parameter expression="${configFile}"
1:      */
1:     private File configFile;
1: 
1:     /**
1:      * Broker URL.
0:      *
0:      * @parameter expression="${url}"
1:      */
1:     private String url;
1: 
0:     public void execute()
0:             throws MojoExecutionException {
1: 
1:         File out = outputDirectory;
1: 
1:         // Create output directory if it doesn't exist.
1:         if (!out.exists()) {
1:             out.mkdirs();
1:         }
1: 
1:         String[] args = new String[2];
1:         if (url != null) {
0:            args[0] = "start";
0:            args[1] = url;
1:         } else {
1:             File config;
1:             if (configFile != null) {
1:                 config = configFile;
1:             } else {
1: 
1:                 config = new File(configDirectory + File.separator + configType + ".xml");
1:             }
1: 
1:             try {
1:                 config = copy(config);
1:             } catch (IOException e) {
1:                 throw new MojoExecutionException(e.getMessage());
1:             }
0:            args[0] = "start";
0:            args[1] =  "xbean:" + (config.toURI()).toString();
1:         }
1: 
1: 
1:         Main.main(args);
1:     }
1: 
1:     /**
1:      * Copy activemq configuration file to output directory.
0:      *
1:      * @param source
1:      * @return
1:      * @throws IOException
1:      */
1:     public File copy(File source) throws IOException {
0:         FileChannel in = null, out = null;
1: 
1:         File dest = new File(outputDirectory.getAbsolutePath() + File.separator + "activemq.xml");
1: 
1:         try {
1:             in = new FileInputStream(source).getChannel();
1:             out = new FileOutputStream(dest).getChannel();
1: 
1:             long size = in.size();
1:             MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
1: 
1:             out.write(buf);
1: 
1:         } finally {
0:             if (in != null) in.close();
0:             if (out != null) out.close();
1:         }
1: 
1:         return dest;
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  * http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.maven;
/////////////////////////////////////////////////////////////////////////
0: public class ServerMojo extends AbstractMojo {
/////////////////////////////////////////////////////////////////////////
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:741cdee
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * Broker URL.
0:      *
0:      * @parameter expression="${url}"
0:      */
0:     private String url;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:         String[] args = new String[2];
0:         if (url != null) {
0:            args[0] = "start";
0:            args[1] = url;
0:             File config;
0:             if (configFile != null) {
0:                 config = configFile;
0:             } else {
0: 
0:                 config = new File(configDirectory + File.separator + configType + ".xml");
0:             }
0: 
0:             try {
0:                 config = copy(config);
0:             } catch (IOException e) {
0:                 throw new MojoExecutionException(e.getMessage());
0:             }
0:            args[0] = "start";
0:            args[1] =  "xbean:" + (config.toURI()).toString();
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:2139881
commit:6066ddc
/////////////////////////////////////////////////////////////////////////
0:  * @goal broker
0:  * @phase process-sources
/////////////////////////////////////////////////////////////////////////
0:      * @parameter expression="${configDirectory}" default-value="${basedir}/src/main/resources/broker-conf"
commit:faba216
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.maven;
0: 
0: /*
0:  * Copyright 2001-2005 The Apache Software Foundation.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: import org.apache.activemq.console.Main;
0: import org.apache.maven.plugin.AbstractMojo;
0: import org.apache.maven.plugin.MojoExecutionException;
0: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.nio.MappedByteBuffer;
0: import java.nio.channels.FileChannel;
0: 
0: /**
0:  * Goal which starts activemq broker.
0:  *
0:  * @goal server
0:  * @phase process
0:  */
0: public class ServerMojo
0:         extends AbstractMojo {
0:     /**
0:      * Location of the output directory. Defaults to target.
0:      *
0:      * @parameter expression="${project.build.directory}"
0:      * @required
0:      */
0:     private File outputDirectory;
0: 
0:     /**
0:      * Location of the predefined config files.
0:      *
0:      * @parameter expression="${configDirectory}" default-value="${basedir}/src/main/resources/config"
0:      * @required
0:      */
0:     private String configDirectory;
0: 
0:     /**
0:      * Type of activemq configuration to use. This is also the filename used.
0:      *
0:      * @parameter expression="${configType}" default-value="activemq"
0:      * @required
0:      */
0:     private String configType;
0: 
0:     /**
0:      * Location of activemq config file other those found in resources/config.
0:      *
0:      * @parameter expression="${configFile}"
0:      */
0:     private File configFile;
0: 
0:     public void execute()
0:             throws MojoExecutionException {
0: 
0:         File out = outputDirectory;
0: 
0:         // Create output directory if it doesn't exist.
0:         if (!out.exists()) {
0:             out.mkdirs();
0:         }
0: 
0:         File config;
0:         if (configFile != null) {
0:             config = configFile;
0:         } else {
0:             config = new File(configDirectory + File.separator + configType + ".xml");
0:         }
0: 
0:         try {
0:             config = copy(config);
0:         } catch (IOException e) {
0:             throw new MojoExecutionException(e.getMessage());
0:         }
0: 
0:         String[] args = {"start", "xbean:" + (config.toURI()).toString()};
0:         Main.main(args);
0:     }
0: 
0:     /**
0:      * Copy activemq configuration file to output directory.
0:      *
0:      * @param source
0:      * @return
0:      * @throws IOException
0:      */
0:     public File copy(File source) throws IOException {
0:         FileChannel in = null, out = null;
0: 
0:         File dest = new File(outputDirectory.getAbsolutePath() + File.separator + "activemq.xml");
0: 
0:         try {
0:             in = new FileInputStream(source).getChannel();
0:             out = new FileOutputStream(dest).getChannel();
0: 
0:             long size = in.size();
0:             MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
0: 
0:             out.write(buf);
0: 
0:         } finally {
0:             if (in != null) in.close();
0:             if (out != null) out.close();
0:         }
0: 
0:         return dest;
0:     }
0: }
============================================================================