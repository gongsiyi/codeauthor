1:960dce7: /**
1:960dce7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:960dce7:  * contributor license agreements.  See the NOTICE file distributed with
1:960dce7:  * this work for additional information regarding copyright ownership.
1:960dce7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:960dce7:  * (the "License"); you may not use this file except in compliance with
1:960dce7:  * the License.  You may obtain a copy of the License at
1:540dd5c:  *
1:540dd5c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:540dd5c:  *
1:960dce7:  * Unless required by applicable law or agreed to in writing, software
1:960dce7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:960dce7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:960dce7:  * See the License for the specific language governing permissions and
1:960dce7:  * limitations under the License.
1:960dce7:  */
1:a88906f: package org.apache.activemq.tool.sampler.plugins;
2:a88906f: 
1:a88906f: import java.io.BufferedReader;
1:a88906f: import java.io.IOException;
1:540dd5c: import java.io.InputStreamReader;
1:a88906f: import java.util.StringTokenizer;
1:540dd5c: import java.util.concurrent.atomic.AtomicBoolean;
1:a88906f: 
1:a88906f: public class LinuxCpuSamplerPlugin implements CpuSamplerPlugin, Runnable {
1:a88906f: 
1:a88906f:     private Process vmstatProcess;
1:a88906f:     private String vmstat;
1:a88906f:     private String result = "";
1:a88906f:     private final Object mutex = new Object();
1:a88906f:     private AtomicBoolean stop = new AtomicBoolean(false);
1:a88906f: 
1:a88906f:     public LinuxCpuSamplerPlugin(long intervalInMs) {
1:a88906f:         vmstat = "vmstat -n " + (int)(intervalInMs / 1000);
5:a88906f:     }
1:a88906f: 
1:a88906f:     public void start() {
1:a88906f:         stop.set(false);
1:a88906f:         Thread t = new Thread(this);
1:a88906f:         t.start();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void stop() {
1:a88906f:         stop.set(true);
1:a88906f:         try {
1:a88906f:             vmstatProcess.waitFor();
1:a88906f:         } catch (InterruptedException e) {
1:a88906f:             e.printStackTrace();
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void run() {
1:a88906f: 
1:a88906f:         try {
1:a88906f:             vmstatProcess = Runtime.getRuntime().exec(vmstat);
1:a88906f:             BufferedReader br = new BufferedReader(new InputStreamReader(vmstatProcess.getInputStream()), 1024);
1:a88906f: 
1:a88906f:             br.readLine(); // throw away the first line
1:a88906f: 
1:a88906f:             String header = br.readLine();
1:a88906f:             String data;
1:a88906f: 
1:a88906f:             while (!stop.get()) {
1:a88906f:                 data = br.readLine();
1:a88906f:                 if (data != null) {
1:a88906f:                     String csvData = convertToCSV(header, data);
1:a88906f:                     synchronized (mutex) {
1:a88906f:                         result = csvData;
1:a88906f:                     }
1:a88906f:                 }
1:a88906f:             }
1:a88906f:             br.close();
1:a88906f:             vmstatProcess.destroy();
1:a88906f: 
1:a88906f:         } catch (IOException ioe) {
1:a88906f:             ioe.printStackTrace();
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public String getCpuUtilizationStats() {
1:a88906f:         String data;
1:a88906f:         synchronized (mutex) {
1:a88906f:             data = result;
1:a88906f:             result = "";
1:a88906f:         }
1:a88906f:         return data;
1:a88906f:     }
1:a88906f: 
1:540dd5c:     public String getVmstat() {
1:540dd5c:         return vmstat;
1:540dd5c:     }
1:a88906f: 
1:540dd5c:     public void setVmstat(String vmstat) {
1:540dd5c:         this.vmstat = vmstat;
1:540dd5c:     }
1:a88906f: 
1:a88906f:     protected String convertToCSV(String header, String data) {
1:540dd5c:         StringTokenizer headerTokens = new StringTokenizer(header, " ");
1:540dd5c:         StringTokenizer dataTokens = new StringTokenizer(data, " ");
1:a88906f: 
1:540dd5c:         String csv = "";
1:540dd5c:         while (headerTokens.hasMoreTokens()) {
1:540dd5c:             csv += headerTokens.nextToken() + "=" + dataTokens.nextToken() + ",";
1:540dd5c:         }
1:a88906f: 
1:540dd5c:         return csv;
1:540dd5c:     }
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStreamReader;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     public String getVmstat() {
1:         return vmstat;
1:     }
1:     public void setVmstat(String vmstat) {
1:         this.vmstat = vmstat;
1:     }
1:         StringTokenizer headerTokens = new StringTokenizer(header, " ");
1:         StringTokenizer dataTokens = new StringTokenizer(data, " ");
1:         String csv = "";
1:         while (headerTokens.hasMoreTokens()) {
1:             csv += headerTokens.nextToken() + "=" + dataTokens.nextToken() + ",";
1:         }
1:         return csv;
1:     }
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
commit:960dce7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.tool.sampler.plugins;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import java.io.BufferedReader;
0: import java.io.InputStreamReader;
1: import java.io.IOException;
1: import java.util.StringTokenizer;
1: 
1: public class LinuxCpuSamplerPlugin implements CpuSamplerPlugin, Runnable {
1: 
1:     private Process vmstatProcess;
1:     private String vmstat;
1:     private String result = "";
1:     private final Object mutex = new Object();
1:     private AtomicBoolean stop = new AtomicBoolean(false);
1: 
1:     public LinuxCpuSamplerPlugin(long intervalInMs) {
1:         vmstat = "vmstat -n " + (int)(intervalInMs / 1000);
1:     }
1: 
1:     public void start() {
1:         stop.set(false);
1:         Thread t = new Thread(this);
1:         t.start();
1:     }
1: 
1:     public void stop() {
1:         stop.set(true);
1:         try {
1:             vmstatProcess.waitFor();
1:         } catch (InterruptedException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public void run() {
1: 
1:         try {
1:             vmstatProcess = Runtime.getRuntime().exec(vmstat);
1:             BufferedReader br = new BufferedReader(new InputStreamReader(vmstatProcess.getInputStream()), 1024);
1: 
1:             br.readLine(); // throw away the first line
1: 
1:             String header = br.readLine();
1:             String data;
1: 
1:             while (!stop.get()) {
1:                 data = br.readLine();
1:                 if (data != null) {
1:                     String csvData = convertToCSV(header, data);
1:                     synchronized (mutex) {
1:                         result = csvData;
1:                     }
1:                 }
1:             }
1:             br.close();
1:             vmstatProcess.destroy();
1: 
1:         } catch (IOException ioe) {
1:             ioe.printStackTrace();
1:         }
1:     }
1: 
1:     public String getCpuUtilizationStats() {
1:         String data;
1:         synchronized (mutex) {
1:             data = result;
1:             result = "";
1:         }
1:         return data;
1:     }
1: 
0: 	public String getVmstat() {
0: 		return vmstat;
1: 	}
1: 
0: 	public void setVmstat(String vmstat) {
0: 		this.vmstat = vmstat;
1: 	}
1: 
1:     protected String convertToCSV(String header, String data) {
0: 		StringTokenizer headerTokens = new StringTokenizer(header, " ");
0: 		StringTokenizer dataTokens   = new StringTokenizer(data, " ");
1: 
0: 		String csv = "";
0: 		while (headerTokens.hasMoreTokens()) {
0: 			csv += (headerTokens.nextToken() + "=" + dataTokens.nextToken() + ",");
1: 		}
1: 
0: 		return csv;
1: 	}
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:cc1986f
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: 
0: import java.io.IOException;
0: public class LinuxCpuSamplerPlugin implements CpuSamplerPlugin, Runnable {
0:     private Process vmstatProcess;
0:     private String vmstat;
0:     private String result = "";
0:     private final Object mutex = new Object();
0:     private AtomicBoolean stop = new AtomicBoolean(false);
0:     public LinuxCpuSamplerPlugin(long intervalInMs) {
0:         vmstat = "vmstat -n " + (int)(intervalInMs / 1000);
0:     }
0:     public void start() {
0:         stop.set(false);
0:         Thread t = new Thread(this);
0:         t.start();
0:     }
0:     public void stop() {
0:         stop.set(true);
0:         try {
0:             vmstatProcess.waitFor();
0:         } catch (InterruptedException e) {
0:             e.printStackTrace();
0:         }
0:     }
0:     public void run() {
0:         try {
0:             vmstatProcess = Runtime.getRuntime().exec(vmstat);
0:             BufferedReader br = new BufferedReader(new InputStreamReader(vmstatProcess.getInputStream()), 1024);
0: 
0:             br.readLine(); // throw away the first line
0: 
0:             String header = br.readLine();
0:             String data;
0: 
0:             while (!stop.get()) {
0:                 data = br.readLine();
0:                 if (data != null) {
0:                     String csvData = convertToCSV(header, data);
0:                     synchronized (mutex) {
0:                         result = csvData;
0:                     }
0:                 }
0:             }
0:             br.close();
0:             vmstatProcess.destroy();
0: 
0:         } catch (IOException ioe) {
0:             ioe.printStackTrace();
0:         }
0:     }
0: 
0:     public String getCpuUtilizationStats() {
0:         String data;
0:         synchronized (mutex) {
0:             data = result;
0:             result = "";
0:         }
0:         return data;
0:     }
/////////////////////////////////////////////////////////////////////////
0:     protected String convertToCSV(String header, String data) {
commit:a6f9351
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 			csv += (headerTokens.nextToken() + "=" + dataTokens.nextToken() + ",");
0: 
commit:80bf241
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.tool.sampler.plugins;
0: 
0: import java.io.BufferedReader;
0: import java.io.InputStreamReader;
0: import java.util.StringTokenizer;
0: 
0: public class LinuxCpuSamplerPlugin implements CpuSamplerPlugin {
0: 
0: 	private String vmstat = "vmstat";
0: 	
0: 	public String getCpuUtilizationStats() {
0: 		try {
0: 			Process p = Runtime.getRuntime().exec(vmstat);
0: 			BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()), 1024);
0: 			
0: 			br.readLine(); // throw away the first line
0: 			
0: 			String header = br.readLine();
0: 			String data   = br.readLine();
0: 			
0: 			br.close();
0: 			
0: 			// Convert to CSV of key=value pair
0: 			return convertToCSV(header, data);
0: 		} catch (Exception e) {
0: 			e.printStackTrace();
0: 			return "";
0: 		}
0: 	}
0: 
0: 	public String getVmstat() {
0: 		return vmstat;
0: 	}
0: 
0: 	public void setVmstat(String vmstat) {
0: 		this.vmstat = vmstat;
0: 	}
0: 	
0: 	protected String convertToCSV(String header, String data) {
0: 		StringTokenizer headerTokens = new StringTokenizer(header, " ");
0: 		StringTokenizer dataTokens   = new StringTokenizer(data, " ");
0: 		
0: 		String csv = "";
0: 		while (headerTokens.hasMoreTokens()) {
0: 			csv += (headerTokens.nextToken() + "=" + dataTokens.nextToken() + ";");
0: 		}
0: 		
0: 		return csv;
0: 	}
0: }
============================================================================