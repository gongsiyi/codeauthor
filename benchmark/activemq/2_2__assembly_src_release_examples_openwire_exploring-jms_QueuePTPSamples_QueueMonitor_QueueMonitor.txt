1:3f32507: /*
1:3f32507:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:3f32507:  *
1:3f32507:  * Licensed under the Apache License, Version 2.0 (the "License");
1:3f32507:  * you may not use this file except in compliance with the License.
1:3f32507:  * You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  
1:3f32507: Sample Application
1:3f32507: 
1:3f32507: Writing a Basic JMS Application using:
1:3f32507:     - QueueBrowser
1:3f32507:     - JMS with a Graphical Interface
1:3f32507:     - behavior based on message type
1:3f32507: 
1:3f32507: When you run this program, it will read all the parameters out
1:3f32507: of the QueueMonitor.properties file. In this file you can specify
1:3f32507: which queues you want to monitor. Then a Java window will open and
1:3f32507: every time you click the Browse button, The current contents of the queues
1:3f32507: will be displayed in the text window.
1:3f32507: 
1:3f32507: Usage:
1:3f32507:   java QueueMonitor
1:3f32507: 
1:3f32507: Suggested demonstration:
1:3f32507:   - Start one instance of this application:
1:3f32507:         java QueueMonitor
1:3f32507:   - Run on or more Talk applications (without the receiving queue).
1:3f32507:   - Enter messages on various Talk windows.
1:3f32507:   - Watch the QueueMonitor display the messages.
1:3f32507: 
1:3f32507: */
1:3f32507: import org.apache.activemq.*;
1:3f32507: 
1:3f32507: import javax.swing.JTextArea;
1:3f32507: import javax.swing.JFrame;
1:3f32507: import javax.swing.JScrollPane;
1:3f32507: import javax.swing.JButton;
1:3f32507: 
1:3f32507: import javax.swing.text.Highlighter;
1:3f32507: import javax.swing.text.DefaultHighlighter;
1:3f32507: import javax.swing.text.BadLocationException;
1:3f32507: 
1:3f32507: import javax.swing.border.CompoundBorder;
1:3f32507: import javax.swing.border.EmptyBorder;
1:3f32507: import javax.swing.border.BevelBorder;
1:3f32507: import javax.swing.border.SoftBevelBorder;
1:3f32507: 
1:3f32507: import java.awt.Toolkit;
1:3f32507: import java.awt.Dimension;
1:3f32507: import java.awt.BorderLayout;
1:3f32507: import java.awt.Rectangle;
1:3f32507: 
1:3f32507: import java.awt.event.WindowAdapter;
1:3f32507: import java.awt.event.WindowEvent;
1:3f32507: import java.awt.event.ActionListener;
1:3f32507: import java.awt.event.ActionEvent;
1:3f32507: 
1:3f32507: import java.io.FileInputStream;
1:3f32507: 
1:3f32507: import java.util.Vector;
1:3f32507: import java.util.Enumeration;
1:3f32507: import java.util.Properties;
1:3f32507: import java.util.StringTokenizer;
1:3f32507: 
1:3f32507: public class QueueMonitor
1:3f32507: extends JFrame
1:3f32507: {
1:3f32507:     private static final String DEFAULT_PROPERTIES_FILE = "QueueMonitor.properties";
1:3f32507: 
1:3f32507:     String propertiesFile = DEFAULT_PROPERTIES_FILE;
1:3f32507:     String broker = "tcp://localhost:61616";
1:3f32507:     String connectID = "QueueMonitor";
1:3f32507:     String username = "QueueMonitor";
1:3f32507:     String password = "QueueMonitor";
1:3f32507:     String browseQueues  = "Q1,Q2,Q3";
1:3f32507:     String textFontName = "Dialog";
1:3f32507:     String textFontStyle = "PLAIN";
1:3f32507:     String textFontSize = "12";
1:3f32507:     String title = "QueueMonitor";
1:3f32507: 
1:3f32507:     JTextArea textArea = new JTextArea();
1:3f32507:     JScrollPane scrollPane = new JScrollPane(textArea);
1:3f32507:     JButton browseButton = new JButton("Browse Queues");
1:3f32507: 
1:3f32507:     Vector theQueues = new Vector();
1:3f32507: 
1:3f32507:     private javax.jms.Connection connect = null;
1:3f32507:     private javax.jms.Session session = null;
1:3f32507: 
1:3f32507: /** Constructor for MessageMonitor window. */
1:3f32507:     public QueueMonitor()
1:3f32507:     {
1:3f32507:         loadProperties();
1:3f32507: 
1:3f32507:         setTitle(title);
1:3f32507: 
1:3f32507:         // Connect to Message Broker
1:3f32507:         try
1:3f32507:         {
1:3f32507:             javax.jms.ConnectionFactory factory;
1:3f32507:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:3f32507: 
1:3f32507:             connect = factory.createConnection (username, password);
1:3f32507:             session = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             System.err.println("Cannot connect to Broker");
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Set up Queues:
1:3f32507:         StringTokenizer queues = new StringTokenizer(browseQueues, ",");
1:3f32507:         while (queues.hasMoreTokens())
1:3f32507:         {
1:3f32507:             try{
1:3f32507:                 String queueName = queues.nextToken();
1:3f32507:                 System.out.println ("Monitoring  " + queueName);
1:3f32507:                 theQueues.addElement(session.createQueue(queueName));
1:3f32507:             }
1:3f32507:             catch (javax.jms.JMSException jmse)
1:3f32507:             {
1:3f32507:                 jmse.printStackTrace();
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507: 
1:3f32507:         // After init it is time to start the connection
1:3f32507:         try
1:3f32507:         {
1:3f32507:             connect.start();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             System.err.println("Cannot start connection");
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         //Elements visible on the screen
1:3f32507:         textArea.setEditable(false);
1:3f32507:         scrollPane.setBorder(new CompoundBorder(new EmptyBorder(6,6,6,6),
1:3f32507:                                                 new SoftBevelBorder(BevelBorder.LOWERED)));
1:3f32507:         getContentPane().add(scrollPane,BorderLayout.CENTER);
1:3f32507:         getContentPane().add(browseButton,BorderLayout.SOUTH);
1:3f32507: 
1:3f32507:         browseButton.addActionListener(new OnBrowse());
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507: 
1:3f32507: 
1:3f32507:     /** Main program entry point. */
1:3f32507:     public static void main(String[] args)
1:3f32507:     {
1:3f32507:         // There should be no arguments to this program.
1:3f32507:         if (args.length > 0) {
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         QueueMonitor queueMonitor = new QueueMonitor();
1:3f32507: 
1:3f32507:         queueMonitor.addWindowListener(new WindowAdapter() {
1:3f32507:             public void windowClosing(WindowEvent e)
1:3f32507:             {
1:3f32507:                 System.exit(0);
1:3f32507:             }
1:3f32507:         });
1:3f32507: 
1:3f32507:         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
1:3f32507:         screenSize.height = screenSize.height / 2 ;
1:3f32507:         screenSize.width = screenSize.width / 2 ;
1:3f32507:         queueMonitor.setSize(screenSize);
1:3f32507:         queueMonitor.setVisible(true);
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Prints the usage. */
1:3f32507:     private static void printUsage()
1:3f32507:     {
1:3f32507:         StringBuffer use = new StringBuffer();
1:3f32507:         use.append("\nusage: QueueMonitor\n\n");
1:3f32507:         use.append("Properties for this sample can be set in a properties file.\n");
1:3f32507:         String dfltFile = System.getProperty("propertiesFile", DEFAULT_PROPERTIES_FILE);
1:3f32507:         use.append("[Default file: " + dfltFile +"]\n\n");
1:3f32507:         System.out.print(use);
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Load the window and JMS properties from a file. */
1:3f32507:     private void loadProperties()
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             Properties properties = new Properties();
1:3f32507: 
1:3f32507:             propertiesFile = System.getProperty("propertiesFile", propertiesFile);
1:3f32507: 
1:3f32507:             properties.load(new FileInputStream(propertiesFile));
1:3f32507: 
1:3f32507:             // Connection Properties
1:3f32507:             broker = properties.getProperty("broker",broker).trim();
1:3f32507:             connectID = properties.getProperty("connectID",connectID).trim();
1:3f32507:             username = properties.getProperty("username",username).trim();
1:3f32507:             password = properties.getProperty("password",password).trim();
1:3f32507: 
1:3f32507:             // Queue Properties
1:3f32507:             browseQueues = properties.getProperty("browseQueues", browseQueues).trim();
1:3f32507: 
1:3f32507:             // Text Properties
1:3f32507:             textFontName = properties.getProperty("textFontName", textFontName).trim();
1:3f32507:             textFontStyle = properties.getProperty("textFontStyle", textFontStyle).trim();
1:3f32507:             textFontSize = properties.getProperty("textFontSize", textFontSize).trim();
1:3f32507: 
1:3f32507:             // Window Properties
1:3f32507:             title = properties.getProperty("title", title).trim();
1:3f32507: 
1:3f32507:         }
1:3f32507:         catch (java.io.FileNotFoundException fnfe)
1:3f32507:         {
1:3f32507:             System.out.println (propertiesFile + " not found: using defaults"); // Use Defaults
1:3f32507:         }
1:3f32507:         catch (java.io.IOException ioe)
1:3f32507:         {
1:3f32507:             ioe.printStackTrace();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:    /** Class to handle the "Browse" button action. */
1:3f32507:     public class OnBrowse implements ActionListener
1:3f32507:     {
1:3f32507: 
1:3f32507:         public void actionPerformed(ActionEvent evt)
1:3f32507:         {
1:3f32507:             // Clear the textArea.
1:3f32507:             textArea.setText("");
1:3f32507:             textArea.paintImmediately(textArea.getBounds());
1:3f32507: 
1:3f32507:             if(theQueues.size() == 0){
1:3f32507:                 textArea.setText("No Queues to be monitored");
1:3f32507:             }
1:3f32507:             else{
1:3f32507:                 for(int i = 0; i<theQueues.size();i++)
1:3f32507:                 {
1:3f32507:                     try
1:3f32507:                     {
1:3f32507:                         // Create a browser on the queue and show the messages waiting in it.
1:3f32507:                         javax.jms.Queue q = (javax.jms.Queue) theQueues.elementAt(i);
1:3f32507:                        textArea.append("--------------------------------------------------\n");
1:3f32507:                        textArea.append("Messages on queue " + q.getQueueName() + ":\n");
1:3f32507:   
1:3f32507:                         // Create a queue browser
1:3f32507:                         System.out.print ("Browsing messages in queue " + q.getQueueName() + "\"...");
1:3f32507:                         javax.jms.QueueBrowser browser = session.createBrowser(q);
1:3f32507:                         System.out.println ("[done]");
1:3f32507:                         int cnt = 0;
1:3f32507:                         Enumeration e = browser.getEnumeration();
1:3f32507:                         if(!e.hasMoreElements())
1:3f32507:                         {
1:3f32507:                             textArea.append ("(This queue is empty.)");
1:3f32507:                         }
1:3f32507:                         else
1:3f32507:                         {
1:3f32507:                             while(e.hasMoreElements())
1:3f32507:                             {
1:3f32507:                                 System.out.print(" --> getting message " + String.valueOf(++cnt) + "...");
1:3f32507:                                 javax.jms.Message message = (javax.jms.Message) e.nextElement();
1:3f32507:                                 System.out.println("[" + message + "]");
1:3f32507:                                 if (message != null)
1:3f32507:                                 {
1:3f32507:                                     String msgText = getContents (message);
1:3f32507:                                     textArea.append(msgText + "\n");
1:3f32507:                                     try
1:3f32507:                                     {
1:3f32507:                                         // Scroll the text area to show the message
1:3f32507:                                         Rectangle area = textArea.modelToView(textArea.getText().length());
1:3f32507:                                         textArea.scrollRectToVisible(area);
1:3f32507:                                         textArea.paintImmediately(textArea.getBounds());
1:3f32507:                                     }
1:3f32507:                                     catch(Exception jle) { jle.printStackTrace();}
1:3f32507:                                 }
1:3f32507:                             }
1:3f32507:                         }
1:3f32507:                         // Free any resources in the browser.
1:3f32507:                         browser.close();
1:3f32507:                         textArea.append ("\n");
1:3f32507:                     }
1:3f32507:                     catch (javax.jms.JMSException jmse){
1:3f32507:                         jmse.printStackTrace();
1:3f32507:                     }
1:3f32507:                 }
1:3f32507:                 try
1:3f32507:                 {
1:3f32507:                     // Scroll the text area to show the message
1:3f32507:                     Rectangle area = textArea.modelToView(textArea.getText().length());
1:3f32507:                     textArea.scrollRectToVisible(area);
1:3f32507:                     textArea.paintImmediately(textArea.getBounds());
1:3f32507:                 }
1:3f32507:                 catch(Exception jle) { jle.printStackTrace();}
1:3f32507:             }
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     public String getContents (javax.jms.Message message){
1:3f32507: 
1:3f32507: 
1:3f32507:             String msgBody = null;
1:3f32507:             String msgClass = message.getClass().getName();
1:3f32507: 
1:3f32507:             if (message instanceof javax.jms.TextMessage)
1:3f32507:             {
1:3f32507:                 msgClass = "javax.jms.TextMessage";
1:3f32507:                 try
1:3f32507:                 {
1:3f32507:                     msgBody = ((javax.jms.TextMessage)message).getText();
1:3f32507:                 }
1:3f32507:                 catch (javax.jms.JMSException jmse)
1:3f32507:                 {
1:3f32507:                     msgBody = "";
1:3f32507:                 }
1:3f32507:             }
1:3f32507:           
1:3f32507:             else if (message instanceof org.apache.activemq.command.ActiveMQMapMessage)
1:3f32507:             {
1:3f32507: 		  			    System.out.println ("(Name value pairs in the MapMessage are not displayed.)");
1:3f32507:             }
1:3f32507:             else if (message instanceof javax.jms.BytesMessage)
1:3f32507:           			{
1:3f32507: 		  			    System.out.println ("Warning: A bytes message was discarded because it could not be processed as a javax.jms.TextMessage.");
1:3f32507: 		  			 }
1:3f32507:             else if (message instanceof javax.jms.ObjectMessage)
1:3f32507:           			{
1:3f32507: 		  			    System.out.println ("Warning: An object message was discarded because it could not be processed as a javax.jms.TextMessage.");
1:3f32507: 		  			 }
1:3f32507: 
1:3f32507:             else if (message instanceof javax.jms.StreamMessage)
1:3f32507: 					{
1:3f32507: 			   			System.out.println ("Warning: A stream message was discarded because it could not be processed as a javax.jms.TextMessage.");
1:3f32507: 					 }
1:3f32507:         return "- " + msgClass + " from " + msgBody ;
1:3f32507: 
1:3f32507:     }
38:2ecf41d: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  
1: Sample Application
1: 
1: Writing a Basic JMS Application using:
1:     - QueueBrowser
1:     - JMS with a Graphical Interface
1:     - behavior based on message type
1: 
1: When you run this program, it will read all the parameters out
1: of the QueueMonitor.properties file. In this file you can specify
1: which queues you want to monitor. Then a Java window will open and
1: every time you click the Browse button, The current contents of the queues
1: will be displayed in the text window.
1: 
1: Usage:
1:   java QueueMonitor
1: 
1: Suggested demonstration:
1:   - Start one instance of this application:
1:         java QueueMonitor
1:   - Run on or more Talk applications (without the receiving queue).
1:   - Enter messages on various Talk windows.
1:   - Watch the QueueMonitor display the messages.
1: 
1: */
1: import org.apache.activemq.*;
1: 
1: import javax.swing.JTextArea;
1: import javax.swing.JFrame;
1: import javax.swing.JScrollPane;
1: import javax.swing.JButton;
1: 
1: import javax.swing.text.Highlighter;
1: import javax.swing.text.DefaultHighlighter;
1: import javax.swing.text.BadLocationException;
1: 
1: import javax.swing.border.CompoundBorder;
1: import javax.swing.border.EmptyBorder;
1: import javax.swing.border.BevelBorder;
1: import javax.swing.border.SoftBevelBorder;
1: 
1: import java.awt.Toolkit;
1: import java.awt.Dimension;
1: import java.awt.BorderLayout;
1: import java.awt.Rectangle;
1: 
1: import java.awt.event.WindowAdapter;
1: import java.awt.event.WindowEvent;
1: import java.awt.event.ActionListener;
1: import java.awt.event.ActionEvent;
1: 
1: import java.io.FileInputStream;
1: 
1: import java.util.Vector;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: import java.util.StringTokenizer;
1: 
1: public class QueueMonitor
1: extends JFrame
1: {
1:     private static final String DEFAULT_PROPERTIES_FILE = "QueueMonitor.properties";
1: 
1:     String propertiesFile = DEFAULT_PROPERTIES_FILE;
1:     String broker = "tcp://localhost:61616";
1:     String connectID = "QueueMonitor";
1:     String username = "QueueMonitor";
1:     String password = "QueueMonitor";
1:     String browseQueues  = "Q1,Q2,Q3";
1:     String textFontName = "Dialog";
1:     String textFontStyle = "PLAIN";
1:     String textFontSize = "12";
1:     String title = "QueueMonitor";
1: 
1:     JTextArea textArea = new JTextArea();
1:     JScrollPane scrollPane = new JScrollPane(textArea);
1:     JButton browseButton = new JButton("Browse Queues");
1: 
1:     Vector theQueues = new Vector();
1: 
1:     private javax.jms.Connection connect = null;
1:     private javax.jms.Session session = null;
1: 
1: /** Constructor for MessageMonitor window. */
1:     public QueueMonitor()
1:     {
1:         loadProperties();
1: 
1:         setTitle(title);
1: 
1:         // Connect to Message Broker
1:         try
1:         {
1:             javax.jms.ConnectionFactory factory;
1:             factory = new ActiveMQConnectionFactory(username, password, broker);
1: 
1:             connect = factory.createConnection (username, password);
1:             session = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             System.err.println("Cannot connect to Broker");
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         // Set up Queues:
1:         StringTokenizer queues = new StringTokenizer(browseQueues, ",");
1:         while (queues.hasMoreTokens())
1:         {
1:             try{
1:                 String queueName = queues.nextToken();
1:                 System.out.println ("Monitoring  " + queueName);
1:                 theQueues.addElement(session.createQueue(queueName));
1:             }
1:             catch (javax.jms.JMSException jmse)
1:             {
1:                 jmse.printStackTrace();
1:             }
1:         }
1: 
1: 
1:         // After init it is time to start the connection
1:         try
1:         {
1:             connect.start();
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             System.err.println("Cannot start connection");
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         //Elements visible on the screen
1:         textArea.setEditable(false);
1:         scrollPane.setBorder(new CompoundBorder(new EmptyBorder(6,6,6,6),
1:                                                 new SoftBevelBorder(BevelBorder.LOWERED)));
1:         getContentPane().add(scrollPane,BorderLayout.CENTER);
1:         getContentPane().add(browseButton,BorderLayout.SOUTH);
1: 
1:         browseButton.addActionListener(new OnBrowse());
1: 
1:     }
1: 
1: 
1: 
1:     /** Main program entry point. */
1:     public static void main(String[] args)
1:     {
1:         // There should be no arguments to this program.
1:         if (args.length > 0) {
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1:         QueueMonitor queueMonitor = new QueueMonitor();
1: 
1:         queueMonitor.addWindowListener(new WindowAdapter() {
1:             public void windowClosing(WindowEvent e)
1:             {
1:                 System.exit(0);
1:             }
1:         });
1: 
1:         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
1:         screenSize.height = screenSize.height / 2 ;
1:         screenSize.width = screenSize.width / 2 ;
1:         queueMonitor.setSize(screenSize);
1:         queueMonitor.setVisible(true);
1: 
1:     }
1: 
1:     /** Prints the usage. */
1:     private static void printUsage()
1:     {
1:         StringBuffer use = new StringBuffer();
1:         use.append("\nusage: QueueMonitor\n\n");
1:         use.append("Properties for this sample can be set in a properties file.\n");
1:         String dfltFile = System.getProperty("propertiesFile", DEFAULT_PROPERTIES_FILE);
1:         use.append("[Default file: " + dfltFile +"]\n\n");
1:         System.out.print(use);
1:     }
1: 
1:     /** Load the window and JMS properties from a file. */
1:     private void loadProperties()
1:     {
1:         try
1:         {
1:             Properties properties = new Properties();
1: 
1:             propertiesFile = System.getProperty("propertiesFile", propertiesFile);
1: 
1:             properties.load(new FileInputStream(propertiesFile));
1: 
1:             // Connection Properties
1:             broker = properties.getProperty("broker",broker).trim();
1:             connectID = properties.getProperty("connectID",connectID).trim();
1:             username = properties.getProperty("username",username).trim();
1:             password = properties.getProperty("password",password).trim();
1: 
1:             // Queue Properties
1:             browseQueues = properties.getProperty("browseQueues", browseQueues).trim();
1: 
1:             // Text Properties
1:             textFontName = properties.getProperty("textFontName", textFontName).trim();
1:             textFontStyle = properties.getProperty("textFontStyle", textFontStyle).trim();
1:             textFontSize = properties.getProperty("textFontSize", textFontSize).trim();
1: 
1:             // Window Properties
1:             title = properties.getProperty("title", title).trim();
1: 
1:         }
1:         catch (java.io.FileNotFoundException fnfe)
1:         {
1:             System.out.println (propertiesFile + " not found: using defaults"); // Use Defaults
1:         }
1:         catch (java.io.IOException ioe)
1:         {
1:             ioe.printStackTrace();
1:         }
1:     }
1: 
1:    /** Class to handle the "Browse" button action. */
1:     public class OnBrowse implements ActionListener
1:     {
1: 
1:         public void actionPerformed(ActionEvent evt)
1:         {
1:             // Clear the textArea.
1:             textArea.setText("");
1:             textArea.paintImmediately(textArea.getBounds());
1: 
1:             if(theQueues.size() == 0){
1:                 textArea.setText("No Queues to be monitored");
1:             }
1:             else{
1:                 for(int i = 0; i<theQueues.size();i++)
1:                 {
1:                     try
1:                     {
1:                         // Create a browser on the queue and show the messages waiting in it.
1:                         javax.jms.Queue q = (javax.jms.Queue) theQueues.elementAt(i);
1:                        textArea.append("--------------------------------------------------\n");
1:                        textArea.append("Messages on queue " + q.getQueueName() + ":\n");
1:   
1:                         // Create a queue browser
1:                         System.out.print ("Browsing messages in queue " + q.getQueueName() + "\"...");
1:                         javax.jms.QueueBrowser browser = session.createBrowser(q);
1:                         System.out.println ("[done]");
1:                         int cnt = 0;
1:                         Enumeration e = browser.getEnumeration();
1:                         if(!e.hasMoreElements())
1:                         {
1:                             textArea.append ("(This queue is empty.)");
1:                         }
1:                         else
1:                         {
1:                             while(e.hasMoreElements())
1:                             {
1:                                 System.out.print(" --> getting message " + String.valueOf(++cnt) + "...");
1:                                 javax.jms.Message message = (javax.jms.Message) e.nextElement();
1:                                 System.out.println("[" + message + "]");
1:                                 if (message != null)
1:                                 {
1:                                     String msgText = getContents (message);
1:                                     textArea.append(msgText + "\n");
1:                                     try
1:                                     {
1:                                         // Scroll the text area to show the message
1:                                         Rectangle area = textArea.modelToView(textArea.getText().length());
1:                                         textArea.scrollRectToVisible(area);
1:                                         textArea.paintImmediately(textArea.getBounds());
1:                                     }
1:                                     catch(Exception jle) { jle.printStackTrace();}
1:                                 }
1:                             }
1:                         }
1:                         // Free any resources in the browser.
1:                         browser.close();
1:                         textArea.append ("\n");
1:                     }
1:                     catch (javax.jms.JMSException jmse){
1:                         jmse.printStackTrace();
1:                     }
1:                 }
1:                 try
1:                 {
1:                     // Scroll the text area to show the message
1:                     Rectangle area = textArea.modelToView(textArea.getText().length());
1:                     textArea.scrollRectToVisible(area);
1:                     textArea.paintImmediately(textArea.getBounds());
1:                 }
1:                 catch(Exception jle) { jle.printStackTrace();}
1:             }
1:         }
1:     }
1: 
1:     public String getContents (javax.jms.Message message){
1: 
1: 
1:             String msgBody = null;
1:             String msgClass = message.getClass().getName();
1: 
1:             if (message instanceof javax.jms.TextMessage)
1:             {
1:                 msgClass = "javax.jms.TextMessage";
1:                 try
1:                 {
1:                     msgBody = ((javax.jms.TextMessage)message).getText();
1:                 }
1:                 catch (javax.jms.JMSException jmse)
1:                 {
1:                     msgBody = "";
1:                 }
1:             }
1:           
1:             else if (message instanceof org.apache.activemq.command.ActiveMQMapMessage)
1:             {
1: 		  			    System.out.println ("(Name value pairs in the MapMessage are not displayed.)");
1:             }
1:             else if (message instanceof javax.jms.BytesMessage)
1:           			{
1: 		  			    System.out.println ("Warning: A bytes message was discarded because it could not be processed as a javax.jms.TextMessage.");
1: 		  			 }
1:             else if (message instanceof javax.jms.ObjectMessage)
1:           			{
1: 		  			    System.out.println ("Warning: An object message was discarded because it could not be processed as a javax.jms.TextMessage.");
1: 		  			 }
1: 
1:             else if (message instanceof javax.jms.StreamMessage)
1: 					{
1: 			   			System.out.println ("Warning: A stream message was discarded because it could not be processed as a javax.jms.TextMessage.");
1: 					 }
1:         return "- " + msgClass + " from " + msgBody ;
1: 
1:     }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  
0: Sample Application
0: 
0: Writing a Basic JMS Application using:
0:     - QueueBrowser
0:     - JMS with a Graphical Interface
0:     - behavior based on message type
0: 
0: When you run this program, it will read all the parameters out
0: of the QueueMonitor.properties file. In this file you can specify
0: which queues you want to monitor. Then a Java window will open and
0: every time you click the Browse button, The current contents of the queues
0: will be displayed in the text window.
0: 
0: Usage:
0:   java QueueMonitor
0: 
0: Suggested demonstration:
0:   - Start one instance of this application:
0:         java QueueMonitor
0:   - Run on or more Talk applications (without the receiving queue).
0:   - Enter messages on various Talk windows.
0:   - Watch the QueueMonitor display the messages.
0: 
0: */
0: import org.apache.activemq.*;
0: 
0: import javax.swing.JTextArea;
0: import javax.swing.JFrame;
0: import javax.swing.JScrollPane;
0: import javax.swing.JButton;
0: 
0: import javax.swing.text.Highlighter;
0: import javax.swing.text.DefaultHighlighter;
0: import javax.swing.text.BadLocationException;
0: 
0: import javax.swing.border.CompoundBorder;
0: import javax.swing.border.EmptyBorder;
0: import javax.swing.border.BevelBorder;
0: import javax.swing.border.SoftBevelBorder;
0: 
0: import java.awt.Toolkit;
0: import java.awt.Dimension;
0: import java.awt.BorderLayout;
0: import java.awt.Rectangle;
0: 
0: import java.awt.event.WindowAdapter;
0: import java.awt.event.WindowEvent;
0: import java.awt.event.ActionListener;
0: import java.awt.event.ActionEvent;
0: 
0: import java.io.FileInputStream;
0: 
0: import java.util.Vector;
0: import java.util.Enumeration;
0: import java.util.Properties;
0: import java.util.StringTokenizer;
0: 
0: public class QueueMonitor
0: extends JFrame
0: {
0:     private static final String DEFAULT_PROPERTIES_FILE = "QueueMonitor.properties";
0: 
0:     String propertiesFile = DEFAULT_PROPERTIES_FILE;
0:     String broker = "tcp://localhost:61616";
0:     String connectID = "QueueMonitor";
0:     String username = "QueueMonitor";
0:     String password = "QueueMonitor";
0:     String browseQueues  = "Q1,Q2,Q3";
0:     String textFontName = "Dialog";
0:     String textFontStyle = "PLAIN";
0:     String textFontSize = "12";
0:     String title = "QueueMonitor";
0: 
0:     JTextArea textArea = new JTextArea();
0:     JScrollPane scrollPane = new JScrollPane(textArea);
0:     JButton browseButton = new JButton("Browse Queues");
0: 
0:     Vector theQueues = new Vector();
0: 
0:     private javax.jms.Connection connect = null;
0:     private javax.jms.Session session = null;
0: 
0: /** Constructor for MessageMonitor window. */
0:     public QueueMonitor()
0:     {
0:         loadProperties();
0: 
0:         setTitle(title);
0: 
0:         // Connect to Message Broker
0:         try
0:         {
0:             javax.jms.ConnectionFactory factory;
0:             factory = new ActiveMQConnectionFactory(username, password, broker);
0: 
0:             connect = factory.createConnection (username, password);
0:             session = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             System.err.println("Cannot connect to Broker");
0:             jmse.printStackTrace();
0:             System.exit(1);
1:         }
0: 
0:         // Set up Queues:
0:         StringTokenizer queues = new StringTokenizer(browseQueues, ",");
0:         while (queues.hasMoreTokens())
0:         {
0:             try{
0:                 String queueName = queues.nextToken();
0:                 System.out.println ("Monitoring  " + queueName);
0:                 theQueues.addElement(session.createQueue(queueName));
1:             }
0:             catch (javax.jms.JMSException jmse)
0:             {
0:                 jmse.printStackTrace();
1:             }
1:         }
0: 
0: 
0:         // After init it is time to start the connection
0:         try
0:         {
0:             connect.start();
1:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             System.err.println("Cannot start connection");
0:             jmse.printStackTrace();
0:             System.exit(1);
1:         }
0: 
0:         //Elements visible on the screen
0:         textArea.setEditable(false);
0:         scrollPane.setBorder(new CompoundBorder(new EmptyBorder(6,6,6,6),
0:                                                 new SoftBevelBorder(BevelBorder.LOWERED)));
0:         getContentPane().add(scrollPane,BorderLayout.CENTER);
0:         getContentPane().add(browseButton,BorderLayout.SOUTH);
0: 
0:         browseButton.addActionListener(new OnBrowse());
0: 
1:     }
0: 
0: 
0: 
0:     /** Main program entry point. */
0:     public static void main(String[] args)
0:     {
0:         // There should be no arguments to this program.
0:         if (args.length > 0) {
0:             printUsage();
0:             System.exit(1);
1:         }
0: 
0:         QueueMonitor queueMonitor = new QueueMonitor();
0: 
0:         queueMonitor.addWindowListener(new WindowAdapter() {
0:             public void windowClosing(WindowEvent e)
0:             {
0:                 System.exit(0);
1:             }
0:         });
0: 
0:         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
0:         screenSize.height = screenSize.height / 2 ;
0:         screenSize.width = screenSize.width / 2 ;
0:         queueMonitor.setSize(screenSize);
0:         queueMonitor.setVisible(true);
0: 
1:     }
0: 
0:     /** Prints the usage. */
0:     private static void printUsage()
0:     {
0:         StringBuffer use = new StringBuffer();
0:         use.append("\nusage: QueueMonitor\n\n");
0:         use.append("Properties for this sample can be set in a properties file.\n");
0:         String dfltFile = System.getProperty("propertiesFile", DEFAULT_PROPERTIES_FILE);
0:         use.append("[Default file: " + dfltFile +"]\n\n");
0:         System.out.print(use);
1:     }
0: 
0:     /** Load the window and JMS properties from a file. */
0:     private void loadProperties()
0:     {
0:         try
0:         {
0:             Properties properties = new Properties();
0: 
0:             propertiesFile = System.getProperty("propertiesFile", propertiesFile);
0: 
0:             properties.load(new FileInputStream(propertiesFile));
0: 
0:             // Connection Properties
0:             broker = properties.getProperty("broker",broker).trim();
0:             connectID = properties.getProperty("connectID",connectID).trim();
0:             username = properties.getProperty("username",username).trim();
0:             password = properties.getProperty("password",password).trim();
0: 
0:             // Queue Properties
0:             browseQueues = properties.getProperty("browseQueues", browseQueues).trim();
0: 
0:             // Text Properties
0:             textFontName = properties.getProperty("textFontName", textFontName).trim();
0:             textFontStyle = properties.getProperty("textFontStyle", textFontStyle).trim();
0:             textFontSize = properties.getProperty("textFontSize", textFontSize).trim();
0: 
0:             // Window Properties
0:             title = properties.getProperty("title", title).trim();
0: 
1:         }
0:         catch (java.io.FileNotFoundException fnfe)
0:         {
0:             System.out.println (propertiesFile + " not found: using defaults"); // Use Defaults
1:         }
0:         catch (java.io.IOException ioe)
0:         {
0:             ioe.printStackTrace();
1:         }
1:     }
0: 
0:    /** Class to handle the "Browse" button action. */
0:     public class OnBrowse implements ActionListener
0:     {
0: 
0:         public void actionPerformed(ActionEvent evt)
0:         {
0:             // Clear the textArea.
0:             textArea.setText("");
0:             textArea.paintImmediately(textArea.getBounds());
0: 
0:             if(theQueues.size() == 0){
0:                 textArea.setText("No Queues to be monitored");
1:             }
0:             else{
0:                 for(int i = 0; i<theQueues.size();i++)
0:                 {
0:                     try
0:                     {
0:                         // Create a browser on the queue and show the messages waiting in it.
0:                         javax.jms.Queue q = (javax.jms.Queue) theQueues.elementAt(i);
0:                        textArea.append("--------------------------------------------------\n");
0:                        textArea.append("Messages on queue " + q.getQueueName() + ":\n");
0:   
0:                         // Create a queue browser
0:                         System.out.print ("Browsing messages in queue " + q.getQueueName() + "\"...");
0:                         javax.jms.QueueBrowser browser = session.createBrowser(q);
0:                         System.out.println ("[done]");
0:                         int cnt = 0;
0:                         Enumeration e = browser.getEnumeration();
0:                         if(!e.hasMoreElements())
0:                         {
0:                             textArea.append ("(This queue is empty.)");
1:                         }
0:                         else
0:                         {
0:                             while(e.hasMoreElements())
0:                             {
0:                                 System.out.print(" --> getting message " + String.valueOf(++cnt) + "...");
0:                                 javax.jms.Message message = (javax.jms.Message) e.nextElement();
0:                                 System.out.println("[" + message + "]");
0:                                 if (message != null)
0:                                 {
0:                                     String msgText = getContents (message);
0:                                     textArea.append(msgText + "\n");
0:                                     try
0:                                     {
0:                                         // Scroll the text area to show the message
0:                                         Rectangle area = textArea.modelToView(textArea.getText().length());
0:                                         textArea.scrollRectToVisible(area);
0:                                         textArea.paintImmediately(textArea.getBounds());
1:                                     }
0:                                     catch(Exception jle) { jle.printStackTrace();}
1:                                 }
1:                             }
1:                         }
0:                         // Free any resources in the browser.
0:                         browser.close();
0:                         textArea.append ("\n");
1:                     }
0:                     catch (javax.jms.JMSException jmse){
0:                         jmse.printStackTrace();
1:                     }
1:                 }
0:                 try
0:                 {
0:                     // Scroll the text area to show the message
0:                     Rectangle area = textArea.modelToView(textArea.getText().length());
0:                     textArea.scrollRectToVisible(area);
0:                     textArea.paintImmediately(textArea.getBounds());
1:                 }
0:                 catch(Exception jle) { jle.printStackTrace();}
1:             }
1:         }
1:     }
0: 
0:     public String getContents (javax.jms.Message message){
0: 
0: 
0:             String msgBody = null;
0:             String msgClass = message.getClass().getName();
0: 
0:             if (message instanceof javax.jms.TextMessage)
0:             {
0:                 msgClass = "javax.jms.TextMessage";
0:                 try
0:                 {
0:                     msgBody = ((javax.jms.TextMessage)message).getText();
1:                 }
0:                 catch (javax.jms.JMSException jmse)
0:                 {
0:                     msgBody = "";
1:                 }
1:             }
0:           
0:             else if (message instanceof org.apache.activemq.command.ActiveMQMapMessage)
0:             {
0: 		  			    System.out.println ("(Name value pairs in the MapMessage are not displayed.)");
1:             }
0:             else if (message instanceof javax.jms.BytesMessage)
0:           			{
0: 		  			    System.out.println ("Warning: A bytes message was discarded because it could not be processed as a javax.jms.TextMessage.");
1: 		  			 }
0:             else if (message instanceof javax.jms.ObjectMessage)
0:           			{
0: 		  			    System.out.println ("Warning: An object message was discarded because it could not be processed as a javax.jms.TextMessage.");
1: 		  			 }
0: 
0:             else if (message instanceof javax.jms.StreamMessage)
0: 					{
0: 			   			System.out.println ("Warning: A stream message was discarded because it could not be processed as a javax.jms.TextMessage.");
1: 					 }
0:         return "- " + msgClass + " from " + msgBody ;
0: 
1:     }
1: }
============================================================================