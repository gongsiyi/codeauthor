1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
1:230a86c: 
1:d29ca2a: import java.io.DataInputStream;
1:d29ca2a: import java.io.DataOutputStream;
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.InputStream;
1:d29ca2a: import java.io.OutputStream;
1:1f01c94: import java.util.HashMap;
1:d29ca2a: import java.util.zip.DeflaterOutputStream;
1:d29ca2a: import java.util.zip.InflaterInputStream;
11:d29ca2a: 
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.MessageNotWriteableException;
1:74a7a8b: import javax.jms.TextMessage;
1:74a7a8b: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnection;
1:74a7a8b: import org.apache.activemq.util.ByteArrayInputStream;
1:74a7a8b: import org.apache.activemq.util.ByteArrayOutputStream;
1:74a7a8b: import org.apache.activemq.util.ByteSequence;
1:74a7a8b: import org.apache.activemq.util.JMSExceptionSupport;
1:74a7a8b: import org.apache.activemq.util.MarshallingSupport;
1:74a7a8b: import org.apache.activemq.wireformat.WireFormat;
1:74a7a8b: 
1:d29ca2a: /**
1:4afa5d6:  * @openwire:marshaller code="28"
1:b0c2a40:  *
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQTextMessage extends ActiveMQMessage implements TextMessage {
1:d29ca2a: 
1:230a86c:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_TEXT_MESSAGE;
1:d29ca2a: 
1:837da7e:     protected String text;
1:d29ca2a: 
1:84ec047:     @Override
1:d29ca2a:     public Message copy() {
1:d29ca2a:         ActiveMQTextMessage copy = new ActiveMQTextMessage();
1:d29ca2a:         copy(copy);
1:d29ca2a:         return copy;
1:e0c5499:     }
1:e0c5499: 
1:d29ca2a:     private void copy(ActiveMQTextMessage copy) {
1:837da7e:         super.copy(copy);
1:837da7e:         copy.text = text;
1:e0c5499:     }
1:310c2bb: 
1:84ec047:     @Override
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:e0c5499:     }
1:230a86c: 
1:84ec047:     @Override
1:05a8cba:     public String getJMSXMimeType() {
1:05a8cba:         return "jms/text-message";
1:e0c5499:     }
1:230a86c: 
1:84ec047:     @Override
1:d29ca2a:     public void setText(String text) throws MessageNotWriteableException {
1:837da7e:         checkReadOnlyBody();
2:837da7e:         this.text = text;
1:837da7e:         setContent(null);
1:e0c5499:     }
1:230a86c: 
1:84ec047:     @Override
1:d29ca2a:     public String getText() throws JMSException {
1:837da7e:         ByteSequence content = getContent();
1:e0c5499: 
1:310c2bb:         if (text == null && content != null) {
1:310c2bb:             text = decodeContent(content);
1:837da7e:             setContent(null);
1:837da7e:             setCompressed(false);
1:e0c5499:         }
1:3003895:         return text;
1:e0c5499:     }
1:3003895: 
1:310c2bb:     private String decodeContent(ByteSequence bodyAsBytes) throws JMSException {
1:3003895:         String text = null;
1:310c2bb:         if (bodyAsBytes != null) {
1:149fffd:             InputStream is = null;
1:d29ca2a:             try {
1:310c2bb:                 is = new ByteArrayInputStream(bodyAsBytes);
1:310c2bb:                 if (isCompressed()) {
1:310c2bb:                     is = new InflaterInputStream(is);
1:e0c5499:                 }
1:310c2bb:                 DataInputStream dataIn = new DataInputStream(is);
1:310c2bb:                 text = MarshallingSupport.readUTF8(dataIn);
1:310c2bb:                 dataIn.close();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:230a86c:             } finally {
1:149fffd:                 if (is != null) {
1:149fffd:                     try {
1:149fffd:                         is.close();
1:230a86c:                     } catch (IOException e) {
1:149fffd:                         // ignore
1:e0c5499:                     }
1:3003895:                 }
1:3003895:             }
7:d29ca2a:         }
1:d29ca2a:         return text;
1:d29ca2a:     }
1:d29ca2a: 
1:84ec047:     @Override
1:d29ca2a:     public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:d29ca2a:         super.beforeMarshall(wireFormat);
1:84ec047:         storeContentAndClear();
1:d29ca2a:     }
1:230a86c: 
1:41c9366:     @Override
1:3003895:     public void storeContentAndClear() {
1:837da7e:         storeContent();
1:837da7e:         text=null;
1:e0c5499:     }
1:e0c5499: 
1:3003895:     @Override
1:41c9366:     public void storeContent() {
1:41c9366:         try {
1:837da7e:             ByteSequence content = getContent();
1:837da7e:             String text = this.text;
1:837da7e:             if (content == null && text != null) {
1:d29ca2a:                 ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:d29ca2a:                 OutputStream os = bytesOut;
1:d29ca2a:                 ActiveMQConnection connection = getConnection();
1:230a86c:                 if (connection != null && connection.isUseCompression()) {
1:d29ca2a:                     compressed = true;
1:d29ca2a:                     os = new DeflaterOutputStream(os);
1:e0c5499:                 }
1:d29ca2a:                 DataOutputStream dataOut = new DataOutputStream(os);
1:310c2bb:                 MarshallingSupport.writeUTF8(dataOut, text);
1:d29ca2a:                 dataOut.close();
1:837da7e:                 setContent(bytesOut.toByteSequence());
1:e0c5499:             }
1:41c9366:         } catch (IOException e) {
1:41c9366:             throw new RuntimeException(e);
1:3003895:         }
1:d29ca2a:     }
1:e0c5499: 
1:c1da3ac:     // see https://issues.apache.org/activemq/browse/AMQ-2103
1:c1da3ac:     // and https://issues.apache.org/activemq/browse/AMQ-2966
1:84ec047:     @Override
1:7c3bb40:     public void clearUnMarshalledState() throws JMSException {
1:7c3bb40:         super.clearUnMarshalledState();
1:837da7e:         this.text = null;
1:e0c5499:     }
1:e0c5499: 
1:f82993d:     @Override
1:f82993d:     public boolean isContentMarshalled() {
1:f82993d:         return content != null || text == null;
1:f82993d:     }
1:f82993d: 
1:d29ca2a:     /**
1:230a86c:      * Clears out the message body. Clearing a message's body does not clear its
1:230a86c:      * header values or property entries. <p/>
1:230a86c:      * <P>
1:230a86c:      * If this message body was read-only, calling this method leaves the
1:230a86c:      * message body in the same state as an empty body in a newly created
1:230a86c:      * message.
1:230a86c:      *
1:230a86c:      * @throws JMSException if the JMS provider fails to clear the message body
1:230a86c:      *                 due to some internal error.
1:d29ca2a:      */
1:84ec047:     @Override
1:d29ca2a:     public void clearBody() throws JMSException {
1:837da7e:         super.clearBody();
1:837da7e:         this.text = null;
1:e0c5499:     }
1:3003895: 
1:84ec047:     @Override
1:d29ca2a:     public int getSize() {
1:837da7e:         String text = this.text;
1:230a86c:         if (size == 0 && content == null && text != null) {
1:6d0c552:             size = getMinimumMessageSize();
1:f812e34:             if (marshalledProperties != null) {
1:d29ca2a:                 size += marshalledProperties.getLength();
1:f812e34:             }
1:7a7ac13:             size += text.length() * 2;
1:d29ca2a:         }
1:d29ca2a:         return super.getSize();
1:d29ca2a:     }
1:230a86c: 
1:84ec047:     @Override
1:117cf02:     public String toString() {
1:117cf02:         try {
1:837da7e:             String text = this.text;
1:3003895:             if( text == null ) {
1:310c2bb:                 text = decodeContent(getContent());
1:3003895:             }
1:e0c5499:             if (text != null) {
1:27c1719:                 text = MarshallingSupport.truncate64(text);
1:56f8e36:                 HashMap<String, Object> overrideFields = new HashMap<String, Object>();
1:56f8e36:                 overrideFields.put("text", text);
1:56f8e36:                 return super.toString(overrideFields);
1:d29ca2a:             }
1:117cf02:         } catch (JMSException e) {
1:d29ca2a:         }
1:117cf02:         return super.toString();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f82993d
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean isContentMarshalled() {
1:         return content != null || text == null;
1:     }
1: 
commit:7c3bb40
/////////////////////////////////////////////////////////////////////////
1:     public void clearUnMarshalledState() throws JMSException {
1:         super.clearUnMarshalledState();
commit:9c929b6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:837da7e
/////////////////////////////////////////////////////////////////////////
1:     protected String text;
/////////////////////////////////////////////////////////////////////////
0:         //AMQ-6218 - Save text before calling super.copy() to prevent a race condition when
0:         //concurrent store and dispatch is enabled in KahaDB
0:         //The issue is sometimes beforeMarshall() gets called in between the time content and
0:         //text are copied to the new object leading to both fields being null when text should
0:         //not be null
1:         String text = this.text;
1:         super.copy(copy);
1:         copy.text = text;
/////////////////////////////////////////////////////////////////////////
1:         checkReadOnlyBody();
1:         this.text = text;
1:         setContent(null);
1:         ByteSequence content = getContent();
1:         String text = this.text;
1:             this.text = text;
1:             setContent(null);
1:             setCompressed(false);
/////////////////////////////////////////////////////////////////////////
1:         storeContent();
1:         text=null;
1:             ByteSequence content = getContent();
1:             String text = this.text;
1:             if (content == null && text != null) {
/////////////////////////////////////////////////////////////////////////
1:                 setContent(bytesOut.toByteSequence());
0:         super.clearMarshalledState();
1:         this.text = null;
/////////////////////////////////////////////////////////////////////////
1:         super.clearBody();
1:         this.text = null;
0:         String text = this.text;
commit:e0c5499
/////////////////////////////////////////////////////////////////////////
0:     protected volatile String text;
/////////////////////////////////////////////////////////////////////////
0:         synchronized(this) {
0:             super.copy(copy);
0:             copy.text = text;
1:         }
/////////////////////////////////////////////////////////////////////////
0:         synchronized(this) {
0:             checkReadOnlyBody();
0:             this.text = text;
0:             setContent(null);
1:         }
0:         ByteSequence content;
0:         String text;
1: 
0:         synchronized(this) {
0:             content = getContent();
0:             text = this.text;
1:         }
0:             synchronized(this) {
0:                 this.text = text;
0:                 setContent(null);
0:                 setCompressed(false);
1:             }
/////////////////////////////////////////////////////////////////////////
0:         ByteSequence content;
0:         String text;
0:         synchronized(this) {
0:             content = getContent();
0:             text = this.text;
1:         }
0:         if (content == null && text != null) {
0:             content = marshallContent(text);
1:         }
0:         synchronized(this) {
0:             setContent(content);
0:             text=null;
1:         }
0:         ByteSequence content;
0:         String text;
0:         synchronized(this) {
0:             content = getContent();
0:             text = this.text;
1:         }
1: 
0:         if (content == null && text != null) {
0:             content = marshallContent(text);
1:         }
1: 
0:         synchronized(this) {
0:             setContent(content);
1:         }
1:     }
1: 
0:     private ByteSequence marshallContent(String text) {
0:         ByteSequence content = null;
1:             if (text != null) {
/////////////////////////////////////////////////////////////////////////
0:                 content = bytesOut.toByteSequence();
0:         return content;
1: 
0:         synchronized(this) {
0:             super.clearMarshalledState();
0:             this.text = null;
1:         }
/////////////////////////////////////////////////////////////////////////
0:         synchronized(this) {
0:             super.clearBody();
0:             this.text = null;
1:         }
0:         ByteSequence content;
0:         String text;
0:         synchronized(this) {
0:             content = getContent();
0:             text = this.text;
1:         }
commit:ea09159
/////////////////////////////////////////////////////////////////////////
0:         //AMQ-6218 - Save text before calling super.copy() to prevent a race condition when
0:         //concurrent store and dispatch is enabled in KahaDB
0:         //The issue is sometimes beforeMarshall() gets called in between the time content and
0:         //text are copied to the new object leading to both fields being null when text should
0:         //not be null
0:         String text = this.text;
/////////////////////////////////////////////////////////////////////////
0:         String text = this.text;
0:             this.text = text;
commit:310c2bb
/////////////////////////////////////////////////////////////////////////
0:         ByteSequence content = getContent();
1: 
1:         if (text == null && content != null) {
1:             text = decodeContent(content);
1:     private String decodeContent(ByteSequence bodyAsBytes) throws JMSException {
1:         if (bodyAsBytes != null) {
1:                 is = new ByteArrayInputStream(bodyAsBytes);
1:                 if (isCompressed()) {
1:                     is = new InflaterInputStream(is);
1:                 DataInputStream dataIn = new DataInputStream(is);
1:                 text = MarshallingSupport.readUTF8(dataIn);
1:                 dataIn.close();
/////////////////////////////////////////////////////////////////////////
0:             String text = this.text;
/////////////////////////////////////////////////////////////////////////
1:                 MarshallingSupport.writeUTF8(dataOut, text);
/////////////////////////////////////////////////////////////////////////
0:         String text = this.text;
/////////////////////////////////////////////////////////////////////////
1:                 text = decodeContent(getContent());
commit:84ec047
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         storeContentAndClear();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:3003895
/////////////////////////////////////////////////////////////////////////
0:             text = decodeContent();
0:             setContent(null);
0:             setCompressed(false);
1:         }
1:         return text;
1:     }
1: 
0:     private String decodeContent() throws JMSException {
1:         String text = null;
0:         if (getContent() != null) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void storeContentAndClear() {
0:         storeContent();
0:         text=null;
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:             String text = this.text;
1:             if( text == null ) {
0:                 text = decodeContent();
1:             }
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.MessageNotWriteableException;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: import org.apache.activemq.util.MarshallingSupport;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:             if (marshalledProperties != null) {
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_TEXT_MESSAGE;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:                     if (isCompressed()) {
/////////////////////////////////////////////////////////////////////////
1:             } finally {
1:                     } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (content == null && text != null) {
1:             if (connection != null && connection.isUseCompression()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Clears out the message body. Clearing a message's body does not clear its
1:      * header values or property entries. <p/>
1:      * <P>
1:      * If this message body was read-only, calling this method leaves the
1:      * message body in the same state as an empty body in a newly created
1:      * message.
1:      * 
1:      * @throws JMSException if the JMS provider fails to clear the message body
1:      *                 due to some internal error.
1: 
1:         if (size == 0 && content == null && text != null) {
0:             if (marshalledProperties != null)
0:             size = text.length() * 2;
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.ByteArrayInputStream;
0: import org.apache.activemq.util.ByteArrayOutputStream;
0: import org.apache.activemq.util.ByteSequence;
0: import org.apache.activemq.wireformat.WireFormat;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.command.WireFormat;
0: import org.apache.activeio.packet.ByteSequence;
0: import org.apache.activeio.util.ByteArrayInputStream;
0: import org.apache.activeio.util.ByteArrayOutputStream;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.util.zip.DeflaterOutputStream;
1: import java.util.zip.InflaterInputStream;
1: 
0: import javax.jms.JMSException;
0: import javax.jms.MessageNotWriteableException;
0: import javax.jms.TextMessage;
1: 
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
0: import org.activeio.ByteSequence;
0: import org.activeio.command.WireFormat;
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.util.JMSExceptionSupport;
0: import org.apache.activemq.util.MarshallingSupport;
1: 
1: /**
1:  * 
0:  * @openwire:marshaller
0:  * @version $Revision$
1:  */
1: public class ActiveMQTextMessage extends ActiveMQMessage implements TextMessage {
1: 
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.ACTIVEMQ_TEXT_MESSAGE;
1: 
0:     protected String text;
1: 
1:     public Message copy() {
1:         ActiveMQTextMessage copy = new ActiveMQTextMessage();
1:         copy(copy);
1:         return copy;
1:     }
1:     
1:     private void copy(ActiveMQTextMessage copy) {
0:         super.copy(copy);
0:         copy.text = text;
1:     }
1:     
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     public void setText(String text) throws MessageNotWriteableException {
0:         checkReadOnlyBody();
0:         this.text = text;
0:         setContent(null);
1:     }
1: 
1:     public String getText() throws JMSException {
0:         if (text == null && getContent() != null) {
1:             try {
0:                 ByteSequence bodyAsBytes = getContent();
0:                 if (bodyAsBytes != null) {
0:                     InputStream is = new ByteArrayInputStream(bodyAsBytes);
0:                     if( isCompressed() ) {
0:                         is = new InflaterInputStream(is);
1:                     }
0:                     DataInputStream dataIn = new DataInputStream(is);
0:                     text = MarshallingSupport.readUTF8(dataIn);
0:                     dataIn.close();
0:                     setContent(null);
1:                 }
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:         }
1:         return text;
1:     }
1: 
1:     public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:         super.beforeMarshall(wireFormat);
1:         
0:         ByteSequence content = getContent();
0:         if (content == null && text!=null ) {
1:             ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:             OutputStream os = bytesOut;
1:             ActiveMQConnection connection = getConnection();
0:             if( connection!=null && connection.isUseCompression() ) { 
1:                 compressed = true;
1:                 os = new DeflaterOutputStream(os);
1:             }
1:             DataOutputStream dataOut = new DataOutputStream(os);
0:             MarshallingSupport.writeUTF8(dataOut, text);
1:             dataOut.close();
0:             setContent(bytesOut.toByteSequence());
1:         }
1:     }
1:     
1:     /**
0:      * Clears out the message body. Clearing a message's body does not clear its header values or property entries.
0:      * <p/>
0:      * <P>If this message body was read-only, calling this method leaves the message body in the same state as an empty
0:      * body in a newly created message.
1:      *
0:      * @throws JMSException if the JMS provider fails to clear the message body due to some internal error.
1:      */
1:     public void clearBody() throws JMSException {
0:         super.clearBody();
0:         this.text = null;
1:     }
1:     
1:     public int getSize() {
0:         if( size == 0 && content==null && text!=null ) {
0:             size = AVERAGE_MESSAGE_SIZE_OVERHEAD;
0:             if( marshalledProperties!=null )
1:                 size += marshalledProperties.getLength();
0:             size = text.length()*2;
1:         }
1:         return super.getSize();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:41c9366
/////////////////////////////////////////////////////////////////////////
0:         storeContent();
0:     }
1:     @Override
1:     public void storeContent() {
1:         try {
0:             ByteSequence content = getContent();
0:             if (content == null && text != null) {
0:                 ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
0:                 OutputStream os = bytesOut;
0:                 ActiveMQConnection connection = getConnection();
0:                 if (connection != null && connection.isUseCompression()) {
0:                     compressed = true;
0:                     os = new DeflaterOutputStream(os);
0:                 }
0:                 DataOutputStream dataOut = new DataOutputStream(os);
0:                 MarshallingSupport.writeUTF8(dataOut, this.text);
0:                 dataOut.close();
0:                 setContent(bytesOut.toByteSequence());
1:         } catch (IOException e) {
1:             throw new RuntimeException(e);
commit:56f8e36
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:                     setCompressed(false);
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
0:             if (text != null && text.length() > 63) {
0:                 text = text.substring(0, 45) + "..." + text.substring(text.length() - 12);
1:                 HashMap<String, Object> overrideFields = new HashMap<String, Object>();
1:                 overrideFields.put("text", text);
1:                 return super.toString(overrideFields);
0:             }
author:Gary Tully
-------------------------------------------------------------------------------
commit:27c1719
/////////////////////////////////////////////////////////////////////////
0:             if (text != null) {
1:                 text = MarshallingSupport.truncate64(text);
commit:c1da3ac
/////////////////////////////////////////////////////////////////////////
1:     // see https://issues.apache.org/activemq/browse/AMQ-2103
1:     // and https://issues.apache.org/activemq/browse/AMQ-2966
0:     public void clearMarshalledState() throws JMSException {
0:         super.clearMarshalledState();
0:         this.text = null;
0: 
commit:8e70e01
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public void afterMarshall(WireFormat wireFormat) throws IOException {
0:         super.afterMarshall(wireFormat);
0:         //see https://issues.apache.org/activemq/browse/AMQ-2103
0:         // and https://issues.apache.org/activemq/browse/AMQ-2966
0:         this.text=null;
0:     }
0:     
commit:7a7ac13
/////////////////////////////////////////////////////////////////////////
1:             size += text.length() * 2;
author:Robert Davies
-------------------------------------------------------------------------------
commit:69e5f76
/////////////////////////////////////////////////////////////////////////
0:             MarshallingSupport.writeUTF8(dataOut, this.text);
0:             //see https://issues.apache.org/activemq/browse/AMQ-2103
0:             this.text=null;
commit:6d0c552
/////////////////////////////////////////////////////////////////////////
1:             size = getMinimumMessageSize();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:90fd917
/////////////////////////////////////////////////////////////////////////
0:         	if (text != null && text.length() > 63) {
commit:1f01c94
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0:             String text = getText();
0:         	if (text.length() > 63) {
0:         		text = text.substring(0, 45) + "..." + text.substring(text.length() - 12);
0:         		HashMap<String, Object> overrideFields = new HashMap<String, Object>();
0:         		overrideFields.put("text", text);
0:         		return super.toString(overrideFields);
0:         	}
commit:117cf02
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String toString() {
1:         try {
0:             getText();
1:         } catch (JMSException e) {
0:         }
1:         return super.toString();
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:149fffd
/////////////////////////////////////////////////////////////////////////
1:             InputStream is = null;
0:                     is = new ByteArrayInputStream(bodyAsBytes);
/////////////////////////////////////////////////////////////////////////
0:             finally {
1:                 if (is != null) {
1:                     try {
1:                         is.close();
0:                     }
0:                     catch (IOException e) {
1:                         // ignore
0:                     }
0:                 }
0:             }
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.JMSException;
0: import javax.jms.MessageNotWriteableException;
0: import javax.jms.TextMessage;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.util.zip.DeflaterOutputStream;
0: import java.util.zip.InflaterInputStream;
0: 
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String getJMSXMimeType() {
1:         return "jms/text-message";
0:     }
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="28"
============================================================================