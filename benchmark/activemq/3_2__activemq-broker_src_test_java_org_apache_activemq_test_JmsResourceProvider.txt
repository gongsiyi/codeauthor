16:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
15:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
16:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.test;
12:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionConsumer;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:74a7a8b: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.ServerSessionPool;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnectionFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsResourceProvider {
1:230a86c: 
1:230a86c:     private String serverUri = "vm://localhost?broker.persistent=false";
1:230a86c:     private boolean transacted;
1:230a86c:     private int ackMode = Session.AUTO_ACKNOWLEDGE;
1:230a86c:     private boolean isTopic;
1:230a86c:     private int deliveryMode = DeliveryMode.PERSISTENT;
1:d29ca2a:     private String durableName = "DummyName";
1:d29ca2a:     private String clientID = getClass().getName();
1:d29ca2a: 
1:230a86c:     /**
1:230a86c:      * Creates a connection factory.
1:230a86c:      * 
1:230a86c:      * @see org.apache.activemq.test.JmsResourceProvider#createConnectionFactory()
1:230a86c:      */
1:230a86c:     public ConnectionFactory createConnectionFactory() throws Exception {
1:230a86c:         return new ActiveMQConnectionFactory(serverUri);
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Creates a connection.
1:230a86c:      * 
1:230a86c:      * @see org.apache.activemq.test.JmsResourceProvider#createConnection(javax.jms.ConnectionFactory)
1:230a86c:      */
1:230a86c:     public Connection createConnection(ConnectionFactory cf) throws JMSException {
1:d29ca2a:         Connection connection = cf.createConnection();
1:230a86c:         if (getClientID() != null) {
1:d29ca2a:             connection.setClientID(getClientID());
16:d29ca2a:         }
1:d29ca2a:         return connection;
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * @see org.apache.activemq.test.JmsResourceProvider#createSession(javax.jms.Connection)
1:230a86c:      */
1:230a86c:     public Session createSession(Connection conn) throws JMSException {
1:230a86c:         return conn.createSession(transacted, ackMode);
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * @see org.apache.activemq.test.JmsResourceProvider#createConsumer(javax.jms.Session,
1:230a86c:      *      javax.jms.Destination)
1:230a86c:      */
1:230a86c:     public MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {
1:d29ca2a:         if (isDurableSubscriber()) {
1:230a86c:             return session.createDurableSubscriber((Topic)destination, durableName);
1:d29ca2a:         }
1:230a86c:         return session.createConsumer(destination);
1:230a86c:     }
1:d29ca2a: 
1:230a86c:     /**
1:230a86c:      * Creates a connection for a consumer.
1:230a86c:      * 
1:230a86c:      * @param ssp - ServerSessionPool
1:230a86c:      * @return ConnectionConsumer
1:230a86c:      */
1:230a86c:     public ConnectionConsumer createConnectionConsumer(Connection connection, Destination destination, ServerSessionPool ssp) throws JMSException {
1:230a86c:         return connection.createConnectionConsumer(destination, null, ssp, 1);
1:230a86c:     }
1:d29ca2a: 
1:230a86c:     /**
1:230a86c:      * Creates a producer.
1:230a86c:      * 
1:230a86c:      * @see org.apache.activemq.test.JmsResourceProvider#createProducer(javax.jms.Session,
1:230a86c:      *      javax.jms.Destination)
1:230a86c:      */
1:230a86c:     public MessageProducer createProducer(Session session, Destination destination) throws JMSException {
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a:         producer.setDeliveryMode(deliveryMode);
1:d29ca2a:         return producer;
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Creates a destination, which can either a topic or a queue.
1:230a86c:      * 
1:230a86c:      * @see org.apache.activemq.test.JmsResourceProvider#createDestination(javax.jms.Session,
1:230a86c:      *      java.lang.String)
1:230a86c:      */
1:230a86c:     public Destination createDestination(Session session, String name) throws JMSException {
1:fc00993:         if (isTopic) {
1:230a86c:             return session.createTopic("TOPIC." + name);
1:fc00993:         } else {
1:230a86c:             return session.createQueue("QUEUE." + name);
1:fc00993:         }
1:230a86c:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns true if the subscriber is durable.
1:d29ca2a:      * 
1:d29ca2a:      * @return isDurableSubscriber
1:d29ca2a:      */
1:d29ca2a:     public boolean isDurableSubscriber() {
1:230a86c:         return isTopic && durableName != null;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     /**
1:230a86c:      * Returns the acknowledgement mode.
1:230a86c:      * 
1:230a86c:      * @return Returns the ackMode.
1:230a86c:      */
1:230a86c:     public int getAckMode() {
1:230a86c:         return ackMode;
1:230a86c:     }
1:d29ca2a: 
1:230a86c:     /**
1:230a86c:      * Sets the acnknowledgement mode.
1:230a86c:      * 
1:230a86c:      * @param ackMode The ackMode to set.
1:230a86c:      */
1:230a86c:     public void setAckMode(int ackMode) {
1:230a86c:         this.ackMode = ackMode;
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Returns true if the destination is a topic, false if the destination is a
1:230a86c:      * queue.
1:230a86c:      * 
1:230a86c:      * @return Returns the isTopic.
1:230a86c:      */
1:230a86c:     public boolean isTopic() {
1:230a86c:         return isTopic;
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * @param isTopic The isTopic to set.
1:230a86c:      */
1:230a86c:     public void setTopic(boolean isTopic) {
1:230a86c:         this.isTopic = isTopic;
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Returns the server URI.
1:230a86c:      * 
1:230a86c:      * @return Returns the serverUri.
1:230a86c:      */
1:230a86c:     public String getServerUri() {
1:230a86c:         return serverUri;
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Sets the server URI.
1:230a86c:      * 
1:230a86c:      * @param serverUri - the server URI to set.
1:230a86c:      */
1:230a86c:     public void setServerUri(String serverUri) {
1:230a86c:         this.serverUri = serverUri;
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Return true if the session is transacted.
1:230a86c:      * 
1:230a86c:      * @return Returns the transacted.
1:230a86c:      */
1:230a86c:     public boolean isTransacted() {
1:230a86c:         return transacted;
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Sets the session to be transacted.
1:230a86c:      * 
1:230a86c:      * @param transacted
1:230a86c:      */
1:230a86c:     public void setTransacted(boolean transacted) {
1:230a86c:         this.transacted = transacted;
1:1f00a39:         if (transacted) {
1:1f00a39:             setAckMode(Session.SESSION_TRANSACTED);
1:230a86c:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the delivery mode.
1:d29ca2a:      * 
1:230a86c:      * @return deliveryMode
1:d29ca2a:      */
1:d29ca2a:     public int getDeliveryMode() {
1:d29ca2a:         return deliveryMode;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sets the delivery mode.
1:d29ca2a:      * 
1:d29ca2a:      * @param deliveryMode
1:d29ca2a:      */
1:d29ca2a:     public void setDeliveryMode(int deliveryMode) {
1:d29ca2a:         this.deliveryMode = deliveryMode;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the client id.
1:d29ca2a:      * 
1:d29ca2a:      * @return clientID
1:d29ca2a:      */
1:d29ca2a:     public String getClientID() {
1:d29ca2a:         return clientID;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sets the client id.
1:d29ca2a:      * 
1:d29ca2a:      * @param clientID
1:d29ca2a:      */
1:d29ca2a:     public void setClientID(String clientID) {
1:d29ca2a:         this.clientID = clientID;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the durable name of the provider.
1:d29ca2a:      * 
1:d29ca2a:      * @return durableName
1:d29ca2a:      */
1:d29ca2a:     public String getDurableName() {
1:d29ca2a:         return durableName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sets the durable name of the provider.
1:d29ca2a:      * 
1:d29ca2a:      * @param durableName
1:d29ca2a:      */
1:d29ca2a:     public void setDurableName(String durableName) {
1:d29ca2a:         this.durableName = durableName;
1:86cbdfd:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         if (isTopic) {
1:         } else {
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.DeliveryMode;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1:     private String serverUri = "vm://localhost?broker.persistent=false";
1:     private boolean transacted;
1:     private int ackMode = Session.AUTO_ACKNOWLEDGE;
1:     private boolean isTopic;
1:     private int deliveryMode = DeliveryMode.PERSISTENT;
1:     /**
1:      * Creates a connection factory.
1:      * 
1:      * @see org.apache.activemq.test.JmsResourceProvider#createConnectionFactory()
1:      */
1:     public ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(serverUri);
1:     }
1: 
1:     /**
1:      * Creates a connection.
1:      * 
1:      * @see org.apache.activemq.test.JmsResourceProvider#createConnection(javax.jms.ConnectionFactory)
1:      */
1:     public Connection createConnection(ConnectionFactory cf) throws JMSException {
1:         if (getClientID() != null) {
1:     }
1: 
1:     /**
1:      * @see org.apache.activemq.test.JmsResourceProvider#createSession(javax.jms.Connection)
1:      */
1:     public Session createSession(Connection conn) throws JMSException {
1:         return conn.createSession(transacted, ackMode);
1:     }
1: 
1:     /**
1:      * @see org.apache.activemq.test.JmsResourceProvider#createConsumer(javax.jms.Session,
1:      *      javax.jms.Destination)
1:      */
1:     public MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {
1:             return session.createDurableSubscriber((Topic)destination, durableName);
1:         return session.createConsumer(destination);
1:     }
1:     /**
1:      * Creates a connection for a consumer.
1:      * 
1:      * @param ssp - ServerSessionPool
1:      * @return ConnectionConsumer
1:      */
1:     public ConnectionConsumer createConnectionConsumer(Connection connection, Destination destination, ServerSessionPool ssp) throws JMSException {
1:         return connection.createConnectionConsumer(destination, null, ssp, 1);
1:     }
1:     /**
1:      * Creates a producer.
1:      * 
1:      * @see org.apache.activemq.test.JmsResourceProvider#createProducer(javax.jms.Session,
1:      *      javax.jms.Destination)
1:      */
1:     public MessageProducer createProducer(Session session, Destination destination) throws JMSException {
1:     }
1: 
1:     /**
1:      * Creates a destination, which can either a topic or a queue.
1:      * 
1:      * @see org.apache.activemq.test.JmsResourceProvider#createDestination(javax.jms.Session,
1:      *      java.lang.String)
1:      */
1:     public Destination createDestination(Session session, String name) throws JMSException {
0:         if (isTopic)
1:             return session.createTopic("TOPIC." + name);
0:         else
1:             return session.createQueue("QUEUE." + name);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         return isTopic && durableName != null;
1:     /**
1:      * Returns the acknowledgement mode.
1:      * 
1:      * @return Returns the ackMode.
1:      */
1:     public int getAckMode() {
1:         return ackMode;
1:     }
1:     /**
1:      * Sets the acnknowledgement mode.
1:      * 
1:      * @param ackMode The ackMode to set.
1:      */
1:     public void setAckMode(int ackMode) {
1:         this.ackMode = ackMode;
1:     }
1: 
1:     /**
1:      * Returns true if the destination is a topic, false if the destination is a
1:      * queue.
1:      * 
1:      * @return Returns the isTopic.
1:      */
1:     public boolean isTopic() {
1:         return isTopic;
1:     }
1: 
1:     /**
1:      * @param isTopic The isTopic to set.
1:      */
1:     public void setTopic(boolean isTopic) {
1:         this.isTopic = isTopic;
1:     }
1: 
1:     /**
1:      * Returns the server URI.
1:      * 
1:      * @return Returns the serverUri.
1:      */
1:     public String getServerUri() {
1:         return serverUri;
1:     }
1: 
1:     /**
1:      * Sets the server URI.
1:      * 
1:      * @param serverUri - the server URI to set.
1:      */
1:     public void setServerUri(String serverUri) {
1:         this.serverUri = serverUri;
1:     }
1: 
1:     /**
1:      * Return true if the session is transacted.
1:      * 
1:      * @return Returns the transacted.
1:      */
1:     public boolean isTransacted() {
1:         return transacted;
1:     }
1: 
1:     /**
1:      * Sets the session to be transacted.
1:      * 
1:      * @param transacted
1:      */
1:     public void setTransacted(boolean transacted) {
1:         this.transacted = transacted;
1:     }
1:      * @return deliveryMode
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionConsumer;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ServerSessionPool;
1: import javax.jms.Session;
0: import javax.jms.DeliveryMode;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
1: public class JmsResourceProvider {
1: 	
0: 	private String serverUri = "vm://localhost?broker.persistent=false";
0: 	private boolean transacted = false;
0: 	private int ackMode = Session.AUTO_ACKNOWLEDGE;
0: 	private boolean isTopic;
0:     private int deliveryMode=DeliveryMode.PERSISTENT;
1:     private String durableName = "DummyName";
1:     private String clientID = getClass().getName();
1: 
1: 	/**
0: 	 * Creates a connection factory. 
1: 	 * 
0: 	 * @see org.apache.activemq.test.JmsResourceProvider#createConnectionFactory()
1: 	 */
0: 	public ConnectionFactory createConnectionFactory() throws Exception {
0: 		return new ActiveMQConnectionFactory(serverUri);
1: 	}
1: 	
1: 	/**
0: 	 * Creates a connection.
1: 	 * 
0: 	 * @see org.apache.activemq.test.JmsResourceProvider#createConnection(javax.jms.ConnectionFactory)
1: 	 */
0: 	public Connection createConnection(ConnectionFactory cf) throws JMSException {
1:         Connection connection = cf.createConnection();
0:         if (getClientID()!=null) {
1:             connection.setClientID(getClientID());
1:         }
1:         return connection;
1: 	}
1: 	
1: 	/**
0: 	 * @see org.apache.activemq.test.JmsResourceProvider#createSession(javax.jms.Connection)
1: 	 */
0: 	public Session createSession(Connection conn) throws JMSException {
0: 		return conn.createSession(transacted, ackMode);
1: 	}
1: 	
1: 	/**
0: 	 * @see org.apache.activemq.test.JmsResourceProvider#createConsumer(javax.jms.Session,
0: 	 *      javax.jms.Destination)
1: 	 */
0: 	public MessageConsumer createConsumer(Session session,
0: 			Destination destination) throws JMSException {
1:         if (isDurableSubscriber()) {
0:             return session.createDurableSubscriber((Topic) destination, durableName);
1:         }
0: 		return session.createConsumer(destination);
1: 	}
1: 
1: 	/**
0: 	 * Creates a connection for a consumer.
1: 	 * 
0: 	 * @param ssp - ServerSessionPool
0: 	 * @return ConnectionConsumer
1: 	 */
0: 	public ConnectionConsumer createConnectionConsumer(Connection connection, Destination destination, ServerSessionPool ssp) throws JMSException {
0: 		return connection.createConnectionConsumer(destination,null,ssp,1);
1: 	}
1: 
1: 	/**
0: 	 * Creates a producer. 
1: 	 * 
0: 	 * @see org.apache.activemq.test.JmsResourceProvider#createProducer(javax.jms.Session,
0: 	 *      javax.jms.Destination)
1: 	 */
0: 	public MessageProducer createProducer(Session session,
0: 			Destination destination) throws JMSException {
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1:         return producer;
1: 	}
1: 	
1: 	/**
0: 	 * Creates a destination, which can either a topic or a queue. 
1: 	 * 
0: 	 * @see org.apache.activemq.test.JmsResourceProvider#createDestination(javax.jms.Session,
0: 	 *      java.lang.String)
1: 	 */
0: 	public Destination createDestination(Session session, String name)
0: 			throws JMSException {
0: 		if( isTopic )
0: 			return session.createTopic("TOPIC."+name);
0: 		else 
0: 			return session.createQueue("QUEUE."+name);
1: 	}
1: 
1:     /**
1:      * Returns true if the subscriber is durable.
1:      * 
1:      * @return isDurableSubscriber
1:      */
1:     public boolean isDurableSubscriber() {
0:         return isTopic && durableName!=null;
1:     }
1: 
1: 	/**
0: 	 * Returns the acknowledgement mode. 
1: 	 * 
0: 	 * @return Returns the ackMode.
1: 	 */
0: 	public int getAckMode() {
0: 		return ackMode;
1: 	}
1: 	
1: 	/**
0: 	 * Sets the acnknowledgement mode. 
1: 	 * 
0: 	 * @param ackMode The ackMode to set.
1: 	 */
0: 	public void setAckMode(int ackMode) {
0: 		this.ackMode = ackMode;
1: 	}
1: 	
1: 	/**
0: 	 * Returns true if the destination is a topic, false if the destination is a queue.
1: 	 * 
0: 	 * @return Returns the isTopic.
1: 	 */
0: 	public boolean isTopic() {
0: 		return isTopic;
1: 	}
1: 	
1: 	/**
0: 	 * @param isTopic The isTopic to set.
1: 	 */
0: 	public void setTopic(boolean isTopic) {
0: 		this.isTopic = isTopic;
1: 	}
1: 	
1: 	/**
0: 	 * Returns the server URI.
1: 	 * 
0: 	 * @return Returns the serverUri.
1: 	 */
0: 	public String getServerUri() {
0: 		return serverUri;
1: 	}
1: 	
1: 	/**
0: 	 * Sets the server URI. 
1: 	 * 
0: 	 * @param serverUri - the server URI to set.
1: 	 */
0: 	public void setServerUri(String serverUri) {
0: 		this.serverUri = serverUri;
1: 	}
1: 	
1: 	/**
0: 	 * Return true if the session is transacted. 
1: 	 * 
0: 	 * @return Returns the transacted.
1: 	 */
0: 	public boolean isTransacted() {
0: 		return transacted;
1: 	}
1: 
1: 	/**
0: 	 * Sets the session to be transacted.  
1: 	 * 
0: 	 * @param transacted
1: 	 */
0: 	public void setTransacted(boolean transacted) {
0: 		this.transacted = transacted;
1: 	}
1: 
1:     /**
1:      * Returns the delivery mode.
1:      * 
0:      * @return deliveryMode 
1:      */
1:     public int getDeliveryMode() {
1:         return deliveryMode;
1:     }
1: 
1:     /**
1:      * Sets the delivery mode.
1:      * 
1:      * @param deliveryMode
1:      */
1:     public void setDeliveryMode(int deliveryMode) {
1:         this.deliveryMode = deliveryMode;
1:     }
1: 
1:     /**
1:      * Returns the client id.
1:      * 
1:      * @return clientID
1:      */
1:     public String getClientID() {
1:         return clientID;
1:     }
1: 
1:     /**
1:      * Sets the client id.
1:      * 
1:      * @param clientID
1:      */
1:     public void setClientID(String clientID) {
1:         this.clientID = clientID;
1:     }
1: 
1:     /**
1:      * Returns the durable name of the provider.
1:      * 
1:      * @return durableName
1:      */
1:     public String getDurableName() {
1:         return durableName;
1:     }
1: 
1:     /**
1:      * Sets the durable name of the provider.
1:      * 
1:      * @param durableName
1:      */
1:     public void setDurableName(String durableName) {
1:         this.durableName = durableName;
1:     }
1: }
author:David Jencks
-------------------------------------------------------------------------------
commit:1f00a39
/////////////////////////////////////////////////////////////////////////
1:         if (transacted) {
1:             setAckMode(Session.SESSION_TRANSACTED);
0:         }
============================================================================