1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authc;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.broker.Connection;
1:f9451e5: import org.apache.activemq.broker.ConnectionContext;
1:f9451e5: import org.apache.activemq.broker.Connector;
1:f9451e5: import org.apache.activemq.broker.region.ConnectionStatistics;
1:f9451e5: import org.apache.activemq.command.Command;
1:f9451e5: import org.apache.activemq.command.ConnectionControl;
1:f9451e5: import org.apache.activemq.command.ConnectionInfo;
1:f9451e5: import org.apache.activemq.command.Response;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectAdapter;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1:f9451e5: import org.apache.shiro.env.DefaultEnvironment;
1:f9451e5: import org.apache.shiro.subject.PrincipalCollection;
1:f9451e5: import org.apache.shiro.subject.SimplePrincipalCollection;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: import org.junit.Before;
1:f9451e5: import org.junit.Test;
1:f9451e5: 
1:f9451e5: import java.io.IOException;
1:f9451e5: 
1:f9451e5: import static org.junit.Assert.*;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class DefaultAuthenticationPolicyTest {
1:f9451e5: 
1:f9451e5:     private DefaultAuthenticationPolicy policy;
1:f9451e5: 
1:f9451e5:     @Before
1:f9451e5:     public void setUp() {
1:f9451e5:         this.policy = new DefaultAuthenticationPolicy();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testVmConnectionAuthenticationRequired() {
1:f9451e5:         boolean required = true;
1:f9451e5:         policy.setVmConnectionAuthenticationRequired(required);
1:f9451e5:         assertEquals(required, policy.isVmConnectionAuthenticationRequired());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testSystemAccountUsername() {
1:f9451e5:         String name = "foo";
1:f9451e5:         policy.setSystemAccountUsername(name);
1:f9451e5:         assertEquals(name, policy.getSystemAccountUsername());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testSystemAccountRealmName() {
1:f9451e5:         String name = "fooRealm";
1:f9451e5:         policy.setSystemAccountRealmName(name);
1:f9451e5:         assertEquals(name, policy.getSystemAccountRealmName());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testAnonymousAllowed() {
1:f9451e5:         boolean allowed = true;
1:f9451e5:         policy.setAnonymousAccessAllowed(allowed);
1:f9451e5:         assertEquals(allowed, policy.isAnonymousAccessAllowed());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testAnonymousAccountUsername() {
1:f9451e5:         String name = "blah";
1:f9451e5:         policy.setAnonymousAccountUsername(name);
1:f9451e5:         assertEquals(name, policy.getAnonymousAccountUsername());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testAnonymousAccountRealmName() {
1:f9451e5:         String name = "blahRealm";
1:f9451e5:         policy.setAnonymousAccountRealmName(name);
1:f9451e5:         assertEquals(name, policy.getAnonymousAccountRealmName());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAnonymousAccount() {
1:f9451e5:         Subject subject = new SubjectAdapter() {
1:f9451e5:             @Override
1:f9451e5:             public PrincipalCollection getPrincipals() {
1:f9451e5:                 return new SimplePrincipalCollection("anonymous", "iniRealm");
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         assertTrue(policy.isAnonymousAccount(subject));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAnonymousAccountWithNullPrincipals() {
1:f9451e5:         assertFalse(policy.isAnonymousAccount(new SubjectAdapter()));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsSystemAccountWithNullPrincipals() {
1:f9451e5:         assertFalse(policy.isSystemAccount(new SubjectAdapter()));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAuthenticationRequiredWhenAlreadyRequired() {
1:f9451e5:         Subject subject = new SubjectAdapter() {
1:f9451e5:             @Override
1:f9451e5:             public boolean isAuthenticated() {
1:f9451e5:                 return true;
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:f9451e5:                 new DefaultEnvironment(), subject);
1:f9451e5: 
1:f9451e5:         assertFalse(policy.isAuthenticationRequired(sc));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAuthenticationRequiredWhenAnonymousAllowedAnonymousSubject() {
1:f9451e5: 
1:f9451e5:         policy.setAnonymousAccessAllowed(true);
1:f9451e5: 
1:f9451e5:         Subject subject = new SubjectAdapter() {
1:f9451e5:             @Override
1:f9451e5:             public PrincipalCollection getPrincipals() {
1:f9451e5:                 return new SimplePrincipalCollection("anonymous", "iniRealm");
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:f9451e5:                 new DefaultEnvironment(), subject);
1:f9451e5: 
1:f9451e5:         assertFalse(policy.isAuthenticationRequired(sc));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAuthenticationRequiredWhenAnonymousAllowedAndNotAnonymousSubject() {
1:f9451e5: 
1:f9451e5:         policy.setAnonymousAccessAllowed(true);
1:f9451e5: 
1:f9451e5:         Subject subject = new SubjectAdapter() {
1:f9451e5:             @Override
1:f9451e5:             public PrincipalCollection getPrincipals() {
1:f9451e5:                 return new SimplePrincipalCollection("system", "iniRealm");
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:f9451e5:                 new DefaultEnvironment(), subject);
1:f9451e5: 
1:f9451e5:         assertFalse(policy.isAuthenticationRequired(sc));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAuthenticationRequiredWhenSystemConnectionAndSystemSubject() {
1:f9451e5: 
1:f9451e5:         Subject subject = new SubjectAdapter() {
1:f9451e5:             @Override
1:f9451e5:             public PrincipalCollection getPrincipals() {
1:f9451e5:                 return new SimplePrincipalCollection("system", "iniRealm");
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:f9451e5:                 new DefaultEnvironment(), subject);
1:f9451e5: 
1:f9451e5:         assertFalse(policy.isAuthenticationRequired(sc));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAuthenticationRequiredWhenSystemConnectionRequiresAuthentication() {
1:f9451e5: 
1:f9451e5:         policy.setVmConnectionAuthenticationRequired(true);
1:f9451e5: 
1:f9451e5:         Subject subject = new SubjectAdapter() {
1:f9451e5:             @Override
1:f9451e5:             public PrincipalCollection getPrincipals() {
1:f9451e5:                 return new SimplePrincipalCollection("system", "iniRealm");
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:f9451e5:                 new DefaultEnvironment(), subject);
1:f9451e5: 
1:f9451e5:         assertTrue(policy.isAuthenticationRequired(sc));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAuthenticationRequiredWhenSystemConnectionDoesNotRequireAuthenticationAndNotSystemAccount() {
1:f9451e5: 
1:f9451e5:         Subject subject = new SubjectAdapter() {
1:f9451e5:             @Override
1:f9451e5:             public PrincipalCollection getPrincipals() {
1:f9451e5:                 return new SimplePrincipalCollection("foo", "iniRealm");
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:f9451e5:                 new DefaultEnvironment(), subject);
1:f9451e5: 
1:f9451e5:         assertTrue(policy.isAuthenticationRequired(sc));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAssumeIdentity() {
1:f9451e5:         policy.setAnonymousAccessAllowed(true);
1:f9451e5:         assertTrue(policy.isAssumeIdentity(null));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIsAssumeIdentityWithSystemConnection() {
1:f9451e5: 
1:f9451e5:         ConnectionContext ctx = new ConnectionContext();
1:f9451e5:         Connection connection = new Connection() {
1:f9451e5:             @Override
1:f9451e5:             public Connector getConnector() {
1:f9451e5:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public void dispatchSync(Command message) {
1:f9451e5:                 //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public void dispatchAsync(Command command) {
1:f9451e5:                 //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public Response service(Command command) {
1:f9451e5:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public void serviceException(Throwable error) {
1:f9451e5:                 //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public boolean isSlow() {
1:f9451e5:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public boolean isBlocked() {
1:f9451e5:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public boolean isConnected() {
1:f9451e5:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public boolean isActive() {
1:f9451e5:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public int getDispatchQueueSize() {
1:f9451e5:                 return 0;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public ConnectionStatistics getStatistics() {
1:f9451e5:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public boolean isManageable() {
1:f9451e5:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public String getRemoteAddress() {
1:f9451e5:                 return "vm://localhost";
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public void serviceExceptionAsync(IOException e) {
1:f9451e5:                 //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public String getConnectionId() {
1:f9451e5:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public boolean isNetworkConnection() {
1:f9451e5:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public boolean isFaultTolerantConnection() {
1:f9451e5:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public void updateClient(ConnectionControl control) {
1:f9451e5:                 //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public void start() throws Exception {
1:f9451e5:                 //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public void stop() throws Exception {
1:f9451e5:                 //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public int getActiveTransactionCount() {
1:f9451e5:                 return 0;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5: 
1:f9451e5:             @Override
1:f9451e5:             public Long getOldestActiveTransactionDuration() {
1:f9451e5:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         ctx.setConnection(connection);
1:f9451e5: 
1:f9451e5:         SubjectConnectionReference sc = new SubjectConnectionReference(ctx, new ConnectionInfo(),
1:f9451e5:                 new DefaultEnvironment(), new SubjectAdapter());
1:f9451e5: 
1:f9451e5:         assertTrue(policy.isAssumeIdentity(sc));
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authc;
1: 
1: import org.apache.activemq.broker.Connection;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.Connector;
1: import org.apache.activemq.broker.region.ConnectionStatistics;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.ConnectionControl;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.shiro.subject.SubjectAdapter;
1: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1: import org.apache.shiro.env.DefaultEnvironment;
1: import org.apache.shiro.subject.PrincipalCollection;
1: import org.apache.shiro.subject.SimplePrincipalCollection;
1: import org.apache.shiro.subject.Subject;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.io.IOException;
1: 
1: import static org.junit.Assert.*;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class DefaultAuthenticationPolicyTest {
1: 
1:     private DefaultAuthenticationPolicy policy;
1: 
1:     @Before
1:     public void setUp() {
1:         this.policy = new DefaultAuthenticationPolicy();
1:     }
1: 
1:     @Test
1:     public void testVmConnectionAuthenticationRequired() {
1:         boolean required = true;
1:         policy.setVmConnectionAuthenticationRequired(required);
1:         assertEquals(required, policy.isVmConnectionAuthenticationRequired());
1:     }
1: 
1:     @Test
1:     public void testSystemAccountUsername() {
1:         String name = "foo";
1:         policy.setSystemAccountUsername(name);
1:         assertEquals(name, policy.getSystemAccountUsername());
1:     }
1: 
1:     @Test
1:     public void testSystemAccountRealmName() {
1:         String name = "fooRealm";
1:         policy.setSystemAccountRealmName(name);
1:         assertEquals(name, policy.getSystemAccountRealmName());
1:     }
1: 
1:     @Test
1:     public void testAnonymousAllowed() {
1:         boolean allowed = true;
1:         policy.setAnonymousAccessAllowed(allowed);
1:         assertEquals(allowed, policy.isAnonymousAccessAllowed());
1:     }
1: 
1:     @Test
1:     public void testAnonymousAccountUsername() {
1:         String name = "blah";
1:         policy.setAnonymousAccountUsername(name);
1:         assertEquals(name, policy.getAnonymousAccountUsername());
1:     }
1: 
1:     @Test
1:     public void testAnonymousAccountRealmName() {
1:         String name = "blahRealm";
1:         policy.setAnonymousAccountRealmName(name);
1:         assertEquals(name, policy.getAnonymousAccountRealmName());
1:     }
1: 
1:     @Test
1:     public void testIsAnonymousAccount() {
1:         Subject subject = new SubjectAdapter() {
1:             @Override
1:             public PrincipalCollection getPrincipals() {
1:                 return new SimplePrincipalCollection("anonymous", "iniRealm");
1:             }
1:         };
1:         assertTrue(policy.isAnonymousAccount(subject));
1:     }
1: 
1:     @Test
1:     public void testIsAnonymousAccountWithNullPrincipals() {
1:         assertFalse(policy.isAnonymousAccount(new SubjectAdapter()));
1:     }
1: 
1:     @Test
1:     public void testIsSystemAccountWithNullPrincipals() {
1:         assertFalse(policy.isSystemAccount(new SubjectAdapter()));
1:     }
1: 
1:     @Test
1:     public void testIsAuthenticationRequiredWhenAlreadyRequired() {
1:         Subject subject = new SubjectAdapter() {
1:             @Override
1:             public boolean isAuthenticated() {
1:                 return true;
1:             }
1:         };
1:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:                 new DefaultEnvironment(), subject);
1: 
1:         assertFalse(policy.isAuthenticationRequired(sc));
1:     }
1: 
1:     @Test
1:     public void testIsAuthenticationRequiredWhenAnonymousAllowedAnonymousSubject() {
1: 
1:         policy.setAnonymousAccessAllowed(true);
1: 
1:         Subject subject = new SubjectAdapter() {
1:             @Override
1:             public PrincipalCollection getPrincipals() {
1:                 return new SimplePrincipalCollection("anonymous", "iniRealm");
1:             }
1:         };
1:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:                 new DefaultEnvironment(), subject);
1: 
1:         assertFalse(policy.isAuthenticationRequired(sc));
1:     }
1: 
1:     @Test
1:     public void testIsAuthenticationRequiredWhenAnonymousAllowedAndNotAnonymousSubject() {
1: 
1:         policy.setAnonymousAccessAllowed(true);
1: 
1:         Subject subject = new SubjectAdapter() {
1:             @Override
1:             public PrincipalCollection getPrincipals() {
1:                 return new SimplePrincipalCollection("system", "iniRealm");
1:             }
1:         };
1:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:                 new DefaultEnvironment(), subject);
1: 
1:         assertFalse(policy.isAuthenticationRequired(sc));
1:     }
1: 
1:     @Test
1:     public void testIsAuthenticationRequiredWhenSystemConnectionAndSystemSubject() {
1: 
1:         Subject subject = new SubjectAdapter() {
1:             @Override
1:             public PrincipalCollection getPrincipals() {
1:                 return new SimplePrincipalCollection("system", "iniRealm");
1:             }
1:         };
1:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:                 new DefaultEnvironment(), subject);
1: 
1:         assertFalse(policy.isAuthenticationRequired(sc));
1:     }
1: 
1:     @Test
1:     public void testIsAuthenticationRequiredWhenSystemConnectionRequiresAuthentication() {
1: 
1:         policy.setVmConnectionAuthenticationRequired(true);
1: 
1:         Subject subject = new SubjectAdapter() {
1:             @Override
1:             public PrincipalCollection getPrincipals() {
1:                 return new SimplePrincipalCollection("system", "iniRealm");
1:             }
1:         };
1:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:                 new DefaultEnvironment(), subject);
1: 
1:         assertTrue(policy.isAuthenticationRequired(sc));
1:     }
1: 
1:     @Test
1:     public void testIsAuthenticationRequiredWhenSystemConnectionDoesNotRequireAuthenticationAndNotSystemAccount() {
1: 
1:         Subject subject = new SubjectAdapter() {
1:             @Override
1:             public PrincipalCollection getPrincipals() {
1:                 return new SimplePrincipalCollection("foo", "iniRealm");
1:             }
1:         };
1:         SubjectConnectionReference sc = new SubjectConnectionReference(new ConnectionContext(), new ConnectionInfo(),
1:                 new DefaultEnvironment(), subject);
1: 
1:         assertTrue(policy.isAuthenticationRequired(sc));
1:     }
1: 
1:     @Test
1:     public void testIsAssumeIdentity() {
1:         policy.setAnonymousAccessAllowed(true);
1:         assertTrue(policy.isAssumeIdentity(null));
1:     }
1: 
1:     @Test
1:     public void testIsAssumeIdentityWithSystemConnection() {
1: 
1:         ConnectionContext ctx = new ConnectionContext();
1:         Connection connection = new Connection() {
1:             @Override
1:             public Connector getConnector() {
1:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public void dispatchSync(Command message) {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public void dispatchAsync(Command command) {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public Response service(Command command) {
1:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public void serviceException(Throwable error) {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public boolean isSlow() {
1:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public boolean isBlocked() {
1:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public boolean isConnected() {
1:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public boolean isActive() {
1:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public int getDispatchQueueSize() {
1:                 return 0;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public ConnectionStatistics getStatistics() {
1:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public boolean isManageable() {
1:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public String getRemoteAddress() {
1:                 return "vm://localhost";
1:             }
1: 
1:             @Override
1:             public void serviceExceptionAsync(IOException e) {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public String getConnectionId() {
1:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public boolean isNetworkConnection() {
1:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public boolean isFaultTolerantConnection() {
1:                 return false;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public void updateClient(ConnectionControl control) {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public void start() throws Exception {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public void stop() throws Exception {
1:                 //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public int getActiveTransactionCount() {
1:                 return 0;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1: 
1:             @Override
1:             public Long getOldestActiveTransactionDuration() {
1:                 return null;  //To change body of implemented methods use File | Settings | File Templates.
1:             }
1:         };
1: 
1:         ctx.setConnection(connection);
1: 
1:         SubjectConnectionReference sc = new SubjectConnectionReference(ctx, new ConnectionInfo(),
1:                 new DefaultEnvironment(), new SubjectAdapter());
1: 
1:         assertTrue(policy.isAssumeIdentity(sc));
1:     }
1: }
============================================================================