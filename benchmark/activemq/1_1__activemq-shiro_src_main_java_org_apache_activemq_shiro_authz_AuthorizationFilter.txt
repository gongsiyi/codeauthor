1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authz;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.broker.ConnectionContext;
1:f9451e5: import org.apache.activemq.broker.ProducerBrokerExchange;
1:f9451e5: import org.apache.activemq.broker.region.Destination;
1:f9451e5: import org.apache.activemq.broker.region.Subscription;
1:f9451e5: import org.apache.activemq.command.ActiveMQDestination;
1:f9451e5: import org.apache.activemq.command.ConsumerInfo;
1:f9451e5: import org.apache.activemq.command.DestinationInfo;
1:f9451e5: import org.apache.activemq.command.Message;
1:f9451e5: import org.apache.activemq.command.ProducerInfo;
1:f9451e5: import org.apache.activemq.security.SecurityContext;
1:f9451e5: import org.apache.activemq.shiro.env.EnvironmentFilter;
1:f9451e5: import org.apache.activemq.shiro.subject.ConnectionSubjectResolver;
1:f9451e5: import org.apache.shiro.authz.Permission;
1:f9451e5: import org.apache.shiro.authz.UnauthorizedException;
1:f9451e5: import org.apache.shiro.subject.PrincipalCollection;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: 
1:f9451e5: import java.util.Collection;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * The {@code AuthorizationFilter} asserts that actions are allowed to execute first before they are actually
1:f9451e5:  * executed.  Such actions include creating, removing, reading from and writing to destinations.
1:f9451e5:  * <p/>
1:f9451e5:  * This implementation is strictly permission-based, allowing for the finest-grained security policies possible.
1:f9451e5:  * Whenever a {@link Subject} associated with a connection attempts to perform an {@link org.apache.activemq.shiro.authz.Action} (such as creating a
1:f9451e5:  * destination, or reading from a queue, etc), one or more {@link Permission}s representing that {@code action} are
1:f9451e5:  * checked.
1:f9451e5:  * <p/>
1:f9451e5:  * If the {@code Subject}{@link Subject#isPermitted(org.apache.shiro.authz.Permission) isPermitted} to perform the
1:f9451e5:  * {@code action}, the action is allowed to execute and the broker filter chain executes uninterrupted.
1:f9451e5:  * <p/>
1:f9451e5:  * However, if the {@code Subject} is not permitted to perform the action, an {@link UnauthorizedException} will be
1:f9451e5:  * thrown, preventing the filter chain from executing that action.
1:f9451e5:  * <h2>ActionPermissionResolver</h2>
1:f9451e5:  * The attempted {@code Action} is guarded by one or more {@link Permission}s as indicated by a configurable
1:f9451e5:  * {@link #setActionPermissionResolver(org.apache.activemq.shiro.authz.ActionPermissionResolver) actionPermissionResolver}.  The
1:f9451e5:  * {@code actionPermissionResolver} indicates which permissions must be granted to the connection {@code Subject} in
1:f9451e5:  * order for the action to execute.
1:f9451e5:  * <p/>
1:f9451e5:  * The default {@code actionPermissionResolver} instance is a
1:f9451e5:  * {@link org.apache.activemq.shiro.authz.DestinationActionPermissionResolver DestinationActionPermissionResolver}, which indicates which permissions
1:f9451e5:  * are required to perform any action on a particular destination.  Those familiar with Shiro's
1:f9451e5:  * {@link org.apache.shiro.authz.permission.WildcardPermission WildcardPermission} syntax will find the
1:f9451e5:  * {@code DestinationActionPermissionResolver}'s
1:f9451e5:  * {@link org.apache.activemq.shiro.authz.DestinationActionPermissionResolver#createPermissionString createPermissionString} method
1:f9451e5:  * documentation valuable for understanding how destination actions are represented as permissions.
1:f9451e5:  *
1:f9451e5:  * @see org.apache.activemq.shiro.authz.ActionPermissionResolver
1:f9451e5:  * @see org.apache.activemq.shiro.authz.DestinationActionPermissionResolver
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class AuthorizationFilter extends EnvironmentFilter {
1:f9451e5: 
1:f9451e5:     private ActionPermissionResolver actionPermissionResolver;
1:f9451e5: 
1:f9451e5:     public AuthorizationFilter() {
1:f9451e5:         this.actionPermissionResolver = new DestinationActionPermissionResolver();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Returns the {@code ActionPermissionResolver} used to indicate which permissions are required to be granted to
1:f9451e5:      * a {@link Subject} to perform a particular destination {@link org.apache.activemq.shiro.authz.Action}, (such as creating a
1:f9451e5:      * destination, or reading from a queue, etc).  The default instance is a
1:f9451e5:      * {@link DestinationActionPermissionResolver}.
1:f9451e5:      *
1:f9451e5:      * @return the {@code ActionPermissionResolver} used to indicate which permissions are required to be granted to
1:f9451e5:      *         a {@link Subject} to perform a particular destination {@link org.apache.activemq.shiro.authz.Action}, (such as creating a
1:f9451e5:      *         destination, or reading from a queue, etc).
1:f9451e5:      */
1:f9451e5:     public ActionPermissionResolver getActionPermissionResolver() {
1:f9451e5:         return actionPermissionResolver;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Sets the {@code ActionPermissionResolver} used to indicate which permissions are required to be granted to
1:f9451e5:      * a {@link Subject} to perform a particular destination {@link org.apache.activemq.shiro.authz.Action}, (such as creating a
1:f9451e5:      * destination, or reading from a queue, etc).  Unless overridden by this method, the default instance is a
1:f9451e5:      * {@link DestinationActionPermissionResolver}.
1:f9451e5:      *
1:f9451e5:      * @param actionPermissionResolver the {@code ActionPermissionResolver} used to indicate which permissions are
1:f9451e5:      *                                 required to be granted to a {@link Subject} to perform a particular destination
1:f9451e5:      *                                 {@link org.apache.activemq.shiro.authz.Action}, (such as creating a destination, or reading from a queue, etc).
1:f9451e5:      */
1:f9451e5:     public void setActionPermissionResolver(ActionPermissionResolver actionPermissionResolver) {
1:f9451e5:         this.actionPermissionResolver = actionPermissionResolver;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Returns the {@code Subject} associated with the specified connection using a
1:f9451e5:      * {@link org.apache.activemq.shiro.subject.ConnectionSubjectResolver}.
1:f9451e5:      *
1:f9451e5:      * @param ctx the connection context
1:f9451e5:      * @return the {@code Subject} associated with the specified connection.
1:f9451e5:      */
1:f9451e5:     protected Subject getSubject(ConnectionContext ctx) {
1:f9451e5:         return new ConnectionSubjectResolver(ctx).getSubject();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected String toString(Subject subject) {
1:f9451e5:         PrincipalCollection pc = subject.getPrincipals();
1:f9451e5:         if (pc != null && !pc.isEmpty()) {
1:f9451e5:             return "[" + pc.toString() + "] ";
1:f9451e5:         }
1:f9451e5:         return "";
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void assertAuthorized(DestinationAction action) {
1:f9451e5:         assertAuthorized(action, action.getVerb());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     //ActiveMQ internals will create a ConnectionContext with a SecurityContext that is not
1:f9451e5:     //Shiro specific.  We need to allow actions for internal system operations:
1:f9451e5:     protected boolean isSystemBroker(DestinationAction action) {
1:f9451e5:         ConnectionContext context = action.getConnectionContext();
1:f9451e5:         SecurityContext securityContext = context.getSecurityContext();
1:f9451e5:         return securityContext != null && securityContext.isBrokerContext();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void assertAuthorized(DestinationAction action, String verbText) {
1:f9451e5:         if (!isEnabled() || isSystemBroker(action)) {
1:f9451e5:             return;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         final Subject subject = getSubject(action.getConnectionContext());
1:f9451e5: 
1:f9451e5:         Collection<Permission> perms = this.actionPermissionResolver.getPermissions(action);
1:f9451e5: 
1:f9451e5:         if (!subject.isPermittedAll(perms)) {
1:f9451e5:             String msg = createUnauthorizedMessage(subject, action, verbText);
1:f9451e5:             throw new UnauthorizedException(msg);
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected String createUnauthorizedMessage(Subject subject, DestinationAction action, String verbDisplayText) {
1:f9451e5:         return "Subject " + toString(subject) + "is not authorized to " + verbDisplayText + " destination: " + action.getDestination();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:f9451e5: 
1:f9451e5:         DestinationAction action = new DestinationAction(context, info.getDestination(), "create");
1:f9451e5:         assertAuthorized(action);
1:f9451e5: 
1:f9451e5:         super.addDestinationInfo(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean create) throws Exception {
1:f9451e5: 
1:f9451e5:         DestinationAction action = new DestinationAction(context, destination, "create");
1:f9451e5:         assertAuthorized(action);
1:f9451e5: 
1:f9451e5:         return super.addDestination(context, destination, create);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:f9451e5: 
1:f9451e5:         DestinationAction action = new DestinationAction(context, destination, "remove");
1:f9451e5:         assertAuthorized(action);
1:f9451e5: 
1:f9451e5:         super.removeDestination(context, destination, timeout);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:f9451e5: 
1:f9451e5:         DestinationAction action = new DestinationAction(context, info.getDestination(), "remove");
1:f9451e5:         assertAuthorized(action);
1:f9451e5: 
1:f9451e5:         super.removeDestinationInfo(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:f9451e5: 
1:f9451e5:         //Unlike when adding a producer, consumers must specify the destination at creation time, so we can rely on
1:f9451e5:         //a destination being available to perform the authz check:
1:f9451e5:         DestinationAction action = new DestinationAction(context, info.getDestination(), "read");
1:f9451e5:         assertAuthorized(action, "read from");
1:f9451e5: 
1:f9451e5:         return super.addConsumer(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:f9451e5: 
1:f9451e5:         // JMS allows producers to be created without first specifying a destination.  In these cases, every send
1:f9451e5:         // operation must specify a destination.  Because of this, we only authorize 'addProducer' if a destination is
1:f9451e5:         // specified. If not specified, the authz check in the 'send' method below will ensure authorization.
1:f9451e5:         if (info.getDestination() != null) {
1:f9451e5:             DestinationAction action = new DestinationAction(context, info.getDestination(), "write");
1:f9451e5:             assertAuthorized(action, "write to");
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         super.addProducer(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void send(ProducerBrokerExchange exchange, Message message) throws Exception {
1:f9451e5: 
1:f9451e5:         DestinationAction action = new DestinationAction(exchange.getConnectionContext(), message.getDestination(), "write");
1:f9451e5:         assertAuthorized(action, "write to");
1:f9451e5: 
1:f9451e5:         super.send(exchange, message);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authz;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.DestinationInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.security.SecurityContext;
1: import org.apache.activemq.shiro.env.EnvironmentFilter;
1: import org.apache.activemq.shiro.subject.ConnectionSubjectResolver;
1: import org.apache.shiro.authz.Permission;
1: import org.apache.shiro.authz.UnauthorizedException;
1: import org.apache.shiro.subject.PrincipalCollection;
1: import org.apache.shiro.subject.Subject;
1: 
1: import java.util.Collection;
1: 
1: /**
1:  * The {@code AuthorizationFilter} asserts that actions are allowed to execute first before they are actually
1:  * executed.  Such actions include creating, removing, reading from and writing to destinations.
1:  * <p/>
1:  * This implementation is strictly permission-based, allowing for the finest-grained security policies possible.
1:  * Whenever a {@link Subject} associated with a connection attempts to perform an {@link org.apache.activemq.shiro.authz.Action} (such as creating a
1:  * destination, or reading from a queue, etc), one or more {@link Permission}s representing that {@code action} are
1:  * checked.
1:  * <p/>
1:  * If the {@code Subject}{@link Subject#isPermitted(org.apache.shiro.authz.Permission) isPermitted} to perform the
1:  * {@code action}, the action is allowed to execute and the broker filter chain executes uninterrupted.
1:  * <p/>
1:  * However, if the {@code Subject} is not permitted to perform the action, an {@link UnauthorizedException} will be
1:  * thrown, preventing the filter chain from executing that action.
1:  * <h2>ActionPermissionResolver</h2>
1:  * The attempted {@code Action} is guarded by one or more {@link Permission}s as indicated by a configurable
1:  * {@link #setActionPermissionResolver(org.apache.activemq.shiro.authz.ActionPermissionResolver) actionPermissionResolver}.  The
1:  * {@code actionPermissionResolver} indicates which permissions must be granted to the connection {@code Subject} in
1:  * order for the action to execute.
1:  * <p/>
1:  * The default {@code actionPermissionResolver} instance is a
1:  * {@link org.apache.activemq.shiro.authz.DestinationActionPermissionResolver DestinationActionPermissionResolver}, which indicates which permissions
1:  * are required to perform any action on a particular destination.  Those familiar with Shiro's
1:  * {@link org.apache.shiro.authz.permission.WildcardPermission WildcardPermission} syntax will find the
1:  * {@code DestinationActionPermissionResolver}'s
1:  * {@link org.apache.activemq.shiro.authz.DestinationActionPermissionResolver#createPermissionString createPermissionString} method
1:  * documentation valuable for understanding how destination actions are represented as permissions.
1:  *
1:  * @see org.apache.activemq.shiro.authz.ActionPermissionResolver
1:  * @see org.apache.activemq.shiro.authz.DestinationActionPermissionResolver
1:  * @since 5.10.0
1:  */
1: public class AuthorizationFilter extends EnvironmentFilter {
1: 
1:     private ActionPermissionResolver actionPermissionResolver;
1: 
1:     public AuthorizationFilter() {
1:         this.actionPermissionResolver = new DestinationActionPermissionResolver();
1:     }
1: 
1:     /**
1:      * Returns the {@code ActionPermissionResolver} used to indicate which permissions are required to be granted to
1:      * a {@link Subject} to perform a particular destination {@link org.apache.activemq.shiro.authz.Action}, (such as creating a
1:      * destination, or reading from a queue, etc).  The default instance is a
1:      * {@link DestinationActionPermissionResolver}.
1:      *
1:      * @return the {@code ActionPermissionResolver} used to indicate which permissions are required to be granted to
1:      *         a {@link Subject} to perform a particular destination {@link org.apache.activemq.shiro.authz.Action}, (such as creating a
1:      *         destination, or reading from a queue, etc).
1:      */
1:     public ActionPermissionResolver getActionPermissionResolver() {
1:         return actionPermissionResolver;
1:     }
1: 
1:     /**
1:      * Sets the {@code ActionPermissionResolver} used to indicate which permissions are required to be granted to
1:      * a {@link Subject} to perform a particular destination {@link org.apache.activemq.shiro.authz.Action}, (such as creating a
1:      * destination, or reading from a queue, etc).  Unless overridden by this method, the default instance is a
1:      * {@link DestinationActionPermissionResolver}.
1:      *
1:      * @param actionPermissionResolver the {@code ActionPermissionResolver} used to indicate which permissions are
1:      *                                 required to be granted to a {@link Subject} to perform a particular destination
1:      *                                 {@link org.apache.activemq.shiro.authz.Action}, (such as creating a destination, or reading from a queue, etc).
1:      */
1:     public void setActionPermissionResolver(ActionPermissionResolver actionPermissionResolver) {
1:         this.actionPermissionResolver = actionPermissionResolver;
1:     }
1: 
1:     /**
1:      * Returns the {@code Subject} associated with the specified connection using a
1:      * {@link org.apache.activemq.shiro.subject.ConnectionSubjectResolver}.
1:      *
1:      * @param ctx the connection context
1:      * @return the {@code Subject} associated with the specified connection.
1:      */
1:     protected Subject getSubject(ConnectionContext ctx) {
1:         return new ConnectionSubjectResolver(ctx).getSubject();
1:     }
1: 
1:     protected String toString(Subject subject) {
1:         PrincipalCollection pc = subject.getPrincipals();
1:         if (pc != null && !pc.isEmpty()) {
1:             return "[" + pc.toString() + "] ";
1:         }
1:         return "";
1:     }
1: 
1:     protected void assertAuthorized(DestinationAction action) {
1:         assertAuthorized(action, action.getVerb());
1:     }
1: 
1:     //ActiveMQ internals will create a ConnectionContext with a SecurityContext that is not
1:     //Shiro specific.  We need to allow actions for internal system operations:
1:     protected boolean isSystemBroker(DestinationAction action) {
1:         ConnectionContext context = action.getConnectionContext();
1:         SecurityContext securityContext = context.getSecurityContext();
1:         return securityContext != null && securityContext.isBrokerContext();
1:     }
1: 
1:     protected void assertAuthorized(DestinationAction action, String verbText) {
1:         if (!isEnabled() || isSystemBroker(action)) {
1:             return;
1:         }
1: 
1:         final Subject subject = getSubject(action.getConnectionContext());
1: 
1:         Collection<Permission> perms = this.actionPermissionResolver.getPermissions(action);
1: 
1:         if (!subject.isPermittedAll(perms)) {
1:             String msg = createUnauthorizedMessage(subject, action, verbText);
1:             throw new UnauthorizedException(msg);
1:         }
1:     }
1: 
1:     protected String createUnauthorizedMessage(Subject subject, DestinationAction action, String verbDisplayText) {
1:         return "Subject " + toString(subject) + "is not authorized to " + verbDisplayText + " destination: " + action.getDestination();
1:     }
1: 
1:     @Override
1:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1: 
1:         DestinationAction action = new DestinationAction(context, info.getDestination(), "create");
1:         assertAuthorized(action);
1: 
1:         super.addDestinationInfo(context, info);
1:     }
1: 
1:     @Override
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean create) throws Exception {
1: 
1:         DestinationAction action = new DestinationAction(context, destination, "create");
1:         assertAuthorized(action);
1: 
1:         return super.addDestination(context, destination, create);
1:     }
1: 
1:     @Override
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1: 
1:         DestinationAction action = new DestinationAction(context, destination, "remove");
1:         assertAuthorized(action);
1: 
1:         super.removeDestination(context, destination, timeout);
1:     }
1: 
1:     @Override
1:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1: 
1:         DestinationAction action = new DestinationAction(context, info.getDestination(), "remove");
1:         assertAuthorized(action);
1: 
1:         super.removeDestinationInfo(context, info);
1:     }
1: 
1:     @Override
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1: 
1:         //Unlike when adding a producer, consumers must specify the destination at creation time, so we can rely on
1:         //a destination being available to perform the authz check:
1:         DestinationAction action = new DestinationAction(context, info.getDestination(), "read");
1:         assertAuthorized(action, "read from");
1: 
1:         return super.addConsumer(context, info);
1:     }
1: 
1:     @Override
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1: 
1:         // JMS allows producers to be created without first specifying a destination.  In these cases, every send
1:         // operation must specify a destination.  Because of this, we only authorize 'addProducer' if a destination is
1:         // specified. If not specified, the authz check in the 'send' method below will ensure authorization.
1:         if (info.getDestination() != null) {
1:             DestinationAction action = new DestinationAction(context, info.getDestination(), "write");
1:             assertAuthorized(action, "write to");
1:         }
1: 
1:         super.addProducer(context, info);
1:     }
1: 
1:     @Override
1:     public void send(ProducerBrokerExchange exchange, Message message) throws Exception {
1: 
1:         DestinationAction action = new DestinationAction(exchange.getConnectionContext(), message.getDestination(), "write");
1:         assertAuthorized(action, "write to");
1: 
1:         super.send(exchange, message);
1:     }
1: 
1: }
============================================================================