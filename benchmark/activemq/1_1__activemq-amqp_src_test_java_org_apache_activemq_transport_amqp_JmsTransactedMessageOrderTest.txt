1:e02c1a1: /*
1:e02c1a1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e02c1a1:  * contributor license agreements.  See the NOTICE file distributed with
1:e02c1a1:  * this work for additional information regarding copyright ownership.
1:e02c1a1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e02c1a1:  * (the "License"); you may not use this file except in compliance with
1:e02c1a1:  * the License.  You may obtain a copy of the License at
1:e02c1a1:  *
1:e02c1a1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e02c1a1:  *
1:e02c1a1:  * Unless required by applicable law or agreed to in writing, software
1:e02c1a1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e02c1a1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e02c1a1:  * See the License for the specific language governing permissions and
1:e02c1a1:  * limitations under the License.
1:e02c1a1:  */
1:e02c1a1: package org.apache.activemq.transport.amqp;
1:e02c1a1: 
1:e02c1a1: import static org.junit.Assert.assertEquals;
1:e02c1a1: import static org.junit.Assert.assertNotNull;
1:e02c1a1: import static org.junit.Assert.assertTrue;
1:e02c1a1: 
1:e02c1a1: import java.util.ArrayList;
1:e02c1a1: import java.util.Arrays;
1:e02c1a1: import java.util.Collection;
1:e02c1a1: import java.util.List;
1:e02c1a1: 
1:e02c1a1: import javax.jms.Connection;
1:e02c1a1: import javax.jms.JMSException;
1:e02c1a1: import javax.jms.Message;
1:e02c1a1: import javax.jms.MessageConsumer;
1:e02c1a1: import javax.jms.MessageProducer;
1:e02c1a1: import javax.jms.Queue;
1:e02c1a1: import javax.jms.Session;
1:e02c1a1: import javax.jms.TextMessage;
1:e02c1a1: 
1:e02c1a1: import org.apache.activemq.broker.BrokerService;
1:e02c1a1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:e02c1a1: import org.apache.activemq.broker.region.policy.PolicyMap;
1:e02c1a1: import org.apache.qpid.jms.JmsConnectionFactory;
1:e02c1a1: import org.junit.Test;
1:e02c1a1: import org.junit.runner.RunWith;
1:e02c1a1: import org.junit.runners.Parameterized;
1:e02c1a1: import org.junit.runners.Parameterized.Parameters;
1:e02c1a1: import org.slf4j.Logger;
1:e02c1a1: import org.slf4j.LoggerFactory;
1:e02c1a1: 
1:e02c1a1: @RunWith(Parameterized.class)
1:e02c1a1: public class JmsTransactedMessageOrderTest extends JMSClientTestSupport {
1:e02c1a1: 
1:e02c1a1:     protected static final Logger LOG = LoggerFactory.getLogger(JmsTransactedMessageOrderTest.class);
1:e02c1a1: 
1:e02c1a1:     private final int prefetch;
1:e02c1a1: 
1:e02c1a1:     public JmsTransactedMessageOrderTest(int prefetch) {
1:e02c1a1:         this.prefetch = prefetch;
1:e02c1a1:     }
1:e02c1a1: 
1:e02c1a1:     @Parameters(name="Prefetch->{0}")
1:e02c1a1:     public static Collection<Object[]> data() {
1:e02c1a1:         return Arrays.asList(new Object[][] { {0}, {1}, {100} });
1:e02c1a1:     }
1:e02c1a1: 
1:e02c1a1:     @Override
1:e02c1a1:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1:e02c1a1:         final PolicyMap policyMap = new PolicyMap();
1:e02c1a1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:e02c1a1:         final PolicyEntry policyEntry = new PolicyEntry();
1:e02c1a1: 
1:e02c1a1:         policyEntry.setQueue(">");
1:e02c1a1:         policyEntry.setStrictOrderDispatch(true);
1:e02c1a1: 
1:e02c1a1:         policyEntries.add(policyEntry);
1:e02c1a1: 
1:e02c1a1:         policyMap.setPolicyEntries(policyEntries);
1:e02c1a1:         policyMap.setDefaultEntry(policyEntry);
1:e02c1a1: 
1:e02c1a1:         brokerService.setDestinationPolicy(policyMap);
1:e02c1a1:     }
1:e02c1a1: 
1:e02c1a1:     @Test
1:e02c1a1:     public void testMessageOrderAfterRollback() throws Exception {
1:e02c1a1:         sendMessages(5);
1:e02c1a1: 
1:e02c1a1:         int counter = 0;
1:4e23adf:         while (counter++ < 20) {
1:e02c1a1:             LOG.info("Creating connection using prefetch of: {}", prefetch);
1:e02c1a1: 
1:e02c1a1:             JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI("jms.prefetchPolicy.all=" + prefetch));
1:e02c1a1: 
1:e02c1a1:             connection = cf.createConnection();
1:e02c1a1:             connection.start();
1:e02c1a1: 
1:e02c1a1:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:e02c1a1:             Queue queue = session.createQueue(getDestinationName());
1:e02c1a1:             MessageConsumer consumer = session.createConsumer(queue);
1:e02c1a1: 
1:e02c1a1:             Message message = consumer.receive(5000);
1:e02c1a1:             assertNotNull(message);
1:e02c1a1:             assertTrue(message instanceof TextMessage);
1:4e23adf:             LOG.info("Read message = {}", ((TextMessage) message).getText());
1:e02c1a1: 
1:e02c1a1:             int sequenceID = message.getIntProperty("sequenceID");
1:e02c1a1:             assertEquals(0, sequenceID);
1:e02c1a1: 
1:e02c1a1:             session.rollback();
1:e02c1a1:             session.close();
1:e02c1a1:             connection.close();
1:e02c1a1:         }
1:e02c1a1:     }
1:e02c1a1: 
1:e02c1a1:     public void sendMessages(int messageCount) throws JMSException {
1:e02c1a1:         Connection connection = null;
1:e02c1a1:         try {
1:e02c1a1:             connection = createConnection();
1:e02c1a1:             connection.start();
1:e02c1a1: 
1:e02c1a1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e02c1a1:             Queue queue = session.createQueue(getDestinationName());
1:e02c1a1: 
1:e02c1a1:             for (int i = 0; i < messageCount; ++i) {
1:e02c1a1:                 MessageProducer messageProducer = session.createProducer(queue);
1:e02c1a1:                 TextMessage message = session.createTextMessage("(" + i + ")");
1:e02c1a1:                 message.setIntProperty("sequenceID", i);
1:e02c1a1:                 messageProducer.send(message);
1:e02c1a1:                 LOG.info("Sent message = {}", message.getText());
1:e02c1a1:             }
1:e02c1a1: 
1:e02c1a1:         } catch (Exception exp) {
1:e02c1a1:             exp.printStackTrace(System.out);
1:e02c1a1:         } finally {
1:e02c1a1:             if (connection != null) {
1:e02c1a1:                 connection.close();
1:e02c1a1:             }
1:e02c1a1:         }
1:e02c1a1:     }
1:e02c1a1: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4e23adf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         while (counter++ < 20) {
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Read message = {}", ((TextMessage) message).getText());
commit:e02c1a1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.qpid.jms.JmsConnectionFactory;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: @RunWith(Parameterized.class)
1: public class JmsTransactedMessageOrderTest extends JMSClientTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(JmsTransactedMessageOrderTest.class);
1: 
1:     private final int prefetch;
1: 
1:     public JmsTransactedMessageOrderTest(int prefetch) {
1:         this.prefetch = prefetch;
1:     }
1: 
1:     @Parameters(name="Prefetch->{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] { {0}, {1}, {100} });
1:     }
1: 
1:     @Override
1:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1:         final PolicyMap policyMap = new PolicyMap();
1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         final PolicyEntry policyEntry = new PolicyEntry();
1: 
1:         policyEntry.setQueue(">");
1:         policyEntry.setStrictOrderDispatch(true);
0:         policyEntry.setProducerFlowControl(true);
0:         policyEntry.setMemoryLimit(1024 * 1024);
1: 
1:         policyEntries.add(policyEntry);
1: 
1:         policyMap.setPolicyEntries(policyEntries);
1:         policyMap.setDefaultEntry(policyEntry);
1: 
1:         brokerService.setDestinationPolicy(policyMap);
1:     }
1: 
1:     @Test
1:     public void testMessageOrderAfterRollback() throws Exception {
1:         sendMessages(5);
1: 
1:         int counter = 0;
0:         while (counter++ < 10) {
1:             LOG.info("Creating connection using prefetch of: {}", prefetch);
1: 
1:             JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI("jms.prefetchPolicy.all=" + prefetch));
1: 
1:             connection = cf.createConnection();
1:             connection.start();
1: 
1:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             Queue queue = session.createQueue(getDestinationName());
1:             MessageConsumer consumer = session.createConsumer(queue);
1: 
1:             Message message = consumer.receive(5000);
1:             assertNotNull(message);
1:             assertTrue(message instanceof TextMessage);
1: 
1:             int sequenceID = message.getIntProperty("sequenceID");
1:             assertEquals(0, sequenceID);
1: 
0:             LOG.info("Read message = {}", ((TextMessage) message).getText());
1:             session.rollback();
1:             session.close();
1:             connection.close();
1:         }
1:     }
1: 
1:     public void sendMessages(int messageCount) throws JMSException {
1:         Connection connection = null;
1:         try {
1:             connection = createConnection();
1:             connection.start();
1: 
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Queue queue = session.createQueue(getDestinationName());
1: 
1:             for (int i = 0; i < messageCount; ++i) {
1:                 MessageProducer messageProducer = session.createProducer(queue);
1:                 TextMessage message = session.createTextMessage("(" + i + ")");
1:                 message.setIntProperty("sequenceID", i);
1:                 messageProducer.send(message);
1:                 LOG.info("Sent message = {}", message.getText());
1:             }
1: 
1:         } catch (Exception exp) {
1:             exp.printStackTrace(System.out);
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: }
============================================================================