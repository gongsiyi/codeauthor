1:dd1d660: /**
1:dd1d660:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dd1d660:  * contributor license agreements.  See the NOTICE file distributed with
1:dd1d660:  * this work for additional information regarding copyright ownership.
1:dd1d660:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dd1d660:  * (the "License"); you may not use this file except in compliance with
1:dd1d660:  * the License.  You may obtain a copy of the License at
5:dd1d660:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dd1d660:  *
1:dd1d660:  * Unless required by applicable law or agreed to in writing, software
1:dd1d660:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dd1d660:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dd1d660:  * See the License for the specific language governing permissions and
1:dd1d660:  * limitations under the License.
1:dd1d660:  */
1:dd1d660: package org.apache.activemq.util;
3:dd1d660: 
1:dd1d660: import java.io.DataInput;
1:dd1d660: import java.io.DataOutput;
1:dd1d660: import java.io.IOException;
1:a6a6a70: import java.io.Serializable;
1:dd1d660: 
1:dd1d660: /**
1:f812e34:  * Simple BitArray to enable setting multiple boolean values efficently Used
1:f812e34:  * instead of BitSet because BitSet does not allow for efficent serialization.
1:dd1d660:  * Will store up to 64 boolean values
1:b0c2a40:  * 
1:dd1d660:  * 
1:dd1d660:  */
1:a6a6a70: public class BitArray implements Serializable {
1:a6a6a70:     
1:a6a6a70:     private static final long serialVersionUID = 1L;
1:a6a6a70:     
1:dd1d660:     static final int LONG_SIZE = 64;
1:dd1d660:     static final int INT_SIZE = 32;
1:dd1d660:     static final int SHORT_SIZE = 16;
1:dd1d660:     static final int BYTE_SIZE = 8;
1:dd1d660:     private static final long[] BIT_VALUES = {0x0000000000000001L, 0x0000000000000002L, 0x0000000000000004L,
1:f812e34:                                               0x0000000000000008L, 0x0000000000000010L, 0x0000000000000020L,
1:f812e34:                                               0x0000000000000040L, 0x0000000000000080L, 0x0000000000000100L,
1:f812e34:                                               0x0000000000000200L, 0x0000000000000400L, 0x0000000000000800L,
1:f812e34:                                               0x0000000000001000L, 0x0000000000002000L, 0x0000000000004000L,
1:f812e34:                                               0x0000000000008000L, 0x0000000000010000L, 0x0000000000020000L,
1:f812e34:                                               0x0000000000040000L, 0x0000000000080000L, 0x0000000000100000L,
1:f812e34:                                               0x0000000000200000L, 0x0000000000400000L, 0x0000000000800000L,
1:f812e34:                                               0x0000000001000000L, 0x0000000002000000L, 0x0000000004000000L,
1:f812e34:                                               0x0000000008000000L, 0x0000000010000000L, 0x0000000020000000L,
1:f812e34:                                               0x0000000040000000L, 0x0000000080000000L, 0x0000000100000000L,
1:f812e34:                                               0x0000000200000000L, 0x0000000400000000L, 0x0000000800000000L,
1:f812e34:                                               0x0000001000000000L, 0x0000002000000000L, 0x0000004000000000L,
1:f812e34:                                               0x0000008000000000L, 0x0000010000000000L, 0x0000020000000000L,
1:f812e34:                                               0x0000040000000000L, 0x0000080000000000L, 0x0000100000000000L,
1:f812e34:                                               0x0000200000000000L, 0x0000400000000000L, 0x0000800000000000L,
1:f812e34:                                               0x0001000000000000L, 0x0002000000000000L, 0x0004000000000000L,
1:f812e34:                                               0x0008000000000000L, 0x0010000000000000L, 0x0020000000000000L,
1:f812e34:                                               0x0040000000000000L, 0x0080000000000000L, 0x0100000000000000L,
1:f812e34:                                               0x0200000000000000L, 0x0400000000000000L, 0x0800000000000000L,
1:f812e34:                                               0x1000000000000000L, 0x2000000000000000L, 0x4000000000000000L,
1:dd1d660:                                               0x8000000000000000L};
1:dd1d660:     private long bits;
1:dd1d660:     private int length;
1:dd1d660: 
1:dd1d660:     /**
1:dd1d660:      * @return the length of bits set
1:dd1d660:      */
1:dd1d660:     public int length() {
1:dd1d660:         return length;
9:dd1d660:     }
1:dd1d660: 
1:dd1d660:     /**
1:dd1d660:      * @return the long containing the bits
1:dd1d660:      */
1:dd1d660:     public long getBits() {
1:dd1d660:         return bits;
1:dd1d660:     }
1:dd1d660: 
1:dd1d660:     /**
1:dd1d660:      * set the boolean value at the index
1:f812e34:      * 
1:dd1d660:      * @param index
1:dd1d660:      * @param flag
1:dd1d660:      * @return the old value held at this index
1:dd1d660:      */
1:dd1d660:     public boolean set(int index, boolean flag) {
1:dd1d660:         length = Math.max(length, index + 1);
1:dd1d660:         boolean oldValue = (bits & BIT_VALUES[index]) != 0;
1:dd1d660:         if (flag) {
1:dd1d660:             bits |= BIT_VALUES[index];
1:f812e34:         } else if (oldValue) {
1:dd1d660:             bits &= ~(BIT_VALUES[index]);
1:dd1d660:         }
1:dd1d660:         return oldValue;
1:dd1d660:     }
1:dd1d660: 
1:dd1d660:     /**
1:dd1d660:      * @param index
1:dd1d660:      * @return the boolean value at this index
1:dd1d660:      */
1:dd1d660:     public boolean get(int index) {
1:dd1d660:         return (bits & BIT_VALUES[index]) != 0;
1:dd1d660:     }
1:f812e34: 
1:dd1d660:     /**
1:dd1d660:      * reset all the bit values to false
1:dd1d660:      */
1:f812e34:     public void reset() {
1:dd1d660:         bits = 0;
1:dd1d660:     }
1:f812e34: 
1:dd1d660:     /**
1:dd1d660:      * reset all the bits to the value supplied
1:f812e34:      * 
1:dd1d660:      * @param bits
1:dd1d660:      */
1:f812e34:     public void reset(long bits) {
1:dd1d660:         this.bits = bits;
1:dd1d660:     }
1:dd1d660: 
1:a6a6a70:     private void writeObject(java.io.ObjectOutputStream out) throws IOException {
1:a6a6a70:         writeToStream(out);
1:a6a6a70:     }
1:a6a6a70:     
1:a6a6a70:     private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
1:a6a6a70:         readFromStream(in);
1:a6a6a70:     }
1:a6a6a70:     
1:dd1d660:     /**
1:dd1d660:      * write the bits to an output stream
1:f812e34:      * 
1:dd1d660:      * @param dataOut
1:dd1d660:      * @throws IOException
1:dd1d660:      */
1:dd1d660:     public void writeToStream(DataOutput dataOut) throws IOException {
1:dd1d660:         dataOut.writeByte(length);
1:dd1d660:         if (length <= BYTE_SIZE) {
1:1aafa4f:             dataOut.writeByte((byte)bits);
1:f812e34:         } else if (length <= SHORT_SIZE) {
1:f812e34:             dataOut.writeShort((short)bits);
1:f812e34:         } else if (length <= INT_SIZE) {
1:f812e34:             dataOut.writeInt((int)bits);
1:f812e34:         } else {
1:dd1d660:             dataOut.writeLong(bits);
1:dd1d660:         }
1:dd1d660:     }
1:dd1d660: 
1:dd1d660:     /**
1:dd1d660:      * read the bits from an input stream
1:f812e34:      * 
1:dd1d660:      * @param dataIn
1:dd1d660:      * @throws IOException
1:dd1d660:      */
1:dd1d660:     public void readFromStream(DataInput dataIn) throws IOException {
1:dd1d660:         length = dataIn.readByte();
1:dd1d660:         if (length <= BYTE_SIZE) {
1:dd1d660:             bits = dataIn.readByte();
1:f812e34:         } else if (length <= SHORT_SIZE) {
1:dd1d660:             bits = dataIn.readShort();
1:f812e34:         } else if (length <= INT_SIZE) {
1:f812e34:             bits = dataIn.readInt();
1:f812e34:         } else {
1:dd1d660:             bits = dataIn.readLong();
1:f812e34:         }
1:dd1d660:     }
1:dd1d660: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Simple BitArray to enable setting multiple boolean values efficently Used
1:  * instead of BitSet because BitSet does not allow for efficent serialization.
/////////////////////////////////////////////////////////////////////////
1:                                               0x0000000000000008L, 0x0000000000000010L, 0x0000000000000020L,
1:                                               0x0000000000000040L, 0x0000000000000080L, 0x0000000000000100L,
1:                                               0x0000000000000200L, 0x0000000000000400L, 0x0000000000000800L,
1:                                               0x0000000000001000L, 0x0000000000002000L, 0x0000000000004000L,
1:                                               0x0000000000008000L, 0x0000000000010000L, 0x0000000000020000L,
1:                                               0x0000000000040000L, 0x0000000000080000L, 0x0000000000100000L,
1:                                               0x0000000000200000L, 0x0000000000400000L, 0x0000000000800000L,
1:                                               0x0000000001000000L, 0x0000000002000000L, 0x0000000004000000L,
1:                                               0x0000000008000000L, 0x0000000010000000L, 0x0000000020000000L,
1:                                               0x0000000040000000L, 0x0000000080000000L, 0x0000000100000000L,
1:                                               0x0000000200000000L, 0x0000000400000000L, 0x0000000800000000L,
1:                                               0x0000001000000000L, 0x0000002000000000L, 0x0000004000000000L,
1:                                               0x0000008000000000L, 0x0000010000000000L, 0x0000020000000000L,
1:                                               0x0000040000000000L, 0x0000080000000000L, 0x0000100000000000L,
1:                                               0x0000200000000000L, 0x0000400000000000L, 0x0000800000000000L,
1:                                               0x0001000000000000L, 0x0002000000000000L, 0x0004000000000000L,
1:                                               0x0008000000000000L, 0x0010000000000000L, 0x0020000000000000L,
1:                                               0x0040000000000000L, 0x0080000000000000L, 0x0100000000000000L,
1:                                               0x0200000000000000L, 0x0400000000000000L, 0x0800000000000000L,
1:                                               0x1000000000000000L, 0x2000000000000000L, 0x4000000000000000L,
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         } else if (oldValue) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void reset() {
1: 
1:      * 
1:     public void reset(long bits) {
1:      * 
0:             dataOut.writeByte((int)bits);
1:         } else if (length <= SHORT_SIZE) {
1:             dataOut.writeShort((short)bits);
1:         } else if (length <= INT_SIZE) {
1:             dataOut.writeInt((int)bits);
1:         } else {
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         } else if (length <= SHORT_SIZE) {
1:         } else if (length <= INT_SIZE) {
1:             bits = dataIn.readInt();
1:         } else {
1: }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1aafa4f
/////////////////////////////////////////////////////////////////////////
1:             dataOut.writeByte((byte)bits);
author:Gary Tully
-------------------------------------------------------------------------------
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1: public class BitArray implements Serializable {
1:     
1:     private static final long serialVersionUID = 1L;
1:     
/////////////////////////////////////////////////////////////////////////
1:     private void writeObject(java.io.ObjectOutputStream out) throws IOException {
1:         writeToStream(out);
1:     }
1:     
1:     private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
1:         readFromStream(in);
1:     }
1:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:dd1d660
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: /**
0:  * Simple BitArray to enable setting multiple boolean values efficently Used instead of BitSet because BitSet does not
0:  * allow for efficent serialization.
1:  * Will store up to 64 boolean values
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class BitArray {
1:     static final int LONG_SIZE = 64;
1:     static final int INT_SIZE = 32;
1:     static final int SHORT_SIZE = 16;
1:     static final int BYTE_SIZE = 8;
1:     private static final long[] BIT_VALUES = {0x0000000000000001L, 0x0000000000000002L, 0x0000000000000004L,
0:                                               0x0000000000000008L, 0x0000000000000010L, 0x0000000000000020L, 0x0000000000000040L, 0x0000000000000080L,
0:                                               0x0000000000000100L, 0x0000000000000200L, 0x0000000000000400L, 0x0000000000000800L, 0x0000000000001000L,
0:                                               0x0000000000002000L, 0x0000000000004000L, 0x0000000000008000L, 0x0000000000010000L, 0x0000000000020000L,
0:                                               0x0000000000040000L, 0x0000000000080000L, 0x0000000000100000L, 0x0000000000200000L, 0x0000000000400000L,
0:                                               0x0000000000800000L, 0x0000000001000000L, 0x0000000002000000L, 0x0000000004000000L, 0x0000000008000000L,
0:                                               0x0000000010000000L, 0x0000000020000000L, 0x0000000040000000L, 0x0000000080000000L, 0x0000000100000000L,
0:                                               0x0000000200000000L, 0x0000000400000000L, 0x0000000800000000L, 0x0000001000000000L, 0x0000002000000000L,
0:                                               0x0000004000000000L, 0x0000008000000000L, 0x0000010000000000L, 0x0000020000000000L, 0x0000040000000000L,
0:                                               0x0000080000000000L, 0x0000100000000000L, 0x0000200000000000L, 0x0000400000000000L, 0x0000800000000000L,
0:                                               0x0001000000000000L, 0x0002000000000000L, 0x0004000000000000L, 0x0008000000000000L, 0x0010000000000000L,
0:                                               0x0020000000000000L, 0x0040000000000000L, 0x0080000000000000L, 0x0100000000000000L, 0x0200000000000000L,
0:                                               0x0400000000000000L, 0x0800000000000000L, 0x1000000000000000L, 0x2000000000000000L, 0x4000000000000000L,
1:                                               0x8000000000000000L};
1:     private long bits;
1:     private int length;
1: 
1:     /**
1:      * @return the length of bits set
1:      */
1:     public int length() {
1:         return length;
1:     }
1: 
1:     /**
1:      * @return the long containing the bits
1:      */
1:     public long getBits() {
1:         return bits;
1:     }
1: 
1:     /**
1:      * set the boolean value at the index
1:      *
1:      * @param index
1:      * @param flag
1:      * @return the old value held at this index
1:      */
1:     public boolean set(int index, boolean flag) {
1:         length = Math.max(length, index + 1);
1:         boolean oldValue = (bits & BIT_VALUES[index]) != 0;
1:         if (flag) {
1:             bits |= BIT_VALUES[index];
1:         }
0:         else if (oldValue) {
1:             bits &= ~(BIT_VALUES[index]);
1:         }
1:         return oldValue;
1:     }
1: 
1:     /**
1:      * @param index
1:      * @return the boolean value at this index
1:      */
1:     public boolean get(int index) {
1:         return (bits & BIT_VALUES[index]) != 0;
1:     }
1:     
1:     /**
1:      * reset all the bit values to false
1:      */
0:     public void reset(){
1:         bits = 0;
1:     }
1:     
1:     /**
1:      * reset all the bits to the value supplied
1:      * @param bits
1:      */
0:     public void reset(long bits){
1:         this.bits = bits;
1:     }
1: 
1:     /**
1:      * write the bits to an output stream
1:      *
1:      * @param dataOut
1:      * @throws IOException
1:      */
1:     public void writeToStream(DataOutput dataOut) throws IOException {
1:         dataOut.writeByte(length);
1:         if (length <= BYTE_SIZE) {
0:             dataOut.writeByte((int) bits);
1:         }
0:         else if (length <= SHORT_SIZE) {
0:             dataOut.writeShort((short) bits);
1:         }
0:         else if (length <= INT_SIZE) {
0:             dataOut.writeInt((int) bits);
1:         }
0:         else {
1:             dataOut.writeLong(bits);
1:         }
1:     }
1: 
1:     /**
1:      * read the bits from an input stream
1:      *
1:      * @param dataIn
1:      * @throws IOException
1:      */
1:     public void readFromStream(DataInput dataIn) throws IOException {
1:         length = dataIn.readByte();
1:         if (length <= BYTE_SIZE) {
1:             bits = dataIn.readByte();
1:         }
0:         else if (length <= SHORT_SIZE) {
1:             bits = dataIn.readShort();
1:         }
0:         else if (length <= INT_SIZE) {
0:             bits=dataIn.readInt();
1:         }
0:         else {
1:             bits = dataIn.readLong();
1:         }
1:     }
1: }
============================================================================