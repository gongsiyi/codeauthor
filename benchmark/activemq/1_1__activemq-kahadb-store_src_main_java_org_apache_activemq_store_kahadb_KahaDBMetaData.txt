1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: package org.apache.activemq.store.kahadb;
1:74846bb: 
1:74846bb: import java.io.DataInput;
1:74846bb: import java.io.DataOutput;
1:74846bb: import java.io.IOException;
1:74846bb: 
1:74846bb: import org.apache.activemq.store.kahadb.disk.journal.Location;
1:74846bb: import org.apache.activemq.store.kahadb.disk.page.Page;
1:74846bb: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:74846bb: 
1:74846bb: /**
1:74846bb:  * Interface for the store meta data used to hold the index value and other needed
1:74846bb:  * information to manage a KahaDB store instance.
1:74846bb:  */
1:74846bb: public interface KahaDBMetaData<T> {
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Indicates that this meta data instance has been opened and is active.
1:74846bb:      */
1:74846bb:     public static final int OPEN_STATE = 2;
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Indicates that this meta data instance has been closed and is no longer active.
1:74846bb:      */
1:74846bb:     public static final int CLOSED_STATE = 1;
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Gets the Page in the store PageFile where the KahaDBMetaData instance is stored.
1:74846bb:      *
1:74846bb:      * @return the Page to use to start access the KahaDBMetaData instance.
1:74846bb:      */
1:74846bb:     Page<T> getPage();
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Sets the Page instance used to load and store the KahaDBMetaData instance.
1:74846bb:      *
1:74846bb:      * @param page
1:74846bb:      *        the new Page value to use.
1:74846bb:      */
1:74846bb:     void setPage(Page<T> page);
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Gets the state flag of this meta data instance.
1:74846bb:      *
1:74846bb:      *  @return the current state value for this instance.
1:74846bb:      */
1:74846bb:     int getState();
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Sets the current value of the state flag.
1:74846bb:      *
1:74846bb:      * @param value
1:74846bb:      *        the new value to assign to the state flag.
1:74846bb:      */
1:74846bb:     void setState(int value);
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Returns the Journal Location value that indicates that last recorded update
1:74846bb:      * that was successfully performed for this KahaDB store implementation.
1:74846bb:      *
1:74846bb:      * @return the location of the last successful update location.
1:74846bb:      */
1:74846bb:     Location getLastUpdateLocation();
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Updates the value of the last successful update.
1:74846bb:      *
1:74846bb:      * @param location
1:74846bb:      *        the new value to assign the last update location field.
1:74846bb:      */
1:74846bb:     void setLastUpdateLocation(Location location);
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * For a newly created KahaDBMetaData instance this method is called to allow
1:74846bb:      * the instance to create all of it's internal indices and other state data.
1:74846bb:      *
1:74846bb:      * @param tx
1:74846bb:      *        the Transaction instance under which the operation is executed.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while creating the meta data structures.
1:74846bb:      */
1:74846bb:     void initialize(Transaction tx) throws IOException;
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Instructs this object to load its internal data structures from the KahaDB PageFile
1:74846bb:      * and prepare itself for use.
1:74846bb:      *
1:74846bb:      * @param tx
1:74846bb:      *        the Transaction instance under which the operation is executed.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while creating the meta data structures.
1:74846bb:      */
1:74846bb:     void load(Transaction tx) throws IOException;
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Reads the serialized for of this object from the KadaDB PageFile and prepares it
1:74846bb:      * for use.  This method does not need to perform a full load of the meta data structures
1:74846bb:      * only read in the information necessary to load them from the PageFile on a call to the
1:74846bb:      * load method.
1:74846bb:      *
1:74846bb:      * @param in
1:74846bb:      *        the DataInput instance used to read this objects serialized form.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while reading the serialized form.
1:74846bb:      */
1:74846bb:     void read(DataInput in) throws IOException;
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Writes the object into a serialized form which can be read back in again using the
1:74846bb:      * read method.
1:74846bb:      *
1:74846bb:      * @param out
1:74846bb:      *        the DataOutput instance to use to write the current state to a serialized form.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while serializing this instance.
1:74846bb:      */
1:74846bb:     void write(DataOutput out) throws IOException;
1:74846bb: 
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.store.kahadb.disk.journal.Location;
1: import org.apache.activemq.store.kahadb.disk.page.Page;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: 
1: /**
1:  * Interface for the store meta data used to hold the index value and other needed
1:  * information to manage a KahaDB store instance.
1:  */
1: public interface KahaDBMetaData<T> {
1: 
1:     /**
1:      * Indicates that this meta data instance has been opened and is active.
1:      */
1:     public static final int OPEN_STATE = 2;
1: 
1:     /**
1:      * Indicates that this meta data instance has been closed and is no longer active.
1:      */
1:     public static final int CLOSED_STATE = 1;
1: 
1:     /**
1:      * Gets the Page in the store PageFile where the KahaDBMetaData instance is stored.
1:      *
1:      * @return the Page to use to start access the KahaDBMetaData instance.
1:      */
1:     Page<T> getPage();
1: 
1:     /**
1:      * Sets the Page instance used to load and store the KahaDBMetaData instance.
1:      *
1:      * @param page
1:      *        the new Page value to use.
1:      */
1:     void setPage(Page<T> page);
1: 
1:     /**
1:      * Gets the state flag of this meta data instance.
1:      *
1:      *  @return the current state value for this instance.
1:      */
1:     int getState();
1: 
1:     /**
1:      * Sets the current value of the state flag.
1:      *
1:      * @param value
1:      *        the new value to assign to the state flag.
1:      */
1:     void setState(int value);
1: 
1:     /**
1:      * Returns the Journal Location value that indicates that last recorded update
1:      * that was successfully performed for this KahaDB store implementation.
1:      *
1:      * @return the location of the last successful update location.
1:      */
1:     Location getLastUpdateLocation();
1: 
1:     /**
1:      * Updates the value of the last successful update.
1:      *
1:      * @param location
1:      *        the new value to assign the last update location field.
1:      */
1:     void setLastUpdateLocation(Location location);
1: 
1:     /**
1:      * For a newly created KahaDBMetaData instance this method is called to allow
1:      * the instance to create all of it's internal indices and other state data.
1:      *
1:      * @param tx
1:      *        the Transaction instance under which the operation is executed.
1:      *
1:      * @throws IOException if an error occurs while creating the meta data structures.
1:      */
1:     void initialize(Transaction tx) throws IOException;
1: 
1:     /**
1:      * Instructs this object to load its internal data structures from the KahaDB PageFile
1:      * and prepare itself for use.
1:      *
1:      * @param tx
1:      *        the Transaction instance under which the operation is executed.
1:      *
1:      * @throws IOException if an error occurs while creating the meta data structures.
1:      */
1:     void load(Transaction tx) throws IOException;
1: 
1:     /**
1:      * Reads the serialized for of this object from the KadaDB PageFile and prepares it
1:      * for use.  This method does not need to perform a full load of the meta data structures
1:      * only read in the information necessary to load them from the PageFile on a call to the
1:      * load method.
1:      *
1:      * @param in
1:      *        the DataInput instance used to read this objects serialized form.
1:      *
1:      * @throws IOException if an error occurs while reading the serialized form.
1:      */
1:     void read(DataInput in) throws IOException;
1: 
1:     /**
1:      * Writes the object into a serialized form which can be read back in again using the
1:      * read method.
1:      *
1:      * @param out
1:      *        the DataOutput instance to use to write the current state to a serialized form.
1:      *
1:      * @throws IOException if an error occurs while serializing this instance.
1:      */
1:     void write(DataOutput out) throws IOException;
1: 
1: }
============================================================================