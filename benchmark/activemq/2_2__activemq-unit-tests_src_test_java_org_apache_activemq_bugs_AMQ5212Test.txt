1:27b3a7c: /**
1:27b3a7c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27b3a7c:  * contributor license agreements.  See the NOTICE file distributed with
1:27b3a7c:  * this work for additional information regarding copyright ownership.
1:27b3a7c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27b3a7c:  * (the "License"); you may not use this file except in compliance with
1:27b3a7c:  * the License.  You may obtain a copy of the License at
1:27b3a7c:  *
1:27b3a7c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:27b3a7c:  *
1:27b3a7c:  * Unless required by applicable law or agreed to in writing, software
1:27b3a7c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27b3a7c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27b3a7c:  * See the License for the specific language governing permissions and
1:27b3a7c:  * limitations under the License.
1:27b3a7c:  */
1:27b3a7c: 
1:27b3a7c: package org.apache.activemq.bugs;
1:27b3a7c: 
1:27b3a7c: import static org.junit.Assert.assertEquals;
1:27b3a7c: import static org.junit.Assert.assertNotNull;
3:5667e4d: 
1:f8bc19b: import java.io.IOException;
1:54e2e3b: import java.util.Arrays;
1:f8bc19b: import java.util.concurrent.ConcurrentLinkedQueue;
1:f8bc19b: import java.util.concurrent.CountDownLatch;
1:27b3a7c: import java.util.concurrent.ExecutorService;
1:27b3a7c: import java.util.concurrent.Executors;
1:27b3a7c: import java.util.concurrent.TimeUnit;
1:27b3a7c: import java.util.concurrent.atomic.AtomicInteger;
1:27b3a7c: 
1:27b3a7c: import javax.jms.Message;
1:27b3a7c: import javax.jms.MessageConsumer;
1:27b3a7c: import javax.jms.Session;
1:27b3a7c: 
1:27b3a7c: import org.apache.activemq.ActiveMQConnection;
1:27b3a7c: import org.apache.activemq.ActiveMQConnectionFactory;
1:27b3a7c: import org.apache.activemq.ActiveMQMessageProducer;
1:27b3a7c: import org.apache.activemq.ActiveMQSession;
1:27b3a7c: import org.apache.activemq.broker.BrokerService;
1:f8bc19b: import org.apache.activemq.broker.MutableBrokerFilter;
1:f8bc19b: import org.apache.activemq.broker.ProducerBrokerExchange;
1:27b3a7c: import org.apache.activemq.command.ActiveMQQueue;
1:27b3a7c: import org.apache.activemq.command.ActiveMQTextMessage;
1:54e2e3b: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:54e2e3b: import org.apache.activemq.util.Wait;
1:27b3a7c: import org.junit.After;
1:27b3a7c: import org.junit.Before;
1:27b3a7c: import org.junit.Test;
1:54e2e3b: import org.junit.runner.RunWith;
1:54e2e3b: import org.junit.runners.Parameterized;
1:27b3a7c: 
1:54e2e3b: @RunWith(value = Parameterized.class)
1:27b3a7c: public class AMQ5212Test {
1:27b3a7c: 
1:27b3a7c:     BrokerService brokerService;
1:27b3a7c: 
1:54e2e3b:     @Parameterized.Parameter(0)
1:54e2e3b:     public boolean concurrentStoreAndDispatchQ = true;
1:54e2e3b: 
1:54e2e3b:     @Parameterized.Parameters(name = "concurrentStoreAndDispatch={0}")
1:54e2e3b:     public static Iterable<Object[]> getTestParameters() {
1:54e2e3b:         return Arrays.asList(new Object[][]{{Boolean.TRUE}, {Boolean.FALSE}});
1:54e2e3b:     }
1:54e2e3b: 
1:27b3a7c:     @Before
1:27b3a7c:     public void setUp() throws Exception {
1:27b3a7c:         start(true);
1:27b3a7c:     }
1:27b3a7c: 
1:27b3a7c:     public void start(boolean deleteAllMessages) throws Exception {
1:27b3a7c:         brokerService = new BrokerService();
1:27b3a7c:         if (deleteAllMessages) {
1:27b3a7c:             brokerService.deleteAllMessages();
1:27b3a7c:         }
1:54e2e3b:         ((KahaDBPersistenceAdapter)brokerService.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(concurrentStoreAndDispatchQ);
1:27b3a7c:         brokerService.addConnector("tcp://localhost:0");
1:27b3a7c:         brokerService.setAdvisorySupport(false);
1:5667e4d:         brokerService.getManagementContext().setCreateConnector(false);
1:27b3a7c:         brokerService.start();
1:27b3a7c:     }
1:27b3a7c: 
1:27b3a7c:     @After
1:27b3a7c:     public void tearDown() throws Exception {
1:27b3a7c:         brokerService.stop();
1:27b3a7c:     }
1:27b3a7c: 
1:27b3a7c:     @Test
1:27b3a7c:     public void verifyDuplicateSuppressionWithConsumer() throws Exception {
1:27b3a7c:         doVerifyDuplicateSuppression(100, 100, true);
1:27b3a7c:     }
1:27b3a7c: 
1:27b3a7c:     @Test
1:27b3a7c:     public void verifyDuplicateSuppression() throws Exception {
1:27b3a7c:         doVerifyDuplicateSuppression(100, 100, false);
1:27b3a7c:     }
1:27b3a7c: 
1:27b3a7c:     public void doVerifyDuplicateSuppression(final int numToSend, final int expectedTotalEnqueue, final boolean demand) throws Exception {
1:27b3a7c:         final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:27b3a7c:         connectionFactory.setCopyMessageOnSend(false);
1:27b3a7c:         connectionFactory.setWatchTopicAdvisories(false);
1:27b3a7c: 
1:27b3a7c:         final int concurrency = 40;
1:27b3a7c:         final AtomicInteger workCount = new AtomicInteger(numToSend);
1:27b3a7c:         ExecutorService executorService = Executors.newFixedThreadPool(concurrency);
1:27b3a7c:         for (int i = 0; i < concurrency; i++) {
1:27b3a7c:             executorService.execute(new Runnable() {
1:27b3a7c:                 @Override
1:27b3a7c:                 public void run() {
1:27b3a7c:                     try {
1:27b3a7c:                         int i;
1:27b3a7c:                         while ((i = workCount.getAndDecrement()) > 0) {
1:27b3a7c:                             ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:27b3a7c:                             activeMQConnection.start();
1:27b3a7c:                             ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:27b3a7c: 
1:27b3a7c:                             ActiveMQQueue dest = new ActiveMQQueue("queue-" + i + "-"
1:27b3a7c:                                     + AMQ5212Test.class.getSimpleName());
1:27b3a7c:                             ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSession.createProducer(dest);
1:27b3a7c:                             if (demand) {
1:27b3a7c:                                 // create demand so page in will happen
1:27b3a7c:                                 activeMQSession.createConsumer(dest);
1:27b3a7c:                             }
1:27b3a7c:                             ActiveMQTextMessage message = new ActiveMQTextMessage();
1:27b3a7c:                             message.setDestination(dest);
1:27b3a7c:                             activeMQMessageProducer.send(message, null);
1:27b3a7c: 
1:27b3a7c:                             // send a duplicate
1:27b3a7c:                             activeMQConnection.syncSendPacket(message);
1:27b3a7c:                             activeMQConnection.close();
1:f8bc19b: 
1:27b3a7c:                         }
1:27b3a7c:                     } catch (Exception e) {
1:27b3a7c:                         e.printStackTrace();
1:27b3a7c:                     }
1:27b3a7c:                 }
1:27b3a7c:             });
1:27b3a7c:         }
1:27b3a7c:         TimeUnit.SECONDS.sleep(1);
1:27b3a7c:         executorService.shutdown();
1:27b3a7c:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1:27b3a7c: 
1:54e2e3b:         Wait.waitFor(new Wait.Condition() {
1:54e2e3b:             @Override
1:54e2e3b:             public boolean isSatisified() throws Exception {
1:54e2e3b:                 return expectedTotalEnqueue == brokerService.getAdminView().getTotalEnqueueCount();
1:54e2e3b:             }
1:54e2e3b:         });
1:27b3a7c:         assertEquals("total enqueue as expected", expectedTotalEnqueue, brokerService.getAdminView().getTotalEnqueueCount());
1:27b3a7c:     }
1:27b3a7c: 
1:f8bc19b:     @Test
1:27b3a7c:     public void verifyConsumptionOnDuplicate() throws Exception {
1:27b3a7c: 
1:27b3a7c:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:27b3a7c:         connectionFactory.setCopyMessageOnSend(false);
1:27b3a7c:         connectionFactory.setWatchTopicAdvisories(false);
1:27b3a7c: 
1:27b3a7c:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:27b3a7c:         activeMQConnection.start();
1:27b3a7c:         ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:27b3a7c: 
1:27b3a7c:         ActiveMQQueue dest = new ActiveMQQueue("Q");
1:27b3a7c:         ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSession.createProducer(dest);
1:27b3a7c:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:27b3a7c:         message.setDestination(dest);
1:27b3a7c:         activeMQMessageProducer.send(message, null);
1:27b3a7c: 
1:27b3a7c:         // send a duplicate
1:27b3a7c:         activeMQConnection.syncSendPacket(message);
1:27b3a7c: 
1:27b3a7c:         activeMQConnection.close();
1:27b3a7c: 
1:27b3a7c:         // verify original can be consumed after restart
1:27b3a7c:         brokerService.stop();
1:27b3a7c:         brokerService.start(false);
1:27b3a7c: 
1:27b3a7c:         connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:27b3a7c:         connectionFactory.setCopyMessageOnSend(false);
1:27b3a7c:         connectionFactory.setWatchTopicAdvisories(false);
1:27b3a7c: 
1:27b3a7c:         activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:27b3a7c:         activeMQConnection.start();
1:27b3a7c:         activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:27b3a7c: 
1:27b3a7c:         MessageConsumer messageConsumer = activeMQSession.createConsumer(dest);
1:27b3a7c:         Message received = messageConsumer.receive(4000);
1:27b3a7c:         assertNotNull("Got message", received);
1:27b3a7c:         assertEquals("match", message.getJMSMessageID(), received.getJMSMessageID());
1:27b3a7c: 
1:27b3a7c:         activeMQConnection.close();
1:27b3a7c:     }
1:27b3a7c: 
1:27b3a7c:     @Test
1:27b3a7c:     public void verifyClientAckConsumptionOnDuplicate() throws Exception {
1:27b3a7c: 
1:27b3a7c:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:27b3a7c:         connectionFactory.setCopyMessageOnSend(false);
1:27b3a7c:         connectionFactory.setWatchTopicAdvisories(false);
1:27b3a7c: 
1:27b3a7c:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:27b3a7c:         activeMQConnection.start();
1:27b3a7c:         ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:27b3a7c: 
1:27b3a7c:         ActiveMQQueue dest = new ActiveMQQueue("Q");
1:27b3a7c: 
1:27b3a7c:         MessageConsumer messageConsumer = activeMQSession.createConsumer(dest);
1:27b3a7c: 
1:27b3a7c:         ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSession.createProducer(dest);
1:27b3a7c:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:27b3a7c:         message.setDestination(dest);
1:27b3a7c:         activeMQMessageProducer.send(message, null);
1:27b3a7c: 
1:27b3a7c:         // send a duplicate
1:27b3a7c:         activeMQConnection.syncSendPacket(message);
1:27b3a7c: 
1:27b3a7c: 
1:27b3a7c:         Message received = messageConsumer.receive(4000);
1:27b3a7c:         assertNotNull("Got message", received);
1:27b3a7c:         assertEquals("match", message.getJMSMessageID(), received.getJMSMessageID());
1:27b3a7c:         messageConsumer.close();
1:27b3a7c: 
1:27b3a7c: 
1:27b3a7c:         messageConsumer = activeMQSession.createConsumer(dest);
1:27b3a7c:         received = messageConsumer.receive(4000);
1:27b3a7c:         assertNotNull("Got message", received);
1:27b3a7c:         assertEquals("match", message.getJMSMessageID(), received.getJMSMessageID());
1:27b3a7c:         received.acknowledge();
1:27b3a7c: 
1:27b3a7c:         activeMQConnection.close();
1:27b3a7c:     }
1:27b3a7c: 
1:27b3a7c:     @Test
1:f8bc19b:     public void verifyProducerAudit() throws Exception {
1:f8bc19b: 
1:f8bc19b:         MutableBrokerFilter filter = (MutableBrokerFilter)brokerService.getBroker().getAdaptor(MutableBrokerFilter.class);
1:f8bc19b:         filter.setNext(new MutableBrokerFilter(filter.getNext()) {
1:f8bc19b:             @Override
1:f8bc19b:             public void send(ProducerBrokerExchange producerExchange, org.apache.activemq.command.Message messageSend) throws Exception {
1:f8bc19b:                 super.send(producerExchange, messageSend);
1:f8bc19b:                 Object seq = messageSend.getProperty("seq");
1:f8bc19b:                 if (seq instanceof Integer) {
1:f8bc19b:                     if  ( ((Integer) seq).intValue() %200 == 0 && producerExchange.getConnectionContext().getConnection() != null) {
1:f8bc19b:                         producerExchange.getConnectionContext().setDontSendReponse(true);
1:f8bc19b:                         producerExchange.getConnectionContext().getConnection().serviceException(new IOException("force reconnect"));
1:f8bc19b:                     }
1:f8bc19b:                 }
1:f8bc19b:             }
1:f8bc19b:         });
1:f8bc19b: 
1:f8bc19b:         final AtomicInteger received = new AtomicInteger(0);
1:f8bc19b:         final ActiveMQQueue dest = new ActiveMQQueue("Q");
1:f8bc19b:         final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover://" + brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:f8bc19b:         connectionFactory.setCopyMessageOnSend(false);
1:f8bc19b:         connectionFactory.setWatchTopicAdvisories(false);
1:f8bc19b: 
1:f8bc19b:         final int numConsumers = 40;
1:f8bc19b:         ExecutorService executorService = Executors.newCachedThreadPool();
1:f8bc19b:         final CountDownLatch consumerStarted = new CountDownLatch(numConsumers);
1:f8bc19b:         final ConcurrentLinkedQueue<ActiveMQConnection> connectionList = new ConcurrentLinkedQueue<ActiveMQConnection>();
1:f8bc19b:         for (int i=0; i<numConsumers; i++) {
1:f8bc19b:             executorService.execute(new Runnable() {
1:f8bc19b:                 @Override
1:f8bc19b:                 public void run() {
1:f8bc19b:                     try {
1:f8bc19b:                         ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:f8bc19b:                         activeMQConnection.getPrefetchPolicy().setAll(0);
1:f8bc19b:                         activeMQConnection.start();
1:f8bc19b:                         connectionList.add(activeMQConnection);
1:f8bc19b: 
1:f8bc19b:                         ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f8bc19b:                         MessageConsumer messageConsumer = activeMQSession.createConsumer(dest);
1:f8bc19b:                         consumerStarted.countDown();
1:f8bc19b:                         while (true) {
1:f8bc19b:                             if(messageConsumer.receive(500) != null) {
1:f8bc19b:                                 received.incrementAndGet();
1:f8bc19b:                             }
1:f8bc19b:                         }
1:f8bc19b: 
1:f8bc19b:                     } catch (javax.jms.IllegalStateException expected) {
1:f8bc19b:                     } catch (Exception ignored) {
1:f8bc19b:                         ignored.printStackTrace();
1:f8bc19b:                     }
1:f8bc19b:                 }
1:f8bc19b:             });
1:f8bc19b:         }
1:f8bc19b: 
1:f8bc19b:         final String payload = new String(new byte[8 * 1024]);
1:f8bc19b:         final int totalToProduce =  5000;
1:f8bc19b:         final AtomicInteger toSend = new AtomicInteger(totalToProduce);
1:f8bc19b:         final int numProducers = 10;
1:f8bc19b:         final CountDownLatch producerDone = new CountDownLatch(numProducers);
1:f8bc19b:         for (int i=0;i<numProducers;i++) {
1:f8bc19b:             executorService.execute(new Runnable() {
1:f8bc19b:                 @Override
1:f8bc19b:                 public void run() {
1:f8bc19b:                     try {
1:f8bc19b:                         ActiveMQConnection activeMQConnectionP = (ActiveMQConnection) connectionFactory.createConnection();
1:f8bc19b:                         activeMQConnectionP.start();
1:f8bc19b:                         ActiveMQSession activeMQSessionP = (ActiveMQSession) activeMQConnectionP.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f8bc19b:                         ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSessionP.createProducer(dest);
1:f8bc19b:                         int seq = 0;
1:f8bc19b:                         while ((seq = toSend.decrementAndGet()) >= 0) {
1:f8bc19b:                             ActiveMQTextMessage message = new ActiveMQTextMessage();
1:f8bc19b:                             message.setText(payload);
1:f8bc19b:                             message.setIntProperty("seq", seq);
1:f8bc19b:                             activeMQMessageProducer.send(message);
1:f8bc19b:                         }
1:f8bc19b:                         activeMQConnectionP.close();
1:f8bc19b:                     } catch (Exception ignored) {
1:f8bc19b:                         ignored.printStackTrace();
1:f8bc19b:                     } finally {
1:f8bc19b:                         producerDone.countDown();
1:f8bc19b:                     }
1:f8bc19b:                 }
1:f8bc19b:             });
1:f8bc19b:         }
1:f8bc19b: 
1:f8bc19b:         consumerStarted.await(10, TimeUnit.MINUTES);
1:f8bc19b:         producerDone.await(10, TimeUnit.MINUTES);
1:f8bc19b: 
1:f8bc19b:         for (ActiveMQConnection c : connectionList) {
1:f8bc19b:             c.close();
1:f8bc19b:         }
1:f8bc19b: 
1:f8bc19b:         executorService.shutdown();
1:f8bc19b:         executorService.awaitTermination(10, TimeUnit.MINUTES);
1:f8bc19b: 
1:f8bc19b:         Wait.waitFor(new Wait.Condition() {
1:f8bc19b:             @Override
1:f8bc19b:             public boolean isSatisified() throws Exception {
1:f8bc19b:                 return brokerService.getAdminView().getTotalEnqueueCount() >= totalToProduce;
1:f8bc19b:             }
1:f8bc19b:         });
1:f8bc19b:         assertEquals("total enqueue as expected, nothing added to dlq", totalToProduce, brokerService.getAdminView().getTotalEnqueueCount());
1:f8bc19b:     }
1:27b3a7c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:f8bc19b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.MutableBrokerFilter;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void verifyProducerAudit() throws Exception {
1: 
1:         MutableBrokerFilter filter = (MutableBrokerFilter)brokerService.getBroker().getAdaptor(MutableBrokerFilter.class);
1:         filter.setNext(new MutableBrokerFilter(filter.getNext()) {
1:             @Override
1:             public void send(ProducerBrokerExchange producerExchange, org.apache.activemq.command.Message messageSend) throws Exception {
1:                 super.send(producerExchange, messageSend);
1:                 Object seq = messageSend.getProperty("seq");
1:                 if (seq instanceof Integer) {
1:                     if  ( ((Integer) seq).intValue() %200 == 0 && producerExchange.getConnectionContext().getConnection() != null) {
1:                         producerExchange.getConnectionContext().setDontSendReponse(true);
1:                         producerExchange.getConnectionContext().getConnection().serviceException(new IOException("force reconnect"));
1:                     }
1:                 }
1:             }
1:         });
1: 
1:         final AtomicInteger received = new AtomicInteger(0);
1:         final ActiveMQQueue dest = new ActiveMQQueue("Q");
1:         final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover://" + brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:         connectionFactory.setCopyMessageOnSend(false);
1:         connectionFactory.setWatchTopicAdvisories(false);
1: 
1:         final int numConsumers = 40;
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         final CountDownLatch consumerStarted = new CountDownLatch(numConsumers);
1:         final ConcurrentLinkedQueue<ActiveMQConnection> connectionList = new ConcurrentLinkedQueue<ActiveMQConnection>();
1:         for (int i=0; i<numConsumers; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:                         activeMQConnection.getPrefetchPolicy().setAll(0);
1:                         activeMQConnection.start();
1:                         connectionList.add(activeMQConnection);
1: 
1:                         ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         MessageConsumer messageConsumer = activeMQSession.createConsumer(dest);
1:                         consumerStarted.countDown();
1:                         while (true) {
1:                             if(messageConsumer.receive(500) != null) {
1:                                 received.incrementAndGet();
1:                             }
1:                         }
1: 
1:                     } catch (javax.jms.IllegalStateException expected) {
1:                     } catch (Exception ignored) {
1:                         ignored.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         final String payload = new String(new byte[8 * 1024]);
1:         final int totalToProduce =  5000;
1:         final AtomicInteger toSend = new AtomicInteger(totalToProduce);
1:         final int numProducers = 10;
1:         final CountDownLatch producerDone = new CountDownLatch(numProducers);
1:         for (int i=0;i<numProducers;i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         ActiveMQConnection activeMQConnectionP = (ActiveMQConnection) connectionFactory.createConnection();
1:                         activeMQConnectionP.start();
1:                         ActiveMQSession activeMQSessionP = (ActiveMQSession) activeMQConnectionP.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSessionP.createProducer(dest);
1:                         int seq = 0;
1:                         while ((seq = toSend.decrementAndGet()) >= 0) {
1:                             ActiveMQTextMessage message = new ActiveMQTextMessage();
1:                             message.setText(payload);
1:                             message.setIntProperty("seq", seq);
1:                             activeMQMessageProducer.send(message);
1:                         }
1:                         activeMQConnectionP.close();
1:                     } catch (Exception ignored) {
1:                         ignored.printStackTrace();
1:                     } finally {
1:                         producerDone.countDown();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         consumerStarted.await(10, TimeUnit.MINUTES);
1:         producerDone.await(10, TimeUnit.MINUTES);
1: 
1:         for (ActiveMQConnection c : connectionList) {
1:             c.close();
1:         }
1: 
1:         executorService.shutdown();
1:         executorService.awaitTermination(10, TimeUnit.MINUTES);
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getTotalEnqueueCount() >= totalToProduce;
1:             }
1:         });
1:         assertEquals("total enqueue as expected, nothing added to dlq", totalToProduce, brokerService.getAdminView().getTotalEnqueueCount());
1:     }
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: @RunWith(value = Parameterized.class)
1:     @Parameterized.Parameter(0)
1:     public boolean concurrentStoreAndDispatchQ = true;
1: 
1:     @Parameterized.Parameters(name = "concurrentStoreAndDispatch={0}")
1:     public static Iterable<Object[]> getTestParameters() {
1:         return Arrays.asList(new Object[][]{{Boolean.TRUE}, {Boolean.FALSE}});
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         ((KahaDBPersistenceAdapter)brokerService.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(concurrentStoreAndDispatchQ);
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return expectedTotalEnqueue == brokerService.getAdminView().getTotalEnqueueCount();
1:             }
1:         });
commit:27b3a7c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageProducer;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: public class AMQ5212Test {
1: 
1:     BrokerService brokerService;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         start(true);
1:     }
1: 
1:     public void start(boolean deleteAllMessages) throws Exception {
1:         brokerService = new BrokerService();
1:         if (deleteAllMessages) {
1:             brokerService.deleteAllMessages();
1:         }
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1:     @Test
1:     public void verifyDuplicateSuppressionWithConsumer() throws Exception {
1:         doVerifyDuplicateSuppression(100, 100, true);
1:     }
1: 
1:     @Test
1:     public void verifyDuplicateSuppression() throws Exception {
1:         doVerifyDuplicateSuppression(100, 100, false);
1:     }
1: 
1:     public void doVerifyDuplicateSuppression(final int numToSend, final int expectedTotalEnqueue, final boolean demand) throws Exception {
1:         final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:         connectionFactory.setCopyMessageOnSend(false);
1:         connectionFactory.setWatchTopicAdvisories(false);
1: 
1:         final int concurrency = 40;
1:         final AtomicInteger workCount = new AtomicInteger(numToSend);
1:         ExecutorService executorService = Executors.newFixedThreadPool(concurrency);
1:         for (int i = 0; i < concurrency; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         int i;
1:                         while ((i = workCount.getAndDecrement()) > 0) {
1:                             ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:                             activeMQConnection.start();
1:                             ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:                             ActiveMQQueue dest = new ActiveMQQueue("queue-" + i + "-"
1:                                     + AMQ5212Test.class.getSimpleName());
1:                             ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSession.createProducer(dest);
1:                             if (demand) {
1:                                 // create demand so page in will happen
1:                                 activeMQSession.createConsumer(dest);
1:                             }
1:                             ActiveMQTextMessage message = new ActiveMQTextMessage();
1:                             message.setDestination(dest);
1:                             activeMQMessageProducer.send(message, null);
1: 
1:                             // send a duplicate
1:                             activeMQConnection.syncSendPacket(message);
1:                             activeMQConnection.close();
1: 
1:                         }
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1:         TimeUnit.SECONDS.sleep(1);
1:         executorService.shutdown();
1:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1: 
1:         assertEquals("total enqueue as expected", expectedTotalEnqueue, brokerService.getAdminView().getTotalEnqueueCount());
1:     }
1: 
1:     @Test
1:     public void verifyConsumptionOnDuplicate() throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:         connectionFactory.setCopyMessageOnSend(false);
1:         connectionFactory.setWatchTopicAdvisories(false);
1: 
1:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:         activeMQConnection.start();
1:         ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQQueue dest = new ActiveMQQueue("Q");
1:         ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSession.createProducer(dest);
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setDestination(dest);
1:         activeMQMessageProducer.send(message, null);
1: 
1:         // send a duplicate
1:         activeMQConnection.syncSendPacket(message);
1: 
1:         activeMQConnection.close();
1: 
1:         // verify original can be consumed after restart
1:         brokerService.stop();
1:         brokerService.start(false);
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:         connectionFactory.setCopyMessageOnSend(false);
1:         connectionFactory.setWatchTopicAdvisories(false);
1: 
1:         activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:         activeMQConnection.start();
1:         activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer messageConsumer = activeMQSession.createConsumer(dest);
1:         Message received = messageConsumer.receive(4000);
1:         assertNotNull("Got message", received);
1:         assertEquals("match", message.getJMSMessageID(), received.getJMSMessageID());
1: 
1:         activeMQConnection.close();
1:     }
1: 
1:     @Test
1:     public void verifyClientAckConsumptionOnDuplicate() throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectString());
1:         connectionFactory.setCopyMessageOnSend(false);
1:         connectionFactory.setWatchTopicAdvisories(false);
1: 
1:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:         activeMQConnection.start();
1:         ActiveMQSession activeMQSession = (ActiveMQSession) activeMQConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         ActiveMQQueue dest = new ActiveMQQueue("Q");
1: 
1:         MessageConsumer messageConsumer = activeMQSession.createConsumer(dest);
1: 
1:         ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) activeMQSession.createProducer(dest);
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setDestination(dest);
1:         activeMQMessageProducer.send(message, null);
1: 
1:         // send a duplicate
1:         activeMQConnection.syncSendPacket(message);
1: 
1: 
1:         Message received = messageConsumer.receive(4000);
1:         assertNotNull("Got message", received);
1:         assertEquals("match", message.getJMSMessageID(), received.getJMSMessageID());
1:         messageConsumer.close();
1: 
1: 
1:         messageConsumer = activeMQSession.createConsumer(dest);
1:         received = messageConsumer.receive(4000);
1:         assertNotNull("Got message", received);
1:         assertEquals("match", message.getJMSMessageID(), received.getJMSMessageID());
1:         received.acknowledge();
1: 
1:         activeMQConnection.close();
1:     }
1: }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5667e4d
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         brokerService.getManagementContext().setCreateConnector(false);
============================================================================