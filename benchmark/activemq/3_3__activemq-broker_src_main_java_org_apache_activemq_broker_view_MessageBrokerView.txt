1:8f4ebbb: /**
1:8f4ebbb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8f4ebbb:  * contributor license agreements.  See the NOTICE file distributed with
1:8f4ebbb:  * this work for additional information regarding copyright ownership.
1:8f4ebbb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8f4ebbb:  * (the "License"); you may not use this file except in compliance with
1:8f4ebbb:  * the License.  You may obtain a copy of the License at
1:8f4ebbb:  *
1:8f4ebbb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8f4ebbb:  *
1:8f4ebbb:  * Unless required by applicable law or agreed to in writing, software
1:8f4ebbb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8f4ebbb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8f4ebbb:  * See the License for the specific language governing permissions and
1:8f4ebbb:  * limitations under the License.
1:8f4ebbb:  */
1:8f4ebbb: package org.apache.activemq.broker.view;
2:8f4ebbb: 
1:8f4ebbb: import java.util.Collections;
1:8f4ebbb: import java.util.HashSet;
1:8f4ebbb: import java.util.Map;
1:8f4ebbb: import java.util.Set;
1:8f4ebbb: 
1:0a5b143: import org.apache.activemq.broker.BrokerRegistry;
1:8f4ebbb: import org.apache.activemq.broker.BrokerService;
1:8f4ebbb: import org.apache.activemq.broker.region.Destination;
1:8f4ebbb: import org.apache.activemq.command.ActiveMQDestination;
1:8f4ebbb: import org.apache.activemq.command.ActiveMQQueue;
1:8f4ebbb: import org.apache.activemq.command.ActiveMQTempQueue;
1:8f4ebbb: import org.apache.activemq.command.ActiveMQTempTopic;
1:8f4ebbb: import org.apache.activemq.command.ActiveMQTopic;
1:8f4ebbb: import org.apache.activemq.util.LRUCache;
1:8f4ebbb: 
1:8f4ebbb: /**
1:8f4ebbb:  * A view into the running Broker
1:8f4ebbb:  */
1:8f4ebbb: public class MessageBrokerView  {
1:8f4ebbb:     private final BrokerService brokerService;
1:6df0255:     private final Map<ActiveMQDestination,BrokerDestinationView> destinationViewMap = new LRUCache<ActiveMQDestination, BrokerDestinationView>();
1:56070af: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * Create a view of a running Broker
1:56070af:      * @param brokerService
1:56070af:      */
1:56070af:     public MessageBrokerView(BrokerService brokerService){
1:8f4ebbb:         this.brokerService = brokerService;
1:56070af:         if (brokerService == null){
1:56070af:             throw new NullPointerException("BrokerService is null");
1:56070af:         }
1:56070af:         if (!brokerService.isStarted()){
1:56070af:             throw new IllegalStateException("BrokerService " + brokerService.getBrokerName() + " is not started");
1:56070af:         }
2:8f4ebbb:     }
1:56070af: 
1:0a5b143:     /**
1:0a5b143:      * Create a view of a running Broker
1:0a5b143:      * @param brokerName
1:0a5b143:      */
1:0a5b143:     public MessageBrokerView(String brokerName){
1:0a5b143:         this.brokerService = BrokerRegistry.getInstance().lookup(brokerName);
1:0a5b143:         if (brokerService == null){
1:0a5b143:             throw new NullPointerException("BrokerService is null");
1:0a5b143:         }
1:0a5b143:         if (!brokerService.isStarted()){
1:0a5b143:             throw new IllegalStateException("BrokerService " + brokerService.getBrokerName() + " is not started");
1:0a5b143:         }
1:0a5b143:     }
1:0a5b143: 
1:0a5b143: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the brokerName
1:56070af:      */
1:8f4ebbb:     public String getBrokerName(){
1:8f4ebbb:         return brokerService.getBrokerName();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the unique id of the Broker
1:56070af:      */
1:56070af:     public String getBrokerId(){
1:56070af:         try {
1:56070af:             return brokerService.getBroker().getBrokerId().toString();
1:56070af:         } catch (Exception e) {
1:56070af:             return "";
1:56070af:         }
1:56070af:     }
1:56070af: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the memory used by the Broker as a percentage
1:56070af:      */
1:8f4ebbb:     public int getMemoryPercentUsage() {
1:8f4ebbb:         return brokerService.getSystemUsage().getMemoryUsage().getPercentUsage();
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return  the space used by the Message Store as a percentage
1:56070af:      */
1:8f4ebbb: 
1:8f4ebbb:     public int getStorePercentUsage() {
1:8f4ebbb:         return brokerService.getSystemUsage().getStoreUsage().getPercentUsage();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the space used by the store for temporary messages as a percentage
1:56070af:      */
1:8f4ebbb:     public int getTempPercentUsage() {
1:8f4ebbb:         return brokerService.getSystemUsage().getTempUsage().getPercentUsage();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the space used by the store of scheduled messages
1:56070af:      */
1:8f4ebbb:     public int getJobSchedulerStorePercentUsage() {
1:8f4ebbb:         return brokerService.getSystemUsage().getJobSchedulerUsage().getPercentUsage();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return true if the Broker isn't using an in-memory store only for messages
1:56070af:      */
1:8f4ebbb:     public boolean isPersistent() {
1:8f4ebbb:         return brokerService.isPersistent();
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public BrokerService getBrokerService(){
1:8f4ebbb:         return brokerService;
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * Retrieve a set of all Destinations be used by the Broker
1:56070af:      * @return  all Destinations
1:56070af:      */
1:8f4ebbb:     public Set<ActiveMQDestination> getDestinations(){
1:8f4ebbb:         Set<ActiveMQDestination> result;
1:8f4ebbb: 
2:8f4ebbb:         try {
1:8f4ebbb:             ActiveMQDestination[] destinations =  brokerService.getBroker().getDestinations();
1:8f4ebbb:             result = new HashSet<ActiveMQDestination>();
1:8f4ebbb:             Collections.addAll(result, destinations);
1:8f4ebbb:         }catch (Exception e){
1:8f4ebbb:            result = Collections.emptySet();
1:8f4ebbb:         }
1:8f4ebbb:         return result;
1:8f4ebbb:     }
1:56070af: 
1:56070af:     /**
1:56070af:      * Retrieve a set of all Topics be used by the Broker
1:56070af:      * @return  all Topics
1:56070af:      */
1:56070af: 
1:8f4ebbb:     public Set<ActiveMQTopic> getTopics(){
1:8f4ebbb:         Set<ActiveMQTopic> result = new HashSet<ActiveMQTopic>();
1:8f4ebbb:         for (ActiveMQDestination destination:getDestinations()){
1:8f4ebbb:             if (destination.isTopic() && !destination.isTemporary()){
1:8f4ebbb:                 result.add((ActiveMQTopic) destination);
1:8f4ebbb:             }
1:8f4ebbb:         }
1:8f4ebbb:         return result;
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * Retrieve a set of all Queues be used by the Broker
1:56070af:      * @return  all Queues
1:56070af:      */
1:56070af: 
1:8f4ebbb:     public Set<ActiveMQQueue> getQueues(){
1:8f4ebbb:         Set<ActiveMQQueue> result = new HashSet<ActiveMQQueue>();
1:8f4ebbb:         for (ActiveMQDestination destination:getDestinations()){
1:8f4ebbb:             if (destination.isQueue() && !destination.isTemporary()){
1:8f4ebbb:                 result.add((ActiveMQQueue) destination);
1:8f4ebbb:             }
1:8f4ebbb:         }
1:8f4ebbb:         return result;
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * Retrieve a set of all TemporaryTopics be used by the Broker
1:56070af:      * @return  all TemporaryTopics
1:56070af:      */
1:8f4ebbb:     public Set<ActiveMQTempTopic> getTempTopics(){
1:8f4ebbb:         Set<ActiveMQTempTopic> result = new HashSet<ActiveMQTempTopic>();
1:8f4ebbb:         for (ActiveMQDestination destination:getDestinations()){
2:8f4ebbb:             if (destination.isTopic() && destination.isTemporary()){
1:8f4ebbb:                 result.add((ActiveMQTempTopic) destination);
1:8f4ebbb:             }
1:8f4ebbb:         }
1:8f4ebbb:         return result;
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * Retrieve a set of all TemporaryQueues be used by the Broker
1:56070af:      * @return  all TemporaryQueues
1:56070af:      */
1:8f4ebbb:     public Set<ActiveMQTempQueue> getTempQueues(){
1:8f4ebbb:         Set<ActiveMQTempQueue> result = new HashSet<ActiveMQTempQueue>();
1:8f4ebbb:         for (ActiveMQDestination destination:getDestinations()){
1:6df0255:             if (destination.isQueue() && destination.isTemporary()){
1:8f4ebbb:                 result.add((ActiveMQTempQueue) destination);
1:8f4ebbb:             }
1:8f4ebbb:         }
1:8f4ebbb:         return result;
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     /**
1:8f4ebbb:      * It will be assumed the destinationName is prepended with topic:// or queue:// - but
1:8f4ebbb:      * will default to a Queue
1:8f4ebbb:      * @param destinationName
1:8f4ebbb:      * @return the BrokerDestinationView associated with the destinationName
1:56070af:      * @throws Exception
1:8f4ebbb:      */
1:8f4ebbb: 
1:56070af:     public BrokerDestinationView getDestinationView(String destinationName)   throws Exception{
1:8f4ebbb:         return getDestinationView(destinationName,ActiveMQDestination.QUEUE_TYPE);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     /**
1:8f4ebbb:      * Get the BrokerDestinationView associated with the topic
1:8f4ebbb:      * @param destinationName
1:8f4ebbb:      * @return  BrokerDestinationView
1:56070af:      * @throws Exception
1:8f4ebbb:      */
1:8f4ebbb: 
1:56070af:     public BrokerDestinationView getTopicDestinationView(String destinationName)   throws Exception{
1:8f4ebbb:         return getDestinationView(destinationName,ActiveMQDestination.TOPIC_TYPE);
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     /**
1:8f4ebbb:      * Get the BrokerDestinationView associated with the queue
1:8f4ebbb:      * @param destinationName
1:8f4ebbb:      * @return  BrokerDestinationView
1:56070af:      * @throws Exception
1:8f4ebbb:      */
1:8f4ebbb: 
1:56070af:     public BrokerDestinationView getQueueDestinationView(String destinationName) throws Exception{
1:8f4ebbb:         return getDestinationView(destinationName,ActiveMQDestination.QUEUE_TYPE);
1:8f4ebbb:     }
1:56070af: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * Get the BrokerDestinationView associated with destination
1:56070af:      * @param destinationName
1:56070af:      * @param type  expects either ActiveMQDestination.QUEUE_TYPE, ActiveMQDestination.TOPIC_TYPE etc
1:56070af:      * @return  BrokerDestinationView
1:56070af:      * @throws Exception
1:56070af:      */
1:56070af:     public BrokerDestinationView getDestinationView (String destinationName, byte type)  throws Exception {
1:8f4ebbb:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName,type);
1:8f4ebbb:         return getDestinationView(activeMQDestination);
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      *  Get the BrokerDestinationView associated with destination
1:56070af:      * @param activeMQDestination
1:56070af:      * @return   BrokerDestinationView
1:56070af:      * @throws Exception
1:56070af:      */
1:56070af:     public BrokerDestinationView getDestinationView (ActiveMQDestination activeMQDestination) throws Exception {
1:8f4ebbb:         BrokerDestinationView view = null;
1:8f4ebbb:         synchronized(destinationViewMap){
1:8f4ebbb:             view = destinationViewMap.get(activeMQDestination);
1:8f4ebbb:             if (view==null){
1:56070af: 
1:8f4ebbb:                     /**
1:8f4ebbb:                      * If auto destinatons are allowed (on by default) - this will create a Broker Destination
1:8f4ebbb:                      * if it doesn't exist. We could query the regionBroker first to check - but this affords more
1:8f4ebbb:                      * flexibility - e.g. you might want to set up a query on destination statistics before any
1:8f4ebbb:                      * messaging clients have started (and hence created the destination themselves
1:8f4ebbb:                      */
1:8f4ebbb:                     Destination destination = brokerService.getDestination(activeMQDestination);
1:56070af:                     view = new BrokerDestinationView(destination);
1:56070af:                     destinationViewMap.put(activeMQDestination,view);
1:56070af: 
1:8f4ebbb:             }
1:8f4ebbb:         }
1:8f4ebbb:         return view;
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6df0255
/////////////////////////////////////////////////////////////////////////
1:     private final Map<ActiveMQDestination,BrokerDestinationView> destinationViewMap = new LRUCache<ActiveMQDestination, BrokerDestinationView>();
/////////////////////////////////////////////////////////////////////////
1:             if (destination.isQueue() && destination.isTemporary()){
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
author:rajdavies
-------------------------------------------------------------------------------
commit:0a5b143
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerRegistry;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Create a view of a running Broker
1:      * @param brokerName
1:      */
1:     public MessageBrokerView(String brokerName){
1:         this.brokerService = BrokerRegistry.getInstance().lookup(brokerName);
1:         if (brokerService == null){
1:             throw new NullPointerException("BrokerService is null");
1:         }
1:         if (!brokerService.isStarted()){
1:             throw new IllegalStateException("BrokerService " + brokerService.getBrokerName() + " is not started");
1:         }
1:     }
1: 
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:56070af
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Create a view of a running Broker
1:      * @param brokerService
1:      */
1:     public MessageBrokerView(BrokerService brokerService){
1:         if (brokerService == null){
1:             throw new NullPointerException("BrokerService is null");
1:         }
1:         if (!brokerService.isStarted()){
1:             throw new IllegalStateException("BrokerService " + brokerService.getBrokerName() + " is not started");
1:         }
1: 
1:     /**
1:      * @return the brokerName
1:      */
1:     /**
1:      * @return the unique id of the Broker
1:      */
1:     public String getBrokerId(){
1:         try {
1:             return brokerService.getBroker().getBrokerId().toString();
1:         } catch (Exception e) {
1:             return "";
1:         }
1:     }
1: 
1:     /**
1:      * @return the memory used by the Broker as a percentage
1:      */
1:     /**
1:      * @return  the space used by the Message Store as a percentage
1:      */
1:     /**
1:      * @return the space used by the store for temporary messages as a percentage
1:      */
1:     /**
1:      * @return the space used by the store of scheduled messages
1:      */
1:     /**
1:      * @return true if the Broker isn't using an in-memory store only for messages
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Retrieve a set of all Destinations be used by the Broker
1:      * @return  all Destinations
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Retrieve a set of all Topics be used by the Broker
1:      * @return  all Topics
1:      */
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Retrieve a set of all Queues be used by the Broker
1:      * @return  all Queues
1:      */
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Retrieve a set of all TemporaryTopics be used by the Broker
1:      * @return  all TemporaryTopics
1:      */
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Retrieve a set of all TemporaryQueues be used by the Broker
1:      * @return  all TemporaryQueues
1:      */
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
1:     public BrokerDestinationView getDestinationView(String destinationName)   throws Exception{
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
1:     public BrokerDestinationView getTopicDestinationView(String destinationName)   throws Exception{
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
1:     public BrokerDestinationView getQueueDestinationView(String destinationName) throws Exception{
1: 
1:     /**
1:      * Get the BrokerDestinationView associated with destination
1:      * @param destinationName
1:      * @param type  expects either ActiveMQDestination.QUEUE_TYPE, ActiveMQDestination.TOPIC_TYPE etc
1:      * @return  BrokerDestinationView
1:      * @throws Exception
1:      */
1:     public BrokerDestinationView getDestinationView (String destinationName, byte type)  throws Exception {
1:     /**
1:      *  Get the BrokerDestinationView associated with destination
1:      * @param activeMQDestination
1:      * @return   BrokerDestinationView
1:      * @throws Exception
1:      */
1:     public BrokerDestinationView getDestinationView (ActiveMQDestination activeMQDestination) throws Exception {
1: 
/////////////////////////////////////////////////////////////////////////
1:                     view = new BrokerDestinationView(destination);
1:                     destinationViewMap.put(activeMQDestination,view);
1: 
commit:8f4ebbb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.view;
1: 
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTempQueue;
1: import org.apache.activemq.command.ActiveMQTempTopic;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.LRUCache;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * A view into the running Broker
1:  */
1: public class MessageBrokerView  {
0:     private static final Logger LOG = LoggerFactory.getLogger(MessageBrokerView.class);
1:     private final BrokerService brokerService;
0:     private Map<ActiveMQDestination,BrokerDestinationView> destinationViewMap = new LRUCache<ActiveMQDestination, BrokerDestinationView>();
1: 
0:     MessageBrokerView(BrokerService brokerService){
1:         this.brokerService = brokerService;
1:     }
1: 
1:     public String getBrokerName(){
1:         return brokerService.getBrokerName();
1:     }
1: 
1: 
1:     public int getMemoryPercentUsage() {
1:         return brokerService.getSystemUsage().getMemoryUsage().getPercentUsage();
1:     }
1: 
1: 
1: 
1:     public int getStorePercentUsage() {
1:         return brokerService.getSystemUsage().getStoreUsage().getPercentUsage();
1:     }
1: 
1:     public int getTempPercentUsage() {
1:         return brokerService.getSystemUsage().getTempUsage().getPercentUsage();
1:     }
1: 
1: 
1:     public int getJobSchedulerStorePercentUsage() {
1:         return brokerService.getSystemUsage().getJobSchedulerUsage().getPercentUsage();
1:     }
1: 
1:     public boolean isPersistent() {
1:         return brokerService.isPersistent();
1:     }
1: 
1:     public BrokerService getBrokerService(){
1:         return brokerService;
1:     }
1: 
1:     public Set<ActiveMQDestination> getDestinations(){
1:         Set<ActiveMQDestination> result;
1: 
1:         try {
1:             ActiveMQDestination[] destinations =  brokerService.getBroker().getDestinations();
1:             result = new HashSet<ActiveMQDestination>();
1:             Collections.addAll(result, destinations);
1:         }catch (Exception e){
1:            result = Collections.emptySet();
1:         }
1:         return result;
1:     }
1: 
1:     public Set<ActiveMQTopic> getTopics(){
1:         Set<ActiveMQTopic> result = new HashSet<ActiveMQTopic>();
1:         for (ActiveMQDestination destination:getDestinations()){
1:             if (destination.isTopic() && !destination.isTemporary()){
1:                 result.add((ActiveMQTopic) destination);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     public Set<ActiveMQQueue> getQueues(){
1:         Set<ActiveMQQueue> result = new HashSet<ActiveMQQueue>();
1:         for (ActiveMQDestination destination:getDestinations()){
1:             if (destination.isQueue() && !destination.isTemporary()){
1:                 result.add((ActiveMQQueue) destination);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     public Set<ActiveMQTempTopic> getTempTopics(){
1:         Set<ActiveMQTempTopic> result = new HashSet<ActiveMQTempTopic>();
1:         for (ActiveMQDestination destination:getDestinations()){
1:             if (destination.isTopic() && destination.isTemporary()){
1:                 result.add((ActiveMQTempTopic) destination);
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     public Set<ActiveMQTempQueue> getTempQueues(){
1:         Set<ActiveMQTempQueue> result = new HashSet<ActiveMQTempQueue>();
1:         for (ActiveMQDestination destination:getDestinations()){
1:             if (destination.isTopic() && destination.isTemporary()){
1:                 result.add((ActiveMQTempQueue) destination);
1:             }
1:         }
1:         return result;
1:     }
1: 
1: 
1:     /**
1:      * It will be assumed the destinationName is prepended with topic:// or queue:// - but
1:      * will default to a Queue
1:      * @param destinationName
1:      * @return the BrokerDestinationView associated with the destinationName
1:      */
1: 
0:     public BrokerDestinationView getDestinationView(String destinationName){
1:         return getDestinationView(destinationName,ActiveMQDestination.QUEUE_TYPE);
1:     }
1: 
1:     /**
1:      * Get the BrokerDestinationView associated with the topic
1:      * @param destinationName
1:      * @return  BrokerDestinationView
1:      */
1: 
0:     public BrokerDestinationView getTopicDestinationView(String destinationName){
1:         return getDestinationView(destinationName,ActiveMQDestination.TOPIC_TYPE);
1:     }
1: 
1:     /**
1:      * Get the BrokerDestinationView associated with the queue
1:      * @param destinationName
1:      * @return  BrokerDestinationView
1:      */
1: 
0:     public BrokerDestinationView getQueueDestinationView(String destinationName){
1:         return getDestinationView(destinationName,ActiveMQDestination.QUEUE_TYPE);
1:     }
1: 
0:     public BrokerDestinationView getDestinationView (String destinationName, byte type)  {
1:         ActiveMQDestination activeMQDestination = ActiveMQDestination.createDestination(destinationName,type);
1:         return getDestinationView(activeMQDestination);
1:     }
1: 
0:     public BrokerDestinationView getDestinationView (ActiveMQDestination activeMQDestination)  {
1:         BrokerDestinationView view = null;
1:         synchronized(destinationViewMap){
1:             view = destinationViewMap.get(activeMQDestination);
1:             if (view==null){
1:                 try {
1:                     /**
1:                      * If auto destinatons are allowed (on by default) - this will create a Broker Destination
1:                      * if it doesn't exist. We could query the regionBroker first to check - but this affords more
1:                      * flexibility - e.g. you might want to set up a query on destination statistics before any
1:                      * messaging clients have started (and hence created the destination themselves
1:                      */
1:                     Destination destination = brokerService.getDestination(activeMQDestination);
0:                     BrokerDestinationView brokerDestinationView = new BrokerDestinationView(destination);
0:                     destinationViewMap.put(activeMQDestination,brokerDestinationView);
0:                 } catch (Exception e) {
0:                    LOG.warn("Failed to get Destination for " + activeMQDestination,e);
1:                 }
0:                 destinationViewMap.put(activeMQDestination,view);
1:             }
1:         }
1:         return view;
1:     }
1: 
1: 
1: 
1: 
1: }
============================================================================