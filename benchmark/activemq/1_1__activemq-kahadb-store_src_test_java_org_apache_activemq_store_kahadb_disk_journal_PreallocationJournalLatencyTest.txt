1:930a74c: /**
1:930a74c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:930a74c:  * contributor license agreements.  See the NOTICE file distributed with
1:930a74c:  * this work for additional information regarding copyright ownership.
1:930a74c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:930a74c:  * (the "License"); you may not use this file except in compliance with
1:930a74c:  * the License.  You may obtain a copy of the License at
1:930a74c:  *
1:930a74c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:930a74c:  *
1:930a74c:  * Unless required by applicable law or agreed to in writing, software
1:930a74c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:930a74c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:930a74c:  * See the License for the specific language governing permissions and
1:930a74c:  * limitations under the License.
1:930a74c:  */
1:930a74c: package org.apache.activemq.store.kahadb.disk.journal;
1:930a74c: 
1:930a74c: import org.apache.activemq.management.TimeStatisticImpl;
1:930a74c: import org.apache.activemq.store.kahadb.KahaDBStore;
1:930a74c: import org.apache.activemq.util.ByteSequence;
1:930a74c: import org.apache.activemq.util.Wait;
1:930a74c: import org.junit.Test;
1:930a74c: import org.slf4j.Logger;
1:930a74c: import org.slf4j.LoggerFactory;
1:930a74c: 
1:930a74c: import java.io.File;
1:930a74c: import java.util.Random;
1:930a74c: 
1:930a74c: import static org.junit.Assert.assertTrue;
1:930a74c: 
1:930a74c: public class PreallocationJournalLatencyTest {
1:930a74c: 
1:930a74c:     private static final Logger LOG = LoggerFactory.getLogger(PreallocationJournalLatencyTest.class);
1:930a74c:     final Random rand = new Random();
1:930a74c: 
1:930a74c:     @Test
1:930a74c:     public void preallocationLatency() throws Exception {
1:930a74c: 
1:930a74c:         TimeStatisticImpl sparse = executeTest(Journal.PreallocationStrategy.SPARSE_FILE.name());
1:930a74c:         TimeStatisticImpl chunked_zeros = executeTest(Journal.PreallocationStrategy.CHUNKED_ZEROS.name());
1:62bdbb0:         //TimeStatisticImpl zeros = executeTest(Journal.PreallocationStrategy.ZEROS.name());
1:62bdbb0:         TimeStatisticImpl kernel = executeTest(Journal.PreallocationStrategy.OS_KERNEL_COPY.name());
1:62bdbb0: 
1:930a74c:         LOG.info("  sparse: " + sparse);
1:930a74c:         LOG.info(" chunked: " + chunked_zeros);
1:62bdbb0:         //LOG.info("   zeros: " + zeros);
1:62bdbb0:         LOG.info("  kernel: " + kernel);
1:930a74c: 
1:930a74c:     }
1:930a74c: 
1:930a74c:     private TimeStatisticImpl executeTest(String preallocationStrategy)throws Exception {
1:930a74c:         int randInt = rand.nextInt(100);
1:930a74c:         File dataDirectory = new File("./target/activemq-data/kahadb" + randInt);
1:930a74c: 
1:62bdbb0:         final KahaDBStore store = new KahaDBStore();
1:62bdbb0:         store.setCheckpointInterval(5000);
1:62bdbb0:         store.setJournalMaxFileLength(32*1204*1024);
1:930a74c:         store.deleteAllMessages();
1:930a74c:         store.setDirectory(dataDirectory);
1:930a74c:         store.setPreallocationStrategy(preallocationStrategy);
1:62bdbb0:         store.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL_ASYNC.name());
1:930a74c:         store.start();
1:930a74c: 
1:930a74c:         final File journalLog = new File(dataDirectory, "db-1.log");
1:930a74c:         assertTrue("file exists", Wait.waitFor(new Wait.Condition() {
1:930a74c:             @Override
1:930a74c:             public boolean isSatisified() throws Exception {
1:930a74c:                 return journalLog.exists();
1:930a74c:             }
1:930a74c:         }));
1:930a74c: 
1:930a74c:         final Journal journal = store.getJournal();
1:62bdbb0:         ByteSequence byteSequence = new ByteSequence(new byte[16*1024]);
1:930a74c: 
1:930a74c:         TimeStatisticImpl timeStatistic = new TimeStatisticImpl("append", "duration");
1:43d8205:         for (int i=0;i<5000; i++) {
1:930a74c:             final long start = System.currentTimeMillis();
1:930a74c:             journal.write(byteSequence, true);
1:930a74c:             timeStatistic.addTime(System.currentTimeMillis() - start);
1:930a74c:         }
1:930a74c:         LOG.info("current journal dataFile id: " + journal.getCurrentDataFileId());
1:930a74c:         store.stop();
1:930a74c:         return timeStatistic;
1:930a74c:     }
1:930a74c: 
1:930a74c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:62bdbb0
/////////////////////////////////////////////////////////////////////////
1:         //TimeStatisticImpl zeros = executeTest(Journal.PreallocationStrategy.ZEROS.name());
1:         TimeStatisticImpl kernel = executeTest(Journal.PreallocationStrategy.OS_KERNEL_COPY.name());
1: 
1:         //LOG.info("   zeros: " + zeros);
1:         LOG.info("  kernel: " + kernel);
/////////////////////////////////////////////////////////////////////////
1:         final KahaDBStore store = new KahaDBStore();
1:         store.setCheckpointInterval(5000);
1:         store.setJournalMaxFileLength(32*1204*1024);
1:         store.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL_ASYNC.name());
/////////////////////////////////////////////////////////////////////////
1:         ByteSequence byteSequence = new ByteSequence(new byte[16*1024]);
commit:43d8205
/////////////////////////////////////////////////////////////////////////
0:         store.setJournalMaxFileLength(16*1204*1024);
/////////////////////////////////////////////////////////////////////////
1:         for (int i=0;i<5000; i++) {
commit:930a74c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.disk.journal;
1: 
1: import org.apache.activemq.management.TimeStatisticImpl;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.File;
1: import java.util.Random;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public class PreallocationJournalLatencyTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(PreallocationJournalLatencyTest.class);
1:     final Random rand = new Random();
1: 
1:     @Test
1:     public void preallocationLatency() throws Exception {
1: 
1:         TimeStatisticImpl sparse = executeTest(Journal.PreallocationStrategy.SPARSE_FILE.name());
1:         TimeStatisticImpl chunked_zeros = executeTest(Journal.PreallocationStrategy.CHUNKED_ZEROS.name());
0:         TimeStatisticImpl zeros = executeTest(Journal.PreallocationStrategy.ZEROS.name());
1:         LOG.info("  sparse: " + sparse);
1:         LOG.info(" chunked: " + chunked_zeros);
0:         LOG.info("   zeros: " + zeros);
1: 
1:     }
1: 
1:     private TimeStatisticImpl executeTest(String preallocationStrategy)throws Exception {
1:         int randInt = rand.nextInt(100);
1:         File dataDirectory = new File("./target/activemq-data/kahadb" + randInt);
1: 
0:         KahaDBStore store = new KahaDBStore();
1:         store.deleteAllMessages();
1:         store.setDirectory(dataDirectory);
1:         store.setPreallocationStrategy(preallocationStrategy);
1:         store.start();
1: 
1:         final File journalLog = new File(dataDirectory, "db-1.log");
1:         assertTrue("file exists", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return journalLog.exists();
1:             }
1:         }));
1: 
1:         final Journal journal = store.getJournal();
0:         ByteSequence byteSequence = new ByteSequence(new byte[8*1024]);
1: 
1:         TimeStatisticImpl timeStatistic = new TimeStatisticImpl("append", "duration");
0:         for (int i=0;i<300000; i++) {
1:             final long start = System.currentTimeMillis();
1:             journal.write(byteSequence, true);
1:             timeStatistic.addTime(System.currentTimeMillis() - start);
1:         }
1:         LOG.info("current journal dataFile id: " + journal.getCurrentDataFileId());
1:         store.stop();
1:         return timeStatistic;
1:     }
1: 
1: }
============================================================================