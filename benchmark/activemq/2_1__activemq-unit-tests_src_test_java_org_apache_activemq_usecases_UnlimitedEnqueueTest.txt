1:5619cd0: /**
1:5619cd0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5619cd0:  * contributor license agreements.  See the NOTICE file distributed with
1:5619cd0:  * this work for additional information regarding copyright ownership.
1:5619cd0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5619cd0:  * (the "License"); you may not use this file except in compliance with
1:5619cd0:  * the License.  You may obtain a copy of the License at
1:5619cd0:  *
1:5619cd0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5619cd0:  *
1:5619cd0:  * Unless required by applicable law or agreed to in writing, software
1:5619cd0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5619cd0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5619cd0:  * See the License for the specific language governing permissions and
1:5619cd0:  * limitations under the License.
1:5619cd0:  */
2:5619cd0: 
1:5619cd0: package org.apache.activemq.usecases;
1:5619cd0: 
1:5619cd0: import java.util.ArrayList;
1:5619cd0: import java.util.List;
1:5619cd0: import java.util.concurrent.ExecutorService;
1:5619cd0: import java.util.concurrent.Executors;
1:5619cd0: import java.util.concurrent.TimeUnit;
1:5619cd0: 
1:5619cd0: import javax.jms.BytesMessage;
1:5619cd0: import javax.jms.Connection;
1:5619cd0: import javax.jms.DeliveryMode;
1:5619cd0: import javax.jms.Destination;
1:5619cd0: import javax.jms.JMSException;
1:5619cd0: import javax.jms.MessageProducer;
1:5619cd0: import javax.jms.ResourceAllocationException;
1:5619cd0: import javax.jms.Session;
1:5619cd0: 
1:5619cd0: import org.apache.activemq.ActiveMQConnectionFactory;
1:5619cd0: import org.apache.activemq.broker.BrokerService;
1:5619cd0: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1:5619cd0: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:5619cd0: import org.apache.activemq.broker.region.policy.PolicyMap;
1:cc7ea7f: import org.apache.activemq.util.Wait;
1:5619cd0: import org.junit.Before;
1:5619cd0: import org.junit.Test;
1:cc7ea7f: import org.slf4j.Logger;
1:cc7ea7f: import org.slf4j.LoggerFactory;
1:cc7ea7f: 
1:cc7ea7f: import static org.junit.Assert.assertTrue;
1:5619cd0: 
1:5619cd0: public class UnlimitedEnqueueTest  {
1:5619cd0: 
1:cc7ea7f:     private static final Logger LOG = LoggerFactory.getLogger(UnlimitedEnqueueTest.class);
1:5619cd0:     BrokerService brokerService = null;
1:551efc9:     final long numMessages = 5000;
1:5619cd0:     final long numThreads = 10;
1:cc7ea7f:     final int payLoadSize = 100*1024;
1:5619cd0: 
1:5619cd0:     @Test
1:5619cd0:     public void testEnqueueIsOnlyLimitedByDisk() throws Exception {
1:5619cd0:         ExecutorService executor = Executors.newCachedThreadPool();
1:5619cd0:         for (int i=0; i<numThreads; i++) {
1:5619cd0:             executor.execute(new Producer(numMessages/numThreads));
1:5619cd0:         }
1:cc7ea7f: 
1:cc7ea7f:         assertTrue("Temp Store is filling ", Wait.waitFor(new Wait.Condition(){
1:cc7ea7f:             @Override
1:cc7ea7f:             public boolean isSatisified() throws Exception {
1:cc7ea7f:                 LOG.info("Temp Usage,  " + brokerService.getSystemUsage().getTempUsage() + ", full=" + brokerService.getSystemUsage().getTempUsage().isFull() + ", % usage: " + brokerService.getSystemUsage().getTempUsage().getPercentUsage());
1:cc7ea7f:                 return brokerService.getSystemUsage().getTempUsage().getPercentUsage() > 1;
1:cc7ea7f:             }
1:cc7ea7f:         }, TimeUnit.MINUTES.toMillis(4)));
1:cc7ea7f:         executor.shutdownNow();
1:5619cd0:     }
1:5619cd0:     
1:5619cd0:     @Before
1:5619cd0:     public void createBrokerService() throws Exception {
1:5619cd0:         brokerService = new BrokerService();
1:5619cd0:         brokerService.setDeleteAllMessagesOnStartup(true);
1:5619cd0:         brokerService.setAdvisorySupport(false);
1:5619cd0:         
1:5619cd0:         // optional, reduce the usage limit so that spooling will occur faster
1:5619cd0:         brokerService.getSystemUsage().getMemoryUsage().setLimit(10 * 1024 * 1024);
1:551efc9:         brokerService.getSystemUsage().getTempUsage().setLimit((numMessages * payLoadSize) + (1000 * payLoadSize));
1:cc7ea7f: 
1:5619cd0:         PolicyMap policyMap = new PolicyMap();
1:5619cd0:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:5619cd0:         PolicyEntry policy = new PolicyEntry();
1:5619cd0:         
1:5619cd0:         // NB: ensure queue cursor limit is below the default 70% usage that the destination will use
1:5619cd0:         // if they are the same, the queue memory limit and flow control will kick in first
1:5619cd0:         policy.setCursorMemoryHighWaterMark(20);
1:5619cd0:         
1:5619cd0:         // on by default
1:5619cd0:         //policy.setProducerFlowControl(true);
1:5619cd0:         policy.setQueue(">");
1:5619cd0:         
1:5619cd0:         // policy that will spool references to disk
1:5619cd0:         policy.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:5619cd0:         entries.add(policy);
1:5619cd0:         policyMap.setPolicyEntries(entries);
1:5619cd0:         brokerService.setDestinationPolicy(policyMap);
1:5619cd0:         
1:5619cd0:         brokerService.start();
1:5619cd0:     }
1:5619cd0:     
1:5619cd0:     public class Producer implements Runnable{
1:5619cd0: 
1:5619cd0:         private final long numberOfMessages;
1:5619cd0: 
1:5619cd0:         public Producer(final long n){
1:5619cd0:             this.numberOfMessages = n;
1:5619cd0:         }
1:5619cd0: 
1:5619cd0:         public void run(){
1:5619cd0:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:5619cd0:             try {
1:5619cd0:                 Connection conn = factory.createConnection();
1:5619cd0:                 conn.start();
1:cc7ea7f:                 byte[] bytes = new byte[payLoadSize];
1:5619cd0:                 for (int i = 0; i < numberOfMessages; i++) {
1:5619cd0:                     Session session = conn.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:5619cd0:                     Destination destination = session.createQueue("test-queue");
1:5619cd0:                     MessageProducer producer = session.createProducer(destination);
1:5619cd0:                     producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:5619cd0:                     BytesMessage message = session.createBytesMessage();
1:5619cd0:                     message.writeBytes(bytes);
1:5619cd0:                     try {
1:5619cd0:                         producer.send(message);
1:5619cd0:                     } catch (ResourceAllocationException e) {
1:5619cd0:                         e.printStackTrace();
1:5619cd0:                     }
1:5619cd0:                     session.close();
1:5619cd0:                 }
1:5619cd0:             } catch (JMSException e) {
1:cc7ea7f:                 // expect interrupted exception on shutdownNow
1:5619cd0:             }
1:5619cd0:         }
1:5619cd0:     }
1:5619cd0: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:551efc9
/////////////////////////////////////////////////////////////////////////
1:     final long numMessages = 5000;
/////////////////////////////////////////////////////////////////////////
1:         brokerService.getSystemUsage().getTempUsage().setLimit((numMessages * payLoadSize) + (1000 * payLoadSize));
commit:cc7ea7f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import static org.junit.Assert.assertTrue;
1:     private static final Logger LOG = LoggerFactory.getLogger(UnlimitedEnqueueTest.class);
1:     final int payLoadSize = 100*1024;
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTrue("Temp Store is filling ", Wait.waitFor(new Wait.Condition(){
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Temp Usage,  " + brokerService.getSystemUsage().getTempUsage() + ", full=" + brokerService.getSystemUsage().getTempUsage().isFull() + ", % usage: " + brokerService.getSystemUsage().getTempUsage().getPercentUsage());
1:                 return brokerService.getSystemUsage().getTempUsage().getPercentUsage() > 1;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(4)));
1:         executor.shutdownNow();
/////////////////////////////////////////////////////////////////////////
0:         brokerService.getSystemUsage().getTempUsage().setLimit(numMessages * payLoadSize * 2);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 byte[] bytes = new byte[payLoadSize];
/////////////////////////////////////////////////////////////////////////
1:                 // expect interrupted exception on shutdownNow
commit:5619cd0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.ResourceAllocationException;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class UnlimitedEnqueueTest  {
1: 
1:     BrokerService brokerService = null;
0:     final long numMessages = 50000;
1:     final long numThreads = 10;
1: 
1:     @Test
1:     public void testEnqueueIsOnlyLimitedByDisk() throws Exception {
1:         ExecutorService executor = Executors.newCachedThreadPool();
1:         for (int i=0; i<numThreads; i++) {
1:             executor.execute(new Producer(numMessages/numThreads));
1:         }
1:         
0:         executor.shutdown();
0:         executor.awaitTermination(30*60, TimeUnit.SECONDS);
1:     }
1:     
1:     @Before
1:     public void createBrokerService() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setAdvisorySupport(false);
1:         
1:         // optional, reduce the usage limit so that spooling will occur faster
1:         brokerService.getSystemUsage().getMemoryUsage().setLimit(10 * 1024 * 1024);
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry policy = new PolicyEntry();
1:         
1:         // NB: ensure queue cursor limit is below the default 70% usage that the destination will use
1:         // if they are the same, the queue memory limit and flow control will kick in first
1:         policy.setCursorMemoryHighWaterMark(20);
1:         
1:         // on by default
1:         //policy.setProducerFlowControl(true);
1:         policy.setQueue(">");
1:         
1:         // policy that will spool references to disk
1:         policy.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:         entries.add(policy);
1:         policyMap.setPolicyEntries(entries);
1:         brokerService.setDestinationPolicy(policyMap);
1:         
1:         brokerService.start();
1:     }
1:     
1:     public class Producer implements Runnable{
1: 
1:         private final long numberOfMessages;
1: 
1:         public Producer(final long n){
1:             this.numberOfMessages = n;
1:         }
1: 
1:         public void run(){
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:             try {
1:                 Connection conn = factory.createConnection();
1:                 conn.start();
1:                 for (int i = 0; i < numberOfMessages; i++) {
1:                     Session session = conn.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:                     Destination destination = session.createQueue("test-queue");
1:                     MessageProducer producer = session.createProducer(destination);
1:                     producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:                     BytesMessage message = session.createBytesMessage();
0:                     byte[] bytes = new byte[1024*10];
1:                     message.writeBytes(bytes);
1:                     try {
1:                         producer.send(message);
1:                     } catch (ResourceAllocationException e) {
1:                         e.printStackTrace();
1:                     }
1:                     session.close();
1:                 }
1:             } catch (JMSException e) {
0:                 throw new RuntimeException(e);
1:             }
1:         }
1:     }
1: }
============================================================================