1:b08ae50: /**
1:b08ae50:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b08ae50:  * contributor license agreements.  See the NOTICE file distributed with
1:b08ae50:  * this work for additional information regarding copyright ownership.
1:b08ae50:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b08ae50:  * (the "License"); you may not use this file except in compliance with
1:b08ae50:  * the License.  You may obtain a copy of the License at
1:b08ae50:  *
1:b08ae50:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b08ae50:  *
1:b08ae50:  * Unless required by applicable law or agreed to in writing, software
1:b08ae50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b08ae50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b08ae50:  * See the License for the specific language governing permissions and
1:b08ae50:  * limitations under the License.
1:b08ae50:  */
1:b08ae50: package org.apache.activemq.blob;
2:b08ae50: 
1:b08ae50: import java.io.IOException;
1:b08ae50: import java.io.InputStream;
1:af159dd: import java.net.HttpURLConnection;
1:b08ae50: import java.net.URL;
1:b08ae50: import javax.jms.JMSException;
1:b08ae50: import org.apache.activemq.command.ActiveMQBlobMessage;
1:b08ae50: 
1:b08ae50: /**
1:b08ae50:  * A default implementation of {@link BlobDownloadStrategy} which uses the URL
1:b08ae50:  * class to download files or streams from a remote URL
1:b08ae50:  */
1:af159dd: public class DefaultBlobDownloadStrategy extends DefaultStrategy implements BlobDownloadStrategy {
1:af159dd: 
1:af159dd:     public DefaultBlobDownloadStrategy(BlobTransferPolicy transferPolicy) {
1:af159dd:         super(transferPolicy);
1:af159dd:     }
1:b08ae50: 
1:b08ae50:     public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException {
1:b08ae50:         URL value = message.getURL();
1:b08ae50:         if (value == null) {
1:b08ae50:             return null;
1:b08ae50:         }
1:b08ae50:         return value.openStream();
1:b08ae50:     }
1:af159dd: 
1:af159dd:     public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
1:af159dd:         URL url = createMessageURL(message);
1:af159dd: 
1:af159dd:         HttpURLConnection connection = (HttpURLConnection)url.openConnection();
1:af159dd:         connection.setRequestMethod("DELETE");
1:b64ac1d:         try {
1:b64ac1d:             connection.connect();
1:b64ac1d:         } catch (IOException e) {
1:b64ac1d:             throw new IOException("DELETE failed on: " + url, e);
1:b64ac1d:         } finally {
1:b64ac1d:             connection.disconnect();
1:b64ac1d:         }
1:af159dd:         if (!isSuccessfulCode(connection.getResponseCode())) {
1:af159dd:             throw new IOException("DELETE was not successful: " + connection.getResponseCode() + " "
1:af159dd:                                   + connection.getResponseMessage());
1:af159dd:         }
1:af159dd:     }
1:af159dd: 
1:b08ae50: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b64ac1d
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             connection.connect();
1:         } catch (IOException e) {
1:             throw new IOException("DELETE failed on: " + url, e);
1:         } finally {
1:             connection.disconnect();
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:af159dd
/////////////////////////////////////////////////////////////////////////
1: import java.net.HttpURLConnection;
/////////////////////////////////////////////////////////////////////////
1: public class DefaultBlobDownloadStrategy extends DefaultStrategy implements BlobDownloadStrategy {
1: 
1:     public DefaultBlobDownloadStrategy(BlobTransferPolicy transferPolicy) {
1:         super(transferPolicy);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
1:         URL url = createMessageURL(message);
1: 
1:         HttpURLConnection connection = (HttpURLConnection)url.openConnection();
1:         connection.setRequestMethod("DELETE");
0:         connection.connect();
0:         connection.disconnect();
1: 
1:         if (!isSuccessfulCode(connection.getResponseCode())) {
1:             throw new IOException("DELETE was not successful: " + connection.getResponseCode() + " "
1:                                   + connection.getResponseMessage());
1:         }
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b08ae50
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import javax.jms.JMSException;
1: import org.apache.activemq.command.ActiveMQBlobMessage;
1: 
1: /**
1:  * A default implementation of {@link BlobDownloadStrategy} which uses the URL
1:  * class to download files or streams from a remote URL
1:  */
0: public class DefaultBlobDownloadStrategy implements BlobDownloadStrategy{
1: 
1:     public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException {
1:         URL value = message.getURL();
1:         if (value == null) {
1:             return null;
1:         }
1:         return value.openStream();
1:     }
1: 
1: }
============================================================================