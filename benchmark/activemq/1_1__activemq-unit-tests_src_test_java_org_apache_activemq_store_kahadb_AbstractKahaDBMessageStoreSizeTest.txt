1:785b16b: /**
1:785b16b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:785b16b:  * contributor license agreements.  See the NOTICE file distributed with
1:785b16b:  * this work for additional information regarding copyright ownership.
1:785b16b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:785b16b:  * (the "License"); you may not use this file except in compliance with
1:785b16b:  * the License.  You may obtain a copy of the License at
1:785b16b:  *
1:785b16b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:785b16b:  *
1:785b16b:  * Unless required by applicable law or agreed to in writing, software
1:785b16b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:785b16b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:785b16b:  * See the License for the specific language governing permissions and
1:785b16b:  * limitations under the License.
1:785b16b:  */
1:785b16b: package org.apache.activemq.store.kahadb;
1:785b16b: 
1:785b16b: import static org.junit.Assert.assertEquals;
1:785b16b: import static org.junit.Assert.assertTrue;
1:785b16b: 
1:785b16b: import java.io.File;
1:785b16b: 
1:785b16b: import org.apache.activemq.store.AbstractMessageStoreSizeTest;
1:785b16b: import org.apache.activemq.store.MessageStore;
1:785b16b: import org.apache.activemq.store.PersistenceAdapter;
1:785b16b: import org.apache.activemq.store.kahadb.disk.util.LocationMarshaller;
1:785b16b: import org.apache.commons.io.FileUtils;
1:785b16b: import org.apache.commons.io.filefilter.TrueFileFilter;
1:785b16b: import org.apache.commons.io.filefilter.WildcardFileFilter;
1:785b16b: import org.junit.Test;
1:785b16b: 
1:785b16b: /**
1:785b16b:  * This test is for AMQ-5748 to verify that {@link MessageStore} implements correctly
1:785b16b:  * compute the size of the messages in the store.
1:785b16b:  *
1:785b16b:  * For KahaDB specifically, the size was not being stored in in the index ({@link LocationMarshaller}).  LocationMarshaller
1:785b16b:  * has been updated to include an option to include the size in the serialized value.  This way the message
1:785b16b:  * size will be persisted in the index and be available between broker restarts without needing to rebuild the index.
1:785b16b:  * Note that the KahaDB version has been incremented from 5 to 6 because the index will need to be rebuild when a version
1:785b16b:  * 5 index is detected since it will be detected as corrupt.
1:785b16b:  *
1:785b16b:  */
1:785b16b: public abstract class AbstractKahaDBMessageStoreSizeTest extends AbstractMessageStoreSizeTest {
1:785b16b: 
1:785b16b:     MessageStore messageStore;
1:785b16b:     PersistenceAdapter store;
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     public void initStore() throws Exception {
1:785b16b:         createStore(true, dataDirectory);
1:785b16b:     }
1:785b16b: 
1:785b16b:     abstract protected void createStore(boolean deleteAllMessages, String directory) throws Exception;
1:785b16b: 
1:785b16b:     abstract protected String getVersion5Dir();
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     public void destroyStore() throws Exception {
1:785b16b:         if (store != null) {
1:785b16b:             store.stop();
1:785b16b:         }
1:785b16b:     }
1:785b16b: 
1:785b16b: 
1:785b16b:     /**
1:785b16b:      * This method tests that the message sizes exist for all messages that exist after messages are recovered
1:785b16b:      * off of disk.
1:785b16b:      *
1:785b16b:      * @throws Exception
1:785b16b:      */
1:785b16b:     @Test
1:785b16b:     public void testMessageSizeStoreRecovery() throws Exception {
1:785b16b:         writeMessages();
1:785b16b:         store.stop();
1:785b16b: 
1:785b16b:         createStore(false, dataDirectory);
1:785b16b:         writeMessages();
1:785b16b:         long messageSize = messageStore.getMessageSize();
1:785b16b:         assertEquals(40, messageStore.getMessageCount());
1:785b16b:         assertTrue(messageSize > 40 * testMessageSize);
1:785b16b:     }
1:785b16b: 
1:785b16b:     /**
1:785b16b:      * This method tests that a version 5 store with an old index still works but returns 0 for messgage sizes.
1:785b16b:      *
1:785b16b:      * @throws Exception
1:785b16b:      */
1:785b16b:     @Test
1:785b16b:     public void testMessageSizeStoreRecoveryVersion5() throws Exception {
1:785b16b:         store.stop();
1:785b16b: 
1:785b16b:         //Copy over an existing version 5 store with messages
1:785b16b:         File dataDir = new File(dataDirectory);
1:785b16b:         if (dataDir.exists())
1:785b16b:             FileUtils.deleteDirectory(new File(dataDirectory));
1:785b16b:         FileUtils.copyDirectory(new File(getVersion5Dir()),
1:785b16b:                 dataDir);
1:785b16b: 
1:785b16b:         //reload store
1:785b16b:         createStore(false, dataDirectory);
1:785b16b: 
1:785b16b:         //make sure size is 0
1:785b16b:         long messageSize = messageStore.getMessageSize();
1:785b16b:         assertTrue(messageStore.getMessageCount() == 20);
1:785b16b:         assertTrue(messageSize == 0);
1:785b16b: 
1:785b16b: 
1:785b16b:     }
1:785b16b: 
1:785b16b:     /**
1:785b16b:      * This method tests that a version 5 store with existing messages will correctly be recovered and converted
1:785b16b:      * to version 6.  After index deletion, the index will be rebuilt and will include message sizes.
1:785b16b:      *
1:785b16b:      * @throws Exception
1:785b16b:      */
1:785b16b:     @Test
1:785b16b:     public void testMessageSizeStoreRecoveryVersion5RebuildIndex() throws Exception {
1:785b16b:         store.stop();
1:785b16b: 
1:785b16b:         //Copy over an existing version 5 store with messages
1:785b16b:         File dataDir = new File(dataDirectory);
1:785b16b:         if (dataDir.exists())
1:785b16b:             FileUtils.deleteDirectory(new File(dataDirectory));
1:785b16b:         FileUtils.copyDirectory(new File(getVersion5Dir()),
1:785b16b:                 dataDir);
1:785b16b:         for (File index : FileUtils.listFiles(new File(dataDirectory), new WildcardFileFilter("*.data"), TrueFileFilter.INSTANCE)) {
1:785b16b:             FileUtils.deleteQuietly(index);
1:785b16b:         }
1:785b16b: 
1:785b16b:         //append more messages...at this point the index should be rebuilt
1:785b16b:         createStore(false, dataDirectory);
1:785b16b:         writeMessages();
1:785b16b: 
1:785b16b:         //after writing new messages to the existing store, make sure the index is rebuilt and size is correct
1:785b16b:         long messageSize = messageStore.getMessageSize();
1:785b16b:         assertTrue(messageStore.getMessageCount() == 40);
1:785b16b:         assertTrue(messageSize > 40 * testMessageSize);
1:785b16b: 
1:785b16b:     }
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     protected MessageStore getMessageStore() {
1:785b16b:         return messageStore;
1:785b16b:     }
1:785b16b: 
1:785b16b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:370b181
/////////////////////////////////////////////////////////////////////////
commit:246ccb8
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map.Entry;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.store.MessageStoreStatistics;
0: import org.apache.activemq.store.kahadb.MessageDatabase.StoredDestination;
0: import org.apache.activemq.store.kahadb.disk.journal.Location;
0: import org.apache.activemq.store.kahadb.disk.page.Transaction;
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: 
1: import org.apache.activemq.store.AbstractMessageStoreSizeTest;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.disk.util.LocationMarshaller;
1: import org.apache.commons.io.FileUtils;
1: import org.apache.commons.io.filefilter.TrueFileFilter;
1: import org.apache.commons.io.filefilter.WildcardFileFilter;
1: import org.junit.Test;
1: 
1: /**
1:  * This test is for AMQ-5748 to verify that {@link MessageStore} implements correctly
1:  * compute the size of the messages in the store.
1:  *
1:  * For KahaDB specifically, the size was not being stored in in the index ({@link LocationMarshaller}).  LocationMarshaller
1:  * has been updated to include an option to include the size in the serialized value.  This way the message
1:  * size will be persisted in the index and be available between broker restarts without needing to rebuild the index.
1:  * Note that the KahaDB version has been incremented from 5 to 6 because the index will need to be rebuild when a version
1:  * 5 index is detected since it will be detected as corrupt.
1:  *
1:  */
1: public abstract class AbstractKahaDBMessageStoreSizeTest extends AbstractMessageStoreSizeTest {
1: 
1:     MessageStore messageStore;
1:     PersistenceAdapter store;
1: 
1:     @Override
1:     public void initStore() throws Exception {
1:         createStore(true, dataDirectory);
1:     }
1: 
1:     abstract protected void createStore(boolean deleteAllMessages, String directory) throws Exception;
1: 
1:     abstract protected String getVersion5Dir();
1: 
1:     @Override
1:     public void destroyStore() throws Exception {
1:         if (store != null) {
1:             store.stop();
1:         }
1:     }
1: 
1: 
1:     /**
1:      * This method tests that the message sizes exist for all messages that exist after messages are recovered
1:      * off of disk.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testMessageSizeStoreRecovery() throws Exception {
1:         writeMessages();
1:         store.stop();
1: 
1:         createStore(false, dataDirectory);
1:         writeMessages();
1:         long messageSize = messageStore.getMessageSize();
1:         assertEquals(40, messageStore.getMessageCount());
1:         assertTrue(messageSize > 40 * testMessageSize);
1:     }
1: 
1:     /**
1:      * This method tests that a version 5 store with an old index still works but returns 0 for messgage sizes.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testMessageSizeStoreRecoveryVersion5() throws Exception {
1:         store.stop();
1: 
1:         //Copy over an existing version 5 store with messages
1:         File dataDir = new File(dataDirectory);
1:         if (dataDir.exists())
1:             FileUtils.deleteDirectory(new File(dataDirectory));
1:         FileUtils.copyDirectory(new File(getVersion5Dir()),
1:                 dataDir);
1: 
1:         //reload store
1:         createStore(false, dataDirectory);
1: 
1:         //make sure size is 0
1:         long messageSize = messageStore.getMessageSize();
1:         assertTrue(messageStore.getMessageCount() == 20);
1:         assertTrue(messageSize == 0);
1: 
1: 
1:     }
1: 
1:     /**
1:      * This method tests that a version 5 store with existing messages will correctly be recovered and converted
1:      * to version 6.  After index deletion, the index will be rebuilt and will include message sizes.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testMessageSizeStoreRecoveryVersion5RebuildIndex() throws Exception {
1:         store.stop();
1: 
1:         //Copy over an existing version 5 store with messages
1:         File dataDir = new File(dataDirectory);
1:         if (dataDir.exists())
1:             FileUtils.deleteDirectory(new File(dataDirectory));
1:         FileUtils.copyDirectory(new File(getVersion5Dir()),
1:                 dataDir);
1:         for (File index : FileUtils.listFiles(new File(dataDirectory), new WildcardFileFilter("*.data"), TrueFileFilter.INSTANCE)) {
1:             FileUtils.deleteQuietly(index);
1:         }
1: 
1:         //append more messages...at this point the index should be rebuilt
1:         createStore(false, dataDirectory);
1:         writeMessages();
1: 
1:         //after writing new messages to the existing store, make sure the index is rebuilt and size is correct
1:         long messageSize = messageStore.getMessageSize();
1:         assertTrue(messageStore.getMessageCount() == 40);
1:         assertTrue(messageSize > 40 * testMessageSize);
1: 
1:     }
1: 
1:     @Override
1:     protected MessageStore getMessageStore() {
1:         return messageStore;
1:     }
1: 
1: }
============================================================================