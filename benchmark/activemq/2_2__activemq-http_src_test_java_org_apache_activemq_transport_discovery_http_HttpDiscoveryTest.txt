1:ed11b06: /**
1:ed11b06:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed11b06:  * contributor license agreements.  See the NOTICE file distributed with
1:ed11b06:  * this work for additional information regarding copyright ownership.
1:ed11b06:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed11b06:  * (the "License"); you may not use this file except in compliance with
1:ed11b06:  * the License.  You may obtain a copy of the License at
1:ed11b06:  *
1:ed11b06:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ed11b06:  *
1:ed11b06:  * Unless required by applicable law or agreed to in writing, software
1:ed11b06:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed11b06:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed11b06:  * See the License for the specific language governing permissions and
1:ed11b06:  * limitations under the License.
1:ed11b06:  */
1:c015a98: package org.apache.activemq.transport.discovery.http;
1:c015a98: 
1:c015a98: import static org.junit.Assert.assertTrue;
1:c015a98: 
1:c015a98: import java.io.IOException;
1:c015a98: import java.net.URI;
1:c015a98: import java.util.concurrent.CountDownLatch;
1:c015a98: import java.util.concurrent.TimeUnit;
1:c015a98: 
1:c015a98: import org.apache.activemq.ActiveMQConnection;
1:c015a98: import org.apache.activemq.ActiveMQConnectionFactory;
1:c015a98: import org.apache.activemq.broker.BrokerService;
1:c015a98: import org.apache.activemq.broker.TransportConnector;
1:c015a98: import org.apache.activemq.transport.TransportListener;
1:c015a98: import org.junit.After;
1:c015a98: import org.junit.Before;
1:c015a98: import org.junit.Test;
1:c015a98: 
1:c015a98: public class HttpDiscoveryTest implements TransportListener {
1:c015a98: 
1:c015a98:     private BrokerService broker;
1:c015a98:     private ActiveMQConnectionFactory factory;
1:c015a98:     private final CountDownLatch discovered = new CountDownLatch(1);
1:c015a98: 
1:c015a98:     @Before
1:c015a98:     public void setUp() throws Exception {
1:c015a98: 
1:c015a98:         broker = new BrokerService();
1:c015a98:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
1:c015a98:         connector.setDiscoveryUri(new URI("http://localhost:8181/default?startEmbeddRegistry=true"));
1:c015a98:         broker.setPersistent(false);
1:c015a98:         broker.setUseJmx(false);
1:c015a98:         broker.deleteAllMessages();
1:c015a98:         broker.start();
1:c015a98: 
1:c015a98:         String connectionUri = "discovery:http://localhost:8181/default";
1:c015a98:         factory = new ActiveMQConnectionFactory(connectionUri + "?trace=true&soTimeout=1000");
1:c015a98:     }
1:c015a98: 
1:c015a98:     @After
1:c015a98:     public void tearDown() throws Exception {
1:c015a98:         broker.stop();
1:c015a98:     }
1:c015a98: 
1:c015a98:     @Test
1:c015a98:     public void testBrokerIsDiscovered() throws Exception {
1:c015a98:         factory.setTransportListener(this);
1:c015a98:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:c015a98:         assertTrue(discovered.await(60, TimeUnit.SECONDS));
1:c015a98:         connection.close();
1:c015a98:     }
1:c015a98: 
1:c015a98:     @Override
1:c015a98:     public void onCommand(Object command) {
1:c015a98:     }
1:c015a98: 
1:c015a98:     @Override
1:c015a98:     public void onException(IOException error) {
1:c015a98:     }
1:c015a98: 
1:c015a98:     @Override
1:c015a98:     public void transportInterupted() {
1:c015a98:     }
1:c015a98: 
1:c015a98:     @Override
1:c015a98:     public void transportResumed() {
1:c015a98:         discovered.countDown();
1:c015a98:     }
1:c015a98: 
1:c015a98: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:ed11b06
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c015a98
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.discovery.http;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.TransportListener;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class HttpDiscoveryTest implements TransportListener {
1: 
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1:     private final CountDownLatch discovered = new CountDownLatch(1);
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         broker = new BrokerService();
1:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
1:         connector.setDiscoveryUri(new URI("http://localhost:8181/default?startEmbeddRegistry=true"));
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.deleteAllMessages();
1:         broker.start();
1: 
1:         String connectionUri = "discovery:http://localhost:8181/default";
1:         factory = new ActiveMQConnectionFactory(connectionUri + "?trace=true&soTimeout=1000");
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     @Test
1:     public void testBrokerIsDiscovered() throws Exception {
1:         factory.setTransportListener(this);
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         assertTrue(discovered.await(60, TimeUnit.SECONDS));
1:         connection.close();
1:     }
1: 
1:     @Override
1:     public void onCommand(Object command) {
1:     }
1: 
1:     @Override
1:     public void onException(IOException error) {
1:     }
1: 
1:     @Override
1:     public void transportInterupted() {
1:     }
1: 
1:     @Override
1:     public void transportResumed() {
1:         discovered.countDown();
1:     }
1: 
1: }
============================================================================