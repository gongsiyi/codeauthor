1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.discovery.simple;
1:1250a6d: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:74a7a8b: import java.util.concurrent.atomic.AtomicBoolean;
1:f812e34: 
1:d29ca2a: import org.apache.activemq.command.DiscoveryEvent;
1:0b01996: import org.apache.activemq.thread.TaskRunnerFactory;
1:d29ca2a: import org.apache.activemq.transport.discovery.DiscoveryAgent;
1:d29ca2a: import org.apache.activemq.transport.discovery.DiscoveryListener;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:1250a6d: 
1:d29ca2a: /**
1:f812e34:  * A simple DiscoveryAgent that allows static configuration of the discovered
1:f812e34:  * services.
1:0514fcf:  *
1:0514fcf:  *
1:d29ca2a:  */
1:d29ca2a: public class SimpleDiscoveryAgent implements DiscoveryAgent {
1:62890b3: 
1:8bf987b:     private final static Logger LOG = LoggerFactory.getLogger(SimpleDiscoveryAgent.class);
1:54114cc:     private long initialReconnectDelay = 1000;
1:1250a6d:     private long maxReconnectDelay = 1000 * 30;
1:1250a6d:     private long backOffMultiplier = 2;
1:62890b3:     private boolean useExponentialBackOff=true;
1:1250a6d:     private int maxReconnectAttempts;
1:1250a6d:     private final Object sleepMutex = new Object();
1:62890b3:     private long minConnectTime = 5000;
1:d29ca2a:     private DiscoveryListener listener;
1:933eb2f:     private String services[] = new String[] {};
1:1250a6d:     private final AtomicBoolean running = new AtomicBoolean(false);
1:0b01996:     private TaskRunnerFactory taskRunner;
1:f812e34: 
1:1250a6d:     class SimpleDiscoveryEvent extends DiscoveryEvent {
1:f812e34: 
1:f812e34:         private int connectFailures;
1:b1c55fd:         private long reconnectDelay = -1;
1:1250a6d:         private long connectTime = System.currentTimeMillis();
1:0514fcf:         private final AtomicBoolean failed = new AtomicBoolean(false);
1:1250a6d: 
1:1250a6d:         public SimpleDiscoveryEvent(String service) {
1:f812e34:             super(service);
1:f812e34:         }
1:f812e34: 
1:0514fcf:         public SimpleDiscoveryEvent(SimpleDiscoveryEvent copy) {
1:0514fcf:             super(copy);
1:0514fcf:             connectFailures = copy.connectFailures;
1:0514fcf:             reconnectDelay = copy.reconnectDelay;
1:0514fcf:             connectTime = copy.connectTime;
1:0514fcf:             failed.set(copy.failed.get());
1:0514fcf:         }
1:0514fcf: 
1:0514fcf:         @Override
1:4acd132:         public String toString() {
1:4acd132:             return "[" + serviceName + ", failed:" + failed + ", connectionFailures:" + connectFailures + "]";
1:f812e34:         }
1:1250a6d:     }
1:f812e34: 
1:0514fcf:     @Override
1:d29ca2a:     public void setDiscoveryListener(DiscoveryListener listener) {
1:d29ca2a:         this.listener = listener;
1:1250a6d:     }
1:f812e34: 
1:0514fcf:     @Override
1:d29ca2a:     public void registerService(String name) throws IOException {
11:1250a6d:     }
1:f812e34: 
1:0514fcf:     @Override
1:d29ca2a:     public void start() throws Exception {
1:0b01996:         taskRunner = new TaskRunnerFactory();
1:0b01996:         taskRunner.init();
1:f812e34: 
1:f812e34:         running.set(true);
1:d29ca2a:         for (int i = 0; i < services.length; i++) {
1:1250a6d:             listener.onServiceAdd(new SimpleDiscoveryEvent(services[i]));
1:1250a6d:         }
1:1250a6d:     }
1:f812e34: 
1:0514fcf:     @Override
1:d29ca2a:     public void stop() throws Exception {
1:f812e34:         running.set(false);
1:f812e34: 
1:0514fcf:         if (taskRunner != null) {
1:0514fcf:             taskRunner.shutdown();
1:0514fcf:         }
1:f812e34: 
1:0b01996:         // TODO: Should we not remove the services on the listener?
1:1250a6d: 
1:f812e34:         synchronized (sleepMutex) {
1:f812e34:             sleepMutex.notifyAll();
1:f812e34:         }
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public String[] getServices() {
1:d29ca2a:         return services;
1:1250a6d:     }
1:1250a6d: 
1:d29ca2a:     public void setServices(String services) {
1:d29ca2a:         this.services = services.split(",");
1:1250a6d:     }
1:f812e34: 
1:d29ca2a:     public void setServices(String services[]) {
1:d29ca2a:         this.services = services;
1:1250a6d:     }
1:f812e34: 
1:d29ca2a:     public void setServices(URI services[]) {
1:d29ca2a:         this.services = new String[services.length];
1:d29ca2a:         for (int i = 0; i < services.length; i++) {
1:d29ca2a:             this.services[i] = services[i].toString();
1:1250a6d:         }
1:1250a6d:     }
1:1250a6d: 
1:4acd132:     @Override
1:1250a6d:     public void serviceFailed(DiscoveryEvent devent) throws IOException {
1:f812e34: 
1:7f0fd0a:         final SimpleDiscoveryEvent sevent = (SimpleDiscoveryEvent)devent;
1:b22184e:         if (running.get() && sevent.failed.compareAndSet(false, true)) {
1:f812e34: 
1:7f0fd0a:             listener.onServiceRemove(sevent);
1:0b01996:             taskRunner.execute(new Runnable() {
1:0514fcf:                 @Override
1:f812e34:                 public void run() {
1:7f0fd0a:                     SimpleDiscoveryEvent event = new SimpleDiscoveryEvent(sevent);
1:0514fcf: 
1:f812e34:                     // We detect a failed connection attempt because the service
1:7f0fd0a:                     // fails right away.
1:f812e34:                     if (event.connectTime + minConnectTime > System.currentTimeMillis()) {
1:b1c55fd:                         LOG.debug("Failure occurred soon after the discovery event was generated.  It will be classified as a connection failure: {}", event);
1:f812e34: 
1:f812e34:                         event.connectFailures++;
1:f812e34: 
1:f812e34:                         if (maxReconnectAttempts > 0 && event.connectFailures >= maxReconnectAttempts) {
1:b1c55fd:                             LOG.warn("Reconnect attempts exceeded {} tries.  Reconnecting has been disabled for: {}", maxReconnectAttempts, event);
3:f812e34:                             return;
1:f812e34:                         }
1:f812e34: 
1:b1c55fd:                         if (!useExponentialBackOff || event.reconnectDelay == -1) {
1:f812e34:                             event.reconnectDelay = initialReconnectDelay;
1:f812e34:                         } else {
1:f812e34:                             // Exponential increment of reconnect delay.
1:f812e34:                             event.reconnectDelay *= backOffMultiplier;
1:fc00993:                             if (event.reconnectDelay > maxReconnectDelay) {
1:f812e34:                                 event.reconnectDelay = maxReconnectDelay;
1:fc00993:                             }
1:fc00993:                         }
1:f812e34: 
1:b1c55fd:                         doReconnectDelay(event);
1:b1c55fd: 
1:f812e34:                     } else {
1:b1c55fd:                         LOG.trace("Failure occurred to long after the discovery event was generated.  " +
1:b1c55fd:                                   "It will not be classified as a connection failure: {}", event);
1:f812e34:                         event.connectFailures = 0;
1:f812e34:                         event.reconnectDelay = initialReconnectDelay;
1:b1c55fd: 
1:b1c55fd:                         doReconnectDelay(event);
1:f812e34:                     }
1:f812e34: 
1:fc00993:                     if (!running.get()) {
1:b9045db:                         LOG.debug("Reconnecting disabled: stopped");
1:f812e34:                         return;
1:fc00993:                     }
1:f812e34: 
1:f812e34:                     event.connectTime = System.currentTimeMillis();
1:f812e34:                     event.failed.set(false);
1:f812e34:                     listener.onServiceAdd(event);
1:f812e34:                 }
1:6348481:             }, "Simple Discovery Agent");
1:f812e34:         }
1:1250a6d:     }
16:1250a6d: 
1:b1c55fd:     protected void doReconnectDelay(SimpleDiscoveryEvent event) {
1:b1c55fd:         synchronized (sleepMutex) {
1:b1c55fd:             try {
1:b1c55fd:                 if (!running.get()) {
1:b1c55fd:                     LOG.debug("Reconnecting disabled: stopped");
1:b1c55fd:                     return;
1:b1c55fd:                 }
1:b1c55fd: 
1:b1c55fd:                 LOG.debug("Waiting {}ms before attempting to reconnect.", event.reconnectDelay);
1:b1c55fd:                 sleepMutex.wait(event.reconnectDelay);
1:b1c55fd:             } catch (InterruptedException ie) {
1:b1c55fd:                 LOG.debug("Reconnecting disabled: ", ie);
1:b1c55fd:                 Thread.currentThread().interrupt();
1:b1c55fd:                 return;
1:b1c55fd:             }
1:b1c55fd:         }
1:b1c55fd:     }
1:b1c55fd: 
1:f812e34:     public long getBackOffMultiplier() {
1:f812e34:         return backOffMultiplier;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void setBackOffMultiplier(long backOffMultiplier) {
1:f812e34:         this.backOffMultiplier = backOffMultiplier;
1:f812e34:     }
1:1250a6d: 
1:f812e34:     public long getInitialReconnectDelay() {
1:f812e34:         return initialReconnectDelay;
1:f812e34:     }
1:1250a6d: 
1:f812e34:     public void setInitialReconnectDelay(long initialReconnectDelay) {
1:f812e34:         this.initialReconnectDelay = initialReconnectDelay;
1:f812e34:     }
1:1250a6d: 
1:f812e34:     public int getMaxReconnectAttempts() {
1:f812e34:         return maxReconnectAttempts;
1:f812e34:     }
1:1250a6d: 
1:f812e34:     public void setMaxReconnectAttempts(int maxReconnectAttempts) {
1:f812e34:         this.maxReconnectAttempts = maxReconnectAttempts;
1:f812e34:     }
1:1250a6d: 
1:f812e34:     public long getMaxReconnectDelay() {
1:f812e34:         return maxReconnectDelay;
1:f812e34:     }
1:1250a6d: 
1:f812e34:     public void setMaxReconnectDelay(long maxReconnectDelay) {
1:f812e34:         this.maxReconnectDelay = maxReconnectDelay;
1:f812e34:     }
1:1250a6d: 
1:f812e34:     public long getMinConnectTime() {
1:f812e34:         return minConnectTime;
1:f812e34:     }
1:1250a6d: 
1:f812e34:     public void setMinConnectTime(long minConnectTime) {
1:f812e34:         this.minConnectTime = minConnectTime;
1:f812e34:     }
1:1250a6d: 
1:f812e34:     public boolean isUseExponentialBackOff() {
1:f812e34:         return useExponentialBackOff;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void setUseExponentialBackOff(boolean useExponentialBackOff) {
1:f812e34:         this.useExponentialBackOff = useExponentialBackOff;
1:f812e34:     }
1:1250a6d: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b1c55fd
/////////////////////////////////////////////////////////////////////////
1:         private long reconnectDelay = -1;
/////////////////////////////////////////////////////////////////////////
1:                         LOG.debug("Failure occurred soon after the discovery event was generated.  It will be classified as a connection failure: {}", event);
1:                             LOG.warn("Reconnect attempts exceeded {} tries.  Reconnecting has been disabled for: {}", maxReconnectAttempts, event);
1:                         if (!useExponentialBackOff || event.reconnectDelay == -1) {
/////////////////////////////////////////////////////////////////////////
1:                         doReconnectDelay(event);
1: 
1:                         LOG.trace("Failure occurred to long after the discovery event was generated.  " +
1:                                   "It will not be classified as a connection failure: {}", event);
1: 
1:                         doReconnectDelay(event);
/////////////////////////////////////////////////////////////////////////
1:     protected void doReconnectDelay(SimpleDiscoveryEvent event) {
1:         synchronized (sleepMutex) {
1:             try {
1:                 if (!running.get()) {
1:                     LOG.debug("Reconnecting disabled: stopped");
1:                     return;
1:                 }
1: 
1:                 LOG.debug("Waiting {}ms before attempting to reconnect.", event.reconnectDelay);
1:                 sleepMutex.wait(event.reconnectDelay);
1:             } catch (InterruptedException ie) {
1:                 LOG.debug("Reconnecting disabled: ", ie);
1:                 Thread.currentThread().interrupt();
1:                 return;
1:             }
1:         }
1:     }
1: 
commit:0514fcf
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:         private final AtomicBoolean failed = new AtomicBoolean(false);
1:         public SimpleDiscoveryEvent(SimpleDiscoveryEvent copy) {
1:             super(copy);
1:             connectFailures = copy.connectFailures;
1:             reconnectDelay = copy.reconnectDelay;
1:             connectTime = copy.connectTime;
1:             failed.set(copy.failed.get());
1:         }
1: 
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         if (taskRunner != null) {
1:             taskRunner.shutdown();
1:         }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
1: 
author:gtully
-------------------------------------------------------------------------------
commit:b22184e
/////////////////////////////////////////////////////////////////////////
1:         if (running.get() && sevent.failed.compareAndSet(false, true)) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:62890b3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private final static Log LOG = LogFactory.getLog(SimpleDiscoveryAgent.class); 
1:     
1:     private boolean useExponentialBackOff=true;
1:     private long minConnectTime = 5000;
/////////////////////////////////////////////////////////////////////////
0:                         LOG.debug("Failure occured soon after the discovery event was generated.  It will be clasified as a connection failure: "+event);
0:                             LOG.debug("Reconnect attempts exceeded "+maxReconnectAttempts+" tries.  Reconnecting has been disabled.");
/////////////////////////////////////////////////////////////////////////
0:                                 LOG.debug("Waiting "+event.reconnectDelay+" ms before attepting to reconnect.");
commit:43b808d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private boolean useExponentialBackOff;
1:     private String services[] = new String[] {};
0:     private String group = "DEFAULT";
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:                                 if (!running.get()) {
1:                                 }
/////////////////////////////////////////////////////////////////////////
1:                             if (event.reconnectDelay > maxReconnectDelay) {
1:                             }
/////////////////////////////////////////////////////////////////////////
0:                     if (!running.get()) {
1:                     }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * A simple DiscoveryAgent that allows static configuration of the discovered
1:  * services.
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         private int connectFailures;
1:             super(service);
1:         }
1: 
1: 
1: 
1: 
1:         running.set(true);
1: 
1:         running.set(false);
1:         synchronized (sleepMutex) {
1:             sleepMutex.notifyAll();
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent)devent;
0:         if (event.failed.compareAndSet(false, true)) {
1: 
0:             listener.onServiceRemove(event);
0:             Thread thread = new Thread() {
1:                 public void run() {
1: 
1:                     // We detect a failed connection attempt because the service
0:                     // fails right
0:                     // away.
1:                     if (event.connectTime + minConnectTime > System.currentTimeMillis()) {
1: 
1:                         event.connectFailures++;
1: 
1:                         if (maxReconnectAttempts > 0 && event.connectFailures >= maxReconnectAttempts) {
0:                             // Don' try to re-connect
1:                             return;
1:                         }
1: 
0:                         synchronized (sleepMutex) {
0:                             try {
0:                                 if (!running.get())
1:                                     return;
1: 
0:                                 sleepMutex.wait(event.reconnectDelay);
0:                             } catch (InterruptedException ie) {
1:                                 return;
1:                             }
1:                         }
1: 
0:                         if (!useExponentialBackOff) {
1:                             event.reconnectDelay = initialReconnectDelay;
1:                         } else {
1:                             // Exponential increment of reconnect delay.
1:                             event.reconnectDelay *= backOffMultiplier;
0:                             if (event.reconnectDelay > maxReconnectDelay)
1:                                 event.reconnectDelay = maxReconnectDelay;
1:                         }
1: 
1:                     } else {
1:                         event.connectFailures = 0;
1:                         event.reconnectDelay = initialReconnectDelay;
1:                     }
1: 
0:                     if (!running.get())
1:                         return;
1: 
1:                     event.connectTime = System.currentTimeMillis();
1:                     event.failed.set(false);
1: 
1:                     listener.onServiceAdd(event);
1:                 }
0:             };
0:             thread.setDaemon(true);
0:             thread.start();
1:     public long getBackOffMultiplier() {
1:         return backOffMultiplier;
1:     }
1:     public void setBackOffMultiplier(long backOffMultiplier) {
1:         this.backOffMultiplier = backOffMultiplier;
1:     }
1:     public long getInitialReconnectDelay() {
1:         return initialReconnectDelay;
1:     }
1:     public void setInitialReconnectDelay(long initialReconnectDelay) {
1:         this.initialReconnectDelay = initialReconnectDelay;
1:     }
1:     public int getMaxReconnectAttempts() {
1:         return maxReconnectAttempts;
1:     }
1:     public void setMaxReconnectAttempts(int maxReconnectAttempts) {
1:         this.maxReconnectAttempts = maxReconnectAttempts;
1:     }
1:     public long getMaxReconnectDelay() {
1:         return maxReconnectDelay;
1:     }
1:     public void setMaxReconnectDelay(long maxReconnectDelay) {
1:         this.maxReconnectDelay = maxReconnectDelay;
1:     }
1:     public long getMinConnectTime() {
1:         return minConnectTime;
1:     }
1:     public void setMinConnectTime(long minConnectTime) {
1:         this.minConnectTime = minConnectTime;
1:     }
1:     public boolean isUseExponentialBackOff() {
1:         return useExponentialBackOff;
1:     }
1:     public void setUseExponentialBackOff(boolean useExponentialBackOff) {
1:         this.useExponentialBackOff = useExponentialBackOff;
1:     }
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
commit:b75a6da
/////////////////////////////////////////////////////////////////////////
0:                                 Thread.currentThread().interrupt();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:1250a6d
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private long initialReconnectDelay = 1000*5;
1:     private long maxReconnectDelay = 1000 * 30;
1:     private long backOffMultiplier = 2;
0:     private boolean useExponentialBackOff = false;
1:     private int maxReconnectAttempts;
1:     private final Object sleepMutex = new Object();
0:     private long minConnectTime = 500;
1: 
1:     private final AtomicBoolean running = new AtomicBoolean(false);
1:     
1:     class SimpleDiscoveryEvent extends DiscoveryEvent {
1: 		
0:     	private int connectFailures;
0:         private long reconnectDelay = initialReconnectDelay;
1:         private long connectTime = System.currentTimeMillis();
0:         private AtomicBoolean failed = new AtomicBoolean(false);
1: 
1:         public SimpleDiscoveryEvent(String service) {
0: 			super(service);
1: 		}
1:         
1:     }
/////////////////////////////////////////////////////////////////////////
0:     	running.set(true);
1:             listener.onServiceAdd(new SimpleDiscoveryEvent(services[i]));
0:     	running.set(false);
0:     	synchronized(sleepMutex) {
0:     		sleepMutex.notifyAll();
1:     	}
/////////////////////////////////////////////////////////////////////////
1:     public void serviceFailed(DiscoveryEvent devent) throws IOException {
1:     	
0:         final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent) devent;
0:         if( event.failed.compareAndSet(false, true) ) {
1:         	
0: 			listener.onServiceRemove(event);
0: 	    	Thread thread = new Thread() {
0: 	    		public void run() {
1: 	
1: 	
0: 	    			// We detect a failed connection attempt because the service fails right
0: 	    			// away.
0: 	    			if( event.connectTime + minConnectTime > System.currentTimeMillis()  ) {
1: 	    				
0: 	    				event.connectFailures++;
1: 	    				
0: 	    				if( maxReconnectAttempts>0 &&  event.connectFailures >= maxReconnectAttempts ) {
0: 	    					// Don' try to re-connect
0: 	    					return;
1: 	    				}
1: 	    				
0: 		                synchronized(sleepMutex){
0: 		                    try{
0: 		                    	if( !running.get() )
0: 		                    		return;
1: 		                    	
0: 		                        sleepMutex.wait(event.reconnectDelay);
0: 		                    }catch(InterruptedException ie){
0: 		                       return;
1: 		                    }
1: 		                }
1: 	
0: 		                if (!useExponentialBackOff) {
0: 		                    event.reconnectDelay = initialReconnectDelay;
0: 		                } else {
0: 		                    // Exponential increment of reconnect delay.
0: 		                    event.reconnectDelay*=backOffMultiplier;
0: 		                    if(event.reconnectDelay>maxReconnectDelay)
0: 		                        event.reconnectDelay=maxReconnectDelay;
1: 		                }
1: 		                
0: 	    			} else {
0: 	    				event.connectFailures = 0;
0: 	                    event.reconnectDelay = initialReconnectDelay;
1: 	    			}
1: 	    			                    			
0: 	            	if( !running.get() )
0: 	            		return;
1: 	            	
0: 	    			event.connectTime = System.currentTimeMillis();
0: 	    			event.failed.set(false);
1: 	    			
0: 	    			listener.onServiceAdd(event);
1: 	    		}
0: 	    	};
0: 	    	thread.setDaemon(true);
0: 	    	thread.start();
1:         }
1: 
0: 	public long getBackOffMultiplier() {
0: 		return backOffMultiplier;
1: 	}
1: 
0: 	public void setBackOffMultiplier(long backOffMultiplier) {
0: 		this.backOffMultiplier = backOffMultiplier;
1: 	}
1: 
0: 	public long getInitialReconnectDelay() {
0: 		return initialReconnectDelay;
1: 	}
1: 
0: 	public void setInitialReconnectDelay(long initialReconnectDelay) {
0: 		this.initialReconnectDelay = initialReconnectDelay;
1: 	}
1: 
0: 	public int getMaxReconnectAttempts() {
0: 		return maxReconnectAttempts;
1: 	}
1: 
0: 	public void setMaxReconnectAttempts(int maxReconnectAttempts) {
0: 		this.maxReconnectAttempts = maxReconnectAttempts;
1: 	}
1: 
0: 	public long getMaxReconnectDelay() {
0: 		return maxReconnectDelay;
1: 	}
1: 
0: 	public void setMaxReconnectDelay(long maxReconnectDelay) {
0: 		this.maxReconnectDelay = maxReconnectDelay;
1: 	}
1: 
0: 	public long getMinConnectTime() {
0: 		return minConnectTime;
1: 	}
1: 
0: 	public void setMinConnectTime(long minConnectTime) {
0: 		this.minConnectTime = minConnectTime;
1: 	}
1: 
0: 	public boolean isUseExponentialBackOff() {
0: 		return useExponentialBackOff;
1: 	}
1: 
0: 	public void setUseExponentialBackOff(boolean useExponentialBackOff) {
0: 		this.useExponentialBackOff = useExponentialBackOff;
1: 	}
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery.simple;
0: 
1: import java.io.IOException;
1: import java.net.URI;
0: 
1: import org.apache.activemq.command.DiscoveryEvent;
1: import org.apache.activemq.transport.discovery.DiscoveryAgent;
1: import org.apache.activemq.transport.discovery.DiscoveryListener;
0: 
1: /**
0:  * A simple DiscoveryAgent that allows static configuration of the discovered services.
1:  * 
0:  * @version $Revision$
1:  */
1: public class SimpleDiscoveryAgent implements DiscoveryAgent {
0:     
1:     private DiscoveryListener listener;
0:     String services[] = new String[] {};
0:     String group = "DEFAULT";
0:     
1:     public void setDiscoveryListener(DiscoveryListener listener) {
1:         this.listener = listener;
0:     }
0:     
1:     public void registerService(String name) throws IOException {
0:     }
0:     
1:     public void start() throws Exception {
1:         for (int i = 0; i < services.length; i++) {
0:             listener.onServiceAdd(new DiscoveryEvent(services[i]));
0:         }
0:     }
0:     
1:     public void stop() throws Exception {
0:     }
0:   
1:     public String[] getServices() {
1:         return services;
0:     }
0: 
1:     public void setServices(String services) {
1:         this.services = services.split(",");
0:     }
0:     
1:     public void setServices(String services[]) {
1:         this.services = services;
0:     }
0:     
1:     public void setServices(URI services[]) {
1:         this.services = new String[services.length];
1:         for (int i = 0; i < services.length; i++) {
1:             this.services[i] = services[i].toString();
0:         }
0:     }
0: 
0:     public String getGroup() {
0:         return group;
0:     }
0: 
0:     public void setGroup(String group) {
0:         this.group = group;
0:     }
0: 
0:     public void setBrokerName(String brokerName) {
0:     }
0: 
0:     public void serviceFailed(DiscoveryEvent event) throws IOException {
0:     }
0:     
0: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7f0fd0a
/////////////////////////////////////////////////////////////////////////
0: 		public SimpleDiscoveryEvent(SimpleDiscoveryEvent copy) {
0: 			super(copy);
0: 			connectFailures = copy.connectFailures;
0: 			reconnectDelay = copy.reconnectDelay;
0: 			connectTime = copy.connectTime;
0: 			failed.set(copy.failed.get());
0: 		}
0:         
/////////////////////////////////////////////////////////////////////////
1:         final SimpleDiscoveryEvent sevent = (SimpleDiscoveryEvent)devent;
0:         if (sevent.failed.compareAndSet(false, true)) {
1:             listener.onServiceRemove(sevent);
1:                     SimpleDiscoveryEvent event = new SimpleDiscoveryEvent(sevent);
0:                 	
1:                     // fails right away.
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:0b01996
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.thread.TaskRunnerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private TaskRunnerFactory taskRunner;
/////////////////////////////////////////////////////////////////////////
1:         taskRunner = new TaskRunnerFactory();
1:         taskRunner.init();
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:         taskRunner.shutdown();
0: 
1:         // TODO: Should we not remove the services on the listener?
0: 
/////////////////////////////////////////////////////////////////////////
1:             taskRunner.execute(new Runnable() {
author:Gary Tully
-------------------------------------------------------------------------------
commit:4acd132
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         public String toString() {
1:             return "[" + serviceName + ", failed:" + failed + ", connectionFailures:" + connectFailures + "]";
0:         }
/////////////////////////////////////////////////////////////////////////
0:                             LOG.warn("Reconnect attempts exceeded "+maxReconnectAttempts+" tries.  Reconnecting has been disabled for: " + event);
commit:8a2892b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:b9045db
/////////////////////////////////////////////////////////////////////////
0:                             LOG.warn("Reconnect attempts exceeded "+maxReconnectAttempts+" tries.  Reconnecting has been disabled.");
1:                                     LOG.debug("Reconnecting disabled: stopped");
0:                                 LOG.debug("Reconnecting disabled: " + ie);
/////////////////////////////////////////////////////////////////////////
0:                         LOG.debug("Reconnecting disabled: stopped");
commit:6348481
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.thread.DefaultThreadPools;
/////////////////////////////////////////////////////////////////////////
0:     private final static Log LOG = LogFactory.getLog(SimpleDiscoveryAgent.class);
/////////////////////////////////////////////////////////////////////////
0:             DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable() {
0:                         LOG.debug("Failure occurred soon after the discovery event was generated.  It will be classified as a connection failure: "+event);
/////////////////////////////////////////////////////////////////////////
0:                                 LOG.debug("Waiting "+event.reconnectDelay+" ms before attempting to reconnect.");
/////////////////////////////////////////////////////////////////////////
1:             }, "Simple Discovery Agent");
/////////////////////////////////////////////////////////////////////////
commit:5d42b72
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f0429be
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.MDCHelper;
/////////////////////////////////////////////////////////////////////////
0:             final Map context = MDCHelper.getCopyOfContextMap();
0:                     MDCHelper.setContextMap(context);
0: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private final static Logger LOG = LoggerFactory.getLogger(SimpleDiscoveryAgent.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:e41be74
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.SynchronousQueue;
0: import java.util.concurrent.ThreadFactory;
0: import java.util.concurrent.ThreadPoolExecutor;
0: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
0:     private static final ThreadPoolExecutor ASYNC_TASKS;
/////////////////////////////////////////////////////////////////////////
0:             ASYNC_TASKS.execute(new Runnable() {
/////////////////////////////////////////////////////////////////////////
0:             });
/////////////////////////////////////////////////////////////////////////
0:     
0:     static {
0:         ASYNC_TASKS =   new ThreadPoolExecutor(0, Integer.MAX_VALUE, 30, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
0:             public Thread newThread(Runnable runnable) {
0:                 Thread thread = new Thread(runnable, "Simple Discovery Agent: "+runnable);
0:                 thread.setDaemon(true);
0:                 return thread;
0:             }
0:         });
0:     }
0: 
commit:54114cc
/////////////////////////////////////////////////////////////////////////
1:     private long initialReconnectDelay = 1000;
============================================================================