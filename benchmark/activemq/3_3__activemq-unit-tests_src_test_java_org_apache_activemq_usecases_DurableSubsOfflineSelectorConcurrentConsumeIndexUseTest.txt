1:4cf6151: /**
1:4cf6151:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4cf6151:  * contributor license agreements.  See the NOTICE file distributed with
1:4cf6151:  * this work for additional information regarding copyright ownership.
1:4cf6151:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4cf6151:  * (the "License"); you may not use this file except in compliance with
1:4cf6151:  * the License.  You may obtain a copy of the License at
1:4cf6151:  *
1:4cf6151:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4cf6151:  *
1:4cf6151:  * Unless required by applicable law or agreed to in writing, software
1:4cf6151:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4cf6151:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4cf6151:  * See the License for the specific language governing permissions and
1:4cf6151:  * limitations under the License.
1:4cf6151:  */
1:4cf6151: package org.apache.activemq.usecases;
1:4cf6151: 
1:4cf6151: import java.util.ArrayList;
1:4cf6151: import java.util.List;
1:4cf6151: import java.util.concurrent.CountDownLatch;
1:4cf6151: import java.util.concurrent.TimeUnit;
1:3bf9d0c: 
1:4cf6151: import javax.jms.Connection;
1:4cf6151: import javax.jms.Message;
1:4cf6151: import javax.jms.MessageConsumer;
1:4cf6151: import javax.jms.MessageListener;
1:4cf6151: import javax.jms.MessageProducer;
1:4cf6151: import javax.jms.Session;
1:3bf9d0c: 
1:4cf6151: import junit.framework.Test;
1:3bf9d0c: 
1:4cf6151: import org.apache.activemq.ActiveMQConnectionFactory;
1:4cf6151: import org.apache.activemq.broker.BrokerFactory;
1:4cf6151: import org.apache.activemq.broker.BrokerService;
1:4cf6151: import org.apache.activemq.command.ActiveMQTopic;
1:c65c25d: import org.apache.activemq.store.PersistenceAdapter;
1:4cf6151: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:4cf6151: import org.apache.activemq.store.kahadb.KahaDBStore;
1:4cf6151: import org.apache.activemq.util.Wait;
1:4cf6151: import org.slf4j.Logger;
1:4cf6151: import org.slf4j.LoggerFactory;
1:4cf6151: 
1:4cf6151: public class DurableSubsOfflineSelectorConcurrentConsumeIndexUseTest extends org.apache.activemq.TestSupport {
1:4cf6151: 
1:4cf6151:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubsOfflineSelectorConcurrentConsumeIndexUseTest.class);
1:4cf6151:     public int messageCount = 10000;
1:4cf6151:     private BrokerService broker;
1:4cf6151:     private ActiveMQTopic topic;
1:3bf9d0c:     private final List<Throwable> exceptions = new ArrayList<Throwable>();
1:4cf6151: 
1:3bf9d0c:     @Override
1:4cf6151:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:4cf6151:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:4cf6151:         connectionFactory.setWatchTopicAdvisories(false);
1:4cf6151:         return connectionFactory;
2:4cf6151:     }
1:4cf6151: 
2:4cf6151:     @Override
1:4cf6151:     protected Connection createConnection() throws Exception {
1:4cf6151:         return createConnection("id");
1:4cf6151:     }
1:4cf6151: 
1:4cf6151:     protected Connection createConnection(String name) throws Exception {
1:4cf6151:         Connection con = getConnectionFactory().createConnection();
1:4cf6151:         con.setClientID(name);
1:4cf6151:         con.start();
1:4cf6151:         return con;
1:4cf6151:     }
1:4cf6151: 
1:4cf6151:     public static Test suite() {
1:4cf6151:         return suite(DurableSubsOfflineSelectorConcurrentConsumeIndexUseTest.class);
1:4cf6151:     }
1:4cf6151: 
1:3bf9d0c:     @Override
1:4cf6151:     protected void setUp() throws Exception {
1:4cf6151:         exceptions.clear();
1:4cf6151:         topic = (ActiveMQTopic) createDestination();
1:4cf6151:         createBroker();
1:4cf6151:         super.setUp();
1:4cf6151:     }
1:4cf6151: 
1:3bf9d0c:     @Override
1:4cf6151:     protected void tearDown() throws Exception {
1:4cf6151:         super.tearDown();
1:4cf6151:         destroyBroker();
1:4cf6151:     }
1:4cf6151: 
1:4cf6151:     private void createBroker() throws Exception {
1:4cf6151:         createBroker(true);
1:4cf6151:     }
1:4cf6151: 
1:4cf6151:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:4cf6151:         broker = BrokerFactory.createBroker("broker:(vm://" + getName(true) + ")");
1:4cf6151:         broker.setBrokerName(getName(true));
1:4cf6151:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:4cf6151:         broker.getManagementContext().setCreateConnector(false);
1:4cf6151:         broker.setAdvisorySupport(false);
1:4cf6151:         broker.addConnector("tcp://0.0.0.0:0");
1:4cf6151: 
1:4cf6151:         setDefaultPersistenceAdapter(broker);
1:4cf6151: 
1:4cf6151:         ((KahaDBPersistenceAdapter)broker.getPersistenceAdapter()).getStore().getPageFile().setPageSize(1024);
1:4cf6151: 
1:4cf6151:         broker.start();
1:4cf6151:     }
1:4cf6151: 
1:4cf6151:     private void destroyBroker() throws Exception {
1:4cf6151:         if (broker != null)
1:4cf6151:             broker.stop();
1:4cf6151:     }
1:4cf6151: 
1:4cf6151:     public void testIndexPageUsage() throws Exception {
1:4cf6151:         Connection con = createConnection();
1:4cf6151:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4cf6151:         session.createDurableSubscriber(topic, "true", "filter = 'true'", true);
1:4cf6151:         session.close();
1:4cf6151: 
1:4cf6151:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4cf6151:         session.createDurableSubscriber(topic, "false", "filter = 'false'", true);
1:4cf6151:         session.close();
1:4cf6151: 
1:4cf6151:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4cf6151:         session.createDurableSubscriber(topic, "all", null, true);
1:4cf6151:         session.close();
1:4cf6151: 
1:4cf6151:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4cf6151:         session.createDurableSubscriber(topic, "all2", null, true);
1:4cf6151:         session.close();
1:4cf6151: 
1:4cf6151:         con.close();
1:4cf6151: 
1:4cf6151:         // send messages
1:4cf6151: 
1:4cf6151:         final CountDownLatch goOn = new CountDownLatch(1);
1:4cf6151:         Thread sendThread = new Thread() {
1:3bf9d0c:             @Override
1:4cf6151:             public void run() {
1:4cf6151:                 try {
1:4cf6151: 
1:4cf6151:                     final Connection sendCon = createConnection("send");
1:4cf6151:                     final Session sendSession = sendCon.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4cf6151:                     final MessageProducer producer = sendSession.createProducer(null);
1:4cf6151: 
1:4cf6151:                     for (int i = 0; i < messageCount; i++) {
1:4cf6151:                         boolean filter = i % 2 == 1;
1:4cf6151:                         Message message = sendSession.createMessage();
1:4cf6151:                         message.setStringProperty("filter", filter ? "true" : "false");
1:4cf6151:                         producer.send(topic, message);
1:4cf6151: 
1:4cf6151:                         if (i > 0 && i % 10000 == 0) {
1:4cf6151:                             LOG.info("Sent:" + i);
1:4cf6151:                         }
1:4cf6151:                         if (i> messageCount/2) {
1:4cf6151:                             goOn.countDown();
1:4cf6151:                         }
1:4cf6151:                     }
1:4cf6151:                     sendSession.close();
1:4cf6151:                     sendCon.close();
1:4cf6151:                 } catch (Exception e) {
1:4cf6151:                     exceptions.add(e);
1:4cf6151:                 }
1:4cf6151:             }
1:4cf6151:         };
1:4cf6151:         sendThread.start();
1:4cf6151: 
1:4cf6151:         goOn.await(5, TimeUnit.MINUTES);
1:4cf6151:         LOG.info("Activating consumers");
1:4cf6151: 
1:4cf6151:         // consume messages in parallel
1:4cf6151:         con = createConnection();
1:4cf6151:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4cf6151: 
1:4cf6151:         MessageConsumer consumerTrue = session.createDurableSubscriber(topic, "true", "filter = 'true'", true);
1:4cf6151:         Listener listenerT = new Listener();
1:4cf6151:         consumerTrue.setMessageListener(listenerT);
1:4cf6151: 
1:4cf6151:         MessageConsumer consumerFalse = session.createDurableSubscriber(topic, "false", "filter = 'false'", true);
1:4cf6151:         Listener listenerF = new Listener();
1:4cf6151:         consumerFalse.setMessageListener(listenerF);
1:4cf6151: 
1:4cf6151:         MessageConsumer consumerAll = session.createDurableSubscriber(topic, "all", null, true);
1:4cf6151:         Listener listenerA = new Listener();
1:4cf6151:         consumerAll.setMessageListener(listenerA);
1:4cf6151: 
1:4cf6151:         MessageConsumer consumerAll2 = session.createDurableSubscriber(topic, "all2", null, true);
1:4cf6151:         Listener listenerA2 = new Listener();
1:4cf6151:         consumerAll2.setMessageListener(listenerA2);
1:4cf6151: 
1:4cf6151:         waitFor(listenerA, messageCount);
1:4cf6151:         assertEquals(messageCount, listenerA.count);
1:4cf6151: 
1:4cf6151:         waitFor(listenerA2, messageCount);
1:4cf6151:         assertEquals(messageCount, listenerA2.count);
1:4cf6151: 
1:4cf6151:         assertEquals(messageCount / 2, listenerT.count);
1:4cf6151:         assertEquals(messageCount / 2, listenerF.count);
1:4cf6151: 
1:4cf6151:         consumerTrue.close();
1:4cf6151:         session.unsubscribe("true");
1:4cf6151: 
1:4cf6151:         consumerFalse.close();
1:4cf6151:         session.unsubscribe("false");
1:4cf6151: 
1:4cf6151:         consumerAll.close();
1:4cf6151:         session.unsubscribe("all");
1:4cf6151: 
1:4cf6151:         session.close();
1:4cf6151:         con.close();
1:4cf6151: 
1:c65c25d:         PersistenceAdapter persistenceAdapter = broker.getPersistenceAdapter();
1:c65c25d:         if( persistenceAdapter instanceof KahaDBPersistenceAdapter) {
1:c65c25d:             final KahaDBStore store = ((KahaDBPersistenceAdapter) persistenceAdapter).getStore();
1:c65c25d:             LOG.info("Store page count: " + store.getPageFile().getPageCount());
1:c65c25d:             LOG.info("Store free page count: " + store.getPageFile().getFreePageCount());
1:c65c25d:             LOG.info("Store page in-use: " + (store.getPageFile().getPageCount() - store.getPageFile().getFreePageCount()));
1:4cf6151: 
1:3bf9d0c:             assertTrue("no leak of pages, always use just 11", Wait.waitFor(new Wait.Condition() {
1:c65c25d:                 @Override
1:c65c25d:                 public boolean isSatisified() throws Exception {
1:3bf9d0c:                     return 11 == store.getPageFile().getPageCount() -
1:c65c25d:                             store.getPageFile().getFreePageCount();
1:c65c25d:                 }
1:c65c25d:             }, TimeUnit.SECONDS.toMillis(10)));
1:c65c25d:         }
1:4cf6151:     }
1:4cf6151: 
1:4cf6151:     private void waitFor(final Listener listener, final int count) throws Exception {
1:4cf6151: 
1:4cf6151:         assertTrue("got all messages on time", Wait.waitFor(new Wait.Condition() {
1:4cf6151:             @Override
2:4cf6151:             public boolean isSatisified() throws Exception {
1:4cf6151:                 return listener.count == count;
1:4cf6151:             }
1:4cf6151:         }, TimeUnit.MINUTES.toMillis(10)));
1:4cf6151: 
1:4cf6151:     }
1:4cf6151: 
1:4cf6151:     public static class Listener implements MessageListener {
1:4cf6151:         int count = 0;
1:4cf6151:         String id = null;
1:4cf6151: 
1:4cf6151:         Listener() {
1:4cf6151:         }
1:4cf6151: 
1:3bf9d0c:         @Override
1:4cf6151:         public void onMessage(Message message) {
1:4cf6151:             count++;
1:4cf6151:             if (id != null) {
1:4cf6151:                 try {
1:4cf6151:                     LOG.info(id + ", " + message.getJMSMessageID());
1:4cf6151:                 } catch (Exception ignored) {
1:4cf6151:                 }
1:4cf6151:             }
1:4cf6151:         }
1:4cf6151:     }
1:4cf6151: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3bf9d0c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final List<Throwable> exceptions = new ArrayList<Throwable>();
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("no leak of pages, always use just 11", Wait.waitFor(new Wait.Condition() {
1:                     return 11 == store.getPageFile().getPageCount() -
/////////////////////////////////////////////////////////////////////////
1:         @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c65c25d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.PersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:         PersistenceAdapter persistenceAdapter = broker.getPersistenceAdapter();
1:         if( persistenceAdapter instanceof KahaDBPersistenceAdapter) {
1:             final KahaDBStore store = ((KahaDBPersistenceAdapter) persistenceAdapter).getStore();
1:             LOG.info("Store page count: " + store.getPageFile().getPageCount());
1:             LOG.info("Store free page count: " + store.getPageFile().getFreePageCount());
1:             LOG.info("Store page in-use: " + (store.getPageFile().getPageCount() - store.getPageFile().getFreePageCount()));
0:             assertTrue("no leak of pages, always use just 10", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
0:                     return 10 == store.getPageFile().getPageCount() -
1:                             store.getPageFile().getFreePageCount();
1:                 }
1:             }, TimeUnit.SECONDS.toMillis(10)));
1:         }
author:Gary Tully
-------------------------------------------------------------------------------
commit:f129a0b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4cf6151
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.Wait;
0: import org.apache.kahadb.page.ThreadTracker;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DurableSubsOfflineSelectorConcurrentConsumeIndexUseTest extends org.apache.activemq.TestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubsOfflineSelectorConcurrentConsumeIndexUseTest.class);
1:     public int messageCount = 10000;
1:     private BrokerService broker;
1:     private ActiveMQTopic topic;
0:     private List<Throwable> exceptions = new ArrayList<Throwable>();
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         return connectionFactory;
1:     }
1: 
1:     @Override
1:     protected Connection createConnection() throws Exception {
1:         return createConnection("id");
1:     }
1: 
1:     protected Connection createConnection(String name) throws Exception {
1:         Connection con = getConnectionFactory().createConnection();
1:         con.setClientID(name);
1:         con.start();
1:         return con;
1:     }
1: 
1:     public static Test suite() {
1:         return suite(DurableSubsOfflineSelectorConcurrentConsumeIndexUseTest.class);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         exceptions.clear();
1:         topic = (ActiveMQTopic) createDestination();
1:         createBroker();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
0:         ThreadTracker.result();
1:         super.tearDown();
1:         destroyBroker();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:         broker = BrokerFactory.createBroker("broker:(vm://" + getName(true) + ")");
1:         broker.setBrokerName(getName(true));
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setAdvisorySupport(false);
1:         broker.addConnector("tcp://0.0.0.0:0");
1: 
1:         setDefaultPersistenceAdapter(broker);
1: 
1:         ((KahaDBPersistenceAdapter)broker.getPersistenceAdapter()).getStore().getPageFile().setPageSize(1024);
1: 
1:         broker.start();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:     }
1: 
1:     public void testIndexPageUsage() throws Exception {
1:         Connection con = createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "true", "filter = 'true'", true);
1:         session.close();
1: 
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "false", "filter = 'false'", true);
1:         session.close();
1: 
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "all", null, true);
1:         session.close();
1: 
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "all2", null, true);
1:         session.close();
1: 
1:         con.close();
1: 
1:         // send messages
1: 
1:         final CountDownLatch goOn = new CountDownLatch(1);
1:         Thread sendThread = new Thread() {
1:             public void run() {
1:                 try {
1: 
1:                     final Connection sendCon = createConnection("send");
1:                     final Session sendSession = sendCon.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     final MessageProducer producer = sendSession.createProducer(null);
1: 
1:                     for (int i = 0; i < messageCount; i++) {
1:                         boolean filter = i % 2 == 1;
1:                         Message message = sendSession.createMessage();
1:                         message.setStringProperty("filter", filter ? "true" : "false");
1:                         producer.send(topic, message);
1: 
1:                         if (i > 0 && i % 10000 == 0) {
1:                             LOG.info("Sent:" + i);
1:                         }
1:                         if (i> messageCount/2) {
1:                             goOn.countDown();
1:                         }
1:                     }
1:                     sendSession.close();
1:                     sendCon.close();
1:                 } catch (Exception e) {
1:                     exceptions.add(e);
1:                 }
1:             }
1:         };
1:         sendThread.start();
1: 
1:         goOn.await(5, TimeUnit.MINUTES);
1:         LOG.info("Activating consumers");
1: 
1:         // consume messages in parallel
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer consumerTrue = session.createDurableSubscriber(topic, "true", "filter = 'true'", true);
1:         Listener listenerT = new Listener();
1:         consumerTrue.setMessageListener(listenerT);
1: 
1:         MessageConsumer consumerFalse = session.createDurableSubscriber(topic, "false", "filter = 'false'", true);
1:         Listener listenerF = new Listener();
1:         consumerFalse.setMessageListener(listenerF);
1: 
1:         MessageConsumer consumerAll = session.createDurableSubscriber(topic, "all", null, true);
1:         Listener listenerA = new Listener();
1:         consumerAll.setMessageListener(listenerA);
1: 
1:         MessageConsumer consumerAll2 = session.createDurableSubscriber(topic, "all2", null, true);
1:         Listener listenerA2 = new Listener();
1:         consumerAll2.setMessageListener(listenerA2);
1: 
1:         waitFor(listenerA, messageCount);
1:         assertEquals(messageCount, listenerA.count);
1: 
1:         waitFor(listenerA2, messageCount);
1:         assertEquals(messageCount, listenerA2.count);
1: 
1:         assertEquals(messageCount / 2, listenerT.count);
1:         assertEquals(messageCount / 2, listenerF.count);
1: 
1:         consumerTrue.close();
1:         session.unsubscribe("true");
1: 
1:         consumerFalse.close();
1:         session.unsubscribe("false");
1: 
1:         consumerAll.close();
1:         session.unsubscribe("all");
1: 
1:         session.close();
1:         con.close();
1: 
0:         final KahaDBStore store = ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).getStore();
0:         LOG.info("Store page count: " + store.getPageFile().getPageCount());
0:         LOG.info("Store free page count: " + store.getPageFile().getFreePageCount());
0:         LOG.info("Store page in-use: " + (store.getPageFile().getPageCount() - store.getPageFile().getFreePageCount()));
1: 
0:         assertTrue("no leak of pages, always use just 10", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return 10 == store.getPageFile().getPageCount() -
0:                         store.getPageFile().getFreePageCount();
1:             }
0:         }, TimeUnit.SECONDS.toMillis(10)));
1:     }
1: 
1:     private void waitFor(final Listener listener, final int count) throws Exception {
1: 
1:         assertTrue("got all messages on time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return listener.count == count;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(10)));
1: 
1:     }
1: 
1:     public static class Listener implements MessageListener {
1:         int count = 0;
1:         String id = null;
1: 
1:         Listener() {
1:         }
1: 
1:         public void onMessage(Message message) {
1:             count++;
1:             if (id != null) {
1:                 try {
1:                     LOG.info(id + ", " + message.getJMSMessageID());
1:                 } catch (Exception ignored) {
1:                 }
1:             }
1:         }
1:     }
1: }
============================================================================