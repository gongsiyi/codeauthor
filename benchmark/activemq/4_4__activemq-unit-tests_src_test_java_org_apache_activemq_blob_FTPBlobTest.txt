2:b08ae50: /**
1:b08ae50:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b08ae50:  * contributor license agreements.  See the NOTICE file distributed with
1:b08ae50:  * this work for additional information regarding copyright ownership.
1:b08ae50:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b08ae50:  * (the "License"); you may not use this file except in compliance with
1:b08ae50:  * the License.  You may obtain a copy of the License at
1:b08ae50:  *
1:b08ae50:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b08ae50:  *
1:b08ae50:  * Unless required by applicable law or agreed to in writing, software
1:b08ae50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b08ae50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b08ae50:  * See the License for the specific language governing permissions and
1:b08ae50:  * limitations under the License.
2:b08ae50:  */
1:b08ae50: package org.apache.activemq.blob;
1:200f06b: 
1:b08ae50: import java.io.BufferedWriter;
1:b08ae50: import java.io.File;
1:b08ae50: import java.io.FileWriter;
1:b08ae50: import java.io.InputStream;
3:200f06b: 
1:b08ae50: import javax.jms.Message;
1:b08ae50: import javax.jms.MessageConsumer;
1:b08ae50: import javax.jms.MessageProducer;
1:b08ae50: import javax.jms.Session;
1:200f06b: 
1:b08ae50: import org.apache.activemq.ActiveMQSession;
1:b08ae50: import org.apache.activemq.BlobMessage;
1:b08ae50: import org.apache.activemq.command.ActiveMQBlobMessage;
1:200f06b: 
1:41a1842: public class FTPBlobTest extends FTPTestSupport {
1:200f06b: 
1:200f06b:     public void testBlobFile() throws Exception {
1:41a1842:         setConnection();
1:200f06b:         // first create Message
1:200f06b:         File file = File.createTempFile("amq-data-file-", ".dat");
1:b08ae50:         // lets write some data
1:200f06b:         String content = "hello world " + System.currentTimeMillis();
1:b08ae50:         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
1:b08ae50:         writer.append(content);
1:b08ae50:         writer.close();
1:200f06b: 
1:200f06b:         ActiveMQSession session = (ActiveMQSession) connection.createSession(
1:200f06b:                 false, Session.AUTO_ACKNOWLEDGE);
1:b08ae50:         MessageProducer producer = session.createProducer(destination);
1:b08ae50:         MessageConsumer consumer = session.createConsumer(destination);
1:b08ae50:         BlobMessage message = session.createBlobMessage(file);
1:78a54c9:         message.setName("fileName");
1:200f06b: 
1:b08ae50:         producer.send(message);
1:b08ae50:         Thread.sleep(1000);
1:200f06b: 
1:b08ae50:         // check message send
1:b08ae50:         Message msg = consumer.receive(1000);
1:c7d559f:         assertTrue(msg instanceof ActiveMQBlobMessage);
1:200f06b: 
1:78a54c9:         assertEquals("name is correct", "fileName", ((ActiveMQBlobMessage)msg).getName());
1:b08ae50:         InputStream input = ((ActiveMQBlobMessage) msg).getInputStream();
1:b08ae50:         StringBuilder b = new StringBuilder();
1:b08ae50:         int i = input.read();
1:200f06b:         while (i != -1) {
1:200f06b:             b.append((char) i);
1:200f06b:             i = input.read();
2:200f06b:         }
1:200f06b:         input.close();
1:c7d559f:         File uploaded = new File(ftpHomeDirFile, msg.getJMSMessageID().toString().replace(":", "_"));
1:c7d559f:         assertEquals(content, b.toString());
1:af159dd:         assertTrue(uploaded.exists());
1:af159dd:         ((ActiveMQBlobMessage)msg).deleteFile();
1:af159dd:         assertFalse(uploaded.exists());
1:200f06b:     }
1:200f06b: 
1:200f06b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(msg instanceof ActiveMQBlobMessage);
/////////////////////////////////////////////////////////////////////////
1:         File uploaded = new File(ftpHomeDirFile, msg.getJMSMessageID().toString().replace(":", "_"));
1:         assertEquals(content, b.toString());
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:78a54c9
/////////////////////////////////////////////////////////////////////////
1:         message.setName("fileName");
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("name is correct", "fileName", ((ActiveMQBlobMessage)msg).getName());
commit:200f06b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.ftpserver.FtpServer;
0: import org.apache.ftpserver.FtpServerFactory;
0: import org.apache.ftpserver.ftplet.AuthorizationRequest;
0: import org.apache.ftpserver.ftplet.User;
0: import org.apache.ftpserver.ftplet.UserManager;
0: import org.apache.ftpserver.listener.ListenerFactory;
0: import org.apache.ftpserver.usermanager.UsernamePasswordAuthentication;
0: import org.jmock.Expectations;
0: import org.jmock.Mockery;
0: import org.jmock.api.Invocation;
0: import org.jmock.lib.action.CustomAction;
0:  * To start this test make sure an ftp server is running with user: activemq and
0:  * password: activemq
0:     private static final String ftpServerListenerName = "default";
0:     private ActiveMQConnection connection;
0:     private FtpServer server;
0:     final static String userNamePass = "activemq";
1: 
0:     Mockery context = null;
1: 
0:     protected void setUp() throws Exception {
1: 
0:         final File ftpHomeDirFile = new File("target/FTPBlobTest/ftptest");
0:         ftpHomeDirFile.mkdirs();
0:         ftpHomeDirFile.getParentFile().deleteOnExit();
1: 
0:         FtpServerFactory serverFactory = new FtpServerFactory();
0:         ListenerFactory factory = new ListenerFactory();
1: 
0:         // mock up a user manager to validate user activemq:activemq and provide
0:         // home dir options
0:         context = new Mockery();
0:         final UserManager userManager = context.mock(UserManager.class);
0:         final User user = context.mock(User.class);
0:         context.checking(new Expectations() {{
0:                 atLeast(1).of(userManager).authenticate(
0:                         with(any(UsernamePasswordAuthentication.class))); will(returnValue(user));
0:                 atLeast(1).of(userManager).getUserByName(userNamePass); will(returnValue(user));
0:                 atLeast(1).of(user).getHomeDirectory(); will(returnValue(ftpHomeDirFile.getParent()));
0:                 atLeast(1).of(user).getMaxIdleTime(); will(returnValue(20000));
0:                 atLeast(1).of(user).getName(); will(returnValue(userNamePass));
0:                 atLeast(1).of(user).authorize( with(any(AuthorizationRequest.class))); will(new CustomAction("return first passed in param") {
0:                     public Object invoke(Invocation invocation)
0:                             throws Throwable {
0:                         return invocation.getParameter(0);
1:                     }
0:                 });
1:             }
0:         });
1: 
0:         serverFactory.setUserManager(userManager);
0:         factory.setPort(0);
0:         serverFactory.addListener(ftpServerListenerName, factory
0:                 .createListener());
0:         server = serverFactory.createServer();
0:         server.start();
0:         int ftpPort = serverFactory.getListener(ftpServerListenerName)
0:                 .getPort();
1: 
0:         bindAddress = "vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=ftp://"
0:                 + userNamePass
0:                 + ":"
0:                 + userNamePass
0:                 + "@localhost:"
0:                 + ftpPort
0:                 + "/ftptest/";
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         connection.close();
0:         super.tearDown();
0:         server.stop();
1:     }
1: 
1:     public void testBlobFile() throws Exception {
1:         // first create Message
1:         File file = File.createTempFile("amq-data-file-", ".dat");
1:         String content = "hello world " + System.currentTimeMillis();
1: 
1:         ActiveMQSession session = (ActiveMQSession) connection.createSession(
1:                 false, Session.AUTO_ACKNOWLEDGE);
1: 
/////////////////////////////////////////////////////////////////////////
1:         while (i != -1) {
1:             b.append((char) i);
1:             i = input.read();
1:         input.close();
0:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:af159dd
/////////////////////////////////////////////////////////////////////////
0:         File uploaded = new File(ftpHomeDirFile, msg.getJMSMessageID().toString().replace(":", "_")); 
1:         assertTrue(uploaded.exists());
1:         ((ActiveMQBlobMessage)msg).deleteFile();
1:         assertFalse(uploaded.exists());
commit:41a1842
/////////////////////////////////////////////////////////////////////////
1: public class FTPBlobTest extends FTPTestSupport {
1:         setConnection();
commit:8c4ded4
/////////////////////////////////////////////////////////////////////////
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b08ae50
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
1: import java.io.BufferedWriter;
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.io.InputStream;
0: 
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: 
0: import junit.framework.Assert;
0: 
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.BlobMessage;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.ActiveMQBlobMessage;
0: 
1: /**
0:  * To start this test make sure an ftp server is running with
0:  * user: activemq and password: activemq
1:  */
0: public class FTPBlobTest extends EmbeddedBrokerTestSupport {
0: 	
0: 	private ActiveMQConnection connection;
0: 
0: 	protected void setUp() throws Exception {
0: 		bindAddress = "vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=ftp://activemq:activemq@localhost/ftptest/";
0:         super.setUp();
0: 
0:         connection = (ActiveMQConnection) createConnection();
0:         connection.start();
0: 	}
0: 	
0: 	public void testBlobFile() throws Exception {
0: 		// first create Message
0: 		File file = File.createTempFile("amq-data-file-", ".dat");
1:         // lets write some data
0: 		String content = "hello world "+ System.currentTimeMillis();
1:         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
1:         writer.append(content);
1:         writer.close();
0:         
0:         ActiveMQSession session = (ActiveMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         BlobMessage message = session.createBlobMessage(file);
0:         
1:         producer.send(message);
1:         Thread.sleep(1000);
0: 
1:         // check message send
1:         Message msg = consumer.receive(1000);
0:         Assert.assertTrue(msg instanceof ActiveMQBlobMessage);
0: 
1:         InputStream input = ((ActiveMQBlobMessage) msg).getInputStream();
1:         StringBuilder b = new StringBuilder();
1:         int i = input.read();
0:         while(i != -1) {
0:         	b.append((char) i);
0:         	i = input.read();
0:         }
0:         Assert.assertEquals(content, b.toString());
0: 	}
0: 
0: }
============================================================================