1:044699c: /**
1:044699c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:044699c:  * contributor license agreements.  See the NOTICE file distributed with
1:044699c:  * this work for additional information regarding copyright ownership.
1:044699c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:044699c:  * (the "License"); you may not use this file except in compliance with
1:044699c:  * the License.  You may obtain a copy of the License at
1:044699c:  *
1:044699c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:044699c:  *
1:044699c:  * Unless required by applicable law or agreed to in writing, software
1:044699c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:044699c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:044699c:  * See the License for the specific language governing permissions and
1:044699c:  * limitations under the License.
1:044699c:  */
1:044699c: package org.apache.activemq.console;
1:044699c: 
1:044699c: import org.apache.activemq.broker.BrokerService;
1:044699c: import org.apache.activemq.command.ActiveMQDestination;
1:044699c: import org.apache.activemq.command.ActiveMQQueue;
1:044699c: import org.apache.activemq.command.ActiveMQTopic;
1:044699c: import org.apache.activemq.console.command.DstatCommand;
1:044699c: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1:044699c: import org.junit.After;
1:044699c: import org.junit.Before;
1:044699c: import org.junit.Test;
1:044699c: import org.slf4j.LoggerFactory;
1:044699c: 
1:044699c: import java.io.ByteArrayOutputStream;
1:044699c: import java.util.Arrays;
1:044699c: import java.util.LinkedList;
1:044699c: 
1:044699c: import static org.junit.Assert.assertFalse;
1:044699c: import static org.junit.Assert.assertTrue;
1:044699c: 
1:044699c: public class DstatCommandTest {
1:044699c:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(DstatCommandTest.class);
1:044699c: 
1:044699c:     final String CONNECTOR_NAME="tcp-openWire";
1:044699c: 
1:044699c:     BrokerService brokerService;
1:044699c: 
1:044699c: 
1:044699c:     @Before
1:044699c:     public void createBroker() throws Exception {
1:044699c:         brokerService = new BrokerService();
1:044699c:         brokerService.getManagementContext().setCreateConnector(false);
1:044699c:         brokerService.setPersistent(false);
1:044699c:         brokerService.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue("Q1"), new ActiveMQQueue("Q2"), new ActiveMQTopic("T1")});
1:044699c:         brokerService.addConnector("tcp://0.0.0.0:0").setName(CONNECTOR_NAME);
1:044699c:         brokerService.start();
1:044699c:     }
1:044699c: 
1:044699c:     @After
1:044699c:     public void stopBroker() throws Exception {
1:044699c:         if (brokerService != null) {
1:044699c:             brokerService.stop();
1:044699c:         }
1:044699c:     }
1:044699c: 
1:044699c:     @Test
1:044699c:     public void verifyInflightAttribute() throws Exception {
1:044699c:         String result = executeQuery("");
1:044699c:         LOG.info("Result:" + result);
1:044699c:         assertFalse("Output valid", result.contains("Inflight"));
1:044699c: 
1:044699c:         result = executeQuery("queues");
1:044699c:         LOG.info("Result:" + result);
1:044699c:         assertTrue("Output valid", result.contains("Inflight"));
1:044699c:     }
1:044699c: 
1:044699c:     private String executeQuery(String query) throws Exception {
1:044699c:         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(1024);
1:044699c:         CommandContext context = new CommandContext();
1:044699c:         context.setFormatter(new CommandShellOutputFormatter(byteArrayOutputStream));
1:044699c: 
1:044699c:         DstatCommand queryCommand = new DstatCommand();
1:044699c:         queryCommand.setJmxUseLocal(true);
1:044699c:         queryCommand.setCommandContext(context);
1:044699c: 
1:044699c:         LinkedList<String> args = new LinkedList<>();
1:044699c:         args.addAll(Arrays.asList(query.split(" ")));
1:044699c:         queryCommand.execute(args);
1:044699c: 
1:044699c:         return byteArrayOutputStream.toString();
1:044699c:     }
1:044699c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:044699c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.console.command.DstatCommand;
1: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.util.Arrays;
1: import java.util.LinkedList;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class DstatCommandTest {
1:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(DstatCommandTest.class);
1: 
1:     final String CONNECTOR_NAME="tcp-openWire";
1: 
1:     BrokerService brokerService;
1: 
1: 
1:     @Before
1:     public void createBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.setPersistent(false);
1:         brokerService.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue("Q1"), new ActiveMQQueue("Q2"), new ActiveMQTopic("T1")});
1:         brokerService.addConnector("tcp://0.0.0.0:0").setName(CONNECTOR_NAME);
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void verifyInflightAttribute() throws Exception {
1:         String result = executeQuery("");
1:         LOG.info("Result:" + result);
1:         assertFalse("Output valid", result.contains("Inflight"));
1: 
1:         result = executeQuery("queues");
1:         LOG.info("Result:" + result);
1:         assertTrue("Output valid", result.contains("Inflight"));
1:     }
1: 
1:     private String executeQuery(String query) throws Exception {
1:         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(1024);
1:         CommandContext context = new CommandContext();
1:         context.setFormatter(new CommandShellOutputFormatter(byteArrayOutputStream));
1: 
1:         DstatCommand queryCommand = new DstatCommand();
1:         queryCommand.setJmxUseLocal(true);
1:         queryCommand.setCommandContext(context);
1: 
1:         LinkedList<String> args = new LinkedList<>();
1:         args.addAll(Arrays.asList(query.split(" ")));
1:         queryCommand.execute(args);
1: 
1:         return byteArrayOutputStream.toString();
1:     }
1: }
============================================================================