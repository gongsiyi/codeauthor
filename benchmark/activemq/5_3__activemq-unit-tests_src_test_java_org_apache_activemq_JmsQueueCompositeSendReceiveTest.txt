1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:f8b0c22: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: 
1:80fd502: import org.apache.activemq.broker.BrokerRegistry;
1:f8b0c22: import org.apache.activemq.broker.BrokerService;
1:80fd502: import org.apache.activemq.broker.region.Queue;
1:80fd502: import org.apache.activemq.broker.region.RegionBroker;
1:f8b0c22: import org.apache.activemq.command.ActiveMQDestination;
1:80fd502: import org.apache.activemq.command.ActiveMQQueue;
1:74a7a8b: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1:0e1d632: import org.apache.activemq.util.Wait;
1:74a7a8b: 
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsQueueCompositeSendReceiveTest extends JmsTopicSendReceiveTest {
1:fc00993:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
1:d29ca2a:             .getLog(JmsQueueCompositeSendReceiveTest.class);
1:d29ca2a:     
1:d29ca2a:     /**
1:d29ca2a:      * Sets a test to have a queue destination and non-persistent delivery mode.
1:d29ca2a:      *
1:d29ca2a:      * @see junit.framework.TestCase#setUp()
1:d29ca2a:      */
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         topic = false;
1:d29ca2a:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the consumer subject.
1:d29ca2a:      *
1:d29ca2a:      * @return String - consumer subject
1:d29ca2a:      * @see org.apache.activemq.test.TestSupport#getConsumerSubject()
1:d29ca2a:      */
1:d29ca2a:     protected String getConsumerSubject() {
1:d29ca2a:         return "FOO.BAR.HUMBUG";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the producer subject.
1:d29ca2a:      *
1:d29ca2a:      * @return String - producer subject
1:d29ca2a:      * @see org.apache.activemq.test.TestSupport#getProducerSubject()
1:d29ca2a:      */
1:d29ca2a:     protected String getProducerSubject() {
1:d29ca2a:         return "FOO.BAR.HUMBUG,FOO.BAR.HUMBUG2";
1:d29ca2a:     }
1:aecbd1c:    
1:d29ca2a:     /**
1:d29ca2a:      * Test if all the messages sent are being received.
1:d29ca2a:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testSendReceive() throws Exception {
1:d29ca2a:         super.testSendReceive();
1:d29ca2a:         messages.clear();
1:d29ca2a:         Destination consumerDestination = consumeSession.createQueue("FOO.BAR.HUMBUG2");
1:fc00993:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
1:d29ca2a:         MessageConsumer consumer = null;
1:d29ca2a:         if (durable) {
1:fc00993:             LOG.info("Creating durable consumer");
1:d29ca2a:             consumer = consumeSession.createDurableSubscriber((Topic) consumerDestination, getName());
1:d29ca2a:         } else {
1:d29ca2a:             consumer = consumeSession.createConsumer(consumerDestination);
1:d29ca2a:         }
1:d29ca2a:         consumer.setMessageListener(this);
1:d29ca2a: 
1:d29ca2a:         assertMessagesAreReceived();
1:fc00993:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:d29ca2a:     }
1:d29ca2a:     
1:f8b0c22:     public void testDuplicate() throws Exception {
1:f8b0c22:     	ActiveMQDestination queue = (ActiveMQDestination)session.createQueue("TEST,TEST");
1:f8b0c22:         for (int i = 0; i < data.length; i++) {
1:f8b0c22:             Message message = createMessage(i);
1:f8b0c22:             configureMessage(message);
1:f8b0c22:             if (verbose) {
1:f8b0c22:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
1:d29ca2a:             }
1:f8b0c22:             producer.send(queue, message);
1:f8b0c22:         }
1:d29ca2a:         
1:80fd502:         Thread.sleep(200); // wait for messages to be queued
1:80fd502:         
1:80fd502:         BrokerService broker = BrokerRegistry.getInstance().lookup("localhost");
1:0e1d632:         final Queue dest = (Queue)((RegionBroker)broker.getRegionBroker()).getQueueRegion().getDestinationMap().get(new ActiveMQQueue("TEST"));
1:0e1d632:         assertTrue("all messages were received", Wait.waitFor(new Wait.Condition(){
1:0e1d632:             public boolean isSatisified() throws Exception {
1:0e1d632:                 return data.length == dest.getDestinationStatistics().getMessages().getCount();
1:0e1d632:             }}));
1:0e1d632:         
1:80fd502:         dest.purge();
1:80fd502:         assertEquals(0, dest.getDestinationStatistics().getMessages().getCount());
1:f8b0c22:     }
1:f8b0c22: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
1:             LOG.info("Creating durable consumer");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("" + data.length + " messages(s) received, closing down connections");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:aecbd1c
/////////////////////////////////////////////////////////////////////////
1:    
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Topic;
1: 
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class JmsQueueCompositeSendReceiveTest extends JmsTopicSendReceiveTest {
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
1:             .getLog(JmsQueueCompositeSendReceiveTest.class);
1:     
1:     /**
1:      * Sets a test to have a queue destination and non-persistent delivery mode.
1:      *
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         topic = false;
1:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:         super.setUp();
1:     }
1: 
1:     /**
1:      * Returns the consumer subject.
1:      *
1:      * @return String - consumer subject
1:      * @see org.apache.activemq.test.TestSupport#getConsumerSubject()
1:      */
1:     protected String getConsumerSubject() {
1:         return "FOO.BAR.HUMBUG";
1:     }
1: 
1:     /**
1:      * Returns the producer subject.
1:      *
1:      * @return String - producer subject
1:      * @see org.apache.activemq.test.TestSupport#getProducerSubject()
1:      */
1:     protected String getProducerSubject() {
1:         return "FOO.BAR.HUMBUG,FOO.BAR.HUMBUG2";
1:     }
1: 
1:     /**
1:      * Test if all the messages sent are being received.
1:      *
1:      * @throws Exception
1:      */
1:     public void testSendReceive() throws Exception {
1:         super.testSendReceive();
1:         messages.clear();
1:         Destination consumerDestination = consumeSession.createQueue("FOO.BAR.HUMBUG2");
0:         log.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
1:         MessageConsumer consumer = null;
1:         if (durable) {
0:             log.info("Creating durable consumer");
1:             consumer = consumeSession.createDurableSubscriber((Topic) consumerDestination, getName());
1:         } else {
1:             consumer = consumeSession.createConsumer(consumerDestination);
1:         }
1:         consumer.setMessageListener(this);
1: 
1:         assertMessagesAreReceived();
0:         log.info("" + data.length + " messages(s) received, closing down connections");
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:0e1d632
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         final Queue dest = (Queue)((RegionBroker)broker.getRegionBroker()).getQueueRegion().getDestinationMap().get(new ActiveMQQueue("TEST"));
1:         assertTrue("all messages were received", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 return data.length == dest.getDestinationStatistics().getMessages().getCount();
1:             }}));
1:         
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:80fd502
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(200); // wait for messages to be queued
1:         
1:         BrokerService broker = BrokerRegistry.getInstance().lookup("localhost");
0:         Queue dest = (Queue)((RegionBroker)broker.getRegionBroker()).getQueueRegion().getDestinationMap().get(new ActiveMQQueue("TEST"));
0:         assertEquals(data.length, dest.getDestinationStatistics().getMessages().getCount());
1:         dest.purge();
1:         assertEquals(0, dest.getDestinationStatistics().getMessages().getCount());
commit:f8b0c22
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Message;
0: import javax.management.MBeanServerConnection;
0: import javax.management.MBeanServerInvocationHandler;
0: import javax.management.ObjectName;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXServiceURL;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testDuplicate() throws Exception {
1:     	ActiveMQDestination queue = (ActiveMQDestination)session.createQueue("TEST,TEST");
1:         for (int i = 0; i < data.length; i++) {
1:             Message message = createMessage(i);
1:             configureMessage(message);
1:             if (verbose) {
1:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
1:             }
1:             producer.send(queue, message);
1:         }
0:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi");
0:         JMXConnector connector = JMXConnectorFactory.connect(url, null);
0:         connector.connect();
0:         MBeanServerConnection connection = connector.getMBeanServerConnection();
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:Type=Queue,Destination=TEST,BrokerName=localhost");
0:         
0:         QueueViewMBean queueMbean = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(connection, queueViewMBeanName, QueueViewMBean.class, true);
0:         assertEquals(data.length, queueMbean.getQueueSize());
0:         queueMbean.purge();
0:         assertEquals(0, queueMbean.getQueueSize());
1:     }
============================================================================