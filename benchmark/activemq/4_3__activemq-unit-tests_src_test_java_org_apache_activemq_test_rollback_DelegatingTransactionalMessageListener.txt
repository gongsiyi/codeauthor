1:39b0376: /**
1:39b0376:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:39b0376:  * contributor license agreements.  See the NOTICE file distributed with
1:39b0376:  * this work for additional information regarding copyright ownership.
1:39b0376:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:39b0376:  * (the "License"); you may not use this file except in compliance with
1:39b0376:  * the License.  You may obtain a copy of the License at
2:39b0376:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:39b0376:  *
1:39b0376:  * Unless required by applicable law or agreed to in writing, software
1:39b0376:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39b0376:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39b0376:  * See the License for the specific language governing permissions and
1:39b0376:  * limitations under the License.
1:39b0376:  */
1:39b0376: package org.apache.activemq.test.rollback;
2:39b0376: 
1:39b0376: import javax.jms.Connection;
1:39b0376: import javax.jms.Destination;
1:39b0376: import javax.jms.JMSException;
1:39b0376: import javax.jms.Message;
1:39b0376: import javax.jms.MessageConsumer;
1:39b0376: import javax.jms.MessageListener;
1:39b0376: import javax.jms.Session;
1:39b0376: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:39b0376: 
1:39b0376: public class DelegatingTransactionalMessageListener implements MessageListener {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(DelegatingTransactionalMessageListener.class);
1:39b0376: 
1:39b0376:     private final MessageListener underlyingListener;
1:39b0376:     private boolean transacted = true;
1:39b0376:     private int ackMode = Session.AUTO_ACKNOWLEDGE;
1:39b0376:     private Session session;
1:39b0376: 
1:39b0376:     public DelegatingTransactionalMessageListener(MessageListener underlyingListener, Connection connection, Destination destination) {
1:39b0376:         this.underlyingListener = underlyingListener;
1:39b0376: 
1:39b0376:         try {
1:39b0376:             session = connection.createSession(transacted, ackMode);
1:39b0376:             MessageConsumer consumer = session.createConsumer(destination);
1:39b0376:             consumer.setMessageListener(this);
1:74a7a8b:         } catch (JMSException e) {
1:39b0376:             throw new IllegalStateException("Could not listen to " + destination, e);
4:39b0376:         }
1:39b0376:     }
1:39b0376: 
1:39b0376:     public void onMessage(Message message) {
1:39b0376:         try {
1:39b0376:             underlyingListener.onMessage(message);
1:39b0376:             session.commit();
1:74a7a8b:         } catch (Throwable e) {
1:39b0376:             rollback();
1:39b0376:         }
1:39b0376:     }
1:39b0376: 
1:39b0376:     private void rollback() {
1:39b0376:         try {
1:39b0376:             session.rollback();
1:74a7a8b:         } catch (JMSException e) {
1:fc00993:             LOG.error("Failed to rollback: " + e, e);
1:39b0376:         }
1:39b0376:     }
1:39b0376: 
1:39b0376:     public Session getSession() {
1:39b0376:         return session;
1:39b0376:     }
1:39b0376: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(DelegatingTransactionalMessageListener.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(DelegatingTransactionalMessageListener.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.error("Failed to rollback: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (Throwable e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:0c93dfd
/////////////////////////////////////////////////////////////////////////
0:         catch (Throwable e) {
author:James Strachan
-------------------------------------------------------------------------------
commit:39b0376
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test.rollback;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
1: 
1: public class DelegatingTransactionalMessageListener implements MessageListener {
0:     private static final transient Log log = LogFactory.getLog(DelegatingTransactionalMessageListener.class);
1: 
1:     private final MessageListener underlyingListener;
1:     private boolean transacted = true;
1:     private int ackMode = Session.AUTO_ACKNOWLEDGE;
1:     private Session session;
1: 
1:     public DelegatingTransactionalMessageListener(MessageListener underlyingListener, Connection connection, Destination destination) {
1:         this.underlyingListener = underlyingListener;
1: 
1:         try {
1:             session = connection.createSession(transacted, ackMode);
1:             MessageConsumer consumer = session.createConsumer(destination);
1:             consumer.setMessageListener(this);
1:         }
0:         catch (JMSException e) {
1:             throw new IllegalStateException("Could not listen to " + destination, e);
1:         }
1:     }
1: 
1:     public void onMessage(Message message) {
1:         try {
1:             underlyingListener.onMessage(message);
1:             session.commit();
1:         }
0:         catch (Exception e) {
1:             rollback();
1:         }
1:     }
1: 
1:     private void rollback() {
1:         try {
1:             session.rollback();
1:         }
0:         catch (JMSException e) {
0:             log.error("Failed to rollback: " + e, e);
1:         }
1:     }
1: 
1:     public Session getSession() {
1:         return session;
1:     }
1: }
============================================================================