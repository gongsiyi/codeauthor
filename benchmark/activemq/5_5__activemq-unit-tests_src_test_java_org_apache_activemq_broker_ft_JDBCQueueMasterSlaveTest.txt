1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:5a81bbb: package org.apache.activemq.broker.ft;
1:dc258ab: 
1:dc258ab: import java.io.IOException;
1:32d3fd5: import java.io.PrintWriter;
1:dc258ab: import java.net.URI;
1:dc258ab: import java.sql.Connection;
1:dc258ab: import java.sql.SQLException;
1:7b231fe: import java.sql.SQLFeatureNotSupportedException;
1:7b231fe: import java.util.logging.Logger;
1:32d3fd5: 
1:32d3fd5: import javax.sql.DataSource;
1:32d3fd5: 
1:5a81bbb: import org.apache.activemq.broker.BrokerService;
1:dc258ab: import org.apache.activemq.broker.TransportConnector;
1:170b86a: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1:5a81bbb: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:13bbe52: import org.apache.activemq.util.DefaultIOExceptionHandler;
1:170b86a: import org.apache.activemq.util.IOHelper;
1:5a81bbb: import org.apache.derby.jdbc.EmbeddedDataSource;
1:32d3fd5: 
1:1877a14: public class JDBCQueueMasterSlaveTest extends QueueMasterSlaveTestSupport {
1:165959e:     protected SyncCreateDataSource sharedDs;
1:5a81bbb:     protected String MASTER_URL = "tcp://localhost:62001";
1:5a81bbb:     protected String SLAVE_URL  = "tcp://localhost:62002";
1:bf5b1fc:     protected String findStatement;
1:dc258ab: 
1:5a81bbb:     protected void setUp() throws Exception {
1:5a81bbb:         // startup db
1:efaa351:         sharedDs = new SyncCreateDataSource((EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory()));
1:5a81bbb:         super.setUp();
1:bf5b1fc:         findStatement = ((JDBCPersistenceAdapter) master.getPersistenceAdapter()).getStatements().getFindMessageStatement();
4:32d3fd5:     }
1:32d3fd5: 
1:165959e:     protected void tearDown() throws Exception {
1:165959e:         super.tearDown();
1:165959e:         DataSourceServiceSupport.shutdownDefaultDataSource(sharedDs.delegate);
1:165959e:     }
1:165959e: 
1:5a81bbb:     protected void createMaster() throws Exception {
1:5a81bbb:         master = new BrokerService();
1:dc258ab:         master.setBrokerName("master");
1:5a81bbb:         master.addConnector(MASTER_URL);
1:5a81bbb:         master.setUseJmx(false);
1:5a81bbb:         master.setPersistent(true);
1:5a81bbb:         master.setDeleteAllMessagesOnStartup(true);
1:5a81bbb:         JDBCPersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter();
1:5a81bbb:         persistenceAdapter.setDataSource(getExistingDataSource());
1:dc258ab:         configureJdbcPersistenceAdapter(persistenceAdapter);
1:5a81bbb:         master.setPersistenceAdapter(persistenceAdapter);
1:dc258ab:         configureBroker(master);
1:5a81bbb:         master.start();
1:32d3fd5:     }
1:32d3fd5: 
1:13bbe52:     protected void configureBroker(BrokerService brokerService) {
1:13bbe52:         DefaultIOExceptionHandler stopBrokerOnStoreException = new DefaultIOExceptionHandler();
1:13bbe52:         // we want any store io exception to stop the broker
1:13bbe52:         stopBrokerOnStoreException.setIgnoreSQLExceptions(false);
1:13bbe52:         brokerService.setIoExceptionHandler(stopBrokerOnStoreException);
1:32d3fd5:     }
1:32d3fd5: 
1:5a81bbb:     protected void createSlave() throws Exception {
1:5a81bbb:         // use a separate thread as the slave will block waiting for
1:5a81bbb:         // the exclusive db lock
1:5a81bbb:         Thread t = new Thread() {
1:5a81bbb:             public void run() {
1:5a81bbb:                 try {
1:5a81bbb:                     BrokerService broker = new BrokerService();
1:dc258ab:                     broker.setBrokerName("slave");
1:dc258ab:                     TransportConnector connector = new TransportConnector();
1:dc258ab:                     connector.setUri(new URI(SLAVE_URL));
1:dc258ab:                     broker.addConnector(connector);
1:5a81bbb:                     // no need for broker.setMasterConnectorURI(masterConnectorURI)
1:5a81bbb:                     // as the db lock provides the slave/master initialisation
1:5a81bbb:                     broker.setUseJmx(false);
1:5a81bbb:                     broker.setPersistent(true);
1:5a81bbb:                     JDBCPersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter();
1:5a81bbb:                     persistenceAdapter.setDataSource(getExistingDataSource());
1:5a81bbb:                     persistenceAdapter.setCreateTablesOnStartup(false);
1:5a81bbb:                     broker.setPersistenceAdapter(persistenceAdapter);
1:dc258ab:                     configureJdbcPersistenceAdapter(persistenceAdapter);
1:dc258ab:                     configureBroker(broker);
1:5a81bbb:                     broker.start();
1:5a81bbb:                     slave.set(broker);
1:5a81bbb:                     slaveStarted.countDown();
1:dc258ab:                 } catch (IllegalStateException expectedOnShutdown) {
1:5a81bbb:                 } catch (Exception e) {
1:5a81bbb:                     fail("failed to start slave broker, reason:" + e);
1:32d3fd5:                 }
1:32d3fd5:             }
1:32d3fd5:         };
1:5a81bbb:         t.start();
1:32d3fd5:     }
1:32d3fd5: 
1:dc258ab:     protected void configureJdbcPersistenceAdapter(JDBCPersistenceAdapter persistenceAdapter) throws IOException {
1:dc258ab:         persistenceAdapter.setLockKeepAlivePeriod(500);
1:170b86a:         persistenceAdapter.getLocker().setLockAcquireSleepInterval(500);
1:32d3fd5:     }
1:32d3fd5: 
1:32d3fd5:     protected DataSource getExistingDataSource() throws Exception {
1:5a81bbb:         return sharedDs;
1:32d3fd5:     }
1:32d3fd5: 
1:32d3fd5: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:bf5b1fc
/////////////////////////////////////////////////////////////////////////
1:     protected String findStatement;
1:         findStatement = ((JDBCPersistenceAdapter) master.getPersistenceAdapter()).getStatements().getFindMessageStatement();
commit:165959e
/////////////////////////////////////////////////////////////////////////
1:     protected SyncCreateDataSource sharedDs;
/////////////////////////////////////////////////////////////////////////
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         DataSourceServiceSupport.shutdownDefaultDataSource(sharedDs.delegate);
1:     }
1: 
commit:efaa351
/////////////////////////////////////////////////////////////////////////
1:         sharedDs = new SyncCreateDataSource((EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory()));
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.DefaultIOExceptionHandler;
/////////////////////////////////////////////////////////////////////////
1:     protected void configureBroker(BrokerService brokerService) {
1:         DefaultIOExceptionHandler stopBrokerOnStoreException = new DefaultIOExceptionHandler();
1:         // we want any store io exception to stop the broker
1:         stopBrokerOnStoreException.setIgnoreSQLExceptions(false);
1:         brokerService.setIoExceptionHandler(stopBrokerOnStoreException);
commit:32d3fd5
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
0:     protected DataSource sharedDs;
0:         sharedDs = new SyncDataSource((EmbeddedDataSource)new DataSourceSupport().getDataSource());
/////////////////////////////////////////////////////////////////////////
1:     protected DataSource getExistingDataSource() throws Exception {
1: 
0:     // prevent concurrent calls from attempting to create the db at the same time
0:     // can result in "already exists in this jvm" errors
0:     class SyncDataSource implements DataSource {
0:         final EmbeddedDataSource delegate;
0:         SyncDataSource(EmbeddedDataSource dataSource) {
0:             this.delegate = dataSource;
1:         }
0:             @Override
0:             public Connection getConnection() throws SQLException {
0:                 synchronized (this) {
0:                     return delegate.getConnection();
1:                 }
1:             }
1: 
0:             @Override
0:             public Connection getConnection(String username, String password) throws SQLException {
0:                 synchronized (this) {
0:                     return delegate.getConnection();
1:                 }
1:             }
1: 
0:             @Override
0:             public PrintWriter getLogWriter() throws SQLException {
0:                 return null;
1:             }
1: 
0:             @Override
0:             public void setLogWriter(PrintWriter out) throws SQLException {
1:             }
1: 
0:             @Override
0:             public void setLoginTimeout(int seconds) throws SQLException {
1:             }
1: 
0:             @Override
0:             public int getLoginTimeout() throws SQLException {
0:                 return 0;
1:             }
1: 
0:             @Override
0:             public <T> T unwrap(Class<T> iface) throws SQLException {
0:                 return null;
1:             }
1: 
0:             @Override
0:             public boolean isWrapperFor(Class<?> iface) throws SQLException {
0:                 return false;
1:             }
1: 
0:             EmbeddedDataSource getDelegate() {
0:                 return delegate;
1:             }
1:         };
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import java.net.InetSocketAddress;
1: import java.net.URI;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.command.BrokerInfo;
0: import org.apache.activemq.transport.TransportAcceptListener;
0: import org.apache.activemq.transport.TransportServer;
/////////////////////////////////////////////////////////////////////////
1:         master.setBrokerName("master");
1:         configureJdbcPersistenceAdapter(persistenceAdapter);
1:         configureBroker(master);
0:     protected void configureBroker(BrokerService master) {
0:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                     broker.setBrokerName("slave");
1:                     TransportConnector connector = new TransportConnector();
1:                     connector.setUri(new URI(SLAVE_URL));
1:                     broker.addConnector(connector);
/////////////////////////////////////////////////////////////////////////
1:                     configureJdbcPersistenceAdapter(persistenceAdapter);
1:                     configureBroker(broker);
1:                 } catch (IllegalStateException expectedOnShutdown) {
/////////////////////////////////////////////////////////////////////////
1:     protected void configureJdbcPersistenceAdapter(JDBCPersistenceAdapter persistenceAdapter) throws IOException {
1:         persistenceAdapter.setLockKeepAlivePeriod(500);
0:         persistenceAdapter.setLockAcquireSleepInterval(500);
0:     }
1: 
commit:19881e7
/////////////////////////////////////////////////////////////////////////
0:         persistenceAdapter.setLockAcquireSleepInterval(500);
commit:5a81bbb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker.ft;
0: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.jdbc.DataSourceSupport;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
0: 
0: public class JDBCQueueMasterSlaveTest extends QueueMasterSlaveTest {
0:     protected EmbeddedDataSource sharedDs;
1:     protected String MASTER_URL = "tcp://localhost:62001";
1:     protected String SLAVE_URL  = "tcp://localhost:62002";
0: 
1:     protected void setUp() throws Exception {
1:         // startup db
0:         sharedDs = (EmbeddedDataSource) new DataSourceSupport().getDataSource();
1:         super.setUp();
0:     }
0:     
1:     protected void createMaster() throws Exception {
1:         master = new BrokerService();
1:         master.addConnector(MASTER_URL);
1:         master.setUseJmx(false);
1:         master.setPersistent(true);
1:         master.setDeleteAllMessagesOnStartup(true);
1:         JDBCPersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter();
1:         persistenceAdapter.setDataSource(getExistingDataSource());
0:         persistenceAdapter.setLockKeepAlivePeriod(500);
1:         master.setPersistenceAdapter(persistenceAdapter);
1:         master.start();
0:     }
0: 
1:     protected void createSlave() throws Exception {
1:         // use a separate thread as the slave will block waiting for
1:         // the exclusive db lock
1:         Thread t = new Thread() {
1:             public void run() {
1:                 try {
1:                     BrokerService broker = new BrokerService();
0:                     broker.addConnector(SLAVE_URL);
1:                     // no need for broker.setMasterConnectorURI(masterConnectorURI)
1:                     // as the db lock provides the slave/master initialisation
1:                     broker.setUseJmx(false);
1:                     broker.setPersistent(true);
1:                     JDBCPersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter();
1:                     persistenceAdapter.setDataSource(getExistingDataSource());
1:                     persistenceAdapter.setCreateTablesOnStartup(false);
1:                     broker.setPersistenceAdapter(persistenceAdapter);
1:                     broker.start();
1:                     slave.set(broker);
1:                     slaveStarted.countDown();
1:                 } catch (Exception e) {
1:                     fail("failed to start slave broker, reason:" + e);
0:                 }
0:             }
0:         };
1:         t.start();
0:     }
0: 
0:     protected EmbeddedDataSource getExistingDataSource() throws Exception {
1:         return sharedDs;
0:     }
0: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:7b231fe
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLFeatureNotSupportedException;
1: import java.util.logging.Logger;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:             public Logger getParentLogger() throws SQLFeatureNotSupportedException {
0:                 return null;
0:             }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1877a14
/////////////////////////////////////////////////////////////////////////
1: public class JDBCQueueMasterSlaveTest extends QueueMasterSlaveTestSupport {
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:170b86a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1: import org.apache.activemq.util.IOHelper;
/////////////////////////////////////////////////////////////////////////
0:         sharedDs = new SyncDataSource((EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory()));
/////////////////////////////////////////////////////////////////////////
1:         persistenceAdapter.getLocker().setLockAcquireSleepInterval(500);
============================================================================