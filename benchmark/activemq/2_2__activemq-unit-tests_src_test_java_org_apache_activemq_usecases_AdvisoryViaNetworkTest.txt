1:11afd5f: /**
1:11afd5f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:11afd5f:  * contributor license agreements.  See the NOTICE file distributed with
1:11afd5f:  * this work for additional information regarding copyright ownership.
1:11afd5f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:11afd5f:  * (the "License"); you may not use this file except in compliance with
1:11afd5f:  * the License.  You may obtain a copy of the License at
1:11afd5f:  *
1:11afd5f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:11afd5f:  *
1:11afd5f:  * Unless required by applicable law or agreed to in writing, software
1:11afd5f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:11afd5f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:11afd5f:  * See the License for the specific language governing permissions and
1:11afd5f:  * limitations under the License.
1:11afd5f:  */
1:11afd5f: package org.apache.activemq.usecases;
1:11afd5f: 
1:11afd5f: import java.net.URI;
1:002ade7: import java.util.Arrays;
1:297eadf: 
1:11afd5f: import javax.jms.MessageConsumer;
1:297eadf: 
1:11afd5f: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:11afd5f: import org.apache.activemq.broker.BrokerService;
1:002ade7: import org.apache.activemq.broker.region.DestinationInterceptor;
1:11afd5f: import org.apache.activemq.broker.region.RegionBroker;
1:002ade7: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1:002ade7: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:002ade7: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:002ade7: import org.apache.activemq.command.ActiveMQQueue;
1:11afd5f: import org.apache.activemq.command.ActiveMQTopic;
1:11afd5f: import org.apache.activemq.command.BrokerInfo;
1:11afd5f: import org.apache.activemq.network.NetworkConnector;
1:11afd5f: import org.apache.activemq.util.MessageIdList;
1:11afd5f: import org.apache.activemq.util.Wait;
1:11afd5f: import org.slf4j.Logger;
1:11afd5f: import org.slf4j.LoggerFactory;
1:11afd5f: 
1:11afd5f: public class AdvisoryViaNetworkTest extends JmsMultipleBrokersTestSupport {
1:11afd5f:     private static final Logger LOG = LoggerFactory.getLogger(AdvisoryViaNetworkTest.class);
1:11afd5f: 
1:11afd5f: 
1:297eadf:     @Override
1:11afd5f:     protected BrokerService createBroker(String brokerName) throws Exception {
1:11afd5f:         BrokerService broker = new BrokerService();
1:11afd5f:         broker.setPersistent(false);
1:11afd5f:         broker.setUseJmx(false);
1:11afd5f:         broker.setBrokerName(brokerName);
1:11afd5f:         broker.addConnector(new URI(AUTO_ASSIGN_TRANSPORT));
1:11afd5f:         brokers.put(brokerName, new BrokerItem(broker));
1:11afd5f: 
1:11afd5f:         return broker;
1:11afd5f:     }
1:11afd5f: 
1:11afd5f:     public void testAdvisoryForwarding() throws Exception {
1:11afd5f:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Producer.Topic.FOO");
1:002ade7: 
1:11afd5f:         createBroker("A");
1:11afd5f:         createBroker("B");
1:11afd5f:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:11afd5f:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:11afd5f:         startAllBrokers();
1:11afd5f:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:11afd5f: 
1:11afd5f: 
1:11afd5f:         MessageConsumer consumerA = createConsumer("A", advisoryTopic);
1:11afd5f:         MessageConsumer consumerB = createConsumer("B", advisoryTopic);
1:11afd5f: 
1:11afd5f:         this.sendMessages("A", new ActiveMQTopic("FOO"), 1);
1:11afd5f: 
1:11afd5f:         MessageIdList messagesA = getConsumerMessages("A", consumerA);
1:11afd5f:         MessageIdList messagesB = getConsumerMessages("B", consumerB);
1:11afd5f: 
1:11afd5f:         LOG.info("consumerA = " + messagesA);
1:11afd5f:         LOG.info("consumerB = " + messagesB);
1:11afd5f: 
1:11afd5f:         messagesA.assertMessagesReceived(2);
1:11afd5f:         messagesB.assertMessagesReceived(2);
1:11afd5f:     }
1:11afd5f: 
1:297eadf:     /**
1:297eadf:      * Test that explicitly setting advisoryPrefetchSize works for advisory topics
1:297eadf:      * on a network connector
1:297eadf:      *
1:297eadf:      * @throws Exception
1:297eadf:      */
1:297eadf:     public void testAdvisoryPrefetchSize() throws Exception {
1:297eadf:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:297eadf:         ActiveMQTopic topic1 = new ActiveMQTopic("A.FOO");
1:297eadf: 
1:297eadf:         createBroker("A");
1:297eadf:         BrokerService brokerB = createBroker("B");
1:297eadf:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:297eadf:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:297eadf:         networkBridge.addStaticallyIncludedDestination(topic1);
1:297eadf:         networkBridge.setDuplex(true);
1:297eadf:         networkBridge.setAdvisoryPrefetchSize(10);
1:297eadf:         networkBridge.setPrefetchSize(1);
1:297eadf: 
1:297eadf:         startAllBrokers();
1:297eadf:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:297eadf: 
1:297eadf:         createConsumer("A", topic1);
1:297eadf:         createConsumer("A", new ActiveMQTopic("A.FOO2"));
1:297eadf: 
1:297eadf:         //verify that brokerB's advisory prefetch is 10 but normal topic prefetch is 1
1:297eadf:         assertEquals(10, brokerB.getDestination(advisoryTopic).getConsumers().get(0).getPrefetchSize());
1:297eadf:         assertEquals(1, brokerB.getDestination(topic1).getConsumers().get(0).getPrefetchSize());
1:297eadf: 
1:297eadf:         //both advisory messages are not acked yet because of optimized acks
1:297eadf:         assertDeqInflight(0, 2);
1:297eadf:     }
1:297eadf: 
1:297eadf:     /**
1:297eadf:      * Test that explicitly setting advisoryPrefetchSize to 1 works for advisory topics
1:297eadf:      * on a network connector
1:297eadf:      *
1:297eadf:      * @throws Exception
1:297eadf:      */
1:297eadf:     public void testAdvisoryPrefetchSize1() throws Exception {
1:297eadf:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:297eadf:         ActiveMQTopic topic1 = new ActiveMQTopic("A.FOO");
1:297eadf: 
1:297eadf:         createBroker("A");
1:297eadf:         BrokerService brokerB = createBroker("B");
1:297eadf:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:297eadf:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:297eadf:         networkBridge.addStaticallyIncludedDestination(topic1);
1:297eadf:         networkBridge.setDuplex(true);
1:297eadf:         networkBridge.setAdvisoryPrefetchSize(1);
1:297eadf:         networkBridge.setPrefetchSize(10);
1:297eadf: 
1:297eadf:         startAllBrokers();
1:297eadf:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:297eadf: 
1:297eadf:         createConsumer("A", topic1);
1:297eadf:         createConsumer("A", new ActiveMQTopic("A.FOO2"));
1:297eadf: 
1:297eadf:         //verify that brokerB's advisory prefetch is 1 but normal topic prefetch is 10
1:297eadf:         assertEquals(1, brokerB.getDestination(advisoryTopic).getConsumers().get(0).getPrefetchSize());
1:297eadf:         assertEquals(10, brokerB.getDestination(topic1).getConsumers().get(0).getPrefetchSize());
1:297eadf: 
1:297eadf:         assertDeqInflight(2, 0);
1:297eadf:     }
1:297eadf: 
1:297eadf:     /**
1:297eadf:      * Test that if advisoryPrefetchSize isn't set then prefetchSize is used instead
1:297eadf:      * for backwards compatibility
1:297eadf:      *
1:297eadf:      * @throws Exception
1:297eadf:      */
1:297eadf:     public void testAdvisoryPrefetchSizeNotSet() throws Exception {
1:297eadf:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:297eadf:         ActiveMQTopic topic1 = new ActiveMQTopic("A.FOO");
1:297eadf: 
1:297eadf:         createBroker("A");
1:297eadf:         BrokerService brokerB = createBroker("B");
1:297eadf:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:297eadf:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:297eadf:         networkBridge.addStaticallyIncludedDestination(topic1);
1:297eadf:         networkBridge.setDuplex(true);
1:297eadf:         networkBridge.setPrefetchSize(10);
1:297eadf: 
1:297eadf:         startAllBrokers();
1:297eadf:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:297eadf: 
1:297eadf:         createConsumer("A", topic1);
1:297eadf:         createConsumer("A", new ActiveMQTopic("A.FOO2"));
1:297eadf: 
1:297eadf:         //verify that both consumers have a prefetch of 10
1:297eadf:         assertEquals(10, brokerB.getDestination(advisoryTopic).getConsumers().get(0).getPrefetchSize());
1:297eadf:         assertEquals(10, brokerB.getDestination(topic1).getConsumers().get(0).getPrefetchSize());
1:297eadf: 
1:297eadf:         assertDeqInflight(0, 2);
1:297eadf:     }
1:297eadf: 
1:297eadf:     /**
1:297eadf:      * Test that if advisoryPrefetchSize isn't set then prefetchSize is used instead
1:297eadf:      * for backwards compatibility (test when set to 1)
1:297eadf:      *
1:297eadf:      * @throws Exception
1:297eadf:      */
1:297eadf:     public void testPrefetchSize1() throws Exception {
1:297eadf:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:297eadf:         ActiveMQTopic topic1 = new ActiveMQTopic("A.FOO");
1:297eadf: 
1:297eadf:         createBroker("A");
1:297eadf:         BrokerService brokerB = createBroker("B");
1:297eadf:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:297eadf:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:297eadf:         networkBridge.setDuplex(true);
1:297eadf:         networkBridge.setPrefetchSize(1);
1:297eadf: 
1:297eadf:         startAllBrokers();
1:297eadf:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:297eadf: 
1:297eadf:         createConsumer("A", topic1);
1:297eadf:         createConsumer("A", new ActiveMQTopic("A.FOO2"));
1:297eadf: 
1:297eadf:         //verify that both consumers have a prefetch of 1
1:297eadf:         assertEquals(1, brokerB.getDestination(advisoryTopic).getConsumers().get(0).getPrefetchSize());
1:297eadf:         assertEquals(1, brokerB.getDestination(topic1).getConsumers().get(0).getPrefetchSize());
1:297eadf: 
1:297eadf:         assertDeqInflight(2, 0);
1:297eadf:     }
1:297eadf: 
1:297eadf:     /**
1:297eadf:      * Test configuring the advisoryAckPercentage works with advisoryPrefetchSize
1:297eadf:      * @throws Exception
1:297eadf:      */
1:297eadf:     public void testAdvisoryPrefetchSizePercent() throws Exception {
1:297eadf:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:297eadf: 
1:297eadf:         createBroker("A");
1:297eadf:         createBroker("B");
1:297eadf:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:297eadf:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:297eadf:         networkBridge.setDuplex(true);
1:297eadf:         networkBridge.setAdvisoryPrefetchSize(10);
1:297eadf:         networkBridge.setAdvisoryAckPercentage(65);
1:297eadf: 
1:297eadf:         startAllBrokers();
1:297eadf:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:297eadf: 
1:297eadf:         for (int i = 0; i < 10; i++) {
1:297eadf:             createConsumer("A", new ActiveMQTopic("A.FOO"));
1:297eadf:         }
1:297eadf: 
1:297eadf:         assertDeqInflight(7, 3);
1:297eadf:     }
1:297eadf: 
1:297eadf:     /**
1:297eadf:      * Test configuring the advisoryAckPercentage works when only prefetchSize exists
1:297eadf:      * and is applied against that instead for advisory consumers
1:297eadf:      *
1:297eadf:      * @throws Exception
1:297eadf:      */
1:297eadf:     public void testPrefetchSizePercent() throws Exception {
1:297eadf:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:297eadf: 
1:297eadf:         createBroker("A");
1:297eadf:         createBroker("B");
1:297eadf:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:297eadf:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:297eadf:         networkBridge.setDuplex(true);
1:297eadf:         networkBridge.setPrefetchSize(10);
1:297eadf:         networkBridge.setAdvisoryAckPercentage(65);
1:297eadf: 
1:297eadf:         startAllBrokers();
1:297eadf:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:297eadf: 
1:297eadf:         for (int i = 0; i < 10; i++) {
1:297eadf:             createConsumer("A", new ActiveMQTopic("A.FOO"));
1:297eadf:         }
1:297eadf: 
1:297eadf:         assertDeqInflight(7, 3);
1:297eadf:     }
1:297eadf: 
1:297eadf:     private void assertDeqInflight(final int dequeue, final int inflight) throws Exception {
1:297eadf:         assertTrue("deq and inflight as expected", Wait.waitFor(new Wait.Condition() {
1:297eadf:             @Override
1:297eadf:             public boolean isSatisified() throws Exception {
1:297eadf:                 RegionBroker regionBroker = (RegionBroker) brokers.get("A").broker.getRegionBroker();
1:297eadf:                 LOG.info("A Deq:" + regionBroker.getDestinationStatistics().getDequeues().getCount());
1:297eadf:                 LOG.info("A Inflight:" + regionBroker.getDestinationStatistics().getInflight().getCount());
1:297eadf:                 return regionBroker.getDestinationStatistics().getDequeues().getCount() == dequeue
1:297eadf:                         && regionBroker.getDestinationStatistics().getInflight().getCount() == inflight;
1:297eadf:             }
1:297eadf:         }));
1:297eadf:     }
1:297eadf: 
1:002ade7: 
1:002ade7:     public void testAdvisoryForwardingDuplexNC() throws Exception {
1:002ade7:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Producer.Topic.FOO");
1:002ade7: 
1:002ade7:         createBroker("A");
1:002ade7:         createBroker("B");
1:002ade7:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:002ade7:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:002ade7:         networkBridge.setDuplex(true);
1:002ade7:         startAllBrokers();
1:002ade7:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:002ade7: 
1:002ade7: 
1:002ade7:         MessageConsumer consumerA = createConsumer("A", advisoryTopic);
1:002ade7:         MessageConsumer consumerB = createConsumer("B", advisoryTopic);
1:002ade7: 
1:002ade7:         this.sendMessages("A", new ActiveMQTopic("FOO"), 1);
1:002ade7: 
1:002ade7:         MessageIdList messagesA = getConsumerMessages("A", consumerA);
1:002ade7:         MessageIdList messagesB = getConsumerMessages("B", consumerB);
1:002ade7: 
1:002ade7:         LOG.info("consumerA = " + messagesA);
1:002ade7:         LOG.info("consumerB = " + messagesB);
1:11afd5f: 
1:002ade7:         messagesA.assertMessagesReceived(2);
1:002ade7:         messagesB.assertMessagesReceived(2);
1:002ade7:     }
1:11afd5f: 
1:11afd5f:     public void testBridgeRelevantAdvisoryNotAvailable() throws Exception {
1:11afd5f:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.FOO");
1:11afd5f:         createBroker("A");
1:11afd5f:         createBroker("B");
1:11afd5f:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:11afd5f:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:11afd5f: 
1:11afd5f:         startAllBrokers();
1:11afd5f:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:11afd5f: 
1:11afd5f: 
1:11afd5f:         MessageConsumer consumerA = createConsumer("A", advisoryTopic);
1:11afd5f:         MessageConsumer consumerB = createConsumer("B", advisoryTopic);
1:11afd5f: 
1:11afd5f:         createConsumer("A", new ActiveMQTopic("FOO"));
1:11afd5f: 
1:11afd5f:         MessageIdList messagesA = getConsumerMessages("A", consumerA);
1:11afd5f:         MessageIdList messagesB = getConsumerMessages("B", consumerB);
1:11afd5f: 
1:11afd5f:         LOG.info("consumerA = " + messagesA);
1:11afd5f:         LOG.info("consumerB = " + messagesB);
1:11afd5f: 
1:11afd5f:         messagesA.assertMessagesReceived(1);
1:11afd5f:         messagesB.assertMessagesReceived(0);
1:11afd5f:     }
1:11afd5f: 
1:002ade7:     public void testAdvisoryViaVirtualDest() throws Exception {
1:002ade7:         ActiveMQQueue advisoryQueue = new ActiveMQQueue("advQ");
1:002ade7:         createBroker("A");
1:002ade7: 
1:002ade7:         // convert advisories into advQ that cross the network bridge
1:002ade7:         CompositeTopic compositeTopic = new CompositeTopic();
1:002ade7:         compositeTopic.setName("ActiveMQ.Advisory.Connection");
1:002ade7:         compositeTopic.setForwardOnly(false);
1:002ade7:         compositeTopic.setForwardTo(Arrays.asList(advisoryQueue));
1:002ade7:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:002ade7:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{compositeTopic});
1:002ade7:         brokers.get("A").broker.setDestinationInterceptors(new DestinationInterceptor[]{virtualDestinationInterceptor});
1:002ade7: 
1:002ade7:         createBroker("B");
1:002ade7:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:002ade7:         networkBridge.setDuplex(true);
1:002ade7:         networkBridge.setPrefetchSize(1); // so advisories are acked immediately b/c we check inflight count below
1:002ade7: 
1:002ade7:         startAllBrokers();
1:002ade7:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:002ade7:         verifyPeerBrokerInfo(brokers.get("B"), 1);
1:002ade7: 
1:002ade7:         MessageConsumer consumerB = createConsumer("B", advisoryQueue);
1:002ade7: 
1:002ade7:         // to make a connection on A
1:002ade7:         createConsumer("A", new ActiveMQTopic("FOO"));
1:002ade7: 
1:002ade7:         MessageIdList messagesB = getConsumerMessages("B", consumerB);
1:002ade7: 
1:002ade7:         messagesB.waitForMessagesToArrive(2);
1:002ade7: 
1:002ade7:         assertTrue("deq and inflight as expected", Wait.waitFor(new Wait.Condition() {
1:002ade7:             @Override
1:002ade7:             public boolean isSatisified() throws Exception {
1:002ade7:                 RegionBroker regionBroker = (RegionBroker) brokers.get("A").broker.getRegionBroker();
1:002ade7:                 LOG.info("A Deq:" + regionBroker.getDestinationStatistics().getDequeues().getCount());
1:002ade7:                 LOG.info("A Inflight:" + regionBroker.getDestinationStatistics().getInflight().getCount());
1:002ade7:                 return regionBroker.getDestinationStatistics().getDequeues().getCount() > 2
1:002ade7:                         && regionBroker.getDestinationStatistics().getInflight().getCount() == 0;
1:002ade7:             }
1:002ade7:         }));
1:002ade7: 
1:002ade7:     }
1:002ade7: 
1:11afd5f:     private void verifyPeerBrokerInfo(BrokerItem brokerItem, final int max) throws Exception {
1:11afd5f:         final BrokerService broker = brokerItem.broker;
1:11afd5f:         final RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:11afd5f:         Wait.waitFor(new Wait.Condition() {
1:11afd5f:             @Override
1:11afd5f:             public boolean isSatisified() throws Exception {
1:11afd5f:                 LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:11afd5f:                 return max == regionBroker.getPeerBrokerInfos().length;
1:11afd5f:             }
1:11afd5f:          }, 120 * 1000);
1:11afd5f:         LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:11afd5f:         for (BrokerInfo info : regionBroker.getPeerBrokerInfos()) {
1:11afd5f:             LOG.info(info.getBrokerName());
1:11afd5f:         }
1:11afd5f:         assertEquals(broker.getBrokerName(), max, regionBroker.getPeerBrokerInfos().length);
1:11afd5f:     }
1:11afd5f: 
1:11afd5f: 
1:11afd5f:     @Override
1:11afd5f:     public void setUp() throws Exception {
1:11afd5f:         super.setAutoFail(true);
1:11afd5f:         super.setUp();
1:11afd5f:     }
1:11afd5f: 
1:11afd5f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:297eadf
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test that explicitly setting advisoryPrefetchSize works for advisory topics
1:      * on a network connector
1:      *
1:      * @throws Exception
1:      */
1:     public void testAdvisoryPrefetchSize() throws Exception {
1:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:         ActiveMQTopic topic1 = new ActiveMQTopic("A.FOO");
1: 
1:         createBroker("A");
1:         BrokerService brokerB = createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:         networkBridge.addStaticallyIncludedDestination(topic1);
1:         networkBridge.setDuplex(true);
1:         networkBridge.setAdvisoryPrefetchSize(10);
1:         networkBridge.setPrefetchSize(1);
1: 
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1: 
1:         createConsumer("A", topic1);
1:         createConsumer("A", new ActiveMQTopic("A.FOO2"));
1: 
1:         //verify that brokerB's advisory prefetch is 10 but normal topic prefetch is 1
1:         assertEquals(10, brokerB.getDestination(advisoryTopic).getConsumers().get(0).getPrefetchSize());
1:         assertEquals(1, brokerB.getDestination(topic1).getConsumers().get(0).getPrefetchSize());
1: 
1:         //both advisory messages are not acked yet because of optimized acks
1:         assertDeqInflight(0, 2);
1:     }
1: 
1:     /**
1:      * Test that explicitly setting advisoryPrefetchSize to 1 works for advisory topics
1:      * on a network connector
1:      *
1:      * @throws Exception
1:      */
1:     public void testAdvisoryPrefetchSize1() throws Exception {
1:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:         ActiveMQTopic topic1 = new ActiveMQTopic("A.FOO");
1: 
1:         createBroker("A");
1:         BrokerService brokerB = createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:         networkBridge.addStaticallyIncludedDestination(topic1);
1:         networkBridge.setDuplex(true);
1:         networkBridge.setAdvisoryPrefetchSize(1);
1:         networkBridge.setPrefetchSize(10);
1: 
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1: 
1:         createConsumer("A", topic1);
1:         createConsumer("A", new ActiveMQTopic("A.FOO2"));
1: 
1:         //verify that brokerB's advisory prefetch is 1 but normal topic prefetch is 10
1:         assertEquals(1, brokerB.getDestination(advisoryTopic).getConsumers().get(0).getPrefetchSize());
1:         assertEquals(10, brokerB.getDestination(topic1).getConsumers().get(0).getPrefetchSize());
1: 
1:         assertDeqInflight(2, 0);
1:     }
1: 
1:     /**
1:      * Test that if advisoryPrefetchSize isn't set then prefetchSize is used instead
1:      * for backwards compatibility
1:      *
1:      * @throws Exception
1:      */
1:     public void testAdvisoryPrefetchSizeNotSet() throws Exception {
1:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:         ActiveMQTopic topic1 = new ActiveMQTopic("A.FOO");
1: 
1:         createBroker("A");
1:         BrokerService brokerB = createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:         networkBridge.addStaticallyIncludedDestination(topic1);
1:         networkBridge.setDuplex(true);
1:         networkBridge.setPrefetchSize(10);
1: 
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1: 
1:         createConsumer("A", topic1);
1:         createConsumer("A", new ActiveMQTopic("A.FOO2"));
1: 
1:         //verify that both consumers have a prefetch of 10
1:         assertEquals(10, brokerB.getDestination(advisoryTopic).getConsumers().get(0).getPrefetchSize());
1:         assertEquals(10, brokerB.getDestination(topic1).getConsumers().get(0).getPrefetchSize());
1: 
1:         assertDeqInflight(0, 2);
1:     }
1: 
1:     /**
1:      * Test that if advisoryPrefetchSize isn't set then prefetchSize is used instead
1:      * for backwards compatibility (test when set to 1)
1:      *
1:      * @throws Exception
1:      */
1:     public void testPrefetchSize1() throws Exception {
1:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1:         ActiveMQTopic topic1 = new ActiveMQTopic("A.FOO");
1: 
1:         createBroker("A");
1:         BrokerService brokerB = createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:         networkBridge.setDuplex(true);
1:         networkBridge.setPrefetchSize(1);
1: 
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1: 
1:         createConsumer("A", topic1);
1:         createConsumer("A", new ActiveMQTopic("A.FOO2"));
1: 
1:         //verify that both consumers have a prefetch of 1
1:         assertEquals(1, brokerB.getDestination(advisoryTopic).getConsumers().get(0).getPrefetchSize());
1:         assertEquals(1, brokerB.getDestination(topic1).getConsumers().get(0).getPrefetchSize());
1: 
1:         assertDeqInflight(2, 0);
1:     }
1: 
1:     /**
1:      * Test configuring the advisoryAckPercentage works with advisoryPrefetchSize
1:      * @throws Exception
1:      */
1:     public void testAdvisoryPrefetchSizePercent() throws Exception {
1:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1: 
1:         createBroker("A");
1:         createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:         networkBridge.setDuplex(true);
1:         networkBridge.setAdvisoryPrefetchSize(10);
1:         networkBridge.setAdvisoryAckPercentage(65);
1: 
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             createConsumer("A", new ActiveMQTopic("A.FOO"));
1:         }
1: 
1:         assertDeqInflight(7, 3);
1:     }
1: 
1:     /**
1:      * Test configuring the advisoryAckPercentage works when only prefetchSize exists
1:      * and is applied against that instead for advisory consumers
1:      *
1:      * @throws Exception
1:      */
1:     public void testPrefetchSizePercent() throws Exception {
1:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.A.>");
1: 
1:         createBroker("A");
1:         createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:         networkBridge.setDuplex(true);
1:         networkBridge.setPrefetchSize(10);
1:         networkBridge.setAdvisoryAckPercentage(65);
1: 
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             createConsumer("A", new ActiveMQTopic("A.FOO"));
1:         }
1: 
1:         assertDeqInflight(7, 3);
1:     }
1: 
1:     private void assertDeqInflight(final int dequeue, final int inflight) throws Exception {
1:         assertTrue("deq and inflight as expected", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 RegionBroker regionBroker = (RegionBroker) brokers.get("A").broker.getRegionBroker();
1:                 LOG.info("A Deq:" + regionBroker.getDestinationStatistics().getDequeues().getCount());
1:                 LOG.info("A Inflight:" + regionBroker.getDestinationStatistics().getInflight().getCount());
1:                 return regionBroker.getDestinationStatistics().getDequeues().getCount() == dequeue
1:                         && regionBroker.getDestinationStatistics().getInflight().getCount() == inflight;
1:             }
1:         }));
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:002ade7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
1:     public void testAdvisoryForwardingDuplexNC() throws Exception {
1:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Producer.Topic.FOO");
1: 
1:         createBroker("A");
1:         createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:         networkBridge.setDuplex(true);
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1: 
1: 
1:         MessageConsumer consumerA = createConsumer("A", advisoryTopic);
1:         MessageConsumer consumerB = createConsumer("B", advisoryTopic);
1: 
1:         this.sendMessages("A", new ActiveMQTopic("FOO"), 1);
1: 
1:         MessageIdList messagesA = getConsumerMessages("A", consumerA);
1:         MessageIdList messagesB = getConsumerMessages("B", consumerB);
1: 
1:         LOG.info("consumerA = " + messagesA);
1:         LOG.info("consumerB = " + messagesB);
1: 
1:         messagesA.assertMessagesReceived(2);
1:         messagesB.assertMessagesReceived(2);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testAdvisoryViaVirtualDest() throws Exception {
1:         ActiveMQQueue advisoryQueue = new ActiveMQQueue("advQ");
1:         createBroker("A");
1: 
1:         // convert advisories into advQ that cross the network bridge
1:         CompositeTopic compositeTopic = new CompositeTopic();
1:         compositeTopic.setName("ActiveMQ.Advisory.Connection");
1:         compositeTopic.setForwardOnly(false);
1:         compositeTopic.setForwardTo(Arrays.asList(advisoryQueue));
1:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{compositeTopic});
1:         brokers.get("A").broker.setDestinationInterceptors(new DestinationInterceptor[]{virtualDestinationInterceptor});
1: 
1:         createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.setDuplex(true);
1:         networkBridge.setPrefetchSize(1); // so advisories are acked immediately b/c we check inflight count below
1: 
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:         verifyPeerBrokerInfo(brokers.get("B"), 1);
1: 
1:         MessageConsumer consumerB = createConsumer("B", advisoryQueue);
1: 
1:         // to make a connection on A
1:         createConsumer("A", new ActiveMQTopic("FOO"));
1: 
1:         MessageIdList messagesB = getConsumerMessages("B", consumerB);
1: 
1:         messagesB.waitForMessagesToArrive(2);
1: 
1:         assertTrue("deq and inflight as expected", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 RegionBroker regionBroker = (RegionBroker) brokers.get("A").broker.getRegionBroker();
1:                 LOG.info("A Deq:" + regionBroker.getDestinationStatistics().getDequeues().getCount());
1:                 LOG.info("A Inflight:" + regionBroker.getDestinationStatistics().getInflight().getCount());
1:                 return regionBroker.getDestinationStatistics().getDequeues().getCount() > 2
1:                         && regionBroker.getDestinationStatistics().getInflight().getCount() == 0;
1:             }
1:         }));
1: 
1:     }
1: 
commit:11afd5f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import javax.jms.MessageConsumer;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.MessageIdList;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AdvisoryViaNetworkTest extends JmsMultipleBrokersTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(AdvisoryViaNetworkTest.class);
1: 
1: 
1:     protected BrokerService createBroker(String brokerName) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.setBrokerName(brokerName);
1:         broker.addConnector(new URI(AUTO_ASSIGN_TRANSPORT));
1:         brokers.put(brokerName, new BrokerItem(broker));
1: 
1:         return broker;
1:     }
1: 
1:     public void testAdvisoryForwarding() throws Exception {
1:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Producer.Topic.FOO");
1: 
1:         createBroker("A");
1:         createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1: 
1: 
1:         MessageConsumer consumerA = createConsumer("A", advisoryTopic);
1:         MessageConsumer consumerB = createConsumer("B", advisoryTopic);
1: 
1:         this.sendMessages("A", new ActiveMQTopic("FOO"), 1);
1: 
1:         MessageIdList messagesA = getConsumerMessages("A", consumerA);
1:         MessageIdList messagesB = getConsumerMessages("B", consumerB);
1: 
1:         LOG.info("consumerA = " + messagesA);
1:         LOG.info("consumerB = " + messagesB);
1: 
1:         messagesA.assertMessagesReceived(2);
1:         messagesB.assertMessagesReceived(2);
1:     }
1: 
1: 
1:     public void testBridgeRelevantAdvisoryNotAvailable() throws Exception {
1:         ActiveMQTopic advisoryTopic = new ActiveMQTopic("ActiveMQ.Advisory.Consumer.Topic.FOO");
1:         createBroker("A");
1:         createBroker("B");
1:         NetworkConnector networkBridge = bridgeBrokers("A", "B");
1:         networkBridge.addStaticallyIncludedDestination(advisoryTopic);
1: 
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1: 
1: 
1:         MessageConsumer consumerA = createConsumer("A", advisoryTopic);
1:         MessageConsumer consumerB = createConsumer("B", advisoryTopic);
1: 
1:         createConsumer("A", new ActiveMQTopic("FOO"));
1: 
1:         MessageIdList messagesA = getConsumerMessages("A", consumerA);
1:         MessageIdList messagesB = getConsumerMessages("B", consumerB);
1: 
1:         LOG.info("consumerA = " + messagesA);
1:         LOG.info("consumerB = " + messagesB);
1: 
1:         messagesA.assertMessagesReceived(1);
1:         messagesB.assertMessagesReceived(0);
1:     }
1: 
1:     private void verifyPeerBrokerInfo(BrokerItem brokerItem, final int max) throws Exception {
1:         final BrokerService broker = brokerItem.broker;
1:         final RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:                 return max == regionBroker.getPeerBrokerInfos().length;
1:             }
1:          }, 120 * 1000);
1:         LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:         for (BrokerInfo info : regionBroker.getPeerBrokerInfos()) {
1:             LOG.info(info.getBrokerName());
1:         }
1:         assertEquals(broker.getBrokerName(), max, regionBroker.getPeerBrokerInfos().length);
1:     }
1: 
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:     }
1: 
1: }
============================================================================