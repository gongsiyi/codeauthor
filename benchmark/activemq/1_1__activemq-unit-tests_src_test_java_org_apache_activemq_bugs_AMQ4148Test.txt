1:c518498: /**
1:c518498:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c518498:  * contributor license agreements.  See the NOTICE file distributed with
1:c518498:  * this work for additional information regarding copyright ownership.
1:c518498:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c518498:  * (the "License"); you may not use this file except in compliance with
1:c518498:  * the License.  You may obtain a copy of the License at
1:c518498:  *
1:c518498:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c518498:  *
1:c518498:  * Unless required by applicable law or agreed to in writing, software
1:c518498:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c518498:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c518498:  * See the License for the specific language governing permissions and
1:c518498:  * limitations under the License.
1:c518498:  */
1:c518498: 
1:c518498: package org.apache.activemq.bugs;
1:c518498: 
1:c518498: import java.net.URI;
1:c518498: import java.util.Arrays;
1:c518498: import java.util.concurrent.TimeUnit;
1:c518498: 
1:c518498: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:c518498: import org.apache.activemq.broker.BrokerService;
1:c518498: import org.apache.activemq.broker.region.Destination;
1:c518498: import org.apache.activemq.command.ActiveMQDestination;
1:c518498: import org.apache.activemq.network.DemandForwardingBridgeSupport;
1:c518498: import org.apache.activemq.network.NetworkConnector;
1:c518498: import org.apache.activemq.util.Wait;
1:c518498: import org.junit.Assert;
1:c518498: 
1:c518498: /**
1:c518498:  * This test demonstrates a bug in {@link DemandForwardingBridgeSupport} whereby
1:c518498:  * a static subscription from broker1 to broker2 is forwarded to broker3 even
1:c518498:  * though the network TTL is 1. This results in duplicate subscriptions on
1:c518498:  * broker3.
1:c518498:  */
1:c518498: public class AMQ4148Test extends JmsMultipleBrokersTestSupport {
1:c518498: 
1:c518498:     public void test() throws Exception {
1:c518498:         // Create a hub-and-spoke network where each hub-spoke pair share
1:c518498:         // messages on a test queue.
1:c518498:         BrokerService hub = createBroker(new URI("broker:(vm://hub)/hub?persistent=false"));
1:c518498: 
1:c518498:         final BrokerService[] spokes = new BrokerService[4];
1:c518498:         for (int i = 0; i < spokes.length; i++) {
1:c518498:             spokes[i] = createBroker(new URI("broker:(vm://spoke" + i + ")/spoke" + i + "?persistent=false"));
1:c518498: 
1:c518498:         }
1:c518498:         startAllBrokers();
1:c518498: 
1:c518498:         ActiveMQDestination testQueue = createDestination(AMQ4148Test.class.getSimpleName() + ".queue", false);
1:c518498: 
1:c518498:         NetworkConnector[] ncs = new NetworkConnector[spokes.length];
1:c518498:         for (int i = 0; i < spokes.length; i++) {
1:c518498:             NetworkConnector nc = bridgeBrokers("hub", "spoke" + i);
1:c518498:             nc.setNetworkTTL(1);
1:c518498:             nc.setDuplex(true);
1:c518498:             nc.setConduitSubscriptions(false);
1:c518498:             nc.setStaticallyIncludedDestinations(Arrays.asList(testQueue));
1:c518498:             nc.start();
1:c518498: 
1:c518498:             ncs[i] = nc;
1:c518498:         }
1:c518498: 
1:c518498:         waitForBridgeFormation();
1:c518498: 
1:c518498:         // Pause to allow subscriptions to be created.
1:c518498:         TimeUnit.SECONDS.sleep(5);
1:c518498: 
1:c518498:         // Verify that the hub has a subscription from each spoke, but that each
1:c518498:         // spoke has a single subscription from the hub (since the network TTL is 1).
1:c518498:         final Destination hubTestQueue = hub.getDestination(testQueue);
1:c518498:         assertTrue("Expecting {" + spokes.length + "} consumer but was {" + hubTestQueue.getConsumers().size() + "}",
1:c518498:             Wait.waitFor(new Wait.Condition() {
1:c518498: 
1:c518498:                 @Override
1:c518498:                 public boolean isSatisified() throws Exception {
1:c518498:                     return spokes.length == hubTestQueue.getConsumers().size();
1:c518498:                 }
1:c518498:             })
1:c518498:         );
1:c518498: 
1:c518498:         // Now check each spoke has exactly one consumer on the Queue.
1:c518498:         for (int i = 0; i < 4; i++) {
1:c518498:             Destination spokeTestQueue = spokes[i].getDestination(testQueue);
1:c518498:             Assert.assertEquals(1, spokeTestQueue.getConsumers().size());
1:c518498:         }
1:c518498: 
1:c518498:         for (NetworkConnector nc : ncs) {
1:c518498:             nc.stop();
1:c518498:         }
1:c518498:     }
1:c518498: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:c518498
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import java.net.URI;
1: import java.util.Arrays;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.network.DemandForwardingBridgeSupport;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Assert;
1: 
1: /**
1:  * This test demonstrates a bug in {@link DemandForwardingBridgeSupport} whereby
1:  * a static subscription from broker1 to broker2 is forwarded to broker3 even
1:  * though the network TTL is 1. This results in duplicate subscriptions on
1:  * broker3.
1:  */
1: public class AMQ4148Test extends JmsMultipleBrokersTestSupport {
1: 
1:     public void test() throws Exception {
1:         // Create a hub-and-spoke network where each hub-spoke pair share
1:         // messages on a test queue.
1:         BrokerService hub = createBroker(new URI("broker:(vm://hub)/hub?persistent=false"));
1: 
1:         final BrokerService[] spokes = new BrokerService[4];
1:         for (int i = 0; i < spokes.length; i++) {
1:             spokes[i] = createBroker(new URI("broker:(vm://spoke" + i + ")/spoke" + i + "?persistent=false"));
1: 
1:         }
1:         startAllBrokers();
1: 
1:         ActiveMQDestination testQueue = createDestination(AMQ4148Test.class.getSimpleName() + ".queue", false);
1: 
1:         NetworkConnector[] ncs = new NetworkConnector[spokes.length];
1:         for (int i = 0; i < spokes.length; i++) {
1:             NetworkConnector nc = bridgeBrokers("hub", "spoke" + i);
1:             nc.setNetworkTTL(1);
1:             nc.setDuplex(true);
1:             nc.setConduitSubscriptions(false);
1:             nc.setStaticallyIncludedDestinations(Arrays.asList(testQueue));
1:             nc.start();
1: 
1:             ncs[i] = nc;
1:         }
1: 
1:         waitForBridgeFormation();
1: 
1:         // Pause to allow subscriptions to be created.
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         // Verify that the hub has a subscription from each spoke, but that each
1:         // spoke has a single subscription from the hub (since the network TTL is 1).
1:         final Destination hubTestQueue = hub.getDestination(testQueue);
1:         assertTrue("Expecting {" + spokes.length + "} consumer but was {" + hubTestQueue.getConsumers().size() + "}",
1:             Wait.waitFor(new Wait.Condition() {
1: 
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return spokes.length == hubTestQueue.getConsumers().size();
1:                 }
1:             })
1:         );
1: 
1:         // Now check each spoke has exactly one consumer on the Queue.
1:         for (int i = 0; i < 4; i++) {
1:             Destination spokeTestQueue = spokes[i].getDestination(testQueue);
1:             Assert.assertEquals(1, spokeTestQueue.getConsumers().size());
1:         }
1: 
1:         for (NetworkConnector nc : ncs) {
1:             nc.stop();
1:         }
1:     }
1: }
============================================================================