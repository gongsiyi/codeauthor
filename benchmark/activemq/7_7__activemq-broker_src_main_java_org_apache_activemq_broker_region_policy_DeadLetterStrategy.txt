1:a414c20: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:88203ae:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:88203ae:  * Unless required by applicable law or agreed to in writing, software
1:88203ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88203ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88203ae:  * See the License for the specific language governing permissions and
1:88203ae:  * limitations under the License.
1:88203ae:  */
1:88203ae: package org.apache.activemq.broker.region.policy;
1:0d85869: 
1:27c1719: import org.apache.activemq.broker.region.Subscription;
1:88203ae: import org.apache.activemq.command.ActiveMQDestination;
1:a414c20: import org.apache.activemq.command.Message;
1:a414c20: 
1:97502bd: /**
1:88203ae:  * A strategy for choosing which destination is used for dead letter queue messages.
1:97502bd:  *
1:97502bd:  *
1:88203ae:  */
1:88203ae: public interface DeadLetterStrategy {
1:97502bd: 
1:0d85869:     /**
1:a414c20:      * Allow pluggable strategy for deciding if message should be sent to a dead letter queue
1:a414c20:      * for example, you might not want to ignore expired or non-persistent messages
1:a414c20:      * @param message
1:a414c20:      * @return true if message should be sent to a dead letter queue
1:a414c20:      */
1:fc00993:     boolean isSendToDeadLetterQueue(Message message);
4:88203ae: 
1:88203ae:     /**
1:27c1719:      * Returns the dead letter queue for the given message and subscription.
1:88203ae:      */
1:27c1719:     ActiveMQDestination getDeadLetterQueueFor(Message message, Subscription subscription);
1:27c1719: 
1:88203ae:     /**
1:0d85869:      * @return true if processes expired messages
1:0d85869:      */
1:0d85869:     public boolean isProcessExpired() ;
1:0d85869: 
1:0d85869:     /**
1:0d85869:      * @param processExpired the processExpired to set
1:0d85869:      */
1:0d85869:     public void setProcessExpired(boolean processExpired);
1:0d85869: 
1:0d85869:     /**
1:0d85869:      * @return the processNonPersistent
1:0d85869:      */
1:0d85869:     public boolean isProcessNonPersistent();
1:0d85869: 
1:0d85869:     /**
1:0d85869:      * @param processNonPersistent the processNonPersistent to set
1:0d85869:      */
1:0d85869:     public void setProcessNonPersistent(boolean processNonPersistent);
1:e1f170d: 
1:88203ae:     /**
1:97502bd:      * Allows for a Message that was already processed by a DLQ to be rolled back in case
1:97502bd:      * of a move or a retry of that message, otherwise the Message would be considered a
1:97502bd:      * duplicate if this strategy is doing Message Auditing.
1:97502bd:      *
1:97502bd:      * @param message
1:97502bd:      */
1:97502bd:     public void rollback(Message message);
1:97502bd: 
1:0142c4d:     /**
1:0142c4d:      * The expiration value to use on messages sent to the DLQ, default 0
1:0142c4d:      * @return expiration in milli seconds
1:0142c4d:      */
1:0142c4d:     public void setExpiration(long expiration);
1:0142c4d: 
1:0142c4d:     public long getExpiration();
1:0142c4d: 
1:88203ae: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0142c4d
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * The expiration value to use on messages sent to the DLQ, default 0
1:      * @return expiration in milli seconds
1:      */
1:     public void setExpiration(long expiration);
1: 
1:     public long getExpiration();
1: 
commit:be919fb
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:97502bd
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Allows for a Message that was already processed by a DLQ to be rolled back in case
1:      * of a move or a retry of that message, otherwise the Message would be considered a
1:      * duplicate if this strategy is doing Message Auditing.
1:      *
1:      * @param message
1:      */
1:     public void rollback(Message message);
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e1f170d
/////////////////////////////////////////////////////////////////////////
0:     public boolean isDLQ(ActiveMQDestination destination);
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     boolean isSendToDeadLetterQueue(Message message);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:27c1719
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
1:      * Returns the dead letter queue for the given message and subscription.
1:     ActiveMQDestination getDeadLetterQueueFor(Message message, Subscription subscription);
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:0d85869
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * @return true if processes expired messages
1:      */
1:     public boolean isProcessExpired() ;
1: 
1:     /**
1:      * @param processExpired the processExpired to set
1:      */
1:     public void setProcessExpired(boolean processExpired);
1: 
1:     /**
1:      * @return the processNonPersistent
1:      */
1:     public boolean isProcessNonPersistent();
1: 
1:     /**
1:      * @param processNonPersistent the processNonPersistent to set
1:      */
1:     public void setProcessNonPersistent(boolean processNonPersistent);
commit:a414c20
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Allow pluggable strategy for deciding if message should be sent to a dead letter queue
1:      * for example, you might not want to ignore expired or non-persistent messages
1:      * @param message
1:      * @return true if message should be sent to a dead letter queue
1:      */
0:     public boolean isSendToDeadLetterQueue(Message message);
author:James Strachan
-------------------------------------------------------------------------------
commit:88203ae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
1:  * A strategy for choosing which destination is used for dead letter queue messages.
1:  * 
0:  * @version $Revision$
1:  */
1: public interface DeadLetterStrategy {
1: 
1:     /**
0:      * Returns the dead letter queue for the given destination.
1:      */
0:     ActiveMQDestination getDeadLetterQueueFor(ActiveMQDestination originalDestination);
1: 
1: }
============================================================================