1:eec1091: /**
1:eec1091:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:eec1091:  * contributor license agreements.  See the NOTICE file distributed with
1:eec1091:  * this work for additional information regarding copyright ownership.
1:eec1091:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:eec1091:  * (the "License"); you may not use this file except in compliance with
1:eec1091:  * the License.  You may obtain a copy of the License at
1:eec1091:  *
1:eec1091:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eec1091:  *
1:eec1091:  * Unless required by applicable law or agreed to in writing, software
1:eec1091:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eec1091:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eec1091:  * See the License for the specific language governing permissions and
1:eec1091:  * limitations under the License.
1:eec1091:  */
1:eec1091: 
1:eec1091: package org.apache.activemq.bugs;
1:eec1091: 
1:eec1091: import static org.junit.Assert.*;
1:eec1091: 
1:eec1091: import javax.jms.Connection;
1:eec1091: import javax.jms.DeliveryMode;
1:eec1091: import javax.jms.MessageProducer;
1:eec1091: import javax.jms.Session;
1:eec1091: import javax.jms.TopicSubscriber;
1:eec1091: 
1:eec1091: import org.apache.activemq.ActiveMQConnectionFactory;
1:eec1091: import org.apache.activemq.broker.BrokerService;
1:eec1091: import org.apache.activemq.broker.TransportConnector;
1:eec1091: import org.apache.activemq.broker.jmx.BrokerView;
1:eec1091: import org.apache.activemq.command.ActiveMQTopic;
1:eec1091: import org.apache.activemq.util.Wait;
1:eec1091: import org.junit.After;
1:eec1091: import org.junit.Before;
1:eec1091: import org.junit.Test;
1:eec1091: import org.slf4j.Logger;
1:eec1091: import org.slf4j.LoggerFactory;
1:eec1091: 
1:eec1091: public class AMQ3674Test {
1:eec1091: 
1:eec1091:     private static Logger LOG = LoggerFactory.getLogger(AMQ3674Test.class);
1:eec1091: 
1:eec1091:     private final static int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:eec1091:     private final static ActiveMQTopic destination = new ActiveMQTopic("XYZ");
1:eec1091: 
1:eec1091:     private ActiveMQConnectionFactory factory;
1:eec1091:     private BrokerService broker;
1:eec1091: 
1:eec1091:     @Test
1:eec1091:     public void removeSubscription() throws Exception {
1:eec1091: 
1:eec1091:         final Connection producerConnection = factory.createConnection();
1:eec1091:         producerConnection.start();
1:eec1091:         final Connection consumerConnection = factory.createConnection();
1:eec1091: 
1:eec1091:         consumerConnection.setClientID("subscriber1");
1:eec1091:         Session consumerMQSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:eec1091:         TopicSubscriber activeConsumer = (TopicSubscriber) consumerMQSession.createDurableSubscriber(destination, "myTopic");
1:eec1091:         consumerConnection.start();
1:eec1091: 
1:eec1091:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:eec1091:         MessageProducer producer = session.createProducer(destination);
1:eec1091:         producer.setDeliveryMode(deliveryMode);
1:eec1091: 
1:eec1091:         final BrokerView brokerView = broker.getAdminView();
1:eec1091: 
1:eec1091:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:eec1091: 
1:eec1091:         LOG.info("Current Durable Topic Subscriptions: " + brokerView.getDurableTopicSubscribers().length);
1:eec1091: 
1:eec1091:         try {
1:eec1091:             brokerView.destroyDurableSubscriber("subscriber1", "myTopic");
1:eec1091:             fail("Expected Exception for Durable consumer is in use");
1:eec1091:         } catch(Exception e) {
1:eec1091:             LOG.info("Recieved expected exception: " + e.getMessage());
1:eec1091:         }
1:eec1091: 
1:eec1091:         LOG.info("Current Durable Topic Subscriptions: " + brokerView.getDurableTopicSubscribers().length);
1:eec1091: 
1:eec1091:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:eec1091: 
1:eec1091:         activeConsumer.close();
1:eec1091:         consumerConnection.stop();
1:eec1091: 
1:eec1091:         assertTrue("The subscription should be in the inactive state.", Wait.waitFor(new Wait.Condition() {
1:eec1091: 
1:eec1091:             @Override
1:eec1091:             public boolean isSatisified() throws Exception {
1:eec1091:                 return brokerView.getInactiveDurableTopicSubscribers().length == 1;
1:eec1091:             }
1:eec1091:         }));
1:eec1091: 
1:eec1091:         try {
1:eec1091:             brokerView.destroyDurableSubscriber("subscriber1", "myTopic");
1:eec1091:         } finally {
1:eec1091:             producer.close();
1:eec1091:             producerConnection.close();
1:eec1091:         }
1:eec1091:     }
1:eec1091: 
1:eec1091:     @Before
1:eec1091:     public void setUp() throws Exception {
1:eec1091:         broker = new BrokerService();
1:eec1091:         broker.setPersistent(false);
1:eec1091:         broker.setUseJmx(true);
1:eec1091:         broker.setDeleteAllMessagesOnStartup(true);
1:eec1091:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
1:eec1091:         broker.start();
1:eec1091: 
1:eec1091:         factory = new ActiveMQConnectionFactory(connector.getPublishableConnectString());
1:eec1091:         factory.setAlwaysSyncSend(true);
1:eec1091:         factory.setDispatchAsync(false);
1:eec1091:     }
1:eec1091: 
1:eec1091:     @After
1:eec1091:     public void tearDown() throws Exception {
1:eec1091:         broker.stop();
1:eec1091:     }
1:eec1091: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:5aa8b30
/////////////////////////////////////////////////////////////////////////
commit:eec1091
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.*;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
0: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.jmx.BrokerView;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3674Test {
1: 
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ3674Test.class);
1: 
1:     private final static int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:     private final static ActiveMQTopic destination = new ActiveMQTopic("XYZ");
1: 
1:     private ActiveMQConnectionFactory factory;
1:     private BrokerService broker;
1: 
1:     @Test
1:     public void removeSubscription() throws Exception {
1: 
1:         final Connection producerConnection = factory.createConnection();
1:         producerConnection.start();
1:         final Connection consumerConnection = factory.createConnection();
1: 
1:         consumerConnection.setClientID("subscriber1");
1:         Session consumerMQSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         TopicSubscriber activeConsumer = (TopicSubscriber) consumerMQSession.createDurableSubscriber(destination, "myTopic");
1:         consumerConnection.start();
1: 
1:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1: 
1:         final BrokerView brokerView = broker.getAdminView();
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1: 
1:         LOG.info("Current Durable Topic Subscriptions: " + brokerView.getDurableTopicSubscribers().length);
1: 
1:         try {
1:             brokerView.destroyDurableSubscriber("subscriber1", "myTopic");
1:             fail("Expected Exception for Durable consumer is in use");
1:         } catch(Exception e) {
1:             LOG.info("Recieved expected exception: " + e.getMessage());
1:         }
1: 
1:         LOG.info("Current Durable Topic Subscriptions: " + brokerView.getDurableTopicSubscribers().length);
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1: 
1:         activeConsumer.close();
1:         consumerConnection.stop();
1: 
1:         assertTrue("The subscription should be in the inactive state.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerView.getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         try {
1:             brokerView.destroyDurableSubscriber("subscriber1", "myTopic");
1:         } finally {
1:             producer.close();
1:             producerConnection.close();
1:         }
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
1:         broker.start();
1: 
1:         factory = new ActiveMQConnectionFactory(connector.getPublishableConnectString());
1:         factory.setAlwaysSyncSend(true);
1:         factory.setDispatchAsync(false);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: }
============================================================================