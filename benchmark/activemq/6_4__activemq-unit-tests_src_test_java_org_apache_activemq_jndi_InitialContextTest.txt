1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.jndi;
9:d29ca2a: 
1:d29ca2a: import java.util.Properties;
1:d29ca2a: 
1:74a7a8b: import javax.naming.Context;
1:74a7a8b: import javax.naming.InitialContext;
1:74a7a8b: 
1:74a7a8b: import junit.framework.TestCase;
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:75bd4f2: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class InitialContextTest extends TestCase {
1:fc00993: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(InitialContextTest.class);
1:fc00993: 
1:d29ca2a:     public void testInitialContext() throws Exception {
1:d29ca2a:         InitialContext context = new InitialContext();
1:d29ca2a:         assertTrue("Created context", context != null);
1:d29ca2a: 
1:fc00993:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory)context.lookup("ConnectionFactory");
1:d29ca2a: 
1:d29ca2a:         assertTrue("Should have created a ConnectionFactory", connectionFactory != null);
1:d29ca2a: 
1:fc00993:         LOG.info("Created with brokerURL: " + connectionFactory.getBrokerURL());
1:d29ca2a: 
1:d29ca2a:     }
1:75bd4f2: 
1:75bd4f2:     public void testInitialContextHasXA() throws Exception {
1:75bd4f2:         InitialContext context = new InitialContext();
1:75bd4f2:         assertTrue("Created context", context != null);
1:75bd4f2: 
1:75bd4f2:         ActiveMQXAConnectionFactory connectionFactory = (ActiveMQXAConnectionFactory)context.lookup("XAConnectionFactory");
1:75bd4f2: 
1:75bd4f2:         assertTrue("Should have created an XAConnectionFactory", connectionFactory != null);
1:75bd4f2: 
1:75bd4f2:         LOG.info("Created with brokerURL: " + connectionFactory.getBrokerURL());
1:75bd4f2: 
1:75bd4f2:     }
1:7f0e135: 
1:d29ca2a:     public void testUsingStandardJNDIKeys() throws Exception {
1:d29ca2a:         Properties properties = new Properties();
1:d29ca2a:         properties.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:d29ca2a:         String expected = "tcp://localhost:65432";
1:d29ca2a:         properties.put(Context.PROVIDER_URL, expected);
1:7f0e135: 
1:d29ca2a:         InitialContext context = new InitialContext(properties);
1:d29ca2a:         assertTrue("Created context", context != null);
1:7f0e135: 
1:fc00993:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory)context.lookup("ConnectionFactory");
1:7f0e135: 
1:d29ca2a:         assertTrue("Should have created a ConnectionFactory", connectionFactory != null);
1:7f0e135: 
1:d29ca2a:         assertEquals("the brokerURL should match", expected, connectionFactory.getBrokerURL());
1:d29ca2a:     }
1:fc00993: 
1:7f0e135:     public void testConnectionFactoryPolicyConfig() throws Exception {
1:fc00993: 
1:7f0e135:         Properties properties = new Properties();
1:7f0e135:         properties.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:7f0e135:         properties.put(Context.PROVIDER_URL, "tcp://localhost:65432");
1:7f0e135:         properties.put("prefetchPolicy.queuePrefetch", "777");
1:7f0e135:         properties.put("redeliveryPolicy.maximumRedeliveries", "15");
1:7f0e135:         properties.put("redeliveryPolicy.backOffMultiplier", "32");
1:7f0e135: 
1:7f0e135:         InitialContext context = new InitialContext(properties);
1:7f0e135:         assertTrue("Created context", context != null);
1:7f0e135: 
1:fc00993:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory)context.lookup("ConnectionFactory");
1:7f0e135: 
1:7f0e135:         assertTrue("Should have created a ConnectionFactory", connectionFactory != null);
1:d29ca2a: 
1:7f0e135:         assertEquals(777, connectionFactory.getPrefetchPolicy().getQueuePrefetch());
1:7f0e135:         assertEquals(15, connectionFactory.getRedeliveryPolicy().getMaximumRedeliveries());
1:a831a08:         assertEquals(32d, connectionFactory.getRedeliveryPolicy().getBackOffMultiplier());
1:7f0e135:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:75bd4f2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     public void testInitialContextHasXA() throws Exception {
1:         InitialContext context = new InitialContext();
1:         assertTrue("Created context", context != null);
1: 
1:         ActiveMQXAConnectionFactory connectionFactory = (ActiveMQXAConnectionFactory)context.lookup("XAConnectionFactory");
1: 
1:         assertTrue("Should have created an XAConnectionFactory", connectionFactory != null);
1: 
1:         LOG.info("Created with brokerURL: " + connectionFactory.getBrokerURL());
1: 
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(InitialContextTest.class);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(InitialContextTest.class);
1: 
1:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory)context.lookup("ConnectionFactory");
1:         LOG.info("Created with brokerURL: " + connectionFactory.getBrokerURL());
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory)context.lookup("ConnectionFactory");
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory)context.lookup("ConnectionFactory");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f0e135
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:     
1:     public void testConnectionFactoryPolicyConfig() throws Exception {
1:     	
1:         Properties properties = new Properties();
1:         properties.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:         properties.put(Context.PROVIDER_URL, "tcp://localhost:65432");
1:         properties.put("prefetchPolicy.queuePrefetch", "777");
1:         properties.put("redeliveryPolicy.maximumRedeliveries", "15");
1:         properties.put("redeliveryPolicy.backOffMultiplier", "32");
1: 
1:         InitialContext context = new InitialContext(properties);
1:         assertTrue("Created context", context != null);
1: 
0:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory) context.lookup("ConnectionFactory");
1: 
1:         assertTrue("Should have created a ConnectionFactory", connectionFactory != null);
1: 
1:         assertEquals(777, connectionFactory.getPrefetchPolicy().getQueuePrefetch());
1:         assertEquals(15, connectionFactory.getRedeliveryPolicy().getMaximumRedeliveries());
0:         assertEquals(32, connectionFactory.getRedeliveryPolicy().getBackOffMultiplier());
1:     }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jndi;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
0: import javax.naming.InitialContext;
0: import javax.naming.Context;
1: import java.util.Properties;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class InitialContextTest extends TestCase {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(InitialContextTest.class);
1:     
1:     public void testInitialContext() throws Exception {
1:         InitialContext context = new InitialContext();
1:         assertTrue("Created context", context != null);
1: 
0:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory) context.lookup("ConnectionFactory");
1: 
1:         assertTrue("Should have created a ConnectionFactory", connectionFactory != null);
1: 
0:         log.info("Created with brokerURL: " + connectionFactory.getBrokerURL());
1: 
1:     }
1: 
1:     public void testUsingStandardJNDIKeys() throws Exception {
1:         Properties properties = new Properties();
1:         properties.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:         String expected = "tcp://localhost:65432";
1:         properties.put(Context.PROVIDER_URL, expected);
1: 
1:         InitialContext context = new InitialContext(properties);
1:         assertTrue("Created context", context != null);
1: 
0:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory) context.lookup("ConnectionFactory");
1: 
1:         assertTrue("Should have created a ConnectionFactory", connectionFactory != null);
1: 
1:         assertEquals("the brokerURL should match", expected, connectionFactory.getBrokerURL());
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(InitialContextTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:a831a08
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(32d, connectionFactory.getRedeliveryPolicy().getBackOffMultiplier());
============================================================================