1:0054941: /**
1:0054941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0054941:  * contributor license agreements.  See the NOTICE file distributed with
1:0054941:  * this work for additional information regarding copyright ownership.
1:0054941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0054941:  * (the "License"); you may not use this file except in compliance with
1:0054941:  * the License.  You may obtain a copy of the License at
1:0054941:  *
1:0054941:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0054941:  *
1:0054941:  * Unless required by applicable law or agreed to in writing, software
1:0054941:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0054941:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0054941:  * See the License for the specific language governing permissions and
1:0054941:  * limitations under the License.
1:0054941:  */
1:0054941: package org.apache.activemq.bugs;
1:0054941: 
1:0054941: import static org.junit.Assert.assertEquals;
1:0054941: import static org.junit.Assert.assertNotNull;
1:0054941: 
1:0054941: import javax.jms.Connection;
1:0054941: import javax.jms.Message;
1:0054941: import javax.jms.MessageConsumer;
1:0054941: import javax.jms.MessageListener;
1:0054941: import javax.jms.MessageProducer;
1:0054941: import javax.jms.Session;
1:0054941: 
1:0054941: import org.apache.activemq.ActiveMQConnectionFactory;
1:0054941: import org.apache.activemq.broker.BrokerService;
1:0054941: import org.apache.activemq.command.ActiveMQQueue;
1:0054941: import org.apache.activemq.command.ActiveMQTopic;
1:0054941: import org.junit.After;
1:0054941: import org.junit.Before;
1:0054941: import org.junit.Test;
1:0054941: 
1:0054941: public class AMQ4356Test {
1:0054941: 
1:0054941:     private static BrokerService brokerService;
1:0054941:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:0054941: 
1:0054941:     private String connectionUri;
1:0054941:     private ActiveMQConnectionFactory cf;
1:0054941:     private final String CLIENT_ID = "AMQ4356Test";
1:0054941:     private final String SUBSCRIPTION_NAME = "AMQ4356Test";
1:0054941: 
1:0054941:     private void createBroker(boolean deleteOnStart) throws Exception {
1:0054941:         brokerService = new BrokerService();
1:0054941:         brokerService.setUseJmx(true);
1:0054941:         brokerService.setDeleteAllMessagesOnStartup(deleteOnStart);
1:0054941:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:0054941:         brokerService.start();
1:0054941:         brokerService.waitUntilStarted();
1:0054941: 
1:0054941:     }
1:0054941: 
1:0054941:     private void startBroker() throws Exception {
1:0054941:         createBroker(true);
1:0054941:     }
1:0054941: 
1:0054941:     private void restartBroker() throws Exception {
1:0054941:         brokerService.stop();
1:0054941:         brokerService.waitUntilStopped();
1:0054941:         createBroker(false);
1:0054941:     }
1:0054941: 
1:0054941:     @Before
1:0054941:     public void setUp() throws Exception {
1:0054941:         startBroker();
1:0054941:         cf = new ActiveMQConnectionFactory(connectionUri);
1:0054941:     }
1:0054941: 
1:0054941:     @After
1:0054941:     public void tearDown() throws Exception {
1:0054941:         brokerService.stop();
1:0054941:         brokerService.waitUntilStopped();
1:0054941:     }
1:0054941: 
1:0054941:     @Test
1:0054941:     public void testVirtualTopicUnsubDurable() throws Exception {
1:0054941:         Connection connection = cf.createConnection();
1:0054941:         connection.setClientID(CLIENT_ID);
1:0054941:         connection.start();
1:0054941: 
1:0054941:         // create consumer 'cluster'
1:0054941:         ActiveMQQueue queue1 = new ActiveMQQueue(getVirtualTopicConsumerName());
1:0054941:         ActiveMQQueue queue2 = new ActiveMQQueue(getVirtualTopicConsumerName());
1:0054941: 
1:0054941:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0054941:         MessageConsumer c1 = session.createConsumer(queue1);
1:0054941:         c1.setMessageListener(new MessageListener() {
1:0054941:             @Override
1:0054941:             public void onMessage(Message message) {
1:0054941:             }
1:0054941:         });
1:0054941:         MessageConsumer c2 = session.createConsumer(queue2);
1:0054941:         c2.setMessageListener(new MessageListener() {
1:0054941:             @Override
1:0054941:             public void onMessage(Message message) {
1:0054941:             }
1:0054941:         });
1:0054941: 
1:0054941:         ActiveMQTopic topic = new ActiveMQTopic(getVirtualTopicName());
1:0054941:         MessageConsumer c3 = session.createDurableSubscriber(topic, SUBSCRIPTION_NAME);
1:0054941: 
1:0054941:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:0054941:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:0054941: 
1:0054941:         c3.close();
1:0054941: 
1:0054941:         // create topic producer
1:0054941:         MessageProducer producer = session.createProducer(topic);
1:0054941:         assertNotNull(producer);
1:0054941: 
1:0054941:         int total = 10;
1:0054941:         for (int i = 0; i < total; i++) {
1:0054941:             producer.send(session.createTextMessage("message: " + i));
1:0054941:         }
1:0054941: 
1:0054941:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:0054941:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:0054941: 
1:0054941:         session.unsubscribe(SUBSCRIPTION_NAME);
1:0054941:         connection.close();
1:0054941: 
1:0054941:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:0054941:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:0054941: 
1:0054941:         restartBroker();
1:0054941: 
1:0054941:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:0054941:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:0054941:     }
1:0054941: 
1:0054941:     protected String getVirtualTopicName() {
1:0054941:         return "VirtualTopic.TEST";
1:0054941:     }
1:0054941: 
1:0054941:     protected String getVirtualTopicConsumerName() {
1:0054941:         return "Consumer.A.VirtualTopic.TEST";
1:0054941:     }
1:0054941: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0054941
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ4356Test {
1: 
1:     private static BrokerService brokerService;
1:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1: 
1:     private String connectionUri;
1:     private ActiveMQConnectionFactory cf;
1:     private final String CLIENT_ID = "AMQ4356Test";
1:     private final String SUBSCRIPTION_NAME = "AMQ4356Test";
1: 
1:     private void createBroker(boolean deleteOnStart) throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setUseJmx(true);
1:         brokerService.setDeleteAllMessagesOnStartup(deleteOnStart);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     private void restartBroker() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:         createBroker(false);
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         startBroker();
1:         cf = new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testVirtualTopicUnsubDurable() throws Exception {
1:         Connection connection = cf.createConnection();
1:         connection.setClientID(CLIENT_ID);
1:         connection.start();
1: 
1:         // create consumer 'cluster'
1:         ActiveMQQueue queue1 = new ActiveMQQueue(getVirtualTopicConsumerName());
1:         ActiveMQQueue queue2 = new ActiveMQQueue(getVirtualTopicConsumerName());
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer c1 = session.createConsumer(queue1);
1:         c1.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:             }
1:         });
1:         MessageConsumer c2 = session.createConsumer(queue2);
1:         c2.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:             }
1:         });
1: 
1:         ActiveMQTopic topic = new ActiveMQTopic(getVirtualTopicName());
1:         MessageConsumer c3 = session.createDurableSubscriber(topic, SUBSCRIPTION_NAME);
1: 
1:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         c3.close();
1: 
1:         // create topic producer
1:         MessageProducer producer = session.createProducer(topic);
1:         assertNotNull(producer);
1: 
1:         int total = 10;
1:         for (int i = 0; i < total; i++) {
1:             producer.send(session.createTextMessage("message: " + i));
1:         }
1: 
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         session.unsubscribe(SUBSCRIPTION_NAME);
1:         connection.close();
1: 
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         restartBroker();
1: 
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:     }
1: 
1:     protected String getVirtualTopicName() {
1:         return "VirtualTopic.TEST";
1:     }
1: 
1:     protected String getVirtualTopicConsumerName() {
1:         return "Consumer.A.VirtualTopic.TEST";
1:     }
1: }
============================================================================