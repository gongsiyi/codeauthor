1:d379076: /**
1:d379076:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d379076:  * contributor license agreements.  See the NOTICE file distributed with
1:d379076:  * this work for additional information regarding copyright ownership.
1:d379076:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d379076:  * (the "License"); you may not use this file except in compliance with
1:d379076:  * the License.  You may obtain a copy of the License at
1:d379076:  *
1:d379076:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d379076:  *
1:d379076:  * Unless required by applicable law or agreed to in writing, software
1:d379076:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d379076:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d379076:  * See the License for the specific language governing permissions and
1:d379076:  * limitations under the License.
1:d379076:  */
1:d379076: package org.apache.activemq.transport.stomp;
8:d379076: 
1:d379076: import static org.junit.Assert.assertNotNull;
1:d379076: import static org.junit.Assert.assertNull;
1:d379076: import static org.junit.Assert.assertTrue;
1:d379076: 
1:540a66b: import java.util.List;
1:d379076: import java.util.concurrent.TimeUnit;
1:d379076: 
1:d379076: import javax.jms.Connection;
1:d379076: import javax.jms.Destination;
1:d379076: import javax.jms.MessageConsumer;
1:d379076: import javax.jms.Session;
1:d379076: import javax.jms.TextMessage;
1:d379076: 
1:d379076: import org.apache.activemq.broker.BrokerPlugin;
1:d379076: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:d379076: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1:d379076: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:d379076: import org.apache.activemq.broker.region.policy.PolicyMap;
1:d379076: import org.apache.activemq.broker.util.TimeStampingBrokerPlugin;
1:d379076: import org.junit.Test;
1:d379076: import org.slf4j.Logger;
1:d379076: import org.slf4j.LoggerFactory;
1:d379076: 
1:540a66b: public class StompTimeStampingBrokerPluginTest extends StompTestSupport {
1:d379076: 
1:d379076:     private static final Logger LOG = LoggerFactory.getLogger(StompTimeStampingBrokerPluginTest.class);
1:d379076: 
1:d379076:     private Connection connection;
1:d379076:     private Session session;
1:d379076: 
1:540a66b:     @Override
1:540a66b:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1:540a66b:         plugins.add(new TimeStampingBrokerPlugin());
1:540a66b:     }
1:d379076: 
1:540a66b:     @Override
1:540a66b:     protected void applyBrokerPolicies() throws Exception {
1:d379076:         // Add policy and individual DLQ strategy
1:d379076:         PolicyEntry policy = new PolicyEntry();
1:d379076:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:d379076:         strategy.setProcessExpired(true);
1:d379076:         ((IndividualDeadLetterStrategy)strategy).setUseQueueForQueueMessages(true);
1:d379076:         ((IndividualDeadLetterStrategy)strategy).setQueuePrefix("DLQ.");
1:d379076:         strategy.setProcessNonPersistent(true);
1:d379076:         policy.setDeadLetterStrategy(strategy);
1:d379076: 
1:d379076:         PolicyMap pMap = new PolicyMap();
1:d379076:         pMap.setDefaultEntry(policy);
1:d379076: 
1:540a66b:         brokerService.setDestinationPolicy(pMap);
1:540a66b:     }
1:540a66b: 
1:540a66b:     @Override
1:540a66b:     public void setUp() throws Exception {
1:540a66b:         super.setUp();
1:d379076: 
1:d379076:         stompConnect();
1:d379076: 
1:540a66b:         connection = cf.createConnection("system", "manager");
1:d379076:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d379076:         connection.start();
6:d379076:     }
1:d379076: 
1:540a66b:     @Test(timeout = 60000)
1:d379076:     public void testSendMessage() throws Exception {
1:d379076: 
1:d379076:         Destination destination = session.createQueue(getQueueName());
1:d379076:         MessageConsumer consumer = session.createConsumer(destination);
1:d379076: 
1:d379076:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:d379076:         stompConnection.sendFrame(frame);
1:d379076: 
1:d379076:         frame = stompConnection.receiveFrame();
1:d379076:         assertTrue(frame.startsWith("CONNECTED"));
1:d379076: 
1:d379076:         long timestamp = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(1);
1:d379076:         long expires = timestamp + TimeUnit.SECONDS.toMillis(5);
1:d379076: 
1:d379076:         LOG.info("Message timestamp = {}, expires = {}", timestamp, expires);
1:d379076: 
1:d379076:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:d379076:                 "timestamp:" + timestamp + "\n" +
1:d379076:                 "expires:" + expires +
1:d379076:                 "\n\n" + "Hello World 1" + Stomp.NULL;
1:d379076: 
1:d379076:         stompConnection.sendFrame(frame);
1:d379076: 
1:d379076:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:d379076:             "timestamp:" + timestamp + "\n" +
1:d379076:             "expires:" + expires +
1:d379076:             "\n\n" + "Hello World 2" + Stomp.NULL;
1:d379076: 
1:d379076:         stompConnection.sendFrame(frame);
1:d379076: 
1:d379076:         TextMessage message = (TextMessage)consumer.receive(2500);
1:d379076:         assertNotNull(message);
1:d379076: 
1:d379076:         TimeUnit.SECONDS.sleep(10);
1:d379076: 
1:d379076:         message = (TextMessage)consumer.receive(2500);
1:d379076:         assertNull(message);
1:d379076:     }
1:d379076: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: public class StompTimeStampingBrokerPluginTest extends StompTestSupport {
1:     @Override
1:     protected void addAdditionalPlugins(List<BrokerPlugin> plugins) throws Exception {
1:         plugins.add(new TimeStampingBrokerPlugin());
1:     }
1:     @Override
1:     protected void applyBrokerPolicies() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setDestinationPolicy(pMap);
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         connection = cf.createConnection("system", "manager");
1:     @Test(timeout = 60000)
commit:388c16d
/////////////////////////////////////////////////////////////////////////
0:         broker.setUseJmx(false);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d379076
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
0: import java.io.IOException;
0: import java.net.Socket;
0: import java.net.URI;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.util.TimeStampingBrokerPlugin;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Rule;
1: import org.junit.Test;
0: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class StompTimeStampingBrokerPluginTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompTimeStampingBrokerPluginTest.class);
1: 
0:     private BrokerService broker;
0:     private String connectionUri;
0:     private int port;
0:     private StompConnection stompConnection = new StompConnection();
1:     private Connection connection;
1:     private Session session;
1: 
0:     @Rule public TestName name = new TestName();
1: 
0:     @Before
0:     public void setUp() throws Exception {
0:         TimeStampingBrokerPlugin tsbp = new TimeStampingBrokerPlugin();
1: 
0:         broker = new BrokerService();
0:         broker.setPersistent(false);
0:         broker.setUseJmx(true);
0:         broker.setPlugins(new BrokerPlugin[] {tsbp});
0:         connectionUri = broker.addConnector("tcp://0.0.0.0:0").getPublishableConnectString();
0:         String stompConnectionUri = broker.addConnector("stomp://0.0.0.0:0").getPublishableConnectString();
1: 
0:         URI uri = new URI(stompConnectionUri);
0:         this.port = uri.getPort();
1: 
1:         // Add policy and individual DLQ strategy
1:         PolicyEntry policy = new PolicyEntry();
1:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:         strategy.setProcessExpired(true);
1:         ((IndividualDeadLetterStrategy)strategy).setUseQueueForQueueMessages(true);
1:         ((IndividualDeadLetterStrategy)strategy).setQueuePrefix("DLQ.");
1:         strategy.setProcessNonPersistent(true);
1:         policy.setDeadLetterStrategy(strategy);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
0:         broker.setDestinationPolicy(pMap);
0:         broker.start();
1: 
1:         stompConnect();
1: 
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionUri);
0:         connection = cf.createConnection();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1:     }
1: 
0:     @After
0:     public void tearDown() throws Exception {
0:         broker.stop();
1:     }
1: 
0:     protected StompConnection stompConnect() throws Exception {
0:         if (stompConnection == null) {
0:             stompConnection = new StompConnection();
1:         }
0:         stompConnection.open(createSocket());
0:         return stompConnection;
1:     }
1: 
0:     protected Socket createSocket() throws IOException {
0:         return new Socket("127.0.0.1", this.port);
1:     }
1: 
0:     protected String getQueueName() {
0:         return getClass().getName() + "." + name.getMethodName();
1:     }
1: 
0:     @Test
1:     public void testSendMessage() throws Exception {
1: 
1:         Destination destination = session.createQueue(getQueueName());
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         long timestamp = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(1);
1:         long expires = timestamp + TimeUnit.SECONDS.toMillis(5);
1: 
1:         LOG.info("Message timestamp = {}, expires = {}", timestamp, expires);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                 "timestamp:" + timestamp + "\n" +
1:                 "expires:" + expires +
1:                 "\n\n" + "Hello World 1" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:             "timestamp:" + timestamp + "\n" +
1:             "expires:" + expires +
1:             "\n\n" + "Hello World 2" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         TextMessage message = (TextMessage)consumer.receive(2500);
1:         assertNotNull(message);
1: 
1:         TimeUnit.SECONDS.sleep(10);
1: 
1:         message = (TextMessage)consumer.receive(2500);
1:         assertNull(message);
1:     }
1: }
============================================================================