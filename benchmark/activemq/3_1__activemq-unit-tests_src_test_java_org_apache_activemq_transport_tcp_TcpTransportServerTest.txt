1:f7c7993: /**
1:f7c7993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f7c7993:  * contributor license agreements.  See the NOTICE file distributed with
1:f7c7993:  * this work for additional information regarding copyright ownership.
1:f7c7993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f7c7993:  * (the "License"); you may not use this file except in compliance with
1:f7c7993:  * the License.  You may obtain a copy of the License at
1:f7c7993:  *
1:f7c7993:  * http://www.apache.org/licenses/LICENSE-2.0
1:f7c7993:  *
1:f7c7993:  * Unless required by applicable law or agreed to in writing, software
1:f7c7993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f7c7993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f7c7993:  * See the License for the specific language governing permissions and
1:f7c7993:  * limitations under the License.
1:f7c7993:  */
1:f7c7993: package org.apache.activemq.transport.tcp;
1:f7c7993: 
1:f7c7993: import junit.framework.TestCase;
1:f7c7993: import org.apache.activemq.transport.*;
1:f7c7993: 
1:f7c7993: import java.net.Socket;
1:f7c7993: import java.net.URI;
1:f7c7993: import java.util.HashMap;
1:f7c7993: 
1:f7c7993: /**
1:f7c7993:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:f7c7993:  */
1:f7c7993: public class TcpTransportServerTest extends TestCase{
1:f7c7993: 
1:f7c7993:     public void testDefaultPropertiesSetOnTransport() throws Exception {
1:f7c7993:         TcpTransportServer server = (TcpTransportServer) TransportFactory.bind(new URI("tcp://localhost:61616?trace=true"));
1:f7c7993:         server.setTransportOption(new HashMap<String, Object>());
1:f7c7993: 
1:f7c7993:         server.setAcceptListener(new TransportAcceptListener() {
1:f7c7993:             @Override
1:f7c7993:             public void onAccept(Transport transport) {
1:f7c7993:                 assertTrue("This transport does not have a TransportLogger!!", hasTransportLogger(transport));
1:f7c7993:             }
1:f7c7993: 
1:f7c7993:             @Override
1:f7c7993:             public void onAcceptError(Exception error) {
1:f7c7993:                 fail("Should not have received an error!");
1:f7c7993:             }
1:f7c7993:         });
1:f7c7993: 
1:f7c7993:         server.start();
1:f7c7993: 
1:f7c7993: 
1:f7c7993:         Socket socket = new Socket("localhost", 61616);
1:f7c7993:         server.handleSocket(socket);
1:f7c7993:         server.stop();
1:f7c7993: 
1:f7c7993: 
1:f7c7993:     }
1:f7c7993: 
1:f7c7993:     private boolean hasTransportLogger(Transport transport) {
1:f7c7993:         boolean end = false;
1:f7c7993: 
1:f7c7993:         Transport current = transport;
1:f7c7993:         while(!end) {
1:f7c7993: 
1:f7c7993:             if (current instanceof TransportFilter) {
1:f7c7993:                 TransportFilter filter = (TransportFilter) current;
1:f7c7993: 
1:f7c7993:                 if(filter instanceof TransportLogger){
1:f7c7993:                     return true;
1:f7c7993:                 }
1:f7c7993: 
1:f7c7993:                 current = filter.getNext();
1:f7c7993:             }
1:f7c7993:             else {
1:f7c7993:                 end = true;
1:f7c7993:             }
1:f7c7993:         }
1:f7c7993: 
1:f7c7993:         return false;
1:f7c7993:     }
1:f7c7993: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
author:Christian Posta
-------------------------------------------------------------------------------
commit:f7c7993
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.transport.*;
1: 
0: import javax.net.ServerSocketFactory;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.util.HashMap;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class TcpTransportServerTest extends TestCase{
1: 
1:     public void testDefaultPropertiesSetOnTransport() throws Exception {
1:         TcpTransportServer server = (TcpTransportServer) TransportFactory.bind(new URI("tcp://localhost:61616?trace=true"));
1:         server.setTransportOption(new HashMap<String, Object>());
1: 
1:         server.setAcceptListener(new TransportAcceptListener() {
1:             @Override
1:             public void onAccept(Transport transport) {
1:                 assertTrue("This transport does not have a TransportLogger!!", hasTransportLogger(transport));
1:             }
1: 
1:             @Override
1:             public void onAcceptError(Exception error) {
1:                 fail("Should not have received an error!");
1:             }
1:         });
1: 
1:         server.start();
1: 
1: 
1:         Socket socket = new Socket("localhost", 61616);
1:         server.handleSocket(socket);
1:         server.stop();
1: 
1: 
1:     }
1: 
1:     private boolean hasTransportLogger(Transport transport) {
1:         boolean end = false;
1: 
1:         Transport current = transport;
1:         while(!end) {
1: 
1:             if (current instanceof TransportFilter) {
1:                 TransportFilter filter = (TransportFilter) current;
1: 
1:                 if(filter instanceof TransportLogger){
1:                     return true;
1:                 }
1: 
1:                 current = filter.getNext();
1:             }
1:             else {
1:                 end = true;
1:             }
1:         }
1: 
1:         return false;
1:     }
1: }
============================================================================