1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.vm;
8:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:26bb18b: import java.net.InetSocketAddress;
1:d29ca2a: import java.net.URI;
1:74a7a8b: import java.util.concurrent.atomic.AtomicInteger;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.BrokerInfo;
1:d29ca2a: import org.apache.activemq.transport.MutexTransport;
1:d29ca2a: import org.apache.activemq.transport.ResponseCorrelator;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportAcceptListener;
1:d29ca2a: import org.apache.activemq.transport.TransportServer;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Broker side of the VMTransport
1:d29ca2a:  */
1:d29ca2a: public class VMTransportServer implements TransportServer {
1:d29ca2a: 
1:d29ca2a:     private TransportAcceptListener acceptListener;
1:d29ca2a:     private final URI location;
1:d29ca2a:     private boolean disposed;
1:f812e34: 
1:d29ca2a:     private final AtomicInteger connectionCount = new AtomicInteger(0);
1:d29ca2a:     private final boolean disposeOnDisconnect;
1:47d1985:     private boolean allowLinkStealing;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param location
1:f812e34:      * @param disposeOnDisconnect
1:d29ca2a:      */
1:d29ca2a:     public VMTransportServer(URI location, boolean disposeOnDisconnect) {
1:d29ca2a:         this.location = location;
1:f812e34:         this.disposeOnDisconnect = disposeOnDisconnect;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * @return a pretty print of this
1:d29ca2a:      */
1:f812e34:     public String toString() {
1:f812e34:         return "VMTransportServer(" + location + ")";
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @return new VMTransport
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:d29ca2a:     public VMTransport connect() throws IOException {
1:d29ca2a:         TransportAcceptListener al;
1:d29ca2a:         synchronized (this) {
2:fc00993:             if (disposed) {
1:d29ca2a:                 throw new IOException("Server has been disposed.");
1:fc00993:             }
1:d29ca2a:             al = acceptListener;
1:d29ca2a:         }
1:fc00993:         if (al == null) {
1:d29ca2a:             throw new IOException("Server TransportAcceptListener is null.");
1:fc00993:         }
1:f812e34: 
1:d29ca2a:         connectionCount.incrementAndGet();
1:d29ca2a:         VMTransport client = new VMTransport(location) {
1:d29ca2a:             public void stop() throws Exception {
1:ad585dc:                 if (!disposed.get()) {
1:d29ca2a:                     super.stop();
1:f812e34:                     if (connectionCount.decrementAndGet() == 0 && disposeOnDisconnect) {
1:d29ca2a:                         VMTransportServer.this.stop();
1:fc00993:                     }
1:d29ca2a:                 }
1:d29ca2a:             };
1:d29ca2a:         };
1:f812e34: 
1:d29ca2a:         VMTransport server = new VMTransport(location);
1:d29ca2a:         client.setPeer(server);
1:d29ca2a:         server.setPeer(client);
1:d29ca2a:         al.onAccept(configure(server));
1:d29ca2a:         return client;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * Configure transport
1:f812e34:      *
1:d29ca2a:      * @param transport
1:d29ca2a:      * @return the Transport
1:d29ca2a:      */
1:d29ca2a:     public static Transport configure(Transport transport) {
1:d29ca2a:         transport = new MutexTransport(transport);
1:d29ca2a:         transport = new ResponseCorrelator(transport);
1:d29ca2a:         return transport;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Set the Transport accept listener for new Connections
1:d29ca2a:      *
1:f812e34:      * @param acceptListener
1:d29ca2a:      */
1:fc00993:     public synchronized void setAcceptListener(TransportAcceptListener acceptListener) {
1:f812e34:         this.acceptListener = acceptListener;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void start() throws IOException {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void stop() throws IOException {
1:d29ca2a:         VMTransportFactory.stopped(this);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public URI getConnectURI() {
1:d29ca2a:         return location;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public URI getBindURI() {
1:d29ca2a:         return location;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setBrokerInfo(BrokerInfo brokerInfo) {
1:d29ca2a:     }
1:26bb18b: 
1:26bb18b:     public InetSocketAddress getSocketAddress() {
1:26bb18b:         return null;
1:26bb18b:     }
1:d29ca2a: 
1:27d0ff4:     public int getConnectionCount() {
1:27d0ff4:         return connectionCount.intValue();
1:d29ca2a:     }
1:d29ca2a: 
1:0fffe21:     @Override
1:0fffe21:     public boolean isSslServer() {
1:0fffe21:         return false;
1:0fffe21:     }
1:47d1985: 
1:47d1985:     @Override
1:47d1985:     public boolean isAllowLinkStealing() {
1:47d1985:         return allowLinkStealing;
1:47d1985:     }
1:47d1985: 
1:47d1985:     public void setAllowLinkStealing(boolean allowLinkStealing) {
1:47d1985:         this.allowLinkStealing = allowLinkStealing;
1:47d1985:     }
2:ad585dc: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Rob Davies
-------------------------------------------------------------------------------
commit:47d1985
/////////////////////////////////////////////////////////////////////////
1:     private boolean allowLinkStealing;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean isAllowLinkStealing() {
1:         return allowLinkStealing;
1:     }
1: 
1:     public void setAllowLinkStealing(boolean allowLinkStealing) {
1:         this.allowLinkStealing = allowLinkStealing;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:             if (disposed) {
1:             }
1:         if (al == null) {
1:         }
1:                 if (disposed) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void setAcceptListener(TransportAcceptListener acceptListener) {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:      * @param disposeOnDisconnect
1:         this.disposeOnDisconnect = disposeOnDisconnect;
1: 
1:      * @return a pretty print of this
1:     public String toString() {
1:         return "VMTransportServer(" + location + ")";
1: 
/////////////////////////////////////////////////////////////////////////
0:             if (disposed)
0:         if (al == null)
1: 
0:                 if (disposed)
1:                 if (connectionCount.decrementAndGet() == 0 && disposeOnDisconnect) {
1: 
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * @param acceptListener
1:         this.acceptListener = acceptListener;
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:26bb18b
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetSocketAddress;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public InetSocketAddress getSocketAddress() {
1:         return null;
1:     }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.vm;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: 
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.transport.MutexTransport;
1: import org.apache.activemq.transport.ResponseCorrelator;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportAcceptListener;
1: import org.apache.activemq.transport.TransportServer;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
1:  * Broker side of the VMTransport
1:  *
1:  */
1: public class VMTransportServer implements TransportServer {
1: 
1:     private TransportAcceptListener acceptListener;
1:     private final URI location;
1:     private boolean disposed;
1:     
1:     private final AtomicInteger connectionCount = new AtomicInteger(0);
1:     private final boolean disposeOnDisconnect;
1: 
1:     /**
1:      * @param location
0:      * @param disposeOnDisconnect 
1:      */
1:     public VMTransportServer(URI location, boolean disposeOnDisconnect) {
1:         this.location = location;
0:         this.disposeOnDisconnect=disposeOnDisconnect;
1:     }
1:     
1:     /**
0:      *@return a pretty print of this
1:      */
0:     public String toString(){
0:         return "VMTransportServer(" + location +")";
1:     }
1:     
1:     /**
1:      * @return new VMTransport
1:      * @throws IOException
1:      */
1:     public VMTransport connect() throws IOException {
1:         TransportAcceptListener al;
1:         synchronized (this) {
0:             if( disposed )
1:                 throw new IOException("Server has been disposed.");
1:             al = acceptListener;
1:         }
0:         if( al == null)
1:             throw new IOException("Server TransportAcceptListener is null.");
1:             
1:         connectionCount.incrementAndGet();
1:         VMTransport client = new VMTransport(location) {
1:             public void stop() throws Exception {
0:                 if( disposed )
0:                     return;
1:                 super.stop();
0:                 if( connectionCount.decrementAndGet()==0 && disposeOnDisconnect ) {
1:                     VMTransportServer.this.stop();
1:                 }
1:             };
1:         };
1:         
1:         VMTransport server = new VMTransport(location);
1:         client.setPeer(server);
1:         server.setPeer(client);
1:         al.onAccept(configure(server));
1:         return client;
1:     }
1:     
1:     /**
1:      * Configure transport
1:      * @param transport
1:      * @return the Transport
1:      */
1:     public static Transport configure(Transport transport) {
1:         transport = new MutexTransport(transport);
1:         transport = new ResponseCorrelator(transport);
1:         return transport;
1:     }
1: 
1: 
1:     /**
1:      * Set the Transport accept listener for new Connections
0:      * @param acceptListener 
1:      * 
1:      */
0:     synchronized public void setAcceptListener(TransportAcceptListener acceptListener) {
0:         this.acceptListener = acceptListener;        
1:     }
1: 
1:     public void start() throws IOException {
1:     }
1: 
1:     public void stop() throws IOException {
1:         VMTransportFactory.stopped(this);
1:     }
1: 
1:     public URI getConnectURI() {
1:         return location;
1:     }
1:     
1:     public URI getBindURI() {
1:         return location;
1:     }
1: 
1:     public void setBrokerInfo(BrokerInfo brokerInfo) {
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0fffe21
/////////////////////////////////////////////////////////////////////////
0: 
1:     @Override
1:     public boolean isSslServer() {
1:         return false;
1:     }
commit:ad585dc
/////////////////////////////////////////////////////////////////////////
1:                 if (!disposed.get()) {
0:                     super.stop();
0:                     if (connectionCount.decrementAndGet() == 0 && disposeOnDisconnect) {
0:                         VMTransportServer.this.stop();
1:                     }
1:                 }
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
commit:6595dc4
/////////////////////////////////////////////////////////////////////////
0:             	if (stopping.compareAndSet(false, true) && !disposed) {
0: 					super.stop();
0: 					if (connectionCount.decrementAndGet() == 0
0: 							&& disposeOnDisconnect) {
0: 						VMTransportServer.this.stop();
0: 					}
0: 				}
author:Gary Tully
-------------------------------------------------------------------------------
commit:bc8441b
/////////////////////////////////////////////////////////////////////////
0:             	if (stopping.compareAndSet(false, true) && !disposed.get()) {
commit:27d0ff4
/////////////////////////////////////////////////////////////////////////
0:     
1:     public int getConnectionCount() {
1:         return connectionCount.intValue();
0:     }
============================================================================