1:e333fd9: /**
1:e333fd9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e333fd9:  * contributor license agreements.  See the NOTICE file distributed with
1:e333fd9:  * this work for additional information regarding copyright ownership.
1:e333fd9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e333fd9:  * (the "License"); you may not use this file except in compliance with
1:e333fd9:  * the License.  You may obtain a copy of the License at
1:e333fd9:  *
1:e333fd9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e333fd9:  *
1:e333fd9:  * Unless required by applicable law or agreed to in writing, software
1:e333fd9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e333fd9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e333fd9:  * See the License for the specific language governing permissions and
1:e333fd9:  * limitations under the License.
1:e333fd9:  */
1:e333fd9: package org.apache.activemq.transport.amqp.sasl;
2:e333fd9: 
1:e333fd9: import java.security.Principal;
1:e333fd9: import java.security.cert.X509Certificate;
1:e333fd9: import java.util.Set;
1:e333fd9: 
1:e333fd9: import org.apache.activemq.broker.BrokerService;
1:e333fd9: import org.apache.activemq.command.ConnectionInfo;
1:e333fd9: import org.apache.activemq.security.AuthenticationBroker;
1:e333fd9: import org.apache.activemq.security.SecurityContext;
1:e333fd9: import org.apache.activemq.transport.amqp.AmqpTransport;
1:e333fd9: import org.apache.qpid.proton.engine.Sasl;
1:e333fd9: import org.slf4j.Logger;
1:e333fd9: import org.slf4j.LoggerFactory;
1:e333fd9: 
1:e333fd9: /**
1:c599844:  * SASL Authentication engine.
1:e333fd9:  */
1:e333fd9: public class AmqpAuthenticator {
1:e333fd9: 
1:e333fd9:     private static final Logger LOG = LoggerFactory.getLogger(AmqpAuthenticator.class);
1:e333fd9: 
1:3d6bb7c:     private static final String[] mechanisms = new String[] { "PLAIN", "ANONYMOUS" };
1:e333fd9: 
1:e333fd9:     private final BrokerService brokerService;
1:e333fd9:     private final AmqpTransport transport;
1:e333fd9:     private final Sasl sasl;
1:e333fd9: 
1:e333fd9:     private AuthenticationBroker authenticator;
1:e333fd9: 
1:e333fd9:     public AmqpAuthenticator(AmqpTransport transport, Sasl sasl, BrokerService brokerService) {
1:e333fd9:         this.brokerService = brokerService;
1:e333fd9:         this.transport = transport;
1:e333fd9:         this.sasl = sasl;
1:e333fd9: 
1:e333fd9:         sasl.setMechanisms(mechanisms);
1:e333fd9:         sasl.server();
1:e333fd9:     }
1:e333fd9: 
1:e333fd9:     /**
1:31c55f7:      * @return true if the SASL exchange has completed, regardless of success.
1:e333fd9:      */
1:e333fd9:     public boolean isDone() {
1:e333fd9:         return sasl.getOutcome() != Sasl.SaslOutcome.PN_SASL_NONE;
1:e333fd9:     }
1:e333fd9: 
1:e333fd9:     /**
1:31c55f7:      * @return the list of all SASL mechanisms that are supported currently.
1:e333fd9:      */
1:e333fd9:     public String[] getSupportedMechanisms() {
1:e333fd9:         return mechanisms;
1:e333fd9:     }
1:e333fd9: 
1:e333fd9:     public void processSaslExchange(ConnectionInfo connectionInfo) {
1:e333fd9:         if (sasl.getRemoteMechanisms().length > 0) {
1:e333fd9: 
1:e333fd9:             SaslMechanism mechanism = getSaslMechanism(sasl.getRemoteMechanisms());
1:e333fd9:             if (mechanism != null) {
1:e333fd9:                 LOG.debug("SASL [{}} Handshake started.", mechanism.getMechanismName());
1:e333fd9: 
1:e333fd9:                 mechanism.processSaslStep(sasl);
1:b5dd0a1:                 if (!mechanism.isFailed()) {
1:e333fd9: 
1:b5dd0a1:                     connectionInfo.setUserName(mechanism.getUsername());
1:b5dd0a1:                     connectionInfo.setPassword(mechanism.getPassword());
1:e333fd9: 
1:b5dd0a1:                     if (tryAuthenticate(connectionInfo, transport.getPeerCertificates())) {
1:b5dd0a1:                         sasl.done(Sasl.SaslOutcome.PN_SASL_OK);
1:b5dd0a1:                     } else {
1:b5dd0a1:                         sasl.done(Sasl.SaslOutcome.PN_SASL_AUTH);
1:b5dd0a1:                     }
1:b5dd0a1: 
1:b5dd0a1:                     LOG.debug("SASL [{}} Handshake complete.", mechanism.getMechanismName());
1:e333fd9:                 } else {
1:b5dd0a1:                     LOG.debug("SASL [{}} Handshake failed: {}", mechanism.getMechanismName(), mechanism.getFailureReason());
1:e333fd9:                     sasl.done(Sasl.SaslOutcome.PN_SASL_AUTH);
1:e333fd9:                 }
1:e333fd9:             } else {
1:e333fd9:                 LOG.info("SASL: could not find supported mechanism");
1:e333fd9:                 sasl.done(Sasl.SaslOutcome.PN_SASL_PERM);
1:e333fd9:             }
1:e333fd9:         }
1:e333fd9:     }
1:e333fd9: 
1:e333fd9:     //----- Internal implementation ------------------------------------------//
1:e333fd9: 
1:e333fd9:     private SaslMechanism getSaslMechanism(String[] remoteMechanisms) {
1:e333fd9:         String primary = remoteMechanisms[0];
1:e333fd9: 
1:e333fd9:         if (primary.equalsIgnoreCase("PLAIN")) {
1:e333fd9:             return new PlainMechanism();
1:e333fd9:         } else if (primary.equalsIgnoreCase("ANONYMOUS")) {
1:e333fd9:             return new AnonymousMechanism();
1:e333fd9:         }
1:e333fd9: 
1:e333fd9:         return null;
1:e333fd9:     }
1:e333fd9: 
1:e333fd9:     private boolean tryAuthenticate(ConnectionInfo info, X509Certificate[] peerCertificates) {
1:e333fd9:         try {
1:e333fd9:             return getAuthenticator().authenticate(info.getUserName(), info.getPassword(), peerCertificates) != null;
1:e333fd9:         } catch (Throwable error) {
1:e333fd9:             return false;
1:e333fd9:         }
1:e333fd9:     }
1:e333fd9: 
1:e333fd9:     private AuthenticationBroker getAuthenticator() {
1:e333fd9:         if (authenticator == null) {
1:e333fd9:             try {
1:e333fd9:                 authenticator = (AuthenticationBroker) brokerService.getBroker().getAdaptor(AuthenticationBroker.class);
1:e333fd9:             } catch (Exception e) {
1:e333fd9:                 LOG.debug("Failed to lookup AuthenticationBroker from Broker, will use a default Noop version.");
1:e333fd9:             }
1:e333fd9: 
1:e333fd9:             if (authenticator == null) {
1:e333fd9:                 authenticator = new DefaultAuthenticationBroker();
1:e333fd9:             }
1:e333fd9:         }
1:e333fd9: 
1:e333fd9:         return authenticator;
1:e333fd9:     }
1:e333fd9: 
1:e333fd9:     private class DefaultAuthenticationBroker implements AuthenticationBroker {
1:e333fd9: 
1:e333fd9:         @Override
1:e333fd9:         public SecurityContext authenticate(String username, String password, X509Certificate[] peerCertificates) throws SecurityException {
1:e333fd9:             return new SecurityContext(username) {
1:e333fd9: 
1:e333fd9:                 @Override
1:e333fd9:                 public Set<Principal> getPrincipals() {
1:e333fd9:                     return null;
1:e333fd9:                 }
1:e333fd9:             };
1:e333fd9:         }
1:e333fd9:     }
1:e333fd9: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1:      * @return true if the SASL exchange has completed, regardless of success.
1:      * @return the list of all SASL mechanisms that are supported currently.
commit:c599844
/////////////////////////////////////////////////////////////////////////
1:  * SASL Authentication engine.
commit:b5dd0a1
/////////////////////////////////////////////////////////////////////////
1:                 if (!mechanism.isFailed()) {
1:                     connectionInfo.setUserName(mechanism.getUsername());
1:                     connectionInfo.setPassword(mechanism.getPassword());
1:                     if (tryAuthenticate(connectionInfo, transport.getPeerCertificates())) {
1:                         sasl.done(Sasl.SaslOutcome.PN_SASL_OK);
1:                     } else {
1:                         sasl.done(Sasl.SaslOutcome.PN_SASL_AUTH);
1:                     }
1: 
1:                     LOG.debug("SASL [{}} Handshake complete.", mechanism.getMechanismName());
1:                     LOG.debug("SASL [{}} Handshake failed: {}", mechanism.getMechanismName(), mechanism.getFailureReason());
commit:3d6bb7c
/////////////////////////////////////////////////////////////////////////
1:     private static final String[] mechanisms = new String[] { "PLAIN", "ANONYMOUS" };
commit:e333fd9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.sasl;
1: 
1: import java.security.Principal;
1: import java.security.cert.X509Certificate;
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.security.AuthenticationBroker;
1: import org.apache.activemq.security.SecurityContext;
1: import org.apache.activemq.transport.amqp.AmqpTransport;
1: import org.apache.qpid.proton.engine.Sasl;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * SASL Authenitcation engine.
1:  */
1: public class AmqpAuthenticator {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpAuthenticator.class);
1: 
0:     private static final String[] mechanisms = new String[] { "ANONYMOUS", "PLAIN" };
1: 
1:     private final BrokerService brokerService;
1:     private final AmqpTransport transport;
1:     private final Sasl sasl;
1: 
1:     private AuthenticationBroker authenticator;
1: 
1:     public AmqpAuthenticator(AmqpTransport transport, Sasl sasl, BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:         this.transport = transport;
1:         this.sasl = sasl;
1: 
1:         sasl.setMechanisms(mechanisms);
1:         sasl.server();
1:     }
1: 
1:     /**
0:      * @return true if the SASL exchange has conpleted, regardless of success.
1:      */
1:     public boolean isDone() {
1:         return sasl.getOutcome() != Sasl.SaslOutcome.PN_SASL_NONE;
1:     }
1: 
1:     /**
0:      * @return the list of all SASL mechanisms that are supported curretnly.
1:      */
1:     public String[] getSupportedMechanisms() {
1:         return mechanisms;
1:     }
1: 
1:     public void processSaslExchange(ConnectionInfo connectionInfo) {
1:         if (sasl.getRemoteMechanisms().length > 0) {
1: 
1:             SaslMechanism mechanism = getSaslMechanism(sasl.getRemoteMechanisms());
1:             if (mechanism != null) {
1:                 LOG.debug("SASL [{}} Handshake started.", mechanism.getMechanismName());
1: 
1:                 mechanism.processSaslStep(sasl);
1: 
0:                 connectionInfo.setUserName(mechanism.getUsername());
0:                 connectionInfo.setPassword(mechanism.getPassword());
1: 
0:                 if (tryAuthenticate(connectionInfo, transport.getPeerCertificates())) {
0:                     sasl.done(Sasl.SaslOutcome.PN_SASL_OK);
1:                 } else {
1:                     sasl.done(Sasl.SaslOutcome.PN_SASL_AUTH);
1:                 }
1: 
0:                 LOG.debug("SASL [{}} Handshake complete.", mechanism.getMechanismName());
1:             } else {
1:                 LOG.info("SASL: could not find supported mechanism");
1:                 sasl.done(Sasl.SaslOutcome.PN_SASL_PERM);
1:             }
1:         }
1:     }
1: 
1:     //----- Internal implementation ------------------------------------------//
1: 
1:     private SaslMechanism getSaslMechanism(String[] remoteMechanisms) {
1:         String primary = remoteMechanisms[0];
1: 
1:         if (primary.equalsIgnoreCase("PLAIN")) {
1:             return new PlainMechanism();
1:         } else if (primary.equalsIgnoreCase("ANONYMOUS")) {
1:             return new AnonymousMechanism();
1:         }
1: 
1:         return null;
1:     }
1: 
1:     private boolean tryAuthenticate(ConnectionInfo info, X509Certificate[] peerCertificates) {
1:         try {
1:             return getAuthenticator().authenticate(info.getUserName(), info.getPassword(), peerCertificates) != null;
1:         } catch (Throwable error) {
1:             return false;
1:         }
1:     }
1: 
1:     private AuthenticationBroker getAuthenticator() {
1:         if (authenticator == null) {
1:             try {
1:                 authenticator = (AuthenticationBroker) brokerService.getBroker().getAdaptor(AuthenticationBroker.class);
1:             } catch (Exception e) {
1:                 LOG.debug("Failed to lookup AuthenticationBroker from Broker, will use a default Noop version.");
1:             }
1: 
1:             if (authenticator == null) {
1:                 authenticator = new DefaultAuthenticationBroker();
1:             }
1:         }
1: 
1:         return authenticator;
1:     }
1: 
1:     private class DefaultAuthenticationBroker implements AuthenticationBroker {
1: 
1:         @Override
1:         public SecurityContext authenticate(String username, String password, X509Certificate[] peerCertificates) throws SecurityException {
1:             return new SecurityContext(username) {
1: 
1:                 @Override
1:                 public Set<Principal> getPrincipals() {
1:                     return null;
1:                 }
1:             };
1:         }
1:     }
1: }
============================================================================