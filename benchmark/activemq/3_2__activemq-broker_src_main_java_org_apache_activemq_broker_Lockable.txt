1:170b86a: /**
1:170b86a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:170b86a:  * contributor license agreements.  See the NOTICE file distributed with
1:170b86a:  * this work for additional information regarding copyright ownership.
1:170b86a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:170b86a:  * (the "License"); you may not use this file except in compliance with
1:170b86a:  * the License.  You may obtain a copy of the License at
1:170b86a:  *
1:170b86a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:170b86a:  *
1:170b86a:  * Unless required by applicable law or agreed to in writing, software
1:170b86a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:170b86a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:170b86a:  * See the License for the specific language governing permissions and
1:170b86a:  * limitations under the License.
1:170b86a:  */
1:170b86a: package org.apache.activemq.broker;
1:170b86a: 
1:170b86a: import java.io.IOException;
1:170b86a: 
1:170b86a: /**
1:170b86a:  * A lockable broker resource. Uses {@link Locker} to guarantee that only single instance is running
1:170b86a:  *
1:170b86a:  */
1:170b86a: public interface Lockable {
1:170b86a: 
1:170b86a:     /**
1:170b86a:      * Turn locking on/off on the resource
1:170b86a:      *
1:170b86a:      * @param useLock
1:170b86a:      */
1:170b86a:     public void setUseLock(boolean useLock);
1:170b86a: 
1:170b86a:     /**
1:170b86a:      * Create a default locker
1:170b86a:      *
1:170b86a:      * @return default locker
1:170b86a:      * @throws IOException
1:170b86a:      */
1:170b86a:     public Locker createDefaultLocker() throws IOException;
1:170b86a: 
1:170b86a:     /**
1:170b86a:      * Set locker to be used
1:170b86a:      *
1:170b86a:      * @param locker
1:170b86a:      * @throws IOException
1:170b86a:      */
1:170b86a:     public void setLocker(Locker locker) throws IOException;
1:170b86a: 
1:170b86a:     /**
1:170b86a:      * Period (in milliseconds) on which {@link org.apache.activemq.broker.Locker#keepAlive()} should be checked
1:170b86a:      *
1:170b86a:      * @param lockKeepAlivePeriod
1:170b86a:      */
1:170b86a:     public void setLockKeepAlivePeriod(long lockKeepAlivePeriod);
1:170b86a: 
1:ef1d254:     long getLockKeepAlivePeriod();
1:170b86a: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:ef1d254
/////////////////////////////////////////////////////////////////////////
1:     long getLockKeepAlivePeriod();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:170b86a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * A lockable broker resource. Uses {@link Locker} to guarantee that only single instance is running
1:  *
1:  */
1: public interface Lockable {
1: 
1:     /**
1:      * Turn locking on/off on the resource
1:      *
1:      * @param useLock
1:      */
1:     public void setUseLock(boolean useLock);
1: 
1:     /**
1:      * Create a default locker
1:      *
1:      * @return default locker
1:      * @throws IOException
1:      */
1:     public Locker createDefaultLocker() throws IOException;
1: 
1:     /**
1:      * Set locker to be used
1:      *
1:      * @param locker
1:      * @throws IOException
1:      */
1:     public void setLocker(Locker locker) throws IOException;
1: 
1:     /**
1:      * Period (in milliseconds) on which {@link org.apache.activemq.broker.Locker#keepAlive()} should be checked
1:      *
1:      * @param lockKeepAlivePeriod
1:      */
1:     public void setLockKeepAlivePeriod(long lockKeepAlivePeriod);
1: 
1: }
============================================================================