1:734fb7d: /**
1:734fb7d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:734fb7d:  * contributor license agreements.  See the NOTICE file distributed with
1:734fb7d:  * this work for additional information regarding copyright ownership.
1:734fb7d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:734fb7d:  * (the "License"); you may not use this file except in compliance with
1:734fb7d:  * the License.  You may obtain a copy of the License at
1:734fb7d:  *
1:734fb7d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:734fb7d:  *
1:734fb7d:  * Unless required by applicable law or agreed to in writing, software
1:734fb7d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:734fb7d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:734fb7d:  * See the License for the specific language governing permissions and
1:734fb7d:  * limitations under the License.
1:734fb7d:  */
1:734fb7d: package org.apache.activemq.broker.region.cursors;
1:734fb7d: 
1:734fb7d: import java.io.IOException;
1:cf3d419: import java.util.Arrays;
1:cf3d419: import java.util.Collection;
1:734fb7d: import java.util.concurrent.atomic.AtomicLong;
1:734fb7d: 
1:734fb7d: import javax.jms.Connection;
1:734fb7d: import javax.jms.DeliveryMode;
1:734fb7d: 
1:734fb7d: import org.apache.activemq.ActiveMQConnectionFactory;
1:734fb7d: import org.apache.activemq.broker.BrokerService;
1:734fb7d: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1:734fb7d: import org.apache.activemq.util.SubscriptionKey;
1:734fb7d: import org.junit.Test;
1:485fcaf: import org.junit.runner.RunWith;
1:485fcaf: import org.junit.runners.Parameterized;
1:cf3d419: import org.junit.runners.Parameterized.Parameters;
1:734fb7d: import org.slf4j.Logger;
1:734fb7d: import org.slf4j.LoggerFactory;
1:734fb7d: 
1:734fb7d: /**
1:734fb7d:  * This test checks that PendingMessageCursor size statistics work with the MemoryPersistentAdapter
1:734fb7d:  *
1:734fb7d:  * AMQ-5748
1:734fb7d:  *
1:734fb7d:  */
1:485fcaf: @RunWith(Parameterized.class)
1:734fb7d: public class MemoryPendingMessageCursorTest extends AbstractPendingMessageCursorTest {
1:734fb7d:     protected static final Logger LOG = LoggerFactory
1:734fb7d:             .getLogger(MemoryPendingMessageCursorTest.class);
1:485fcaf: 
1:734fb7d: 
1:cf3d419:     @Parameters(name = "prioritizedMessages={0}")
1:cf3d419:     public static Collection<Object[]> data() {
1:cf3d419:         return Arrays.asList(new Object[][] {
1:cf3d419:                 // use priority messages
1:cf3d419:                 { true },
1:cf3d419:                 // don't use priority messages
1:cf3d419:                 { false } });
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     public MemoryPendingMessageCursorTest(boolean prioritizedMessages) {
1:cf3d419:         super(prioritizedMessages);
1:cf3d419:     }
1:485fcaf: 
1:734fb7d:     @Override
1:734fb7d:     protected void initPersistence(BrokerService brokerService) throws IOException {
1:734fb7d:         broker.setPersistent(false);
1:734fb7d:         broker.setPersistenceAdapter(new MemoryPersistenceAdapter());
1:485fcaf:     }
1:734fb7d: 
1:734fb7d: 
1:734fb7d:     @Override
1:cf3d419:     @Test
1:734fb7d:     public void testMessageSizeOneDurable() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:734fb7d:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:734fb7d:         connection.setClientID("clientId");
1:734fb7d:         connection.start();
1:734fb7d: 
1:734fb7d:         SubscriptionKey subKey = new SubscriptionKey("clientId", "sub1");
1:734fb7d:         org.apache.activemq.broker.region.Topic dest =
1:734fb7d:                 publishTestMessagesDurable(connection, new String[] {"sub1"},
1:734fb7d:                         200, publishedMessageSize, DeliveryMode.PERSISTENT);
1:734fb7d: 
1:734fb7d:         verifyPendingStats(dest, subKey, 200, publishedMessageSize.get());
1:734fb7d: 
1:734fb7d:         //The expected value is only 100 because for durables a LRUCache is being used
1:734fb7d:         //with a max size of 100
2:734fb7d:         verifyStoreStats(dest, 100, publishedMessageSize.get());
1:734fb7d: 
1:734fb7d:         //consume 100 messages
1:734fb7d:         consumeDurableTestMessages(connection, "sub1", 100, publishedMessageSize);
1:734fb7d: 
1:734fb7d:         //100 should be left
1:734fb7d:         verifyPendingStats(dest, subKey, 100, publishedMessageSize.get());
1:734fb7d:         verifyStoreStats(dest, 100, publishedMessageSize.get());
1:734fb7d: 
1:734fb7d:         connection.close();
2:734fb7d:     }
1:734fb7d: 
1:734fb7d:     @Override
1:cf3d419:     @Test
1:734fb7d:     public void testMessageSizeTwoDurables() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:734fb7d: 
1:734fb7d:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:734fb7d:         connection.setClientID("clientId");
1:734fb7d:         connection.start();
1:734fb7d: 
1:734fb7d:         org.apache.activemq.broker.region.Topic dest =
1:734fb7d:                 publishTestMessagesDurable(connection, new String[] {"sub1", "sub2"},
1:734fb7d:                         200, publishedMessageSize, DeliveryMode.PERSISTENT);
1:734fb7d: 
1:734fb7d:         //verify the count and size
1:734fb7d:         SubscriptionKey subKey = new SubscriptionKey("clientId", "sub1");
1:734fb7d:         verifyPendingStats(dest, subKey, 200, publishedMessageSize.get());
1:734fb7d: 
1:734fb7d:         //consume messages just for sub1
1:734fb7d:         consumeDurableTestMessages(connection, "sub1", 200, publishedMessageSize);
1:734fb7d: 
1:734fb7d:         //There is still a durable that hasn't consumed so the messages should exist
1:734fb7d:         SubscriptionKey subKey2 = new SubscriptionKey("clientId", "sub2");
1:734fb7d:         verifyPendingStats(dest, subKey, 0, 0);
1:734fb7d:         verifyPendingStats(dest, subKey2, 200, publishedMessageSize.get());
1:734fb7d: 
1:734fb7d:         //The expected value is only 100 because for durables a LRUCache is being used
1:734fb7d:         //with a max size of 100
1:bb8d32c:         verifyStoreStats(dest, 0, publishedMessageSize.get());
1:734fb7d: 
1:734fb7d:         connection.stop();
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     @Override
1:cf3d419:     @Test
1:734fb7d:     public void testMessageSizeOneDurablePartialConsumption() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:734fb7d: 
1:734fb7d:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:734fb7d:         connection.setClientID("clientId");
1:734fb7d:         connection.start();
1:734fb7d: 
1:734fb7d:         SubscriptionKey subKey = new SubscriptionKey("clientId", "sub1");
1:734fb7d:         org.apache.activemq.broker.region.Topic dest = publishTestMessagesDurable(connection,
1:734fb7d:                 new String[] {"sub1"}, 200, publishedMessageSize, DeliveryMode.PERSISTENT);
1:734fb7d: 
1:734fb7d:         //verify the count and size - durable is offline so all 200 should be pending since none are in prefetch
1:734fb7d:         verifyPendingStats(dest, subKey, 200, publishedMessageSize.get());
1:734fb7d: 
1:734fb7d:         //The expected value is only 100 because for durables a LRUCache is being used
1:734fb7d:         //with a max size of 100
1:734fb7d:         verifyStoreStats(dest, 100, publishedMessageSize.get());
1:734fb7d: 
1:734fb7d:         //consume all messages
1:734fb7d:         consumeDurableTestMessages(connection, "sub1", 50, publishedMessageSize);
1:734fb7d: 
1:734fb7d:         //All messages should now be gone
1:734fb7d:         verifyPendingStats(dest, subKey, 150, publishedMessageSize.get());
1:734fb7d: 
1:734fb7d:         //The expected value is only 100 because for durables a LRUCache is being used
1:734fb7d:         //with a max size of 100
1:734fb7d:        //verify the size is at least as big as 100 messages times the minimum of 100 size
1:734fb7d:         verifyStoreStats(dest, 100, 100 * 100);
1:734fb7d: 
1:734fb7d:         connection.close();
1:734fb7d:     }
1:734fb7d: 
1:734fb7d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:bb8d32c
/////////////////////////////////////////////////////////////////////////
1:         verifyStoreStats(dest, 0, publishedMessageSize.get());
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cf3d419
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runners.Parameterized.Parameters;
/////////////////////////////////////////////////////////////////////////
1:     @Parameters(name = "prioritizedMessages={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 // use priority messages
1:                 { true },
1:                 // don't use priority messages
1:                 { false } });
1:     }
1: 
1:     public MemoryPendingMessageCursorTest(boolean prioritizedMessages) {
1:         super(prioritizedMessages);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
commit:485fcaf
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
/////////////////////////////////////////////////////////////////////////
1: @RunWith(Parameterized.class)
1: 
0:    public MemoryPendingMessageCursorTest(boolean prioritizedMessages) {
0:        super(prioritizedMessages);
1:    }
1: 
commit:8a09b7e
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1: import org.apache.activemq.util.SubscriptionKey;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * This test checks that PendingMessageCursor size statistics work with the MemoryPersistentAdapter
1:  *
1:  * AMQ-5748
1:  *
1:  */
1: public class MemoryPendingMessageCursorTest extends AbstractPendingMessageCursorTest {
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(MemoryPendingMessageCursorTest.class);
1: 
1:     @Override
1:     protected void initPersistence(BrokerService brokerService) throws IOException {
1:         broker.setPersistent(false);
1:         broker.setPersistenceAdapter(new MemoryPersistenceAdapter());
1:     }
1: 
1: 
1:     @Override
0:     @Test(timeout=10000)
1:     public void testMessageSizeOneDurable() throws Exception {
1:         AtomicLong publishedMessageSize = new AtomicLong();
1:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1: 
1:         SubscriptionKey subKey = new SubscriptionKey("clientId", "sub1");
1:         org.apache.activemq.broker.region.Topic dest =
1:                 publishTestMessagesDurable(connection, new String[] {"sub1"},
1:                         200, publishedMessageSize, DeliveryMode.PERSISTENT);
1: 
1:         verifyPendingStats(dest, subKey, 200, publishedMessageSize.get());
1: 
1:         //The expected value is only 100 because for durables a LRUCache is being used
1:         //with a max size of 100
1:         verifyStoreStats(dest, 100, publishedMessageSize.get());
1: 
1:         //consume 100 messages
1:         consumeDurableTestMessages(connection, "sub1", 100, publishedMessageSize);
1: 
1:         //100 should be left
1:         verifyPendingStats(dest, subKey, 100, publishedMessageSize.get());
1:         verifyStoreStats(dest, 100, publishedMessageSize.get());
1: 
1:         connection.close();
1:     }
1: 
1:     @Override
0:     @Test(timeout=10000)
1:     public void testMessageSizeTwoDurables() throws Exception {
1:         AtomicLong publishedMessageSize = new AtomicLong();
1: 
1:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1: 
1:         org.apache.activemq.broker.region.Topic dest =
1:                 publishTestMessagesDurable(connection, new String[] {"sub1", "sub2"},
1:                         200, publishedMessageSize, DeliveryMode.PERSISTENT);
1: 
1:         //verify the count and size
1:         SubscriptionKey subKey = new SubscriptionKey("clientId", "sub1");
1:         verifyPendingStats(dest, subKey, 200, publishedMessageSize.get());
1: 
1:         //consume messages just for sub1
1:         consumeDurableTestMessages(connection, "sub1", 200, publishedMessageSize);
1: 
1:         //There is still a durable that hasn't consumed so the messages should exist
1:         SubscriptionKey subKey2 = new SubscriptionKey("clientId", "sub2");
1:         verifyPendingStats(dest, subKey, 0, 0);
1:         verifyPendingStats(dest, subKey2, 200, publishedMessageSize.get());
1: 
1:         //The expected value is only 100 because for durables a LRUCache is being used
1:         //with a max size of 100
1:         verifyStoreStats(dest, 100, publishedMessageSize.get());
1: 
1:         connection.stop();
1:     }
1: 
1:     @Override
0:     @Test(timeout=10000)
1:     public void testMessageSizeOneDurablePartialConsumption() throws Exception {
1:         AtomicLong publishedMessageSize = new AtomicLong();
1: 
1:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1: 
1:         SubscriptionKey subKey = new SubscriptionKey("clientId", "sub1");
1:         org.apache.activemq.broker.region.Topic dest = publishTestMessagesDurable(connection,
1:                 new String[] {"sub1"}, 200, publishedMessageSize, DeliveryMode.PERSISTENT);
1: 
1:         //verify the count and size - durable is offline so all 200 should be pending since none are in prefetch
1:         verifyPendingStats(dest, subKey, 200, publishedMessageSize.get());
1: 
1:         //The expected value is only 100 because for durables a LRUCache is being used
1:         //with a max size of 100
1:         verifyStoreStats(dest, 100, publishedMessageSize.get());
1: 
1:         //consume all messages
1:         consumeDurableTestMessages(connection, "sub1", 50, publishedMessageSize);
1: 
1:         //All messages should now be gone
1:         verifyPendingStats(dest, subKey, 150, publishedMessageSize.get());
1: 
1:         //The expected value is only 100 because for durables a LRUCache is being used
1:         //with a max size of 100
1:        //verify the size is at least as big as 100 messages times the minimum of 100 size
1:         verifyStoreStats(dest, 100, 100 * 100);
1: 
1:         connection.close();
1:     }
1: 
1: }
============================================================================