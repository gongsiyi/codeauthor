1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
7:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: import javax.jms.Topic;
1:933eb2f: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsTopicRedeliverTest extends TestSupport {
1:230a86c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsTopicRedeliverTest.class);
1:230a86c: 
1:d29ca2a:     protected Connection connection;
1:d29ca2a:     protected Session session;
1:d29ca2a:     protected Session consumeSession;
1:d29ca2a:     protected MessageConsumer consumer;
1:d29ca2a:     protected MessageProducer producer;
1:d29ca2a:     protected Destination consumerDestination;
1:d29ca2a:     protected Destination producerDestination;
1:d29ca2a:     protected boolean topic = true;
1:230a86c:     protected boolean durable;
1:230a86c:     protected boolean verbose;
1:230a86c:     protected long initRedeliveryDelay;
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a: 
1:d29ca2a:         connectionFactory = createConnectionFactory();
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         initRedeliveryDelay = ((ActiveMQConnection)connection).getRedeliveryPolicy().getInitialRedeliveryDelay();
1:d29ca2a: 
1:d29ca2a:         if (durable) {
1:d29ca2a:             connection.setClientID(getClass().getName());
1:d29ca2a:         }
1:29ecfd6: 
1:fc00993:         LOG.info("Created connection: " + connection);
1:29ecfd6: 
1:d29ca2a:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a:         consumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a: 
1:fc00993:         LOG.info("Created session: " + session);
1:fc00993:         LOG.info("Created consumeSession: " + consumeSession);
1:d29ca2a:         producer = session.createProducer(null);
1:230a86c:         // producer.setDeliveryMode(deliveryMode);
1:d29ca2a: 
1:fc00993:         LOG.info("Created producer: " + producer);
1:d29ca2a: 
1:d29ca2a:         if (topic) {
1:d29ca2a:             consumerDestination = session.createTopic(getConsumerSubject());
1:d29ca2a:             producerDestination = session.createTopic(getProducerSubject());
1:d29ca2a:         } else {
1:d29ca2a:             consumerDestination = session.createQueue(getConsumerSubject());
1:d29ca2a:             producerDestination = session.createQueue(getProducerSubject());
1:29ecfd6:         }
1:d29ca2a: 
1:fc00993:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
1:fc00993:         LOG.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
1:d29ca2a:         consumer = createConsumer();
1:d29ca2a:         connection.start();
1:d29ca2a: 
1:fc00993:         LOG.info("Created connection: " + connection);
1:d29ca2a:     }
1:d29ca2a: 
1:ab1d1af:     protected void tearDown() throws Exception {
1:ab1d1af:         if (connection != null) {
1:ab1d1af:             connection.close();
1:d29ca2a:         }
1:ab1d1af:         super.tearDown();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the consumer subject.
1:230a86c:      * 
1:d29ca2a:      * @return String - consumer subject
1:d29ca2a:      * @see org.apache.activemq.test.TestSupport#getConsumerSubject()
1:d29ca2a:      */
1:d29ca2a:     protected String getConsumerSubject() {
1:d29ca2a:         return "TEST";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the producer subject.
1:230a86c:      * 
1:d29ca2a:      * @return String - producer subject
1:d29ca2a:      * @see org.apache.activemq.test.TestSupport#getProducerSubject()
1:d29ca2a:      */
1:d29ca2a:     protected String getProducerSubject() {
1:d29ca2a:         return "TEST";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sends and consumes the messages.
1:230a86c:      * 
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testRecover() throws Exception {
1:d29ca2a:         String text = "TEST";
1:d29ca2a:         Message sendMessage = session.createTextMessage(text);
1:d29ca2a: 
1:d29ca2a:         if (verbose) {
1:fc00993:             LOG.info("About to send a message: " + sendMessage + " with text: " + text);
1:d29ca2a:         }
1:d29ca2a:         producer.send(producerDestination, sendMessage);
1:d29ca2a: 
1:230a86c:         // receive but don't acknowledge
1:d29ca2a:         Message unackMessage = consumer.receive(initRedeliveryDelay + 1000);
1:d29ca2a:         assertNotNull(unackMessage);
1:d29ca2a:         String unackId = unackMessage.getJMSMessageID();
1:230a86c:         assertEquals(((TextMessage)unackMessage).getText(), text);
1:d29ca2a:         assertFalse(unackMessage.getJMSRedelivered());
1:230a86c:         // assertEquals(unackMessage.getIntProperty("JMSXDeliveryCount"),1);
1:d29ca2a: 
1:230a86c:         // receive then acknowledge
1:d29ca2a:         consumeSession.recover();
1:d29ca2a:         Message ackMessage = consumer.receive(initRedeliveryDelay + 1000);
1:d29ca2a:         assertNotNull(ackMessage);
1:d29ca2a:         ackMessage.acknowledge();
1:d29ca2a:         String ackId = ackMessage.getJMSMessageID();
1:230a86c:         assertEquals(((TextMessage)ackMessage).getText(), text);
1:d29ca2a:         assertTrue(ackMessage.getJMSRedelivered());
1:230a86c:         // assertEquals(ackMessage.getIntProperty("JMSXDeliveryCount"),2);
1:d29ca2a:         assertEquals(unackId, ackId);
1:d29ca2a:         consumeSession.recover();
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:29ecfd6:     }
1:29ecfd6: 
1:d29ca2a:     protected MessageConsumer createConsumer() throws JMSException {
1:d29ca2a:         if (durable) {
1:fc00993:             LOG.info("Creating durable consumer");
1:230a86c:             return consumeSession.createDurableSubscriber((Topic)consumerDestination, getName());
1:d29ca2a:         }
1:d29ca2a:         return consumeSession.createConsumer(consumerDestination);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:6a0c658
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:29ecfd6
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.TopicConnection;
0: import javax.jms.TopicSession;
0: import javax.jms.TopicRequestor;
/////////////////////////////////////////////////////////////////////////
0:     public void testExOnNullDestToTopicRequestor() throws Exception {
1: 
0:         TopicConnection topicConnection = connectionFactory.createTopicConnection();
0:         TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0:         try {
0:             TopicRequestor topicRequestor = new TopicRequestor(topicSession, null);
0:             fail("Expect ex on invalid dest");
0:         } catch (javax.jms.InvalidDestinationException expected) {
0:         } finally {
0:             topicConnection.close();
1:         }
1:     }
1: 
1: 
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final Log LOG = LogFactory.getLog(JmsTopicRedeliverTest.class);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(JmsTopicRedeliverTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created connection: " + connection);
1:         LOG.info("Created session: " + session);
1:         LOG.info("Created consumeSession: " + consumeSession);
1:         LOG.info("Created producer: " + producer);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
1:         LOG.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
1:         LOG.info("Created connection: " + connection);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("About to send a message: " + sendMessage + " with text: " + text);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Creating durable consumer");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(JmsTopicRedeliverTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected boolean durable;
1:     protected boolean verbose;
1:     protected long initRedeliveryDelay;
/////////////////////////////////////////////////////////////////////////
1:         // producer.setDeliveryMode(deliveryMode);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         // receive but don't acknowledge
1:         assertEquals(((TextMessage)unackMessage).getText(), text);
1:         // assertEquals(unackMessage.getIntProperty("JMSXDeliveryCount"),1);
1:         // receive then acknowledge
1:         assertEquals(((TextMessage)ackMessage).getText(), text);
1:         // assertEquals(ackMessage.getIntProperty("JMSXDeliveryCount"),2);
/////////////////////////////////////////////////////////////////////////
1:             return consumeSession.createDurableSubscriber((Topic)consumerDestination, getName());
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
0: import org.apache.activemq.ActiveMQConnection;
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
1: public class JmsTopicRedeliverTest extends TestSupport {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JmsTopicRedeliverTest.class);
1:    
1:     
1:     protected Connection connection;
1:     protected Session session;
1:     protected Session consumeSession;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1:     protected Destination consumerDestination;
1:     protected Destination producerDestination;
1:     protected boolean topic = true;
0:     protected boolean durable = false;
0:     protected boolean verbose = false;
0:     protected long    initRedeliveryDelay = 0;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         connectionFactory = createConnectionFactory();
1:         connection = createConnection();
1:         initRedeliveryDelay = ((ActiveMQConnection)connection).getRedeliveryPolicy().getInitialRedeliveryDelay();
1: 
1:         if (durable) {
1:             connection.setClientID(getClass().getName());
1:         }
1: 
0:         log.info("Created connection: " + connection);
1: 
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         consumeSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
0:         log.info("Created session: " + session);
0:         log.info("Created consumeSession: " + consumeSession);
1:         producer = session.createProducer(null);
0:         //producer.setDeliveryMode(deliveryMode);
1: 
0:         log.info("Created producer: " + producer);
1: 
1:         if (topic) {
1:             consumerDestination = session.createTopic(getConsumerSubject());
1:             producerDestination = session.createTopic(getProducerSubject());
1:         } else {
1:             consumerDestination = session.createQueue(getConsumerSubject());
1:             producerDestination = session.createQueue(getProducerSubject());
1:         }
1: 
0:         log.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
0:         log.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
1:         consumer = createConsumer();
1:         connection.start();
1: 
0:         log.info("Created connection: " + connection);
1:     }
1: 
1:     /**
1:      * Returns the consumer subject.
1:      *
1:      * @return String - consumer subject
1:      * @see org.apache.activemq.test.TestSupport#getConsumerSubject()
1:      */
1:     protected String getConsumerSubject() {
1:         return "TEST";
1:     }
1: 
1:     /**
1:      * Returns the producer subject.
1:      *
1:      * @return String - producer subject
1:      * @see org.apache.activemq.test.TestSupport#getProducerSubject()
1:      */
1:     protected String getProducerSubject() {
1:         return "TEST";
1:     }
1: 
1:     /**
1:      * Sends and consumes the messages.
1:      *
1:      * @throws Exception
1:      */
1:     public void testRecover() throws Exception {
1:         String text = "TEST";
1:         Message sendMessage = session.createTextMessage(text);
1: 
1:         if (verbose) {
0:             log.info("About to send a message: " + sendMessage + " with text: " + text);
1:         }
1:         producer.send(producerDestination, sendMessage);
1: 
0:         //receive but don't acknowledge
1:         Message unackMessage = consumer.receive(initRedeliveryDelay + 1000);
1:         assertNotNull(unackMessage);
1:         String unackId = unackMessage.getJMSMessageID();
0:         assertEquals(((TextMessage) unackMessage).getText(), text);
1:         assertFalse(unackMessage.getJMSRedelivered());
0:         //assertEquals(unackMessage.getIntProperty("JMSXDeliveryCount"),1);
1: 
0:         //receive then acknowledge
1:         consumeSession.recover();
1:         Message ackMessage = consumer.receive(initRedeliveryDelay + 1000);
1:         assertNotNull(ackMessage);
1:         ackMessage.acknowledge();
1:         String ackId = ackMessage.getJMSMessageID();
0:         assertEquals(((TextMessage) ackMessage).getText(), text);
1:         assertTrue(ackMessage.getJMSRedelivered());
0:         //assertEquals(ackMessage.getIntProperty("JMSXDeliveryCount"),2);
1:         assertEquals(unackId, ackId);
1:         consumeSession.recover();
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     protected MessageConsumer createConsumer() throws JMSException {
1:         if (durable) {
0:             log.info("Creating durable consumer");
0:             return consumeSession.createDurableSubscriber((Topic) consumerDestination, getName());
1:         }
1:         return consumeSession.createConsumer(consumerDestination);
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsTopicRedeliverTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:ab1d1af
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
0:         }
1:         super.tearDown();
0:     }
0: 
0: 
============================================================================