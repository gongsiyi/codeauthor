2:c4d8d86: /**
1:c4d8d86:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c4d8d86:  * contributor license agreements.  See the NOTICE file distributed with
1:c4d8d86:  * this work for additional information regarding copyright ownership.
1:c4d8d86:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c4d8d86:  * (the "License"); you may not use this file except in compliance with
1:c4d8d86:  * the License.  You may obtain a copy of the License at
3:c4d8d86:  *
1:c4d8d86:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:c4d8d86:  * Unless required by applicable law or agreed to in writing, software
1:c4d8d86:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c4d8d86:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c4d8d86:  * See the License for the specific language governing permissions and
1:c4d8d86:  * limitations under the License.
2:c4d8d86:  */
1:c4d8d86: package org.apache.activemq.transport;
6:c4d8d86: 
1:5e05df1: import java.io.IOException;
1:5e05df1: 
1:5e05df1: import javax.management.ObjectName;
1:5e05df1: 
1:ced6909: import org.apache.activemq.broker.jmx.AnnotatedMBean;
1:c4d8d86: import org.apache.activemq.broker.jmx.ManagementContext;
1:c4d8d86: import org.apache.activemq.util.IOExceptionSupport;
1:c4d8d86: import org.apache.activemq.util.LogWriterFinder;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:c4d8d86: 
1:5385fd1: import static org.apache.activemq.TransportLoggerSupport.defaultJmxPort;
1:5385fd1: 
1:c4d8d86: /**
1:c4d8d86:  * Singleton class to create TransportLogger objects.
1:c4d8d86:  * When the method getInstance() is called for the first time,
1:c4d8d86:  * a TransportLoggerControlMBean is created and registered.
1:c4d8d86:  * This MBean permits enabling and disabling the logging for
1:c4d8d86:  * all TransportLogger objects at once.
1:5e05df1:  *
1:c4d8d86:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
1:5e05df1:  *
1:c4d8d86:  * @see TransportLoggerControlMBean
1:c4d8d86:  */
1:c4d8d86: public class TransportLoggerFactory {
1:c4d8d86: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TransportLoggerFactory.class);
1:c4d8d86: 
1:c4d8d86:     private static TransportLoggerFactory instance;
1:c4d8d86:     private static int lastId=0;
1:c4d8d86:     private static final LogWriterFinder logWriterFinder = new LogWriterFinder("META-INF/services/org/apache/activemq/transport/logwriters/");
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * LogWriter that will be used if none is specified.
1:c4d8d86:      */
1:c4d8d86:     public static String defaultLogWriterName = "default";
1:c4d8d86:     /**
1:c4d8d86:      * If transport logging is enabled, it will be possible to control
1:5e05df1:      * the transport loggers or not based on this value
1:c4d8d86:      */
1:c4d8d86:     private static boolean defaultDynamicManagement = false;
1:c4d8d86:     /**
1:c4d8d86:      * If transport logging is enabled, the transport loggers will initially
1:c4d8d86:      * output or not depending on this value.
1:5e05df1:      * This setting only has a meaning if
1:c4d8d86:      */
1:c4d8d86:     private static boolean defaultInitialBehavior = true;
1:c4d8d86: 
1:c4d8d86:     private boolean transportLoggerControlCreated = false;
1:c4d8d86:     private ManagementContext managementContext;
1:c4d8d86:     private ObjectName objectName;
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Private constructor.
1:c4d8d86:      */
1:c4d8d86:     private TransportLoggerFactory() {
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Returns a TransportLoggerFactory object which can be used to create TransportLogger objects.
1:c4d8d86:      * @return a TransportLoggerFactory object
1:c4d8d86:      */
1:c4d8d86:     public static synchronized TransportLoggerFactory getInstance() {
1:c4d8d86:         if (instance == null) {
1:c4d8d86:             instance = new TransportLoggerFactory();
1:c4d8d86:         }
1:c4d8d86:         return instance;
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     public void stop() {
1:c4d8d86:         try {
1:c4d8d86:             if (this.transportLoggerControlCreated) {
1:c4d8d86:                 this.managementContext.unregisterMBean(this.objectName);
1:c4d8d86:                 this.managementContext.stop();
1:c4d8d86:                 this.managementContext = null;
1:c4d8d86:             }
1:c4d8d86:         } catch (Exception e) {
1:c4d8d86:             LOG.error("TransportLoggerFactory could not be stopped, reason: " + e, e);
1:c4d8d86:         }
1:c4d8d86: 
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
1:c4d8d86:      * Uses the default initial behavior, the default log writer, and creates a new
1:c4d8d86:      * log4j object to be used by the TransportLogger.
1:c4d8d86:      * @param next The next Transport layer in the Transport stack.
1:c4d8d86:      * @return A TransportLogger object.
1:c4d8d86:      * @throws IOException
1:c4d8d86:      */
1:c4d8d86:     public TransportLogger createTransportLogger(Transport next) throws IOException {
2:c4d8d86:         int id = getNextId();
1:c4d8d86:         return createTransportLogger(next, id, createLog(id), defaultLogWriterName, defaultDynamicManagement, defaultInitialBehavior, defaultJmxPort);
1:c4d8d86:     }
1:5e05df1: 
1:c4d8d86:     /**
1:c4d8d86:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
1:c4d8d86:      * Uses the default initial behavior and the default log writer.
1:c4d8d86:      * @param next The next Transport layer in the Transport stack.
1:c4d8d86:      * @param log The log4j log that will be used by the TransportLogger.
1:c4d8d86:      * @return A TransportLogger object.
1:c4d8d86:      * @throws IOException
1:c4d8d86:      */
1:8bf987b:     public TransportLogger createTransportLogger(Transport next, Logger log) throws IOException {
1:c4d8d86:         return createTransportLogger(next, getNextId(), log, defaultLogWriterName, defaultDynamicManagement, defaultInitialBehavior, defaultJmxPort);
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
1:c4d8d86:      * Creates a new log4j object to be used by the TransportLogger.
1:c4d8d86:      * @param next The next Transport layer in the Transport stack.
1:c4d8d86:      * @param startLogging Specifies if this TransportLogger should be initially active or not.
1:c4d8d86:      * @param logWriterName The name or the LogWriter to be used. Different log writers can output
1:c4d8d86:      * logs with a different format.
1:c4d8d86:      * @return A TransportLogger object.
1:c4d8d86:      * @throws IOException
1:c4d8d86:      */
1:c4d8d86:     public TransportLogger createTransportLogger(Transport next, String logWriterName,
1:c4d8d86:             boolean useJmx, boolean startLogging, int jmxport) throws IOException {
1:5385fd1:         int id = -1; // new default to single logger
1:5385fd1:         // allow old behaviour with incantation
1:5385fd1:         if (!useJmx && jmxport != defaultJmxPort) {
1:5385fd1:             id = getNextId();
1:5385fd1:         }
1:c4d8d86:         return createTransportLogger(next, id, createLog(id), logWriterName, useJmx, startLogging, jmxport);
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86: 
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
1:c4d8d86:      * @param next The next Transport layer in the Transport stack.
1:c4d8d86:      * @param id The id of the transport logger.
1:c4d8d86:      * @param log The log4j log that will be used by the TransportLogger.
1:c4d8d86:      * @param logWriterName The name or the LogWriter to be used. Different log writers can output
1:c4d8d86:      * @param dynamicManagement Specifies if JMX will be used to switch on/off the TransportLogger to be created.
1:c4d8d86:      * @param startLogging Specifies if this TransportLogger should be initially active or not. Only has a meaning if
1:c4d8d86:      * dynamicManagement = true.
1:5e05df1:      * @param jmxport the port to be used by the JMX server. It should only be different from 1099 (broker's default JMX port)
1:c4d8d86:      * when it's a client that is using Transport Logging. In a broker, if the port is different from 1099, 2 JMX servers will
1:c4d8d86:      * be created, both identical, with all the MBeans.
1:c4d8d86:      * @return A TransportLogger object.
1:c4d8d86:      * @throws IOException
1:c4d8d86:      */
1:8bf987b:     public TransportLogger createTransportLogger(Transport next, int id, Logger log,
1:c4d8d86:             String logWriterName, boolean dynamicManagement, boolean startLogging, int jmxport) throws IOException {
1:c4d8d86:         try {
1:c4d8d86:             LogWriter logWriter = logWriterFinder.newInstance(logWriterName);
1:5385fd1:             if (id == -1) {
1:5385fd1:                 logWriter.setPrefix(String.format("%08X: ", getNextId()));
1:5385fd1:             }
1:c4d8d86:             TransportLogger tl =  new TransportLogger (next, log, startLogging, logWriter);
1:c4d8d86:             if (dynamicManagement) {
1:c4d8d86:                 synchronized (this) {
1:c4d8d86:                     if (!this.transportLoggerControlCreated) {
1:c4d8d86:                         this.createTransportLoggerControl(jmxport);
1:c4d8d86:                     }
1:c4d8d86:                 }
1:c4d8d86:                 TransportLoggerView tlv = new TransportLoggerView(tl, next.toString(), id, this.managementContext);
1:c4d8d86:                 tl.setView(tlv);
1:c4d8d86:             }
1:c4d8d86:             return tl;
1:c4d8d86:         } catch (Throwable e) {
1:c4d8d86:             throw IOExceptionSupport.create("Could not create log writer object for: " + logWriterName + ", reason: " + e, e);
1:c4d8d86:         }
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     synchronized private static int getNextId() {
1:c4d8d86:         return ++lastId;
1:c4d8d86:     }
1:c4d8d86: 
1:8bf987b:     private static Logger createLog(int id) {
1:5385fd1:         return LoggerFactory.getLogger(TransportLogger.class.getName()+".Connection" + (id > 0 ? ":"+id : "" ));
1:c4d8d86:     }
1:5e05df1: 
1:c4d8d86:     /**
1:c4d8d86:      * Starts the management context.
1:c4d8d86:      * Creates and registers a TransportLoggerControl MBean which enables the user
1:c4d8d86:      * to enable/disable logging for all transport loggers at once.
1:c4d8d86:      */
1:c4d8d86:      private void createTransportLoggerControl(int port) {
1:c4d8d86:          try {
1:c4d8d86:              this.managementContext = new ManagementContext();
1:c4d8d86:              this.managementContext.setConnectorPort(port);
1:c4d8d86:              this.managementContext.start();
1:c4d8d86:          } catch (Exception e) {
1:c4d8d86:              LOG.error("Management context could not be started, reason: " + e, e);
1:c4d8d86:          }
1:c4d8d86: 
1:c4d8d86:          try {
1:c4d8d86:              this.objectName = new ObjectName(this.managementContext.getJmxDomainName()+":"+ "Type=TransportLoggerControl");
1:ced6909:              AnnotatedMBean.registerMBean(this.managementContext, new TransportLoggerControl(this.managementContext),this.objectName);
1:5e05df1: 
1:c4d8d86:              this.transportLoggerControlCreated = true;
1:c4d8d86: 
1:c4d8d86:          } catch (Exception e) {
1:c4d8d86:              LOG.error("TransportLoggerControlMBean could not be registered, reason: " + e, e);
1:c4d8d86:          }
1:c4d8d86:      }
1:c4d8d86: 
1:c4d8d86: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5385fd1
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.TransportLoggerSupport.defaultJmxPort;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         int id = -1; // new default to single logger
1:         // allow old behaviour with incantation
1:         if (!useJmx && jmxport != defaultJmxPort) {
1:             id = getNextId();
1:         }
/////////////////////////////////////////////////////////////////////////
1:             if (id == -1) {
1:                 logWriter.setPrefix(String.format("%08X: ", getNextId()));
1:             }
/////////////////////////////////////////////////////////////////////////
1:         return LoggerFactory.getLogger(TransportLogger.class.getName()+".Connection" + (id > 0 ? ":"+id : "" ));
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:      * the transport loggers or not based on this value
1:      * This setting only has a meaning if
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param jmxport the port to be used by the JMX server. It should only be different from 1099 (broker's default JMX port)
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
0: import java.io.IOException;
1: 
0: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.LogWriterFinder;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Singleton class to create TransportLogger objects.
1:  * When the method getInstance() is called for the first time,
1:  * a TransportLoggerControlMBean is created and registered.
1:  * This MBean permits enabling and disabling the logging for
1:  * all TransportLogger objects at once.
1:  * 
1:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
0:  * @version $Revision$
1:  * @see TransportLoggerControlMBean
1:  */
1: public class TransportLoggerFactory {
1: 
0:     private static final Log LOG = LogFactory.getLog(TransportLoggerFactory.class);
1: 
1:     private static TransportLoggerFactory instance;
1:     private static int lastId=0;
1:     private static final LogWriterFinder logWriterFinder = new LogWriterFinder("META-INF/services/org/apache/activemq/transport/logwriters/");
1: 
1:     /**
1:      * LogWriter that will be used if none is specified.
1:      */
1:     public static String defaultLogWriterName = "default";
1:     /**
1:      * If transport logging is enabled, it will be possible to control
0:      * the transport loggers or not based on this value 
1:      */
1:     private static boolean defaultDynamicManagement = false;
1:     /**
1:      * If transport logging is enabled, the transport loggers will initially
1:      * output or not depending on this value.
0:      * This setting only has a meaning if 
1:      */
1:     private static boolean defaultInitialBehavior = true;
1:     /**
0:      * Default port to control the transport loggers through JMX
1:      */
0:     private static int defaultJmxPort = 1099;
1: 
1:     private boolean transportLoggerControlCreated = false;
1:     private ManagementContext managementContext;
1:     private ObjectName objectName;
1: 
1:     /**
1:      * Private constructor.
1:      */
1:     private TransportLoggerFactory() {
1:     }
1: 
1:     /**
1:      * Returns a TransportLoggerFactory object which can be used to create TransportLogger objects.
1:      * @return a TransportLoggerFactory object
1:      */
1:     public static synchronized TransportLoggerFactory getInstance() {
1:         if (instance == null) {
1:             instance = new TransportLoggerFactory();
1:         }
1:         return instance;
1:     }
1: 
1:     public void stop() {
1:         try {
1:             if (this.transportLoggerControlCreated) {
1:                 this.managementContext.unregisterMBean(this.objectName);
1:                 this.managementContext.stop();
1:                 this.managementContext = null;
1:             }
1:         } catch (Exception e) {
1:             LOG.error("TransportLoggerFactory could not be stopped, reason: " + e, e);
1:         }
1: 
1:     }
1: 
1:     /**
1:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
1:      * Uses the default initial behavior, the default log writer, and creates a new
1:      * log4j object to be used by the TransportLogger.
1:      * @param next The next Transport layer in the Transport stack.
1:      * @return A TransportLogger object.
1:      * @throws IOException
1:      */
1:     public TransportLogger createTransportLogger(Transport next) throws IOException {
1:         int id = getNextId();
1:         return createTransportLogger(next, id, createLog(id), defaultLogWriterName, defaultDynamicManagement, defaultInitialBehavior, defaultJmxPort);
1:     }
1:     
1:     /**
1:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
1:      * Uses the default initial behavior and the default log writer.
1:      * @param next The next Transport layer in the Transport stack.
1:      * @param log The log4j log that will be used by the TransportLogger.
1:      * @return A TransportLogger object.
1:      * @throws IOException
1:      */
0:     public TransportLogger createTransportLogger(Transport next, Log log) throws IOException {
1:         return createTransportLogger(next, getNextId(), log, defaultLogWriterName, defaultDynamicManagement, defaultInitialBehavior, defaultJmxPort);
1:     }
1: 
1:     /**
1:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
1:      * Creates a new log4j object to be used by the TransportLogger.
1:      * @param next The next Transport layer in the Transport stack.
1:      * @param startLogging Specifies if this TransportLogger should be initially active or not.
1:      * @param logWriterName The name or the LogWriter to be used. Different log writers can output
1:      * logs with a different format.
1:      * @return A TransportLogger object.
1:      * @throws IOException
1:      */
1:     public TransportLogger createTransportLogger(Transport next, String logWriterName,
1:             boolean useJmx, boolean startLogging, int jmxport) throws IOException {
1:         int id = getNextId();
1:         return createTransportLogger(next, id, createLog(id), logWriterName, useJmx, startLogging, jmxport);
1:     }
1: 
1: 
1: 
1:     /**
1:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
1:      * @param next The next Transport layer in the Transport stack.
1:      * @param id The id of the transport logger.
1:      * @param log The log4j log that will be used by the TransportLogger.
1:      * @param logWriterName The name or the LogWriter to be used. Different log writers can output
1:      * @param dynamicManagement Specifies if JMX will be used to switch on/off the TransportLogger to be created.
1:      * @param startLogging Specifies if this TransportLogger should be initially active or not. Only has a meaning if
1:      * dynamicManagement = true.
0:      * @param jmxPort the port to be used by the JMX server. It should only be different from 1099 (broker's default JMX port)
1:      * when it's a client that is using Transport Logging. In a broker, if the port is different from 1099, 2 JMX servers will
1:      * be created, both identical, with all the MBeans.
1:      * @return A TransportLogger object.
1:      * @throws IOException
1:      */
0:     public TransportLogger createTransportLogger(Transport next, int id, Log log,
1:             String logWriterName, boolean dynamicManagement, boolean startLogging, int jmxport) throws IOException {
1:         try {
1:             LogWriter logWriter = logWriterFinder.newInstance(logWriterName);
1:             TransportLogger tl =  new TransportLogger (next, log, startLogging, logWriter);
1:             if (dynamicManagement) {
1:                 synchronized (this) {
1:                     if (!this.transportLoggerControlCreated) {
1:                         this.createTransportLoggerControl(jmxport);
1:                     }
1:                 }
1:                 TransportLoggerView tlv = new TransportLoggerView(tl, next.toString(), id, this.managementContext);
1:                 tl.setView(tlv);
1:             }
1:             return tl;
1:         } catch (Throwable e) {
1:             throw IOExceptionSupport.create("Could not create log writer object for: " + logWriterName + ", reason: " + e, e);
1:         }
1:     }
1: 
1:     synchronized private static int getNextId() {
1:         return ++lastId;
1:     }
1: 
0:     private static Log createLog(int id) {
0:         return LogFactory.getLog(TransportLogger.class.getName()+".Connection:" + id);
1:     }
1:     
1:     /**
1:      * Starts the management context.
1:      * Creates and registers a TransportLoggerControl MBean which enables the user
1:      * to enable/disable logging for all transport loggers at once.
1:      */
1:      private void createTransportLoggerControl(int port) {
1:          try {
1:              this.managementContext = new ManagementContext();
1:              this.managementContext.setConnectorPort(port);
1:              this.managementContext.start();
1:          } catch (Exception e) {
1:              LOG.error("Management context could not be started, reason: " + e, e);
1:          }
1: 
1:          try {
1:              this.objectName = new ObjectName(this.managementContext.getJmxDomainName()+":"+ "Type=TransportLoggerControl");
0:              this.managementContext.getMBeanServer().registerMBean(new TransportLoggerControl(this.managementContext),this.objectName);
1:              
1:              this.transportLoggerControlCreated = true;
1: 
1:          } catch (Exception e) {
1:              LOG.error("TransportLoggerControlMBean could not be registered, reason: " + e, e);
1:          }
1:      }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TransportLoggerFactory.class);
/////////////////////////////////////////////////////////////////////////
1:     public TransportLogger createTransportLogger(Transport next, Logger log) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public TransportLogger createTransportLogger(Transport next, int id, Logger log,
/////////////////////////////////////////////////////////////////////////
1:     private static Logger createLog(int id) {
0:         return LoggerFactory.getLogger(TransportLogger.class.getName()+".Connection:" + id);
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.AnnotatedMBean;
/////////////////////////////////////////////////////////////////////////
1:              AnnotatedMBean.registerMBean(this.managementContext, new TransportLoggerControl(this.managementContext),this.objectName);
author:Robert Davies
-------------------------------------------------------------------------------
commit:1ec71bd
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
0:              this.managementContext.registerMBean(new TransportLoggerControl(this.managementContext),this.objectName);
commit:19a83ae
/////////////////////////////////////////////////////////////////////////
commit:df6b542
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.transport;
0: 
0: import java.io.IOException;
0: 
0: import javax.management.ObjectName;
0: 
0: import org.apache.activemq.broker.jmx.ManagementContext;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.LogWriterFinder;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: /**
0:  * Singleton class to create TransportLogger objects.
0:  * When the method getInstance() is called for the first time,
0:  * a TransportLoggerControlMBean is created and registered.
0:  * This MBean permits enabling and disabling the logging for
0:  * all TransportLogger objects at once.
0:  * @see TransportLoggerControlMBean
0:  */
0: public class TransportLoggerFactory {
0: 
0:     private static final Log log = LogFactory.getLog(TransportLoggerFactory.class);
0: 
0:     private static TransportLoggerFactory instance;
0:     private static int lastId=0;
0:     private static final LogWriterFinder logWriterFinder = new LogWriterFinder("META-INF/services/org/apache/activemq/transport/logwriters/");
0: 
0:     /**
0:      * LogWriter that will be used if none is specified.
0:      */
0:     public static String defaultLogWriterName = "default";
0:     /**
0:      * If transport logging is enabled, it will be possible to control
0:      * the transport loggers or not based on this value 
0:      */
0:     private static boolean defaultDynamicManagement = false;
0:     /**
0:      * If transport logging is enabled, the transport loggers will initially
0:      * output or not depending on this value.
0:      * This setting only has a meaning if 
0:      */
0:     private static boolean defaultInitialBehavior = true;
0:     /**
0:      * 
0:      */
0:     private static int defaultJmxPort = 1099;
0: 
0:     private boolean transportLoggerControlCreated = false;
0:     private ManagementContext managementContext;
0:     private ObjectName objectName;
0: 
0:     /**
0:      * Private constructor.
0:      */
0:     private TransportLoggerFactory() {
0:     }
0: 
0:     /**
0:      * Returns a TransportLoggerFactory object which can be used to create TransportLogger objects.
0:      * @return a TransportLoggerFactory object
0:      */
0:     public static synchronized TransportLoggerFactory getInstance() {
0:         if (instance == null) {
0:             instance = new TransportLoggerFactory();
0:         }
0:         return instance;
0:     }
0: 
0:     public void stop() {
0:         try {
0:             if (this.transportLoggerControlCreated) {
0:                 this.managementContext.unregisterMBean(this.objectName);
0:                 this.managementContext.stop();
0:                 this.managementContext = null;
0:             }
0:         } catch (Exception e) {
0:             log.error("TransportLoggerFactory could not be stopped, reason: " + e, e);
0:         }
0: 
0:     }
0: 
0:     /**
0:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
0:      * Uses the default initial behavior, the default log writer, and creates a new
0:      * log4j object to be used by the TransportLogger.
0:      * @param next The next Transport layer in the Transport stack.
0:      * @return A TransportLogger object.
0:      * @throws IOException
0:      */
0:     public TransportLogger createTransportLogger(Transport next) throws IOException {
0:         int id = getNextId();
0:         return createTransportLogger(next, id, createLog(id), defaultLogWriterName, defaultDynamicManagement, defaultInitialBehavior, defaultJmxPort);
0:     }
0:     
0:     /**
0:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
0:      * Uses the default initial behavior and the default log writer.
0:      * @param next The next Transport layer in the Transport stack.
0:      * @param log The log4j log that will be used by the TransportLogger.
0:      * @return A TransportLogger object.
0:      * @throws IOException
0:      */
0:     public TransportLogger createTransportLogger(Transport next, Log log) throws IOException {
0:         return createTransportLogger(next, getNextId(), log, defaultLogWriterName, defaultDynamicManagement, defaultInitialBehavior,defaultJmxPort);
0:     }
0: 
0:     /**
0:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
0:      * Creates a new log4j object to be used by the TransportLogger.
0:      * @param next The next Transport layer in the Transport stack.
0:      * @param startLogging Specifies if this TransportLogger should be initially active or not.
0:      * @param logWriterName The name or the LogWriter to be used. Different log writers can output
0:      * logs with a different format.
0:      * @return A TransportLogger object.
0:      * @throws IOException
0:      */
0:     public TransportLogger createTransportLogger(Transport next, String logWriterName,
0:             boolean useJmx, boolean startLogging, int jmxport) throws IOException {
0:         int id = getNextId();
0:         return createTransportLogger(next, id, createLog(id), logWriterName, useJmx, startLogging, jmxport);
0:     }
0: 
0: 
0: 
0:     /**
0:      * Creates a TransportLogger object, that will be inserted in the Transport Stack.
0:      * @param next The next Transport layer in the Transport stack.
0:      * @param id The id of the transport logger.
0:      * @param log The log4j log that will be used by the TransportLogger.
0:      * @param logWriterName The name or the LogWriter to be used. Different log writers can output
0:      * @param dynamicManagement Specifies if JMX will be used to switch on/off the TransportLogger to be created.
0:      * @param startLogging Specifies if this TransportLogger should be initially active or not. Only has a meaning if
0:      * dynamicManagement = true.
0:      * @param jmxPort the port to be used by the JMX server. It should only be different from 1099 (broker's default JMX port)
0:      * when it's a client that is using Transport Logging. In a broker, if the port is different from 1099, 2 JMX servers will
0:      * be created, both identical, with all the MBeans.
0:      * @return A TransportLogger object.
0:      * @throws IOException
0:      */
0:     public TransportLogger createTransportLogger(Transport next, int id, Log log,
0:             String logWriterName, boolean dynamicManagement, boolean startLogging, int jmxport) throws IOException {
0:         try {
0:             LogWriter logWriter = logWriterFinder.newInstance(logWriterName);
0:             TransportLogger tl =  new TransportLogger (next, log, startLogging, logWriter);
0:             if (dynamicManagement) {
0:                 synchronized (this) {
0:                     if (!this.transportLoggerControlCreated) {
0:                         this.createTransportLoggerControl(jmxport);
0:                     }
0:                 }
0:                 TransportLoggerView tlv = new TransportLoggerView(tl, next.toString(), id, this.managementContext);
0:                 tl.setView(tlv);
0:             }
0:             return tl;
0:         } catch (Throwable e) {
0:             throw IOExceptionSupport.create("Could not create log writer object for: " + logWriterName + ", reason: " + e, e);
0:         }
0:     }
0: 
0:     synchronized private static int getNextId() {
0:         return ++lastId;
0:     }
0: 
0:     private static Log createLog(int id) {
0:         return LogFactory.getLog(TransportLogger.class.getName()+".Connection:" + id);
0:     }
0:     
0:     /**
0:      * Starts the management context.
0:      * Creates and registers a TransportLoggerControl MBean which enables the user
0:      * to enable/disable logging for all transport loggers at once.
0:      */
0:      private void createTransportLoggerControl(int port) {
0:          try {
0:              this.managementContext = new ManagementContext();
0:              this.managementContext.setConnectorPort(port);
0:              this.managementContext.start();
0:          } catch (Exception e) {
0:              log.error("Management context could not be started, reason: " + e, e);
0:          }
0: 
0:          try {
0:              this.objectName = new ObjectName(this.managementContext.getJmxDomainName()+":"+ "Type=TransportLoggerControl");
0:              this.managementContext.getMBeanServer().registerMBean(new TransportLoggerControl(this.managementContext),this.objectName);
0:              
0:              this.transportLoggerControlCreated = true;
0: 
0:          } catch (Exception e) {
0:              log.error("TransportLoggerControlMBean could not be registered, reason: " + e, e);
0:          }
0:      }
0: 
0: }
============================================================================