1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: package org.apache.activemq.broker.scheduler;
1:74846bb: 
1:74846bb: import static org.junit.Assert.assertEquals;
1:74846bb: 
1:74846bb: import java.io.File;
1:74846bb: import java.io.IOException;
1:74846bb: import java.security.ProtectionDomain;
1:74846bb: import java.util.concurrent.CountDownLatch;
1:74846bb: import java.util.concurrent.TimeUnit;
1:74846bb: import java.util.concurrent.atomic.AtomicInteger;
1:74846bb: 
1:74846bb: import javax.jms.Connection;
1:74846bb: import javax.jms.Message;
1:74846bb: import javax.jms.MessageConsumer;
1:74846bb: import javax.jms.MessageListener;
1:74846bb: import javax.jms.MessageProducer;
1:74846bb: import javax.jms.Queue;
1:74846bb: import javax.jms.Session;
1:74846bb: import javax.jms.TextMessage;
1:74846bb: 
1:74846bb: import org.apache.activemq.ActiveMQConnectionFactory;
1:74846bb: import org.apache.activemq.ScheduledMessage;
1:74846bb: import org.apache.activemq.broker.BrokerService;
1:c9c32e5: import org.apache.activemq.openwire.OpenWireFormat;
1:74846bb: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1:74846bb: import org.apache.activemq.util.IOHelper;
1:74846bb: import org.junit.After;
1:74846bb: import org.junit.Ignore;
1:74846bb: import org.junit.Test;
1:74846bb: import org.slf4j.Logger;
1:74846bb: import org.slf4j.LoggerFactory;
1:74846bb: 
1:74846bb: public class SchedulerDBVersionTest {
1:74846bb:     static String basedir;
1:74846bb:     static {
1:74846bb:         try {
1:74846bb:             ProtectionDomain protectionDomain = SchedulerDBVersionTest.class.getProtectionDomain();
1:74846bb:             basedir = new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../..").getCanonicalPath();
1:74846bb:         } catch (IOException e) {
1:74846bb:             basedir = ".";
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     static final Logger LOG = LoggerFactory.getLogger(SchedulerDBVersionTest.class);
1:74846bb:     final static File VERSION_LEGACY_JMS =
1:74846bb:         new File(basedir + "/src/test/resources/org/apache/activemq/store/schedulerDB/legacy");
1:74846bb: 
1:39a1e04:     private BrokerService broker = null;
1:74846bb: 
1:74846bb:     protected BrokerService createBroker(JobSchedulerStoreImpl scheduler) throws Exception {
1:74846bb:         BrokerService answer = new BrokerService();
1:c9c32e5:         answer.setStoreOpenWireVersion(OpenWireFormat.DEFAULT_LEGACY_VERSION);
1:74846bb:         answer.setJobSchedulerStore(scheduler);
1:74846bb:         answer.setPersistent(true);
1:39a1e04:         answer.setDataDirectory("target/SchedulerDBVersionTest/");
1:74846bb:         answer.setSchedulerSupport(true);
1:74846bb:         answer.setUseJmx(false);
1:74846bb:         return answer;
1:74846bb:     }
1:74846bb: 
1:74846bb:     @After
1:74846bb:     public void tearDown() throws Exception {
1:74846bb:         if (broker != null) {
1:74846bb:             broker.stop();
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Ignore("Used only when a new version of the store needs to archive it's test data.")
1:74846bb:     @Test
1:74846bb:     public void testCreateStore() throws Exception {
1:74846bb:         JobSchedulerStoreImpl scheduler = new JobSchedulerStoreImpl();
1:74846bb:         File dir = new File("src/test/resources/org/apache/activemq/store/schedulerDB/legacy");
1:74846bb:         IOHelper.deleteFile(dir);
1:74846bb:         scheduler.setDirectory(dir);
1:74846bb:         scheduler.setJournalMaxFileLength(1024 * 1024);
1:74846bb:         broker = createBroker(scheduler);
1:74846bb:         broker.start();
1:74846bb:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:74846bb:         Connection connection = cf.createConnection();
1:74846bb:         connection.start();
1:74846bb:         scheduleRepeating(connection);
1:74846bb:         connection.close();
1:74846bb:         broker.stop();
1:74846bb:     }
1:74846bb: 
1:74846bb:     private void scheduleRepeating(Connection connection) throws Exception {
1:74846bb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:74846bb:         Queue queue = session.createQueue("test.queue");
1:74846bb:         MessageProducer producer = session.createProducer(queue);
1:74846bb: 
1:74846bb:         TextMessage message = session.createTextMessage("test msg");
1:74846bb:         long time = 1000;
1:74846bb:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:74846bb:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 500);
1:74846bb:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, -1);
1:74846bb:         producer.send(message);
1:74846bb:         producer.close();
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:74846bb:     public void testLegacyStoreConversion() throws Exception {
1:74846bb:         doTestScheduleRepeated(VERSION_LEGACY_JMS);
1:74846bb:     }
1:74846bb: 
1:74846bb:     public void doTestScheduleRepeated(File existingStore) throws Exception {
1:39a1e04:         File testDir = new File("target/SchedulerDBVersionTest/store/scheduler/versionDB");
1:74846bb:         IOHelper.deleteFile(testDir);
1:74846bb:         IOHelper.copyFile(existingStore, testDir);
1:74846bb: 
1:c9c32e5:         final int NUMBER = 1;
1:74846bb:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:74846bb: 
1:c9c32e5:         for (int i = 0; i < 1; ++i) {
1:74846bb:             JobSchedulerStoreImpl scheduler = new JobSchedulerStoreImpl();
1:74846bb:             scheduler.setDirectory(testDir);
1:74846bb:             scheduler.setJournalMaxFileLength(1024 * 1024);
1:74846bb:             BrokerService broker = createBroker(scheduler);
1:74846bb:             broker.start();
1:74846bb:             broker.waitUntilStarted();
1:74846bb: 
1:74846bb:             final AtomicInteger count = new AtomicInteger();
1:74846bb:             Connection connection = cf.createConnection();
1:74846bb: 
1:74846bb:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:74846bb:             Queue queue = session.createQueue("test.queue");
1:74846bb: 
1:74846bb:             MessageConsumer consumer = session.createConsumer(queue);
1:74846bb: 
1:74846bb:             final CountDownLatch latch = new CountDownLatch(NUMBER);
1:74846bb:             consumer.setMessageListener(new MessageListener() {
1:74846bb:                 @Override
1:74846bb:                 public void onMessage(Message message) {
1:74846bb:                     LOG.info("Received scheduled message: {}", message);
1:74846bb:                     latch.countDown();
1:74846bb:                     count.incrementAndGet();
1:74846bb:                 }
1:74846bb:             });
1:74846bb: 
1:74846bb:             connection.start();
1:74846bb:             assertEquals(latch.getCount(), NUMBER);
1:74846bb:             latch.await(30, TimeUnit.SECONDS);
1:74846bb: 
1:74846bb:             connection.close();
1:74846bb:             broker.stop();
1:74846bb:             broker.waitUntilStopped();
1:74846bb: 
1:74846bb:             assertEquals(0, latch.getCount());
1:74846bb:         }
1:74846bb:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:39a1e04
/////////////////////////////////////////////////////////////////////////
1:     private BrokerService broker = null;
1:         answer.setDataDirectory("target/SchedulerDBVersionTest/");
/////////////////////////////////////////////////////////////////////////
1:         File testDir = new File("target/SchedulerDBVersionTest/store/scheduler/versionDB");
commit:c9c32e5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.openwire.OpenWireFormat;
/////////////////////////////////////////////////////////////////////////
1:         answer.setStoreOpenWireVersion(OpenWireFormat.DEFAULT_LEGACY_VERSION);
/////////////////////////////////////////////////////////////////////////
1:         final int NUMBER = 1;
1:         for (int i = 0; i < 1; ++i) {
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.security.ProtectionDomain;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.After;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class SchedulerDBVersionTest {
1:     static String basedir;
1:     static {
1:         try {
1:             ProtectionDomain protectionDomain = SchedulerDBVersionTest.class.getProtectionDomain();
1:             basedir = new File(new File(protectionDomain.getCodeSource().getLocation().getPath()), "../..").getCanonicalPath();
1:         } catch (IOException e) {
1:             basedir = ".";
1:         }
1:     }
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(SchedulerDBVersionTest.class);
1:     final static File VERSION_LEGACY_JMS =
1:         new File(basedir + "/src/test/resources/org/apache/activemq/store/schedulerDB/legacy");
1: 
0:     BrokerService broker = null;
1: 
1:     protected BrokerService createBroker(JobSchedulerStoreImpl scheduler) throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setJobSchedulerStore(scheduler);
1:         answer.setPersistent(true);
0:         answer.setDataDirectory("target");
1:         answer.setSchedulerSupport(true);
1:         answer.setUseJmx(false);
1:         return answer;
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     @Ignore("Used only when a new version of the store needs to archive it's test data.")
1:     @Test
1:     public void testCreateStore() throws Exception {
1:         JobSchedulerStoreImpl scheduler = new JobSchedulerStoreImpl();
1:         File dir = new File("src/test/resources/org/apache/activemq/store/schedulerDB/legacy");
1:         IOHelper.deleteFile(dir);
1:         scheduler.setDirectory(dir);
1:         scheduler.setJournalMaxFileLength(1024 * 1024);
1:         broker = createBroker(scheduler);
1:         broker.start();
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         scheduleRepeating(connection);
1:         connection.close();
1:         broker.stop();
1:     }
1: 
1:     private void scheduleRepeating(Connection connection) throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test.queue");
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         TextMessage message = session.createTextMessage("test msg");
1:         long time = 1000;
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 500);
1:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, -1);
1:         producer.send(message);
1:         producer.close();
1:     }
1: 
1:     @Test
1:     public void testLegacyStoreConversion() throws Exception {
1:         doTestScheduleRepeated(VERSION_LEGACY_JMS);
1:     }
1: 
1:     public void doTestScheduleRepeated(File existingStore) throws Exception {
0:         File testDir = new File("target/activemq-data/store/scheduler/versionDB");
1:         IOHelper.deleteFile(testDir);
1:         IOHelper.copyFile(existingStore, testDir);
1: 
0:         final int NUMBER = 10;
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1: 
0:         for (int i = 0; i < 3; ++i) {
1:             JobSchedulerStoreImpl scheduler = new JobSchedulerStoreImpl();
1:             scheduler.setDirectory(testDir);
1:             scheduler.setJournalMaxFileLength(1024 * 1024);
1:             BrokerService broker = createBroker(scheduler);
1:             broker.start();
1:             broker.waitUntilStarted();
1: 
1:             final AtomicInteger count = new AtomicInteger();
1:             Connection connection = cf.createConnection();
1: 
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Queue queue = session.createQueue("test.queue");
1: 
1:             MessageConsumer consumer = session.createConsumer(queue);
1: 
1:             final CountDownLatch latch = new CountDownLatch(NUMBER);
1:             consumer.setMessageListener(new MessageListener() {
1:                 @Override
1:                 public void onMessage(Message message) {
1:                     LOG.info("Received scheduled message: {}", message);
1:                     latch.countDown();
1:                     count.incrementAndGet();
1:                 }
1:             });
1: 
1:             connection.start();
1:             assertEquals(latch.getCount(), NUMBER);
1:             latch.await(30, TimeUnit.SECONDS);
1: 
1:             connection.close();
1:             broker.stop();
1:             broker.waitUntilStopped();
1: 
1:             assertEquals(0, latch.getCount());
1:         }
1:     }
1: }
============================================================================