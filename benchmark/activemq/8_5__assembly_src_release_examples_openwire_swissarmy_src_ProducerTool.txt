2:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:148f3bd: import java.util.Arrays;
1:1eb339f: import java.util.ArrayList;
1:148f3bd: import java.util.Date;
1:1eb339f: import java.util.Iterator;
1:148f3bd: 
1:40a7d3b: import javax.jms.Connection;
1:40a7d3b: import javax.jms.DeliveryMode;
1:148f3bd: import javax.jms.Destination;
1:40a7d3b: import javax.jms.MessageProducer;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.jms.TextMessage;
1:148f3bd: 
1:148f3bd: import org.apache.activemq.ActiveMQConnection;
1:148f3bd: import org.apache.activemq.ActiveMQConnectionFactory;
1:148f3bd: import org.apache.activemq.util.IndentPrinter;
1:1eb339f: 
1:40a7d3b: /**
1:40a7d3b:  * A simple tool for publishing messages
1:b0c2a40:  * 
1:148f3bd:  * 
2:40a7d3b:  */
1:1eb339f: public class ProducerTool extends Thread {
1:1eb339f: 
1:540dd5c:     private Destination destination;
1:540dd5c:     private int messageCount = 10;
1:540dd5c:     private long sleepTime;
1:540dd5c:     private boolean verbose = true;
1:540dd5c:     private int messageSize = 255;
1:1eb339f:     private static int parallelThreads = 1;
1:540dd5c:     private long timeToLive;
1:540dd5c:     private String user = ActiveMQConnection.DEFAULT_USER;
1:540dd5c:     private String password = ActiveMQConnection.DEFAULT_PASSWORD;
1:540dd5c:     private String url = ActiveMQConnection.DEFAULT_BROKER_URL;
1:540dd5c:     private String subject = "TOOL.DEFAULT";
1:540dd5c:     private boolean topic;
1:540dd5c:     private boolean transacted;
1:540dd5c:     private boolean persistent;
1:74ba052:     private long batch = 10;
1:1eb339f:     private static Object lockResults = new Object();
18:40a7d3b: 
1:540dd5c:     public static void main(String[] args) {
1:1eb339f:         ArrayList<ProducerTool> threads = new ArrayList();
1:540dd5c:         ProducerTool producerTool = new ProducerTool();
1:540dd5c:         String[] unknown = CommandLineSupport.setOptions(producerTool, args);
1:540dd5c:         if (unknown.length > 0) {
1:540dd5c:             System.out.println("Unknown options: " + Arrays.toString(unknown));
1:540dd5c:             System.exit(-1);
1:540dd5c:         }
1:1eb339f:         producerTool.showParameters();
1:1eb339f:         for (int threadCount = 1; threadCount <= parallelThreads; threadCount++) {
1:1eb339f:             producerTool = new ProducerTool();
1:1eb339f:             CommandLineSupport.setOptions(producerTool, args);
1:1eb339f:             producerTool.start();
1:1eb339f:             threads.add(producerTool);
1:540dd5c:         }
1:1eb339f: 
1:1eb339f:         while (true) {
1:1eb339f:             Iterator<ProducerTool> itr = threads.iterator();
1:1eb339f:             int running = 0;
1:1eb339f:             while (itr.hasNext()) {
1:1eb339f:                 ProducerTool thread = itr.next();
1:1eb339f:                 if (thread.isAlive()) {
1:1eb339f:                     running++;
19:148f3bd:                 }
1:148f3bd:             }
1:1eb339f:             if (running <= 0) {
1:1eb339f:                 System.out.println("All threads completed their work");
1:1eb339f:                 break;
1:148f3bd:             }
1:540dd5c:             try {
1:1eb339f:                 Thread.sleep(1000);
1:148f3bd:             } catch (Exception e) {
1:148f3bd:             }
1:148f3bd:         }
1:148f3bd:     }
1:1eb339f: 
1:1eb339f:     public void showParameters() {
1:da0b3b5:         System.out.println("Connecting to URL: " + url + " (" + user + ":" + password + ")");
1:540dd5c:         System.out.println("Publishing a Message with size " + messageSize + " to " + (topic ? "topic" : "queue") + ": " + subject);
1:540dd5c:         System.out.println("Using " + (persistent ? "persistent" : "non-persistent") + " messages");
1:540dd5c:         System.out.println("Sleeping between publish " + sleepTime + " ms");
1:1eb339f:         System.out.println("Running " + parallelThreads + " parallel threads");
1:148f3bd: 
1:540dd5c:         if (timeToLive != 0) {
1:540dd5c:             System.out.println("Messages time to live " + timeToLive + " ms");
1:540dd5c:         }
1:148f3bd:     }
1:148f3bd: 
1:540dd5c:     public void run() {
1:540dd5c:         Connection connection = null;
2:148f3bd:         try {
1:540dd5c:             // Create the connection.
1:540dd5c:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);
1:540dd5c:             connection = connectionFactory.createConnection();
1:540dd5c:             connection.start();
1:148f3bd: 
1:540dd5c:             // Create the session
1:540dd5c:             Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1:540dd5c:             if (topic) {
1:540dd5c:                 destination = session.createTopic(subject);
1:540dd5c:             } else {
1:540dd5c:                 destination = session.createQueue(subject);
1:540dd5c:             }
1:148f3bd: 
1:540dd5c:             // Create the producer.
1:540dd5c:             MessageProducer producer = session.createProducer(destination);
1:540dd5c:             if (persistent) {
1:540dd5c:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:540dd5c:             } else {
1:540dd5c:                 producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:540dd5c:             }
1:540dd5c:             if (timeToLive != 0) {
1:540dd5c:                 producer.setTimeToLive(timeToLive);
1:540dd5c:             }
1:148f3bd: 
1:540dd5c:             // Start sending messages
1:540dd5c:             sendLoop(session, producer);
1:148f3bd: 
1:1eb339f:             System.out.println("[" + this.getName() + "] Done.");
1:148f3bd: 
1:1eb339f:             synchronized (lockResults) {
1:148f3bd:                 ActiveMQConnection c = (ActiveMQConnection) connection;
1:1eb339f:                 System.out.println("[" + this.getName() + "] Results:\n");
1:540dd5c:                 c.getConnectionStats().dump(new IndentPrinter());
1:148f3bd:             }
1:148f3bd: 
1:540dd5c:         } catch (Exception e) {
1:1eb339f:             System.out.println("[" + this.getName() + "] Caught: " + e);
1:540dd5c:             e.printStackTrace();
1:540dd5c:         } finally {
1:540dd5c:             try {
1:540dd5c:                 connection.close();
1:540dd5c:             } catch (Throwable ignore) {
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:     }
1:148f3bd: 
1:540dd5c:     protected void sendLoop(Session session, MessageProducer producer) throws Exception {
1:148f3bd: 
1:540dd5c:         for (int i = 0; i < messageCount || messageCount == 0; i++) {
1:148f3bd: 
1:540dd5c:             TextMessage message = session.createTextMessage(createMessageText(i));
1:540dd5c: 
1:540dd5c:             if (verbose) {
1:540dd5c:                 String msg = message.getText();
1:540dd5c:                 if (msg.length() > 50) {
1:540dd5c:                     msg = msg.substring(0, 50) + "...";
1:540dd5c:                 }
1:1eb339f:                 System.out.println("[" + this.getName() + "] Sending message: '" + msg + "'");
1:540dd5c:             }
1:540dd5c: 
1:540dd5c:             producer.send(message);
1:540dd5c: 
1:74ba052:             if (transacted && (i % batch == 0)) {
1:1eb339f:                 System.out.println("[" + this.getName() + "] Committing " + messageCount + " messages");
1:540dd5c:                 session.commit();
1:540dd5c:             }
1:540dd5c:             Thread.sleep(sleepTime);
1:540dd5c:         }
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     private String createMessageText(int index) {
1:540dd5c:         StringBuffer buffer = new StringBuffer(messageSize);
1:540dd5c:         buffer.append("Message: " + index + " sent at: " + new Date());
1:540dd5c:         if (buffer.length() > messageSize) {
1:540dd5c:             return buffer.substring(0, messageSize);
1:540dd5c:         }
1:540dd5c:         for (int i = buffer.length(); i < messageSize; i++) {
1:540dd5c:             buffer.append(' ');
1:540dd5c:         }
1:540dd5c:         return buffer.toString();
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setPersistent(boolean durable) {
1:540dd5c:         this.persistent = durable;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setMessageCount(int messageCount) {
1:540dd5c:         this.messageCount = messageCount;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setMessageSize(int messageSize) {
1:540dd5c:         this.messageSize = messageSize;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setPassword(String pwd) {
1:540dd5c:         this.password = pwd;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setSleepTime(long sleepTime) {
1:540dd5c:         this.sleepTime = sleepTime;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setSubject(String subject) {
1:540dd5c:         this.subject = subject;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setTimeToLive(long timeToLive) {
1:540dd5c:         this.timeToLive = timeToLive;
1:540dd5c:     }
1:540dd5c: 
1:1eb339f:     public void setParallelThreads(int parallelThreads) {
1:1eb339f:         if (parallelThreads < 1) {
1:1eb339f:             parallelThreads = 1;
1:148f3bd:         }
1:1eb339f:         this.parallelThreads = parallelThreads;
1:148f3bd:     }
1:1eb339f: 
1:540dd5c:     public void setTopic(boolean topic) {
1:540dd5c:         this.topic = topic;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setQueue(boolean queue) {
1:540dd5c:         this.topic = !queue;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setTransacted(boolean transacted) {
1:540dd5c:         this.transacted = transacted;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setUrl(String url) {
1:540dd5c:         this.url = url;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setUser(String user) {
1:540dd5c:         this.user = user;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setVerbose(boolean verbose) {
1:540dd5c:         this.verbose = verbose;
1:540dd5c:     }
1:74ba052: 
1:74ba052:     public void setBatch(long batch) {
1:74ba052:         this.batch = batch;
1:74ba052:     }
1:148f3bd: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:74ba052
/////////////////////////////////////////////////////////////////////////
1:     private long batch = 10;
/////////////////////////////////////////////////////////////////////////
1:             if (transacted && (i % batch == 0)) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setBatch(long batch) {
1:         this.batch = batch;
1:     }
commit:da0b3b5
/////////////////////////////////////////////////////////////////////////
1:         System.out.println("Connecting to URL: " + url + " (" + user + ":" + password + ")");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     private Destination destination;
1:     private int messageCount = 10;
1:     private long sleepTime;
1:     private boolean verbose = true;
1:     private int messageSize = 255;
1:     private long timeToLive;
1:     private String user = ActiveMQConnection.DEFAULT_USER;
1:     private String password = ActiveMQConnection.DEFAULT_PASSWORD;
1:     private String url = ActiveMQConnection.DEFAULT_BROKER_URL;
1:     private String subject = "TOOL.DEFAULT";
1:     private boolean topic;
1:     private boolean transacted;
1:     private boolean persistent;
1:     public static void main(String[] args) {
1:         ProducerTool producerTool = new ProducerTool();
1:         String[] unknown = CommandLineSupport.setOptions(producerTool, args);
1:         if (unknown.length > 0) {
1:             System.out.println("Unknown options: " + Arrays.toString(unknown));
1:             System.exit(-1);
1:         }
0:         producerTool.run();
1:     }
1:     public void run() {
1:         Connection connection = null;
1:         try {
0:             System.out.println("Connecting to URL: " + url);
1:             System.out.println("Publishing a Message with size " + messageSize + " to " + (topic ? "topic" : "queue") + ": " + subject);
1:             System.out.println("Using " + (persistent ? "persistent" : "non-persistent") + " messages");
1:             System.out.println("Sleeping between publish " + sleepTime + " ms");
1:             if (timeToLive != 0) {
1:                 System.out.println("Messages time to live " + timeToLive + " ms");
1:             }
1:             // Create the connection.
1:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);
1:             connection = connectionFactory.createConnection();
1:             connection.start();
1:             // Create the session
1:             Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
1:             if (topic) {
1:                 destination = session.createTopic(subject);
1:             } else {
1:                 destination = session.createQueue(subject);
1:             }
1:             // Create the producer.
1:             MessageProducer producer = session.createProducer(destination);
1:             if (persistent) {
1:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:             } else {
1:                 producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:             }
1:             if (timeToLive != 0) {
1:                 producer.setTimeToLive(timeToLive);
1:             }
1:             // Start sending messages
1:             sendLoop(session, producer);
0:             System.out.println("Done.");
0:             // Use the ActiveMQConnection interface to dump the connection
0:             // stats.
0:             ActiveMQConnection c = (ActiveMQConnection)connection;
1:             c.getConnectionStats().dump(new IndentPrinter());
1:         } catch (Exception e) {
0:             System.out.println("Caught: " + e);
1:             e.printStackTrace();
1:         } finally {
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1:     protected void sendLoop(Session session, MessageProducer producer) throws Exception {
1:         for (int i = 0; i < messageCount || messageCount == 0; i++) {
1:             TextMessage message = session.createTextMessage(createMessageText(i));
1:             if (verbose) {
1:                 String msg = message.getText();
1:                 if (msg.length() > 50) {
1:                     msg = msg.substring(0, 50) + "...";
1:                 }
0:                 System.out.println("Sending message: " + msg);
1:             }
1:             producer.send(message);
0:             if (transacted) {
1:                 session.commit();
1:             }
1: 
1:             Thread.sleep(sleepTime);
1: 
1:         }
1: 
1:     }
1: 
1:     private String createMessageText(int index) {
1:         StringBuffer buffer = new StringBuffer(messageSize);
1:         buffer.append("Message: " + index + " sent at: " + new Date());
1:         if (buffer.length() > messageSize) {
1:             return buffer.substring(0, messageSize);
1:         }
1:         for (int i = buffer.length(); i < messageSize; i++) {
1:             buffer.append(' ');
1:         }
1:         return buffer.toString();
1:     }
1: 
1:     public void setPersistent(boolean durable) {
1:         this.persistent = durable;
1:     }
1: 
1:     public void setMessageCount(int messageCount) {
1:         this.messageCount = messageCount;
1:     }
1: 
1:     public void setMessageSize(int messageSize) {
1:         this.messageSize = messageSize;
1:     }
1: 
1:     public void setPassword(String pwd) {
1:         this.password = pwd;
1:     }
1: 
1:     public void setSleepTime(long sleepTime) {
1:         this.sleepTime = sleepTime;
1:     }
1: 
1:     public void setSubject(String subject) {
1:         this.subject = subject;
1:     }
1: 
1:     public void setTimeToLive(long timeToLive) {
1:         this.timeToLive = timeToLive;
1:     }
1: 
1:     public void setTopic(boolean topic) {
1:         this.topic = topic;
1:     }
1: 
1:     public void setQueue(boolean queue) {
1:         this.topic = !queue;
1:     }
1: 
1:     public void setTransacted(boolean transacted) {
1:         this.transacted = transacted;
1:     }
1: 
1:     public void setUrl(String url) {
1:         this.url = url;
1:     }
1: 
1:     public void setUser(String user) {
1:         this.user = user;
1:     }
1: 
1:     public void setVerbose(boolean verbose) {
1:         this.verbose = verbose;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:148f3bd
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Date;
1: 
1: import javax.jms.Destination;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.util.IndentPrinter;
1:  * 
0: public class ProducerTool {
0: 	private Destination destination;
0: 	private int messageCount = 10;
0: 	private long sleepTime = 0L;
0: 	private boolean verbose = true;
0: 	private int messageSize = 255;
0: 	private long timeToLive;
0: 	private String user = ActiveMQConnection.DEFAULT_USER;
0: 	private String password = ActiveMQConnection.DEFAULT_PASSWORD;
0: 	private String url = ActiveMQConnection.DEFAULT_BROKER_URL;
0: 	private String subject = "TOOL.DEFAULT";
0: 	private boolean topic = false;
0: 	private boolean transacted = false;
0: 	private boolean persistent = false;
0: 	public static void main(String[] args) {
0: 		ProducerTool producerTool = new ProducerTool();
0:     	String[] unknonwn = CommnadLineSupport.setOptions(producerTool, args);
0:     	if( unknonwn.length > 0 ) {
0:     		System.out.println("Unknown options: "+Arrays.toString(unknonwn));
0: 			System.exit(-1);
1:     	}    		
0:     	producerTool.run();
1: 	}
0: 	public void run() {
0: 		Connection connection=null;
1: 		try {
0: 			System.out.println("Connecting to URL: " + url);
0: 			System.out.println("Publishing a Message with size " + messageSize+ " to " + (topic ? "topic" : "queue") + ": " + subject);
0: 			System.out.println("Using " + (persistent ? "persistent" : "non-persistent") + " messages");
0: 			System.out.println("Sleeping between publish " + sleepTime + " ms");
0: 			if (timeToLive != 0) {
0: 				System.out.println("Messages time to live " + timeToLive + " ms");
1: 			}
1: 			
0: 			// Create the connection.
0: 			ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);			
0: 			connection = connectionFactory.createConnection();
0: 			connection.start();
1: 			
0: 			// Create the session
0: 			Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);
0: 			if (topic) {
0: 				destination = session.createTopic(subject);
0: 			} else {
0: 				destination = session.createQueue(subject);
1: 			}
1: 			
0: 			// Create the producer.
0: 			MessageProducer producer = session.createProducer(destination);
0: 			if (persistent) {
0: 				producer.setDeliveryMode(DeliveryMode.PERSISTENT);
0: 			} else {
0: 				producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 			}			
0: 			if (timeToLive != 0)
0: 				producer.setTimeToLive(timeToLive);
1: 						
0: 			// Start sending messages
0: 			sendLoop(session, producer);
0: 			System.out.println("Done.");
1: 			
0: 			// Use the ActiveMQConnection interface to dump the connection stats.
1: 			ActiveMQConnection c = (ActiveMQConnection) connection;
0: 			c.getConnectionStats().dump(new IndentPrinter());
1: 						
1: 		} catch (Exception e) {
0: 			System.out.println("Caught: " + e);
0: 			e.printStackTrace();
0: 		} finally {
1: 			try { 
0: 				connection.close();
0: 			} catch (Throwable ignore) {
1: 			}
1: 		}
1: 	}
0: 	protected void sendLoop(Session session, MessageProducer producer)
0: 			throws Exception {
0: 		for (int i = 0; i < messageCount || messageCount == 0; i++) {
0: 			TextMessage message = session
0: 					.createTextMessage(createMessageText(i));
0: 			if (verbose) {
0: 				String msg = message.getText();
0: 				if (msg.length() > 50) {
0: 					msg = msg.substring(0, 50) + "...";
1: 				}
0: 				System.out.println("Sending message: " + msg);
1: 			}
1: 
0: 			producer.send(message);
0: 			if (transacted) {
0: 				session.commit();
1: 			}
1: 
0: 			Thread.sleep(sleepTime);
1: 
1: 		}
1: 
1: 	}
1: 
0: 	private String createMessageText(int index) {
0: 		StringBuffer buffer = new StringBuffer(messageSize);
0: 		buffer.append("Message: " + index + " sent at: " + new Date());
0: 		if (buffer.length() > messageSize) {
0: 			return buffer.substring(0, messageSize);
1: 		}
0: 		for (int i = buffer.length(); i < messageSize; i++) {
0: 			buffer.append(' ');
1: 		}
0: 		return buffer.toString();
1: 	}
0: 	public void setPersistent(boolean durable) {
0: 		this.persistent = durable;
1: 	}
0: 	public void setMessageCount(int messageCount) {
0: 		this.messageCount = messageCount;
1: 	}
0: 	public void setMessageSize(int messageSize) {
0: 		this.messageSize = messageSize;
1: 	}
0: 	public void setPassword(String pwd) {
0: 		this.password = pwd;
1: 	}
0: 	public void setSleepTime(long sleepTime) {
0: 		this.sleepTime = sleepTime;
1: 	}
0: 	public void setSubject(String subject) {
0: 		this.subject = subject;
1: 	}
0: 	public void setTimeToLive(long timeToLive) {
0: 		this.timeToLive = timeToLive;
1: 	}
0: 	public void setTopic(boolean topic) {
0: 		this.topic = topic;
1: 	}
0: 	public void setQueue(boolean queue) {
0: 		this.topic = !queue;
1: 	}	
0: 	public void setTransacted(boolean transacted) {
0: 		this.transacted = transacted;
1: 	}
0: 	public void setUrl(String url) {
0: 		this.url = url;
1: 	}
0: 	public void setUser(String user) {
0: 		this.user = user;
1: 	}
0: 	public void setVerbose(boolean verbose) {
0: 		this.verbose = verbose;
1: 	}
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
author:Gary Tully
-------------------------------------------------------------------------------
commit:1eb339f
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1: public class ProducerTool extends Thread {
1:     private static int parallelThreads = 1;
/////////////////////////////////////////////////////////////////////////
1:     private static Object lockResults = new Object();
1:         ArrayList<ProducerTool> threads = new ArrayList();
1:         producerTool.showParameters();
1:         for (int threadCount = 1; threadCount <= parallelThreads; threadCount++) {
1:             producerTool = new ProducerTool();
1:             CommandLineSupport.setOptions(producerTool, args);
1:             producerTool.start();
1:             threads.add(producerTool);
0:         }
1: 
1:         while (true) {
1:             Iterator<ProducerTool> itr = threads.iterator();
1:             int running = 0;
1:             while (itr.hasNext()) {
1:                 ProducerTool thread = itr.next();
1:                 if (thread.isAlive()) {
1:                     running++;
0:                 }
0:             }
1:             if (running <= 0) {
1:                 System.out.println("All threads completed their work");
1:                 break;
0:             }
0:             try {
1:                 Thread.sleep(1000);
0:             } catch (Exception e) {
0:             }
0:         }
0:     }
1: 
1:     public void showParameters() {
0:         System.out.println("Connecting to URL: " + url);
0:         System.out.println("Publishing a Message with size " + messageSize + " to " + (topic ? "topic" : "queue") + ": " + subject);
0:         System.out.println("Using " + (persistent ? "persistent" : "non-persistent") + " messages");
0:         System.out.println("Sleeping between publish " + sleepTime + " ms");
1:         System.out.println("Running " + parallelThreads + " parallel threads");
1: 
0:         if (timeToLive != 0) {
0:             System.out.println("Messages time to live " + timeToLive + " ms");
0:         }
/////////////////////////////////////////////////////////////////////////
1:             System.out.println("[" + this.getName() + "] Done.");
1:             synchronized (lockResults) {
0:                 ActiveMQConnection c = (ActiveMQConnection) connection;
1:                 System.out.println("[" + this.getName() + "] Results:\n");
0:                 c.getConnectionStats().dump(new IndentPrinter());
0:             }
1:             System.out.println("[" + this.getName() + "] Caught: " + e);
/////////////////////////////////////////////////////////////////////////
1:                 System.out.println("[" + this.getName() + "] Sending message: '" + msg + "'");
1: 
1:                 System.out.println("[" + this.getName() + "] Committing " + messageCount + " messages");
/////////////////////////////////////////////////////////////////////////
1:     public void setParallelThreads(int parallelThreads) {
1:         if (parallelThreads < 1) {
1:             parallelThreads = 1;
0:         }
1:         this.parallelThreads = parallelThreads;
0:     }
1: 
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:0ef421d
/////////////////////////////////////////////////////////////////////////
0:     	        String[] unknown = CommandLineSupport.setOptions(producerTool, args);
0:     	        if( unknown.length > 0 ) {
0:     		System.out.println("Unknown options: " + Arrays.toString(unknown));
0:            	}    		
0:     	       producerTool.run();
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
0: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import java.util.Date;
1: 
1: /**
1:  * A simple tool for publishing messages
0:  *
0:  * @version $Revision: 1.2 $
1:  */
0: public class ProducerTool extends ToolSupport {
1: 
0:     protected int messageCount = 10;
0:     protected long sleepTime = 0L;
0:     protected boolean verbose = true;
0:     protected int messageSize = 255;
0:     private long timeToLive;
1: 
0:     public static void main(String[] args) {
0:         runTool(args, new ProducerTool());
0:     }
1: 
0:     protected static void runTool(String[] args, ProducerTool tool) {
0:         tool.clientID = null;
0:         if (args.length > 0) {
0:             tool.url = args[0];
0:         }
0:         if (args.length > 1) {
0:             tool.topic = args[1].equalsIgnoreCase("true");
0:         }
0:         if (args.length > 2) {
0:             tool.subject = args[2];
0:         }
0:         if (args.length > 3) {
0:             tool.durable = args[3].equalsIgnoreCase("true");
0:         }
0:         if (args.length > 4) {
0:             tool.messageCount = Integer.parseInt(args[4]);
0:         }
0:         if (args.length > 5) {
0:             tool.messageSize = Integer.parseInt(args[5]);
0:         }
0:         if (args.length > 6) {
0:             if( ! "null".equals(args[6]) ) { 
0:                 tool.clientID = args[6];
0:             }
0:         }
0:         if (args.length > 7) {
0:             tool.timeToLive = Long.parseLong(args[7]);
0:         }
0:         if (args.length > 8) {
0:             tool.sleepTime = Long.parseLong(args[8]);
0:         }
0:         if (args.length > 9) {
0:             tool.transacted = "true".equals(args[9]);
0:         }
0:         tool.run();
0:     }
1: 
0:     public void run() {
0:         try {
0:             System.out.println("Connecting to URL: " + url);
0:             System.out.println("Publishing a Message with size " + messageSize + " to " + (topic ? "topic" : "queue") + ": " + subject);
0:             System.out.println("Using " + (durable ? "durable" : "non-durable") + " publishing");
0:             System.out.println("Sleeping between publish "+sleepTime+" ms");                
0:             if( timeToLive!=0 ) {
0:                 System.out.println("Messages time to live "+timeToLive+" ms");                
0:             }
0:             Connection connection = createConnection();
0:             Session session = createSession(connection);
0:             MessageProducer producer = createProducer(session);
0:             sendLoop(session, producer);
1: 
0:             System.out.println("Done.");
0:             close(connection, session);
0:         }
0:         catch (Exception e) {
0:             System.out.println("Caught: " + e);
0:             e.printStackTrace();
0:         }
0:     }
1: 
0:     protected MessageProducer createProducer(Session session) throws JMSException {
0:         MessageProducer producer = session.createProducer(destination);
0:         if (durable) {
0:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
0:         }
0:         else {
0:             producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
0:         }
0:         if( timeToLive!=0 )
0:             producer.setTimeToLive(timeToLive);
0:         return producer;
0:     }
1: 
0:     protected void sendLoop(Session session, MessageProducer producer) throws Exception {
1: 
0:         for (int i = 0; i < messageCount || messageCount==0 ; i++) {
1: 
1: 
0:             TextMessage message = session.createTextMessage(createMessageText(i));
1: 
0:             if (verbose) {
0:                 String msg = message.getText();
0:                 if (msg.length() > 50) {
0:                     msg = msg.substring(0, 50) + "...";
0:                 }
0:                 System.out.println("Sending message: " + msg);
0:             }
1:             
0:             producer.send(message);
0:             if(transacted) {
0:                 session.commit();
0:             }
1:             
0:             Thread.sleep(sleepTime);
1:             
0:         }
1:         
0:     }
1: 
1:     /**
0:      * @param i
0:      * @return
1:      */
0:     private String createMessageText(int index) {
0:         StringBuffer buffer = new StringBuffer(messageSize);
0:         buffer.append("Message: " + index + " sent at: " + new Date());
0:         if (buffer.length() > messageSize) {
0:             return buffer.substring(0, messageSize);
0:         }
0:         for (int i = buffer.length(); i < messageSize; i++) {
0:             buffer.append(' ');
0:         }
0:         return buffer.toString();
0:     }
0: }
============================================================================