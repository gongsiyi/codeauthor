1:2cd1437: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:2cd1437:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2cd1437:  *
1:2cd1437:  * Unless required by applicable law or agreed to in writing, software
1:2cd1437:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2cd1437:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2cd1437:  * See the License for the specific language governing permissions and
1:2cd1437:  * limitations under the License.
1:2cd1437:  */
1:2cd1437: package org.apache.activemq.command;
1:2cd1437: 
1:2cd1437: import org.apache.activemq.state.CommandVisitor;
1:2cd1437: 
1:2cd1437: /**
1:2cd1437:  * A general purpose replay command for some kind of producer where ranges of
1:2cd1437:  * messages are asked to be replayed. This command is typically used over a
1:2cd1437:  * non-reliable transport such as UDP or multicast but could also be used on
1:2cd1437:  * TCP/IP if a socket has been re-established.
1:2cd1437:  * 
1:8704338:  * @openwire:marshaller code="65"
1:0bbc0ac:  * 
1:2cd1437:  */
1:2cd1437: public class ReplayCommand extends BaseCommand {
1:2cd1437: 
1:2cd1437:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.REPLAY;
1:2cd1437: 
1:2cd1437:     private String producerId;
1:8704338:     private int firstAckNumber;
1:8704338:     private int lastAckNumber;
1:8704338:     private int firstNakNumber;
1:8704338:     private int lastNakNumber;
1:2cd1437: 
1:2cd1437:     public ReplayCommand() {
1:2cd1437:     }
1:2cd1437: 
1:2cd1437:     public byte getDataStructureType() {
1:2cd1437:         return DATA_STRUCTURE_TYPE;
1:2cd1437:     }
1:2cd1437: 
1:2cd1437:     public String getProducerId() {
1:2cd1437:         return producerId;
1:2cd1437:     }
1:2cd1437: 
1:2cd1437:     /**
1:2cd1437:      * Is used to uniquely identify the producer of the sequence
1:2cd1437:      * 
1:2cd1437:      * @openwire:property version=1 cache=false
1:2cd1437:      */
1:2cd1437:     public void setProducerId(String producerId) {
1:2cd1437:         this.producerId = producerId;
1:2cd1437:     }
1:2cd1437: 
1:8704338:     public int getFirstAckNumber() {
1:8704338:         return firstAckNumber;
1:8704338:     }
1:8704338: 
1:8704338:     /**
1:8704338:      * Is used to specify the first sequence number being acknowledged as delivered on the transport
1:8704338:      * so that it can be removed from cache
1:8704338:      * 
1:8704338:      * @openwire:property version=1
1:8704338:      */
1:8704338:     public void setFirstAckNumber(int firstSequenceNumber) {
1:8704338:         this.firstAckNumber = firstSequenceNumber;
1:8704338:     }
1:8704338: 
1:8704338:     public int getLastAckNumber() {
1:8704338:         return lastAckNumber;
1:8704338:     }
1:8704338: 
1:8704338:     /**
1:8704338:      * Is used to specify the last sequence number being acknowledged as delivered on the transport
1:8704338:      * so that it can be removed from cache
1:8704338:      * 
1:8704338:      * @openwire:property version=1
1:8704338:      */
1:8704338:     public void setLastAckNumber(int lastSequenceNumber) {
1:8704338:         this.lastAckNumber = lastSequenceNumber;
1:8704338:     }
1:8704338: 
1:8704338:     public Response visit(CommandVisitor visitor) throws Exception {
1:8704338:         return null;
1:2cd1437:     }
1:2cd1437: 
1:2cd1437:     /**
1:2cd1437:      * Is used to specify the first sequence number to be replayed
1:2cd1437:      * 
1:2cd1437:      * @openwire:property version=1
1:2cd1437:      */
1:8704338:     public int getFirstNakNumber() {
1:8704338:         return firstNakNumber;
1:2cd1437:     }
1:2cd1437: 
1:8704338:     public void setFirstNakNumber(int firstNakNumber) {
1:8704338:         this.firstNakNumber = firstNakNumber;
1:2cd1437:     }
1:2cd1437: 
1:2cd1437:     /**
1:2cd1437:      * Is used to specify the last sequence number to be replayed
1:2cd1437:      * 
1:2cd1437:      * @openwire:property version=1
1:2cd1437:      */
1:8704338:     public int getLastNakNumber() {
1:8704338:         return lastNakNumber;
1:2cd1437:     }
1:2cd1437: 
1:8704338:     public void setLastNakNumber(int lastNakNumber) {
1:8704338:         this.lastNakNumber = lastNakNumber;
1:2cd1437:     }
1:8704338: 
1:f3ef1a9:     public String toString() {
1:f3ef1a9:         return "ReplayCommand {commandId = " + getCommandId() + ", firstNakNumber = " + getFirstNakNumber() + ", lastNakNumber = " + getLastNakNumber() + "}";
1:f3ef1a9:     }
1:2cd1437:     
1:2cd1437: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
1:     public String toString() {
1:         return "ReplayCommand {commandId = " + getCommandId() + ", firstNakNumber = " + getFirstNakNumber() + ", lastNakNumber = " + getLastNakNumber() + "}";
1:     }
commit:8704338
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="65"
/////////////////////////////////////////////////////////////////////////
1:     private int firstAckNumber;
1:     private int lastAckNumber;
1:     private int firstNakNumber;
1:     private int lastNakNumber;
/////////////////////////////////////////////////////////////////////////
1:     public int getFirstAckNumber() {
1:         return firstAckNumber;
1:     }
1: 
1:     /**
1:      * Is used to specify the first sequence number being acknowledged as delivered on the transport
1:      * so that it can be removed from cache
1:      * 
1:      * @openwire:property version=1
1:      */
1:     public void setFirstAckNumber(int firstSequenceNumber) {
1:         this.firstAckNumber = firstSequenceNumber;
1:     }
1: 
1:     public int getLastAckNumber() {
1:         return lastAckNumber;
1:     }
1: 
1:     /**
1:      * Is used to specify the last sequence number being acknowledged as delivered on the transport
1:      * so that it can be removed from cache
1:      * 
1:      * @openwire:property version=1
1:      */
1:     public void setLastAckNumber(int lastSequenceNumber) {
1:         this.lastAckNumber = lastSequenceNumber;
1:     }
1: 
1:     public Response visit(CommandVisitor visitor) throws Exception {
1:         return null;
/////////////////////////////////////////////////////////////////////////
1:     public int getFirstNakNumber() {
1:         return firstNakNumber;
1:     public void setFirstNakNumber(int firstNakNumber) {
1:         this.firstNakNumber = firstNakNumber;
/////////////////////////////////////////////////////////////////////////
1:     public int getLastNakNumber() {
1:         return lastNakNumber;
1:     public void setLastNakNumber(int lastNakNumber) {
1:         this.lastNakNumber = lastNakNumber;
1:     
commit:2cd1437
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: /**
1:  * A general purpose replay command for some kind of producer where ranges of
1:  * messages are asked to be replayed. This command is typically used over a
1:  * non-reliable transport such as UDP or multicast but could also be used on
1:  * TCP/IP if a socket has been re-established.
1:  * 
0:  * @openwire:marshaller code="38"
0:  * @version $Revision$
1:  */
1: public class ReplayCommand extends BaseCommand {
1: 
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.REPLAY;
1: 
1:     private String producerId;
0:     private long firstSequenceNumber;
0:     private long lastSequenceNumber;
1: 
1:     public ReplayCommand() {
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     public String getProducerId() {
1:         return producerId;
1:     }
1: 
1:     /**
1:      * Is used to uniquely identify the producer of the sequence
1:      * 
1:      * @openwire:property version=1 cache=false
1:      */
1:     public void setProducerId(String producerId) {
1:         this.producerId = producerId;
1:     }
1: 
0:     public long getFirstSequenceNumber() {
0:         return firstSequenceNumber;
1:     }
1: 
1:     /**
1:      * Is used to specify the first sequence number to be replayed
1:      * 
1:      * @openwire:property version=1
1:      */
0:     public void setFirstSequenceNumber(long firstSequenceNumber) {
0:         this.firstSequenceNumber = firstSequenceNumber;
1:     }
1: 
0:     public long getLastSequenceNumber() {
0:         return lastSequenceNumber;
1:     }
1: 
1:     /**
1:      * Is used to specify the last sequence number to be replayed
1:      * 
1:      * @openwire:property version=1
1:      */
0:     public void setLastSequenceNumber(long lastSequenceNumber) {
0:         this.lastSequenceNumber = lastSequenceNumber;
1:     }
1: 
0:     public Response visit(CommandVisitor visitor) throws Exception {
0:         return null;
1:     }
1: 
1: }
============================================================================