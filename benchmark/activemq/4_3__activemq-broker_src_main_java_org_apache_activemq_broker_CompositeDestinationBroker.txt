1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
5:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: 
1:d29ca2a: /**
1:230a86c:  * This broker filter handles composite destinations. If a broker operation is
1:230a86c:  * invoked using a composite destination, this filter repeats the operation
1:230a86c:  * using each destination of the composite. HRC: I think this filter is
1:230a86c:  * dangerous to use to with the consumer operations. Multiple Subscription
1:230a86c:  * objects will be associated with a single JMS consumer each having a different
1:230a86c:  * idea of what the current pre-fetch dispatch size is. If this is used, then
1:230a86c:  * the client has to expect many more messages to be dispatched than the
1:230a86c:  * pre-fetch setting allows.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class CompositeDestinationBroker extends BrokerFilter {
1:230a86c: 
1:d29ca2a:     public CompositeDestinationBroker(Broker next) {
1:d29ca2a:         super(next);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * A producer may register to send to multiple destinations via a composite
1:230a86c:      * destination.
1:d29ca2a:      */
1:7f5213b:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:d29ca2a:         // The destination may be null.
1:d29ca2a:         ActiveMQDestination destination = info.getDestination();
1:230a86c:         if (destination != null && destination.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] destinations = destination.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < destinations.length; i++) {
1:d29ca2a:                 ProducerInfo copy = info.copy();
1:d29ca2a:                 copy.setDestination(destinations[i]);
1:d29ca2a:                 next.addProducer(context, copy);
1:d29ca2a:             }
1:d29ca2a:         } else {
1:d29ca2a:             next.addProducer(context, info);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:230a86c:      * A producer may de-register from sending to multiple destinations via a
1:230a86c:      * composite destination.
1:d29ca2a:      */
1:7f5213b:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:d29ca2a:         // The destination may be null.
1:d29ca2a:         ActiveMQDestination destination = info.getDestination();
1:230a86c:         if (destination != null && destination.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] destinations = destination.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < destinations.length; i++) {
1:d29ca2a:                 ProducerInfo copy = info.copy();
1:d29ca2a:                 copy.setDestination(destinations[i]);
1:d29ca2a:                 next.removeProducer(context, copy);
1:d29ca2a:             }
1:d29ca2a:         } else {
1:d29ca2a:             next.removeProducer(context, info);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * 
1:d29ca2a:      */
1:84eb9f8:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
1:d29ca2a:         ActiveMQDestination destination = message.getDestination();
1:230a86c:         if (destination.isComposite()) {
1:d29ca2a:             ActiveMQDestination[] destinations = destination.getCompositeDestinations();
1:d29ca2a:             for (int i = 0; i < destinations.length; i++) {
1:230a86c:                 if (i != 0) {
1:d29ca2a:                     message = message.copy();
1:6dffe4d:                     message.setMemoryUsage(null);
1:d29ca2a:                 }
1:d29ca2a:                 message.setOriginalDestination(destination);
1:d29ca2a:                 message.setDestination(destinations[i]);
1:84eb9f8:                 next.send(producerExchange, message);
1:d29ca2a:             }
1:d29ca2a:         } else {
1:84eb9f8:             next.send(producerExchange, message);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * This broker filter handles composite destinations. If a broker operation is
1:  * invoked using a composite destination, this filter repeats the operation
1:  * using each destination of the composite. HRC: I think this filter is
1:  * dangerous to use to with the consumer operations. Multiple Subscription
1:  * objects will be associated with a single JMS consumer each having a different
1:  * idea of what the current pre-fetch dispatch size is. If this is used, then
1:  * the client has to expect many more messages to be dispatched than the
1:  * pre-fetch setting allows.
1: 
1:      * A producer may register to send to multiple destinations via a composite
1:      * destination.
1:         if (destination != null && destination.isComposite()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:      * A producer may de-register from sending to multiple destinations via a
1:      * composite destination.
1:         if (destination != null && destination.isComposite()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (destination.isComposite()) {
1:                 if (i != 0) {
/////////////////////////////////////////////////////////////////////////
1: 
commit:a0e92d7
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void send(ConnectionContext context, Message message) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: 
1: /**
0:  * This broker filter handles composite destinations.
1:  * 
0:  * If a broker operation is invoked using a composite destination, this filter
0:  * repeats the operation using each destination of the composite.
1:  * 
0:  * HRC: I think this filter is dangerous to use to with the consumer operations.  Multiple
0:  * Subscription objects will be associated with a single JMS consumer each having a 
0:  * different idea of what the current pre-fetch dispatch size is.  
1:  *
0:  * If this is used, then the client has to expect many more messages to be dispatched 
0:  * than the pre-fetch setting allows.
1:  * 
0:  * @version $Revision: 1.8 $
1:  */
1: public class CompositeDestinationBroker extends BrokerFilter {
1:     
1:     public CompositeDestinationBroker(Broker next) {
1:         super(next);
1:     }
1: 
1:     /**
0:      * A producer may register to send to multiple destinations via a composite destination.
1:      */
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Throwable {
1:         // The destination may be null.
1:         ActiveMQDestination destination = info.getDestination();
0:         if( destination!=null && destination.isComposite() ) {
1:             ActiveMQDestination[] destinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < destinations.length; i++) {
1:                 ProducerInfo copy = info.copy();
1:                 copy.setDestination(destinations[i]);
1:                 next.addProducer(context, copy);
1:             }
1:         } else {
1:             next.addProducer(context, info);
1:         }
1:     }
1:     
1:     /**
0:      * A producer may de-register from sending to multiple destinations via a composite destination.
1:      */
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Throwable {
1:         // The destination may be null.
1:         ActiveMQDestination destination = info.getDestination();
0:         if( destination!=null && destination.isComposite() ) {
1:             ActiveMQDestination[] destinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < destinations.length; i++) {
1:                 ProducerInfo copy = info.copy();
1:                 copy.setDestination(destinations[i]);
1:                 next.removeProducer(context, copy);
1:             }
1:         } else {
1:             next.removeProducer(context, info);
1:         }
1:     }
1:     
1:     /**
1:      * 
1:      */
0:     public void send(ConnectionContext context, Message message) throws Throwable {
1:         ActiveMQDestination destination = message.getDestination();
0:         if( destination.isComposite() ) {
1:             ActiveMQDestination[] destinations = destination.getCompositeDestinations();
1:             for (int i = 0; i < destinations.length; i++) {
0:                 if( i!=0 ) {
1:                     message = message.copy();
1:                 }
1:                 message.setOriginalDestination(destination);
1:                 message.setDestination(destinations[i]);
0:                 message.evictMarshlledForm();
0:                 next.send(context, message);
1:             }
1:         } else {
0:             next.send(context, message);
1:         }
1:     }
1:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6dffe4d
/////////////////////////////////////////////////////////////////////////
1:                     message.setMemoryUsage(null);
author:Robert Davies
-------------------------------------------------------------------------------
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:                 next.send(producerExchange, message);
1:             next.send(producerExchange, message);
============================================================================