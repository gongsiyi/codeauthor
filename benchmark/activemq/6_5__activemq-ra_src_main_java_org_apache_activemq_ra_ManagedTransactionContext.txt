1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
4:40a7d3b: 
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.transaction.xa.XAException;
1:40a7d3b: import javax.transaction.xa.XAResource;
1:40a7d3b: import javax.transaction.xa.Xid;
1:40a7d3b: 
1:fd4bb60: import org.apache.activemq.TransactionContext;
1:fd4bb60: import org.apache.activemq.command.TransactionId;
1:fd4bb60: import org.apache.activemq.transaction.Synchronization;
1:40a7d3b: 
2:40a7d3b: /**
1:540dd5c:  * Allows us to switch between using a shared transaction context, or using a
1:540dd5c:  * local transaction context.
1:b0c2a40:  * 
1:92a698f:  * 
1:40a7d3b:  */
1:40a7d3b: public class ManagedTransactionContext extends TransactionContext {
1:40a7d3b: 
1:40a7d3b:     private final TransactionContext sharedContext;
1:540dd5c:     private boolean useSharedTxContext;
1:40a7d3b: 
1:40a7d3b:     public ManagedTransactionContext(TransactionContext sharedContext) {
1:40a7d3b:         super(sharedContext.getConnection());
1:40a7d3b:         this.sharedContext = sharedContext;
1:40a7d3b:         setLocalTransactionEventListener(sharedContext.getLocalTransactionEventListener());
2:40a7d3b:     }
1:540dd5c: 
1:40a7d3b:     public void setUseSharedTxContext(boolean enable) throws JMSException {
1:540dd5c:         if (isInLocalTransaction() || isInXATransaction()) {
1:0fc20ee:             throw new JMSException("The resource is already being used in transaction context.");
1:540dd5c:         }
1:40a7d3b:         useSharedTxContext = enable;
1:40a7d3b:     }
1:540dd5c: 
1:540dd5c:     public void begin() throws JMSException {
1:540dd5c:         if (useSharedTxContext) {
1:540dd5c:             sharedContext.begin();
1:540dd5c:         } else {
1:540dd5c:             super.begin();
1:540dd5c:         }
1:540dd5c:     }
1:540dd5c: 
1:40a7d3b:     public void commit() throws JMSException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             sharedContext.commit();
1:540dd5c:         } else {
1:40a7d3b:             super.commit();
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void commit(Xid xid, boolean onePhase) throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             sharedContext.commit(xid, onePhase);
1:540dd5c:         } else {
1:40a7d3b:             super.commit(xid, onePhase);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void end(Xid xid, int flags) throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             sharedContext.end(xid, flags);
1:540dd5c:         } else {
1:40a7d3b:             super.end(xid, flags);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void forget(Xid xid) throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             sharedContext.forget(xid);
1:540dd5c:         } else {
1:40a7d3b:             super.forget(xid);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public TransactionId getTransactionId() {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             return sharedContext.getTransactionId();
1:540dd5c:         } else {
1:40a7d3b:             return super.getTransactionId();
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public int getTransactionTimeout() throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             return sharedContext.getTransactionTimeout();
1:540dd5c:         } else {
1:40a7d3b:             return super.getTransactionTimeout();
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean isInLocalTransaction() {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             return sharedContext.isInLocalTransaction();
1:540dd5c:         } else {
1:40a7d3b:             return super.isInLocalTransaction();
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean isInXATransaction() {
1:540dd5c:         if (useSharedTxContext) {
1:8fdf345:             // context considers endesd XA transactions as active, so just check for presence
1:8fdf345:             // of tx when it is shared
1:8fdf345:             return sharedContext.isInTransaction();
1:540dd5c:         } else {
1:40a7d3b:             return super.isInXATransaction();
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:ca80106:     @Override
1:ca80106:     public boolean isInTransaction() {
1:ca80106:         return isInXATransaction() || isInLocalTransaction();
1:ca80106:     }
1:ca80106:  
1:40a7d3b:     public boolean isSameRM(XAResource xaResource) throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             return sharedContext.isSameRM(xaResource);
1:540dd5c:         } else {
1:40a7d3b:             return super.isSameRM(xaResource);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public int prepare(Xid xid) throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             return sharedContext.prepare(xid);
1:540dd5c:         } else {
1:40a7d3b:             return super.prepare(xid);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public Xid[] recover(int flag) throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             return sharedContext.recover(flag);
1:540dd5c:         } else {
1:40a7d3b:             return super.recover(flag);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void rollback() throws JMSException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             sharedContext.rollback();
1:540dd5c:         } else {
1:40a7d3b:             super.rollback();
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void rollback(Xid xid) throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             sharedContext.rollback(xid);
1:540dd5c:         } else {
1:40a7d3b:             super.rollback(xid);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean setTransactionTimeout(int seconds) throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             return sharedContext.setTransactionTimeout(seconds);
1:540dd5c:         } else {
1:40a7d3b:             return super.setTransactionTimeout(seconds);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void start(Xid xid, int flags) throws XAException {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             sharedContext.start(xid, flags);
1:540dd5c:         } else {
1:40a7d3b:             super.start(xid, flags);
1:540dd5c:         }
1:40a7d3b:     }
1:540dd5c: 
1:40a7d3b:     public void addSynchronization(Synchronization s) {
1:540dd5c:         if (useSharedTxContext) {
1:40a7d3b:             sharedContext.addSynchronization(s);
1:540dd5c:         } else {
1:40a7d3b:             super.addSynchronization(s);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0fc20ee
/////////////////////////////////////////////////////////////////////////
1:             throw new JMSException("The resource is already being used in transaction context.");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  * Allows us to switch between using a shared transaction context, or using a
1:  * local transaction context.
1:     private boolean useSharedTxContext;
1: 
1:         if (isInLocalTransaction() || isInXATransaction()) {
1:         }
1: 
1:     public void begin() throws JMSException {
1:         if (useSharedTxContext) {
1:             sharedContext.begin();
1:         } else {
1:             super.begin();
1:         }
1:     }
1: 
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1:         if (useSharedTxContext) {
1:         } else {
1:         }
1: 
1:         if (useSharedTxContext) {
1:         } else {
1:         }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
1: import org.apache.activemq.TransactionContext;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.transaction.Synchronization;
author:Gary Tully
-------------------------------------------------------------------------------
commit:8fdf345
/////////////////////////////////////////////////////////////////////////
1:             // context considers endesd XA transactions as active, so just check for presence
1:             // of tx when it is shared
1:             return sharedContext.isInTransaction();
commit:ca80106
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean isInTransaction() {
1:         return isInXATransaction() || isInLocalTransaction();
1:     }
1:  
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: import javax.jms.JMSException;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
0: import org.activemq.TransactionContext;
0: import org.activemq.command.TransactionId;
0: import org.activemq.transaction.Synchronization;
1: 
1: /**
0:  * Allows us to switch between using a shared transaction context,
0:  * or using a local transaction context.
0:  * 
0:  * @version $Revision$
1:  */
1: public class ManagedTransactionContext extends TransactionContext {
1: 
1:     private final TransactionContext sharedContext;
0:     boolean useSharedTxContext=false;
1: 
1:     public ManagedTransactionContext(TransactionContext sharedContext) {
1:         super(sharedContext.getConnection());
1:         this.sharedContext = sharedContext;
1:         setLocalTransactionEventListener(sharedContext.getLocalTransactionEventListener());
1:     }
1:     
1:     public void setUseSharedTxContext(boolean enable) throws JMSException {
0:         if( isInLocalTransaction() || isInXATransaction() )
0:             throw new JMSException("The resource is allready being used in transaction context.");
1:         useSharedTxContext = enable;
1:     }    
1:     
0:     public void begin() throws JMSException {
0:         if( useSharedTxContext )
0:             sharedContext.begin();
0:         else
0:             super.begin();
1:     }
1:     public void commit() throws JMSException {
0:         if( useSharedTxContext )
1:             sharedContext.commit();
0:         else
1:             super.commit();
1:     }
1: 
1:     public void commit(Xid xid, boolean onePhase) throws XAException {
0:         if( useSharedTxContext )
1:             sharedContext.commit(xid, onePhase);
0:         else
1:             super.commit(xid, onePhase);
1:     }
1: 
1:     public void end(Xid xid, int flags) throws XAException {
0:         if( useSharedTxContext )
1:             sharedContext.end(xid, flags);
0:         else
1:             super.end(xid, flags);
1:     }
1: 
1:     public void forget(Xid xid) throws XAException {
0:         if( useSharedTxContext )
1:             sharedContext.forget(xid);
0:         else
1:             super.forget(xid);
1:     }
1: 
1:     public TransactionId getTransactionId() {
0:         if( useSharedTxContext )
1:             return sharedContext.getTransactionId();
0:         else
1:             return super.getTransactionId();
1:     }
1: 
1:     public int getTransactionTimeout() throws XAException {
0:         if( useSharedTxContext )
1:             return sharedContext.getTransactionTimeout();
0:         else
1:             return super.getTransactionTimeout();
1:     }
1: 
1:     public boolean isInLocalTransaction() {
0:         if( useSharedTxContext )
1:             return sharedContext.isInLocalTransaction();
0:         else
1:             return super.isInLocalTransaction();
1:     }
1: 
1:     public boolean isInXATransaction() {
0:         if( useSharedTxContext )
0:             return sharedContext.isInXATransaction();
0:         else
1:             return super.isInXATransaction();
1:     }
1: 
1:     public boolean isSameRM(XAResource xaResource) throws XAException {
0:         if( useSharedTxContext )
1:             return sharedContext.isSameRM(xaResource);
0:         else
1:             return super.isSameRM(xaResource);
1:     }
1: 
1:     public int prepare(Xid xid) throws XAException {
0:         if( useSharedTxContext )
1:             return sharedContext.prepare(xid);
0:         else
1:             return super.prepare(xid);
1:     }
1: 
1:     public Xid[] recover(int flag) throws XAException {
0:         if( useSharedTxContext )
1:             return sharedContext.recover(flag);
0:         else
1:             return super.recover(flag);
1:     }
1: 
1:     public void rollback() throws JMSException {
0:         if( useSharedTxContext )
1:             sharedContext.rollback();
0:         else
1:             super.rollback();
1:     }
1: 
1:     public void rollback(Xid xid) throws XAException {
0:         if( useSharedTxContext )
1:             sharedContext.rollback(xid);
0:         else
1:             super.rollback(xid);
1:     }
1: 
1:     public boolean setTransactionTimeout(int seconds) throws XAException {
0:         if( useSharedTxContext )
1:             return sharedContext.setTransactionTimeout(seconds);
0:         else
1:             return super.setTransactionTimeout(seconds);
1:     }
1: 
1:     public void start(Xid xid, int flags) throws XAException {
0:         if( useSharedTxContext )
1:             sharedContext.start(xid, flags);
0:         else
1:             super.start(xid, flags);
1:     }
1:     
1:     public void addSynchronization(Synchronization s) {
0:         if( useSharedTxContext )
1:             sharedContext.addSynchronization(s);
0:         else
1:             super.addSynchronization(s);
1:     }
1: }
============================================================================