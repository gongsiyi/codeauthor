1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:4843dd4:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:5be5a62:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.store.jdbc.adapter;
13:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.InputStream;
1:d29ca2a: import java.sql.Blob;
1:d29ca2a: import java.sql.Connection;
1:d29ca2a: import java.sql.PreparedStatement;
1:d29ca2a: import java.sql.ResultSet;
1:d29ca2a: import java.sql.SQLException;
1:d29ca2a: 
1:adc45e8: import org.apache.activemq.command.ActiveMQDestination;
1:adc45e8: import org.apache.activemq.command.MessageId;
1:64f3492: import org.apache.activemq.command.XATransactionId;
1:64f3492: import org.apache.activemq.store.jdbc.Statements;
1:d29ca2a: import org.apache.activemq.store.jdbc.TransactionContext;
1:88acb0e: import org.apache.activemq.util.ByteArrayOutputStream;
1:d29ca2a: 
1:d29ca2a: /**
1:f812e34:  * This JDBCAdapter inserts and extracts BLOB data using the getBlob()/setBlob()
1:f812e34:  * operations. This is a little more involved since to insert a blob you have
1:f812e34:  * to:
1:12b26b6:  *
1:f812e34:  * 1: insert empty blob. 2: select the blob 3: finally update the blob with data
1:f812e34:  * value.
1:12b26b6:  *
1:d29ca2a:  * The databases/JDBC drivers that use this adapter are:
1:d29ca2a:  * <ul>
1:f812e34:  * <li></li>
1:d29ca2a:  * </ul>
1:12b26b6:  *
1:4843dd4:  * @org.apache.xbean.XBean element="blobJDBCAdapter"
1:12b26b6:  *
1:12b26b6:  *
1:d29ca2a:  */
1:d29ca2a: public class BlobJDBCAdapter extends DefaultJDBCAdapter {
1:f812e34: 
1:adc45e8:     @Override
1:64f3492:     public void setStatements(Statements statements) {
1:d29ca2a: 
1:64f3492:         String addMessageStatement = "INSERT INTO "
1:64f3492:             + statements.getFullMessageTableName()
1:5ed1ce5:             + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG, XID) VALUES (?, ?, ?, ?, ?, ?, empty_blob(), empty_blob())";
1:64f3492:         statements.setAddMessageStatement(addMessageStatement);
1:d29ca2a: 
1:64f3492:         String findMessageByIdStatement = "SELECT MSG FROM " +
1:64f3492:         	statements.getFullMessageTableName() + " WHERE ID=? FOR UPDATE";
1:64f3492:         statements.setFindMessageByIdStatement(findMessageByIdStatement);
1:d29ca2a: 
1:64f3492:         super.setStatements(statements);
6:d29ca2a:     }
1:f812e34: 
1:64f3492:     @Override
1:adc45e8:     public void doAddMessage(TransactionContext c, long sequence, MessageId messageID, ActiveMQDestination destination, byte[] data,
1:64f3492:                              long expiration, byte priority, XATransactionId xid) throws SQLException, IOException {
1:f812e34:         PreparedStatement s = null;
1:f812e34:         try {
1:d29ca2a:             // Add the Blob record.
1:adc45e8:             s = c.getConnection().prepareStatement(statements.getAddMessageStatement());
1:adc45e8:             s.setLong(1, sequence);
1:adc45e8:             s.setString(2, messageID.getProducerId().toString());
1:adc45e8:             s.setLong(3, messageID.getProducerSequenceId());
1:adc45e8:             s.setString(4, destination.getQualifiedName());
1:adc45e8:             s.setLong(5, expiration);
1:adc45e8:             s.setLong(6, priority);
1:f812e34: 
1:ecf89a6:             if (s.executeUpdate() != 1) {
1:adc45e8:                 throw new IOException("Failed to add broker message: " + messageID + " in container.");
1:ecf89a6:             }
1:f812e34:             s.close();
1:f812e34: 
1:d29ca2a:             // Select the blob record so that we can update it.
1:64f3492:             updateBlob(c.getConnection(), statements.getFindMessageByIdStatement(), sequence, data);
1:64f3492:             if (xid != null) {
1:64f3492:                 byte[] xidVal = xid.getEncodedXidBytes();
1:64f3492:                 xidVal[0] = '+';
1:64f3492:                 updateBlob(c.getConnection(), statements.getFindXidByIdStatement(), sequence, xidVal);
1:86cbdfd:             }
1:d29ca2a: 
1:64f3492:         } finally {
1:64f3492:             close(s);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:64f3492:     private void updateBlob(Connection connection, String findMessageByIdStatement, long sequence, byte[] data) throws SQLException, IOException {
1:d29ca2a:         PreparedStatement s = null;
1:f812e34:         ResultSet rs = null;
1:f812e34:         try {
1:64f3492:             s = connection.prepareStatement(statements.getFindMessageByIdStatement(),
1:64f3492:                 ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
1:adc45e8:             s.setLong(1, sequence);
1:f812e34:             rs = s.executeQuery();
1:ecf89a6:             if (!rs.next()) {
1:64f3492:                 throw new IOException("Failed select blob for message: " + sequence + " in container.");
1:ecf89a6:             }
1:f812e34: 
1:d29ca2a:             // Update the blob
1:f812e34:             Blob blob = rs.getBlob(1);
1:ad6b5e2:             blob.truncate(0);
1:ad6b5e2:             blob.setBytes(1, data);
1:ad6b5e2:             rs.updateBlob(1, blob);
1:ad6b5e2:             rs.updateRow();             // Update the row with the updated blob
1:d29ca2a:         } finally {
1:adc45e8:             close(rs);
1:adc45e8:             close(s);
1:f812e34:         }
1:d29ca2a:     }
1:f812e34: 
1:adc45e8:     @Override
1:adc45e8:     public byte[] doGetMessage(TransactionContext c, MessageId id) throws SQLException, IOException {
1:64f3492:         PreparedStatement s = null;
1:d29ca2a:         ResultSet rs = null;
1:f812e34:         try {
1:d29ca2a: 
1:f812e34:             s = c.getConnection().prepareStatement(statements.getFindMessageStatement());
1:adc45e8:             s.setString(1, id.getProducerId().toString());
1:adc45e8:             s.setLong(2, id.getProducerSequenceId());
2:d29ca2a:             rs = s.executeQuery();
1:f812e34: 
1:f812e34:             if (!rs.next()) {
1:f812e34:                 return null;
1:f812e34:             }
2:d29ca2a:             Blob blob = rs.getBlob(1);
1:f812e34: 
1:12b26b6:             try(InputStream is = blob.getBinaryStream();
1:12b26b6:                 ByteArrayOutputStream os = new ByteArrayOutputStream((int)blob.length())) {
1:12b26b6:                 int ch;
1:12b26b6:                 while ((ch = is.read()) >= 0) {
1:12b26b6:                     os.write(ch);
1:12b26b6:                 }
1:12b26b6:                 return os.toByteArray();
1:f812e34:             }
1:d29ca2a:         } finally {
1:adc45e8:             close(rs);
1:adc45e8:             close(s);
1:f812e34:         }
1:f812e34:     }
1:f812e34: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:2a815c2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:             try(InputStream is = blob.getBinaryStream();
1:                 ByteArrayOutputStream os = new ByteArrayOutputStream((int)blob.length())) {
1:                 int ch;
1:                 while ((ch = is.read()) >= 0) {
1:                     os.write(ch);
1:                 }
1:                 return os.toByteArray();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:             if (s.executeUpdate() != 1) {
1:             }
1:             if (!rs.next()) {
1:             }
/////////////////////////////////////////////////////////////////////////
0:             } catch (Throwable ignore) {
0:             } catch (Throwable ignore) {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * This JDBCAdapter inserts and extracts BLOB data using the getBlob()/setBlob()
1:  * operations. This is a little more involved since to insert a blob you have
1:  * to:
1:  * 1: insert empty blob. 2: select the blob 3: finally update the blob with data
1:  * value.
1:  * <li></li>
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void doAddMessage(Connection c, long seq, String messageID, String destinationName, byte[] data)
0:         throws SQLException, JMSException {
1: 
1: 
0:                 throw new JMSException("Failed to broker message: " + messageID + " in container.");
/////////////////////////////////////////////////////////////////////////
0:                 throw new JMSException("Failed to broker message: " + messageID + " in container.");
/////////////////////////////////////////////////////////////////////////
0:             throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
/////////////////////////////////////////////////////////////////////////
1: 
1:         PreparedStatement s = null;
1:         ResultSet rs = null;
1:         try {
1: 
1:             s = c.getConnection().prepareStatement(statements.getFindMessageStatement());
0:             s.setLong(1, seq);
1:             rs = s.executeQuery();
1: 
1:             if (!rs.next()) {
1:                 return null;
1:             }
1:             Blob blob = rs.getBlob(1);
0:             InputStream is = blob.getBinaryStream();
1: 
0:             ByteArrayOutputStream os = new ByteArrayOutputStream((int)blob.length());
0:             int ch;
0:             while ((ch = is.read()) >= 0) {
0:                 os.write(ch);
1:             }
0:             is.close();
0:             os.close();
1: 
0:             return os.toByteArray();
1: 
0:         } catch (IOException e) {
0:             throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
1:             try {
0:                 rs.close();
0:             } catch (Throwable ignore) {
1:             }
1:             try {
1:                 s.close();
0:             } catch (Throwable ignore) {
1:             }
1:         }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteArrayOutputStream;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.util.ByteArrayOutputStream;
commit:4843dd4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="blobJDBCAdapter"
1:  * 
/////////////////////////////////////////////////////////////////////////
0:             s = c.prepareStatement(statements.getAddMessageStatement());
/////////////////////////////////////////////////////////////////////////
0:             s = c.prepareStatement(statements.getFindMessageStatement());
/////////////////////////////////////////////////////////////////////////
0:             s = c.prepareStatement(statements.getUpdateMessageStatement());
/////////////////////////////////////////////////////////////////////////
0: 	        s = c.getConnection().prepareStatement(statements.getFindMessageStatement());
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0: * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0: *
0: * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0: *
0: * Licensed under the Apache License, Version 2.0 (the "License");
0: * you may not use this file except in compliance with the License.
0: * You may obtain a copy of the License at
0: *
0: * http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing, software
0: * distributed under the License is distributed on an "AS IS" BASIS,
0: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: * See the License for the specific language governing permissions and
0: * limitations under the License.
0: *
0: **/
1: package org.apache.activemq.store.jdbc.adapter;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.io.OutputStream;
1: import java.sql.Blob;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
0: import javax.jms.JMSException;
1: 
0: import org.activeio.ByteArrayOutputStream;
0: import org.apache.activemq.store.jdbc.StatementProvider;
1: import org.apache.activemq.store.jdbc.TransactionContext;
1: 
1: 
1: /**
0:  * This JDBCAdapter inserts and extracts BLOB data using the 
0:  * getBlob()/setBlob() operations.  This is a little more involved
0:  * since to insert a blob you have to:
0:  * 
0:  *  1: insert empty blob.
0:  *  2: select the blob 
0:  *  3: finally update the blob with data value. 
0:  * 
1:  * The databases/JDBC drivers that use this adapter are:
1:  * <ul>
0:  * <li></li> 
1:  * </ul>
0:  * 
0:  * @version $Revision: 1.2 $
1:  */
1: public class BlobJDBCAdapter extends DefaultJDBCAdapter {
1: 
0:     public BlobJDBCAdapter() {
0:         super();
1:     }
1: 
0:     public BlobJDBCAdapter(StatementProvider provider) {
0:         super(provider);
1:     }
1:     
0:     public void doAddMessage(Connection c, long seq, String messageID, String destinationName, byte[] data) throws SQLException,
0:             JMSException {
1:         PreparedStatement s = null;
1:         ResultSet rs = null;
0:         try {
1:             
1:             // Add the Blob record.
0:             s = c.prepareStatement(statementProvider.getAddMessageStatment());
0:             s.setLong(1, seq);
0:             s.setString(2, destinationName);
0:             s.setString(3, messageID);
0:             s.setString(4, " ");
1:             
0:             if (s.executeUpdate() != 1)
0:                 throw new JMSException("Failed to broker message: " + messageID
0:                         + " in container.");
0:             s.close();
1: 
1:             // Select the blob record so that we can update it.
0:             s = c.prepareStatement(statementProvider.getFindMessageStatment());
0:             s.setLong(1, seq);
1:             rs = s.executeQuery();
0:             if (!rs.next())
0:                 throw new JMSException("Failed to broker message: " + messageID
0:                         + " in container.");
1: 
1:             // Update the blob
1:             Blob blob = rs.getBlob(1);
0:             OutputStream stream = blob.setBinaryStream(data.length);
0:             stream.write(data);
0:             stream.close();
0:             s.close();
1: 
0:             // Update the row with the updated blob
0:             s = c.prepareStatement(statementProvider.getUpdateMessageStatment());
0:             s.setBlob(1, blob);
0:             s.setLong(2, seq);
1: 
0:         } catch (IOException e) {
0:             throw (SQLException) new SQLException("BLOB could not be updated: "
0:                     + e).initCause(e);
1:         } finally {
0:             try {
0:                 rs.close();
0:             } catch (Throwable e) {
1:             }
0:             try {
0:                 s.close();
0:             } catch (Throwable e) {
1:             }
1:         }
1:     }
1:     
0:     public byte[] doGetMessage(TransactionContext c, long seq) throws SQLException {
0: 	    PreparedStatement s=null; ResultSet rs=null;
0: 	    try {
1: 	        
0: 	        s = c.getConnection().prepareStatement(statementProvider.getFindMessageStatment());
0: 	        s.setLong(1, seq); 
1: 	        rs = s.executeQuery();
1: 	        
0: 	        if( !rs.next() )
0: 	            return null;
1: 	        Blob blob = rs.getBlob(1);
0: 	        InputStream is = blob.getBinaryStream();
1: 	        
0: 	        ByteArrayOutputStream os = new ByteArrayOutputStream((int)blob.length());	        
0: 	        int ch;
0: 	        while( (ch=is.read())>= 0 ) {
0: 	            os.write(ch);
1: 	        }
0: 	        is.close();
0: 	        os.close();
1: 	        
0: 	        return os.toByteArray();
1: 	        
0: 	    } catch (IOException e) {
0:             throw (SQLException) new SQLException("BLOB could not be updated: "
0:                     + e).initCause(e);
1:         } finally {
0: 	        try { rs.close(); } catch (Throwable e) {}
0: 	        try { s.close(); } catch (Throwable e) {}
1: 	    }
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:5ed1ce5
/////////////////////////////////////////////////////////////////////////
1:             + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG, XID) VALUES (?, ?, ?, ?, ?, ?, empty_blob(), empty_blob())";
commit:64f3492
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.XATransactionId;
1: import org.apache.activemq.store.jdbc.Statements;
/////////////////////////////////////////////////////////////////////////
1:     public void setStatements(Statements statements) {
0: 
1:         String addMessageStatement = "INSERT INTO "
1:             + statements.getFullMessageTableName()
0:             + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG) VALUES (?, ?, ?, ?, ?, ?, empty_blob(), empty_blob())";
1:         statements.setAddMessageStatement(addMessageStatement);
0: 
1:         String findMessageByIdStatement = "SELECT MSG FROM " +
1:         	statements.getFullMessageTableName() + " WHERE ID=? FOR UPDATE";
1:         statements.setFindMessageByIdStatement(findMessageByIdStatement);
0: 
1:         super.setStatements(statements);
0:     }
0: 
1:     @Override
1:                              long expiration, byte priority, XATransactionId xid) throws SQLException, IOException {
/////////////////////////////////////////////////////////////////////////
1:             updateBlob(c.getConnection(), statements.getFindMessageByIdStatement(), sequence, data);
1:             if (xid != null) {
1:                 byte[] xidVal = xid.getEncodedXidBytes();
1:                 xidVal[0] = '+';
1:                 updateBlob(c.getConnection(), statements.getFindXidByIdStatement(), sequence, xidVal);
0:             }
0: 
1:         } finally {
0:             cleanupExclusiveLock.readLock().unlock();
1:             close(s);
0:         }
0:     }
0: 
1:     private void updateBlob(Connection connection, String findMessageByIdStatement, long sequence, byte[] data) throws SQLException, IOException {
1:         PreparedStatement s = null;
0:         ResultSet rs = null;
0:         try {
1:             s = connection.prepareStatement(statements.getFindMessageByIdStatement(),
1:                 ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
1:                 throw new IOException("Failed select blob for message: " + sequence + " in container.");
/////////////////////////////////////////////////////////////////////////
commit:ad6b5e2
/////////////////////////////////////////////////////////////////////////
0: import javax.sql.rowset.serial.SerialBlob;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             s = c.getConnection().prepareStatement(statements.getFindMessageByIdStatement(),
0:             		ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
/////////////////////////////////////////////////////////////////////////
1:             blob.truncate(0);
1:             blob.setBytes(1, data);
1:             rs.updateBlob(1, blob);
1:             rs.updateRow();             // Update the row with the updated blob
commit:7539c7e
/////////////////////////////////////////////////////////////////////////
0:             s.setString(7, " ");
commit:adc45e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.MessageId;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void doAddMessage(TransactionContext c, long sequence, MessageId messageID, ActiveMQDestination destination, byte[] data,
0:             long expiration, byte priority) throws SQLException, IOException {
0:         cleanupExclusiveLock.readLock().lock();
1:             s = c.getConnection().prepareStatement(statements.getAddMessageStatement());
1:             s.setLong(1, sequence);
1:             s.setString(2, messageID.getProducerId().toString());
1:             s.setLong(3, messageID.getProducerSequenceId());
1:             s.setString(4, destination.getQualifiedName());
1:             s.setLong(5, expiration);
1:             s.setLong(6, priority);
1:                 throw new IOException("Failed to add broker message: " + messageID + " in container.");
0:             s = c.getConnection().prepareStatement(statements.getFindMessageByIdStatement());
1:             s.setLong(1, sequence);
0:                 throw new IOException("Failed select blob for message: " + messageID + " in container.");
/////////////////////////////////////////////////////////////////////////
0:             s = c.getConnection().prepareStatement(statements.getUpdateMessageStatement());
0:             s.setLong(2, sequence);
0:             cleanupExclusiveLock.readLock().unlock();
1:             close(rs);
1:             close(s);
1:     @Override
1:     public byte[] doGetMessage(TransactionContext c, MessageId id) throws SQLException, IOException {
0:         cleanupExclusiveLock.readLock().lock();
1:             s.setString(1, id.getProducerId().toString());
1:             s.setLong(2, id.getProducerSequenceId());
/////////////////////////////////////////////////////////////////////////
0:             cleanupExclusiveLock.readLock().unlock();
1:             close(rs);
1:             close(s);
============================================================================