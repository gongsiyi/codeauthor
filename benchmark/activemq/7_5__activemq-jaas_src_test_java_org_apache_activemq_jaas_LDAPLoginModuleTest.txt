2:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
2:a107823:  */
1:a107823: package org.apache.activemq.jaas;
1:6999a02: 
1:26cf6a7: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1:26cf6a7: import org.apache.directory.server.core.integ.FrameworkRunner;
1:26cf6a7: import org.apache.directory.server.integ.ServerIntegrationUtils;
1:26cf6a7: import org.apache.directory.server.ldap.LdapServer;
1:26cf6a7: import org.apache.directory.server.annotations.CreateLdapServer;
1:26cf6a7: import org.apache.directory.server.annotations.CreateTransport;
1:26cf6a7: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1:937d5dd: import org.junit.After;
1:937d5dd: import org.junit.Before;
1:26cf6a7: import org.junit.Test;
1:26cf6a7: import org.junit.runner.RunWith;
1:6999a02: 
1:a107823: import javax.naming.Context;
1:a107823: import javax.naming.NameClassPair;
1:a107823: import javax.naming.NamingEnumeration;
1:a107823: import javax.naming.directory.DirContext;
1:a107823: import javax.naming.directory.InitialDirContext;
1:26cf6a7: import javax.security.auth.callback.*;
1:a107823: import javax.security.auth.login.LoginContext;
1:a107823: import javax.security.auth.login.LoginException;
1:38a6bed: 
1:26cf6a7: import java.io.IOException;
1:26cf6a7: import java.net.URL;
1:26cf6a7: import java.util.HashSet;
1:26cf6a7: import java.util.Hashtable;
1:6999a02: 
1:0b5231a: import static org.junit.Assert.assertEquals;
1:26cf6a7: import static org.junit.Assert.assertTrue;
1:0b5231a: import static org.junit.Assert.fail;
1:6999a02: 
1:26cf6a7: @RunWith ( FrameworkRunner.class )
1:71d4e2a: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP", port=1024)})
1:26cf6a7: @ApplyLdifFiles(
1:26cf6a7:    "test.ldif"
1:6999a02: )
1:26cf6a7: public class LDAPLoginModuleTest extends AbstractLdapTestUnit {
1:38a6bed: 
1:26cf6a7:     private static final String BASE = "o=ActiveMQ,ou=system";
1:aa9ff75:     public static LdapServer ldapServer;
1:26cf6a7: 
1:6999a02:     private static final String FILTER = "(objectclass=*)";
1:38a6bed: 
1:a107823:     private static final String PRINCIPAL = "uid=admin,ou=system";
1:a107823:     private static final String CREDENTIALS = "secret";
1:937d5dd: 
1:937d5dd:     private final String loginConfigSysPropName = "java.security.auth.login.config";
1:937d5dd:     private String oldLoginConfig;
1:937d5dd:     @Before
1:937d5dd:     public void setLoginConfigSysProperty() {
1:937d5dd:         oldLoginConfig = System.getProperty(loginConfigSysPropName, null);
1:937d5dd:         System.setProperty(loginConfigSysPropName, "src/test/resources/login.config");
1:937d5dd:     }
1:937d5dd: 
1:937d5dd:     @After
1:937d5dd:     public void resetLoginConfigSysProperty() {
1:937d5dd:         if (oldLoginConfig != null) {
1:937d5dd:             System.setProperty(loginConfigSysPropName, oldLoginConfig);
1:937d5dd:         }
1:937d5dd:     }
1:937d5dd: 
1:540dd5c:     @SuppressWarnings("unchecked")
1:6999a02:     @Test
1:a107823:     public void testRunning() throws Exception {
1:6999a02: 
1:a107823:         Hashtable env = new Hashtable();
1:6999a02:         env.put(Context.PROVIDER_URL, "ldap://localhost:1024");
1:a107823:         env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
3:a107823:         env.put(Context.SECURITY_AUTHENTICATION, "simple");
3:a107823:         env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);
3:a107823:         env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);
1:a107823:         DirContext ctx = new InitialDirContext(env);
1:6999a02: 
1:a107823:         HashSet set = new HashSet();
18:a107823: 
1:a107823:         NamingEnumeration list = ctx.list("ou=system");
1:a107823: 
1:a107823:         while (list.hasMore()) {
1:a107823:             NameClassPair ncp = (NameClassPair) list.next();
1:a107823:             set.add(ncp.getName());
1:6999a02:         }
1:a107823: 
1:a107823:         assertTrue(set.contains("uid=admin"));
1:a107823:         assertTrue(set.contains("ou=users"));
1:a107823:         assertTrue(set.contains("ou=groups"));
1:a107823:         assertTrue(set.contains("ou=configuration"));
1:a107823:         assertTrue(set.contains("prefNodeName=sysPrefRoot"));
1:38a6bed: 
1:6999a02:     }
1:6999a02: 
1:6999a02:     @Test
1:6999a02:     public void testLogin() throws LoginException {
1:a107823:         LoginContext context = new LoginContext("LDAPLogin", new CallbackHandler() {
1:38a6bed:             @Override
1:38a6bed:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:38a6bed:                 for (int i = 0; i < callbacks.length; i++) {
1:38a6bed:                     if (callbacks[i] instanceof NameCallback) {
1:38a6bed:                         ((NameCallback) callbacks[i]).setName("first");
1:38a6bed:                     } else if (callbacks[i] instanceof PasswordCallback) {
1:38a6bed:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
1:38a6bed:                     } else {
1:38a6bed:                         throw new UnsupportedCallbackException(callbacks[i]);
1:38a6bed:                     }
1:38a6bed:                 }
1:38a6bed:             }
1:38a6bed:         });
1:38a6bed:         context.login();
1:38a6bed:         context.logout();
1:38a6bed:     }
1:38a6bed: 
1:38a6bed:     @Test
1:38a6bed:     public void testEncryptedLogin() throws LoginException {
1:38a6bed: 
1:38a6bed:         LoginContext context = new LoginContext("EncryptedLDAPLogin", new CallbackHandler() {
1:38a6bed:             @Override
1:a107823:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:a107823:                 for (int i = 0; i < callbacks.length; i++) {
1:a107823:                     if (callbacks[i] instanceof NameCallback) {
1:a107823:                         ((NameCallback) callbacks[i]).setName("first");
1:a107823:                     } else if (callbacks[i] instanceof PasswordCallback) {
1:a107823:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
1:a107823:                     } else {
1:a107823:                         throw new UnsupportedCallbackException(callbacks[i]);
1:6999a02:                     }
1:6999a02:                 }
8:a107823:             }
1:a107823:         });
1:a107823:         context.login();
1:a107823:         context.logout();
1:a107823:     }
1:a107823: 
1:0b5231a:     @Test
1:0b5231a:     public void testUnauthenticated() throws LoginException {
1:0b5231a:         LoginContext context = new LoginContext("UnAuthenticatedLDAPLogin", new CallbackHandler() {
1:38a6bed:             @Override
1:0b5231a:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:0b5231a:                 for (int i = 0; i < callbacks.length; i++) {
1:0b5231a:                     if (callbacks[i] instanceof NameCallback) {
1:0b5231a:                         ((NameCallback) callbacks[i]).setName("first");
1:0b5231a:                     } else if (callbacks[i] instanceof PasswordCallback) {
1:0b5231a:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
1:0b5231a:                     } else {
1:0b5231a:                         throw new UnsupportedCallbackException(callbacks[i]);
1:0b5231a:                     }
1:0b5231a:                 }
1:0b5231a:             }
1:0b5231a:         });
1:0b5231a:         try {
1:0b5231a:             context.login();
1:0b5231a:         } catch (LoginException le) {
1:0b5231a:             assertEquals(le.getCause().getMessage(), "Empty password is not allowed");
1:0b5231a:             return;
1:0b5231a:         }
1:0b5231a:         fail("Should have failed authenticating");
1:0b5231a:     }
1:0b5231a: 
1:0b5231a: 
1:a107823: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:38a6bed
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
1:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:                 for (int i = 0; i < callbacks.length; i++) {
1:                     if (callbacks[i] instanceof NameCallback) {
1:                         ((NameCallback) callbacks[i]).setName("first");
1:                     } else if (callbacks[i] instanceof PasswordCallback) {
1:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
1:                     } else {
1:                         throw new UnsupportedCallbackException(callbacks[i]);
1:                     }
1:                 }
1:             }
1:         });
1:         context.login();
1:         context.logout();
1:     }
1: 
1:     @Test
1:     public void testEncryptedLogin() throws LoginException {
1: 
1:         LoginContext context = new LoginContext("EncryptedLDAPLogin", new CallbackHandler() {
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:0b5231a
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testUnauthenticated() throws LoginException {
1:         LoginContext context = new LoginContext("UnAuthenticatedLDAPLogin", new CallbackHandler() {
1:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:                 for (int i = 0; i < callbacks.length; i++) {
1:                     if (callbacks[i] instanceof NameCallback) {
1:                         ((NameCallback) callbacks[i]).setName("first");
1:                     } else if (callbacks[i] instanceof PasswordCallback) {
1:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
1:                     } else {
1:                         throw new UnsupportedCallbackException(callbacks[i]);
1:                     }
1:                 }
1:             }
1:         });
1:         try {
1:             context.login();
1:         } catch (LoginException le) {
1:             assertEquals(le.getCause().getMessage(), "Empty password is not allowed");
1:             return;
1:         }
1:         fail("Should have failed authenticating");
1:     }
1: 
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:71d4e2a
/////////////////////////////////////////////////////////////////////////
1: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP", port=1024)})
commit:937d5dd
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1: 
1:     private final String loginConfigSysPropName = "java.security.auth.login.config";
1:     private String oldLoginConfig;
1:     @Before
1:     public void setLoginConfigSysProperty() {
1:         oldLoginConfig = System.getProperty(loginConfigSysPropName, null);
1:         System.setProperty(loginConfigSysPropName, "src/test/resources/login.config");
1:     }
1: 
1:     @After
1:     public void resetLoginConfigSysProperty() {
1:         if (oldLoginConfig != null) {
1:             System.setProperty(loginConfigSysPropName, oldLoginConfig);
1:         }
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:046130e
/////////////////////////////////////////////////////////////////////////
commit:26cf6a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1: import org.apache.directory.server.core.integ.FrameworkRunner;
1: import org.apache.directory.server.integ.ServerIntegrationUtils;
1: import org.apache.directory.server.ldap.LdapServer;
1: import org.apache.directory.server.annotations.CreateLdapServer;
1: import org.apache.directory.server.annotations.CreateTransport;
1: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import javax.security.auth.callback.*;
1: import java.io.IOException;
1: import java.net.URL;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import static org.junit.Assert.assertTrue;
1: @RunWith ( FrameworkRunner.class )
0: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP")})
1: @ApplyLdifFiles(
1:    "test.ldif"
1: public class LDAPLoginModuleTest extends AbstractLdapTestUnit {
/////////////////////////////////////////////////////////////////////////
1:     private static final String BASE = "o=ActiveMQ,ou=system";
1: 
commit:6999a02
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
1: 
0: import java.net.URL;
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.directory.server.core.integ.Level;
0: import org.apache.directory.server.core.integ.annotations.ApplyLdifs;
0: import org.apache.directory.server.core.integ.annotations.CleanupLevel;
0: import org.apache.directory.server.integ.SiRunner;
0: import org.apache.directory.server.ldap.LdapService;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: @RunWith ( SiRunner.class ) 
0: @CleanupLevel ( Level.CLASS )
0: @ApplyLdifs( {
0: 	"dn: uid=first,ou=system\n" +
0: 	"uid: first\n" +
0: 	"userPassword: secret\n" +
0: 	"objectClass: account\n" +
0: 	"objectClass: simpleSecurityObject\n" +
0: 	"objectClass: top\n" 
1: }
1: )
0: public class LDAPLoginModuleTest {
1: 	
0:     static {
0:         String path = System.getProperty("java.security.auth.login.config");
0:         if (path == null) {
0:             URL resource = PropertiesLoginModuleTest.class.getClassLoader().getResource("login.config");
0:             if (resource != null) {
0:                 path = resource.getFile();
0:                 System.setProperty("java.security.auth.login.config", path);
1:             }
1:         }
1:     }
1:     
0:     private static final String BASE = "ou=system";
0:     public static LdapService ldapService;
1:     private static final String FILTER = "(objectclass=*)";
1:     
1:     
1:     @Test
1:         env.put(Context.PROVIDER_URL, "ldap://localhost:1024");
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testLogin() throws LoginException {
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:aa9ff75
/////////////////////////////////////////////////////////////////////////
0: import org.apache.directory.server.ldap.LdapServer;
/////////////////////////////////////////////////////////////////////////
1:     public static LdapServer ldapServer;
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
0:     public void xtestLogin() throws LoginException {
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jaas;
1: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.net.InetAddress;
0: import java.util.HashSet;
0: import java.util.Hashtable;
0: import java.util.Properties;
1: import javax.naming.Context;
1: import javax.naming.NameClassPair;
1: import javax.naming.NamingEnumeration;
1: import javax.naming.directory.DirContext;
1: import javax.naming.directory.InitialDirContext;
0: import javax.security.auth.callback.Callback;
0: import javax.security.auth.callback.CallbackHandler;
0: import javax.security.auth.callback.NameCallback;
0: import javax.security.auth.callback.PasswordCallback;
0: import javax.security.auth.callback.UnsupportedCallbackException;
1: import javax.security.auth.login.LoginContext;
1: import javax.security.auth.login.LoginException;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.activemq.jaas.ldap.MutableServerStartupConfiguration;
0: import org.apache.activemq.jaas.ldap.ServerContextFactory;
0: import org.apache.ldap.server.configuration.ShutdownConfiguration;
0: import org.apache.ldap.server.jndi.CoreContextFactory;
1: 
1: 
1: 
1: /**
0:  * @version $Rev: $ $Date: $
1:  */
0: public class LDAPLoginModuleTest extends TestCase {
1: 
1:     private static final String PRINCIPAL = "uid=admin,ou=system";
1:     private static final String CREDENTIALS = "secret";
1: 
0:     public void testNothing() {
1:     }
1: 
1:     public void testRunning() throws Exception {
1: 
1:         Hashtable env = new Hashtable();
0:         env.put(Context.PROVIDER_URL, "ldap://localhost:9389");
1:         env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
1:         env.put(Context.SECURITY_AUTHENTICATION, "simple");
1:         env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);
1:         env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);
1:         DirContext ctx = new InitialDirContext(env);
1: 
0:         // Perform search using URL
0:         // NamingEnumeration answer = ctx.search(
0:         // "ldap://localhost:389/ou=system", "(uid=admin)", null);
1:         HashSet set = new HashSet();
1: 
1:         NamingEnumeration list = ctx.list("ou=system");
1: 
1:         while (list.hasMore()) {
1:             NameClassPair ncp = (NameClassPair) list.next();
1:             set.add(ncp.getName());
1:         }
1: 
1:         assertTrue(set.contains("uid=admin"));
1:         assertTrue(set.contains("ou=users"));
1:         assertTrue(set.contains("ou=groups"));
1:         assertTrue(set.contains("ou=configuration"));
1:         assertTrue(set.contains("prefNodeName=sysPrefRoot"));
1: 
1:     }
1: 
0:     public void XtestLogin() throws LoginException {
1:         LoginContext context = new LoginContext("LDAPLogin", new CallbackHandler() {
1:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:                 for (int i = 0; i < callbacks.length; i++) {
1:                     if (callbacks[i] instanceof NameCallback) {
1:                         ((NameCallback) callbacks[i]).setName("first");
1:                     } else if (callbacks[i] instanceof PasswordCallback) {
1:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
1:                     } else {
1:                         throw new UnsupportedCallbackException(callbacks[i]);
1:                     }
1:                 }
1:             }
1:         });
1:         context.login();
1:         context.logout();
1:     }
1: 
0:     public void setUp() throws Exception {
0:         MutableServerStartupConfiguration startup = new MutableServerStartupConfiguration();
0:         // put some mandatory JNDI properties here
0:         startup.setWorkingDirectory(new File("target/ldap"));
0:         startup.setAllowAnonymousAccess(true);
0:         startup.setLdapPort(9389);
0:         startup.setEnableNetworking(true);
0:         startup.setHost(InetAddress.getByName("localhost"));
1: 
0:         Properties env = new Properties();
0:         env.putAll(startup.toJndiEnvironment());
0:         env.put(Context.INITIAL_CONTEXT_FACTORY, ServerContextFactory.class.getName());
0:         env.put(Context.PROVIDER_URL, "ou=system");
1:         env.put(Context.SECURITY_AUTHENTICATION, "simple");
1:         env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);
1:         env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);
1: 
0:         //Fire it up
0:         new InitialDirContext(env);
1:     }
1: 
0:     public void tearDown() throws Exception {
0:         Properties env = new Properties();
0:         env.putAll(new ShutdownConfiguration().toJndiEnvironment());
0:         env.put(Context.INITIAL_CONTEXT_FACTORY, CoreContextFactory.class.getName());
0:         env.put(Context.PROVIDER_URL, "ou=system");
1:         env.put(Context.SECURITY_AUTHENTICATION, "simple");
1:         env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);
1:         env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);
1: 
0:         //Shut it down
0:         new InitialDirContext(env);
1:     }
1: }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:2d0361b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.jaas;
/////////////////////////////////////////////////////////////////////////
0: 
0: import org.apache.activemq.jaas.ldap.MutableServerStartupConfiguration;
0: import org.apache.activemq.jaas.ldap.ServerContextFactory;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2004 The Apache Software Foundation
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0:  *
0:  * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.activemq.jaas;
0: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.net.InetAddress;
0: import java.util.HashSet;
0: import java.util.Hashtable;
0: import java.util.Properties;
0: import javax.naming.Context;
0: import javax.naming.NameClassPair;
0: import javax.naming.NamingEnumeration;
0: import javax.naming.directory.DirContext;
0: import javax.naming.directory.InitialDirContext;
0: import javax.security.auth.callback.Callback;
0: import javax.security.auth.callback.CallbackHandler;
0: import javax.security.auth.callback.NameCallback;
0: import javax.security.auth.callback.PasswordCallback;
0: import javax.security.auth.callback.UnsupportedCallbackException;
0: import javax.security.auth.login.LoginContext;
0: import javax.security.auth.login.LoginException;
0: 
0: import junit.framework.TestCase;
0: import org.apache.ldap.server.configuration.ShutdownConfiguration;
0: import org.apache.ldap.server.jndi.CoreContextFactory;
0: 
0: import org.activemq.jaas.ldap.MutableServerStartupConfiguration;
0: import org.activemq.jaas.ldap.ServerContextFactory;
0: 
0: 
0: /**
0:  * @version $Rev: $ $Date: $
0:  */
0: public class LDAPLoginModuleTest extends TestCase {
0: 
0:     private static final String PRINCIPAL = "uid=admin,ou=system";
0:     private static final String CREDENTIALS = "secret";
0: 
0:     public void testNothing() {
0:     }
0: 
0:     public void testRunning() throws Exception {
0: 
0:         Hashtable env = new Hashtable();
0:         env.put(Context.PROVIDER_URL, "ldap://localhost:9389");
0:         env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
0:         env.put(Context.SECURITY_AUTHENTICATION, "simple");
0:         env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);
0:         env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);
0:         DirContext ctx = new InitialDirContext(env);
0: 
0:         // Perform search using URL
0:         // NamingEnumeration answer = ctx.search(
0:         // "ldap://localhost:389/ou=system", "(uid=admin)", null);
0:         HashSet set = new HashSet();
0: 
0:         NamingEnumeration list = ctx.list("ou=system");
0: 
0:         while (list.hasMore()) {
0:             NameClassPair ncp = (NameClassPair) list.next();
0:             set.add(ncp.getName());
0:         }
0: 
0:         assertTrue(set.contains("uid=admin"));
0:         assertTrue(set.contains("ou=users"));
0:         assertTrue(set.contains("ou=groups"));
0:         assertTrue(set.contains("ou=configuration"));
0:         assertTrue(set.contains("prefNodeName=sysPrefRoot"));
0: 
0:     }
0: 
0:     public void XtestLogin() throws LoginException {
0:         LoginContext context = new LoginContext("LDAPLogin", new CallbackHandler() {
0:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
0:                 for (int i = 0; i < callbacks.length; i++) {
0:                     if (callbacks[i] instanceof NameCallback) {
0:                         ((NameCallback) callbacks[i]).setName("first");
0:                     } else if (callbacks[i] instanceof PasswordCallback) {
0:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
0:                     } else {
0:                         throw new UnsupportedCallbackException(callbacks[i]);
0:                     }
0:                 }
0:             }
0:         });
0:         context.login();
0:         context.logout();
0:     }
0: 
0:     public void setUp() throws Exception {
0:         MutableServerStartupConfiguration startup = new MutableServerStartupConfiguration();
0:         // put some mandatory JNDI properties here
0:         startup.setWorkingDirectory(new File("target/ldap"));
0:         startup.setAllowAnonymousAccess(true);
0:         startup.setLdapPort(9389);
0:         startup.setEnableNetworking(true);
0:         startup.setHost(InetAddress.getByName("localhost"));
0: 
0:         Properties env = new Properties();
0:         env.putAll(startup.toJndiEnvironment());
0:         env.put(Context.INITIAL_CONTEXT_FACTORY, ServerContextFactory.class.getName());
0:         env.put(Context.PROVIDER_URL, "ou=system");
0:         env.put(Context.SECURITY_AUTHENTICATION, "simple");
0:         env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);
0:         env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);
0: 
0:         //Fire it up
0:         new InitialDirContext(env);
0:     }
0: 
0:     public void tearDown() throws Exception {
0:         Properties env = new Properties();
0:         env.putAll(new ShutdownConfiguration().toJndiEnvironment());
0:         env.put(Context.INITIAL_CONTEXT_FACTORY, CoreContextFactory.class.getName());
0:         env.put(Context.PROVIDER_URL, "ou=system");
0:         env.put(Context.SECURITY_AUTHENTICATION, "simple");
0:         env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);
0:         env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);
0: 
0:         //Shut it down
0:         new InitialDirContext(env);
0:     }
0: }
============================================================================