1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
4:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
1:fd4bb60: 
1:ba1bd26: import static org.junit.Assert.assertFalse;
1:ba1bd26: import static org.junit.Assert.assertTrue;
7:40a7d3b: 
1:ba1bd26: import org.junit.Before;
1:ba1bd26: import org.junit.Test;
1:ba1bd26: 
1:ba1bd26: public class ActiveMQResourceAdapterJavaBeanEqualityTest {
1:40a7d3b: 
1:40a7d3b:     private ActiveMQResourceAdapter raOne;
1:40a7d3b:     private ActiveMQResourceAdapter raTwo;
1:40a7d3b: 
1:ba1bd26:     @Before
1:ba1bd26:     public void setUp() throws Exception {
1:540dd5c:         raOne = new ActiveMQResourceAdapter();
1:40a7d3b:         raTwo = new ActiveMQResourceAdapter();
2:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testSelfEquality() {
1:540dd5c:         assertEquality(raOne, raOne);
1:40a7d3b:     }
1:540dd5c: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testEmptyEquality() {
1:40a7d3b:         assertEquality(raOne, raTwo);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testNullEqualityFailure() {
1:40a7d3b:         assertFalse(raOne.equals(null));
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testServerUrlEquality() {
1:40a7d3b:         raOne.setServerUrl("one");
1:40a7d3b:         raTwo.setServerUrl("one");
1:540dd5c:         assertEquality(raOne, raTwo);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testServerUrlInequality() {
1:40a7d3b:         raOne.setServerUrl("one");
1:40a7d3b:         raTwo.setServerUrl("two");
1:540dd5c:         assertNonEquality(raOne, raTwo);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testServerUrlInequalityDifferentCase() {
1:40a7d3b:         raOne.setServerUrl("one");
1:40a7d3b:         raTwo.setServerUrl("ONE");
1:40a7d3b:         assertNonEquality(raOne, raTwo);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testNullServerUrlInequality() {
1:40a7d3b:         raOne.setServerUrl("one");
1:40a7d3b:         raTwo.setServerUrl(null);
1:40a7d3b:         assertNonEquality(raOne, raTwo);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testBrokerXMLConfigEquality() {
1:40a7d3b:         raOne.setBrokerXmlConfig("one");
1:40a7d3b:         raTwo.setBrokerXmlConfig("one");
1:40a7d3b:         assertEquality(raOne, raTwo);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testBrokerXMLConfigInequality() {
1:40a7d3b:         raOne.setBrokerXmlConfig("one");
1:40a7d3b:         raTwo.setBrokerXmlConfig("two");
1:40a7d3b:         assertNonEquality(raOne, raTwo);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testBrokerXMLConfigInequalityDifferentCase() {
1:40a7d3b:         raOne.setBrokerXmlConfig("one");
1:40a7d3b:         raTwo.setBrokerXmlConfig("ONE");
1:40a7d3b:         assertNonEquality(raOne, raTwo);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testNullBrokerXMLConfigInequality() {
1:40a7d3b:         raOne.setBrokerXmlConfig("one");
1:40a7d3b:         raTwo.setBrokerXmlConfig(null);
1:40a7d3b:         assertNonEquality(raOne, raTwo);
1:40a7d3b:     }
1:540dd5c: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testPasswordNotPartOfEquality() {
1:40a7d3b:         raOne.setClientid("one");
1:40a7d3b:         raTwo.setClientid("one");
1:40a7d3b:         raOne.setPassword("foo");
1:40a7d3b:         raTwo.setPassword("bar");
1:40a7d3b:         assertEquality(raOne, raTwo);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void assertEquality(ActiveMQResourceAdapter leftRa, ActiveMQResourceAdapter rightRa) {
1:40a7d3b:         assertTrue("ActiveMQResourceAdapters are not equal", leftRa.equals(rightRa));
1:40a7d3b:         assertTrue("ActiveMQResourceAdapters are not equal", rightRa.equals(leftRa));
1:40a7d3b:         assertTrue("HashCodes are not equal", leftRa.hashCode() == rightRa.hashCode());
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void assertNonEquality(ActiveMQResourceAdapter leftRa, ActiveMQResourceAdapter rightRa) {
1:40a7d3b:         assertFalse("ActiveMQResourceAdapters are equal", leftRa.equals(rightRa));
1:40a7d3b:         assertFalse("ActiveMQResourceAdapters are equal", rightRa.equals(leftRa));
1:40a7d3b:         assertFalse("HashCodes are equal", leftRa.hashCode() == rightRa.hashCode());
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class ActiveMQResourceAdapterJavaBeanEqualityTest {
1:     @Before
1:     public void setUp() throws Exception {
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         raOne = new ActiveMQResourceAdapter();
1:         assertEquality(raOne, raOne);
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertEquality(raOne, raTwo);
1:         assertNonEquality(raOne, raTwo);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
1: 
0: import org.apache.activemq.ra.ActiveMQResourceAdapter;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /** 
0:  * 
0:  * Copyright 2004 Michael Gaffney
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
0: import junit.framework.TestCase;
1: 
0: /**
0:  * @version $Revision$
0:  */
0: public class ActiveMQResourceAdapterJavaBeanEqualityTest extends TestCase {
1: 
1:     private ActiveMQResourceAdapter raOne;
1:     private ActiveMQResourceAdapter raTwo;
1: 
0:     public ActiveMQResourceAdapterJavaBeanEqualityTest(String name) {
0:         super(name);
1:     }
1: 
0:     protected void setUp() throws Exception {
0:         super.setUp();
0:         raOne = new ActiveMQResourceAdapter();        
1:         raTwo = new ActiveMQResourceAdapter();
1:     }
1: 
1:     public void testSelfEquality() {
0:         assertEquality(raOne, raOne);        
1:     }
1:     
1:     public void testEmptyEquality() {
1:         assertEquality(raOne, raTwo);
1:     }
1: 
1:     public void testNullEqualityFailure() {
1:         assertFalse(raOne.equals(null));
1:     }
1: 
1:     public void testServerUrlEquality() {
1:         raOne.setServerUrl("one");
1:         raTwo.setServerUrl("one");
0:         assertEquality(raOne,raTwo);
1:     }
1: 
1:     public void testServerUrlInequality() {
1:         raOne.setServerUrl("one");
1:         raTwo.setServerUrl("two");
0:         assertNonEquality(raOne,raTwo);
1:     }
1: 
1:     public void testServerUrlInequalityDifferentCase() {
1:         raOne.setServerUrl("one");
1:         raTwo.setServerUrl("ONE");
1:         assertNonEquality(raOne, raTwo);
1:     }
1: 
1:     public void testNullServerUrlInequality() {
1:         raOne.setServerUrl("one");
1:         raTwo.setServerUrl(null);
1:         assertNonEquality(raOne, raTwo);
1:     }
1: 
1:     public void testBrokerXMLConfigEquality() {
1:         raOne.setBrokerXmlConfig("one");
1:         raTwo.setBrokerXmlConfig("one");
1:         assertEquality(raOne, raTwo);
1:     }
1: 
1:     public void testBrokerXMLConfigInequality() {
1:         raOne.setBrokerXmlConfig("one");
1:         raTwo.setBrokerXmlConfig("two");
1:         assertNonEquality(raOne, raTwo);
1:     }
1: 
1:     public void testBrokerXMLConfigInequalityDifferentCase() {
1:         raOne.setBrokerXmlConfig("one");
1:         raTwo.setBrokerXmlConfig("ONE");
1:         assertNonEquality(raOne, raTwo);
1:     }
1: 
1:     public void testNullBrokerXMLConfigInequality() {
1:         raOne.setBrokerXmlConfig("one");
1:         raTwo.setBrokerXmlConfig(null);
1:         assertNonEquality(raOne, raTwo);
1:     }
1:     
1:     public void testPasswordNotPartOfEquality() {
1:         raOne.setClientid("one");
1:         raTwo.setClientid("one");
1:         raOne.setPassword("foo");
1:         raTwo.setPassword("bar");
1:         assertEquality(raOne, raTwo);
1:     }
1: 
1:     private void assertEquality(ActiveMQResourceAdapter leftRa, ActiveMQResourceAdapter rightRa) {
1:         assertTrue("ActiveMQResourceAdapters are not equal", leftRa.equals(rightRa));
1:         assertTrue("ActiveMQResourceAdapters are not equal", rightRa.equals(leftRa));
1:         assertTrue("HashCodes are not equal", leftRa.hashCode() == rightRa.hashCode());
1:     }
1: 
1:     private void assertNonEquality(ActiveMQResourceAdapter leftRa, ActiveMQResourceAdapter rightRa) {
1:         assertFalse("ActiveMQResourceAdapters are equal", leftRa.equals(rightRa));
1:         assertFalse("ActiveMQResourceAdapters are equal", rightRa.equals(leftRa));
1:         assertFalse("HashCodes are equal", leftRa.hashCode() == rightRa.hashCode());
1:     }
1: 
1:     
1: }
============================================================================