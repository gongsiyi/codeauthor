1:1f862ba: /**
1:1f862ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1f862ba:  * contributor license agreements.  See the NOTICE file distributed with
1:1f862ba:  * this work for additional information regarding copyright ownership.
1:1f862ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1f862ba:  * (the "License"); you may not use this file except in compliance with
1:1f862ba:  * the License.  You may obtain a copy of the License at
1:1f862ba:  *
1:1f862ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1f862ba:  *
1:1f862ba:  * Unless required by applicable law or agreed to in writing, software
1:1f862ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1f862ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1f862ba:  * See the License for the specific language governing permissions and
1:1f862ba:  * limitations under the License.
1:1f862ba:  */
1:1f862ba: package org.apache.activemq.security;
1:1f862ba: 
1:1f862ba: import org.apache.directory.ldap.client.api.LdapConnection;
1:1f862ba: import org.apache.directory.ldap.client.api.LdapNetworkConnection;
1:1f862ba: import org.apache.directory.server.annotations.CreateLdapServer;
1:1f862ba: import org.apache.directory.server.annotations.CreateTransport;
1:1f862ba: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1:1f862ba: import org.apache.directory.server.core.integ.FrameworkRunner;
1:1f862ba: import org.apache.directory.shared.ldap.model.exception.LdapException;
1:1f862ba: import org.apache.directory.shared.ldap.model.name.Dn;
1:1f862ba: import org.junit.runner.RunWith;
1:1f862ba: 
1:1f862ba: import java.io.IOException;
1:1f862ba: import java.io.InputStream;
1:1f862ba: 
1:1f862ba: 
1:1f862ba: @RunWith( FrameworkRunner.class )
1:1f862ba: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP")})
1:1f862ba: @ApplyLdifFiles(
1:1f862ba:         "org/apache/activemq/security/activemq-apacheds-legacy.ldif"
1:1f862ba: )
1:1f862ba: public class CachedLDAPAuthorizationModuleLegacyTest extends AbstractCachedLDAPAuthorizationMapLegacyTest {
1:1f862ba: 
1:1f862ba:     @Override
1:7c9fec6:     protected SimpleCachedLDAPAuthorizationMap createMap() {
1:7c9fec6:         SimpleCachedLDAPAuthorizationMap map = super.createMap();
1:1f862ba:         map.setConnectionURL("ldap://localhost:" + getLdapServer().getPort());
1:1f862ba:         return map;
1:1f862ba:     }
1:1f862ba:     
1:1f862ba:     protected InputStream getAddLdif() {
1:1f862ba:         return getClass().getClassLoader().getResourceAsStream("org/apache/activemq/security/activemq-apacheds-legacy-add.ldif");
1:1f862ba:     }
1:1f862ba:     
1:1f862ba:     protected InputStream getRemoveLdif() {
1:1f862ba:         return getClass().getClassLoader().getResourceAsStream("org/apache/activemq/security/activemq-apacheds-legacy-delete.ldif");
1:1f862ba:     }
1:1f862ba:     
1:1f862ba:     protected String getQueueBaseDn() {
1:1f862ba:         return "ou=Queue,ou=Destination,ou=ActiveMQ,ou=system";
1:1f862ba:     }
1:1f862ba:     
1:1f862ba:     protected LdapConnection getLdapConnection() throws LdapException, IOException {
1:1f862ba:         LdapConnection connection = new LdapNetworkConnection("localhost", getLdapServer().getPort());
1:1f862ba:         connection.bind(new Dn("uid=admin,ou=system"), "secret");
1:1f862ba:         return connection;
1:1f862ba:     }
1:1f862ba: }
1:1f862ba: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:7c9fec6
/////////////////////////////////////////////////////////////////////////
1:     protected SimpleCachedLDAPAuthorizationMap createMap() {
1:         SimpleCachedLDAPAuthorizationMap map = super.createMap();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1f862ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import org.apache.directory.ldap.client.api.LdapConnection;
1: import org.apache.directory.ldap.client.api.LdapNetworkConnection;
1: import org.apache.directory.server.annotations.CreateLdapServer;
1: import org.apache.directory.server.annotations.CreateTransport;
1: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1: import org.apache.directory.server.core.integ.FrameworkRunner;
1: import org.apache.directory.shared.ldap.model.exception.LdapException;
1: import org.apache.directory.shared.ldap.model.name.Dn;
1: import org.junit.runner.RunWith;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: 
1: @RunWith( FrameworkRunner.class )
1: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP")})
1: @ApplyLdifFiles(
1:         "org/apache/activemq/security/activemq-apacheds-legacy.ldif"
1: )
1: public class CachedLDAPAuthorizationModuleLegacyTest extends AbstractCachedLDAPAuthorizationMapLegacyTest {
1: 
1:     @Override
0:     protected CachedLDAPAuthorizationMap createMap() {
0:         CachedLDAPAuthorizationMap map = super.createMap();
1:         map.setConnectionURL("ldap://localhost:" + getLdapServer().getPort());
1:         return map;
1:     }
1:     
1:     protected InputStream getAddLdif() {
1:         return getClass().getClassLoader().getResourceAsStream("org/apache/activemq/security/activemq-apacheds-legacy-add.ldif");
1:     }
1:     
1:     protected InputStream getRemoveLdif() {
1:         return getClass().getClassLoader().getResourceAsStream("org/apache/activemq/security/activemq-apacheds-legacy-delete.ldif");
1:     }
1:     
1:     protected String getQueueBaseDn() {
1:         return "ou=Queue,ou=Destination,ou=ActiveMQ,ou=system";
1:     }
1:     
1:     protected LdapConnection getLdapConnection() throws LdapException, IOException {
1:         LdapConnection connection = new LdapNetworkConnection("localhost", getLdapServer().getPort());
1:         connection.bind(new Dn("uid=admin,ou=system"), "secret");
1:         return connection;
1:     }
1: }
1: 
============================================================================