1:e2aad41: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
2:f812e34:  *
1:e2aad41:  * Unless required by applicable law or agreed to in writing, software
1:e2aad41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e2aad41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2aad41:  * See the License for the specific language governing permissions and
1:e2aad41:  * limitations under the License.
1:e2aad41:  */
1:e2aad41: package org.apache.activemq.thread;
10:e2aad41: 
1:287f69d: import org.slf4j.Logger;
1:287f69d: import org.slf4j.LoggerFactory;
1:e2aad41: 
1:e2aad41: /**
1:2b3c477:  *
1:e2aad41:  */
1:e2aad41: class DedicatedTaskRunner implements TaskRunner {
1:e2aad41: 
1:287f69d:     private static final Logger LOG = LoggerFactory.getLogger(DedicatedTaskRunner.class);
1:e2aad41:     private final Task task;
1:e2aad41:     private final Thread thread;
1:f812e34: 
1:e2aad41:     private final Object mutex = new Object();
1:e2aad41:     private boolean threadTerminated;
1:e2aad41:     private boolean pending;
1:e2aad41:     private boolean shutdown;
1:f812e34: 
1:287f69d:     public DedicatedTaskRunner(final Task task, String name, int priority, boolean daemon) {
1:e2aad41:         this.task = task;
1:e2aad41:         thread = new Thread(name) {
1:2b3c477:             @Override
1:e2aad41:             public void run() {
1:287f69d:                 try {
1:e2aad41:                     runTask();
1:287f69d:                 } finally {
1:287f69d:                     LOG.trace("Run task done: {}", task);
2:e2aad41:                 }
1:b75a6da:             }
1:e2aad41:         };
1:e2aad41:         thread.setDaemon(daemon);
1:e2aad41:         thread.setName(name);
1:e2aad41:         thread.setPriority(priority);
1:e2aad41:         thread.start();
1:e2aad41:     }
1:f812e34: 
1:e2aad41:     /**
1:e2aad41:      */
1:2b3c477:     @Override
1:e2aad41:     public void wakeup() throws InterruptedException {
1:f812e34:         synchronized (mutex) {
1:fc00993:             if (shutdown) {
1:e2aad41:                 return;
1:fc00993:             }
1:f812e34:             pending = true;
1:e2aad41:             mutex.notifyAll();
1:e2aad41:         }
1:e2aad41:     }
1:e2aad41: 
1:e2aad41:     /**
1:e2aad41:      * shut down the task
1:2b3c477:      *
1:f812e34:      * @param timeout
1:f812e34:      * @throws InterruptedException
1:e2aad41:      */
1:2b3c477:     @Override
1:f812e34:     public void shutdown(long timeout) throws InterruptedException {
1:2b3c477:         LOG.trace("Shutdown timeout: {} task: {}", timeout, task);
1:f812e34:         synchronized (mutex) {
1:f812e34:             shutdown = true;
1:f812e34:             pending = true;
1:e2aad41:             mutex.notifyAll();
1:e2aad41: 
1:f812e34:             // Wait till the thread stops ( no need to wait if shutdown
1:f812e34:             // is called from thread that is shutting down)
1:f812e34:             if (Thread.currentThread() != thread && !threadTerminated) {
1:da13d59:                 mutex.wait(timeout);
1:f812e34:             }
1:e2aad41:         }
1:e2aad41:     }
1:f812e34: 
1:da13d59:     /**
1:da13d59:      * shut down the task
1:2b3c477:      *
1:f812e34:      * @throws InterruptedException
1:da13d59:      */
1:2b3c477:     @Override
1:f812e34:     public void shutdown() throws InterruptedException {
1:da13d59:         shutdown(0);
1:e2aad41:     }
1:f812e34: 
1:a3e3821:     final void runTask() {
1:f812e34: 
1:e2aad41:         try {
1:f812e34:             while (true) {
1:f812e34: 
1:f812e34:                 synchronized (mutex) {
1:f812e34:                     pending = false;
1:f812e34:                     if (shutdown) {
1:e2aad41:                         return;
1:e2aad41:                     }
1:e2aad41:                 }
1:f812e34: 
1:287f69d:                 LOG.trace("Running task {}", task);
1:f812e34:                 if (!task.iterate()) {
1:e2aad41:                     // wait to be notified.
2:e2aad41:                     synchronized (mutex) {
1:f812e34:                         if (shutdown) {
1:5a3a45f:                             return;
1:5a3a45f:                         }
1:f812e34:                         while (!pending) {
2:e2aad41:                             mutex.wait();
1:e2aad41:                         }
1:e2aad41:                     }
1:e2aad41:                 }
1:f812e34: 
1:e2aad41:             }
1:f812e34: 
1:e2aad41:         } catch (InterruptedException e) {
1:e2aad41:             // Someone really wants this thread to die off.
1:b75a6da:             Thread.currentThread().interrupt();
1:e2aad41:         } finally {
1:f812e34:             // Make sure we notify any waiting threads that thread
1:e2aad41:             // has terminated.
1:e2aad41:             synchronized (mutex) {
1:f812e34:                 threadTerminated = true;
1:e2aad41:                 mutex.notifyAll();
1:f812e34:             }
1:e2aad41:         }
1:e2aad41:     }
1:e2aad41: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2b3c477
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
1:         LOG.trace("Shutdown timeout: {} task: {}", timeout, task);
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:             if (shutdown) {
1:             }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         synchronized (mutex) {
0:             if (shutdown)
1:             pending = true;
1:      * 
1:      * @param timeout
1:      * @throws InterruptedException
1:     public void shutdown(long timeout) throws InterruptedException {
1:         synchronized (mutex) {
1:             shutdown = true;
1:             pending = true;
1:             // Wait till the thread stops ( no need to wait if shutdown
1:             // is called from thread that is shutting down)
1:             if (Thread.currentThread() != thread && !threadTerminated) {
1:     }
1: 
1:      * 
1:      * @throws InterruptedException
1:     public void shutdown() throws InterruptedException {
1: 
1: 
1:             while (true) {
1: 
1:                 synchronized (mutex) {
1:                     pending = false;
1:                     if (shutdown) {
1: 
1:                 if (!task.iterate()) {
1:                         if (shutdown) {
1:                         while (!pending) {
1: 
1: 
1:             // Make sure we notify any waiting threads that thread
1:                 threadTerminated = true;
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:5a3a45f
/////////////////////////////////////////////////////////////////////////
0:             // Wait till the thread stops ( no need to wait if shutdown 
0:             // is called from thread that is shutting down) 
0:             if( Thread.currentThread()!=thread && !threadTerminated ){
/////////////////////////////////////////////////////////////////////////
0:                         if( shutdown ) {
1:                             return;
1:                         }
commit:b75a6da
/////////////////////////////////////////////////////////////////////////
1:             Thread.currentThread().interrupt();
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:e2aad41
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.thread;
1: 
1: 
1: /**
0:  *
0:  * @version $Revision: 1.1 $
1:  */
1: class DedicatedTaskRunner implements TaskRunner {
1: 
1:     private final Task task;
1:     private final Thread thread;
1:     
1:     private final Object mutex = new Object();
1:     private boolean threadTerminated;
1:     private boolean pending;
1:     private boolean shutdown;
1:     
0:     public DedicatedTaskRunner(Task task, String name, int priority, boolean daemon) {
1:         this.task = task;
1:         thread = new Thread(name) {
1:             public void run() {
1:                 runTask();
1:             }
1:         };
1:         thread.setDaemon(daemon);
1:         thread.setName(name);
1:         thread.setPriority(priority);
1:         thread.start();
1:     }
1:     
1:     /**
1:      */
1:     public void wakeup() throws InterruptedException {
0:         synchronized( mutex ) {
0:             if( shutdown )
1:                 return;
0:             pending=true;            
1:             mutex.notifyAll();
1:         }
1:     }
1: 
1:     /**
1:      * shut down the task
0:      * @throws InterruptedException 
1:      */
0:     public void shutdown() throws InterruptedException{
0:         synchronized(mutex){
0:             shutdown=true;
0:             pending=true;
1:             mutex.notifyAll();
1: 
0:             // Wait till the thread stops.
0:             if(!threadTerminated){
1:                 mutex.wait();
1:             }
1:         }
1:     }        
1:     
0:     private void runTask() {
1:         
1:         try {
0:             while( true ) {
1:              
1:                 synchronized (mutex) {   
0:                     pending=false;
0:                     if( shutdown ) {
1:                         return;
1:                     }
1:                 }
1:                 
0:                 if( !task.iterate() ) {
1:                     // wait to be notified.
1:                     synchronized (mutex) {
0:                         while( !pending ) {
1:                             mutex.wait();
1:                         }
1:                     }
1:                 }
1:                 
1:             }
1:             
1:         } catch (InterruptedException e) {
1:             // Someone really wants this thread to die off.
1:         } finally {
0:             // Make sure we notify any waiting threads that thread 
1:             // has terminated.
1:             synchronized (mutex) {
0:                 threadTerminated=true;
1:                 mutex.notifyAll();
1:             }            
1:         }
1:     }
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:287f69d
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DedicatedTaskRunner.class);
/////////////////////////////////////////////////////////////////////////
1:     public DedicatedTaskRunner(final Task task, String name, int priority, boolean daemon) {
1:                 try {
0:                     runTask();
1:                 } finally {
1:                     LOG.trace("Run task done: {}", task);
0:                 }
/////////////////////////////////////////////////////////////////////////
0:         LOG.trace("Shutdown timeout: {} task: {}", task);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("Running task {}", task);
author:Gary Tully
-------------------------------------------------------------------------------
commit:8a2892b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f0429be
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.MDCHelper;
0: 
0: import java.util.Map;
0: 
/////////////////////////////////////////////////////////////////////////
0:         final Map context = MDCHelper.getCopyOfContextMap();
0:                 MDCHelper.setContextMap(context);
author:Robert Davies
-------------------------------------------------------------------------------
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
1:     final void runTask() {
commit:da13d59
/////////////////////////////////////////////////////////////////////////
0:      * @param timeout 
0:     public void shutdown(long timeout) throws InterruptedException{
/////////////////////////////////////////////////////////////////////////
1:                 mutex.wait(timeout);
0:     }      
0:     
1:     /**
1:      * shut down the task
0:      * @throws InterruptedException 
1:      */
0:     public void shutdown() throws InterruptedException{
1:         shutdown(0);
0:     }
============================================================================