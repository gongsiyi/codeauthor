1:ed6c472: /**
1:ed6c472:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed6c472:  * contributor license agreements.  See the NOTICE file distributed with
1:ed6c472:  * this work for additional information regarding copyright ownership.
1:ed6c472:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed6c472:  * (the "License"); you may not use this file except in compliance with
1:ed6c472:  * the License.  You may obtain a copy of the License at
1:ed6c472:  *
1:ed6c472:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ed6c472:  *
1:ed6c472:  * Unless required by applicable law or agreed to in writing, software
1:ed6c472:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed6c472:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed6c472:  * See the License for the specific language governing permissions and
1:ed6c472:  * limitations under the License.
1:ed6c472:  */
1:ed6c472: package org.apache.activemq.bugs;
1:ed6c472: 
1:ed6c472: import static org.junit.Assert.assertEquals;
1:ed6c472: import static org.junit.Assert.assertNotNull;
1:ed6c472: import static org.junit.Assert.assertTrue;
1:ed6c472: 
1:ed6c472: import java.io.IOException;
1:ed6c472: import java.util.ArrayList;
1:ed6c472: 
1:ed6c472: import javax.jms.Connection;
1:ed6c472: import javax.jms.JMSException;
1:ed6c472: import javax.jms.MessageProducer;
1:ed6c472: import javax.jms.Session;
1:ed6c472: 
1:ed6c472: import org.apache.activemq.ActiveMQConnectionFactory;
1:ed6c472: import org.apache.activemq.broker.BrokerService;
1:ed6c472: import org.apache.activemq.broker.region.Destination;
1:ed6c472: import org.apache.activemq.command.ActiveMQQueue;
1:ed6c472: import org.apache.activemq.store.PersistenceAdapter;
1:ed6c472: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1:ed6c472: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:ed6c472: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:ed6c472: import org.apache.activemq.util.Wait;
1:ed6c472: import org.junit.After;
1:ed6c472: import org.junit.Before;
1:ed6c472: import org.junit.Test;
1:ed6c472: import org.slf4j.Logger;
1:ed6c472: import org.slf4j.LoggerFactory;
1:ed6c472: 
1:ed6c472: public class AMQ4407Test {
1:ed6c472: 
1:ed6c472:     static final Logger LOG = LoggerFactory.getLogger(AMQ4407Test.class);
1:ed6c472:     private final static int maxFileLength = 1024*1024*32;
1:ed6c472: 
1:ed6c472:     private final static String PREFIX_DESTINATION_NAME = "queue";
1:ed6c472: 
1:ed6c472:     private final static String DESTINATION_NAME = PREFIX_DESTINATION_NAME + ".test";
1:ed6c472:     private final static String DESTINATION_NAME_2 = PREFIX_DESTINATION_NAME + "2.test";
1:ed6c472:     private final static String DESTINATION_NAME_3 = PREFIX_DESTINATION_NAME + "3.test";
1:ed6c472: 
1:ed6c472:     BrokerService broker;
1:ed6c472: 
1:ed6c472:     @Before
1:ed6c472:     public void setUp() throws Exception {
1:ed6c472:         prepareBrokerWithMultiStore(true);
1:ed6c472:         broker.start();
1:ed6c472:         broker.waitUntilStarted();
1:ed6c472:     }
1:ed6c472: 
1:ed6c472:     @After
1:ed6c472:     public void tearDown() throws Exception {
1:ed6c472:         broker.stop();
1:ed6c472:     }
1:ed6c472: 
1:ed6c472:     protected BrokerService createBroker(PersistenceAdapter kaha) throws Exception {
1:ed6c472:         BrokerService broker = new BrokerService();
1:ed6c472:         broker.setUseJmx(true);
1:ed6c472:         broker.setBrokerName("localhost");
1:ed6c472:         broker.setPersistenceAdapter(kaha);
1:ed6c472:         return broker;
1:ed6c472:     }
1:ed6c472: 
1:ed6c472:     @Test
1:ed6c472:     public void testRestartAfterQueueDelete() throws Exception {
1:ed6c472: 
1:ed6c472:         // Ensure we have an Admin View.
1:ed6c472:         assertTrue("Broker doesn't have an Admin View.", Wait.waitFor(new Wait.Condition() {
1:ed6c472:             @Override
1:ed6c472:             public boolean isSatisified() throws Exception {
1:ed6c472:                 return (broker.getAdminView()) != null;
1:ed6c472:             }
1:ed6c472:         }));
1:ed6c472: 
1:ed6c472: 
1:ed6c472:         LOG.info("Adding destinations: {}, {}, {}", new Object[] {DESTINATION_NAME, DESTINATION_NAME_3, DESTINATION_NAME_3});
1:ed6c472:         sendMessage(DESTINATION_NAME, "test 1");
1:ed6c472:         sendMessage(DESTINATION_NAME_2, "test 1");
1:ed6c472:         sendMessage(DESTINATION_NAME_3, "test 1");
1:ed6c472: 
1:ed6c472:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME)));
1:ed6c472:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_2)));
1:ed6c472:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_3)));
1:ed6c472: 
1:ed6c472: 
1:ed6c472:         LOG.info("Removing destination: {}", DESTINATION_NAME_2);
1:ed6c472:         broker.getAdminView().removeQueue(DESTINATION_NAME_2);
1:ed6c472: 
1:ed6c472:         LOG.info("Recreating destination: {}", DESTINATION_NAME_2);
1:ed6c472:         sendMessage(DESTINATION_NAME_2, "test 1");
1:ed6c472: 
1:ed6c472:         Destination destination2 = broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_2));
1:ed6c472:         assertNotNull(destination2);
1:ed6c472:         assertEquals(1, destination2.getMessageStore().getMessageCount());
1:ed6c472:     }
1:dc68ad8: 
1:ed6c472: 
1:dc68ad8:     @Test
1:dc68ad8:     public void testRemoveOfOneDestFromSharedPa() throws Exception {
1:dc68ad8:         // Ensure we have an Admin View.
1:dc68ad8:         assertTrue("Broker doesn't have an Admin View.", Wait.waitFor(new Wait.Condition() {
1:dc68ad8:             @Override
1:dc68ad8:             public boolean isSatisified() throws Exception {
1:dc68ad8:                 return (broker.getAdminView()) != null;
1:dc68ad8:             }
1:dc68ad8:         }));
1:dc68ad8: 
1:dc68ad8:         // will both use first persistence adapter
1:dc68ad8:         sendMessage("queue.A", "test 1");
1:dc68ad8:         sendMessage("queue.B", "test 1");
1:dc68ad8: 
1:dc68ad8:         broker.getAdminView().removeQueue("queue.A");
1:dc68ad8: 
1:dc68ad8:         sendMessage("queue.B", "test 1");
1:dc68ad8: 
1:dc68ad8:         Destination destination2 = broker.getDestination(new ActiveMQQueue("queue.B"));
1:dc68ad8:         assertNotNull(destination2);
1:dc68ad8:         assertEquals(2, destination2.getMessageStore().getMessageCount());
1:dc68ad8:     }
1:dc68ad8: 
1:ed6c472:     protected KahaDBPersistenceAdapter createStore(boolean delete) throws IOException {
1:ed6c472:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:ed6c472:         kaha.setJournalMaxFileLength(maxFileLength);
1:ed6c472:         kaha.setCleanupInterval(5000);
1:ed6c472:         if (delete) {
1:ed6c472:             kaha.deleteAllMessages();
1:ed6c472:         }
1:ed6c472:         return kaha;
1:ed6c472:     }
1:ed6c472: 
1:ed6c472:     public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception {
1:ed6c472: 
1:ed6c472:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:ed6c472:         if (deleteAllMessages) {
1:ed6c472:             multiKahaDBPersistenceAdapter.deleteAllMessages();
1:ed6c472:         }
1:ed6c472:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1:ed6c472: 
1:ed6c472:         adapters.add(createFilteredKahaDBByDestinationPrefix(PREFIX_DESTINATION_NAME, deleteAllMessages));
1:ed6c472:         adapters.add(createFilteredKahaDBByDestinationPrefix(PREFIX_DESTINATION_NAME + "2", deleteAllMessages));
1:ed6c472:         adapters.add(createFilteredKahaDBByDestinationPrefix(null, deleteAllMessages));
1:ed6c472: 
1:ed6c472:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:ed6c472:         broker = createBroker(multiKahaDBPersistenceAdapter);
1:ed6c472:     }
1:ed6c472: 
1:ed6c472:     /**
1:ed6c472:      * Create filtered KahaDB adapter by destination prefix.
1:ed6c472:      *
1:ed6c472:      * @param destinationPrefix
1:ed6c472:      * @param deleteAllMessages
1:ed6c472:      * @return
1:ed6c472:      * @throws IOException
1:ed6c472:      */
1:ed6c472: 	private FilteredKahaDBPersistenceAdapter createFilteredKahaDBByDestinationPrefix(String destinationPrefix, boolean deleteAllMessages)
1:ed6c472: 			throws IOException {
1:ed6c472: 		FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter();
1:ed6c472:         template.setPersistenceAdapter(createStore(deleteAllMessages));
1:ed6c472:         if (destinationPrefix != null) {
1:ed6c472:         	template.setQueue(destinationPrefix + ".>");
1:ed6c472:         }
1:ed6c472: 		return template;
1:ed6c472: 	}
1:ed6c472: 
1:ed6c472: 
1:ed6c472: 	/**
1:ed6c472: 	 * Send message to particular destination.
1:ed6c472: 	 *
1:ed6c472: 	 * @param destinationName
1:ed6c472: 	 * @param message
1:ed6c472: 	 * @throws JMSException
1:ed6c472: 	 */
1:ed6c472: 	private void sendMessage(String destinationName, String message) throws JMSException {
1:ed6c472:         ActiveMQConnectionFactory f = new ActiveMQConnectionFactory("vm://localhost");
1:ed6c472:         f.setAlwaysSyncSend(true);
1:ed6c472:         Connection c = f.createConnection();
1:ed6c472:         c.start();
1:ed6c472:         Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ed6c472:         MessageProducer producer = s.createProducer(new ActiveMQQueue(destinationName));
1:ed6c472:         producer.send(s.createTextMessage(message));
1:ed6c472:         producer.close();
1:ed6c472:         s.close();
1:ed6c472:         c.stop();
1:ed6c472: 	}
1:ed6c472: 
1:ed6c472: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:dc68ad8
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testRemoveOfOneDestFromSharedPa() throws Exception {
1:         // Ensure we have an Admin View.
1:         assertTrue("Broker doesn't have an Admin View.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return (broker.getAdminView()) != null;
1:             }
1:         }));
1: 
1:         // will both use first persistence adapter
1:         sendMessage("queue.A", "test 1");
1:         sendMessage("queue.B", "test 1");
1: 
1:         broker.getAdminView().removeQueue("queue.A");
1: 
1:         sendMessage("queue.B", "test 1");
1: 
1:         Destination destination2 = broker.getDestination(new ActiveMQQueue("queue.B"));
1:         assertNotNull(destination2);
1:         assertEquals(2, destination2.getMessageStore().getMessageCount());
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:ed6c472
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4407Test {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ4407Test.class);
1:     private final static int maxFileLength = 1024*1024*32;
1: 
1:     private final static String PREFIX_DESTINATION_NAME = "queue";
1: 
1:     private final static String DESTINATION_NAME = PREFIX_DESTINATION_NAME + ".test";
1:     private final static String DESTINATION_NAME_2 = PREFIX_DESTINATION_NAME + "2.test";
1:     private final static String DESTINATION_NAME_3 = PREFIX_DESTINATION_NAME + "3.test";
1: 
1:     BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         prepareBrokerWithMultiStore(true);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     protected BrokerService createBroker(PersistenceAdapter kaha) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(true);
1:         broker.setBrokerName("localhost");
1:         broker.setPersistenceAdapter(kaha);
1:         return broker;
1:     }
1: 
1:     @Test
1:     public void testRestartAfterQueueDelete() throws Exception {
1: 
1:         // Ensure we have an Admin View.
1:         assertTrue("Broker doesn't have an Admin View.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return (broker.getAdminView()) != null;
1:             }
1:         }));
1: 
1: 
1:         LOG.info("Adding destinations: {}, {}, {}", new Object[] {DESTINATION_NAME, DESTINATION_NAME_3, DESTINATION_NAME_3});
1:         sendMessage(DESTINATION_NAME, "test 1");
1:         sendMessage(DESTINATION_NAME_2, "test 1");
1:         sendMessage(DESTINATION_NAME_3, "test 1");
1: 
1:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME)));
1:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_2)));
1:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_3)));
1: 
1: 
1:         LOG.info("Removing destination: {}", DESTINATION_NAME_2);
1:         broker.getAdminView().removeQueue(DESTINATION_NAME_2);
1: 
1:         LOG.info("Recreating destination: {}", DESTINATION_NAME_2);
1:         sendMessage(DESTINATION_NAME_2, "test 1");
1: 
1:         Destination destination2 = broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_2));
1:         assertNotNull(destination2);
1:         assertEquals(1, destination2.getMessageStore().getMessageCount());
1:     }
1: 
1:     protected KahaDBPersistenceAdapter createStore(boolean delete) throws IOException {
1:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:         kaha.setJournalMaxFileLength(maxFileLength);
1:         kaha.setCleanupInterval(5000);
1:         if (delete) {
1:             kaha.deleteAllMessages();
1:         }
1:         return kaha;
1:     }
1: 
1:     public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception {
1: 
1:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         if (deleteAllMessages) {
1:             multiKahaDBPersistenceAdapter.deleteAllMessages();
1:         }
1:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1: 
1:         adapters.add(createFilteredKahaDBByDestinationPrefix(PREFIX_DESTINATION_NAME, deleteAllMessages));
1:         adapters.add(createFilteredKahaDBByDestinationPrefix(PREFIX_DESTINATION_NAME + "2", deleteAllMessages));
1:         adapters.add(createFilteredKahaDBByDestinationPrefix(null, deleteAllMessages));
1: 
1:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:         broker = createBroker(multiKahaDBPersistenceAdapter);
1:     }
1: 
1:     /**
1:      * Create filtered KahaDB adapter by destination prefix.
1:      *
1:      * @param destinationPrefix
1:      * @param deleteAllMessages
1:      * @return
1:      * @throws IOException
1:      */
1: 	private FilteredKahaDBPersistenceAdapter createFilteredKahaDBByDestinationPrefix(String destinationPrefix, boolean deleteAllMessages)
1: 			throws IOException {
1: 		FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter();
1:         template.setPersistenceAdapter(createStore(deleteAllMessages));
1:         if (destinationPrefix != null) {
1:         	template.setQueue(destinationPrefix + ".>");
1:         }
1: 		return template;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Send message to particular destination.
1: 	 *
1: 	 * @param destinationName
1: 	 * @param message
1: 	 * @throws JMSException
1: 	 */
1: 	private void sendMessage(String destinationName, String message) throws JMSException {
1:         ActiveMQConnectionFactory f = new ActiveMQConnectionFactory("vm://localhost");
1:         f.setAlwaysSyncSend(true);
1:         Connection c = f.createConnection();
1:         c.start();
1:         Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = s.createProducer(new ActiveMQQueue(destinationName));
1:         producer.send(s.createTextMessage(message));
1:         producer.close();
1:         s.close();
1:         c.stop();
1: 	}
1: 
1: }
============================================================================