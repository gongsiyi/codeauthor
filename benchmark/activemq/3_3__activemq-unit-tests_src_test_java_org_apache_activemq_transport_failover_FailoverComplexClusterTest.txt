1:beda82a: /**
1:91059de:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:91059de:  * contributor license agreements.  See the NOTICE file distributed with
1:91059de:  * this work for additional information regarding copyright ownership.
1:91059de:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:91059de:  * (the "License"); you may not use this file except in compliance with
1:91059de:  * the License.  You may obtain a copy of the License at
1:beda82a:  *
1:91059de:  *      http://www.apache.org/licenses/LICENSE-2.0
4:beda82a:  *
1:91059de:  * Unless required by applicable law or agreed to in writing, software
1:91059de:  * distributed under the License is distributed on an "AS IS" BASIS,
1:91059de:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:91059de:  * See the License for the specific language governing permissions and
1:91059de:  * limitations under the License.
1:beda82a:  */
1:91059de: package org.apache.activemq.transport.failover;
14:91059de: 
1:3a8eb74: import org.apache.activemq.broker.TransportConnector;
1:cf62d58: import org.slf4j.Logger;
1:cf62d58: import org.slf4j.LoggerFactory;
1:3a8eb74: 
1:beda82a: 
1:beda82a: /**
1:91059de:  * Complex cluster test that will exercise the dynamic failover capabilities of
1:91059de:  * a network of brokers. Using a networking of 3 brokers where the 3rd broker is
1:91059de:  * removed and then added back in it is expected in each test that the number of
1:91059de:  * connections on the client should start with 3, then have two after the 3rd
1:91059de:  * broker is removed and then show 3 after the 3rd broker is reintroduced.
1:beda82a:  */
1:91059de: public class FailoverComplexClusterTest extends FailoverClusterTestSupport {
1:2536c03:     protected final Logger LOG = LoggerFactory.getLogger(FailoverComplexClusterTest.class);
1:91059de: 
1:3a8eb74:     private static final String BROKER_A_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61616";
1:3a8eb74:     private static final String BROKER_B_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61617";
1:3a8eb74:     private static final String BROKER_C_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61618";
1:3a8eb74:     private static final String BROKER_A_NOB_TC_ADDRESS = "tcp://127.0.0.1:61626";
1:3a8eb74:     private static final String BROKER_B_NOB_TC_ADDRESS = "tcp://127.0.0.1:61627";
1:3a8eb74:     private static final String BROKER_C_NOB_TC_ADDRESS = "tcp://127.0.0.1:61628";
1:91059de:     private static final String BROKER_A_NAME = "BROKERA";
1:91059de:     private static final String BROKER_B_NAME = "BROKERB";
1:91059de:     private static final String BROKER_C_NAME = "BROKERC";
1:91059de: 
1:beda82a:     /**
1:3a8eb74:      * Basic dynamic failover 3 broker test
1:3a8eb74:      *
1:beda82a:      * @throws Exception
1:beda82a:      */
1:91059de:     public void testThreeBrokerClusterSingleConnectorBasic() throws Exception {
1:91059de: 
1:beda82a:         initSingleTcBroker("", null, null);
1:91059de: 
2:91059de:         Thread.sleep(2000);
1:91059de: 
1:91059de:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:91059de:         createClients();
1:19cb932:         Thread.sleep(2000);
1:91059de: 
1:beda82a:         runTests(false, null, null, null);
1:91059de:     }
1:91059de: 
1:3a8eb74:     /**
1:3a8eb74:      * Tests a 3 broker configuration to ensure that the backup is random and
1:3a8eb74:      * supported in a cluster. useExponentialBackOff is set to false and
1:3a8eb74:      * maxReconnectAttempts is set to 1 to move through the list quickly for
1:3a8eb74:      * this test.
1:3a8eb74:      *
1:3a8eb74:      * @throws Exception
1:3a8eb74:      */
1:beda82a:     public void testThreeBrokerClusterSingleConnectorBackupFailoverConfig() throws Exception {
1:91059de: 
1:beda82a:         initSingleTcBroker("", null, null);
1:91059de: 
1:19cb932:         Thread.sleep(2000);
1:91059de: 
1:beda82a:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?backup=true&backupPoolSize=2&useExponentialBackOff=false&initialReconnectDelay=500");
1:91059de:         createClients();
1:19cb932:         Thread.sleep(2000);
1:91059de: 
1:beda82a:         runTests(false, null, null, null);
1:91059de:     }
1:91059de: 
1:3a8eb74:     /**
1:3a8eb74:      * Tests a 3 broker cluster that passes in connection params on the
1:3a8eb74:      * transport connector. Prior versions of AMQ passed the TC connection
1:3a8eb74:      * params to the client and this should not happen. The chosen param is not
1:3a8eb74:      * compatible with the client and will throw an error if used.
1:3a8eb74:      *
1:3a8eb74:      * @throws Exception
1:3a8eb74:      */
1:91059de:     public void testThreeBrokerClusterSingleConnectorWithParams() throws Exception {
1:91059de: 
1:beda82a:         initSingleTcBroker("?transport.closeAsync=false", null, null);
1:beda82a: 
1:91059de:         Thread.sleep(2000);
1:91059de:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:91059de:         createClients();
1:91059de:         Thread.sleep(2000);
1:91059de: 
1:beda82a:         runTests(false, null, null, null);
1:91059de:     }
1:91059de: 
1:beda82a:     /**
1:beda82a:      * Tests a 3 broker cluster using a cluster filter of *
1:3a8eb74:      *
3:beda82a:      * @throws Exception
1:beda82a:      */
1:beda82a:     public void testThreeBrokerClusterWithClusterFilter() throws Exception {
1:beda82a: 
1:beda82a:         initSingleTcBroker("?transport.closeAsync=false", null, null);
1:beda82a: 
1:beda82a:         Thread.sleep(2000);
1:beda82a:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:beda82a:         createClients();
1:beda82a: 
1:beda82a:         runTests(false, null, "*", null);
1:beda82a:     }
1:beda82a: 
1:3a8eb74:     /**
1:3a8eb74:      * Test to verify that a broker with multiple transport connections only the
1:3a8eb74:      * one marked to update clients is propagate
1:3a8eb74:      *
1:3a8eb74:      * @throws Exception
1:3a8eb74:      */
1:91059de:     public void testThreeBrokerClusterMultipleConnectorBasic() throws Exception {
1:91059de: 
1:91059de:         initMultiTcCluster("", null);
1:91059de: 
1:91059de:         Thread.sleep(2000);
1:91059de: 
1:91059de:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:91059de:         createClients();
1:91059de:         Thread.sleep(2000);
1:91059de: 
1:beda82a:         runTests(true, null, null, null);
1:91059de:     }
1:91059de: 
1:3a8eb74:     /**
1:3a8eb74:      * Test to verify the reintroduction of the A Broker
1:3a8eb74:      *
1:3a8eb74:      * @throws Exception
1:3a8eb74:      */
1:19cb932:     public void testOriginalBrokerRestart() throws Exception {
1:beda82a:         initSingleTcBroker("", null, null);
1:19cb932: 
1:19cb932:         Thread.sleep(2000);
1:19cb932: 
1:19cb932:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:19cb932:         createClients();
1:19cb932: 
1:19cb932:         assertClientsConnectedToThreeBrokers();
1:19cb932: 
1:19cb932:         getBroker(BROKER_A_NAME).stop();
1:19cb932:         getBroker(BROKER_A_NAME).waitUntilStopped();
1:19cb932:         removeBroker(BROKER_A_NAME);
1:19cb932: 
1:19cb932:         assertClientsConnectedToTwoBrokers();
1:beda82a: 
1:beda82a:         createBrokerA(false, null, null, null);
1:19cb932:         getBroker(BROKER_A_NAME).waitUntilStarted();
1:19cb932: 
1:91059de:         assertClientsConnectedToThreeBrokers();
1:91059de:     }
1:19cb932: 
1:3a8eb74:     /**
1:3a8eb74:      * Test to ensure clients are evenly to all available brokers in the
1:3a8eb74:      * network.
1:3a8eb74:      *
1:3a8eb74:      * @throws Exception
1:3a8eb74:      */
1:beda82a:     public void testThreeBrokerClusterClientDistributions() throws Exception {
1:beda82a: 
1:beda82a:         initSingleTcBroker("", null, null);
1:beda82a: 
1:beda82a:         Thread.sleep(2000);
1:beda82a:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false&initialReconnectDelay=500");
1:beda82a:         createClients(100);
1:beda82a:         Thread.sleep(5000);
1:3a8eb74: 
1:beda82a:         runClientDistributionTests(false, null, null, null);
1:beda82a:     }
1:beda82a: 
1:3a8eb74:     /**
1:3a8eb74:      * Test to verify that clients are distributed with no less than 20% of the
1:3a8eb74:      * clients on any one broker.
1:3a8eb74:      *
1:3a8eb74:      * @throws Exception
1:3a8eb74:      */
1:beda82a:     public void testThreeBrokerClusterDestinationFilter() throws Exception {
1:beda82a: 
1:beda82a:         initSingleTcBroker("", null, null);
1:beda82a: 
1:beda82a:         Thread.sleep(2000);
1:beda82a:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:beda82a:         createClients();
1:beda82a: 
1:beda82a:         runTests(false, null, null, "Queue.TEST.FOO.>");
1:beda82a:     }
1:beda82a: 
1:3a8eb74:     public void testFailOverWithUpdateClientsOnRemove() throws Exception{
1:3a8eb74:         // Broker A
1:3a8eb74:         addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:3a8eb74:         TransportConnector connectorA = getBroker(BROKER_A_NAME).addConnector(BROKER_A_CLIENT_TC_ADDRESS);
1:3a8eb74:         connectorA.setName("openwire");
1:3a8eb74:         connectorA.setRebalanceClusterClients(true);
1:3a8eb74:         connectorA.setUpdateClusterClients(true);
1:3a8eb74:         connectorA.setUpdateClusterClientsOnRemove(true); //If set to false the test succeeds.
1:3a8eb74:         addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:3a8eb74:         getBroker(BROKER_A_NAME).start();
1:beda82a: 
1:3a8eb74:         // Broker B
1:3a8eb74:         addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:3a8eb74:         TransportConnector connectorB = getBroker(BROKER_B_NAME).addConnector(BROKER_B_CLIENT_TC_ADDRESS);
1:3a8eb74:         connectorB.setName("openwire");
1:3a8eb74:         connectorB.setRebalanceClusterClients(true);
1:3a8eb74:         connectorB.setUpdateClusterClients(true);
1:3a8eb74:         connectorB.setUpdateClusterClientsOnRemove(true); //If set to false the test succeeds.
1:3a8eb74:         addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:3a8eb74:         getBroker(BROKER_B_NAME).start();
1:3a8eb74: 
1:3a8eb74:         getBroker(BROKER_B_NAME).waitUntilStarted();
1:3a8eb74:         Thread.sleep(1000);
1:3a8eb74: 
1:3a8eb74:         // create client connecting only to A. It should receive broker B address whet it connects to A.
1:3a8eb74:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=true");
1:3a8eb74:         createClients(1);
1:3a8eb74:         Thread.sleep(5000);
1:3a8eb74: 
1:3a8eb74:         // We stop broker A.
1:cf62d58:         logger.info("Stopping broker A whose address is: {}", BROKER_A_CLIENT_TC_ADDRESS);
1:3a8eb74:         getBroker(BROKER_A_NAME).stop();
1:3a8eb74:         getBroker(BROKER_A_NAME).waitUntilStopped();
1:3a8eb74:         Thread.sleep(5000);
1:3a8eb74: 
1:3a8eb74:         // Client should failover to B.
1:3a8eb74:         assertAllConnectedTo(BROKER_B_CLIENT_TC_ADDRESS);
1:3a8eb74:     }
1:3a8eb74: 
1:3a8eb74:     /**
1:3a8eb74:      * Runs a 3 Broker dynamic failover test: <br/>
1:3a8eb74:      * <ul>
1:3a8eb74:      * <li>asserts clients are distributed across all 3 brokers</li>
1:3a8eb74:      * <li>asserts clients are distributed across 2 brokers after removing the 3rd</li>
1:3a8eb74:      * <li>asserts clients are distributed across all 3 brokers after
1:3a8eb74:      * reintroducing the 3rd broker</li>
1:3a8eb74:      * </ul>
1:3a8eb74:      *
1:3a8eb74:      * @param multi
1:3a8eb74:      * @param tcParams
1:3a8eb74:      * @param clusterFilter
1:3a8eb74:      * @param destinationFilter
1:3a8eb74:      * @throws Exception
1:3a8eb74:      * @throws InterruptedException
1:3a8eb74:      */
1:beda82a:     private void runTests(boolean multi, String tcParams, String clusterFilter, String destinationFilter) throws Exception, InterruptedException {
1:19cb932:         assertClientsConnectedToThreeBrokers();
1:beda82a: 
1:2536c03:         LOG.info("Stopping BrokerC in prep for restart");
1:91059de:         getBroker(BROKER_C_NAME).stop();
1:91059de:         getBroker(BROKER_C_NAME).waitUntilStopped();
1:91059de:         removeBroker(BROKER_C_NAME);
1:19cb932: 
1:91059de:         assertClientsConnectedToTwoBrokers();
1:19cb932: 
1:2536c03:         LOG.info("Recreating BrokerC after stop");
1:beda82a:         createBrokerC(multi, tcParams, clusterFilter, destinationFilter);
1:91059de:         getBroker(BROKER_C_NAME).waitUntilStarted();
1:beda82a: 
1:91059de:         assertClientsConnectedToThreeBrokers();
1:19cb932:     }
1:beda82a: 
1:beda82a:     /**
1:beda82a:      * @param multi
1:beda82a:      * @param tcParams
1:beda82a:      * @param clusterFilter
1:beda82a:      * @param destinationFilter
1:beda82a:      * @throws Exception
1:beda82a:      * @throws InterruptedException
1:beda82a:      */
1:beda82a:     private void runClientDistributionTests(boolean multi, String tcParams, String clusterFilter, String destinationFilter) throws Exception, InterruptedException {
1:beda82a:         assertClientsConnectedToThreeBrokers();
1:beda82a:         assertClientsConnectionsEvenlyDistributed(.25);
1:beda82a: 
1:beda82a:         getBroker(BROKER_C_NAME).stop();
1:beda82a:         getBroker(BROKER_C_NAME).waitUntilStopped();
1:beda82a:         removeBroker(BROKER_C_NAME);
1:beda82a: 
1:beda82a:         assertClientsConnectedToTwoBrokers();
1:beda82a:         assertClientsConnectionsEvenlyDistributed(.35);
1:beda82a: 
1:beda82a:         createBrokerC(multi, tcParams, clusterFilter, destinationFilter);
1:beda82a:         getBroker(BROKER_C_NAME).waitUntilStarted();
1:beda82a: 
1:beda82a:         assertClientsConnectedToThreeBrokers();
1:beda82a:         assertClientsConnectionsEvenlyDistributed(.20);
1:beda82a:     }
1:91059de: 
1:91059de:     @Override
1:91059de:     protected void setUp() throws Exception {
1:91059de:     }
1:91059de: 
1:91059de:     @Override
1:91059de:     protected void tearDown() throws Exception {
1:91059de:         shutdownClients();
1:91059de:         Thread.sleep(2000);
1:beda82a:         destroyBrokerCluster();
1:91059de:     }
1:91059de: 
1:beda82a:     private void initSingleTcBroker(String params, String clusterFilter, String destinationFilter) throws Exception {
1:beda82a:         createBrokerA(false, params, clusterFilter, null);
1:beda82a:         createBrokerB(false, params, clusterFilter, null);
1:beda82a:         createBrokerC(false, params, clusterFilter, null);
1:91059de:         getBroker(BROKER_C_NAME).waitUntilStarted();
1:91059de:     }
1:91059de: 
1:91059de:     private void initMultiTcCluster(String params, String clusterFilter) throws Exception {
1:beda82a:         createBrokerA(true, params, clusterFilter, null);
1:beda82a:         createBrokerB(true, params, clusterFilter, null);
1:beda82a:         createBrokerC(true, params, clusterFilter, null);
1:91059de:         getBroker(BROKER_C_NAME).waitUntilStarted();
1:91059de:     }
1:3a8eb74: 
1:beda82a:     private void createBrokerA(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
1:3a8eb74:         final String tcParams = (params == null)?"":params;
1:91059de:         if (getBroker(BROKER_A_NAME) == null) {
1:91059de:             addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:beda82a:             addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS + tcParams, true);
1:91059de:             if (multi) {
1:beda82a:                 addTransportConnector(getBroker(BROKER_A_NAME), "network", BROKER_A_NOB_TC_ADDRESS + tcParams, false);
1:91059de:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:91059de:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_C_Bridge", "static://(" + BROKER_C_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:91059de:             } else {
1:91059de:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:91059de:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_C_Bridge", "static://(" + BROKER_C_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:91059de:             }
1:91059de:             getBroker(BROKER_A_NAME).start();
1:91059de:         }
1:91059de:     }
1:91059de: 
1:beda82a:     private void createBrokerB(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
1:3a8eb74:         final String tcParams = (params == null)?"":params;
1:91059de:         if (getBroker(BROKER_B_NAME) == null) {
1:91059de:             addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:beda82a:             addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS + tcParams, true);
1:91059de:             if (multi) {
1:beda82a:                 addTransportConnector(getBroker(BROKER_B_NAME), "network", BROKER_B_NOB_TC_ADDRESS + tcParams, false);
1:91059de:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:91059de:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_C_Bridge", "static://(" + BROKER_C_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:91059de:             } else {
1:91059de:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:91059de:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_C_Bridge", "static://(" + BROKER_C_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:91059de:             }
1:91059de:             getBroker(BROKER_B_NAME).start();
1:91059de:         }
1:91059de:     }
1:91059de: 
1:beda82a:     private void createBrokerC(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
1:3a8eb74:         final String tcParams = (params == null)?"":params;
1:91059de:         if (getBroker(BROKER_C_NAME) == null) {
1:91059de:             addBroker(BROKER_C_NAME, createBroker(BROKER_C_NAME));
1:beda82a:             addTransportConnector(getBroker(BROKER_C_NAME), "openwire", BROKER_C_CLIENT_TC_ADDRESS + tcParams, true);
1:91059de:             if (multi) {
1:beda82a:                 addTransportConnector(getBroker(BROKER_C_NAME), "network", BROKER_C_NOB_TC_ADDRESS + tcParams, false);
1:91059de:                 addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_A_Bridge", "static://(" + BROKER_A_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:91059de:                 addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_B_Bridge", "static://(" + BROKER_B_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:91059de:             } else {
1:91059de:                 addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:91059de:                 addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:91059de:             }
1:91059de:             getBroker(BROKER_C_NAME).start();
1:91059de:         }
1:91059de:     }
1:91059de: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:1a3ade0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:2536c03
/////////////////////////////////////////////////////////////////////////
1:     protected final Logger LOG = LoggerFactory.getLogger(FailoverComplexClusterTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Stopping BrokerC in prep for restart");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Recreating BrokerC after stop");
commit:cf62d58
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:         logger.info("Stopping broker A whose address is: {}", BROKER_A_CLIENT_TC_ADDRESS);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3a8eb74
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
0: import org.mortbay.log.Log;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final String BROKER_A_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61616";
1:     private static final String BROKER_B_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61617";
1:     private static final String BROKER_C_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61618";
1:     private static final String BROKER_A_NOB_TC_ADDRESS = "tcp://127.0.0.1:61626";
1:     private static final String BROKER_B_NOB_TC_ADDRESS = "tcp://127.0.0.1:61627";
1:     private static final String BROKER_C_NOB_TC_ADDRESS = "tcp://127.0.0.1:61628";
1:      * Basic dynamic failover 3 broker test
1:      *
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tests a 3 broker configuration to ensure that the backup is random and
1:      * supported in a cluster. useExponentialBackOff is set to false and
1:      * maxReconnectAttempts is set to 1 to move through the list quickly for
1:      * this test.
1:      *
1:      * @throws Exception
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Tests a 3 broker cluster that passes in connection params on the
1:      * transport connector. Prior versions of AMQ passed the TC connection
1:      * params to the client and this should not happen. The chosen param is not
1:      * compatible with the client and will throw an error if used.
1:      *
1:      * @throws Exception
1:      */
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test to verify that a broker with multiple transport connections only the
1:      * one marked to update clients is propagate
1:      *
1:      * @throws Exception
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test to verify the reintroduction of the A Broker
1:      *
1:      * @throws Exception
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test to ensure clients are evenly to all available brokers in the
1:      * network.
1:      *
1:      * @throws Exception
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test to verify that clients are distributed with no less than 20% of the
1:      * clients on any one broker.
1:      *
1:      * @throws Exception
1:      */
/////////////////////////////////////////////////////////////////////////
1:     public void testFailOverWithUpdateClientsOnRemove() throws Exception{
1:         // Broker A
1:         addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:         TransportConnector connectorA = getBroker(BROKER_A_NAME).addConnector(BROKER_A_CLIENT_TC_ADDRESS);
1:         connectorA.setName("openwire");
1:         connectorA.setRebalanceClusterClients(true);
1:         connectorA.setUpdateClusterClients(true);
1:         connectorA.setUpdateClusterClientsOnRemove(true); //If set to false the test succeeds.
1:         addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         getBroker(BROKER_A_NAME).start();
1:         // Broker B
1:         addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:         TransportConnector connectorB = getBroker(BROKER_B_NAME).addConnector(BROKER_B_CLIENT_TC_ADDRESS);
1:         connectorB.setName("openwire");
1:         connectorB.setRebalanceClusterClients(true);
1:         connectorB.setUpdateClusterClients(true);
1:         connectorB.setUpdateClusterClientsOnRemove(true); //If set to false the test succeeds.
1:         addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         getBroker(BROKER_B_NAME).start();
1: 
1:         getBroker(BROKER_B_NAME).waitUntilStarted();
1:         Thread.sleep(1000);
1: 
1:         // create client connecting only to A. It should receive broker B address whet it connects to A.
1:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=true");
1:         createClients(1);
1:         Thread.sleep(5000);
1: 
1:         // We stop broker A.
0:         Log.info("Stopping broker A whose address is: {}", BROKER_A_CLIENT_TC_ADDRESS);
1:         getBroker(BROKER_A_NAME).stop();
1:         getBroker(BROKER_A_NAME).waitUntilStopped();
1:         Thread.sleep(5000);
1: 
1:         // Client should failover to B.
1:         assertAllConnectedTo(BROKER_B_CLIENT_TC_ADDRESS);
1:     }
1: 
1:     /**
1:      * Runs a 3 Broker dynamic failover test: <br/>
1:      * <ul>
1:      * <li>asserts clients are distributed across all 3 brokers</li>
1:      * <li>asserts clients are distributed across 2 brokers after removing the 3rd</li>
1:      * <li>asserts clients are distributed across all 3 brokers after
1:      * reintroducing the 3rd broker</li>
1:      * </ul>
1:      *
1:      * @param multi
1:      * @param tcParams
1:      * @param clusterFilter
1:      * @param destinationFilter
1:      * @throws Exception
1:      * @throws InterruptedException
1:      */
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         final String tcParams = (params == null)?"":params;
/////////////////////////////////////////////////////////////////////////
1:         final String tcParams = (params == null)?"":params;
/////////////////////////////////////////////////////////////////////////
1:         final String tcParams = (params == null)?"":params;
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:beda82a
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Basic dynamic failover 3 broker test 
1:      * 
1:      * @throws Exception
1:      */
1:         initSingleTcBroker("", null, null);
/////////////////////////////////////////////////////////////////////////
1:         runTests(false, null, null, null);
1: 	/**
0: 	 * Tests a 3 broker configuration to ensure that the backup is random and
0: 	 * supported in a cluster. useExponentialBackOff is set to false and
0: 	 * maxReconnectAttempts is set to 1 to move through the list quickly for
0: 	 * this test.
1: 	 * 
1: 	 * @throws Exception
1: 	 */
1:     public void testThreeBrokerClusterSingleConnectorBackupFailoverConfig() throws Exception {
1:         initSingleTcBroker("", null, null);
1:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?backup=true&backupPoolSize=2&useExponentialBackOff=false&initialReconnectDelay=500");
1:         runTests(false, null, null, null);
1: 	/**
0: 	 * Tests a 3 broker cluster that passes in connection params on the
0: 	 * transport connector. Prior versions of AMQ passed the TC connection
0: 	 * params to the client and this should not happen. The chosen param is not
0: 	 * compatible with the client and will throw an error if used.
1: 	 * 
1: 	 * @throws Exception
1: 	 */
1:         initSingleTcBroker("?transport.closeAsync=false", null, null);
1:         runTests(false, null, null, null);
1: 
1:     /**
1:      * Tests a 3 broker cluster using a cluster filter of *
1:      * 
1:      * @throws Exception
1:      */
1:     public void testThreeBrokerClusterWithClusterFilter() throws Exception {
1: 
1:         initSingleTcBroker("?transport.closeAsync=false", null, null);
1: 
1:         Thread.sleep(2000);
1:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:         createClients();
1: 
1:         runTests(false, null, "*", null);
1:     }
1: 
1: 	/**
0: 	 * Test to verify that a broker with multiple transport connections only the
0: 	 * one marked to update clients is propagate
1: 	 * 
1: 	 * @throws Exception
1: 	 */
/////////////////////////////////////////////////////////////////////////
1:         runTests(true, null, null, null);
0: 	/**
0: 	 * Test to verify the reintroduction of the A Broker
0: 	 * 
0: 	 * @throws Exception
0: 	 */
1:         initSingleTcBroker("", null, null);
/////////////////////////////////////////////////////////////////////////
1:         createBrokerA(false, null, null, null);
0: 	/**
0: 	 * Test to ensure clients are evenly to all available brokers in the
0: 	 * network.
0: 	 * 
0: 	 * @throws Exception
0: 	 */
1:     public void testThreeBrokerClusterClientDistributions() throws Exception {
1:         initSingleTcBroker("", null, null);
1: 
1:         Thread.sleep(2000);
1:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false&initialReconnectDelay=500");
1:         createClients(100);
1:         Thread.sleep(5000);
1: 
1:         runClientDistributionTests(false, null, null, null);
1:     }
1: 
0: 	/**
0: 	 * Test to verify that clients are distributed with no less than 20% of the
0: 	 * clients on any one broker.
0: 	 * 
0: 	 * @throws Exception
0: 	 */
1:     public void testThreeBrokerClusterDestinationFilter() throws Exception {
1: 
1:         initSingleTcBroker("", null, null);
1: 
1:         Thread.sleep(2000);
1:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:         createClients();
1: 
1:         runTests(false, null, null, "Queue.TEST.FOO.>");
1:     }
1: 
1: 
0: 	/**
0: 	 * Runs a 3 Broker dynamic failover test: <br/>
0: 	 * <ul>
0: 	 * <li>asserts clients are distributed across all 3 brokers</li>
0: 	 * <li>asserts clients are distributed across 2 brokers after removing the 3rd</li>
0: 	 * <li>asserts clients are distributed across all 3 brokers after
0: 	 * reintroducing the 3rd broker</li>
0: 	 * </ul>
0: 	 * 
1: 	 * @param multi
1: 	 * @param tcParams
1: 	 * @param clusterFilter
1: 	 * @param destinationFilter
0: 	 * @throws Exception
1: 	 * @throws InterruptedException
0: 	 */
1:     private void runTests(boolean multi, String tcParams, String clusterFilter, String destinationFilter) throws Exception, InterruptedException {
/////////////////////////////////////////////////////////////////////////
1:         
1:         createBrokerC(multi, tcParams, clusterFilter, destinationFilter);
1:     
1: 
0:     /**
0:      * @param multi
0:      * @param tcParams
0:      * @param clusterFilter
0:      * @param destinationFilter
0:      * @throws Exception
0:      * @throws InterruptedException
0:      */
1:     private void runClientDistributionTests(boolean multi, String tcParams, String clusterFilter, String destinationFilter) throws Exception, InterruptedException {
1:         assertClientsConnectedToThreeBrokers();
1:         assertClientsConnectionsEvenlyDistributed(.25);
1: 
1:         getBroker(BROKER_C_NAME).stop();
1:         getBroker(BROKER_C_NAME).waitUntilStopped();
1:         removeBroker(BROKER_C_NAME);
1: 
0:         Thread.sleep(5000);
1: 
1:         assertClientsConnectedToTwoBrokers();
1:         assertClientsConnectionsEvenlyDistributed(.35);
1: 
1:         createBrokerC(multi, tcParams, clusterFilter, destinationFilter);
1:         getBroker(BROKER_C_NAME).waitUntilStarted();
0:         Thread.sleep(5000);
1: 
1:         assertClientsConnectedToThreeBrokers();
1:         assertClientsConnectionsEvenlyDistributed(.20);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         destroyBrokerCluster();
1:     private void initSingleTcBroker(String params, String clusterFilter, String destinationFilter) throws Exception {
1:         createBrokerA(false, params, clusterFilter, null);
1:         createBrokerB(false, params, clusterFilter, null);
1:         createBrokerC(false, params, clusterFilter, null);
1:         createBrokerA(true, params, clusterFilter, null);
1:         createBrokerB(true, params, clusterFilter, null);
1:         createBrokerC(true, params, clusterFilter, null);
1:     private void createBrokerA(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
0:     	final String tcParams = (params == null)?"":params;
1:             addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS + tcParams, true);
1:                 addTransportConnector(getBroker(BROKER_A_NAME), "network", BROKER_A_NOB_TC_ADDRESS + tcParams, false);
/////////////////////////////////////////////////////////////////////////
1:     private void createBrokerB(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
0:     	final String tcParams = (params == null)?"":params;
1:             addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS + tcParams, true);
1:                 addTransportConnector(getBroker(BROKER_B_NAME), "network", BROKER_B_NOB_TC_ADDRESS + tcParams, false);
/////////////////////////////////////////////////////////////////////////
1:     private void createBrokerC(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception {
0:     	final String tcParams = (params == null)?"":params;
1:             addTransportConnector(getBroker(BROKER_C_NAME), "openwire", BROKER_C_CLIENT_TC_ADDRESS + tcParams, true);
1:                 addTransportConnector(getBroker(BROKER_C_NAME), "network", BROKER_C_NOB_TC_ADDRESS + tcParams, false);
commit:19cb932
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(2000);
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(2000);
1:     public void testOriginalBrokerRestart() throws Exception {
0:         initSingleTcBroker("", null);
1: 
1:         Thread.sleep(2000);
1: 
1:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:         createClients();
1:         Thread.sleep(2000);
1: 
1:         assertClientsConnectedToThreeBrokers();
1: 
1:         getBroker(BROKER_A_NAME).stop();
1:         getBroker(BROKER_A_NAME).waitUntilStopped();
1:         removeBroker(BROKER_A_NAME);
1: 
0:         Thread.sleep(5000);
1: 
1:         assertClientsConnectedToTwoBrokers();
1: 
0:         createBrokerA(false, "", null);
1:         getBroker(BROKER_A_NAME).waitUntilStarted();
0:         Thread.sleep(5000);
1: 
1:         assertClientsConnectedToThreeBrokers();
1:     }
1: 
commit:91059de
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.transport.failover;
1: 
0: /**
1:  * Complex cluster test that will exercise the dynamic failover capabilities of
1:  * a network of brokers. Using a networking of 3 brokers where the 3rd broker is
1:  * removed and then added back in it is expected in each test that the number of
1:  * connections on the client should start with 3, then have two after the 3rd
1:  * broker is removed and then show 3 after the 3rd broker is reintroduced.
0:  */
1: public class FailoverComplexClusterTest extends FailoverClusterTestSupport {
1: 
0:     private static final String BROKER_A_CLIENT_TC_ADDRESS = "tcp://localhost:61616";
0:     private static final String BROKER_B_CLIENT_TC_ADDRESS = "tcp://localhost:61617";
0:     private static final String BROKER_C_CLIENT_TC_ADDRESS = "tcp://localhost:61618";
0:     private static final String BROKER_A_NOB_TC_ADDRESS = "tcp://localhost:61626";
0:     private static final String BROKER_B_NOB_TC_ADDRESS = "tcp://localhost:61627";
0:     private static final String BROKER_C_NOB_TC_ADDRESS = "tcp://localhost:61628";
1:     private static final String BROKER_A_NAME = "BROKERA";
1:     private static final String BROKER_B_NAME = "BROKERB";
1:     private static final String BROKER_C_NAME = "BROKERC";
1:     
1:     
1: 
1:     public void testThreeBrokerClusterSingleConnectorBasic() throws Exception {
1: 
0:         initSingleTcBroker("", null);
1: 
1:         Thread.sleep(2000);
1: 
1:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:         createClients();
1:         Thread.sleep(2000);
1: 
0:         runTests(false);
1:     }
1: 
1: 
0:     public void testThreeBrokerClusterSingleConnectorBackup() throws Exception {
1: 
0:         initSingleTcBroker("", null);
1: 
1:         Thread.sleep(2000);
1: 
0:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?backup=true&backupPoolSize=2");
1:         createClients();
1:         Thread.sleep(2000);
1: 
0:         runTests(false);
1:     }
1: 
1: 
1:     public void testThreeBrokerClusterSingleConnectorWithParams() throws Exception {
1: 
0:         initSingleTcBroker("?transport.closeAsync=false", null);
1: 
1:         Thread.sleep(2000);
1:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:         createClients();
1: 
0:         runTests(false);
1:     }
1: 
1:     public void testThreeBrokerClusterMultipleConnectorBasic() throws Exception {
1: 
1:         initMultiTcCluster("", null);
1: 
1:         Thread.sleep(2000);
1: 
1:         setClientUrl("failover://(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")");
1:         createClients();
1: 
0:         runTests(true);
1:     }
1: 
1: 
0:     /**
0:      * Runs a 3 tests: <br/>
0:      * <ul>
0:      * <li>asserts clients are distributed across all 3 brokers</li>
0:      * <li>asserts clients are distributed across 2 brokers after removing the 3rd</li>
0:      * <li>asserts clients are distributed across all 3 brokers after reintroducing the 3rd broker</li>
0:      * </ul>
0:      * @throws Exception
0:      * @throws InterruptedException
0:      */
0:     private void runTests(boolean multi) throws Exception, InterruptedException {
1:         assertClientsConnectedToThreeBrokers();
1: 
1:         getBroker(BROKER_C_NAME).stop();
1:         getBroker(BROKER_C_NAME).waitUntilStopped();
1:         removeBroker(BROKER_C_NAME);
1: 
0:         Thread.sleep(5000);
1: 
1:         assertClientsConnectedToTwoBrokers();
1: 
0:         createBrokerC(multi, "", null);
1:         getBroker(BROKER_C_NAME).waitUntilStarted();
0:         Thread.sleep(5000);
1: 
1:         assertClientsConnectedToThreeBrokers();
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         shutdownClients();
0:         destroyBrokerCluster();
1:         Thread.sleep(2000);
1:     }
1: 
0:     private void initSingleTcBroker(String params, String clusterFilter) throws Exception {
0:         createBrokerA(false, params, clusterFilter);
0:         createBrokerB(false, params, clusterFilter);
0:         createBrokerC(false, params, clusterFilter);
1:         getBroker(BROKER_C_NAME).waitUntilStarted();
1:     }
1: 
1:     private void initMultiTcCluster(String params, String clusterFilter) throws Exception {
0:         createBrokerA(true, params, clusterFilter);
0:         createBrokerB(true, params, clusterFilter);
0:         createBrokerC(true, params, clusterFilter);
1:         getBroker(BROKER_C_NAME).waitUntilStarted();
1:     }
1:     
0:     private void createBrokerA(boolean multi, String params, String clusterFilter) throws Exception {
1:         if (getBroker(BROKER_A_NAME) == null) {
1:             addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
0:             addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS + params, true);
1:             if (multi) {
0:                 addTransportConnector(getBroker(BROKER_A_NAME), "network", BROKER_A_NOB_TC_ADDRESS, false);
1:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_C_Bridge", "static://(" + BROKER_C_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:             } else {
1:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:                 addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_C_Bridge", "static://(" + BROKER_C_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:             }
1:             getBroker(BROKER_A_NAME).start();
1:         }
1:     }
1: 
0:     private void createBrokerB(boolean multi, String params, String clusterFilter) throws Exception {
1:         if (getBroker(BROKER_B_NAME) == null) {
1:             addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
0:             addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS + params, true);
1:             if (multi) {
0:                 addTransportConnector(getBroker(BROKER_B_NAME), "network", BROKER_B_NOB_TC_ADDRESS, false);
1:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_C_Bridge", "static://(" + BROKER_C_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:             } else {
1:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:                 addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_C_Bridge", "static://(" + BROKER_C_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:             }
1:             getBroker(BROKER_B_NAME).start();
1:         }
1:     }
1: 
0:     private void createBrokerC(boolean multi, String params, String clusterFilter) throws Exception {
1:         if (getBroker(BROKER_C_NAME) == null) {
1:             addBroker(BROKER_C_NAME, createBroker(BROKER_C_NAME));
0:             addTransportConnector(getBroker(BROKER_C_NAME), "openwire", BROKER_C_CLIENT_TC_ADDRESS + params, true);
1:             if (multi) {
0:                 addTransportConnector(getBroker(BROKER_C_NAME), "network", BROKER_C_NOB_TC_ADDRESS, false);
1:                 addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_A_Bridge", "static://(" + BROKER_A_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:                 addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_B_Bridge", "static://(" + BROKER_B_NOB_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:             } else {
1:                 addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, clusterFilter);
1:                 addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:             }
1:             getBroker(BROKER_C_NAME).start();
1:         }
1:     }
1:     
1: }
============================================================================