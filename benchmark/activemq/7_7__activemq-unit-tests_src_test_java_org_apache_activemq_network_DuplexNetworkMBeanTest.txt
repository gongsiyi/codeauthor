1:f4012c5: /**
1:f4012c5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f4012c5:  * contributor license agreements.  See the NOTICE file distributed with
1:f4012c5:  * this work for additional information regarding copyright ownership.
1:f4012c5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f4012c5:  * (the "License"); you may not use this file except in compliance with
1:f4012c5:  * the License.  You may obtain a copy of the License at
1:3bb7e4a:  *
1:3bb7e4a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3bb7e4a:  *
1:f4012c5:  * Unless required by applicable law or agreed to in writing, software
1:f4012c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f4012c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f4012c5:  * See the License for the specific language governing permissions and
1:f4012c5:  * limitations under the License.
1:f4012c5:  */
1:f4012c5: package org.apache.activemq.network;
1:eabb515: 
1:6b1e874: import org.apache.activemq.ActiveMQConnectionFactory;
1:f4012c5: import org.apache.activemq.broker.BrokerService;
1:da076f4: import org.apache.activemq.broker.jmx.ManagementContext;
1:257a79d: import org.apache.activemq.util.TestUtils;
1:257a79d: import org.junit.Before;
1:0ad3cfc: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e80bf00: 
1:6b1e874: import javax.jms.Connection;
1:6b1e874: import javax.jms.MessageConsumer;
1:6b1e874: import javax.jms.MessageProducer;
1:6b1e874: import javax.jms.Session;
1:6b1e874: import javax.management.MBeanServer;
1:6b1e874: import javax.management.ObjectInstance;
1:6b1e874: import javax.management.ObjectName;
1:6b1e874: import java.net.MalformedURLException;
1:6b1e874: import java.util.List;
1:6b1e874: import java.util.Set;
1:6b1e874: 
1:6b1e874: import static org.junit.Assert.assertEquals;
1:6b1e874: import static org.junit.Assume.assumeNotNull;
1:6b1e874: 
1:e80bf00: public class DuplexNetworkMBeanTest {
1:e80bf00: 
1:8bf987b:     protected static final Logger LOG = LoggerFactory.getLogger(DuplexNetworkMBeanTest.class);
1:543bc84:     protected final int numRestarts = 3;
1:eabb515: 
1:257a79d:     private int primaryBrokerPort;
1:257a79d:     private int secondaryBrokerPort;
1:da076f4:     private MBeanServer mBeanServer = new ManagementContext().getMBeanServer();
1:257a79d: 
1:257a79d:     @Before
1:257a79d:     public void setUp() throws Exception {
1:257a79d:         List<Integer> ports = TestUtils.findOpenPorts(2);
1:257a79d: 
1:257a79d:         primaryBrokerPort = ports.get(0);
1:257a79d:         secondaryBrokerPort = ports.get(1);
1:257a79d:     }
1:257a79d: 
1:f4012c5:     protected BrokerService createBroker() throws Exception {
1:f4012c5:         BrokerService broker = new BrokerService();
1:f4012c5:         broker.setBrokerName("broker");
1:257a79d:         broker.getManagementContext().setCreateConnector(false);
1:257a79d:         broker.addConnector("tcp://localhost:" + primaryBrokerPort + "?transport.reuseAddress=true");
1:0ad3cfc: 
1:f4012c5:         return broker;
3:f4012c5:     }
1:0ad3cfc: 
1:f4012c5:     protected BrokerService createNetworkedBroker() throws Exception {
1:f4012c5:         BrokerService broker = new BrokerService();
1:f4012c5:         broker.setBrokerName("networkedBroker");
1:257a79d:         broker.addConnector("tcp://localhost:" + secondaryBrokerPort + "?transport.reuseAddress=true");
1:257a79d:         broker.getManagementContext().setCreateConnector(false);
1:257a79d:         NetworkConnector networkConnector =
1:257a79d:             broker.addNetworkConnector("static:(tcp://localhost:" + primaryBrokerPort + "?wireFormat.maxInactivityDuration=500)?useExponentialBackOff=false");
1:f4012c5:         networkConnector.setDuplex(true);
1:f4012c5:         return broker;
1:f4012c5:     }
1:0ad3cfc: 
1:6b1e874:     @Test
1:f4012c5:     public void testMbeanPresenceOnNetworkBrokerRestart() throws Exception {
1:f4012c5:         BrokerService broker = createBroker();
1:0ad3cfc:         try {
1:0ad3cfc:             broker.start();
1:800e026:             assertEquals(1, countMbeans(broker, "connector", 30000));
1:800e026:             assertEquals(0, countMbeans(broker, "connectionName"));
1:0ad3cfc:             BrokerService networkedBroker = null;
1:0ad3cfc:             for (int i=0; i<numRestarts; i++) {
1:0ad3cfc:                 networkedBroker = createNetworkedBroker();
1:5207f02:                 try {
1:5207f02:                     networkedBroker.start();
1:e3626e1:                     assertEquals(1, countMbeans(networkedBroker, "networkBridge", 2000));
1:e3626e1:                     assertEquals(1, countMbeans(broker, "networkBridge", 2000));
1:50ec158:                     assertEquals(2, countMbeans(broker, "connectionName"));
1:5207f02:                 } finally {
1:5207f02:                     networkedBroker.stop();
1:5207f02:                     networkedBroker.waitUntilStopped();
1:5207f02:                 }
1:0ad3cfc:                 assertEquals(0, countMbeans(networkedBroker, "stopped"));
1:e3626e1:                 assertEquals(0, countMbeans(broker, "networkBridge"));
1:0ad3cfc:             }
1:0ad3cfc: 
1:e3626e1:             assertEquals(0, countMbeans(networkedBroker, "networkBridge"));
1:800e026:             assertEquals(0, countMbeans(networkedBroker, "connector"));
1:800e026:             assertEquals(0, countMbeans(networkedBroker, "connectionName"));
1:800e026:             assertEquals(1, countMbeans(broker, "connector"));
1:0ad3cfc:         } finally {
1:0ad3cfc:             broker.stop();
1:0ad3cfc:             broker.waitUntilStopped();
1:f4012c5:         }
1:f4012c5:     }
1:e80bf00: 
1:e80bf00:     @Test
1:f4012c5:     public void testMbeanPresenceOnBrokerRestart() throws Exception {
1:0ad3cfc: 
1:f4012c5:         BrokerService networkedBroker = createNetworkedBroker();
1:0ad3cfc:         try {
2:0ad3cfc:             networkedBroker.start();
1:800e026:             assertEquals(1, countMbeans(networkedBroker, "connector=networkConnectors", 30000));
1:800e026:             assertEquals(0, countMbeans(networkedBroker, "connectionName"));
1:0ad3cfc: 
1:0ad3cfc:             BrokerService broker = null;
1:0ad3cfc:             for (int i=0; i<numRestarts; i++) {
1:0ad3cfc:                 broker = createBroker();
1:0ad3cfc:                 try {
1:0ad3cfc:                     broker.start();
1:e3626e1:                     assertEquals(1, countMbeans(networkedBroker, "networkBridge", 5000));
1:50ec158:                     assertEquals("restart number: " + i, 2, countMbeans(broker, "connectionName", 10000));
1:0ad3cfc:                 } finally {
1:0ad3cfc:                     broker.stop();
1:0ad3cfc:                     broker.waitUntilStopped();
1:0ad3cfc:                 }
1:0ad3cfc:                 assertEquals(0, countMbeans(broker, "stopped"));
1:0ad3cfc:             }
1:0ad3cfc: 
1:800e026:             assertEquals(1, countMbeans(networkedBroker, "connector=networkConnectors"));
1:800e026:             assertEquals(0, countMbeans(networkedBroker, "connectionName"));
1:800e026:             assertEquals(0, countMbeans(broker, "connectionName"));
1:0ad3cfc:         } finally {
2:0ad3cfc:             networkedBroker.stop();
2:0ad3cfc:             networkedBroker.waitUntilStopped();
1:f4012c5:         }
1:f4012c5:     }
1:0ad3cfc: 
1:e80bf00:     @Test
1:6b1e874:     public void testMBeansNotOverwrittenOnCleanup() throws Exception {
1:6b1e874:         BrokerService broker = createBroker();
1:6b1e874: 
1:6b1e874:         BrokerService networkedBroker = createNetworkedBroker();
1:6b1e874:         MessageProducer producerBroker = null;
1:6b1e874:         MessageConsumer consumerBroker = null;
1:6b1e874:         Session sessionNetworkBroker = null;
1:6b1e874:         Session sessionBroker = null;
1:6b1e874:         MessageProducer producerNetworkBroker = null;
1:6b1e874:         MessageConsumer consumerNetworkBroker = null;
1:6b1e874:         try {
1:6b1e874:             broker.start();
1:6b1e874:             broker.waitUntilStarted();
1:6b1e874:             networkedBroker.start();
1:6b1e874:             try {
1:6b1e874:                 assertEquals(2, countMbeans(networkedBroker, "connector=networkConnectors", 10000));
1:6b1e874:                 assertEquals(1, countMbeans(broker, "connector=duplexNetworkConnectors", 10000));
1:6b1e874: 
1:6b1e874:                 Connection brokerConnection = new ActiveMQConnectionFactory(broker.getVmConnectorURI()).createConnection();
1:6b1e874:                 brokerConnection.start();
1:6b1e874: 
1:6b1e874:                 sessionBroker = brokerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6b1e874:                 producerBroker = sessionBroker.createProducer(sessionBroker.createTopic("testTopic"));
1:6b1e874:                 consumerBroker = sessionBroker.createConsumer(sessionBroker.createTopic("testTopic"));
1:6b1e874:                 Connection netWorkBrokerConnection = new ActiveMQConnectionFactory(networkedBroker.getVmConnectorURI()).createConnection();
1:6b1e874:                 netWorkBrokerConnection.start();
1:6b1e874:                 sessionNetworkBroker = netWorkBrokerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6b1e874:                 producerNetworkBroker = sessionNetworkBroker.createProducer(sessionBroker.createTopic("testTopic"));
1:6b1e874:                 consumerNetworkBroker = sessionNetworkBroker.createConsumer(sessionBroker.createTopic("testTopic"));
1:6b1e874: 
1:6b1e874:                 assertEquals(4, countMbeans(broker, "destinationType=Topic,destinationName=testTopic", 15000));
1:6b1e874:                 assertEquals(4, countMbeans(networkedBroker, "destinationType=Topic,destinationName=testTopic", 15000));
1:6b1e874: 
1:6b1e874:                 producerBroker.send(sessionBroker.createTextMessage("test1"));
1:6b1e874:                 producerNetworkBroker.send(sessionNetworkBroker.createTextMessage("test2"));
1:6b1e874: 
1:6b1e874:                 assertEquals(2, countMbeans(networkedBroker, "destinationName=testTopic,direction=*", 10000));
1:6b1e874:                 assertEquals(2, countMbeans(broker, "destinationName=testTopic,direction=*", 10000));
1:6b1e874:             } finally {
1:6b1e874:                 if (producerBroker != null) {
1:6b1e874:                     producerBroker.close();
1:6b1e874:                 }
1:6b1e874:                 if (consumerBroker != null) {
1:6b1e874:                     consumerBroker.close();
1:6b1e874:                 }
1:6b1e874:                 if (sessionBroker != null) {
1:6b1e874:                     sessionBroker.close();
1:6b1e874:                 }
1:6b1e874:                 if (sessionNetworkBroker != null) {
1:6b1e874:                     sessionNetworkBroker.close();
1:6b1e874:                 }
1:6b1e874:                 if (producerNetworkBroker != null) {
1:6b1e874:                     producerNetworkBroker.close();
1:6b1e874:                 }
1:6b1e874:                 if (consumerNetworkBroker != null) {
1:6b1e874:                     consumerNetworkBroker.close();
1:6b1e874:                 }
1:6b1e874:                 networkedBroker.stop();
1:6b1e874:                 networkedBroker.waitUntilStopped();
1:6b1e874:             }
1:6b1e874:             assertEquals(0, countMbeans(broker, "destinationName=testTopic,direction=*", 1500));
1:6b1e874:         } finally {
1:6b1e874:             broker.stop();
1:6b1e874:             broker.waitUntilStopped();
1:6b1e874:         }
1:6b1e874:     }
1:6b1e874: 
1:f4012c5:     private int countMbeans(BrokerService broker, String type) throws Exception {
1:0ad3cfc:         return countMbeans(broker, type, 0);
1:f4012c5:     }
1:eabb515: 
1:f4012c5:     private int countMbeans(BrokerService broker, String type, int timeout) throws Exception {
1:f4012c5:         final long expiryTime = System.currentTimeMillis() + timeout;
1:800e026: 
1:800e026:         if (!type.contains("=")) {
1:800e026:             type = type + "=*";
1:800e026:         }
1:800e026: 
1:800e026:         final ObjectName beanName = new ObjectName("org.apache.activemq:type=Broker,brokerName="
1:800e026:                 + broker.getBrokerName() + "," + type +",*");
1:800e026:         Set<ObjectName> mbeans = null;
1:4dda0d8:         int count = 0;
1:eabb515:         do {
1:f4012c5:             if (timeout > 0) {
1:f4012c5:                 Thread.sleep(100);
1:eabb515:             }
1:800e026: 
1:7a7b380:             LOG.info("Query name: " + beanName);
1:da076f4:             mbeans = mBeanServer.queryNames(beanName, null);
1:7a7b380:             if (mbeans != null) {
1:7a7b380:                 count = mbeans.size();
1:7a7b380:             } else {
1:7a7b380:                 logAllMbeans(broker);
1:4dda0d8:             }
1:329e215:         } while ((mbeans == null || mbeans.isEmpty()) && expiryTime > System.currentTimeMillis());
1:0ad3cfc: 
1:800e026:         // If port 1099 is in use when the Broker starts, starting the jmx connector
1:800e026:         // will fail.  So, if we have no mbsc to query, skip the test.
1:e80bf00:         if (timeout > 0) {
1:e80bf00:             assumeNotNull(mbeans);
1:e80bf00:         }
1:0ad3cfc: 
1:4dda0d8:         return count;
1:f4012c5:     }
1:e80bf00: 
1:7a7b380:     private void logAllMbeans(BrokerService broker) throws MalformedURLException {
1:eabb515:         try {
1:eabb515:             // trace all existing MBeans
1:da076f4:             Set<?> all = mBeanServer.queryNames(null, null);
1:eabb515:             LOG.info("Total MBean count=" + all.size());
1:eabb515:             for (Object o : all) {
1:eabb515:                 ObjectInstance bean = (ObjectInstance)o;
1:8bf987b:                 LOG.info(bean.getObjectName().toString());
1:eabb515:             }
1:eabb515:         } catch (Exception ignored) {
1:9086693:             LOG.warn("getMBeanServer ex: " + ignored);
1:eabb515:         }
1:eabb515:     }
1:f4012c5: }
============================================================================
author:Altaflux
-------------------------------------------------------------------------------
commit:3bb7e4a
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
commit:6b1e874
/////////////////////////////////////////////////////////////////////////
0:  * <p/>
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * <p/>
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MBeanServer;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: import java.net.MalformedURLException;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assume.assumeNotNull;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testMBeansNotOverwrittenOnCleanup() throws Exception {
1:         BrokerService broker = createBroker();
1: 
1:         BrokerService networkedBroker = createNetworkedBroker();
1:         MessageProducer producerBroker = null;
1:         MessageConsumer consumerBroker = null;
1:         Session sessionNetworkBroker = null;
1:         Session sessionBroker = null;
1:         MessageProducer producerNetworkBroker = null;
1:         MessageConsumer consumerNetworkBroker = null;
1:         try {
1:             broker.start();
1:             broker.waitUntilStarted();
1:             networkedBroker.start();
1:             try {
1:                 assertEquals(2, countMbeans(networkedBroker, "connector=networkConnectors", 10000));
1:                 assertEquals(1, countMbeans(broker, "connector=duplexNetworkConnectors", 10000));
1: 
1:                 Connection brokerConnection = new ActiveMQConnectionFactory(broker.getVmConnectorURI()).createConnection();
1:                 brokerConnection.start();
1: 
1:                 sessionBroker = brokerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 producerBroker = sessionBroker.createProducer(sessionBroker.createTopic("testTopic"));
1:                 consumerBroker = sessionBroker.createConsumer(sessionBroker.createTopic("testTopic"));
1:                 Connection netWorkBrokerConnection = new ActiveMQConnectionFactory(networkedBroker.getVmConnectorURI()).createConnection();
1:                 netWorkBrokerConnection.start();
1:                 sessionNetworkBroker = netWorkBrokerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 producerNetworkBroker = sessionNetworkBroker.createProducer(sessionBroker.createTopic("testTopic"));
1:                 consumerNetworkBroker = sessionNetworkBroker.createConsumer(sessionBroker.createTopic("testTopic"));
1: 
1:                 assertEquals(4, countMbeans(broker, "destinationType=Topic,destinationName=testTopic", 15000));
1:                 assertEquals(4, countMbeans(networkedBroker, "destinationType=Topic,destinationName=testTopic", 15000));
1: 
1:                 producerBroker.send(sessionBroker.createTextMessage("test1"));
1:                 producerNetworkBroker.send(sessionNetworkBroker.createTextMessage("test2"));
1: 
1:                 assertEquals(2, countMbeans(networkedBroker, "destinationName=testTopic,direction=*", 10000));
1:                 assertEquals(2, countMbeans(broker, "destinationName=testTopic,direction=*", 10000));
1:             } finally {
1:                 if (producerBroker != null) {
1:                     producerBroker.close();
1:                 }
1:                 if (consumerBroker != null) {
1:                     consumerBroker.close();
1:                 }
1:                 if (sessionBroker != null) {
1:                     sessionBroker.close();
1:                 }
1:                 if (sessionNetworkBroker != null) {
1:                     sessionNetworkBroker.close();
1:                 }
1:                 if (producerNetworkBroker != null) {
1:                     producerNetworkBroker.close();
1:                 }
1:                 if (consumerNetworkBroker != null) {
1:                     consumerNetworkBroker.close();
1:                 }
1:                 networkedBroker.stop();
1:                 networkedBroker.waitUntilStopped();
1:             }
1:             assertEquals(0, countMbeans(broker, "destinationName=testTopic,direction=*", 1500));
1:         } finally {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:da076f4
/////////////////////////////////////////////////////////////////////////
0: import javax.management.MBeanServer;
1: import org.apache.activemq.broker.jmx.ManagementContext;
/////////////////////////////////////////////////////////////////////////
1:     private MBeanServer mBeanServer = new ManagementContext().getMBeanServer();
/////////////////////////////////////////////////////////////////////////
1:             mbeans = mBeanServer.queryNames(beanName, null);
/////////////////////////////////////////////////////////////////////////
1:             Set<?> all = mBeanServer.queryNames(null, null);
commit:50ec158
/////////////////////////////////////////////////////////////////////////
1:                     assertEquals(2, countMbeans(broker, "connectionName"));
/////////////////////////////////////////////////////////////////////////
1:                     assertEquals("restart number: " + i, 2, countMbeans(broker, "connectionName", 10000));
author:Timothy Bish
-------------------------------------------------------------------------------
commit:257a79d
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
1: import org.apache.activemq.util.TestUtils;
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1:     private int primaryBrokerPort;
1:     private int secondaryBrokerPort;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         List<Integer> ports = TestUtils.findOpenPorts(2);
1: 
1:         primaryBrokerPort = ports.get(0);
1:         secondaryBrokerPort = ports.get(1);
1:     }
1: 
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.addConnector("tcp://localhost:" + primaryBrokerPort + "?transport.reuseAddress=true");
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:" + secondaryBrokerPort + "?transport.reuseAddress=true");
1:         broker.getManagementContext().setCreateConnector(false);
1:         NetworkConnector networkConnector =
1:             broker.addNetworkConnector("static:(tcp://localhost:" + primaryBrokerPort + "?wireFormat.maxInactivityDuration=500)?useExponentialBackOff=false");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:800e026
/////////////////////////////////////////////////////////////////////////
1:             assertEquals(1, countMbeans(broker, "connector", 30000));
1:             assertEquals(0, countMbeans(broker, "connectionName"));
0:                     assertEquals(1, countMbeans(networkedBroker, "service=NetworkBridge", 2000));
0:                     assertEquals(1, countMbeans(broker, "service=NetworkBridge", 2000));
0:                     assertEquals(1, countMbeans(broker, "connectionName"));
0:                 assertEquals(0, countMbeans(broker, "service=NetworkBridge"));
0:             assertEquals(0, countMbeans(networkedBroker, "service=NetworkBridge"));
1:             assertEquals(0, countMbeans(networkedBroker, "connector"));
1:             assertEquals(0, countMbeans(networkedBroker, "connectionName"));
1:             assertEquals(1, countMbeans(broker, "connector"));
/////////////////////////////////////////////////////////////////////////
1:             assertEquals(1, countMbeans(networkedBroker, "connector=networkConnectors", 30000));
1:             assertEquals(0, countMbeans(networkedBroker, "connectionName"));
0:                     assertEquals(1, countMbeans(networkedBroker, "service=NetworkBridge", 5000));
0:                     assertEquals("restart number: " + i, 1, countMbeans(broker, "connectionName", 10000));
/////////////////////////////////////////////////////////////////////////
1:             assertEquals(1, countMbeans(networkedBroker, "connector=networkConnectors"));
1:             assertEquals(0, countMbeans(networkedBroker, "connectionName"));
1:             assertEquals(0, countMbeans(broker, "connectionName"));
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (!type.contains("=")) {
1:             type = type + "=*";
1:         }
1: 
1:         final ObjectName beanName = new ObjectName("org.apache.activemq:type=Broker,brokerName="
1:                 + broker.getBrokerName() + "," + type +",*");
1:         Set<ObjectName> mbeans = null;
1: 
/////////////////////////////////////////////////////////////////////////
1:         // If port 1099 is in use when the Broker starts, starting the jmx connector
1:         // will fail.  So, if we have no mbsc to query, skip the test.
commit:5207f02
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     networkedBroker.start();
0:                     assertEquals(1, countMbeans(networkedBroker, "NetworkBridge", 2000));
0:                     assertEquals(1, countMbeans(broker, "NetworkBridge", 2000));
0:                     assertEquals(1, countMbeans(broker, "Connection"));
1:                 } finally {
1:                     networkedBroker.stop();
1:                     networkedBroker.waitUntilStopped();
1:                 }
commit:0ad3cfc
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         try {
1:             broker.start();
0:             assertEquals(1, countMbeans(broker, "Connector", 30000));
0:             assertEquals(0, countMbeans(broker, "Connection"));
1:             BrokerService networkedBroker = null;
1:             for (int i=0; i<numRestarts; i++) {
1:                 networkedBroker = createNetworkedBroker();
1:                 networkedBroker.start();
0:                 assertEquals(1, countMbeans(networkedBroker, "NetworkBridge", 2000));
0:                 assertEquals(1, countMbeans(broker, "NetworkBridge", 2000));
0:                 assertEquals(1, countMbeans(broker, "Connection"));
1:                 networkedBroker.stop();
1:                 networkedBroker.waitUntilStopped();
1:                 assertEquals(0, countMbeans(networkedBroker, "stopped"));
0:                 assertEquals(0, countMbeans(broker, "NetworkBridge"));
1:             }
1: 
0:             assertEquals(0, countMbeans(networkedBroker, "NetworkBridge"));
0:             assertEquals(0, countMbeans(networkedBroker, "Connector"));
0:             assertEquals(0, countMbeans(networkedBroker, "Connection"));
0:             assertEquals(1, countMbeans(broker, "Connector"));
1:         } finally {
1:             broker.stop();
1:             broker.waitUntilStopped();
1: 
1:         try {
1:             networkedBroker.start();
0:             assertEquals(1, countMbeans(networkedBroker, "Connector", 30000));
0:             assertEquals(0, countMbeans(networkedBroker, "Connection"));
1: 
1:             BrokerService broker = null;
1:             for (int i=0; i<numRestarts; i++) {
1:                 broker = createBroker();
1:                 try {
1:                     broker.start();
0:                     assertEquals(1, countMbeans(networkedBroker, "NetworkBridge", 5000));
0:                     assertEquals("restart number: " + i, 1, countMbeans(broker, "Connection", 10000));
1:                 } finally {
1:                     broker.stop();
1:                     broker.waitUntilStopped();
1:                 }
1:                 assertEquals(0, countMbeans(broker, "stopped"));
1:             }
1: 
0:             //assertEquals(0, countMbeans(networkedBroker, "NetworkBridge"));
0:             assertEquals(1, countMbeans(networkedBroker, "Connector"));
0:             assertEquals(0, countMbeans(networkedBroker, "Connection"));
0:             assertEquals(0, countMbeans(broker, "Connection"));
1:         } finally {
1:             networkedBroker.stop();
1:             networkedBroker.waitUntilStopped();
1: 
1:         return countMbeans(broker, type, 0);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:e3626e1
/////////////////////////////////////////////////////////////////////////
1:                     assertEquals(1, countMbeans(networkedBroker, "networkBridge", 2000));
1:                     assertEquals(1, countMbeans(broker, "networkBridge", 2000));
1:                 assertEquals(0, countMbeans(broker, "networkBridge"));
1:             assertEquals(0, countMbeans(networkedBroker, "networkBridge"));
/////////////////////////////////////////////////////////////////////////
1:                     assertEquals(1, countMbeans(networkedBroker, "networkBridge", 5000));
commit:7a7b380
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Query name: " + beanName);
0:             mbeans = broker.getManagementContext().queryNames(beanName, null);
1:             if (mbeans != null) {
1:                 count = mbeans.size();
1:             } else {
1:                 logAllMbeans(broker);
/////////////////////////////////////////////////////////////////////////
1:     private void logAllMbeans(BrokerService broker) throws MalformedURLException {
0:             Set<?> all = broker.getManagementContext().queryNames(null, null);
/////////////////////////////////////////////////////////////////////////
commit:e80bf00
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assume.assumeNotNull;
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Test;
1: 
1: public class DuplexNetworkMBeanTest {
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         
0:         // If port 1099 is in use when the Broker starts, starting the jmx
0:         // connector will fail.  So, if we have no mbsc to query, skip the
0:         // test.
1:         if (timeout > 0) {
1:             assumeNotNull(mbeans);
1:         }
1:         
commit:9086693
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(1, countMbeans(broker, "Connector", 30000));
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(1, countMbeans(networkedBroker, "Connector", 30000));
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("getMBeanServer ex: " + ignored);
commit:ae2a3e2
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(1, countMbeans(broker, "Connector", 10000));
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(1, countMbeans(networkedBroker, "Connector", 10000));
commit:4dda0d8
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(1, countMbeans(broker, "Connector", 5000));
/////////////////////////////////////////////////////////////////////////
1:         int count = 0;
0:                 LOG.info("Query name: " + beanName);
0:                 if (mbeans != null) {
0:                     count = mbeans.size();
1:                 }
1:         return count;
commit:329e215
/////////////////////////////////////////////////////////////////////////
1:         } while ((mbeans == null || mbeans.isEmpty()) && expiryTime > System.currentTimeMillis());
commit:eabb515
/////////////////////////////////////////////////////////////////////////
0: import java.net.MalformedURLException;
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(1, countMbeans(broker, "Connector", 2000));
/////////////////////////////////////////////////////////////////////////
0:         broker.waitUntilStopped();
0:         assertEquals(1, countMbeans(networkedBroker, "Connector", 2000));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         networkedBroker.waitUntilStopped();
/////////////////////////////////////////////////////////////////////////
0:         final ObjectName beanName = new ObjectName("org.apache.activemq:BrokerName="
0:         Set<?> mbeans = null;
1:         
1:         do {
0:             MBeanServerConnection mbsc = getMBeanServerConnection();
0:             if (mbsc != null) {
0:                 mbeans = mbsc.queryMBeans(beanName, null);
1:             }
0:         } while (mbeans == null || mbeans.isEmpty() && expiryTime > System.currentTimeMillis());
1: 
0:     private MBeanServerConnection getMBeanServerConnection() throws MalformedURLException {
0:         final JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi");
0:         MBeanServerConnection mbsc = null;
1:         try {
0:             JMXConnector jmxc = JMXConnectorFactory.connect(url, null);
0:             mbsc = jmxc.getMBeanServerConnection();
1: 
1:             // trace all existing MBeans
0:             Set<?> all = mbsc.queryMBeans(null, null);
1:             LOG.info("Total MBean count=" + all.size());
1:             for (Object o : all) {
1:                 ObjectInstance bean = (ObjectInstance)o;
0:                 LOG.info(bean.getObjectName());
1:             }
1:         } catch (Exception ignored) {
1:         }
0:         return mbsc;
1:     }
commit:543bc84
/////////////////////////////////////////////////////////////////////////
1:     protected final int numRestarts = 3;
/////////////////////////////////////////////////////////////////////////
0:             Thread.sleep(1000);
commit:8761189
/////////////////////////////////////////////////////////////////////////
0:         //assertEquals(0, countMbeans(networkedBroker, "NetworkBridge"));
commit:3332220
/////////////////////////////////////////////////////////////////////////
0:     protected final int numRestarts = 5;
0:         broker.addConnector("tcp://localhost:61617?transport.reuseAddress=true");
/////////////////////////////////////////////////////////////////////////
0:         broker.addConnector("tcp://localhost:62617?transport.reuseAddress=true");
0:         NetworkConnector networkConnector = broker.addNetworkConnector("static:(tcp://localhost:61617?wireFormat.maxInactivityDuration=500)?useExponentialBackOff=false");
/////////////////////////////////////////////////////////////////////////
0:             assertEquals(1, countMbeans(networkedBroker, "NetworkBridge", 5000));
0:             assertEquals("restart number: " + i, 1, countMbeans(broker, "Connection", 10000));
0:             assertEquals(0, countMbeans(broker, "stopped"));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     protected static final Logger LOG = LoggerFactory.getLogger(DuplexNetworkMBeanTest.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info(bean.getObjectName().toString());
commit:2a2dcd5
/////////////////////////////////////////////////////////////////////////
0:             assertEquals(1, countMbeans(broker, "NetworkBridge", 2000));
0:             assertEquals(0, countMbeans(broker, "NetworkBridge"));
author:Robert Davies
-------------------------------------------------------------------------------
commit:9c12a0c
/////////////////////////////////////////////////////////////////////////
0:     protected final int numRestarts = 10;
/////////////////////////////////////////////////////////////////////////
0:         NetworkConnector networkConnector = broker.addNetworkConnector("static:(tcp://localhost:61617)?maxReconnectDelay=1000&useExponentialBackOff=false");
/////////////////////////////////////////////////////////////////////////
0:             assertEquals(1, countMbeans(networkedBroker, "NetworkBridge", 10000));
commit:f4012c5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
0: 
0: import java.util.Set;
0: 
0: import javax.management.MBeanServerConnection;
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXServiceURL;
0: 
0: import junit.framework.TestCase;
0: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: public class DuplexNetworkMBeanTest extends TestCase {
0: 
0:     protected static final Log LOG = LogFactory.getLog(DuplexNetworkMBeanTest.class);
0:     protected final int numRestarts = 2;
0: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("broker");
0:         broker.addConnector("tcp://localhost:61617");
0:         
1:         return broker;
1:     }
0:     
1:     protected BrokerService createNetworkedBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("networkedBroker");
0:         broker.addConnector("tcp://localhost:62617");
0:         NetworkConnector networkConnector = broker.addNetworkConnector("static://tcp://localhost:61617");
1:         networkConnector.setDuplex(true);
1:         return broker;
1:     }
0:     
1:     public void testMbeanPresenceOnNetworkBrokerRestart() throws Exception {
1:         BrokerService broker = createBroker();
0:         broker.start();
0:         assertEquals(1, countMbeans(broker, "Connector"));
0:         assertEquals(0, countMbeans(broker, "Connection"));
0:         BrokerService networkedBroker = null;
0:         for (int i=0; i<numRestarts; i++) {       
0:             networkedBroker = createNetworkedBroker();
0:             networkedBroker.start();
0:             assertEquals(1, countMbeans(networkedBroker, "NetworkBridge", 2000));
0:             assertEquals(1, countMbeans(broker, "Connection"));
0:             networkedBroker.stop();
0:             networkedBroker.waitUntilStopped();
0:             assertEquals(0, countMbeans(networkedBroker, "stopped"));
1:         }
0:         
0:         assertEquals(0, countMbeans(networkedBroker, "NetworkBridge"));
0:         assertEquals(0, countMbeans(networkedBroker, "Connector"));
0:         assertEquals(0, countMbeans(networkedBroker, "Connection"));
0:         assertEquals(1, countMbeans(broker, "Connector"));
0:         broker.stop();
1:     }
0: 
1:     public void testMbeanPresenceOnBrokerRestart() throws Exception {
0:         
1:         BrokerService networkedBroker = createNetworkedBroker();
0:         networkedBroker.start();
0:         assertEquals(1, countMbeans(networkedBroker, "Connector"));
0:         assertEquals(0, countMbeans(networkedBroker, "Connection"));
0:         
0:         BrokerService broker = null;
0:         for (int i=0; i<numRestarts; i++) {
0:             broker = createBroker();
0:             broker.start();
0:             assertEquals(1, countMbeans(networkedBroker, "NetworkBridge", 5000));
0:             assertEquals(1, countMbeans(broker, "Connection"));
0:             
0:             broker.stop();
0:             broker.waitUntilStopped();
1:         }
0:         
0:         assertEquals(0, countMbeans(networkedBroker, "NetworkBridge"));
0:         assertEquals(1, countMbeans(networkedBroker, "Connector"));
0:         assertEquals(0, countMbeans(networkedBroker, "Connection"));
0:         assertEquals(0, countMbeans(broker, "Connection"));
0:         
0:         networkedBroker.stop();
1:     }
0:     
1:     private int countMbeans(BrokerService broker, String type) throws Exception {
0:         return countMbeans(broker, type, 0); 
1:     }
0: 
1:     private int countMbeans(BrokerService broker, String type, int timeout) throws Exception {
1:         final long expiryTime = System.currentTimeMillis() + timeout;
0:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi");
0:         JMXConnector jmxc = JMXConnectorFactory.connect(url, null);
0:         MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();
0: 
0:         Set all = mbsc.queryMBeans(null, null);
0:         LOG.info("MBean total=" + all.size());
0:         for (Object o : all) {
0:             ObjectInstance bean = (ObjectInstance)o;
0:             LOG.info(bean.getObjectName());
1:         }
0:         ObjectName beanName = new ObjectName("org.apache.activemq:BrokerName="
0:                 + broker.getBrokerName() + ",Type=" + type +",*");
0:         Set mbeans = null;
0:         do { 
1:             if (timeout > 0) {
1:                 Thread.sleep(100);
1:             }
0:             mbeans = mbsc.queryMBeans(beanName, null);
0:         } while (mbeans.isEmpty() && expiryTime > System.currentTimeMillis());
0:         return mbeans.size();
1:     }
1: }
============================================================================