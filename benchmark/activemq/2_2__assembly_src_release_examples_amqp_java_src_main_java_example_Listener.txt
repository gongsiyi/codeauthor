1:2ecf41d: /**
1:2ecf41d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2ecf41d:  * contributor license agreements.  See the NOTICE file distributed with
1:2ecf41d:  * this work for additional information regarding copyright ownership.
1:2ecf41d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2ecf41d:  * (the "License"); you may not use this file except in compliance with
1:2ecf41d:  * the License.  You may obtain a copy of the License at
1:2ecf41d:  *
1:2ecf41d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2ecf41d:  *
1:2ecf41d:  * Unless required by applicable law or agreed to in writing, software
1:2ecf41d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ecf41d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ecf41d:  * See the License for the specific language governing permissions and
1:2ecf41d:  * limitations under the License.
1:2ecf41d:  */
1:2ecf41d: package example;
1:2ecf41d: 
1:a79f317: import org.apache.qpid.jms.*;
1:2ecf41d: import javax.jms.*;
1:2ecf41d: 
1:2ecf41d: class Listener {
1:2ecf41d: 
1:a79f317:     public static void main(String[] args) throws JMSException {
1:a79f317: 
1:a79f317:         final String TOPIC_PREFIX = "topic://";
1:2ecf41d: 
1:2ecf41d:         String user = env("ACTIVEMQ_USER", "admin");
1:2ecf41d:         String password = env("ACTIVEMQ_PASSWORD", "password");
1:2ecf41d:         String host = env("ACTIVEMQ_HOST", "localhost");
1:2ecf41d:         int port = Integer.parseInt(env("ACTIVEMQ_PORT", "5672"));
1:2ecf41d: 
1:a79f317:         String connectionURI = "amqp://" + host + ":" + port;
1:a79f317:         String destinationName = arg(args, 0, "topic://event");
1:a79f317: 
1:a79f317:         JmsConnectionFactory factory = new JmsConnectionFactory(connectionURI);
1:2ecf41d: 
1:2ecf41d:         Connection connection = factory.createConnection(user, password);
1:2ecf41d:         connection.start();
1:2ecf41d:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a79f317: 
1:a79f317:         Destination destination = null;
1:a79f317:         if (destinationName.startsWith(TOPIC_PREFIX)) {
1:a79f317:             destination = session.createTopic(destinationName.substring(TOPIC_PREFIX.length()));
1:a79f317:         } else {
1:a79f317:             destination = session.createQueue(destinationName);
1:a79f317:         }
1:a79f317: 
1:a79f317:         MessageConsumer consumer = session.createConsumer(destination);
1:2ecf41d:         long start = System.currentTimeMillis();
1:2ecf41d:         long count = 1;
1:2ecf41d:         System.out.println("Waiting for messages...");
1:a79f317:         while (true) {
1:2ecf41d:             Message msg = consumer.receive();
1:a79f317:             if (msg instanceof TextMessage) {
1:2ecf41d:                 String body = ((TextMessage) msg).getText();
1:a79f317:                 if ("SHUTDOWN".equals(body)) {
1:2ecf41d:                     long diff = System.currentTimeMillis() - start;
1:a79f317:                     System.out.println(String.format("Received %d in %.2f seconds", count, (1.0 * diff / 1000.0)));
1:2ecf41d:                     connection.close();
1:a79f317:                     try {
1:a79f317:                         Thread.sleep(10);
1:a79f317:                     } catch (Exception e) {}
1:2ecf41d:                     System.exit(1);
2:2ecf41d:                 } else {
1:2ecf41d:                     try {
1:a79f317:                         if (count != msg.getIntProperty("id")) {
1:a79f317:                             System.out.println("mismatch: " + count + "!=" + msg.getIntProperty("id"));
2:2ecf41d:                         }
1:2ecf41d:                     } catch (NumberFormatException ignore) {
1:2ecf41d:                     }
1:a79f317: 
1:a79f317:                     if (count == 1) {
1:2ecf41d:                         start = System.currentTimeMillis();
1:a79f317:                     } else if (count % 1000 == 0) {
1:2ecf41d:                         System.out.println(String.format("Received %d messages.", count));
1:2ecf41d:                     }
1:a79f317:                     count++;
1:2ecf41d:                 }
1:2ecf41d: 
1:2ecf41d:             } else {
1:a79f317:                 System.out.println("Unexpected message type: " + msg.getClass());
1:2ecf41d:             }
1:2ecf41d:         }
1:2ecf41d:     }
1:2ecf41d: 
1:2ecf41d:     private static String env(String key, String defaultValue) {
1:2ecf41d:         String rc = System.getenv(key);
1:a79f317:         if (rc == null)
1:2ecf41d:             return defaultValue;
1:2ecf41d:         return rc;
1:2ecf41d:     }
1:2ecf41d: 
1:a79f317:     private static String arg(String[] args, int index, String defaultValue) {
1:a79f317:         if (index < args.length)
1:2ecf41d:             return args[index];
1:2ecf41d:         else
1:2ecf41d:             return defaultValue;
1:2ecf41d:     }
1:2ecf41d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a79f317
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.jms.*;
1:     public static void main(String[] args) throws JMSException {
1: 
1:         final String TOPIC_PREFIX = "topic://";
1:         String connectionURI = "amqp://" + host + ":" + port;
1:         String destinationName = arg(args, 0, "topic://event");
1: 
1:         JmsConnectionFactory factory = new JmsConnectionFactory(connectionURI);
1: 
1:         Destination destination = null;
1:         if (destinationName.startsWith(TOPIC_PREFIX)) {
1:             destination = session.createTopic(destinationName.substring(TOPIC_PREFIX.length()));
1:         } else {
1:             destination = session.createQueue(destinationName);
1:         }
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         while (true) {
1:             if (msg instanceof TextMessage) {
1:                 if ("SHUTDOWN".equals(body)) {
1:                     System.out.println(String.format("Received %d in %.2f seconds", count, (1.0 * diff / 1000.0)));
1:                     try {
1:                         Thread.sleep(10);
1:                     } catch (Exception e) {}
1:                         if (count != msg.getIntProperty("id")) {
1:                             System.out.println("mismatch: " + count + "!=" + msg.getIntProperty("id"));
1: 
1:                     if (count == 1) {
1:                     } else if (count % 1000 == 0) {
1:                     count++;
1:                 System.out.println("Unexpected message type: " + msg.getClass());
1:         if (rc == null)
1:     private static String arg(String[] args, int index, String defaultValue) {
1:         if (index < args.length)
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package example;
1: 
0: import org.apache.qpid.amqp_1_0.jms.impl.*;
1: import javax.jms.*;
1: 
1: class Listener {
1: 
0:     public static void main(String []args) throws JMSException {
1: 
1:         String user = env("ACTIVEMQ_USER", "admin");
1:         String password = env("ACTIVEMQ_PASSWORD", "password");
1:         String host = env("ACTIVEMQ_HOST", "localhost");
1:         int port = Integer.parseInt(env("ACTIVEMQ_PORT", "5672"));
0:         String destination = arg(args, 0, "topic://event");
1: 
0:         ConnectionFactoryImpl factory = new ConnectionFactoryImpl(host, port, user, password);
0:         Destination dest = null;
0:         if( destination.startsWith("topic://") ) {
0:             dest = new TopicImpl(destination);
1:         } else {
0:             dest = new QueueImpl(destination);
1:         }
1: 
1:         Connection connection = factory.createConnection(user, password);
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer = session.createConsumer(dest);
1:         long start = System.currentTimeMillis();
1:         long count = 1;
1:         System.out.println("Waiting for messages...");
0:         while(true) {
1:             Message msg = consumer.receive();
0:             if( msg instanceof  TextMessage ) {
1:                 String body = ((TextMessage) msg).getText();
0:                 if( "SHUTDOWN".equals(body)) {
1:                     long diff = System.currentTimeMillis() - start;
0:                     System.out.println(String.format("Received %d in %.2f seconds", count, (1.0*diff/1000.0)));
1:                     connection.close();
1:                     System.exit(1);
1:                 } else {
1:                     try {
0:                         if( count != msg.getIntProperty("id") ) {
0:                             System.out.println("mismatch: "+count+"!="+msg.getIntProperty("id"));
1:                         }
1:                     } catch (NumberFormatException ignore) {
1:                     }
0:                     if( count == 1 ) {
1:                         start = System.currentTimeMillis();
0:                     } else if( count % 1000 == 0 ) {
1:                         System.out.println(String.format("Received %d messages.", count));
1:                     }
0:                     count ++;
1:                 }
1: 
1:             } else {
0:                 System.out.println("Unexpected message type: "+msg.getClass());
1:             }
1:         }
1:     }
1: 
1:     private static String env(String key, String defaultValue) {
1:         String rc = System.getenv(key);
0:         if( rc== null )
1:             return defaultValue;
1:         return rc;
1:     }
1: 
0:     private static String arg(String []args, int index, String defaultValue) {
0:         if( index < args.length )
1:             return args[index];
1:         else
1:             return defaultValue;
1:     }
1: }
============================================================================