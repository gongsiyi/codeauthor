1:3348ade: /**
1:3348ade:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3348ade:  * contributor license agreements.  See the NOTICE file distributed with
1:3348ade:  * this work for additional information regarding copyright ownership.
1:3348ade:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3348ade:  * (the "License"); you may not use this file except in compliance with
1:3348ade:  * the License.  You may obtain a copy of the License at
1:3348ade:  *
1:3348ade:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3348ade:  *
1:3348ade:  * Unless required by applicable law or agreed to in writing, software
1:3348ade:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3348ade:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3348ade:  * See the License for the specific language governing permissions and
1:3348ade:  * limitations under the License.
1:3348ade:  */
1:3348ade: package org.apache.activemq.bugs;
1:3348ade: 
1:3348ade: import static org.junit.Assert.assertEquals;
1:3348ade: import static org.junit.Assert.assertNotNull;
1:3348ade: 
1:3348ade: import javax.jms.Message;
1:3348ade: import javax.jms.MessageConsumer;
1:3348ade: import javax.jms.MessageProducer;
1:3348ade: import javax.jms.Queue;
1:3348ade: import javax.jms.Session;
1:3348ade: import javax.jms.TextMessage;
1:3348ade: 
1:3348ade: import org.apache.activemq.ActiveMQConnection;
1:3348ade: import org.apache.activemq.ActiveMQConnectionFactory;
1:3348ade: import org.apache.activemq.broker.BrokerService;
1:3348ade: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:3348ade: import org.apache.activemq.broker.region.policy.PolicyMap;
1:3348ade: import org.junit.After;
1:3348ade: import org.junit.Before;
1:3348ade: import org.junit.Rule;
1:3348ade: import org.junit.Test;
1:3348ade: import org.junit.rules.TestName;
1:3348ade: 
1:3348ade: public class AMQ5914Test {
1:3348ade: 
1:3348ade:     private ActiveMQConnection connection;
1:3348ade:     private BrokerService broker;
1:3348ade:     private String connectionUri;
1:3348ade: 
1:3348ade:     @Rule
1:3348ade:     public TestName name = new TestName();
1:3348ade: 
1:3348ade:     @Before
1:3348ade:     public void setUp() throws Exception {
1:3348ade:         createBroker();
1:3348ade: 
1:3348ade:         connection = createConnection();
1:3348ade:     }
1:3348ade: 
1:3348ade:     @After
1:3348ade:     public void tearDown() throws Exception {
1:3348ade:         if (connection != null) {
1:3348ade:             try {
1:3348ade:                 connection.close();
1:3348ade:             } catch (Exception e) {}
1:3348ade:         }
1:3348ade: 
1:3348ade:         if (broker != null) {
1:3348ade:             broker.stop();
1:3348ade:             broker.waitUntilStopped();
1:3348ade:         }
1:3348ade:     }
1:3348ade: 
1:3348ade:     @Test(timeout=20000)
1:3348ade:     public void testConsumerReceivePrefetchZeroMessageExpiredInFlight() throws Exception {
1:3348ade: 
1:3348ade:         connection.start();
1:3348ade:         connection.getPrefetchPolicy().setAll(0);
1:3348ade: 
1:3348ade:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3348ade:         Queue queue = session.createQueue(name.getMethodName());
1:3348ade:         MessageProducer producer = session.createProducer(queue);
1:3348ade:         TextMessage expiredMessage = session.createTextMessage("expired message");
1:3348ade:         TextMessage validMessage = session.createTextMessage("valid message");
1:f46b292:         producer.send(expiredMessage, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, 1000);
1:3348ade:         producer.send(validMessage);
1:3348ade:         session.close();
1:3348ade: 
1:3348ade:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:3348ade:         MessageConsumer consumer = session.createConsumer(queue);
1:3348ade:         Message message = consumer.receive(3000);
1:3348ade:         assertNotNull(message);
1:3348ade:         TextMessage received = (TextMessage) message;
1:3348ade:         assertEquals("expired message", received.getText());
1:3348ade: 
1:3348ade:         // Rollback allow the first message to expire.
1:3348ade:         session.rollback();
1:f46b292:         Thread.sleep(1500);
1:3348ade: 
1:3348ade:         // Consume again, this should fetch the second valid message via a pull.
1:3348ade:         message = consumer.receive(3000);
1:3348ade:         assertNotNull(message);
1:3348ade:         received = (TextMessage) message;
1:3348ade:         assertEquals("valid message", received.getText());
1:3348ade:     }
1:3348ade: 
1:3348ade:     private void createBroker() throws Exception {
1:3348ade: 
1:3348ade:         PolicyMap policyMap = new PolicyMap();
1:3348ade:         PolicyEntry defaultEntry = new PolicyEntry();
1:3348ade:         defaultEntry.setExpireMessagesPeriod(60000);
1:3348ade:         defaultEntry.setUseCache(false);
1:3348ade:         policyMap.setDefaultEntry(defaultEntry);
1:3348ade: 
1:3348ade:         broker = new BrokerService();
1:3348ade:         broker.setUseJmx(false);
1:3348ade:         broker.setPersistent(false);
1:3348ade:         broker.setDestinationPolicy(policyMap);
1:3348ade:         broker.addConnector("tcp://localhost:0");
1:3348ade:         broker.start();
1:3348ade:         broker.waitUntilStarted();
1:3348ade: 
1:3348ade:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:3348ade:     }
1:3348ade: 
1:3348ade:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:3348ade:         return new ActiveMQConnectionFactory(connectionUri);
1:3348ade:     }
1:3348ade: 
1:3348ade:     protected ActiveMQConnection createConnection() throws Exception {
1:3348ade:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:3348ade:     }
1:3348ade: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:f46b292
/////////////////////////////////////////////////////////////////////////
1:         producer.send(expiredMessage, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, 1000);
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(1500);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3348ade
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1: public class AMQ5914Test {
1: 
1:     private ActiveMQConnection connection;
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     @Rule
1:     public TestName name = new TestName();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         createBroker();
1: 
1:         connection = createConnection();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Exception e) {}
1:         }
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout=20000)
1:     public void testConsumerReceivePrefetchZeroMessageExpiredInFlight() throws Exception {
1: 
1:         connection.start();
1:         connection.getPrefetchPolicy().setAll(0);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(name.getMethodName());
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage expiredMessage = session.createTextMessage("expired message");
1:         TextMessage validMessage = session.createTextMessage("valid message");
0:         producer.send(expiredMessage, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, 50);
1:         producer.send(validMessage);
1:         session.close();
1: 
1:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message message = consumer.receive(3000);
1:         assertNotNull(message);
1:         TextMessage received = (TextMessage) message;
1:         assertEquals("expired message", received.getText());
1: 
1:         // Rollback allow the first message to expire.
1:         session.rollback();
0:         Thread.sleep(75);
1: 
1:         // Consume again, this should fetch the second valid message via a pull.
1:         message = consumer.receive(3000);
1:         assertNotNull(message);
1:         received = (TextMessage) message;
1:         assertEquals("valid message", received.getText());
1:     }
1: 
1:     private void createBroker() throws Exception {
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(60000);
1:         defaultEntry.setUseCache(false);
1:         policyMap.setDefaultEntry(defaultEntry);
1: 
1:         broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setPersistent(false);
1:         broker.setDestinationPolicy(policyMap);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     protected ActiveMQConnection createConnection() throws Exception {
1:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:     }
1: }
============================================================================