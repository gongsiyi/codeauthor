1:30b20b3: /**
1:8eb11a3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8eb11a3:  * contributor license agreements.  See the NOTICE file distributed with
1:8eb11a3:  * this work for additional information regarding copyright ownership.
1:8eb11a3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8eb11a3:  * (the "License"); you may not use this file except in compliance with
1:8eb11a3:  * the License.  You may obtain a copy of the License at
1:8eb11a3:  *
1:8eb11a3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8eb11a3:  *
1:8eb11a3:  * Unless required by applicable law or agreed to in writing, software
1:8eb11a3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8eb11a3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8eb11a3:  * See the License for the specific language governing permissions and
1:8eb11a3:  * limitations under the License.
1:30b20b3:  */
1:8eb11a3: package org.apache.activemq.karaf.itest;
1:9743dbd: 
1:50ea308: import static org.junit.Assert.assertEquals;
1:4dd3aa4: import static org.junit.Assert.assertTrue;
1:4dd3aa4: import static org.ops4j.pax.exam.CoreOptions.composite;
1:4dd3aa4: import static org.ops4j.pax.exam.CoreOptions.maven;
1:4dd3aa4: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
1:4dd3aa4: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.features;
1:4dd3aa4: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.karafDistributionConfiguration;
1:4dd3aa4: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.keepRuntimeFolder;
1:4dd3aa4: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.logLevel;
1:4dd3aa4: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
1:4dd3aa4: 
1:4dd3aa4: import java.io.File;
1:50ea308: import java.io.FileInputStream;
1:50ea308: import java.io.FileOutputStream;
1:50ea308: import java.io.IOException;
1:50ea308: import java.nio.channels.FileChannel;
1:4dd3aa4: import java.util.concurrent.Callable;
1:4dd3aa4: import java.util.concurrent.TimeUnit;
1:4dd3aa4: 
1:4dd3aa4: import javax.inject.Inject;
1:0f492f3: 
1:30b20b3: import org.apache.karaf.features.FeaturesService;
1:0f492f3: import org.apache.karaf.shell.api.console.SessionFactory;
1:8eb11a3: import org.junit.After;
1:8eb11a3: import org.junit.Before;
1:50ea308: import org.junit.runner.RunWith;
1:4dd3aa4: import org.ops4j.pax.exam.MavenUtils;
1:8eb11a3: import org.ops4j.pax.exam.Option;
1:9743dbd: import org.ops4j.pax.exam.ProbeBuilder;
1:4dd3aa4: import org.ops4j.pax.exam.TestProbeBuilder;
1:50ea308: import org.ops4j.pax.exam.junit.PaxExam;
1:9743dbd: import org.ops4j.pax.exam.karaf.options.LogLevelOption;
1:4dd3aa4: import org.ops4j.pax.exam.options.MavenUrlReference;
1:8eb11a3: import org.ops4j.pax.exam.options.UrlReference;
1:50ea308: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:50ea308: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:25f18ad: import org.osgi.framework.Bundle;
1:8eb11a3: import org.osgi.framework.BundleContext;
1:75d4b76: import org.osgi.framework.Constants;
1:8eb11a3: import org.slf4j.Logger;
1:8eb11a3: import org.slf4j.LoggerFactory;
1:0f492f3: 
1:50ea308: @RunWith(PaxExam.class)
1:50ea308: @ExamReactorStrategy(PerClass.class)
1:8eb11a3: public abstract class AbstractFeatureTest {
1:25f18ad: 
1:4dd3aa4:     private static final String KARAF_MAJOR_VERSION = "4.0.0";
1:25f18ad:     public static final Logger LOG = LoggerFactory.getLogger(AbstractFeatureTest.class);
1:25f18ad:     public static final long ASSERTION_TIMEOUT = 30000L;
1:4dd3aa4:     public static final String RESOURCE_BASE = "src/test/resources/org/apache/activemq/karaf/itest/";
1:75d4b76: 
1:30b20b3:     @Inject
1:25f18ad:     BundleContext bundleContext;
1:75d4b76: 
1:4dd3aa4:     @Inject
1:4dd3aa4:     FeaturesService featuresService;
1:50ea308:     
1:50ea308:     @Inject
1:50ea308:     SessionFactory sessionFactory;
1:30b20b3: 
1:8eb11a3:     @Before
1:8eb11a3:     public void setUp() throws Exception {
1:25f18ad:     }
1:50ea308: 
1:8eb11a3:     @After
1:8eb11a3:     public void tearDown() throws Exception {
1:b65fd27:     }
1:4dd3aa4: 
1:0f492f3: 
1:75d4b76:     @ProbeBuilder
1:75d4b76:     public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:75d4b76:         probe.setHeader(Constants.DYNAMICIMPORT_PACKAGE, "*,org.ops4j.pax.exam.options.*,org.apache.felix.service.*;status=provisional");
1:75d4b76:         return probe;
1:b65fd27:     }
1:b65fd27: 
1:4dd3aa4:     /**
1:4dd3aa4:      * Installs a feature and asserts that feature is properly installed.
1:4dd3aa4:      * 
1:4dd3aa4:      * @param feature
1:4dd3aa4:      * @throws Exception
1:4dd3aa4:      */
1:4dd3aa4:     public void installAndAssertFeature(final String feature) throws Throwable {
1:4dd3aa4:         featuresService.installFeature(feature);
1:4dd3aa4:     }
1:25f18ad: 
1:25f18ad:     public void assertFeatureInstalled(final String feature) throws Throwable {
1:901867e:         withinReason(new Callable<Boolean>() {
1:0f492f3:             @Override
1:901867e:             public Boolean call() throws Exception {
1:901867e:                 assertTrue("Expected " + feature + " feature to be installed.", featuresService.isInstalled(featuresService.getFeature(feature)));
1:901867e:                 return true;
1:25f18ad:             }
1:25f18ad:         });
1:25f18ad:     }
1:4dd3aa4:     
1:4dd3aa4:     public Bundle getBundle(String symName) {
1:25f18ad:         for (Bundle bundle: bundleContext.getBundles()) {
1:4dd3aa4:             if (bundle.getSymbolicName().contains(symName)) {
1:4dd3aa4:                 return bundle;
1:25f18ad:             }
1:25f18ad:         }
1:4dd3aa4:         throw new RuntimeException("Bundle " + symName + " not found");
1:25f18ad:     }
1:b65fd27: 
1:50ea308:     protected String executeCommand(String command) {
1:50ea308: 		return KarafShellHelper.executeCommand(sessionFactory, command);
1:50ea308: 	}
1:50ea308: 
1:50ea308: 	protected void assertBrokerStarted() throws Exception {
1:50ea308: 		withinReason(new Runnable() {
1:50ea308: 	        public void run() {
1:50ea308: 	            assertEquals("brokerName = amq-broker", executeCommand("activemq:list").trim());
1:50ea308: 	            assertTrue(executeCommand("activemq:bstat").trim().contains("BrokerName = amq-broker"));
1:50ea308: 	        }
1:50ea308: 	    });
1:50ea308: 	}
1:50ea308: 
1:50ea308: 	public static Option configureBrokerStart(String xmlConfig) {
1:4dd3aa4:         return composite(
1:4dd3aa4:                 replaceConfigurationFile("etc/activemq.xml", new File(RESOURCE_BASE + xmlConfig + ".xml")),
1:4dd3aa4:                 replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", 
1:4dd3aa4:                                          new File(RESOURCE_BASE + "org.apache.activemq.server-default.cfg"))
1:4dd3aa4:                 );
1:901867e:     }
1:af5f387: 
1:4dd3aa4:     public static Option configureBrokerStart() {
1:4dd3aa4:         return configureBrokerStart("activemq");
1:af5f387:     }
1:af5f387: 
1:4dd3aa4:     public static Option configure(String... features) {
1:4dd3aa4:         MavenUrlReference karafUrl = maven().groupId("org.apache.karaf").artifactId("apache-karaf")
1:4dd3aa4:             .type("tar.gz").versionAsInProject();
1:4dd3aa4:         UrlReference camelUrl = maven().groupId("org.apache.camel.karaf")
1:4dd3aa4:             .artifactId("apache-camel").type("xml").classifier("features").versionAsInProject();
1:4dd3aa4:         UrlReference activeMQUrl = maven().groupId("org.apache.activemq").
1:4dd3aa4:             artifactId("activemq-karaf").versionAsInProject().type("xml").classifier("features").versionAsInProject();
1:4dd3aa4:         return composite(
1:4dd3aa4:          karafDistributionConfiguration().frameworkUrl(karafUrl).karafVersion(KARAF_MAJOR_VERSION)
1:4dd3aa4:              .name("Apache Karaf").unpackDirectory(new File("target/paxexam/unpack/")),
1:4dd3aa4:          keepRuntimeFolder(), //
1:4dd3aa4:          logLevel(LogLevelOption.LogLevel.WARN), //
1:4dd3aa4:          editConfigurationFilePut("etc/config.properties", "karaf.startlevel.bundle", "50"),
1:4dd3aa4:          // debugConfiguration("5005", true),
1:4dd3aa4:          features(activeMQUrl, features), //
1:4dd3aa4:          features(camelUrl)
1:4dd3aa4:         );
1:0f492f3:     }
1:30b20b3: 
1:4dd3aa4:     protected static String camelVersion() {
1:4dd3aa4:         return MavenUtils.getArtifactVersion("org.apache.camel.karaf", "apache-camel");
1:30b20b3:     }
1:30b20b3: 
1:50ea308:     public static boolean withinReason(Callable<Boolean> callable) throws Exception {
1:4dd3aa4:         long max = System.currentTimeMillis() + ASSERTION_TIMEOUT;
1:4dd3aa4:         while (true) {
1:4dd3aa4:             try {
1:75d4b76:                 return callable.call();
1:75d4b76:             } catch (Throwable t) {
1:75d4b76:                 if (System.currentTimeMillis() < max) {
1:4dd3aa4:                     TimeUnit.SECONDS.sleep(1);
1:75d4b76:                     continue;
1:75d4b76:                 } else {
1:75d4b76:                     throw t;
1:964f8ca:                 }
1:d84e8e1:             }
6:75d4b76:         }
1:75d4b76:     }
1:964f8ca:     
1:50ea308:     public static void withinReason(Runnable runable) {
1:75d4b76:         long max = System.currentTimeMillis() + ASSERTION_TIMEOUT;
1:75d4b76:         while (true) {
2:25f18ad:             try {
1:4dd3aa4:                 runable.run();
1:4dd3aa4:                 return;
1:4dd3aa4:             } catch (Throwable t) {
1:4dd3aa4:                 if (System.currentTimeMillis() < max) {
1:50ea308:                     try {
1:50ea308: 						TimeUnit.SECONDS.sleep(1);
1:50ea308: 					} catch (InterruptedException e) {
1:50ea308: 						throw new RuntimeException(e);
1:50ea308: 					}
1:4dd3aa4:                     continue;
1:4dd3aa4:                 } else {
1:4dd3aa4:                     throw t;
1:4dd3aa4:                 }
1:4dd3aa4:             }
1:4dd3aa4:         }
1:4dd3aa4:     }
1:d84e8e1:     
1:50ea308:     @SuppressWarnings("resource")
1:50ea308:     public static void copyFile(File from, File to) throws IOException {
1:50ea308:         if (!to.exists()) {
1:50ea308:             System.err.println("Creating new file for: "+ to);
1:50ea308:             to.createNewFile();
1:50ea308:         }
1:50ea308:         FileChannel in = new FileInputStream(from).getChannel();
1:50ea308:         FileChannel out = new FileOutputStream(to).getChannel();
1:50ea308:         try {
1:50ea308:             long size = in.size();
1:50ea308:             long position = 0;
1:50ea308:             while (position < size) {
1:50ea308:                 position += in.transferTo(position, 8192, out);
1:50ea308:             }
1:50ea308:         } finally {
1:50ea308:             try {
1:50ea308:                 in.close();
1:50ea308:                 out.force(true);
1:50ea308:                 out.close();
1:50ea308:             } catch (Exception e) {
1:50ea308:                 // ignore
1:50ea308:             }
1:50ea308:         }
1:50ea308:     }
1:50ea308: 
1:25f18ad: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:50ea308
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.nio.channels.FileChannel;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Inject
1:     SessionFactory sessionFactory;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected String executeCommand(String command) {
1: 		return KarafShellHelper.executeCommand(sessionFactory, command);
1: 	}
1: 
1: 	protected void assertBrokerStarted() throws Exception {
1: 		withinReason(new Runnable() {
1: 	        public void run() {
1: 	            assertEquals("brokerName = amq-broker", executeCommand("activemq:list").trim());
1: 	            assertTrue(executeCommand("activemq:bstat").trim().contains("BrokerName = amq-broker"));
1: 	        }
1: 	    });
1: 	}
1: 
1: 	public static Option configureBrokerStart(String xmlConfig) {
/////////////////////////////////////////////////////////////////////////
1:     public static boolean withinReason(Callable<Boolean> callable) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public static void withinReason(Runnable runable) {
/////////////////////////////////////////////////////////////////////////
1:                     try {
1: 						TimeUnit.SECONDS.sleep(1);
1: 					} catch (InterruptedException e) {
1: 						throw new RuntimeException(e);
1: 					}
/////////////////////////////////////////////////////////////////////////
1:     
1:     @SuppressWarnings("resource")
1:     public static void copyFile(File from, File to) throws IOException {
1:         if (!to.exists()) {
1:             System.err.println("Creating new file for: "+ to);
1:             to.createNewFile();
1:         }
1:         FileChannel in = new FileInputStream(from).getChannel();
1:         FileChannel out = new FileOutputStream(to).getChannel();
1:         try {
1:             long size = in.size();
1:             long position = 0;
1:             while (position < size) {
1:                 position += in.transferTo(position, 8192, out);
1:             }
1:         } finally {
1:             try {
1:                 in.close();
1:                 out.force(true);
1:                 out.close();
1:             } catch (Exception e) {
1:                 // ignore
1:             }
1:         }
1:     }
1: 
commit:4dd3aa4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.maven;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.features;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.karafDistributionConfiguration;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.keepRuntimeFolder;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.logLevel;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
1: 
0: import java.io.ByteArrayOutputStream;
1: import java.io.File;
0: import java.io.PrintStream;
0: import java.security.PrivilegedAction;
1: import java.util.concurrent.Callable;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.FutureTask;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.inject.Inject;
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.MavenUtils;
1: import org.ops4j.pax.exam.TestProbeBuilder;
1: import org.ops4j.pax.exam.options.MavenUrlReference;
/////////////////////////////////////////////////////////////////////////
1:     private static final String KARAF_MAJOR_VERSION = "4.0.0";
1:     public static final String RESOURCE_BASE = "src/test/resources/org/apache/activemq/karaf/itest/";
1:     @Inject
1:     FeaturesService featuresService;
/////////////////////////////////////////////////////////////////////////
0:     private String executeCommand(final String command, final Long timeout, final Boolean silent) {
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Installs a feature and asserts that feature is properly installed.
1:      * 
1:      * @param feature
1:      * @throws Exception
1:      */
1:     public void installAndAssertFeature(final String feature) throws Throwable {
1:         featuresService.installFeature(feature);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     
1:     public Bundle getBundle(String symName) {
1:             if (bundle.getSymbolicName().contains(symName)) {
1:                 return bundle;
1:         throw new RuntimeException("Bundle " + symName + " not found");
0:     public static Option configureBrokerStart(String xmlConfig) {
1:         return composite(
1:                 replaceConfigurationFile("etc/activemq.xml", new File(RESOURCE_BASE + xmlConfig + ".xml")),
1:                 replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", 
1:                                          new File(RESOURCE_BASE + "org.apache.activemq.server-default.cfg"))
1:                 );
1:     public static Option configureBrokerStart() {
1:         return configureBrokerStart("activemq");
1:     public static Option configure(String... features) {
1:         MavenUrlReference karafUrl = maven().groupId("org.apache.karaf").artifactId("apache-karaf")
1:             .type("tar.gz").versionAsInProject();
1:         UrlReference camelUrl = maven().groupId("org.apache.camel.karaf")
1:             .artifactId("apache-camel").type("xml").classifier("features").versionAsInProject();
1:         UrlReference activeMQUrl = maven().groupId("org.apache.activemq").
1:             artifactId("activemq-karaf").versionAsInProject().type("xml").classifier("features").versionAsInProject();
1:         return composite(
1:          karafDistributionConfiguration().frameworkUrl(karafUrl).karafVersion(KARAF_MAJOR_VERSION)
1:              .name("Apache Karaf").unpackDirectory(new File("target/paxexam/unpack/")),
1:          keepRuntimeFolder(), //
1:          logLevel(LogLevelOption.LogLevel.WARN), //
1:          editConfigurationFilePut("etc/config.properties", "karaf.startlevel.bundle", "50"),
1:          // debugConfiguration("5005", true),
1:          features(activeMQUrl, features), //
1:          features(camelUrl)
1:         );
1:     protected static String camelVersion() {
1:         return MavenUtils.getArtifactVersion("org.apache.camel.karaf", "apache-camel");
/////////////////////////////////////////////////////////////////////////
1:     
0:     protected void withinReason(Runnable runable) throws Exception {
1:         long max = System.currentTimeMillis() + ASSERTION_TIMEOUT;
1:         while (true) {
1:             try {
1:                 runable.run();
1:                 return;
1:             } catch (Throwable t) {
1:                 if (System.currentTimeMillis() < max) {
1:                     TimeUnit.SECONDS.sleep(1);
1:                     continue;
1:                 } else {
1:                     throw t;
1:                 }
1:             }
1:         }
1:     }
commit:b0884f8
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0f492f3
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.karaf.shell.api.console.Session;
1: import org.apache.karaf.shell.api.console.SessionFactory;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     SessionFactory sessionFactory;
1: 
0:         final Session commandSession = sessionFactory.create(System.in, printStream, printStream);
1:                     @Override
/////////////////////////////////////////////////////////////////////////
0:         executeCommand("feature:list -i");
0: 		executeCommand("feature:install " + feature);
0:         executeCommand("feature:list -i");
/////////////////////////////////////////////////////////////////////////
0:             if (bundle.getSymbolicName().contains(bundleName)) {
/////////////////////////////////////////////////////////////////////////
0:         if (f.contains("activemq-camel")) {
0:             options = append(features(maven().groupId("org.apache.camel.karaf").artifactId("apache-camel")
0:                     .versionAsInProject()
0:                     .type("xml/features")), options);
1:         }
author:gtully
-------------------------------------------------------------------------------
commit:25f18ad
/////////////////////////////////////////////////////////////////////////
0: import javax.security.auth.Subject;
0: import org.apache.karaf.jaas.boot.principal.RolePrincipal;
0: import org.apache.karaf.jaas.boot.principal.UserPrincipal;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
/////////////////////////////////////////////////////////////////////////
0: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.*;
1:     public static final Logger LOG = LoggerFactory.getLogger(AbstractFeatureTest.class);
1:     public static final long ASSERTION_TIMEOUT = 30000L;
0:     public static final long COMMAND_TIMEOUT = 30000L;
/////////////////////////////////////////////////////////////////////////
0:             System.err.println("basedir=" + basedir);
1:     BundleContext bundleContext;
/////////////////////////////////////////////////////////////////////////
0:         String response;
0:         final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
0:         final PrintStream printStream = new PrintStream(byteArrayOutputStream);
0:         final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, printStream);
0:         commandSession.put("APPLICATION", System.getProperty("karaf.name", "root"));
0:         commandSession.put("USER", USER);
0:         FutureTask<String> commandFuture = new FutureTask<String>(
0:                 new Callable<String>() {
0:                     public String call() {
1: 
0:                         Subject subject = new Subject();
0:                         subject.getPrincipals().add(new UserPrincipal("admin"));
0:                         subject.getPrincipals().add(new RolePrincipal("admin"));
0:                         subject.getPrincipals().add(new RolePrincipal("manager"));
0:                         subject.getPrincipals().add(new RolePrincipal("viewer"));
0:                         return Subject.doAs(subject, new PrivilegedAction<String>() {
0:                             @Override
0:                             public String run() {
1:                                 try {
0:                                     if (!silent) {
0:                                         System.out.println(command);
0:                                         System.out.flush();
1:                                     }
0:                                     commandSession.execute(command);
0:                                 } catch (Exception e) {
0:                                     e.printStackTrace(System.err);
0:                                 printStream.flush();
0:                                 return byteArrayOutputStream.toString();
1:                         });
0:                     }});
1:         try {
0:             executor.submit(commandFuture);
0:             response = commandFuture.get(timeout, TimeUnit.MILLISECONDS);
0:         } catch (Exception e) {
0:             e.printStackTrace(System.err);
0:             response = "SHELL COMMAND TIMED OUT: ";
0:         LOG.info("Execute: " + command + " - Response:" + response);
0:         return response;
1:     }
/////////////////////////////////////////////////////////////////////////
0:         executeCommand("osgi:list -t 0");
0: 		executeCommand("features:install " + feature);
0: 		assertFeatureInstalled(feature);
1: 	}
1: 
1:     public void assertFeatureInstalled(final String feature) throws Throwable {
0:         executeCommand("osgi:list -t 0");
/////////////////////////////////////////////////////////////////////////
1:     }
0:     public boolean verifyBundleInstalled(final String bundleName) throws Exception {
0:         boolean found = false;
1:         for (Bundle bundle: bundleContext.getBundles()) {
0:             LOG.debug("Checking: " + bundle.getSymbolicName());
0:             if (bundle.getSymbolicName().equals(bundleName)) {
0:                 found = true;
0:                 break;
1:             }
1:         }
0:         return found;
1:     }
/////////////////////////////////////////////////////////////////////////
0:         UrlReference urlReference = mavenBundle().groupId("org.apache.activemq").
0:         System.err.println("FeatureURL: " + urlReference.getURL());
0:         return urlReference;
/////////////////////////////////////////////////////////////////////////
0:                 replaceConfigurationFile("etc/activemq.xml", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/" + xmlConfig + ".xml")),
0:                 replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/org.apache.activemq.server-default.cfg")),
/////////////////////////////////////////////////////////////////////////
0:                     maven().groupId("org.apache.karaf").artifactId("apache-karaf").type("tar.gz").versionAsInProject())
0:                 logLevel(LogLevelOption.LogLevel.WARN),
0:                 editConfigurationFilePut("etc/config.properties", "karaf.startlevel.bundle", "50"),
0:                 //debugConfiguration("5005", true),
commit:9743dbd
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.ProbeBuilder;
0: import org.ops4j.pax.exam.karaf.options.KarafDistributionOption;
1: import org.ops4j.pax.exam.karaf.options.LogLevelOption;
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.karafDistributionConfiguration;
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.features;
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.logLevel;
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
/////////////////////////////////////////////////////////////////////////
0:         return System.getProperty("karafVersion", "unknown-need-env-var");
/////////////////////////////////////////////////////////////////////////
0:                     //This version doesn't affect the version of karaf we use
1: 
0:                 logLevel(LogLevelOption.LogLevel.INFO),
0:                 features(getActiveMQKarafFeatureUrl(), f.toArray(new String[f.size()]))};
commit:27a5f6b
/////////////////////////////////////////////////////////////////////////
0:                 replaceConfigurationFile("etc/config.properties", new File(basedir+"/target/classes/org/apache/activemq/karaf/itest/config.properties")),
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:901867e
/////////////////////////////////////////////////////////////////////////
0: 	public void installAndAssertFeature(final String feature) throws Throwable {
1:         withinReason(new Callable<Boolean>() {
0:             @Override
1:             public Boolean call() throws Exception {
1:                 assertTrue("Expected " + feature + " feature to be installed.", featuresService.isInstalled(featuresService.getFeature(feature)));
1:                 return true;
1:             }
0:         });
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:f28ac6d
/////////////////////////////////////////////////////////////////////////
0:         return System.getProperty("karafVersion", "2.3.3");
author:Gary Tully
-------------------------------------------------------------------------------
commit:b65fd27
/////////////////////////////////////////////////////////////////////////
0:         return getCamelFeatureUrl(System.getProperty("camel.version", "unknown"));
1:     }
1: 
0:     public static String getCamelFeatureUrl(String ver) {
0:         + ver
/////////////////////////////////////////////////////////////////////////
0:     public static Option[] configureBrokerStart(Option[] existingOptions, String xmlConfig) {
0:                 replaceConfigurationFile("etc/activemq.xml", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/" + xmlConfig + ".xml")),
0:     public static Option[] configureBrokerStart(Option[] existingOptions) {
0:         final String xmlConfig = "activemq";
0:         return configureBrokerStart(existingOptions, xmlConfig);
1:     }
1: 
commit:af5f387
/////////////////////////////////////////////////////////////////////////
0:     private static final long COMMAND_TIMEOUT = 30000L;
/////////////////////////////////////////////////////////////////////////
1: 
0:     // for use from a probe
0:     public String getCamelFeatureUrl() {
0:         return "mvn:org.apache.camel.karaf/apache-camel/"
0:         + System.getProperty("camel.version", "unknown")
0:         + "/xml/features";
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 //logLevel(LogLevelOption.LogLevel.DEBUG),
commit:30b20b3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.karaf.features.FeaturesService;
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: 	@Inject
0: 	FeaturesService featuresService;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * Installs a feature and asserts that feature is properly installed.
0: 	 * @param feature
0: 	 * @throws Exception
1: 	 */
0: 	public void installAndAssertFeature(String feature) throws Exception {
0: 		System.err.println(executeCommand("features:install " + feature));
0: 		System.err.println(executeCommand("osgi:list -t 0"));
0: 		assertTrue("Expected " + feature + " feature to be installed.", featuresService.isInstalled(featuresService.getFeature(feature)));
1: 	}
1: 
1: 
0: 	public static String karafVersion() {
commit:964f8ca
/////////////////////////////////////////////////////////////////////////
0:         existingOptions = append(
0:                 replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/org.apache.activemq.server-default.cfg")),
0:                 existingOptions);
0:         return append(
0:                 replaceConfigurationFile("etc/activemq.xml", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/activemq.xml")),
0:                 existingOptions);
1:     }
1: 
0:     public static Option[] append(Option toAdd, Option[] existingOptions) {
0:         newOptions.add(toAdd);
commit:e20234e
/////////////////////////////////////////////////////////////////////////
0:         newOptions.add(replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/org.apache.activemq.server-default.cfg")));
commit:d84e8e1
/////////////////////////////////////////////////////////////////////////
0:     public static Option[] configureBrokerStart(Option[] existingOptions) {
0:         ArrayList<Option> newOptions = new ArrayList<Option>();
0:         newOptions.addAll(Arrays.asList(existingOptions));
0:         newOptions.add(replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/org.apache.activemq.server.cfg")));
0:         newOptions.add(replaceConfigurationFile("etc/activemq.xml", new File(basedir + "/src/test/resources/org/apache/activemq/karaf/itest/activemq.xml")));
0:         return newOptions.toArray(new Option[]{});
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:88beb15
/////////////////////////////////////////////////////////////////////////
0:     public static final String USER = "karaf";
0:     public static final String PASSWORD = "karaf";
/////////////////////////////////////////////////////////////////////////
0:             commandSession.put("USER", USER);
/////////////////////////////////////////////////////////////////////////
commit:d5056d5
/////////////////////////////////////////////////////////////////////////
0:                 replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", new File(basedir+"/src/test/resources/org/apache/activemq/karaf/itest/org.apache.activemq.server.cfg")),
commit:75d4b76
/////////////////////////////////////////////////////////////////////////
0: import org.apache.felix.service.command.CommandProcessor;
0: import org.apache.felix.service.command.CommandSession;
0: import org.ops4j.pax.exam.TestProbeBuilder;
0: import org.ops4j.pax.exam.junit.ProbeBuilder;
1: import org.osgi.framework.Constants;
0: import java.io.ByteArrayOutputStream;
0: import java.io.PrintStream;
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.FutureTask;
0: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static final long ASSERTION_TIMEOUT = 20000L;
0:     private static final long COMMAND_TIMEOUT = 10000L;
1: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     @ProbeBuilder
1:     public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:         probe.setHeader(Constants.DYNAMICIMPORT_PACKAGE, "*,org.ops4j.pax.exam.options.*,org.apache.felix.service.*;status=provisional");
1:         return probe;
1:     }
0: 
0:     @Inject
0:     CommandProcessor commandProcessor;
0:     ExecutorService executor = Executors.newCachedThreadPool();
0: 
0:     protected String executeCommand(final String command, final Long timeout, final Boolean silent) {
0:             String response;
0:             final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
0:             final PrintStream printStream = new PrintStream(byteArrayOutputStream);
0:             final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, printStream);
0:             commandSession.put("APPLICATION", System.getProperty("karaf.name", "root"));
0:             commandSession.put("USER", "karaf");
0:             FutureTask<String> commandFuture = new FutureTask<String>(
0:                     new Callable<String>() {
0:                         public String call() {
0:                             try {
0:                                 if (!silent) {
0:                                     System.out.println(command);
0:                                     System.out.flush();
1:                                 }
0:                                 commandSession.execute(command);
0:                             } catch (Exception e) {
0:                                 e.printStackTrace(System.err);
1:                             }
0:                             printStream.flush();
0:                             return byteArrayOutputStream.toString();
1:                         }
0:                     });
0: 
0:             try {
0:                 executor.submit(commandFuture);
0:                 response = commandFuture.get(timeout, TimeUnit.MILLISECONDS);
0:             } catch (Exception e) {
0:                 e.printStackTrace(System.err);
0:                 response = "SHELL COMMAND TIMED OUT: ";
1:             }
0: 
0:             return response;
1:         }
0: 
0:     protected String executeCommand(final String command) {
0:         return executeCommand(command, COMMAND_TIMEOUT, false);
1:     }
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:                 replaceConfigurationFile("etc/org.ops4j.pax.logging.cfg", new File(basedir+"/src/test/resources/org/apache/activemq/karaf/itest/org.ops4j.pax.logging.cfg")),
0:     protected boolean withinReason(Callable<Boolean> callable) throws Throwable {
1:         long max = System.currentTimeMillis() + ASSERTION_TIMEOUT;
1:         while (true) {
0:             try {
1:                 return callable.call();
1:             } catch (Throwable t) {
1:                 if (System.currentTimeMillis() < max) {
0:                     TimeUnit.SECONDS.sleep(1);
1:                     continue;
1:                 } else {
1:                     throw t;
0:                 }
0:             }
0:         }
0:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0d529af
/////////////////////////////////////////////////////////////////////////
0:                 //replaceConfigurationFile("etc/org.ops4j.pax.logging.cfg", new File(basedir+"/src/test/resources/org/apache/activemq/karaf/itest/org.ops4j.pax.logging.cfg")),
commit:94f71cc
/////////////////////////////////////////////////////////////////////////
0:                 replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", new File(basedir+"/src/test/resources/org/apache/activemq/karaf/itest/org.apache.activemq.server-default.cfg")),
0:                 replaceConfigurationFile("etc/activemq.xml", new File(basedir+"/src/test/resources/org/apache/activemq/karaf/itest/activemq.xml")),
commit:eff1194
/////////////////////////////////////////////////////////////////////////
0:             artifactId("activemq-karaf").versionAsInProject().type(type);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:8eb11a3
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.karaf.itest;
0: 
1: import org.junit.After;
1: import org.junit.Before;
0: import org.openengsb.labs.paxexam.karaf.options.KarafDistributionOption;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.options.UrlReference;
1: import org.osgi.framework.BundleContext;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 
0: import javax.inject.Inject;
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: 
0: import static org.openengsb.labs.paxexam.karaf.options.KarafDistributionOption.karafDistributionConfiguration;
0: import static org.openengsb.labs.paxexam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
0: import static org.ops4j.pax.exam.CoreOptions.*;
0: 
1: public abstract class AbstractFeatureTest {
0: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AbstractFeatureTest.class);
0:     static String basedir;
0:     static {
0:         try {
0:             File location = new File(AbstractFeatureTest.class.getProtectionDomain().getCodeSource().getLocation().getFile());
0:             basedir = new File(location, "../..").getCanonicalPath();
0:         } catch (IOException e) {
0:             throw new RuntimeException(e);
0:         }
0:     }
0: 
0:     @Inject
0:     protected BundleContext bundleContext;
0: 
1:     @Before
1:     public void setUp() throws Exception {
0:     }
0: 
1:     @After
1:     public void tearDown() throws Exception {
0:     }
0: 
0: //    protected void testComponent(String component) throws Exception {
0: //        long max = System.currentTimeMillis() + 10000;
0: //        while (true) {
0: //            try {
0: //                assertNotNull("Cannot get component with name: " + component, createCamelContext().getComponent(component));
0: //                return;
0: //            } catch (Exception t) {
0: //                if (System.currentTimeMillis() < max) {
0: //                    Thread.sleep(1000);
0: //                } else {
0: //                    throw t;
0: //                }
0: //            }
0: //        }
0: //    }
0: //
0: //    protected void testDataFormat(String format) throws Exception {
0: //        long max = System.currentTimeMillis() + 10000;
0: //        while (true) {
0: //            try {
0: //                DataFormatDefinition dataFormatDefinition = createDataformatDefinition(format);
0: //                assertNotNull(dataFormatDefinition);
0: //                assertNotNull(dataFormatDefinition.getDataFormat(new DefaultRouteContext(createCamelContext())));
0: //                return;
0: //            } catch (Exception t) {
0: //                if (System.currentTimeMillis() < max) {
0: //                    Thread.sleep(1000);
0: //                    continue;
0: //                } else {
0: //                    throw t;
0: //                }
0: //            }
0: //        }
0: //    }
0: //
0: //    protected DataFormatDefinition createDataformatDefinition(String format) {
0: //        return null;
0: //    }
0: 
0: //    protected void testLanguage(String lang) throws Exception {
0: //        long max = System.currentTimeMillis() + 10000;
0: //        while (true) {
0: //            try {
0: //                assertNotNull(createCamelContext().resolveLanguage(lang));
0: //                return;
0: //            } catch (Exception t) {
0: //                if (System.currentTimeMillis() < max) {
0: //                    Thread.sleep(1000);
0: //                    continue;
0: //                } else {
0: //                    throw t;
0: //                }
0: //            }
0: //        }
0: //    }
0: 
0: //    protected CamelContext createCamelContext() throws Exception {
0: //        CamelContextFactory factory = new CamelContextFactory();
0: //        factory.setBundleContext(bundleContext);
0: //        LOG.info("Get the bundleContext is " + bundleContext);
0: //        return factory.createContext();
0: //    }
0: 
0: 
0:     public static String karafVersion() {
0:         return System.getProperty("karafVersion", "2.3.0");
0:     }
0: 
0:     public static String activemqVersion() {
0:         Package p = Package.getPackage("org.apache.activemq");
0:         String version=null;
0:         if (p != null) {
0:             version = p.getImplementationVersion();
0:         }
0:         return System.getProperty("activemqVersion", version);
0:     }
0: 
0: 
0:     public static UrlReference getActiveMQKarafFeatureUrl() {
0:         String type = "xml/features";
0:         return mavenBundle().groupId("org.apache.activemq").
0:             artifactId("activemq-karaf").version(activemqVersion()).type(type);
0:     }
0:     
0:     public static UrlReference getKarafFeatureUrl() {
0:         LOG.info("*** The karaf version is " + karafVersion() + " ***");
0: 
0:         String type = "xml/features";
0:         return mavenBundle().groupId("org.apache.karaf.assemblies.features").
0:             artifactId("standard").version(karafVersion()).type(type);
0:     }
0: 
0:     public static Option[] configure(String ...features) {
0: 
0:         ArrayList<String> f = new ArrayList<String>();
0:         // install the cxf jaxb spec as the karaf doesn't provide it by default
0:         // f.add("cxf-jaxb");
0:         f.addAll(Arrays.asList(features));
0: 
0:         Option[] options =
0:             new Option[]{
0:                 karafDistributionConfiguration().frameworkUrl(
0:                     maven().groupId("org.apache.karaf").artifactId("apache-karaf").type("tar.gz").version(karafVersion()))
0:                     //This version doesn't affect the version of karaf we use 
0:                     .karafVersion(karafVersion()).name("Apache Karaf")
0:                     .unpackDirectory(new File("target/paxexam/unpack/")),
0:                 
0:                 KarafDistributionOption.keepRuntimeFolder(),
0:                 // override the config.properties (to fix pax-exam bug)
0:                 replaceConfigurationFile("etc/config.properties", new File(basedir+"/src/test/resources/org/apache/activemq/karaf/itest/config.properties")),
0:                 replaceConfigurationFile("etc/custom.properties", new File(basedir+"/src/test/resources/org/apache/activemq/karaf/itest/custom.properties")),
0:                 scanFeatures(getActiveMQKarafFeatureUrl(), f.toArray(new String[f.size()]))};
0: 
0:         return options;
0:     }
0: 
0: }
============================================================================