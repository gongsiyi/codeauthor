1:07d4e8c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
2:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.jmx;
1:fc00993: 
1:6630e81: import java.io.IOException;
1:f71e2fe: import java.util.Map;
1:f71e2fe: 
1:6630e81: import javax.management.MalformedObjectNameException;
1:3601e81: import javax.management.ObjectName;
1:6630e81: import javax.management.openmbean.CompositeData;
1:6630e81: import javax.management.openmbean.OpenDataException;
1:fde22a8: 
1:d29ca2a: import org.apache.activemq.Service;
1:c1051c8: 
1:d29ca2a: public interface BrokerViewMBean extends Service {
1:c1051c8: 
1:df6b542:     /**
1:fc00993:      * @return The unique id of the broker.
1:c4d8d86:      */
1:ced6909:     @MBeanInfo("The unique id of the broker.")
1:fc00993:     String getBrokerId();
1:c1051c8: 
1:c4d8d86:     /**
1:89f793e:      * @return The name of the broker.
1:fc00993:      */
1:ced6909:     @MBeanInfo("The name of the broker.")
1:7092b19:     String getBrokerName();
1:83c3dca: 
1:fc00993:     /**
1:093c901:      * @return The name of the broker.
1:07d4e8c:      */
1:093c901:     @MBeanInfo("The version of the broker.")
1:7092b19:     String getBrokerVersion();
1:3601e81: 
1:07d4e8c:     /**
1:f2225c2:      * @return Uptime of the broker.
1:f2225c2:      */
1:f2225c2:     @MBeanInfo("Uptime of the broker.")
1:f2225c2:     String getUptime();
1:f2225c2: 
1:f2225c2:     /**
1:8e0865d:      * @return Uptime of the broker in milliseconds.
1:8e0865d:      */
1:8e0865d:     @MBeanInfo("Uptime of the broker in milliseconds.")
1:8e0865d:     long getUptimeMillis();
1:8e0865d: 
1:8e0865d:     /**
1:fde22a8:      * @return The current number of active connections on this Broker.
1:fde22a8:      */
1:fde22a8:     int getCurrentConnectionsCount();
1:fde22a8: 
1:fde22a8:     /**
1:fde22a8:      * @return The total number of connections serviced since this Broker was started.
1:fde22a8:      */
1:fde22a8:     long getTotalConnectionsCount();
1:fde22a8: 
1:fde22a8:     /**
1:0e95460:      * The Broker will flush it's caches so that the garbage collector can
1:0e95460:      * reclaim more memory.
1:07d4e8c:      *
1:df6b542:      * @throws Exception
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Runs the Garbage Collector.")
1:fc00993:     void gc() throws Exception;
1:3601e81: 
1:ced6909:     @MBeanInfo("Reset all broker statistics.")
1:fc00993:     void resetStatistics();
1:3601e81: 
1:ced6909:     @MBeanInfo("Enable broker statistics.")
1:fc00993:     void enableStatistics();
1:fc00993: 
1:ced6909:     @MBeanInfo("Disable broker statistics.")
1:fc00993:     void disableStatistics();
1:fc00993: 
1:ced6909:     @MBeanInfo("Broker statistics enabled.")
1:fc00993:     boolean isStatisticsEnabled();
1:fc00993: 
1:ced6909:     @MBeanInfo("Number of messages that have been sent to the broker.")
1:fc00993:     long getTotalEnqueueCount();
1:fc00993: 
1:ced6909:     @MBeanInfo("Number of messages that have been acknowledged on the broker.")
1:fc00993:     long getTotalDequeueCount();
1:fc00993: 
1:ced6909:     @MBeanInfo("Number of message consumers subscribed to destinations on the broker.")
1:fc00993:     long getTotalConsumerCount();
1:fc00993: 
1:7092b19:     @MBeanInfo("Number of message producers active on destinations on the broker.")
1:7092b19:     long getTotalProducerCount();
1:fc00993: 
1:ced6909:     @MBeanInfo("Number of unacknowledged messages on the broker.")
1:fc00993:     long getTotalMessageCount();
1:f71e2fe: 
1:f71e2fe:     @MBeanInfo("Average message size on this broker")
1:37eb6b0:     long getAverageMessageSize();
1:f71e2fe: 
1:f71e2fe:     @MBeanInfo("Max message size on this broker")
1:f71e2fe:     public long getMaxMessageSize();
1:f71e2fe: 
1:f71e2fe:     @MBeanInfo("Min message size on this broker")
1:f71e2fe:     public long getMinMessageSize();
1:f71e2fe: 
1:ced6909:     @MBeanInfo("Percent of memory limit used.")
1:23cda2d:     int getMemoryPercentUsage();
1:fc00993: 
1:ced6909:     @MBeanInfo("Memory limit, in bytes, used for holding undelivered messages before paging to temporary storage.")
1:fc00993:     long getMemoryLimit();
1:83c3dca: 
1:ced6909:     void setMemoryLimit(@MBeanInfo("bytes") long limit);
1:83c3dca: 
1:ced6909:     @MBeanInfo("Percent of store limit used.")
1:23cda2d:     int getStorePercentUsage();
1:082bbf0: 
1:ced6909:     @MBeanInfo("Disk limit, in bytes, used for persistent messages before producers are blocked.")
1:83c3dca:     long getStoreLimit();
1:83c3dca: 
1:ced6909:     void setStoreLimit(@MBeanInfo("bytes") long limit);
1:83c3dca: 
1:ced6909:     @MBeanInfo("Percent of temp limit used.")
1:23cda2d:     int getTempPercentUsage();
1:83c3dca: 
1:f21992e:     @MBeanInfo("Disk limit, in bytes, used for non-persistent messages and temporary data before producers are blocked.")
1:23cda2d:     long getTempLimit();
1:83c3dca: 
1:ced6909:     void setTempLimit(@MBeanInfo("bytes") long limit);
1:fde22a8: 
1:f21992e:     @MBeanInfo("Percent of job store limit used.")
1:f21992e:     int getJobSchedulerStorePercentUsage();
1:fc00993: 
1:f21992e:     @MBeanInfo("Disk limit, in bytes, used for scheduled messages before producers are blocked.")
1:f21992e:     long getJobSchedulerStoreLimit();
1:fc00993: 
1:f21992e:     void setJobSchedulerStoreLimit(@MBeanInfo("bytes") long limit);
1:cb1d21f: 
1:ced6909:     @MBeanInfo("Messages are synchronized to disk.")
1:082bbf0:     boolean isPersistent();
1:07d4e8c: 
1:d75e418:     @MBeanInfo("Slave broker.")
1:d75e418:     boolean isSlave();
1:07d4e8c: 
1:07d4e8c:     /**
1:07d4e8c:      * Shuts down the JVM.
1:fc00993:      *
1:fc00993:      * @param exitCode the exit code that will be reported by the JVM process
1:fc00993:      *                when it exits.
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Shuts down the JVM.")
1:ced6909:     void terminateJVM(@MBeanInfo("exitCode") int exitCode);
1:fc00993: 
1:07d4e8c:     /**
1:857cc8c:      * Stop the broker and all it's components.
1:07d4e8c:      */
1:fde22a8:     @Override
1:98497b1:     @MBeanInfo("Stop the broker and all its components.")
1:fc00993:     void stop() throws Exception;
1:4a16c1f: 
1:4a16c1f:     /**
1:4a16c1f:      * Restart the broker and all it's components.
1:4a16c1f:      */
1:4a16c1f:     @MBeanInfo("Restart the broker and all its components.")
1:4a16c1f:     void restart() throws Exception;
1:4a16c1f: 
1:98497b1:     @MBeanInfo("Poll for queues matching queueName are empty before stopping")
1:98497b1:     void stopGracefully(String connectorName, String queueName, long timeout, long pollInterval) throws Exception;
1:fc00993: 
1:ced6909:     @MBeanInfo("Topics (broadcasted 'queues'); generally system information.")
1:fc00993:     ObjectName[] getTopics();
1:fc00993: 
1:ced6909:     @MBeanInfo("Standard Queues containing AIE messages.")
1:fc00993:     ObjectName[] getQueues();
1:fc00993: 
1:6630e81:     /**
1:6630e81:      * Queue Query API, take a look at {@link DestinationsViewFilter} for more information
1:6630e81:      */
1:6630e81:     @MBeanInfo("Query queues")
1:6630e81:     String queryQueues(String filter, int page, int pageSize) throws IOException;
1:6630e81: 
1:6630e81:     /**
1:6630e81:      * Topic Query API, take a look at {@link DestinationsViewFilter} for more information
1:6630e81:      */
1:6630e81:     @MBeanInfo("Query topics")
1:6630e81:     String queryTopics(String filter, int page, int pageSize) throws IOException;
1:6630e81: 
1:6630e81:     public CompositeData[] browseQueue(String queueName) throws OpenDataException, MalformedObjectNameException;
1:6630e81: 
1:ced6909:     @MBeanInfo("Temporary Topics; generally unused.")
1:fc00993:     ObjectName[] getTemporaryTopics();
1:fc00993: 
1:ced6909:     @MBeanInfo("Temporary Queues; generally temporary message response holders.")
1:fc00993:     ObjectName[] getTemporaryQueues();
1:fc00993: 
1:ced6909:     @MBeanInfo("Topic Subscribers")
1:fc00993:     ObjectName[] getTopicSubscribers();
1:fc00993: 
1:ced6909:     @MBeanInfo("Durable (persistent) topic subscribers")
1:fc00993:     ObjectName[] getDurableTopicSubscribers();
1:fc00993: 
1:ced6909:     @MBeanInfo("Inactive (disconnected persistent) topic subscribers")
1:fc00993:     ObjectName[] getInactiveDurableTopicSubscribers();
1:fc00993: 
1:ced6909:     @MBeanInfo("Queue Subscribers.")
1:fc00993:     ObjectName[] getQueueSubscribers();
1:fc00993: 
1:ced6909:     @MBeanInfo("Temporary Topic Subscribers.")
1:fc00993:     ObjectName[] getTemporaryTopicSubscribers();
1:fc00993: 
1:ced6909:     @MBeanInfo("Temporary Queue Subscribers.")
1:fc00993:     ObjectName[] getTemporaryQueueSubscribers();
1:e2ef8b8: 
1:7092b19:     @MBeanInfo("Topic Producers.")
1:7092b19:     public ObjectName[] getTopicProducers();
1:e2ef8b8: 
1:7092b19:     @MBeanInfo("Queue Producers.")
1:7092b19:     public ObjectName[] getQueueProducers();
1:e2ef8b8: 
1:7092b19:     @MBeanInfo("Temporary Topic Producers.")
1:7092b19:     public ObjectName[] getTemporaryTopicProducers();
1:e2ef8b8: 
1:7092b19:     @MBeanInfo("Temporary Queue Producers.")
1:7092b19:     public ObjectName[] getTemporaryQueueProducers();
1:fc00993: 
1:629b18c:     @MBeanInfo("Dynamic Destination Producers.")
1:629b18c:     public ObjectName[] getDynamicDestinationProducers();
1:07d4e8c: 
1:ced6909:     @MBeanInfo("Adds a Connector to the broker.")
1:ced6909:     String addConnector(@MBeanInfo("discoveryAddress") String discoveryAddress) throws Exception;
1:07d4e8c: 
1:ced6909:     @MBeanInfo("Adds a Network Connector to the broker.")
1:ced6909:     String addNetworkConnector(@MBeanInfo("discoveryAddress") String discoveryAddress) throws Exception;
4:d29ca2a: 
1:ced6909:     @MBeanInfo("Removes a Connector from the broker.")
1:ced6909:     boolean removeConnector(@MBeanInfo("connectorName") String connectorName) throws Exception;
1:d29ca2a: 
1:ced6909:     @MBeanInfo("Removes a Network Connector from the broker.")
1:ced6909:     boolean removeNetworkConnector(@MBeanInfo("connectorName") String connectorName) throws Exception;
1:d29ca2a: 
1:fc00993:     /**
1:07d4e8c:      * Adds a Topic destination to the broker.
1:fc00993:      *
1:07d4e8c:      * @param name The name of the Topic
1:07d4e8c:      * @throws Exception
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Adds a Topic destination to the broker.")
1:ced6909:     void addTopic(@MBeanInfo("name") String name) throws Exception;
1:07d4e8c: 
1:07d4e8c:     /**
1:07d4e8c:      * Adds a Queue destination to the broker.
1:fc00993:      *
1:07d4e8c:      * @param name The name of the Queue
2:07d4e8c:      * @throws Exception
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Adds a Queue destination to the broker.")
1:ced6909:     void addQueue(@MBeanInfo("name") String name) throws Exception;
1:07d4e8c: 
1:fc00993:     /**
1:07d4e8c:      * Removes a Topic destination from the broker.
1:fc00993:      *
1:07d4e8c:      * @param name The name of the Topic
1:07d4e8c:      * @throws Exception
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Removes a Topic destination from the broker.")
1:ced6909:     void removeTopic(@MBeanInfo("name") String name) throws Exception;
1:07d4e8c: 
1:07d4e8c:     /**
1:07d4e8c:      * Removes a Queue destination from the broker.
1:fc00993:      *
1:07d4e8c:      * @param name The name of the Queue
1:07d4e8c:      * @throws Exception
1:07d4e8c:      */
1:ced6909:     @MBeanInfo("Removes a Queue destination from the broker.")
1:ced6909:     void removeQueue(@MBeanInfo("name") String name) throws Exception;
1:d29ca2a: 
1:07d4e8c:     /**
1:ad5ad88:      * Creates a new durable topic subscriber
1:d29ca2a:      *
1:ad5ad88:      * @param clientId the JMS client ID
1:ad5ad88:      * @param subscriberName the durable subscriber name
1:ad5ad88:      * @param topicName the name of the topic to subscribe to
1:ad5ad88:      * @param selector a selector or null
1:0def1d4:      * @return the object name of the MBean registered in JMX
3:cb895f0:      */
1:ced6909:     @MBeanInfo(value="Creates a new durable topic subscriber.")
1:ced6909:     ObjectName createDurableSubscriber(@MBeanInfo("clientId") String clientId, @MBeanInfo("subscriberName") String subscriberName, @MBeanInfo("topicName") String topicName, @MBeanInfo("selector") String selector) throws Exception;
1:fc00993: 
1:07d4e8c:     /**
1:ad5ad88:      * Destroys a durable subscriber
1:d29ca2a:      *
1:ad5ad88:      * @param clientId the JMS client ID
1:ad5ad88:      * @param subscriberName the durable subscriber name
1:cb895f0:      */
1:ced6909:     @MBeanInfo(value="Destroys a durable subscriber.")
1:ced6909:     void destroyDurableSubscriber(@MBeanInfo("clientId") String clientId, @MBeanInfo("subscriberName") String subscriberName) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:df6b542:      * Reloads log4j.properties from the classpath.
1:df6b542:      * This methods calls org.apache.activemq.transport.TransportLoggerControl.reloadLog4jProperties
1:c4d8d86:      * @throws Throwable
1:df6b542:      */
1:ced6909:     @MBeanInfo(value="Reloads log4j.properties from the classpath.")
1:c4d8d86:     public void reloadLog4jProperties() throws Throwable;
1:c1051c8: 
1:c1051c8:     @MBeanInfo("The url of the VM connector")
1:c1051c8:     String getVMURL();
1:6fc3744: 
1:cb895f0:     @MBeanInfo("The map of all defined transport connectors, with transport name as a key")
1:cb895f0:     Map<String, String> getTransportConnectors();
1:c1051c8: 
1:cb895f0:     @MBeanInfo("The url of transport connector by it's type; e.g. tcp, stomp, ssl, etc.")
1:cb895f0:     String getTransportConnectorByType(String type);
1:df6b542: 
1:6fc3744:     @MBeanInfo("The location of the data directory")
1:6fc3744:     public String getDataDirectory();
1:c7c8e53: 
1:c7c8e53:     @MBeanInfo("JMSJobScheduler")
1:c7c8e53:     ObjectName getJMSJobScheduler();
1:46654b2: 
1:86cbdfd: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
commit:8e0865d
/////////////////////////////////////////////////////////////////////////
1:      * @return Uptime of the broker in milliseconds.
1:      */
1:     @MBeanInfo("Uptime of the broker in milliseconds.")
1:     long getUptimeMillis();
1: 
1:     /**
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:6630e81
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.OpenDataException;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Queue Query API, take a look at {@link DestinationsViewFilter} for more information
1:      */
1:     @MBeanInfo("Query queues")
1:     String queryQueues(String filter, int page, int pageSize) throws IOException;
1: 
1:     /**
1:      * Topic Query API, take a look at {@link DestinationsViewFilter} for more information
1:      */
1:     @MBeanInfo("Query topics")
1:     String queryTopics(String filter, int page, int pageSize) throws IOException;
1: 
1:     public CompositeData[] browseQueue(String queueName) throws OpenDataException, MalformedObjectNameException;
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:46654b2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
commit:fde22a8
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @return The current number of active connections on this Broker.
1:      */
1:     int getCurrentConnectionsCount();
1: 
1:     /**
1:      * @return The total number of connections serviced since this Broker was started.
1:      */
1:     long getTotalConnectionsCount();
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:37eb6b0
/////////////////////////////////////////////////////////////////////////
1:     long getAverageMessageSize();
commit:f2225c2
/////////////////////////////////////////////////////////////////////////
1:      * @return Uptime of the broker.
1:      */
1:     @MBeanInfo("Uptime of the broker.")
1:     String getUptime();
1: 
1:     /**
author:Robert Davies
-------------------------------------------------------------------------------
commit:f71e2fe
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @MBeanInfo("Average message size on this broker")
0:     double getAverageMessageSize();
1: 
1:     @MBeanInfo("Max message size on this broker")
1:     public long getMaxMessageSize();
1: 
1:     @MBeanInfo("Min message size on this broker")
1:     public long getMinMessageSize();
1: 
commit:c7c8e53
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("JMSJobScheduler")
1:     ObjectName getJMSJobScheduler();
1:     
commit:98497b1
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Stop the broker and all its components.")
1:     @MBeanInfo("Poll for queues matching queueName are empty before stopping")
1:     void stopGracefully(String connectorName, String queueName, long timeout, long pollInterval) throws Exception;
commit:6fc3744
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("The location of the data directory")
1:     public String getDataDirectory();
1:     
commit:c1051c8
/////////////////////////////////////////////////////////////////////////
0:     @MBeanInfo("The url of the openwire connector")
0:     String getOpenWireURL();
1:     
0:     @MBeanInfo("The url of the stomp connector")
0:     String getStompURL();
1:     
0:     @MBeanInfo("The url of the SSL connector")
0:     String getSslURL();
1:     
0:     @MBeanInfo("The url of the Stomp SSL connector")
0:     String getStompSslURL();
1:     
1:     @MBeanInfo("The url of the VM connector")
1:     String getVMURL();
1:     
commit:23cda2d
/////////////////////////////////////////////////////////////////////////
1:     int getMemoryPercentUsage();
1:     int getStorePercentUsage();
1:     int getTempPercentUsage();
1:     long getTempLimit();
0:     void setTempLimit(long limit);
commit:83c3dca
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         
0:     int getStorePercentageUsed();
1: 
1:     long getStoreLimit();
1: 
0:     void setStoreLimit(long limit);
1:     
0:     int getTmpPercentageUsed();
1: 
0:     long getTmpLimit();
1: 
0:     void setTmpLimit(long limit);
commit:082bbf0
/////////////////////////////////////////////////////////////////////////
1:     
1:     boolean isPersistent();
commit:e2ef8b8
/////////////////////////////////////////////////////////////////////////
0:     String addConnector(String discoveryAddress) throws Exception;
1: 
0:     String addNetworkConnector(String discoveryAddress) throws Exception;
1: 
0:     boolean removeConnector(String connectorName) throws Exception;
1: 
0:     boolean removeNetworkConnector(String connectorName) throws Exception;
1: 
commit:df6b542
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Reloads log4j.properties from the classpath.
1:      * This methods calls org.apache.activemq.transport.TransportLoggerControl.reloadLog4jProperties
1:      * @throws Exception
1:      */
0:     public void reloadLog4jProperties() throws Exception;
1:     
commit:c82f6f3
/////////////////////////////////////////////////////////////////////////
0:     public ObjectName[] getInactiveDurableTopicSubscribers();
commit:3601e81
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
0:     public ObjectName[] getTopics();
0:     public ObjectName[] getQueues();
0:     public ObjectName[] getTemporaryTopics();
0:     public ObjectName[] getTemporaryQueues();
1:     
0:     public ObjectName[] getTopicSubscribers();
0:     public ObjectName[] getDurableTopicSubscribers();
0:     public ObjectName[] getQueueSubscribers();
0:     public ObjectName[] getTemporaryTopicSubscribers();
0:     public ObjectName[] getTemporaryQueueSubscribers();
1:     
1:     
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:4a16c1f
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Restart the broker and all it's components.
1:      */
1:     @MBeanInfo("Restart the broker and all its components.")
1:     void restart() throws Exception;
1: 
commit:30f531d
/////////////////////////////////////////////////////////////////////////
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com (for the reloadLog4jProperties method)
0:  * @version $Revision$
1:  */
/////////////////////////////////////////////////////////////////////////
1:      * @throws Throwable 
1:     public void reloadLog4jProperties() throws Throwable;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return The unique id of the broker.
1:      */
1:     String getBrokerId();
0:      * The Broker will fush it's caches so that the garbage collector can
0:      * recalaim more memory.
1:     void gc() throws Exception;
1: 
1:     void resetStatistics();
1: 
1:     void enableStatistics();
1: 
1:     void disableStatistics();
1: 
1:     boolean isStatisticsEnabled();
1: 
1:     long getTotalEnqueueCount();
1: 
1:     long getTotalDequeueCount();
1: 
1:     long getTotalConsumerCount();
1: 
1:     long getTotalMessageCount();
1: 
0:     int getMemoryPercentageUsed();
1: 
1:     long getMemoryLimit();
1: 
0:     void setMemoryLimit(long limit);
1:      * 
1:      * @param exitCode the exit code that will be reported by the JVM process
1:      *                when it exits.
0:     void terminateJVM(int exitCode);
1: 
1:     void stop() throws Exception;
1: 
1:     ObjectName[] getTopics();
1: 
1:     ObjectName[] getQueues();
1: 
1:     ObjectName[] getTemporaryTopics();
1: 
1:     ObjectName[] getTemporaryQueues();
1: 
1:     ObjectName[] getTopicSubscribers();
1: 
1:     ObjectName[] getDurableTopicSubscribers();
1: 
1:     ObjectName[] getInactiveDurableTopicSubscribers();
1: 
1:     ObjectName[] getQueueSubscribers();
1: 
1:     ObjectName[] getTemporaryTopicSubscribers();
1: 
1:     ObjectName[] getTemporaryQueueSubscribers();
1: 
1:     /**
1:      * 
0:     void addTopic(String name) throws Exception;
1:      * 
0:     void addQueue(String name) throws Exception;
1:     /**
1:      * 
0:     void removeTopic(String name) throws Exception;
1:      * 
0:     void removeQueue(String name) throws Exception;
/////////////////////////////////////////////////////////////////////////
0:     ObjectName createDurableSubscriber(String clientId, String subscriberName, String topicName, String selector) throws Exception;
/////////////////////////////////////////////////////////////////////////
0:     void destroyDurableSubscriber(String clientId, String subscriberName) throws Exception;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:cb1d21f
/////////////////////////////////////////////////////////////////////////
1: 
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * @return The unique id of the broker.
1: 	 */
1:     /**
0:      * The Broker will fush it's caches so that the garbage
0:      * collector can recalaim more memory.
1:      * 
1:      * @throws Exception
1:      */
0:     public void gc() throws Exception;
1:     
1:     
0:     public long getTotalMessageCount();
1:     
1:     /**
1:      * Shuts down the JVM.
0:      * @param exitCode the exit code that will be reported by the JVM process when it exits.
1:      */
1:     /**
0:      * Stop the broker and all it's comonents.
1:      */
0:     public void stop() throws Exception;
1:     
/////////////////////////////////////////////////////////////////////////
1:     /** 
1:      * Adds a Topic destination to the broker.
1:      * @param name The name of the Topic
1:      * @throws Exception
1:      */
1: 
1:     /**
1:      * Adds a Queue destination to the broker.
1:      * @param name The name of the Queue
1:      * @throws Exception
1:      */
1: 
1:     /** 
1:      * Removes a Topic destination from the broker.
1:      * @param name The name of the Topic
1:      * @throws Exception
1:      */
1: 
1:     /**
1:      * Removes a Queue destination from the broker.
1:      * @param name The name of the Queue
1:      * @throws Exception
1:      */
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void addTopic(String name) throws Exception;
0:     public void addQueue(String name) throws Exception;
0:     public void removeTopic(String name) throws Exception;
0:     public void removeQueue(String name) throws Exception;
commit:ed5d43b
/////////////////////////////////////////////////////////////////////////
0:     public void addTopic(String name) throws Throwable;
0:     public void addQueue(String name) throws Throwable;
0:     public void removeTopic(String name) throws Throwable;
0:     public void removeQueue(String name) throws Throwable;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.Service;
1: 
1: public interface BrokerViewMBean extends Service {
1: 
0:     public abstract String getBrokerId();
1: 
0:     public abstract void gc();
0:     public void resetStatistics();
1:     
0:     public long getTotalEnqueueCount();
0:     public long getTotalDequeueCount();
0:     public long getTotalConsumerCount();
0:     public long getTotalMessages();
0:     public long getTotalMessagesCached();
1: 
0:     public int getMemoryPercentageUsed();
0:     public long getMemoryLimit();
0:     public void setMemoryLimit(long limit);
1: 
0:     public void terminateJVM(int exitCode);
1:     
0: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d75e418
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Slave broker.")
1:     boolean isSlave();
0: 
commit:f21992e
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Disk limit, in bytes, used for non-persistent messages and temporary data before producers are blocked.")
0:     
1:     @MBeanInfo("Percent of job store limit used.")
1:     int getJobSchedulerStorePercentUsage();
0: 
1:     @MBeanInfo("Disk limit, in bytes, used for scheduled messages before producers are blocked.")
1:     long getJobSchedulerStoreLimit();
0: 
1:     void setJobSchedulerStoreLimit(@MBeanInfo("bytes") long limit);
commit:0e95460
/////////////////////////////////////////////////////////////////////////
1:      * The Broker will flush it's caches so that the garbage collector can
1:      * reclaim more memory.
commit:629b18c
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Dynamic Destination Producers.")
1:     public ObjectName[] getDynamicDestinationProducers();
0: 
commit:7092b19
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
1:     String getBrokerName();
1:     String getBrokerVersion();
0: 
0:      *
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Number of message producers active on destinations on the broker.")
1:     long getTotalProducerCount();
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Topic Producers.")
1:     public ObjectName[] getTopicProducers();
0: 
1:     @MBeanInfo("Queue Producers.")
1:     public ObjectName[] getQueueProducers();
0: 
1:     @MBeanInfo("Temporary Topic Producers.")
1:     public ObjectName[] getTemporaryTopicProducers();
0: 
1:     @MBeanInfo("Temporary Queue Producers.")
1:     public ObjectName[] getTemporaryQueueProducers();
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * @throws Throwable
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:cb895f0
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: 
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * @deprecated use {@link #getTransportConnectors()} or {@link #getTransportConnectorByType(String)}
1:      */
0:     @Deprecated
0:     @MBeanInfo("The url of the openwire connector - deprecated, use getTransportConnectors or getTransportConnectorByType instead")
0:     /**
0:      * @deprecated use {@link #getTransportConnectors()} or {@link #getTransportConnectorByType(String)}
1:      */
0:     @Deprecated
0:     @MBeanInfo("The url of the stomp connector - deprecated, use getTransportConnectors or getTransportConnectorByType instead")
0:     /**
0:      * @deprecated use {@link #getTransportConnectors()} or {@link #getTransportConnectorByType(String)}
1:      */
0:     @Deprecated
0:     @MBeanInfo("The url of the SSL connector - deprecated, use getTransportConnectors or getTransportConnectorByType instead")
0:     /**
0:      * @deprecated use {@link #getTransportConnectors()} or {@link #getTransportConnectorByType(String)}
1:      */
0:     @Deprecated
0:     @MBeanInfo("The url of the Stomp SSL connector - deprecated, use getTransportConnectors or getTransportConnectorByType instead")
1:     @MBeanInfo("The map of all defined transport connectors, with transport name as a key")
1:     Map<String, String> getTransportConnectors();
0: 
1:     @MBeanInfo("The url of transport connector by it's type; e.g. tcp, stomp, ssl, etc.")
1:     String getTransportConnectorByType(String type);
0: 
commit:093c901
/////////////////////////////////////////////////////////////////////////
1:      * @return The name of the broker.
0:      */
1:     @MBeanInfo("The version of the broker.")
0:     String getBrokerVersion();        
0:     
0:     /**
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("The unique id of the broker.")
1:     @MBeanInfo("The name of the broker.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Runs the Garbage Collector.")
1:     @MBeanInfo("Reset all broker statistics.")
1:     @MBeanInfo("Enable broker statistics.")
1:     @MBeanInfo("Disable broker statistics.")
1:     @MBeanInfo("Broker statistics enabled.")
1:     @MBeanInfo("Number of messages that have been sent to the broker.")
1:     @MBeanInfo("Number of messages that have been acknowledged on the broker.")
1:     @MBeanInfo("Number of message consumers subscribed to destinations on the broker.")
1:     @MBeanInfo("Number of unacknowledged messages on the broker.")
1:     @MBeanInfo("Percent of memory limit used.")
1:     @MBeanInfo("Memory limit, in bytes, used for holding undelivered messages before paging to temporary storage.")
1:     void setMemoryLimit(@MBeanInfo("bytes") long limit);
0: 
1:     @MBeanInfo("Percent of store limit used.")
1:     @MBeanInfo("Disk limit, in bytes, used for persistent messages before producers are blocked.")
1:     void setStoreLimit(@MBeanInfo("bytes") long limit);
0: 
1:     @MBeanInfo("Percent of temp limit used.")
0:     @MBeanInfo("Disk limit, in bytes, used for non-persistent messages and temporary date before producers are blocked.")
1:     void setTempLimit(@MBeanInfo("bytes") long limit);
1:     @MBeanInfo("Messages are synchronized to disk.")
0: 
0:     @MBeanInfo("Slave broker.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Shuts down the JVM.")
1:     void terminateJVM(@MBeanInfo("exitCode") int exitCode);
1:     @MBeanInfo("Topics (broadcasted 'queues'); generally system information.")
1:     @MBeanInfo("Standard Queues containing AIE messages.")
1:     @MBeanInfo("Temporary Topics; generally unused.")
1:     @MBeanInfo("Temporary Queues; generally temporary message response holders.")
1:     @MBeanInfo("Topic Subscribers")
1:     @MBeanInfo("Durable (persistent) topic subscribers")
1:     @MBeanInfo("Inactive (disconnected persistent) topic subscribers")
1:     @MBeanInfo("Queue Subscribers.")
1:     @MBeanInfo("Temporary Topic Subscribers.")
1:     @MBeanInfo("Temporary Queue Subscribers.")
1:     @MBeanInfo("Adds a Connector to the broker.")
1:     String addConnector(@MBeanInfo("discoveryAddress") String discoveryAddress) throws Exception;
1:     @MBeanInfo("Adds a Network Connector to the broker.")
1:     String addNetworkConnector(@MBeanInfo("discoveryAddress") String discoveryAddress) throws Exception;
1:     @MBeanInfo("Removes a Connector from the broker.")
1:     boolean removeConnector(@MBeanInfo("connectorName") String connectorName) throws Exception;
1:     @MBeanInfo("Removes a Network Connector from the broker.")
1:     boolean removeNetworkConnector(@MBeanInfo("connectorName") String connectorName) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Adds a Topic destination to the broker.")
1:     void addTopic(@MBeanInfo("name") String name) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Adds a Queue destination to the broker.")
1:     void addQueue(@MBeanInfo("name") String name) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Removes a Topic destination from the broker.")
1:     void removeTopic(@MBeanInfo("name") String name) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Removes a Queue destination from the broker.")
1:     void removeQueue(@MBeanInfo("name") String name) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo(value="Creates a new durable topic subscriber.")
1:     ObjectName createDurableSubscriber(@MBeanInfo("clientId") String clientId, @MBeanInfo("subscriberName") String subscriberName, @MBeanInfo("topicName") String topicName, @MBeanInfo("selector") String selector) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo(value="Destroys a durable subscriber.")
1:     void destroyDurableSubscriber(@MBeanInfo("clientId") String clientId, @MBeanInfo("subscriberName") String subscriberName) throws Exception;
1:     @MBeanInfo(value="Reloads log4j.properties from the classpath.")
author:Gary Tully
-------------------------------------------------------------------------------
commit:a38e372
/////////////////////////////////////////////////////////////////////////
0:     
0:     boolean isSlave();
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:89f793e
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
1:      * @return The name of the broker.
0:      */
0:     String getBrokerName();    
commit:ccf3f3c
/////////////////////////////////////////////////////////////////////////
0:     public void enableStatistics();
0:     public void disableStatistics();
0:     public boolean isStatisticsEnabled();
0:     
author:James Strachan
-------------------------------------------------------------------------------
commit:857cc8c
/////////////////////////////////////////////////////////////////////////
1:      * Stop the broker and all it's components.
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the object name of the MBean registered in JMX
0:     public ObjectName createDurableSubscriber(String clientId, String subscriberName, String topicName, String selector) throws Exception;
commit:ad5ad88
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.ConsumerId;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.RemoveSubscriptionInfo;
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:      * Creates a new durable topic subscriber
0:      * 
1:      * @param clientId the JMS client ID
1:      * @param subscriberName the durable subscriber name
1:      * @param topicName the name of the topic to subscribe to
1:      * @param selector a selector or null
0:      */
0:     public void createDurableSubscriber(String clientId, String subscriberName, String topicName, String selector) throws Exception;
0: 
0:     /**
1:      * Destroys a durable subscriber
0:      * 
1:      * @param clientId the JMS client ID
1:      * @param subscriberName the durable subscriber name
0:      */
0:     public void destroyDurableSubscriber(String clientId, String subscriberName) throws Exception;
============================================================================