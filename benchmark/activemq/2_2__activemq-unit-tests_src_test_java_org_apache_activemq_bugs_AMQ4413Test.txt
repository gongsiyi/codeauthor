1:f46b184: /**
1:f46b184:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f46b184:  * contributor license agreements.  See the NOTICE file distributed with
1:f46b184:  * this work for additional information regarding copyright ownership.
1:f46b184:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f46b184:  * (the "License"); you may not use this file except in compliance with
1:f46b184:  * the License.  You may obtain a copy of the License at
1:f46b184:  *
1:f46b184:  * http://www.apache.org/licenses/LICENSE-2.0
1:f46b184:  *
1:f46b184:  * Unless required by applicable law or agreed to in writing, software
1:f46b184:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f46b184:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f46b184:  * See the License for the specific language governing permissions and
1:f46b184:  * limitations under the License.
1:f46b184:  */
1:f46b184: package org.apache.activemq.bugs;
1:f46b184: 
1:f46b184: import static org.junit.Assert.assertTrue;
1:f46b184: 
1:f46b184: import java.util.ArrayList;
1:f46b184: import java.util.UUID;
1:f46b184: import java.util.concurrent.Callable;
1:f46b184: import java.util.concurrent.ExecutorService;
1:f46b184: import java.util.concurrent.Executors;
1:f46b184: import java.util.concurrent.Future;
1:f46b184: 
1:f46b184: import javax.jms.Connection;
1:f46b184: import javax.jms.DeliveryMode;
1:f46b184: import javax.jms.JMSException;
1:f46b184: import javax.jms.Message;
1:f46b184: import javax.jms.MessageProducer;
1:f46b184: import javax.jms.Session;
1:f46b184: import javax.jms.TextMessage;
1:f46b184: import javax.jms.Topic;
1:f46b184: import javax.jms.TopicSubscriber;
1:f46b184: 
1:f46b184: import org.apache.activemq.ActiveMQConnectionFactory;
1:f46b184: import org.apache.activemq.broker.BrokerService;
1:f46b184: import org.junit.Test;
1:f46b184: import org.slf4j.Logger;
1:f46b184: import org.slf4j.LoggerFactory;
1:f46b184: 
1:f46b184: /**
1:f46b184:  */
1:f46b184: public class AMQ4413Test {
1:f46b184: 
1:f46b184:     static final Logger LOG = LoggerFactory.getLogger(AMQ4413Test.class);
1:f46b184: 
1:f46b184:     final String brokerUrl = "tcp://localhost:0";
1:f46b184:     private String connectionUri;
1:f46b184:     final int numMsgsTriggeringReconnection = 2;
1:f46b184:     final int numMsgs = 30;
1:f46b184:     final int numTests = 75;
1:f46b184:     final ExecutorService threadPool = Executors.newCachedThreadPool();
1:f46b184: 
1:f46b184:     @Test
1:f46b184:     public void testDurableSubMessageLoss() throws Exception{
1:f46b184:         // start embedded broker
1:f46b184:         BrokerService brokerService = new BrokerService();
1:f46b184:         connectionUri = brokerService.addConnector(brokerUrl).getPublishableConnectString();
1:f46b184:         brokerService.setPersistent(false);
1:f46b184:         brokerService.setUseJmx(false);
1:f46b184:         brokerService.setKeepDurableSubsActive(true);
1:f46b184:         brokerService.setAdvisorySupport(false);
1:f46b184:         brokerService.start();
1:f46b184:         LOG.info("##### broker started");
1:f46b184: 
1:f46b184:         // repeat test 50 times
1:f46b184:         try {
1:f46b184:             for (int i = 0; i < numTests; ++i) {
1:f46b184:                 LOG.info("##### test " + i + " started");
1:f46b184:                 test();
1:f46b184:             }
1:f46b184: 
1:f46b184:             LOG.info("##### tests are done");
1:f46b184:         } catch (Exception e) {
1:f46b184:             e.printStackTrace();
1:f46b184:             LOG.info("##### tests failed!");
1:f46b184:         } finally {
1:f46b184:             threadPool.shutdown();
1:f46b184:             brokerService.stop();
1:f46b184:             LOG.info("##### broker stopped");
1:f46b184:         }
1:f46b184:     }
1:f46b184: 
1:f46b184:     private void test() throws Exception {
1:f46b184: 
1:f46b184:         final String topicName = "topic-" + UUID.randomUUID();
1:f46b184:         final String clientId = "client-" + UUID.randomUUID();
1:f46b184:         final String subName = "sub-" + UUID.randomUUID();
1:f46b184: 
1:f46b184:         // create (and only create) subscription first
1:f46b184:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:f46b184:         factory.setWatchTopicAdvisories(false);
1:f46b184:         Connection connection = factory.createConnection();
1:f46b184:         connection.setClientID(clientId);
1:f46b184:         connection.start();
1:f46b184: 
1:f46b184:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f46b184:         Topic topic = session.createTopic(topicName);
1:f46b184:         TopicSubscriber durableSubscriptionCreator = session.createDurableSubscriber(topic, subName);
1:f46b184: 
1:f46b184:         connection.stop();
1:f46b184:         durableSubscriptionCreator.close();
1:f46b184:         session.close();
1:f46b184:         connection.close();
1:f46b184: 
1:f46b184:         // publisher task
1:f46b184:         Callable<Boolean> publisher = new Callable<Boolean>() {
1:f46b184:             @Override
1:f46b184:             public Boolean call() throws Exception {
1:f46b184:                 Connection connection = null;
1:f46b184: 
1:f46b184:                 try {
1:f46b184:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:f46b184:                     factory.setWatchTopicAdvisories(false);
1:f46b184:                     connection = factory.createConnection();
1:f46b184:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f46b184:                     Topic topic = session.createTopic(topicName);
1:f46b184: 
1:f46b184:                     MessageProducer producer = session.createProducer(topic);
1:f46b184:                     producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:f46b184:                     producer.setPriority(Message.DEFAULT_PRIORITY);
1:f46b184:                     producer.setTimeToLive(Message.DEFAULT_TIME_TO_LIVE);
1:f46b184: 
1:f46b184:                     for (int seq = 1; seq <= numMsgs; ++seq) {
1:f46b184:                         TextMessage msg = session.createTextMessage(String.valueOf(seq));
1:f46b184:                         producer.send(msg);
1:f46b184:                         LOG.info("pub sent msg: " + seq);
1:f46b184:                         Thread.sleep(1L);
1:f46b184:                     }
1:f46b184: 
1:f46b184:                     LOG.info("pub is done");
1:f46b184:                 } finally {
1:f46b184:                     if (connection != null) {
1:f46b184:                         try {
1:f46b184:                             connection.close();
1:f46b184:                         } catch (JMSException e) {
1:f46b184:                             e.printStackTrace();
1:f46b184:                         }
1:f46b184:                     }
1:f46b184:                 }
1:f46b184:                 return Boolean.TRUE;
1:f46b184:             }
1:f46b184:         };
1:f46b184: 
1:f46b184:         // subscriber task
1:f46b184:         Callable<Boolean> durableSubscriber = new Callable<Boolean>() {
1:f46b184:             ActiveMQConnectionFactory factory;
1:f46b184:             Connection connection;
1:f46b184:             Session session;
1:f46b184:             Topic topic;
1:f46b184:             TopicSubscriber consumer;
1:f46b184: 
1:f46b184:             @Override
1:f46b184:             public Boolean call() throws Exception {
1:f46b184:                 factory = new ActiveMQConnectionFactory(connectionUri);
1:f46b184:                 factory.setWatchTopicAdvisories(false);
1:f46b184: 
1:f46b184:                 try {
1:f46b184:                     connect();
1:f46b184: 
1:f46b184:                     for (int seqExpected = 1; seqExpected <= numMsgs; ++seqExpected) {
1:f46b184:                         TextMessage msg = (TextMessage) consumer.receive(3000L);
1:f46b184:                         if (msg == null) {
1:f46b184:                             LOG.info("expected: " + seqExpected + ", actual: timed out", msg);
1:f46b184:                             return Boolean.FALSE;
1:f46b184:                         }
1:f46b184: 
1:f46b184:                         int seq = Integer.parseInt(msg.getText());
1:f46b184: 
1:f46b184:                         LOG.info("sub received msg: " + seq);
1:f46b184: 
1:f46b184:                         if (seqExpected != seq) {
1:cf62d58:                             LOG.info("expected: " + seqExpected + ", actual: " + seq);
1:f46b184:                             return Boolean.FALSE;
1:f46b184:                         }
1:f46b184: 
1:f46b184:                         if (seq % numMsgsTriggeringReconnection == 0) {
1:f46b184:                             close(false);
1:f46b184:                             connect();
1:f46b184: 
1:f46b184:                             LOG.info("sub reconnected");
1:f46b184:                         }
1:f46b184:                     }
1:f46b184: 
1:f46b184:                     LOG.info("sub is done");
1:f46b184:                 } finally {
1:f46b184:                     try {
1:f46b184:                         close(true);
1:f46b184:                     } catch (Exception e) {
1:f46b184:                         e.printStackTrace();
1:f46b184:                     }
1:f46b184:                 }
1:f46b184: 
1:f46b184:                 return Boolean.TRUE;
1:f46b184:             }
1:f46b184: 
1:f46b184:             void connect() throws Exception {
1:f46b184:                 connection = factory.createConnection();
1:f46b184:                 connection.setClientID(clientId);
1:f46b184:                 connection.start();
1:f46b184: 
1:f46b184:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f46b184:                 topic = session.createTopic(topicName);
1:f46b184:                 consumer = session.createDurableSubscriber(topic, subName);
1:f46b184:             }
1:f46b184: 
1:f46b184:             void close(boolean unsubscribe) throws Exception {
1:f46b184:                 if (connection != null) {
1:f46b184:                     connection.stop();
1:f46b184:                 }
1:f46b184: 
1:f46b184:                 if (consumer != null) {
1:f46b184:                     consumer.close();
1:f46b184:                 }
1:f46b184: 
1:f46b184:                 if (session != null) {
1:f46b184:                     if (unsubscribe) {
1:f46b184:                         session.unsubscribe(subName);
1:f46b184:                     }
1:f46b184:                     session.close();
1:f46b184:                 }
1:f46b184: 
1:f46b184:                 if (connection != null) {
1:f46b184:                     connection.close();
1:f46b184:                 }
1:f46b184:             }
1:f46b184:         };
1:f46b184: 
1:f46b184:         ArrayList<Future<Boolean>> results = new ArrayList<Future<Boolean>>();
1:f46b184:         results.add(threadPool.submit(publisher));
1:f46b184:         results.add(threadPool.submit(durableSubscriber));
1:f46b184: 
1:f46b184:         for (Future<Boolean> result : results) {
1:f46b184:             assertTrue(result.get());
1:f46b184:         }
1:f46b184:     }
1:f46b184: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cf62d58
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                             LOG.info("expected: " + seqExpected + ", actual: " + seq);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f46b184
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.UUID;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.Test;
0: import org.mortbay.log.Log;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  */
1: public class AMQ4413Test {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ4413Test.class);
1: 
1:     final String brokerUrl = "tcp://localhost:0";
1:     private String connectionUri;
1:     final int numMsgsTriggeringReconnection = 2;
1:     final int numMsgs = 30;
1:     final int numTests = 75;
1:     final ExecutorService threadPool = Executors.newCachedThreadPool();
1: 
1:     @Test
1:     public void testDurableSubMessageLoss() throws Exception{
1:         // start embedded broker
1:         BrokerService brokerService = new BrokerService();
1:         connectionUri = brokerService.addConnector(brokerUrl).getPublishableConnectString();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setKeepDurableSubsActive(true);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.start();
1:         LOG.info("##### broker started");
1: 
1:         // repeat test 50 times
1:         try {
1:             for (int i = 0; i < numTests; ++i) {
1:                 LOG.info("##### test " + i + " started");
1:                 test();
1:             }
1: 
1:             LOG.info("##### tests are done");
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:             LOG.info("##### tests failed!");
1:         } finally {
1:             threadPool.shutdown();
1:             brokerService.stop();
1:             LOG.info("##### broker stopped");
1:         }
1:     }
1: 
1:     private void test() throws Exception {
1: 
1:         final String topicName = "topic-" + UUID.randomUUID();
1:         final String clientId = "client-" + UUID.randomUUID();
1:         final String subName = "sub-" + UUID.randomUUID();
1: 
1:         // create (and only create) subscription first
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.setClientID(clientId);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(topicName);
1:         TopicSubscriber durableSubscriptionCreator = session.createDurableSubscriber(topic, subName);
1: 
1:         connection.stop();
1:         durableSubscriptionCreator.close();
1:         session.close();
1:         connection.close();
1: 
1:         // publisher task
1:         Callable<Boolean> publisher = new Callable<Boolean>() {
1:             @Override
1:             public Boolean call() throws Exception {
1:                 Connection connection = null;
1: 
1:                 try {
1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:                     factory.setWatchTopicAdvisories(false);
1:                     connection = factory.createConnection();
1:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     Topic topic = session.createTopic(topicName);
1: 
1:                     MessageProducer producer = session.createProducer(topic);
1:                     producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:                     producer.setPriority(Message.DEFAULT_PRIORITY);
1:                     producer.setTimeToLive(Message.DEFAULT_TIME_TO_LIVE);
1: 
1:                     for (int seq = 1; seq <= numMsgs; ++seq) {
1:                         TextMessage msg = session.createTextMessage(String.valueOf(seq));
1:                         producer.send(msg);
1:                         LOG.info("pub sent msg: " + seq);
1:                         Thread.sleep(1L);
1:                     }
1: 
1:                     LOG.info("pub is done");
1:                 } finally {
1:                     if (connection != null) {
1:                         try {
1:                             connection.close();
1:                         } catch (JMSException e) {
1:                             e.printStackTrace();
1:                         }
1:                     }
1:                 }
1:                 return Boolean.TRUE;
1:             }
1:         };
1: 
1:         // subscriber task
1:         Callable<Boolean> durableSubscriber = new Callable<Boolean>() {
1:             ActiveMQConnectionFactory factory;
1:             Connection connection;
1:             Session session;
1:             Topic topic;
1:             TopicSubscriber consumer;
1: 
1:             @Override
1:             public Boolean call() throws Exception {
1:                 factory = new ActiveMQConnectionFactory(connectionUri);
1:                 factory.setWatchTopicAdvisories(false);
1: 
1:                 try {
1:                     connect();
1: 
1:                     for (int seqExpected = 1; seqExpected <= numMsgs; ++seqExpected) {
1:                         TextMessage msg = (TextMessage) consumer.receive(3000L);
1:                         if (msg == null) {
1:                             LOG.info("expected: " + seqExpected + ", actual: timed out", msg);
1:                             return Boolean.FALSE;
1:                         }
1: 
1:                         int seq = Integer.parseInt(msg.getText());
1: 
1:                         LOG.info("sub received msg: " + seq);
1: 
1:                         if (seqExpected != seq) {
0:                             Log.info("expected: " + seqExpected + ", actual: " + seq);
1:                             return Boolean.FALSE;
1:                         }
1: 
1:                         if (seq % numMsgsTriggeringReconnection == 0) {
1:                             close(false);
1:                             connect();
1: 
1:                             LOG.info("sub reconnected");
1:                         }
1:                     }
1: 
1:                     LOG.info("sub is done");
1:                 } finally {
1:                     try {
1:                         close(true);
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1: 
1:                 return Boolean.TRUE;
1:             }
1: 
1:             void connect() throws Exception {
1:                 connection = factory.createConnection();
1:                 connection.setClientID(clientId);
1:                 connection.start();
1: 
1:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 topic = session.createTopic(topicName);
1:                 consumer = session.createDurableSubscriber(topic, subName);
1:             }
1: 
1:             void close(boolean unsubscribe) throws Exception {
1:                 if (connection != null) {
1:                     connection.stop();
1:                 }
1: 
1:                 if (consumer != null) {
1:                     consumer.close();
1:                 }
1: 
1:                 if (session != null) {
1:                     if (unsubscribe) {
1:                         session.unsubscribe(subName);
1:                     }
1:                     session.close();
1:                 }
1: 
1:                 if (connection != null) {
1:                     connection.close();
1:                 }
1:             }
1:         };
1: 
1:         ArrayList<Future<Boolean>> results = new ArrayList<Future<Boolean>>();
1:         results.add(threadPool.submit(publisher));
1:         results.add(threadPool.submit(durableSubscriber));
1: 
1:         for (Future<Boolean> result : results) {
1:             assertTrue(result.get());
1:         }
1:     }
1: }
============================================================================