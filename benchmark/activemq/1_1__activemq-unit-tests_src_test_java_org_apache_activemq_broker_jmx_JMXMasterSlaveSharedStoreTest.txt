1:c129051: /**
1:c129051:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c129051:  * contributor license agreements. See the NOTICE file distributed with
1:c129051:  * this work for additional information regarding copyright ownership.
1:c129051:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c129051:  * (the "License"); you may not use this file except in compliance with
1:c129051:  * the License. You may obtain a copy of the License at
1:c129051:  *
1:c129051:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c129051:  *
1:c129051:  * Unless required by applicable law or agreed to in writing, software
1:c129051:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c129051:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c129051:  * See the License for the specific language governing permissions and
1:c129051:  * limitations under the License.
1:c129051:  */
1:c129051: 
1:c129051: package org.apache.activemq.broker.jmx;
1:c129051: 
1:c129051: import java.io.File;
1:c129051: import java.util.concurrent.CountDownLatch;
1:c129051: import java.util.concurrent.TimeUnit;
1:c129051: import java.util.concurrent.atomic.AtomicReference;
1:c129051: import javax.management.MBeanServerConnection;
1:c129051: import javax.management.ObjectName;
1:c129051: import org.apache.activemq.TestSupport;
1:c129051: import org.apache.activemq.store.PersistenceAdapter;
1:c129051: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:c129051: import org.apache.activemq.xbean.XBeanBrokerService;
1:c129051: import org.junit.Test;
1:c129051: 
1:c129051: public class JMXMasterSlaveSharedStoreTest extends TestSupport {
1:c129051:     protected XBeanBrokerService master;
1:c129051:     protected XBeanBrokerService slave;
1:c129051:     protected AtomicReference<XBeanBrokerService> slaveAtomicReference = new AtomicReference<XBeanBrokerService>();
1:c129051:     protected CountDownLatch slaveStarted = new CountDownLatch(1);
1:c129051:     protected PersistenceAdapter persistenceAdapter;
1:c129051:     protected File messageStore;
1:c129051:     protected File schedulerStoreFile;
1:c129051: 
1:c129051:     @Override
1:c129051:     protected void setUp() throws Exception {
1:c129051:         setMaxTestTime(TimeUnit.MINUTES.toMillis(10));
1:c129051:         setAutoFail(true);
1:c129051: 
1:c129051:         messageStore = new File("target/activemq-data/kahadb/JMXMasterSlaveSharedStoreTest");
1:c129051:         schedulerStoreFile = new File("target/activemq-data/scheduler/JMXMasterSlaveSharedStoreTest/");
1:c129051: 
1:c129051:         if (System.getProperty("basedir") == null) {
1:c129051:             File file = new File(".");
1:c129051:             System.setProperty("basedir", file.getAbsolutePath());
1:c129051:         }
1:c129051: 
1:c129051:         createMaster();
1:c129051: 
1:c129051:         // Give master a chance to aquire lock.
1:c129051:         Thread.sleep(1000);
1:c129051:         createSlave();
1:c129051: 
1:c129051:         super.setUp();
1:c129051:     }
1:c129051: 
1:c129051:     @Override
1:c129051:     protected void tearDown() throws Exception {
1:c129051:         if (slave != null) {
1:c129051:             slave.stop();
1:c129051:         }
1:c129051: 
1:c129051:         if (master != null) {
1:c129051:             master.stop();
1:c129051:         }
1:c129051:     }
1:c129051: 
1:c129051:     protected void createMaster() throws Exception {
1:c129051:         master = createXBeanBrokerService("master");
1:c129051:         master.afterPropertiesSet();
1:c129051:     }
1:c129051: 
1:c129051:     protected void createSlave() throws Exception {
1:c129051:         // Start the Brokers async since starting them up could be a blocking operation..
1:c129051:         new Thread(new Runnable() {
1:c129051:             public void run() {
1:c129051:                 try {
1:c129051:                     slave = createXBeanBrokerService("slave");
1:c129051:                     slave.afterPropertiesSet();
1:c129051:                     slaveAtomicReference.set(slave);
1:c129051:                     slaveStarted.countDown();
1:c129051:                 } catch (Exception e) {
1:c129051:                     e.printStackTrace();
1:c129051:                 }
1:c129051:             }
1:c129051: 
1:c129051:         }).start();
1:c129051: 
1:c129051:         // Wait for slave to be set as new broker.
1:c129051:         Thread.sleep(100);
1:c129051:     }
1:c129051: 
1:c129051:     private XBeanBrokerService createXBeanBrokerService(String name) throws Exception {
1:c129051:         String[] connectors = {"tcp://localhost:" + 0};
1:c129051: 
1:c129051:         // Setup messaging store
1:c129051:         PersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:c129051:         persistenceAdapter.setDirectory(messageStore);
1:c129051: 
1:c129051:         XBeanBrokerService broker = new XBeanBrokerService();
1:c129051:         broker.setUseJmx(true);
1:c129051:         broker.setBrokerName(name);
1:c129051:         broker.setPersistenceAdapter(persistenceAdapter);
1:c129051:         broker.setTransportConnectorURIs(connectors);
1:c129051:         broker.setSchedulerSupport(true);
1:c129051:         broker.setSchedulerDirectoryFile(schedulerStoreFile);
1:c129051:         broker.getManagementContext().setCreateConnector(false);
1:c129051:         return broker;
1:c129051:     }
1:c129051: 
1:c129051:     private String getXBeanBrokerServiceMBeanName(String brokerName) {
1:c129051:         return "org.apache.activemq:type=Broker,brokerName=" + brokerName;
1:c129051:     }
1:c129051: 
1:c129051: 
1:c129051:     @Test
1:c129051:     public void testJMXMBeanIsRegisteredForSlave() throws Exception {
1:c129051:         assertFalse(master.isSlave());
1:c129051:         assertTrue(slave.isSlave());
1:c129051: 
1:c129051:         // Expected MBeans:
1:c129051:         ObjectName masterMBeanName = new ObjectName(getXBeanBrokerServiceMBeanName("master"));
1:c129051:         ObjectName slaveMBeanName = new ObjectName(getXBeanBrokerServiceMBeanName("slave"));
1:c129051: 
1:c129051:         MBeanServerConnection connection = master.getManagementContext().getMBeanServer();
1:c129051:         assertFalse(connection.queryMBeans(masterMBeanName, null).isEmpty());
1:c129051:         assertFalse(connection.queryMBeans(slaveMBeanName, null).isEmpty());
1:c129051:     }
1:c129051: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c129051
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.io.File;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicReference;
1: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectName;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.xbean.XBeanBrokerService;
1: import org.junit.Test;
1: 
1: public class JMXMasterSlaveSharedStoreTest extends TestSupport {
1:     protected XBeanBrokerService master;
1:     protected XBeanBrokerService slave;
1:     protected AtomicReference<XBeanBrokerService> slaveAtomicReference = new AtomicReference<XBeanBrokerService>();
1:     protected CountDownLatch slaveStarted = new CountDownLatch(1);
1:     protected PersistenceAdapter persistenceAdapter;
1:     protected File messageStore;
1:     protected File schedulerStoreFile;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         setMaxTestTime(TimeUnit.MINUTES.toMillis(10));
1:         setAutoFail(true);
1: 
1:         messageStore = new File("target/activemq-data/kahadb/JMXMasterSlaveSharedStoreTest");
1:         schedulerStoreFile = new File("target/activemq-data/scheduler/JMXMasterSlaveSharedStoreTest/");
1: 
1:         if (System.getProperty("basedir") == null) {
1:             File file = new File(".");
1:             System.setProperty("basedir", file.getAbsolutePath());
1:         }
1: 
1:         createMaster();
1: 
1:         // Give master a chance to aquire lock.
1:         Thread.sleep(1000);
1:         createSlave();
1: 
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         if (slave != null) {
1:             slave.stop();
1:         }
1: 
1:         if (master != null) {
1:             master.stop();
1:         }
1:     }
1: 
1:     protected void createMaster() throws Exception {
1:         master = createXBeanBrokerService("master");
1:         master.afterPropertiesSet();
1:     }
1: 
1:     protected void createSlave() throws Exception {
1:         // Start the Brokers async since starting them up could be a blocking operation..
1:         new Thread(new Runnable() {
1:             public void run() {
1:                 try {
1:                     slave = createXBeanBrokerService("slave");
1:                     slave.afterPropertiesSet();
1:                     slaveAtomicReference.set(slave);
1:                     slaveStarted.countDown();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1: 
1:         }).start();
1: 
1:         // Wait for slave to be set as new broker.
1:         Thread.sleep(100);
1:     }
1: 
1:     private XBeanBrokerService createXBeanBrokerService(String name) throws Exception {
1:         String[] connectors = {"tcp://localhost:" + 0};
1: 
1:         // Setup messaging store
1:         PersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:         persistenceAdapter.setDirectory(messageStore);
1: 
1:         XBeanBrokerService broker = new XBeanBrokerService();
1:         broker.setUseJmx(true);
1:         broker.setBrokerName(name);
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         broker.setTransportConnectorURIs(connectors);
1:         broker.setSchedulerSupport(true);
1:         broker.setSchedulerDirectoryFile(schedulerStoreFile);
1:         broker.getManagementContext().setCreateConnector(false);
1:         return broker;
1:     }
1: 
1:     private String getXBeanBrokerServiceMBeanName(String brokerName) {
1:         return "org.apache.activemq:type=Broker,brokerName=" + brokerName;
1:     }
1: 
1: 
1:     @Test
1:     public void testJMXMBeanIsRegisteredForSlave() throws Exception {
1:         assertFalse(master.isSlave());
1:         assertTrue(slave.isSlave());
1: 
1:         // Expected MBeans:
1:         ObjectName masterMBeanName = new ObjectName(getXBeanBrokerServiceMBeanName("master"));
1:         ObjectName slaveMBeanName = new ObjectName(getXBeanBrokerServiceMBeanName("slave"));
1: 
1:         MBeanServerConnection connection = master.getManagementContext().getMBeanServer();
1:         assertFalse(connection.queryMBeans(masterMBeanName, null).isEmpty());
1:         assertFalse(connection.queryMBeans(slaveMBeanName, null).isEmpty());
1:     }
1: }
============================================================================