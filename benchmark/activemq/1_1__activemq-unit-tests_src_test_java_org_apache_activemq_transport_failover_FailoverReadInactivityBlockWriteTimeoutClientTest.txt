1:3ef5389: /**
1:3ef5389:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3ef5389:  * contributor license agreements.  See the NOTICE file distributed with
1:3ef5389:  * this work for additional information regarding copyright ownership.
1:3ef5389:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3ef5389:  * (the "License"); you may not use this file except in compliance with
1:3ef5389:  * the License.  You may obtain a copy of the License at
1:3ef5389:  *
1:3ef5389:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3ef5389:  *
1:3ef5389:  * Unless required by applicable law or agreed to in writing, software
1:3ef5389:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3ef5389:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3ef5389:  * See the License for the specific language governing permissions and
1:3ef5389:  * limitations under the License.
1:3ef5389:  */
1:3ef5389: package org.apache.activemq.transport.failover;
1:3ef5389: 
1:3ef5389: import java.io.IOException;
1:3ef5389: import java.net.URI;
1:3ef5389: import java.util.concurrent.CountDownLatch;
1:3ef5389: import java.util.concurrent.ExecutorService;
1:3ef5389: import java.util.concurrent.Executors;
1:3ef5389: import java.util.concurrent.TimeUnit;
1:3ef5389: import java.util.concurrent.atomic.AtomicInteger;
1:3ef5389: import javax.jms.Connection;
1:3ef5389: import javax.jms.MessageConsumer;
1:3ef5389: import javax.jms.MessageProducer;
1:3ef5389: import javax.jms.Session;
1:3ef5389: import org.apache.activemq.ActiveMQConnection;
1:3ef5389: import org.apache.activemq.ActiveMQConnectionFactory;
1:3ef5389: import org.apache.activemq.JmsTestSupport;
1:3ef5389: import org.apache.activemq.broker.BrokerService;
1:3ef5389: import org.apache.activemq.command.ActiveMQQueue;
1:3ef5389: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:3ef5389: import org.apache.activemq.transport.TransportListener;
1:3ef5389: import org.apache.activemq.util.SocketProxy;
1:3ef5389: import org.apache.activemq.util.URISupport;
1:3ef5389: import org.apache.activemq.util.Wait;
1:3ef5389: import org.slf4j.Logger;
1:3ef5389: import org.slf4j.LoggerFactory;
1:3ef5389: 
1:3ef5389: public class FailoverReadInactivityBlockWriteTimeoutClientTest extends JmsTestSupport {
1:3ef5389:     private static final Logger LOG = LoggerFactory.getLogger(FailoverReadInactivityBlockWriteTimeoutClientTest.class);
1:3ef5389: 
1:3ef5389:     protected BrokerService createBroker() throws Exception {
1:3ef5389:         BrokerService broker =  new BrokerService();
1:3ef5389:         broker.setDeleteAllMessagesOnStartup(true);
1:3ef5389:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:3ef5389:         adapter.setConcurrentStoreAndDispatchQueues(false);
1:3ef5389:         broker.setPersistenceAdapter(adapter);
1:3ef5389:         broker.addConnector("tcp://localhost:0?wireFormat.maxInactivityDuration=0");
1:3ef5389:         return broker;
1:3ef5389:     }
1:3ef5389: 
1:3ef5389:     public void testBlockedFailoverSendWillReactToReadInactivityTimeout() throws Exception {
1:3ef5389:         final ActiveMQQueue dest = new ActiveMQQueue("testClientWriteTimeout");
1:3ef5389:         messageTextPrefix = initMessagePrefix(80*1024);
1:3ef5389: 
1:3ef5389:         URI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());
1:3ef5389:         LOG.info("consuming using uri: " + tcpBrokerUri);
1:3ef5389: 
1:3ef5389:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
1:3ef5389:         Connection c = factory.createConnection();
1:3ef5389:         c.start();
1:3ef5389:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3ef5389:         MessageConsumer consumer = session.createConsumer(dest);
1:3ef5389: 
1:3ef5389:         SocketProxy proxy = new SocketProxy();
1:3ef5389:         proxy.setTarget(tcpBrokerUri);
1:3ef5389:         proxy.open();
1:3ef5389: 
1:3ef5389:         ActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory("failover:(" + proxy.getUrl() + "?wireFormat.maxInactivityDuration=5000&ignoreRemoteWireFormat=true)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400");
1:3ef5389:         final ActiveMQConnection pc = (ActiveMQConnection) pFactory.createConnection();
1:3ef5389:         final AtomicInteger interruptCounter = new AtomicInteger(0);
1:3ef5389:         pc.addTransportListener(new TransportListener() {
1:3ef5389:             @Override
1:3ef5389:             public void onCommand(Object command) {
1:3ef5389: 
1:3ef5389:             }
1:3ef5389: 
1:3ef5389:             @Override
1:3ef5389:             public void onException(IOException error) {
1:3ef5389:                 LOG.info("Got: " + error);
1:3ef5389: 
1:3ef5389:             }
1:3ef5389: 
1:3ef5389:             @Override
1:3ef5389:             public void transportInterupted() {
1:3ef5389:                 interruptCounter.incrementAndGet();
1:3ef5389:             }
1:3ef5389: 
1:3ef5389:             @Override
1:3ef5389:             public void transportResumed() {
1:3ef5389: 
1:3ef5389:             }
1:3ef5389:         });
1:3ef5389:         pc.start();
1:3ef5389: 
1:3ef5389: 
1:3ef5389:         final int messageCount = 200;
1:3ef5389:         final CountDownLatch sentOne = new CountDownLatch(1);
1:3ef5389:         ExecutorService executorService = Executors.newCachedThreadPool();
1:3ef5389:         executorService.execute(new Runnable() {
1:3ef5389:             @Override
1:3ef5389:             public void run() {
1:3ef5389:                 try{
1:3ef5389:                     Session session = pc.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3ef5389:                     MessageProducer producer = session.createProducer(dest);
1:3ef5389:                     for (int i = 0; i < messageCount; i++) {
1:3ef5389:                         producer.send(session.createTextMessage(messageTextPrefix  + i));
1:3ef5389:                         sentOne.countDown();
1:3ef5389:                     }
1:3ef5389:                     producer.close();
1:3ef5389:                     session.close();
1:3ef5389:                     LOG.info("Done with send of: " + messageCount);
1:3ef5389:                 } catch (Exception ignored) {
1:3ef5389:                     ignored.printStackTrace();
1:3ef5389:                 }
1:3ef5389:             }
1:3ef5389:         });
1:3ef5389: 
1:3ef5389:         sentOne.await(5, TimeUnit.SECONDS);
1:3ef5389:         proxy.pause();
1:3ef5389: 
1:3ef5389:         assertTrue("Got interrupted", Wait.waitFor(new Wait.Condition() {
1:3ef5389:             @Override
1:3ef5389:             public boolean isSatisified() throws Exception {
1:3ef5389:                 return interruptCounter.get() > 0;
1:3ef5389:             }
1:3ef5389:         }));
1:3ef5389: 
1:3ef5389:         proxy.goOn();
1:3ef5389:         for (int i=0; i<messageCount; i++) {
1:3ef5389:             assertNotNull("Got message " + i  + " after reconnect", consumer.receive(5000));
1:3ef5389:         }
1:3ef5389: 
1:3ef5389:         assertTrue("no pending messages when done", Wait.waitFor(new Wait.Condition() {
1:3ef5389:             @Override
1:3ef5389:             public boolean isSatisified() throws Exception {
1:3ef5389: 
1:3ef5389:                 LOG.info("current total message count: " + broker.getAdminView().getTotalMessageCount());
1:3ef5389:                 return broker.getAdminView().getTotalMessageCount() == 0;
1:3ef5389:             }
1:3ef5389:         }));
1:3ef5389:     }
1:3ef5389: 
1:3ef5389:     private String initMessagePrefix(int i) {
1:3ef5389:         byte[] content = new byte[i];
1:3ef5389:         return new String(content);
1:3ef5389:     }
1:3ef5389: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:3ef5389
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.util.SocketProxy;
1: import org.apache.activemq.util.URISupport;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class FailoverReadInactivityBlockWriteTimeoutClientTest extends JmsTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverReadInactivityBlockWriteTimeoutClientTest.class);
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker =  new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:         adapter.setConcurrentStoreAndDispatchQueues(false);
1:         broker.setPersistenceAdapter(adapter);
1:         broker.addConnector("tcp://localhost:0?wireFormat.maxInactivityDuration=0");
1:         return broker;
1:     }
1: 
1:     public void testBlockedFailoverSendWillReactToReadInactivityTimeout() throws Exception {
1:         final ActiveMQQueue dest = new ActiveMQQueue("testClientWriteTimeout");
1:         messageTextPrefix = initMessagePrefix(80*1024);
1: 
1:         URI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());
1:         LOG.info("consuming using uri: " + tcpBrokerUri);
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
1:         Connection c = factory.createConnection();
1:         c.start();
1:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(dest);
1: 
1:         SocketProxy proxy = new SocketProxy();
1:         proxy.setTarget(tcpBrokerUri);
1:         proxy.open();
1: 
1:         ActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory("failover:(" + proxy.getUrl() + "?wireFormat.maxInactivityDuration=5000&ignoreRemoteWireFormat=true)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400");
1:         final ActiveMQConnection pc = (ActiveMQConnection) pFactory.createConnection();
1:         final AtomicInteger interruptCounter = new AtomicInteger(0);
1:         pc.addTransportListener(new TransportListener() {
1:             @Override
1:             public void onCommand(Object command) {
1: 
1:             }
1: 
1:             @Override
1:             public void onException(IOException error) {
1:                 LOG.info("Got: " + error);
1: 
1:             }
1: 
1:             @Override
1:             public void transportInterupted() {
1:                 interruptCounter.incrementAndGet();
1:             }
1: 
1:             @Override
1:             public void transportResumed() {
1: 
1:             }
1:         });
1:         pc.start();
1: 
1: 
1:         final int messageCount = 200;
1:         final CountDownLatch sentOne = new CountDownLatch(1);
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try{
1:                     Session session = pc.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageProducer producer = session.createProducer(dest);
1:                     for (int i = 0; i < messageCount; i++) {
1:                         producer.send(session.createTextMessage(messageTextPrefix  + i));
1:                         sentOne.countDown();
1:                     }
1:                     producer.close();
1:                     session.close();
1:                     LOG.info("Done with send of: " + messageCount);
1:                 } catch (Exception ignored) {
1:                     ignored.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         sentOne.await(5, TimeUnit.SECONDS);
1:         proxy.pause();
1: 
1:         assertTrue("Got interrupted", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return interruptCounter.get() > 0;
1:             }
1:         }));
1: 
1:         proxy.goOn();
1:         for (int i=0; i<messageCount; i++) {
1:             assertNotNull("Got message " + i  + " after reconnect", consumer.receive(5000));
1:         }
1: 
1:         assertTrue("no pending messages when done", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1: 
1:                 LOG.info("current total message count: " + broker.getAdminView().getTotalMessageCount());
1:                 return broker.getAdminView().getTotalMessageCount() == 0;
1:             }
1:         }));
1:     }
1: 
1:     private String initMessagePrefix(int i) {
1:         byte[] content = new byte[i];
1:         return new String(content);
1:     }
1: }
============================================================================