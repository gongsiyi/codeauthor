2:0e148fb: /**
1:0e148fb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0e148fb:  * contributor license agreements.  See the NOTICE file distributed with
1:0e148fb:  * this work for additional information regarding copyright ownership.
1:0e148fb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0e148fb:  * (the "License"); you may not use this file except in compliance with
1:0e148fb:  * the License.  You may obtain a copy of the License at
1:0e148fb:  *
1:0e148fb:  * http://www.apache.org/licenses/LICENSE-2.0
1:0e148fb:  *
1:0e148fb:  * Unless required by applicable law or agreed to in writing, software
1:0e148fb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0e148fb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0e148fb:  * See the License for the specific language governing permissions and
1:0e148fb:  * limitations under the License.
2:0e148fb:  */
1:0e148fb: package org.apache.activemq.transport.amqp;
12:0e148fb: 
1:8bd40e7: import static org.junit.Assert.assertEquals;
1:8bd40e7: import static org.junit.Assert.assertFalse;
1:6cd3bd0: import static org.junit.Assert.assertNotNull;
1:8bd40e7: import static org.junit.Assert.assertTrue;
1:8bd40e7: 
1:36bd069: import java.net.URI;
1:36bd069: 
1:8bd40e7: import javax.jms.BytesMessage;
1:8bd40e7: import javax.jms.Connection;
1:11da37b: import javax.jms.DeliveryMode;
1:8bd40e7: import javax.jms.Message;
1:8bd40e7: import javax.jms.MessageConsumer;
1:8bd40e7: import javax.jms.MessageProducer;
1:8bd40e7: import javax.jms.Queue;
1:8bd40e7: import javax.jms.Session;
1:8bd40e7: import javax.jms.TextMessage;
1:8bd40e7: 
1:0e148fb: import org.apache.activemq.ActiveMQConnectionFactory;
1:0e148fb: import org.apache.activemq.broker.BrokerService;
1:0e148fb: import org.apache.activemq.broker.TransportConnector;
1:0e148fb: import org.junit.After;
1:0e148fb: import org.junit.Test;
1:6cd3bd0: import org.slf4j.Logger;
1:6cd3bd0: import org.slf4j.LoggerFactory;
1:0e148fb: 
1:0e148fb: public class AmqpTransformerTest {
1:0e148fb: 
1:6cd3bd0:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransformerTest.class);
1:6cd3bd0: 
1:0e148fb:     private static final String AMQP_URL = "amqp://0.0.0.0:0%s";
1:0e148fb:     private BrokerService brokerService;
1:36bd069:     private URI amqpConnectionURI;
1:36bd069:     private URI openwireConnectionURI;
1:0e148fb:     private static final String TEST_QUEUE = "txqueue";
1:0e148fb: 
1:76e29bd:     @Test(timeout = 30 * 1000)
1:0e148fb:     public void testNativeTransformation() throws Exception {
1:0e148fb: 
1:0e148fb:         // default is native
1:0e148fb:         startBrokerWithAmqpTransport(String.format(AMQP_URL, "?transport.transformer=native"));
1:0e148fb: 
1:0e148fb:         // send "text message" with AMQP JMS API
1:240278d:         Connection amqpConnection = JMSClientContext.INSTANCE.createConnection(amqpConnectionURI);
1:36bd069:         amqpConnection.start();
1:0e148fb: 
1:0e148fb:         Session amqpSession = amqpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:36bd069:         Queue queue = amqpSession.createQueue(TEST_QUEUE);
1:0e148fb:         MessageProducer p = amqpSession.createProducer(queue);
1:0e148fb:         p.setPriority(7);
1:0e148fb: 
1:0e148fb:         TextMessage amqpMessage = amqpSession.createTextMessage();
1:0e148fb:         amqpMessage.setText("hello");
1:0e148fb:         p.send(amqpMessage);
1:0e148fb: 
1:0e148fb:         p.close();
1:0e148fb:         amqpSession.close();
1:0e148fb:         amqpConnection.close();
1:0e148fb: 
1:0e148fb:         // receive with openwire JMS
1:36bd069:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(openwireConnectionURI);
1:0e148fb:         Connection openwireConn = factory.createConnection();
1:0e148fb:         openwireConn.start();
1:0e148fb:         Session session = openwireConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0e148fb:         Queue jmsDest = session.createQueue(TEST_QUEUE);
1:0e148fb: 
1:0e148fb:         MessageConsumer c = session.createConsumer(jmsDest);
1:0e148fb: 
2:0e148fb:         Message message = c.receive(1000);
1:0e148fb: 
1:0e148fb:         assertTrue(message instanceof BytesMessage);
1:0e148fb:         Boolean nativeTransformationUsed = message.getBooleanProperty("JMS_AMQP_NATIVE");
1:0e148fb:         assertTrue("Didn't use the correct transformation, expected NATIVE", nativeTransformationUsed);
1:11da37b:         assertEquals(DeliveryMode.PERSISTENT, message.getJMSDeliveryMode());
1:0e148fb:         assertEquals(7, message.getJMSPriority());
1:0e148fb: 
1:0e148fb:         c.close();
1:0e148fb:         session.close();
1:0e148fb:         openwireConn.close();
3:0e148fb:     }
1:0e148fb: 
1:bfed9df:     @Test(timeout = 30000)
1:0e148fb:     public void testRawTransformation() throws Exception {
1:0e148fb: 
1:0e148fb:         // default is native
1:0e148fb:         startBrokerWithAmqpTransport(String.format(AMQP_URL, "?transport.transformer=raw"));
1:0e148fb: 
1:0e148fb:         // send "text message" with AMQP JMS API
1:240278d:         Connection amqpConnection = JMSClientContext.INSTANCE.createConnection(amqpConnectionURI);
1:36bd069:         amqpConnection.start();
1:0e148fb: 
1:0e148fb:         Session amqpSession = amqpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:36bd069:         Queue queue = amqpSession.createQueue(TEST_QUEUE);
1:0e148fb:         MessageProducer p = amqpSession.createProducer(queue);
1:0e148fb:         p.setPriority(7);
1:0e148fb: 
1:0e148fb:         TextMessage amqpMessage = amqpSession.createTextMessage();
1:0e148fb:         amqpMessage.setText("hello");
1:0e148fb:         p.send(amqpMessage);
1:0e148fb: 
1:0e148fb:         p.close();
1:0e148fb:         amqpSession.close();
1:0e148fb:         amqpConnection.close();
1:0e148fb: 
1:0e148fb:         // receive with openwire JMS
1:36bd069:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(openwireConnectionURI);
1:0e148fb:         Connection openwireConn = factory.createConnection();
1:0e148fb:         openwireConn.start();
1:0e148fb:         Session session = openwireConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0e148fb:         Queue jmsDest = session.createQueue(TEST_QUEUE);
1:0e148fb: 
1:0e148fb:         MessageConsumer c = session.createConsumer(jmsDest);
1:0e148fb: 
1:6cd3bd0:         Message message = c.receive(2000);
1:0e148fb: 
1:6cd3bd0:         assertNotNull("Should have received a message", message);
1:e1bbde7:         LOG.info("Recieved message: {}", message);
1:0e148fb:         assertTrue(message instanceof BytesMessage);
1:0e148fb:         Boolean nativeTransformationUsed = message.getBooleanProperty("JMS_AMQP_NATIVE");
1:0e148fb:         assertTrue("Didn't use the correct transformation, expected NATIVE", nativeTransformationUsed);
1:11da37b:         assertEquals(DeliveryMode.PERSISTENT, message.getJMSDeliveryMode());
1:0e148fb: 
1:11da37b:         // should not equal 7 (should equal the default) because "raw" does not map headers
1:0e148fb:         assertEquals(4, message.getJMSPriority());
1:0e148fb: 
1:0e148fb:         c.close();
1:0e148fb:         session.close();
1:0e148fb:         openwireConn.close();
1:0e148fb:     }
1:0e148fb: 
1:76e29bd:     @Test(timeout = 30 * 1000)
1:0e148fb:     public void testJmsTransformation() throws Exception {
1:0e148fb: 
1:0e148fb:         // default is native
1:0e148fb:         startBrokerWithAmqpTransport(String.format(AMQP_URL, "?transport.transformer=jms"));
1:0e148fb: 
1:0e148fb:         // send "text message" with AMQP JMS API
1:240278d:         Connection amqpConnection = JMSClientContext.INSTANCE.createConnection(amqpConnectionURI);
1:36bd069:         amqpConnection.start();
1:0e148fb: 
1:0e148fb:         Session amqpSession = amqpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:36bd069:         Queue queue = amqpSession.createQueue(TEST_QUEUE);
1:0e148fb:         MessageProducer p = amqpSession.createProducer(queue);
1:0e148fb: 
1:0e148fb:         TextMessage amqpMessage = amqpSession.createTextMessage();
1:0e148fb:         amqpMessage.setText("hello");
1:0e148fb:         p.send(amqpMessage);
1:0e148fb: 
1:0e148fb:         p.close();
1:0e148fb:         amqpSession.close();
1:0e148fb:         amqpConnection.close();
1:0e148fb: 
1:0e148fb:         // receive with openwire JMS
1:36bd069:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(openwireConnectionURI);
1:0e148fb:         Connection openwireConn = factory.createConnection();
1:0e148fb:         openwireConn.start();
1:0e148fb:         Session session = openwireConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0e148fb:         Queue jmsDest = session.createQueue(TEST_QUEUE);
1:0e148fb: 
1:0e148fb:         MessageConsumer c = session.createConsumer(jmsDest);
1:0e148fb: 
1:0e148fb:         Message message = c.receive(1000);
1:0e148fb: 
1:0e148fb:         assertTrue(message instanceof TextMessage);
1:0e148fb:         Boolean nativeTransformationUsed = message.getBooleanProperty("JMS_AMQP_NATIVE");
1:0e148fb:         assertFalse("Didn't use the correct transformation, expected NOT to be NATIVE", nativeTransformationUsed);
1:11da37b:         assertEquals(DeliveryMode.PERSISTENT, message.getJMSDeliveryMode());
1:0e148fb: 
1:0e148fb:         c.close();
1:0e148fb:         session.close();
1:0e148fb:         openwireConn.close();
1:0e148fb:     }
1:0e148fb: 
1:0e148fb:     public void startBrokerWithAmqpTransport(String amqpUrl) throws Exception {
1:0e148fb:         brokerService = new BrokerService();
1:0e148fb:         brokerService.setPersistent(false);
1:0e148fb:         brokerService.setAdvisorySupport(false);
1:94937e8:         brokerService.setUseJmx(false);
1:0e148fb:         brokerService.setDeleteAllMessagesOnStartup(true);
1:0e148fb: 
1:bfed9df:         TransportConnector connector = brokerService.addConnector(amqpUrl);
1:36bd069:         amqpConnectionURI = connector.getPublishableConnectURI();
1:0e148fb:         connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:36bd069:         openwireConnectionURI = connector.getPublishableConnectURI();
1:0e148fb: 
1:0e148fb:         brokerService.start();
1:0e148fb:         brokerService.waitUntilStarted();
1:0e148fb:     }
1:0e148fb: 
1:0e148fb:     @After
1:0e148fb:     public void stopBroker() throws Exception {
1:0e148fb:         if (brokerService != null) {
1:0e148fb:             brokerService.stop();
1:0e148fb:             brokerService = null;
1:0e148fb:         }
1:0e148fb:     }
1:0e148fb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:11da37b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.DeliveryMode;
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(DeliveryMode.PERSISTENT, message.getJMSDeliveryMode());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(DeliveryMode.PERSISTENT, message.getJMSDeliveryMode());
1:         // should not equal 7 (should equal the default) because "raw" does not map headers
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(DeliveryMode.PERSISTENT, message.getJMSDeliveryMode());
commit:240278d
/////////////////////////////////////////////////////////////////////////
1:         Connection amqpConnection = JMSClientContext.INSTANCE.createConnection(amqpConnectionURI);
/////////////////////////////////////////////////////////////////////////
1:         Connection amqpConnection = JMSClientContext.INSTANCE.createConnection(amqpConnectionURI);
/////////////////////////////////////////////////////////////////////////
1:         Connection amqpConnection = JMSClientContext.INSTANCE.createConnection(amqpConnectionURI);
commit:36bd069
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private URI amqpConnectionURI;
1:     private URI openwireConnectionURI;
/////////////////////////////////////////////////////////////////////////
0:         Connection amqpConnection = JmsClientContext.INSTANCE.createConnection(amqpConnectionURI);
1:         amqpConnection.start();
1:         Queue queue = amqpSession.createQueue(TEST_QUEUE);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(openwireConnectionURI);
/////////////////////////////////////////////////////////////////////////
0:         Connection amqpConnection = JmsClientContext.INSTANCE.createConnection(amqpConnectionURI);
1:         amqpConnection.start();
1:         Queue queue = amqpSession.createQueue(TEST_QUEUE);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(openwireConnectionURI);
/////////////////////////////////////////////////////////////////////////
0:         Connection amqpConnection = JmsClientContext.INSTANCE.createConnection(amqpConnectionURI);
1:         amqpConnection.start();
1:         Queue queue = amqpSession.createQueue(TEST_QUEUE);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(openwireConnectionURI);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         amqpConnectionURI = connector.getPublishableConnectURI();
1:         openwireConnectionURI = connector.getPublishableConnectURI();
commit:94937e8
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(false);
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Recieved message: {}", message);
author:Kevin Earls
-------------------------------------------------------------------------------
commit:76e29bd
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30 * 1000)
commit:025c231
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=60 * 1000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=60 * 1000)
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6cd3bd0
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransformerTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         Message message = c.receive(2000);
1:         assertNotNull("Should have received a message", message);
0:         LOG.info("Recieved message: ", message);
commit:bfed9df
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30000)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         // should not equal 7 (should equal the default) because "raw" does not map
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector connector = brokerService.addConnector(amqpUrl);
commit:8bd40e7
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
0: import javax.jms.ExceptionListener;
0: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
author:Christian Posta
-------------------------------------------------------------------------------
commit:0e148fb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
0: import org.apache.qpid.amqp_1_0.jms.impl.QueueImpl;
1: import org.junit.After;
1: import org.junit.Test;
1: 
0: import javax.jms.*;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertTrue;
1: 
1: /**
0:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class AmqpTransformerTest {
1: 
1:     private static final String AMQP_URL = "amqp://0.0.0.0:0%s";
1:     private BrokerService brokerService;
0:     private int amqpPort;
0:     private int openwirePort;
1:     private static final String TEST_QUEUE = "txqueue";
1: 
0:     @Test
1:     public void testNativeTransformation() throws Exception {
1: 
1:         // default is native
1:         startBrokerWithAmqpTransport(String.format(AMQP_URL, "?transport.transformer=native"));
1: 
1:         // send "text message" with AMQP JMS API
0:         Connection amqpConnection = createAmqpConnection();
0:         QueueImpl queue = new QueueImpl("queue://" + TEST_QUEUE);
1: 
1:         Session amqpSession = amqpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer p = amqpSession.createProducer(queue);
1:         p.setPriority(7);
1: 
1:         TextMessage amqpMessage = amqpSession.createTextMessage();
1:         amqpMessage.setText("hello");
1:         p.send(amqpMessage);
1: 
1:         p.close();
1:         amqpSession.close();
1:         amqpConnection.close();
1: 
1: 
1:         // receive with openwire JMS
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://0.0.0.0:" + openwirePort);
1:         Connection openwireConn = factory.createConnection();
1:         openwireConn.start();
1:         Session session = openwireConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue jmsDest = session.createQueue(TEST_QUEUE);
1: 
1:         MessageConsumer c = session.createConsumer(jmsDest);
1: 
1:         Message message = c.receive(1000);
1: 
1:         assertTrue(message instanceof BytesMessage);
1:         Boolean nativeTransformationUsed = message.getBooleanProperty("JMS_AMQP_NATIVE");
0:         Long messageFormat = message.getLongProperty("JMS_AMQP_MESSAGE_FORMAT");
0:         assertEquals(0L, messageFormat.longValue());
1:         assertTrue("Didn't use the correct transformation, expected NATIVE", nativeTransformationUsed);
0:         assertEquals(2, message.getJMSDeliveryMode());
1:         assertEquals(7, message.getJMSPriority());
1: 
1:         c.close();
1:         session.close();
1:         openwireConn.close();
1: 
1:     }
1: 
0:     @Test
1:     public void testRawTransformation() throws Exception {
1: 
1:         // default is native
1:         startBrokerWithAmqpTransport(String.format(AMQP_URL, "?transport.transformer=raw"));
1: 
1:         // send "text message" with AMQP JMS API
0:         Connection amqpConnection = createAmqpConnection();
0:         QueueImpl queue = new QueueImpl("queue://" + TEST_QUEUE);
1: 
1:         Session amqpSession = amqpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer p = amqpSession.createProducer(queue);
1:         p.setPriority(7);
1: 
1:         TextMessage amqpMessage = amqpSession.createTextMessage();
1:         amqpMessage.setText("hello");
1:         p.send(amqpMessage);
1: 
1:         p.close();
1:         amqpSession.close();
1:         amqpConnection.close();
1: 
1: 
1:         // receive with openwire JMS
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://0.0.0.0:" + openwirePort);
1:         Connection openwireConn = factory.createConnection();
1:         openwireConn.start();
1:         Session session = openwireConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue jmsDest = session.createQueue(TEST_QUEUE);
1: 
1:         MessageConsumer c = session.createConsumer(jmsDest);
1: 
1:         Message message = c.receive(1000);
1: 
1:         assertTrue(message instanceof BytesMessage);
1:         Boolean nativeTransformationUsed = message.getBooleanProperty("JMS_AMQP_NATIVE");
0:         Long messageFormat = message.getLongProperty("JMS_AMQP_MESSAGE_FORMAT");
0:         assertEquals(0L, messageFormat.longValue());
1:         assertTrue("Didn't use the correct transformation, expected NATIVE", nativeTransformationUsed);
0:         assertEquals(2, message.getJMSDeliveryMode());
1: 
0:         // should not equal 7 (should equal the default)  because "raw" does not map
0:         // headers
1:         assertEquals(4, message.getJMSPriority());
1: 
1: 
1:         c.close();
1:         session.close();
1:         openwireConn.close();
1: 
1:     }
1: 
0:     @Test
1:     public void testJmsTransformation() throws Exception {
1: 
1:         // default is native
1:         startBrokerWithAmqpTransport(String.format(AMQP_URL, "?transport.transformer=jms"));
1: 
1:         // send "text message" with AMQP JMS API
0:         Connection amqpConnection = createAmqpConnection();
0:         QueueImpl queue = new QueueImpl("queue://" + TEST_QUEUE);
1: 
1:         Session amqpSession = amqpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer p = amqpSession.createProducer(queue);
1: 
1:         TextMessage amqpMessage = amqpSession.createTextMessage();
1:         amqpMessage.setText("hello");
1:         p.send(amqpMessage);
1: 
1:         p.close();
1:         amqpSession.close();
1:         amqpConnection.close();
1: 
1: 
1:         // receive with openwire JMS
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://0.0.0.0:" + openwirePort);
1:         Connection openwireConn = factory.createConnection();
1:         openwireConn.start();
1:         Session session = openwireConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue jmsDest = session.createQueue(TEST_QUEUE);
1: 
1:         MessageConsumer c = session.createConsumer(jmsDest);
1: 
1:         Message message = c.receive(1000);
1: 
1:         assertTrue(message instanceof TextMessage);
1:         Boolean nativeTransformationUsed = message.getBooleanProperty("JMS_AMQP_NATIVE");
0:         Long messageFormat = message.getLongProperty("JMS_AMQP_MESSAGE_FORMAT");
0:         assertEquals(0L, messageFormat.longValue());
1:         assertFalse("Didn't use the correct transformation, expected NOT to be NATIVE", nativeTransformationUsed);
0:         assertEquals(2, message.getJMSDeliveryMode());
1: 
1:         c.close();
1:         session.close();
1:         openwireConn.close();
1: 
1:     }
1: 
0:     public Connection createAmqpConnection() throws JMSException {
0:         final ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", amqpPort, "admin", "password");
0:         final Connection connection = factory.createConnection();
0:         connection.setExceptionListener(new ExceptionListener() {
0:             @Override
0:             public void onException(JMSException exception) {
0:                 exception.printStackTrace();
1:             }
0:         });
0:         connection.start();
0:         return connection;
1:     }
1: 
1: 
1:     public void startBrokerWithAmqpTransport(String amqpUrl) throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1: 
0:         TransportConnector connector =  brokerService.addConnector(amqpUrl);
0:         amqpPort = connector.getConnectUri().getPort();
1:         connector = brokerService.addConnector("tcp://0.0.0.0:0");
0:         openwirePort = connector.getConnectUri().getPort();
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService = null;
1:         }
1:     }
1: }
============================================================================