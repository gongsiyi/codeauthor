1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:ab3b155: package org.apache.activemq;
8:ab3b155: 
1:ab3b155: import javax.jms.Connection;
1:ab3b155: import javax.jms.JMSException;
1:ab3b155: import javax.jms.Message;
1:ab3b155: import javax.jms.MessageConsumer;
1:ab3b155: import javax.jms.MessageProducer;
1:ab3b155: import javax.jms.Queue;
1:ab3b155: import javax.jms.Session;
1:ab3b155: import javax.jms.TextMessage;
1:ab3b155: 
2:ab3b155: /**
1:251dc7b:  *
2:ab3b155:  */
1:ab3b155: public class JMSIndividualAckTest extends TestSupport {
1:ab3b155: 
1:ab3b155:     private Connection connection;
1:ab3b155: 
1:a88e19e:     @Override
1:ab3b155:     protected void setUp() throws Exception {
1:ab3b155:         super.setUp();
1:ab3b155:         connection = createConnection();
3:ab3b155:     }
1:ab3b155: 
1:ab3b155:     /**
1:ab3b155:      * @see junit.framework.TestCase#tearDown()
1:ab3b155:      */
1:a88e19e:     @Override
1:ab3b155:     protected void tearDown() throws Exception {
1:ab3b155:         if (connection != null) {
1:ab3b155:             connection.close();
1:ab3b155:             connection = null;
1:ab3b155:         }
1:ab3b155:         super.tearDown();
1:ab3b155:     }
1:ab3b155: 
1:ab3b155:     /**
1:ab3b155:      * Tests if acknowledged messages are being consumed.
1:b0c2a40:      *
2:ab3b155:      * @throws JMSException
1:ab3b155:      */
1:ab3b155:     public void testAckedMessageAreConsumed() throws JMSException {
2:ab3b155:         connection.start();
2:ab3b155:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:ab3b155:         Queue queue = session.createQueue(getQueueName());
1:ab3b155:         MessageProducer producer = session.createProducer(queue);
1:ab3b155:         producer.send(session.createTextMessage("Hello"));
1:ab3b155: 
1:ab3b155:         // Consume the message...
1:ab3b155:         MessageConsumer consumer = session.createConsumer(queue);
1:ab3b155:         Message msg = consumer.receive(1000);
1:251dc7b:         assertNotNull(msg);
1:ab3b155:         msg.acknowledge();
1:251dc7b: 
1:ab3b155:         // Reset the session.
1:ab3b155:         session.close();
1:ab3b155:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:251dc7b: 
1:ab3b155:         // Attempt to Consume the message...
1:ab3b155:         consumer = session.createConsumer(queue);
1:ab3b155:         msg = consumer.receive(1000);
1:ab3b155:         assertNull(msg);
1:251dc7b: 
1:ab3b155:         session.close();
1:251dc7b:     }
1:251dc7b: 
1:251dc7b:     /**
1:ab3b155:      * Tests if acknowledged messages are being consumed.
1:251dc7b:      *
1:251dc7b:      * @throws JMSException
1:251dc7b:      */
1:ab3b155:     public void testLastMessageAcked() throws JMSException {
1:251dc7b:         connection.start();
1:251dc7b:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:ab3b155:         Queue queue = session.createQueue(getQueueName());
1:ab3b155:         MessageProducer producer = session.createProducer(queue);
1:ab3b155:         TextMessage msg1 = session.createTextMessage("msg1");
1:ab3b155:         TextMessage msg2 = session.createTextMessage("msg2");
1:ab3b155:         TextMessage msg3 = session.createTextMessage("msg3");
1:ab3b155:         producer.send(msg1);
1:ab3b155:         producer.send(msg2);
1:ab3b155:         producer.send(msg3);
1:ab3b155: 
1:ab3b155:         // Consume the message...
1:ab3b155:         MessageConsumer consumer = session.createConsumer(queue);
1:ab3b155:         Message msg = consumer.receive(1000);
1:251dc7b:         assertNotNull(msg);
1:ab3b155:         msg = consumer.receive(1000);
1:251dc7b:         assertNotNull(msg);
1:ab3b155:         msg = consumer.receive(1000);
4:ab3b155:         assertNotNull(msg);
1:ab3b155:         msg.acknowledge();
1:ab3b155: 
1:ab3b155:         // Reset the session.
1:ab3b155:         session.close();
1:ab3b155:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:ab3b155: 
1:ab3b155:         // Attempt to Consume the message...
1:ab3b155:         consumer = session.createConsumer(queue);
1:ab3b155:         msg = consumer.receive(1000);
1:ab3b155:         assertNotNull(msg);
1:ab3b155:         assertEquals(msg1,msg);
1:ab3b155:         msg = consumer.receive(1000);
1:ab3b155:         assertNotNull(msg);
1:ab3b155:         assertEquals(msg2,msg);
1:ab3b155:         msg = consumer.receive(1000);
1:ab3b155:         assertNull(msg);
1:ab3b155:         session.close();
1:ab3b155:     }
1:ab3b155: 
1:ab3b155:     /**
1:ab3b155:      * Tests if unacknowledged messages are being re-delivered when the consumer connects again.
1:251dc7b:      *
1:ab3b155:      * @throws JMSException
1:ab3b155:      */
1:ab3b155:     public void testUnAckedMessageAreNotConsumedOnSessionClose() throws JMSException {
1:ab3b155:         connection.start();
1:ab3b155:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:ab3b155:         Queue queue = session.createQueue(getQueueName());
1:ab3b155:         MessageProducer producer = session.createProducer(queue);
1:ab3b155:         producer.send(session.createTextMessage("Hello"));
1:ab3b155: 
1:ab3b155:         // Consume the message...
1:ab3b155:         MessageConsumer consumer = session.createConsumer(queue);
1:ab3b155:         Message msg = consumer.receive(1000);
1:ab3b155:         assertNotNull(msg);
1:ab3b155:         // Don't ack the message.
1:ab3b155: 
1:ab3b155:         // Reset the session.  This should cause the unacknowledged message to be re-delivered.
1:ab3b155:         session.close();
1:ab3b155:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:ab3b155: 
1:ab3b155:         // Attempt to Consume the message...
1:ab3b155:         consumer = session.createConsumer(queue);
1:ab3b155:         msg = consumer.receive(2000);
1:ab3b155:         assertNotNull(msg);
1:ab3b155:         msg.acknowledge();
1:251dc7b: 
1:ab3b155:         session.close();
1:251dc7b:     }
1:251dc7b: 
1:ab3b155:     protected String getQueueName() {
1:ab3b155:         return getClass().getName() + "." + getName();
1:ab3b155:     }
1:ab3b155: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a88e19e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:251dc7b
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Topic;
1:  *
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(msg);
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(msg);
1: 
1: 
1:         assertNotNull(msg);
1: 
1:     /**
0:      * Tests that a durable consumer cannot be created for Individual Ack mode.
1:      *
1:      * @throws JMSException
1:      */
0:     public void testCreateDurableConsumerFails() throws JMSException {
1:         connection.start();
1:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
0:         Topic dest = session.createTopic(getName());
1: 
0:         try {
0:             session.createDurableSubscriber(dest, getName());
0:             fail("Should not be able to create duable subscriber.");
0:         } catch(Exception e) {
1:         }
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Robert Davies
-------------------------------------------------------------------------------
commit:ab3b155
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
1: public class JMSIndividualAckTest extends TestSupport {
1: 
1:     private Connection connection;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         connection = createConnection();
1:     }
1: 
1:     /**
1:      * @see junit.framework.TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Tests if acknowledged messages are being consumed.
0:      *
1:      * @throws JMSException
1:      */
1:     public void testAckedMessageAreConsumed() throws JMSException {
1:         connection.start();
1:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getQueueName());
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Hello"));
1: 
1:         // Consume the message...
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:         msg.acknowledge();
1: 
1:         // Reset the session.
1:         session.close();
1:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1: 
1:         // Attempt to Consume the message...
1:         consumer = session.createConsumer(queue);
1:         msg = consumer.receive(1000);
1:         assertNull(msg);
1: 
1:         session.close();
1:     }
1: 
1:     /**
1:      * Tests if acknowledged messages are being consumed.
0:      *
1:      * @throws JMSException
1:      */
1:     public void testLastMessageAcked() throws JMSException {
1:         connection.start();
1:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getQueueName());
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage msg1 = session.createTextMessage("msg1");
1:         TextMessage msg2 = session.createTextMessage("msg2");
1:         TextMessage msg3 = session.createTextMessage("msg3");
1:         producer.send(msg1);
1:         producer.send(msg2);
1:         producer.send(msg3);
1: 
1:         // Consume the message...
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:         msg = consumer.receive(1000);
1:         assertNotNull(msg);        
1:         msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:         msg.acknowledge();
1: 
1:         // Reset the session.
1:         session.close();
1:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1: 
1:         // Attempt to Consume the message...
1:         consumer = session.createConsumer(queue);
1:         msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:         assertEquals(msg1,msg);
1:         msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:         assertEquals(msg2,msg);
1:         msg = consumer.receive(1000);
1:         assertNull(msg);
1:         session.close();
1:     }
1:     
1:     /**
1:      * Tests if unacknowledged messages are being re-delivered when the consumer connects again.
0:      * 
1:      * @throws JMSException
1:      */
1:     public void testUnAckedMessageAreNotConsumedOnSessionClose() throws JMSException {
1:         connection.start();
1:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getQueueName());
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Hello"));
1: 
1:         // Consume the message...
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);        
1:         // Don't ack the message.
1:         
1:         // Reset the session.  This should cause the unacknowledged message to be re-delivered.
1:         session.close();
1:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:                 
1:         // Attempt to Consume the message...
1:         consumer = session.createConsumer(queue);
1:         msg = consumer.receive(2000);
1:         assertNotNull(msg);        
1:         msg.acknowledge();
1:         
1:         session.close();
1:     }
1: 
1:     protected String getQueueName() {
1:         return getClass().getName() + "." + getName();
1:     }
1: 
1: }
============================================================================