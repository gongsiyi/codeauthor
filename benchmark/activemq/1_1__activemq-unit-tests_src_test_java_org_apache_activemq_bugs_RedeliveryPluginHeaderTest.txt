1:c07514f: /**
1:c07514f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c07514f:  * contributor license agreements.  See the NOTICE file distributed with
1:c07514f:  * this work for additional information regarding copyright ownership.
1:c07514f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c07514f:  * (the "License"); you may not use this file except in compliance with
1:c07514f:  * the License.  You may obtain a copy of the License at
1:c07514f:  *
1:c07514f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c07514f:  *
1:c07514f:  * Unless required by applicable law or agreed to in writing, software
1:c07514f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c07514f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c07514f:  * See the License for the specific language governing permissions and
1:c07514f:  * limitations under the License.
1:c07514f:  */
1:c07514f: package org.apache.activemq.bugs;
1:c07514f: 
1:c07514f: import java.io.File;
1:c07514f: import javax.jms.Connection;
1:c07514f: import javax.jms.DeliveryMode;
1:c07514f: import javax.jms.Destination;
1:c07514f: import javax.jms.Message;
1:c07514f: import javax.jms.MessageConsumer;
1:c07514f: import javax.jms.MessageProducer;
1:c07514f: import javax.jms.Session;
1:c07514f: import javax.jms.TextMessage;
1:c07514f: import junit.framework.TestCase;
1:c07514f: import org.apache.activemq.ActiveMQConnectionFactory;
1:c07514f: import org.apache.activemq.RedeliveryPolicy;
1:c07514f: import org.apache.activemq.broker.BrokerPlugin;
1:c07514f: import org.apache.activemq.broker.BrokerService;
1:c07514f: import org.apache.activemq.broker.TransportConnector;
1:c07514f: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1:c07514f: import org.apache.activemq.broker.util.RedeliveryPlugin;
1:c07514f: import org.apache.activemq.util.IOHelper;
1:c07514f: import org.slf4j.Logger;
1:c07514f: import org.slf4j.LoggerFactory;
1:c07514f: 
1:c07514f: /**
1:c07514f:  * Testing if the the broker "sends" the message as expected after the redeliveryPlugin has redelivered the
1:c07514f:  * message previously.
1:c07514f:  */
1:c07514f: 
1:c07514f: public class RedeliveryPluginHeaderTest extends TestCase {
1:c07514f: 
1:c07514f:     private static final String TEST_QUEUE_ONE = "TEST_QUEUE_ONE";
1:c07514f:     private static final String TEST_QUEUE_TWO = "TEST_QUEUE_TWO";
1:c07514f:     private static final Logger LOG = LoggerFactory
1:c07514f:             .getLogger(RedeliveryPluginHeaderTest.class);
1:c07514f:     private String transportURL;
1:c07514f:     private BrokerService broker;
1:c07514f: 
1:c07514f:     /**
1:c07514f:      * Test
1:c07514f:      * - consumes message from Queue1
1:c07514f:      * - rolls back message to Queue1 and message is scheduled for redelivery to Queue1 by brokers plugin
1:c07514f:      * - consumes message from Queue1 again
1:c07514f:      * - sends same message to Queue2
1:c07514f:      * - expects to consume message from Queue2 immediately
1:c07514f:      */
1:c07514f: 
1:c07514f:     public void testSendAfterRedelivery() throws Exception {
1:c07514f:         broker = this.createBroker(false);
1:c07514f:         broker.start();
1:c07514f:         broker.waitUntilStarted();
1:c07514f: 
1:c07514f:         LOG.info("***Broker started...");
1:c07514f: 
1:c07514f:         //pushed message to broker
1:c07514f: 
1:c07514f:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:b6bca39:                 transportURL + "?trace=true&jms.redeliveryPolicy.maximumRedeliveries=0&jms.redeliveryPolicy.preDispatchCheck=true");
1:c07514f: 
1:c07514f:         Connection connection = factory.createConnection();
1:c07514f:         connection.start();
1:c07514f: 
1:c07514f:         try {
1:c07514f: 
1:c07514f:             Session session = connection.createSession(true,
1:c07514f:                     Session.SESSION_TRANSACTED);
1:c07514f: 
1:c07514f:             Destination destinationQ1 = session.createQueue(TEST_QUEUE_ONE);
1:c07514f:             Destination destinationQ2 = session.createQueue(TEST_QUEUE_TWO);
1:c07514f: 
1:c07514f:             MessageProducer producerQ1 = session.createProducer(destinationQ1);
1:c07514f:             producerQ1.setDeliveryMode(DeliveryMode.PERSISTENT);
1:c07514f: 
1:c07514f:             Message m = session.createTextMessage("testMessage");
1:c07514f:             LOG.info("*** send message to broker...");
1:c07514f:             producerQ1.send(m);
1:c07514f:             session.commit();
1:c07514f: 
1:c07514f:             //consume message from Q1 and rollback to get it redelivered
1:c07514f:             MessageConsumer consumerQ1 = session.createConsumer(destinationQ1);
1:c07514f: 
1:c07514f:             LOG.info("*** consume message from Q1 and rolled back..");
1:c07514f: 
1:c07514f:             TextMessage textMessage = (TextMessage) consumerQ1.receive();
1:c07514f:             LOG.info("got redelivered: " + textMessage);
1:c07514f:             assertFalse("JMSRedelivered flag is not set", textMessage.getJMSRedelivered());
1:c07514f:             session.rollback();
1:c07514f: 
1:c07514f:             LOG.info("*** consumed message from Q1 again and sending to Q2..");
1:c07514f:             TextMessage textMessage2 = (TextMessage) consumerQ1.receive();
1:c07514f:             LOG.info("got: " + textMessage2);
1:c07514f:             session.commit();
1:c07514f:             assertTrue("JMSRedelivered flag is set", textMessage2.getJMSRedelivered());
1:c07514f: 
1:c07514f:             //send message to Q2 and consume from Q2
1:c07514f:             MessageConsumer consumerQ2 = session.createConsumer(destinationQ2);
1:c07514f:             MessageProducer producer_two = session.createProducer(destinationQ2);
1:c07514f:             producer_two.send(textMessage2);
1:c07514f:             session.commit();
1:c07514f: 
1:c07514f:             //Message should be available straight away on the queue_two
1:c07514f:             Message textMessage3 = consumerQ2.receive(1000);
1:c07514f:             assertNotNull("should have consumed a message from TEST_QUEUE_TWO", textMessage3);
1:c07514f:             assertFalse("JMSRedelivered flag is not set", textMessage3.getJMSRedelivered());
1:c07514f:             session.commit();
1:c07514f: 
1:c07514f:         } finally {
1:c07514f: 
1:c07514f:             if (connection != null) {
1:c07514f:                 connection.close();
1:c07514f:             }
1:c07514f: 
1:c07514f:             if (broker != null) {
1:c07514f:                 broker.stop();
1:c07514f:             }
1:c07514f: 
1:c07514f:         }
1:c07514f: 
1:c07514f:     }
1:c07514f: 
1:c07514f:     protected BrokerService createBroker(boolean withJMX) throws Exception {
1:c07514f:         File schedulerDirectory = new File("target/scheduler");
1:c07514f:         IOHelper.mkdirs(schedulerDirectory);
1:c07514f:         IOHelper.deleteChildren(schedulerDirectory);
1:c07514f: 
1:c07514f:         BrokerService answer = new BrokerService();
1:c07514f:         answer.setAdvisorySupport(false);
1:c07514f:         answer.setDataDirectory("target");
1:c07514f:         answer.setSchedulerDirectoryFile(schedulerDirectory);
1:c07514f:         answer.setSchedulerSupport(true);
1:c07514f:         answer.setPersistent(true);
1:c07514f:         answer.setDeleteAllMessagesOnStartup(true);
1:c07514f:         answer.setUseJmx(withJMX);
1:c07514f: 
1:c07514f:         RedeliveryPlugin redeliveryPlugin = new RedeliveryPlugin();
1:c07514f:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:c07514f:         RedeliveryPolicy defaultEntry = new RedeliveryPolicy();
1:c07514f:         defaultEntry.setInitialRedeliveryDelay(5000);
1:c07514f:         defaultEntry.setMaximumRedeliveries(5);
1:c07514f:         redeliveryPolicyMap.setDefaultEntry(defaultEntry);
1:c07514f:         redeliveryPlugin.setRedeliveryPolicyMap(redeliveryPolicyMap);
1:c07514f: 
1:c07514f:         answer.setPlugins(new BrokerPlugin[] {redeliveryPlugin});
1:c07514f:         TransportConnector transportConnector =
1:c07514f:                 answer.addConnector("tcp://localhost:0");
1:c07514f: 
1:c07514f:         transportURL = transportConnector.getConnectUri().toASCIIString();
1:c07514f: 
1:c07514f:         return answer;
1:c07514f:     }
1:c07514f: 
1:c07514f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b6bca39
/////////////////////////////////////////////////////////////////////////
1:                 transportURL + "?trace=true&jms.redeliveryPolicy.maximumRedeliveries=0&jms.redeliveryPolicy.preDispatchCheck=true");
commit:c07514f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.File;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1: import org.apache.activemq.broker.util.RedeliveryPlugin;
1: import org.apache.activemq.util.IOHelper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Testing if the the broker "sends" the message as expected after the redeliveryPlugin has redelivered the
1:  * message previously.
1:  */
1: 
1: public class RedeliveryPluginHeaderTest extends TestCase {
1: 
1:     private static final String TEST_QUEUE_ONE = "TEST_QUEUE_ONE";
1:     private static final String TEST_QUEUE_TWO = "TEST_QUEUE_TWO";
1:     private static final Logger LOG = LoggerFactory
1:             .getLogger(RedeliveryPluginHeaderTest.class);
1:     private String transportURL;
1:     private BrokerService broker;
1: 
1:     /**
1:      * Test
1:      * - consumes message from Queue1
1:      * - rolls back message to Queue1 and message is scheduled for redelivery to Queue1 by brokers plugin
1:      * - consumes message from Queue1 again
1:      * - sends same message to Queue2
1:      * - expects to consume message from Queue2 immediately
1:      */
1: 
1:     public void testSendAfterRedelivery() throws Exception {
1:         broker = this.createBroker(false);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         LOG.info("***Broker started...");
1: 
1:         //pushed message to broker
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
0:                 transportURL + "?trace=true&jms.redeliveryPolicy.maximumRedeliveries=0");
1: 
1:         Connection connection = factory.createConnection();
1:         connection.start();
1: 
1:         try {
1: 
1:             Session session = connection.createSession(true,
1:                     Session.SESSION_TRANSACTED);
1: 
1:             Destination destinationQ1 = session.createQueue(TEST_QUEUE_ONE);
1:             Destination destinationQ2 = session.createQueue(TEST_QUEUE_TWO);
1: 
1:             MessageProducer producerQ1 = session.createProducer(destinationQ1);
1:             producerQ1.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:             Message m = session.createTextMessage("testMessage");
1:             LOG.info("*** send message to broker...");
1:             producerQ1.send(m);
1:             session.commit();
1: 
1:             //consume message from Q1 and rollback to get it redelivered
1:             MessageConsumer consumerQ1 = session.createConsumer(destinationQ1);
1: 
1:             LOG.info("*** consume message from Q1 and rolled back..");
1: 
1:             TextMessage textMessage = (TextMessage) consumerQ1.receive();
1:             LOG.info("got redelivered: " + textMessage);
1:             assertFalse("JMSRedelivered flag is not set", textMessage.getJMSRedelivered());
1:             session.rollback();
1: 
1:             LOG.info("*** consumed message from Q1 again and sending to Q2..");
1:             TextMessage textMessage2 = (TextMessage) consumerQ1.receive();
1:             LOG.info("got: " + textMessage2);
1:             session.commit();
1:             assertTrue("JMSRedelivered flag is set", textMessage2.getJMSRedelivered());
1: 
1:             //send message to Q2 and consume from Q2
1:             MessageConsumer consumerQ2 = session.createConsumer(destinationQ2);
1:             MessageProducer producer_two = session.createProducer(destinationQ2);
1:             producer_two.send(textMessage2);
1:             session.commit();
1: 
1:             //Message should be available straight away on the queue_two
1:             Message textMessage3 = consumerQ2.receive(1000);
1:             assertNotNull("should have consumed a message from TEST_QUEUE_TWO", textMessage3);
1:             assertFalse("JMSRedelivered flag is not set", textMessage3.getJMSRedelivered());
1:             session.commit();
1: 
1:         } finally {
1: 
1:             if (connection != null) {
1:                 connection.close();
1:             }
1: 
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1: 
1:         }
1: 
1:     }
1: 
1:     protected BrokerService createBroker(boolean withJMX) throws Exception {
1:         File schedulerDirectory = new File("target/scheduler");
1:         IOHelper.mkdirs(schedulerDirectory);
1:         IOHelper.deleteChildren(schedulerDirectory);
1: 
1:         BrokerService answer = new BrokerService();
1:         answer.setAdvisorySupport(false);
1:         answer.setDataDirectory("target");
1:         answer.setSchedulerDirectoryFile(schedulerDirectory);
1:         answer.setSchedulerSupport(true);
1:         answer.setPersistent(true);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.setUseJmx(withJMX);
1: 
1:         RedeliveryPlugin redeliveryPlugin = new RedeliveryPlugin();
1:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:         RedeliveryPolicy defaultEntry = new RedeliveryPolicy();
1:         defaultEntry.setInitialRedeliveryDelay(5000);
1:         defaultEntry.setMaximumRedeliveries(5);
1:         redeliveryPolicyMap.setDefaultEntry(defaultEntry);
1:         redeliveryPlugin.setRedeliveryPolicyMap(redeliveryPolicyMap);
1: 
1:         answer.setPlugins(new BrokerPlugin[] {redeliveryPlugin});
1:         TransportConnector transportConnector =
1:                 answer.addConnector("tcp://localhost:0");
1: 
1:         transportURL = transportConnector.getConnectUri().toASCIIString();
1: 
1:         return answer;
1:     }
1: 
1: }
============================================================================