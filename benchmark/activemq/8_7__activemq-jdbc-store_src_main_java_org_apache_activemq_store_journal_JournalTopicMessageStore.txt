1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store.journal;
11:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: 
1:f451ad0: import org.apache.activeio.journal.RecordLocation;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.command.JournalTopicAck;
1:d29ca2a: import org.apache.activemq.command.Message;
1:3432a75: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.MessageId;
1:d29ca2a: import org.apache.activemq.command.SubscriptionInfo;
1:d29ca2a: import org.apache.activemq.store.MessageRecoveryListener;
1:cf3d419: import org.apache.activemq.store.MessageStoreSubscriptionStatistics;
1:d29ca2a: import org.apache.activemq.store.TopicMessageStore;
1:d29ca2a: import org.apache.activemq.transaction.Synchronization;
1:d29ca2a: import org.apache.activemq.util.Callback;
1:d29ca2a: import org.apache.activemq.util.SubscriptionKey;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A MessageStore that uses a Journal to store it's messages.
1:734fb7d:  *
1:734fb7d:  *
1:d29ca2a:  */
1:d29ca2a: public class JournalTopicMessageStore extends JournalMessageStore implements TopicMessageStore {
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JournalTopicMessageStore.class);
1:d29ca2a: 
1:d29ca2a:     private TopicMessageStore longTermStore;
1:933eb2f:     private HashMap<SubscriptionKey, MessageId> ackedLastAckLocations = new HashMap<SubscriptionKey, MessageId>();
1:f812e34: 
1:f812e34:     public JournalTopicMessageStore(JournalPersistenceAdapter adapter, TopicMessageStore checkpointStore,
1:f812e34:                                     ActiveMQTopic destinationName) {
1:d29ca2a:         super(adapter, checkpointStore, destinationName);
1:d29ca2a:         this.longTermStore = checkpointStore;
1:86cbdfd:     }
1:f812e34: 
1:734fb7d:     @Override
1:f812e34:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener)
1:f812e34:         throws Exception {
1:d29ca2a:         this.peristenceAdapter.checkpoint(true, true);
1:d29ca2a:         longTermStore.recoverSubscription(clientId, subscriptionName, listener);
4:d29ca2a:     }
1:f812e34: 
1:734fb7d:     @Override
1:f812e34:     public void recoverNextMessages(String clientId, String subscriptionName, int maxReturned,
1:f812e34:                                     MessageRecoveryListener listener) throws Exception {
1:4eef609:         this.peristenceAdapter.checkpoint(true, true);
1:f812e34:         longTermStore.recoverNextMessages(clientId, subscriptionName, maxReturned, listener);
1:f812e34: 
1:d29ca2a:     }
1:9b64c37: 
1:734fb7d:     @Override
1:d29ca2a:     public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException {
1:d29ca2a:         return longTermStore.lookupSubscription(clientId, subscriptionName);
1:d29ca2a:     }
1:d29ca2a: 
1:734fb7d:     @Override
1:c0090f6:     public void addSubscription(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException {
1:d29ca2a:         this.peristenceAdapter.checkpoint(true, true);
1:c0090f6:         longTermStore.addSubscription(subscriptionInfo, retroactive);
1:d29ca2a:     }
1:d29ca2a: 
1:734fb7d:     @Override
1:d29ca2a:     public void addMessage(ConnectionContext context, Message message) throws IOException {
1:d29ca2a:         super.addMessage(context, message);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      */
1:734fb7d:     @Override
1:f812e34:     public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
1:3432a75:                             final MessageId messageId, MessageAck originalAck) throws IOException {
1:fc00993:         final boolean debug = LOG.isDebugEnabled();
1:f812e34: 
1:d29ca2a:         JournalTopicAck ack = new JournalTopicAck();
1:d29ca2a:         ack.setDestination(destination);
1:d29ca2a:         ack.setMessageId(messageId);
1:d29ca2a:         ack.setMessageSequenceId(messageId.getBrokerSequenceId());
1:d29ca2a:         ack.setSubscritionName(subscriptionName);
1:d29ca2a:         ack.setClientId(clientId);
1:f812e34:         ack.setTransactionId(context.getTransaction() != null
1:f812e34:             ? context.getTransaction().getTransactionId() : null);
1:d29ca2a:         final RecordLocation location = peristenceAdapter.writeCommand(ack, false);
1:f812e34: 
1:f812e34:         final SubscriptionKey key = new SubscriptionKey(clientId, subscriptionName);
1:f812e34:         if (!context.isInTransaction()) {
1:fc00993:             if (debug) {
1:fc00993:                 LOG.debug("Journalled acknowledge for: " + messageId + ", at: " + location);
1:fc00993:             }
1:d29ca2a:             acknowledge(messageId, location, key);
1:d29ca2a:         } else {
1:fc00993:             if (debug) {
1:fc00993:                 LOG.debug("Journalled transacted acknowledge for: " + messageId + ", at: " + location);
1:fc00993:             }
1:d29ca2a:             synchronized (this) {
1:d29ca2a:                 inFlightTxLocations.add(location);
1:d29ca2a:             }
1:d29ca2a:             transactionStore.acknowledge(this, ack, location);
1:f812e34:             context.getTransaction().addSynchronization(new Synchronization() {
1:734fb7d:                 @Override
1:f812e34:                 public void afterCommit() throws Exception {
1:fc00993:                     if (debug) {
1:fc00993:                         LOG.debug("Transacted acknowledge commit for: " + messageId + ", at: " + location);
1:fc00993:                     }
1:d29ca2a:                     synchronized (JournalTopicMessageStore.this) {
1:d29ca2a:                         inFlightTxLocations.remove(location);
1:d29ca2a:                         acknowledge(messageId, location, key);
1:d29ca2a:                     }
1:d29ca2a:                 }
1:f812e34: 
1:734fb7d:                 @Override
1:f812e34:                 public void afterRollback() throws Exception {
1:fc00993:                     if (debug) {
1:fc00993:                         LOG.debug("Transacted acknowledge rollback for: " + messageId + ", at: " + location);
1:fc00993:                     }
1:d29ca2a:                     synchronized (JournalTopicMessageStore.this) {
1:d29ca2a:                         inFlightTxLocations.remove(location);
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:             });
1:d29ca2a:         }
1:f812e34: 
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     public void replayAcknowledge(ConnectionContext context, String clientId, String subscritionName,
1:f812e34:                                   MessageId messageId) {
1:d29ca2a:         try {
1:d29ca2a:             SubscriptionInfo sub = longTermStore.lookupSubscription(clientId, subscritionName);
1:f812e34:             if (sub != null) {
1:3432a75:                 longTermStore.acknowledge(context, clientId, subscritionName, messageId, null);
1:d29ca2a:             }
1:f812e34:         } catch (Throwable e) {
1:fc00993:             LOG.debug("Could not replay acknowledge for message '" + messageId
1:f812e34:                       + "'.  Message may have already been acknowledged. reason: " + e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param messageId
1:d29ca2a:      * @param location
1:d29ca2a:      * @param key
1:d29ca2a:      */
1:a3e3821:     protected void acknowledge(MessageId messageId, RecordLocation location, SubscriptionKey key) {
1:f812e34:         synchronized (this) {
1:f812e34:             lastLocation = location;
1:f812e34:             ackedLastAckLocations.put(key, messageId);
1:f812e34:         }
1:d29ca2a:     }
1:f812e34: 
1:734fb7d:     @Override
1:d29ca2a:     public RecordLocation checkpoint() throws IOException {
1:f812e34: 
1:933eb2f:         final HashMap<SubscriptionKey, MessageId> cpAckedLastAckLocations;
1:d29ca2a: 
1:d29ca2a:         // swap out the hash maps..
1:d29ca2a:         synchronized (this) {
1:d29ca2a:             cpAckedLastAckLocations = this.ackedLastAckLocations;
1:933eb2f:             this.ackedLastAckLocations = new HashMap<SubscriptionKey, MessageId>();
1:d29ca2a:         }
1:d29ca2a: 
1:f812e34:         return super.checkpoint(new Callback() {
1:734fb7d:             @Override
1:7f5213b:             public void execute() throws Exception {
1:d29ca2a: 
1:d29ca2a:                 // Checkpoint the acknowledged messages.
1:933eb2f:                 Iterator<SubscriptionKey> iterator = cpAckedLastAckLocations.keySet().iterator();
1:d29ca2a:                 while (iterator.hasNext()) {
1:933eb2f:                     SubscriptionKey subscriptionKey = iterator.next();
1:933eb2f:                     MessageId identity = cpAckedLastAckLocations.get(subscriptionKey);
1:3ea18f4:                     MessageAck ack = new MessageAck();
1:3ea18f4:                     ack.setMessageID(identity);
1:f812e34:                     longTermStore.acknowledge(transactionTemplate.getContext(), subscriptionKey.clientId,
1:3ea18f4:                                               subscriptionKey.subscriptionName, identity, ack);
1:d29ca2a:                 }
1:d29ca2a: 
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @return Returns the longTermStore.
1:f812e34:      */
1:f812e34:     public TopicMessageStore getLongTermTopicMessageStore() {
1:f812e34:         return longTermStore;
1:f812e34:     }
1:d29ca2a: 
1:734fb7d:     @Override
1:d29ca2a:     public void deleteSubscription(String clientId, String subscriptionName) throws IOException {
1:d29ca2a:         longTermStore.deleteSubscription(clientId, subscriptionName);
1:d29ca2a:     }
1:f812e34: 
1:734fb7d:     @Override
1:9b64c37:     public SubscriptionInfo[] getAllSubscriptions() throws IOException {
1:9b64c37:         return longTermStore.getAllSubscriptions();
1:9b64c37:     }
1:d29ca2a: 
1:734fb7d:     @Override
1:f812e34:     public int getMessageCount(String clientId, String subscriberName) throws IOException {
1:b6ba20b:         this.peristenceAdapter.checkpoint(true, true);
1:f812e34:         return longTermStore.getMessageCount(clientId, subscriberName);
1:d29ca2a:     }
1:d29ca2a: 
1:734fb7d:     @Override
1:734fb7d:     public long getMessageSize(String clientId, String subscriberName) throws IOException {
1:734fb7d:         this.peristenceAdapter.checkpoint(true, true);
1:734fb7d:         return longTermStore.getMessageSize(clientId, subscriberName);
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     @Override
1:f812e34:     public void resetBatching(String clientId, String subscriptionName) {
1:f812e34:         longTermStore.resetBatching(clientId, subscriptionName);
1:f812e34:     }
1:d29ca2a: 
1:cf3d419:     private final MessageStoreSubscriptionStatistics stats = new MessageStoreSubscriptionStatistics(false);
1:cf3d419: 
1:cf3d419:     @Override
1:cf3d419:     public MessageStoreSubscriptionStatistics getMessageStoreSubStatistics() {
1:cf3d419:         return stats;
1:cf3d419:     }
1:f812e34: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:3ea18f4
/////////////////////////////////////////////////////////////////////////
1:                     MessageAck ack = new MessageAck();
1:                     ack.setMessageID(identity);
1:                                               subscriptionKey.subscriptionName, identity, ack);
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cf3d419
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.MessageStoreSubscriptionStatistics;
/////////////////////////////////////////////////////////////////////////
1:     private final MessageStoreSubscriptionStatistics stats = new MessageStoreSubscriptionStatistics(false);
1: 
1:     @Override
1:     public MessageStoreSubscriptionStatistics getMessageStoreSubStatistics() {
1:         return stats;
1:     }
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public long getMessageSize(String clientId, String subscriberName) throws IOException {
1:         this.peristenceAdapter.checkpoint(true, true);
1:         return longTermStore.getMessageSize(clientId, subscriberName);
1:     }
1: 
1:     @Override
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:c0090f6
/////////////////////////////////////////////////////////////////////////
1:     public void addSubscription(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException {
1:         longTermStore.addSubscription(subscriptionInfo, retroactive);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private HashMap<SubscriptionKey, MessageId> ackedLastAckLocations = new HashMap<SubscriptionKey, MessageId>();
/////////////////////////////////////////////////////////////////////////
1:         final HashMap<SubscriptionKey, MessageId> cpAckedLastAckLocations;
1:             this.ackedLastAckLocations = new HashMap<SubscriptionKey, MessageId>();
1:                 Iterator<SubscriptionKey> iterator = cpAckedLastAckLocations.keySet().iterator();
1:                     SubscriptionKey subscriptionKey = iterator.next();
1:                     MessageId identity = cpAckedLastAckLocations.get(subscriptionKey);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(JournalTopicMessageStore.class);
/////////////////////////////////////////////////////////////////////////
1:         final boolean debug = LOG.isDebugEnabled();
/////////////////////////////////////////////////////////////////////////
1:             if (debug) {
1:                 LOG.debug("Journalled acknowledge for: " + messageId + ", at: " + location);
1:             }
1:             if (debug) {
1:                 LOG.debug("Journalled transacted acknowledge for: " + messageId + ", at: " + location);
1:             }
1:                     if (debug) {
1:                         LOG.debug("Transacted acknowledge commit for: " + messageId + ", at: " + location);
1:                     }
/////////////////////////////////////////////////////////////////////////
1:                     if (debug) {
1:                         LOG.debug("Transacted acknowledge rollback for: " + messageId + ", at: " + location);
1:                     }
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Could not replay acknowledge for message '" + messageId
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
0:     private HashMap ackedLastAckLocations = new HashMap();
1: 
1:     public JournalTopicMessageStore(JournalPersistenceAdapter adapter, TopicMessageStore checkpointStore,
1:                                     ActiveMQTopic destinationName) {
1: 
1:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener)
1:         throws Exception {
1: 
1:     public void recoverNextMessages(String clientId, String subscriptionName, int maxReturned,
1:                                     MessageRecoveryListener listener) throws Exception {
1:         longTermStore.recoverNextMessages(clientId, subscriptionName, maxReturned, listener);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
0:                             final MessageId messageId) throws IOException {
1: 
1:         ack.setTransactionId(context.getTransaction() != null
1:             ? context.getTransaction().getTransactionId() : null);
1: 
1:         final SubscriptionKey key = new SubscriptionKey(clientId, subscriptionName);
1:         if (!context.isInTransaction()) {
0:             if (debug)
0:                 log.debug("Journalled acknowledge for: " + messageId + ", at: " + location);
0:             if (debug)
0:                 log.debug("Journalled transacted acknowledge for: " + messageId + ", at: " + location);
1:             context.getTransaction().addSynchronization(new Synchronization() {
1:                 public void afterCommit() throws Exception {
0:                     if (debug)
0:                         log.debug("Transacted acknowledge commit for: " + messageId + ", at: " + location);
1: 
1:                 public void afterRollback() throws Exception {
0:                     if (debug)
0:                         log.debug("Transacted acknowledge rollback for: " + messageId + ", at: " + location);
1: 
1: 
1:     public void replayAcknowledge(ConnectionContext context, String clientId, String subscritionName,
1:                                   MessageId messageId) {
1:             if (sub != null) {
1:         } catch (Throwable e) {
0:             log.debug("Could not replay acknowledge for message '" + messageId
1:                       + "'.  Message may have already been acknowledged. reason: " + e);
/////////////////////////////////////////////////////////////////////////
1:         synchronized (this) {
1:             lastLocation = location;
1:             ackedLastAckLocations.put(key, messageId);
1:         }
1: 
1: 
0:         final HashMap cpAckedLastAckLocations;
/////////////////////////////////////////////////////////////////////////
1:         return super.checkpoint(new Callback() {
0:                     SubscriptionKey subscriptionKey = (SubscriptionKey)iterator.next();
0:                     MessageId identity = (MessageId)cpAckedLastAckLocations.get(subscriptionKey);
1:                     longTermStore.acknowledge(transactionTemplate.getContext(), subscriptionKey.clientId,
0:                                               subscriptionKey.subscriptionName, identity);
/////////////////////////////////////////////////////////////////////////
1:      * @return Returns the longTermStore.
1:      */
1:     public TopicMessageStore getLongTermTopicMessageStore() {
1:         return longTermStore;
1:     }
1: 
1:     public int getMessageCount(String clientId, String subscriberName) throws IOException {
1:         return longTermStore.getMessageCount(clientId, subscriberName);
1:     public void resetBatching(String clientId, String subscriptionName) {
1:         longTermStore.resetBatching(clientId, subscriptionName);
1:     }
1: }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
0:     public void addSubsciption(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException {
0:         longTermStore.addSubsciption(subscriptionInfo, retroactive);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:8999aa1
/////////////////////////////////////////////////////////////////////////
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activeio.journal.RecordLocation;
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:                 public void afterCommit() throws Exception {                    
/////////////////////////////////////////////////////////////////////////
0:                 public void afterRollback() throws Exception {                    
/////////////////////////////////////////////////////////////////////////
1:             public void execute() throws Exception {
commit:9b64c37
/////////////////////////////////////////////////////////////////////////
1:     
1:     public SubscriptionInfo[] getAllSubscriptions() throws IOException {
1:         return longTermStore.getAllSubscriptions();
1:     }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.journal;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: 
0: import org.activeio.journal.RecordLocation;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.JournalTopicAck;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.SubscriptionInfo;
1: import org.apache.activemq.store.MessageRecoveryListener;
1: import org.apache.activemq.store.TopicMessageStore;
1: import org.apache.activemq.transaction.Synchronization;
1: import org.apache.activemq.util.Callback;
1: import org.apache.activemq.util.SubscriptionKey;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * A MessageStore that uses a Journal to store it's messages.
1:  * 
0:  * @version $Revision: 1.13 $
1:  */
1: public class JournalTopicMessageStore extends JournalMessageStore implements TopicMessageStore {
1:     
0:     private static final Log log = LogFactory.getLog(JournalTopicMessageStore.class);
1: 
1:     private TopicMessageStore longTermStore;
0: 	private HashMap ackedLastAckLocations = new HashMap();
1:     
0:     public JournalTopicMessageStore(JournalPersistenceAdapter adapter, TopicMessageStore checkpointStore, ActiveMQTopic destinationName) {
1:         super(adapter, checkpointStore, destinationName);
1:         this.longTermStore = checkpointStore;
1:     }
1:     
0:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Throwable {
1:         this.peristenceAdapter.checkpoint(true, true);
1:         longTermStore.recoverSubscription(clientId, subscriptionName, listener);
1:     }
1: 
1:     public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException {
1:         return longTermStore.lookupSubscription(clientId, subscriptionName);
1:     }
1: 
0:     public void addSubsciption(String clientId, String subscriptionName, String selector, boolean retroactive) throws IOException {
1:         this.peristenceAdapter.checkpoint(true, true);
0:         longTermStore.addSubsciption(clientId, subscriptionName, selector, retroactive);
1:     }
1: 
1:     public void addMessage(ConnectionContext context, Message message) throws IOException {
1:         super.addMessage(context, message);
0:         this.peristenceAdapter.checkpoint(false, false);
1:     }
1:     
1:     /**
1:      */
0:     public void acknowledge(ConnectionContext context, String clientId, String subscriptionName, final MessageId messageId) throws IOException {
0:         final boolean debug = log.isDebugEnabled();
1:         
1:         JournalTopicAck ack = new JournalTopicAck();
1:         ack.setDestination(destination);
1:         ack.setMessageId(messageId);
1:         ack.setMessageSequenceId(messageId.getBrokerSequenceId());
1:         ack.setSubscritionName(subscriptionName);
1:         ack.setClientId(clientId);
0:         ack.setTransactionId( context.getTransaction()!=null ? context.getTransaction().getTransactionId():null);
1:         final RecordLocation location = peristenceAdapter.writeCommand(ack, false);
1:         
0:         final SubscriptionKey key = new SubscriptionKey(clientId, subscriptionName);        
0:         if( !context.isInTransaction() ) {
0:             if( debug )
0:                 log.debug("Journalled acknowledge for: "+messageId+", at: "+location);
1:             acknowledge(messageId, location, key);
1:         } else {
0:             if( debug )
0:                 log.debug("Journalled transacted acknowledge for: "+messageId+", at: "+location);
1:             synchronized (this) {
1:                 inFlightTxLocations.add(location);
1:             }
1:             transactionStore.acknowledge(this, ack, location);
0:             context.getTransaction().addSynchronization(new Synchronization(){
0:                 public void afterCommit() {                    
0:                     if( debug )
0:                         log.debug("Transacted acknowledge commit for: "+messageId+", at: "+location);
1:                     synchronized (JournalTopicMessageStore.this) {
1:                         inFlightTxLocations.remove(location);
1:                         acknowledge(messageId, location, key);
1:                     }
1:                 }
0:                 public void afterRollback() {                    
0:                     if( debug )
0:                         log.debug("Transacted acknowledge rollback for: "+messageId+", at: "+location);
1:                     synchronized (JournalTopicMessageStore.this) {
1:                         inFlightTxLocations.remove(location);
1:                     }
1:                 }
1:             });
1:         }
1:         
1:     }
1:     
0:     public void replayAcknowledge(ConnectionContext context, String clientId, String subscritionName, MessageId messageId) {
1:         try {
1:             SubscriptionInfo sub = longTermStore.lookupSubscription(clientId, subscritionName);
0:             if( sub != null ) {
0:                 longTermStore.acknowledge(context, clientId, subscritionName, messageId);
1:             }
1:         }
0:         catch (Throwable e) {
0:             log.debug("Could not replay acknowledge for message '" + messageId + "'.  Message may have already been acknowledged. reason: " + e);
1:         }
1:     }
1:         
1: 
1:     /**
1:      * @param messageId
1:      * @param location
1:      * @param key
1:      */
0:     private void acknowledge(MessageId messageId, RecordLocation location, SubscriptionKey key) {
0:         synchronized(this) {
0: 		    lastLocation = location;
0: 		    ackedLastAckLocations.put(key, messageId);
1: 		}
1:     }
1:     
1:     public RecordLocation checkpoint() throws IOException {
1:         
0: 		final HashMap cpAckedLastAckLocations;
1: 
1:         // swap out the hash maps..
1:         synchronized (this) {
1:             cpAckedLastAckLocations = this.ackedLastAckLocations;
0:             this.ackedLastAckLocations = new HashMap();
1:         }
1: 
0:         return super.checkpoint( new Callback() {
0:             public void execute() throws Throwable {
1: 
1:                 // Checkpoint the acknowledged messages.
0:                 Iterator iterator = cpAckedLastAckLocations.keySet().iterator();
1:                 while (iterator.hasNext()) {
0:                     SubscriptionKey subscriptionKey = (SubscriptionKey) iterator.next();
0:                     MessageId identity = (MessageId) cpAckedLastAckLocations.get(subscriptionKey);
0:                     longTermStore.acknowledge(transactionTemplate.getContext(), subscriptionKey.clientId, subscriptionKey.subscriptionName, identity);
1:                 }
1: 
1:             }
1:         });
1: 
1:     }
1: 
1:     /**
0: 	 * @return Returns the longTermStore.
1: 	 */
0: 	public TopicMessageStore getLongTermTopicMessageStore() {
0: 		return longTermStore;
1: 	}
1: 
1:     public void deleteSubscription(String clientId, String subscriptionName) throws IOException {
1:         longTermStore.deleteSubscription(clientId, subscriptionName);
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(JournalTopicMessageStore.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:3432a75
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageAck;
/////////////////////////////////////////////////////////////////////////
1:                             final MessageId messageId, MessageAck originalAck) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:                 longTermStore.acknowledge(context, clientId, subscritionName, messageId, null);
/////////////////////////////////////////////////////////////////////////
0:                                               subscriptionKey.subscriptionName, identity, null);
author:Robert Davies
-------------------------------------------------------------------------------
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
1:     protected void acknowledge(MessageId messageId, RecordLocation location, SubscriptionKey key) {
commit:629bc81
/////////////////////////////////////////////////////////////////////////
0:     public void recoverNextMessages(String clientId,String subscriptionName,int maxReturned,MessageRecoveryListener listener) throws Exception{
0:         longTermStore.recoverNextMessages(clientId, subscriptionName, maxReturned,listener);
/////////////////////////////////////////////////////////////////////////
0:     public void resetBatching(String clientId,String subscriptionName) {
0:         longTermStore.resetBatching(clientId,subscriptionName);
0: }
commit:b6ba20b
/////////////////////////////////////////////////////////////////////////
0:     public MessageId getNextMessageIdToDeliver(String clientId,String subscriptionName,MessageId id) throws Exception{
0:         return longTermStore.getNextMessageIdToDeliver(clientId,subscriptionName,id);
0:     }
0:     
0:     public MessageId getPreviousMessageIdToDeliver(String clientId,String subscriptionName,MessageId id) throws Exception{
1:         this.peristenceAdapter.checkpoint(true, true);
0:         return longTermStore.getPreviousMessageIdToDeliver(clientId,subscriptionName,id);
0:     
0:     public void resetBatching(String clientId,String subscriptionName,MessageId nextToDispatch) {
0:         longTermStore.resetBatching(clientId,subscriptionName,nextToDispatch);
0:     }
commit:4eef609
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void recoverNextMessages(String clientId,String subscriptionName,MessageId lastMessageId,int maxReturned,MessageRecoveryListener listener) throws Exception{
1:         this.peristenceAdapter.checkpoint(true, true);
0:         longTermStore.recoverNextMessages(clientId, subscriptionName, lastMessageId,maxReturned,listener);
0:         
0:     }
/////////////////////////////////////////////////////////////////////////
0:     public Message getNextMessageToDeliver(String clientId,String subscriptionName) throws IOException{
0:         this.peristenceAdapter.checkpoint(true, true);
0:         return longTermStore.getNextMessageToDeliver(clientId,subscriptionName);
0:     }
0: 
0:     public int getMessageCount(String clientId,String subscriberName) throws IOException{
0:         this.peristenceAdapter.checkpoint(true, true);
0:         return longTermStore.getMessageCount(clientId,subscriberName);
0:     }
0: 
0:     
0: 
============================================================================