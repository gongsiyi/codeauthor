1:0885c60: /**
1:0885c60:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0885c60:  * contributor license agreements.  See the NOTICE file distributed with
1:0885c60:  * this work for additional information regarding copyright ownership.
1:0885c60:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0885c60:  * (the "License"); you may not use this file except in compliance with
1:0885c60:  * the License.  You may obtain a copy of the License at
1:0885c60:  *
1:0885c60:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0885c60:  *
1:0885c60:  * Unless required by applicable law or agreed to in writing, software
1:0885c60:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0885c60:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0885c60:  * See the License for the specific language governing permissions and
1:0885c60:  * limitations under the License.
1:0885c60:  */
1:0885c60: package org.apache.activemq.transport.stomp;
1:0885c60: 
1:1236bbf: import static org.junit.Assert.assertEquals;
1:1236bbf: import static org.junit.Assert.assertNotNull;
1:1236bbf: import static org.junit.Assert.assertTrue;
1:1236bbf: import static org.junit.Assert.fail;
1:1236bbf: 
1:01b9e4b: import java.io.DataInputStream;
1:01b9e4b: import java.net.SocketTimeoutException;
1:78265ea: import java.util.concurrent.Executors;
1:78265ea: import java.util.concurrent.ScheduledExecutorService;
1:01b9e4b: import java.util.concurrent.TimeUnit;
1:01b9e4b: 
1:01b9e4b: import javax.jms.Connection;
1:01b9e4b: import javax.jms.MessageConsumer;
1:01b9e4b: import javax.jms.MessageProducer;
1:01b9e4b: import javax.jms.Session;
1:01b9e4b: import javax.jms.TextMessage;
1:27a74d3: import javax.management.ObjectName;
1:01b9e4b: 
1:27a74d3: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:bd86617: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:a36e618: import org.apache.activemq.command.ActiveMQQueue;
1:a36e618: import org.apache.activemq.command.ActiveMQTextMessage;
1:388c16d: import org.apache.activemq.util.Wait;
1:1236bbf: import org.junit.Test;
1:0885c60: import org.slf4j.Logger;
1:0885c60: import org.slf4j.LoggerFactory;
1:0885c60: 
1:1236bbf: public class Stomp11Test extends StompTestSupport {
1:0885c60: 
1:01b9e4b:     private static final Logger LOG = LoggerFactory.getLogger(Stomp11Test.class);
1:0885c60: 
1:a36e618:     private Connection connection;
1:a36e618:     private Session session;
1:a36e618:     private ActiveMQQueue queue;
1:0885c60: 
2:0885c60:     @Override
1:1236bbf:     public void setUp() throws Exception {
1:0885c60: 
1:1236bbf:         super.setUp();
1:0885c60: 
1:0885c60:         stompConnect();
1:0885c60: 
1:a36e618:         connection = cf.createConnection("system", "manager");
1:a36e618:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a36e618:         queue = new ActiveMQQueue(getQueueName());
1:a36e618:         connection.start();
4:0885c60:     }
1:e9bf83f: 
1:2a10e99:     @Override
1:2a10e99:     public void tearDown() throws Exception {
1:2a10e99:         try {
1:2a10e99:             if (connection != null) {
1:2a10e99:                 connection.close();
1:2a10e99:                 connection = null;
1:2a10e99:             }
1:2a10e99:         } catch (Exception ex) {}
1:2a10e99: 
1:2a10e99:         super.tearDown();
1:2a10e99:     }
1:2a10e99: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testConnect() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "host:localhost\n" +
1:956724e:                               "request-id:1\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60:         assertTrue(f.indexOf("response-id:1") >= 0);
2:0885c60:         assertTrue(f.indexOf("version:1.1") >= 0);
2:0885c60:         assertTrue(f.indexOf("session:") >= 0);
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:e9bf83f:     public void testConnectedNeverEncoded() throws Exception {
1:e9bf83f: 
1:e9bf83f:         String connectFrame = "STOMP\n" +
1:e9bf83f:                               "login:system\n" +
1:e9bf83f:                               "passcode:manager\n" +
1:e9bf83f:                               "accept-version:1.1\n" +
1:e9bf83f:                               "host:localhost\n" +
1:e9bf83f:                               "request-id:1\n" +
1:e9bf83f:                               "\n" + Stomp.NULL;
1:e9bf83f:         stompConnection.sendFrame(connectFrame);
1:e9bf83f: 
1:e9bf83f:         String f = stompConnection.receiveFrame();
1:e9bf83f:         LOG.debug("Broker sent: " + f);
1:e9bf83f: 
1:e9bf83f:         assertTrue(f.startsWith("CONNECTED"));
1:e9bf83f:         assertTrue(f.indexOf("response-id:1") >= 0);
1:e9bf83f:         assertTrue(f.indexOf("version:1.1") >= 0);
1:e9bf83f:         assertTrue(f.indexOf("session:") >= 0);
1:0885c60: 
1:e9bf83f:         int sessionHeader = f.indexOf("session:");
1:e9bf83f:         f = f.substring(sessionHeader + "session:".length());
1:e9bf83f: 
1:e9bf83f:         LOG.info("session header follows: " + f);
1:e9bf83f:         assertTrue(f.startsWith("ID:"));
1:0885c60:     }
1:e9bf83f: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testConnectWithVersionOptions() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.0,1.1\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60:         assertTrue(f.indexOf("version:1.1") >= 0);
1:0885c60:         assertTrue(f.indexOf("session:") >= 0);
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testConnectWithValidFallback() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.0,10.1\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60:         assertTrue(f.indexOf("version:1.0") >= 0);
1:0885c60:         assertTrue(f.indexOf("session:") >= 0);
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testConnectWithInvalidFallback() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:9.0,10.1\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("ERROR"));
1:0885c60:         assertTrue(f.indexOf("version") >= 0);
1:0885c60:         assertTrue(f.indexOf("message:") >= 0);
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testHeartbeats() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "heart-beat:0,1000\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60: 
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:a2f59ec:         String f = stompConnection.receiveFrame().trim();
1:a2f59ec: 
1:a2f59ec:         LOG.info("Broker sent: " + f);
1:a2f59ec: 
1:b7a1883:         assertTrue("Failed to receive a connected frame.", f.startsWith("CONNECTED"));
1:b7a1883:         assertTrue("Frame should have a versoion 1.1 header.", f.indexOf("version:1.1") >= 0);
1:b7a1883:         assertTrue("Frame should have a heart beat header.", f.indexOf("heart-beat:") >= 0);
1:b7a1883:         assertTrue("Frame should have a session header.", f.indexOf("session:") >= 0);
1:0885c60: 
1:0885c60:         stompConnection.getStompSocket().getOutputStream().write('\n');
1:0885c60: 
1:0885c60:         DataInputStream in = new DataInputStream(stompConnection.getStompSocket().getInputStream());
1:0885c60:         in.read();
1:0885c60:         {
1:0885c60:             long startTime = System.currentTimeMillis();
1:0885c60:             int input = in.read();
1:0885c60:             assertEquals("did not receive the correct hear beat value", '\n', input);
1:0885c60:             long endTime = System.currentTimeMillis();
1:0885c60:             assertTrue("Broker did not send KeepAlive in time", (endTime - startTime) >= 900);
1:0885c60:         }
1:0885c60:         {
1:0885c60:             long startTime = System.currentTimeMillis();
1:0885c60:             int input = in.read();
1:0885c60:             assertEquals("did not receive the correct hear beat value", '\n', input);
1:0885c60:             long endTime = System.currentTimeMillis();
1:0885c60:             assertTrue("Broker did not send KeepAlive in time", (endTime - startTime) >= 900);
1:0885c60:         }
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testHeartbeatsDropsIdleConnection() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "heart-beat:1000,0\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:acde68e: 
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60:         assertTrue(f.indexOf("version:1.1") >= 0);
2:0885c60:         assertTrue(f.indexOf("heart-beat:") >= 0);
1:0885c60:         assertTrue(f.indexOf("session:") >= 0);
1:0885c60:         LOG.debug("Broker sent: " + f);
1:acde68e: 
1:0885c60:         long startTime = System.currentTimeMillis();
1:acde68e: 
1:acde68e:         try {
1:0885c60:             f = stompConnection.receiveFrame();
1:0885c60:             LOG.debug("Broker sent: " + f);
1:0885c60:             fail();
2:0885c60:         } catch(Exception e) {
1:0885c60:         }
1:0885c60: 
1:0885c60:         long endTime = System.currentTimeMillis();
1:0885c60:         assertTrue("Broker did close idle connection in time.", (endTime - startTime) >= 1000);
1:0885c60:     }
1:acde68e: 
1:388c16d:     @Test(timeout = 60000)
1:78265ea:     public void testHeartbeatsKeepsConnectionOpen() throws Exception {
1:78265ea: 
1:78265ea:         String connectFrame = "STOMP\n" +
1:78265ea:                               "login:system\n" +
1:78265ea:                               "passcode:manager\n" +
1:78265ea:                               "accept-version:1.1\n" +
1:78265ea:                               "heart-beat:2000,0\n" +
1:78265ea:                               "host:localhost\n" +
1:78265ea:                               "\n" + Stomp.NULL;
1:78265ea: 
1:78265ea:         stompConnection.sendFrame(connectFrame);
1:78265ea:         String f = stompConnection.receiveFrame();
1:78265ea:         assertTrue(f.startsWith("CONNECTED"));
1:78265ea:         assertTrue(f.indexOf("version:1.1") >= 0);
1:78265ea:         assertTrue(f.indexOf("heart-beat:") >= 0);
1:78265ea:         assertTrue(f.indexOf("session:") >= 0);
1:78265ea:         LOG.debug("Broker sent: " + f);
1:78265ea: 
1:78265ea:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:78265ea:         stompConnection.sendFrame(message);
1:78265ea: 
1:78265ea:         ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
1:78265ea: 
1:78265ea:         service.scheduleAtFixedRate(new Runnable() {
1:78265ea:             @Override
1:78265ea:             public void run() {
1:78265ea:                 try {
1:78265ea:                     LOG.info("Sending next KeepAlive");
1:78265ea:                     stompConnection.keepAlive();
1:78265ea:                 } catch (Exception e) {
1:78265ea:                 }
1:78265ea:             }
1:78265ea:         }, 1, 1, TimeUnit.SECONDS);
1:78265ea: 
1:78265ea:         TimeUnit.SECONDS.sleep(20);
1:78265ea: 
1:78265ea:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:78265ea:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:78265ea:         stompConnection.sendFrame(frame);
1:78265ea: 
1:78265ea:         StompFrame stompFrame = stompConnection.receive();
1:78265ea:         assertTrue(stompFrame.getAction().equals("MESSAGE"));
1:78265ea: 
1:78265ea:         service.shutdownNow();
1:78265ea:     }
1:78265ea: 
1:388c16d:     @Test(timeout = 60000)
1:acde68e:     public void testSendAfterMissingHeartbeat() throws Exception {
1:78265ea: 
1:956724e:         String connectFrame = "STOMP\n" + "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:acde68e:                               "accept-version:1.1\n" +
1:acde68e:                               "heart-beat:1000,0\n" +
1:acde68e:                               "host:localhost\n" +
1:acde68e:                               "\n" + Stomp.NULL;
1:e9bf83f: 
1:acde68e:         stompConnection.sendFrame(connectFrame);
1:acde68e:         String f = stompConnection.receiveFrame();
1:acde68e:         assertTrue(f.startsWith("CONNECTED"));
1:acde68e:         assertTrue(f.indexOf("version:1.1") >= 0);
1:acde68e:         assertTrue(f.indexOf("heart-beat:") >= 0);
1:acde68e:         assertTrue(f.indexOf("session:") >= 0);
1:acde68e:         LOG.debug("Broker sent: " + f);
1:27a74d3: 
1:388c16d:         Wait.waitFor(new Wait.Condition() {
1:388c16d: 
1:388c16d:             @Override
1:388c16d:             public boolean isSatisified() throws Exception {
1:388c16d:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:388c16d:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
1:27a74d3: 
1:27a74d3:         try {
1:b7a1883:             String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:b7a1883:                              "receipt:1\n\n" + "Hello World" + Stomp.NULL;
1:acde68e:             stompConnection.sendFrame(message);
1:b7a1883:             stompConnection.receiveFrame();
1:acde68e:             fail("SEND frame has been accepted after missing heart beat");
1:acde68e:         } catch (Exception ex) {
1:b7a1883:             LOG.info(ex.getMessage());
1:e9bf83f:         }
1:acde68e:     }
1:27a74d3: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testRejectInvalidHeartbeats1() throws Exception {
1:8aadc4b: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "heart-beat:0\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:acde68e: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("ERROR"));
1:0885c60:         assertTrue(f.indexOf("heart-beat") >= 0);
1:0885c60:         assertTrue(f.indexOf("message:") >= 0);
1:acde68e:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testRejectInvalidHeartbeats2() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "heart-beat:T,0\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("ERROR"));
1:0885c60:         assertTrue(f.indexOf("heart-beat") >= 0);
1:0885c60:         assertTrue(f.indexOf("message:") >= 0);
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testRejectInvalidHeartbeats3() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "heart-beat:100,10,50\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("ERROR"));
1:0885c60:         assertTrue(f.indexOf("heart-beat") >= 0);
1:0885c60:         assertTrue(f.indexOf("message:") >= 0);
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testSubscribeAndUnsubscribe() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60: 
1:acde68e:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:0885c60: 
1:0885c60:         stompConnection.sendFrame(message);
1:0885c60: 
1:0885c60:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:0885c60:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:78265ea:         stompConnection.sendFrame(frame);
1:0885c60: 
1:a36e618:         StompFrame stompFrame = stompConnection.receive();
1:a36e618:         assertTrue(stompFrame.getAction().equals("MESSAGE"));
1:0885c60: 
1:0885c60:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:388c16d:                 "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
1:e9bf83f:         stompConnection.sendFrame(frame);
1:0885c60: 
1:388c16d:         stompFrame = stompConnection.receive();
1:388c16d:         assertTrue(stompFrame.getAction().equals("RECEIPT"));
1:0885c60: 
1:0885c60:         stompConnection.sendFrame(message);
1:0885c60: 
1:27a74d3:         try {
1:388c16d:             frame = stompConnection.receiveFrame(2000);
1:0885c60:             LOG.info("Received frame: " + frame);
1:0885c60:             fail("No message should have been received since subscription was removed");
1:0885c60:         } catch (SocketTimeoutException e) {
1:0885c60:         }
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testSubscribeWithNoId() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60: 
1:0885c60:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:0885c60:                        "ack:auto\n\n" + Stomp.NULL;
1:8aadc4b:         stompConnection.sendFrame(frame);
1:0885c60: 
1:0885c60:         frame = stompConnection.receiveFrame();
1:0885c60:         assertTrue(frame.startsWith("ERROR"));
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testUnsubscribeWithNoId() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60: 
1:0885c60:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:388c16d:                        "receipt:1\n" + "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
8:0885c60:         stompConnection.sendFrame(frame);
1:0885c60: 
1:388c16d:         frame = stompConnection.receiveFrame();
1:388c16d:         assertTrue(frame.startsWith("RECEIPT"));
1:0885c60: 
1:0885c60:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
1:0885c60: 
1:0885c60:         frame = stompConnection.receiveFrame();
1:0885c60:         assertTrue(frame.startsWith("ERROR"));
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testAckMessageWithId() throws Exception {
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60: 
3:0885c60:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:0885c60: 
1:0885c60:         stompConnection.sendFrame(message);
1:0885c60: 
1:0885c60:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:0885c60:                        "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
1:0885c60: 
1:0885c60:         StompFrame received = stompConnection.receive();
1:0885c60:         assertTrue(received.getAction().equals("MESSAGE"));
1:0885c60: 
1:0885c60:         frame = "ACK\n" + "subscription:12345\n" + "message-id:" +
1:0885c60:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
1:0885c60: 
1:0885c60:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:0885c60:                 "id:12345\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
1:0885c60:     }
1:956724e: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testAckMessageWithNoId() throws Exception {
1:956724e: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:956724e: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60: 
1:3293579:         String message = "SEND\n" + "destination:/queue/" + getQueueName() +
1:3293579:                          "\n\n" + "Hello World" + Stomp.NULL;
1:3293579:         stompConnection.sendFrame(message);
1:0885c60: 
1:0885c60:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:3293579:                            "activemq.prefetchSize=1" + "\n" +
1:0885c60:                            "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(subscribe);
1:0885c60: 
1:0885c60:         StompFrame received = stompConnection.receive();
1:3293579:         LOG.info("Received Frame: {}", received);
1:a9a1498:         assertTrue("Expected MESSAGE but got: " + received.getAction(), received.getAction().equals("MESSAGE"));
1:3293579: 
1:0885c60:         String ack = "ACK\n" + "message-id:" +
1:0885c60:                      received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(ack);
1:0885c60: 
1:0885c60:         StompFrame error = stompConnection.receive();
1:3293579:         LOG.info("Received Frame: {}", error);
1:a9a1498:         assertTrue("Expected ERROR but got: " + error.getAction(), error.getAction().equals("ERROR"));
1:0885c60: 
1:0885c60:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:0885c60:                        "id:12345\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(unsub);
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:a7f1180:     public void testSubscribeWithWildcardSubscription() throws Exception {
1:a7f1180:         String connectFrame = "STOMP\n" +
1:a7f1180:                 "login:system\n" +
1:a7f1180:                 "passcode:manager\n" +
1:a7f1180:                 "accept-version:1.1\n" +
1:a7f1180:                 "host:localhost\n" +
1:a7f1180:                 "\n" + Stomp.NULL;
1:a7f1180:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60: 
1:a7f1180:         String message = "SEND\n" + "destination:/queue/a.b.c"  +
1:3293579:                 "\n\n" + "Hello World" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(message);
1:0885c60: 
1:a7f1180:         message = "SEND\n" + "destination:/queue/a.b"  +
1:956724e:                 "\n\n" + "Hello World" + Stomp.NULL;
1:a7f1180:         stompConnection.sendFrame(message);
1:0885c60: 
1:0885c60: 
1:a7f1180:         String frame = "SUBSCRIBE\n" + "destination:/queue/a.b.>"  + "\n" +
1:0885c60:                 "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:956724e:         stompConnection.sendFrame(frame);
1:0885c60: 
1:a7f1180:         StompFrame received = stompConnection.receive();
1:a7f1180:         assertNotNull(received);
1:0885c60: 
1:a7f1180:         received = stompConnection.receive();
1:a7f1180:         assertNotNull(received);
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:0885c60:     public void testQueueBrowerSubscription() throws Exception {
1:0885c60: 
1:0885c60:         final int MSG_COUNT = 10;
1:0885c60: 
1:0885c60:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:0885c60:                               "accept-version:1.1\n" +
1:0885c60:                               "host:localhost\n" +
1:0885c60:                               "\n" + Stomp.NULL;
1:0885c60: 
1:0885c60:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:0885c60:         String f = stompConnection.receiveFrame();
1:0885c60:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:0885c60:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60: 
1:0885c60:         for(int i = 0; i < MSG_COUNT; ++i) {
1:0885c60:             String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:0885c60:                              "receipt:0\n" +
1:0885c60:                              "\n" + "Hello World {" + i + "}" + Stomp.NULL;
1:0885c60:             stompConnection.sendFrame(message);
1:0885c60:             StompFrame repsonse = stompConnection.receive();
1:0885c60:             assertEquals("0", repsonse.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1:0885c60:         }
1:0885c60: 
1:0885c60:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:0885c60:                            "id:12345\n" + "browser:true\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(subscribe);
1:0885c60: 
1:0885c60:         for(int i = 0; i < MSG_COUNT; ++i) {
1:0885c60:             StompFrame message = stompConnection.receive();
1:0885c60:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:0885c60:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:0885c60:         }
1:0885c60: 
1:0885c60:         // We should now get a browse done message
1:0885c60:         StompFrame browseDone = stompConnection.receive();
1:0885c60:         LOG.debug("Browse Done: " + browseDone.toString());
1:0885c60:         assertEquals(Stomp.Responses.MESSAGE, browseDone.getAction());
1:0885c60:         assertEquals("12345", browseDone.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:0885c60:         assertEquals("end", browseDone.getHeaders().get(Stomp.Headers.Message.BROWSER));
1:0885c60:         assertTrue(browseDone.getHeaders().get(Stomp.Headers.Message.DESTINATION) != null);
1:0885c60: 
1:0885c60:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:388c16d:                        "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(unsub);
1:0885c60: 
1:388c16d:         String receipt = stompConnection.receiveFrame();
1:388c16d:         assertTrue(receipt.contains("RECEIPT"));
1:4c986d1: 
1:0885c60:         subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "id:12345\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(subscribe);
1:0885c60: 
1:0885c60:         for(int i = 0; i < MSG_COUNT; ++i) {
1:0885c60:             StompFrame message = stompConnection.receive();
1:0885c60:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:0885c60:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:0885c60:         }
1:0885c60: 
1:0885c60:         stompConnection.sendFrame(unsub);
1:0885c60:     }
1:0885c60: 
1:4c986d1:     @Test(timeout = 60000)
1:a36e618:     public void testSendMessageWithStandardHeadersEncoded() throws Exception {
1:0885c60: 
1:a36e618:         MessageConsumer consumer = session.createConsumer(queue);
1:0885c60: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" +
1:a36e618:                 "accept-version:1.1" + "\n\n" + Stomp.NULL;
1:956724e:         stompConnection.sendFrame(frame);
1:0885c60: 
1:0885c60:         frame = stompConnection.receiveFrame();
1:8aadc4b:         assertTrue(frame.startsWith("CONNECTED"));
1:0885c60: 
1:a36e618:         frame = "SEND\n" + "correlation-id:c1\\:\\n\\23\n" + "priority:3\n" + "type:t34:5\n" + "JMSXGroupID:abc\n" + "foo:a\\bc\n" + "bar:123\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World"
1:a36e618:                 + Stomp.NULL;
1:0885c60: 
1:27a74d3:         stompConnection.sendFrame(frame);
1:0885c60: 
1:a36e618:         TextMessage message = (TextMessage)consumer.receive(2500);
1:a36e618:         assertNotNull(message);
1:a36e618:         assertEquals("Hello World", message.getText());
1:a36e618:         assertEquals("JMSCorrelationID", "c1\\:\n\\23", message.getJMSCorrelationID());
1:a36e618:         assertEquals("getJMSType", "t34:5", message.getJMSType());
1:a36e618:         assertEquals("getJMSPriority", 3, message.getJMSPriority());
1:a36e618:         assertEquals("foo", "a\\bc", message.getStringProperty("foo"));
1:a36e618:         assertEquals("bar", "123", message.getStringProperty("bar"));
1:0885c60: 
1:a36e618:         assertEquals("JMSXGroupID", "abc", message.getStringProperty("JMSXGroupID"));
1:a36e618:         ActiveMQTextMessage amqMessage = (ActiveMQTextMessage)message;
1:a36e618:         assertEquals("GroupID", "abc", amqMessage.getGroupID());
1:8aadc4b:     }
1:8aadc4b: 
1:388c16d:     @Test(timeout = 60000)
1:8aadc4b:     public void testSendMessageWithRepeatedEntries() throws Exception {
1:8aadc4b: 
1:8aadc4b:         MessageConsumer consumer = session.createConsumer(queue);
1:8aadc4b: 
1:8aadc4b:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" +
1:8aadc4b:                 "accept-version:1.1" + "\n\n" + Stomp.NULL;
1:8aadc4b:         stompConnection.sendFrame(frame);
1:8aadc4b: 
1:8aadc4b:         frame = stompConnection.receiveFrame();
1:27a74d3:         assertTrue(frame.startsWith("CONNECTED"));
1:8aadc4b: 
1:8aadc4b:         frame = "SEND\n" +
1:27a74d3:                 "value:newest" + "\n" +
1:27a74d3:                 "value:older" + "\n" +
1:27a74d3:                 "value:oldest" + "\n" +
1:27a74d3:                 "destination:/queue/" + getQueueName() +
1:27a74d3:                 "\n\n" + "Hello World" + Stomp.NULL;
1:8aadc4b: 
1:8aadc4b:         stompConnection.sendFrame(frame);
1:8aadc4b: 
1:8aadc4b:         TextMessage message = (TextMessage)consumer.receive(2500);
1:8aadc4b:         assertNotNull(message);
1:8aadc4b:         assertEquals("Hello World", message.getText());
1:8aadc4b:         assertEquals("newest", message.getStringProperty("value"));
1:0885c60:     }
1:8aadc4b: 
1:388c16d:     @Test(timeout = 60000)
1:a36e618:     public void testSubscribeWithMessageSentWithEncodedProperties() throws Exception {
1:0885c60: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" +  "accept-version:1.1" + "\n\n" + Stomp.NULL;
1:8aadc4b:         stompConnection.sendFrame(frame);
1:0885c60: 
1:0885c60:         frame = stompConnection.receiveFrame();
2:a36e618:         assertTrue(frame.startsWith("CONNECTED"));
1:0885c60: 
1:a36e618:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:956724e:         stompConnection.sendFrame(frame);
1:0885c60: 
1:a36e618:         MessageProducer producer = session.createProducer(queue);
1:a36e618:         TextMessage message = session.createTextMessage("Hello World");
1:a36e618:         message.setStringProperty("s", "\\value:");
1:a36e618:         producer.send(message);
1:0885c60: 
3:a36e618:         frame = stompConnection.receiveFrame();
1:a36e618:         assertTrue("" + frame, frame.startsWith("MESSAGE"));
1:0885c60: 
1:a36e618:         int start =  frame.indexOf("\ns:") + 3;
1:a36e618:         final String expectedEncoded = "\\\\value\\c";
1:a36e618:         final String headerVal = frame.substring(start, start + expectedEncoded.length());
1:a36e618:         assertEquals("" + frame, expectedEncoded, headerVal);
1:0885c60:     }
1:0885c60: 
1:388c16d:     @Test(timeout = 60000)
1:e3a1fc9:     public void testNackMessage() throws Exception {
1:0885c60: 
1:e3a1fc9:         String connectFrame = "STOMP\n" +
1:956724e:                 "login:system\n" +
1:956724e:                 "passcode:manager\n" +
1:e3a1fc9:                 "accept-version:1.1\n" +
1:e3a1fc9:                 "host:localhost\n" +
1:e3a1fc9:                 "\n" + Stomp.NULL;
1:e3a1fc9:         stompConnection.sendFrame(connectFrame);
1:0885c60: 
1:a7f1180:         String f = stompConnection.receiveFrame();
1:a7f1180:         LOG.debug("Broker sent: " + f);
1:0885c60: 
1:a7f1180:         assertTrue(f.startsWith("CONNECTED"));
1:0885c60: 
1:e3a1fc9:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\npersistent:true\n\n" + "Hello World" + Stomp.NULL;
1:0885c60: 
1:a7f1180:         stompConnection.sendFrame(message);
1:0885c60: 
1:e3a1fc9:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:bd86617:                 "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
2:a7f1180: 
1:e3a1fc9:         StompFrame received = stompConnection.receive();
1:0885c60:         assertTrue(received.getAction().equals("MESSAGE"));
1:a7f1180: 
1:e3a1fc9:         // nack it
1:e3a1fc9:         frame = "NACK\n" + "subscription:12345\n" + "message-id:" +
1:e3a1fc9:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
1:a7f1180: 
1:e3a1fc9:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:0885c60:                 "id:12345\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
1:a7f1180: 
1:e3a1fc9:         //consume it from dlq
1:a7f1180: 
1:e3a1fc9:         frame = "SUBSCRIBE\n" + "destination:/queue/ActiveMQ.DLQ\n" +
2:e3a1fc9:                 "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
1:e3a1fc9:         StompFrame receivedDLQ = stompConnection.receive(200);
1:e3a1fc9:         assertEquals(receivedDLQ.getHeaders().get("message-id"), received.getHeaders().get("message-id"));
1:a7f1180: 
1:e3a1fc9:         frame = "ACK\n" + "subscription:12345\n" + "message-id:" +
1:e3a1fc9:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
1:a7f1180: 
1:e3a1fc9:         frame = "UNSUBSCRIBE\n" + "destination:/queue/ActiveMQ.DLQ\n" +
1:0885c60:                 "id:12345\n\n" + Stomp.NULL;
1:0885c60:         stompConnection.sendFrame(frame);
1:0885c60:     }
1:a7f1180: 
1:388c16d:     @Test(timeout = 60000)
1:956724e:     public void testHeaderValuesAreNotWSTrimmed() throws Exception {
1:a54fa4b:         stompConnection.setVersion(Stomp.V1_1);
1:956724e:         String connectFrame = "STOMP\n" +
1:956724e:                               "login:system\n" +
1:956724e:                               "passcode:manager\n" +
1:956724e:                               "accept-version:1.1\n" +
1:956724e:                               "host:localhost\n" +
1:956724e:                               "\n" + Stomp.NULL;
1:956724e:         stompConnection.sendFrame(connectFrame);
1:27a74d3: 
1:956724e:         String f = stompConnection.receiveFrame();
1:956724e:         LOG.debug("Broker sent: " + f);
1:27a74d3: 
1:956724e:         assertTrue(f.startsWith("CONNECTED"));
1:956724e: 
1:956724e:         String message = "SEND\n" + "destination:/queue/" + getQueueName() +
1:956724e:                          "\ntest1: value" +
1:956724e:                          "\ntest2:value " +
1:956724e:                          "\ntest3: value " +
1:8aadc4b:                          "\n\n" + "Hello World" + Stomp.NULL;
1:956724e: 
1:956724e:         stompConnection.sendFrame(message);
1:956724e: 
1:956724e:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:956724e:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:956724e: 
1:956724e:         StompFrame received = stompConnection.receive();
1:956724e:         assertTrue(received.getAction().equals("MESSAGE"));
1:956724e: 
1:956724e:         assertEquals(" value", received.getHeaders().get("test1"));
1:956724e:         assertEquals("value ", received.getHeaders().get("test2"));
1:956724e:         assertEquals(" value ", received.getHeaders().get("test3"));
1:956724e: 
1:956724e:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:956724e:                 "id:12345\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:956724e:     }
1:956724e: 
1:388c16d:     @Test(timeout = 60000)
1:27a74d3:     public void testDurableSubAndUnSubOnTwoTopics() throws Exception {
1:27a74d3:         stompConnection.setVersion(Stomp.V1_1);
1:27a74d3: 
2:27a74d3:         String domain = "org.apache.activemq";
1:26d7070:         ObjectName brokerName = new ObjectName(domain + ":type=Broker,brokerName=localhost");
1:9988a3c: 
1:1236bbf:         BrokerViewMBean view = (BrokerViewMBean)brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1:27a74d3: 
1:27a74d3:         String connectFrame = "STOMP\n" +
1:27a74d3:                 "login:system\n" + "passcode:manager\n" + "accept-version:1.1\n" +
1:27a74d3:                 "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(connectFrame);
1:27a74d3: 
1:27a74d3:         String frame = stompConnection.receiveFrame();
1:27a74d3:         LOG.debug("Broker sent: " + frame);
1:27a74d3: 
1:27a74d3:         assertTrue(frame.startsWith("CONNECTED"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:27a74d3: 
1:27a74d3:         // subscribe to first destination durably
1:27a74d3:         frame = "SUBSCRIBE\n" +
1:27a74d3:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:27a74d3:                 "ack:auto\n" + "receipt:1\n" + "id:durablesub-1\n" +
1:27a74d3:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:27a74d3: 
1:27a74d3:         StompFrame receipt = stompConnection.receive();
1:27a74d3:         LOG.debug("Broker sent: " + receipt);
1:27a74d3:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:27a74d3:         assertEquals("1", receipt.getHeaders().get("receipt-id"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1:27a74d3: 
1:27a74d3:         // subscribe to second destination durably
1:27a74d3:         frame = "SUBSCRIBE\n" +
1:27a74d3:                 "destination:/topic/" + getQueueName() + "2" + "\n" +
1:27a74d3:                 "ack:auto\n" + "receipt:2\n" + "id:durablesub-2\n" +
1:27a74d3:                 "activemq.subscriptionName:test2\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:27a74d3: 
1:27a74d3:         receipt = stompConnection.receive();
1:27a74d3:         LOG.debug("Broker sent: " + receipt);
1:27a74d3:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:27a74d3:         assertEquals("2", receipt.getHeaders().get("receipt-id"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 2);
1:27a74d3: 
1:27a74d3:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:388c16d:         Wait.waitFor(new Wait.Condition() {
1:388c16d: 
1:388c16d:             @Override
1:388c16d:             public boolean isSatisified() throws Exception {
1:388c16d:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:388c16d:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
1:27a74d3: 
1:27a74d3:         // reconnect and send some messages to the offline subscribers and then try to get
1:27a74d3:         // them after subscribing again.
1:27a74d3:         stompConnect();
1:27a74d3:         stompConnection.sendFrame(connectFrame);
1:27a74d3:         frame = stompConnection.receiveFrame();
1:27a74d3:         LOG.debug("Broker sent: " + frame);
1:27a74d3:         assertTrue(frame.startsWith("CONNECTED"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:27a74d3:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 2);
1:27a74d3: 
1:27a74d3:         // unsubscribe from topic 1
1:27a74d3:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:27a74d3:                 "id:durablesub-1\n" + "receipt:3\n" +
1:27a74d3:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:9988a3c:         stompConnection.sendFrame(frame);
1:27a74d3:         receipt = stompConnection.receive();
1:27a74d3:         LOG.debug("Broker sent: " + frame);
1:27a74d3:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:27a74d3:         assertEquals("3", receipt.getHeaders().get("receipt-id"));
1:27a74d3: 
1:27a74d3:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 1);
1:27a74d3: 
1:27a74d3:         // unsubscribe from topic 2
1:27a74d3:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "2\n" +
1:27a74d3:                 "id:durablesub-2\n" + "receipt:4\n" +
1:27a74d3:                 "activemq.subscriptionName:test2\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:27a74d3:         receipt = stompConnection.receive();
1:27a74d3:         LOG.debug("Broker sent: " + frame);
1:27a74d3:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:27a74d3:         assertEquals("4", receipt.getHeaders().get("receipt-id"));
1:27a74d3: 
1:27a74d3:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1:27a74d3:     }
1:bd86617: 
1:bd86617:     @Test(timeout = 60000)
1:9988a3c:     public void testDurableSubAndUnSubFlow() throws Exception {
1:9988a3c:         stompConnection.setVersion(Stomp.V1_1);
1:9988a3c: 
1:9988a3c:         String domain = "org.apache.activemq";
1:9988a3c:         ObjectName brokerName = new ObjectName(domain + ":type=Broker,brokerName=localhost");
1:9988a3c: 
1:9988a3c:         BrokerViewMBean view = (BrokerViewMBean)brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1:9988a3c: 
1:9988a3c:         String connectFrame = "STOMP\n" +
1:9988a3c:                 "login:system\n" + "passcode:manager\n" + "accept-version:1.1\n" +
1:9988a3c:                 "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:9988a3c:         stompConnection.sendFrame(connectFrame);
1:9988a3c: 
1:9988a3c:         String frame = stompConnection.receiveFrame();
1:9988a3c:         LOG.debug("Broker sent: " + frame);
1:9988a3c: 
1:9988a3c:         assertTrue(frame.startsWith("CONNECTED"));
1:9988a3c:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:9988a3c: 
1:9988a3c:         // subscribe to first destination durably
1:9988a3c:         frame = "SUBSCRIBE\n" +
1:9988a3c:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:9988a3c:                 "ack:auto\n" + "receipt:1\n" + "id:durablesub-1\n" +
1:9988a3c:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:9988a3c:         stompConnection.sendFrame(frame);
1:9988a3c: 
1:9988a3c:         StompFrame receipt = stompConnection.receive();
1:9988a3c:         LOG.debug("Broker sent: " + receipt);
1:9988a3c:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:9988a3c:         assertEquals("1", receipt.getHeaders().get("receipt-id"));
1:9988a3c:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1:27a74d3: 
1:9988a3c:         // attempt to remove the durable subscription while there is an active subscription
1:9988a3c:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:9988a3c:                 "id:durablesub-1\n" + "receipt:3\n" +
1:9988a3c:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:9988a3c:         stompConnection.sendFrame(frame);
1:9988a3c:         receipt = stompConnection.receive();
1:9988a3c:         LOG.debug("Broker sent: " + receipt);
1:9988a3c:         assertTrue(receipt.getAction().startsWith("ERROR"));
1:9988a3c:         assertEquals("3", receipt.getHeaders().get("receipt-id"));
1:9988a3c: 
1:9988a3c:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1:9988a3c:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1:9988a3c: 
1:9988a3c:         // attempt to remove the subscriber leaving the durable sub in place.
1:9988a3c:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:9988a3c:                 "id:durablesub-1\n" + "receipt:4\n\n" + Stomp.NULL;
1:9988a3c:         stompConnection.sendFrame(frame);
1:9988a3c:         receipt = stompConnection.receive();
1:9988a3c:         LOG.debug("Broker sent: " + receipt);
1:9988a3c:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:9988a3c:         assertEquals("4", receipt.getHeaders().get("receipt-id"));
1:9988a3c: 
1:9988a3c:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 1);
1:9988a3c:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:9988a3c: 
1:9988a3c:         // attempt to remove the durable subscription which should succeed since there are no
1:9988a3c:         // active durable subscribers
1:9988a3c:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:9988a3c:                 "id:durablesub-1\n" + "receipt:5\n" +
1:9988a3c:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:9988a3c:         stompConnection.sendFrame(frame);
1:9988a3c:         receipt = stompConnection.receive();
1:9988a3c:         LOG.debug("Broker sent: " + receipt);
1:9988a3c:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:9988a3c:         assertEquals("5", receipt.getHeaders().get("receipt-id"));
1:9988a3c: 
1:9988a3c:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1:9988a3c:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:9988a3c:     }
1:9988a3c: 
1:388c16d:     @Test(timeout = 60000)
1:27a74d3:     public void testMultipleDurableSubsWithOfflineMessages() throws Exception {
1:27a74d3:         stompConnection.setVersion(Stomp.V1_1);
1:9988a3c: 
1:388c16d:         final BrokerViewMBean view = getProxyToBroker();
1:27a74d3: 
1:27a74d3:         String connectFrame = "STOMP\n" + "login:system\n" + "passcode:manager\n" +
1:27a74d3:                 "accept-version:1.1\n" + "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(connectFrame);
1:bd86617: 
1:27a74d3:         String frame = stompConnection.receiveFrame();
1:27a74d3:         LOG.debug("Broker sent: " + frame);
1:27a74d3: 
1:27a74d3:         assertTrue(frame.startsWith("CONNECTED"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:27a74d3: 
1:27a74d3:         // subscribe to first destination durably
1:27a74d3:         frame = "SUBSCRIBE\n" +
1:27a74d3:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:27a74d3:                 "ack:auto\n" + "receipt:1\n" + "id:durablesub-1\n" +
1:27a74d3:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:27a74d3: 
1:27a74d3:         StompFrame receipt = stompConnection.receive();
1:27a74d3:         LOG.debug("Broker sent: " + receipt);
1:27a74d3:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:27a74d3:         assertEquals("1", receipt.getHeaders().get("receipt-id"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1:27a74d3: 
1:27a74d3:         // subscribe to second destination durably
1:27a74d3:         frame = "SUBSCRIBE\n" +
1:27a74d3:                 "destination:/topic/" + getQueueName() + "2" + "\n" +
1:27a74d3:                 "ack:auto\n" + "receipt:2\n" + "id:durablesub-2\n" +
1:27a74d3:                 "activemq.subscriptionName:test2\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:27a74d3: 
1:27a74d3:         receipt = stompConnection.receive();
1:27a74d3:         LOG.debug("Broker sent: " + receipt);
1:27a74d3:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:27a74d3:         assertEquals("2", receipt.getHeaders().get("receipt-id"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 2);
1:27a74d3: 
1:27a74d3:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:388c16d:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:388c16d: 
1:388c16d:             @Override
1:388c16d:             public boolean isSatisified() throws Exception {
1:388c16d:                 return view.getCurrentConnectionsCount() == 1;
1:388c16d:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25)));
1:27a74d3: 
1:27a74d3:         // reconnect and send some messages to the offline subscribers and then try to get
1:27a74d3:         // them after subscribing again.
1:27a74d3:         stompConnect();
1:27a74d3:         stompConnection.sendFrame(connectFrame);
1:27a74d3:         frame = stompConnection.receiveFrame();
1:27a74d3:         LOG.debug("Broker sent: " + frame);
1:388c16d:         assertTrue(frame.contains("CONNECTED"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:27a74d3:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 2);
1:27a74d3: 
1:27a74d3:         frame = "SEND\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:27a74d3:                 "receipt:10\n" + "\n" + "Hello World 1" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:27a74d3:         receipt = stompConnection.receive();
1:27a74d3:         assertEquals("10", receipt.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1:27a74d3: 
1:27a74d3:         frame = "SEND\n" + "destination:/topic/" + getQueueName() + "2\n" +
1:27a74d3:                 "receipt:11\n" + "\n" + "Hello World 2" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:27a74d3:         receipt = stompConnection.receive();
1:27a74d3:         assertEquals("11", receipt.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1:27a74d3: 
1:27a74d3:         // subscribe to first destination durably
1:27a74d3:         frame = "SUBSCRIBE\n" +
1:27a74d3:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:27a74d3:                 "ack:auto\n" + "receipt:3\n" + "id:durablesub-1\n" +
1:27a74d3:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:27a74d3: 
1:27a74d3:         receipt = stompConnection.receive();
1:27a74d3:         LOG.debug("Broker sent: " + receipt);
1:27a74d3:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:27a74d3:         assertEquals("3", receipt.getHeaders().get("receipt-id"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1:27a74d3: 
1:27a74d3:         StompFrame message = stompConnection.receive();
1:27a74d3:         assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:27a74d3:         assertEquals("durablesub-1", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:27a74d3: 
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1:27a74d3:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 1);
1:27a74d3: 
1:27a74d3:         // subscribe to second destination durably
1:27a74d3:         frame = "SUBSCRIBE\n" +
1:27a74d3:                 "destination:/topic/" + getQueueName() + "2" + "\n" +
1:27a74d3:                 "ack:auto\n" + "receipt:4\n" + "id:durablesub-2\n" +
1:27a74d3:                 "activemq.subscriptionName:test2\n\n" + Stomp.NULL;
1:27a74d3:         stompConnection.sendFrame(frame);
1:27a74d3: 
1:27a74d3:         receipt = stompConnection.receive();
1:27a74d3:         LOG.debug("Broker sent: " + receipt);
1:27a74d3:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:27a74d3:         assertEquals("4", receipt.getHeaders().get("receipt-id"));
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 2);
1:27a74d3: 
1:27a74d3:         message = stompConnection.receive();
1:27a74d3:         assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:27a74d3:         assertEquals("durablesub-2", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:27a74d3: 
1:27a74d3:         assertEquals(view.getDurableTopicSubscribers().length, 2);
1:27a74d3:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1:27a74d3:     }
1:27a74d3: 
1:388c16d:     @Test(timeout = 60000)
1:e83bb6d:     public void testTransactionRollbackAllowsSecondAckOutsideTXClientAck() throws Exception {
1:e83bb6d:         doTestTransactionRollbackAllowsSecondAckOutsideTXClientAck("client");
1:e83bb6d:     }
1:e83bb6d: 
1:e83bb6d:     @Test(timeout = 60000)
1:e83bb6d:     public void testTransactionRollbackAllowsSecondAckOutsideTXClientIndividualAck() throws Exception {
1:e83bb6d:         doTestTransactionRollbackAllowsSecondAckOutsideTXClientAck("client-individual");
1:e83bb6d:     }
1:e83bb6d: 
1:e83bb6d:     public void doTestTransactionRollbackAllowsSecondAckOutsideTXClientAck(String ackMode) throws Exception {
1:e83bb6d: 
1:bd86617:         MessageProducer producer = session.createProducer(queue);
1:bd86617:         producer.send(session.createTextMessage("Hello"));
1:bd86617:         producer.close();
1:bd86617: 
1:bd86617:         String frame = "STOMP\n" + "login:system\n" + "passcode:manager\n" +
1:bd86617:             "accept-version:1.1\n" + "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:bd86617:         stompConnection.sendFrame(frame);
1:4c986d1: 
1:bd86617:         String f = stompConnection.receiveFrame();
1:bd86617:         assertTrue(f.startsWith("CONNECTED"));
1:bd86617: 
1:8417ce5:         final QueueViewMBean queueView = getProxyToQueue(getQueueName());
1:bd86617:         assertEquals(1, queueView.getQueueSize());
1:bd86617: 
1:bd86617:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:bd86617:         stompConnection.sendFrame(frame);
1:bd86617: 
1:bd86617:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:e83bb6d:             "id:12345\n" + "ack:" + ackMode + "\n\n" + Stomp.NULL;
1:bd86617:         stompConnection.sendFrame(frame);
1:bd86617: 
1:bd86617:         StompFrame received = stompConnection.receive();
1:bd86617:         assertTrue(received.getAction().equals("MESSAGE"));
1:bd86617: 
1:bd86617:         // ack it in the TX then abort
1:bd86617:         frame = "ACK\n" + "transaction: tx1\n" + "subscription:12345\n" + "message-id:" +
1:bd86617:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:bd86617:         stompConnection.sendFrame(frame);
1:bd86617: 
1:bd86617:         // rollback first message
1:bd86617:         frame = "ABORT\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:bd86617:         stompConnection.sendFrame(frame);
1:bd86617: 
1:bd86617:         assertEquals(1, queueView.getQueueSize());
1:bd86617: 
1:bd86617:         // ack it outside the TX and it should be really ack'd
1:bd86617:         frame = "ACK\n" + "subscription:12345\n" + "message-id:" +
1:bd86617:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:bd86617:         stompConnection.sendFrame(frame);
1:bd86617: 
1:bd86617:         assertTrue("Message not ack'd", Wait.waitFor(new Wait.Condition() {
1:bd86617: 
1:bd86617:             @Override
1:bd86617:             public boolean isSatisified() throws Exception {
1:bd86617:                 return queueView.getQueueSize() == 0;
1:bd86617:             }
1:bd86617:         }));
1:bd86617: 
1:bd86617:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:bd86617:             "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
1:bd86617:         stompConnection.sendFrame(unsub);
1:bd86617: 
1:bd86617:         String receipt = stompConnection.receiveFrame();
1:bd86617:         assertTrue(receipt.contains("RECEIPT"));
1:bd86617:     }
1:27a74d3: 
1:388c16d:     @Test(timeout = 60000)
1:4c986d1:     public void testAckMessagesInTransactionOutOfOrderWithTXClientAck() throws Exception {
1:4c986d1:         doTestAckMessagesInTransactionOutOfOrderWithTXClientAck("client");
1:4c986d1:     }
1:4c986d1: 
1:4c986d1:     @Test(timeout = 60000)
1:4c986d1:     public void testAckMessagesInTransactionOutOfOrderWithTXClientIndividualAck() throws Exception {
1:4c986d1:         doTestAckMessagesInTransactionOutOfOrderWithTXClientAck("client-individual");
1:4c986d1:     }
1:4c986d1: 
1:4c986d1:     public void doTestAckMessagesInTransactionOutOfOrderWithTXClientAck(String ackMode) throws Exception {
1:4c986d1:         MessageProducer producer = session.createProducer(queue);
1:4c986d1:         producer.send(session.createTextMessage("Message 1"));
1:4c986d1:         producer.send(session.createTextMessage("Message 2"));
1:4c986d1:         producer.close();
1:4c986d1: 
1:4c986d1:         String frame = "STOMP\n" + "login:system\n" + "passcode:manager\n" +
1:4c986d1:             "accept-version:1.1\n" + "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:4c986d1:         stompConnection.sendFrame(frame);
1:4c986d1: 
1:4c986d1:         String f = stompConnection.receiveFrame();
1:4c986d1:         assertTrue(f.startsWith("CONNECTED"));
1:4c986d1: 
1:4c986d1:         final QueueViewMBean queueView = getProxyToQueue(getQueueName());
1:4c986d1:         assertEquals(2, queueView.getQueueSize());
1:4c986d1: 
1:4c986d1:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:4c986d1:         stompConnection.sendFrame(frame);
1:4c986d1: 
1:4c986d1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:4c986d1:             "id:12345\n" + "ack:" + ackMode + "\n\n" + Stomp.NULL;
1:4c986d1:         stompConnection.sendFrame(frame);
1:4c986d1: 
1:4c986d1:         StompFrame receivedFirst = stompConnection.receive();
1:4c986d1:         assertTrue(receivedFirst.getAction().equals("MESSAGE"));
1:4c986d1:         StompFrame receivedSecond = stompConnection.receive();
1:4c986d1:         assertTrue(receivedSecond.getAction().equals("MESSAGE"));
1:4c986d1: 
1:4c986d1:         // ack second, then first message
1:4c986d1:         frame = "ACK\n" + "transaction: tx1\n" + "subscription:12345\n" + "message-id:" +
1:4c986d1:                 receivedSecond.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:4c986d1:         stompConnection.sendFrame(frame);
1:4c986d1:         frame = "ACK\n" + "transaction: tx1\n" + "subscription:12345\n" + "message-id:" +
1:4c986d1:                 receivedFirst.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:4c986d1:         stompConnection.sendFrame(frame);
1:4c986d1: 
1:4c986d1:         // commit transaction
1:4c986d1:         frame = "COMMIT\n" + "receipt:1\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:4c986d1:         stompConnection.sendFrame(frame);
1:4c986d1: 
1:4c986d1:         String receipt = stompConnection.receiveFrame();
1:4c986d1:         LOG.debug("Receipt Frame = {}", receipt);
1:4c986d1:         assertTrue(receipt.contains("RECEIPT"));
1:4c986d1: 
1:4c986d1:         assertTrue("Message not ack'd", Wait.waitFor(new Wait.Condition() {
1:4c986d1:             @Override
1:4c986d1:             public boolean isSatisified() throws Exception {
1:4c986d1:                 return queueView.getQueueSize() == 0;
1:4c986d1:             }
1:4c986d1:         }));
1:4c986d1: 
1:4c986d1:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:4c986d1:             "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
1:4c986d1:         stompConnection.sendFrame(unsub);
1:a7f1180: 
1:4c986d1:         receipt = stompConnection.receiveFrame();
1:4c986d1:         assertTrue(receipt.contains("RECEIPT"));
1:4c986d1:     }
1:0885c60: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4c986d1
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testAckMessagesInTransactionOutOfOrderWithTXClientAck() throws Exception {
1:         doTestAckMessagesInTransactionOutOfOrderWithTXClientAck("client");
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testAckMessagesInTransactionOutOfOrderWithTXClientIndividualAck() throws Exception {
1:         doTestAckMessagesInTransactionOutOfOrderWithTXClientAck("client-individual");
1:     }
1: 
1:     public void doTestAckMessagesInTransactionOutOfOrderWithTXClientAck(String ackMode) throws Exception {
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Message 1"));
1:         producer.send(session.createTextMessage("Message 2"));
1:         producer.close();
1: 
1:         String frame = "STOMP\n" + "login:system\n" + "passcode:manager\n" +
1:             "accept-version:1.1\n" + "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         final QueueViewMBean queueView = getProxyToQueue(getQueueName());
1:         assertEquals(2, queueView.getQueueSize());
1: 
1:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:             "id:12345\n" + "ack:" + ackMode + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame receivedFirst = stompConnection.receive();
1:         assertTrue(receivedFirst.getAction().equals("MESSAGE"));
1:         StompFrame receivedSecond = stompConnection.receive();
1:         assertTrue(receivedSecond.getAction().equals("MESSAGE"));
1: 
1:         // ack second, then first message
1:         frame = "ACK\n" + "transaction: tx1\n" + "subscription:12345\n" + "message-id:" +
1:                 receivedSecond.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         frame = "ACK\n" + "transaction: tx1\n" + "subscription:12345\n" + "message-id:" +
1:                 receivedFirst.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // commit transaction
1:         frame = "COMMIT\n" + "receipt:1\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         String receipt = stompConnection.receiveFrame();
1:         LOG.debug("Receipt Frame = {}", receipt);
1:         assertTrue(receipt.contains("RECEIPT"));
1: 
1:         assertTrue("Message not ack'd", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getQueueSize() == 0;
1:             }
1:         }));
1: 
1:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:             "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(unsub);
1: 
1:         receipt = stompConnection.receiveFrame();
1:         assertTrue(receipt.contains("RECEIPT"));
1:     }
commit:8417ce5
/////////////////////////////////////////////////////////////////////////
1:         final QueueViewMBean queueView = getProxyToQueue(getQueueName());
commit:e83bb6d
/////////////////////////////////////////////////////////////////////////
1:     public void testTransactionRollbackAllowsSecondAckOutsideTXClientAck() throws Exception {
1:         doTestTransactionRollbackAllowsSecondAckOutsideTXClientAck("client");
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testTransactionRollbackAllowsSecondAckOutsideTXClientIndividualAck() throws Exception {
1:         doTestTransactionRollbackAllowsSecondAckOutsideTXClientAck("client-individual");
1:     }
1: 
1:     public void doTestTransactionRollbackAllowsSecondAckOutsideTXClientAck(String ackMode) throws Exception {
1: 
/////////////////////////////////////////////////////////////////////////
1:             "id:12345\n" + "ack:" + ackMode + "\n\n" + Stomp.NULL;
commit:bd86617
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
0:     public void testTransactionRollbackAllowsSecondAckOutsideTX() throws Exception {
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Hello"));
1:         producer.close();
1: 
1:         String frame = "STOMP\n" + "login:system\n" + "passcode:manager\n" +
1:             "accept-version:1.1\n" + "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
0:         QueueViewMBean queueView = getProxyToQueue(getQueueName());
1:         assertEquals(1, queueView.getQueueSize());
1: 
1:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:             "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1: 
1:         // ack it in the TX then abort
1:         frame = "ACK\n" + "transaction: tx1\n" + "subscription:12345\n" + "message-id:" +
1:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // rollback first message
1:         frame = "ABORT\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         assertEquals(1, queueView.getQueueSize());
1: 
1:         // ack it outside the TX and it should be really ack'd
1:         frame = "ACK\n" + "subscription:12345\n" + "message-id:" +
1:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         assertTrue("Message not ack'd", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getQueueSize() == 0;
1:             }
1:         }));
1: 
1:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:             "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(unsub);
1: 
1:         String receipt = stompConnection.receiveFrame();
1:         assertTrue(receipt.contains("RECEIPT"));
1:     }
commit:2a10e99
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void tearDown() throws Exception {
1:         try {
1:             if (connection != null) {
1:                 connection.close();
1:                 connection = null;
1:             }
1:         } catch (Exception ex) {}
1: 
1:         super.tearDown();
1:     }
1: 
commit:a9a1498
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Expected MESSAGE but got: " + received.getAction(), received.getAction().equals("MESSAGE"));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Expected ERROR but got: " + error.getAction(), error.getAction().equals("ERROR"));
commit:540a66b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:388c16d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:                 "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
1:         stompFrame = stompConnection.receive();
1:         assertTrue(stompFrame.getAction().equals("RECEIPT"));
1:             frame = stompConnection.receiveFrame(2000);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:                        "receipt:1\n" + "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("RECEIPT"));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:                        "receipt:1\n" + "id:12345\n\n" + Stomp.NULL;
1:         String receipt = stompConnection.receiveFrame();
1:         assertTrue(receipt.contains("RECEIPT"));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         final BrokerViewMBean view = getProxyToBroker();
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getCurrentConnectionsCount() == 1;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25)));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(frame.contains("CONNECTED"));
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:9988a3c
/////////////////////////////////////////////////////////////////////////
1:     public void testDurableSubAndUnSubFlow() throws Exception {
1:         stompConnection.setVersion(Stomp.V1_1);
1: 
1:         String domain = "org.apache.activemq";
1:         ObjectName brokerName = new ObjectName(domain + ":type=Broker,brokerName=localhost");
1: 
1:         BrokerViewMBean view = (BrokerViewMBean)brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1: 
1:         String connectFrame = "STOMP\n" +
1:                 "login:system\n" + "passcode:manager\n" + "accept-version:1.1\n" +
1:                 "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + frame);
1: 
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1: 
1:         // subscribe to first destination durably
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:                 "ack:auto\n" + "receipt:1\n" + "id:durablesub-1\n" +
1:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("1", receipt.getHeaders().get("receipt-id"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1: 
1:         // attempt to remove the durable subscription while there is an active subscription
1:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:                 "id:durablesub-1\n" + "receipt:3\n" +
1:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("ERROR"));
1:         assertEquals("3", receipt.getHeaders().get("receipt-id"));
1: 
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1: 
1:         // attempt to remove the subscriber leaving the durable sub in place.
1:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:                 "id:durablesub-1\n" + "receipt:4\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("4", receipt.getHeaders().get("receipt-id"));
1: 
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 1);
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1: 
1:         // attempt to remove the durable subscription which should succeed since there are no
1:         // active durable subscribers
1:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:                 "id:durablesub-1\n" + "receipt:5\n" +
1:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("5", receipt.getHeaders().get("receipt-id"));
1: 
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
0:     @Test
commit:7d90776
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3293579
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() +
1:                          "\n\n" + "Hello World" + Stomp.NULL;
1:                            "activemq.prefetchSize=1" + "\n" +
1:         LOG.info("Received Frame: {}", received);
0:         message = "SEND\n" + "destination:/queue/" + getQueueName() +
1:                 "\n\n" + "Hello World" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
1:         LOG.info("Received Frame: {}", error);
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.Test;
1: public class Stomp11Test extends StompTestSupport {
1:     public void setUp() throws Exception {
1:         super.setUp();
0:     protected void addStompConnector() throws Exception {
0:         TransportConnector connector = brokerService.addConnector("stomp://0.0.0.0:"+port);
0:         port = connector.getConnectUri().getPort();
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:         BrokerViewMBean view = (BrokerViewMBean)brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
0:     @Test
0:         BrokerViewMBean view = (BrokerViewMBean)brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
commit:78265ea
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.ScheduledExecutorService;
/////////////////////////////////////////////////////////////////////////
1:     public void testHeartbeatsKeepsConnectionOpen() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:2000,0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(connectFrame);
1:         String f = stompConnection.receiveFrame();
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.1") >= 0);
1:         assertTrue(f.indexOf("heart-beat:") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1:         LOG.debug("Broker sent: " + f);
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
1:         ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
1: 
1:         service.scheduleAtFixedRate(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     LOG.info("Sending next KeepAlive");
1:                     stompConnection.keepAlive();
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         }, 1, 1, TimeUnit.SECONDS);
1: 
1:         TimeUnit.SECONDS.sleep(20);
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame stompFrame = stompConnection.receive();
1:         assertTrue(stompFrame.getAction().equals("MESSAGE"));
1: 
1:         service.shutdownNow();
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
commit:e9bf83f
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectedNeverEncoded() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "host:localhost\n" +
1:                               "request-id:1\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("response-id:1") >= 0);
1:         assertTrue(f.indexOf("version:1.1") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1: 
1:         int sessionHeader = f.indexOf("session:");
1:         f = f.substring(sessionHeader + "session:".length());
1: 
1:         LOG.info("session header follows: " + f);
1:         assertTrue(f.startsWith("ID:"));
1: 
0:         String frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
commit:27a74d3
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
/////////////////////////////////////////////////////////////////////////
1:                 "value:newest" + "\n" +
1:                 "value:older" + "\n" +
1:                 "value:oldest" + "\n" +
1:                 "destination:/queue/" + getQueueName() +
1:                 "\n\n" + "Hello World" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testDurableSubAndUnSubOnTwoTopics() throws Exception {
1:         stompConnection.setVersion(Stomp.V1_1);
1: 
1:         String domain = "org.apache.activemq";
0:         ObjectName brokerName = new ObjectName(domain + ":Type=Broker,BrokerName=localhost");
1: 
0:         BrokerViewMBean view = (BrokerViewMBean)broker.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1: 
1:         String connectFrame = "STOMP\n" +
1:                 "login:system\n" + "passcode:manager\n" + "accept-version:1.1\n" +
1:                 "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + frame);
1: 
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1: 
1:         // subscribe to first destination durably
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:                 "ack:auto\n" + "receipt:1\n" + "id:durablesub-1\n" +
1:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("1", receipt.getHeaders().get("receipt-id"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1: 
1:         // subscribe to second destination durably
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/topic/" + getQueueName() + "2" + "\n" +
1:                 "ack:auto\n" + "receipt:2\n" + "id:durablesub-2\n" +
1:                 "activemq.subscriptionName:test2\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("2", receipt.getHeaders().get("receipt-id"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 2);
1: 
1:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         try {
0:             Thread.sleep(400);
0:         } catch (InterruptedException e){}
1: 
1:         // reconnect and send some messages to the offline subscribers and then try to get
1:         // them after subscribing again.
1:         stompConnect();
1:         stompConnection.sendFrame(connectFrame);
1:         frame = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + frame);
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 2);
1: 
1:         // unsubscribe from topic 1
1:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:                 "id:durablesub-1\n" + "receipt:3\n" +
1:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + frame);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("3", receipt.getHeaders().get("receipt-id"));
1: 
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 1);
1: 
1:         // unsubscribe from topic 2
1:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "2\n" +
1:                 "id:durablesub-2\n" + "receipt:4\n" +
1:                 "activemq.subscriptionName:test2\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + frame);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("4", receipt.getHeaders().get("receipt-id"));
1: 
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testMultipleDurableSubsWithOfflineMessages() throws Exception {
1:         stompConnection.setVersion(Stomp.V1_1);
1: 
1:         String domain = "org.apache.activemq";
0:         ObjectName brokerName = new ObjectName(domain + ":Type=Broker,BrokerName=localhost");
1: 
0:         BrokerViewMBean view = (BrokerViewMBean)broker.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1: 
1:         String connectFrame = "STOMP\n" + "login:system\n" + "passcode:manager\n" +
1:                 "accept-version:1.1\n" + "host:localhost\n" + "client-id:test\n" + "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String frame = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + frame);
1: 
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1: 
1:         // subscribe to first destination durably
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:                 "ack:auto\n" + "receipt:1\n" + "id:durablesub-1\n" +
1:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("1", receipt.getHeaders().get("receipt-id"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1: 
1:         // subscribe to second destination durably
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/topic/" + getQueueName() + "2" + "\n" +
1:                 "ack:auto\n" + "receipt:2\n" + "id:durablesub-2\n" +
1:                 "activemq.subscriptionName:test2\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("2", receipt.getHeaders().get("receipt-id"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 2);
1: 
1:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         try {
0:             Thread.sleep(400);
0:         } catch (InterruptedException e){}
1: 
1:         // reconnect and send some messages to the offline subscribers and then try to get
1:         // them after subscribing again.
1:         stompConnect();
1:         stompConnection.sendFrame(connectFrame);
1:         frame = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + frame);
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 2);
1: 
1:         frame = "SEND\n" + "destination:/topic/" + getQueueName() + "1\n" +
1:                 "receipt:10\n" + "\n" + "Hello World 1" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         receipt = stompConnection.receive();
1:         assertEquals("10", receipt.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1: 
1:         frame = "SEND\n" + "destination:/topic/" + getQueueName() + "2\n" +
1:                 "receipt:11\n" + "\n" + "Hello World 2" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         receipt = stompConnection.receive();
1:         assertEquals("11", receipt.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1: 
1:         // subscribe to first destination durably
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/topic/" + getQueueName() + "1" + "\n" +
1:                 "ack:auto\n" + "receipt:3\n" + "id:durablesub-1\n" +
1:                 "activemq.subscriptionName:test1\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("3", receipt.getHeaders().get("receipt-id"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1: 
1:         StompFrame message = stompConnection.receive();
1:         assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:         assertEquals("durablesub-1", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1: 
1:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 1);
1: 
1:         // subscribe to second destination durably
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/topic/" + getQueueName() + "2" + "\n" +
1:                 "ack:auto\n" + "receipt:4\n" + "id:durablesub-2\n" +
1:                 "activemq.subscriptionName:test2\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         receipt = stompConnection.receive();
1:         LOG.debug("Broker sent: " + receipt);
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("4", receipt.getHeaders().get("receipt-id"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 2);
1: 
1:         message = stompConnection.receive();
1:         assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:         assertEquals("durablesub-2", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1: 
1:         assertEquals(view.getDurableTopicSubscribers().length, 2);
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
commit:8aadc4b
/////////////////////////////////////////////////////////////////////////
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testSendMessageWithRepeatedEntries() throws Exception {
1: 
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" +
1:                 "accept-version:1.1" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" +
0:         		"value:newest" + "\n" +
0:         		"value:older" + "\n" +
0:         		"value:oldest" + "\n" +
0:         		"destination:/queue/" + getQueueName() +
1:         		"\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         TextMessage message = (TextMessage)consumer.receive(2500);
1:         assertNotNull(message);
1:         assertEquals("Hello World", message.getText());
1:         assertEquals("newest", message.getStringProperty("value"));
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
commit:a2f59ec
/////////////////////////////////////////////////////////////////////////
1:         String f = stompConnection.receiveFrame().trim();
1: 
1:         LOG.info("Broker sent: " + f);
1: 
commit:b7a1883
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Failed to receive a connected frame.", f.startsWith("CONNECTED"));
1:         assertTrue("Frame should have a versoion 1.1 header.", f.indexOf("version:1.1") >= 0);
1:         assertTrue("Frame should have a heart beat header.", f.indexOf("heart-beat:") >= 0);
1:         assertTrue("Frame should have a session header.", f.indexOf("session:") >= 0);
0:         LOG.info("Broker sent: " + f);
/////////////////////////////////////////////////////////////////////////
1:             String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                              "receipt:1\n\n" + "Hello World" + Stomp.NULL;
1:             stompConnection.receiveFrame();
1:             LOG.info(ex.getMessage());
commit:956724e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "request-id:1\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:         String connectFrame = "STOMP\n" + "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" +  "accept-version:1.1" + "\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:                 "login:system\n" +
1:                 "passcode:manager\n" +
/////////////////////////////////////////////////////////////////////////
1:     public void testHeaderValuesAreNotWSTrimmed() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() +
1:                          "\ntest1: value" +
1:                          "\ntest2:value " +
1:                          "\ntest3: value " +
1:                          "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(message);
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1: 
1:         assertEquals(" value", received.getHeaders().get("test1"));
1:         assertEquals("value ", received.getHeaders().get("test2"));
1:         assertEquals(" value ", received.getHeaders().get("test3"));
1: 
1:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                 "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
commit:01b9e4b
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInputStream;
0: import java.io.IOException;
0: import java.net.Socket;
1: import java.net.SocketTimeoutException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(Stomp11Test.class);
commit:216f74e
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(TimeUnit.SECONDS.toMillis(10));
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(4000);
commit:acde68e
/////////////////////////////////////////////////////////////////////////
1:     public void testSendAfterMissingHeartbeat() throws Exception {
1: 
0:         String connectFrame = "STOMP\n" + "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:1000,0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(connectFrame);
1:         String f = stompConnection.receiveFrame();
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.1") >= 0);
1:         assertTrue(f.indexOf("heart-beat:") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1:         LOG.debug("Broker sent: " + f);
1: 
0:         Thread.sleep(5000);
1: 
1:         try {
1:             String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:             stompConnection.sendFrame(message);
1:             fail("SEND frame has been accepted after missing heart beat");
1:         } catch (Exception ex) {
0:             System.out.println(ex.getMessage());
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:0885c60
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
0: import java.io.DataInputStream;
0: import java.io.IOException;
0: import java.net.Socket;
0: import java.net.SocketTimeoutException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
1: 
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class Stomp11Test extends CombinationTestSupport {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(StompTest.class);
1: 
0:     protected String bindAddress = "stomp://localhost:61613";
0:     protected String confUri = "xbean:org/apache/activemq/transport/stomp/stomp-auth-broker.xml";
0:     protected String jmsUri = "vm://localhost";
1: 
0:     private BrokerService broker;
0:     private StompConnection stompConnection = new StompConnection();
1: 
1:     @Override
0:     protected void setUp() throws Exception {
1: 
0:         broker = BrokerFactory.createBroker(new URI(confUri));
0:         broker.start();
0:         broker.waitUntilStarted();
1: 
1:         stompConnect();
1:     }
1: 
0:     private void stompConnect() throws IOException, URISyntaxException, UnknownHostException {
0:         URI connectUri = new URI(bindAddress);
0:         stompConnection.open(createSocket(connectUri));
1:     }
1: 
0:     protected Socket createSocket(URI connectUri) throws IOException {
0:         return new Socket("127.0.0.1", connectUri.getPort());
1:     }
1: 
0:     protected String getQueueName() {
0:         return getClass().getName() + "." + getName();
1:     }
1: 
1:     @Override
0:     protected void tearDown() throws Exception {
0:         try {
0:             stompDisconnect();
1:         } catch(Exception e) {
0:             // Some tests explicitly disconnect from stomp so can ignore
0:         } finally {
0:             broker.stop();
0:             broker.waitUntilStopped();
1:         }
1:     }
1: 
0:     private void stompDisconnect() throws IOException {
0:         if (stompConnection != null) {
0:             stompConnection.close();
0:             stompConnection = null;
1:         }
1:     }
1: 
1:     public void testConnect() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "host:localhost\n" +
0:                               "request-id: 1\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("response-id:1") >= 0);
1:         assertTrue(f.indexOf("version:1.1") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1: 
0:         String frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testConnectWithVersionOptions() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.0,1.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.1") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1: 
0:         String frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testConnectWithValidFallback() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.0,10.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.0") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1: 
0:         String frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testConnectWithInvalidFallback() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:9.0,10.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("ERROR"));
1:         assertTrue(f.indexOf("version") >= 0);
1:         assertTrue(f.indexOf("message:") >= 0);
1:     }
1: 
1:     public void testHeartbeats() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:0,1000\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(connectFrame);
1:         String f = stompConnection.receiveFrame();
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.1") >= 0);
1:         assertTrue(f.indexOf("heart-beat:") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1: 
1:         LOG.debug("Broker sent: " + f);
1: 
1:         stompConnection.getStompSocket().getOutputStream().write('\n');
1: 
1:         DataInputStream in = new DataInputStream(stompConnection.getStompSocket().getInputStream());
1:         in.read();
1:         {
1:             long startTime = System.currentTimeMillis();
1:             int input = in.read();
1:             assertEquals("did not receive the correct hear beat value", '\n', input);
1:             long endTime = System.currentTimeMillis();
1:             assertTrue("Broker did not send KeepAlive in time", (endTime - startTime) >= 900);
1:         }
1:         {
1:             long startTime = System.currentTimeMillis();
1:             int input = in.read();
1:             assertEquals("did not receive the correct hear beat value", '\n', input);
1:             long endTime = System.currentTimeMillis();
1:             assertTrue("Broker did not send KeepAlive in time", (endTime - startTime) >= 900);
1:         }
1: 
0:         String frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testHeartbeatsDropsIdleConnection() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:1000,0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(connectFrame);
1:         String f = stompConnection.receiveFrame();
1:         assertTrue(f.startsWith("CONNECTED"));
1:         assertTrue(f.indexOf("version:1.1") >= 0);
1:         assertTrue(f.indexOf("heart-beat:") >= 0);
1:         assertTrue(f.indexOf("session:") >= 0);
1:         LOG.debug("Broker sent: " + f);
1: 
1:         long startTime = System.currentTimeMillis();
1: 
0:         try {
1:             f = stompConnection.receiveFrame();
1:             LOG.debug("Broker sent: " + f);
1:             fail();
1:         } catch(Exception e) {
1:         }
1: 
1:         long endTime = System.currentTimeMillis();
1:         assertTrue("Broker did close idle connection in time.", (endTime - startTime) >= 1000);
1:     }
1: 
1:     public void testRejectInvalidHeartbeats1() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("ERROR"));
1:         assertTrue(f.indexOf("heart-beat") >= 0);
1:         assertTrue(f.indexOf("message:") >= 0);
1:     }
1: 
1:     public void testRejectInvalidHeartbeats2() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:T,0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("ERROR"));
1:         assertTrue(f.indexOf("heart-beat") >= 0);
1:         assertTrue(f.indexOf("message:") >= 0);
1:     }
1: 
1:     public void testRejectInvalidHeartbeats3() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:100,10,50\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("ERROR"));
1:         assertTrue(f.indexOf("heart-beat") >= 0);
1:         assertTrue(f.indexOf("message:") >= 0);
1:     }
1: 
1:     public void testSubscribeAndUnsubscribe() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(message);
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
0:         assertTrue(frame.startsWith("MESSAGE"));
1: 
1:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                 "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         Thread.sleep(2000);
1: 
1:         stompConnection.sendFrame(message);
1: 
0:         try {
1:             frame = stompConnection.receiveFrame();
1:             LOG.info("Received frame: " + frame);
1:             fail("No message should have been received since subscription was removed");
1:         } catch (SocketTimeoutException e) {
1:         }
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testSubscribeWithNoId() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testUnsubscribeWithNoId() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         Thread.sleep(2000);
1: 
1:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testAckMessageWithId() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(message);
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1: 
1:         frame = "ACK\n" + "subscription:12345\n" + "message-id:" +
1:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                 "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testAckMessageWithNoId() throws Exception {
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(message);
1: 
1:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                            "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(subscribe);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1: 
1:         String ack = "ACK\n" + "message-id:" +
1:                      received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(ack);
1: 
1:         StompFrame error = stompConnection.receive();
0:         assertTrue(error.getAction().equals("ERROR"));
1: 
1:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(unsub);
1: 
0:         String frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testQueueBrowerSubscription() throws Exception {
1: 
1:         final int MSG_COUNT = 10;
1: 
1:         String connectFrame = "STOMP\n" +
0:                               "login: system\n" +
0:                               "passcode: manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         for(int i = 0; i < MSG_COUNT; ++i) {
1:             String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                              "receipt:0\n" +
1:                              "\n" + "Hello World {" + i + "}" + Stomp.NULL;
1:             stompConnection.sendFrame(message);
1:             StompFrame repsonse = stompConnection.receive();
1:             assertEquals("0", repsonse.getHeaders().get(Stomp.Headers.Response.RECEIPT_ID));
1:         }
1: 
1:         String subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                            "id:12345\n" + "browser:true\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(subscribe);
1: 
1:         for(int i = 0; i < MSG_COUNT; ++i) {
1:             StompFrame message = stompConnection.receive();
1:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:         }
1: 
1:         // We should now get a browse done message
1:         StompFrame browseDone = stompConnection.receive();
1:         LOG.debug("Browse Done: " + browseDone.toString());
1:         assertEquals(Stomp.Responses.MESSAGE, browseDone.getAction());
1:         assertEquals("12345", browseDone.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:         assertEquals("end", browseDone.getHeaders().get(Stomp.Headers.Message.BROWSER));
1:         assertTrue(browseDone.getHeaders().get(Stomp.Headers.Message.DESTINATION) != null);
1: 
1:         String unsub = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                        "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(unsub);
1: 
0:         Thread.sleep(2000);
1: 
1:         subscribe = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(subscribe);
1: 
1:         for(int i = 0; i < MSG_COUNT; ++i) {
1:             StompFrame message = stompConnection.receive();
1:             assertEquals(Stomp.Responses.MESSAGE, message.getAction());
1:             assertEquals("12345", message.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));
1:         }
1: 
1:         stompConnection.sendFrame(unsub);
1: 
0:         String frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1: }
author:Christian Posta
-------------------------------------------------------------------------------
commit:a7f1180
/////////////////////////////////////////////////////////////////////////
1:     public void testSubscribeWithWildcardSubscription() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                 "login:system\n" +
1:                 "passcode:manager\n" +
1:                 "accept-version:1.1\n" +
1:                 "host:localhost\n" +
1:                 "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String message = "SEND\n" + "destination:/queue/a.b.c"  +
0:                 "\n\n" + "Hello World" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
1:         message = "SEND\n" + "destination:/queue/a.b"  +
0:                 "\n\n" + "Hello World" + Stomp.NULL;
1:         stompConnection.sendFrame(message);
1: 
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/a.b.>"  + "\n" +
0:                 "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertNotNull(received);
1: 
1:         received = stompConnection.receive();
1:         assertNotNull(received);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0:     }
1: 
0:     @Test
author:Robert Davies
-------------------------------------------------------------------------------
commit:26d7070
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = new ObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
0:         ObjectName brokerName = new ObjectName(domain + ":type=Broker,brokerName=localhost");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a54fa4b
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.setVersion(Stomp.V1_1);
commit:e3a1fc9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
0: import java.io.DataInputStream;
0: import java.io.IOException;
0: import java.net.*;
0: import java.util.concurrent.TimeUnit;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public void testNackMessage() throws Exception {
0: 
1:         String connectFrame = "STOMP\n" +
0:                 "login: system\n" +
0:                 "passcode: manager\n" +
1:                 "accept-version:1.1\n" +
1:                 "host:localhost\n" +
1:                 "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
0: 
0:         String f = stompConnection.receiveFrame();
0:         LOG.debug("Broker sent: " + f);
0: 
0:         assertTrue(f.startsWith("CONNECTED"));
0: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() + "\npersistent:true\n\n" + "Hello World" + Stomp.NULL;
0: 
0:         stompConnection.sendFrame(message);
0: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                 "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
1:         StompFrame received = stompConnection.receive();
0:         assertTrue(received.getAction().equals("MESSAGE"));
0: 
1:         // nack it
1:         frame = "NACK\n" + "subscription:12345\n" + "message-id:" +
1:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
1:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
0:                 "id:12345\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
1:         //consume it from dlq
0: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/ActiveMQ.DLQ\n" +
1:                 "id:12345\n" + "ack:client\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:         StompFrame receivedDLQ = stompConnection.receive(200);
1:         assertEquals(receivedDLQ.getHeaders().get("message-id"), received.getHeaders().get("message-id"));
0: 
1:         frame = "ACK\n" + "subscription:12345\n" + "message-id:" +
1:                 received.getHeaders().get("message-id") + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
1:         frame = "UNSUBSCRIBE\n" + "destination:/queue/ActiveMQ.DLQ\n" +
0:                 "id:12345\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
0: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0:     }
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:a36e618
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
/////////////////////////////////////////////////////////////////////////
1:     private Connection connection;
1:     private Session session;
1:     private ActiveMQQueue queue;
/////////////////////////////////////////////////////////////////////////
0: 
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(jmsUri);
1:         connection = cf.createConnection("system", "manager");
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         queue = new ActiveMQQueue(getQueueName());
1:         connection.start();
0: 
/////////////////////////////////////////////////////////////////////////
1:         StompFrame stompFrame = stompConnection.receive();
1:         assertTrue(stompFrame.getAction().equals("MESSAGE"));
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:     public void testSendMessageWithStandardHeadersEncoded() throws Exception {
0: 
1:         MessageConsumer consumer = session.createConsumer(queue);
0: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n" +
1:                 "accept-version:1.1" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
0: 
1:         frame = "SEND\n" + "correlation-id:c1\\:\\n\\23\n" + "priority:3\n" + "type:t34:5\n" + "JMSXGroupID:abc\n" + "foo:a\\bc\n" + "bar:123\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World"
1:                 + Stomp.NULL;
0: 
0:         stompConnection.sendFrame(frame);
0: 
1:         TextMessage message = (TextMessage)consumer.receive(2500);
1:         assertNotNull(message);
1:         assertEquals("Hello World", message.getText());
1:         assertEquals("JMSCorrelationID", "c1\\:\n\\23", message.getJMSCorrelationID());
1:         assertEquals("getJMSType", "t34:5", message.getJMSType());
1:         assertEquals("getJMSPriority", 3, message.getJMSPriority());
1:         assertEquals("foo", "a\\bc", message.getStringProperty("foo"));
1:         assertEquals("bar", "123", message.getStringProperty("bar"));
0: 
1:         assertEquals("JMSXGroupID", "abc", message.getStringProperty("JMSXGroupID"));
1:         ActiveMQTextMessage amqMessage = (ActiveMQTextMessage)message;
1:         assertEquals("GroupID", "abc", amqMessage.getGroupID());
0:     }
0: 
0: 
1:     public void testSubscribeWithMessageSentWithEncodedProperties() throws Exception {
0: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n" +  "accept-version:1.1" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
0: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage message = session.createTextMessage("Hello World");
1:         message.setStringProperty("s", "\\value:");
1:         producer.send(message);
0: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue("" + frame, frame.startsWith("MESSAGE"));
0: 
1:         int start =  frame.indexOf("\ns:") + 3;
1:         final String expectedEncoded = "\\\\value\\c";
1:         final String headerVal = frame.substring(start, start + expectedEncoded.length());
1:         assertEquals("" + frame, expectedEncoded, headerVal);
0: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0:     }
0: 
============================================================================