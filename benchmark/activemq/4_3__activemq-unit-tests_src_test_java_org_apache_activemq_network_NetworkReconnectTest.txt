1:7f883f6: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:06a365f:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
3:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:06a365f: package org.apache.activemq.network;
58:06a365f: 
1:06a365f: import java.net.URI;
1:06a365f: import java.util.ArrayList;
1:06a365f: import java.util.Iterator;
1:74a7a8b: import java.util.concurrent.atomic.AtomicInteger;
1:06a365f: 
1:06a365f: import javax.jms.Connection;
1:06a365f: import javax.jms.Destination;
1:06a365f: import javax.jms.JMSException;
1:06a365f: import javax.jms.Message;
1:06a365f: import javax.jms.MessageConsumer;
1:06a365f: import javax.jms.MessageProducer;
1:06a365f: import javax.jms.Session;
1:06a365f: 
1:06a365f: import junit.framework.TestCase;
1:06a365f: import org.apache.activemq.ActiveMQConnectionFactory;
1:06a365f: import org.apache.activemq.advisory.ConsumerEvent;
1:06a365f: import org.apache.activemq.advisory.ConsumerEventSource;
1:06a365f: import org.apache.activemq.advisory.ConsumerListener;
1:06a365f: import org.apache.activemq.broker.BrokerFactory;
1:06a365f: import org.apache.activemq.broker.BrokerService;
1:06a365f: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:06a365f: 
1:06a365f: /**
1:230a86c:  * These test cases are used to verifiy that network connections get re
1:230a86c:  * established in all broker restart scenarios.
1:230a86c:  * 
1:06a365f:  * @author chirino
1:06a365f:  */
1:06a365f: public class NetworkReconnectTest extends TestCase {
1:06a365f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NetworkReconnectTest.class);
1:06a365f: 
1:230a86c:     private BrokerService producerBroker;
1:230a86c:     private BrokerService consumerBroker;
1:230a86c:     private ActiveMQConnectionFactory producerConnectionFactory;
1:230a86c:     private ActiveMQConnectionFactory consumerConnectionFactory;
1:230a86c:     private Destination destination;
1:933eb2f:     private ArrayList<Connection> connections = new ArrayList<Connection>();
1:06a365f: 
1:044c07d:     public void xtestMultipleProducerBrokerRestarts() throws Exception {
1:230a86c:         for (int i = 0; i < 10; i++) {
1:230a86c:             testWithProducerBrokerRestart();
1:230a86c:             disposeConsumerConnections();
1:230a86c:         }
1:230a86c:     }
1:06a365f: 
1:044c07d:     public void xtestWithoutRestarts() throws Exception {
1:230a86c:         startProducerBroker();
1:230a86c:         startConsumerBroker();
1:06a365f: 
1:230a86c:         MessageConsumer consumer = createConsumer();
1:230a86c:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1:230a86c:         waitForConsumerToArrive(counter);
1:06a365f: 
1:230a86c:         String messageId = sendMessage();
1:230a86c:         Message message = consumer.receive(1000);
1:06a365f: 
1:230a86c:         assertEquals(messageId, message.getJMSMessageID());
1:06a365f: 
1:230a86c:         assertNull(consumer.receiveNoWait());
1:230a86c: 
1:230a86c:     }
1:06a365f: 
1:230a86c:     public void testWithProducerBrokerRestart() throws Exception {
1:230a86c:         startProducerBroker();
1:230a86c:         startConsumerBroker();
1:230a86c: 
1:230a86c:         MessageConsumer consumer = createConsumer();
1:230a86c:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1:230a86c:         waitForConsumerToArrive(counter);
1:230a86c: 
1:230a86c:         String messageId = sendMessage();
1:230a86c:         Message message = consumer.receive(1000);
1:230a86c: 
1:230a86c:         assertEquals(messageId, message.getJMSMessageID());
1:230a86c:         assertNull(consumer.receiveNoWait());
1:230a86c: 
1:230a86c:         // Restart the first broker...
1:230a86c:         stopProducerBroker();
1:230a86c:         startProducerBroker();
1:230a86c: 
1:230a86c:         counter = createConsumerCounter(producerConnectionFactory);
1:230a86c:         waitForConsumerToArrive(counter);
1:230a86c: 
1:230a86c:         messageId = sendMessage();
1:230a86c:         message = consumer.receive(1000);
1:230a86c: 
1:230a86c:         assertEquals(messageId, message.getJMSMessageID());
1:230a86c:         assertNull(consumer.receiveNoWait());
1:230a86c: 
1:230a86c:     }
1:230a86c: 
1:044c07d:     public void xtestWithConsumerBrokerRestart() throws Exception {
1:230a86c: 
1:230a86c:         startProducerBroker();
1:230a86c:         startConsumerBroker();
1:230a86c: 
1:230a86c:         MessageConsumer consumer = createConsumer();
1:230a86c:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1:230a86c:         waitForConsumerToArrive(counter);
1:230a86c: 
1:230a86c:         String messageId = sendMessage();
1:230a86c:         Message message = consumer.receive(1000);
1:230a86c: 
1:230a86c:         assertEquals(messageId, message.getJMSMessageID());
1:230a86c:         assertNull(consumer.receiveNoWait());
1:230a86c: 
1:230a86c:         // Restart the first broker...
1:230a86c:         stopConsumerBroker();
1:230a86c:         waitForConsumerToLeave(counter);
1:230a86c:         startConsumerBroker();
1:230a86c: 
1:230a86c:         consumer = createConsumer();
1:230a86c:         waitForConsumerToArrive(counter);
1:230a86c: 
1:230a86c:         messageId = sendMessage();
1:230a86c:         message = consumer.receive(1000);
1:230a86c: 
1:230a86c:         assertEquals(messageId, message.getJMSMessageID());
1:230a86c:         assertNull(consumer.receiveNoWait());
1:230a86c: 
1:230a86c:     }
1:230a86c: 
1:044c07d:     public void xtestWithConsumerBrokerStartDelay() throws Exception {
1:230a86c: 
1:230a86c:         startConsumerBroker();
1:230a86c:         MessageConsumer consumer = createConsumer();
1:230a86c: 
1:230a86c:         Thread.sleep(1000 * 5);
1:230a86c: 
1:230a86c:         startProducerBroker();
1:230a86c:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1:230a86c:         waitForConsumerToArrive(counter);
1:230a86c: 
1:230a86c:         String messageId = sendMessage();
1:230a86c:         Message message = consumer.receive(1000);
1:230a86c: 
1:230a86c:         assertEquals(messageId, message.getJMSMessageID());
1:230a86c: 
1:230a86c:         assertNull(consumer.receiveNoWait());
1:230a86c: 
1:230a86c:     }
1:230a86c: 
1:044c07d:     public void xtestWithProducerBrokerStartDelay() throws Exception {
1:230a86c: 
1:230a86c:         startProducerBroker();
1:230a86c:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1:230a86c: 
1:230a86c:         Thread.sleep(1000 * 5);
1:230a86c: 
1:230a86c:         startConsumerBroker();
1:230a86c:         MessageConsumer consumer = createConsumer();
1:230a86c: 
1:230a86c:         waitForConsumerToArrive(counter);
1:230a86c: 
1:230a86c:         String messageId = sendMessage();
1:230a86c:         Message message = consumer.receive(1000);
1:06a365f: 
1:230a86c:         assertEquals(messageId, message.getJMSMessageID());
1:06a365f: 
1:230a86c:         assertNull(consumer.receiveNoWait());
1:06a365f: 
1:230a86c:     }
1:06a365f: 
1:230a86c:     protected void setUp() throws Exception {
1:230a86c: 
1:fc00993:         LOG.info("===============================================================================");
1:fc00993:         LOG.info("Running Test Case: " + getName());
1:fc00993:         LOG.info("===============================================================================");
1:230a86c: 
1:230a86c:         producerConnectionFactory = createProducerConnectionFactory();
1:230a86c:         consumerConnectionFactory = createConsumerConnectionFactory();
1:230a86c:         destination = new ActiveMQQueue("RECONNECT.TEST.QUEUE");
1:230a86c: 
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected void tearDown() throws Exception {
1:230a86c:         disposeConsumerConnections();
1:230a86c:         try {
1:230a86c:             stopProducerBroker();
1:230a86c:         } catch (Throwable e) {
1:230a86c:         }
1:230a86c:         try {
1:230a86c:             stopConsumerBroker();
1:230a86c:         } catch (Throwable e) {
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected void disposeConsumerConnections() {
1:933eb2f:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:933eb2f:             Connection connection = iter.next();
1:230a86c:             try {
1:230a86c:                 connection.close();
1:230a86c:             } catch (Throwable ignore) {
1:230a86c:             }
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected void startProducerBroker() throws Exception {
1:230a86c:         if (producerBroker == null) {
1:230a86c:             producerBroker = createFirstBroker();
1:230a86c:             producerBroker.start();
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected void stopProducerBroker() throws Exception {
1:230a86c:         if (producerBroker != null) {
1:230a86c:             producerBroker.stop();
1:230a86c:             producerBroker = null;
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected void startConsumerBroker() throws Exception {
1:230a86c:         if (consumerBroker == null) {
1:230a86c:             consumerBroker = createSecondBroker();
1:230a86c:             consumerBroker.start();
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected void stopConsumerBroker() throws Exception {
1:230a86c:         if (consumerBroker != null) {
1:230a86c:             consumerBroker.stop();
1:230a86c:             consumerBroker = null;
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected BrokerService createFirstBroker() throws Exception {
1:230a86c:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker1.xml"));
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected BrokerService createSecondBroker() throws Exception {
1:230a86c:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker2.xml"));
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected ActiveMQConnectionFactory createProducerConnectionFactory() {
1:230a86c:         return new ActiveMQConnectionFactory("vm://broker1");
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected ActiveMQConnectionFactory createConsumerConnectionFactory() {
1:230a86c:         return new ActiveMQConnectionFactory("vm://broker2");
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected String sendMessage() throws JMSException {
1:230a86c:         Connection connection = null;
1:230a86c:         try {
1:230a86c:             connection = producerConnectionFactory.createConnection();
1:230a86c:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:             MessageProducer producer = session.createProducer(destination);
1:230a86c:             Message message = session.createMessage();
1:230a86c:             producer.send(message);
1:230a86c:             return message.getJMSMessageID();
1:230a86c:         } finally {
1:230a86c:             try {
1:230a86c:                 connection.close();
1:230a86c:             } catch (Throwable ignore) {
1:230a86c:             }
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected MessageConsumer createConsumer() throws JMSException {
1:230a86c:         Connection connection = consumerConnectionFactory.createConnection();
1:230a86c:         connections.add(connection);
1:230a86c:         connection.start();
1:230a86c: 
1:230a86c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         return session.createConsumer(destination);
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected AtomicInteger createConsumerCounter(ActiveMQConnectionFactory cf) throws Exception {
1:230a86c:         final AtomicInteger rc = new AtomicInteger(0);
1:230a86c:         Connection connection = cf.createConnection();
1:230a86c:         connections.add(connection);
1:230a86c:         connection.start();
1:230a86c: 
1:230a86c:         ConsumerEventSource source = new ConsumerEventSource(connection, destination);
1:230a86c:         source.setConsumerListener(new ConsumerListener() {
1:230a86c:             public void onConsumerEvent(ConsumerEvent event) {
1:230a86c:                 rc.set(event.getConsumerCount());
1:230a86c:             }
1:230a86c:         });
1:230a86c:         source.start();
1:230a86c: 
1:230a86c:         return rc;
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected void waitForConsumerToArrive(AtomicInteger consumerCounter) throws InterruptedException {
1:230a86c:         for (int i = 0; i < 100; i++) {
1:230a86c:             if (consumerCounter.get() > 0) {
1:230a86c:                 return;
1:230a86c:             }
1:230a86c:             Thread.sleep(100);
1:230a86c:         }
1:230a86c:         fail("The consumer did not arrive.");
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected void waitForConsumerToLeave(AtomicInteger consumerCounter) throws InterruptedException {
1:230a86c:         for (int i = 0; i < 100; i++) {
1:230a86c:             if (consumerCounter.get() == 0) {
1:230a86c:                 return;
1:230a86c:             }
1:230a86c:             Thread.sleep(100);
1:230a86c:         }
1:230a86c:         fail("The consumer did not leave.");
1:230a86c:     }
1:06a365f: 
37:06a365f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkReconnectTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:044c07d
/////////////////////////////////////////////////////////////////////////
1:     public void xtestMultipleProducerBrokerRestarts() throws Exception {
1:     public void xtestWithoutRestarts() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void xtestWithConsumerBrokerRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void xtestWithConsumerBrokerStartDelay() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void xtestWithProducerBrokerStartDelay() throws Exception {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private ArrayList<Connection> connections = new ArrayList<Connection>();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:             Connection connection = iter.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(NetworkReconnectTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("===============================================================================");
1:         LOG.info("Running Test Case: " + getName());
1:         LOG.info("===============================================================================");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * These test cases are used to verifiy that network connections get re
1:  * established in all broker restart scenarios.
1:  * 
0:     protected static final Log log = LogFactory.getLog(NetworkReconnectTest.class);
1:     private BrokerService producerBroker;
1:     private BrokerService consumerBroker;
1:     private ActiveMQConnectionFactory producerConnectionFactory;
1:     private ActiveMQConnectionFactory consumerConnectionFactory;
1:     private Destination destination;
0:     private ArrayList connections = new ArrayList();
0:     public void testMultipleProducerBrokerRestarts() throws Exception {
1:         for (int i = 0; i < 10; i++) {
1:             testWithProducerBrokerRestart();
1:             disposeConsumerConnections();
1:         }
1:     }
0:     public void testWithoutRestarts() throws Exception {
1:         startProducerBroker();
1:         startConsumerBroker();
1:         MessageConsumer consumer = createConsumer();
1:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1:         waitForConsumerToArrive(counter);
1:         String messageId = sendMessage();
1:         Message message = consumer.receive(1000);
1:         assertEquals(messageId, message.getJMSMessageID());
1:         assertNull(consumer.receiveNoWait());
1:     }
1:     public void testWithProducerBrokerRestart() throws Exception {
1:         startProducerBroker();
1:         startConsumerBroker();
1:         MessageConsumer consumer = createConsumer();
1:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1:         waitForConsumerToArrive(counter);
1:         String messageId = sendMessage();
1:         Message message = consumer.receive(1000);
1:         assertEquals(messageId, message.getJMSMessageID());
1:         assertNull(consumer.receiveNoWait());
1: 
1:         // Restart the first broker...
1:         stopProducerBroker();
1:         startProducerBroker();
1: 
1:         counter = createConsumerCounter(producerConnectionFactory);
1:         waitForConsumerToArrive(counter);
1: 
1:         messageId = sendMessage();
1:         message = consumer.receive(1000);
1: 
1:         assertEquals(messageId, message.getJMSMessageID());
1:         assertNull(consumer.receiveNoWait());
1: 
1:     }
1: 
0:     public void testWithConsumerBrokerRestart() throws Exception {
1: 
1:         startProducerBroker();
1:         startConsumerBroker();
1: 
1:         MessageConsumer consumer = createConsumer();
1:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1:         waitForConsumerToArrive(counter);
1: 
1:         String messageId = sendMessage();
1:         Message message = consumer.receive(1000);
1: 
1:         assertEquals(messageId, message.getJMSMessageID());
1:         assertNull(consumer.receiveNoWait());
1: 
1:         // Restart the first broker...
1:         stopConsumerBroker();
1:         waitForConsumerToLeave(counter);
1:         startConsumerBroker();
1: 
1:         consumer = createConsumer();
1:         waitForConsumerToArrive(counter);
1: 
1:         messageId = sendMessage();
1:         message = consumer.receive(1000);
1: 
1:         assertEquals(messageId, message.getJMSMessageID());
1:         assertNull(consumer.receiveNoWait());
1: 
1:     }
1: 
0:     public void testWithConsumerBrokerStartDelay() throws Exception {
1: 
1:         startConsumerBroker();
1:         MessageConsumer consumer = createConsumer();
1: 
1:         Thread.sleep(1000 * 5);
1: 
1:         startProducerBroker();
1:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1:         waitForConsumerToArrive(counter);
1: 
1:         String messageId = sendMessage();
1:         Message message = consumer.receive(1000);
1: 
1:         assertEquals(messageId, message.getJMSMessageID());
1: 
1:         assertNull(consumer.receiveNoWait());
1: 
1:     }
1: 
0:     public void testWithProducerBrokerStartDelay() throws Exception {
1: 
1:         startProducerBroker();
1:         AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1: 
1:         Thread.sleep(1000 * 5);
1: 
1:         startConsumerBroker();
1:         MessageConsumer consumer = createConsumer();
1: 
1:         waitForConsumerToArrive(counter);
1: 
1:         String messageId = sendMessage();
1:         Message message = consumer.receive(1000);
1: 
1:         assertEquals(messageId, message.getJMSMessageID());
1: 
1:         assertNull(consumer.receiveNoWait());
1: 
1:     }
1: 
1:     protected void setUp() throws Exception {
1: 
0:         log.info("===============================================================================");
0:         log.info("Running Test Case: " + getName());
0:         log.info("===============================================================================");
1: 
1:         producerConnectionFactory = createProducerConnectionFactory();
1:         consumerConnectionFactory = createConsumerConnectionFactory();
1:         destination = new ActiveMQQueue("RECONNECT.TEST.QUEUE");
1: 
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         disposeConsumerConnections();
1:         try {
1:             stopProducerBroker();
1:         } catch (Throwable e) {
1:         }
1:         try {
1:             stopConsumerBroker();
1:         } catch (Throwable e) {
1:         }
1:     }
1: 
1:     protected void disposeConsumerConnections() {
0:         for (Iterator iter = connections.iterator(); iter.hasNext();) {
0:             Connection connection = (Connection)iter.next();
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     protected void startProducerBroker() throws Exception {
1:         if (producerBroker == null) {
1:             producerBroker = createFirstBroker();
1:             producerBroker.start();
1:         }
1:     }
1: 
1:     protected void stopProducerBroker() throws Exception {
1:         if (producerBroker != null) {
1:             producerBroker.stop();
1:             producerBroker = null;
1:         }
1:     }
1: 
1:     protected void startConsumerBroker() throws Exception {
1:         if (consumerBroker == null) {
1:             consumerBroker = createSecondBroker();
1:             consumerBroker.start();
1:         }
1:     }
1: 
1:     protected void stopConsumerBroker() throws Exception {
1:         if (consumerBroker != null) {
1:             consumerBroker.stop();
1:             consumerBroker = null;
1:         }
1:     }
1: 
1:     protected BrokerService createFirstBroker() throws Exception {
1:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker1.xml"));
1:     }
1: 
1:     protected BrokerService createSecondBroker() throws Exception {
1:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker2.xml"));
1:     }
1: 
1:     protected ActiveMQConnectionFactory createProducerConnectionFactory() {
1:         return new ActiveMQConnectionFactory("vm://broker1");
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConsumerConnectionFactory() {
1:         return new ActiveMQConnectionFactory("vm://broker2");
1:     }
1: 
1:     protected String sendMessage() throws JMSException {
1:         Connection connection = null;
1:         try {
1:             connection = producerConnectionFactory.createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(destination);
1:             Message message = session.createMessage();
1:             producer.send(message);
1:             return message.getJMSMessageID();
1:         } finally {
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     protected MessageConsumer createConsumer() throws JMSException {
1:         Connection connection = consumerConnectionFactory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         return session.createConsumer(destination);
1:     }
1: 
1:     protected AtomicInteger createConsumerCounter(ActiveMQConnectionFactory cf) throws Exception {
1:         final AtomicInteger rc = new AtomicInteger(0);
1:         Connection connection = cf.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         ConsumerEventSource source = new ConsumerEventSource(connection, destination);
1:         source.setConsumerListener(new ConsumerListener() {
1:             public void onConsumerEvent(ConsumerEvent event) {
1:                 rc.set(event.getConsumerCount());
1:             }
1:         });
1:         source.start();
1: 
1:         return rc;
1:     }
1: 
1:     protected void waitForConsumerToArrive(AtomicInteger consumerCounter) throws InterruptedException {
1:         for (int i = 0; i < 100; i++) {
1:             if (consumerCounter.get() > 0) {
1:                 return;
1:             }
1:             Thread.sleep(100);
1:         }
1:         fail("The consumer did not arrive.");
1:     }
1: 
1:     protected void waitForConsumerToLeave(AtomicInteger consumerCounter) throws InterruptedException {
1:         for (int i = 0; i < 100; i++) {
1:             if (consumerCounter.get() == 0) {
1:                 return;
1:             }
1:             Thread.sleep(100);
1:         }
1:         fail("The consumer did not leave.");
1:     }
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
commit:06a365f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.network;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.advisory.ConsumerEvent;
1: import org.apache.activemq.advisory.ConsumerEventSource;
1: import org.apache.activemq.advisory.ConsumerListener;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
0:  * These test cases are used to verifiy that network connections get re established in all broker
0:  * restart scenarios.
1:  *  
1:  * @author chirino
1:  */
1: public class NetworkReconnectTest extends TestCase {
1: 
0: 	protected static final Log log = LogFactory.getLog(NetworkReconnectTest.class);
1: 	
0: 	private BrokerService producerBroker;
0: 	private BrokerService consumerBroker;
0: 	private ActiveMQConnectionFactory producerConnectionFactory;
0: 	private ActiveMQConnectionFactory consumerConnectionFactory;
0: 	private Destination destination;
0: 	private ArrayList connections = new ArrayList();
1: 	
0: 	public void testMultipleProducerBrokerRestarts() throws Exception {
0: 		for (int i = 0; i < 10; i++) {
0: 			testWithProducerBrokerRestart();
0: 			disposeConsumerConnections();
1: 		}
1: 	}
1: 	
0: 	public void testWithoutRestarts() throws Exception {
0: 		startProducerBroker();
0: 		startConsumerBroker();
1: 
0: 		MessageConsumer consumer = createConsumer();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
1: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
1: 		
0: 		assertEquals(messageId, message.getJMSMessageID());
1: 		
0: 		assertNull( consumer.receiveNoWait() );
1: 		
1: 	}
1: 
0: 	public void testWithProducerBrokerRestart() throws Exception {
0: 		startProducerBroker();
0: 		startConsumerBroker();
1: 
0: 		MessageConsumer consumer = createConsumer();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
1: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
1: 		
0: 		assertEquals(messageId, message.getJMSMessageID());		
0: 		assertNull( consumer.receiveNoWait() );
1: 		
0: 		// Restart the first broker...
0: 		stopProducerBroker();
0: 		startProducerBroker();
1: 		
0: 		counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
1: 		
0: 		messageId = sendMessage();
0: 		message = consumer.receive(1000);
1: 		
0: 		assertEquals(messageId, message.getJMSMessageID());		
0: 		assertNull( consumer.receiveNoWait() );
1: 		
1: 	}
1: 
0: 	public void testWithConsumerBrokerRestart() throws Exception {
1: 
0: 		startProducerBroker();
0: 		startConsumerBroker();
1: 
0: 		MessageConsumer consumer = createConsumer();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
1: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
1: 		
0: 		assertEquals(messageId, message.getJMSMessageID());		
0: 		assertNull( consumer.receiveNoWait() );
1: 		
0: 		// Restart the first broker...
0: 		stopConsumerBroker();		
0: 		waitForConsumerToLeave(counter);		
0: 		startConsumerBroker();
1: 		
0: 		consumer = createConsumer();
0: 		waitForConsumerToArrive(counter);
1: 		
0: 		messageId = sendMessage();
0: 		message = consumer.receive(1000);
1: 		
0: 		assertEquals(messageId, message.getJMSMessageID());		
0: 		assertNull( consumer.receiveNoWait() );
1: 		
1: 	}
1: 	
0: 	public void testWithConsumerBrokerStartDelay() throws Exception {
1: 		
0: 		startConsumerBroker();
0: 		MessageConsumer consumer = createConsumer();
1: 		
0: 		Thread.sleep(1000*5);
1: 		
0: 		startProducerBroker();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
1: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
1: 		
0: 		assertEquals(messageId, message.getJMSMessageID());
1: 		
0: 		assertNull( consumer.receiveNoWait() );
1: 
1: 	}
1: 
1: 	
0: 	public void testWithProducerBrokerStartDelay() throws Exception {
1: 		
0: 		startProducerBroker();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
1: 
0: 		Thread.sleep(1000*5);
1: 		
0: 		startConsumerBroker();
0: 		MessageConsumer consumer = createConsumer();
1: 				
0: 		waitForConsumerToArrive(counter);
1: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
1: 		
0: 		assertEquals(messageId, message.getJMSMessageID());
1: 		
0: 		assertNull( consumer.receiveNoWait() );
1: 
1: 	}
1: 
0: 	protected void setUp() throws Exception {
1: 		
0: 		log.info("===============================================================================");
0: 		log.info("Running Test Case: "+getName());
0: 		log.info("===============================================================================");
1: 		
0: 		producerConnectionFactory = createProducerConnectionFactory();
0: 		consumerConnectionFactory = createConsumerConnectionFactory();
0: 		destination = new ActiveMQQueue("RECONNECT.TEST.QUEUE");
1: 		
1: 	}
1: 	
0: 	protected void tearDown() throws Exception {
0: 		disposeConsumerConnections();
0: 		try {
0: 			stopProducerBroker();
0: 		} catch (Throwable e) {
1: 		}
0: 		try {
0: 			stopConsumerBroker();
0: 		} catch (Throwable e) {
1: 		}
1: 	}
1: 	
0: 	protected void disposeConsumerConnections() {
0: 		for (Iterator iter = connections.iterator(); iter.hasNext();) {
0: 			Connection connection = (Connection) iter.next();
0: 			try { connection.close(); } catch (Throwable ignore) {}
1: 		}
1: 	}
1: 	
0: 	protected void startProducerBroker() throws Exception {
0: 		if( producerBroker==null ) {
0: 			producerBroker = createFirstBroker();
0: 			producerBroker.start();
1: 		}
1: 	}
1: 	
0: 	protected void stopProducerBroker() throws Exception {
0: 		if( producerBroker!=null ) {
0: 			producerBroker.stop();
0: 			producerBroker=null;
1: 		}
1: 	}
1: 	
0: 	protected void startConsumerBroker() throws Exception {
0: 		if( consumerBroker==null ) {
0: 			consumerBroker = createSecondBroker();
0: 			consumerBroker.start();
1: 		}
1: 	}
1: 	
0: 	protected void stopConsumerBroker() throws Exception {
0: 		if( consumerBroker!=null ) {
0: 			consumerBroker.stop();
0: 			consumerBroker=null;
1: 		}
1: 	}
1: 	
0: 	protected BrokerService createFirstBroker() throws Exception {
0: 		return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker1.xml"));
1: 	}
1: 	
0: 	protected BrokerService createSecondBroker() throws Exception {
0: 		return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker2.xml"));
1: 	}
1: 
0: 	protected ActiveMQConnectionFactory createProducerConnectionFactory() {
0: 		return new ActiveMQConnectionFactory("vm://broker1");
1: 	}
1: 	
0: 	protected ActiveMQConnectionFactory createConsumerConnectionFactory() {
0: 		return new ActiveMQConnectionFactory("vm://broker2");
1: 	}
1: 	
0: 	protected String sendMessage() throws JMSException {
0: 		Connection connection = null;
0: 		try {
0: 			connection = producerConnectionFactory.createConnection();
0: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 			MessageProducer producer = session.createProducer(destination);
0: 			Message message = session.createMessage();
0: 			producer.send(message);
0: 			return message.getJMSMessageID();
0: 		} finally {
0: 			try { connection.close(); } catch (Throwable ignore) {}
1: 		}
1: 	}
1: 	
0: 	protected MessageConsumer createConsumer() throws JMSException {
0: 		Connection connection = consumerConnectionFactory.createConnection();
0: 		connections.add(connection);
0: 		connection.start();
1: 		
0: 		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		return  session.createConsumer(destination);
1: 	}
1: 	
0: 	protected AtomicInteger createConsumerCounter(ActiveMQConnectionFactory cf) throws Exception {
0: 		final AtomicInteger rc = new AtomicInteger(0);
0: 		Connection connection  = cf.createConnection();
0: 		connections.add(connection);
0: 		connection.start();
1: 		
0: 		ConsumerEventSource source = new ConsumerEventSource(connection, destination);
0: 		source.setConsumerListener(new ConsumerListener(){
0: 			public void onConsumerEvent(ConsumerEvent event) {
0: 				rc.set(event.getConsumerCount());
1: 			}
0: 		});
0: 		source.start();
1: 		
0: 		return rc;
1: 	}
1: 	
0: 	protected void waitForConsumerToArrive(AtomicInteger consumerCounter) throws InterruptedException {
0: 		for( int i=0; i < 100; i++ ) {
0: 			if( consumerCounter.get() > 0 ) {
0: 				return;
1: 			}
0: 			Thread.sleep(100);
1: 		}
0: 		fail("The consumer did not arrive.");
1: 	}
1: 	
0: 	protected void waitForConsumerToLeave(AtomicInteger consumerCounter) throws InterruptedException {
0: 		for( int i=0; i < 100; i++ ) {
0: 			if( consumerCounter.get() == 0 ) {
0: 				return;
1: 			}
0: 			Thread.sleep(100);
1: 		}
0: 		fail("The consumer did not leave.");
1: 	}
1: 
1: }
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:1bcd631
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0: 	protected static final Log log = LogFactory.getLog(NetworkReconnectTest.class);
0: 	
/////////////////////////////////////////////////////////////////////////
0: 		
0: 		log.info("===============================================================================");
0: 		log.info("Running Test Case: "+getName());
0: 		log.info("===============================================================================");
0: 		
/////////////////////////////////////////////////////////////////////////
0: 			Thread.sleep(100);
/////////////////////////////////////////////////////////////////////////
0: 			Thread.sleep(100);
commit:2fc3e8e
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.network;
0: 
0: import java.net.URI;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: 
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.advisory.ConsumerEvent;
0: import org.apache.activemq.advisory.ConsumerEventSource;
0: import org.apache.activemq.advisory.ConsumerListener;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQQueue;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
0: 
0: /**
0:  * These test cases are used to verifiy that network connections get re established in all broker
0:  * restart scenarios.
0:  *  
0:  * @author chirino
0:  */
0: public class NetworkReconnectTest extends TestCase {
0: 
0: 	private BrokerService producerBroker;
0: 	private BrokerService consumerBroker;
0: 	private ActiveMQConnectionFactory producerConnectionFactory;
0: 	private ActiveMQConnectionFactory consumerConnectionFactory;
0: 	private Destination destination;
0: 	private ArrayList connections = new ArrayList();
0: 	
0: 	public void testMultipleProducerBrokerRestarts() throws Exception {
0: 		for (int i = 0; i < 10; i++) {
0: 			testWithProducerBrokerRestart();
0: 			disposeConsumerConnections();
0: 		}
0: 	}
0: 	
0: 	public void testWithoutRestarts() throws Exception {
0: 		startProducerBroker();
0: 		startConsumerBroker();
0: 
0: 		MessageConsumer consumer = createConsumer();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
0: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
0: 		
0: 		assertEquals(messageId, message.getJMSMessageID());
0: 		
0: 		assertNull( consumer.receiveNoWait() );
0: 		
0: 	}
0: 
0: 	public void testWithProducerBrokerRestart() throws Exception {
0: 		startProducerBroker();
0: 		startConsumerBroker();
0: 
0: 		MessageConsumer consumer = createConsumer();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
0: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
0: 		
0: 		assertEquals(messageId, message.getJMSMessageID());		
0: 		assertNull( consumer.receiveNoWait() );
0: 		
0: 		// Restart the first broker...
0: 		stopProducerBroker();
0: 		startProducerBroker();
0: 		
0: 		counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
0: 		
0: 		messageId = sendMessage();
0: 		message = consumer.receive(1000);
0: 		
0: 		assertEquals(messageId, message.getJMSMessageID());		
0: 		assertNull( consumer.receiveNoWait() );
0: 		
0: 	}
0: 
0: 	public void testWithConsumerBrokerRestart() throws Exception {
0: 
0: 		startProducerBroker();
0: 		startConsumerBroker();
0: 
0: 		MessageConsumer consumer = createConsumer();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
0: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
0: 		
0: 		assertEquals(messageId, message.getJMSMessageID());		
0: 		assertNull( consumer.receiveNoWait() );
0: 		
0: 		// Restart the first broker...
0: 		stopConsumerBroker();		
0: 		waitForConsumerToLeave(counter);		
0: 		startConsumerBroker();
0: 		
0: 		consumer = createConsumer();
0: 		waitForConsumerToArrive(counter);
0: 		
0: 		messageId = sendMessage();
0: 		message = consumer.receive(1000);
0: 		
0: 		assertEquals(messageId, message.getJMSMessageID());		
0: 		assertNull( consumer.receiveNoWait() );
0: 		
0: 	}
0: 	
0: 	public void testWithConsumerBrokerStartDelay() throws Exception {
0: 		
0: 		startConsumerBroker();
0: 		MessageConsumer consumer = createConsumer();
0: 		
0: 		Thread.sleep(1000*5);
0: 		
0: 		startProducerBroker();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
0: 		waitForConsumerToArrive(counter);
0: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
0: 		
0: 		assertEquals(messageId, message.getJMSMessageID());
0: 		
0: 		assertNull( consumer.receiveNoWait() );
0: 
0: 	}
0: 
0: 	
0: 	public void testWithProducerBrokerStartDelay() throws Exception {
0: 		
0: 		startProducerBroker();
0: 		AtomicInteger counter = createConsumerCounter(producerConnectionFactory);
0: 
0: 		Thread.sleep(1000*5);
0: 		
0: 		startConsumerBroker();
0: 		MessageConsumer consumer = createConsumer();
0: 				
0: 		waitForConsumerToArrive(counter);
0: 		
0: 		String messageId = sendMessage();
0: 		Message message = consumer.receive(1000);
0: 		
0: 		assertEquals(messageId, message.getJMSMessageID());
0: 		
0: 		assertNull( consumer.receiveNoWait() );
0: 
0: 	}
0: 
0: 	protected void setUp() throws Exception {
0: 		producerConnectionFactory = createProducerConnectionFactory();
0: 		consumerConnectionFactory = createConsumerConnectionFactory();
0: 		destination = new ActiveMQQueue("RECONNECT.TEST.QUEUE");
0: 		
0: 	}
0: 	
0: 	protected void tearDown() throws Exception {
0: 		disposeConsumerConnections();
0: 		try {
0: 			stopProducerBroker();
0: 		} catch (Throwable e) {
0: 		}
0: 		try {
0: 			stopConsumerBroker();
0: 		} catch (Throwable e) {
0: 		}
0: 	}
0: 	
0: 	protected void disposeConsumerConnections() {
0: 		for (Iterator iter = connections.iterator(); iter.hasNext();) {
0: 			Connection connection = (Connection) iter.next();
0: 			try { connection.close(); } catch (Throwable ignore) {}
0: 		}
0: 	}
0: 	
0: 	protected void startProducerBroker() throws Exception {
0: 		if( producerBroker==null ) {
0: 			producerBroker = createFirstBroker();
0: 			producerBroker.start();
0: 		}
0: 	}
0: 	
0: 	protected void stopProducerBroker() throws Exception {
0: 		if( producerBroker!=null ) {
0: 			producerBroker.stop();
0: 			producerBroker=null;
0: 		}
0: 	}
0: 	
0: 	protected void startConsumerBroker() throws Exception {
0: 		if( consumerBroker==null ) {
0: 			consumerBroker = createSecondBroker();
0: 			consumerBroker.start();
0: 		}
0: 	}
0: 	
0: 	protected void stopConsumerBroker() throws Exception {
0: 		if( consumerBroker!=null ) {
0: 			consumerBroker.stop();
0: 			consumerBroker=null;
0: 		}
0: 	}
0: 	
0: 	protected BrokerService createFirstBroker() throws Exception {
0: 		return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker1.xml"));
0: 	}
0: 	
0: 	protected BrokerService createSecondBroker() throws Exception {
0: 		return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/reconnect-broker2.xml"));
0: 	}
0: 
0: 	protected ActiveMQConnectionFactory createProducerConnectionFactory() {
0: 		return new ActiveMQConnectionFactory("vm://broker1");
0: 	}
0: 	
0: 	protected ActiveMQConnectionFactory createConsumerConnectionFactory() {
0: 		return new ActiveMQConnectionFactory("vm://broker2");
0: 	}
0: 	
0: 	protected String sendMessage() throws JMSException {
0: 		Connection connection = null;
0: 		try {
0: 			connection = producerConnectionFactory.createConnection();
0: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 			MessageProducer producer = session.createProducer(destination);
0: 			Message message = session.createMessage();
0: 			producer.send(message);
0: 			return message.getJMSMessageID();
0: 		} finally {
0: 			try { connection.close(); } catch (Throwable ignore) {}
0: 		}
0: 	}
0: 	
0: 	protected MessageConsumer createConsumer() throws JMSException {
0: 		Connection connection = consumerConnectionFactory.createConnection();
0: 		connections.add(connection);
0: 		connection.start();
0: 		
0: 		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		return  session.createConsumer(destination);
0: 	}
0: 	
0: 	protected AtomicInteger createConsumerCounter(ActiveMQConnectionFactory cf) throws Exception {
0: 		final AtomicInteger rc = new AtomicInteger(0);
0: 		Connection connection  = cf.createConnection();
0: 		connections.add(connection);
0: 		connection.start();
0: 		
0: 		ConsumerEventSource source = new ConsumerEventSource(connection, destination);
0: 		source.setConsumerListener(new ConsumerListener(){
0: 			public void onConsumerEvent(ConsumerEvent event) {
0: 				rc.set(event.getConsumerCount());
0: 			}
0: 		});
0: 		source.start();
0: 		
0: 		return rc;
0: 	}
0: 	
0: 	protected void waitForConsumerToArrive(AtomicInteger consumerCounter) throws InterruptedException {
0: 		for( int i=0; i < 100; i++ ) {
0: 			if( consumerCounter.get() > 0 ) {
0: 				return;
0: 			}
0: 			Thread.sleep(50);
0: 		}
0: 		fail("The consumer did not arrive.");
0: 	}
0: 	
0: 	protected void waitForConsumerToLeave(AtomicInteger consumerCounter) throws InterruptedException {
0: 		for( int i=0; i < 100; i++ ) {
0: 			if( consumerCounter.get() == 0 ) {
0: 				return;
0: 			}
0: 			Thread.sleep(50);
0: 		}
0: 		fail("The consumer did not leave.");
0: 	}
0: 
0: }
============================================================================