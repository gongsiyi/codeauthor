1:960dce7: /**
1:960dce7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:960dce7:  * contributor license agreements.  See the NOTICE file distributed with
1:960dce7:  * this work for additional information regarding copyright ownership.
1:960dce7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:960dce7:  * (the "License"); you may not use this file except in compliance with
1:960dce7:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:960dce7:  * Unless required by applicable law or agreed to in writing, software
1:960dce7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:960dce7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:960dce7:  * See the License for the specific language governing permissions and
1:960dce7:  * limitations under the License.
1:960dce7:  */
1:ed5d43b: package org.apache.activemq.util;
2:ed5d43b: 
1:df7cb77: import org.apache.activemq.broker.Broker;
1:ed5d43b: import org.apache.activemq.broker.ConnectionContext;
1:84eb9f8: import org.apache.activemq.broker.ProducerBrokerExchange;
1:ed5d43b: import org.apache.activemq.command.ActiveMQDestination;
1:ed5d43b: import org.apache.activemq.command.Message;
1:3baaab2: import org.apache.activemq.command.ProducerInfo;
1:df7cb77: import org.apache.activemq.security.SecurityContext;
1:3baaab2: import org.apache.activemq.state.ProducerState;
1:f812e34: 
1:ed5d43b: /**
1:df7cb77:  * Utility class for broker operations
2:960dce7:  *
1:c128634:  */
1:933eb2f: public final class BrokerSupport {
1:ed5d43b: 
1:505a76a:     private BrokerSupport() {
1:933eb2f:     }
1:505a76a: 
1:a1bd85e:     public static void resendNoCopy(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination) throws Exception {
1:a1bd85e:         doResend(context, originalMessage, deadLetterDestination, false);
1:f812e34:     }
1:505a76a: 
1:df7cb77:     /**
1:ed5d43b:      * @param context
1:505a76a:      * @param originalMessage
1:ed5d43b:      * @param deadLetterDestination
1:7f5213b:      * @throws Exception
1:ed5d43b:      */
1:c128634:     public static void resend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination) throws Exception {
1:a1bd85e:         doResend(context, originalMessage, deadLetterDestination, true);
1:f812e34:     }
1:505a76a: 
1:505a76a:     public static void doResend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination, boolean copy) throws Exception {
1:a1bd85e:         Message message = copy ? originalMessage.copy() : originalMessage;
1:ed5d43b:         message.setOriginalDestination(message.getDestination());
1:f812e34:         message.setOriginalTransactionId(message.getTransactionId());
1:ed5d43b:         message.setDestination(deadLetterDestination);
1:ed5d43b:         message.setTransactionId(null);
1:9b260dc:         message.setMemoryUsage(null);
1:1b45e3b:         message.setRedeliveryCounter(0);
1:505a76a:         message.getMessageId().setDataLocator(null);
1:f812e34:         boolean originalFlowControl = context.isProducerFlowControl();
1:f812e34:         try {
1:ed5d43b:             context.setProducerFlowControl(false);
1:3baaab2:             ProducerInfo info = new ProducerInfo();
1:3baaab2:             ProducerState state = new ProducerState(info);
1:84eb9f8:             ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:3baaab2:             producerExchange.setProducerState(state);
1:84eb9f8:             producerExchange.setMutable(true);
1:84eb9f8:             producerExchange.setConnectionContext(context);
1:f812e34:             context.getBroker().send(producerExchange, message);
1:f812e34:         } finally {
1:ed5d43b:             context.setProducerFlowControl(originalFlowControl);
1:ed5d43b:         }
1:ed5d43b:     }
1:933eb2f: 
1:c128634:     /**
1:df7cb77:      * Returns the broker's administration connection context used for
1:df7cb77:      * configuring the broker at startup
1:df7cb77:      */
1:df7cb77:     public static ConnectionContext getConnectionContext(Broker broker) {
1:df7cb77:         ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
1:df7cb77:         if (adminConnectionContext == null) {
1:df7cb77:             adminConnectionContext = createAdminConnectionContext(broker);
1:df7cb77:             broker.setAdminConnectionContext(adminConnectionContext);
1:ed5d43b:         }
1:df7cb77:         return adminConnectionContext;
1:a1bd85e:     }
1:ed5d43b: 
1:df7cb77:     /**
1:df7cb77:      * Factory method to create the new administration connection context
1:df7cb77:      * object. Note this method is here rather than inside a default broker
1:df7cb77:      * implementation to ensure that the broker reference inside it is the outer
1:df7cb77:      * most interceptor
1:df7cb77:      */
1:df7cb77:     protected static ConnectionContext createAdminConnectionContext(Broker broker) {
1:df7cb77:         ConnectionContext context = new ConnectionContext();
1:df7cb77:         context.setBroker(broker);
1:df7cb77:         context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
1:df7cb77:         return context;
1:a1bd85e:     }
3:df7cb77: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:505a76a
/////////////////////////////////////////////////////////////////////////
1:     private BrokerSupport() {
1: 
1: 
1:      * @param originalMessage
1: 
1:     public static void doResend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination, boolean copy) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         message.getMessageId().setDataLocator(null);
author:gtully
-------------------------------------------------------------------------------
commit:b6fea83
/////////////////////////////////////////////////////////////////////////
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:1cab713
/////////////////////////////////////////////////////////////////////////
0:         message.getMessageId().setFutureOrSequenceLong(null);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class BrokerSupport {
0:     private BrokerSupport() {        
1:     }
1:     
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
/////////////////////////////////////////////////////////////////////////
0:     public static void resend(final ConnectionContext context, Message message, ActiveMQDestination deadLetterDestination) throws Exception {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (message.getOriginalDestination() != null) {
1:         }
0:         if (message.getOriginalTransactionId() != null) {
1:             message.setOriginalTransactionId(message.getTransactionId());
1:         }
1:         boolean originalFlowControl = context.isProducerFlowControl();
1:         try {
/////////////////////////////////////////////////////////////////////////
1:             context.getBroker().send(producerExchange, message);
1:         } finally {
commit:a0e92d7
/////////////////////////////////////////////////////////////////////////
commit:960dce7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception
0:     static public void resend(final ConnectionContext context, Message message, ActiveMQDestination deadLetterDestination) throws Exception {
commit:ed5d43b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.util;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: 
0: public class BrokerSupport {
1:     
1:     /**
1:      * @param context
0:      * @param message
1:      * @param deadLetterDestination
0:      * @throws Throwable
1:      */
0:     static public void resend(final ConnectionContext context, Message message, ActiveMQDestination deadLetterDestination) throws Throwable {
0:         if(message.getOriginalDestination()!=null)
1:             message.setOriginalDestination(message.getDestination());
0:         if(message.getOriginalTransactionId()!=null)
0:             message.setOriginalTransactionId(message.getTransactionId());                            
1:         message.setDestination(deadLetterDestination);
1:         message.setTransactionId(null);
0:         message.evictMarshlledForm();
0:         boolean originalFlowControl=context.isProducerFlowControl();
0:         try{
1:             context.setProducerFlowControl(false);
0:             context.getBroker().send(context,message);
0:         }finally{
1:             context.setProducerFlowControl(originalFlowControl);
1:         }
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:1b45e3b
/////////////////////////////////////////////////////////////////////////
1:         message.setRedeliveryCounter(0);
commit:9b260dc
/////////////////////////////////////////////////////////////////////////
1:         message.setMemoryUsage(null);
commit:a1bd85e
/////////////////////////////////////////////////////////////////////////
1:     public static void resendNoCopy(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination) throws Exception {
1:         doResend(context, originalMessage, deadLetterDestination, false);
1:     }
0:     
/////////////////////////////////////////////////////////////////////////
1:         doResend(context, originalMessage, deadLetterDestination, true);
1:     }
0:     
0:     public static void doResend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination, boolean copy) throws Exception {       
1:         Message message = copy ? originalMessage.copy() : originalMessage;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:df7cb77
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.security.SecurityContext;
1:  * Utility class for broker operations
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the broker's administration connection context used for
1:      * configuring the broker at startup
1:      */
1:     public static ConnectionContext getConnectionContext(Broker broker) {
1:         ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
1:         if (adminConnectionContext == null) {
1:             adminConnectionContext = createAdminConnectionContext(broker);
1:             broker.setAdminConnectionContext(adminConnectionContext);
1:         }
1:         return adminConnectionContext;
1:     }
0: 
1:     /**
1:      * Factory method to create the new administration connection context
1:      * object. Note this method is here rather than inside a default broker
1:      * implementation to ensure that the broker reference inside it is the outer
1:      * most interceptor
1:      */
1:     protected static ConnectionContext createAdminConnectionContext(Broker broker) {
1:         ConnectionContext context = new ConnectionContext();
1:         context.setBroker(broker);
1:         context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
1:         return context;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:c128634
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Utility class for re-sending messages
0:  *
1:  */
/////////////////////////////////////////////////////////////////////////
0:      * @param originalMessage 
1:     public static void resend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination) throws Exception {
0:         Message message = originalMessage.copy();
0:         message.setOriginalDestination(message.getDestination());
0:         message.setOriginalTransactionId(message.getTransactionId());
commit:3baaab2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.state.ProducerState;
/////////////////////////////////////////////////////////////////////////
1:             ProducerInfo info = new ProducerInfo();
1:             ProducerState state = new ProducerState(info);
1:             producerExchange.setProducerState(state);
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
1:             ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:             producerExchange.setMutable(true);
1:             producerExchange.setConnectionContext(context);
0:             context.getBroker().send(producerExchange,message);
============================================================================