1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network.jms;
3:d29ca2a: 
1:ef0127d: import javax.jms.Connection;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: import javax.jms.TopicConnection;
1:d29ca2a: import javax.jms.TopicPublisher;
1:d29ca2a: import javax.jms.TopicSession;
1:f812e34: 
1:d29ca2a: /**
1:d29ca2a:  * A Destination bridge is used to bridge between to different JMS systems
1:b0c2a40:  *
1:d29ca2a:  *
1:d29ca2a:  */
1:f812e34: class TopicBridge extends DestinationBridge {
1:d29ca2a:     protected Topic consumerTopic;
1:d29ca2a:     protected Topic producerTopic;
1:d29ca2a:     protected TopicSession consumerSession;
1:d29ca2a:     protected TopicSession producerSession;
1:d29ca2a:     protected String consumerName;
1:d29ca2a:     protected String selector;
1:d29ca2a:     protected TopicPublisher producer;
1:d29ca2a:     protected TopicConnection consumerConnection;
1:d29ca2a:     protected TopicConnection producerConnection;
1:d29ca2a: 
1:5e05df1:     @Override
1:f812e34:     public void stop() throws Exception {
1:d29ca2a:         super.stop();
1:f812e34:         if (consumerSession != null) {
1:d29ca2a:             consumerSession.close();
1:d29ca2a:         }
1:f812e34:         if (producerSession != null) {
1:d29ca2a:             producerSession.close();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:5e05df1:     @Override
1:f812e34:     protected MessageConsumer createConsumer() throws JMSException {
1:d29ca2a:         // set up the consumer
1:bc78238:         if (consumerConnection == null) return null;
1:f812e34:         consumerSession = consumerConnection.createTopicSession(false, Session.CLIENT_ACKNOWLEDGE);
1:f812e34:         MessageConsumer consumer = null;
1:f812e34:         if (consumerName != null && consumerName.length() > 0) {
1:f812e34:             if (selector != null && selector.length() > 0) {
1:f812e34:                 consumer = consumerSession.createDurableSubscriber(consumerTopic, consumerName, selector,
1:f812e34:                                                                    false);
1:f812e34:             } else {
1:f812e34:                 consumer = consumerSession.createDurableSubscriber(consumerTopic, consumerName);
1:d29ca2a:             }
1:f812e34:         } else {
1:f812e34:             if (selector != null && selector.length() > 0) {
1:f812e34:                 consumer = consumerSession.createSubscriber(consumerTopic, selector, false);
1:f812e34:             } else {
1:f812e34:                 consumer = consumerSession.createSubscriber(consumerTopic);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a: 
1:bc78238:         consumer.setMessageListener(this);
1:d29ca2a: 
1:d29ca2a:         return consumer;
1:d29ca2a:     }
1:f812e34: 
1:5e05df1:     @Override
1:f812e34:     protected synchronized MessageProducer createProducer() throws JMSException {
1:bc78238:         if (producerConnection == null) return null;
1:f812e34:         producerSession = producerConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         producer = producerSession.createPublisher(null);
1:d29ca2a:         return producer;
1:d29ca2a:     }
1:f812e34: 
1:5e05df1:     @Override
1:f812e34:     protected synchronized void sendMessage(Message message) throws JMSException {
1:bc78238:         if (producer == null && createProducer() == null) {
1:bc78238:             throw new JMSException("Producer for remote queue not available.");
1:d29ca2a:         }
1:bc78238:         try {
1:f812e34:             producer.publish(producerTopic, message);
1:bc78238:         } catch (JMSException e) {
1:bc78238:             producer = null;
1:bc78238:             throw e;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the consumerConnection.
1:d29ca2a:      */
1:f812e34:     public TopicConnection getConsumerConnection() {
1:d29ca2a:         return consumerConnection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @param consumerConnection The consumerConnection to set.
1:d29ca2a:      */
1:f812e34:     public void setConsumerConnection(TopicConnection consumerConnection) {
1:f812e34:         this.consumerConnection = consumerConnection;
1:bc78238:         if (started.get()) {
1:bc78238:             try {
1:bc78238:                 createConsumer();
1:bc78238:             } catch(Exception e) {
1:bc78238:                 jmsConnector.handleConnectionFailure(getConnnectionForConsumer());
1:d29ca2a:             }
1:bc78238:         }
1:bc78238:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:5e05df1:      * @return Returns the consumerName.
1:d29ca2a:      */
1:f812e34:     public String getConsumerName() {
1:d29ca2a:         return consumerName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:5e05df1:      * @param consumerName The consumerName to set.
1:d29ca2a:      */
1:f812e34:     public void setConsumerName(String consumerName) {
1:f812e34:         this.consumerName = consumerName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the consumerTopic.
1:d29ca2a:      */
1:f812e34:     public Topic getConsumerTopic() {
1:d29ca2a:         return consumerTopic;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @param consumerTopic The consumerTopic to set.
1:d29ca2a:      */
1:f812e34:     public void setConsumerTopic(Topic consumerTopic) {
1:f812e34:         this.consumerTopic = consumerTopic;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the producerConnection.
1:d29ca2a:      */
1:f812e34:     public TopicConnection getProducerConnection() {
1:d29ca2a:         return producerConnection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @param producerConnection The producerConnection to set.
1:d29ca2a:      */
1:f812e34:     public void setProducerConnection(TopicConnection producerConnection) {
1:f812e34:         this.producerConnection = producerConnection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the producerTopic.
1:d29ca2a:      */
1:f812e34:     public Topic getProducerTopic() {
1:d29ca2a:         return producerTopic;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @param producerTopic The producerTopic to set.
1:d29ca2a:      */
1:f812e34:     public void setProducerTopic(Topic producerTopic) {
1:f812e34:         this.producerTopic = producerTopic;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the selector.
1:d29ca2a:      */
1:f812e34:     public String getSelector() {
1:d29ca2a:         return selector;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @param selector The selector to set.
1:d29ca2a:      */
1:f812e34:     public void setSelector(String selector) {
1:f812e34:         this.selector = selector;
1:d29ca2a:     }
1:f812e34: 
1:5e05df1:     @Override
1:f812e34:     protected Connection getConnnectionForConsumer() {
1:ef0127d:         return getConsumerConnection();
1:d29ca2a:     }
1:f812e34: 
1:5e05df1:     @Override
1:f812e34:     protected Connection getConnectionForProducer() {
1:ef0127d:         return getProducerConnection();
1:86cbdfd:     }
1:bc78238: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      * @return Returns the consumerName.
1:      * @param consumerName The consumerName to set.
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: class TopicBridge extends DestinationBridge {
/////////////////////////////////////////////////////////////////////////
1:     public void stop() throws Exception {
1:         if (consumerSession != null) {
1:         if (producerSession != null) {
1:     protected MessageConsumer createConsumer() throws JMSException {
1:         consumerSession = consumerConnection.createTopicSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = null;
1:         if (consumerName != null && consumerName.length() > 0) {
1:             if (selector != null && selector.length() > 0) {
1:                 consumer = consumerSession.createDurableSubscriber(consumerTopic, consumerName, selector,
1:                                                                    false);
1:             } else {
1:                 consumer = consumerSession.createDurableSubscriber(consumerTopic, consumerName);
1:         } else {
1:             if (selector != null && selector.length() > 0) {
1:                 consumer = consumerSession.createSubscriber(consumerTopic, selector, false);
1:             } else {
1:                 consumer = consumerSession.createSubscriber(consumerTopic);
1: 
1:     protected synchronized MessageProducer createProducer() throws JMSException {
1:         producerSession = producerConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:     protected synchronized void sendMessage(Message message) throws JMSException {
1:         producer.publish(producerTopic, message);
1:     public TopicConnection getConsumerConnection() {
1:      * @param consumerConnection The consumerConnection to set.
1:     public void setConsumerConnection(TopicConnection consumerConnection) {
1:         this.consumerConnection = consumerConnection;
1:     public String getConsumerName() {
0:      * @param subscriptionName The subscriptionName to set.
1:     public void setConsumerName(String consumerName) {
1:         this.consumerName = consumerName;
1:     public Topic getConsumerTopic() {
1:      * @param consumerTopic The consumerTopic to set.
1:     public void setConsumerTopic(Topic consumerTopic) {
1:         this.consumerTopic = consumerTopic;
1:     public TopicConnection getProducerConnection() {
1:      * @param producerConnection The producerConnection to set.
1:     public void setProducerConnection(TopicConnection producerConnection) {
1:         this.producerConnection = producerConnection;
1:     public Topic getProducerTopic() {
1:      * @param producerTopic The producerTopic to set.
1:     public void setProducerTopic(Topic producerTopic) {
1:         this.producerTopic = producerTopic;
1:     public String getSelector() {
1:      * @param selector The selector to set.
1:     public void setSelector(String selector) {
1:         this.selector = selector;
1: 
1:     protected Connection getConnnectionForConsumer() {
1: 
1:     protected Connection getConnectionForProducer() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network.jms;
1: 
0: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: /**
1:  * A Destination bridge is used to bridge between to different JMS systems
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: class TopicBridge extends DestinationBridge{
1:     protected Topic consumerTopic;
1:     protected Topic producerTopic;
1:     protected TopicSession consumerSession;
1:     protected TopicSession producerSession;
1:     protected String consumerName;
1:     protected String selector;
1:     protected TopicPublisher producer;
1:     protected TopicConnection consumerConnection;
1:     protected TopicConnection producerConnection;
0:     protected JmsTopicConnector jmsTopicConnector;
1: 
0:     public void stop() throws Exception{
1:         super.stop();
0:         if(consumerSession!=null){
1:             consumerSession.close();
1:         }
0:         if(producerSession!=null){
1:             producerSession.close();
1:         }
1:     }
1:     
0:     protected void setJmsTopicConnector(JmsTopicConnector connector){
0:         this.jmsTopicConnector = connector;
1:     }
1: 
0:     protected MessageConsumer createConsumer() throws JMSException{
1:         // set up the consumer
0:         consumerSession=consumerConnection.createTopicSession(false,Session.CLIENT_ACKNOWLEDGE);
0:         producerSession=producerConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer=null;
0:         if(consumerName!=null&&consumerName.length()>0){
0:             if(selector!=null&&selector.length()>0){
0:                 consumer=consumerSession.createDurableSubscriber(consumerTopic,consumerName,selector,false);
0:             }else{
0:                 consumer=consumerSession.createDurableSubscriber(consumerTopic,consumerName);
1:             }
0:         }else{
0:             if(selector!=null&&selector.length()>0){
0:                 consumer=consumerSession.createSubscriber(consumerTopic,selector,false);
0:             }else{
0:                 consumer=consumerSession.createSubscriber(consumerTopic);
1:             }
1:         }
1:         return consumer;
1:     }
1:     
0:     protected Destination processReplyToDestination (Destination destination){
0:         Topic topic = (Topic)destination;
0:         return jmsTopicConnector.createReplyToTopicBridge(topic, getConsumerConnection(), getProducerConnection());
1:     }
1:     
0:     protected MessageProducer createProducer() throws JMSException{
1:         producer = producerSession.createPublisher(null);
1:         return producer;
1:     }
1:     
0:     protected void sendMessage(Message message) throws JMSException{
0:         producer.publish(producerTopic,message);
1:     }
1: 
1:     /**
1:      * @return Returns the consumerConnection.
1:      */
0:     public TopicConnection getConsumerConnection(){
1:         return consumerConnection;
1:     }
1: 
1:     /**
0:      * @param consumerConnection
0:      *            The consumerConnection to set.
1:      */
0:     public void setConsumerConnection(TopicConnection consumerConnection){
0:         this.consumerConnection=consumerConnection;
1:     }
1: 
1:     /**
0:      * @return Returns the consumerName.
1:      */
0:     public String getConsumerName(){
1:         return consumerName;
1:     }
1: 
1:     /**
0:      * @param consumerName
0:      *            The consumerName to set.
1:      */
0:     public void setConsumerName(String consumerName){
0:         this.consumerName=consumerName;
1:     }
1: 
1:     /**
1:      * @return Returns the consumerTopic.
1:      */
0:     public Topic getConsumerTopic(){
1:         return consumerTopic;
1:     }
1: 
1:     /**
0:      * @param consumerTopic
0:      *            The consumerTopic to set.
1:      */
0:     public void setConsumerTopic(Topic consumerTopic){
0:         this.consumerTopic=consumerTopic;
1:     }
1: 
1:     /**
1:      * @return Returns the producerConnection.
1:      */
0:     public TopicConnection getProducerConnection(){
1:         return producerConnection;
1:     }
1: 
1:     /**
0:      * @param producerConnection
0:      *            The producerConnection to set.
1:      */
0:     public void setProducerConnection(TopicConnection producerConnection){
0:         this.producerConnection=producerConnection;
1:     }
1: 
1:     /**
1:      * @return Returns the producerTopic.
1:      */
0:     public Topic getProducerTopic(){
1:         return producerTopic;
1:     }
1: 
1:     /**
0:      * @param producerTopic
0:      *            The producerTopic to set.
1:      */
0:     public void setProducerTopic(Topic producerTopic){
0:         this.producerTopic=producerTopic;
1:     }
1: 
1:     /**
1:      * @return Returns the selector.
1:      */
0:     public String getSelector(){
1:         return selector;
1:     }
1: 
1:     /**
0:      * @param selector
0:      *            The selector to set.
1:      */
0:     public void setSelector(String selector){
0:         this.selector=selector;
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:bc78238
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1:         if (consumerConnection == null) return null;
/////////////////////////////////////////////////////////////////////////
0: 
1:         consumer.setMessageListener(this);
0: 
1:         if (producerConnection == null) return null;
1:         if (producer == null && createProducer() == null) {
1:             throw new JMSException("Producer for remote queue not available.");
1:         try {
0:             producer.publish(producerTopic, message);
1:         } catch (JMSException e) {
1:             producer = null;
1:             throw e;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (started.get()) {
1:             try {
1:                 createConsumer();
1:             } catch(Exception e) {
1:                 jmsConnector.handleConnectionFailure(getConnnectionForConsumer());
1:             }
1:         }
author:James Strachan
-------------------------------------------------------------------------------
commit:833eefb
/////////////////////////////////////////////////////////////////////////
0:     protected synchronized MessageProducer createProducer() throws JMSException{
0:     protected synchronized void sendMessage(Message message) throws JMSException{
0:         if (producer == null) {
0:             createProducer();
0:         }
commit:fbad105
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         producerSession=producerConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
author:Robert Davies
-------------------------------------------------------------------------------
commit:3601e81
/////////////////////////////////////////////////////////////////////////
0:      * @return Returns the subscriptionName.
0:      * @param subscriptionName
0:      *            The subscriptionName to set.
commit:ef0127d
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected Connection getConnnectionForConsumer(){
1:         return getConsumerConnection();
0:     }
0:     
0:     protected Connection getConnectionForProducer(){
1:         return getProducerConnection();
0:     }
commit:49e8a80
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:    
/////////////////////////////////////////////////////////////////////////
0:     
============================================================================