1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
1:8b0bb33: 
1:a677c21: import java.net.URI;
1:eb983f7: import java.util.Collection;
1:8b0bb33: import java.util.HashMap;
1:eb983f7: import java.util.Iterator;
1:8b0bb33: 
1:74a7a8b: import javax.jms.Destination;
1:74a7a8b: import javax.jms.MessageConsumer;
1:eb983f7: import javax.jms.Topic;
1:74a7a8b: 
1:8b0bb33: import junit.framework.Test;
1:8b0bb33: 
1:74a7a8b: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:eb983f7: import org.apache.activemq.broker.BrokerService;
1:eb983f7: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:eb983f7: import org.apache.activemq.broker.region.policy.PolicyMap;
1:25e3c1b: import org.apache.activemq.command.ActiveMQDestination;
1:74a7a8b: import org.apache.activemq.util.MessageIdList;
1:74a7a8b: 
1:a677c21: /**
1:4743a20:  *
1:a677c21:  */
1:a677c21: public class ThreeBrokerTopicNetworkTest extends JmsMultipleBrokersTestSupport {
1:a677c21:     protected static final int MESSAGE_COUNT = 100;
1:8b0bb33:     public boolean dynamicOnly;
12:a677c21: 
1:a677c21:     /**
1:a677c21:      * BrokerA -> BrokerB -> BrokerC
1:a677c21:      */
1:fc00993:     public void testABandBCbrokerNetwork() throws Exception {
1:8b0bb33:         // Setup broker networks
1:a677c21:         bridgeBrokers("BrokerA", "BrokerB");
1:a677c21:         bridgeBrokers("BrokerB", "BrokerC");
1:a677c21: 
1:a677c21:         startAllBrokers();
1:a677c21: 
1:a677c21:         // Setup destination
1:a677c21:         Destination dest = createDestination("TEST.FOO", true);
1:a677c21: 
1:a677c21:         // Setup consumers
1:a677c21:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:a677c21:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:a677c21:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:4743a20: 
1:f92d45b:         //let consumers propagate around the network
1:a677c21:         Thread.sleep(2000);
1:a677c21:         // Send messages
1:a677c21:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1:4743a20: 
1:a677c21:         // Get message count
1:a677c21:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:a677c21:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:a677c21:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1:a677c21: 
1:a677c21:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:a677c21:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 2);
1:a677c21:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 2);
1:a677c21: 
1:a677c21:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT * 2, msgsB.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT * 2, msgsC.getMessageCount());
1:25e3c1b: 
1:25e3c1b:         assertEquals("Correct forwards from A", MESSAGE_COUNT,
1:25e3c1b:                 brokers.get("BrokerA").broker.getDestination(ActiveMQDestination.transform(dest)).getDestinationStatistics().getForwards().getCount());
1:a677c21:     }
1:4743a20: 
1:8b0bb33:     public void initCombosForTestABandBCbrokerNetworkWithSelectors() {
1:4743a20:         addCombinationValues("dynamicOnly", new Object[] {true, false});
1:8b0bb33:     }
1:4743a20: 
1:8b0bb33:     /**
1:8b0bb33:      * BrokerA -> BrokerB -> BrokerC
1:8b0bb33:      */
1:8b0bb33:     public void testABandBCbrokerNetworkWithSelectors() throws Exception {
1:eb983f7:         // Setup broker networks
1:8b0bb33:         bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, 2, true);
1:8b0bb33:         bridgeBrokers("BrokerB", "BrokerC", dynamicOnly, 2, true);
1:8b0bb33: 
1:8b0bb33:         startAllBrokers();
1:8b0bb33: 
1:8b0bb33:         // Setup destination
1:8b0bb33:         Destination dest = createDestination("TEST.FOO", true);
1:8b0bb33: 
1:8b0bb33:         // Setup consumers
1:8b0bb33:         MessageConsumer clientA = createConsumer("BrokerC", dest, "dummy = 33");
1:8b0bb33:         MessageConsumer clientB = createConsumer("BrokerC", dest, "dummy > 30");
1:8b0bb33:         MessageConsumer clientC = createConsumer("BrokerC", dest, "dummy = 34");
1:8b0bb33: 
1:8b0bb33:         // let consumers propogate around the network
1:8b0bb33:         Thread.sleep(2000);
1:8b0bb33:         // Send messages
1:8b0bb33:         // Send messages for broker A
1:8b0bb33:         HashMap<String, Object> props = new HashMap<String, Object>();
1:8b0bb33:         props.put("dummy", 33);
1:8b0bb33:         sendMessages("BrokerA", dest, MESSAGE_COUNT, props);
1:8b0bb33:         props.put("dummy", 34);
1:8b0bb33:         sendMessages("BrokerA", dest, MESSAGE_COUNT * 2, props);
1:8b0bb33: 
1:8b0bb33:         // Get message count
1:8b0bb33:         MessageIdList msgsA = getConsumerMessages("BrokerC", clientA);
1:8b0bb33:         MessageIdList msgsB = getConsumerMessages("BrokerC", clientB);
1:8b0bb33:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1:8b0bb33: 
1:8b0bb33:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:8b0bb33:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:8b0bb33:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 2) ;
1:8b0bb33: 
1:8b0bb33:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:8b0bb33:         assertEquals(MESSAGE_COUNT * 3, msgsB.getMessageCount());
1:8b0bb33:         assertEquals(MESSAGE_COUNT *2, msgsC.getMessageCount());
1:8b0bb33:     }
1:8b0bb33: 
1:a677c21:     /**
1:a677c21:      * BrokerA <- BrokerB -> BrokerC
1:a677c21:      */
1:fc00993:     public void testBAandBCbrokerNetwork() throws Exception {
3:a677c21:         // Setup broker networks
1:a677c21:         bridgeBrokers("BrokerB", "BrokerA");
1:a677c21:         bridgeBrokers("BrokerB", "BrokerC");
1:a677c21: 
1:a677c21:         startAllBrokers();
1:a677c21: 
1:a677c21:         // Setup destination
1:a677c21:         Destination dest = createDestination("TEST.FOO", true);
1:a677c21: 
1:a677c21:         // Setup consumers
1:a677c21:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:a677c21:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:a677c21:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:a677c21: 
1:f92d45b:         //let consumers propagate around the network
1:a677c21:         Thread.sleep(2000);
1:a677c21:         // Send messages
1:a677c21:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         // Get message count
1:a677c21:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:a677c21:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:a677c21:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1:a677c21: 
1:a677c21:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT * 2);
1:a677c21:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT);
1:a677c21:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 2);
1:a677c21: 
1:a677c21:         assertEquals(MESSAGE_COUNT * 2, msgsA.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT, msgsB.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT * 2, msgsC.getMessageCount());
1:a677c21:     }
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * BrokerA -> BrokerB <- BrokerC
1:a677c21:      */
1:fc00993:     public void testABandCBbrokerNetwork() throws Exception {
1:a677c21:         // Setup broker networks
1:a677c21:         bridgeBrokers("BrokerA", "BrokerB");
1:a677c21:         bridgeBrokers("BrokerC", "BrokerB");
1:a677c21: 
1:a677c21:         startAllBrokers();
1:a677c21: 
1:a677c21:         // Setup destination
1:a677c21:         Destination dest = createDestination("TEST.FOO", true);
1:a677c21: 
1:a677c21:         // Setup consumers
1:a677c21:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:a677c21:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:a677c21:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:a677c21: 
1:f92d45b:         //let consumers propagate around the network
1:a677c21:         Thread.sleep(2000);
1:a677c21: 
1:a677c21:         // Send messages
1:a677c21:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         // Get message count
1:a677c21:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:a677c21:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:a677c21:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1:a677c21: 
1:a677c21:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:a677c21:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:a677c21:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT * 3, msgsB.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT, msgsC.getMessageCount());
1:a677c21:     }
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * BrokerA <-> BrokerB <-> BrokerC
1:a677c21:      */
1:a677c21:     public void testAllConnectedBrokerNetwork() throws Exception {
1:a677c21:         // Setup broker networks
1:a677c21:         bridgeBrokers("BrokerA", "BrokerB");
1:a677c21:         bridgeBrokers("BrokerB", "BrokerA");
1:a677c21:         bridgeBrokers("BrokerB", "BrokerC");
1:a677c21:         bridgeBrokers("BrokerC", "BrokerB");
1:a677c21:         bridgeBrokers("BrokerA", "BrokerC");
1:a677c21:         bridgeBrokers("BrokerC", "BrokerA");
1:a677c21: 
1:a677c21:         startAllBrokers();
1:a677c21: 
1:a677c21:         // Setup destination
1:a677c21:         Destination dest = createDestination("TEST.FOO", true);
1:a677c21: 
1:a677c21:         // Setup consumers
1:a677c21:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:a677c21:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:a677c21:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:a677c21:         //let consumers propogate around the network
1:a677c21:         Thread.sleep(2000);
1:eb983f7: 
1:a677c21:         // Send messages
1:a677c21:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         // Get message count
1:a677c21:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:a677c21:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:a677c21:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1:a677c21: 
1:a677c21:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:a677c21:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:a677c21:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:a677c21: 
1:a677c21:         assertEquals(MESSAGE_COUNT * 3, msgsA.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT * 3, msgsB.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT * 3, msgsC.getMessageCount());
1:a677c21:     }
1:eb983f7: 
1:eb983f7:     public void testAllConnectedBrokerNetworkSingleProducerTTL() throws Exception {
1:4743a20: 
1:eb983f7:         // duplicates are expected with ttl of 2 as each broker is connected to the next
1:eb983f7:         // but the dups are suppressed by the store and now also by the topic sub when enableAudit
1:eb983f7:         // default (true) is present in a matching destination policy entry
1:eb983f7:         int networkTTL = 2;
1:eb983f7:         boolean conduitSubs = true;
1:f92d45b:         // Setup ring broker networks
1:eb983f7:         bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerB", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerC", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerC", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7: 
1:eb983f7:         PolicyMap policyMap = new PolicyMap();
1:eb983f7:         // enable audit is on by default just need to give it matching policy entry
1:eb983f7:         // so it will be applied to the topic subscription
1:eb983f7:         policyMap.setDefaultEntry(new PolicyEntry());
1:eb983f7:         Collection<BrokerItem> brokerList = brokers.values();
1:eb983f7:         for (Iterator<BrokerItem> i = brokerList.iterator(); i.hasNext();) {
1:eb983f7:             BrokerService broker = i.next().broker;
1:eb983f7:             broker.setDestinationPolicy(policyMap);
1:eb983f7:             broker.setDeleteAllMessagesOnStartup(true);
1:eb983f7:         }
1:eb983f7:         startAllBrokers();
1:eb983f7: 
1:eb983f7:         // Setup destination
1:eb983f7:         Destination dest = createDestination("TEST.FOO", true);
1:eb983f7: 
1:eb983f7:         // Setup consumers
1:eb983f7:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:eb983f7:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:eb983f7:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:eb983f7:         //let consumers propogate around the network
1:eb983f7:         Thread.sleep(2000);
1:eb983f7: 
1:eb983f7:         // Send messages
1:eb983f7:         sendMessages("BrokerA", dest, 1);
1:4743a20: 
1:eb983f7:         // Get message count
1:eb983f7:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:eb983f7:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:eb983f7:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1:eb983f7: 
1:eb983f7:         msgsA.waitForMessagesToArrive(1);
1:eb983f7:         msgsB.waitForMessagesToArrive(1);
1:eb983f7:         msgsC.waitForMessagesToArrive(1);
1:eb983f7: 
1:eb983f7:         // ensure we don't get any more messages
1:eb983f7:         Thread.sleep(2000);
1:4743a20: 
1:eb983f7:         assertEquals(1, msgsA.getMessageCount());
1:eb983f7:         assertEquals(1, msgsB.getMessageCount());
1:eb983f7:         assertEquals(1, msgsC.getMessageCount());
1:eb983f7:     }
1:4743a20: 
1:eb983f7:     public void testAllConnectedBrokerNetworkDurableSubTTL() throws Exception {
1:eb983f7:         int networkTTL = 2;
1:eb983f7:         boolean conduitSubs = true;
1:f92d45b:         // Setup ring broker network
1:eb983f7:         bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerB", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerC", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:eb983f7:         bridgeBrokers("BrokerC", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:4743a20: 
1:eb983f7:         startAllBrokers();
1:eb983f7: 
1:eb983f7:         // Setup destination
1:eb983f7:         Destination dest = createDestination("TEST.FOO", true);
1:eb983f7: 
1:eb983f7:         // Setup consumers
1:eb983f7:         MessageConsumer clientA = createDurableSubscriber("BrokerA", (Topic)dest, "clientA");
1:eb983f7:         MessageConsumer clientB = createDurableSubscriber("BrokerB", (Topic)dest, "clientB");
1:eb983f7:         MessageConsumer clientC = createDurableSubscriber("BrokerC", (Topic)dest, "clientC");
1:eb983f7:         //let consumers propogate around the network
1:eb983f7:         Thread.sleep(2000);
1:eb983f7: 
1:eb983f7:         // Send messages
1:eb983f7:         sendMessages("BrokerA", dest, 1);
1:eb983f7: 
1:eb983f7:         // Get message count
1:eb983f7:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:eb983f7:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:eb983f7:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1:eb983f7: 
1:eb983f7:         msgsA.waitForMessagesToArrive(1);
1:eb983f7:         msgsB.waitForMessagesToArrive(1);
1:eb983f7:         msgsC.waitForMessagesToArrive(1);
1:eb983f7: 
1:eb983f7:         // ensure we don't get any more messages
1:eb983f7:         Thread.sleep(2000);
1:eb983f7: 
1:eb983f7:         assertEquals(1, msgsA.getMessageCount());
1:eb983f7:         assertEquals(1, msgsB.getMessageCount());
1:eb983f7:         assertEquals(1, msgsC.getMessageCount());
1:eb983f7:     }
1:eb983f7: 
1:a677c21:     /**
1:a677c21:      * BrokerA <-> BrokerB <-> BrokerC
1:a677c21:      */
1:a677c21:     public void testAllConnectedUsingMulticast() throws Exception {
1:eb983f7:         // Setup broker networks
1:a677c21:         bridgeAllBrokers();
1:eb983f7: 
1:a677c21:         startAllBrokers();
1:eb983f7: 
1:a677c21:         // Setup destination
1:a677c21:         Destination dest = createDestination("TEST.FOO", true);
1:eb983f7: 
1:a677c21:         // Setup consumers
1:a677c21:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:a677c21:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:a677c21:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:a677c21: 
1:a677c21:         //let consumers propogate around the network
1:a677c21:         Thread.sleep(2000);
1:a677c21: 
1:a677c21:         // Send messages
1:a677c21:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:a677c21:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         // Get message count
1:a677c21:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:a677c21:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:a677c21:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1:a677c21: 
1:a677c21:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:a677c21:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:a677c21:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:a677c21: 
1:a677c21:         assertEquals(MESSAGE_COUNT * 3, msgsA.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT * 3, msgsB.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT * 3, msgsC.getMessageCount());
1:a677c21:     }
1:a677c21: 
1:4743a20:     @Override
1:a677c21:     public void setUp() throws Exception {
1:a677c21:         super.setAutoFail(true);
1:a677c21:         super.setUp();
1:4743a20:         String options = new String("?persistent=false&useJmx=false");
1:eb983f7:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:eb983f7:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1:eb983f7:         createBroker(new URI("broker:(tcp://localhost:61618)/BrokerC" + options));
1:a677c21:     }
1:4743a20: 
1:f92d45b:     @Override
1:f92d45b:     protected void configureBroker(BrokerService broker) {
1:f92d45b:         broker.setBrokerId(broker.getBrokerName());
1:f92d45b:     }
1:f92d45b: 
1:8b0bb33:     public static Test suite() {
1:4743a20:         return suite(ThreeBrokerTopicNetworkTest.class);
1:8b0bb33:     }
1:a677c21: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:25e3c1b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertEquals("Correct forwards from A", MESSAGE_COUNT,
1:                 brokers.get("BrokerA").broker.getDestination(ActiveMQDestination.transform(dest)).getDestinationStatistics().getForwards().getCount());
commit:f92d45b
/////////////////////////////////////////////////////////////////////////
1:         //let consumers propagate around the network
/////////////////////////////////////////////////////////////////////////
1:         //let consumers propagate around the network
/////////////////////////////////////////////////////////////////////////
1:         //let consumers propagate around the network
/////////////////////////////////////////////////////////////////////////
1:         // Setup ring broker networks
/////////////////////////////////////////////////////////////////////////
1:         // Setup ring broker network
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void configureBroker(BrokerService broker) {
1:         broker.setBrokerId(broker.getBrokerName());
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1:         addCombinationValues("dynamicOnly", new Object[] {true, false});
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         String options = new String("?persistent=false&useJmx=false");
1: 
1:         return suite(ThreeBrokerTopicNetworkTest.class);
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public void testABandBCbrokerNetwork() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testBAandBCbrokerNetwork() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testABandCBbrokerNetwork() throws Exception {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.util.MessageIdList;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:eb983f7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.Iterator;
1: import javax.jms.Topic;
0: import org.apache.activemq.JmsMultipleBrokersTestSupport.BrokerItem;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:     public void testAllConnectedBrokerNetworkSingleProducerTTL() throws Exception {
1:         
1:         // duplicates are expected with ttl of 2 as each broker is connected to the next
1:         // but the dups are suppressed by the store and now also by the topic sub when enableAudit
1:         // default (true) is present in a matching destination policy entry
1:         int networkTTL = 2;
1:         boolean conduitSubs = true;
1:         // Setup broker networks
1:         bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerB", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerC", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerC", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         // enable audit is on by default just need to give it matching policy entry
1:         // so it will be applied to the topic subscription
1:         policyMap.setDefaultEntry(new PolicyEntry());
1:         Collection<BrokerItem> brokerList = brokers.values();
1:         for (Iterator<BrokerItem> i = brokerList.iterator(); i.hasNext();) {
1:             BrokerService broker = i.next().broker;
1:             broker.setDestinationPolicy(policyMap);
1:             broker.setDeleteAllMessagesOnStartup(true);
1:         }
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:         //let consumers propogate around the network
1:         Thread.sleep(2000);
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, 1);
1:         
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1: 
1:         msgsA.waitForMessagesToArrive(1);
1:         msgsB.waitForMessagesToArrive(1);
1:         msgsC.waitForMessagesToArrive(1);
1: 
1:         // ensure we don't get any more messages
1:         Thread.sleep(2000);
1:         
1:         assertEquals(1, msgsA.getMessageCount());
1:         assertEquals(1, msgsB.getMessageCount());
1:         assertEquals(1, msgsC.getMessageCount());
1:     }
1: 
1:     public void testAllConnectedBrokerNetworkDurableSubTTL() throws Exception {
1:         int networkTTL = 2;
1:         boolean conduitSubs = true;
1:         // Setup broker networks
1:         bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerB", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerC", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeBrokers("BrokerC", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createDurableSubscriber("BrokerA", (Topic)dest, "clientA");
1:         MessageConsumer clientB = createDurableSubscriber("BrokerB", (Topic)dest, "clientB");
1:         MessageConsumer clientC = createDurableSubscriber("BrokerC", (Topic)dest, "clientC");
1:         //let consumers propogate around the network
1:         Thread.sleep(2000);
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, 1);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1: 
1:         msgsA.waitForMessagesToArrive(1);
1:         msgsB.waitForMessagesToArrive(1);
1:         msgsC.waitForMessagesToArrive(1);
1: 
1:         // ensure we don't get any more messages
1:         Thread.sleep(2000);
1:         
1:         assertEquals(1, msgsA.getMessageCount());
1:         assertEquals(1, msgsB.getMessageCount());
1:         assertEquals(1, msgsC.getMessageCount());
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
0:         String options = new String("?persistent=false&useJmx=false"); 
1:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61618)/BrokerC" + options));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8b0bb33
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import junit.framework.Test;
1: 
0: import org.apache.activemq.transport.failover.FailoverUriTest;
/////////////////////////////////////////////////////////////////////////
1:     public boolean dynamicOnly;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void initCombosForTestABandBCbrokerNetworkWithSelectors() {
0:     	addCombinationValues("dynamicOnly", new Object[] {true, false});
1:     }
1:     
1:     /**
1:      * BrokerA -> BrokerB -> BrokerC
1:      */
1:     public void testABandBCbrokerNetworkWithSelectors() throws Exception {
1:         // Setup broker networks
1:         bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, 2, true);
1:         bridgeBrokers("BrokerB", "BrokerC", dynamicOnly, 2, true);
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerC", dest, "dummy = 33");
1:         MessageConsumer clientB = createConsumer("BrokerC", dest, "dummy > 30");
1:         MessageConsumer clientC = createConsumer("BrokerC", dest, "dummy = 34");
1: 
1:         // let consumers propogate around the network
1:         Thread.sleep(2000);
1:         // Send messages
1:         // Send messages for broker A
1:         HashMap<String, Object> props = new HashMap<String, Object>();
1:         props.put("dummy", 33);
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT, props);
1:         props.put("dummy", 34);
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT * 2, props);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerC", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerC", clientB);
1:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1: 
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 2) ;
1: 
1:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:         assertEquals(MESSAGE_COUNT * 3, msgsB.getMessageCount());
1:         assertEquals(MESSAGE_COUNT *2, msgsC.getMessageCount());
1:     }
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static Test suite() {
0:     	return suite(ThreeBrokerTopicNetworkTest.class);
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.util.MessageIdList;
0: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: 
0: import javax.jms.MessageConsumer;
0: import javax.jms.Destination;
1: import java.net.URI;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class ThreeBrokerTopicNetworkTest extends JmsMultipleBrokersTestSupport {
1:     protected static final int MESSAGE_COUNT = 100;
1: 
1:     /**
1:      * BrokerA -> BrokerB -> BrokerC
1:      */
0:     public void test_AB_BC_BrokerNetwork() throws Exception {
1:         // Setup broker networks
1:         bridgeBrokers("BrokerA", "BrokerB");
1:         bridgeBrokers("BrokerB", "BrokerC");
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1: 
0: //      let consumers propogate around the network
1:         Thread.sleep(2000);
1:         // Send messages
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1: 
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 2);
1:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 2);
1: 
1:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:         assertEquals(MESSAGE_COUNT * 2, msgsB.getMessageCount());
1:         assertEquals(MESSAGE_COUNT * 2, msgsC.getMessageCount());
1:     }
1: 
1:     /**
1:      * BrokerA <- BrokerB -> BrokerC
1:      */
0:     public void test_BA_BC_BrokerNetwork() throws Exception {
1:         // Setup broker networks
1:         bridgeBrokers("BrokerB", "BrokerA");
1:         bridgeBrokers("BrokerB", "BrokerC");
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1: 
0: //      let consumers propogate around the network
1:         Thread.sleep(2000);
1:         // Send messages
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1: 
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT * 2);
1:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT);
1:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 2);
1: 
1:         assertEquals(MESSAGE_COUNT * 2, msgsA.getMessageCount());
1:         assertEquals(MESSAGE_COUNT, msgsB.getMessageCount());
1:         assertEquals(MESSAGE_COUNT * 2, msgsC.getMessageCount());
1:     }
1: 
1:     /**
1:      * BrokerA -> BrokerB <- BrokerC
1:      */
0:     public void test_AB_CB_BrokerNetwork() throws Exception {
1:         // Setup broker networks
1:         bridgeBrokers("BrokerA", "BrokerB");
1:         bridgeBrokers("BrokerC", "BrokerB");
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1: 
0: //      let consumers propogate around the network
1:         Thread.sleep(2000);
1:         
1:         // Send messages
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1: 
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT);
1: 
1:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:         assertEquals(MESSAGE_COUNT * 3, msgsB.getMessageCount());
1:         assertEquals(MESSAGE_COUNT, msgsC.getMessageCount());
1:     }
1: 
1:     /**
1:      * BrokerA <-> BrokerB <-> BrokerC
1:      */
1:     public void testAllConnectedBrokerNetwork() throws Exception {
1:         // Setup broker networks
1:         bridgeBrokers("BrokerA", "BrokerB");
1:         bridgeBrokers("BrokerB", "BrokerA");
1:         bridgeBrokers("BrokerB", "BrokerC");
1:         bridgeBrokers("BrokerC", "BrokerB");
1:         bridgeBrokers("BrokerA", "BrokerC");
1:         bridgeBrokers("BrokerC", "BrokerA");
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:         //let consumers propogate around the network
1:         Thread.sleep(2000);
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1: 
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1: 
1:         assertEquals(MESSAGE_COUNT * 3, msgsA.getMessageCount());
1:         assertEquals(MESSAGE_COUNT * 3, msgsB.getMessageCount());
1:         assertEquals(MESSAGE_COUNT * 3, msgsC.getMessageCount());
1:     }
1: 
1:     /**
1:      * BrokerA <-> BrokerB <-> BrokerC
1:      */
1:     public void testAllConnectedUsingMulticast() throws Exception {
1:         // Setup broker networks
1:         bridgeAllBrokers();
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:         
1:         //let consumers propogate around the network
1:         Thread.sleep(2000);
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerB", dest, MESSAGE_COUNT);
1:         sendMessages("BrokerC", dest, MESSAGE_COUNT);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1: 
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1:         msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 3);
1: 
1:         assertEquals(MESSAGE_COUNT * 3, msgsA.getMessageCount());
1:         assertEquals(MESSAGE_COUNT * 3, msgsB.getMessageCount());
1:         assertEquals(MESSAGE_COUNT * 3, msgsC.getMessageCount());
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
0:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
0:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
0:         createBroker(new URI("broker:(tcp://localhost:61618)/BrokerC?persistent=false&useJmx=false"));
1:     }
1: }
============================================================================