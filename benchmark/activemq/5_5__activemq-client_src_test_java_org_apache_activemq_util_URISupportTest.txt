2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.util;
2:5d42b72: 
1:18300c6: import static org.junit.Assert.assertEquals;
1:18300c6: import static org.junit.Assert.assertFalse;
1:18300c6: import static org.junit.Assert.assertNull;
1:18300c6: import static org.junit.Assert.assertTrue;
1:18300c6: 
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:986ed14: import java.util.HashMap;
1:d29ca2a: import java.util.Map;
1:ba4a9ed: 
1:230a86c: import org.apache.activemq.util.URISupport.CompositeData;
1:18300c6: import org.junit.Test;
1:ba4a9ed: 
1:18300c6: public class URISupportTest {
1:c4d8bc4: 
1:18300c6:     @Test
1:d29ca2a:     public void testEmptyCompositePath() throws Exception {
1:d29ca2a:         CompositeData data = URISupport.parseComposite(new URI("broker:()/localhost?persistent=false"));
1:ba4a9ed:         assertEquals(0, data.getComponents().length);
1:d29ca2a:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:d29ca2a:     public void testCompositePath() throws Exception {
1:d29ca2a:         CompositeData data = URISupport.parseComposite(new URI("test:(path)/path"));
1:ba4a9ed:         assertEquals("path", data.getPath());
1:d29ca2a:         data = URISupport.parseComposite(new URI("test:path"));
1:d29ca2a:         assertNull(data.getPath());
1:d29ca2a:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:d29ca2a:     public void testSimpleComposite() throws Exception {
1:d29ca2a:         CompositeData data = URISupport.parseComposite(new URI("test:part1"));
1:d29ca2a:         assertEquals(1, data.getComponents().length);
1:d29ca2a:     }
1:986ed14: 
1:18300c6:     @Test
1:d29ca2a:     public void testComposite() throws Exception {
1:ba4a9ed:         URI uri = new URI("test:(part1://host,part2://(sub1://part,sube2:part))");
1:ba4a9ed:         CompositeData data = URISupport.parseComposite(uri);
1:d29ca2a:         assertEquals(2, data.getComponents().length);
1:d29ca2a:     }
1:c4d8bc4: 
1:18300c6:     @Test
1:ba4a9ed:     public void testEmptyCompositeWithParenthesisInParam() throws Exception {
1:ba4a9ed:         URI uri = new URI("failover://()?updateURIsURL=file:/C:/Dir(1)/a.csv");
1:ba4a9ed:         CompositeData data = URISupport.parseComposite(uri);
1:ba4a9ed:         assertEquals(0, data.getComponents().length);
1:ba4a9ed:         assertEquals(1, data.getParameters().size());
1:ba4a9ed:         assertTrue(data.getParameters().containsKey("updateURIsURL"));
1:ba4a9ed:         assertEquals("file:/C:/Dir(1)/a.csv", data.getParameters().get("updateURIsURL"));
1:ba4a9ed:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:ba4a9ed:     public void testCompositeWithParenthesisInParam() throws Exception {
1:ba4a9ed:         URI uri = new URI("failover://(test)?updateURIsURL=file:/C:/Dir(1)/a.csv");
1:ba4a9ed:         CompositeData data = URISupport.parseComposite(uri);
1:ba4a9ed:         assertEquals(1, data.getComponents().length);
1:ba4a9ed:         assertEquals(1, data.getParameters().size());
1:ba4a9ed:         assertTrue(data.getParameters().containsKey("updateURIsURL"));
1:ba4a9ed:         assertEquals("file:/C:/Dir(1)/a.csv", data.getParameters().get("updateURIsURL"));
1:ba4a9ed:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:5d42b72:     public void testCompositeWithComponentParam() throws Exception {
1:5d42b72:         CompositeData data = URISupport.parseComposite(new URI("test:(part1://host?part1=true)?outside=true"));
1:5d42b72:         assertEquals(1, data.getComponents().length);
1:5d42b72:         assertEquals(1, data.getParameters().size());
1:ba4a9ed:         Map<String, String> part1Params = URISupport.parseParameters(data.getComponents()[0]);
1:5d42b72:         assertEquals(1, part1Params.size());
1:5d42b72:         assertTrue(part1Params.containsKey("part1"));
1:5d42b72:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:d29ca2a:     public void testParsingURI() throws Exception {
1:d29ca2a:         URI source = new URI("tcp://localhost:61626/foo/bar?cheese=Edam&x=123");
1:ba4a9ed: 
1:ba4a9ed:         Map<String, String> map = URISupport.parseParameters(source);
1:ba4a9ed: 
1:d29ca2a:         assertEquals("Size: " + map, 2, map.size());
1:d29ca2a:         assertMapKey(map, "cheese", "Edam");
1:d29ca2a:         assertMapKey(map, "x", "123");
1:ba4a9ed: 
1:d29ca2a:         URI result = URISupport.removeQuery(source);
1:ba4a9ed: 
1:d29ca2a:         assertEquals("result", new URI("tcp://localhost:61626/foo/bar"), result);
1:d29ca2a:     }
1:ba4a9ed: 
1:ba4a9ed:     protected void assertMapKey(Map<String, String> map, String key, Object expected) {
1:d29ca2a:         assertEquals("Map key: " + key, map.get(key), expected);
1:d29ca2a:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:d29ca2a:     public void testParsingCompositeURI() throws URISyntaxException {
1:5d42b72:         CompositeData data = URISupport.parseComposite(new URI("broker://(tcp://localhost:61616)?name=foo"));
1:5d42b72:         assertEquals("one component", 1, data.getComponents().length);
1:5d42b72:         assertEquals("Size: " + data.getParameters(), 1, data.getParameters().size());
1:d29ca2a:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:d29ca2a:     public void testCheckParenthesis() throws Exception {
1:d29ca2a:         String str = "fred:(((ddd))";
1:d29ca2a:         assertFalse(URISupport.checkParenthesis(str));
1:d29ca2a:         str += ")";
1:d29ca2a:         assertTrue(URISupport.checkParenthesis(str));
1:d29ca2a:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:c4d8bc4:     public void testCreateWithQuery() throws Exception {
1:c4d8bc4:         URI source = new URI("vm://localhost");
1:c4d8bc4:         URI dest = URISupport.createURIWithQuery(source, "network=true&one=two");
1:ba4a9ed: 
1:784b93d:         assertEquals("correct param count", 2, URISupport.parseParameters(dest).size());
1:c4d8bc4:         assertEquals("same uri, host", source.getHost(), dest.getHost());
1:c4d8bc4:         assertEquals("same uri, scheme", source.getScheme(), dest.getScheme());
1:c4d8bc4:         assertFalse("same uri, ssp", dest.getQuery().equals(source.getQuery()));
1:c4d8bc4:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:784b93d:     public void testParsingParams() throws Exception {
1:986ed14:         URI uri = new URI("static:(http://localhost:61617?proxyHost=jo&proxyPort=90)?proxyHost=localhost&proxyPort=80");
1:784b93d:         Map<String,String>parameters = URISupport.parseParameters(uri);
1:784b93d:         verifyParams(parameters);
1:784b93d:         uri = new URI("static://http://localhost:61617?proxyHost=localhost&proxyPort=80");
1:784b93d:         parameters = URISupport.parseParameters(uri);
1:784b93d:         verifyParams(parameters);
1:e32c1ba:         uri = new URI("http://0.0.0.0:61616");
1:e32c1ba:         parameters = URISupport.parseParameters(uri);
1:d29ca2a:     }
1:ba4a9ed: 
1:18300c6:     @Test
1:4f9784d:     public void testCompositeCreateURIWithQuery() throws Exception {
1:ba4a9ed:         String queryString = "query=value";
1:ba4a9ed:         URI originalURI = new URI("outerscheme:(innerscheme:innerssp)");
1:ba4a9ed:         URI querylessURI = originalURI;
1:ba4a9ed:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
1:ba4a9ed:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
1:ba4a9ed:         assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
1:ba4a9ed:         originalURI = new URI("outerscheme:(innerscheme:innerssp)?outerquery=0");
1:ba4a9ed:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
1:ba4a9ed:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
1:ba4a9ed:         assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
1:ba4a9ed:         originalURI = new URI("outerscheme:(innerscheme:innerssp?innerquery=0)");
1:ba4a9ed:         querylessURI = originalURI;
1:ba4a9ed:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
1:ba4a9ed:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
1:ba4a9ed:         assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
1:ba4a9ed:         originalURI = new URI("outerscheme:(innerscheme:innerssp?innerquery=0)?outerquery=0");
1:ba4a9ed:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
1:ba4a9ed:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
1:ba4a9ed:         assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
1:4f9784d:     }
1:4f9784d: 
1:18300c6:     @Test
1:986ed14:     public void testApplyParameters() throws Exception {
1:986ed14: 
1:986ed14:         URI uri = new URI("http://0.0.0.0:61616");
1:986ed14:         Map<String,String> parameters = new HashMap<String, String>();
1:986ed14:         parameters.put("t.proxyHost", "localhost");
1:986ed14:         parameters.put("t.proxyPort", "80");
1:986ed14: 
1:986ed14:         uri = URISupport.applyParameters(uri, parameters);
1:986ed14:         Map<String,String> appliedParameters = URISupport.parseParameters(uri);
1:986ed14:         assertEquals("all params applied  with no prefix", 2, appliedParameters.size());
1:986ed14: 
1:986ed14:         // strip off params again
1:986ed14:         uri = URISupport.createURIWithQuery(uri, null);
1:986ed14: 
1:986ed14:         uri = URISupport.applyParameters(uri, parameters, "joe");
1:986ed14:         appliedParameters = URISupport.parseParameters(uri);
1:986ed14:         assertTrue("no params applied as none match joe", appliedParameters.isEmpty());
1:986ed14: 
1:986ed14:         uri = URISupport.applyParameters(uri, parameters, "t.");
1:986ed14:         verifyParams(URISupport.parseParameters(uri));
1:986ed14:     }
1:ba4a9ed: 
1:784b93d:     private void verifyParams(Map<String,String> parameters) {
1:784b93d:         assertEquals(parameters.get("proxyHost"), "localhost");
1:784b93d:         assertEquals(parameters.get("proxyPort"), "80");
1:784b93d:     }
1:79bce92: 
1:18300c6:     @Test
1:79bce92:     public void testIsCompositeURIWithQueryNoSlashes() throws URISyntaxException {
1:79bce92:         URI[] compositeURIs = new URI[] { new URI("test:(part1://host?part1=true)?outside=true"), new URI("broker:(tcp://localhost:61616)?name=foo") };
1:79bce92:         for (URI uri : compositeURIs) {
1:79bce92:             assertTrue(uri + " must be detected as composite URI", URISupport.isCompositeURI(uri));
1:79bce92:         }
1:79bce92:     }
1:79bce92: 
1:18300c6:     @Test
1:79bce92:     public void testIsCompositeURIWithQueryAndSlashes() throws URISyntaxException {
1:79bce92:         URI[] compositeURIs = new URI[] { new URI("test://(part1://host?part1=true)?outside=true"), new URI("broker://(tcp://localhost:61616)?name=foo") };
1:79bce92:         for (URI uri : compositeURIs) {
1:79bce92:             assertTrue(uri + " must be detected as composite URI", URISupport.isCompositeURI(uri));
1:79bce92:         }
1:79bce92:     }
1:79bce92: 
1:18300c6:     @Test
1:79bce92:     public void testIsCompositeURINoQueryNoSlashes() throws URISyntaxException {
1:79bce92:         URI[] compositeURIs = new URI[] { new URI("test:(part1://host,part2://(sub1://part,sube2:part))"), new URI("test:(path)/path") };
1:79bce92:         for (URI uri : compositeURIs) {
1:79bce92:             assertTrue(uri + " must be detected as composite URI", URISupport.isCompositeURI(uri));
1:79bce92:         }
1:79bce92:     }
1:79bce92: 
1:18300c6:     @Test
1:79bce92:     public void testIsCompositeURINoQueryNoSlashesNoParentheses() throws URISyntaxException {
1:79bce92:         assertFalse("test:part1" + " must be detected as non-composite URI", URISupport.isCompositeURI(new URI("test:part1")));
1:79bce92:     }
1:79bce92: 
1:18300c6:     @Test
1:79bce92:     public void testIsCompositeURINoQueryWithSlashes() throws URISyntaxException {
1:79bce92:         URI[] compositeURIs = new URI[] { new URI("failover://(tcp://bla:61616,tcp://bla:61617)"),
1:79bce92:                 new URI("failover://(tcp://localhost:61616,ssl://anotherhost:61617)") };
1:79bce92:         for (URI uri : compositeURIs) {
1:79bce92:             assertTrue(uri + " must be detected as composite URI", URISupport.isCompositeURI(uri));
1:79bce92:         }
1:79bce92:     }
1:784b93d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:18300c6
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import org.junit.Test;
1: public class URISupportTest {
1:     @Test
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     @Test
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     @Test
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a6ebc8d
commit:79bce92
/////////////////////////////////////////////////////////////////////////
1:     public void testIsCompositeURIWithQueryNoSlashes() throws URISyntaxException {
1:         URI[] compositeURIs = new URI[] { new URI("test:(part1://host?part1=true)?outside=true"), new URI("broker:(tcp://localhost:61616)?name=foo") };
1:         for (URI uri : compositeURIs) {
1:             assertTrue(uri + " must be detected as composite URI", URISupport.isCompositeURI(uri));
1:         }
1:     }
1: 
1:     public void testIsCompositeURIWithQueryAndSlashes() throws URISyntaxException {
1:         URI[] compositeURIs = new URI[] { new URI("test://(part1://host?part1=true)?outside=true"), new URI("broker://(tcp://localhost:61616)?name=foo") };
1:         for (URI uri : compositeURIs) {
1:             assertTrue(uri + " must be detected as composite URI", URISupport.isCompositeURI(uri));
1:         }
1:     }
1: 
1:     public void testIsCompositeURINoQueryNoSlashes() throws URISyntaxException {
1:         URI[] compositeURIs = new URI[] { new URI("test:(part1://host,part2://(sub1://part,sube2:part))"), new URI("test:(path)/path") };
1:         for (URI uri : compositeURIs) {
1:             assertTrue(uri + " must be detected as composite URI", URISupport.isCompositeURI(uri));
1:         }
1:     }
1: 
1:     public void testIsCompositeURINoQueryNoSlashesNoParentheses() throws URISyntaxException {
1:         assertFalse("test:part1" + " must be detected as non-composite URI", URISupport.isCompositeURI(new URI("test:part1")));
1:     }
1: 
1:     public void testIsCompositeURINoQueryWithSlashes() throws URISyntaxException {
1:         URI[] compositeURIs = new URI[] { new URI("failover://(tcp://bla:61616,tcp://bla:61617)"),
1:                 new URI("failover://(tcp://localhost:61616,ssl://anotherhost:61617)") };
1:         for (URI uri : compositeURIs) {
1:             assertTrue(uri + " must be detected as composite URI", URISupport.isCompositeURI(uri));
1:         }
1:     }
1: 
commit:ba4a9ed
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertEquals(0, data.getComponents().length);
1: 
1:         assertEquals("path", data.getPath());
/////////////////////////////////////////////////////////////////////////
1:         URI uri = new URI("test:(part1://host,part2://(sub1://part,sube2:part))");
1:         CompositeData data = URISupport.parseComposite(uri);
1:     public void testEmptyCompositeWithParenthesisInParam() throws Exception {
1:         URI uri = new URI("failover://()?updateURIsURL=file:/C:/Dir(1)/a.csv");
1:         CompositeData data = URISupport.parseComposite(uri);
1:         assertEquals(0, data.getComponents().length);
1:         assertEquals(1, data.getParameters().size());
1:         assertTrue(data.getParameters().containsKey("updateURIsURL"));
1:         assertEquals("file:/C:/Dir(1)/a.csv", data.getParameters().get("updateURIsURL"));
1:     }
1: 
1:     public void testCompositeWithParenthesisInParam() throws Exception {
1:         URI uri = new URI("failover://(test)?updateURIsURL=file:/C:/Dir(1)/a.csv");
1:         CompositeData data = URISupport.parseComposite(uri);
1:         assertEquals(1, data.getComponents().length);
1:         assertEquals(1, data.getParameters().size());
1:         assertTrue(data.getParameters().containsKey("updateURIsURL"));
1:         assertEquals("file:/C:/Dir(1)/a.csv", data.getParameters().get("updateURIsURL"));
1:     }
1: 
1:         Map<String, String> part1Params = URISupport.parseParameters(data.getComponents()[0]);
1: 
1: 
1:         Map<String, String> map = URISupport.parseParameters(source);
1: 
1: 
1: 
1: 
1:     protected void assertMapKey(Map<String, String> map, String key, Object expected) {
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         String queryString = "query=value";
1:         URI originalURI = new URI("outerscheme:(innerscheme:innerssp)");
1:         URI querylessURI = originalURI;
1:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
1:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
1:         assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
1:         originalURI = new URI("outerscheme:(innerscheme:innerssp)?outerquery=0");
1:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
1:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
1:         assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
1:         originalURI = new URI("outerscheme:(innerscheme:innerssp?innerquery=0)");
1:         querylessURI = originalURI;
1:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
1:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
1:         assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
1:         originalURI = new URI("outerscheme:(innerscheme:innerssp?innerquery=0)?outerquery=0");
1:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
1:         assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
1:         assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:4f9784d
/////////////////////////////////////////////////////////////////////////
1:     public void testCompositeCreateURIWithQuery() throws Exception {
0:     	String queryString = "query=value";
0:     	URI originalURI = new URI("outerscheme:(innerscheme:innerssp)");
0:     	URI querylessURI = originalURI;
0:     	assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
0:     	assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
0:     	assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
0:     	originalURI = new URI("outerscheme:(innerscheme:innerssp)?outerquery=0");
0:     	assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
0:     	assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
0:     	assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
0:     	originalURI = new URI("outerscheme:(innerscheme:innerssp?innerquery=0)");
0:     	querylessURI = originalURI;
0:     	assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
0:     	assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
0:     	assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
0:     	originalURI = new URI("outerscheme:(innerscheme:innerssp?innerquery=0)?outerquery=0");
0:     	assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, null));
0:     	assertEquals(querylessURI, URISupport.createURIWithQuery(originalURI, ""));
0:     	assertEquals(new URI(querylessURI + "?" + queryString), URISupport.createURIWithQuery(originalURI, queryString));
1:     }
1:     
author:Gary Tully
-------------------------------------------------------------------------------
commit:986ed14
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:         URI uri = new URI("static:(http://localhost:61617?proxyHost=jo&proxyPort=90)?proxyHost=localhost&proxyPort=80");
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testApplyParameters() throws Exception {
1: 
1:         URI uri = new URI("http://0.0.0.0:61616");
1:         Map<String,String> parameters = new HashMap<String, String>();
1:         parameters.put("t.proxyHost", "localhost");
1:         parameters.put("t.proxyPort", "80");
1: 
1:         uri = URISupport.applyParameters(uri, parameters);
1:         Map<String,String> appliedParameters = URISupport.parseParameters(uri);
1:         assertEquals("all params applied  with no prefix", 2, appliedParameters.size());
1: 
1:         // strip off params again
1:         uri = URISupport.createURIWithQuery(uri, null);
1: 
1:         uri = URISupport.applyParameters(uri, parameters, "joe");
1:         appliedParameters = URISupport.parseParameters(uri);
1:         assertTrue("no params applied as none match joe", appliedParameters.isEmpty());
1: 
1:         uri = URISupport.applyParameters(uri, parameters, "t.");
1:         verifyParams(URISupport.parseParameters(uri));
1:     }
commit:c4d8bc4
/////////////////////////////////////////////////////////////////////////
1:     public void testCreateWithQuery() throws Exception {
1:         URI source = new URI("vm://localhost");
1:         URI dest = URISupport.createURIWithQuery(source, "network=true&one=two");
1:         
0:         assertEquals("correct param count", 2, URISupport.parseParamters(dest).size());
1:         assertEquals("same uri, host", source.getHost(), dest.getHost());
1:         assertEquals("same uri, scheme", source.getScheme(), dest.getScheme());
1:         assertFalse("same uri, ssp", dest.getQuery().equals(source.getQuery()));
1:     }
1:     
commit:5d42b72
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testCompositeWithComponentParam() throws Exception {
1:         CompositeData data = URISupport.parseComposite(new URI("test:(part1://host?part1=true)?outside=true"));
1:         assertEquals(1, data.getComponents().length);
1:         assertEquals(1, data.getParameters().size());
0:         Map part1Params = URISupport.parseParamters(data.getComponents()[0]);
1:         assertEquals(1, part1Params.size());
1:         assertTrue(part1Params.containsKey("part1"));
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         CompositeData data = URISupport.parseComposite(new URI("broker://(tcp://localhost:61616)?name=foo"));
1:         assertEquals("one component", 1, data.getComponents().length);
1:         assertEquals("Size: " + data.getParameters(), 1, data.getParameters().size());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.URISupport.CompositeData;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
0: 
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.Map;
0: 
0: import org.apache.activemq.util.URISupport;
0: import org.apache.activemq.util.URISupport.CompositeData;
0: 
0: import junit.framework.TestCase;
0: 
1: /**
1:  *
0:  * @version $Revision: 1.1 $
1:  */
0: public class URISupportTest extends TestCase {
0:     
1:     public void testEmptyCompositePath() throws Exception {
1:         CompositeData data = URISupport.parseComposite(new URI("broker:()/localhost?persistent=false"));
0:         assertEquals(0, data.getComponents().length);        
1:     }
0:             
1:     public void testCompositePath() throws Exception {
1:         CompositeData data = URISupport.parseComposite(new URI("test:(path)/path"));
0:         assertEquals("path", data.getPath());        
1:         data = URISupport.parseComposite(new URI("test:path"));
1:         assertNull(data.getPath());
1:     }
0: 
1:     public void testSimpleComposite() throws Exception {
1:         CompositeData data = URISupport.parseComposite(new URI("test:part1"));
1:         assertEquals(1, data.getComponents().length);
1:     }
0: 
1:     public void testComposite() throws Exception {
0:         CompositeData data = URISupport.parseComposite(new URI("test:(part1://host,part2://(sub1://part,sube2:part))"));
1:         assertEquals(2, data.getComponents().length);
1:     }
0: 
1:     public void testParsingURI() throws Exception {
1:         URI source = new URI("tcp://localhost:61626/foo/bar?cheese=Edam&x=123");
0:         
0:         Map map = URISupport.parseParamters(source);
0:     
1:         assertEquals("Size: " + map, 2, map.size());
1:         assertMapKey(map, "cheese", "Edam");
1:         assertMapKey(map, "x", "123");
0:         
1:         URI result = URISupport.removeQuery(source);
0:         
1:         assertEquals("result", new URI("tcp://localhost:61626/foo/bar"), result);
1:     }
0:     
0:     protected void assertMapKey(Map map, String key, Object expected) {
1:         assertEquals("Map key: " + key, map.get(key), expected);
1:     }
0:     
1:     public void testParsingCompositeURI() throws URISyntaxException {
0:         URISupport.parseComposite(new URI("broker://(tcp://localhost:61616)?name=foo"));
1:     }
0:     
1:     public void testCheckParenthesis() throws Exception {
1:         String str = "fred:(((ddd))";
1:         assertFalse(URISupport.checkParenthesis(str));
1:         str += ")";
1:         assertTrue(URISupport.checkParenthesis(str));
1:     }
0:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e32c1ba
/////////////////////////////////////////////////////////////////////////
1:         uri = new URI("http://0.0.0.0:61616");
1:         parameters = URISupport.parseParameters(uri);
commit:784b93d
/////////////////////////////////////////////////////////////////////////
0:         Map part1Params = URISupport.parseParameters(data.getComponents()[0]);
/////////////////////////////////////////////////////////////////////////
0:         Map map = URISupport.parseParameters(source);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("correct param count", 2, URISupport.parseParameters(dest).size());
1:     public void testParsingParams() throws Exception {
0:         URI uri = new URI("static:(http://localhost:61617?proxyHost=localhost&proxyPort=80)");
1:         Map<String,String>parameters = URISupport.parseParameters(uri);
1:         verifyParams(parameters);
1:         uri = new URI("static://http://localhost:61617?proxyHost=localhost&proxyPort=80");
1:         parameters = URISupport.parseParameters(uri);
1:         verifyParams(parameters);
1:     }
0:     
1:     private void verifyParams(Map<String,String> parameters) {
1:         assertEquals(parameters.get("proxyHost"), "localhost");
1:         assertEquals(parameters.get("proxyPort"), "80");
1:     }
0:     
============================================================================