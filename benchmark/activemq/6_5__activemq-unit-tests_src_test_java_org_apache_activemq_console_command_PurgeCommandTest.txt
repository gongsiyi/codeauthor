2:fd37c9f: /**
1:fd37c9f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fd37c9f:  * contributor license agreements.  See the NOTICE file distributed with
1:fd37c9f:  * this work for additional information regarding copyright ownership.
1:fd37c9f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fd37c9f:  * (the "License"); you may not use this file except in compliance with
1:fd37c9f:  * the License.  You may obtain a copy of the License at
2:fd37c9f:  *
1:fd37c9f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fd37c9f:  *
1:fd37c9f:  * Unless required by applicable law or agreed to in writing, software
1:fd37c9f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fd37c9f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd37c9f:  * See the License for the specific language governing permissions and
1:fd37c9f:  * limitations under the License.
1:e282571:  */
1:fd37c9f: package org.apache.activemq.console.command;
28:fd37c9f: 
1:fd37c9f: import java.io.IOException;
1:fd37c9f: import java.lang.management.ManagementFactory;
1:fd37c9f: import java.util.ArrayList;
1:fd37c9f: import java.util.Arrays;
1:fd37c9f: import java.util.Enumeration;
1:fd37c9f: import java.util.List;
1:fd37c9f: 
1:fd37c9f: import javax.jms.JMSException;
1:fd37c9f: import javax.jms.MessageConsumer;
1:fd37c9f: import javax.jms.MessageProducer;
1:fd37c9f: import javax.jms.Queue;
1:fd37c9f: import javax.jms.QueueBrowser;
1:fd37c9f: import javax.jms.QueueConnection;
1:fd37c9f: import javax.jms.QueueRequestor;
1:fd37c9f: import javax.jms.QueueSession;
1:fd37c9f: import javax.jms.Session;
1:fd37c9f: import javax.jms.TextMessage;
1:fd37c9f: import javax.management.MBeanServerConnection;
1:fd37c9f: import javax.management.MBeanServerInvocationHandler;
1:fd37c9f: import javax.management.ObjectInstance;
1:fd37c9f: import javax.management.ObjectName;
1:fd37c9f: 
1:fd37c9f: import org.apache.activemq.ActiveMQConnectionFactory;
1:fd37c9f: import org.apache.activemq.broker.BrokerService;
1:fd37c9f: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:fd37c9f: import org.apache.activemq.console.CommandContext;
1:fd37c9f: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1:fd37c9f: import org.apache.activemq.console.util.JmxMBeansUtil;
1:fd37c9f: import org.slf4j.Logger;
1:fd37c9f: import org.slf4j.LoggerFactory;
1:fd37c9f: import org.springframework.context.support.AbstractApplicationContext;
1:fd37c9f: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:fd37c9f: 
1:c071341: import junit.framework.TestCase;
1:c071341: 
1:bebffd0: public class PurgeCommandTest extends TestCase {
1:c7d559f:     private static final Logger LOG = LoggerFactory
1:bebffd0:             .getLogger(PurgeCommandTest.class);
1:fd37c9f: 
1:c7d559f:     protected static final int MESSAGE_COUNT = 10;
1:c7d559f:     protected static final String PROPERTY_NAME = "XTestProperty";
1:c7d559f:     protected static final String PROPERTY_VALUE = "1:1";
1:e282571: 
1:c7d559f:     // check for existence of property
1:c7d559f:     protected static final String MSG_SEL_WITH_PROPERTY = PROPERTY_NAME
1:c7d559f:             + " is not null";
1:fd37c9f: 
1:c7d559f:     // check for non-existence of property
1:c7d559f:     protected static final String MSG_SEL_WITHOUT_PROPERTY = PROPERTY_NAME
1:c7d559f:             + " is null";
1:e282571: 
1:c7d559f:     // complex message selector query using XTestProperty and JMSPriority
1:c7d559f:     protected static final String MSG_SEL_COMPLEX = PROPERTY_NAME + "='" +
1:c071341:             "1:1" + "' AND JMSPriority>3";
1:e282571: 
1:c7d559f:     // complex message selector query using XTestProperty AND JMSPriority
1:c7d559f:     // but in SQL-92 syntax
1:c7d559f:     protected static final String MSG_SEL_COMPLEX_SQL_AND = "(" + PROPERTY_NAME + "='" +
1:c7d559f:             "1:1" + "') AND (JMSPriority>3)";
1:e282571: 
1:c7d559f:     // complex message selector query using XTestProperty OR JMSPriority
1:c7d559f:     // but in SQL-92 syntax
1:c7d559f:     protected static final String MSG_SEL_COMPLEX_SQL_OR = "(" + PROPERTY_NAME + "='" +
1:c7d559f:             "1:1" + "') OR (JMSPriority>3)";
1:e282571: 
1:e282571: 
1:c7d559f:     protected static final String QUEUE_NAME = "org.apache.activemq.network.jms.QueueBridgeTest";
1:fd37c9f: 
1:c7d559f:     protected AbstractApplicationContext context;
1:c7d559f:     protected QueueConnection localConnection;
1:c7d559f:     protected QueueRequestor requestor;
1:c7d559f:     protected QueueSession requestServerSession;
1:c7d559f:     protected MessageConsumer requestServerConsumer;
1:c7d559f:     protected MessageProducer requestServerProducer;
1:c7d559f:     protected Queue theQueue;
1:fd37c9f: 
1:c7d559f:     @Override
1:c7d559f:     protected void setUp() throws Exception {
1:c7d559f:         super.setUp();
1:fd37c9f: 
1:c7d559f:         context = createApplicationContext();
1:fd37c9f: 
1:c7d559f:         createConnections();
1:fd37c9f: 
1:c7d559f:         requestServerSession = localConnection.createQueueSession(false,
1:c7d559f:                 Session.AUTO_ACKNOWLEDGE);
1:c7d559f:         theQueue = requestServerSession.createQueue(QUEUE_NAME);
1:c7d559f:         requestServerConsumer = requestServerSession.createConsumer(theQueue);
1:c7d559f:         requestServerProducer = requestServerSession.createProducer(null);
1:fd37c9f: 
1:c7d559f:         QueueSession session = localConnection.createQueueSession(false,
1:c7d559f:                 Session.AUTO_ACKNOWLEDGE);
1:c7d559f:         requestor = new QueueRequestor(session, theQueue);
1:c7d559f:     }
1:e282571: 
1:c7d559f:     protected void createConnections() throws JMSException {
1:c7d559f:         ActiveMQConnectionFactory fac = (ActiveMQConnectionFactory) context
1:c7d559f:                 .getBean("localFactory");
1:c7d559f:         localConnection = fac.createQueueConnection();
1:c7d559f:         localConnection.start();
1:c7d559f:     }
1:e282571: 
1:c7d559f:     protected AbstractApplicationContext createApplicationContext() {
1:c7d559f:         return new ClassPathXmlApplicationContext("org/apache/activemq/console/command/activemq.xml");
1:c7d559f:     }
1:e282571: 
1:c7d559f:     @Override
1:c7d559f:     protected void tearDown() throws Exception {
1:c7d559f:         localConnection.close();
1:c7d559f:         BrokerService broker = (BrokerService) context.getBean("localbroker");
1:c7d559f:         broker.stop();
1:c7d559f:         broker = (BrokerService) context.getBean("default");
1:c7d559f:         broker.stop();
1:c7d559f:         super.tearDown();
1:c7d559f:     }
1:e282571: 
1:c7d559f:     public int getMessageCount(QueueBrowser browser, String prefix) throws JMSException {
1:c7d559f:         Enumeration<?> e = browser.getEnumeration();
1:c7d559f:         int with = 0;
1:c7d559f:         while (e.hasMoreElements()) {
1:c7d559f:             Object o = e.nextElement();
1:c7d559f:             System.out.println(prefix + o);
1:c7d559f:             with++;
1:c7d559f:         }
1:c7d559f:         return with;
1:c7d559f:     }
1:e282571: 
1:c7d559f:     public void cleanup() throws JMSException {
1:c7d559f:         for (int i = 0; i < MESSAGE_COUNT * 2; i++) {
1:c7d559f:             requestServerConsumer.receive();
1:c7d559f:         }
1:c7d559f:     }
1:e282571: 
1:c7d559f:     protected MBeanServerConnection createJmxConnection() throws IOException {
1:c7d559f:         return ManagementFactory.getPlatformMBeanServer();
1:c7d559f:     }
1:fd37c9f: 
1:c7d559f:     @SuppressWarnings("unchecked")
1:c7d559f:     public void purgeAllMessages() throws IOException, Exception {
1:c7d559f:             List<ObjectInstance> queueList = JmxMBeansUtil.queryMBeans(
1:bebffd0:                     createJmxConnection(), "type=Broker,brokerName=localbroker,destinationType=Queue,destinationName=*");
1:c7d559f:             for (ObjectInstance oi : queueList) {
1:c7d559f:                 ObjectName queueName = oi.getObjectName();
1:c7d559f:                 LOG.info("Purging all messages in queue: "
1:c7d559f:                         + queueName.getKeyProperty("Destination"));
1:c7d559f:                 createJmxConnection().invoke(queueName, "purge",
1:c7d559f:                         new Object[] {}, new String[] {});
1:c7d559f:             }
1:c7d559f:     }
1:fd37c9f: 
1:c7d559f:     public void addMessages() throws IOException, Exception {
1:c7d559f:         // first clean out any messages that may exist.
1:c7d559f:         purgeAllMessages();
1:e282571: 
1:c7d559f:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:c7d559f:             TextMessage msg = requestServerSession
1:c7d559f:                     .createTextMessage("test msg: " + i);
1:c7d559f:             msg.setStringProperty(PROPERTY_NAME, PROPERTY_VALUE);
1:c7d559f:             requestServerProducer.send(theQueue, msg);
1:c7d559f:         }
1:c7d559f:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:c7d559f:             TextMessage msg = requestServerSession
1:c7d559f:                     .createTextMessage("test msg: " + i);
1:c7d559f:             requestServerProducer.send(theQueue, msg);
1:c7d559f:         }
1:e282571: 
1:c7d559f:     }
1:e282571: 
1:c7d559f:     public void validateCounts(int expectedWithCount, int expectedWithoutCount,
1:c7d559f:             int expectedAllCount) throws JMSException {
1:c7d559f:         QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:c7d559f:                 theQueue, MSG_SEL_WITH_PROPERTY);
1:c7d559f:         QueueBrowser withoutPropertyBrowser = requestServerSession
1:c7d559f:                 .createBrowser(theQueue, MSG_SEL_WITHOUT_PROPERTY);
1:c7d559f:         QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1:e282571: 
1:c7d559f:         int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:c7d559f:         int withoutCount = getMessageCount(withoutPropertyBrowser,
1:c7d559f:                 "withoutProperty ");
1:c7d559f:         int allCount = getMessageCount(allBrowser, "allMessages ");
1:e282571: 
1:c7d559f:         withPropertyBrowser.close();
1:c7d559f:         withoutPropertyBrowser.close();
1:c7d559f:         allBrowser.close();
1:e282571: 
1:c7d559f:         assertEquals("Expected withCount to be " + expectedWithCount + " was "
1:c7d559f:                 + withCount, expectedWithCount, withCount);
1:c7d559f:         assertEquals("Expected withoutCount to be " + expectedWithoutCount
1:c7d559f:                 + " was " + withoutCount, expectedWithoutCount, withoutCount);
1:c7d559f:         assertEquals("Expected allCount to be " + expectedAllCount + " was "
1:c7d559f:                 + allCount, expectedAllCount, allCount);
1:c7d559f:         LOG.info("withCount = " + withCount + "\n withoutCount = "
1:c7d559f:                 + withoutCount + "\n allCount = " + allCount + "\n  = " + "\n");
1:c7d559f:     }
1:e282571: 
1:c7d559f:     /**
1:c7d559f:      * This test ensures that the queueViewMbean will work.
1:c7d559f:      *
1:c7d559f:      * @throws Exception
1:c7d559f:      */
1:c7d559f:     @SuppressWarnings("unchecked")
1:c7d559f:     public void testQueueViewMbean() throws Exception {
1:e282571: 
1:c7d559f:         try {
1:c7d559f:             addMessages();
1:e282571: 
1:c7d559f:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1:e282571: 
2:c7d559f:             List<String> tokens = Arrays.asList(new String[] { "*" });
2:c7d559f:             for (String token : tokens) {
1:c7d559f:                 List<ObjectInstance> queueList = JmxMBeansUtil.queryMBeans(
1:bebffd0:                         createJmxConnection(), "type=Broker,brokerName=localbroker,destinationType=Queue,destinationName="
1:bebffd0:                                 + token);
1:e282571: 
1:c7d559f:                 for (ObjectInstance queue : queueList) {
1:c7d559f:                     ObjectName queueName = queue
1:c7d559f:                             .getObjectName();
1:c7d559f:                     QueueViewMBean proxy = MBeanServerInvocationHandler
1:c7d559f:                             .newProxyInstance(createJmxConnection(), queueName,
1:c7d559f:                                     QueueViewMBean.class, true);
1:c7d559f:                     int removed = proxy
1:c7d559f:                             .removeMatchingMessages(MSG_SEL_WITH_PROPERTY);
1:c7d559f:                     LOG.info("Removed: " + removed);
1:c7d559f:                 }
1:c7d559f:             }
1:e282571: 
1:c7d559f:             validateCounts(0, MESSAGE_COUNT, MESSAGE_COUNT);
1:e282571: 
1:c7d559f:         } finally {
1:c7d559f:             purgeAllMessages();
1:c7d559f:         }
1:c7d559f:     }
1:e282571: 
1:c7d559f:     public void testPurgeCommandSimpleSelector() throws Exception {
1:c7d559f:         try {
1:c7d559f:             PurgeCommand purgeCommand = new PurgeCommand();
1:c7d559f:             CommandContext context = new CommandContext();
1:e282571: 
1:c7d559f:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1:e282571: 
1:c7d559f:             purgeCommand.setCommandContext(context);
1:c7d559f:             purgeCommand.setJmxUseLocal(true);
1:e282571: 
1:c7d559f:             List<String> tokens = new ArrayList<String>();
1:c7d559f:             tokens.add("--msgsel");
1:c7d559f:             tokens.add(MSG_SEL_WITH_PROPERTY);
1:e282571: 
1:c7d559f:             addMessages();
1:c7d559f:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1:e282571: 
1:c7d559f:             purgeCommand.execute(tokens);
1:e282571: 
1:c7d559f:             validateCounts(0, MESSAGE_COUNT, MESSAGE_COUNT);
1:c7d559f:         } finally {
1:c7d559f:             purgeAllMessages();
1:c7d559f:         }
1:c7d559f:     }
1:e282571: 
1:c7d559f:     public void testPurgeCommandComplexSelector() throws Exception {
1:c7d559f:         try {
1:c7d559f:             PurgeCommand purgeCommand = new PurgeCommand();
1:c7d559f:             CommandContext context = new CommandContext();
1:e282571: 
1:c7d559f:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1:e282571: 
1:c7d559f:             purgeCommand.setCommandContext(context);
1:c7d559f:             purgeCommand.setJmxUseLocal(true);
1:e282571: 
1:c7d559f:             List<String> tokens = new ArrayList<String>();
1:c7d559f:             tokens.add("--msgsel");
1:c7d559f:             tokens.add(MSG_SEL_COMPLEX);
1:e282571: 
1:c7d559f:             addMessages();
1:c7d559f:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1:e282571: 
1:c7d559f:             purgeCommand.execute(tokens);
1:e282571: 
1:c7d559f:             QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:c7d559f:                     theQueue, MSG_SEL_COMPLEX);
1:c7d559f:             QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1:e282571: 
1:c7d559f:             int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:c7d559f:             int allCount = getMessageCount(allBrowser, "allMessages ");
1:e282571: 
1:c7d559f:             withPropertyBrowser.close();
1:c7d559f:             allBrowser.close();
1:e282571: 
1:c7d559f:             assertEquals("Expected withCount to be " + "0" + " was "
1:c7d559f:                     + withCount, 0, withCount);
1:c7d559f:             assertEquals("Expected allCount to be " + MESSAGE_COUNT + " was "
1:c7d559f:                     + allCount, MESSAGE_COUNT, allCount);
1:c7d559f:             LOG.info("withCount = " + withCount + "\n allCount = " +
1:c7d559f:                     allCount + "\n  = " + "\n");
1:c7d559f:         } finally {
1:c7d559f:             purgeAllMessages();
1:c7d559f:         }
1:c7d559f:     }
1:e282571: 
1:c7d559f:     public void testPurgeCommandComplexSQLSelector_AND() throws Exception {
1:c7d559f:         try {
1:e282571: 
1:c7d559f:             String one = "ID:mac.fritz.box:1213242.3231.1:1:1:100";
1:c7d559f:             String two = "\\*:100";
1:c7d559f:             try {
1:c7d559f:             if (one.matches(two))
1:c7d559f:                 LOG.info("String matches.");
1:c7d559f:             else
1:c7d559f:                 LOG.info("string does not match.");
1:c7d559f:             } catch (Exception ex) {
1:c7d559f:                 LOG.error(ex.getMessage());
1:c7d559f:             }
1:e282571: 
1:c7d559f:             PurgeCommand purgeCommand = new PurgeCommand();
1:c7d559f:             CommandContext context = new CommandContext();
1:e282571: 
1:c7d559f:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1:e282571: 
1:c7d559f:             purgeCommand.setCommandContext(context);
1:c7d559f:             purgeCommand.setJmxUseLocal(true);
1:e282571: 
1:c7d559f:             List<String> tokens = new ArrayList<String>();
1:c7d559f:             tokens.add("--msgsel");
1:c7d559f:             tokens.add(MSG_SEL_COMPLEX_SQL_AND);
1:e282571: 
1:c7d559f:             addMessages();
1:c7d559f:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1:e282571: 
1:c7d559f:             purgeCommand.execute(tokens);
1:e282571: 
1:c7d559f:             QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:c7d559f:                     theQueue, MSG_SEL_COMPLEX_SQL_AND);
1:c7d559f:             QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1:c7d559f: 
1:c7d559f:             int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:c7d559f:             int allCount = getMessageCount(allBrowser, "allMessages ");
1:c7d559f: 
1:c7d559f:             withPropertyBrowser.close();
1:c7d559f:             allBrowser.close();
1:c7d559f: 
1:c7d559f:             assertEquals("Expected withCount to be " + "0" + " was "
1:c7d559f:                     + withCount, 0, withCount);
1:c7d559f:             assertEquals("Expected allCount to be " + MESSAGE_COUNT + " was "
1:c7d559f:                     + allCount, MESSAGE_COUNT, allCount);
1:c7d559f:             LOG.info("withCount = " + withCount + "\n allCount = " +
1:c7d559f:                     allCount + "\n  = " + "\n");
1:c7d559f:         } finally {
1:c7d559f:             purgeAllMessages();
1:c7d559f:         }
1:c7d559f:     }
1:e282571: 
1:c7d559f:     public void testPurgeCommandComplexSQLSelector_OR() throws Exception {
1:c7d559f:         try {
1:c7d559f:             PurgeCommand purgeCommand = new PurgeCommand();
1:c7d559f:             CommandContext context = new CommandContext();
1:c7d559f: 
1:c7d559f:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1:c7d559f: 
1:c7d559f:             purgeCommand.setCommandContext(context);
1:c7d559f:             purgeCommand.setJmxUseLocal(true);
1:c7d559f: 
1:c7d559f:             List<String> tokens = new ArrayList<String>();
1:c7d559f:             tokens.add("--msgsel");
1:c7d559f:             tokens.add(MSG_SEL_COMPLEX_SQL_OR);
1:c7d559f: 
1:c7d559f:             addMessages();
1:c7d559f:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1:c7d559f: 
1:c7d559f:             purgeCommand.execute(tokens);
1:c7d559f: 
1:c7d559f:             QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:c7d559f:                     theQueue, MSG_SEL_COMPLEX_SQL_OR);
1:c7d559f:             QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1:c7d559f: 
1:c7d559f:             int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:c7d559f:             int allCount = getMessageCount(allBrowser, "allMessages ");
1:c7d559f: 
1:c7d559f:             withPropertyBrowser.close();
1:c7d559f:             allBrowser.close();
1:c7d559f: 
1:c7d559f:             assertEquals("Expected withCount to be 0 but was "
1:c7d559f:                     + withCount, 0, withCount);
1:c7d559f:             assertEquals("Expected allCount to be 0 but was "
1:c7d559f:                     + allCount, 0, allCount);
1:c7d559f:             LOG.info("withCount = " + withCount + "\n allCount = " +
1:c7d559f:                     allCount + "\n  = " + "\n");
1:c7d559f:         } finally {
1:c7d559f:             purgeAllMessages();
1:c7d559f:         }
1:c7d559f:     }
1:c7d559f: 
1:c7d559f:     public void testDummy() throws Exception {
1:c7d559f:         try {
1:c7d559f: 
1:c7d559f:             String one = "ID:mac.fritz.box:1213242.3231.1:1:1:100";
1:c7d559f:             String two = "ID*:100";
1:c7d559f:             try {
1:c7d559f:             if (one.matches(two))
1:c7d559f:                 LOG.info("String matches.");
1:c7d559f:             else
1:c7d559f:                 LOG.info("string does not match.");
1:c7d559f:             } catch (Exception ex) {
1:c7d559f:                 LOG.error(ex.getMessage());
1:c7d559f:             }
1:c7d559f: 
1:c7d559f:             PurgeCommand purgeCommand = new PurgeCommand();
1:c7d559f:             CommandContext context = new CommandContext();
1:c7d559f: 
1:c7d559f:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1:c7d559f: 
1:c7d559f:             purgeCommand.setCommandContext(context);
1:c7d559f:             purgeCommand.setJmxUseLocal(true);
1:c7d559f: 
1:c7d559f:             List<String> tokens = new ArrayList<String>();
1:c7d559f:             tokens.add("--msgsel");
1:c7d559f:             tokens.add("(XTestProperty LIKE '1:*') AND (JMSPriority>3)");
1:c7d559f: 
1:c7d559f:             addMessages();
1:c7d559f: 
1:c7d559f:             purgeCommand.execute(tokens);
1:c7d559f: 
1:c7d559f:             /*
1:c7d559f:             QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:c7d559f:                     theQueue, MSG_SEL_COMPLEX_SQL_AND);
1:c7d559f:             QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1:c7d559f: 
1:c7d559f:             int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:c7d559f:             int allCount = getMessageCount(allBrowser, "allMessages ");
1:c7d559f: 
1:c7d559f:             withPropertyBrowser.close();
1:c7d559f:             allBrowser.close();
1:c7d559f: 
1:c7d559f:             assertEquals("Expected withCount to be " + "0" + " was "
1:c7d559f:                     + withCount, 0, withCount);
1:c7d559f:             assertEquals("Expected allCount to be " + MESSAGE_COUNT + " was "
1:c7d559f:                     + allCount, MESSAGE_COUNT, allCount);
1:c7d559f:             LOG.info("withCount = " + withCount + "\n allCount = " +
1:c7d559f:                     allCount + "\n  = " + "\n");
1:c7d559f:             */
1:c7d559f:         } finally {
1:c7d559f:             purgeAllMessages();
1:c7d559f:         }
1:c7d559f:     }
1:c7d559f: 
1:c7d559f: 
1:e282571: 
1:c7d559f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c071341
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: 
/////////////////////////////////////////////////////////////////////////
1:             "1:1" + "' AND JMSPriority>3";
author:Gary Tully
-------------------------------------------------------------------------------
commit:bebffd0
/////////////////////////////////////////////////////////////////////////
1: public class PurgeCommandTest extends TestCase {
1:             .getLogger(PurgeCommandTest.class);
/////////////////////////////////////////////////////////////////////////
1:                     createJmxConnection(), "type=Broker,brokerName=localbroker,destinationType=Queue,destinationName=*");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                         createJmxConnection(), "type=Broker,brokerName=localbroker,destinationType=Queue,destinationName="
1:                                 + token);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory
0:             .getLogger(TestPurgeCommand.class);
1:     protected static final int MESSAGE_COUNT = 10;
1:     protected static final String PROPERTY_NAME = "XTestProperty";
1:     protected static final String PROPERTY_VALUE = "1:1";
1:     // check for existence of property
1:     protected static final String MSG_SEL_WITH_PROPERTY = PROPERTY_NAME
1:             + " is not null";
1:     // check for non-existence of property
1:     protected static final String MSG_SEL_WITHOUT_PROPERTY = PROPERTY_NAME
1:             + " is null";
1:     // complex message selector query using XTestProperty and JMSPriority
1:     protected static final String MSG_SEL_COMPLEX = PROPERTY_NAME + "='" +
0:             "1:1" + "',JMSPriority>3";
1:     // complex message selector query using XTestProperty AND JMSPriority
1:     // but in SQL-92 syntax
1:     protected static final String MSG_SEL_COMPLEX_SQL_AND = "(" + PROPERTY_NAME + "='" +
1:             "1:1" + "') AND (JMSPriority>3)";
1:     // complex message selector query using XTestProperty OR JMSPriority
1:     // but in SQL-92 syntax
1:     protected static final String MSG_SEL_COMPLEX_SQL_OR = "(" + PROPERTY_NAME + "='" +
1:             "1:1" + "') OR (JMSPriority>3)";
1:     protected static final String QUEUE_NAME = "org.apache.activemq.network.jms.QueueBridgeTest";
1:     protected AbstractApplicationContext context;
1:     protected QueueConnection localConnection;
1:     protected QueueRequestor requestor;
1:     protected QueueSession requestServerSession;
1:     protected MessageConsumer requestServerConsumer;
1:     protected MessageProducer requestServerProducer;
1:     protected Queue theQueue;
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         context = createApplicationContext();
1:         createConnections();
1:         requestServerSession = localConnection.createQueueSession(false,
1:                 Session.AUTO_ACKNOWLEDGE);
1:         theQueue = requestServerSession.createQueue(QUEUE_NAME);
1:         requestServerConsumer = requestServerSession.createConsumer(theQueue);
1:         requestServerProducer = requestServerSession.createProducer(null);
1:         QueueSession session = localConnection.createQueueSession(false,
1:                 Session.AUTO_ACKNOWLEDGE);
1:         requestor = new QueueRequestor(session, theQueue);
1:     }
1:     protected void createConnections() throws JMSException {
1:         ActiveMQConnectionFactory fac = (ActiveMQConnectionFactory) context
1:                 .getBean("localFactory");
1:         localConnection = fac.createQueueConnection();
1:         localConnection.start();
1:     }
1:     protected AbstractApplicationContext createApplicationContext() {
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/console/command/activemq.xml");
1:     }
1:     @Override
1:     protected void tearDown() throws Exception {
1:         localConnection.close();
1:         BrokerService broker = (BrokerService) context.getBean("localbroker");
1:         broker.stop();
1:         broker = (BrokerService) context.getBean("default");
1:         broker.stop();
1:         super.tearDown();
1:     }
1:     public int getMessageCount(QueueBrowser browser, String prefix) throws JMSException {
1:         Enumeration<?> e = browser.getEnumeration();
1:         int with = 0;
1:         while (e.hasMoreElements()) {
1:             Object o = e.nextElement();
1:             System.out.println(prefix + o);
1:             with++;
1:         }
1:         return with;
1:     }
1:     public void cleanup() throws JMSException {
1:         for (int i = 0; i < MESSAGE_COUNT * 2; i++) {
1:             requestServerConsumer.receive();
1:         }
1:     }
1:     protected MBeanServerConnection createJmxConnection() throws IOException {
1:         return ManagementFactory.getPlatformMBeanServer();
1:     }
1:     @SuppressWarnings("unchecked")
1:     public void purgeAllMessages() throws IOException, Exception {
1:         List<String> tokens = Arrays.asList(new String[] { "*" });
1:         for (String token : tokens) {
1:             List<ObjectInstance> queueList = JmxMBeansUtil.queryMBeans(
0:                     createJmxConnection(), "Type=Queue,Destination=" + token
0:                             + ",*");
1:             for (ObjectInstance oi : queueList) {
1:                 ObjectName queueName = oi.getObjectName();
1:                 LOG.info("Purging all messages in queue: "
1:                         + queueName.getKeyProperty("Destination"));
1:                 createJmxConnection().invoke(queueName, "purge",
1:                         new Object[] {}, new String[] {});
1:             }
1:         }
1:     }
1:     public void addMessages() throws IOException, Exception {
1:         // first clean out any messages that may exist.
1:         purgeAllMessages();
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             TextMessage msg = requestServerSession
1:                     .createTextMessage("test msg: " + i);
1:             msg.setStringProperty(PROPERTY_NAME, PROPERTY_VALUE);
1:             requestServerProducer.send(theQueue, msg);
1:         }
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             TextMessage msg = requestServerSession
1:                     .createTextMessage("test msg: " + i);
1:             requestServerProducer.send(theQueue, msg);
1:         }
1:     }
1:     public void validateCounts(int expectedWithCount, int expectedWithoutCount,
1:             int expectedAllCount) throws JMSException {
1:         QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:                 theQueue, MSG_SEL_WITH_PROPERTY);
1:         QueueBrowser withoutPropertyBrowser = requestServerSession
1:                 .createBrowser(theQueue, MSG_SEL_WITHOUT_PROPERTY);
1:         QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1:         int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:         int withoutCount = getMessageCount(withoutPropertyBrowser,
1:                 "withoutProperty ");
1:         int allCount = getMessageCount(allBrowser, "allMessages ");
1:         withPropertyBrowser.close();
1:         withoutPropertyBrowser.close();
1:         allBrowser.close();
1:         assertEquals("Expected withCount to be " + expectedWithCount + " was "
1:                 + withCount, expectedWithCount, withCount);
1:         assertEquals("Expected withoutCount to be " + expectedWithoutCount
1:                 + " was " + withoutCount, expectedWithoutCount, withoutCount);
1:         assertEquals("Expected allCount to be " + expectedAllCount + " was "
1:                 + allCount, expectedAllCount, allCount);
1:         LOG.info("withCount = " + withCount + "\n withoutCount = "
1:                 + withoutCount + "\n allCount = " + allCount + "\n  = " + "\n");
1:     }
1:     /**
1:      * This test ensures that the queueViewMbean will work.
1:      *
1:      * @throws Exception
1:      */
1:     @SuppressWarnings("unchecked")
1:     public void testQueueViewMbean() throws Exception {
1:         try {
1:             addMessages();
1:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1:             List<String> tokens = Arrays.asList(new String[] { "*" });
1:             for (String token : tokens) {
1:                 List<ObjectInstance> queueList = JmxMBeansUtil.queryMBeans(
0:                         createJmxConnection(), "Type=Queue,Destination="
0:                                 + token + ",*");
1:                 for (ObjectInstance queue : queueList) {
1:                     ObjectName queueName = queue
1:                             .getObjectName();
1:                     QueueViewMBean proxy = MBeanServerInvocationHandler
1:                             .newProxyInstance(createJmxConnection(), queueName,
1:                                     QueueViewMBean.class, true);
1:                     int removed = proxy
1:                             .removeMatchingMessages(MSG_SEL_WITH_PROPERTY);
1:                     LOG.info("Removed: " + removed);
1:                 }
1:             }
1:             validateCounts(0, MESSAGE_COUNT, MESSAGE_COUNT);
1:         } finally {
1:             purgeAllMessages();
1:         }
1:     }
1:     public void testPurgeCommandSimpleSelector() throws Exception {
1:         try {
1:             PurgeCommand purgeCommand = new PurgeCommand();
1:             CommandContext context = new CommandContext();
1:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1:             purgeCommand.setCommandContext(context);
1:             purgeCommand.setJmxUseLocal(true);
1:             List<String> tokens = new ArrayList<String>();
1:             tokens.add("--msgsel");
1:             tokens.add(MSG_SEL_WITH_PROPERTY);
1:             addMessages();
1:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1:             purgeCommand.execute(tokens);
1:             validateCounts(0, MESSAGE_COUNT, MESSAGE_COUNT);
1:         } finally {
1:             purgeAllMessages();
1:         }
1:     }
1:     public void testPurgeCommandComplexSelector() throws Exception {
1:         try {
1:             PurgeCommand purgeCommand = new PurgeCommand();
1:             CommandContext context = new CommandContext();
1:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1:             purgeCommand.setCommandContext(context);
1:             purgeCommand.setJmxUseLocal(true);
1:             List<String> tokens = new ArrayList<String>();
1:             tokens.add("--msgsel");
1:             tokens.add(MSG_SEL_COMPLEX);
1:             addMessages();
1:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1:             purgeCommand.execute(tokens);
1:             QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:                     theQueue, MSG_SEL_COMPLEX);
1:             QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1:             int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:             int allCount = getMessageCount(allBrowser, "allMessages ");
1:             withPropertyBrowser.close();
1:             allBrowser.close();
1:             assertEquals("Expected withCount to be " + "0" + " was "
1:                     + withCount, 0, withCount);
1:             assertEquals("Expected allCount to be " + MESSAGE_COUNT + " was "
1:                     + allCount, MESSAGE_COUNT, allCount);
1:             LOG.info("withCount = " + withCount + "\n allCount = " +
1:                     allCount + "\n  = " + "\n");
1:         } finally {
1:             purgeAllMessages();
1:         }
1:     }
1:     public void testPurgeCommandComplexSQLSelector_AND() throws Exception {
1:         try {
1:             String one = "ID:mac.fritz.box:1213242.3231.1:1:1:100";
1:             String two = "\\*:100";
1:             try {
1:             if (one.matches(two))
1:                 LOG.info("String matches.");
1:             else
1:                 LOG.info("string does not match.");
1:             } catch (Exception ex) {
1:                 LOG.error(ex.getMessage());
1:             }
1:             PurgeCommand purgeCommand = new PurgeCommand();
1:             CommandContext context = new CommandContext();
1:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1:             purgeCommand.setCommandContext(context);
1:             purgeCommand.setJmxUseLocal(true);
1:             List<String> tokens = new ArrayList<String>();
1:             tokens.add("--msgsel");
1:             tokens.add(MSG_SEL_COMPLEX_SQL_AND);
1:             addMessages();
1:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1:             purgeCommand.execute(tokens);
1:             QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:                     theQueue, MSG_SEL_COMPLEX_SQL_AND);
1:             QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1:             int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:             int allCount = getMessageCount(allBrowser, "allMessages ");
1:             withPropertyBrowser.close();
1:             allBrowser.close();
1: 
1:             assertEquals("Expected withCount to be " + "0" + " was "
1:                     + withCount, 0, withCount);
1:             assertEquals("Expected allCount to be " + MESSAGE_COUNT + " was "
1:                     + allCount, MESSAGE_COUNT, allCount);
1:             LOG.info("withCount = " + withCount + "\n allCount = " +
1:                     allCount + "\n  = " + "\n");
1:         } finally {
1:             purgeAllMessages();
1:         }
1:     }
1: 
1:     public void testPurgeCommandComplexSQLSelector_OR() throws Exception {
1:         try {
1:             PurgeCommand purgeCommand = new PurgeCommand();
1:             CommandContext context = new CommandContext();
1: 
1:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
1:             purgeCommand.setCommandContext(context);
1:             purgeCommand.setJmxUseLocal(true);
1: 
1:             List<String> tokens = new ArrayList<String>();
1:             tokens.add("--msgsel");
1:             tokens.add(MSG_SEL_COMPLEX_SQL_OR);
1: 
1:             addMessages();
1:             validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1: 
1:             purgeCommand.execute(tokens);
1: 
1:             QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:                     theQueue, MSG_SEL_COMPLEX_SQL_OR);
1:             QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1: 
1:             int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:             int allCount = getMessageCount(allBrowser, "allMessages ");
1: 
1:             withPropertyBrowser.close();
1:             allBrowser.close();
1: 
1:             assertEquals("Expected withCount to be 0 but was "
1:                     + withCount, 0, withCount);
1:             assertEquals("Expected allCount to be 0 but was "
1:                     + allCount, 0, allCount);
1:             LOG.info("withCount = " + withCount + "\n allCount = " +
1:                     allCount + "\n  = " + "\n");
1:         } finally {
1:             purgeAllMessages();
1:         }
1:     }
1: 
1:     public void testDummy() throws Exception {
1:         try {
1: 
1:             String one = "ID:mac.fritz.box:1213242.3231.1:1:1:100";
1:             String two = "ID*:100";
1:             try {
1:             if (one.matches(two))
1:                 LOG.info("String matches.");
1:             else
1:                 LOG.info("string does not match.");
1:             } catch (Exception ex) {
1:                 LOG.error(ex.getMessage());
1:             }
1: 
1:             PurgeCommand purgeCommand = new PurgeCommand();
1:             CommandContext context = new CommandContext();
1: 
1:             context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
1:             purgeCommand.setCommandContext(context);
1:             purgeCommand.setJmxUseLocal(true);
1: 
1:             List<String> tokens = new ArrayList<String>();
1:             tokens.add("--msgsel");
1:             tokens.add("(XTestProperty LIKE '1:*') AND (JMSPriority>3)");
1: 
1:             addMessages();
1: 
1:             purgeCommand.execute(tokens);
1: 
1:             /*
1:             QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
1:                     theQueue, MSG_SEL_COMPLEX_SQL_AND);
1:             QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1: 
1:             int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
1:             int allCount = getMessageCount(allBrowser, "allMessages ");
1: 
1:             withPropertyBrowser.close();
1:             allBrowser.close();
1: 
1:             assertEquals("Expected withCount to be " + "0" + " was "
1:                     + withCount, 0, withCount);
1:             assertEquals("Expected allCount to be " + MESSAGE_COUNT + " was "
1:                     + allCount, MESSAGE_COUNT, allCount);
1:             LOG.info("withCount = " + withCount + "\n allCount = " +
1:                     allCount + "\n  = " + "\n");
1:             */
1:         } finally {
1:             purgeAllMessages();
1:         }
1:     }
1: 
1: 
1: 
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
0: 		return new ClassPathXmlApplicationContext("org/apache/activemq/console/command/activemq.xml");
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:e282571
/////////////////////////////////////////////////////////////////////////
0: 	protected static final String PROPERTY_VALUE = "1:1";
1: 	
0: 	// check for existence of property
0: 	// check for non-existence of property
1: 	
0: 	// complex message selector query using XTestProperty and JMSPriority
0: 	protected static final String MSG_SEL_COMPLEX = PROPERTY_NAME + "='" + 
0: 			"1:1" + "',JMSPriority>3";
1: 	
0: 	// complex message selector query using XTestProperty AND JMSPriority 
0: 	// but in SQL-92 syntax 
0: 	protected static final String MSG_SEL_COMPLEX_SQL_AND = "(" + PROPERTY_NAME + "='" + 
0: 			"1:1" + "') AND (JMSPriority>3)";
1: 
0: 	// complex message selector query using XTestProperty OR JMSPriority 
0: 	// but in SQL-92 syntax	
0: 	protected static final String MSG_SEL_COMPLEX_SQL_OR = "(" + PROPERTY_NAME + "='" + 
0: 			"1:1" + "') OR (JMSPriority>3)";
1: 	
1: 	
/////////////////////////////////////////////////////////////////////////
0: 	public void testPurgeCommandSimpleSelector() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	public void testPurgeCommandComplexSelector() throws Exception {
0: 		try {
0: 			PurgeCommand purgeCommand = new PurgeCommand();
0: 			CommandContext context = new CommandContext();
1: 
0: 			context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
0: 			purgeCommand.setCommandContext(context);
0: 			purgeCommand.setJmxUseLocal(true);
1: 
0: 			List<String> tokens = new ArrayList<String>();
0: 			tokens.add("--msgsel");
0: 			tokens.add(MSG_SEL_COMPLEX);
1: 			
0: 			addMessages();
0: 			validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1: 
0: 			purgeCommand.execute(tokens);
1: 
0: 			QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
0: 					theQueue, MSG_SEL_COMPLEX);
0: 			QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1: 
0: 			int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
0: 			int allCount = getMessageCount(allBrowser, "allMessages ");
1: 
0: 			withPropertyBrowser.close();
0: 			allBrowser.close();
1: 			
0: 			assertEquals("Expected withCount to be " + "0" + " was "
0: 					+ withCount, 0, withCount);
0: 			assertEquals("Expected allCount to be " + MESSAGE_COUNT + " was "
0: 					+ allCount, MESSAGE_COUNT, allCount);
0: 			LOG.info("withCount = " + withCount + "\n allCount = " + 
0: 					allCount + "\n  = " + "\n");
0: 		} finally {
0: 			purgeAllMessages();
0: 		}
0: 	}
1: 	
0: 	public void testPurgeCommandComplexSQLSelector_AND() throws Exception {
0: 		try {
1: 			
0: 			String one = "ID:mac.fritz.box:1213242.3231.1:1:1:100";
0: 			String two = "\\*:100";
0: 			try {
0: 			if (one.matches(two)) 
0: 				LOG.info("String matches.");
0: 			else 
0: 				LOG.info("string does not match.");
0: 			} catch (Exception ex) {
0: 				LOG.error(ex.getMessage());
0: 			}
1: 			
0: 			PurgeCommand purgeCommand = new PurgeCommand();
0: 			CommandContext context = new CommandContext();
1: 
0: 			context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
0: 			purgeCommand.setCommandContext(context);
0: 			purgeCommand.setJmxUseLocal(true);
1: 
0: 			List<String> tokens = new ArrayList<String>();
0: 			tokens.add("--msgsel");
0: 			tokens.add(MSG_SEL_COMPLEX_SQL_AND);
1: 			
0: 			addMessages();
0: 			validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1: 
0: 			purgeCommand.execute(tokens);
1: 
0: 			QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
0: 					theQueue, MSG_SEL_COMPLEX_SQL_AND);
0: 			QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1: 
0: 			int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
0: 			int allCount = getMessageCount(allBrowser, "allMessages ");
1: 
0: 			withPropertyBrowser.close();
0: 			allBrowser.close();
1: 			
0: 			assertEquals("Expected withCount to be " + "0" + " was "
0: 					+ withCount, 0, withCount);
0: 			assertEquals("Expected allCount to be " + MESSAGE_COUNT + " was "
0: 					+ allCount, MESSAGE_COUNT, allCount);
0: 			LOG.info("withCount = " + withCount + "\n allCount = " + 
0: 					allCount + "\n  = " + "\n");
0: 		} finally {
0: 			purgeAllMessages();
0: 		}
0: 	}
1: 	
0: 	public void testPurgeCommandComplexSQLSelector_OR() throws Exception {
0: 		try {
0: 			PurgeCommand purgeCommand = new PurgeCommand();
0: 			CommandContext context = new CommandContext();
1: 
0: 			context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
0: 			purgeCommand.setCommandContext(context);
0: 			purgeCommand.setJmxUseLocal(true);
1: 
0: 			List<String> tokens = new ArrayList<String>();
0: 			tokens.add("--msgsel");
0: 			tokens.add(MSG_SEL_COMPLEX_SQL_OR);
1: 			
0: 			addMessages();
0: 			validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1: 
0: 			purgeCommand.execute(tokens);
1: 
0: 			QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
0: 					theQueue, MSG_SEL_COMPLEX_SQL_OR);
0: 			QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1: 
0: 			int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
0: 			int allCount = getMessageCount(allBrowser, "allMessages ");
1: 
0: 			withPropertyBrowser.close();
0: 			allBrowser.close();
1: 			
0: 			assertEquals("Expected withCount to be 0 but was "
0: 					+ withCount, 0, withCount);
0: 			assertEquals("Expected allCount to be 0 but was "
0: 					+ allCount, 0, allCount);
0: 			LOG.info("withCount = " + withCount + "\n allCount = " + 
0: 					allCount + "\n  = " + "\n");
0: 		} finally {
0: 			purgeAllMessages();
0: 		}
0: 	}
1: 	
0: 	public void testDummy() throws Exception {
0: 		try {
1: 			
0: 			String one = "ID:mac.fritz.box:1213242.3231.1:1:1:100";
0: 			String two = "ID*:100";
0: 			try {
0: 			if (one.matches(two)) 
0: 				LOG.info("String matches.");
0: 			else 
0: 				LOG.info("string does not match.");
0: 			} catch (Exception ex) {
0: 				LOG.error(ex.getMessage());
0: 			}
1: 			
0: 			PurgeCommand purgeCommand = new PurgeCommand();
0: 			CommandContext context = new CommandContext();
1: 
0: 			context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
0: 			purgeCommand.setCommandContext(context);
0: 			purgeCommand.setJmxUseLocal(true);
1: 
0: 			List<String> tokens = new ArrayList<String>();
0: 			tokens.add("--msgsel");
0: 			tokens.add("(XTestProperty LIKE '1:*') AND (JMSPriority>3)");
1: 			
0: 			addMessages();
1: 			
0: 			purgeCommand.execute(tokens);
1: 
0: 			/*
0: 			QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
0: 					theQueue, MSG_SEL_COMPLEX_SQL_AND);
0: 			QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1: 
0: 			int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
0: 			int allCount = getMessageCount(allBrowser, "allMessages ");
1: 
0: 			withPropertyBrowser.close();
0: 			allBrowser.close();
1: 			
0: 			assertEquals("Expected withCount to be " + "0" + " was "
0: 					+ withCount, 0, withCount);
0: 			assertEquals("Expected allCount to be " + MESSAGE_COUNT + " was "
0: 					+ allCount, MESSAGE_COUNT, allCount);
0: 			LOG.info("withCount = " + withCount + "\n allCount = " + 
0: 					allCount + "\n  = " + "\n");
1: 			*/
0: 		} finally {
0: 			purgeAllMessages();
0: 		}
0: 	}
1: 	
1: 	
1: 	
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e34ec0b
/////////////////////////////////////////////////////////////////////////
commit:fd37c9f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.console.command;
1: 
1: import java.io.IOException;
1: import java.lang.management.ManagementFactory;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Enumeration;
1: import java.util.List;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueRequestor;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.MBeanServerConnection;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.console.CommandContext;
1: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1: import org.apache.activemq.console.util.JmxMBeansUtil;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.context.support.AbstractApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
0: public class TestPurgeCommand extends TestCase {
0: 	private static final Logger LOG = LoggerFactory
0: 			.getLogger(TestPurgeCommand.class);
1: 
0: 	protected static final int MESSAGE_COUNT = 10;
0: 	protected static final String PROPERTY_NAME = "XTestProperty";
0: 	protected static final String PROPERTY_VALUE = "1";
0: 	protected static final String MSG_SEL_WITH_PROPERTY = PROPERTY_NAME
0: 			+ " is not null";
1: 
0: 	protected static final String MSG_SEL_WITHOUT_PROPERTY = PROPERTY_NAME
0: 			+ " is null";
0: 	protected static final String QUEUE_NAME = "org.apache.activemq.network.jms.QueueBridgeTest";
1: 
0: 	protected AbstractApplicationContext context;
0: 	protected QueueConnection localConnection;
0: 	protected QueueRequestor requestor;
0: 	protected QueueSession requestServerSession;
0: 	protected MessageConsumer requestServerConsumer;
0: 	protected MessageProducer requestServerProducer;
0: 	protected Queue theQueue;
1: 
0: 	protected void setUp() throws Exception {
0: 		super.setUp();
1: 
0: 		context = createApplicationContext();
1: 
0: 		createConnections();
1: 
0: 		requestServerSession = localConnection.createQueueSession(false,
0: 				Session.AUTO_ACKNOWLEDGE);
0: 		theQueue = requestServerSession.createQueue(QUEUE_NAME);
0: 		requestServerConsumer = requestServerSession.createConsumer(theQueue);
0: 		requestServerProducer = requestServerSession.createProducer(null);
1: 
0: 		QueueSession session = localConnection.createQueueSession(false,
0: 				Session.AUTO_ACKNOWLEDGE);
0: 		requestor = new QueueRequestor(session, theQueue);
0: 	}
1: 
0: 	protected void createConnections() throws JMSException {
0: 		ActiveMQConnectionFactory fac = (ActiveMQConnectionFactory) context
0: 				.getBean("localFactory");
0: 		localConnection = fac.createQueueConnection();
0: 		localConnection.start();
0: 	}
1: 
0: 	protected AbstractApplicationContext createApplicationContext() {
0: 		return new ClassPathXmlApplicationContext("activemq.xml");
0: 	}
1: 
0: 	protected void tearDown() throws Exception {
0: 		localConnection.close();
0: 		BrokerService broker = (BrokerService) context.getBean("localbroker");
0: 		broker.stop();
0: 		broker = (BrokerService) context.getBean("default");
0: 		broker.stop();
0: 		super.tearDown();
0: 	}
1: 
0: 	@SuppressWarnings("unchecked")
0: 	public int getMessageCount(QueueBrowser browser, String prefix)
0: 			throws JMSException {
0: 		Enumeration e = browser.getEnumeration();
0: 		int with = 0;
0: 		while (e.hasMoreElements()) {
0: 			Object o = e.nextElement();
0: 			System.out.println(prefix + o);
0: 			with++;
0: 		}
0: 		return with;
0: 	}
1: 
0: 	public void cleanup() throws JMSException {
0: 		for (int i = 0; i < MESSAGE_COUNT * 2; i++) {
0: 			requestServerConsumer.receive();
0: 		}
0: 	}
1: 
0: 	protected MBeanServerConnection createJmxConnection() throws IOException {
0: 		return ManagementFactory.getPlatformMBeanServer();
0: 	}
1: 
0: 	@SuppressWarnings("unchecked")
0: 	public void purgeAllMessages() throws IOException, Exception {
0: 		List<String> tokens = Arrays.asList(new String[] { "*" });
0: 		for (String token : tokens) {
0: 			List<ObjectInstance> queueList = JmxMBeansUtil.queryMBeans(
0: 					createJmxConnection(), "Type=Queue,Destination=" + token
0: 							+ ",*");
0: 			for (ObjectInstance oi : queueList) {
0: 				ObjectName queueName = oi.getObjectName();
0: 				LOG.info("Purging all messages in queue: "
0: 						+ queueName.getKeyProperty("Destination"));
0: 				createJmxConnection().invoke(queueName, "purge",
0: 						new Object[] {}, new String[] {});
0: 			}
0: 		}
0: 	}
1: 
0: 	public void addMessages() throws IOException, Exception {
0: 		// first clean out any messages that may exist.
0: 		purgeAllMessages();
1: 
0: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
0: 			TextMessage msg = requestServerSession
0: 					.createTextMessage("test msg: " + i);
0: 			msg.setStringProperty(PROPERTY_NAME, PROPERTY_VALUE);
0: 			requestServerProducer.send(theQueue, msg);
0: 		}
0: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
0: 			TextMessage msg = requestServerSession
0: 					.createTextMessage("test msg: " + i);
0: 			requestServerProducer.send(theQueue, msg);
0: 		}
1: 
0: 	}
1: 
0: 	public void validateCounts(int expectedWithCount, int expectedWithoutCount,
0: 			int expectedAllCount) throws JMSException {
0: 		QueueBrowser withPropertyBrowser = requestServerSession.createBrowser(
0: 				theQueue, MSG_SEL_WITH_PROPERTY);
0: 		QueueBrowser withoutPropertyBrowser = requestServerSession
0: 				.createBrowser(theQueue, MSG_SEL_WITHOUT_PROPERTY);
0: 		QueueBrowser allBrowser = requestServerSession.createBrowser(theQueue);
1: 
0: 		int withCount = getMessageCount(withPropertyBrowser, "withProperty ");
0: 		int withoutCount = getMessageCount(withoutPropertyBrowser,
0: 				"withoutProperty ");
0: 		int allCount = getMessageCount(allBrowser, "allMessages ");
1: 
0: 		withPropertyBrowser.close();
0: 		withoutPropertyBrowser.close();
0: 		allBrowser.close();
1: 
0: 		assertEquals("Expected withCount to be " + expectedWithCount + " was "
0: 				+ withCount, expectedWithCount, withCount);
0: 		assertEquals("Expected withoutCount to be " + expectedWithoutCount
0: 				+ " was " + withoutCount, expectedWithoutCount, withoutCount);
0: 		assertEquals("Expected allCount to be " + expectedAllCount + " was "
0: 				+ allCount, expectedAllCount, allCount);
0: 		LOG.info("withCount = " + withCount + "\n withoutCount = "
0: 				+ withoutCount + "\n allCount = " + allCount + "\n  = " + "\n");
0: 	}
1: 
1: 	/**
0: 	 * This test ensures that the queueViewMbean will work.
1: 	 * 
0: 	 * @throws Exception
0: 	 */
0: 	@SuppressWarnings("unchecked")
0: 	public void testQueueViewMbean() throws Exception {
1: 
0: 		try {
0: 			addMessages();
1: 
0: 			validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1: 
0: 			List<String> tokens = Arrays.asList(new String[] { "*" });
0: 			for (String token : tokens) {
0: 				List<ObjectInstance> queueList = JmxMBeansUtil.queryMBeans(
0: 						createJmxConnection(), "Type=Queue,Destination="
0: 								+ token + ",*");
1: 
0: 				for (ObjectInstance queue : queueList) {
0: 					ObjectName queueName = ((ObjectInstance) queue)
0: 							.getObjectName();
0: 					QueueViewMBean proxy = (QueueViewMBean) MBeanServerInvocationHandler
0: 							.newProxyInstance(createJmxConnection(), queueName,
0: 									QueueViewMBean.class, true);
0: 					int removed = proxy
0: 							.removeMatchingMessages(MSG_SEL_WITH_PROPERTY);
0: 					LOG.info("Removed: " + removed);
0: 				}
0: 			}
1: 
0: 			validateCounts(0, MESSAGE_COUNT, MESSAGE_COUNT);
1: 
0: 		} finally {
0: 			purgeAllMessages();
0: 		}
0: 	}
1: 
0: 	public void testPurgeCommand() throws Exception {
0: 		try {
0: 			PurgeCommand purgeCommand = new PurgeCommand();
0: 			CommandContext context = new CommandContext();
1: 
0: 			context.setFormatter(new CommandShellOutputFormatter(System.out));
1: 
0: 			purgeCommand.setCommandContext(context);
0: 			purgeCommand.setJmxUseLocal(true);
1: 
0: 			List<String> tokens = new ArrayList<String>();
0: 			tokens.add("--msgsel");
0: //			String[] extras = MSG_SEL_WITH_PROPERTY.split(" ");
0: //			tokens.addAll(Arrays.asList(extras));
0: 			tokens.add(MSG_SEL_WITH_PROPERTY);
1: 			
0: 			addMessages();
0: 			validateCounts(MESSAGE_COUNT, MESSAGE_COUNT, MESSAGE_COUNT * 2);
1: 
0: 			purgeCommand.execute(tokens);
1: 
0: 			validateCounts(0, MESSAGE_COUNT, MESSAGE_COUNT);
0: 		} finally {
0: 			purgeAllMessages();
0: 		}
0: 	}
0: }
============================================================================