1:1b9f5f6: /**
1:1b9f5f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1b9f5f6:  * contributor license agreements.  See the NOTICE file distributed with
1:1b9f5f6:  * this work for additional information regarding copyright ownership.
1:1b9f5f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1b9f5f6:  * (the "License"); you may not use this file except in compliance with
1:1b9f5f6:  * the License.  You may obtain a copy of the License at
1:1b9f5f6:  *
1:1b9f5f6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1b9f5f6:  *
1:1b9f5f6:  * Unless required by applicable law or agreed to in writing, software
1:1b9f5f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1b9f5f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1b9f5f6:  * See the License for the specific language governing permissions and
1:1b9f5f6:  * limitations under the License.
1:1b9f5f6:  */
1:1b9f5f6: package org.apache.activemq.plugin;
2:1b9f5f6: 
1:5e05df1: import static org.apache.activemq.plugin.SubQueueSelectorCacheBroker.MAX_PERSIST_INTERVAL;
1:5e05df1: 
1:1b9f5f6: import java.io.File;
1:1b9f5f6: 
1:1b9f5f6: import org.apache.activemq.broker.Broker;
1:1b9f5f6: import org.apache.activemq.broker.BrokerPlugin;
1:61da1fa: 
1:1b9f5f6: /**
1:1b9f5f6:  * A plugin which allows the caching of the selector from a subscription queue.
1:1b9f5f6:  * <p/>
1:1b9f5f6:  * This stops the build-up of unwanted messages, especially when consumers may
1:1b9f5f6:  * disconnect from time to time when using virtual destinations.
1:1b9f5f6:  * <p/>
1:1b9f5f6:  * This is influenced by code snippets developed by Maciej Rakowicz
1:1b9f5f6:  *
1:5e05df1:  * @org.apache.xbean.XBean element="virtualSelectorCacheBrokerPlugin"
1:1b9f5f6:  */
1:1b9f5f6: public class SubQueueSelectorCacheBrokerPlugin implements BrokerPlugin {
1:1b9f5f6: 
1:1b9f5f6: 
1:1b9f5f6:     private File persistFile;
1:61da1fa:     private boolean singleSelectorPerDestination = false;
1:61da1fa:     private boolean ignoreWildcardSelectors = false;
1:61da1fa:     private long persistInterval = MAX_PERSIST_INTERVAL;
1:1b9f5f6: 
1:1b9f5f6:     @Override
1:1b9f5f6:     public Broker installPlugin(Broker broker) throws Exception {
1:61da1fa:         SubQueueSelectorCacheBroker rc = new SubQueueSelectorCacheBroker(broker, persistFile);
1:61da1fa:         rc.setSingleSelectorPerDestination(singleSelectorPerDestination);
1:61da1fa:         rc.setPersistInterval(persistInterval);
1:61da1fa:         rc.setIgnoreWildcardSelectors(ignoreWildcardSelectors);
1:61da1fa:         return rc;
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6:     /**
1:1b9f5f6:      * Sets the location of the persistent cache
1:1b9f5f6:      */
1:1b9f5f6:     public void setPersistFile(File persistFile) {
1:1b9f5f6:         this.persistFile = persistFile;
1:1b9f5f6:     }
1:1b9f5f6: 
1:1b9f5f6:     public File getPersistFile() {
1:1b9f5f6:         return persistFile;
1:1b9f5f6:     }
1:61da1fa: 
1:61da1fa:     public boolean isSingleSelectorPerDestination() {
1:61da1fa:         return singleSelectorPerDestination;
1:61da1fa:     }
1:61da1fa: 
1:61da1fa:     public void setSingleSelectorPerDestination(boolean singleSelectorPerDestination) {
1:61da1fa:         this.singleSelectorPerDestination = singleSelectorPerDestination;
1:61da1fa:     }
1:61da1fa: 
1:61da1fa:     public long getPersistInterval() {
1:61da1fa:         return persistInterval;
1:61da1fa:     }
1:61da1fa: 
1:61da1fa:     public void setPersistInterval(long persistInterval) {
1:61da1fa:         this.persistInterval = persistInterval;
1:61da1fa:     }
1:61da1fa: 
1:61da1fa:     public boolean isIgnoreWildcardSelectors() {
1:61da1fa:         return ignoreWildcardSelectors;
1:61da1fa:     }
1:61da1fa: 
1:61da1fa:     public void setIgnoreWildcardSelectors(boolean ignoreWildcardSelectors) {
1:61da1fa:         this.ignoreWildcardSelectors = ignoreWildcardSelectors;
1:61da1fa:     }
1:1b9f5f6: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.plugin.SubQueueSelectorCacheBroker.MAX_PERSIST_INTERVAL;
1: 
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="virtualSelectorCacheBrokerPlugin"
author:Christian Posta
-------------------------------------------------------------------------------
commit:61da1fa
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.plugin.SubQueueSelectorCacheBroker.MAX_PERSIST_INTERVAL;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private boolean singleSelectorPerDestination = false;
1:     private boolean ignoreWildcardSelectors = false;
1:     private long persistInterval = MAX_PERSIST_INTERVAL;
1:         SubQueueSelectorCacheBroker rc = new SubQueueSelectorCacheBroker(broker, persistFile);
1:         rc.setSingleSelectorPerDestination(singleSelectorPerDestination);
1:         rc.setPersistInterval(persistInterval);
1:         rc.setIgnoreWildcardSelectors(ignoreWildcardSelectors);
1:         return rc;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isSingleSelectorPerDestination() {
1:         return singleSelectorPerDestination;
1:     }
1: 
1:     public void setSingleSelectorPerDestination(boolean singleSelectorPerDestination) {
1:         this.singleSelectorPerDestination = singleSelectorPerDestination;
1:     }
1: 
1:     public long getPersistInterval() {
1:         return persistInterval;
1:     }
1: 
1:     public void setPersistInterval(long persistInterval) {
1:         this.persistInterval = persistInterval;
1:     }
1: 
1:     public boolean isIgnoreWildcardSelectors() {
1:         return ignoreWildcardSelectors;
1:     }
1: 
1:     public void setIgnoreWildcardSelectors(boolean ignoreWildcardSelectors) {
1:         this.ignoreWildcardSelectors = ignoreWildcardSelectors;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Robert Davies
-------------------------------------------------------------------------------
commit:1b9f5f6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import java.io.File;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPlugin;
1: 
1: /**
1:  * A plugin which allows the caching of the selector from a subscription queue.
1:  * <p/>
1:  * This stops the build-up of unwanted messages, especially when consumers may
1:  * disconnect from time to time when using virtual destinations.
1:  * <p/>
1:  * This is influenced by code snippets developed by Maciej Rakowicz
1:  *
0:  * @author Roelof Naude roelof(dot)naude(at)gmail.com
0:  *@org.apache.xbean.XBean element="virtualSelectorCacheBrokerPlugin"
1:  */
1: public class SubQueueSelectorCacheBrokerPlugin implements BrokerPlugin {
1: 
1: 
1:     private File persistFile;
1: 
1:     @Override
1:     public Broker installPlugin(Broker broker) throws Exception {
0:         return new SubQueueSelectorCacheBroker(broker, persistFile);
1:     }
1: 
1:     /**
1:      * Sets the location of the persistent cache
1:      */
1:     public void setPersistFile(File persistFile) {
1:         this.persistFile = persistFile;
1:     }
1: 
1:     public File getPersistFile() {
1:         return persistFile;
1:     }
1: }
============================================================================