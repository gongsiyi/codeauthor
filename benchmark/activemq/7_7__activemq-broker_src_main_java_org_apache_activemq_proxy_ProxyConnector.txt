1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.proxy;
1:f812e34: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.transport.CompositeTransport;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportAcceptListener;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:a7ac415: import org.apache.activemq.transport.TransportFilter;
1:d29ca2a: import org.apache.activemq.transport.TransportServer;
1:a7ac415: import org.apache.activemq.util.ServiceStopper;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
10:d29ca2a: 
1:257710b: import java.io.IOException;
1:257710b: import java.net.URI;
1:257710b: import java.net.URISyntaxException;
1:257710b: import java.util.Iterator;
1:257710b: import java.util.concurrent.CopyOnWriteArrayList;
1:257710b: 
1:d29ca2a: /**
1:68d245f:  * @org.apache.xbean.XBean
1:d29ca2a:  */
1:d29ca2a: public class ProxyConnector implements Service {
1:a7ac415: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ProxyConnector.class);
1:d29ca2a:     private TransportServer server;
1:d29ca2a:     private URI bind;
1:d29ca2a:     private URI remote;
1:d29ca2a:     private URI localUri;
1:b2ad8fa:     private String name;
1:257710b: 
1:121ecb5:     /**
1:121ecb5:      * Should we proxy commands to the local broker using VM transport as well?
1:121ecb5:      */
1:121ecb5:     private boolean proxyToLocalBroker = true;
1:257710b: 
1:f392884:     private final CopyOnWriteArrayList<ProxyConnection> connections = new CopyOnWriteArrayList<ProxyConnection>();
1:f812e34: 
1:257710b:     @Override
1:d29ca2a:     public void start() throws Exception {
1:f812e34: 
1:d29ca2a:         this.getServer().setAcceptListener(new TransportAcceptListener() {
1:257710b:             @Override
1:d29ca2a:             public void onAccept(Transport localTransport) {
1:257710b:                 ProxyConnection connection = null;
1:d29ca2a:                 try {
1:257710b:                     Transport remoteTransport = createRemoteTransport(localTransport);
1:257710b:                     connection = new ProxyConnection(localTransport, remoteTransport);
1:f812e34:                     connection.start();
1:257710b:                     connections.add(connection);
1:f812e34:                 } catch (Exception e) {
1:d29ca2a:                     onAcceptError(e);
1:257710b:                     try {
1:257710b:                         if (connection != null) {
1:257710b:                             connection.stop();
1:257710b:                         }
1:257710b:                     } catch (Exception eoc) {
1:257710b:                         LOG.error("Could not close broken connection: ", eoc);
1:257710b:                     }
1:d29ca2a:                 }
1:d29ca2a:             }
1:a7ac415: 
1:257710b:             @Override
1:d29ca2a:             public void onAcceptError(Exception error) {
1:e1bbde7:                 LOG.error("Could not accept connection: ", error);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         getServer().start();
1:59af747:         LOG.info("Proxy Connector {} started", getName());
1:d29ca2a:     }
1:a7ac415: 
1:257710b:     @Override
1:a7ac415:     public void stop() throws Exception {
1:a7ac415:         ServiceStopper ss = new ServiceStopper();
1:8c933fc:         if (this.server != null) {
1:a7ac415:             ss.stop(this.server);
1:a7ac415:         }
1:257710b: 
1:933eb2f:         for (Iterator<ProxyConnection> iter = connections.iterator(); iter.hasNext();) {
1:fc00993:             LOG.info("Connector stopped: Stopping proxy.");
1:933eb2f:             ss.stop(iter.next());
1:a7ac415:         }
1:257710b:         connections.clear();
1:a7ac415:         ss.throwFirstException();
1:59af747:         LOG.info("Proxy Connector {} stopped", getName());
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     // Properties
1:d29ca2a:     // -------------------------------------------------------------------------
1:f812e34: 
1:d29ca2a:     public URI getLocalUri() {
1:d29ca2a:         return localUri;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setLocalUri(URI localURI) {
1:d29ca2a:         this.localUri = localURI;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public URI getBind() {
1:d29ca2a:         return bind;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setBind(URI bind) {
1:d29ca2a:         this.bind = bind;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public URI getRemote() {
1:d29ca2a:         return remote;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setRemote(URI remote) {
1:d29ca2a:         this.remote = remote;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TransportServer getServer() throws IOException, URISyntaxException {
1:d29ca2a:         if (server == null) {
1:d29ca2a:             server = createServer();
1:d29ca2a:         }
1:d29ca2a:         return server;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setServer(TransportServer server) {
1:d29ca2a:         this.server = server;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected TransportServer createServer() throws IOException, URISyntaxException {
1:d29ca2a:         if (bind == null) {
1:d29ca2a:             throw new IllegalArgumentException("You must specify either a server or the bind property");
1:d29ca2a:         }
1:5d99c99:         return TransportFactory.bind(bind);
1:d29ca2a:     }
1:d29ca2a: 
1:257710b:     private Transport createRemoteTransport(final Transport local) throws Exception {
1:d29ca2a:         Transport transport = TransportFactory.compositeConnect(remote);
1:f392884:         CompositeTransport ct = transport.narrow(CompositeTransport.class);
1:121ecb5:         if (ct != null && localUri != null && proxyToLocalBroker) {
1:257710b:             ct.add(false, new URI[] { localUri });
1:d29ca2a:         }
1:f812e34: 
1:121ecb5:         // Add a transport filter so that we can track the transport life cycle
1:a7ac415:         transport = new TransportFilter(transport) {
1:f392884:             @Override
1:f812e34:             public void stop() throws Exception {
1:fc00993:                 LOG.info("Stopping proxy.");
1:f812e34:                 super.stop();
1:257710b:                 ProxyConnection dummy = new ProxyConnection(local, this);
1:257710b:                 LOG.debug("Removing proxyConnection {}", dummy.toString());
1:257710b:                 connections.remove(dummy);
1:f812e34:             }
1:a7ac415:         };
1:d29ca2a:         return transport;
1:d29ca2a:     }
1:d29ca2a: 
1:b2ad8fa:     public String getName() {
1:f812e34:         if (name == null) {
1:f812e34:             if (server != null) {
1:65e40d0:                 name = server.getConnectURI().toString();
1:65e40d0:             } else {
1:65e40d0:                 name = "proxy";
1:65e40d0:             }
1:b2ad8fa:         }
1:b2ad8fa:         return name;
1:b2ad8fa:     }
1:b2ad8fa: 
1:b2ad8fa:     public void setName(String name) {
1:b2ad8fa:         this.name = name;
1:b2ad8fa:     }
1:b2ad8fa: 
1:121ecb5:     public boolean isProxyToLocalBroker() {
1:121ecb5:         return proxyToLocalBroker;
1:d29ca2a:     }
1:d29ca2a: 
1:121ecb5:     public void setProxyToLocalBroker(boolean proxyToLocalBroker) {
1:121ecb5:         this.proxyToLocalBroker = proxyToLocalBroker;
1:d29ca2a:     }
1:d29ca2a: 
1:257710b:     protected Integer getConnectionCount() {
1:257710b:         return connections.size();
1:257710b:     }
1:d29ca2a: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:257710b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.Iterator;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     @Override
1:             @Override
1:                 ProxyConnection connection = null;
1:                     Transport remoteTransport = createRemoteTransport(localTransport);
1:                     connection = new ProxyConnection(localTransport, remoteTransport);
1:                     connections.add(connection);
1:                     try {
1:                         if (connection != null) {
1:                             connection.stop();
1:                         }
1:                     } catch (Exception eoc) {
1:                         LOG.error("Could not close broken connection: ", eoc);
1:                     }
1:             @Override
1:     @Override
1: 
1:         connections.clear();
/////////////////////////////////////////////////////////////////////////
1:     private Transport createRemoteTransport(final Transport local) throws Exception {
1:             ct.add(false, new URI[] { localUri });
/////////////////////////////////////////////////////////////////////////
1:                 ProxyConnection dummy = new ProxyConnection(local, this);
1:                 LOG.debug("Removing proxyConnection {}", dummy.toString());
1:                 connections.remove(dummy);
/////////////////////////////////////////////////////////////////////////
1:     protected Integer getConnectionCount() {
1:         return connections.size();
1:     }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:59af747
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Proxy Connector {} started", getName());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Proxy Connector {} stopped", getName());
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("Could not accept connection: ", error);
0:         LOG.info("Proxy Connector {} Started", getName());
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Proxy Connector {} Stopped", getName());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:         return TransportFactory.bind(bind);
commit:3910056
/////////////////////////////////////////////////////////////////////////
0:         return TransportFactory.bind((String)null, bind);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private CopyOnWriteArrayList<ProxyConnection> connections = new CopyOnWriteArrayList<ProxyConnection>();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<ProxyConnection> iter = connections.iterator(); iter.hasNext();) {
1:             ss.stop(iter.next());
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ProxyConnector.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.error("Could not accept connection: " + error, error);
0:         LOG.info("Proxy Connector " + getName() + " Started");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Connector stopped: Stopping proxy.");
0:         LOG.info("Proxy Connector " + getName() + " Stopped");
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Stopping proxy.");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:                     connection.start();
1:                 } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
0:         log.info("Proxy Connector " + getName() + " Started");
/////////////////////////////////////////////////////////////////////////
0:             ss.stop((Service)iter.next());
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         CompositeTransport ct = (CompositeTransport)transport.narrow(CompositeTransport.class);
0:         if (ct != null && localUri != null) {
0:             ct.add(new URI[] {localUri});
1: 
1:             public void stop() throws Exception {
0:                 log.info("Stopping proxy.");
1:                 super.stop();
0:                 connections.remove(this);
1:             }
1:         if (name == null) {
1:             if (server != null) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:65e40d0
/////////////////////////////////////////////////////////////////////////
0:             if( server!=null ) {
1:                 name = server.getConnectURI().toString();
1:             } else {
1:                 name = "proxy";
1:             }
commit:b2ad8fa
/////////////////////////////////////////////////////////////////////////
1:     private String name;
/////////////////////////////////////////////////////////////////////////
0:         log.info("Proxy Connector "+getName()+" Started");
/////////////////////////////////////////////////////////////////////////
0:         log.info("Proxy Connector "+getName()+" Stopped");
/////////////////////////////////////////////////////////////////////////
1:     public String getName() {
0:         if( name == null ) {
0:             name = server.getConnectURI().toString();
1:         }
1:         return name;
1:     }
1: 
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:a7ac415
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
1: import org.apache.activemq.transport.TransportFilter;
1: import org.apache.activemq.util.ServiceStopper;
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
0:     CopyOnWriteArrayList connections = new CopyOnWriteArrayList();
/////////////////////////////////////////////////////////////////////////
0:                     connections.add(connection);
0:                     connection.start();                    
/////////////////////////////////////////////////////////////////////////
1:     	ServiceStopper ss = new ServiceStopper();
1:             ss.stop(this.server);
0:         for (Iterator iter = connections.iterator(); iter.hasNext();) {
0:     	   System.out.println("Connector stopped: Stopping proxy.");
0: 		   ss.stop((Service) iter.next());
1: 		}
1:         ss.throwFirstException();
/////////////////////////////////////////////////////////////////////////
1:         
0:         // Add a transport filter so that can track the transport life cycle
1:         transport = new TransportFilter(transport) {
1:         	public void stop() throws Exception {
0:         		System.out.println("Stopping proxy.");
0:         		super.stop();
0:         		connections.remove(this);
1:         	}
1:         };
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.proxy;
1: 
0: import java.io.IOException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.transport.CompositeTransport;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportAcceptListener;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportServer;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
1: public class ProxyConnector implements Service {
1: 
0:     private static final Log log = LogFactory.getLog(ProxyConnector.class);
1:     private TransportServer server;
1:     private URI bind;
1:     private URI remote;
1:     private URI localUri;
1:        
1:     public void start() throws Exception {
1:         
1:         this.getServer().setAcceptListener(new TransportAcceptListener() {
1:             public void onAccept(Transport localTransport) {
1:                 try {
0:                     Transport remoteTransport = createRemoteTransport();
0:                     ProxyConnection connection = new ProxyConnection(localTransport, remoteTransport);
0:                     connection.start();
1:                 }
0:                 catch (Exception e) {
1:                     onAcceptError(e);
1:                 }
1:             }
1: 
1:             public void onAcceptError(Exception error) {
0:                 log.error("Could not accept connection: " + error, error);
1:             }
1:         });
1:         getServer().start();
1: 
1:     }
1: 
0:     public void stop() throws Exception {
0:         if( this.server!=null ) {
0:             this.server.stop();
1:         }
1:     }
1:     
1:     // Properties
1:     // -------------------------------------------------------------------------
1:     
1:     public URI getLocalUri() {
1:         return localUri;
1:     }
1: 
1:     public void setLocalUri(URI localURI) {
1:         this.localUri = localURI;
1:     }
1: 
1:     public URI getBind() {
1:         return bind;
1:     }
1: 
1:     public void setBind(URI bind) {
1:         this.bind = bind;
1:     }
1: 
1:     public URI getRemote() {
1:         return remote;
1:     }
1: 
1:     public void setRemote(URI remote) {
1:         this.remote = remote;
1:     }
1: 
1:     public TransportServer getServer() throws IOException, URISyntaxException {
1:         if (server == null) {
1:             server = createServer();
1:         }
1:         return server;
1:     }
1:     
1:     public void setServer(TransportServer server) {
1:         this.server = server;
1:     }
1: 
1:     protected TransportServer createServer() throws IOException, URISyntaxException {
1:         if (bind == null) {
1:             throw new IllegalArgumentException("You must specify either a server or the bind property");
1:         }
0:         return TransportFactory.bind(null, bind);
1:     }
1: 
0:     private Transport createRemoteTransport() throws Exception {
1:         Transport transport = TransportFactory.compositeConnect(remote);
0:         CompositeTransport ct = (CompositeTransport) transport.narrow(CompositeTransport.class);
0:         if( ct !=null && localUri!=null ) {
0:             ct.add(new URI[]{localUri});
1:         }
1:         return transport;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ProxyConnector.class);
commit:121ecb5
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Should we proxy commands to the local broker using VM transport as well?
1:      */
1:     private boolean proxyToLocalBroker = true;
0:     
/////////////////////////////////////////////////////////////////////////
1:         if (ct != null && localUri != null && proxyToLocalBroker) {
1:         // Add a transport filter so that we can track the transport life cycle
/////////////////////////////////////////////////////////////////////////
1:     public boolean isProxyToLocalBroker() {
1:         return proxyToLocalBroker;
0:     }
0: 
1:     public void setProxyToLocalBroker(boolean proxyToLocalBroker) {
1:         this.proxyToLocalBroker = proxyToLocalBroker;
0:     }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final CopyOnWriteArrayList<ProxyConnection> connections = new CopyOnWriteArrayList<ProxyConnection>();
/////////////////////////////////////////////////////////////////////////
1:         CompositeTransport ct = transport.narrow(CompositeTransport.class);
0:             ct.add(false,new URI[] {localUri});
1:             @Override
author:James Strachan
-------------------------------------------------------------------------------
commit:acc3ca7
/////////////////////////////////////////////////////////////////////////
0:         		log.info("Stopping proxy.");
commit:8c933fc
/////////////////////////////////////////////////////////////////////////
0:         ServiceStopper ss = new ServiceStopper();
1:         if (this.server != null) {
0:             log.info("Connector stopped: Stopping proxy.");
0:             ss.stop((Service) iter.next());
0:         }
0:         log.info("Proxy Connector " + getName() + " Stopped");
============================================================================