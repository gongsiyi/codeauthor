1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.perf;
1:51e6a0d: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:230a86c: public class PerfRate {
1:230a86c: 
1:d29ca2a:     protected int totalCount;
1:d29ca2a:     protected int count;
1:230a86c:     protected long startTime = System.currentTimeMillis();
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the count.
1:d29ca2a:      */
1:230a86c:     public int getCount() {
1:d29ca2a:         return totalCount;
3:d29ca2a:     }
1:51e6a0d: 
1:fc00993:     public synchronized void increment() {
1:d29ca2a:         totalCount++;
1:d29ca2a:         count++;
1:86cbdfd:     }
5:e0fdce4: 
1:230a86c:     public int getRate() {
1:230a86c:         long endTime = System.currentTimeMillis();
1:230a86c:         long totalTime = endTime - startTime;
1:230a86c:         int result = (int)((count * 1000) / totalTime);
1:d29ca2a:         return result;
1:d29ca2a:     }
1:230a86c: 
1:e0fdce4:     /**
1:e0fdce4:      * Resets the rate sampling.
1:e0fdce4:      */
1:fc00993:     public synchronized PerfRate cloneAndReset() {
1:230a86c:         PerfRate rc = new PerfRate();
1:230a86c:         rc.totalCount = totalCount;
1:230a86c:         rc.count = count;
1:230a86c:         rc.startTime = startTime;
1:230a86c:         count = 0;
1:230a86c:         startTime = System.currentTimeMillis();
1:51e6a0d:         return rc;
1:51e6a0d:     }
1:230a86c: 
1:51e6a0d:     /**
1:51e6a0d:      * Resets the rate sampling.
1:51e6a0d:      */
1:e0fdce4:     public void reset() {
1:230a86c:         count = 0;
1:230a86c:         startTime = System.currentTimeMillis();
1:e0fdce4:     }
1:51e6a0d: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the totalCount.
1:d29ca2a:      */
1:230a86c:     public int getTotalCount() {
1:d29ca2a:         return totalCount;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:230a86c:      * @param totalCount The totalCount to set.
1:d29ca2a:      */
1:230a86c:     public void setTotalCount(int totalCount) {
1:230a86c:         this.totalCount = totalCount;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void increment() {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized PerfRate cloneAndReset() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: public class PerfRate {
1: 
1:     protected long startTime = System.currentTimeMillis();
1: 
1:     public int getCount() {
0:     synchronized public void increment() {
1:     public int getRate() {
1:         long endTime = System.currentTimeMillis();
1:         long totalTime = endTime - startTime;
1:         int result = (int)((count * 1000) / totalTime);
1: 
1:         PerfRate rc = new PerfRate();
1:         rc.totalCount = totalCount;
1:         rc.count = count;
1:         rc.startTime = startTime;
1:         count = 0;
1:         startTime = System.currentTimeMillis();
1: 
1:         count = 0;
1:         startTime = System.currentTimeMillis();
1:     public int getTotalCount() {
1: 
1:      * @param totalCount The totalCount to set.
1:     public void setTotalCount(int totalCount) {
1:         this.totalCount = totalCount;
commit:51e6a0d
/////////////////////////////////////////////////////////////////////////
1: 	
1:     
/////////////////////////////////////////////////////////////////////////
0:     synchronized public void increment(){
/////////////////////////////////////////////////////////////////////////
0:     synchronized public PerfRate cloneAndReset() {
0:     	PerfRate rc = new PerfRate();
0:     	rc.totalCount = totalCount;
0:     	rc.count=count;
0:     	rc.startTime=startTime;    	
0:         count=0;
0:         startTime=System.currentTimeMillis();
1:         return rc;
1:     }
1:     
1:     /**
1:      * Resets the rate sampling.
1:      */
commit:e0fdce4
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     
1:     /**
1:      * Resets the rate sampling.
1:      */
1:     public void reset() {
0:         count=0;
0:         startTime=System.currentTimeMillis();
1:     }
1: 
1:     
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
0: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class PerfRate{
1:     protected int totalCount;
1:     protected int count;
0:     protected long startTime=System.currentTimeMillis();
1:     /**
1:      * @return Returns the count.
1:      */
0:     public int getCount(){
1:         return totalCount;
1:     }
0:     public void increment(){
1:         totalCount++;
1:         count++;
1:     }
0:     public void start(){
0:         count=0;
0:         startTime=System.currentTimeMillis();
1:     }
0:     public int getRate(){
0:         long endTime=System.currentTimeMillis();
0:         long totalTime=endTime-startTime;
0:         int result=(int) ((count*1000)/totalTime);
1:         return result;
1:     }
1:     /**
1:      * @return Returns the totalCount.
1:      */
0:     public int getTotalCount(){
1:         return totalCount;
1:     }
1:     /**
0:      * @param totalCount
0:      *            The totalCount to set.
1:      */
0:     public void setTotalCount(int totalCount){
0:         this.totalCount=totalCount;
1:     }
1: }
============================================================================