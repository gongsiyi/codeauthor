1:9e85629: /*
1:9e85629:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e85629:  * contributor license agreements.  See the NOTICE file distributed with
1:9e85629:  * this work for additional information regarding copyright ownership.
1:9e85629:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e85629:  * (the "License"); you may not use this file except in compliance with
1:9e85629:  * the License.  You may obtain a copy of the License at
1:9e85629:  *
1:9e85629:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9e85629:  *
1:9e85629:  * Unless required by applicable law or agreed to in writing, software
1:9e85629:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e85629:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e85629:  * See the License for the specific language governing permissions and
1:9e85629:  * limitations under the License.
1:9e85629:  */
1:9e85629: package org.apache.activemq.util;
1:9e85629: 
1:9e85629: import static org.junit.Assert.assertEquals;
1:9e85629: import static org.junit.Assert.assertNotNull;
1:9e85629: import static org.junit.Assert.assertTrue;
1:9e85629: import static org.junit.Assert.fail;
1:9e85629: 
1:9e85629: import java.io.ByteArrayInputStream;
1:9e85629: import java.io.ByteArrayOutputStream;
1:9e85629: import java.io.IOException;
1:9e85629: import java.io.ObjectOutputStream;
1:9e85629: import java.util.Arrays;
1:9e85629: import java.util.UUID;
1:9e85629: import java.util.Vector;
1:9e85629: 
1:9e85629: import org.junit.Rule;
1:9e85629: import org.junit.Test;
1:9e85629: import org.junit.rules.TestName;
1:9e85629: 
1:9e85629: public class ClassLoadingAwareObjectInputStreamTest {
1:9e85629: 
1:9e85629:     private final String ACCEPTS_ALL_FILTER = "*";
1:9e85629:     private final String ACCEPTS_NONE_FILTER = "";
1:9e85629: 
1:9e85629:     @Rule
1:9e85629:     public TestName name = new TestName();
1:9e85629: 
1:9e85629:     //----- Test for serialized objects --------------------------------------//
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObject() throws Exception {
1:9e85629:         // Expect to succeed
1:9e85629:         doTestReadObject(new SimplePojo(name.getMethodName()), ACCEPTS_ALL_FILTER);
1:9e85629: 
1:9e85629:         // Expect to fail
1:9e85629:         try {
1:9e85629:             doTestReadObject(new SimplePojo(name.getMethodName()), ACCEPTS_NONE_FILTER);
1:9e85629:             fail("Should have failed to read");
1:9e85629:         } catch (ClassNotFoundException cnfe) {
1:9e85629:             // Expected
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectWithAnonymousClass() throws Exception {
1:9e85629:         AnonymousSimplePojoParent pojoParent = new AnonymousSimplePojoParent(name.getMethodName());
1:9e85629: 
1:9e85629:         byte[] serialized = serializeObject(pojoParent);
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(new String[] { "org.apache.activemq.util" }));
1:9e85629: 
1:9e85629:             Object obj = reader.readObject();
1:9e85629: 
1:9e85629:             assertTrue(obj instanceof AnonymousSimplePojoParent);
1:9e85629:             assertEquals("Unexpected payload", pojoParent.getPayload(), ((AnonymousSimplePojoParent)obj).getPayload());
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectWitLocalClass() throws Exception {
1:9e85629:         LocalSimplePojoParent pojoParent = new LocalSimplePojoParent(name.getMethodName());
1:9e85629: 
1:9e85629:         byte[] serialized = serializeObject(pojoParent);
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(new String[] { "org.apache.activemq.util" }));
1:9e85629: 
1:9e85629:             Object obj = reader.readObject();
1:9e85629: 
1:9e85629:             assertTrue(obj instanceof LocalSimplePojoParent);
1:9e85629:             assertEquals("Unexpected payload", pojoParent.getPayload(), ((LocalSimplePojoParent)obj).getPayload());
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectByte() throws Exception {
1:9e85629:         doTestReadObject(Byte.valueOf((byte) 255), ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectShort() throws Exception {
1:9e85629:         doTestReadObject(Short.valueOf((short) 255), ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectInteger() throws Exception {
1:9e85629:         doTestReadObject(Integer.valueOf(255), ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectLong() throws Exception {
1:9e85629:         doTestReadObject(Long.valueOf(255l), ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectFloat() throws Exception {
1:9e85629:         doTestReadObject(Float.valueOf(255.0f), ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectDouble() throws Exception {
1:9e85629:         doTestReadObject(Double.valueOf(255.0), ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectBoolean() throws Exception {
1:9e85629:         doTestReadObject(Boolean.FALSE, ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectString() throws Exception {
1:9e85629:         doTestReadObject(new String(name.getMethodName()), ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     //----- Test that arrays of objects can be read --------------------------//
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectStringArray() throws Exception {
1:9e85629:         String[] value = new String[2];
1:9e85629: 
1:9e85629:         value[0] = name.getMethodName() + "-1";
1:9e85629:         value[1] = name.getMethodName() + "-2";
1:9e85629: 
1:9e85629:         doTestReadObject(value, ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectMultiDimensionalArray() throws Exception {
1:9e85629:         String[][][] value = new String[2][2][1];
1:9e85629: 
1:9e85629:         value[0][0][0] = "0-0-0";
1:9e85629:         value[0][1][0] = "0-1-0";
1:9e85629:         value[1][0][0] = "1-0-0";
1:9e85629:         value[1][1][0] = "1-1-0";
1:9e85629: 
1:9e85629:         doTestReadObject(value, ACCEPTS_ALL_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     //----- Test that primitive types are not filtered -----------------------//
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveByteNotFiltered() throws Exception {
1:9e85629:         doTestReadPrimitive((byte) 255, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveShortNotFiltered() throws Exception {
1:9e85629:         doTestReadPrimitive((short) 255, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveIntegerNotFiltered() throws Exception {
1:9e85629:         doTestReadPrimitive(255, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveLongNotFiltered() throws Exception {
1:9e85629:         doTestReadPrimitive((long) 255, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveFloatNotFiltered() throws Exception {
1:9e85629:         doTestReadPrimitive((float) 255.0, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveDoubleNotFiltered() throws Exception {
1:9e85629:         doTestReadPrimitive(255.0, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveBooleanNotFiltered() throws Exception {
1:9e85629:         doTestReadPrimitive(false, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitveCharNotFiltered() throws Exception {
1:9e85629:         doTestReadPrimitive('c', ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectStringNotFiltered() throws Exception {
1:9e85629:         doTestReadObject(new String(name.getMethodName()), ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     //----- Test that primitive arrays get past filters ----------------------//
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveByteArrayNotFiltered() throws Exception {
1:9e85629:         byte[] value = new byte[2];
1:9e85629: 
1:9e85629:         value[0] = 1;
1:9e85629:         value[1] = 2;
1:9e85629: 
1:9e85629:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveShortArrayNotFiltered() throws Exception {
1:9e85629:         short[] value = new short[2];
1:9e85629: 
1:9e85629:         value[0] = 1;
1:9e85629:         value[1] = 2;
1:9e85629: 
1:9e85629:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveIntegerArrayNotFiltered() throws Exception {
1:9e85629:         int[] value = new int[2];
1:9e85629: 
1:9e85629:         value[0] = 1;
1:9e85629:         value[1] = 2;
1:9e85629: 
1:9e85629:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveLongArrayNotFiltered() throws Exception {
1:9e85629:         long[] value = new long[2];
1:9e85629: 
1:9e85629:         value[0] = 1;
1:9e85629:         value[1] = 2;
1:9e85629: 
1:9e85629:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveFloatArrayNotFiltered() throws Exception {
1:9e85629:         float[] value = new float[2];
1:9e85629: 
1:9e85629:         value[0] = 1.1f;
1:9e85629:         value[1] = 2.1f;
1:9e85629: 
1:9e85629:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testPrimitiveDoubleArrayNotFiltered() throws Exception {
1:9e85629:         double[] value = new double[2];
1:9e85629: 
1:9e85629:         value[0] = 1.1;
1:9e85629:         value[1] = 2.1;
1:9e85629: 
1:9e85629:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:9e85629:     }
1:9e85629: 
1:9e85629:     //----- Tests for types that should be filtered --------------------------//
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectArrayFiltered() throws Exception {
1:9e85629:         UUID[] value = new UUID[2];
1:9e85629: 
1:9e85629:         value[0] = UUID.randomUUID();
1:9e85629:         value[1] = UUID.randomUUID();
1:9e85629: 
1:9e85629:         byte[] serialized = serializeObject(value);
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(ACCEPTS_NONE_FILTER.split(",")));
1:9e85629: 
1:9e85629:             try {
1:9e85629:                 reader.readObject();
1:9e85629:                 fail("Should not be able to read the payload.");
1:9e85629:             } catch (ClassNotFoundException ex) {}
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectMixedTypeArrayGetsFiltered() throws Exception {
1:9e85629:         Object[] value = new Object[4];
1:9e85629: 
1:9e85629:         value[0] = name.getMethodName();
1:9e85629:         value[1] = UUID.randomUUID();
1:9e85629:         value[2] = new Vector<Object>();
1:9e85629:         value[3] = new SimplePojo(name.getMethodName());
1:9e85629: 
1:9e85629:         byte[] serialized = serializeObject(value);
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:             ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(new String[] { "java" }));
1:9e85629: 
1:9e85629:             try {
1:9e85629:                 reader.readObject();
1:9e85629:                 fail("Should not be able to read the payload.");
1:9e85629:             } catch (ClassNotFoundException ex) {
1:9e85629:             }
1:9e85629:         }
1:9e85629: 
1:9e85629:         // Replace the filtered type and try again
1:9e85629:         value[3] = new Integer(20);
1:9e85629: 
1:9e85629:         serialized = serializeObject(value);
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:             ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(new String[] { "java" }));
1:9e85629: 
1:9e85629:             try {
1:9e85629:                 Object result = reader.readObject();
1:9e85629: 
1:9e85629:                 assertNotNull(result);
1:9e85629:                 assertTrue(result.getClass().isArray());
1:9e85629:             } catch (ClassNotFoundException ex) {
1:9e85629:                 fail("Should be able to read the payload.");
1:9e85629:             }
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectMultiDimensionalArrayFiltered() throws Exception {
1:9e85629:         UUID[][] value = new UUID[2][2];
1:9e85629: 
1:9e85629:         value[0][0] = UUID.randomUUID();
1:9e85629:         value[0][1] = UUID.randomUUID();
1:9e85629:         value[1][0] = UUID.randomUUID();
1:9e85629:         value[1][1] = UUID.randomUUID();
1:9e85629: 
1:9e85629:         byte[] serialized = serializeObject(value);
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(ACCEPTS_NONE_FILTER.split(",")));
1:9e85629: 
1:9e85629:             try {
1:9e85629:                 reader.readObject();
1:9e85629:                 fail("Should not be able to read the payload.");
1:9e85629:             } catch (ClassNotFoundException ex) {}
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectFailsWithUntrustedType() throws Exception {
1:9e85629:         byte[] serialized = serializeObject(new SimplePojo(name.getMethodName()));
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(new String[] { "java" }));
1:9e85629: 
1:9e85629:             try {
1:9e85629:                 reader.readObject();
1:9e85629:                 fail("Should not be able to read the payload.");
1:9e85629:             } catch (ClassNotFoundException ex) {}
1:9e85629:         }
1:9e85629: 
1:9e85629:         serialized = serializeObject(UUID.randomUUID());
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             try {
1:9e85629:                 reader.readObject();
1:9e85629:             } catch (ClassNotFoundException ex) {
1:9e85629:                 fail("Should be able to read the payload.");
1:9e85629:             }
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     @Test
1:9e85629:     public void testReadObjectFailsWithUnstrustedContentInTrustedType() throws Exception {
1:9e85629:         byte[] serialized = serializeObject(new SimplePojo(UUID.randomUUID()));
1:9e85629: 
1:9e85629:         ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:         try (ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(new String[] { "org.apache.activemq" }));
1:9e85629: 
1:9e85629:             try {
1:9e85629:                 reader.readObject();
1:9e85629:                 fail("Should not be able to read the payload.");
1:9e85629:             } catch (ClassNotFoundException ex) {}
1:9e85629:         }
1:9e85629: 
1:9e85629:         serialized = serializeObject(UUID.randomUUID());
1:9e85629:         input = new ByteArrayInputStream(serialized);
1:9e85629:         try (ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(new String[] { "org.apache.activemq" }));
1:9e85629: 
1:9e85629:             try {
1:9e85629:                 reader.readObject();
1:9e85629:                 fail("Should not be able to read the payload.");
1:9e85629:             } catch (ClassNotFoundException ex) {
1:9e85629:             }
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     //----- Internal methods -------------------------------------------------//
1:9e85629: 
1:9e85629:     private void doTestReadObject(Object value, String filter) throws Exception {
1:9e85629:         byte[] serialized = serializeObject(value);
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:              ClassLoadingAwareObjectInputStream reader =
1:9e85629:                  new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(filter.split(",")));
1:9e85629: 
1:9e85629:             Object result = reader.readObject();
1:9e85629:             assertNotNull(result);
1:9e85629:             assertEquals(value.getClass(), result.getClass());
1:9e85629:             if (result.getClass().isArray()) {
1:9e85629:                 assertTrue(Arrays.deepEquals((Object[]) value, (Object[]) result));
1:9e85629:             } else {
1:9e85629:                 assertEquals(value, result);
1:9e85629:             }
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     private byte[] serializeObject(Object value) throws IOException {
1:9e85629:         byte[] result = new byte[0];
1:9e85629: 
1:9e85629:         if (value != null) {
1:9e85629:             try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:9e85629:                  ObjectOutputStream oos = new ObjectOutputStream(baos)) {
1:9e85629: 
1:9e85629:                 oos.writeObject(value);
1:9e85629:                 oos.flush();
1:9e85629:                 oos.close();
1:9e85629: 
1:9e85629:                 result = baos.toByteArray();
1:9e85629:             }
1:9e85629:         }
1:9e85629: 
1:9e85629:         return result;
1:9e85629:     }
1:9e85629: 
1:9e85629:     private void doTestReadPrimitive(Object value, String filter) throws Exception {
1:9e85629:         byte[] serialized = serializePrimitive(value);
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(filter.split(",")));
1:9e85629: 
1:9e85629:             Object result = null;
1:9e85629: 
1:9e85629:             if (value instanceof Byte) {
1:9e85629:                 result = reader.readByte();
1:9e85629:             } else if (value instanceof Short) {
1:9e85629:                 result = reader.readShort();
1:9e85629:             } else if (value instanceof Integer) {
1:9e85629:                 result = reader.readInt();
1:9e85629:             } else if (value instanceof Long) {
1:9e85629:                 result = reader.readLong();
1:9e85629:             } else if (value instanceof Float) {
1:9e85629:                 result = reader.readFloat();
1:9e85629:             } else if (value instanceof Double) {
1:9e85629:                 result = reader.readDouble();
1:9e85629:             } else if (value instanceof Boolean) {
1:9e85629:                 result = reader.readBoolean();
1:9e85629:             } else if (value instanceof Character) {
1:9e85629:                 result = reader.readChar();
1:9e85629:             } else {
1:9e85629:                 throw new IllegalArgumentException("unsuitable type for primitive deserialization");
1:9e85629:             }
1:9e85629: 
1:9e85629:             assertNotNull(result);
1:9e85629:             assertEquals(value.getClass(), result.getClass());
1:9e85629:             assertEquals(value, result);
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     private void doTestReadPrimitiveArray(Object value, String filter) throws Exception {
1:9e85629:         byte[] serialized = serializeObject(value);
1:9e85629: 
1:9e85629:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:9e85629:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1:9e85629: 
1:9e85629:             reader.setTrustAllPackages(false);
1:9e85629:             reader.setTrustedPackages(Arrays.asList(filter.split(",")));
1:9e85629: 
1:9e85629:             Object result = reader.readObject();
1:9e85629: 
1:9e85629:             assertNotNull(result);
1:9e85629:             assertEquals(value.getClass(), result.getClass());
1:9e85629:             assertTrue(result.getClass().isArray());
1:9e85629:             assertEquals(value.getClass().getComponentType(), result.getClass().getComponentType());
1:9e85629:             assertTrue(result.getClass().getComponentType().isPrimitive());
1:9e85629:         }
1:9e85629:     }
1:9e85629: 
1:9e85629:     private byte[] serializePrimitive(Object value) throws IOException {
1:9e85629:         byte[] result = new byte[0];
1:9e85629: 
1:9e85629:         if (value != null) {
1:9e85629:             try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:9e85629:                  ObjectOutputStream oos = new ObjectOutputStream(baos)) {
1:9e85629: 
1:9e85629:                 if (value instanceof Byte) {
1:9e85629:                     oos.writeByte((byte) value);
1:9e85629:                 } else if (value instanceof Short) {
1:9e85629:                     oos.writeShort((short) value);
1:9e85629:                 } else if (value instanceof Integer) {
1:9e85629:                     oos.writeInt((int) value);
1:9e85629:                 } else if (value instanceof Long) {
1:9e85629:                     oos.writeLong((long) value);
1:9e85629:                 } else if (value instanceof Float) {
1:9e85629:                     oos.writeFloat((float) value);
1:9e85629:                 } else if (value instanceof Double) {
1:9e85629:                     oos.writeDouble((double) value);
1:9e85629:                 } else if (value instanceof Boolean) {
1:9e85629:                     oos.writeBoolean((boolean) value);
1:9e85629:                 } else if (value instanceof Character) {
1:9e85629:                     oos.writeChar((char) value);
1:9e85629:                 } else {
1:9e85629:                     throw new IllegalArgumentException("unsuitable type for primitive serialization");
1:9e85629:                 }
1:9e85629: 
1:9e85629:                 oos.flush();
1:9e85629:                 oos.close();
1:9e85629: 
1:9e85629:                 result = baos.toByteArray();
1:9e85629:             }
1:9e85629:         }
1:9e85629: 
1:9e85629:         return result;
1:9e85629:     }
1:9e85629: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9e85629
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.ObjectOutputStream;
1: import java.util.Arrays;
1: import java.util.UUID;
1: import java.util.Vector;
1: 
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1: public class ClassLoadingAwareObjectInputStreamTest {
1: 
1:     private final String ACCEPTS_ALL_FILTER = "*";
1:     private final String ACCEPTS_NONE_FILTER = "";
1: 
1:     @Rule
1:     public TestName name = new TestName();
1: 
1:     //----- Test for serialized objects --------------------------------------//
1: 
1:     @Test
1:     public void testReadObject() throws Exception {
1:         // Expect to succeed
1:         doTestReadObject(new SimplePojo(name.getMethodName()), ACCEPTS_ALL_FILTER);
1: 
1:         // Expect to fail
1:         try {
1:             doTestReadObject(new SimplePojo(name.getMethodName()), ACCEPTS_NONE_FILTER);
1:             fail("Should have failed to read");
1:         } catch (ClassNotFoundException cnfe) {
1:             // Expected
1:         }
1:     }
1: 
1:     @Test
1:     public void testReadObjectWithAnonymousClass() throws Exception {
1:         AnonymousSimplePojoParent pojoParent = new AnonymousSimplePojoParent(name.getMethodName());
1: 
1:         byte[] serialized = serializeObject(pojoParent);
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(new String[] { "org.apache.activemq.util" }));
1: 
1:             Object obj = reader.readObject();
1: 
1:             assertTrue(obj instanceof AnonymousSimplePojoParent);
1:             assertEquals("Unexpected payload", pojoParent.getPayload(), ((AnonymousSimplePojoParent)obj).getPayload());
1:         }
1:     }
1: 
1:     @Test
1:     public void testReadObjectWitLocalClass() throws Exception {
1:         LocalSimplePojoParent pojoParent = new LocalSimplePojoParent(name.getMethodName());
1: 
1:         byte[] serialized = serializeObject(pojoParent);
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(new String[] { "org.apache.activemq.util" }));
1: 
1:             Object obj = reader.readObject();
1: 
1:             assertTrue(obj instanceof LocalSimplePojoParent);
1:             assertEquals("Unexpected payload", pojoParent.getPayload(), ((LocalSimplePojoParent)obj).getPayload());
1:         }
1:     }
1: 
1:     @Test
1:     public void testReadObjectByte() throws Exception {
1:         doTestReadObject(Byte.valueOf((byte) 255), ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     @Test
1:     public void testReadObjectShort() throws Exception {
1:         doTestReadObject(Short.valueOf((short) 255), ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     @Test
1:     public void testReadObjectInteger() throws Exception {
1:         doTestReadObject(Integer.valueOf(255), ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     @Test
1:     public void testReadObjectLong() throws Exception {
1:         doTestReadObject(Long.valueOf(255l), ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     @Test
1:     public void testReadObjectFloat() throws Exception {
1:         doTestReadObject(Float.valueOf(255.0f), ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     @Test
1:     public void testReadObjectDouble() throws Exception {
1:         doTestReadObject(Double.valueOf(255.0), ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     @Test
1:     public void testReadObjectBoolean() throws Exception {
1:         doTestReadObject(Boolean.FALSE, ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     @Test
1:     public void testReadObjectString() throws Exception {
1:         doTestReadObject(new String(name.getMethodName()), ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     //----- Test that arrays of objects can be read --------------------------//
1: 
1:     @Test
1:     public void testReadObjectStringArray() throws Exception {
1:         String[] value = new String[2];
1: 
1:         value[0] = name.getMethodName() + "-1";
1:         value[1] = name.getMethodName() + "-2";
1: 
1:         doTestReadObject(value, ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     @Test
1:     public void testReadObjectMultiDimensionalArray() throws Exception {
1:         String[][][] value = new String[2][2][1];
1: 
1:         value[0][0][0] = "0-0-0";
1:         value[0][1][0] = "0-1-0";
1:         value[1][0][0] = "1-0-0";
1:         value[1][1][0] = "1-1-0";
1: 
1:         doTestReadObject(value, ACCEPTS_ALL_FILTER);
1:     }
1: 
1:     //----- Test that primitive types are not filtered -----------------------//
1: 
1:     @Test
1:     public void testPrimitiveByteNotFiltered() throws Exception {
1:         doTestReadPrimitive((byte) 255, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveShortNotFiltered() throws Exception {
1:         doTestReadPrimitive((short) 255, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveIntegerNotFiltered() throws Exception {
1:         doTestReadPrimitive(255, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveLongNotFiltered() throws Exception {
1:         doTestReadPrimitive((long) 255, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveFloatNotFiltered() throws Exception {
1:         doTestReadPrimitive((float) 255.0, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveDoubleNotFiltered() throws Exception {
1:         doTestReadPrimitive(255.0, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveBooleanNotFiltered() throws Exception {
1:         doTestReadPrimitive(false, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitveCharNotFiltered() throws Exception {
1:         doTestReadPrimitive('c', ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testReadObjectStringNotFiltered() throws Exception {
1:         doTestReadObject(new String(name.getMethodName()), ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     //----- Test that primitive arrays get past filters ----------------------//
1: 
1:     @Test
1:     public void testPrimitiveByteArrayNotFiltered() throws Exception {
1:         byte[] value = new byte[2];
1: 
1:         value[0] = 1;
1:         value[1] = 2;
1: 
1:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveShortArrayNotFiltered() throws Exception {
1:         short[] value = new short[2];
1: 
1:         value[0] = 1;
1:         value[1] = 2;
1: 
1:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveIntegerArrayNotFiltered() throws Exception {
1:         int[] value = new int[2];
1: 
1:         value[0] = 1;
1:         value[1] = 2;
1: 
1:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveLongArrayNotFiltered() throws Exception {
1:         long[] value = new long[2];
1: 
1:         value[0] = 1;
1:         value[1] = 2;
1: 
1:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveFloatArrayNotFiltered() throws Exception {
1:         float[] value = new float[2];
1: 
1:         value[0] = 1.1f;
1:         value[1] = 2.1f;
1: 
1:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     @Test
1:     public void testPrimitiveDoubleArrayNotFiltered() throws Exception {
1:         double[] value = new double[2];
1: 
1:         value[0] = 1.1;
1:         value[1] = 2.1;
1: 
1:         doTestReadPrimitiveArray(value, ACCEPTS_NONE_FILTER);
1:     }
1: 
1:     //----- Tests for types that should be filtered --------------------------//
1: 
1:     @Test
1:     public void testReadObjectArrayFiltered() throws Exception {
1:         UUID[] value = new UUID[2];
1: 
1:         value[0] = UUID.randomUUID();
1:         value[1] = UUID.randomUUID();
1: 
1:         byte[] serialized = serializeObject(value);
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(ACCEPTS_NONE_FILTER.split(",")));
1: 
1:             try {
1:                 reader.readObject();
1:                 fail("Should not be able to read the payload.");
1:             } catch (ClassNotFoundException ex) {}
1:         }
1:     }
1: 
1:     @Test
1:     public void testReadObjectMixedTypeArrayGetsFiltered() throws Exception {
1:         Object[] value = new Object[4];
1: 
1:         value[0] = name.getMethodName();
1:         value[1] = UUID.randomUUID();
1:         value[2] = new Vector<Object>();
1:         value[3] = new SimplePojo(name.getMethodName());
1: 
1:         byte[] serialized = serializeObject(value);
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:             ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(new String[] { "java" }));
1: 
1:             try {
1:                 reader.readObject();
1:                 fail("Should not be able to read the payload.");
1:             } catch (ClassNotFoundException ex) {
1:             }
1:         }
1: 
1:         // Replace the filtered type and try again
1:         value[3] = new Integer(20);
1: 
1:         serialized = serializeObject(value);
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:             ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(new String[] { "java" }));
1: 
1:             try {
1:                 Object result = reader.readObject();
1: 
1:                 assertNotNull(result);
1:                 assertTrue(result.getClass().isArray());
1:             } catch (ClassNotFoundException ex) {
1:                 fail("Should be able to read the payload.");
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testReadObjectMultiDimensionalArrayFiltered() throws Exception {
1:         UUID[][] value = new UUID[2][2];
1: 
1:         value[0][0] = UUID.randomUUID();
1:         value[0][1] = UUID.randomUUID();
1:         value[1][0] = UUID.randomUUID();
1:         value[1][1] = UUID.randomUUID();
1: 
1:         byte[] serialized = serializeObject(value);
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(ACCEPTS_NONE_FILTER.split(",")));
1: 
1:             try {
1:                 reader.readObject();
1:                 fail("Should not be able to read the payload.");
1:             } catch (ClassNotFoundException ex) {}
1:         }
1:     }
1: 
1:     @Test
1:     public void testReadObjectFailsWithUntrustedType() throws Exception {
1:         byte[] serialized = serializeObject(new SimplePojo(name.getMethodName()));
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(new String[] { "java" }));
1: 
1:             try {
1:                 reader.readObject();
1:                 fail("Should not be able to read the payload.");
1:             } catch (ClassNotFoundException ex) {}
1:         }
1: 
1:         serialized = serializeObject(UUID.randomUUID());
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             try {
1:                 reader.readObject();
1:             } catch (ClassNotFoundException ex) {
1:                 fail("Should be able to read the payload.");
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testReadObjectFailsWithUnstrustedContentInTrustedType() throws Exception {
1:         byte[] serialized = serializeObject(new SimplePojo(UUID.randomUUID()));
1: 
1:         ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:         try (ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(new String[] { "org.apache.activemq" }));
1: 
1:             try {
1:                 reader.readObject();
1:                 fail("Should not be able to read the payload.");
1:             } catch (ClassNotFoundException ex) {}
1:         }
1: 
1:         serialized = serializeObject(UUID.randomUUID());
1:         input = new ByteArrayInputStream(serialized);
1:         try (ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(new String[] { "org.apache.activemq" }));
1: 
1:             try {
1:                 reader.readObject();
1:                 fail("Should not be able to read the payload.");
1:             } catch (ClassNotFoundException ex) {
1:             }
1:         }
1:     }
1: 
1:     //----- Internal methods -------------------------------------------------//
1: 
1:     private void doTestReadObject(Object value, String filter) throws Exception {
1:         byte[] serialized = serializeObject(value);
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:              ClassLoadingAwareObjectInputStream reader =
1:                  new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(filter.split(",")));
1: 
1:             Object result = reader.readObject();
1:             assertNotNull(result);
1:             assertEquals(value.getClass(), result.getClass());
1:             if (result.getClass().isArray()) {
1:                 assertTrue(Arrays.deepEquals((Object[]) value, (Object[]) result));
1:             } else {
1:                 assertEquals(value, result);
1:             }
1:         }
1:     }
1: 
1:     private byte[] serializeObject(Object value) throws IOException {
1:         byte[] result = new byte[0];
1: 
1:         if (value != null) {
1:             try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:                  ObjectOutputStream oos = new ObjectOutputStream(baos)) {
1: 
1:                 oos.writeObject(value);
1:                 oos.flush();
1:                 oos.close();
1: 
1:                 result = baos.toByteArray();
1:             }
1:         }
1: 
1:         return result;
1:     }
1: 
1:     private void doTestReadPrimitive(Object value, String filter) throws Exception {
1:         byte[] serialized = serializePrimitive(value);
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(filter.split(",")));
1: 
1:             Object result = null;
1: 
1:             if (value instanceof Byte) {
1:                 result = reader.readByte();
1:             } else if (value instanceof Short) {
1:                 result = reader.readShort();
1:             } else if (value instanceof Integer) {
1:                 result = reader.readInt();
1:             } else if (value instanceof Long) {
1:                 result = reader.readLong();
1:             } else if (value instanceof Float) {
1:                 result = reader.readFloat();
1:             } else if (value instanceof Double) {
1:                 result = reader.readDouble();
1:             } else if (value instanceof Boolean) {
1:                 result = reader.readBoolean();
1:             } else if (value instanceof Character) {
1:                 result = reader.readChar();
1:             } else {
1:                 throw new IllegalArgumentException("unsuitable type for primitive deserialization");
1:             }
1: 
1:             assertNotNull(result);
1:             assertEquals(value.getClass(), result.getClass());
1:             assertEquals(value, result);
1:         }
1:     }
1: 
1:     private void doTestReadPrimitiveArray(Object value, String filter) throws Exception {
1:         byte[] serialized = serializeObject(value);
1: 
1:         try (ByteArrayInputStream input = new ByteArrayInputStream(serialized);
1:              ClassLoadingAwareObjectInputStream reader = new ClassLoadingAwareObjectInputStream(input)) {
1: 
1:             reader.setTrustAllPackages(false);
1:             reader.setTrustedPackages(Arrays.asList(filter.split(",")));
1: 
1:             Object result = reader.readObject();
1: 
1:             assertNotNull(result);
1:             assertEquals(value.getClass(), result.getClass());
1:             assertTrue(result.getClass().isArray());
1:             assertEquals(value.getClass().getComponentType(), result.getClass().getComponentType());
1:             assertTrue(result.getClass().getComponentType().isPrimitive());
1:         }
1:     }
1: 
1:     private byte[] serializePrimitive(Object value) throws IOException {
1:         byte[] result = new byte[0];
1: 
1:         if (value != null) {
1:             try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:                  ObjectOutputStream oos = new ObjectOutputStream(baos)) {
1: 
1:                 if (value instanceof Byte) {
1:                     oos.writeByte((byte) value);
1:                 } else if (value instanceof Short) {
1:                     oos.writeShort((short) value);
1:                 } else if (value instanceof Integer) {
1:                     oos.writeInt((int) value);
1:                 } else if (value instanceof Long) {
1:                     oos.writeLong((long) value);
1:                 } else if (value instanceof Float) {
1:                     oos.writeFloat((float) value);
1:                 } else if (value instanceof Double) {
1:                     oos.writeDouble((double) value);
1:                 } else if (value instanceof Boolean) {
1:                     oos.writeBoolean((boolean) value);
1:                 } else if (value instanceof Character) {
1:                     oos.writeChar((char) value);
1:                 } else {
1:                     throw new IllegalArgumentException("unsuitable type for primitive serialization");
1:                 }
1: 
1:                 oos.flush();
1:                 oos.close();
1: 
1:                 result = baos.toByteArray();
1:             }
1:         }
1: 
1:         return result;
1:     }
1: }
============================================================================