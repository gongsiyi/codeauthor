1:3dd6575: /**
1:b0c2a40:  *
1:3dd6575:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3dd6575:  * contributor license agreements.  See the NOTICE file distributed with
1:3dd6575:  * this work for additional information regarding copyright ownership.
1:3dd6575:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3dd6575:  * (the "License"); you may not use this file except in compliance with
1:3dd6575:  * the License.  You may obtain a copy of the License at
2:3dd6575:  *
1:3dd6575:  * http://www.apache.org/licenses/LICENSE-2.0
1:3dd6575:  *
1:3dd6575:  * Unless required by applicable law or agreed to in writing, software
1:3dd6575:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3dd6575:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3dd6575:  * See the License for the specific language governing permissions and
1:3dd6575:  * limitations under the License.
1:3dd6575:  */
1:3dd6575: package org.apache.activemq.broker.jmx;
1:3dd6575: 
1:3dd6575: import java.util.Collection;
1:3dd6575: import java.util.HashMap;
1:3dd6575: import java.util.Map;
1:3dd6575: 
1:5e05df1: import javax.management.openmbean.CompositeData;
1:5e05df1: import javax.management.openmbean.TabularData;
1:5e05df1: 
1:3dd6575: /**
1:5e05df1:  *
1:3dd6575:  */
1:3dd6575: public class CompositeDataHelper {
1:3dd6575: 
1:3dd6575:     /**
1:3dd6575:      * Extracts the named TabularData field from the CompositeData and converts it to a Map
1:3dd6575:      * which is the method used to get the typesafe user properties.
1:3dd6575:      */
1:3dd6575:     public static Map getTabularMap(CompositeData cdata, String fieldName) {
1:3dd6575:         Map map = new HashMap();
1:a655335:         appendTabularMap(map, cdata, fieldName);
1:a655335:         return map;
1:a655335:     }
1:a655335: 
1:a655335:     public static void appendTabularMap(Map map, CompositeData cdata, String fieldName) {
1:3dd6575:         Object tabularObject = cdata.get(fieldName);
1:3dd6575:         if (tabularObject instanceof TabularData) {
1:3dd6575:             TabularData tabularData = (TabularData) tabularObject;
1:261157c:             Collection<CompositeData> values = (Collection<CompositeData>) tabularData.values();
1:3dd6575:             for (CompositeData compositeData : values) {
1:3dd6575:                 Object key = compositeData.get("key");
1:3dd6575:                 Object value = compositeData.get("value");
1:3dd6575:                 map.put(key, value);
1:a655335:             }
1:3dd6575:         }
1:3dd6575:     }
1:a655335: 
1:a655335:     /**
1:a655335:      * Returns a map of all the user properties in the given message {@link javax.management.openmbean.CompositeData}
1:a655335:      * object
1:a655335:      *
1:a655335:      * @param cdata
1:5e05df1:      *
1:5e05df1:      * @return a Map of user properties
1:a655335:      */
1:a655335:     public static Map getMessageUserProperties(CompositeData cdata) {
1:a655335:         Map map = new HashMap();
1:a655335:         appendTabularMap(map, cdata, CompositeDataConstants.STRING_PROPERTIES);
1:a655335:         appendTabularMap(map, cdata, CompositeDataConstants.BOOLEAN_PROPERTIES);
1:a655335:         appendTabularMap(map, cdata, CompositeDataConstants.BYTE_PROPERTIES);
1:a655335:         appendTabularMap(map, cdata, CompositeDataConstants.SHORT_PROPERTIES);
1:a655335:         appendTabularMap(map, cdata, CompositeDataConstants.INT_PROPERTIES);
1:a655335:         appendTabularMap(map, cdata, CompositeDataConstants.LONG_PROPERTIES);
1:a655335:         appendTabularMap(map, cdata, CompositeDataConstants.FLOAT_PROPERTIES);
1:a655335:         appendTabularMap(map, cdata, CompositeDataConstants.DOUBLE_PROPERTIES);
1:3dd6575:         return map;
1:3dd6575:     }
1:3dd6575: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: 
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return a Map of user properties
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:James Strachan
-------------------------------------------------------------------------------
commit:261157c
/////////////////////////////////////////////////////////////////////////
1:             Collection<CompositeData> values = (Collection<CompositeData>) tabularData.values();
commit:a655335
/////////////////////////////////////////////////////////////////////////
1:         appendTabularMap(map, cdata, fieldName);
1:         return map;
1:     }
1: 
1:     public static void appendTabularMap(Map map, CompositeData cdata, String fieldName) {
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     /**
1:      * Returns a map of all the user properties in the given message {@link javax.management.openmbean.CompositeData}
1:      * object
1:      *
1:      * @param cdata
0:      * @return
1:      */
1:     public static Map getMessageUserProperties(CompositeData cdata) {
1:         Map map = new HashMap();
1:         appendTabularMap(map, cdata, CompositeDataConstants.STRING_PROPERTIES);
1:         appendTabularMap(map, cdata, CompositeDataConstants.BOOLEAN_PROPERTIES);
1:         appendTabularMap(map, cdata, CompositeDataConstants.BYTE_PROPERTIES);
1:         appendTabularMap(map, cdata, CompositeDataConstants.SHORT_PROPERTIES);
1:         appendTabularMap(map, cdata, CompositeDataConstants.INT_PROPERTIES);
1:         appendTabularMap(map, cdata, CompositeDataConstants.LONG_PROPERTIES);
1:         appendTabularMap(map, cdata, CompositeDataConstants.FLOAT_PROPERTIES);
1:         appendTabularMap(map, cdata, CompositeDataConstants.DOUBLE_PROPERTIES);
commit:3dd6575
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
0: import javax.management.openmbean.CompositeData;
0: import javax.management.openmbean.TabularData;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: /**
0:  * @version $Revision: 1.1 $
1:  */
1: public class CompositeDataHelper {
1: 
1:     /**
1:      * Extracts the named TabularData field from the CompositeData and converts it to a Map
1:      * which is the method used to get the typesafe user properties.
1:      */
1:     public static Map getTabularMap(CompositeData cdata, String fieldName) {
1:         Map map = new HashMap();
1:         Object tabularObject = cdata.get(fieldName);
1:         if (tabularObject instanceof TabularData) {
1:             TabularData tabularData = (TabularData) tabularObject;
0:             Collection<CompositeData> values = tabularData.values();
1:             for (CompositeData compositeData : values) {
1:                 Object key = compositeData.get("key");
1:                 Object value = compositeData.get("value");
1:                 map.put(key, value);
1:             }
1:         }
1:         return map;
1:     }
1: }
============================================================================