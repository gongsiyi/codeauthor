1:3f32507: /**
1:3f32507:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  * this work for additional information regarding copyright ownership.
1:3f32507:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  * (the "License"); you may not use this file except in compliance with
1:3f32507:  * the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  */
1:3f32507: 
1:3f32507: package org.apache.activemq.bugs;
1:3f32507: 
1:3f32507: import java.io.IOException;
1:3f32507: import java.util.Map;
1:3f32507: 
1:3f32507: import javax.jms.JMSException;
1:3f32507: 
1:3f32507: import org.apache.activemq.command.ActiveMQObjectMessage;
1:3f32507: import org.apache.activemq.openwire.OpenWireFormat;
1:3f32507: import org.apache.activemq.util.ByteSequence;
1:3f32507: import org.junit.Test;
1:3f32507: import org.slf4j.Logger;
1:3f32507: import org.slf4j.LoggerFactory;
1:3f32507: 
1:3f32507: public class AMQ4893Test {
1:3f32507: 
1:3f32507:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4893Test.class);
1:3f32507: 
1:3f32507:     @Test
1:3f32507:     public void testPropertiesInt() throws Exception {
1:3f32507:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:3f32507:         message.setIntProperty("TestProp", 333);
1:3f32507:         fakeUnmarshal(message);
1:3f32507:         roundTripProperties(message);
1:3f32507:     }
1:3f32507: 
1:3f32507:     @Test
1:3f32507:     public void testPropertiesString() throws Exception {
1:3f32507:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:3f32507:         message.setStringProperty("TestProp", "Value");
1:3f32507:         fakeUnmarshal(message);
1:3f32507:         roundTripProperties(message);
1:3f32507:     }
1:3f32507: 
1:3f32507:     @Test
1:3f32507:     public void testPropertiesObject() throws Exception {
1:3f32507:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:3f32507:         message.setObjectProperty("TestProp", "Value");
1:3f32507:         fakeUnmarshal(message);
1:3f32507:         roundTripProperties(message);
1:3f32507:     }
1:3f32507: 
1:3f32507:     @Test
1:3f32507:     public void testPropertiesObjectNoMarshalling() throws Exception {
1:3f32507:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:3f32507:         message.setObjectProperty("TestProp", "Value");
1:3f32507:         roundTripProperties(message);
1:3f32507:     }
1:3f32507: 
1:3f32507:     private void roundTripProperties(ActiveMQObjectMessage message) throws IOException, JMSException {
1:3f32507:         ActiveMQObjectMessage copy = new ActiveMQObjectMessage();
1:3f32507:         for (Map.Entry<String, Object> prop : message.getProperties().entrySet()) {
1:3f32507:             LOG.debug("{} -> {}", prop.getKey(), prop.getValue().getClass());
1:3f32507:             copy.setObjectProperty(prop.getKey(), prop.getValue());
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     private void fakeUnmarshal(ActiveMQObjectMessage message) throws IOException {
1:3f32507:         // we need to force the unmarshalled property field to be set so it
1:3f32507:         // gives us a hawtbuffer for the string
1:3f32507:         OpenWireFormat format = new OpenWireFormat();
1:3f32507:         message.beforeMarshall(format);
1:3f32507:         message.afterMarshall(format);
1:3f32507: 
1:3f32507:         ByteSequence seq = message.getMarshalledProperties();
1:3f32507:         message.clearProperties();
1:3f32507:         message.setMarshalledProperties(seq);
1:3f32507:     }
8:a6e3064: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import java.io.IOException;
1: import java.util.Map;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.util.ByteSequence;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4893Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4893Test.class);
1: 
1:     @Test
1:     public void testPropertiesInt() throws Exception {
1:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:         message.setIntProperty("TestProp", 333);
1:         fakeUnmarshal(message);
1:         roundTripProperties(message);
1:     }
1: 
1:     @Test
1:     public void testPropertiesString() throws Exception {
1:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:         message.setStringProperty("TestProp", "Value");
1:         fakeUnmarshal(message);
1:         roundTripProperties(message);
1:     }
1: 
1:     @Test
1:     public void testPropertiesObject() throws Exception {
1:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:         message.setObjectProperty("TestProp", "Value");
1:         fakeUnmarshal(message);
1:         roundTripProperties(message);
1:     }
1: 
1:     @Test
1:     public void testPropertiesObjectNoMarshalling() throws Exception {
1:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:         message.setObjectProperty("TestProp", "Value");
1:         roundTripProperties(message);
1:     }
1: 
1:     private void roundTripProperties(ActiveMQObjectMessage message) throws IOException, JMSException {
1:         ActiveMQObjectMessage copy = new ActiveMQObjectMessage();
1:         for (Map.Entry<String, Object> prop : message.getProperties().entrySet()) {
1:             LOG.debug("{} -> {}", prop.getKey(), prop.getValue().getClass());
1:             copy.setObjectProperty(prop.getKey(), prop.getValue());
1:         }
1:     }
1: 
1:     private void fakeUnmarshal(ActiveMQObjectMessage message) throws IOException {
1:         // we need to force the unmarshalled property field to be set so it
1:         // gives us a hawtbuffer for the string
1:         OpenWireFormat format = new OpenWireFormat();
1:         message.beforeMarshall(format);
1:         message.afterMarshall(format);
1: 
1:         ByteSequence seq = message.getMarshalledProperties();
1:         message.clearProperties();
1:         message.setMarshalledProperties(seq);
1:     }
commit:ed11b06
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a6e3064
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.bugs;
0: 
0: import java.io.IOException;
0: import java.util.Map;
0: 
0: import javax.jms.JMSException;
0: 
0: import org.apache.activemq.command.ActiveMQObjectMessage;
0: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.activemq.util.ByteSequence;
0: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: public class AMQ4893Test {
0: 
0:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4893Test.class);
0: 
0:     @Test
0:     public void testPropertiesInt() throws Exception {
0:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
0:         message.setIntProperty("TestProp", 333);
0:         fakeUnmarshal(message);
0:         roundTripProperties(message);
1:     }
0: 
0:     @Test
0:     public void testPropertiesString() throws Exception {
0:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
0:         message.setStringProperty("TestProp", "Value");
0:         fakeUnmarshal(message);
0:         roundTripProperties(message);
1:     }
0: 
0:     @Test
0:     public void testPropertiesObject() throws Exception {
0:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
0:         message.setObjectProperty("TestProp", "Value");
0:         fakeUnmarshal(message);
0:         roundTripProperties(message);
1:     }
0: 
0:     @Test
0:     public void testPropertiesObjectNoMarshalling() throws Exception {
0:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
0:         message.setObjectProperty("TestProp", "Value");
0:         roundTripProperties(message);
1:     }
0: 
0:     private void roundTripProperties(ActiveMQObjectMessage message) throws IOException, JMSException {
0:         ActiveMQObjectMessage copy = new ActiveMQObjectMessage();
0:         for (Map.Entry<String, Object> prop : message.getProperties().entrySet()) {
0:             LOG.debug("{} -> {}", prop.getKey(), prop.getValue().getClass());
0:             copy.setObjectProperty(prop.getKey(), prop.getValue());
1:         }
1:     }
0: 
0:     private void fakeUnmarshal(ActiveMQObjectMessage message) throws IOException {
0:         // we need to force the unmarshalled property field to be set so it
0:         // gives us a hawtbuffer for the string
0:         OpenWireFormat format = new OpenWireFormat();
0:         message.beforeMarshall(format);
0:         message.afterMarshall(format);
0: 
0:         ByteSequence seq = message.getMarshalledProperties();
0:         message.clearProperties();
0:         message.setMarshalledProperties(seq);
1:     }
1: }
============================================================================