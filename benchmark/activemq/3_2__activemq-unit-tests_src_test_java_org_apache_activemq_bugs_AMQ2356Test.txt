1:c459784: /**
1:c459784:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c459784:  * contributor license agreements.  See the NOTICE file distributed with
1:c459784:  * this work for additional information regarding copyright ownership.
1:c459784:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c459784:  * (the "License"); you may not use this file except in compliance with
1:c459784:  * the License.  You may obtain a copy of the License at
1:c459784:  *
1:c459784:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c459784:  *
1:c459784:  * Unless required by applicable law or agreed to in writing, software
1:c459784:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c459784:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c459784:  * See the License for the specific language governing permissions and
1:c459784:  * limitations under the License.
1:c459784:  */
1:c459784: package org.apache.activemq.bugs;
12:c459784: 
1:c459784: import java.io.File;
1:5219fa1: 
1:c459784: import javax.jms.BytesMessage;
1:c459784: import javax.jms.Connection;
1:c459784: import javax.jms.Destination;
1:c459784: import javax.jms.JMSException;
1:c459784: import javax.jms.Message;
1:c459784: import javax.jms.MessageConsumer;
1:c459784: import javax.jms.MessageProducer;
1:c459784: import javax.jms.Session;
1:5219fa1: 
1:c459784: import junit.framework.TestCase;
1:5219fa1: 
1:5219fa1: import org.apache.activemq.ActiveMQConnectionFactory;
1:5219fa1: import org.apache.activemq.broker.BrokerService;
1:5219fa1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:5219fa1: import org.apache.activemq.broker.region.policy.PolicyMap;
1:5219fa1: import org.apache.activemq.command.ActiveMQQueue;
1:5219fa1: import org.apache.activemq.store.kahadb.KahaDBStore;
1:5219fa1: 
1:c459784: /*
1:5219fa1:  A AMQ2356Test
1:5219fa1:  We have an environment where we have a very large number of destinations.
1:5219fa1:  In an effort to reduce the number of threads I have set the options
1:5219fa1:  -Dorg.apache.activemq.UseDedicatedTaskRunner=false
1:c459784: 
1:5219fa1:  and
1:c459784: 
1:5219fa1:  <policyEntry queue=">" optimizedDispatch="true"/>
1:c459784: 
1:5219fa1:  Unfortunately this very quickly leads to deadlocked queues.
1:c459784: 
1:5219fa1:  My environment is:
1:c459784: 
1:5219fa1:  ActiveMQ 5.2 Ubunty Jaunty kernel 2.6.28-14-generic #47-Ubuntu SMP (although only a single core on my system)
1:5219fa1:  TCP transportConnector
1:c459784: 
1:5219fa1:  To reproduce the bug (which I can do 100% of the time) I connect 5 consumers (AUTO_ACK) to 5 different queues.
1:5219fa1:  Then I start 5 producers and pair them up with a consumer on a queue, and they start sending PERSISTENT messages.
1:5219fa1:  I've set the producer to send 100 messages and disconnect, and the consumer to receive 100 messages and disconnect.
1:5219fa1:  The first pair usually gets through their 100 messages and disconnect, at which point all the other pairs have
1:5219fa1:  deadlocked at less than 30 messages each.
1:c459784:  */
1:c459784: public class AMQ2356Test extends TestCase {
1:c459784:     protected static final int MESSAGE_COUNT = 1000;
1:c459784:     protected static final int NUMBER_OF_PAIRS = 10;
1:c459784:     protected BrokerService broker;
1:c459784:     protected String brokerURL = ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL;
1:c459784:     protected int destinationCount;
1:c459784: 
1:c459784:     public void testScenario() throws Exception {
1:c459784:         for (int i = 0; i < NUMBER_OF_PAIRS; i++) {
1:5219fa1:             ActiveMQQueue queue = new ActiveMQQueue(getClass().getName() + ":" + i);
1:c459784:             ProducerConsumerPair cp = new ProducerConsumerPair();
1:c459784:             cp.start(this.brokerURL, queue, MESSAGE_COUNT);
1:c459784:             cp.testRun();
1:c459784:             cp.stop();
3:c459784:         }
1:c459784:     }
1:c459784: 
1:c459784:     protected Destination getDestination(Session session) throws JMSException {
1:c459784:         String destinationName = getClass().getName() + "." + destinationCount++;
1:c459784:         return session.createQueue(destinationName);
1:c459784:     }
1:c459784: 
1:5219fa1:     @Override
1:c459784:     protected void setUp() throws Exception {
1:c459784:         if (broker == null) {
1:c459784:             broker = createBroker();
1:c459784:         }
1:c459784:         super.setUp();
1:c459784:     }
1:c459784: 
1:5219fa1:     @Override
1:c459784:     protected void tearDown() throws Exception {
1:c459784:         super.tearDown();
1:c459784:         if (broker != null) {
1:c459784:             broker.stop();
1:c459784:         }
1:c459784:     }
1:c459784: 
1:c459784:     protected BrokerService createBroker() throws Exception {
1:c459784:         BrokerService answer = new BrokerService();
1:c459784:         configureBroker(answer);
1:c459784:         answer.start();
1:c459784:         return answer;
1:c459784:     }
1:c459784: 
1:c459784:     protected void configureBroker(BrokerService answer) throws Exception {
1:c459784:         File dataFileDir = new File("target/test-amq-data/bugs/AMQ2356/kahadb");
1:c459784:         KahaDBStore kaha = new KahaDBStore();
1:c459784:         kaha.setDirectory(dataFileDir);
1:c459784:         answer.setUseJmx(false);
1:5219fa1:         // Setup a destination policy where it takes only 1 message at a time.
1:c459784:         PolicyMap policyMap = new PolicyMap();
1:c459784:         PolicyEntry policy = new PolicyEntry();
1:c459784:         policy.setOptimizedDispatch(true);
1:c459784:         policyMap.setDefaultEntry(policy);
1:c459784:         answer.setDestinationPolicy(policyMap);
1:5219fa1: 
1:c459784:         answer.setAdvisorySupport(false);
1:c459784:         answer.setEnableStatistics(false);
1:c459784:         answer.setDeleteAllMessagesOnStartup(true);
1:c459784:         answer.addConnector(brokerURL);
1:5219fa1: 
1:c459784:     }
1:5219fa1: 
1:c459784:     static class ProducerConsumerPair {
1:c459784:         private Destination destination;
1:c459784:         private MessageProducer producer;
1:c459784:         private MessageConsumer consumer;
1:c459784:         private Connection producerConnection;
1:c459784:         private Connection consumerConnection;
1:c459784:         private int numberOfMessages;
1:c459784: 
1:5219fa1:         ProducerConsumerPair() {
1:5219fa1: 
1:c459784:         }
1:5219fa1: 
1:c459784:         void start(String brokerURL, final Destination dest, int msgNum) throws Exception {
1:5219fa1:             this.destination = dest;
1:5219fa1:             this.numberOfMessages = msgNum;
1:c459784:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerURL);
1:c459784:             this.producerConnection = cf.createConnection();
1:c459784:             this.producerConnection.start();
1:c459784:             this.consumerConnection = cf.createConnection();
1:c459784:             this.consumerConnection.start();
1:5219fa1:             this.producer = createProducer(this.producerConnection);
1:5219fa1:             this.consumer = createConsumer(this.consumerConnection);
1:c459784:         }
1:5219fa1: 
1:c459784:         void testRun() throws Exception {
1:5219fa1: 
1:5219fa1:             Session s = this.producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5219fa1:             for (int i = 0; i < this.numberOfMessages; i++) {
1:5219fa1:                 BytesMessage msg = s.createBytesMessage();
1:5219fa1:                 msg.writeBytes(new byte[1024]);
1:5219fa1:                 this.producer.send(msg);
1:5219fa1:             }
1:5219fa1:             int received = 0;
1:5219fa1:             for (int i = 0; i < this.numberOfMessages; i++) {
1:5219fa1:                 Message msg = this.consumer.receive();
1:5219fa1:                 assertNotNull(msg);
1:5219fa1:                 received++;
1:5219fa1:             }
1:5219fa1:             assertEquals("Messages received on " + this.destination, this.numberOfMessages, received);
1:5219fa1: 
1:c459784:         }
1:5219fa1: 
1:c459784:         void stop() throws Exception {
1:c459784:             if (this.producerConnection != null) {
1:c459784:                 this.producerConnection.close();
1:c459784:             }
1:c459784:             if (this.consumerConnection != null) {
1:c459784:                 this.consumerConnection.close();
1:c459784:             }
1:c459784:         }
1:c459784: 
1:c459784:         private MessageProducer createProducer(Connection connection) throws Exception {
1:c459784:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c459784:             MessageProducer result = session.createProducer(this.destination);
1:c459784:             return result;
1:c459784:         }
1:5219fa1: 
1:c459784:         private MessageConsumer createConsumer(Connection connection) throws Exception {
1:5219fa1: 
1:c459784:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c459784:             MessageConsumer result = session.createConsumer(this.destination);
1:c459784:             return result;
1:c459784:         }
1:c459784:     }
1:c459784: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: 
1:  A AMQ2356Test
1:  We have an environment where we have a very large number of destinations.
1:  In an effort to reduce the number of threads I have set the options
1:  -Dorg.apache.activemq.UseDedicatedTaskRunner=false
1:  and
1:  <policyEntry queue=">" optimizedDispatch="true"/>
1:  Unfortunately this very quickly leads to deadlocked queues.
1:  My environment is:
1:  ActiveMQ 5.2 Ubunty Jaunty kernel 2.6.28-14-generic #47-Ubuntu SMP (although only a single core on my system)
1:  TCP transportConnector
1:  To reproduce the bug (which I can do 100% of the time) I connect 5 consumers (AUTO_ACK) to 5 different queues.
1:  Then I start 5 producers and pair them up with a consumer on a queue, and they start sending PERSISTENT messages.
1:  I've set the producer to send 100 messages and disconnect, and the consumer to receive 100 messages and disconnect.
1:  The first pair usually gets through their 100 messages and disconnect, at which point all the other pairs have
1:  deadlocked at less than 30 messages each.
1:             ActiveMQQueue queue = new ActiveMQQueue(getClass().getName() + ":" + i);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         // Setup a destination policy where it takes only 1 message at a time.
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         ProducerConsumerPair() {
1: 
1: 
1:             this.destination = dest;
1:             this.numberOfMessages = msgNum;
1:             this.producer = createProducer(this.producerConnection);
1:             this.consumer = createConsumer(this.consumerConnection);
1: 
1: 
1:             Session s = this.producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             for (int i = 0; i < this.numberOfMessages; i++) {
1:                 BytesMessage msg = s.createBytesMessage();
1:                 msg.writeBytes(new byte[1024]);
1:                 this.producer.send(msg);
1:             }
1:             int received = 0;
1:             for (int i = 0; i < this.numberOfMessages; i++) {
1:                 Message msg = this.consumer.receive();
1:                 assertNotNull(msg);
1:                 received++;
1:             }
1:             assertEquals("Messages received on " + this.destination, this.numberOfMessages, received);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(NumberOfDestinationsTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:c459784
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
0: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.perf.NumberOfDestinationsTest;
0: import org.apache.activemq.store.kahadb.KahaDBStore;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import java.io.File;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: /*
0: A AMQ2356Test
0: We have an environment where we have a very large number of destinations. 
0: In an effort to reduce the number of threads I have set the options
0: -Dorg.apache.activemq.UseDedicatedTaskRunner=false
1: 
0: and
1: 
0: <policyEntry queue=">" optimizedDispatch="true"/>
1: 
0: Unfortunately this very quickly leads to deadlocked queues.
1: 
0: My environment is:
1: 
0: ActiveMQ 5.2 Ubunty Jaunty kernel 2.6.28-14-generic #47-Ubuntu SMP (although only a single core on my system)
0: TCP transportConnector
1: 
0: To reproduce the bug (which I can do 100% of the time) I connect 5 consumers (AUTO_ACK) to 5 different queues. 
0: Then I start 5 producers and pair them up with a consumer on a queue, and they start sending PERSISTENT messages. 
0: I've set the producer to send 100 messages and disconnect, and the consumer to receive 100 messages and disconnect. 
0: The first pair usually gets through their 100 messages and disconnect, at which point all the other pairs have 
0: deadlocked at less than 30 messages each.
1:  */
1: public class AMQ2356Test extends TestCase {
1:     protected static final int MESSAGE_COUNT = 1000;
1:     protected static final int NUMBER_OF_PAIRS = 10;
0:     private static final Log LOG = LogFactory.getLog(NumberOfDestinationsTest.class);
1:     protected BrokerService broker;
1:     protected String brokerURL = ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL;
1:     protected int destinationCount;
1: 
1:     public void testScenario() throws Exception {
1:         for (int i = 0; i < NUMBER_OF_PAIRS; i++) {
0:             ActiveMQQueue queue = new ActiveMQQueue(getClass().getName()+":"+i);
1:             ProducerConsumerPair cp = new ProducerConsumerPair();
1:             cp.start(this.brokerURL, queue, MESSAGE_COUNT);
1:             cp.testRun();
1:             cp.stop();
1:         }
1:     }
1: 
1:     protected Destination getDestination(Session session) throws JMSException {
1:         String destinationName = getClass().getName() + "." + destinationCount++;
1:         return session.createQueue(destinationName);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:         }
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1: 
1:     protected void configureBroker(BrokerService answer) throws Exception {
1:         File dataFileDir = new File("target/test-amq-data/bugs/AMQ2356/kahadb");
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(dataFileDir);
1:         answer.setUseJmx(false);
0:      // Setup a destination policy where it takes only 1 message at a time.
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setOptimizedDispatch(true);
1:         policyMap.setDefaultEntry(policy);
1:         answer.setDestinationPolicy(policyMap);
1:         
1:         answer.setAdvisorySupport(false);
1:         answer.setEnableStatistics(false);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.addConnector(brokerURL);
1:        
1:     }
1:     static class ProducerConsumerPair {
1:         private Destination destination;
1:         private MessageProducer producer;
1:         private MessageConsumer consumer;
1:         private Connection producerConnection;
1:         private Connection consumerConnection;
1:         private int numberOfMessages;
1: 
0:         ProducerConsumerPair(){
1:            
1:         }
1:         void start(String brokerURL, final Destination dest, int msgNum) throws Exception {
0:             this.destination=dest;
0:             this.numberOfMessages=msgNum;
1:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerURL);
1:             this.producerConnection = cf.createConnection();
1:             this.producerConnection.start();
1:             this.consumerConnection = cf.createConnection();
1:             this.consumerConnection.start();
0:             this.producer=createProducer(this.producerConnection);
0:             this.consumer=createConsumer(this.consumerConnection);
1:         }
1:         
1:         void testRun() throws Exception {
1:             
1:             
0:                 Session s = this.producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                 for (int i = 0 ; i < this.numberOfMessages; i++) {
0:                     BytesMessage msg = s.createBytesMessage();
0:                     msg.writeBytes(new byte[1024]);
0:                     this.producer.send(msg);
1:                 }
0:                 int received = 0;
0:                 for (int i = 0 ; i < this.numberOfMessages; i++) {
0:                     Message msg = this.consumer.receive();
0:                     assertNotNull(msg);
0:                     received++;
1:                 }
0:                 assertEquals("Messages received on " + this.destination,this.numberOfMessages,received);
1:            
1:            
1:         }
1:         
1:         void stop() throws Exception {
1:             if (this.producerConnection != null) {
1:                 this.producerConnection.close();
1:             }
1:             if (this.consumerConnection != null) {
1:                 this.consumerConnection.close();
1:             }
1:         }
1: 
1:         private MessageProducer createProducer(Connection connection) throws Exception {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer result = session.createProducer(this.destination);
1:             return result;
1:         }
1:         
1:         private MessageConsumer createConsumer(Connection connection) throws Exception {
1:           
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer result = session.createConsumer(this.destination);
1:             return result;
1:         }
1:     }
1: }
============================================================================