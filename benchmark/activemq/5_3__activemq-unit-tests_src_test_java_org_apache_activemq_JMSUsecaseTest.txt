1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
10:d29ca2a: 
1:d29ca2a: import java.util.Enumeration;
1:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.QueueBrowser;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: 
1:d29ca2a: public class JMSUsecaseTest extends JmsTestSupport {
1:d29ca2a: 
1:933eb2f:     public ActiveMQDestination destination;
1:933eb2f:     public int deliveryMode;
1:933eb2f:     public int prefetch;
1:933eb2f:     public byte destinationType;
1:933eb2f:     public boolean durableConsumer;
1:933eb2f: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(JMSUsecaseTest.class);
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
5:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public void initCombosForTestQueueBrowser() {
1:f812e34:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:f812e34:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE)});
1:f812e34:     }
1:f812e34: 
1:7f5213b:     public void testQueueBrowser() throws Exception {
1:f812e34: 
1:d29ca2a:         // Send a message to the broker.
1:d29ca2a:         connection.start();
1:874e935:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:3eed779:         MessageProducer producer = session.createProducer(destination);
1:3eed779:         producer.setDeliveryMode(this.deliveryMode);
1:3eed779:         sendMessages(session, producer, 5);
1:3eed779:         producer.close();
1:d29ca2a: 
1:f812e34:         QueueBrowser browser = session.createBrowser((Queue)destination);
1:3eed779:         Enumeration<?> enumeration = browser.getEnumeration();
1:f812e34:         for (int i = 0; i < 5; i++) {
1:d29ca2a:             Thread.sleep(100);
1:d29ca2a:             assertTrue(enumeration.hasMoreElements());
1:d29ca2a:             Message m = (Message)enumeration.nextElement();
1:d29ca2a:             assertNotNull(m);
1:f812e34:             assertEquals("" + i, ((TextMessage)m).getText());
1:d29ca2a:         }
1:d29ca2a:         assertFalse(enumeration.hasMoreElements());
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public void initCombosForTestSendReceive() {
1:f812e34:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:f812e34:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TOPIC_TYPE),
1:f812e34:                                                               Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TEMP_TOPIC_TYPE)});
1:f812e34:     }
1:f812e34: 
1:7f5213b:     public void testSendReceive() throws Exception {
1:d29ca2a:         // Send a message to the broker.
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:3eed779:         producer.setDeliveryMode(this.deliveryMode);
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         ActiveMQMessage message = new ActiveMQMessage();
1:d29ca2a:         producer.send(message);
1:f812e34: 
1:d29ca2a:         // Make sure only 1 message was delivered.
1:d29ca2a:         assertNotNull(consumer.receive(1000));
1:f812e34:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public void initCombosForTestSendReceiveTransacted() {
1:f812e34:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:f812e34:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TOPIC_TYPE),
1:f812e34:                                                               Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TEMP_TOPIC_TYPE)});
1:f812e34:     }
1:f812e34: 
1:7f5213b:     public void testSendReceiveTransacted() throws Exception {
1:d29ca2a:         // Send a message to the broker.
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:3eed779:         producer.setDeliveryMode(this.deliveryMode);
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         producer.send(session.createTextMessage("test"));
1:f812e34: 
1:d29ca2a:         // Message should not be delivered until commit.
1:f812e34:         assertNull(consumer.receiveNoWait());
2:d29ca2a:         session.commit();
1:f812e34: 
1:d29ca2a:         // Make sure only 1 message was delivered.
1:d29ca2a:         Message message = consumer.receive(1000);
1:d29ca2a:         assertNotNull(message);
1:d29ca2a:         assertFalse(message.getJMSRedelivered());
3:d29ca2a:         assertNull(consumer.receiveNoWait());
1:f812e34: 
1:d29ca2a:         // Message should be redelivered is rollback is used.
1:d29ca2a:         session.rollback();
1:f812e34: 
1:d29ca2a:         // Make sure only 1 message was delivered.
1:d29ca2a:         message = consumer.receive(2000);
1:d29ca2a:         assertNotNull(message);
1:d29ca2a:         assertTrue(message.getJMSRedelivered());
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:f812e34: 
1:d29ca2a:         // If we commit now, the message should not be redelivered.
1:f812e34:         session.commit();
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:3eed779
/////////////////////////////////////////////////////////////////////////
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(this.deliveryMode);
1:         sendMessages(session, producer, 5);
1:         producer.close();
1:         Enumeration<?> enumeration = browser.getEnumeration();
/////////////////////////////////////////////////////////////////////////
1:         producer.setDeliveryMode(this.deliveryMode);
/////////////////////////////////////////////////////////////////////////
1:         producer.setDeliveryMode(this.deliveryMode);
author:Gary Tully
-------------------------------------------------------------------------------
commit:874e935
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public ActiveMQDestination destination;
1:     public int deliveryMode;
1:     public int prefetch;
1:     public byte destinationType;
1:     public boolean durableConsumer;
1: 
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void initCombosForTestQueueBrowser() {
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE)});
1:     }
1: 
1: 
1:         QueueBrowser browser = session.createBrowser((Queue)destination);
1:         for (int i = 0; i < 5; i++) {
1:             assertEquals("" + i, ((TextMessage)m).getText());
1:     public void initCombosForTestSendReceive() {
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TOPIC_TYPE),
1:                                                               Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TEMP_TOPIC_TYPE)});
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertNull(consumer.receiveNoWait());
1:     public void initCombosForTestSendReceiveTransacted() {
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TOPIC_TYPE),
1:                                                               Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TEMP_TOPIC_TYPE)});
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertNull(consumer.receiveNoWait());
1: 
1: 
1: 
1: 
1:         session.commit();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testQueueBrowser() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testSendReceive() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testSendReceiveTransacted() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.Enumeration;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: 
1: public class JMSUsecaseTest extends JmsTestSupport {
1: 
1:     public static Test suite() {
1:         return suite(JMSUsecaseTest.class);
1:     }    
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
0:     public ActiveMQDestination destination;
0:     public int deliveryMode;
0:     public int prefetch;
0:     public byte destinationType;
0:     public boolean durableConsumer;
1: 
0:     public void initCombosForTestQueueBrowser() {    
0:         addCombinationValues( "deliveryMode", new Object[]{ 
0:                 new Integer(DeliveryMode.NON_PERSISTENT), 
0:                 new Integer(DeliveryMode.PERSISTENT)} );        
0:         addCombinationValues( "destinationType", new Object[]{ 
0:                 new Byte(ActiveMQDestination.QUEUE_TYPE), 
0:                 new Byte(ActiveMQDestination.TEMP_QUEUE_TYPE), 
0:                 } );
1:     }       
0:     public void testQueueBrowser() throws Throwable {
1:         
1:         // Send a message to the broker.
1:         connection.start();
0:         Session session = connection.createSession(false, Session.SESSION_TRANSACTED);
1:         destination = createDestination(session, destinationType);
0:         sendMessages(session, destination, 5);
1: 
1:         
0:         QueueBrowser browser = session.createBrowser((Queue) destination);
0:         Enumeration enumeration = browser.getEnumeration();
0:         for(int i=0; i < 5; i++) {
1:             Thread.sleep(100);
1:             assertTrue(enumeration.hasMoreElements());
1:             Message m = (Message)enumeration.nextElement();
1:             assertNotNull(m);
0:             assertEquals(""+i, ((TextMessage)m).getText());
1:         }
1:         assertFalse(enumeration.hasMoreElements());
1:     }
1: 
0:     public void initCombosForTestSendReceive() {    
0:         addCombinationValues( "deliveryMode", new Object[]{ 
0:                 new Integer(DeliveryMode.NON_PERSISTENT), 
0:                 new Integer(DeliveryMode.PERSISTENT)} );        
0:         addCombinationValues( "destinationType", new Object[]{ 
0:                 new Byte(ActiveMQDestination.QUEUE_TYPE), 
0:                 new Byte(ActiveMQDestination.TOPIC_TYPE), 
0:                 new Byte(ActiveMQDestination.TEMP_QUEUE_TYPE), 
0:                 new Byte(ActiveMQDestination.TEMP_TOPIC_TYPE)} );
1:     }       
0:     public void testSendReceive() throws Throwable {
1:         // Send a message to the broker.
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         ActiveMQMessage message = new ActiveMQMessage();
1:         producer.send(message);
1:         
1:         // Make sure only 1 message was delivered.
1:         assertNotNull(consumer.receive(1000));
1:         assertNull(consumer.receiveNoWait());        
1:     }
1: 
0:     public void initCombosForTestSendReceiveTransacted() {    
0:         addCombinationValues( "deliveryMode", new Object[]{ 
0:                 new Integer(DeliveryMode.NON_PERSISTENT), 
0:                 new Integer(DeliveryMode.PERSISTENT)} );        
0:         addCombinationValues( "destinationType", new Object[]{ 
0:                 new Byte(ActiveMQDestination.QUEUE_TYPE), 
0:                 new Byte(ActiveMQDestination.TOPIC_TYPE), 
0:                 new Byte(ActiveMQDestination.TEMP_QUEUE_TYPE), 
0:                 new Byte(ActiveMQDestination.TEMP_TOPIC_TYPE)} );
1:     }       
0:     public void testSendReceiveTransacted() throws Throwable {
1:         // Send a message to the broker.
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         destination = createDestination(session, destinationType);
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         producer.send(session.createTextMessage("test"));
1:         
1:         // Message should not be delivered until commit.
1:         assertNull(consumer.receiveNoWait());        
1:         session.commit();
1:         
1:         // Make sure only 1 message was delivered.
1:         Message message = consumer.receive(1000);
1:         assertNotNull(message);
1:         assertFalse(message.getJMSRedelivered());
1:         assertNull(consumer.receiveNoWait());
1:         
1:         // Message should be redelivered is rollback is used.
1:         session.rollback();
1:         
1:         // Make sure only 1 message was delivered.
1:         message = consumer.receive(2000);
1:         assertNotNull(message);
1:         assertTrue(message.getJMSRedelivered());
1:         assertNull(consumer.receiveNoWait());
1:         
1:         // If we commit now, the message should not be redelivered.
1:         session.commit();        
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:                 Integer.valueOf(DeliveryMode.NON_PERSISTENT), 
0:                 Integer.valueOf(DeliveryMode.PERSISTENT)} );        
0:                 Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), 
0:                 Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE), 
/////////////////////////////////////////////////////////////////////////
0:                 Integer.valueOf(DeliveryMode.NON_PERSISTENT), 
0:                 Integer.valueOf(DeliveryMode.PERSISTENT)} );        
0:                 Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), 
0:                 Byte.valueOf(ActiveMQDestination.TOPIC_TYPE), 
0:                 Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE), 
0:                 Byte.valueOf(ActiveMQDestination.TEMP_TOPIC_TYPE)} );
/////////////////////////////////////////////////////////////////////////
0:                 Integer.valueOf(DeliveryMode.NON_PERSISTENT), 
0:                 Integer.valueOf(DeliveryMode.PERSISTENT)} );        
0:                 Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), 
0:                 Byte.valueOf(ActiveMQDestination.TOPIC_TYPE), 
0:                 Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE), 
0:                 Byte.valueOf(ActiveMQDestination.TEMP_TOPIC_TYPE)} );
============================================================================