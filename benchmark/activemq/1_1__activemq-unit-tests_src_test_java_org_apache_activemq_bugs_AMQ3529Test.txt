1:83fde0b: /**
1:83fde0b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:83fde0b:  * contributor license agreements.  See the NOTICE file distributed with
1:83fde0b:  * this work for additional information regarding copyright ownership.
1:83fde0b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:83fde0b:  * (the "License"); you may not use this file except in compliance with
1:83fde0b:  * the License.  You may obtain a copy of the License at
1:83fde0b:  *
1:0a66b79:  *   http://www.apache.org/licenses/LICENSE-2.0
1:83fde0b:  *
1:83fde0b:  * Unless required by applicable law or agreed to in writing, software
1:83fde0b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:83fde0b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:83fde0b:  * See the License for the specific language governing permissions and
1:83fde0b:  * limitations under the License.
1:0a66b79:  *
1:83fde0b:  */
1:83fde0b: package org.apache.activemq.bugs;
1:83fde0b: 
1:0a66b79: import java.util.Properties;
1:83fde0b: 
1:83fde0b: import javax.jms.Connection;
1:83fde0b: import javax.jms.ConnectionFactory;
1:0a66b79: import javax.jms.Destination;
1:83fde0b: import javax.jms.JMSException;
1:0a66b79: import javax.jms.MessageConsumer;
1:83fde0b: import javax.jms.Session;
1:0a66b79: import javax.naming.Context;
1:0a66b79: import javax.naming.InitialContext;
1:0a66b79: import javax.naming.NamingException;
1:0a66b79: 
1:0a66b79: import static org.junit.Assert.assertEquals;
1:0a66b79: import static org.junit.Assert.assertNotNull;
1:0a66b79: import static org.junit.Assert.fail;
1:83fde0b: 
1:83fde0b: import org.apache.activemq.ActiveMQConnectionFactory;
1:83fde0b: import org.apache.activemq.broker.BrokerService;
1:83fde0b: import org.junit.After;
1:83fde0b: import org.junit.Before;
1:83fde0b: import org.junit.Test;
1:0a66b79: import org.slf4j.Logger;
1:0a66b79: import org.slf4j.LoggerFactory;
1:83fde0b: 
1:83fde0b: public class AMQ3529Test {
1:83fde0b: 
1:0a66b79:     private static Logger LOG = LoggerFactory.getLogger(AMQ3529Test.class);
1:0a66b79: 
1:15f6416:     private ConnectionFactory connectionFactory;
1:15f6416:     private Connection connection;
1:15f6416:     private Session session;
1:15f6416:     private BrokerService broker;
1:15f6416:     private String connectionUri;
1:0a66b79:     private MessageConsumer consumer;
1:0a66b79:     private Context ctx = null;
1:83fde0b: 
1:15f6416:     @Before
1:15f6416:     public void startBroker() throws Exception {
1:15f6416:         broker = new BrokerService();
1:15f6416:         broker.setDeleteAllMessagesOnStartup(true);
1:15f6416:         broker.setPersistent(false);
1:15f6416:         broker.setUseJmx(false);
1:15f6416:         broker.addConnector("tcp://0.0.0.0:0");
1:15f6416:         broker.start();
1:15f6416:         broker.waitUntilStarted();
1:83fde0b: 
1:15f6416:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:83fde0b: 
1:15f6416:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
2:15f6416:     }
1:83fde0b: 
1:15f6416:     @After
1:15f6416:     public void stopBroker() throws Exception {
1:15f6416:         broker.stop();
1:15f6416:         broker.waitUntilStopped();
1:15f6416:     }
1:83fde0b: 
1:15f6416:     @Test(timeout = 60000)
1:15f6416:     public void testInterruptionAffects() throws Exception {
1:15f6416:         ThreadGroup tg = new ThreadGroup("tg");
1:83fde0b: 
1:15f6416:         assertEquals(0, tg.activeCount());
1:83fde0b: 
1:15f6416:         Thread client = new Thread(tg, "client") {
1:83fde0b: 
1:15f6416:             @Override
1:15f6416:             public void run() {
2:15f6416:                 try {
1:15f6416:                     connection = connectionFactory.createConnection();
1:15f6416:                     session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:15f6416:                     assertNotNull(session);
1:15f6416: 
1:0a66b79:                     Properties props = new Properties();
1:0a66b79:                     props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:0a66b79:                     props.setProperty(Context.PROVIDER_URL, "tcp://0.0.0.0:0");
1:0a66b79:                     ctx = null;
1:0a66b79:                     try {
1:0a66b79:                         ctx = new InitialContext(props);
1:0a66b79:                     } catch (NoClassDefFoundError e) {
1:0a66b79:                         throw new NamingException(e.toString());
1:0a66b79:                     } catch (Exception e) {
1:0a66b79:                         throw new NamingException(e.toString());
1:0a66b79:                     }
1:0a66b79:                     Destination destination = (Destination) ctx.lookup("dynamicTopics/example.C");
1:0a66b79:                     consumer = session.createConsumer(destination);
1:0a66b79:                     consumer.receive(10000);
1:0a66b79:                 } catch (Exception e) {
1:0a66b79:                     // Expect an exception here from the interrupt.
1:0a66b79:                 } finally {
1:0a66b79:                     // next line is the nature of the test, if I remove this
1:0a66b79:                     // line, everything works OK
1:0a66b79:                     try {
1:0a66b79:                         consumer.close();
1:0a66b79:                     } catch (JMSException e) {
1:0a66b79:                         fail("Consumer Close failed with" + e.getMessage());
1:0a66b79:                     }
1:0a66b79:                     try {
1:0a66b79:                         session.close();
1:0a66b79:                     } catch (JMSException e) {
1:0a66b79:                         fail("Session Close failed with" + e.getMessage());
1:0a66b79:                     }
1:0a66b79:                     try {
1:0a66b79:                         connection.close();
1:0a66b79:                     } catch (JMSException e) {
1:0a66b79:                         fail("Connection Close failed with" + e.getMessage());
1:0a66b79:                     }
1:0a66b79:                     try {
1:0a66b79:                         ctx.close();
1:0a66b79:                     } catch (Exception e) {
1:0a66b79:                         fail("Connection Close failed with" + e.getMessage());
1:0a66b79:                     }
1:0a66b79:                 }
1:15f6416:             }
1:15f6416:         };
1:15f6416:         client.start();
1:0a66b79:         Thread.sleep(5000);
1:0a66b79:         client.interrupt();
1:15f6416:         client.join();
1:15f6416:         Thread.sleep(2000);
1:15f6416:         Thread[] remainThreads = new Thread[tg.activeCount()];
1:15f6416:         tg.enumerate(remainThreads);
1:15f6416:         for (Thread t : remainThreads) {
1:15f6416:             if (t.isAlive() && !t.isDaemon())
1:15f6416:                 fail("Remaining thread: " + t.toString());
1:15f6416:         }
1:0a66b79: 
1:0a66b79:         ThreadGroup root = Thread.currentThread().getThreadGroup().getParent();
1:0a66b79:         while (root.getParent() != null) {
1:0a66b79:             root = root.getParent();
1:0a66b79:         }
1:0a66b79:         visit(root, 0);
1:0a66b79:     }
1:0a66b79: 
1:0a66b79:     // This method recursively visits all thread groups under `group'.
1:0a66b79:     public static void visit(ThreadGroup group, int level) {
1:0a66b79:         // Get threads in `group'
1:0a66b79:         int numThreads = group.activeCount();
1:0a66b79:         Thread[] threads = new Thread[numThreads * 2];
1:0a66b79:         numThreads = group.enumerate(threads, false);
1:0a66b79: 
1:0a66b79:         // Enumerate each thread in `group'
1:0a66b79:         for (int i = 0; i < numThreads; i++) {
1:0a66b79:             // Get thread
1:0a66b79:             Thread thread = threads[i];
1:0a66b79:             LOG.debug("Thread:" + thread.getName() + " is still running");
1:0a66b79:         }
1:0a66b79: 
1:0a66b79:         // Get thread subgroups of `group'
1:0a66b79:         int numGroups = group.activeGroupCount();
1:0a66b79:         ThreadGroup[] groups = new ThreadGroup[numGroups * 2];
1:0a66b79:         numGroups = group.enumerate(groups, false);
1:0a66b79: 
1:0a66b79:         // Recursively visit each subgroup
1:0a66b79:         for (int i = 0; i < numGroups; i++) {
1:0a66b79:             visit(groups[i], level + 1);
1:0a66b79:         }
1:15f6416:     }
1:15f6416: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:0a66b79
/////////////////////////////////////////////////////////////////////////
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1: import java.util.Properties;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.NamingException;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ3529Test.class);
1: 
1:     private MessageConsumer consumer;
1:     private Context ctx = null;
/////////////////////////////////////////////////////////////////////////
1:                     Properties props = new Properties();
1:                     props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:                     props.setProperty(Context.PROVIDER_URL, "tcp://0.0.0.0:0");
1:                     ctx = null;
1:                     try {
1:                         ctx = new InitialContext(props);
1:                     } catch (NoClassDefFoundError e) {
1:                         throw new NamingException(e.toString());
1:                     } catch (Exception e) {
1:                         throw new NamingException(e.toString());
1:                     }
1:                     Destination destination = (Destination) ctx.lookup("dynamicTopics/example.C");
1:                     consumer = session.createConsumer(destination);
1:                     consumer.receive(10000);
1:                 } catch (Exception e) {
1:                     // Expect an exception here from the interrupt.
1:                 } finally {
1:                     // next line is the nature of the test, if I remove this
1:                     // line, everything works OK
1:                     try {
1:                         consumer.close();
1:                     } catch (JMSException e) {
1:                         fail("Consumer Close failed with" + e.getMessage());
1:                     }
1:                     try {
1:                         session.close();
1:                     } catch (JMSException e) {
1:                         fail("Session Close failed with" + e.getMessage());
1:                     }
1:                     try {
1:                         connection.close();
1:                     } catch (JMSException e) {
1:                         fail("Connection Close failed with" + e.getMessage());
1:                     }
1:                     try {
1:                         ctx.close();
1:                     } catch (Exception e) {
1:                         fail("Connection Close failed with" + e.getMessage());
1:                     }
1:                 }
1:         Thread.sleep(5000);
1:         client.interrupt();
/////////////////////////////////////////////////////////////////////////
1: 
1:         ThreadGroup root = Thread.currentThread().getThreadGroup().getParent();
1:         while (root.getParent() != null) {
1:             root = root.getParent();
1:         }
1:         visit(root, 0);
1:     }
1: 
1:     // This method recursively visits all thread groups under `group'.
1:     public static void visit(ThreadGroup group, int level) {
1:         // Get threads in `group'
1:         int numThreads = group.activeCount();
1:         Thread[] threads = new Thread[numThreads * 2];
1:         numThreads = group.enumerate(threads, false);
1: 
1:         // Enumerate each thread in `group'
1:         for (int i = 0; i < numThreads; i++) {
1:             // Get thread
1:             Thread thread = threads[i];
1:             LOG.debug("Thread:" + thread.getName() + " is still running");
1:         }
1: 
1:         // Get thread subgroups of `group'
1:         int numGroups = group.activeGroupCount();
1:         ThreadGroup[] groups = new ThreadGroup[numGroups * 2];
1:         numGroups = group.enumerate(groups, false);
1: 
1:         // Recursively visit each subgroup
1:         for (int i = 0; i < numGroups; i++) {
1:             visit(groups[i], level + 1);
1:         }
commit:15f6416
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.*;
/////////////////////////////////////////////////////////////////////////
1:     private ConnectionFactory connectionFactory;
1:     private Connection connection;
1:     private Session session;
1:     private BrokerService broker;
1:     private String connectionUri;
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:     }
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1:     @Test(timeout = 60000)
1:     public void testInterruptionAffects() throws Exception {
1:         ThreadGroup tg = new ThreadGroup("tg");
1:         assertEquals(0, tg.activeCount());
1:         Thread client = new Thread(tg, "client") {
1:             @Override
1:             public void run() {
1:                 try {
1:                     connection = connectionFactory.createConnection();
1:                     session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     assertNotNull(session);
0:                 } catch (JMSException e) {
0:                     fail(e.getMessage());
1:                 }
0:                 // next line is the nature of the test, if I remove this line, everything works OK
0:                 Thread.currentThread().interrupt();
1:                 try {
0:                     connection.close();
0:                 } catch (JMSException e) {
1:                 }
1: 
0:                 assertTrue(Thread.currentThread().isInterrupted());
1:             }
1:         };
1:         client.start();
1:         client.join();
1:         Thread.sleep(2000);
1:         Thread[] remainThreads = new Thread[tg.activeCount()];
1:         tg.enumerate(remainThreads);
1:         for (Thread t : remainThreads) {
1:             if (t.isAlive() && !t.isDaemon())
1:                 fail("Remaining thread: " + t.toString());
1:         }
1:     }
commit:83fde0b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.fail;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ3529Test {
1: 
0: 	private ConnectionFactory connectionFactory;
0: 	private Connection connection;
0: 	private Session session;
0: 	private BrokerService broker;
0: 	private String connectionUri;
1: 
0: 	@Before
0: 	public void startBroker() throws Exception {
0: 		broker = new BrokerService();
0: 		broker.setDeleteAllMessagesOnStartup(true);
0: 		broker.setPersistent(false);
0: 		broker.setUseJmx(false);
0: 		broker.addConnector("tcp://0.0.0.0:0");
0: 		broker.start();
0: 		broker.waitUntilStarted();
1: 
0: 		connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
0: 		connectionFactory = new ActiveMQConnectionFactory(connectionUri);
0: 	}
1: 
0: 	@After
0: 	public void stopBroker() throws Exception {
0: 		broker.stop();
0: 		broker.waitUntilStopped();
0: 	}
1: 
0: 	@Test(timeout = 60000)
0: 	public void testInterruptionAffects() throws Exception {
0: 		ThreadGroup tg = new ThreadGroup("tg");
1: 
0: 		assertEquals(0, tg.activeCount());
1: 
0: 		Thread client = new Thread(tg, "client") {
1: 
0: 			@Override
0: 			public void run() {
0: 				try {
0: 					connection = connectionFactory.createConnection();
0: 					session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 					assertNotNull(session);
0: 				} catch (JMSException e) {
0: 					fail(e.getMessage());
0: 				}
0: 				// next line is the nature of the test, if I remove this line, everything works OK
0: 				Thread.currentThread().interrupt();
0: 				try {
0: 					connection.close();
0: 				} catch (JMSException e) {
0: 				}
0: 			}
0: 		};
0: 		client.start();
0: 		client.join();
0: 		Thread.sleep(2000);
0: 		Thread[] remainThreads = new Thread[tg.activeCount()];
0: 		tg.enumerate(remainThreads);
0: 		for (Thread t : remainThreads) {
0: 			if (t.isAlive() && !t.isDaemon())
0: 				fail("Remaining thread: " + t.toString());
0: 		}
0: 	}
0: }
============================================================================