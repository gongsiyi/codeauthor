1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
2:885c379:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:885c379:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
6:885c379: 
1:885c379: package org.apache.activemq.store;
1:885c379: 
1:885c379: import java.io.IOException;
1:149428b: import java.util.concurrent.locks.Lock;
1:885c379: 
1:885c379: import org.apache.activemq.broker.ConnectionContext;
1:885c379: import org.apache.activemq.command.MessageId;
1:885c379: 
1:885c379: /**
1:f812e34:  * Represents a message store which is used by the persistent implementations
1:b0c2a40:  * 
1:885c379:  * 
1:885c379:  */
1:885c379: public interface ReferenceStore extends MessageStore {
1:885c379: 
1:f812e34:     public class ReferenceData {
1:f812e34:         long expiration;
1:f812e34:         int fileId;
1:f812e34:         int offset;
1:f812e34: 
1:f812e34:         public long getExpiration() {
1:f812e34:             return expiration;
1:f812e34:         }
1:f812e34: 
1:f812e34:         public void setExpiration(long expiration) {
1:f812e34:             this.expiration = expiration;
1:f812e34:         }
1:f812e34: 
1:f812e34:         public int getFileId() {
1:f812e34:             return fileId;
1:f812e34:         }
1:f812e34: 
1:f812e34:         public void setFileId(int file) {
1:f812e34:             this.fileId = file;
1:f812e34:         }
1:f812e34: 
1:f812e34:         public int getOffset() {
1:f812e34:             return offset;
1:f812e34:         }
1:f812e34: 
1:f812e34:         public void setOffset(int offset) {
1:f812e34:             this.offset = offset;
1:f812e34:         }
1:f812e34: 
1:f812e34:         @Override
1:f812e34:         public String toString() {
1:f812e34:             return "ReferenceData fileId=" + fileId + ", offset=" + offset + ", expiration=" + expiration;
1:f812e34:         }
1:f812e34:     }
1:f812e34: 
1:885c379:     /**
1:885c379:      * Adds a message reference to the message store
1:132f662:      * @return true if reference was added, false if it is a duplicate and not added
1:885c379:      */
1:132f662:     boolean addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data) throws IOException;
1:885c379: 
1:885c379:     /**
1:f812e34:      * Looks up a message using either the String messageID or the
1:f812e34:      * messageNumber. Implementations are encouraged to fill in the missing key
1:f812e34:      * if its easy to do so.
1:885c379:      */
1:fc00993:     ReferenceData getMessageReference(MessageId identity) throws IOException;
1:f812e34: 
1:885c379:     /**
1:885c379:      * @return true if it supports external batch control
1:885c379:      */
1:fc00993:     boolean supportsExternalBatchControl();
1:f812e34: 
1:fc00993:     void setBatch(MessageId startAfter);
1:f812e34:     
1:149428b:     Lock getStoreLock();
1:885c379:     
9:885c379: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     void addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data) throws IOException;
1:     ReferenceData getMessageReference(MessageId identity) throws IOException;
1:     boolean supportsExternalBatchControl();
1:     void setBatch(MessageId startAfter);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Represents a message store which is used by the persistent implementations
1:     public class ReferenceData {
1:         long expiration;
1:         int fileId;
1:         int offset;
1: 
1:         public long getExpiration() {
1:             return expiration;
1:         }
1: 
1:         public void setExpiration(long expiration) {
1:             this.expiration = expiration;
1:         }
1: 
1:         public int getFileId() {
1:             return fileId;
1:         }
1: 
1:         public void setFileId(int file) {
1:             this.fileId = file;
1:         }
1: 
1:         public int getOffset() {
1:             return offset;
1:         }
1: 
1:         public void setOffset(int offset) {
1:             this.offset = offset;
1:         }
1: 
1:         @Override
1:         public String toString() {
1:             return "ReferenceData fileId=" + fileId + ", offset=" + offset + ", expiration=" + expiration;
1:         }
1:     }
1: 
0:     public void addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data)
0:         throws IOException;
1:      * Looks up a message using either the String messageID or the
1:      * messageNumber. Implementations are encouraged to fill in the missing key
1:      * if its easy to do so.
1: 
1: 
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.MessageId;
1: 
1: /**
0:  * Represents a message store which is used by the persistent 
0:  * implementations
1:  * 
0:  * @version $Revision: 1.5 $
1:  */
1: public interface ReferenceStore extends MessageStore {
1: 
0: 	public class ReferenceData {
0: 		long expiration;
0: 		int fileId;
0: 		int offset;
1: 		
0: 		public long getExpiration() {
0: 			return expiration;
1: 		}
0: 		public void setExpiration(long expiration) {
0: 			this.expiration = expiration;
1: 		}
0: 		public int getFileId() {
0: 			return fileId;
1: 		}
0: 		public void setFileId(int file) {
0: 			this.fileId = file;
1: 		}
0: 		public int getOffset() {
0: 			return offset;
1: 		}
0: 		public void setOffset(int offset) {
0: 			this.offset = offset;
1: 		}
1: 		
0: 		@Override
0: 		public String toString() {
0: 			return "ReferenceData fileId="+fileId+", offset="+offset+", expiration="+expiration;
1: 		}
1: 	}
1: 	
1:     /**
1:      * Adds a message reference to the message store
1:      */
0:     public void addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data) throws IOException;
1: 
1:     /**
0:      * Looks up a message using either the String messageID or the messageNumber. Implementations are encouraged to fill
0:      * in the missing key if its easy to do so.
1:      */
0:     public ReferenceData getMessageReference(MessageId identity) throws IOException;
1:     
1:     /**
1:      * @return true if it supports external batch control
1:      */
0:     public boolean supportsExternalBatchControl();
1:     
0:     public void setBatch(MessageId startAfter);
1:     
1: }
commit:ced50c9
/////////////////////////////////////////////////////////////////////////
0: 		
0: 		@Override
0: 		public String toString() {
0: 			return "ReferenceData fileId="+fileId+", offset="+offset+", expiration="+expiration;
0: 		}
commit:481fc1e
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.activemq.store;
0: 
0: import java.io.IOException;
0: 
0: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.MessageId;
0: 
0: /**
0:  * Represents a message store which is used by the persistent 
0:  * implementations
0:  * 
0:  * @version $Revision: 1.5 $
0:  */
0: public interface ReferenceStore extends MessageStore {
0: 
0: 	public class ReferenceData {
0: 		long expiration;
0: 		int fileId;
0: 		int offset;
0: 		
0: 		public long getExpiration() {
0: 			return expiration;
0: 		}
0: 		public void setExpiration(long expiration) {
0: 			this.expiration = expiration;
0: 		}
0: 		public int getFileId() {
0: 			return fileId;
0: 		}
0: 		public void setFileId(int file) {
0: 			this.fileId = file;
0: 		}
0: 		public int getOffset() {
0: 			return offset;
0: 		}
0: 		public void setOffset(int offset) {
0: 			this.offset = offset;
0: 		}
0: 	}
0: 	
0:     /**
0:      * Adds a message reference to the message store
0:      */
0:     public void addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data) throws IOException;
0: 
0:     /**
0:      * Looks up a message using either the String messageID or the messageNumber. Implementations are encouraged to fill
0:      * in the missing key if its easy to do so.
0:      */
0:     public ReferenceData getMessageReference(MessageId identity) throws IOException;
0:     
0: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:132f662
/////////////////////////////////////////////////////////////////////////
1:      * @return true if reference was added, false if it is a duplicate and not added
1:     boolean addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data) throws IOException;
author:Robert Davies
-------------------------------------------------------------------------------
commit:149428b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.locks.Lock;
/////////////////////////////////////////////////////////////////////////
0:     
1:     Lock getStoreLock();
0:     
commit:a324484
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * @return true if it supports external batch control
0:      */
0:     public boolean supportsExternalBatchControl();
0:     
0:     public void setBatch(MessageId startAfter);
0:     
============================================================================