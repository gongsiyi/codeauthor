1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool.reports;
1:a88906f: 
1:540dd5c: import java.io.BufferedOutputStream;
1:540dd5c: import java.io.BufferedReader;
1:540dd5c: import java.io.File;
1:540dd5c: import java.io.FileInputStream;
1:540dd5c: import java.io.FileNotFoundException;
1:540dd5c: import java.io.FileOutputStream;
1:540dd5c: import java.io.IOException;
1:540dd5c: import java.io.InputStreamReader;
1:540dd5c: import java.io.PrintWriter;
1:a88906f: import java.util.ArrayList;
1:a88906f: import java.util.HashMap;
1:a88906f: import java.util.Iterator;
1:540dd5c: import java.util.List;
1:540dd5c: import java.util.Map;
1:540dd5c: import java.util.Properties;
1:a88906f: import java.util.StringTokenizer;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
1:540dd5c: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a88906f: 
1:a88906f: public class XmlFilePerfReportWriter extends AbstractPerfReportWriter {
1:540dd5c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(XmlFilePerfReportWriter.class);
1:a88906f: 
1:a88906f:     private File tempLogFile;
1:a88906f:     private PrintWriter tempLogFileWriter;
1:a88906f: 
1:a88906f:     private File xmlFile;
1:a88906f:     private PrintWriter xmlFileWriter;
1:a88906f: 
1:a88906f:     private String reportDir;
1:a88906f:     private String reportName;
1:a88906f: 
1:540dd5c:     private Map<String, Properties> testPropsMap;
1:540dd5c:     private List<Properties> testPropsList;
1:a88906f: 
1:a88906f:     public XmlFilePerfReportWriter() {
1:a88906f:         this("", "PerformanceReport.xml");
1:a88906f:     }
1:a88906f: 
1:a88906f:     public XmlFilePerfReportWriter(String reportDir, String reportName) {
1:540dd5c:         this.testPropsMap = new HashMap<String, Properties>();
1:540dd5c:         this.testPropsList = new ArrayList<Properties>();
1:540dd5c:         this.reportDir = reportDir;
1:540dd5c:         this.reportName = reportName;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void openReportWriter() {
1:a88906f:         if (tempLogFile == null) {
1:a88906f:             tempLogFile = createTempLogFile();
1:a88906f:         }
1:a88906f: 
1:a88906f:         try {
1:a88906f:             // Disable auto-flush and allocate 100kb of buffer
1:a88906f:             tempLogFileWriter = new PrintWriter(new BufferedOutputStream(new FileOutputStream(tempLogFile), 102400), false);
1:a88906f:         } catch (FileNotFoundException e) {
1:a88906f:             e.printStackTrace();
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void closeReportWriter() {
1:a88906f:         // Flush and close log file writer
1:a88906f:         tempLogFileWriter.flush();
1:a88906f:         tempLogFileWriter.close();
1:a88906f: 
1:a88906f:         writeToXml();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public String getReportDir() {
1:a88906f:         return reportDir;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setReportDir(String reportDir) {
1:a88906f:         this.reportDir = reportDir;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public String getReportName() {
1:a88906f:         return reportName;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setReportName(String reportName) {
1:a88906f:         this.reportName = reportName;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public File getXmlFile() {
1:a88906f:         return xmlFile;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setXmlFile(File xmlFile) {
1:a88906f:         this.xmlFile = xmlFile;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void writeInfo(String info) {
1:a88906f:         tempLogFileWriter.println("[INFO]" + info);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void writeCsvData(int csvType, String csvData) {
1:fddc01d:         if (csvType == REPORT_PLUGIN_THROUGHPUT) {
1:a88906f:             tempLogFileWriter.println("[TP-DATA]" + csvData);
1:fddc01d:         } else if (csvType == REPORT_PLUGIN_CPU) {
1:a88906f:             tempLogFileWriter.println("[CPU-DATA]" + csvData);
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void writeProperties(String header, Properties props) {
1:a88906f:         testPropsMap.put(header, props);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void writeProperties(Properties props) {
1:a88906f:         testPropsList.add(props);
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected File createTempLogFile() {
1:a88906f:         File f;
1:a88906f:         try {
1:a88906f:             f = File.createTempFile("tmpPL", null);
1:a88906f:         } catch (IOException e) {
1:a88906f:             f = new File("tmpPL" + System.currentTimeMillis() + ".tmp");
1:a88906f:         }
1:a88906f:         f.deleteOnExit();
1:a88906f:         return f;
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected File createXmlFile() {
1:540dd5c:         String filename = getReportName().endsWith(".xml") ? getReportName() : (getReportName() + ".xml");
1:a88906f:         String path = (getReportDir() == null) ? "" : getReportDir();
1:a88906f: 
1:a88906f:         return new File(path + filename);
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void writeToXml() {
1:a88906f:         try {
1:a88906f:             xmlFile = createXmlFile();
1:a88906f:             xmlFileWriter = new PrintWriter(new FileOutputStream(xmlFile));
1:a88906f:             writeXmlHeader();
1:a88906f:             writeXmlTestSettings();
1:a88906f:             writeXmlLogFile();
1:a88906f:             writeXmlPerfSummary();
1:a88906f:             writeXmlFooter();
1:a88906f:             xmlFileWriter.close();
1:a88906f: 
1:540dd5c:             LOG.info("Created performance report: " + xmlFile.getAbsolutePath());
1:a88906f:         } catch (Exception e) {
1:a88906f:             e.printStackTrace();
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void writeXmlHeader() {
1:a88906f:         xmlFileWriter.println("<testResult>");
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void writeXmlFooter() {
1:a88906f:         xmlFileWriter.println("</testResult>");
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void writeXmlTestSettings() {
1:a88906f:         Properties props;
1:a88906f: 
1:a88906f:         // Write test settings
1:540dd5c:         for (Iterator<String> i = testPropsMap.keySet().iterator(); i.hasNext();) {
1:540dd5c:             String key = i.next();
1:540dd5c:             props = testPropsMap.get(key);
1:a88906f:             writeMap(key, props);
1:a88906f:         }
1:a88906f: 
1:a88906f:         int count = 1;
1:540dd5c:         for (Iterator<Properties> i = testPropsList.iterator(); i.hasNext();) {
1:540dd5c:             props = i.next();
1:a88906f:             writeMap("settings" + count++, props);
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void writeXmlLogFile() throws IOException {
1:a88906f:         // Write throughput data
1:a88906f:         xmlFileWriter.println("<property name='performanceData'>");
1:a88906f:         xmlFileWriter.println("<list>");
1:a88906f: 
1:12b26b6:         try (FileInputStream fileInputStream = new FileInputStream(tempLogFile);
1:12b26b6:              InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
1:12b26b6:              BufferedReader reader = new BufferedReader(inputStreamReader)) {
1:12b26b6: 
1:12b26b6:             String line;
1:12b26b6:             while ((line = reader.readLine()) != null) {
1:12b26b6:                 if (line.startsWith("[TP-DATA]")) {
1:12b26b6:                     handleCsvData(REPORT_PLUGIN_THROUGHPUT, line.substring("[TP-DATA]".length()));
1:12b26b6:                     parsePerfCsvData("tpdata", line.substring("[TP-DATA]".length()));
1:12b26b6:                 } else if (line.startsWith("[CPU-DATA]")) {
1:12b26b6:                     handleCsvData(REPORT_PLUGIN_CPU, line.substring("[CPU-DATA]".length()));
1:12b26b6:                     parsePerfCsvData("cpudata", line.substring("[CPU-DATA]".length()));
1:12b26b6:                 } else if (line.startsWith("[INFO]")) {
1:12b26b6:                     xmlFileWriter.println("<info>" + line + "</info>");
1:12b26b6:                 } else {
1:12b26b6:                     xmlFileWriter.println("<error>" + line + "</error>");
1:12b26b6:                 }
1:a88906f:             }
1:a88906f:         }
1:a88906f:         xmlFileWriter.println("</list>");
1:a88906f:         xmlFileWriter.println("</property>");
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void writeXmlPerfSummary() {
1:a88906f: 
1:fddc01d:         Map summary;
1:a88906f: 
1:fddc01d:         summary = getSummary(REPORT_PLUGIN_THROUGHPUT);
1:fddc01d:         if (summary != null && summary.size() > 0) {
1:fddc01d:             writeThroughputSummary(summary);
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:         summary = getSummary(REPORT_PLUGIN_CPU);
1:fddc01d:         if (summary != null && summary.size() > 0) {
1:fddc01d:             writeCpuSummary(summary);
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:     }
1:fddc01d: 
1:fddc01d:     protected void writeThroughputSummary(Map summary) {
1:a88906f:         // Write throughput summary
1:fddc01d:         xmlFileWriter.println("<property name='perfTpSummary'>");
1:a88906f:         xmlFileWriter.println("<props>");
1:a88906f: 
1:540dd5c:         String val;
1:540dd5c:         String clientName;
1:540dd5c:         String clientVal;
1:a88906f: 
1:fddc01d:         System.out.println("#########################################");
1:fddc01d:         System.out.println("####    SYSTEM THROUGHPUT SUMMARY    ####");
1:fddc01d:         System.out.println("#########################################");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_TP);
1:a88906f:         System.out.println("System Total Throughput: " + val);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_TOTAL_TP + "'>" + val + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_CLIENTS);
1:a88906f:         System.out.println("System Total Clients: " + val);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_TOTAL_CLIENTS + "'>" + val + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_TP);
1:a88906f:         System.out.println("System Average Throughput: " + val);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_TP + "'>" + val + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_EMM_TP);
1:a88906f:         System.out.println("System Average Throughput Excluding Min/Max: " + val);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_EMM_TP + "'>" + val + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_TP);
1:a88906f:         System.out.println("System Average Client Throughput: " + val);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_TP + "'>" + val + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_EMM_TP);
1:a88906f:         System.out.println("System Average Client Throughput Excluding Min/Max: " + val);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_EMM_TP + "'>" + val + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TP);
1:a88906f:         clientName = val.substring(0, val.indexOf("="));
1:540dd5c:         clientVal = val.substring(val.indexOf("=") + 1);
1:a88906f:         System.out.println("Min Client Throughput Per Sample: clientName=" + clientName + ", value=" + clientVal);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TP);
1:a88906f:         clientName = val.substring(0, val.indexOf("="));
1:540dd5c:         clientVal = val.substring(val.indexOf("=") + 1);
1:a88906f:         System.out.println("Max Client Throughput Per Sample: clientName=" + clientName + ", value=" + clientVal);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TOTAL_TP);
1:a88906f:         clientName = val.substring(0, val.indexOf("="));
1:540dd5c:         clientVal = val.substring(val.indexOf("=") + 1);
1:a88906f:         System.out.println("Min Client Total Throughput: clientName=" + clientName + ", value=" + clientVal);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_TOTAL_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TOTAL_TP);
1:a88906f:         clientName = val.substring(0, val.indexOf("="));
1:540dd5c:         clientVal = val.substring(val.indexOf("=") + 1);
1:a88906f:         System.out.println("Max Client Total Throughput: clientName=" + clientName + ", value=" + clientVal);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_TOTAL_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_TP);
1:a88906f:         clientName = val.substring(0, val.indexOf("="));
1:540dd5c:         clientVal = val.substring(val.indexOf("=") + 1);
1:a88906f:         System.out.println("Min Average Client Throughput: clientName=" + clientName + ", value=" + clientVal);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_TP);
1:a88906f:         clientName = val.substring(0, val.indexOf("="));
1:540dd5c:         clientVal = val.substring(val.indexOf("=") + 1);
1:a88906f:         System.out.println("Max Average Client Throughput: clientName=" + clientName + ", value=" + clientVal);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_EMM_TP);
1:a88906f:         clientName = val.substring(0, val.indexOf("="));
1:540dd5c:         clientVal = val.substring(val.indexOf("=") + 1);
1:a88906f:         System.out.println("Min Average Client Throughput Excluding Min/Max: clientName=" + clientName + ", value=" + clientVal);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_EMM_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1:a88906f: 
1:a88906f:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_EMM_TP);
1:a88906f:         clientName = val.substring(0, val.indexOf("="));
1:540dd5c:         clientVal = val.substring(val.indexOf("=") + 1);
1:a88906f:         System.out.println("Max Average Client Throughput Excluding Min/Max: clientName=" + clientName + ", value=" + clientVal);
1:a88906f:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_EMM_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1:a88906f: 
1:a88906f:         xmlFileWriter.println("</props>");
1:a88906f:         xmlFileWriter.println("</property>");
1:a88906f:     }
1:a88906f: 
1:fddc01d:     protected void writeCpuSummary(Map summary) {
1:fddc01d:         xmlFileWriter.println("<property name='perfTpSummary'>");
1:fddc01d:         xmlFileWriter.println("<props>");
1:fddc01d: 
1:fddc01d:         System.out.println("########################################");
1:fddc01d:         System.out.println("####    SYSTEM CPU USAGE SUMMARY    ####");
1:fddc01d:         System.out.println("########################################");
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_BLOCK_RECV + "'>" + summary.get(CpuReportPlugin.KEY_BLOCK_RECV) + "</prop>");
1:fddc01d:         System.out.println("Total Blocks Received: " + summary.get(CpuReportPlugin.KEY_BLOCK_RECV));
3:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_BLOCK_RECV + "'>" + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_RECV) + "</prop>");
1:fddc01d:         System.out.println("Ave Blocks Received: " + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_RECV));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_BLOCK_SENT + "'>" + summary.get(CpuReportPlugin.KEY_BLOCK_SENT) + "</prop>");
1:fddc01d:         System.out.println("Total Blocks Sent: " + summary.get(CpuReportPlugin.KEY_BLOCK_SENT));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_BLOCK_SENT + "'>" + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_SENT) + "</prop>");
1:e4266c3:         System.out.println("Ave Blocks Sent: " + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_SENT));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_CTX_SWITCH + "'>" + summary.get(CpuReportPlugin.KEY_CTX_SWITCH) + "</prop>");
1:fddc01d:         System.out.println("Total Context Switches: " + summary.get(CpuReportPlugin.KEY_CTX_SWITCH));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_CTX_SWITCH + "'>" + summary.get(CpuReportPlugin.KEY_AVE_CTX_SWITCH) + "</prop>");
1:fddc01d:         System.out.println("Ave Context Switches: " + summary.get(CpuReportPlugin.KEY_AVE_CTX_SWITCH));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_USER_TIME + "'>" + summary.get(CpuReportPlugin.KEY_USER_TIME) + "</prop>");
1:fddc01d:         System.out.println("Total User Time: " + summary.get(CpuReportPlugin.KEY_USER_TIME));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_USER_TIME + "'>" + summary.get(CpuReportPlugin.KEY_AVE_USER_TIME) + "</prop>");
1:fddc01d:         System.out.println("Ave User Time: " + summary.get(CpuReportPlugin.KEY_AVE_USER_TIME));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_SYS_TIME + "'>" + summary.get(CpuReportPlugin.KEY_SYS_TIME) + "</prop>");
1:fddc01d:         System.out.println("Total System Time: " + summary.get(CpuReportPlugin.KEY_SYS_TIME));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_SYS_TIME + "'>" + summary.get(CpuReportPlugin.KEY_AVE_SYS_TIME) + "</prop>");
1:fddc01d:         System.out.println("Ave System Time: " + summary.get(CpuReportPlugin.KEY_AVE_SYS_TIME));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_IDLE_TIME + "'>" + summary.get(CpuReportPlugin.KEY_IDLE_TIME) + "</prop>");
1:fddc01d:         System.out.println("Total Idle Time: " + summary.get(CpuReportPlugin.KEY_IDLE_TIME));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_IDLE_TIME + "'>" + summary.get(CpuReportPlugin.KEY_AVE_IDLE_TIME) + "</prop>");
1:fddc01d:         System.out.println("Ave Idle Time: " + summary.get(CpuReportPlugin.KEY_AVE_IDLE_TIME));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_WAIT_TIME + "'>" + summary.get(CpuReportPlugin.KEY_WAIT_TIME) + "</prop>");
1:fddc01d:         System.out.println("Total Wait Time: " + summary.get(CpuReportPlugin.KEY_WAIT_TIME));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_WAIT_TIME + "'>" + summary.get(CpuReportPlugin.KEY_AVE_WAIT_TIME) + "</prop>");
1:fddc01d:         System.out.println("Ave Wait Time: " + summary.get(CpuReportPlugin.KEY_AVE_WAIT_TIME));
1:fddc01d: 
1:fddc01d:         xmlFileWriter.println("</props>");
1:fddc01d:         xmlFileWriter.println("</property>");
1:fddc01d:     }
1:fddc01d: 
1:a88906f:     protected void writeMap(String name, Map map) {
1:a88906f:         xmlFileWriter.println("<property name='" + name + "'>");
1:a88906f:         xmlFileWriter.println("<props>");
1:540dd5c:         for (Iterator i = map.keySet().iterator(); i.hasNext();) {
1:a88906f:             String propKey = (String)i.next();
1:a88906f:             Object propVal = map.get(propKey);
1:a88906f:             xmlFileWriter.println("<prop key='" + propKey + "'>" + propVal.toString() + "</prop>");
1:a88906f:         }
1:a88906f:         xmlFileWriter.println("</props>");
1:a88906f:         xmlFileWriter.println("</property>");
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void parsePerfCsvData(String elementName, String csvData) {
1:a88906f:         StringTokenizer tokenizer = new StringTokenizer(csvData, ",;");
1:a88906f:         String xmlElement;
1:a88906f: 
1:a88906f:         xmlElement = "<" + elementName;
1:540dd5c:         String data;
1:540dd5c:         String key;
1:540dd5c:         String val;
1:a88906f:         while (tokenizer.hasMoreTokens()) {
1:a88906f:             data = tokenizer.nextToken();
1:540dd5c:             key = data.substring(0, data.indexOf("="));
1:540dd5c:             val = data.substring(data.indexOf("=") + 1);
1:540dd5c:             xmlElement += " " + key + "='" + val + "'";
1:a88906f:         }
1:a88906f:         xmlElement += " />";
1:a88906f:         xmlFileWriter.println(xmlElement);
1:a88906f:     }
1:a88906f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:         try (FileInputStream fileInputStream = new FileInputStream(tempLogFile);
1:              InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
1:              BufferedReader reader = new BufferedReader(inputStreamReader)) {
1: 
1:             String line;
1:             while ((line = reader.readLine()) != null) {
1:                 if (line.startsWith("[TP-DATA]")) {
1:                     handleCsvData(REPORT_PLUGIN_THROUGHPUT, line.substring("[TP-DATA]".length()));
1:                     parsePerfCsvData("tpdata", line.substring("[TP-DATA]".length()));
1:                 } else if (line.startsWith("[CPU-DATA]")) {
1:                     handleCsvData(REPORT_PLUGIN_CPU, line.substring("[CPU-DATA]".length()));
1:                     parsePerfCsvData("cpudata", line.substring("[CPU-DATA]".length()));
1:                 } else if (line.startsWith("[INFO]")) {
1:                     xmlFileWriter.println("<info>" + line + "</info>");
1:                 } else {
1:                     xmlFileWriter.println("<error>" + line + "</error>");
1:                 }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(XmlFilePerfReportWriter.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedOutputStream;
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileNotFoundException;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStreamReader;
1: import java.io.PrintWriter;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: 
1: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
1: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final Log LOG = LogFactory.getLog(XmlFilePerfReportWriter.class);
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, Properties> testPropsMap;
1:     private List<Properties> testPropsList;
1:         this.testPropsMap = new HashMap<String, Properties>();
1:         this.testPropsList = new ArrayList<Properties>();
1:         this.reportDir = reportDir;
1:         this.reportName = reportName;
/////////////////////////////////////////////////////////////////////////
1:         String filename = getReportName().endsWith(".xml") ? getReportName() : (getReportName() + ".xml");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Created performance report: " + xmlFile.getAbsolutePath());
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<String> i = testPropsMap.keySet().iterator(); i.hasNext();) {
1:             String key = i.next();
1:             props = testPropsMap.get(key);
1:         for (Iterator<Properties> i = testPropsList.iterator(); i.hasNext();) {
1:             props = i.next();
/////////////////////////////////////////////////////////////////////////
1:         String val;
1:         String clientName;
1:         String clientVal;
/////////////////////////////////////////////////////////////////////////
1:         clientVal = val.substring(val.indexOf("=") + 1);
1:         clientVal = val.substring(val.indexOf("=") + 1);
1:         clientVal = val.substring(val.indexOf("=") + 1);
1:         clientVal = val.substring(val.indexOf("=") + 1);
1:         clientVal = val.substring(val.indexOf("=") + 1);
1:         clientVal = val.substring(val.indexOf("=") + 1);
1:         clientVal = val.substring(val.indexOf("=") + 1);
1:         clientVal = val.substring(val.indexOf("=") + 1);
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator i = map.keySet().iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:         String data;
1:         String key;
1:         String val;
1:             key = data.substring(0, data.indexOf("="));
1:             val = data.substring(data.indexOf("=") + 1);
1:             xmlElement += " " + key + "='" + val + "'";
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool.reports;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.activemq.tool.reports.plugins.ReportPlugin;
0: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
1: 
0: import java.util.Properties;
0: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.HashMap;
0: import java.util.Map;
1: import java.util.Iterator;
1: import java.util.StringTokenizer;
0: import java.io.File;
0: import java.io.PrintWriter;
0: import java.io.BufferedOutputStream;
0: import java.io.FileOutputStream;
0: import java.io.FileNotFoundException;
0: import java.io.BufferedReader;
0: import java.io.InputStreamReader;
0: import java.io.FileInputStream;
0: import java.io.IOException;
1: 
1: public class XmlFilePerfReportWriter extends AbstractPerfReportWriter {
0:     private static final Log log = LogFactory.getLog(XmlFilePerfReportWriter.class);
1: 
1:     private File tempLogFile;
1:     private PrintWriter tempLogFileWriter;
1: 
1:     private File xmlFile;
1:     private PrintWriter xmlFileWriter;
1: 
1:     private String reportDir;
1:     private String reportName;
1: 
0:     private Map  testPropsMap;
0:     private List testPropsList;
1: 
1:     public XmlFilePerfReportWriter() {
1:         this("", "PerformanceReport.xml");
1:     }
1: 
1:     public XmlFilePerfReportWriter(String reportDir, String reportName) {
0:         this.testPropsMap  = new HashMap();
0:         this.testPropsList = new ArrayList();
0:         this.reportDir     = reportDir;
0:         this.reportName    = reportName;
1:     }
1: 
1:     public void openReportWriter() {
1:         if (tempLogFile == null) {
1:             tempLogFile = createTempLogFile();
1:         }
1: 
1:         try {
1:             // Disable auto-flush and allocate 100kb of buffer
1:             tempLogFileWriter = new PrintWriter(new BufferedOutputStream(new FileOutputStream(tempLogFile), 102400), false);
1:         } catch (FileNotFoundException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public void closeReportWriter() {
1:         // Flush and close log file writer
1:         tempLogFileWriter.flush();
1:         tempLogFileWriter.close();
1: 
1:         writeToXml();
1:     }
1: 
1:     public String getReportDir() {
1:         return reportDir;
1:     }
1: 
1:     public void setReportDir(String reportDir) {
1:         this.reportDir = reportDir;
1:     }
1: 
1:     public String getReportName() {
1:         return reportName;
1:     }
1: 
1:     public void setReportName(String reportName) {
1:         this.reportName = reportName;
1:     }
1: 
1:     public File getXmlFile() {
1:         return xmlFile;
1:     }
1: 
1:     public void setXmlFile(File xmlFile) {
1:         this.xmlFile = xmlFile;
1:     }
1: 
1:     public void writeInfo(String info) {
1:         tempLogFileWriter.println("[INFO]" + info);
1:     }
1: 
1:     public void writeCsvData(int csvType, String csvData) {
0:         if (csvType == ReportPlugin.REPORT_PLUGIN_THROUGHPUT) {
1:             tempLogFileWriter.println("[TP-DATA]" + csvData);
0:         } else if (csvType == ReportPlugin.REPORT_PLUGIN_CPU) {
1:             tempLogFileWriter.println("[CPU-DATA]" + csvData);
1:         }
1:     }
1: 
1:     public void writeProperties(String header, Properties props) {
1:         testPropsMap.put(header, props);
1:     }
1: 
1:     public void writeProperties(Properties props) {
1:         testPropsList.add(props);
1:     }
1: 
1:     protected File createTempLogFile() {
1:         File f;
1:         try {
1:             f = File.createTempFile("tmpPL", null);
1:         } catch (IOException e) {
1:             f = new File("tmpPL" + System.currentTimeMillis() + ".tmp");
1:         }
1:         f.deleteOnExit();
1:         return f;
1:     }
1: 
1:     protected File createXmlFile() {
0:         String filename = (getReportName().endsWith(".xml") ? getReportName() : (getReportName() + ".xml"));
1:         String path = (getReportDir() == null) ? "" : getReportDir();
1: 
1:         return new File(path + filename);
1:     }
1: 
1:     protected void writeToXml() {
1:         try {
1:             xmlFile = createXmlFile();
1:             xmlFileWriter = new PrintWriter(new FileOutputStream(xmlFile));
1:             writeXmlHeader();
1:             writeXmlTestSettings();
1:             writeXmlLogFile();
1:             writeXmlPerfSummary();
1:             writeXmlFooter();
1:             xmlFileWriter.close();
1: 
0:             log.info("Created performance report: " + xmlFile.getAbsolutePath());
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     protected void writeXmlHeader() {
1:         xmlFileWriter.println("<testResult>");
1:     }
1: 
1:     protected void writeXmlFooter() {
1:         xmlFileWriter.println("</testResult>");
1:     }
1: 
1:     protected void writeXmlTestSettings() {
1:         Properties props;
1: 
1:         // Write test settings
0:         for (Iterator i=testPropsMap.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0:             props = (Properties)testPropsMap.get(key);
1:             writeMap(key, props);
1:         }
1: 
1:         int count = 1;
0:         for (Iterator i=testPropsList.iterator(); i.hasNext();) {
0:             props = (Properties)i.next();
1:             writeMap("settings" + count++, props);
1:         }
1:     }
1: 
1:     protected void writeXmlLogFile() throws IOException {
1:         // Write throughput data
1:         xmlFileWriter.println("<property name='performanceData'>");
1:         xmlFileWriter.println("<list>");
1: 
0:         BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(tempLogFile)));
0:         String line;
0:         while ((line = reader.readLine()) != null) {
0:             if (line.startsWith("[TP-DATA]")) {
0:                 handleCsvData(ReportPlugin.REPORT_PLUGIN_THROUGHPUT, line.substring("[TP-DATA]".length()));
0:                 parsePerfCsvData("tpdata", line.substring("[TP-DATA]".length()));
0:             } else if (line.startsWith("[CPU-DATA]")) {
0:                 handleCsvData(ReportPlugin.REPORT_PLUGIN_CPU, line.substring("[CPU-DATA]".length()));
0:                 parsePerfCsvData("cpudata", line.substring("[CPU-DATA]".length()));
0:             } else if (line.startsWith("[INFO]")) {
0:                 xmlFileWriter.println("<info>" + line + "</info>");
0:             } else {
0:                 xmlFileWriter.println("<error>" + line + "</error>");
1:             }
1:         }
1: 
1:         xmlFileWriter.println("</list>");
1:         xmlFileWriter.println("</property>");
1:     }
1: 
1:     protected void writeXmlPerfSummary() {
1:         // Write throughput summary
0:         Map summary = getSummary(ReportPlugin.REPORT_PLUGIN_THROUGHPUT);
1: 
0:         xmlFileWriter.println("<property name='perfSummary'>");
1:         xmlFileWriter.println("<props>");
1: 
0:         String val, clientName, clientVal;
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_TP);
1:         System.out.println("System Total Throughput: " + val);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_TOTAL_TP + "'>" + val + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_CLIENTS);
1:         System.out.println("System Total Clients: " + val);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_TOTAL_CLIENTS + "'>" + val + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_TP);
1:         System.out.println("System Average Throughput: " + val);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_TP + "'>" + val + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_EMM_TP);
1:         System.out.println("System Average Throughput Excluding Min/Max: " + val);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_EMM_TP + "'>" + val + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_TP);
1:         System.out.println("System Average Client Throughput: " + val);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_TP + "'>" + val + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_EMM_TP);
1:         System.out.println("System Average Client Throughput Excluding Min/Max: " + val);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_EMM_TP + "'>" + val + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TP);
1:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
1:         System.out.println("Min Client Throughput Per Sample: clientName=" + clientName + ", value=" + clientVal);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TP);
1:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
1:         System.out.println("Max Client Throughput Per Sample: clientName=" + clientName + ", value=" + clientVal);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TOTAL_TP);
1:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
1:         System.out.println("Min Client Total Throughput: clientName=" + clientName + ", value=" + clientVal);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_TOTAL_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TOTAL_TP);
1:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
1:         System.out.println("Max Client Total Throughput: clientName=" + clientName + ", value=" + clientVal);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_TOTAL_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_TP);
1:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
1:         System.out.println("Min Average Client Throughput: clientName=" + clientName + ", value=" + clientVal);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_TP);
1:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
1:         System.out.println("Max Average Client Throughput: clientName=" + clientName + ", value=" + clientVal);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_EMM_TP);
1:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
1:         System.out.println("Min Average Client Throughput Excluding Min/Max: clientName=" + clientName + ", value=" + clientVal);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_EMM_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1: 
1:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_EMM_TP);
1:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
1:         System.out.println("Max Average Client Throughput Excluding Min/Max: clientName=" + clientName + ", value=" + clientVal);
1:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_EMM_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
1: 
1:         xmlFileWriter.println("</props>");
1:         xmlFileWriter.println("</property>");
1:     }
1: 
1:     protected void writeMap(String name, Map map) {
1:         xmlFileWriter.println("<property name='" + name + "'>");
1:         xmlFileWriter.println("<props>");
0:         for (Iterator i=map.keySet().iterator(); i.hasNext();) {
1:             String propKey = (String)i.next();
1:             Object propVal = map.get(propKey);
1:             xmlFileWriter.println("<prop key='" + propKey + "'>" + propVal.toString() + "</prop>");
1:         }
1:         xmlFileWriter.println("</props>");
1:         xmlFileWriter.println("</property>");
1:     }
1: 
1:     protected void parsePerfCsvData(String elementName, String csvData) {
1:         StringTokenizer tokenizer = new StringTokenizer(csvData, ",;");
1:         String xmlElement;
1: 
1:         xmlElement = "<" + elementName;
0:         String data, key, val;
1:         while (tokenizer.hasMoreTokens()) {
1:             data = tokenizer.nextToken();
0:             key  = data.substring(0, data.indexOf("="));
0:             val  = data.substring(data.indexOf("=") + 1);
0:             xmlElement += (" " + key + "='" + val + "'");
1:         }
1:         xmlElement += " />";
1:         xmlFileWriter.println(xmlElement);
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:e4266c3
/////////////////////////////////////////////////////////////////////////
1:         System.out.println("Ave Blocks Sent: " + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_SENT));
commit:7450969
/////////////////////////////////////////////////////////////////////////
commit:fddc01d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
/////////////////////////////////////////////////////////////////////////
1:         if (csvType == REPORT_PLUGIN_THROUGHPUT) {
1:         } else if (csvType == REPORT_PLUGIN_CPU) {
/////////////////////////////////////////////////////////////////////////
0:                 handleCsvData(REPORT_PLUGIN_THROUGHPUT, line.substring("[TP-DATA]".length()));
0:                 handleCsvData(REPORT_PLUGIN_CPU, line.substring("[CPU-DATA]".length()));
/////////////////////////////////////////////////////////////////////////
1:         Map summary;
1: 
1:         summary = getSummary(REPORT_PLUGIN_THROUGHPUT);
1:         if (summary != null && summary.size() > 0) {
1:             writeThroughputSummary(summary);
1:         }
1: 
1:         summary = getSummary(REPORT_PLUGIN_CPU);
1:         if (summary != null && summary.size() > 0) {
1:             writeCpuSummary(summary);
1:         }
1: 
1:     }
1: 
1:     protected void writeThroughputSummary(Map summary) {
0:         // Write throughput summary
1:         xmlFileWriter.println("<property name='perfTpSummary'>");
1:         System.out.println("#########################################");
1:         System.out.println("####    SYSTEM THROUGHPUT SUMMARY    ####");
1:         System.out.println("#########################################");
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void writeCpuSummary(Map summary) {
1:         xmlFileWriter.println("<property name='perfTpSummary'>");
1:         xmlFileWriter.println("<props>");
1: 
1:         System.out.println("########################################");
1:         System.out.println("####    SYSTEM CPU USAGE SUMMARY    ####");
1:         System.out.println("########################################");
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_BLOCK_RECV + "'>" + summary.get(CpuReportPlugin.KEY_BLOCK_RECV) + "</prop>");
1:         System.out.println("Total Blocks Received: " + summary.get(CpuReportPlugin.KEY_BLOCK_RECV));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_BLOCK_RECV + "'>" + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_RECV) + "</prop>");
1:         System.out.println("Ave Blocks Received: " + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_RECV));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_BLOCK_SENT + "'>" + summary.get(CpuReportPlugin.KEY_BLOCK_SENT) + "</prop>");
1:         System.out.println("Total Blocks Sent: " + summary.get(CpuReportPlugin.KEY_BLOCK_SENT));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_BLOCK_SENT + "'>" + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_SENT) + "</prop>");
0:         System.out.println(" Ave Blocks Sent: " + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_SENT));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_CTX_SWITCH + "'>" + summary.get(CpuReportPlugin.KEY_CTX_SWITCH) + "</prop>");
1:         System.out.println("Total Context Switches: " + summary.get(CpuReportPlugin.KEY_CTX_SWITCH));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_CTX_SWITCH + "'>" + summary.get(CpuReportPlugin.KEY_AVE_CTX_SWITCH) + "</prop>");
1:         System.out.println("Ave Context Switches: " + summary.get(CpuReportPlugin.KEY_AVE_CTX_SWITCH));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_USER_TIME + "'>" + summary.get(CpuReportPlugin.KEY_USER_TIME) + "</prop>");
1:         System.out.println("Total User Time: " + summary.get(CpuReportPlugin.KEY_USER_TIME));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_USER_TIME + "'>" + summary.get(CpuReportPlugin.KEY_AVE_USER_TIME) + "</prop>");
1:         System.out.println("Ave User Time: " + summary.get(CpuReportPlugin.KEY_AVE_USER_TIME));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_SYS_TIME + "'>" + summary.get(CpuReportPlugin.KEY_SYS_TIME) + "</prop>");
1:         System.out.println("Total System Time: " + summary.get(CpuReportPlugin.KEY_SYS_TIME));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_SYS_TIME + "'>" + summary.get(CpuReportPlugin.KEY_AVE_SYS_TIME) + "</prop>");
1:         System.out.println("Ave System Time: " + summary.get(CpuReportPlugin.KEY_AVE_SYS_TIME));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_IDLE_TIME + "'>" + summary.get(CpuReportPlugin.KEY_IDLE_TIME) + "</prop>");
1:         System.out.println("Total Idle Time: " + summary.get(CpuReportPlugin.KEY_IDLE_TIME));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_IDLE_TIME + "'>" + summary.get(CpuReportPlugin.KEY_AVE_IDLE_TIME) + "</prop>");
1:         System.out.println("Ave Idle Time: " + summary.get(CpuReportPlugin.KEY_AVE_IDLE_TIME));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_WAIT_TIME + "'>" + summary.get(CpuReportPlugin.KEY_WAIT_TIME) + "</prop>");
1:         System.out.println("Total Wait Time: " + summary.get(CpuReportPlugin.KEY_WAIT_TIME));
1: 
1:         xmlFileWriter.println("<prop key='" + CpuReportPlugin.KEY_AVE_WAIT_TIME + "'>" + summary.get(CpuReportPlugin.KEY_AVE_WAIT_TIME) + "</prop>");
1:         System.out.println("Ave Wait Time: " + summary.get(CpuReportPlugin.KEY_AVE_WAIT_TIME));
1: 
1:         xmlFileWriter.println("</props>");
1:         xmlFileWriter.println("</property>");
1:     }
1: 
commit:a6f9351
/////////////////////////////////////////////////////////////////////////
0:         StringTokenizer tokenizer = new StringTokenizer(csvData, ",;");
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.reports.plugins.ReportPlugin;
0: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
/////////////////////////////////////////////////////////////////////////
0:     public File getXmlFile() {
0:         return xmlFile;
0:     }
0: 
0:     public void setXmlFile(File xmlFile) {
0:         this.xmlFile = xmlFile;
0:     }
0: 
0:     public void writeCsvData(int csvType, String csvData) {
0:         if (csvType == ReportPlugin.REPORT_PLUGIN_THROUGHPUT) {
0:             tempLogFileWriter.println("[TP-DATA]" + csvData);
0:         } else if (csvType == ReportPlugin.REPORT_PLUGIN_CPU) {
0:             tempLogFileWriter.println("[CPU-DATA]" + csvData);
0:         }
/////////////////////////////////////////////////////////////////////////
0:         File f;
/////////////////////////////////////////////////////////////////////////
0:         return new File(path + filename);
/////////////////////////////////////////////////////////////////////////
0:             log.info("Created performance report: " + xmlFile.getAbsolutePath());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if (line.startsWith("[TP-DATA]")) {
0:                 handleCsvData(ReportPlugin.REPORT_PLUGIN_THROUGHPUT, line.substring("[TP-DATA]".length()));
0:                 parsePerfCsvData("tpdata", line.substring("[TP-DATA]".length()));
0:             } else if (line.startsWith("[CPU-DATA]")) {
0:                 handleCsvData(ReportPlugin.REPORT_PLUGIN_CPU, line.substring("[CPU-DATA]".length()));
0:                 parsePerfCsvData("cpudata", line.substring("[CPU-DATA]".length()));
0:                 xmlFileWriter.println("<info>" + line + "</info>");
0:                 xmlFileWriter.println("<error>" + line + "</error>");
/////////////////////////////////////////////////////////////////////////
0:         // Write throughput summary
0:         Map summary = getSummary(ReportPlugin.REPORT_PLUGIN_THROUGHPUT);
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_TOTAL_TP + "'>" + val + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_CLIENTS);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_TOTAL_CLIENTS + "'>" + val + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_TP + "'>" + val + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_EMM_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_EMM_TP + "'>" + val + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_TP + "'>" + val + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_EMM_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_EMM_TP + "'>" + val + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TOTAL_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_TOTAL_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TOTAL_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_TOTAL_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_EMM_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_EMM_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0:         val = (String)summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_EMM_TP);
0:         xmlFileWriter.println("<prop key='" + ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_EMM_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
/////////////////////////////////////////////////////////////////////////
0:     protected void parsePerfCsvData(String elementName, String csvData) {
0:         String xmlElement;
0: 
0:         xmlElement = "<" + elementName;
0:         String data, key, val;
0:             xmlElement += (" " + key + "='" + val + "'");
0:         xmlElement += " />";
0:         xmlFileWriter.println(xmlElement);
commit:e0efebe
/////////////////////////////////////////////////////////////////////////
0:         val = (String)summary.get(KEY_SYS_AVE_CLIENT_TP);
0:         System.out.println("System Average Client Throughput: " + val);
0:         xmlFileWriter.println("<prop key='" + KEY_SYS_AVE_CLIENT_TP + "'>" + val + "</prop>");
0: 
0:         val = (String)summary.get(KEY_SYS_AVE_CLIENT_EMM_TP);
0:         System.out.println("System Average Client Throughput Excluding Min/Max: " + val);
0:         xmlFileWriter.println("<prop key='" + KEY_SYS_AVE_CLIENT_EMM_TP + "'>" + val + "</prop>");
0: 
commit:77c889d
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool.reports;
0: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: import java.util.Properties;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.Map;
0: import java.util.Iterator;
0: import java.util.StringTokenizer;
0: import java.io.File;
0: import java.io.PrintWriter;
0: import java.io.BufferedOutputStream;
0: import java.io.FileOutputStream;
0: import java.io.FileNotFoundException;
0: import java.io.BufferedReader;
0: import java.io.InputStreamReader;
0: import java.io.FileInputStream;
0: import java.io.IOException;
0: 
0: public class XmlFilePerfReportWriter extends AbstractPerfReportWriter {
0:     private static final Log log = LogFactory.getLog(XmlFilePerfReportWriter.class);
0: 
0:     private File tempLogFile;
0:     private PrintWriter tempLogFileWriter;
0: 
0:     private File xmlFile;
0:     private PrintWriter xmlFileWriter;
0: 
0:     private String reportDir;
0:     private String reportName;
0: 
0:     private Map  testPropsMap;
0:     private List testPropsList;
0: 
0:     public XmlFilePerfReportWriter() {
0:         this("", "PerformanceReport.xml");
0:     }
0: 
0:     public XmlFilePerfReportWriter(String reportDir, String reportName) {
0:         this.testPropsMap  = new HashMap();
0:         this.testPropsList = new ArrayList();
0:         this.reportDir     = reportDir;
0:         this.reportName    = reportName;
0:     }
0: 
0:     public void openReportWriter() {
0:         if (tempLogFile == null) {
0:             tempLogFile = createTempLogFile();
0:         }
0: 
0:         try {
0:             // Disable auto-flush and allocate 100kb of buffer
0:             tempLogFileWriter = new PrintWriter(new BufferedOutputStream(new FileOutputStream(tempLogFile), 102400), false);
0:         } catch (FileNotFoundException e) {
0:             e.printStackTrace();
0:         }
0:     }
0: 
0:     public void closeReportWriter() {
0:         // Flush and close log file writer
0:         tempLogFileWriter.flush();
0:         tempLogFileWriter.close();
0: 
0:         writeToXml();
0:     }
0: 
0:     public String getReportDir() {
0:         return reportDir;
0:     }
0: 
0:     public void setReportDir(String reportDir) {
0:         this.reportDir = reportDir;
0:     }
0: 
0:     public String getReportName() {
0:         return reportName;
0:     }
0: 
0:     public void setReportName(String reportName) {
0:         this.reportName = reportName;
0:     }
0: 
0:     public void writeInfo(String info) {
0:         tempLogFileWriter.println("[INFO]" + info);
0:     }
0: 
0:     public void writePerfData(String data) {
0:         tempLogFileWriter.println("[DATA]" + data);
0:     }
0: 
0:     public void writeProperties(String header, Properties props) {
0:         testPropsMap.put(header, props);
0:     }
0: 
0:     public void writeProperties(Properties props) {
0:         testPropsList.add(props);
0:     }
0: 
0:     protected File createTempLogFile() {
0:         File f = null;
0:         try {
0:             f = File.createTempFile("tmpPL", null);
0:         } catch (IOException e) {
0:             f = new File("tmpPL" + System.currentTimeMillis() + ".tmp");
0:         }
0:         f.deleteOnExit();
0:         return f;
0:     }
0: 
0:     protected File createXmlFile() {
0:         String filename = (getReportName().endsWith(".xml") ? getReportName() : (getReportName() + ".xml"));
0:         String path = (getReportDir() == null) ? "" : getReportDir();
0: 
0:         File f = new File(path + filename);
0:         return f;
0:     }
0: 
0:     protected void writeToXml() {
0:         try {
0:             xmlFile = createXmlFile();
0:             xmlFileWriter = new PrintWriter(new FileOutputStream(xmlFile));
0:             writeXmlHeader();
0:             writeXmlTestSettings();
0:             writeXmlLogFile();
0:             writeXmlPerfSummary();
0:             writeXmlFooter();
0:             xmlFileWriter.close();
0: 
0:             System.out.println("Created performance report: " + xmlFile.getAbsolutePath());
0:         } catch (Exception e) {
0:             e.printStackTrace();
0:         }
0:     }
0: 
0:     protected void writeXmlHeader() {
0:         xmlFileWriter.println("<testResult>");
0:     }
0: 
0:     protected void writeXmlFooter() {
0:         xmlFileWriter.println("</testResult>");
0:     }
0: 
0:     protected void writeXmlTestSettings() {
0:         Properties props;
0:         // Write system settings
0:         writeMap("systemSettings", System.getProperties());
0: 
0:         // Write test settings
0:         for (Iterator i=testPropsMap.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0:             props = (Properties)testPropsMap.get(key);
0:             writeMap(key, props);
0:         }
0: 
0:         int count = 1;
0:         for (Iterator i=testPropsList.iterator(); i.hasNext();) {
0:             props = (Properties)i.next();
0:             writeMap("settings" + count++, props);
0:         }
0:     }
0: 
0:     protected void writeXmlLogFile() throws IOException {
0:         // Write throughput data
0:         xmlFileWriter.println("<property name='performanceData'>");
0:         xmlFileWriter.println("<list>");
0: 
0:         BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(tempLogFile)));
0:         String line;
0:         while ((line = reader.readLine()) != null) {
0:             if (line.startsWith("[DATA]")) {
0:                 parsePerfCsvData(line.substring("[DATA]".length()));
0:             } else if (line.startsWith("[INFO]")) {
0:                 xmlFileWriter.println("<value>" + line + "</value>");
0:             } else {
0:                 xmlFileWriter.println("<value>[ERROR]" + line + "</value>");
0:             }
0:         }
0: 
0:         xmlFileWriter.println("</list>");
0:         xmlFileWriter.println("</property>");
0:     }
0: 
0:     protected void writeXmlPerfSummary() {
0:         Map summary = createPerfSummary(clientThroughputs);
0: 
0:         xmlFileWriter.println("<property name='perfSummary'>");
0:         xmlFileWriter.println("<props>");
0: 
0:         String val, clientName, clientVal;
0: 
0:         val = (String)summary.get(KEY_SYS_TOTAL_TP);
0:         System.out.println("System Total Throughput: " + val);
0:         xmlFileWriter.println("<prop key='" + KEY_SYS_TOTAL_TP + "'>" + val + "</prop>");
0: 
0:         val = (String)summary.get(KEY_SYS_TOTAL_CLIENTS);
0:         System.out.println("System Total Clients: " + val);
0:         xmlFileWriter.println("<prop key='" + KEY_SYS_TOTAL_CLIENTS + "'>" + val + "</prop>");
0: 
0:         val = (String)summary.get(KEY_SYS_AVE_TP);
0:         System.out.println("System Average Throughput: " + val);
0:         xmlFileWriter.println("<prop key='" + KEY_SYS_AVE_TP + "'>" + val + "</prop>");
0: 
0:         val = (String)summary.get(KEY_SYS_AVE_EMM_TP);
0:         System.out.println("System Average Throughput Excluding Min/Max: " + val);
0:         xmlFileWriter.println("<prop key='" + KEY_SYS_AVE_EMM_TP + "'>" + val + "</prop>");
0: 
0:         val = (String)summary.get(KEY_MIN_CLIENT_TP);
0:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
0:         System.out.println("Min Client Throughput Per Sample: clientName=" + clientName + ", value=" + clientVal);
0:         xmlFileWriter.println("<prop key='" + KEY_MIN_CLIENT_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0: 
0:         val = (String)summary.get(KEY_MAX_CLIENT_TP);
0:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
0:         System.out.println("Max Client Throughput Per Sample: clientName=" + clientName + ", value=" + clientVal);
0:         xmlFileWriter.println("<prop key='" + KEY_MAX_CLIENT_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0: 
0:         val = (String)summary.get(KEY_MIN_CLIENT_TOTAL_TP);
0:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
0:         System.out.println("Min Client Total Throughput: clientName=" + clientName + ", value=" + clientVal);
0:         xmlFileWriter.println("<prop key='" + KEY_MIN_CLIENT_TOTAL_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0: 
0:         val = (String)summary.get(KEY_MAX_CLIENT_TOTAL_TP);
0:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
0:         System.out.println("Max Client Total Throughput: clientName=" + clientName + ", value=" + clientVal);
0:         xmlFileWriter.println("<prop key='" + KEY_MAX_CLIENT_TOTAL_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0: 
0:         val = (String)summary.get(KEY_MIN_CLIENT_AVE_TP);
0:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
0:         System.out.println("Min Average Client Throughput: clientName=" + clientName + ", value=" + clientVal);
0:         xmlFileWriter.println("<prop key='" + KEY_MIN_CLIENT_AVE_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0: 
0:         val = (String)summary.get(KEY_MAX_CLIENT_AVE_TP);
0:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
0:         System.out.println("Max Average Client Throughput: clientName=" + clientName + ", value=" + clientVal);
0:         xmlFileWriter.println("<prop key='" + KEY_MAX_CLIENT_AVE_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0: 
0:         val = (String)summary.get(KEY_MIN_CLIENT_AVE_EMM_TP);
0:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
0:         System.out.println("Min Average Client Throughput Excluding Min/Max: clientName=" + clientName + ", value=" + clientVal);
0:         xmlFileWriter.println("<prop key='" + KEY_MIN_CLIENT_AVE_EMM_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0: 
0:         val = (String)summary.get(KEY_MAX_CLIENT_AVE_EMM_TP);
0:         clientName = val.substring(0, val.indexOf("="));
0:         clientVal  = val.substring(val.indexOf("=") + 1);
0:         System.out.println("Max Average Client Throughput Excluding Min/Max: clientName=" + clientName + ", value=" + clientVal);
0:         xmlFileWriter.println("<prop key='" + KEY_MAX_CLIENT_AVE_EMM_TP + "'>clientName=" + clientName + ",value=" + clientVal + "</prop>");
0: 
0:         xmlFileWriter.println("</props>");
0:         xmlFileWriter.println("</property>");
0:     }
0: 
0:     protected void writeMap(String name, Map map) {
0:         xmlFileWriter.println("<property name='" + name + "'>");
0:         xmlFileWriter.println("<props>");
0:         for (Iterator i=map.keySet().iterator(); i.hasNext();) {
0:             String propKey = (String)i.next();
0:             Object propVal = map.get(propKey);
0:             xmlFileWriter.println("<prop key='" + propKey + "'>" + propVal.toString() + "</prop>");
0:         }
0:         xmlFileWriter.println("</props>");
0:         xmlFileWriter.println("</property>");
0:     }
0: 
0:     protected void parsePerfCsvData(String csvData) {
0:         StringTokenizer tokenizer = new StringTokenizer(csvData, ",");
0:         String data, key, val, clientName = null;
0:         Long throughput = null;
0:         int index = -1;
0:         while (tokenizer.hasMoreTokens()) {
0:             data = tokenizer.nextToken();
0:             key  = data.substring(0, data.indexOf("="));
0:             val  = data.substring(data.indexOf("=") + 1);
0: 
0:             if (key.equalsIgnoreCase("clientName")) {
0:                 clientName = val;
0:             } else if (key.equalsIgnoreCase("throughput")) {
0:                 throughput = Long.valueOf(val);
0:             } else if (key.equalsIgnoreCase("index")) {
0:                 index = Integer.parseInt(val);
0:             }
0:         }
0:         addToClientTPList(clientName, throughput);
0:         xmlFileWriter.println("<value index='" + index + "' clientName='" + clientName +
0:                               "'>" + throughput.longValue() + "</value>");
0:     }
0: }
============================================================================