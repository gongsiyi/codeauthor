1:07cb724: /**
1:07cb724:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:07cb724:  * contributor license agreements.  See the NOTICE file distributed with
1:07cb724:  * this work for additional information regarding copyright ownership.
1:07cb724:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:07cb724:  * (the "License"); you may not use this file except in compliance with
1:07cb724:  * the License.  You may obtain a copy of the License at
1:07cb724:  *
1:07cb724:  *      http://www.apache.org/licenses/LICENSE-2.0
1:07cb724:  *
1:07cb724:  * Unless required by applicable law or agreed to in writing, software
1:07cb724:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cb724:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cb724:  * See the License for the specific language governing permissions and
1:07cb724:  * limitations under the License.
1:07cb724:  */
1:07cb724: package org.apache.activemq.bugs;
1:0d9c588: 
1:07cb724: import java.io.File;
1:0d9c588: import java.util.concurrent.CountDownLatch;
1:0d9c588: import java.util.concurrent.TimeUnit;
1:07cb724: import java.util.concurrent.atomic.AtomicInteger;
1:07cb724: import javax.jms.Connection;
1:07cb724: import javax.jms.DeliveryMode;
1:07cb724: import javax.jms.Destination;
1:07cb724: import javax.jms.Message;
1:07cb724: import javax.jms.MessageConsumer;
1:07cb724: import javax.jms.MessageProducer;
1:e02dfde: import javax.jms.ResourceAllocationException;
1:07cb724: import javax.jms.Session;
1:e02dfde: import org.apache.activemq.ActiveMQConnection;
1:07cb724: import org.apache.activemq.ActiveMQConnectionFactory;
1:07cb724: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:e02dfde: import org.apache.activemq.TestSupport;
1:07cb724: import org.apache.activemq.broker.BrokerService;
1:07cb724: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:07cb724: import org.apache.activemq.broker.region.policy.PolicyMap;
1:e02dfde: import org.apache.activemq.command.ActiveMQQueue;
1:07cb724: import org.apache.activemq.command.ActiveMQTopic;
1:d5dd937: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
1:07cb724: import org.apache.activemq.usage.MemoryUsage;
1:07cb724: import org.apache.activemq.usage.StoreUsage;
1:07cb724: import org.apache.activemq.usage.SystemUsage;
1:07cb724: import org.apache.activemq.usage.TempUsage;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
6:07cb724: 
1:e02dfde: public class TempStorageBlockedBrokerTest extends TestSupport {
1:07cb724: 
1:07cb724:     public int deliveryMode = DeliveryMode.PERSISTENT;
1:07cb724: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TempStorageBlockedBrokerTest.class);
1:07cb724:     private static final int MESSAGES_COUNT = 1000;
1:07cb724:     private static byte[] buf = new byte[4 * 1024];
1:07cb724:     private BrokerService broker;
1:07cb724:     AtomicInteger messagesSent = new AtomicInteger(0);
1:07cb724:     AtomicInteger messagesConsumed = new AtomicInteger(0);
1:07cb724: 
1:e02dfde:     protected long messageReceiveTimeout = 10000L;
1:07cb724: 
1:07cb724:     Destination destination = new ActiveMQTopic("FooTwo");
1:07cb724: 
1:e25e5de:     private String connectionUri;
1:e25e5de: 
1:e02dfde:     public void testRunProducerWithHungConsumer() throws Exception {
1:07cb724: 
1:07cb724:         final long origTempUsage = broker.getSystemUsage().getTempUsage().getUsage();
1:07cb724: 
1:e25e5de:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:07cb724:         // ensure messages are spooled to disk for this consumer
1:07cb724:         ActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();
1:07cb724:         prefetch.setTopicPrefetch(10);
1:07cb724:         factory.setPrefetchPolicy(prefetch);
1:07cb724:         Connection consumerConnection = factory.createConnection();
1:07cb724:         consumerConnection.start();
1:07cb724: 
1:07cb724:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:07cb724:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:07cb724: 
1:07cb724:         final Connection producerConnection = factory.createConnection();
1:07cb724:         producerConnection.start();
1:07cb724: 
1:0d9c588:         final CountDownLatch producerHasSentTenMessages = new CountDownLatch(10);
1:07cb724:         Thread producingThread = new Thread("Producing thread") {
1:ee55abb:             @Override
1:07cb724:             public void run() {
1:07cb724:                 try {
1:07cb724:                     Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:07cb724:                     MessageProducer producer = session.createProducer(destination);
1:07cb724:                     producer.setDeliveryMode(deliveryMode);
1:07cb724:                     for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:07cb724:                         Message message = session.createTextMessage(new String(buf) + idx);
1:07cb724: 
1:07cb724:                         producer.send(message);
1:07cb724:                         messagesSent.incrementAndGet();
1:0d9c588:                         producerHasSentTenMessages.countDown();
1:07cb724:                         Thread.sleep(10);
1:0d9c588:                         if (idx != 0 && idx%100 == 0) {
1:0d9c588:                             LOG.info("Sent Message " + idx);
1:0d9c588:                             LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:0d9c588:                         }
1:07cb724:                     }
1:07cb724:                     producer.close();
1:07cb724:                     session.close();
1:07cb724:                 } catch (Throwable ex) {
1:07cb724:                     ex.printStackTrace();
1:07cb724:                 }
1:07cb724:             }
1:07cb724:         };
1:07cb724:         producingThread.start();
1:0d9c588: 
1:0d9c588:         assertTrue("producer has sent 10 in a reasonable time", producerHasSentTenMessages.await(30, TimeUnit.SECONDS));
1:e25e5de: 
1:07cb724:         int count = 0;
1:07cb724: 
1:07cb724:         Message m = null;
1:07cb724:         while ((m = consumer.receive(messageReceiveTimeout)) != null) {
1:07cb724:             count++;
1:0d9c588:             if (count != 0 && count%10 == 0) {
1:0d9c588:                 LOG.info("Recieved Message (" + count + "):" + m);
1:0d9c588:             }
1:07cb724:             messagesConsumed.incrementAndGet();
1:07cb724:             try {
1:07cb724:                 Thread.sleep(100);
1:07cb724:             } catch (Exception e) {
1:07cb724:                 LOG.info("error sleeping");
1:07cb724:             }
1:07cb724:         }
1:07cb724: 
1:0d9c588:         LOG.info("Connection Timeout: Retrying.. count: " + count);
1:07cb724: 
1:07cb724:         while ((m = consumer.receive(messageReceiveTimeout)) != null) {
1:07cb724:             count++;
1:e02dfde:             if (count != 0 && count%100 == 0) {
1:0d9c588:                 LOG.info("Recieved Message (" + count + "):" + m);
1:0d9c588:             }
1:07cb724:             messagesConsumed.incrementAndGet();
1:07cb724:             try {
1:07cb724:                 Thread.sleep(100);
1:07cb724:             } catch (Exception e) {
1:07cb724:                 LOG.info("error sleeping");
1:07cb724:             }
1:07cb724:         }
1:07cb724: 
1:07cb724:         LOG.info("consumer session closing: consumed count: " + count);
1:07cb724: 
1:07cb724:         consumerSession.close();
1:07cb724: 
1:07cb724:         producingThread.join();
1:07cb724: 
1:07cb724:         final long tempUsageBySubscription = broker.getSystemUsage().getTempUsage().getUsage();
1:07cb724:         LOG.info("Orig Usage: " + origTempUsage + ", currentUsage: " + tempUsageBySubscription);
1:07cb724: 
1:07cb724:         producerConnection.close();
1:07cb724:         consumerConnection.close();
1:07cb724: 
1:07cb724:         LOG.info("Subscrition Usage: " + tempUsageBySubscription + ", endUsage: "
1:07cb724:                 + broker.getSystemUsage().getTempUsage().getUsage());
1:07cb724: 
1:0619a87:         // do a cleanup
1:d5dd937:         ((PListStoreImpl)broker.getTempDataStore()).run();
1:0619a87:         LOG.info("Subscrition Usage: " + tempUsageBySubscription + ", endUsage: "
1:0619a87:                         + broker.getSystemUsage().getTempUsage().getUsage());
1:07cb724: 
1:07cb724:         assertEquals("Incorrect number of Messages Sent: " + messagesSent.get(), messagesSent.get(), MESSAGES_COUNT);
1:07cb724:         assertEquals("Incorrect number of Messages Consumed: " + messagesConsumed.get(), messagesConsumed.get(),
1:07cb724:                 MESSAGES_COUNT);
1:07cb724:     }
1:07cb724: 
1:e02dfde:     public void testFillTempAndConsume() throws Exception {
1:e02dfde: 
1:e02dfde:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:e02dfde:         destination = new ActiveMQQueue("Foo");
1:e02dfde: 
1:e25e5de:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:e02dfde:         final ActiveMQConnection producerConnection = (ActiveMQConnection) factory.createConnection();
1:e02dfde:         // so we can easily catch the ResourceAllocationException on send
1:e02dfde:         producerConnection.setAlwaysSyncSend(true);
1:e02dfde:         producerConnection.start();
1:e02dfde: 
1:e02dfde:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e02dfde:         MessageProducer producer = session.createProducer(destination);
1:e02dfde:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:e02dfde: 
1:e02dfde:         try {
1:e02dfde:             while (true) {
1:e02dfde:                 Message message = session.createTextMessage(new String(buf) + messagesSent.toString());
1:e02dfde:                 producer.send(message);
1:e02dfde:                 messagesSent.incrementAndGet();
1:e02dfde:                 if (messagesSent.get() % 100 == 0) {
1:e02dfde:                     LOG.info("Sent Message " + messagesSent.get());
1:e02dfde:                     LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:e02dfde:                 }
1:e02dfde:             }
1:e02dfde:         } catch (ResourceAllocationException ex) {
1:e02dfde:             LOG.info("Got resource exception : " + ex + ", after sent: " + messagesSent.get());
1:e02dfde:         }
1:e02dfde: 
1:e02dfde:         // consume all sent
1:e02dfde:         Connection consumerConnection = factory.createConnection();
1:e02dfde:         consumerConnection.start();
1:e02dfde: 
1:e02dfde:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e02dfde:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:e02dfde: 
1:e02dfde: 
1:e02dfde:         while (consumer.receive(messageReceiveTimeout) != null) {
1:e02dfde:             messagesConsumed.incrementAndGet();
1:e02dfde:             if (messagesConsumed.get() % 1000 == 0) {
1:e02dfde:                 LOG.info("received Message " + messagesConsumed.get());
1:e02dfde:                 LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:e02dfde:             }
1:e02dfde:         }
1:e02dfde: 
1:e02dfde:         assertEquals("Incorrect number of Messages Consumed: " + messagesConsumed.get(), messagesConsumed.get(),
1:e02dfde:                 messagesSent.get());
1:e02dfde:     }
1:e02dfde: 
1:e02dfde:     @Override
1:07cb724:     public void setUp() throws Exception {
1:07cb724: 
1:07cb724:         broker = new BrokerService();
1:07cb724:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:07cb724:         broker.setPersistent(true);
1:07cb724:         broker.setUseJmx(true);
1:07cb724:         broker.setAdvisorySupport(false);
1:07cb724:         broker.setDeleteAllMessagesOnStartup(true);
1:07cb724: 
1:e02dfde:         setDefaultPersistenceAdapter(broker);
1:e02dfde:         SystemUsage sysUsage = broker.getSystemUsage();
1:07cb724:         MemoryUsage memUsage = new MemoryUsage();
1:07cb724:         memUsage.setLimit((1024 * 1024));
1:07cb724:         StoreUsage storeUsage = new StoreUsage();
1:07cb724:         storeUsage.setLimit((1024 * 1024) * 38);
1:07cb724:         TempUsage tmpUsage = new TempUsage();
1:07cb724:         tmpUsage.setLimit((1024 * 1024) * 38);
1:07cb724: 
1:07cb724:         PolicyEntry defaultPolicy = new PolicyEntry();
1:07cb724:         // defaultPolicy.setTopic("FooTwo");
1:07cb724:         defaultPolicy.setProducerFlowControl(false);
1:07cb724:         defaultPolicy.setMemoryLimit(10 * 1024);
1:07cb724: 
1:07cb724:         PolicyMap policyMap = new PolicyMap();
1:07cb724:         policyMap.setDefaultEntry(defaultPolicy);
1:07cb724: 
1:07cb724:         sysUsage.setMemoryUsage(memUsage);
1:07cb724:         sysUsage.setStoreUsage(storeUsage);
1:07cb724:         sysUsage.setTempUsage(tmpUsage);
1:07cb724: 
1:07cb724:         broker.setDestinationPolicy(policyMap);
1:07cb724:         broker.setSystemUsage(sysUsage);
1:07cb724: 
1:e25e5de:         broker.addConnector("tcp://localhost:0").setName("Default");
1:07cb724:         broker.start();
1:e25e5de: 
1:e25e5de:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:07cb724:     }
1:07cb724: 
1:e02dfde:     @Override
1:07cb724:     public void tearDown() throws Exception {
1:07cb724:         if (broker != null) {
1:07cb724:             broker.stop();
1:07cb724:         }
1:07cb724:     }
1:07cb724: 
1:07cb724: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:e25e5de
/////////////////////////////////////////////////////////////////////////
1:     private String connectionUri;
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:0").setName("Default");
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
/////////////////////////////////////////////////////////////////////////
1:         ((PListStoreImpl)broker.getTempDataStore()).run();
author:Gary Tully
-------------------------------------------------------------------------------
commit:e02dfde
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ResourceAllocationException;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
1: public class TempStorageBlockedBrokerTest extends TestSupport {
/////////////////////////////////////////////////////////////////////////
1:     protected long messageReceiveTimeout = 10000L;
1:     public void testRunProducerWithHungConsumer() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             if (count != 0 && count%100 == 0) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testFillTempAndConsume() throws Exception {
1: 
1:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:         destination = new ActiveMQQueue("Foo");
1: 
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61618");
1:         final ActiveMQConnection producerConnection = (ActiveMQConnection) factory.createConnection();
1:         // so we can easily catch the ResourceAllocationException on send
1:         producerConnection.setAlwaysSyncSend(true);
1:         producerConnection.start();
1: 
1:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         try {
1:             while (true) {
1:                 Message message = session.createTextMessage(new String(buf) + messagesSent.toString());
1:                 producer.send(message);
1:                 messagesSent.incrementAndGet();
1:                 if (messagesSent.get() % 100 == 0) {
1:                     LOG.info("Sent Message " + messagesSent.get());
1:                     LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:                 }
1:             }
1:         } catch (ResourceAllocationException ex) {
1:             LOG.info("Got resource exception : " + ex + ", after sent: " + messagesSent.get());
1:         }
1: 
1:         // consume all sent
1:         Connection consumerConnection = factory.createConnection();
1:         consumerConnection.start();
1: 
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1: 
1: 
1:         while (consumer.receive(messageReceiveTimeout) != null) {
1:             messagesConsumed.incrementAndGet();
1:             if (messagesConsumed.get() % 1000 == 0) {
1:                 LOG.info("received Message " + messagesConsumed.get());
1:                 LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:             }
1:         }
1: 
1:         assertEquals("Incorrect number of Messages Consumed: " + messagesConsumed.get(), messagesConsumed.get(),
1:                 messagesSent.get());
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         setDefaultPersistenceAdapter(broker);
1:         SystemUsage sysUsage = broker.getSystemUsage();
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:0619a87
/////////////////////////////////////////////////////////////////////////
1:         // do a cleanup
0:         broker.getTempDataStore().run();
1:         LOG.info("Subscrition Usage: " + tempUsageBySubscription + ", endUsage: "
1:                         + broker.getSystemUsage().getTempUsage().getUsage());
/////////////////////////////////////////////////////////////////////////
0:         tempStore.setJournalMaxFileLength(50*1024);
commit:0d9c588
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch producerHasSentTenMessages = new CountDownLatch(10);
/////////////////////////////////////////////////////////////////////////
1:                         producerHasSentTenMessages.countDown();
1:                         if (idx != 0 && idx%100 == 0) {
1:                             LOG.info("Sent Message " + idx);
1:                             LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:                         }
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("producer has sent 10 in a reasonable time", producerHasSentTenMessages.await(30, TimeUnit.SECONDS));
1:         
1:             if (count != 0 && count%10 == 0) {
1:                 LOG.info("Recieved Message (" + count + "):" + m);
1:             }
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Connection Timeout: Retrying.. count: " + count);
0:             if (count != 0 && count%10 == 0) {
1:                 LOG.info("Recieved Message (" + count + "):" + m);
1:             }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TempStorageBlockedBrokerTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.plist.PListStore;
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
0:         PListStore tempStore = new PListStore();
0:         tempStore.setDirectory(tmpDir);
0:         tempStore.start();
commit:07cb724
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: import java.io.File;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.kaha.Store;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
1: import org.apache.activemq.usage.MemoryUsage;
1: import org.apache.activemq.usage.StoreUsage;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.apache.activemq.usage.TempUsage;
0: import org.apache.activemq.util.IOHelper;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
1: 
0: public class TempStorageBlockedBrokerTest {
1: 
0:     public boolean consumeAll = false;
1:     public int deliveryMode = DeliveryMode.PERSISTENT;
1: 
0:     private static final Log LOG = LogFactory.getLog(TempStorageBlockedBrokerTest.class);
1:     private static final int MESSAGES_COUNT = 1000;
1:     private static byte[] buf = new byte[4 * 1024];
1:     private BrokerService broker;
1:     AtomicInteger messagesSent = new AtomicInteger(0);
1:     AtomicInteger messagesConsumed = new AtomicInteger(0);
1: 
0:     protected long messageReceiveTimeout = 10L;
1: 
1:     Destination destination = new ActiveMQTopic("FooTwo");
1: 
0:     @Test
0:     public void runProducerWithHungConsumer() throws Exception {
1: 
1:         final long origTempUsage = broker.getSystemUsage().getTempUsage().getUsage();
1: 
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61618");
1:         // ensure messages are spooled to disk for this consumer
1:         ActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();
1:         prefetch.setTopicPrefetch(10);
1:         factory.setPrefetchPolicy(prefetch);
1:         Connection consumerConnection = factory.createConnection();
1:         consumerConnection.start();
1: 
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1: 
1:         final Connection producerConnection = factory.createConnection();
1:         producerConnection.start();
1: 
1:         Thread producingThread = new Thread("Producing thread") {
1:             public void run() {
1:                 try {
1:                     Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageProducer producer = session.createProducer(destination);
1:                     producer.setDeliveryMode(deliveryMode);
1:                     for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:                         Message message = session.createTextMessage(new String(buf) + idx);
1: 
1:                         producer.send(message);
1:                         messagesSent.incrementAndGet();
1:                         Thread.sleep(10);
0:                         LOG.info("Sent Message " + idx);
0:                         LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1: 
1:                     }
1:                     producer.close();
1:                     session.close();
1:                 } catch (Throwable ex) {
1:                     ex.printStackTrace();
1:                 }
1:             }
1:         };
1:         producingThread.start();
1: 
1:         int count = 0;
1: 
1:         Message m = null;
1:         while ((m = consumer.receive(messageReceiveTimeout)) != null) {
1:             count++;
0:             LOG.info("Recieved Message (" + count + "):" + m);
1:             messagesConsumed.incrementAndGet();
1:             try {
1:                 Thread.sleep(100);
1:             } catch (Exception e) {
1:                 LOG.info("error sleeping");
1:             }
1:         }
1: 
0:         LOG.info("Connection Timeout: Retrying");
1: 
0:         // session.close();
0:         // consumerConnection.close();
0:         //
0:         // consumerConnection2.start();
0:         // session2 = consumerConnection2.createSession(false,
0:         // Session.AUTO_ACKNOWLEDGE);
0:         // consumer = session2.createConsumer(destination);
1: 
1:         while ((m = consumer.receive(messageReceiveTimeout)) != null) {
1:             count++;
0:             LOG.info("Recieved Message (" + count + "):" + m);
1:             messagesConsumed.incrementAndGet();
1:             try {
1:                 Thread.sleep(100);
1:             } catch (Exception e) {
1:                 LOG.info("error sleeping");
1:             }
1:         }
1: 
1:         LOG.info("consumer session closing: consumed count: " + count);
1: 
1:         consumerSession.close();
1: 
1:         producingThread.join();
1: 
1:         final long tempUsageBySubscription = broker.getSystemUsage().getTempUsage().getUsage();
1:         LOG.info("Orig Usage: " + origTempUsage + ", currentUsage: " + tempUsageBySubscription);
0:         // assertTrue("some temp store has been used", tempUsageBySubscription
0:         // != origTempUsage);
1: 
1:         producerConnection.close();
1:         consumerConnection.close();
1: 
1:         LOG.info("Subscrition Usage: " + tempUsageBySubscription + ", endUsage: "
1:                 + broker.getSystemUsage().getTempUsage().getUsage());
1: 
1: 
1:         assertEquals("Incorrect number of Messages Sent: " + messagesSent.get(), messagesSent.get(), MESSAGES_COUNT);
1:         assertEquals("Incorrect number of Messages Consumed: " + messagesConsumed.get(), messagesConsumed.get(),
1:                 MESSAGES_COUNT);
1:     }
1: 
0:     @Before
1:     public void setUp() throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
0:         AMQPersistenceAdapter persistence = new AMQPersistenceAdapter();
0:         persistence.setSyncOnWrite(false);
0:         File directory = new File("target" + File.separator + "activemq-data");
0:         persistence.setDirectory(directory);
0:         File tmpDir = new File(directory, "tmp");
0:         IOHelper.deleteChildren(tmpDir);
0:         Store tempStore = new org.apache.activemq.kaha.impl.KahaStore(tmpDir, "rw");
1: 
0:         SystemUsage sysUsage = new SystemUsage("mySysUsage", persistence, tempStore);
1:         MemoryUsage memUsage = new MemoryUsage();
1:         memUsage.setLimit((1024 * 1024));
1:         StoreUsage storeUsage = new StoreUsage();
1:         storeUsage.setLimit((1024 * 1024) * 38);
1:         TempUsage tmpUsage = new TempUsage();
1:         tmpUsage.setLimit((1024 * 1024) * 38);
1: 
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         // defaultPolicy.setTopic("FooTwo");
1:         defaultPolicy.setProducerFlowControl(false);
1:         defaultPolicy.setMemoryLimit(10 * 1024);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(defaultPolicy);
1: 
1:         sysUsage.setMemoryUsage(memUsage);
1:         sysUsage.setStoreUsage(storeUsage);
1:         sysUsage.setTempUsage(tmpUsage);
1: 
1:         broker.setDestinationPolicy(policyMap);
1:         broker.setSystemUsage(sysUsage);
0:         broker.setTempDataStore(tempStore);
0:         broker.setPersistenceAdapter(persistence);
1: 
0:         broker.addConnector("tcp://localhost:61618").setName("Default");
1:         broker.start();
1:     }
1: 
0:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1: }
============================================================================