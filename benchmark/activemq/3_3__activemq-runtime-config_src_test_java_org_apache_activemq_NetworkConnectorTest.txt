1:3630a41: /**
1:3630a41:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3630a41:  * contributor license agreements.  See the NOTICE file distributed with
1:3630a41:  * this work for additional information regarding copyright ownership.
1:3630a41:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3630a41:  * (the "License"); you may not use this file except in compliance with
1:3630a41:  * the License.  You may obtain a copy of the License at
1:3630a41:  *
1:3630a41:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3630a41:  *
1:3630a41:  * Unless required by applicable law or agreed to in writing, software
1:3630a41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3630a41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3630a41:  * See the License for the specific language governing permissions and
1:3630a41:  * limitations under the License.
1:3630a41:  */
1:3630a41: package org.apache.activemq;
10:3630a41: 
1:3630a41: import static org.junit.Assert.assertEquals;
1:bab0887: import static org.junit.Assert.assertFalse;
1:bab0887: import static org.junit.Assert.assertNotNull;
1:92860ae: import static org.junit.Assert.assertSame;
1:3630a41: import static org.junit.Assert.assertTrue;
1:bab0887: import static org.junit.Assert.fail;
1:bab0887: 
1:bab0887: import javax.management.InstanceNotFoundException;
1:3630a41: 
1:43c3cae: import org.apache.activemq.network.NetworkConnector;
1:43c3cae: import org.apache.activemq.util.Wait;
1:43c3cae: import org.junit.Test;
1:43c3cae: 
1:8b8e726: public class NetworkConnectorTest extends RuntimeConfigTestSupport {
1:3630a41:     String configurationSeed = "networkConnectorTest";
1:3630a41: 
1:3630a41:     @Test
1:92860ae:     public void testNew() throws Exception {
1:8b8e726: 
1:3630a41:         final String brokerConfig = configurationSeed + "-no-nc-broker";
1:92860ae:         applyNewConfig(brokerConfig, EMPTY_UPDATABLE_CONFIG);
1:3630a41:         startBroker(brokerConfig);
1:3630a41:         assertTrue("broker alive", brokerService.isStarted());
1:3630a41:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1:3630a41: 
1:3630a41:         applyNewConfig(brokerConfig, configurationSeed + "-one-nc", SLEEP);
1:3630a41: 
1:8b8e726:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:8b8e726:             @Override
1:8b8e726:             public boolean isSatisified() throws Exception {
1:8b8e726:                 return 1 == brokerService.getNetworkConnectors().size();
1:8b8e726:             }
1:8b8e726:         }));
1:25a1dd0: 
1:3630a41:         // apply again - ensure no change
1:3630a41:         NetworkConnector networkConnector = brokerService.getNetworkConnectors().get(0);
1:3630a41:         applyNewConfig(brokerConfig, configurationSeed + "-one-nc");
1:3630a41:         assertEquals("no new network connectors", 1, brokerService.getNetworkConnectors().size());
1:92860ae:         assertSame("same instance", networkConnector, brokerService.getNetworkConnectors().get(0));
1:634a818: 
1:634a818:         // verify nested elements
1:634a818:         assertEquals("has exclusions", 2, networkConnector.getExcludedDestinations().size());
1:634a818: 
1:634a818:         assertEquals("one statically included", 1, networkConnector.getStaticallyIncludedDestinations().size());
1:634a818:         assertEquals("one dynamically included", 1, networkConnector.getDynamicallyIncludedDestinations().size());
1:634a818:         assertEquals("one durable", 1, networkConnector.getDurableDestinations().size());
1:bab0887:         assertFalse(networkConnector.getBrokerName().isEmpty());
1:634a818: 
1:bab0887:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:bab0887:                 brokerService.createNetworkConnectorObjectName(networkConnector)));
1:bab0887: 
6:3630a41:     }
1:25a1dd0: 
1:25a1dd0:     @Test
1:92860ae:     public void testMod() throws Exception {
1:25a1dd0: 
1:3630a41:         final String brokerConfig = configurationSeed + "-one-nc-broker";
1:3630a41:         applyNewConfig(brokerConfig, configurationSeed + "-one-nc");
1:3630a41:         startBroker(brokerConfig);
1:3630a41:         assertTrue("broker alive", brokerService.isStarted());
1:25a1dd0:         assertEquals("one network connectors", 1, brokerService.getNetworkConnectors().size());
1:3630a41: 
1:3630a41:         // track the original
1:3630a41:         NetworkConnector networkConnector = brokerService.getNetworkConnectors().get(0);
1:3630a41:         assertEquals("network ttl is default", 1, networkConnector.getNetworkTTL());
1:3630a41: 
1:3630a41:         applyNewConfig(brokerConfig, configurationSeed + "-mod-one-nc", SLEEP);
1:3630a41: 
1:3630a41:         assertEquals("still one network connectors", 1, brokerService.getNetworkConnectors().size());
1:3630a41: 
1:3630a41:         NetworkConnector modNetworkConnector = brokerService.getNetworkConnectors().get(0);
1:3630a41:         assertEquals("got ttl update", 2, modNetworkConnector.getNetworkTTL());
1:3630a41: 
1:b488df6:         assertNotNull("got ssl", modNetworkConnector.getSslContext());
1:b488df6: 
1:3630a41:         // apply again - ensure no change
1:3630a41:         applyNewConfig(brokerConfig, configurationSeed + "-mod-one-nc", SLEEP);
1:3630a41:         assertEquals("no new network connectors", 1, brokerService.getNetworkConnectors().size());
1:92860ae:         assertSame("same instance", modNetworkConnector, brokerService.getNetworkConnectors().get(0));
1:bab0887:         assertFalse(modNetworkConnector.getBrokerName().isEmpty());
1:bab0887: 
1:bab0887:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:bab0887:                 brokerService.createNetworkConnectorObjectName(modNetworkConnector)));
1:3630a41:     }
1:3630a41: 
1:3630a41:     @Test
1:92860ae:     public void testRemove() throws Exception {
1:3630a41: 
1:25a1dd0:         final String brokerConfig = configurationSeed + "-two-nc-broker";
1:25a1dd0:         applyNewConfig(brokerConfig, configurationSeed + "-two-nc");
1:25a1dd0:         startBroker(brokerConfig);
1:25a1dd0:         assertTrue("broker alive", brokerService.isStarted());
1:25a1dd0:         assertEquals("correct network connectors", 2, brokerService.getNetworkConnectors().size());
1:25a1dd0: 
1:bab0887:         NetworkConnector two = brokerService.getNetworkConnectors().get(1);
1:bab0887: 
1:25a1dd0:         applyNewConfig(brokerConfig, configurationSeed + "-one-nc", SLEEP);
1:25a1dd0: 
1:92860ae:         assertTrue("expected mod on time", Wait.waitFor(new Wait.Condition() {
1:92860ae:             @Override
1:92860ae:             public boolean isSatisified() throws Exception {
1:92860ae:                 return 1 == brokerService.getNetworkConnectors().size();
1:92860ae:             }
1:92860ae:         }));
1:25a1dd0: 
1:25a1dd0:         NetworkConnector remainingNetworkConnector = brokerService.getNetworkConnectors().get(0);
1:25a1dd0:         assertEquals("name match", "one", remainingNetworkConnector.getName());
1:bab0887: 
1:bab0887:         try {
1:bab0887:             brokerService.getManagementContext().getObjectInstance(
1:bab0887:                 brokerService.createNetworkConnectorObjectName(two));
1:bab0887:             fail("mbean for nc2 should not exist");
1:bab0887:         } catch (InstanceNotFoundException e) {
1:bab0887:             //should throw exception
1:bab0887:         }
1:bab0887: 
1:bab0887:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:bab0887:                 brokerService.createNetworkConnectorObjectName(remainingNetworkConnector)));
1:25a1dd0:     }
1:3630a41: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b488df6
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("got ssl", modNetworkConnector.getSslContext());
1: 
commit:634a818
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
0: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // verify nested elements
1:         assertEquals("has exclusions", 2, networkConnector.getExcludedDestinations().size());
1: 
1:         assertEquals("one statically included", 1, networkConnector.getStaticallyIncludedDestinations().size());
1:         assertEquals("one dynamically included", 1, networkConnector.getDynamicallyIncludedDestinations().size());
1:         assertEquals("one durable", 1, networkConnector.getDurableDestinations().size());
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:bab0887
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
1: import javax.management.InstanceNotFoundException;
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(networkConnector.getBrokerName().isEmpty());
1: 
1:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:                 brokerService.createNetworkConnectorObjectName(networkConnector)));
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(modNetworkConnector.getBrokerName().isEmpty());
1: 
1:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:                 brokerService.createNetworkConnectorObjectName(modNetworkConnector)));
/////////////////////////////////////////////////////////////////////////
1:         NetworkConnector two = brokerService.getNetworkConnectors().get(1);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         try {
1:             brokerService.getManagementContext().getObjectInstance(
1:                 brokerService.createNetworkConnectorObjectName(two));
1:             fail("mbean for nc2 should not exist");
1:         } catch (InstanceNotFoundException e) {
1:             //should throw exception
1:         }
1: 
1:         assertNotNull(brokerService.getManagementContext().getObjectInstance(
1:                 brokerService.createNetworkConnectorObjectName(remainingNetworkConnector)));
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: 
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:8b8e726
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Before;
1: public class NetworkConnectorTest extends RuntimeConfigTestSupport {
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == brokerService.getNetworkConnectors().size();
1:             }
1:         }));
/////////////////////////////////////////////////////////////////////////
commit:92860ae
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertSame;
0:     public static final String EMPTY_UPDATABLE_CONFIG = "emptyUpdatableConfig1000" ;
/////////////////////////////////////////////////////////////////////////
1:     public void testNew() throws Exception {
1:         applyNewConfig(brokerConfig, EMPTY_UPDATABLE_CONFIG);
/////////////////////////////////////////////////////////////////////////
1:         assertSame("same instance", networkConnector, brokerService.getNetworkConnectors().get(0));
1:     public void testMod() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         assertSame("same instance", modNetworkConnector, brokerService.getNetworkConnectors().get(0));
1:     public void testRemove() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("expected mod on time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == brokerService.getNetworkConnectors().size();
1:             }
1:         }));
commit:25a1dd0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
0:     public void testRemoveConnector() throws Exception {
1: 
1:         final String brokerConfig = configurationSeed + "-two-nc-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-two-nc");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         assertEquals("correct network connectors", 2, brokerService.getNetworkConnectors().size());
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-nc", SLEEP);
1: 
1:         assertEquals("one network connectors", 1, brokerService.getNetworkConnectors().size());
1: 
1:         NetworkConnector remainingNetworkConnector = brokerService.getNetworkConnectors().get(0);
1:         assertEquals("name match", "one", remainingNetworkConnector.getName());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         FileInputStream modifications = new FileInputStream(new File(resource.getFile(), newConfigName + ".xml"));
commit:3630a41
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.util.concurrent.TimeUnit;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.network.NetworkConnector;
0: import org.apache.activemq.spring.Utils;
0: import org.junit.After;
0: import org.junit.Ignore;
0: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: import org.springframework.core.io.Resource;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
0: public class NetworkConnectorTest {
1: 
0:     public static final Logger LOG = LoggerFactory.getLogger(NetworkConnectorTest.class);
0:     public static final int SLEEP = 4; // seconds
1:     String configurationSeed = "networkConnectorTest";
0:     BrokerService brokerService;
1: 
0:     public void startBroker(String configFileName) throws Exception {
0:         brokerService = new BrokerService();
0:         brokerService = BrokerFactory.createBroker("xbean:org/apache/activemq/" + configFileName + ".xml");
0:         brokerService.start();
0:         brokerService.waitUntilStarted();
1:     }
1: 
0:     @After
0:     public void stopBroker() throws Exception {
0:         brokerService.stop();
1:     }
1: 
1:     @Test
0:     public void testNewConnector() throws Exception {
1:         final String brokerConfig = configurationSeed + "-no-nc-broker";
0:         applyNewConfig(brokerConfig, configurationSeed);
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         assertEquals("no network connectors", 0, brokerService.getNetworkConnectors().size());
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-nc", SLEEP);
1: 
0:         assertEquals("new network connectors", 1, brokerService.getNetworkConnectors().size());
1: 
1:         // apply again - ensure no change
1:         NetworkConnector networkConnector = brokerService.getNetworkConnectors().get(0);
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-nc");
1:         assertEquals("no new network connectors", 1, brokerService.getNetworkConnectors().size());
0:         assertEquals("same instance", networkConnector, brokerService.getNetworkConnectors().get(0));
1:     }
1: 
1: 
0:     @Ignore("not implemented yet!")
1:     @Test
0:     public void testModConnector() throws Exception {
1:         final String brokerConfig = configurationSeed + "-one-nc-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-nc");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
0:         assertEquals("one network connectors", 1, brokerService.getNetworkConnectors().size());
1: 
1:         // track the original
1:         NetworkConnector networkConnector = brokerService.getNetworkConnectors().get(0);
1:         assertEquals("network ttl is default", 1, networkConnector.getNetworkTTL());
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-mod-one-nc", SLEEP);
1: 
1:         assertEquals("still one network connectors", 1, brokerService.getNetworkConnectors().size());
1: 
1:         NetworkConnector modNetworkConnector = brokerService.getNetworkConnectors().get(0);
1:         assertEquals("got ttl update", 2, modNetworkConnector.getNetworkTTL());
1: 
1:         // apply again - ensure no change
1:         applyNewConfig(brokerConfig, configurationSeed + "-mod-one-nc", SLEEP);
1:         assertEquals("no new network connectors", 1, brokerService.getNetworkConnectors().size());
0:         assertEquals("same instance", modNetworkConnector, brokerService.getNetworkConnectors().get(0));
1:     }
1: 
0:     private void applyNewConfig(String configName, String newConfigName) throws Exception {
0:         applyNewConfig(configName, newConfigName, 0l);
1:     }
1: 
0:     private void applyNewConfig(String configName, String newConfigName, long sleep) throws Exception {
0:         Resource resource = Utils.resourceFromString("org/apache/activemq");
0:         FileOutputStream current = new FileOutputStream(new File(resource.getFile(), configName + ".xml"));
0:         FileInputStream modifications = new FileInputStream(new File(resource.getFile(), (newConfigName != null ? newConfigName : configName) + ".xml"));
0:         modifications.getChannel().transferTo(0, Long.MAX_VALUE, current.getChannel());
0:         current.flush();
0:         LOG.info("Updated: " + current.getChannel());
1: 
0:         if (sleep > 0) {
0:             // wait for mods to kick in
0:             TimeUnit.SECONDS.sleep(sleep);
1:         }
1:     }
1: }
============================================================================