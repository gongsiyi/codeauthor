1:0b6cd58: /**
1:0b6cd58:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0b6cd58:  * contributor license agreements.  See the NOTICE file distributed with
1:0b6cd58:  * this work for additional information regarding copyright ownership.
1:0b6cd58:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0b6cd58:  * (the "License"); you may not use this file except in compliance with
1:0b6cd58:  * the License.  You may obtain a copy of the License at
1:0b6cd58:  *
1:0b6cd58:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0b6cd58:  *
1:0b6cd58:  * Unless required by applicable law or agreed to in writing, software
1:0b6cd58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0b6cd58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0b6cd58:  * See the License for the specific language governing permissions and
1:0b6cd58:  * limitations under the License.
3:0b6cd58:  */
1:0b6cd58: package org.apache.activemq.camel.component;
1:d2e9236: 
1:0b6cd58: import java.util.HashMap;
1:0b6cd58: import java.util.Map;
1:0b6cd58: import javax.jms.Destination;
1:d2e9236: 
1:0b6cd58: import org.apache.camel.CamelContext;
1:0b6cd58: import org.apache.camel.Exchange;
1:0b6cd58: import org.apache.camel.Headers;
1:0b6cd58: import org.apache.camel.Message;
1:d2e9236: import org.apache.camel.Processor;
1:0b6cd58: import org.apache.camel.builder.RouteBuilder;
1:5e6f8a1: import org.apache.camel.test.junit4.CamelTestSupport;
1:5e6f8a1: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d2e9236: 
1:fa250bf: import static org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent;
1:fa250bf: import static org.hamcrest.Matchers.hasEntry;
1:fa250bf: import static org.hamcrest.Matchers.hasKey;
1:fa250bf: 
1:0b6cd58: /**
1:0bbc0ac:  * 
1:0b6cd58:  */
1:5e6f8a1: public class InvokeRequestReplyUsingJmsReplyToHeaderTest extends CamelTestSupport {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(ActiveMQReplyToHeaderUsingConverterTest.class);
1:0b6cd58:     protected String replyQueueName = "queue://test.reply";
1:0b6cd58:     protected Object correlationID = "ABC-123";
1:0b6cd58:     protected Object groupID = "GROUP-XYZ";
1:0b6cd58:     private MyServer myBean = new MyServer();
1:d2e9236: 
1:5e6f8a1:     @Test
1:0b6cd58:     public void testPerformRequestReplyOverJms() throws Exception {
1:0b6cd58:         Map<String, Object> headers = new HashMap<String, Object>();
1:0b6cd58:         headers.put("cheese", 123);
1:0b6cd58:         headers.put("JMSReplyTo", replyQueueName);
1:0b6cd58:         headers.put("JMSCorrelationID", correlationID);
1:0b6cd58:         headers.put("JMSXGroupID", groupID);
1:fa250bf: 
1:fa250bf:         Exchange reply = template.request("activemq:test.server?replyTo=queue:test.reply", new Processor() {
1:d2e9236:             public void process(Exchange exchange) {
1:d2e9236:                 exchange.getIn().setBody("James");
1:d2e9236:                 Map<String, Object> headers = new HashMap<String, Object>();
1:d2e9236:                 headers.put("cheese", 123);
1:d2e9236:                 headers.put("JMSReplyTo", replyQueueName);
1:d2e9236:                 headers.put("JMSCorrelationID", correlationID);
1:d2e9236:                 headers.put("JMSXGroupID", groupID);
1:d2e9236:                 exchange.getIn().setHeaders(headers);
1:d2e9236:             }
1:d2e9236:         });
16:0b6cd58: 
1:fa250bf:         Message in = reply.getIn();
1:0b6cd58:         Object replyTo = in.getHeader("JMSReplyTo");
1:0b6cd58:         LOG.info("Reply to is: " + replyTo);
1:0b6cd58:         LOG.info("Received headers: " + in.getHeaders());
1:0b6cd58:         LOG.info("Received body: " + in.getBody());
1:0b6cd58: 
1:0b6cd58:         assertMessageHeader(in, "JMSCorrelationID", correlationID);
1:0b6cd58: 
1:0b6cd58:         Map<String,Object> receivedHeaders = myBean.getHeaders();
1:0b6cd58:         assertThat(receivedHeaders, hasKey("JMSReplyTo"));
1:0b6cd58:         assertThat(receivedHeaders, hasEntry("JMSXGroupID", groupID));
1:0b6cd58:         assertThat(receivedHeaders, hasEntry("JMSCorrelationID", correlationID));
1:0b6cd58: 
1:0b6cd58:         replyTo = receivedHeaders.get("JMSReplyTo");
1:0b6cd58:         LOG.info("Reply to is: " + replyTo);
2:0b6cd58:         Destination destination = assertIsInstanceOf(Destination.class, replyTo);
2:0b6cd58:         assertEquals("ReplyTo", replyQueueName, destination.toString());
2:0b6cd58:     }
1:0b6cd58: 
1:0b6cd58:     protected CamelContext createCamelContext() throws Exception {
1:0b6cd58:         CamelContext camelContext = super.createCamelContext();
1:0b6cd58: 
1:0b6cd58:         // START SNIPPET: example
1:0b6cd58:         camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false"));
1:0b6cd58:         // END SNIPPET: example
1:0b6cd58: 
1:0b6cd58:         return camelContext;
1:0b6cd58:     }
1:0b6cd58: 
1:0b6cd58:     protected RouteBuilder createRouteBuilder() throws Exception {
1:0b6cd58:         return new RouteBuilder() {
1:0b6cd58:             public void configure() throws Exception {
1:0b6cd58:                 from("activemq:test.server").bean(myBean);
1:0b6cd58:             }
1:0b6cd58:         };
1:0b6cd58:     }
1:0b6cd58: 
1:0b6cd58:     protected static class MyServer {
1:0b6cd58:         private Map<String,Object> headers;
1:0b6cd58: 
1:0b6cd58:         public String process(@Headers Map<String,Object> headers, String body) {
1:0b6cd58:             this.headers = headers;
1:0b6cd58:             LOG.info("process() invoked with headers: " + headers);
1:0b6cd58:             return "Hello " + body;
1:0b6cd58:         }
1:0b6cd58: 
1:0b6cd58:         public Map<String,Object> getHeaders() {
1:0b6cd58:             return headers;
1:8bf987b:         }
1:0b6cd58:     }
1:0b6cd58: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:fa250bf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent;
1: import static org.hamcrest.Matchers.hasEntry;
1: import static org.hamcrest.Matchers.hasKey;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         Exchange reply = template.request("activemq:test.server?replyTo=queue:test.reply", new Processor() {
/////////////////////////////////////////////////////////////////////////
1:         Message in = reply.getIn();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Willem Ning Jiang
-------------------------------------------------------------------------------
commit:5e6f8a1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.test.junit4.CamelTestSupport;
1: import org.junit.Test;
1: public class InvokeRequestReplyUsingJmsReplyToHeaderTest extends CamelTestSupport {
1:     @Test
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(ActiveMQReplyToHeaderUsingConverterTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
commit:d2e9236
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent;
0: import static org.hamcrest.MatcherAssert.assertThat;
0: import static org.hamcrest.Matchers.hasEntry;
0: import static org.hamcrest.Matchers.hasKey;
1: 
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.camel.Processor;
0: import org.apache.camel.component.jms.JmsConstants;
/////////////////////////////////////////////////////////////////////////
1:         
1:         
1:         
0:         // Camel 2.0 ignores JMSReplyTo, so we're using replyTo MEP property
0:         template.request("activemq:test.server?replyTo=queue:test.reply", new Processor() {
1:             public void process(Exchange exchange) {
1:                 exchange.getIn().setBody("James");
1:                 Map<String, Object> headers = new HashMap<String, Object>();
1:                 headers.put("cheese", 123);
1:                 headers.put("JMSReplyTo", replyQueueName);
1:                 headers.put("JMSCorrelationID", correlationID);
1:                 headers.put("JMSXGroupID", groupID);
1:                 exchange.getIn().setHeaders(headers);
1:             }
1:         });
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
author:James Strachan
-------------------------------------------------------------------------------
commit:0b6cd58
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
1: import java.util.HashMap;
0: import java.util.List;
1: import java.util.Map;
1: 
1: import javax.jms.Destination;
1: 
0: import static org.apache.activemq.camel.component.ActiveMQComponent.activeMQComponent;
1: import org.apache.camel.CamelContext;
0: import org.apache.camel.ContextTestSupport;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.Headers;
1: import org.apache.camel.Message;
1: import org.apache.camel.builder.RouteBuilder;
0: import org.apache.camel.component.mock.AssertionClause;
0: import org.apache.camel.component.mock.MockEndpoint;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import static org.hamcrest.MatcherAssert.assertThat;
0: import static org.hamcrest.Matchers.*;
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class InvokeRequestReplyUsingJmsReplyToHeaderTest extends ContextTestSupport {
0:     private static final transient Log LOG = LogFactory.getLog(ActiveMQReplyToHeaderUsingConverterTest.class);
1:     protected String replyQueueName = "queue://test.reply";
1:     protected Object correlationID = "ABC-123";
1:     protected Object groupID = "GROUP-XYZ";
1:     private MyServer myBean = new MyServer();
1: 
1:     public void testPerformRequestReplyOverJms() throws Exception {
0:         MockEndpoint resultEndpoint = getMockEndpoint("mock:result");
1: 
0:         resultEndpoint.expectedBodiesReceived("Hello James");
0:         AssertionClause firstMessage = resultEndpoint.message(0);
0:         firstMessage.header("JMSCorrelationID").isEqualTo(correlationID);
0: /*
0:         TODO - allow JMS headers to be copied?
1: 
0:         firstMessage.header("cheese").isEqualTo(123);
0:         firstMessage.header("JMSXGroupID").isEqualTo(groupID);
0:         firstMessage.header("JMSReplyTo").isEqualTo(ActiveMQConverter.toDestination(replyQueueName));
1: */
1: 
1:         Map<String, Object> headers = new HashMap<String, Object>();
1:         headers.put("cheese", 123);
1:         headers.put("JMSReplyTo", replyQueueName);
1:         headers.put("JMSCorrelationID", correlationID);
1:         headers.put("JMSXGroupID", groupID);
0:         template.sendBodyAndHeaders("activemq:test.server", "James", headers);
1: 
0:         resultEndpoint.assertIsSatisfied();
1: 
0:         List<Exchange> list = resultEndpoint.getReceivedExchanges();
0:         Exchange exchange = list.get(0);
0:         Message in = exchange.getIn();
1:         Object replyTo = in.getHeader("JMSReplyTo");
1:         LOG.info("Reply to is: " + replyTo);
1: 
1:         LOG.info("Received headers: " + in.getHeaders());
1:         LOG.info("Received body: " + in.getBody());
1: 
1:         assertMessageHeader(in, "JMSCorrelationID", correlationID);
1: 
0:         /*
0:         TODO
1:         Destination destination = assertIsInstanceOf(Destination.class, replyTo);
1:         assertEquals("ReplyTo", replyQueueName, destination.toString());
0:         assertMessageHeader(in, "cheese", 123);
0:         assertMessageHeader(in, "JMSXGroupID", groupID);
1:         */
1: 
1:         Map<String,Object> receivedHeaders = myBean.getHeaders();
1: 
1:         assertThat(receivedHeaders, hasKey("JMSReplyTo"));
1:         assertThat(receivedHeaders, hasEntry("JMSXGroupID", groupID));
1:         assertThat(receivedHeaders, hasEntry("JMSCorrelationID", correlationID));
1: 
1:         replyTo = receivedHeaders.get("JMSReplyTo");
1:         LOG.info("Reply to is: " + replyTo);
1:         Destination destination = assertIsInstanceOf(Destination.class, replyTo);
1:         assertEquals("ReplyTo", replyQueueName, destination.toString());
1: 
1:         
1:     }
1: 
1:     protected CamelContext createCamelContext() throws Exception {
1:         CamelContext camelContext = super.createCamelContext();
1: 
1:         // START SNIPPET: example
1:         camelContext.addComponent("activemq", activeMQComponent("vm://localhost?broker.persistent=false"));
1:         // END SNIPPET: example
1: 
1:         return camelContext;
1:     }
1: 
1:     protected RouteBuilder createRouteBuilder() throws Exception {
1:         return new RouteBuilder() {
1:             public void configure() throws Exception {
1:                 from("activemq:test.server").bean(myBean);
1: 
0:                 from("activemq:test.reply").to("mock:result");
1:             }
1:         };
1:     }
1: 
1:     protected static class MyServer {
1:         private Map<String,Object> headers;
1: 
1:         public String process(@Headers Map<String,Object> headers, String body) {
1:             this.headers = headers;
1:             LOG.info("process() invoked with headers: " + headers);
1:             return "Hello " + body;
1:         }
1: 
1:         public Map<String,Object> getHeaders() {
1:             return headers;
1:         }
1:     }
1: }
============================================================================