1:272fb2b: /**
1:272fb2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:272fb2b:  * contributor license agreements.  See the NOTICE file distributed with
1:272fb2b:  * this work for additional information regarding copyright ownership.
1:272fb2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:272fb2b:  * (the "License"); you may not use this file except in compliance with
1:272fb2b:  * the License.  You may obtain a copy of the License at
1:272fb2b:  *
1:272fb2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:272fb2b:  *
1:272fb2b:  * Unless required by applicable law or agreed to in writing, software
1:272fb2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:272fb2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:272fb2b:  * See the License for the specific language governing permissions and
1:272fb2b:  * limitations under the License.
1:272fb2b:  */
1:272fb2b: package org.apache.activemq.transport.amqp.client;
1:272fb2b: 
1:272fb2b: import java.io.IOException;
1:272fb2b: import java.util.LinkedHashSet;
1:272fb2b: import java.util.Set;
1:272fb2b: 
1:272fb2b: import org.apache.activemq.transport.amqp.client.util.AsyncResult;
1:272fb2b: import org.apache.activemq.transport.amqp.client.util.ClientFuture;
1:272fb2b: import org.apache.activemq.transport.amqp.client.util.ClientFutureSynchronization;
1:272fb2b: import org.slf4j.Logger;
1:272fb2b: import org.slf4j.LoggerFactory;
1:272fb2b: 
1:272fb2b: /**
1:272fb2b:  * Defines a context under which resources in a given session
1:272fb2b:  * will operate inside transaction scoped boundaries.
1:272fb2b:  */
1:272fb2b: public class AmqpTransactionContext {
1:272fb2b: 
1:272fb2b:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransactionContext.class);
1:272fb2b: 
1:272fb2b:     private final AmqpSession session;
1:272fb2b:     private final Set<AmqpReceiver> txReceivers = new LinkedHashSet<AmqpReceiver>();
1:272fb2b: 
1:272fb2b:     private AmqpTransactionCoordinator coordinator;
1:272fb2b:     private AmqpTransactionId transactionId;
1:272fb2b: 
1:272fb2b:     public AmqpTransactionContext(AmqpSession session) {
1:272fb2b:         this.session = session;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     /**
1:272fb2b:      * Begins a new transaction scoped to the target session.
1:272fb2b:      *
1:272fb2b:      * @param txId
1:272fb2b:      *      The transaction Id to use for this new transaction.
1:272fb2b:      *
1:272fb2b:      * @throws Exception if an error occurs while starting the transaction.
1:272fb2b:      */
1:272fb2b:     public void begin() throws Exception {
1:272fb2b:         if (transactionId != null) {
1:272fb2b:             throw new IOException("Begin called while a TX is still Active.");
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         final AmqpTransactionId txId = session.getConnection().getNextTransactionId();
1:272fb2b:         final ClientFuture request = new ClientFuture(new ClientFutureSynchronization() {
1:272fb2b: 
1:272fb2b:             @Override
1:272fb2b:             public void onPendingSuccess() {
1:272fb2b:                 transactionId = txId;
1:272fb2b:             }
1:272fb2b: 
1:272fb2b:             @Override
1:272fb2b:             public void onPendingFailure(Throwable cause) {
1:272fb2b:                 transactionId = null;
1:272fb2b:             }
1:272fb2b:         });
1:272fb2b: 
1:272fb2b:         LOG.info("Attempting to Begin TX:[{}]", txId);
1:272fb2b: 
1:272fb2b:         session.getScheduler().execute(new Runnable() {
1:272fb2b: 
1:272fb2b:             @Override
1:272fb2b:             public void run() {
1:272fb2b:                 if (coordinator == null || coordinator.isClosed()) {
1:272fb2b:                     LOG.info("Creating new Coordinator for TX:[{}]", txId);
1:272fb2b:                     coordinator = new AmqpTransactionCoordinator(session);
1:272fb2b:                     coordinator.open(new AsyncResult() {
1:272fb2b: 
1:272fb2b:                         @Override
1:272fb2b:                         public void onSuccess() {
1:272fb2b:                             try {
1:272fb2b:                                 LOG.info("Attempting to declare TX:[{}]", txId);
1:272fb2b:                                 coordinator.declare(txId, request);
1:272fb2b:                             } catch (Exception e) {
1:272fb2b:                                 request.onFailure(e);
1:272fb2b:                             }
1:272fb2b:                         }
1:272fb2b: 
1:272fb2b:                         @Override
1:272fb2b:                         public void onFailure(Throwable result) {
1:272fb2b:                             request.onFailure(result);
1:272fb2b:                         }
1:272fb2b: 
1:272fb2b:                         @Override
1:272fb2b:                         public boolean isComplete() {
1:272fb2b:                             return request.isComplete();
1:272fb2b:                         }
1:272fb2b:                     });
1:272fb2b:                 } else {
1:272fb2b:                     try {
1:272fb2b:                         LOG.info("Attempting to declare TX:[{}]", txId);
1:272fb2b:                         coordinator.declare(txId, request);
1:272fb2b:                     } catch (Exception e) {
1:272fb2b:                         request.onFailure(e);
1:272fb2b:                     }
1:272fb2b:                 }
1:272fb2b: 
1:8448cf1:                 session.pumpToProtonTransport(request);
1:272fb2b:             }
1:272fb2b:         });
1:272fb2b: 
1:272fb2b:         request.sync();
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     /**
1:272fb2b:      * Commit this transaction which then ends the lifetime of the transacted operation.
1:272fb2b:      *
1:272fb2b:      * @throws Exception if an error occurs while performing the commit
1:272fb2b:      */
1:272fb2b:     public void commit() throws Exception {
1:272fb2b:         if (transactionId == null) {
1:272fb2b:             throw new IllegalStateException("Commit called with no active Transaction.");
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         preCommit();
1:272fb2b: 
1:272fb2b:         final ClientFuture request = new ClientFuture(new ClientFutureSynchronization() {
1:272fb2b: 
1:272fb2b:             @Override
1:272fb2b:             public void onPendingSuccess() {
1:272fb2b:                 transactionId = null;
1:272fb2b:                 postCommit();
1:272fb2b:             }
1:272fb2b: 
1:272fb2b:             @Override
1:272fb2b:             public void onPendingFailure(Throwable cause) {
1:272fb2b:                 transactionId = null;
1:272fb2b:                 postCommit();
1:272fb2b:             }
1:272fb2b:         });
1:272fb2b: 
1:272fb2b:         LOG.debug("Commit on TX[{}] initiated", transactionId);
1:272fb2b:         session.getScheduler().execute(new Runnable() {
1:272fb2b: 
1:272fb2b:             @Override
1:272fb2b:             public void run() {
1:272fb2b:                 try {
1:272fb2b:                     LOG.info("Attempting to commit TX:[{}]", transactionId);
1:272fb2b:                     coordinator.discharge(transactionId, request, true);
1:8448cf1:                     session.pumpToProtonTransport(request);
1:272fb2b:                 } catch (Exception e) {
1:272fb2b:                     request.onFailure(e);
1:272fb2b:                 }
1:272fb2b:             }
1:272fb2b:         });
1:272fb2b: 
1:272fb2b:         request.sync();
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     /**
1:272fb2b:      * Rollback any transacted work performed under the current transaction.
1:272fb2b:      *
1:272fb2b:      * @throws Exception if an error occurs during the rollback operation.
1:272fb2b:      */
1:272fb2b:     public void rollback() throws Exception {
1:272fb2b:         if (transactionId == null) {
1:272fb2b:             throw new IllegalStateException("Rollback called with no active Transaction.");
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         preRollback();
1:272fb2b: 
1:272fb2b:         final ClientFuture request = new ClientFuture(new ClientFutureSynchronization() {
1:272fb2b: 
1:272fb2b:             @Override
1:272fb2b:             public void onPendingSuccess() {
1:272fb2b:                 transactionId = null;
1:272fb2b:                 postRollback();
1:272fb2b:             }
1:272fb2b: 
1:272fb2b:             @Override
1:272fb2b:             public void onPendingFailure(Throwable cause) {
1:272fb2b:                 transactionId = null;
1:272fb2b:                 postRollback();
1:272fb2b:             }
1:272fb2b:         });
1:272fb2b: 
1:272fb2b:         LOG.debug("Rollback on TX[{}] initiated", transactionId);
1:272fb2b:         session.getScheduler().execute(new Runnable() {
1:272fb2b: 
1:272fb2b:             @Override
1:272fb2b:             public void run() {
1:272fb2b:                 try {
1:272fb2b:                     LOG.info("Attempting to roll back TX:[{}]", transactionId);
1:272fb2b:                     coordinator.discharge(transactionId, request, false);
1:8448cf1:                     session.pumpToProtonTransport(request);
1:272fb2b:                 } catch (Exception e) {
1:272fb2b:                     request.onFailure(e);
1:272fb2b:                 }
1:272fb2b:             }
1:272fb2b:         });
1:272fb2b: 
1:272fb2b:         request.sync();
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     //----- Internal access to context properties ----------------------------//
1:272fb2b: 
1:272fb2b:     AmqpTransactionCoordinator getCoordinator() {
1:272fb2b:         return coordinator;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     AmqpTransactionId getTransactionId() {
1:272fb2b:         return transactionId;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     boolean isInTransaction() {
1:272fb2b:         return transactionId != null;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     void registerTxConsumer(AmqpReceiver consumer) {
1:272fb2b:         txReceivers.add(consumer);
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     //----- Transaction pre / post completion --------------------------------//
1:272fb2b: 
1:272fb2b:     private void preCommit() {
1:272fb2b:         for (AmqpReceiver receiver : txReceivers) {
1:272fb2b:             receiver.preCommit();
1:272fb2b:         }
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     private void preRollback() {
1:272fb2b:         for (AmqpReceiver receiver : txReceivers) {
1:272fb2b:             receiver.preRollback();
1:272fb2b:         }
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     private void postCommit() {
1:272fb2b:         for (AmqpReceiver receiver : txReceivers) {
1:272fb2b:             receiver.postCommit();
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         txReceivers.clear();
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     private void postRollback() {
1:272fb2b:         for (AmqpReceiver receiver : txReceivers) {
1:272fb2b:             receiver.postRollback();
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         txReceivers.clear();
1:272fb2b:     }
1:272fb2b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8448cf1
/////////////////////////////////////////////////////////////////////////
1:                 session.pumpToProtonTransport(request);
/////////////////////////////////////////////////////////////////////////
1:                     session.pumpToProtonTransport(request);
/////////////////////////////////////////////////////////////////////////
1:                     session.pumpToProtonTransport(request);
commit:272fb2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import java.io.IOException;
1: import java.util.LinkedHashSet;
1: import java.util.Set;
1: 
1: import org.apache.activemq.transport.amqp.client.util.AsyncResult;
1: import org.apache.activemq.transport.amqp.client.util.ClientFuture;
1: import org.apache.activemq.transport.amqp.client.util.ClientFutureSynchronization;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Defines a context under which resources in a given session
1:  * will operate inside transaction scoped boundaries.
1:  */
1: public class AmqpTransactionContext {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpTransactionContext.class);
1: 
1:     private final AmqpSession session;
1:     private final Set<AmqpReceiver> txReceivers = new LinkedHashSet<AmqpReceiver>();
1: 
1:     private AmqpTransactionCoordinator coordinator;
1:     private AmqpTransactionId transactionId;
1: 
1:     public AmqpTransactionContext(AmqpSession session) {
1:         this.session = session;
1:     }
1: 
1:     /**
1:      * Begins a new transaction scoped to the target session.
1:      *
1:      * @param txId
1:      *      The transaction Id to use for this new transaction.
1:      *
1:      * @throws Exception if an error occurs while starting the transaction.
1:      */
1:     public void begin() throws Exception {
1:         if (transactionId != null) {
1:             throw new IOException("Begin called while a TX is still Active.");
1:         }
1: 
1:         final AmqpTransactionId txId = session.getConnection().getNextTransactionId();
1:         final ClientFuture request = new ClientFuture(new ClientFutureSynchronization() {
1: 
1:             @Override
1:             public void onPendingSuccess() {
1:                 transactionId = txId;
1:             }
1: 
1:             @Override
1:             public void onPendingFailure(Throwable cause) {
1:                 transactionId = null;
1:             }
1:         });
1: 
1:         LOG.info("Attempting to Begin TX:[{}]", txId);
1: 
1:         session.getScheduler().execute(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 if (coordinator == null || coordinator.isClosed()) {
1:                     LOG.info("Creating new Coordinator for TX:[{}]", txId);
1:                     coordinator = new AmqpTransactionCoordinator(session);
1:                     coordinator.open(new AsyncResult() {
1: 
1:                         @Override
1:                         public void onSuccess() {
1:                             try {
1:                                 LOG.info("Attempting to declare TX:[{}]", txId);
1:                                 coordinator.declare(txId, request);
1:                             } catch (Exception e) {
1:                                 request.onFailure(e);
1:                             }
1:                         }
1: 
1:                         @Override
1:                         public void onFailure(Throwable result) {
1:                             request.onFailure(result);
1:                         }
1: 
1:                         @Override
1:                         public boolean isComplete() {
1:                             return request.isComplete();
1:                         }
1:                     });
1:                 } else {
1:                     try {
1:                         LOG.info("Attempting to declare TX:[{}]", txId);
1:                         coordinator.declare(txId, request);
1:                     } catch (Exception e) {
1:                         request.onFailure(e);
1:                     }
1:                 }
1: 
0:                 session.pumpToProtonTransport();
1:             }
1:         });
1: 
1:         request.sync();
1:     }
1: 
1:     /**
1:      * Commit this transaction which then ends the lifetime of the transacted operation.
1:      *
1:      * @throws Exception if an error occurs while performing the commit
1:      */
1:     public void commit() throws Exception {
1:         if (transactionId == null) {
1:             throw new IllegalStateException("Commit called with no active Transaction.");
1:         }
1: 
1:         preCommit();
1: 
1:         final ClientFuture request = new ClientFuture(new ClientFutureSynchronization() {
1: 
1:             @Override
1:             public void onPendingSuccess() {
1:                 transactionId = null;
1:                 postCommit();
1:             }
1: 
1:             @Override
1:             public void onPendingFailure(Throwable cause) {
1:                 transactionId = null;
1:                 postCommit();
1:             }
1:         });
1: 
1:         LOG.debug("Commit on TX[{}] initiated", transactionId);
1:         session.getScheduler().execute(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     LOG.info("Attempting to commit TX:[{}]", transactionId);
1:                     coordinator.discharge(transactionId, request, true);
0:                     session.pumpToProtonTransport();
1:                 } catch (Exception e) {
1:                     request.onFailure(e);
1:                 }
1:             }
1:         });
1: 
1:         request.sync();
1:     }
1: 
1:     /**
1:      * Rollback any transacted work performed under the current transaction.
1:      *
1:      * @throws Exception if an error occurs during the rollback operation.
1:      */
1:     public void rollback() throws Exception {
1:         if (transactionId == null) {
1:             throw new IllegalStateException("Rollback called with no active Transaction.");
1:         }
1: 
1:         preRollback();
1: 
1:         final ClientFuture request = new ClientFuture(new ClientFutureSynchronization() {
1: 
1:             @Override
1:             public void onPendingSuccess() {
1:                 transactionId = null;
1:                 postRollback();
1:             }
1: 
1:             @Override
1:             public void onPendingFailure(Throwable cause) {
1:                 transactionId = null;
1:                 postRollback();
1:             }
1:         });
1: 
1:         LOG.debug("Rollback on TX[{}] initiated", transactionId);
1:         session.getScheduler().execute(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     LOG.info("Attempting to roll back TX:[{}]", transactionId);
1:                     coordinator.discharge(transactionId, request, false);
0:                     session.pumpToProtonTransport();
1:                 } catch (Exception e) {
1:                     request.onFailure(e);
1:                 }
1:             }
1:         });
1: 
1:         request.sync();
1:     }
1: 
1:     //----- Internal access to context properties ----------------------------//
1: 
1:     AmqpTransactionCoordinator getCoordinator() {
1:         return coordinator;
1:     }
1: 
1:     AmqpTransactionId getTransactionId() {
1:         return transactionId;
1:     }
1: 
1:     boolean isInTransaction() {
1:         return transactionId != null;
1:     }
1: 
1:     void registerTxConsumer(AmqpReceiver consumer) {
1:         txReceivers.add(consumer);
1:     }
1: 
1:     //----- Transaction pre / post completion --------------------------------//
1: 
1:     private void preCommit() {
1:         for (AmqpReceiver receiver : txReceivers) {
1:             receiver.preCommit();
1:         }
1:     }
1: 
1:     private void preRollback() {
1:         for (AmqpReceiver receiver : txReceivers) {
1:             receiver.preRollback();
1:         }
1:     }
1: 
1:     private void postCommit() {
1:         for (AmqpReceiver receiver : txReceivers) {
1:             receiver.postCommit();
1:         }
1: 
1:         txReceivers.clear();
1:     }
1: 
1:     private void postRollback() {
1:         for (AmqpReceiver receiver : txReceivers) {
1:             receiver.postRollback();
1:         }
1: 
1:         txReceivers.clear();
1:     }
1: }
============================================================================