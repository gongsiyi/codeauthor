1:b64b8ba: /**
1:b64b8ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b64b8ba:  * contributor license agreements.  See the NOTICE file distributed with
1:b64b8ba:  * this work for additional information regarding copyright ownership.
1:b64b8ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b64b8ba:  * (the "License"); you may not use this file except in compliance with
1:b64b8ba:  * the License.  You may obtain a copy of the License at
1:b64b8ba:  *
1:b64b8ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b64b8ba:  *
1:b64b8ba:  * Unless required by applicable law or agreed to in writing, software
1:b64b8ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b64b8ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b64b8ba:  * See the License for the specific language governing permissions and
1:b64b8ba:  * limitations under the License.
1:b64b8ba:  */
1:b64b8ba: package org.apache.activemq.web.util;
1:b64b8ba: 
1:b64b8ba: public class ExceptionUtils {
1:b64b8ba: 
1:b64b8ba:     /**
1:b64b8ba:      * Finds the root cause of an exception.  Will return the original
1:b64b8ba:      * exception if the first getCause returns null.
1:b64b8ba:      *
1:b64b8ba:      * @param e
1:b64b8ba:      * @return
1:b64b8ba:      */
1:b64b8ba:     public static Throwable getRootCause(final Throwable e) {
1:b64b8ba:         Throwable result = e;
1:b64b8ba: 
1:b64b8ba:         //loop over to find the root cause while guarding against cycles
1:b64b8ba:         while(result != null && result.getCause() != null
1:b64b8ba:                 && e != result.getCause() && result != result.getCause() ) {
1:b64b8ba:             result = result.getCause();
1:b64b8ba:         }
1:b64b8ba: 
1:b64b8ba:         return result;
1:b64b8ba:     }
1:b64b8ba: 
1:b64b8ba:     /**
1:b64b8ba:      * Returns true if the passed in class is the root cause of the exception
1:b64b8ba:      *
1:b64b8ba:      * @param e
1:b64b8ba:      * @param clazz
1:b64b8ba:      * @return
1:b64b8ba:      */
1:b64b8ba:     public static boolean isRootCause(final Throwable e, final Class<?> clazz) {
1:b64b8ba:         if (clazz == null || e == null) {
1:b64b8ba:             return false;
1:b64b8ba:         }
1:b64b8ba:         return clazz.isInstance(getRootCause(e));
1:b64b8ba:     }
1:b64b8ba: 
1:b64b8ba: }
============================================================================
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:b64b8ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web.util;
1: 
1: public class ExceptionUtils {
1: 
1:     /**
1:      * Finds the root cause of an exception.  Will return the original
1:      * exception if the first getCause returns null.
1:      *
1:      * @param e
1:      * @return
1:      */
1:     public static Throwable getRootCause(final Throwable e) {
1:         Throwable result = e;
1: 
1:         //loop over to find the root cause while guarding against cycles
1:         while(result != null && result.getCause() != null
1:                 && e != result.getCause() && result != result.getCause() ) {
1:             result = result.getCause();
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * Returns true if the passed in class is the root cause of the exception
1:      *
1:      * @param e
1:      * @param clazz
1:      * @return
1:      */
1:     public static boolean isRootCause(final Throwable e, final Class<?> clazz) {
1:         if (clazz == null || e == null) {
1:             return false;
1:         }
1:         return clazz.isInstance(getRootCause(e));
1:     }
1: 
1: }
============================================================================