1:f1d59cd: /**
1:f1d59cd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f1d59cd:  * contributor license agreements.  See the NOTICE file distributed with
1:f1d59cd:  * this work for additional information regarding copyright ownership.
1:f1d59cd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f1d59cd:  * (the "License"); you may not use this file except in compliance with
1:f1d59cd:  * the License.  You may obtain a copy of the License at
1:f1d59cd:  *
1:f1d59cd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f1d59cd:  *
1:f1d59cd:  * Unless required by applicable law or agreed to in writing, software
1:f1d59cd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f1d59cd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f1d59cd:  * See the License for the specific language governing permissions and
1:f1d59cd:  * limitations under the License.
1:f1d59cd:  */
1:f1d59cd: package org.apache.activemq;
1:f1d59cd: 
1:f1d59cd: import java.util.concurrent.atomic.AtomicBoolean;
1:97d7c39: import java.util.concurrent.atomic.AtomicInteger;
1:f1d59cd: 
1:f1d59cd: import javax.jms.ConnectionFactory;
1:f1d59cd: import javax.jms.ExceptionListener;
1:f1d59cd: import javax.jms.JMSException;
1:f1d59cd: import javax.jms.MessageConsumer;
1:f1d59cd: import javax.jms.MessageProducer;
1:f1d59cd: import javax.jms.ResourceAllocationException;
1:f1d59cd: import javax.jms.Session;
1:f1d59cd: import javax.jms.TextMessage;
1:f1d59cd: 
1:f1d59cd: import org.apache.activemq.broker.BrokerService;
1:f1d59cd: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:f1d59cd: import org.apache.activemq.broker.region.policy.PolicyMap;
1:f1d59cd: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:f1d59cd: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1:f1d59cd: 
1:f1d59cd: public class ProducerFlowControlSendFailTest extends ProducerFlowControlTest {
1:f1d59cd: 
1:f1d59cd:     protected BrokerService createBroker() throws Exception {
1:f1d59cd:         BrokerService service = new BrokerService();
1:f1d59cd:         service.setPersistent(false);
1:f1d59cd:         service.setUseJmx(false);
1:f1d59cd: 
1:f1d59cd:         // Setup a destination policy where it takes only 1 message at a time.
1:f1d59cd:         PolicyMap policyMap = new PolicyMap();
1:f1d59cd:         PolicyEntry policy = new PolicyEntry();
1:f1d59cd:         policy.setMemoryLimit(1);
1:f1d59cd:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:f1d59cd:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:db5cbc1:         policy.setProducerFlowControl(true);
1:f1d59cd:         policyMap.setDefaultEntry(policy);
1:f1d59cd:         service.setDestinationPolicy(policyMap);
1:f1d59cd:         
1:f1d59cd:         service.getSystemUsage().setSendFailIfNoSpace(true);
1:f1d59cd: 
1:f1d59cd:         connector = service.addConnector("tcp://localhost:0");
1:f1d59cd:         return service;
1:f1d59cd:     }
1:f1d59cd:     
1:f1d59cd:     @Override
1:f1d59cd:     public void test2ndPubisherWithStandardConnectionThatIsBlocked() throws Exception {
1:f1d59cd:         // with sendFailIfNoSpace set, there is no blocking of the connection
1:f1d59cd:     }
1:f1d59cd:     
1:f1d59cd:     @Override
1:97e0fcc:     public void testAsyncPubisherRecoverAfterBlock() throws Exception {
1:97e0fcc:         // sendFail means no flowControllwindow as there is no producer ack, just an exception
1:97e0fcc:     }
1:97e0fcc:     
1:97e0fcc:     @Override
1:f1d59cd:     public void testPubisherRecoverAfterBlock() throws Exception {
1:f1d59cd:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:f1d59cd:         // with sendFail, there must be no flowControllwindow
1:f1d59cd:         // sendFail is an alternative flow control mechanism that does not block
1:f1d59cd:         factory.setUseAsyncSend(true);
1:f1d59cd:         connection = (ActiveMQConnection)factory.createConnection();
1:f1d59cd:         connections.add(connection);
1:f1d59cd:         connection.start();
1:f1d59cd: 
1:f1d59cd:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:f1d59cd:         final MessageProducer producer = session.createProducer(queueA);
1:f1d59cd:         
1:f1d59cd:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1:f1d59cd:    
1:f1d59cd:         Thread thread = new Thread("Filler") {
1:f1d59cd:             @Override
1:f1d59cd:             public void run() {
1:f1d59cd:                 while (keepGoing.get()) {
1:f1d59cd:                     try {
1:f1d59cd:                         producer.send(session.createTextMessage("Test message"));
1:f1d59cd:                         if (gotResourceException.get()) {
1:f1d59cd:                             // do not flood the broker with requests when full as we are sending async and they 
1:f1d59cd:                             // will be limited by the network buffers
1:f1d59cd:                             Thread.sleep(200);
1:f1d59cd:                         }
1:f1d59cd:                     } catch (Exception e) {
1:f1d59cd:                         // with async send, there will be no exceptions
1:f1d59cd:                         e.printStackTrace();
1:f1d59cd:                     }
1:f1d59cd:                 }
1:f1d59cd:             }
1:f1d59cd:         };
1:f1d59cd:         thread.start();
1:f1d59cd:         waitForBlockedOrResourceLimit(new AtomicBoolean(false));
1:f1d59cd: 
1:f1d59cd:         // resourceException on second message, resumption if we
1:f1d59cd:         // can receive 10
1:f1d59cd:         MessageConsumer consumer = session.createConsumer(queueA);
1:f1d59cd:         TextMessage msg;
1:f1d59cd:         for (int idx = 0; idx < 10; ++idx) {
1:f1d59cd:             msg = (TextMessage) consumer.receive(1000);
1:e1a2d7d:             if (msg != null) {
1:e1a2d7d:                 msg.acknowledge();
1:e1a2d7d:             }
1:f1d59cd:         }
1:f1d59cd:         keepGoing.set(false);
1:97d7c39:     }
1:f1d59cd: 
1:97d7c39:     public void testPubisherRecoverAfterBlockWithSyncSend() throws Exception {
1:97d7c39:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:97d7c39:         factory.setExceptionListener(null);
1:97d7c39:         factory.setUseAsyncSend(false);
1:97d7c39:         connection = (ActiveMQConnection)factory.createConnection();
1:97d7c39:         connections.add(connection);
1:97d7c39:         connection.start();
1:97d7c39: 
1:97d7c39:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:97d7c39:         final MessageProducer producer = session.createProducer(queueA);
1:97d7c39:         
1:97d7c39:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1:97d7c39:         final AtomicInteger exceptionCount = new AtomicInteger(0);
1:97d7c39:         Thread thread = new Thread("Filler") {
1:97d7c39:             @Override
1:97d7c39:             public void run() {
1:97d7c39:                 while (keepGoing.get()) {
1:97d7c39:                     try {
1:97d7c39:                         producer.send(session.createTextMessage("Test message"));
1:97d7c39:                     } catch (JMSException arg0) {
1:97d7c39:                         if (arg0 instanceof ResourceAllocationException) {
1:97d7c39:                             gotResourceException.set(true);
1:97d7c39:                             exceptionCount.incrementAndGet();
1:97d7c39:                         }
1:97d7c39:                     }
1:97d7c39:                 }
1:97d7c39:             }
1:97d7c39:         };
1:97d7c39:         thread.start();
1:97d7c39:         waitForBlockedOrResourceLimit(new AtomicBoolean(false));
1:97d7c39: 
1:97d7c39:         // resourceException on second message, resumption if we
1:97d7c39:         // can receive 10
1:97d7c39:         MessageConsumer consumer = session.createConsumer(queueA);
1:97d7c39:         TextMessage msg;
1:97d7c39:         for (int idx = 0; idx < 10; ++idx) {
1:97d7c39:             msg = (TextMessage) consumer.receive(1000);
1:97d7c39:             if (msg != null) {
1:97d7c39:                 msg.acknowledge();
1:97d7c39:             }
1:f1d59cd:         }
1:97d7c39:         assertTrue("we were blocked at least 5 times", 5 < exceptionCount.get());
1:97d7c39:         keepGoing.set(false);
1:97d7c39:     }
1:f1d59cd:     
1:f1d59cd: 	@Override
1:f1d59cd: 	protected ConnectionFactory createConnectionFactory() throws Exception {
1:f1d59cd: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connector.getConnectUri());
1:f1d59cd: 		connectionFactory.setExceptionListener(new ExceptionListener() {
1:f1d59cd: 				public void onException(JMSException arg0) {
1:f1d59cd: 					if (arg0 instanceof ResourceAllocationException) {
1:f1d59cd: 						gotResourceException.set(true);
1:f1d59cd: 					}
1:f1d59cd: 				}
1:f1d59cd: 	        });
1:f1d59cd: 		return connectionFactory;
1:f1d59cd: 	}
1:f1d59cd: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:97e0fcc
/////////////////////////////////////////////////////////////////////////
1:     public void testAsyncPubisherRecoverAfterBlock() throws Exception {
1:         // sendFail means no flowControllwindow as there is no producer ack, just an exception
1:     }
1:     
1:     @Override
commit:763ef10
/////////////////////////////////////////////////////////////////////////
commit:97d7c39
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:     public void testPubisherRecoverAfterBlockWithSyncSend() throws Exception {
1:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:         factory.setExceptionListener(null);
1:         factory.setUseAsyncSend(false);
1:         connection = (ActiveMQConnection)factory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final MessageProducer producer = session.createProducer(queueA);
1:         
1:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1:         final AtomicInteger exceptionCount = new AtomicInteger(0);
1:         Thread thread = new Thread("Filler") {
1:             @Override
1:             public void run() {
1:                 while (keepGoing.get()) {
1:                     try {
1:                         producer.send(session.createTextMessage("Test message"));
1:                     } catch (JMSException arg0) {
1:                         if (arg0 instanceof ResourceAllocationException) {
1:                             gotResourceException.set(true);
1:                             exceptionCount.incrementAndGet();
1:                         }
1:                     }
1:                 }
1:             }
1:         };
1:         thread.start();
1:         waitForBlockedOrResourceLimit(new AtomicBoolean(false));
1: 
1:         // resourceException on second message, resumption if we
1:         // can receive 10
1:         MessageConsumer consumer = session.createConsumer(queueA);
1:         TextMessage msg;
1:         for (int idx = 0; idx < 10; ++idx) {
1:             msg = (TextMessage) consumer.receive(1000);
1:             if (msg != null) {
1:                 msg.acknowledge();
1:             }
1:         }
1:         assertTrue("we were blocked at least 5 times", 5 < exceptionCount.get());
1:         keepGoing.set(false);
1:     }
commit:e1a2d7d
/////////////////////////////////////////////////////////////////////////
1:             if (msg != null) {
1:                 msg.acknowledge();
1:             }
commit:f1d59cd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ResourceAllocationException;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1: 
1: public class ProducerFlowControlSendFailTest extends ProducerFlowControlTest {
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1: 
1:         // Setup a destination policy where it takes only 1 message at a time.
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setMemoryLimit(1);
1:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         policyMap.setDefaultEntry(policy);
1:         service.setDestinationPolicy(policyMap);
1:         
1:         service.getSystemUsage().setSendFailIfNoSpace(true);
1: 
1:         connector = service.addConnector("tcp://localhost:0");
1:         return service;
1:     }
1:     
1:     @Override
1:     public void test2ndPubisherWithStandardConnectionThatIsBlocked() throws Exception {
1:         // with sendFailIfNoSpace set, there is no blocking of the connection
1:     }
1:     
1:     @Override
1:     public void testPubisherRecoverAfterBlock() throws Exception {
1:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:         // with sendFail, there must be no flowControllwindow
1:         // sendFail is an alternative flow control mechanism that does not block
1:         factory.setUseAsyncSend(true);
1:         connection = (ActiveMQConnection)factory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final MessageProducer producer = session.createProducer(queueA);
1:         
1:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1:    
1:         Thread thread = new Thread("Filler") {
1:             @Override
1:             public void run() {
1:                 while (keepGoing.get()) {
1:                     try {
1:                         producer.send(session.createTextMessage("Test message"));
1:                         if (gotResourceException.get()) {
1:                             // do not flood the broker with requests when full as we are sending async and they 
1:                             // will be limited by the network buffers
1:                             Thread.sleep(200);
1:                         }
1:                     } catch (Exception e) {
1:                         // with async send, there will be no exceptions
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             }
1:         };
1:         thread.start();
1:         waitForBlockedOrResourceLimit(new AtomicBoolean(false));
1: 
1:         // resourceException on second message, resumption if we
1:         // can receive 10
1:         MessageConsumer consumer = session.createConsumer(queueA);
1:         TextMessage msg;
1:         for (int idx = 0; idx < 10; ++idx) {
1:             msg = (TextMessage) consumer.receive(1000);
0:             msg.acknowledge();
1:         }
1:         keepGoing.set(false);
1:     }
1: 
1:     
1: 	@Override
1: 	protected ConnectionFactory createConnectionFactory() throws Exception {
1: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connector.getConnectUri());
1: 		connectionFactory.setExceptionListener(new ExceptionListener() {
1: 				public void onException(JMSException arg0) {
1: 					if (arg0 instanceof ResourceAllocationException) {
1: 						gotResourceException.set(true);
1: 					}
1: 				}
1: 	        });
1: 		return connectionFactory;
1: 	}
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:db5cbc1
/////////////////////////////////////////////////////////////////////////
1:         policy.setProducerFlowControl(true);
============================================================================