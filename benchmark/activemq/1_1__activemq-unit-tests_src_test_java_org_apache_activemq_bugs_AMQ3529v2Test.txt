1:0a12bcb: /**
1:0a12bcb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0a12bcb:  * contributor license agreements.  See the NOTICE file distributed with
1:0a12bcb:  * this work for additional information regarding copyright ownership.
1:0a12bcb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0a12bcb:  * (the "License"); you may not use this file except in compliance with
1:0a12bcb:  * the License.  You may obtain a copy of the License at
1:0a12bcb:  *
1:0a12bcb:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0a12bcb:  *
1:0a12bcb:  * Unless required by applicable law or agreed to in writing, software
1:0a12bcb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0a12bcb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0a12bcb:  * See the License for the specific language governing permissions and
1:0a12bcb:  * limitations under the License.
1:0a12bcb:  *
1:0a12bcb:  */
1:0a12bcb: package org.apache.activemq.bugs;
1:0a12bcb: 
1:0a12bcb: import java.util.LinkedList;
1:0a12bcb: import java.util.List;
1:0a12bcb: import java.util.Properties;
1:0a12bcb: import java.util.Random;
1:0a12bcb: import java.util.concurrent.ExecutorService;
1:0a12bcb: import java.util.concurrent.Executors;
1:0a12bcb: import java.util.concurrent.TimeUnit;
1:0a12bcb: import javax.jms.Connection;
1:0a12bcb: import javax.jms.Destination;
1:0a12bcb: import javax.jms.JMSException;
1:0a12bcb: import javax.jms.MessageConsumer;
1:0a12bcb: import javax.jms.Session;
1:0a12bcb: import javax.naming.Context;
1:0a12bcb: import javax.naming.InitialContext;
1:0a12bcb: import javax.naming.NamingException;
1:0a12bcb: import org.apache.activemq.ActiveMQConnectionFactory;
1:0a12bcb: import org.apache.activemq.broker.BrokerService;
1:0a12bcb: import org.apache.activemq.util.Wait;
1:0a12bcb: import org.junit.After;
1:0a12bcb: import org.junit.Before;
1:0a12bcb: import org.junit.Test;
1:0a12bcb: import org.slf4j.Logger;
1:0a12bcb: import org.slf4j.LoggerFactory;
1:0a12bcb: 
1:0a12bcb: 
1:0a12bcb: import static junit.framework.TestCase.assertTrue;
1:0a12bcb: import static org.junit.Assert.assertEquals;
1:0a12bcb: import static org.junit.Assert.assertNotNull;
1:0a12bcb: 
1:0a12bcb: public class AMQ3529v2Test {
1:0a12bcb: 
1:0a12bcb:     private static Logger LOG = LoggerFactory.getLogger(AMQ3529v2Test.class);
1:0a12bcb: 
1:0a12bcb:     private BrokerService broker;
1:0a12bcb:     private String connectionUri;
1:0a12bcb: 
1:0a12bcb:     @Before
1:0a12bcb:     public void startBroker() throws Exception {
1:0a12bcb:         broker = new BrokerService();
1:0a12bcb:         broker.setDeleteAllMessagesOnStartup(true);
1:0a12bcb:         broker.setPersistent(false);
1:0a12bcb:         broker.setUseJmx(false);
1:0a12bcb:         broker.addConnector("tcp://0.0.0.0:0");
1:0a12bcb:         broker.start();
1:0a12bcb:         broker.waitUntilStarted();
1:0a12bcb: 
1:0a12bcb:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:0a12bcb: 
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     @After
1:0a12bcb:     public void stopBroker() throws Exception {
1:0a12bcb:         broker.stop();
1:0a12bcb:         broker.waitUntilStopped();
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     @Test(timeout = 60000)
1:0a12bcb:     public void testRandomInterruptionAffects() throws Exception {
1:0a12bcb:         doTestRandomInterruptionAffects();
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     @Test(timeout = 60000)
1:0a12bcb:     public void testRandomInterruptionAffectsWithFailover() throws Exception {
1:0a12bcb:         connectionUri = "failover:(" + connectionUri + ")";
1:0a12bcb:         doTestRandomInterruptionAffects();
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     public void doTestRandomInterruptionAffects() throws Exception {
1:0a12bcb:         final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:0a12bcb: 
1:0a12bcb:         ThreadGroup tg = new ThreadGroup("tg");
1:0a12bcb: 
1:0a12bcb:         assertEquals(0, tg.activeCount());
1:0a12bcb: 
1:0a12bcb:         class ClientThread extends Thread {
1:0a12bcb: 
1:0a12bcb:             public Exception error;
1:0a12bcb: 
1:0a12bcb:             public ClientThread(ThreadGroup tg, String name) {
1:0a12bcb:                 super(tg, name);
1:0a12bcb:             }
1:0a12bcb: 
1:0a12bcb:             @Override
1:0a12bcb:             public void run() {
1:0a12bcb:                 Context ctx = null;
1:0a12bcb:                 Connection connection = null;
1:0a12bcb:                 Session session = null;
1:0a12bcb:                 MessageConsumer consumer = null;
1:0a12bcb: 
1:0a12bcb:                 try {
1:0a12bcb:                     connection = connectionFactory.createConnection();
1:0a12bcb:                     session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0a12bcb:                     assertNotNull(session);
1:0a12bcb: 
1:0a12bcb:                     Properties props = new Properties();
1:0a12bcb:                     props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:0a12bcb:                     props.setProperty(Context.PROVIDER_URL, connectionUri);
1:0a12bcb:                     ctx = null;
1:0a12bcb:                     try {
1:0a12bcb:                         ctx = new InitialContext(props);
1:0a12bcb:                     } catch (NoClassDefFoundError e) {
1:0a12bcb:                         throw new NamingException(e.toString());
1:0a12bcb:                     } catch (Exception e) {
1:0a12bcb:                         throw new NamingException(e.toString());
1:0a12bcb:                     }
1:0a12bcb:                     Destination destination = (Destination) ctx.lookup("dynamicTopics/example.C");
1:0a12bcb:                     consumer = session.createConsumer(destination);
1:0a12bcb:                     consumer.receive(10000);
1:0a12bcb:                 } catch (Exception e) {
1:0a12bcb:                     // Expect an exception here from the interrupt.
1:0a12bcb:                 } finally {
1:0a12bcb:                     try {
1:0a12bcb:                         if (consumer != null) {
1:0a12bcb:                             consumer.close();
1:0a12bcb:                         }
1:0a12bcb:                     } catch (JMSException e) {
1:0a12bcb:                         trackException("Consumer Close failed with", e);
1:0a12bcb:                     }
1:0a12bcb:                     try {
1:0a12bcb:                         if (session != null) {
1:0a12bcb:                             session.close();
1:0a12bcb:                         }
1:0a12bcb:                     } catch (JMSException e) {
1:0a12bcb:                         trackException("Session Close failed with", e);
1:0a12bcb:                     }
1:0a12bcb:                     try {
1:0a12bcb:                         if (connection != null) {
1:0a12bcb:                             connection.close();
1:0a12bcb:                         }
1:0a12bcb:                     } catch (JMSException e) {
1:0a12bcb:                         trackException("Connection Close failed with", e);
1:0a12bcb:                     }
1:0a12bcb:                     try {
1:0a12bcb:                         if (ctx != null) {
1:0a12bcb:                             ctx.close();
1:0a12bcb:                         }
1:0a12bcb:                     } catch (Exception e) {
1:0a12bcb:                         trackException("Connection Close failed with", e);
1:0a12bcb:                     }
1:0a12bcb:                 }
1:0a12bcb:             }
1:0a12bcb: 
1:0a12bcb:             private void trackException(String s, Exception e) {
1:0a12bcb:                 LOG.error(s, e);
1:0a12bcb:                 this.error = e;
1:0a12bcb:             }
1:0a12bcb:         }
1:0a12bcb: 
1:0a12bcb:         final Random random = new Random();
1:0a12bcb:         List<ClientThread> threads = new LinkedList<ClientThread>();
1:0a12bcb:         for (int i=0;i<10;i++) {
1:0a12bcb:             threads.add(new ClientThread(tg, "Client-"+ i));
1:0a12bcb:         }
1:0a12bcb:         for (Thread thread : threads) {
1:0a12bcb:             thread.start();
1:0a12bcb:         }
1:0a12bcb:         // interrupt the threads at some random time
1:0a12bcb:         ExecutorService doTheInterrupts = Executors.newFixedThreadPool(threads.size());
1:0a12bcb:         for (final Thread thread : threads) {
1:0a12bcb:             doTheInterrupts.execute(new Runnable() {
1:0a12bcb:                 @Override
1:0a12bcb:                 public void run() {
1:0a12bcb:                     try {
1:0a12bcb:                         Thread.sleep(random.nextInt(5000));
1:0a12bcb:                     } catch (InterruptedException ignored) {
1:0a12bcb:                         ignored.printStackTrace();
1:0a12bcb:                     }
1:0a12bcb:                     thread.interrupt();
1:0a12bcb:                 }
1:0a12bcb:             });
1:0a12bcb:         }
1:0a12bcb:         doTheInterrupts.shutdown();
1:0a12bcb:         assertTrue("all interrupts done", doTheInterrupts.awaitTermination(30, TimeUnit.SECONDS));
1:0a12bcb: 
1:0a12bcb:         for (Thread thread : threads) {
1:0a12bcb:             thread.join();
1:0a12bcb:         }
1:0a12bcb: 
1:0a12bcb:         for (ClientThread thread : threads) {
1:0a12bcb:             if (thread.error != null) {
1:0a12bcb:                 LOG.info("Close error on thread: " + thread, thread.error);
1:0a12bcb:             }
1:0a12bcb:         }
1:0a12bcb: 
1:0a12bcb:         Thread[] remainThreads = new Thread[tg.activeCount()];
1:0a12bcb:         tg.enumerate(remainThreads);
1:0a12bcb:         for (final Thread t : remainThreads) {
1:0a12bcb:             if (t != null && t.isAlive() && !t.isDaemon())
1:0a12bcb:                 assertTrue("Thread completes:" + t, Wait.waitFor(new Wait.Condition() {
1:0a12bcb:                     @Override
1:0a12bcb:                     public boolean isSatisified() throws Exception {
1:0a12bcb:                         LOG.info("Remaining thread: " + t.toString());
1:0a12bcb:                         return !t.isAlive();
1:0a12bcb:                     }
1:0a12bcb:                 }));
1:0a12bcb:         }
1:0a12bcb: 
1:0a12bcb:         ThreadGroup root = Thread.currentThread().getThreadGroup().getParent();
1:0a12bcb:         while (root.getParent() != null) {
1:0a12bcb:             root = root.getParent();
1:0a12bcb:         }
1:0a12bcb:         visit(root, 0);
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     // This method recursively visits all thread groups under `group'.
1:0a12bcb:     public static void visit(ThreadGroup group, int level) {
1:0a12bcb:         // Get threads in `group'
1:0a12bcb:         int numThreads = group.activeCount();
1:0a12bcb:         Thread[] threads = new Thread[numThreads * 2];
1:0a12bcb:         numThreads = group.enumerate(threads, false);
1:0a12bcb: 
1:0a12bcb:         // Enumerate each thread in `group'
1:0a12bcb:         for (int i = 0; i < numThreads; i++) {
1:0a12bcb:             // Get thread
1:0a12bcb:             Thread thread = threads[i];
1:0a12bcb:             LOG.debug("Thread:" + thread.getName() + " is still running");
1:0a12bcb:         }
1:0a12bcb: 
1:0a12bcb:         // Get thread subgroups of `group'
1:0a12bcb:         int numGroups = group.activeGroupCount();
1:0a12bcb:         ThreadGroup[] groups = new ThreadGroup[numGroups * 2];
1:0a12bcb:         numGroups = group.enumerate(groups, false);
1:0a12bcb: 
1:0a12bcb:         // Recursively visit each subgroup
1:0a12bcb:         for (int i = 0; i < numGroups; i++) {
1:0a12bcb:             visit(groups[i], level + 1);
1:0a12bcb:         }
1:0a12bcb:     }
1:0a12bcb: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0a12bcb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  *
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Properties;
1: import java.util.Random;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.NamingException;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static junit.framework.TestCase.assertTrue;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: public class AMQ3529v2Test {
1: 
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ3529v2Test.class);
1: 
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testRandomInterruptionAffects() throws Exception {
1:         doTestRandomInterruptionAffects();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testRandomInterruptionAffectsWithFailover() throws Exception {
1:         connectionUri = "failover:(" + connectionUri + ")";
1:         doTestRandomInterruptionAffects();
1:     }
1: 
1:     public void doTestRandomInterruptionAffects() throws Exception {
1:         final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1: 
1:         ThreadGroup tg = new ThreadGroup("tg");
1: 
1:         assertEquals(0, tg.activeCount());
1: 
1:         class ClientThread extends Thread {
1: 
1:             public Exception error;
1: 
1:             public ClientThread(ThreadGroup tg, String name) {
1:                 super(tg, name);
1:             }
1: 
1:             @Override
1:             public void run() {
1:                 Context ctx = null;
1:                 Connection connection = null;
1:                 Session session = null;
1:                 MessageConsumer consumer = null;
1: 
1:                 try {
1:                     connection = connectionFactory.createConnection();
1:                     session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     assertNotNull(session);
1: 
1:                     Properties props = new Properties();
1:                     props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
1:                     props.setProperty(Context.PROVIDER_URL, connectionUri);
1:                     ctx = null;
1:                     try {
1:                         ctx = new InitialContext(props);
1:                     } catch (NoClassDefFoundError e) {
1:                         throw new NamingException(e.toString());
1:                     } catch (Exception e) {
1:                         throw new NamingException(e.toString());
1:                     }
1:                     Destination destination = (Destination) ctx.lookup("dynamicTopics/example.C");
1:                     consumer = session.createConsumer(destination);
1:                     consumer.receive(10000);
1:                 } catch (Exception e) {
1:                     // Expect an exception here from the interrupt.
1:                 } finally {
1:                     try {
1:                         if (consumer != null) {
1:                             consumer.close();
1:                         }
1:                     } catch (JMSException e) {
1:                         trackException("Consumer Close failed with", e);
1:                     }
1:                     try {
1:                         if (session != null) {
1:                             session.close();
1:                         }
1:                     } catch (JMSException e) {
1:                         trackException("Session Close failed with", e);
1:                     }
1:                     try {
1:                         if (connection != null) {
1:                             connection.close();
1:                         }
1:                     } catch (JMSException e) {
1:                         trackException("Connection Close failed with", e);
1:                     }
1:                     try {
1:                         if (ctx != null) {
1:                             ctx.close();
1:                         }
1:                     } catch (Exception e) {
1:                         trackException("Connection Close failed with", e);
1:                     }
1:                 }
1:             }
1: 
1:             private void trackException(String s, Exception e) {
1:                 LOG.error(s, e);
1:                 this.error = e;
1:             }
1:         }
1: 
1:         final Random random = new Random();
1:         List<ClientThread> threads = new LinkedList<ClientThread>();
1:         for (int i=0;i<10;i++) {
1:             threads.add(new ClientThread(tg, "Client-"+ i));
1:         }
1:         for (Thread thread : threads) {
1:             thread.start();
1:         }
1:         // interrupt the threads at some random time
1:         ExecutorService doTheInterrupts = Executors.newFixedThreadPool(threads.size());
1:         for (final Thread thread : threads) {
1:             doTheInterrupts.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         Thread.sleep(random.nextInt(5000));
1:                     } catch (InterruptedException ignored) {
1:                         ignored.printStackTrace();
1:                     }
1:                     thread.interrupt();
1:                 }
1:             });
1:         }
1:         doTheInterrupts.shutdown();
1:         assertTrue("all interrupts done", doTheInterrupts.awaitTermination(30, TimeUnit.SECONDS));
1: 
1:         for (Thread thread : threads) {
1:             thread.join();
1:         }
1: 
1:         for (ClientThread thread : threads) {
1:             if (thread.error != null) {
1:                 LOG.info("Close error on thread: " + thread, thread.error);
1:             }
1:         }
1: 
1:         Thread[] remainThreads = new Thread[tg.activeCount()];
1:         tg.enumerate(remainThreads);
1:         for (final Thread t : remainThreads) {
1:             if (t != null && t.isAlive() && !t.isDaemon())
1:                 assertTrue("Thread completes:" + t, Wait.waitFor(new Wait.Condition() {
1:                     @Override
1:                     public boolean isSatisified() throws Exception {
1:                         LOG.info("Remaining thread: " + t.toString());
1:                         return !t.isAlive();
1:                     }
1:                 }));
1:         }
1: 
1:         ThreadGroup root = Thread.currentThread().getThreadGroup().getParent();
1:         while (root.getParent() != null) {
1:             root = root.getParent();
1:         }
1:         visit(root, 0);
1:     }
1: 
1:     // This method recursively visits all thread groups under `group'.
1:     public static void visit(ThreadGroup group, int level) {
1:         // Get threads in `group'
1:         int numThreads = group.activeCount();
1:         Thread[] threads = new Thread[numThreads * 2];
1:         numThreads = group.enumerate(threads, false);
1: 
1:         // Enumerate each thread in `group'
1:         for (int i = 0; i < numThreads; i++) {
1:             // Get thread
1:             Thread thread = threads[i];
1:             LOG.debug("Thread:" + thread.getName() + " is still running");
1:         }
1: 
1:         // Get thread subgroups of `group'
1:         int numGroups = group.activeGroupCount();
1:         ThreadGroup[] groups = new ThreadGroup[numGroups * 2];
1:         numGroups = group.enumerate(groups, false);
1: 
1:         // Recursively visit each subgroup
1:         for (int i = 0; i < numGroups; i++) {
1:             visit(groups[i], level + 1);
1:         }
1:     }
1: }
============================================================================