1:8f4ebbb: /**
1:8f4ebbb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8f4ebbb:  * contributor license agreements.  See the NOTICE file distributed with
1:8f4ebbb:  * this work for additional information regarding copyright ownership.
1:8f4ebbb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8f4ebbb:  * (the "License"); you may not use this file except in compliance with
1:8f4ebbb:  * the License.  You may obtain a copy of the License at
1:8f4ebbb:  *
1:8f4ebbb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8f4ebbb:  *
1:8f4ebbb:  * Unless required by applicable law or agreed to in writing, software
1:8f4ebbb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8f4ebbb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8f4ebbb:  * See the License for the specific language governing permissions and
1:8f4ebbb:  * limitations under the License.
1:8f4ebbb:  */
1:8f4ebbb: package org.apache.activemq.broker.view;
14:8f4ebbb: 
1:8f4ebbb: import org.apache.activemq.broker.region.Destination;
1:8f4ebbb: 
1:8f4ebbb: public class BrokerDestinationView {
1:8f4ebbb:     private final Destination destination;
1:8f4ebbb: 
1:8f4ebbb: 
1:56070af:      BrokerDestinationView(Destination destination) {
1:8f4ebbb:         this.destination = destination;
4:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the name of the DestinationView
1:56070af:      */
1:8f4ebbb:     public String getName() {
1:8f4ebbb:         return destination.getName();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the number of messages enqueued by this destination
1:56070af:      */
1:8f4ebbb: 
1:8f4ebbb:     public long getEnqueueCount() {
1:8f4ebbb:         return destination.getDestinationStatistics().getEnqueues().getCount();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the number of messages dequeued (dispatched and removed) by this destination
1:56070af:      */
1:8f4ebbb:     public long getDequeueCount() {
1:8f4ebbb:         return destination.getDestinationStatistics().getDequeues().getCount();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the number of messages dispatched by this destination
1:56070af:      */
1:8f4ebbb:     public long getDispatchCount() {
1:8f4ebbb:         return destination.getDestinationStatistics().getDispatched().getCount();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the number of messages inflight (dispatched by not acknowledged) by this destination
1:56070af:      */
1:8f4ebbb:     public long getInFlightCount() {
1:8f4ebbb:         return destination.getDestinationStatistics().getInflight().getCount();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the number of messages expired by this destination
1:56070af:      */
1:8f4ebbb:     public long getExpiredCount() {
1:8f4ebbb:         return destination.getDestinationStatistics().getExpired().getCount();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the number of active consumers on this destination
1:56070af:      */
1:56070af:     public int getConsumerCount() {
1:56070af:         return (int)destination.getDestinationStatistics().getConsumers().getCount();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the number of active consumers on this destination
1:56070af:      */
1:56070af:     public int getProducerCount() {
1:56070af:         return (int)destination.getDestinationStatistics().getProducers().getCount();
1:56070af:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the depth of the Destination
1:56070af:      */
1:8f4ebbb:     public long getQueueSize() {
1:8f4ebbb:         return destination.getDestinationStatistics().getMessages().getCount();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the number of messages cached in memory by this destination
1:56070af:      */
1:8f4ebbb:     public long getMessagesCached() {
1:8f4ebbb:         return destination.getDestinationStatistics().getMessagesCached().getCount();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the memory usage as a percentage for this Destination
1:56070af:      */
1:8f4ebbb:     public int getMemoryPercentUsage() {
1:8f4ebbb:         return destination.getMemoryUsage().getPercentUsage();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the memory used by this destination in bytes
1:56070af:      */
1:8f4ebbb:     public long getMemoryUsageByteCount() {
1:8f4ebbb:         return destination.getMemoryUsage().getUsage();
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return  the memory limit for this destination in bytes
1:56070af:      */
1:8f4ebbb:     public long getMemoryLimit() {
1:8f4ebbb:         return destination.getMemoryUsage().getLimit();
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the average time it takes to store a message on this destination (ms)
1:56070af:      */
1:8f4ebbb:     public double getAverageEnqueueTime() {
1:8f4ebbb:         return destination.getDestinationStatistics().getProcessTime().getAverageTime();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the maximum time it takes to store a message on this destination (ms)
1:56070af:      */
1:8f4ebbb:     public long getMaxEnqueueTime() {
1:8f4ebbb:         return destination.getDestinationStatistics().getProcessTime().getMaxTime();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the minimum time it takes to store a message on this destination (ms)
1:56070af:      */
1:8f4ebbb: 
1:8f4ebbb:     public long getMinEnqueueTime() {
1:8f4ebbb:         return destination.getDestinationStatistics().getProcessTime().getMinTime();
1:8f4ebbb:     }
1:8f4ebbb: 
1:f71e2fe:     /**
1:f71e2fe:      * @return the average size of a message (bytes)
1:f71e2fe:      */
1:f71e2fe:     public double getAverageMessageSize() {
1:f71e2fe:         return destination.getDestinationStatistics().getMessageSize().getAverageSize();
1:f71e2fe:     }
1:f71e2fe: 
1:f71e2fe:     /**
1:f71e2fe:       * @return the max size of a message (bytes)
1:f71e2fe:     */
1:f71e2fe:     public long getMaxMessageSize() {
1:f71e2fe:         return destination.getDestinationStatistics().getMessageSize().getMaxSize();
1:f71e2fe:     }
1:f71e2fe: 
1:f71e2fe:     /**
1:f71e2fe:      * @return the min size of a message (bytes)
1:f71e2fe:      */
1:f71e2fe:     public long getMinMessageSize() {
1:f71e2fe:         return destination.getDestinationStatistics().getMessageSize().getMinSize();
1:f71e2fe:     }
1:f71e2fe: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return true if the destination is a Dead Letter Queue
1:56070af:      */
1:8f4ebbb:     public boolean isDLQ() {
1:be919fb:         return destination.getActiveMQDestination().isDLQ();
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the number of messages blocked waiting for dispatch (indication of slow consumption if greater than zero)
1:56070af:      */
1:8f4ebbb:     public long getBlockedSends() {
1:8f4ebbb:         return destination.getDestinationStatistics().getBlockedSends().getCount();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the average time(ms) messages are  blocked waiting for dispatch (indication of slow consumption if greater than zero)
1:56070af:      */
1:8f4ebbb: 
1:8f4ebbb:     public double getAverageBlockedTime() {
1:8f4ebbb:         return destination.getDestinationStatistics().getBlockedTime().getAverageTime();
1:8f4ebbb:     }
1:8f4ebbb: 
1:56070af:     /**
1:56070af:      * @return the total time(ms) messages are  blocked waiting for dispatch (indication of slow consumption if greater than zero)
1:56070af:      */
1:8f4ebbb: 
1:8f4ebbb:     public long getTotalBlockedTime() {
1:8f4ebbb:         return destination.getDestinationStatistics().getBlockedTime().getTotalTime();
1:8f4ebbb:     }
1:8f4ebbb: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:be919fb
/////////////////////////////////////////////////////////////////////////
1:         return destination.getActiveMQDestination().isDLQ();
author:Robert Davies
-------------------------------------------------------------------------------
commit:f71e2fe
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the average size of a message (bytes)
1:      */
1:     public double getAverageMessageSize() {
1:         return destination.getDestinationStatistics().getMessageSize().getAverageSize();
1:     }
1: 
1:     /**
1:       * @return the max size of a message (bytes)
1:     */
1:     public long getMaxMessageSize() {
1:         return destination.getDestinationStatistics().getMessageSize().getMaxSize();
1:     }
1: 
1:     /**
1:      * @return the min size of a message (bytes)
1:      */
1:     public long getMinMessageSize() {
1:         return destination.getDestinationStatistics().getMessageSize().getMinSize();
1:     }
1: 
commit:56070af
/////////////////////////////////////////////////////////////////////////
1:      BrokerDestinationView(Destination destination) {
1:     /**
1:      * @return the name of the DestinationView
1:      */
1:     /**
1:      * @return the number of messages enqueued by this destination
1:      */
1:     /**
1:      * @return the number of messages dequeued (dispatched and removed) by this destination
1:      */
1:     /**
1:      * @return the number of messages dispatched by this destination
1:      */
1:     /**
1:      * @return the number of messages inflight (dispatched by not acknowledged) by this destination
1:      */
1:     /**
1:      * @return the number of messages expired by this destination
1:      */
1:     /**
1:      * @return the number of active consumers on this destination
1:      */
1:     public int getConsumerCount() {
1:         return (int)destination.getDestinationStatistics().getConsumers().getCount();
1:     /**
1:      * @return the number of active consumers on this destination
1:      */
1:     public int getProducerCount() {
1:         return (int)destination.getDestinationStatistics().getProducers().getCount();
1:     }
1:     /**
1:      * @return the depth of the Destination
1:      */
1:     /**
1:      * @return the number of messages cached in memory by this destination
1:      */
1:     /**
1:      * @return the memory usage as a percentage for this Destination
1:      */
1:     /**
1:      * @return the memory used by this destination in bytes
1:      */
1:     /**
1:      * @return  the memory limit for this destination in bytes
1:      */
1:     /**
1:      * @return the average time it takes to store a message on this destination (ms)
1:      */
1:     /**
1:      * @return the maximum time it takes to store a message on this destination (ms)
1:      */
1:     /**
1:      * @return the minimum time it takes to store a message on this destination (ms)
1:      */
1:     /**
1:      * @return true if the destination is a Dead Letter Queue
1:      */
1:     /**
1:      * @return the number of messages blocked waiting for dispatch (indication of slow consumption if greater than zero)
1:      */
1:     /**
1:      * @return the average time(ms) messages are  blocked waiting for dispatch (indication of slow consumption if greater than zero)
1:      */
1:     /**
1:      * @return the total time(ms) messages are  blocked waiting for dispatch (indication of slow consumption if greater than zero)
1:      */
commit:8f4ebbb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.view;
1: 
1: import org.apache.activemq.broker.region.Destination;
1: 
1: public class BrokerDestinationView {
1:     private final Destination destination;
1: 
1: 
0:     public BrokerDestinationView(Destination destination) {
1:         this.destination = destination;
1:     }
1: 
1: 
1: 
1:     public String getName() {
1:         return destination.getName();
1:     }
1: 
1: 
1:     public long getEnqueueCount() {
1:         return destination.getDestinationStatistics().getEnqueues().getCount();
1:     }
1: 
1:     public long getDequeueCount() {
1:         return destination.getDestinationStatistics().getDequeues().getCount();
1:     }
1: 
1: 
1:     public long getDispatchCount() {
1:         return destination.getDestinationStatistics().getDispatched().getCount();
1:     }
1: 
1: 
1:     public long getInFlightCount() {
1:         return destination.getDestinationStatistics().getInflight().getCount();
1:     }
1: 
1: 
1:     public long getExpiredCount() {
1:         return destination.getDestinationStatistics().getExpired().getCount();
1:     }
1: 
1: 
0:     public long getConsumerCount() {
0:         return destination.getDestinationStatistics().getConsumers().getCount();
1:     }
1: 
1: 
1:     public long getQueueSize() {
1:         return destination.getDestinationStatistics().getMessages().getCount();
1:     }
1: 
1:     public long getMessagesCached() {
1:         return destination.getDestinationStatistics().getMessagesCached().getCount();
1:     }
1: 
1: 
1:     public int getMemoryPercentUsage() {
1:         return destination.getMemoryUsage().getPercentUsage();
1:     }
1: 
1: 
1:     public long getMemoryUsageByteCount() {
1:         return destination.getMemoryUsage().getUsage();
1:     }
1: 
1: 
1:     public long getMemoryLimit() {
1:         return destination.getMemoryUsage().getLimit();
1:     }
1: 
1: 
0:     public void setMemoryLimit(long limit) {
0:         destination.getMemoryUsage().setLimit(limit);
1:     }
1: 
1: 
1:     public double getAverageEnqueueTime() {
1:         return destination.getDestinationStatistics().getProcessTime().getAverageTime();
1:     }
1: 
1: 
1:     public long getMaxEnqueueTime() {
1:         return destination.getDestinationStatistics().getProcessTime().getMaxTime();
1:     }
1: 
1: 
1:     public long getMinEnqueueTime() {
1:         return destination.getDestinationStatistics().getProcessTime().getMinTime();
1:     }
1: 
1: 
0:     public float getMemoryUsagePortion() {
0:         return destination.getMemoryUsage().getUsagePortion();
1:     }
1: 
0:     public long getProducerCount() {
0:         return destination.getDestinationStatistics().getProducers().getCount();
1:     }
1: 
1: 
1:     public boolean isDLQ() {
0:         return destination.isDLQ();
1:     }
1: 
1: 
1:     public long getBlockedSends() {
1:         return destination.getDestinationStatistics().getBlockedSends().getCount();
1:     }
1: 
1: 
1:     public double getAverageBlockedTime() {
1:         return destination.getDestinationStatistics().getBlockedTime().getAverageTime();
1:     }
1: 
1: 
1:     public long getTotalBlockedTime() {
1:         return destination.getDestinationStatistics().getBlockedTime().getTotalTime();
1:     }
1: }
============================================================================