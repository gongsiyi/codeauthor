1:f91abd3: /**
1:f91abd3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f91abd3:  * contributor license agreements.  See the NOTICE file distributed with
1:f91abd3:  * this work for additional information regarding copyright ownership.
1:f91abd3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f91abd3:  * (the "License"); you may not use this file except in compliance with
1:f91abd3:  * the License.  You may obtain a copy of the License at
1:f91abd3:  *
1:f91abd3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f91abd3:  *
1:f91abd3:  * Unless required by applicable law or agreed to in writing, software
1:f91abd3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f91abd3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f91abd3:  * See the License for the specific language governing permissions and
1:f91abd3:  * limitations under the License.
1:f91abd3:  */
1:f91abd3: package org.apache.activemq.jms.pool;
1:f91abd3: 
1:f91abd3: import javax.jms.JMSException;
1:f91abd3: import javax.jms.MessageProducer;
1:f91abd3: import javax.jms.QueueSender;
1:f91abd3: import javax.jms.QueueSession;
1:f91abd3: import javax.jms.Session;
1:f91abd3: import javax.jms.TopicPublisher;
1:f91abd3: import javax.jms.TopicSession;
1:f91abd3: 
1:f91abd3: /**
1:f91abd3:  * Used to store a pooled session instance and any resources that can
1:f91abd3:  * be left open and carried along with the pooled instance such as the
1:f91abd3:  * anonymous producer used for all MessageProducer instances created
1:f91abd3:  * from this pooled session when enabled.
1:f91abd3:  */
1:f91abd3: public class SessionHolder {
1:f91abd3: 
1:f91abd3:     private final Session session;
1:f91abd3:     private MessageProducer producer;
1:f91abd3:     private TopicPublisher publisher;
1:f91abd3:     private QueueSender sender;
1:f91abd3: 
1:f91abd3:     public SessionHolder(Session session) {
1:f91abd3:         this.session = session;
1:f91abd3:     }
1:f91abd3: 
1:f91abd3:     public void close() throws JMSException {
1:f91abd3:         try {
1:f91abd3:             session.close();
1:f91abd3:         } finally {
1:f91abd3:             producer = null;
1:f91abd3:             publisher = null;
1:f91abd3:             sender = null;
1:f91abd3:         }
1:f91abd3:     }
1:f91abd3: 
1:f91abd3:     public Session getSession() {
1:f91abd3:         return session;
1:f91abd3:     }
1:f91abd3: 
1:f91abd3:     public MessageProducer getOrCreateProducer() throws JMSException {
1:f91abd3:         if (producer == null) {
1:f91abd3:             synchronized (this) {
1:f91abd3:                 if (producer == null) {
1:f91abd3:                     producer = session.createProducer(null);
1:f91abd3:                 }
1:f91abd3:             }
1:f91abd3:         }
1:f91abd3: 
1:f91abd3:         return producer;
1:f91abd3:     }
1:f91abd3: 
1:f91abd3:     public TopicPublisher getOrCreatePublisher() throws JMSException {
1:f91abd3:         if (publisher == null) {
1:f91abd3:             synchronized (this) {
1:f91abd3:                 if (publisher == null) {
1:f91abd3:                     publisher = ((TopicSession) session).createPublisher(null);
1:f91abd3:                 }
1:f91abd3:             }
1:f91abd3:         }
1:f91abd3: 
1:f91abd3:         return publisher;
1:f91abd3:     }
1:f91abd3: 
1:f91abd3:     public QueueSender getOrCreateSender() throws JMSException {
1:f91abd3:         if (sender == null) {
1:f91abd3:             synchronized (this) {
1:f91abd3:                 if (sender == null) {
1:f91abd3:                     sender = ((QueueSession) session).createSender(null);
1:f91abd3:                 }
1:f91abd3:             }
1:f91abd3:         }
1:f91abd3: 
1:f91abd3:         return sender;
1:f91abd3:     }
1:f91abd3: 
1:f91abd3:     @Override
1:f91abd3:     public String toString() {
1:f91abd3:         return session.toString();
1:f91abd3:     }
1:f91abd3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f91abd3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jms.pool;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.QueueSender;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: 
1: /**
1:  * Used to store a pooled session instance and any resources that can
1:  * be left open and carried along with the pooled instance such as the
1:  * anonymous producer used for all MessageProducer instances created
1:  * from this pooled session when enabled.
1:  */
1: public class SessionHolder {
1: 
1:     private final Session session;
1:     private MessageProducer producer;
1:     private TopicPublisher publisher;
1:     private QueueSender sender;
1: 
1:     public SessionHolder(Session session) {
1:         this.session = session;
1:     }
1: 
1:     public void close() throws JMSException {
1:         try {
1:             session.close();
1:         } finally {
1:             producer = null;
1:             publisher = null;
1:             sender = null;
1:         }
1:     }
1: 
1:     public Session getSession() {
1:         return session;
1:     }
1: 
1:     public MessageProducer getOrCreateProducer() throws JMSException {
1:         if (producer == null) {
1:             synchronized (this) {
1:                 if (producer == null) {
1:                     producer = session.createProducer(null);
1:                 }
1:             }
1:         }
1: 
1:         return producer;
1:     }
1: 
1:     public TopicPublisher getOrCreatePublisher() throws JMSException {
1:         if (publisher == null) {
1:             synchronized (this) {
1:                 if (publisher == null) {
1:                     publisher = ((TopicSession) session).createPublisher(null);
1:                 }
1:             }
1:         }
1: 
1:         return publisher;
1:     }
1: 
1:     public QueueSender getOrCreateSender() throws JMSException {
1:         if (sender == null) {
1:             synchronized (this) {
1:                 if (sender == null) {
1:                     sender = ((QueueSession) session).createSender(null);
1:                 }
1:             }
1:         }
1: 
1:         return sender;
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return session.toString();
1:     }
1: }
============================================================================