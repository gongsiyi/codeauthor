1:85bb229: /**
1:85bb229:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:85bb229:  * contributor license agreements.  See the NOTICE file distributed with
1:85bb229:  * this work for additional information regarding copyright ownership.
1:85bb229:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:85bb229:  * (the "License"); you may not use this file except in compliance with
1:85bb229:  * the License.  You may obtain a copy of the License at
1:85bb229:  *
1:85bb229:  *      http://www.apache.org/licenses/LICENSE-2.0
1:85bb229:  *
1:85bb229:  * Unless required by applicable law or agreed to in writing, software
1:85bb229:  * distributed under the License is distributed on an "AS IS" BASIS,
1:85bb229:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:85bb229:  * See the License for the specific language governing permissions and
1:85bb229:  * limitations under the License.
1:85bb229:  */
1:85bb229: 
1:85bb229: package org.apache.activemq.broker.scheduler;
1:85bb229: 
1:85bb229: import static org.junit.Assert.assertEquals;
1:85bb229: import static org.junit.Assert.assertTrue;
1:85bb229: 
1:85bb229: import java.io.File;
1:85bb229: import java.util.concurrent.TimeUnit;
1:85bb229: import java.util.concurrent.atomic.AtomicLong;
1:85bb229: 
1:85bb229: import javax.jms.Connection;
1:85bb229: import javax.jms.ConnectionFactory;
1:85bb229: import javax.jms.Message;
1:85bb229: import javax.jms.MessageConsumer;
1:85bb229: import javax.jms.MessageListener;
1:85bb229: import javax.jms.MessageProducer;
1:85bb229: import javax.jms.Session;
1:85bb229: 
1:85bb229: import org.apache.activemq.ActiveMQConnectionFactory;
1:85bb229: import org.apache.activemq.ScheduledMessage;
1:85bb229: import org.apache.activemq.broker.BrokerService;
1:85bb229: import org.apache.activemq.util.IOHelper;
1:85bb229: import org.apache.log4j.BasicConfigurator;
1:85bb229: import org.junit.After;
1:85bb229: import org.junit.Before;
1:85bb229: import org.junit.Test;
1:85bb229: 
1:85bb229: public class LostScheduledMessagesTest {
1:85bb229: 
1:85bb229:     private BrokerService broker;
1:85bb229: 
1:85bb229:     private static final File schedulerDirectory = new File("target/test/ScheduledDB");
1:85bb229:     private static final File messageDirectory = new File("target/test/MessageDB");
1:85bb229:     private static final String QUEUE_NAME = "test";
1:85bb229: 
1:85bb229:     @Before
1:85bb229:     public void setup() throws Exception {
1:85bb229:         IOHelper.mkdirs(schedulerDirectory);
1:85bb229:         IOHelper.deleteChildren(schedulerDirectory);
1:85bb229: 
1:85bb229:         IOHelper.mkdirs(messageDirectory);
1:85bb229:         IOHelper.deleteChildren(messageDirectory);
1:85bb229:     }
1:85bb229: 
1:85bb229:     private void startBroker() throws Exception {
1:85bb229:         broker = new BrokerService();
1:85bb229:         broker.setSchedulerSupport(true);
1:85bb229:         broker.setPersistent(true);
1:85bb229:         broker.setDeleteAllMessagesOnStartup(false);
1:85bb229:         broker.setDataDirectory("target");
1:85bb229:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1:85bb229:         broker.setDataDirectoryFile(messageDirectory);
1:85bb229:         broker.setUseJmx(false);
1:85bb229:         broker.addConnector("vm://localhost");
1:85bb229:         broker.start();
1:85bb229:     }
1:85bb229: 
1:85bb229:     @After
1:85bb229:     public void tearDown() throws Exception {
1:85bb229:         broker.stop();
1:85bb229:         BasicConfigurator.resetConfiguration();
1:85bb229:     }
1:85bb229: 
1:85bb229:     @Test
1:85bb229:     public void MessagePassedNotUsingScheduling() throws Exception {
1:85bb229:         doTest(false);
1:85bb229:     }
1:85bb229: 
1:85bb229:     @Test
1:85bb229:     public void MessageLostWhenUsingScheduling() throws Exception {
1:85bb229:         doTest(true);
1:85bb229:     }
1:85bb229: 
1:85bb229:     private void doTest(boolean useScheduling) throws Exception {
1:85bb229: 
1:85bb229:         int DELIVERY_DELAY_MS = 5000;
1:85bb229: 
1:85bb229:         startBroker();
1:85bb229: 
1:85bb229:         long startTime = System.currentTimeMillis();
1:85bb229: 
1:85bb229:         // Send a message scheduled for delivery in 5 seconds
1:85bb229:         ConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:85bb229:         Connection connection = cf.createConnection();
1:85bb229:         connection.start();
1:85bb229:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:85bb229:         MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:85bb229:         Message message = session.createTextMessage("test");
1:85bb229:         if (useScheduling) {
1:85bb229:             message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, DELIVERY_DELAY_MS);
1:85bb229:         }
1:85bb229:         producer.send(message);
1:85bb229: 
1:85bb229:         session.close();
1:85bb229:         connection.close();
1:85bb229: 
1:85bb229:         broker.getServices();
1:85bb229: 
1:85bb229:         // shut down broker
1:85bb229:         broker.stop();
1:85bb229:         broker.waitUntilStopped();
1:85bb229: 
1:85bb229:         // Make sure that broker have stopped within delivery delay
1:85bb229:         long shutdownTime = System.currentTimeMillis();
1:85bb229:         assertTrue("Failed to shut down broker in expected time. Test results inconclusive", shutdownTime - startTime < DELIVERY_DELAY_MS);
1:85bb229: 
1:85bb229:         // make sure that delivery falls into down time window
1:85bb229:         TimeUnit.MILLISECONDS.sleep(DELIVERY_DELAY_MS);
1:85bb229: 
1:85bb229:         // Start new broker instance
1:85bb229:         startBroker();
1:85bb229: 
1:85bb229:         final AtomicLong receiveCounter = new AtomicLong();
1:85bb229: 
1:85bb229:         cf = new ActiveMQConnectionFactory("vm://localhost");
1:85bb229:         connection = cf.createConnection();
1:85bb229:         connection.start();
1:85bb229:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:85bb229: 
1:85bb229:         MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:85bb229:         consumer.setMessageListener(new MessageListener() {
1:85bb229: 
1:85bb229:             @Override
1:85bb229:             public void onMessage(Message message) {
1:85bb229:                 receiveCounter.incrementAndGet();
1:85bb229:             }
1:85bb229:         });
1:85bb229: 
1:85bb229:         // Wait for a while to let MQ process the message
1:85bb229:         TimeUnit.MILLISECONDS.sleep(DELIVERY_DELAY_MS * 2);
1:85bb229: 
1:85bb229:         session.close();
1:85bb229:         connection.close();
1:85bb229: 
1:85bb229:         assertEquals(1, receiveCounter.get());
1:85bb229:     }
1:85bb229: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:85bb229
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.scheduler;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.log4j.BasicConfigurator;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class LostScheduledMessagesTest {
1: 
1:     private BrokerService broker;
1: 
1:     private static final File schedulerDirectory = new File("target/test/ScheduledDB");
1:     private static final File messageDirectory = new File("target/test/MessageDB");
1:     private static final String QUEUE_NAME = "test";
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         IOHelper.mkdirs(schedulerDirectory);
1:         IOHelper.deleteChildren(schedulerDirectory);
1: 
1:         IOHelper.mkdirs(messageDirectory);
1:         IOHelper.deleteChildren(messageDirectory);
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setSchedulerSupport(true);
1:         broker.setPersistent(true);
1:         broker.setDeleteAllMessagesOnStartup(false);
1:         broker.setDataDirectory("target");
1:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1:         broker.setDataDirectoryFile(messageDirectory);
1:         broker.setUseJmx(false);
1:         broker.addConnector("vm://localhost");
1:         broker.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:         BasicConfigurator.resetConfiguration();
1:     }
1: 
1:     @Test
1:     public void MessagePassedNotUsingScheduling() throws Exception {
1:         doTest(false);
1:     }
1: 
1:     @Test
1:     public void MessageLostWhenUsingScheduling() throws Exception {
1:         doTest(true);
1:     }
1: 
1:     private void doTest(boolean useScheduling) throws Exception {
1: 
1:         int DELIVERY_DELAY_MS = 5000;
1: 
1:         startBroker();
1: 
1:         long startTime = System.currentTimeMillis();
1: 
1:         // Send a message scheduled for delivery in 5 seconds
1:         ConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:         Message message = session.createTextMessage("test");
1:         if (useScheduling) {
1:             message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, DELIVERY_DELAY_MS);
1:         }
1:         producer.send(message);
1: 
1:         session.close();
1:         connection.close();
1: 
1:         broker.getServices();
1: 
1:         // shut down broker
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:         // Make sure that broker have stopped within delivery delay
1:         long shutdownTime = System.currentTimeMillis();
1:         assertTrue("Failed to shut down broker in expected time. Test results inconclusive", shutdownTime - startTime < DELIVERY_DELAY_MS);
1: 
1:         // make sure that delivery falls into down time window
1:         TimeUnit.MILLISECONDS.sleep(DELIVERY_DELAY_MS);
1: 
1:         // Start new broker instance
1:         startBroker();
1: 
1:         final AtomicLong receiveCounter = new AtomicLong();
1: 
1:         cf = new ActiveMQConnectionFactory("vm://localhost");
1:         connection = cf.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 receiveCounter.incrementAndGet();
1:             }
1:         });
1: 
1:         // Wait for a while to let MQ process the message
1:         TimeUnit.MILLISECONDS.sleep(DELIVERY_DELAY_MS * 2);
1: 
1:         session.close();
1:         connection.close();
1: 
1:         assertEquals(1, receiveCounter.get());
1:     }
1: }
============================================================================