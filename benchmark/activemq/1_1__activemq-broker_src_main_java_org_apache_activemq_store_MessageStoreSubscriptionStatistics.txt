1:cf3d419: /**
1:cf3d419:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cf3d419:  * contributor license agreements.  See the NOTICE file distributed with
1:cf3d419:  * this work for additional information regarding copyright ownership.
1:cf3d419:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cf3d419:  * (the "License"); you may not use this file except in compliance with
1:cf3d419:  * the License.  You may obtain a copy of the License at
1:cf3d419:  *
1:cf3d419:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cf3d419:  *
1:cf3d419:  * Unless required by applicable law or agreed to in writing, software
1:cf3d419:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cf3d419:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cf3d419:  * See the License for the specific language governing permissions and
1:cf3d419:  * limitations under the License.
1:cf3d419:  */
1:cf3d419: 
1:cf3d419: package org.apache.activemq.store;
1:cf3d419: 
1:cf3d419: import java.util.concurrent.ConcurrentHashMap;
1:cf3d419: import java.util.concurrent.ConcurrentMap;
1:cf3d419: 
1:cf3d419: import org.apache.activemq.management.CountStatisticImpl;
1:cf3d419: import org.apache.activemq.management.SizeStatisticImpl;
1:cf3d419: 
1:cf3d419: public class MessageStoreSubscriptionStatistics extends AbstractMessageStoreStatistics {
1:cf3d419: 
1:cf3d419:     private final ConcurrentMap<String, SubscriptionStatistics> subStatistics
1:cf3d419:         = new ConcurrentHashMap<>();
1:cf3d419: 
1:cf3d419:     /**
1:cf3d419:      * @param enabled
1:cf3d419:      * @param countDescription
1:cf3d419:      * @param sizeDescription
1:cf3d419:      */
1:cf3d419:     public MessageStoreSubscriptionStatistics(boolean enabled) {
1:cf3d419:         super(enabled, "The number of messages or this subscription in the message store",
1:cf3d419:                 "Size of messages contained by this subscription in the message store");
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     /**
1:cf3d419:      * Total count for all subscriptions
1:cf3d419:      */
1:cf3d419:     @Override
1:cf3d419:     public CountStatisticImpl getMessageCount() {
1:cf3d419:         return this.messageCount;
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     /**
1:cf3d419:      * Total size for all subscriptions
1:cf3d419:      */
1:cf3d419:     @Override
1:cf3d419:     public SizeStatisticImpl getMessageSize() {
1:cf3d419:         return this.messageSize;
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     public CountStatisticImpl getMessageCount(String subKey) {
1:cf3d419:         return getOrInitStatistics(subKey).getMessageCount();
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     public SizeStatisticImpl getMessageSize(String subKey) {
1:cf3d419:         return getOrInitStatistics(subKey).getMessageSize();
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     public void removeSubscription(String subKey) {
1:cf3d419:         SubscriptionStatistics subStats = subStatistics.remove(subKey);
1:cf3d419:         //Subtract from the parent
1:cf3d419:         if (subStats != null) {
1:cf3d419:            getMessageCount().subtract(subStats.getMessageCount().getCount());
1:cf3d419:            getMessageSize().addSize(-subStats.getMessageSize().getTotalSize());
1:cf3d419:         }
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     @Override
1:cf3d419:     public void reset() {
1:cf3d419:         super.reset();
1:cf3d419:         subStatistics.clear();
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     private SubscriptionStatistics getOrInitStatistics(String subKey) {
1:cf3d419:         SubscriptionStatistics subStats = subStatistics.get(subKey);
1:cf3d419: 
1:cf3d419:         if (subStats == null) {
1:cf3d419:             final SubscriptionStatistics stats = new SubscriptionStatistics();
1:cf3d419:             subStats = subStatistics.putIfAbsent(subKey, stats);
1:cf3d419:             if (subStats == null) {
1:cf3d419:                 subStats = stats;
1:cf3d419:             }
1:cf3d419:         }
1:cf3d419: 
1:cf3d419:         return subStats;
1:cf3d419:     }
1:cf3d419: 
1:cf3d419:     private class SubscriptionStatistics extends AbstractMessageStoreStatistics {
1:cf3d419: 
1:cf3d419:         public SubscriptionStatistics() {
1:cf3d419:             this(MessageStoreSubscriptionStatistics.this.enabled);
1:cf3d419:         }
1:cf3d419: 
1:cf3d419:         /**
1:cf3d419:          * @param enabled
1:cf3d419:          * @param countDescription
1:cf3d419:          * @param sizeDescription
1:cf3d419:          */
1:cf3d419:         public SubscriptionStatistics(boolean enabled) {
1:cf3d419:             super(enabled, "The number of messages or this subscription in the message store",
1:cf3d419:                     "Size of messages contained by this subscription in the message store");
1:cf3d419:             this.setParent(MessageStoreSubscriptionStatistics.this);
1:cf3d419:         }
1:cf3d419:     }
1:cf3d419: 
1:cf3d419: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cf3d419
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store;
1: 
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: 
1: import org.apache.activemq.management.CountStatisticImpl;
1: import org.apache.activemq.management.SizeStatisticImpl;
1: 
1: public class MessageStoreSubscriptionStatistics extends AbstractMessageStoreStatistics {
1: 
1:     private final ConcurrentMap<String, SubscriptionStatistics> subStatistics
1:         = new ConcurrentHashMap<>();
1: 
1:     /**
1:      * @param enabled
1:      * @param countDescription
1:      * @param sizeDescription
1:      */
1:     public MessageStoreSubscriptionStatistics(boolean enabled) {
1:         super(enabled, "The number of messages or this subscription in the message store",
1:                 "Size of messages contained by this subscription in the message store");
1:     }
1: 
1:     /**
1:      * Total count for all subscriptions
1:      */
1:     @Override
1:     public CountStatisticImpl getMessageCount() {
1:         return this.messageCount;
1:     }
1: 
1:     /**
1:      * Total size for all subscriptions
1:      */
1:     @Override
1:     public SizeStatisticImpl getMessageSize() {
1:         return this.messageSize;
1:     }
1: 
1:     public CountStatisticImpl getMessageCount(String subKey) {
1:         return getOrInitStatistics(subKey).getMessageCount();
1:     }
1: 
1:     public SizeStatisticImpl getMessageSize(String subKey) {
1:         return getOrInitStatistics(subKey).getMessageSize();
1:     }
1: 
1:     public void removeSubscription(String subKey) {
1:         SubscriptionStatistics subStats = subStatistics.remove(subKey);
1:         //Subtract from the parent
1:         if (subStats != null) {
1:            getMessageCount().subtract(subStats.getMessageCount().getCount());
1:            getMessageSize().addSize(-subStats.getMessageSize().getTotalSize());
1:         }
1:     }
1: 
1:     @Override
1:     public void reset() {
1:         super.reset();
1:         subStatistics.clear();
1:     }
1: 
1:     private SubscriptionStatistics getOrInitStatistics(String subKey) {
1:         SubscriptionStatistics subStats = subStatistics.get(subKey);
1: 
1:         if (subStats == null) {
1:             final SubscriptionStatistics stats = new SubscriptionStatistics();
1:             subStats = subStatistics.putIfAbsent(subKey, stats);
1:             if (subStats == null) {
1:                 subStats = stats;
1:             }
1:         }
1: 
1:         return subStats;
1:     }
1: 
1:     private class SubscriptionStatistics extends AbstractMessageStoreStatistics {
1: 
1:         public SubscriptionStatistics() {
1:             this(MessageStoreSubscriptionStatistics.this.enabled);
1:         }
1: 
1:         /**
1:          * @param enabled
1:          * @param countDescription
1:          * @param sizeDescription
1:          */
1:         public SubscriptionStatistics(boolean enabled) {
1:             super(enabled, "The number of messages or this subscription in the message store",
1:                     "Size of messages contained by this subscription in the message store");
1:             this.setParent(MessageStoreSubscriptionStatistics.this);
1:         }
1:     }
1: 
1: }
============================================================================