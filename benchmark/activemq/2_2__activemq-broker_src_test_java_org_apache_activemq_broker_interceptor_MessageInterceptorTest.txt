1:8f4ebbb: /**
1:8f4ebbb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8f4ebbb:  * contributor license agreements.  See the NOTICE file distributed with
1:8f4ebbb:  * this work for additional information regarding copyright ownership.
1:8f4ebbb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8f4ebbb:  * (the "License"); you may not use this file except in compliance with
1:8f4ebbb:  * the License.  You may obtain a copy of the License at
1:8f4ebbb:  *
1:8f4ebbb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8f4ebbb:  *
1:8f4ebbb:  * Unless required by applicable law or agreed to in writing, software
1:8f4ebbb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8f4ebbb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8f4ebbb:  * See the License for the specific language governing permissions and
1:8f4ebbb:  * limitations under the License.
1:8f4ebbb:  */
1:8f4ebbb: package org.apache.activemq.broker.interceptor;
1:8f4ebbb: 
1:8f4ebbb: import java.util.concurrent.CountDownLatch;
1:8f4ebbb: import java.util.concurrent.TimeUnit;
1:8f4ebbb: 
1:8f4ebbb: import javax.jms.Connection;
1:8f4ebbb: import javax.jms.MessageConsumer;
1:8f4ebbb: import javax.jms.MessageListener;
1:8f4ebbb: import javax.jms.MessageProducer;
1:8f4ebbb: import javax.jms.Session;
1:8f4ebbb: import javax.jms.Topic;
1:8f4ebbb: import junit.framework.TestCase;
1:8f4ebbb: import org.apache.activemq.ActiveMQConnectionFactory;
1:8f4ebbb: import org.apache.activemq.broker.BrokerRegistry;
1:8f4ebbb: import org.apache.activemq.broker.BrokerService;
1:8f4ebbb: import org.apache.activemq.broker.ProducerBrokerExchange;
1:8f4ebbb: import org.apache.activemq.broker.inteceptor.MessageInterceptor;
1:8f4ebbb: import org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry;
1:8f4ebbb: import org.apache.activemq.command.ActiveMQQueue;
1:8f4ebbb: import org.apache.activemq.command.Message;
1:8f4ebbb: 
1:8f4ebbb: public class MessageInterceptorTest extends TestCase {
1:8f4ebbb:     protected BrokerService brokerService;
1:8f4ebbb:     protected ActiveMQConnectionFactory factory;
1:8f4ebbb:     protected Connection producerConnection;
1:8f4ebbb:     protected Connection consumerConnection;
1:8f4ebbb:     protected Session consumerSession;
1:8f4ebbb:     protected Session producerSession;
1:8f4ebbb:     protected MessageConsumer consumer;
1:8f4ebbb:     protected MessageProducer producer;
1:8f4ebbb:     protected Topic topic;
1:8f4ebbb:     protected int messageCount = 10000;
1:8f4ebbb:     protected int timeOutInSeconds = 10;
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb:     @Override
1:8f4ebbb:     protected void setUp() throws Exception {
1:8f4ebbb:         brokerService = new BrokerService();
1:8f4ebbb:         brokerService.setPersistent(false);
1:8f4ebbb:         brokerService.start();
1:8f4ebbb: 
1:8f4ebbb:         factory =  new ActiveMQConnectionFactory(BrokerRegistry.getInstance().findFirst().getVmConnectorURI());
1:8f4ebbb:         consumerConnection = factory.createConnection();
1:8f4ebbb:         consumerConnection.start();
1:8f4ebbb:         producerConnection = factory.createConnection();
1:8f4ebbb:         producerConnection.start();
1:8f4ebbb:         consumerSession = consumerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:8f4ebbb:         topic = consumerSession.createTopic(getName());
1:8f4ebbb:         producerSession = producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:8f4ebbb:         consumer = consumerSession.createConsumer(topic);
1:8f4ebbb:         producer = producerSession.createProducer(topic);
1:8f4ebbb:     }
1:0a5b143: 
1:8f4ebbb:     @Override
1:8f4ebbb:     protected void tearDown() throws Exception {
1:8f4ebbb:         if (producerConnection != null){
1:8f4ebbb:             producerConnection.close();
1:8f4ebbb:         }
1:8f4ebbb:         if (consumerConnection != null){
1:8f4ebbb:             consumerConnection.close();
1:8f4ebbb:         }
1:8f4ebbb:         if (brokerService != null) {
1:8f4ebbb:             brokerService.stop();
1:8f4ebbb:         }
1:8f4ebbb:     }
1:0a5b143: 
1:8f4ebbb: 
1:8f4ebbb: 
1:0a5b143:     public void testNoIntercept() throws Exception {
1:8f4ebbb:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:8f4ebbb: 
1:8f4ebbb:         consumer.setMessageListener(new MessageListener() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void onMessage(javax.jms.Message message) {
1:8f4ebbb:                 latch.countDown();
1:8f4ebbb: 
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb:         for (int i  = 0; i < messageCount; i++){
1:8f4ebbb:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:8f4ebbb:             producer.send(message);
1:8f4ebbb:         }
1:8f4ebbb: 
1:8f4ebbb:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:8f4ebbb:         assertEquals(0,latch.getCount());
1:8f4ebbb: 
1:8f4ebbb:     }
1:8f4ebbb: 
1:0a5b143:     public void testNoStackOverFlow() throws Exception {
1:0a5b143: 
1:0a5b143: 
1:0a5b143:         final MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
1:0a5b143:         registry.addMessageInterceptorForTopic(topic.getTopicName(), new MessageInterceptor() {
1:0a5b143:             @Override
1:0a5b143:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:0a5b143: 
1:0a5b143:                 try {
1:0a5b143:                     registry.injectMessage(producerExchange, message);
1:0a5b143:                 } catch (Exception e) {
1:0a5b143:                     e.printStackTrace();
1:0a5b143:                 }
1:0a5b143:             }
1:0a5b143:         });
1:0a5b143: 
1:0a5b143:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:0a5b143:         consumer.setMessageListener(new MessageListener() {
1:0a5b143:             @Override
1:0a5b143:             public void onMessage(javax.jms.Message message) {
1:0a5b143:                 latch.countDown();
1:0a5b143: 
1:0a5b143:             }
1:0a5b143:         });
1:0a5b143:         for (int i  = 0; i < messageCount; i++){
1:0a5b143:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:0a5b143:             producer.send(message);
1:0a5b143:         }
1:0a5b143: 
1:0a5b143:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:0a5b143:         assertEquals(0,latch.getCount());
1:0a5b143:     }
1:0a5b143: 
1:8f4ebbb:     public void testInterceptorAll() throws Exception {
1:0a5b143:         MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
1:8f4ebbb:         registry.addMessageInterceptorForTopic(topic.getTopicName(), new MessageInterceptor() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:8f4ebbb:                 //just ignore
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb: 
1:8f4ebbb:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:8f4ebbb: 
1:8f4ebbb:         consumer.setMessageListener(new MessageListener() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void onMessage(javax.jms.Message message) {
1:8f4ebbb:                 latch.countDown();
1:8f4ebbb: 
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb:         for (int i  = 0; i < messageCount; i++){
1:8f4ebbb:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:8f4ebbb:             producer.send(message);
1:8f4ebbb:         }
1:8f4ebbb: 
1:8f4ebbb:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:8f4ebbb:         assertEquals(messageCount,latch.getCount());
1:8f4ebbb: 
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public void testReRouteAll() throws Exception {
1:8f4ebbb:         final ActiveMQQueue queue = new ActiveMQQueue("Reroute.From."+topic.getTopicName());
1:8f4ebbb: 
1:0a5b143:         final MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
1:8f4ebbb:         registry.addMessageInterceptorForTopic(topic.getTopicName(), new MessageInterceptor() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:8f4ebbb:                 message.setDestination(queue);
1:8f4ebbb:                 try {
1:8f4ebbb:                     registry.injectMessage(producerExchange, message);
1:8f4ebbb:                 } catch (Exception e) {
1:8f4ebbb:                     e.printStackTrace();
1:8f4ebbb:                 }
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb: 
1:8f4ebbb:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:8f4ebbb:         consumer = consumerSession.createConsumer(queue);
1:8f4ebbb:         consumer.setMessageListener(new MessageListener() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void onMessage(javax.jms.Message message) {
1:8f4ebbb:                 latch.countDown();
1:8f4ebbb: 
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb:         for (int i  = 0; i < messageCount; i++){
1:8f4ebbb:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:8f4ebbb:             producer.send(message);
1:8f4ebbb:         }
1:8f4ebbb: 
1:8f4ebbb:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:8f4ebbb:         assertEquals(0,latch.getCount());
1:8f4ebbb: 
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public void testReRouteAllWithNullProducerExchange() throws Exception {
1:8f4ebbb:         final ActiveMQQueue queue = new ActiveMQQueue("Reroute.From."+topic.getTopicName());
1:8f4ebbb: 
1:0a5b143:         final MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
1:8f4ebbb:         registry.addMessageInterceptorForTopic(topic.getTopicName(), new MessageInterceptor() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:8f4ebbb:                 message.setDestination(queue);
1:8f4ebbb:                 try {
1:8f4ebbb:                     registry.injectMessage(producerExchange, message);
1:8f4ebbb:                 } catch (Exception e) {
1:8f4ebbb:                     e.printStackTrace();
1:8f4ebbb:                 }
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb: 
1:8f4ebbb:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:8f4ebbb:         consumer = consumerSession.createConsumer(queue);
1:8f4ebbb:         consumer.setMessageListener(new MessageListener() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void onMessage(javax.jms.Message message) {
1:8f4ebbb:                 latch.countDown();
1:8f4ebbb: 
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb:         for (int i  = 0; i < messageCount; i++){
1:8f4ebbb:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:8f4ebbb:             producer.send(message);
1:8f4ebbb:         }
1:8f4ebbb: 
1:8f4ebbb:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:8f4ebbb:         assertEquals(0,latch.getCount());
1:8f4ebbb: 
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb:     public void testReRouteAllowWildCards() throws Exception {
1:8f4ebbb: 
1:8f4ebbb:         final ActiveMQQueue testQueue = new ActiveMQQueue("testQueueFor."+getName());
1:8f4ebbb: 
1:0a5b143:         final MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
1:8f4ebbb:         registry.addMessageInterceptorForTopic(">", new MessageInterceptor() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:8f4ebbb: 
1:8f4ebbb:                 try {
1:8f4ebbb:                     message.setDestination(testQueue);
1:8f4ebbb:                     registry.injectMessage(producerExchange,message);
1:8f4ebbb:                 }catch(Exception e){
1:8f4ebbb:                     e.printStackTrace();
1:8f4ebbb:                 }
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb: 
1:8f4ebbb:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:8f4ebbb: 
1:8f4ebbb:         consumer.setMessageListener(new MessageListener() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void onMessage(javax.jms.Message message) {
1:8f4ebbb:                 latch.countDown();
1:8f4ebbb: 
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb: 
1:8f4ebbb:         MessageConsumer consumer1 = consumerSession.createConsumer(testQueue);
1:8f4ebbb: 
1:8f4ebbb:         consumer1.setMessageListener(new MessageListener() {
1:8f4ebbb:             @Override
1:8f4ebbb:             public void onMessage(javax.jms.Message message) {
1:8f4ebbb:                 latch.countDown();
1:8f4ebbb: 
1:8f4ebbb:             }
1:8f4ebbb:         });
1:8f4ebbb:         for (int i  = 0; i < messageCount; i++){
1:8f4ebbb:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:8f4ebbb:             producer.send(message);
1:8f4ebbb:         }
1:8f4ebbb: 
1:8f4ebbb:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:8f4ebbb:         assertEquals(0,latch.getCount());
1:8f4ebbb: 
1:8f4ebbb:     }
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb: 
1:8f4ebbb: }
============================================================================
author:rajdavies
-------------------------------------------------------------------------------
commit:0a5b143
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public void testNoIntercept() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testNoStackOverFlow() throws Exception {
1: 
1: 
1:         final MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
1:         registry.addMessageInterceptorForTopic(topic.getTopicName(), new MessageInterceptor() {
1:             @Override
1:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1: 
1:                 try {
1:                     registry.injectMessage(producerExchange, message);
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 latch.countDown();
1: 
1:             }
1:         });
1:         for (int i  = 0; i < messageCount; i++){
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             producer.send(message);
1:         }
1: 
1:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:         assertEquals(0,latch.getCount());
1:     }
1: 
1:         MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
/////////////////////////////////////////////////////////////////////////
1:         final MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
/////////////////////////////////////////////////////////////////////////
1:         final MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
/////////////////////////////////////////////////////////////////////////
1:         final MessageInterceptorRegistry registry = MessageInterceptorRegistry.getInstance().get(BrokerRegistry.getInstance().findFirst());
author:Robert Davies
-------------------------------------------------------------------------------
commit:8f4ebbb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.interceptor;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.inteceptor.MessageInterceptor;
1: import org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.Message;
1: 
1: public class MessageInterceptorTest extends TestCase {
1:     protected BrokerService brokerService;
1:     protected ActiveMQConnectionFactory factory;
1:     protected Connection producerConnection;
1:     protected Connection consumerConnection;
1:     protected Session consumerSession;
1:     protected Session producerSession;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1:     protected Topic topic;
1:     protected int messageCount = 10000;
1:     protected int timeOutInSeconds = 10;
1: 
1: 
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1: 
1:         factory =  new ActiveMQConnectionFactory(BrokerRegistry.getInstance().findFirst().getVmConnectorURI());
1:         consumerConnection = factory.createConnection();
1:         consumerConnection.start();
1:         producerConnection = factory.createConnection();
1:         producerConnection.start();
1:         consumerSession = consumerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:         topic = consumerSession.createTopic(getName());
1:         producerSession = producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:         consumer = consumerSession.createConsumer(topic);
1:         producer = producerSession.createProducer(topic);
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         if (producerConnection != null){
1:             producerConnection.close();
1:         }
1:         if (consumerConnection != null){
1:             consumerConnection.close();
1:         }
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
0:     public void testNormalOperation() throws Exception {
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1: 
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 latch.countDown();
1: 
1:             }
1:         });
1:         for (int i  = 0; i < messageCount; i++){
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             producer.send(message);
1:         }
1: 
1:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:         assertEquals(0,latch.getCount());
1: 
1:     }
1: 
1:     public void testInterceptorAll() throws Exception {
0:         MessageInterceptorRegistry registry = new MessageInterceptorRegistry(BrokerRegistry.getInstance().findFirst());
1:         registry.addMessageInterceptorForTopic(topic.getTopicName(), new MessageInterceptor() {
1:             @Override
1:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:                 //just ignore
1:             }
1:         });
1: 
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1: 
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 latch.countDown();
1: 
1:             }
1:         });
1:         for (int i  = 0; i < messageCount; i++){
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             producer.send(message);
1:         }
1: 
1:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:         assertEquals(messageCount,latch.getCount());
1: 
1:     }
1: 
1:     public void testReRouteAll() throws Exception {
1:         final ActiveMQQueue queue = new ActiveMQQueue("Reroute.From."+topic.getTopicName());
1: 
0:         final MessageInterceptorRegistry registry = new MessageInterceptorRegistry(BrokerRegistry.getInstance().findFirst());
1:         registry.addMessageInterceptorForTopic(topic.getTopicName(), new MessageInterceptor() {
1:             @Override
1:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:                 message.setDestination(queue);
1:                 try {
1:                     registry.injectMessage(producerExchange, message);
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:         consumer = consumerSession.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 latch.countDown();
1: 
1:             }
1:         });
1:         for (int i  = 0; i < messageCount; i++){
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             producer.send(message);
1:         }
1: 
1:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:         assertEquals(0,latch.getCount());
1: 
1:     }
1: 
1:     public void testReRouteAllWithNullProducerExchange() throws Exception {
1:         final ActiveMQQueue queue = new ActiveMQQueue("Reroute.From."+topic.getTopicName());
1: 
0:         final MessageInterceptorRegistry registry = new MessageInterceptorRegistry(BrokerRegistry.getInstance().findFirst());
1:         registry.addMessageInterceptorForTopic(topic.getTopicName(), new MessageInterceptor() {
1:             @Override
1:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:                 message.setDestination(queue);
1:                 try {
1:                     registry.injectMessage(producerExchange, message);
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:         consumer = consumerSession.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 latch.countDown();
1: 
1:             }
1:         });
1:         for (int i  = 0; i < messageCount; i++){
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             producer.send(message);
1:         }
1: 
1:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:         assertEquals(0,latch.getCount());
1: 
1:     }
1: 
1:     public void testReRouteAllowWildCards() throws Exception {
1: 
1:         final ActiveMQQueue testQueue = new ActiveMQQueue("testQueueFor."+getName());
1: 
0:         final MessageInterceptorRegistry registry = new MessageInterceptorRegistry(BrokerRegistry.getInstance().findFirst());
1:         registry.addMessageInterceptorForTopic(">", new MessageInterceptor() {
1:             @Override
1:             public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1: 
1:                 try {
1:                     message.setDestination(testQueue);
1:                     registry.injectMessage(producerExchange,message);
1:                 }catch(Exception e){
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1: 
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 latch.countDown();
1: 
1:             }
1:         });
1: 
1:         MessageConsumer consumer1 = consumerSession.createConsumer(testQueue);
1: 
1:         consumer1.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(javax.jms.Message message) {
1:                 latch.countDown();
1: 
1:             }
1:         });
1:         for (int i  = 0; i < messageCount; i++){
1:             javax.jms.Message message = producerSession.createTextMessage("test: " + i);
1:             producer.send(message);
1:         }
1: 
1:         latch.await(timeOutInSeconds, TimeUnit.SECONDS);
1:         assertEquals(0,latch.getCount());
1: 
1:     }
1: 
1: 
1: 
1: }
============================================================================