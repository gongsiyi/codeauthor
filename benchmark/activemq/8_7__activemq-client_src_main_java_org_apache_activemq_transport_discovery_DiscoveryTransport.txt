1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:9ef4259:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9ef4259:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.transport.discovery;
1:d29ca2a: 
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:bd1b10c: import java.util.Map;
1:74a7a8b: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:9ef4259: 
1:d29ca2a: import org.apache.activemq.command.DiscoveryEvent;
1:d29ca2a: import org.apache.activemq.transport.CompositeTransport;
1:d29ca2a: import org.apache.activemq.transport.TransportFilter;
1:1b9c601: import org.apache.activemq.util.ServiceStopper;
1:272b846: import org.apache.activemq.util.Suspendable;
1:39e63c0: import org.apache.activemq.util.URISupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d8c0ff1:  * A {@link TransportFilter} which uses a {@link DiscoveryAgent} to
1:d29ca2a:  * discover remote broker instances and dynamically connect to them.
1:d29ca2a:  */
1:d29ca2a: public class DiscoveryTransport extends TransportFilter implements DiscoveryListener {
1:d29ca2a: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryTransport.class);
1:d29ca2a: 
1:d29ca2a:     private final CompositeTransport next;
1:d29ca2a:     private DiscoveryAgent discoveryAgent;
1:9ef4259:     private final ConcurrentMap<String, URI> serviceURIs = new ConcurrentHashMap<String, URI>();
1:d29ca2a: 
1:bd1b10c:     private Map<String, String> parameters;
1:d29ca2a: 
1:d29ca2a:     public DiscoveryTransport(CompositeTransport next) {
1:d29ca2a:         super(next);
1:d29ca2a:         this.next = next;
3:d29ca2a:     }
1:d29ca2a: 
1:9ef4259:     @Override
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:         if (discoveryAgent == null) {
1:d29ca2a:             throw new IllegalStateException("discoveryAgent not configured");
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         // lets pass into the agent the broker name and connection details
1:d29ca2a:         discoveryAgent.setDiscoveryListener(this);
1:d29ca2a:         discoveryAgent.start();
1:d29ca2a:         next.start();
1:d29ca2a:     }
1:d29ca2a: 
1:f392884:     @Override
1:d29ca2a:     public void stop() throws Exception {
1:fc00993:         ServiceStopper ss = new ServiceStopper();
1:fc00993:         ss.stop(discoveryAgent);
1:fc00993:         ss.stop(next);
1:fc00993:         ss.throwFirstException();
1:d29ca2a:     }
1:d29ca2a: 
1:9ef4259:     @Override
1:d29ca2a:     public void onServiceAdd(DiscoveryEvent event) {
1:d29ca2a:         String url = event.getServiceName();
1:d29ca2a:         if (url != null) {
3:d29ca2a:             try {
1:d29ca2a:                 URI uri = new URI(url);
1:fc00993:                 LOG.info("Adding new broker connection URL: " + uri);
1:986ed14:                 uri = URISupport.applyParameters(uri, parameters, DISCOVERED_OPTION_PREFIX);
1:d29ca2a:                 serviceURIs.put(event.getServiceName(), uri);
1:9ecc679:                 next.add(false,new URI[] {uri});
1:d29ca2a:             } catch (URISyntaxException e) {
1:fc00993:                 LOG.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:f392884:     @Override
1:d29ca2a:     public void onServiceRemove(DiscoveryEvent event) {
1:933eb2f:         URI uri = serviceURIs.get(event.getServiceName());
1:d29ca2a:         if (uri != null) {
1:f392884:             next.remove(false,new URI[] {uri});
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public DiscoveryAgent getDiscoveryAgent() {
1:d29ca2a:         return discoveryAgent;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setDiscoveryAgent(DiscoveryAgent discoveryAgent) {
1:d29ca2a:         this.discoveryAgent = discoveryAgent;
1:d29ca2a:     }
1:d29ca2a: 
1:bd1b10c:     public void setParameters(Map<String, String> parameters) {
1:9ef4259:        this.parameters = parameters;
1:d29ca2a:     }
1:d29ca2a: 
1:272b846:     @Override
1:272b846:     public void transportResumed() {
1:272b846:         if( discoveryAgent instanceof Suspendable ) {
1:272b846:             try {
1:272b846:                 ((Suspendable)discoveryAgent).suspend();
1:272b846:             } catch (Exception e) {
1:457dbd8:                 LOG.warn("Exception suspending discoverAgent: ", discoveryAgent);
1:272b846:             }
1:272b846:         }
1:272b846:         super.transportResumed();
1:272b846:     }
1:272b846: 
1:272b846:     @Override
1:272b846:     public void transportInterupted() {
1:272b846:         if( discoveryAgent instanceof Suspendable ) {
1:272b846:             try {
1:272b846:                 ((Suspendable)discoveryAgent).resume();
1:272b846:             } catch (Exception e) {
1:457dbd8:                 LOG.warn("Exception resuming discoverAgent: ", discoveryAgent);
1:272b846:             }
1:272b846:         }
1:272b846:         super.transportInterupted();
1:272b846:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d8c0ff1
/////////////////////////////////////////////////////////////////////////
1:  * A {@link TransportFilter} which uses a {@link DiscoveryAgent} to
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private final ConcurrentMap<String, URI> serviceURIs = new ConcurrentHashMap<String, URI>();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:        this.parameters = parameters;
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:457dbd8
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Exception suspending discoverAgent: ", discoveryAgent);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Exception resuming discoverAgent: ", discoveryAgent);
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:272b846
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Suspendable;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void transportResumed() {
1:         if( discoveryAgent instanceof Suspendable ) {
1:             try {
1:                 ((Suspendable)discoveryAgent).suspend();
1:             } catch (Exception e) {
0:                 e.printStackTrace();
1:             }
1:         }
1:         super.transportResumed();
1:     }
1: 
1:     @Override
1:     public void transportInterupted() {
1:         if( discoveryAgent instanceof Suspendable ) {
1:             try {
1:                 ((Suspendable)discoveryAgent).resume();
1:             } catch (Exception e) {
0:                 e.printStackTrace();
1:             }
1:         }
1:         super.transportInterupted();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private final ConcurrentHashMap<String, URI> serviceURIs = new ConcurrentHashMap<String, URI>();
/////////////////////////////////////////////////////////////////////////
1:         URI uri = serviceURIs.get(event.getServiceName());
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DiscoveryTransport.class);
/////////////////////////////////////////////////////////////////////////
1:         ServiceStopper ss = new ServiceStopper();
1:         ss.stop(discoveryAgent);
1:         ss.stop(next);
1:         ss.throwFirstException();
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Adding new broker connection URL: " + uri);
0:                 next.add(new URI[] {uri});
1:                 LOG.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
0:         URI uri = (URI)serviceURIs.get(event.getServiceName());
0:             next.remove(new URI[] {uri});
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:1b9c601
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
0:     	ServiceStopper ss = new ServiceStopper();
0:     	ss.stop(discoveryAgent);
0:     	ss.stop(next);
0:     	ss.throwFirstException();
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
/////////////////////////////////////////////////////////////////////////
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0:  *
0:  * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  *
0:  **/
1: package org.apache.activemq.transport.discovery;
1: 
0: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: import org.apache.activemq.command.DiscoveryEvent;
1: import org.apache.activemq.transport.CompositeTransport;
1: import org.apache.activemq.transport.TransportFilter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
0:  * A {@link ReliableTransportChannel} which uses a {@link DiscoveryAgent} to
1:  * discover remote broker instances and dynamically connect to them.
0:  * 
0:  * @version $Revision$
1:  */
1: public class DiscoveryTransport extends TransportFilter implements DiscoveryListener {
1: 
0:     private static final Log log = LogFactory.getLog(DiscoveryTransport.class);
1: 
1:     private final CompositeTransport next;
1:     private DiscoveryAgent discoveryAgent;
0:     private final ConcurrentHashMap serviceURIs = new ConcurrentHashMap();
1: 
1:     public DiscoveryTransport(CompositeTransport next) {
1:         super(next);
1:         this.next = next;
1:     }
1: 
1:     public void start() throws Exception {
1:         if (discoveryAgent == null) {
1:             throw new IllegalStateException("discoveryAgent not configured");
1:         }
1: 
1:         // lets pass into the agent the broker name and connection details
1:         discoveryAgent.setDiscoveryListener(this);
1:         discoveryAgent.start();
1:         next.start();
1:     }
1: 
1:     public void stop() throws Exception {
0:         IOException firstError = null;
1:         try {
0:             discoveryAgent.stop();
0:         } catch (IOException e) {
0:             firstError = e;
1:         }
1:         try {
0:             next.stop();
0:         } catch (IOException e) {
0:             if (firstError != null)
0:                 firstError = e;
1:         }
0:         if (firstError != null) {
0:             throw firstError;
1:         }
1:     }
1: 
1:     public void onServiceAdd(DiscoveryEvent event) {
1:         String url = event.getServiceName();
1:         if (url != null) {
1:             try {
1:                 URI uri = new URI(url);
1:                 serviceURIs.put(event.getServiceName(), uri);
0:                 log.info("Adding new broker connection URL: " + uri );
0:                 next.add(new URI[]{uri});
1:             } catch (URISyntaxException e) {
0:                 log.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
1:             }
1:         }
1:     }
1: 
1:     public void onServiceRemove(DiscoveryEvent event) {
0:         URI uri = (URI) serviceURIs.get(event.getServiceName());
1:         if (uri != null) {
0:             next.remove(new URI[]{uri});
1:         }
1:     }
1: 
1:     public DiscoveryAgent getDiscoveryAgent() {
1:         return discoveryAgent;
1:     }
1: 
1:     public void setDiscoveryAgent(DiscoveryAgent discoveryAgent) {
1:         this.discoveryAgent = discoveryAgent;
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:986ed14
/////////////////////////////////////////////////////////////////////////
1:                 uri = URISupport.applyParameters(uri, parameters, DISCOVERED_OPTION_PREFIX);
commit:9ecc679
/////////////////////////////////////////////////////////////////////////
0:                 uri = URISupport.applyParameters(uri, parameters);
0:                 serviceURIs.put(event.getServiceName(), uri);
1:                 next.add(false,new URI[] {uri});
commit:39e63c0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.URISupport;
/////////////////////////////////////////////////////////////////////////
0:                 next.add(new URI[] {URISupport.applyParameters(uri, parameters)});
commit:bd1b10c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, String> parameters;
0: 
/////////////////////////////////////////////////////////////////////////
0:                 next.add(new URI[] {applyParameters(uri)});
0:     private URI applyParameters(URI uri) throws URISyntaxException {
0:         if (parameters != null && !parameters.isEmpty()) {
0:             StringBuffer newQuery = uri.getRawQuery() != null ? new StringBuffer(uri.getRawQuery()) : new StringBuffer() ;
0:             for ( Map.Entry<String, String> param: parameters.entrySet()) {
0:                 if (newQuery.length()!=0) {
0:                     newQuery.append(';');
0:                 }
0:                 newQuery.append(param.getKey()).append('=').append(param.getValue());
0:             }
0:             uri = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), newQuery.toString(), uri.getFragment());
0:         }
0:         return uri;
0: }
0: 
/////////////////////////////////////////////////////////////////////////
1:     public void setParameters(Map<String, String> parameters) {
0:        this.parameters = parameters;      
0:     }
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryTransport.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:                 next.add(false,new URI[] {URISupport.applyParameters(uri, parameters)});
/////////////////////////////////////////////////////////////////////////
1:             next.remove(false,new URI[] {uri});
============================================================================