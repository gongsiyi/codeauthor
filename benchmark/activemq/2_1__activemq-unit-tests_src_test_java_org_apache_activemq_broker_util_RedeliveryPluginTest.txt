1:ac8c8d1: /**
1:ac8c8d1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ac8c8d1:  * contributor license agreements.  See the NOTICE file distributed with
1:ac8c8d1:  * this work for additional information regarding copyright ownership.
1:ac8c8d1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ac8c8d1:  * (the "License"); you may not use this file except in compliance with
1:ac8c8d1:  * the License.  You may obtain a copy of the License at
1:ac8c8d1:  *
1:ac8c8d1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ac8c8d1:  *
1:ac8c8d1:  * Unless required by applicable law or agreed to in writing, software
1:ac8c8d1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ac8c8d1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ac8c8d1:  * See the License for the specific language governing permissions and
1:ac8c8d1:  * limitations under the License.
1:ac8c8d1:  */
1:ac8c8d1: package org.apache.activemq.broker.util;
1:ac8c8d1: 
1:ac8c8d1: import junit.framework.TestCase;
1:ac8c8d1: import org.apache.activemq.RedeliveryPolicy;
1:ac8c8d1: import org.apache.activemq.broker.Broker;
1:ac8c8d1: import org.apache.activemq.broker.BrokerService;
1:ac8c8d1: import org.apache.activemq.broker.ErrorBroker;
1:ac8c8d1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1:ac8c8d1: import org.slf4j.Logger;
1:ac8c8d1: import org.slf4j.LoggerFactory;
1:ac8c8d1: 
1:ac8c8d1: public class RedeliveryPluginTest extends TestCase {
1:ac8c8d1:     private static final Logger LOG = LoggerFactory.getLogger(RedeliveryPluginTest.class);
1:ac8c8d1:     RedeliveryPlugin underTest = new RedeliveryPlugin();
1:ac8c8d1: 
1:ac8c8d1:     public void testInstallPluginValidation() throws Exception {
1:ac8c8d1:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:ac8c8d1:         RedeliveryPolicy defaultEntry = new RedeliveryPolicy();
1:ac8c8d1:         defaultEntry.setInitialRedeliveryDelay(500);
1:ac8c8d1:         redeliveryPolicyMap.setDefaultEntry(defaultEntry);
1:ac8c8d1:         underTest.setRedeliveryPolicyMap(redeliveryPolicyMap);
1:ac8c8d1: 
1:ac8c8d1:         final BrokerService brokerService = new BrokerService();
1:ac8c8d1:         brokerService.setSchedulerSupport(false);
1:ac8c8d1:         Broker broker = new ErrorBroker("hi") {
1:ac8c8d1:             @Override
1:ac8c8d1:             public BrokerService getBrokerService() {
1:ac8c8d1:                 return brokerService;
1:ac8c8d1:             }
1:ac8c8d1:         };
1:ac8c8d1: 
1:ac8c8d1:         try {
1:ac8c8d1:             underTest.installPlugin(broker);
1:ac8c8d1:             fail("expect exception on no scheduler support");
1:ac8c8d1:         } catch (Exception expected) {
1:ac8c8d1:             LOG.info("expected: " + expected);
1:ac8c8d1:         }
1:ac8c8d1: 
1:ac8c8d1:         brokerService.setSchedulerSupport(true);
1:ac8c8d1:         try {
1:ac8c8d1:             underTest.installPlugin(broker);
1:ac8c8d1:             fail("expect exception on small initial delay");
1:ac8c8d1:         } catch (Exception expected) {
1:ac8c8d1:             LOG.info("expected: " + expected);
1:ac8c8d1:         }
1:ac8c8d1: 
1:ac8c8d1:         defaultEntry.setInitialRedeliveryDelay(5000);
1:ac8c8d1:         defaultEntry.setRedeliveryDelay(500);
1:ac8c8d1:         brokerService.setSchedulerSupport(true);
1:ac8c8d1:         try {
1:ac8c8d1:             underTest.installPlugin(broker);
1:ac8c8d1:             fail("expect exception on small redelivery delay");
1:ac8c8d1:         } catch (Exception expected) {
1:ac8c8d1:             LOG.info("expected: " + expected);
1:ac8c8d1:         }
1:ac8c8d1:     }
1:ac8c8d1: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:ac8c8d1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ErrorBroker;
1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class RedeliveryPluginTest extends TestCase {
1:     private static final Logger LOG = LoggerFactory.getLogger(RedeliveryPluginTest.class);
1:     RedeliveryPlugin underTest = new RedeliveryPlugin();
1: 
1:     public void testInstallPluginValidation() throws Exception {
1:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:         RedeliveryPolicy defaultEntry = new RedeliveryPolicy();
1:         defaultEntry.setInitialRedeliveryDelay(500);
1:         redeliveryPolicyMap.setDefaultEntry(defaultEntry);
1:         underTest.setRedeliveryPolicyMap(redeliveryPolicyMap);
1: 
1:         final BrokerService brokerService = new BrokerService();
1:         brokerService.setSchedulerSupport(false);
1:         Broker broker = new ErrorBroker("hi") {
1:             @Override
1:             public BrokerService getBrokerService() {
1:                 return brokerService;
1:             }
1:         };
1: 
1:         try {
1:             underTest.installPlugin(broker);
1:             fail("expect exception on no scheduler support");
1:         } catch (Exception expected) {
1:             LOG.info("expected: " + expected);
1:         }
1: 
1:         brokerService.setSchedulerSupport(true);
1:         try {
1:             underTest.installPlugin(broker);
1:             fail("expect exception on small initial delay");
1:         } catch (Exception expected) {
1:             LOG.info("expected: " + expected);
1:         }
1: 
1:         defaultEntry.setInitialRedeliveryDelay(5000);
1:         defaultEntry.setRedeliveryDelay(500);
1:         brokerService.setSchedulerSupport(true);
1:         try {
1:             underTest.installPlugin(broker);
1:             fail("expect exception on small redelivery delay");
1:         } catch (Exception expected) {
1:             LOG.info("expected: " + expected);
1:         }
1:     }
1: }
============================================================================