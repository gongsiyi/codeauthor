1:7c41ebc: /**
1:7c41ebc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7c41ebc:  * contributor license agreements.  See the NOTICE file distributed with
1:7c41ebc:  * this work for additional information regarding copyright ownership.
1:7c41ebc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7c41ebc:  * (the "License"); you may not use this file except in compliance with
1:7c41ebc:  * the License.  You may obtain a copy of the License at
1:7c41ebc:  *
1:7c41ebc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7c41ebc:  *
1:7c41ebc:  * Unless required by applicable law or agreed to in writing, software
1:7c41ebc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7c41ebc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7c41ebc:  * See the License for the specific language governing permissions and
1:7c41ebc:  * limitations under the License.
1:7c41ebc:  */
1:7c41ebc: package org.apache.activemq.transport.amqp.interop;
1:7c41ebc: 
1:7c41ebc: import static org.junit.Assert.assertEquals;
1:7c41ebc: import static org.junit.Assert.assertNotNull;
1:7c41ebc: import static org.junit.Assert.assertTrue;
1:7c41ebc: 
1:7c41ebc: import java.util.Arrays;
1:7c41ebc: import java.util.Collection;
1:7c41ebc: import java.util.concurrent.CountDownLatch;
1:7c41ebc: import java.util.concurrent.TimeUnit;
1:7c41ebc: 
1:7c41ebc: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:7c41ebc: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:7c41ebc: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:7c41ebc: import org.apache.activemq.transport.amqp.client.AmqpConnectionListener;
1:7c41ebc: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:7c41ebc: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:7c41ebc: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:7c41ebc: import org.junit.Test;
1:7c41ebc: import org.junit.runner.RunWith;
1:7c41ebc: import org.junit.runners.Parameterized;
1:7c41ebc: import org.junit.runners.Parameterized.Parameters;
1:7c41ebc: 
1:7c41ebc: /**
1:7c41ebc:  * Test that the maxFrameSize setting prevents large frames from being processed.
1:7c41ebc:  */
1:7c41ebc: @RunWith(Parameterized.class)
1:7c41ebc: public class AmqpMaxFrameSizeTest extends AmqpClientTestSupport {
1:7c41ebc: 
1:2e2d5dd:     private final int TEST_IDLE_TIMEOUT = 500;
1:2e2d5dd: 
1:7c41ebc:     private final String testName;
1:7c41ebc:     private final int maxFrameSize;
1:7c41ebc:     private final int maxAmqpFrameSize;
1:7c41ebc: 
1:7c41ebc:     @Parameters(name="{0}")
1:7c41ebc:     public static Collection<Object[]> data() {
1:7c41ebc:         return Arrays.asList(new Object[][] {
1:7c41ebc:                 { "amqp-> MFS > MAFS", "amqp", false, 1024, 2048 },
1:7c41ebc:                 { "amqp-> MFS < MAFS", "amqp", false, 2048, 1024 },
1:7c41ebc:                 { "amqp+nio-> MFS > MAFS", "amqp+nio", false, 1024, 2048 },
1:7c41ebc:                 { "amqp+nio-> MFS < MAFS", "amqp+nio", false, 2048, 1024 },
1:2e2d5dd:                 { "amqp+ws-> MFS > MAFS", "amqp+ws", false, 1024, 2048 },
1:2e2d5dd:                 { "amqp+ws-> MFS < MAFS", "amqp+ws", false, 2048, 1024 },
1:7c41ebc:             });
1:7c41ebc:     }
1:7c41ebc: 
1:7c41ebc:     public AmqpMaxFrameSizeTest(String testName, String connectorScheme, boolean useSSL, int maxFrameSize, int maxAmqpFrameSize) {
1:7c41ebc:         super(connectorScheme, useSSL);
1:7c41ebc: 
1:7c41ebc:         this.testName = testName;
1:7c41ebc:         this.maxFrameSize = maxFrameSize;
1:7c41ebc:         this.maxAmqpFrameSize = maxAmqpFrameSize;
1:7c41ebc:     }
1:7c41ebc: 
1:7c41ebc:     @Override
1:7c41ebc:     protected String getAdditionalConfig() {
1:f37b005:         return "&wireFormat.maxAmqpFrameSize=" + maxAmqpFrameSize +
1:f37b005:                "&wireFormat.maxFrameSize=" + maxFrameSize;
1:7c41ebc:     }
1:7c41ebc: 
1:7c41ebc:     @Test(timeout = 600000)
1:7c41ebc:     public void testMaxFrameSizeApplied() throws Exception {
1:7c41ebc: 
1:7c41ebc:         LOG.info("Test starting {} for transport {} with MFS:{} and MAFS:{}",
1:7c41ebc:             new Object[]{ testName, getConnectorScheme(), maxFrameSize, maxAmqpFrameSize });
1:7c41ebc: 
1:7c41ebc:         final CountDownLatch failed = new CountDownLatch(1);
1:7c41ebc: 
1:7c41ebc:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:7c41ebc:         connection.setListener(new AmqpConnectionListener() {
1:7c41ebc: 
1:7c41ebc:             @Override
1:7c41ebc:             public void onException(Throwable ex) {
1:7c41ebc:                 failed.countDown();
1:7c41ebc:             }
1:7c41ebc:         });
1:7c41ebc: 
1:2e2d5dd:         connection.setIdleTimeout(TEST_IDLE_TIMEOUT);
1:7c41ebc:         connection.connect();
1:7c41ebc: 
1:7c41ebc:         AmqpSession session = connection.createSession();
1:7c41ebc:         AmqpSender sender = session.createSender("queue://" + getTestName(), true);
1:7c41ebc: 
1:2e2d5dd:         byte[] payload = new byte[maxFrameSize * 2];
1:7c41ebc:         for (int i = 0; i < payload.length; ++i) {
1:7c41ebc:             payload[i] = 42;
1:7c41ebc:         }
1:7c41ebc: 
1:7c41ebc:         AmqpMessage message = new AmqpMessage();
1:7c41ebc:         message.setBytes(payload);
1:7c41ebc: 
1:7c41ebc:         sender.send(message);
1:7c41ebc: 
1:2e2d5dd:         assertTrue("Connection should have failed", failed.await(30, TimeUnit.SECONDS));
1:7c41ebc: 
1:7c41ebc:         assertNotNull(getProxyToQueue(getTestName()));
1:7c41ebc:         assertEquals(0, getProxyToQueue(getTestName()).getQueueSize());
1:7c41ebc: 
1:7c41ebc:         connection.close();
1:7c41ebc:     }
1:7c41ebc: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1:     private final int TEST_IDLE_TIMEOUT = 500;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 { "amqp+ws-> MFS > MAFS", "amqp+ws", false, 1024, 2048 },
1:                 { "amqp+ws-> MFS < MAFS", "amqp+ws", false, 2048, 1024 },
/////////////////////////////////////////////////////////////////////////
1:         connection.setIdleTimeout(TEST_IDLE_TIMEOUT);
1:         byte[] payload = new byte[maxFrameSize * 2];
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Connection should have failed", failed.await(30, TimeUnit.SECONDS));
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
commit:f37b005
/////////////////////////////////////////////////////////////////////////
1:         return "&wireFormat.maxAmqpFrameSize=" + maxAmqpFrameSize +
1:                "&wireFormat.maxFrameSize=" + maxFrameSize;
commit:7c41ebc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpConnectionListener;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * Test that the maxFrameSize setting prevents large frames from being processed.
1:  */
1: @RunWith(Parameterized.class)
1: public class AmqpMaxFrameSizeTest extends AmqpClientTestSupport {
1: 
1:     private final String testName;
1:     private final int maxFrameSize;
1:     private final int maxAmqpFrameSize;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 { "amqp-> MFS > MAFS", "amqp", false, 1024, 2048 },
1:                 { "amqp-> MFS < MAFS", "amqp", false, 2048, 1024 },
1:                 { "amqp+nio-> MFS > MAFS", "amqp+nio", false, 1024, 2048 },
1:                 { "amqp+nio-> MFS < MAFS", "amqp+nio", false, 2048, 1024 },
1:             });
1:     }
1: 
1:     public AmqpMaxFrameSizeTest(String testName, String connectorScheme, boolean useSSL, int maxFrameSize, int maxAmqpFrameSize) {
1:         super(connectorScheme, useSSL);
1: 
1:         this.testName = testName;
1:         this.maxFrameSize = maxFrameSize;
1:         this.maxAmqpFrameSize = maxAmqpFrameSize;
1:     }
1: 
1:     @Override
1:     protected String getAdditionalConfig() {
0:         return "&transport.wireFormat.maxAmqpFrameSize=" + maxAmqpFrameSize +
0:                "&transport.maxFrameSize=" + maxFrameSize;
1:     }
1: 
1:     @Test(timeout = 600000)
1:     public void testMaxFrameSizeApplied() throws Exception {
1: 
1:         LOG.info("Test starting {} for transport {} with MFS:{} and MAFS:{}",
1:             new Object[]{ testName, getConnectorScheme(), maxFrameSize, maxAmqpFrameSize });
1: 
1:         final CountDownLatch failed = new CountDownLatch(1);
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setListener(new AmqpConnectionListener() {
1: 
1:             @Override
1:             public void onException(Throwable ex) {
1:                 failed.countDown();
1:             }
1:         });
1: 
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         AmqpSender sender = session.createSender("queue://" + getTestName(), true);
1: 
0:         byte[] payload = new byte[maxFrameSize];
1:         for (int i = 0; i < payload.length; ++i) {
1:             payload[i] = 42;
1:         }
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setBytes(payload);
1: 
1:         sender.send(message);
1: 
0:         assertTrue("Connection should have failed", failed.await(10, TimeUnit.SECONDS));
1: 
1:         assertNotNull(getProxyToQueue(getTestName()));
1:         assertEquals(0, getProxyToQueue(getTestName()).getQueueSize());
1: 
1:         connection.close();
1:     }
1: }
============================================================================