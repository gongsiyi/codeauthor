1:82e3ce8: /**
1:82e3ce8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82e3ce8:  * contributor license agreements.  See the NOTICE file distributed with
1:82e3ce8:  * this work for additional information regarding copyright ownership.
1:82e3ce8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82e3ce8:  * (the "License"); you may not use this file except in compliance with
1:82e3ce8:  * the License.  You may obtain a copy of the License at
1:82e3ce8:  *
1:82e3ce8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:82e3ce8:  *
1:82e3ce8:  * Unless required by applicable law or agreed to in writing, software
1:82e3ce8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82e3ce8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82e3ce8:  * See the License for the specific language governing permissions and
1:82e3ce8:  * limitations under the License.
1:82e3ce8:  */
1:82e3ce8: package org.apache.activemq.broker.jmx;
1:82e3ce8: 
1:82e3ce8: import static org.junit.Assert.assertFalse;
1:82e3ce8: import static org.junit.Assert.assertTrue;
1:82e3ce8: 
1:82e3ce8: import java.util.ArrayList;
1:82e3ce8: import java.util.List;
1:82e3ce8: 
1:82e3ce8: import org.apache.activemq.broker.BrokerPlugin;
1:82e3ce8: import org.apache.activemq.broker.BrokerService;
1:82e3ce8: import org.apache.activemq.filter.DestinationMapEntry;
1:82e3ce8: import org.apache.activemq.security.AuthorizationEntry;
1:82e3ce8: import org.apache.activemq.security.AuthorizationMap;
1:82e3ce8: import org.apache.activemq.security.AuthorizationPlugin;
1:82e3ce8: import org.apache.activemq.security.DefaultAuthorizationMap;
1:82e3ce8: import org.apache.activemq.security.JaasAuthenticationPlugin;
1:82e3ce8: import org.junit.After;
1:82e3ce8: import org.junit.Before;
1:82e3ce8: import org.junit.Test;
1:82e3ce8: import org.slf4j.Logger;
1:82e3ce8: import org.slf4j.LoggerFactory;
1:82e3ce8: 
1:82e3ce8: /**
1:82e3ce8:  * Makes sure a durable subscriber can be added and deleted from the
1:82e3ce8:  * brokerServer.getAdminView() when JAAS authentication and authorization are
1:82e3ce8:  * setup
1:82e3ce8:  */
1:82e3ce8: public class JMXRemoveDurableSubscriberTest {
1:82e3ce8: 
1:82e3ce8:     private static final Logger LOG = LoggerFactory.getLogger(JMXRemoveDurableSubscriberTest.class);
1:82e3ce8: 
1:82e3ce8:     private BrokerService brokerService;
1:82e3ce8: 
1:82e3ce8:     @SuppressWarnings("rawtypes")
1:82e3ce8:     @Before
1:82e3ce8:     public void setUp() throws Exception {
1:82e3ce8:         brokerService = new BrokerService();
1:82e3ce8: 
1:82e3ce8:         JaasAuthenticationPlugin jaasAuthenticationPlugin = new JaasAuthenticationPlugin();
1:82e3ce8:         jaasAuthenticationPlugin.setDiscoverLoginConfig(true);
1:82e3ce8: 
1:82e3ce8:         BrokerPlugin[] brokerPlugins = new BrokerPlugin[2];
1:82e3ce8:         brokerPlugins[0] = jaasAuthenticationPlugin;
1:82e3ce8: 
1:82e3ce8:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin();
1:82e3ce8: 
1:82e3ce8:         List<DestinationMapEntry> destinationMapEntries = new ArrayList<DestinationMapEntry>();
1:82e3ce8: 
1:82e3ce8:         // Add Authorization Entries.
1:82e3ce8:         AuthorizationEntry authEntry1 = new AuthorizationEntry();
1:82e3ce8:         authEntry1.setRead("manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser, admin");
1:82e3ce8:         authEntry1.setWrite("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:82e3ce8:         authEntry1.setAdmin("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:82e3ce8:         authEntry1.setQueue(">");
1:82e3ce8: 
1:82e3ce8:         AuthorizationEntry authEntry2 = new AuthorizationEntry();
1:82e3ce8:         authEntry2.setRead("manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser, admin");
1:82e3ce8:         authEntry2.setWrite("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:82e3ce8:         authEntry2.setAdmin("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:82e3ce8:         authEntry2.setTopic(">");
1:82e3ce8: 
1:82e3ce8:         AuthorizationEntry authEntry3 = new AuthorizationEntry();
1:82e3ce8:         authEntry3.setRead("manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser, admin");
1:82e3ce8:         authEntry3.setWrite("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:82e3ce8:         authEntry3.setAdmin("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:82e3ce8:         authEntry3.setTopic("ActiveMQ.Advisory.>");
1:82e3ce8: 
1:82e3ce8:         destinationMapEntries.add(authEntry1);
1:82e3ce8:         destinationMapEntries.add(authEntry2);
1:82e3ce8:         destinationMapEntries.add(authEntry3);
1:82e3ce8: 
1:82e3ce8:         AuthorizationMap authorizationMap = new DefaultAuthorizationMap(destinationMapEntries);
1:82e3ce8: 
1:82e3ce8:         authorizationPlugin.setMap(authorizationMap);
1:82e3ce8: 
1:82e3ce8:         brokerPlugins[1] = authorizationPlugin;
1:82e3ce8: 
1:82e3ce8:         brokerService.setPlugins(brokerPlugins);
1:82e3ce8: 
1:82e3ce8:         brokerService.setBrokerName("ActiveMQBroker");
1:82e3ce8:         brokerService.setPersistent(false);
1:82e3ce8:         brokerService.setUseVirtualTopics(false);
1:82e3ce8:         brokerService.setUseJmx(true);
1:82e3ce8:         brokerService.addConnector("tcp://localhost:0");
1:82e3ce8:         brokerService.start();
1:82e3ce8:     }
1:82e3ce8: 
1:82e3ce8:     @After
1:82e3ce8:     public void tearDown() throws Exception {
1:82e3ce8:         if (brokerService != null) {
1:82e3ce8:             try {
1:82e3ce8:                 brokerService.stop();
1:82e3ce8:             } catch (Exception e) {
1:82e3ce8:             }
1:82e3ce8:         }
1:82e3ce8:     }
1:82e3ce8: 
1:82e3ce8:     /**
1:82e3ce8:      * Creates a durable subscription via the AdminView
1:82e3ce8:      */
1:82e3ce8:     @Test(timeout = 60000)
1:82e3ce8:     public void testCreateDurableSubsciber() throws Exception {
1:82e3ce8: 
1:82e3ce8:         String clientId = "10";
1:82e3ce8: 
1:82e3ce8:         // Add a topic called test topic
1:82e3ce8:         brokerService.getAdminView().addTopic("testTopic");
1:82e3ce8: 
1:82e3ce8:         boolean createSubscriberSecurityException = false;
1:82e3ce8: 
1:82e3ce8:         String subscriberName = "testSubscriber";
1:82e3ce8: 
1:82e3ce8:         // Create a durable subscriber with the name testSubscriber
1:82e3ce8:         try {
1:82e3ce8:             brokerService.getAdminView().createDurableSubscriber(clientId, subscriberName, "testTopic", null);
1:82e3ce8:             LOG.info("Successfully created durable subscriber " + subscriberName + " via AdminView");
1:82e3ce8:         } catch (java.lang.SecurityException se1) {
1:82e3ce8:             if (se1.getMessage().equals("User is not authenticated.")) {
1:82e3ce8:                 createSubscriberSecurityException = true;
1:82e3ce8:             }
1:82e3ce8:         }
1:82e3ce8:         assertFalse(createSubscriberSecurityException);
1:82e3ce8: 
1:82e3ce8:         // Delete the durable subscriber that was created earlier.
1:82e3ce8:         boolean destroySubscriberSecurityException = false;
1:82e3ce8:         try {
1:82e3ce8:             brokerService.getAdminView().destroyDurableSubscriber(clientId, subscriberName);
1:82e3ce8:             LOG.info("Successfully destroyed durable subscriber " + subscriberName + " via AdminView");
1:82e3ce8:         } catch (java.lang.SecurityException se2) {
1:82e3ce8:             if (se2.getMessage().equals("User is not authenticated.")) {
1:82e3ce8:                 destroySubscriberSecurityException = true;
1:82e3ce8:             }
1:82e3ce8:         }
1:82e3ce8:         assertFalse(destroySubscriberSecurityException);
1:82e3ce8: 
1:82e3ce8:         // Just to make sure the subscriber was actually deleted, try deleting
1:82e3ce8:         // the subscriber again
1:82e3ce8:         // and that should throw an exception
1:82e3ce8:         boolean subscriberAlreadyDeleted = false;
1:82e3ce8:         try {
1:82e3ce8:             brokerService.getAdminView().destroyDurableSubscriber(clientId, subscriberName);
1:82e3ce8:             LOG.info("Successfully destroyed durable subscriber " + subscriberName + " via AdminView");
1:82e3ce8:         } catch (javax.jms.InvalidDestinationException t) {
1:82e3ce8:             if (t.getMessage().equals("No durable subscription exists for clientID: 10 and subscriptionName: testSubscriber")) {
1:82e3ce8:                 subscriberAlreadyDeleted = true;
1:82e3ce8:             }
1:82e3ce8:         }
1:82e3ce8:         assertTrue(subscriberAlreadyDeleted);
1:82e3ce8:     }
1:82e3ce8: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:82e3ce8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.security.AuthorizationEntry;
1: import org.apache.activemq.security.AuthorizationMap;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.DefaultAuthorizationMap;
1: import org.apache.activemq.security.JaasAuthenticationPlugin;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Makes sure a durable subscriber can be added and deleted from the
1:  * brokerServer.getAdminView() when JAAS authentication and authorization are
1:  * setup
1:  */
1: public class JMXRemoveDurableSubscriberTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JMXRemoveDurableSubscriberTest.class);
1: 
1:     private BrokerService brokerService;
1: 
1:     @SuppressWarnings("rawtypes")
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1: 
1:         JaasAuthenticationPlugin jaasAuthenticationPlugin = new JaasAuthenticationPlugin();
1:         jaasAuthenticationPlugin.setDiscoverLoginConfig(true);
1: 
1:         BrokerPlugin[] brokerPlugins = new BrokerPlugin[2];
1:         brokerPlugins[0] = jaasAuthenticationPlugin;
1: 
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin();
1: 
1:         List<DestinationMapEntry> destinationMapEntries = new ArrayList<DestinationMapEntry>();
1: 
1:         // Add Authorization Entries.
1:         AuthorizationEntry authEntry1 = new AuthorizationEntry();
1:         authEntry1.setRead("manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser, admin");
1:         authEntry1.setWrite("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:         authEntry1.setAdmin("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:         authEntry1.setQueue(">");
1: 
1:         AuthorizationEntry authEntry2 = new AuthorizationEntry();
1:         authEntry2.setRead("manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser, admin");
1:         authEntry2.setWrite("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:         authEntry2.setAdmin("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:         authEntry2.setTopic(">");
1: 
1:         AuthorizationEntry authEntry3 = new AuthorizationEntry();
1:         authEntry3.setRead("manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser, admin");
1:         authEntry3.setWrite("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:         authEntry3.setAdmin("manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin");
1:         authEntry3.setTopic("ActiveMQ.Advisory.>");
1: 
1:         destinationMapEntries.add(authEntry1);
1:         destinationMapEntries.add(authEntry2);
1:         destinationMapEntries.add(authEntry3);
1: 
1:         AuthorizationMap authorizationMap = new DefaultAuthorizationMap(destinationMapEntries);
1: 
1:         authorizationPlugin.setMap(authorizationMap);
1: 
1:         brokerPlugins[1] = authorizationPlugin;
1: 
1:         brokerService.setPlugins(brokerPlugins);
1: 
1:         brokerService.setBrokerName("ActiveMQBroker");
1:         brokerService.setPersistent(false);
1:         brokerService.setUseVirtualTopics(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             try {
1:                 brokerService.stop();
1:             } catch (Exception e) {
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Creates a durable subscription via the AdminView
1:      */
1:     @Test(timeout = 60000)
1:     public void testCreateDurableSubsciber() throws Exception {
1: 
1:         String clientId = "10";
1: 
1:         // Add a topic called test topic
1:         brokerService.getAdminView().addTopic("testTopic");
1: 
1:         boolean createSubscriberSecurityException = false;
1: 
1:         String subscriberName = "testSubscriber";
1: 
1:         // Create a durable subscriber with the name testSubscriber
1:         try {
1:             brokerService.getAdminView().createDurableSubscriber(clientId, subscriberName, "testTopic", null);
1:             LOG.info("Successfully created durable subscriber " + subscriberName + " via AdminView");
1:         } catch (java.lang.SecurityException se1) {
1:             if (se1.getMessage().equals("User is not authenticated.")) {
1:                 createSubscriberSecurityException = true;
1:             }
1:         }
1:         assertFalse(createSubscriberSecurityException);
1: 
1:         // Delete the durable subscriber that was created earlier.
1:         boolean destroySubscriberSecurityException = false;
1:         try {
1:             brokerService.getAdminView().destroyDurableSubscriber(clientId, subscriberName);
1:             LOG.info("Successfully destroyed durable subscriber " + subscriberName + " via AdminView");
1:         } catch (java.lang.SecurityException se2) {
1:             if (se2.getMessage().equals("User is not authenticated.")) {
1:                 destroySubscriberSecurityException = true;
1:             }
1:         }
1:         assertFalse(destroySubscriberSecurityException);
1: 
1:         // Just to make sure the subscriber was actually deleted, try deleting
1:         // the subscriber again
1:         // and that should throw an exception
1:         boolean subscriberAlreadyDeleted = false;
1:         try {
1:             brokerService.getAdminView().destroyDurableSubscriber(clientId, subscriberName);
1:             LOG.info("Successfully destroyed durable subscriber " + subscriberName + " via AdminView");
1:         } catch (javax.jms.InvalidDestinationException t) {
1:             if (t.getMessage().equals("No durable subscription exists for clientID: 10 and subscriptionName: testSubscriber")) {
1:                 subscriberAlreadyDeleted = true;
1:             }
1:         }
1:         assertTrue(subscriberAlreadyDeleted);
1:     }
1: }
============================================================================