1:4b018b4: /*
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82a5839:  * contributor license agreements.  See the NOTICE file distributed with
1:82a5839:  * this work for additional information regarding copyright ownership.
1:82a5839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82a5839:  * (the "License"); you may not use this file except in compliance with
1:82a5839:  * the License.  You may obtain a copy of the License at
1:82a5839:  *
1:82a5839:  *      http://www.apache.org/licenses/LICENSE-2.0
1:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing, software
1:82a5839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82a5839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82a5839:  * See the License for the specific language governing permissions and
1:82a5839:  * limitations under the License.
1:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.transport;
2:82a5839: 
1:82a5839: import java.io.File;
1:82a5839: import java.io.FileInputStream;
1:82a5839: import java.io.InputStream;
1:82a5839: import java.net.URI;
1:82a5839: import java.security.KeyStore;
1:82a5839: import java.security.KeyStoreException;
1:82a5839: import java.security.SecureRandom;
1:82a5839: import java.security.cert.CertificateException;
1:82a5839: import java.security.cert.X509Certificate;
1:82a5839: import java.util.ArrayList;
1:82a5839: import java.util.Arrays;
1:82a5839: import java.util.List;
1:82a5839: 
1:82a5839: import javax.net.ssl.KeyManager;
1:82a5839: import javax.net.ssl.KeyManagerFactory;
1:82a5839: import javax.net.ssl.SSLContext;
1:82a5839: import javax.net.ssl.SSLEngine;
1:82a5839: import javax.net.ssl.SSLParameters;
1:82a5839: import javax.net.ssl.TrustManager;
1:82a5839: import javax.net.ssl.TrustManagerFactory;
1:82a5839: import javax.net.ssl.X509ExtendedKeyManager;
1:82a5839: import javax.net.ssl.X509TrustManager;
1:82a5839: 
1:82a5839: import org.slf4j.Logger;
1:82a5839: import org.slf4j.LoggerFactory;
1:82a5839: 
1:4b018b4: import io.netty.handler.ssl.SslHandler;
1:4b018b4: 
2:82a5839: /**
1:82a5839:  * Static class that provides various utility methods used by Transport implementations.
1:82a5839:  */
1:82a5839: public class NettyTransportSupport {
1:82a5839: 
1:82a5839:     private static final Logger LOG = LoggerFactory.getLogger(NettyTransportSupport.class);
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Creates a Netty SslHandler instance for use in Transports that require
1:82a5839:      * an SSL encoder / decoder.
1:82a5839:      *
1:82a5839:      * @param remote
1:82a5839:      *        The URI of the remote peer that the SslHandler will be used against.
1:82a5839:      * @param options
1:82a5839:      *        The SSL options object to build the SslHandler instance from.
1:82a5839:      *
1:82a5839:      * @return a new SslHandler that is configured from the given options.
1:82a5839:      *
1:82a5839:      * @throws Exception if an error occurs while creating the SslHandler instance.
1:82a5839:      */
1:82a5839:     public static SslHandler createSslHandler(URI remote, NettyTransportSslOptions options) throws Exception {
1:82a5839:         return new SslHandler(createSslEngine(remote, createSslContext(options), options));
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Create a new SSLContext using the options specific in the given TransportSslOptions
1:82a5839:      * instance.
1:82a5839:      *
1:82a5839:      * @param options
1:82a5839:      *        the configured options used to create the SSLContext.
1:82a5839:      *
1:82a5839:      * @return a new SSLContext instance.
1:82a5839:      *
1:82a5839:      * @throws Exception if an error occurs while creating the context.
1:82a5839:      */
1:82a5839:     public static SSLContext createSslContext(NettyTransportSslOptions options) throws Exception {
1:82a5839:         try {
1:82a5839:             String contextProtocol = options.getContextProtocol();
1:82a5839:             LOG.trace("Getting SSLContext instance using protocol: {}", contextProtocol);
1:82a5839: 
1:82a5839:             SSLContext context = SSLContext.getInstance(contextProtocol);
1:82a5839:             KeyManager[] keyMgrs = loadKeyManagers(options);
1:82a5839:             TrustManager[] trustManagers = loadTrustManagers(options);
1:82a5839: 
1:82a5839:             context.init(keyMgrs, trustManagers, new SecureRandom());
1:82a5839:             return context;
1:82a5839:         } catch (Exception e) {
1:82a5839:             LOG.error("Failed to create SSLContext: {}", e, e);
1:82a5839:             throw e;
1:82a5839:         }
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Create a new SSLEngine instance in client mode from the given SSLContext and
1:82a5839:      * TransportSslOptions instances.
1:82a5839:      *
1:82a5839:      * @param context
1:82a5839:      *        the SSLContext to use when creating the engine.
1:82a5839:      * @param options
1:82a5839:      *        the TransportSslOptions to use to configure the new SSLEngine.
1:82a5839:      *
1:82a5839:      * @return a new SSLEngine instance in client mode.
1:82a5839:      *
1:82a5839:      * @throws Exception if an error occurs while creating the new SSLEngine.
1:82a5839:      */
1:82a5839:     public static SSLEngine createSslEngine(SSLContext context, NettyTransportSslOptions options) throws Exception {
1:82a5839:         return createSslEngine(null, context, options);
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Create a new SSLEngine instance in client mode from the given SSLContext and
1:82a5839:      * TransportSslOptions instances.
1:82a5839:      *
1:82a5839:      * @param remote
1:82a5839:      *        the URI of the remote peer that will be used to initialize the engine, may be null if none should.
1:82a5839:      * @param context
1:82a5839:      *        the SSLContext to use when creating the engine.
1:82a5839:      * @param options
1:82a5839:      *        the TransportSslOptions to use to configure the new SSLEngine.
1:82a5839:      *
1:82a5839:      * @return a new SSLEngine instance in client mode.
1:82a5839:      *
1:82a5839:      * @throws Exception if an error occurs while creating the new SSLEngine.
1:82a5839:      */
1:82a5839:     public static SSLEngine createSslEngine(URI remote, SSLContext context, NettyTransportSslOptions options) throws Exception {
1:82a5839:         SSLEngine engine = null;
1:82a5839:         if(remote == null) {
1:82a5839:             engine = context.createSSLEngine();
1:82a5839:         } else {
1:82a5839:             engine = context.createSSLEngine(remote.getHost(), remote.getPort());
1:82a5839:         }
1:82a5839: 
1:82a5839:         engine.setEnabledProtocols(buildEnabledProtocols(engine, options));
1:82a5839:         engine.setEnabledCipherSuites(buildEnabledCipherSuites(engine, options));
1:82a5839:         engine.setUseClientMode(true);
1:82a5839: 
1:82a5839:         if (options.isVerifyHost()) {
1:82a5839:             SSLParameters sslParameters = engine.getSSLParameters();
1:82a5839:             sslParameters.setEndpointIdentificationAlgorithm("HTTPS");
1:82a5839:             engine.setSSLParameters(sslParameters);
1:82a5839:         }
1:82a5839: 
1:82a5839:         return engine;
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static String[] buildEnabledProtocols(SSLEngine engine, NettyTransportSslOptions options) {
1:82a5839:         List<String> enabledProtocols = new ArrayList<String>();
1:82a5839: 
1:82a5839:         if (options.getEnabledProtocols() != null) {
1:82a5839:             List<String> configuredProtocols = Arrays.asList(options.getEnabledProtocols());
1:82a5839:             LOG.trace("Configured protocols from transport options: {}", configuredProtocols);
1:82a5839:             enabledProtocols.addAll(configuredProtocols);
1:82a5839:         } else {
1:82a5839:             List<String> engineProtocols = Arrays.asList(engine.getEnabledProtocols());
1:82a5839:             LOG.trace("Default protocols from the SSLEngine: {}", engineProtocols);
1:82a5839:             enabledProtocols.addAll(engineProtocols);
1:82a5839:         }
1:82a5839: 
1:82a5839:         String[] disabledProtocols = options.getDisabledProtocols();
1:82a5839:         if (disabledProtocols != null) {
1:82a5839:             List<String> disabled = Arrays.asList(disabledProtocols);
1:82a5839:             LOG.trace("Disabled protocols: {}", disabled);
1:82a5839:             enabledProtocols.removeAll(disabled);
1:82a5839:         }
1:82a5839: 
1:82a5839:         LOG.trace("Enabled protocols: {}", enabledProtocols);
1:82a5839: 
1:82a5839:         return enabledProtocols.toArray(new String[0]);
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static String[] buildEnabledCipherSuites(SSLEngine engine, NettyTransportSslOptions options) {
1:82a5839:         List<String> enabledCipherSuites = new ArrayList<String>();
1:82a5839: 
1:82a5839:         if (options.getEnabledCipherSuites() != null) {
1:82a5839:             List<String> configuredCipherSuites = Arrays.asList(options.getEnabledCipherSuites());
1:82a5839:             LOG.trace("Configured cipher suites from transport options: {}", configuredCipherSuites);
1:82a5839:             enabledCipherSuites.addAll(configuredCipherSuites);
1:82a5839:         } else {
1:82a5839:             List<String> engineCipherSuites = Arrays.asList(engine.getEnabledCipherSuites());
1:82a5839:             LOG.trace("Default cipher suites from the SSLEngine: {}", engineCipherSuites);
1:82a5839:             enabledCipherSuites.addAll(engineCipherSuites);
1:82a5839:         }
1:82a5839: 
1:82a5839:         String[] disabledCipherSuites = options.getDisabledCipherSuites();
1:82a5839:         if (disabledCipherSuites != null) {
1:82a5839:             List<String> disabled = Arrays.asList(disabledCipherSuites);
1:82a5839:             LOG.trace("Disabled cipher suites: {}", disabled);
1:82a5839:             enabledCipherSuites.removeAll(disabled);
1:82a5839:         }
1:82a5839: 
1:82a5839:         LOG.trace("Enabled cipher suites: {}", enabledCipherSuites);
1:82a5839: 
1:82a5839:         return enabledCipherSuites.toArray(new String[0]);
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static TrustManager[] loadTrustManagers(NettyTransportSslOptions options) throws Exception {
1:82a5839:         if (options.isTrustAll()) {
1:82a5839:             return new TrustManager[] { createTrustAllTrustManager() };
1:82a5839:         }
1:82a5839: 
1:82a5839:         if (options.getTrustStoreLocation() == null) {
1:82a5839:             return null;
1:82a5839:         }
1:82a5839: 
1:82a5839:         TrustManagerFactory fact = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
1:82a5839: 
1:82a5839:         String storeLocation = options.getTrustStoreLocation();
1:82a5839:         String storePassword = options.getTrustStorePassword();
1:82a5839:         String storeType = options.getStoreType();
1:82a5839: 
1:82a5839:         LOG.trace("Attempt to load TrustStore from location {} of type {}", storeLocation, storeType);
1:82a5839: 
1:82a5839:         KeyStore trustStore = loadStore(storeLocation, storePassword, storeType);
1:82a5839:         fact.init(trustStore);
1:82a5839: 
1:82a5839:         return fact.getTrustManagers();
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static KeyManager[] loadKeyManagers(NettyTransportSslOptions options) throws Exception {
1:82a5839:         if (options.getKeyStoreLocation() == null) {
1:82a5839:             return null;
1:82a5839:         }
1:82a5839: 
1:82a5839:         KeyManagerFactory fact = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
1:82a5839: 
1:82a5839:         String storeLocation = options.getKeyStoreLocation();
1:82a5839:         String storePassword = options.getKeyStorePassword();
1:82a5839:         String storeType = options.getStoreType();
1:82a5839:         String alias = options.getKeyAlias();
1:82a5839: 
1:82a5839:         LOG.trace("Attempt to load KeyStore from location {} of type {}", storeLocation, storeType);
1:82a5839: 
1:82a5839:         KeyStore keyStore = loadStore(storeLocation, storePassword, storeType);
1:82a5839:         fact.init(keyStore, storePassword != null ? storePassword.toCharArray() : null);
1:82a5839: 
1:82a5839:         if (alias == null) {
1:82a5839:             return fact.getKeyManagers();
1:82a5839:         } else {
1:82a5839:             validateAlias(keyStore, alias);
1:82a5839:             return wrapKeyManagers(alias, fact.getKeyManagers());
1:82a5839:         }
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static KeyManager[] wrapKeyManagers(String alias, KeyManager[] origKeyManagers) {
1:82a5839:         KeyManager[] keyManagers = new KeyManager[origKeyManagers.length];
1:82a5839:         for (int i = 0; i < origKeyManagers.length; i++) {
1:82a5839:             KeyManager km = origKeyManagers[i];
1:82a5839:             if (km instanceof X509ExtendedKeyManager) {
1:82a5839:                 km = new X509AliasKeyManager(alias, (X509ExtendedKeyManager) km);
1:82a5839:             }
1:82a5839: 
1:82a5839:             keyManagers[i] = km;
1:82a5839:         }
1:82a5839: 
1:82a5839:         return keyManagers;
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static void validateAlias(KeyStore store, String alias) throws IllegalArgumentException, KeyStoreException {
1:82a5839:         if (!store.containsAlias(alias)) {
1:82a5839:             throw new IllegalArgumentException("The alias '" + alias + "' doesn't exist in the key store");
1:82a5839:         }
1:82a5839: 
1:82a5839:         if (!store.isKeyEntry(alias)) {
1:82a5839:             throw new IllegalArgumentException("The alias '" + alias + "' in the keystore doesn't represent a key entry");
1:82a5839:         }
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static KeyStore loadStore(String storePath, final String password, String storeType) throws Exception {
1:82a5839:         KeyStore store = KeyStore.getInstance(storeType);
1:82a5839:         try (InputStream in = new FileInputStream(new File(storePath));) {
1:82a5839:             store.load(in, password != null ? password.toCharArray() : null);
1:82a5839:         }
1:82a5839: 
1:82a5839:         return store;
1:82a5839:     }
1:82a5839: 
1:82a5839:     private static TrustManager createTrustAllTrustManager() {
1:82a5839:         return new X509TrustManager() {
1:82a5839:             @Override
1:82a5839:             public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
1:82a5839:             }
1:82a5839: 
1:82a5839:             @Override
1:82a5839:             public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
1:82a5839:             }
1:82a5839: 
1:82a5839:             @Override
1:82a5839:             public X509Certificate[] getAcceptedIssuers() {
1:82a5839:                 return new X509Certificate[0];
1:82a5839:             }
1:82a5839:         };
1:82a5839:     }
1:82a5839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4b018b4
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import io.netty.handler.ssl.SslHandler;
1: 
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
0: import io.netty.handler.ssl.SslHandler;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.InputStream;
1: import java.net.URI;
1: import java.security.KeyStore;
1: import java.security.KeyStoreException;
1: import java.security.SecureRandom;
1: import java.security.cert.CertificateException;
1: import java.security.cert.X509Certificate;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import javax.net.ssl.KeyManager;
1: import javax.net.ssl.KeyManagerFactory;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLEngine;
1: import javax.net.ssl.SSLParameters;
1: import javax.net.ssl.TrustManager;
1: import javax.net.ssl.TrustManagerFactory;
1: import javax.net.ssl.X509ExtendedKeyManager;
1: import javax.net.ssl.X509TrustManager;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Static class that provides various utility methods used by Transport implementations.
1:  */
1: public class NettyTransportSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(NettyTransportSupport.class);
1: 
1:     /**
1:      * Creates a Netty SslHandler instance for use in Transports that require
1:      * an SSL encoder / decoder.
1:      *
1:      * @param remote
1:      *        The URI of the remote peer that the SslHandler will be used against.
1:      * @param options
1:      *        The SSL options object to build the SslHandler instance from.
1:      *
1:      * @return a new SslHandler that is configured from the given options.
1:      *
1:      * @throws Exception if an error occurs while creating the SslHandler instance.
1:      */
1:     public static SslHandler createSslHandler(URI remote, NettyTransportSslOptions options) throws Exception {
1:         return new SslHandler(createSslEngine(remote, createSslContext(options), options));
1:     }
1: 
1:     /**
1:      * Create a new SSLContext using the options specific in the given TransportSslOptions
1:      * instance.
1:      *
1:      * @param options
1:      *        the configured options used to create the SSLContext.
1:      *
1:      * @return a new SSLContext instance.
1:      *
1:      * @throws Exception if an error occurs while creating the context.
1:      */
1:     public static SSLContext createSslContext(NettyTransportSslOptions options) throws Exception {
1:         try {
1:             String contextProtocol = options.getContextProtocol();
1:             LOG.trace("Getting SSLContext instance using protocol: {}", contextProtocol);
1: 
1:             SSLContext context = SSLContext.getInstance(contextProtocol);
1:             KeyManager[] keyMgrs = loadKeyManagers(options);
1:             TrustManager[] trustManagers = loadTrustManagers(options);
1: 
1:             context.init(keyMgrs, trustManagers, new SecureRandom());
1:             return context;
1:         } catch (Exception e) {
1:             LOG.error("Failed to create SSLContext: {}", e, e);
1:             throw e;
1:         }
1:     }
1: 
1:     /**
1:      * Create a new SSLEngine instance in client mode from the given SSLContext and
1:      * TransportSslOptions instances.
1:      *
1:      * @param context
1:      *        the SSLContext to use when creating the engine.
1:      * @param options
1:      *        the TransportSslOptions to use to configure the new SSLEngine.
1:      *
1:      * @return a new SSLEngine instance in client mode.
1:      *
1:      * @throws Exception if an error occurs while creating the new SSLEngine.
1:      */
1:     public static SSLEngine createSslEngine(SSLContext context, NettyTransportSslOptions options) throws Exception {
1:         return createSslEngine(null, context, options);
1:     }
1: 
1:     /**
1:      * Create a new SSLEngine instance in client mode from the given SSLContext and
1:      * TransportSslOptions instances.
1:      *
1:      * @param remote
1:      *        the URI of the remote peer that will be used to initialize the engine, may be null if none should.
1:      * @param context
1:      *        the SSLContext to use when creating the engine.
1:      * @param options
1:      *        the TransportSslOptions to use to configure the new SSLEngine.
1:      *
1:      * @return a new SSLEngine instance in client mode.
1:      *
1:      * @throws Exception if an error occurs while creating the new SSLEngine.
1:      */
1:     public static SSLEngine createSslEngine(URI remote, SSLContext context, NettyTransportSslOptions options) throws Exception {
1:         SSLEngine engine = null;
1:         if(remote == null) {
1:             engine = context.createSSLEngine();
1:         } else {
1:             engine = context.createSSLEngine(remote.getHost(), remote.getPort());
1:         }
1: 
1:         engine.setEnabledProtocols(buildEnabledProtocols(engine, options));
1:         engine.setEnabledCipherSuites(buildEnabledCipherSuites(engine, options));
1:         engine.setUseClientMode(true);
1: 
1:         if (options.isVerifyHost()) {
1:             SSLParameters sslParameters = engine.getSSLParameters();
1:             sslParameters.setEndpointIdentificationAlgorithm("HTTPS");
1:             engine.setSSLParameters(sslParameters);
1:         }
1: 
1:         return engine;
1:     }
1: 
1:     private static String[] buildEnabledProtocols(SSLEngine engine, NettyTransportSslOptions options) {
1:         List<String> enabledProtocols = new ArrayList<String>();
1: 
1:         if (options.getEnabledProtocols() != null) {
1:             List<String> configuredProtocols = Arrays.asList(options.getEnabledProtocols());
1:             LOG.trace("Configured protocols from transport options: {}", configuredProtocols);
1:             enabledProtocols.addAll(configuredProtocols);
1:         } else {
1:             List<String> engineProtocols = Arrays.asList(engine.getEnabledProtocols());
1:             LOG.trace("Default protocols from the SSLEngine: {}", engineProtocols);
1:             enabledProtocols.addAll(engineProtocols);
1:         }
1: 
1:         String[] disabledProtocols = options.getDisabledProtocols();
1:         if (disabledProtocols != null) {
1:             List<String> disabled = Arrays.asList(disabledProtocols);
1:             LOG.trace("Disabled protocols: {}", disabled);
1:             enabledProtocols.removeAll(disabled);
1:         }
1: 
1:         LOG.trace("Enabled protocols: {}", enabledProtocols);
1: 
1:         return enabledProtocols.toArray(new String[0]);
1:     }
1: 
1:     private static String[] buildEnabledCipherSuites(SSLEngine engine, NettyTransportSslOptions options) {
1:         List<String> enabledCipherSuites = new ArrayList<String>();
1: 
1:         if (options.getEnabledCipherSuites() != null) {
1:             List<String> configuredCipherSuites = Arrays.asList(options.getEnabledCipherSuites());
1:             LOG.trace("Configured cipher suites from transport options: {}", configuredCipherSuites);
1:             enabledCipherSuites.addAll(configuredCipherSuites);
1:         } else {
1:             List<String> engineCipherSuites = Arrays.asList(engine.getEnabledCipherSuites());
1:             LOG.trace("Default cipher suites from the SSLEngine: {}", engineCipherSuites);
1:             enabledCipherSuites.addAll(engineCipherSuites);
1:         }
1: 
1:         String[] disabledCipherSuites = options.getDisabledCipherSuites();
1:         if (disabledCipherSuites != null) {
1:             List<String> disabled = Arrays.asList(disabledCipherSuites);
1:             LOG.trace("Disabled cipher suites: {}", disabled);
1:             enabledCipherSuites.removeAll(disabled);
1:         }
1: 
1:         LOG.trace("Enabled cipher suites: {}", enabledCipherSuites);
1: 
1:         return enabledCipherSuites.toArray(new String[0]);
1:     }
1: 
1:     private static TrustManager[] loadTrustManagers(NettyTransportSslOptions options) throws Exception {
1:         if (options.isTrustAll()) {
1:             return new TrustManager[] { createTrustAllTrustManager() };
1:         }
1: 
1:         if (options.getTrustStoreLocation() == null) {
1:             return null;
1:         }
1: 
1:         TrustManagerFactory fact = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
1: 
1:         String storeLocation = options.getTrustStoreLocation();
1:         String storePassword = options.getTrustStorePassword();
1:         String storeType = options.getStoreType();
1: 
1:         LOG.trace("Attempt to load TrustStore from location {} of type {}", storeLocation, storeType);
1: 
1:         KeyStore trustStore = loadStore(storeLocation, storePassword, storeType);
1:         fact.init(trustStore);
1: 
1:         return fact.getTrustManagers();
1:     }
1: 
1:     private static KeyManager[] loadKeyManagers(NettyTransportSslOptions options) throws Exception {
1:         if (options.getKeyStoreLocation() == null) {
1:             return null;
1:         }
1: 
1:         KeyManagerFactory fact = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
1: 
1:         String storeLocation = options.getKeyStoreLocation();
1:         String storePassword = options.getKeyStorePassword();
1:         String storeType = options.getStoreType();
1:         String alias = options.getKeyAlias();
1: 
1:         LOG.trace("Attempt to load KeyStore from location {} of type {}", storeLocation, storeType);
1: 
1:         KeyStore keyStore = loadStore(storeLocation, storePassword, storeType);
1:         fact.init(keyStore, storePassword != null ? storePassword.toCharArray() : null);
1: 
1:         if (alias == null) {
1:             return fact.getKeyManagers();
1:         } else {
1:             validateAlias(keyStore, alias);
1:             return wrapKeyManagers(alias, fact.getKeyManagers());
1:         }
1:     }
1: 
1:     private static KeyManager[] wrapKeyManagers(String alias, KeyManager[] origKeyManagers) {
1:         KeyManager[] keyManagers = new KeyManager[origKeyManagers.length];
1:         for (int i = 0; i < origKeyManagers.length; i++) {
1:             KeyManager km = origKeyManagers[i];
1:             if (km instanceof X509ExtendedKeyManager) {
1:                 km = new X509AliasKeyManager(alias, (X509ExtendedKeyManager) km);
1:             }
1: 
1:             keyManagers[i] = km;
1:         }
1: 
1:         return keyManagers;
1:     }
1: 
1:     private static void validateAlias(KeyStore store, String alias) throws IllegalArgumentException, KeyStoreException {
1:         if (!store.containsAlias(alias)) {
1:             throw new IllegalArgumentException("The alias '" + alias + "' doesn't exist in the key store");
1:         }
1: 
1:         if (!store.isKeyEntry(alias)) {
1:             throw new IllegalArgumentException("The alias '" + alias + "' in the keystore doesn't represent a key entry");
1:         }
1:     }
1: 
1:     private static KeyStore loadStore(String storePath, final String password, String storeType) throws Exception {
1:         KeyStore store = KeyStore.getInstance(storeType);
1:         try (InputStream in = new FileInputStream(new File(storePath));) {
1:             store.load(in, password != null ? password.toCharArray() : null);
1:         }
1: 
1:         return store;
1:     }
1: 
1:     private static TrustManager createTrustAllTrustManager() {
1:         return new X509TrustManager() {
1:             @Override
1:             public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
1:             }
1: 
1:             @Override
1:             public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
1:             }
1: 
1:             @Override
1:             public X509Certificate[] getAcceptedIssuers() {
1:                 return new X509Certificate[0];
1:             }
1:         };
1:     }
1: }
============================================================================