1:bfaff9b: /**
1:bfaff9b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bfaff9b:  * contributor license agreements.  See the NOTICE file distributed with
1:bfaff9b:  * this work for additional information regarding copyright ownership.
1:bfaff9b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bfaff9b:  * (the "License"); you may not use this file except in compliance with
1:bfaff9b:  * the License.  You may obtain a copy of the License at
2:bfaff9b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bfaff9b:  *
1:bfaff9b:  * Unless required by applicable law or agreed to in writing, software
1:bfaff9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bfaff9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bfaff9b:  * See the License for the specific language governing permissions and
1:bfaff9b:  * limitations under the License.
1:bfaff9b:  */
1:bfaff9b: package org.apache.activemq.broker.region;
1:bfaff9b: 
1:bfaff9b: import java.io.IOException;
1:bfaff9b: import java.util.Set;
1:bfaff9b: 
1:bfaff9b: import org.apache.activemq.broker.ConnectionContext;
1:bfaff9b: import org.apache.activemq.command.ActiveMQDestination;
1:bfaff9b: import org.apache.activemq.command.ActiveMQTopic;
1:bfaff9b: import org.apache.activemq.command.SubscriptionInfo;
1:bfaff9b: 
1:bfaff9b: /**
1:bfaff9b:  * Used to create Destinations. One instance of DestinationFactory is used per BrokerService. 
1:bfaff9b:  * 
1:bfaff9b:  * @author fateev@amazon.com
1:0bbc0ac:  * 
1:bfaff9b:  */
1:bfaff9b: public abstract class DestinationFactory {
1:bfaff9b:     
1:bfaff9b:     /**
1:bfaff9b:      * Create destination implementation.
1:bfaff9b:      */
1:fc00993:     public abstract Destination createDestination(ConnectionContext context, ActiveMQDestination destination, DestinationStatistics destinationStatistics) throws Exception;
1:bfaff9b: 
1:07b6a38:     public abstract void removeDestination(Destination dest);
1:07b6a38: 
1:bfaff9b:     /**
1:bfaff9b:      * Returns a set of all the {@link org.apache.activemq.command.ActiveMQDestination}
1:bfaff9b:      * objects that the persistence store is aware exist.
1:bfaff9b:      */
1:ecf89a6:     public abstract Set<ActiveMQDestination> getDestinations();
1:bfaff9b: 
1:bfaff9b:     /**
1:bfaff9b:      * Lists all the durable subscirptions for a given destination.
1:bfaff9b:      */
1:fc00993:     public abstract SubscriptionInfo[] getAllDurableSubscriptions(ActiveMQTopic topic) throws IOException;
1:bfaff9b: 
1:bfaff9b:     
1:fc00993:     public abstract long getLastMessageBrokerSequenceId() throws IOException;
1:bfaff9b: 
1:fc00993:     public abstract void setRegionBroker(RegionBroker regionBroker);
1:bfaff9b: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     public abstract Set<ActiveMQDestination> getDestinations();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public abstract Destination createDestination(ConnectionContext context, ActiveMQDestination destination, DestinationStatistics destinationStatistics) throws Exception;
0:     public abstract Set getDestinations();
1:     public abstract SubscriptionInfo[] getAllDurableSubscriptions(ActiveMQTopic topic) throws IOException;
1:     public abstract long getLastMessageBrokerSequenceId() throws IOException;
1:     public abstract void setRegionBroker(RegionBroker regionBroker);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:David Jencks
-------------------------------------------------------------------------------
commit:07b6a38
/////////////////////////////////////////////////////////////////////////
1:     public abstract void removeDestination(Destination dest);
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import java.io.IOException;
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.SubscriptionInfo;
1: 
1: /**
1:  * Used to create Destinations. One instance of DestinationFactory is used per BrokerService. 
1:  * 
1:  * @author fateev@amazon.com
0:  * @version $Revision$
1:  */
1: public abstract class DestinationFactory {
1:     
1:     /**
1:      * Create destination implementation.
1:      */
0:     abstract public Destination createDestination(ConnectionContext context, ActiveMQDestination destination, DestinationStatistics destinationStatistics) throws Exception;
1: 
1:     /**
1:      * Returns a set of all the {@link org.apache.activemq.command.ActiveMQDestination}
1:      * objects that the persistence store is aware exist.
1:      */
0:     abstract public Set getDestinations();
1: 
1:     /**
1:      * Lists all the durable subscirptions for a given destination.
1:      */
0:     abstract public SubscriptionInfo[] getAllDurableSubscriptions(ActiveMQTopic topic) throws IOException;
1: 
1:     
0:     abstract public long getLastMessageBrokerSequenceId() throws IOException;
1: 
0:     abstract public void setRegionBroker(RegionBroker regionBroker);
1: }
============================================================================