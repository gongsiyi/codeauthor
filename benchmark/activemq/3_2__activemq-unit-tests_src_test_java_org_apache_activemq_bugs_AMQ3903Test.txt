1:db1f6fe: /**
1:db1f6fe:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:db1f6fe:  * contributor license agreements.  See the NOTICE file distributed with
1:db1f6fe:  * this work for additional information regarding copyright ownership.
1:db1f6fe:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:db1f6fe:  * (the "License"); you may not use this file except in compliance with
1:db1f6fe:  * the License.  You may obtain a copy of the License at
1:db1f6fe:  *
1:db1f6fe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:db1f6fe:  *
1:db1f6fe:  * Unless required by applicable law or agreed to in writing, software
1:db1f6fe:  * distributed under the License is distributed on an "AS IS" BASIS,
1:db1f6fe:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db1f6fe:  * See the License for the specific language governing permissions and
1:db1f6fe:  * limitations under the License.
1:db1f6fe:  */
1:db1f6fe: package org.apache.activemq.bugs;
3:db1f6fe: 
1:5219fa1: import static org.junit.Assert.assertNotNull;
1:5219fa1: 
1:db1f6fe: import javax.jms.BytesMessage;
1:db1f6fe: import javax.jms.Connection;
1:db1f6fe: import javax.jms.DeliveryMode;
1:db1f6fe: import javax.jms.Message;
1:db1f6fe: import javax.jms.MessageConsumer;
1:db1f6fe: import javax.jms.MessageProducer;
1:db1f6fe: import javax.jms.ResourceAllocationException;
1:db1f6fe: import javax.jms.Session;
1:db1f6fe: import javax.jms.TemporaryQueue;
1:db1f6fe: import javax.jms.Topic;
1:5219fa1: 
1:db1f6fe: import org.apache.activemq.ActiveMQConnectionFactory;
1:db1f6fe: import org.apache.activemq.advisory.AdvisorySupport;
1:db1f6fe: import org.apache.activemq.broker.BrokerService;
1:db1f6fe: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:db1f6fe: import org.apache.activemq.broker.region.policy.PolicyMap;
1:db1f6fe: import org.apache.activemq.command.ActiveMQDestination;
1:db1f6fe: import org.junit.After;
1:db1f6fe: import org.junit.Before;
1:db1f6fe: import org.junit.Test;
1:db1f6fe: import org.slf4j.Logger;
1:db1f6fe: import org.slf4j.LoggerFactory;
1:db1f6fe: 
1:db1f6fe: public class AMQ3903Test {
1:db1f6fe: 
1:db1f6fe:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3903Test.class);
1:db1f6fe: 
1:db1f6fe:     private static final String bindAddress = "tcp://0.0.0.0:0";
1:db1f6fe:     private BrokerService broker;
1:db1f6fe:     private ActiveMQConnectionFactory cf;
1:db1f6fe: 
1:db1f6fe:     private static final int MESSAGE_COUNT = 100;
1:db1f6fe: 
1:db1f6fe:     @Before
1:db1f6fe:     public void setUp() throws Exception {
1:db1f6fe:         broker = this.createBroker();
1:db1f6fe:         String address = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:db1f6fe:         broker.start();
1:db1f6fe:         broker.waitUntilStarted();
1:db1f6fe: 
1:db1f6fe:         cf = new ActiveMQConnectionFactory(address);
1:db1f6fe:     }
1:db1f6fe: 
1:db1f6fe:     @After
1:db1f6fe:     public void tearDown() throws Exception {
1:db1f6fe:         if (broker != null) {
1:db1f6fe:             broker.stop();
1:db1f6fe:             broker.waitUntilStopped();
1:db1f6fe:         }
1:db1f6fe:     }
1:db1f6fe: 
1:db1f6fe:     @Test
1:db1f6fe:     public void testAdvisoryForFastGenericProducer() throws Exception {
1:db1f6fe:         doTestAdvisoryForFastProducer(true);
1:db1f6fe:     }
1:db1f6fe: 
1:db1f6fe:     @Test
1:db1f6fe:     public void testAdvisoryForFastDedicatedProducer() throws Exception {
1:db1f6fe:         doTestAdvisoryForFastProducer(false);
1:db1f6fe:     }
1:db1f6fe: 
1:db1f6fe:     public void doTestAdvisoryForFastProducer(boolean genericProducer) throws Exception {
1:db1f6fe: 
1:db1f6fe:         Connection connection = cf.createConnection();
1:db1f6fe:         connection.start();
1:db1f6fe:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:db1f6fe: 
1:db1f6fe:         final TemporaryQueue queue = session.createTemporaryQueue();
1:db1f6fe: 
1:db1f6fe:         final Topic advisoryTopic = AdvisorySupport.getFastProducerAdvisoryTopic((ActiveMQDestination) queue);
1:a5bb9bd:         final Topic advisoryWhenFullTopic = AdvisorySupport.getFullAdvisoryTopic((ActiveMQDestination) queue);
1:db1f6fe: 
1:db1f6fe:         MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);
1:a5bb9bd:         MessageConsumer advisoryWhenFullConsumer = session.createConsumer(advisoryWhenFullTopic);
1:a5bb9bd: 
1:db1f6fe:         MessageProducer producer = session.createProducer(genericProducer ? null : queue);
1:db1f6fe: 
1:db1f6fe:         try {
1:db1f6fe:             // send lots of messages to the tempQueue
1:db1f6fe:             for (int i = 0; i < MESSAGE_COUNT; i++) {
1:db1f6fe:                 BytesMessage m = session.createBytesMessage();
1:db1f6fe:                 m.writeBytes(new byte[1024]);
1:db1f6fe:                 if (genericProducer) {
1:db1f6fe:                     producer.send(queue, m, DeliveryMode.PERSISTENT, 4, 0);
1:db1f6fe:                 } else {
1:db1f6fe:                     producer.send(m);
1:db1f6fe:                 }
1:db1f6fe:             }
1:db1f6fe:         } catch (ResourceAllocationException expectedOnLimitReachedAfterFastAdvisory) {}
1:db1f6fe: 
1:db1f6fe:         // check one advisory message has produced on the advisoryTopic
1:db1f6fe:         Message advCmsg = advisoryConsumer.receive(4000);
1:db1f6fe:         assertNotNull(advCmsg);
1:db1f6fe: 
1:a5bb9bd:         advCmsg = advisoryWhenFullConsumer.receive(4000);
1:a5bb9bd:         assertNotNull(advCmsg);
1:db1f6fe: 
1:db1f6fe:         connection.close();
1:db1f6fe:         LOG.debug("Connection closed, destinations should now become inactive.");
1:db1f6fe:     }
1:db1f6fe: 
1:db1f6fe:     protected BrokerService createBroker() throws Exception {
1:db1f6fe:         BrokerService answer = new BrokerService();
1:db1f6fe:         answer.setPersistent(false);
1:db1f6fe:         answer.setUseJmx(false);
1:db1f6fe: 
1:db1f6fe:         PolicyEntry entry = new PolicyEntry();
1:db1f6fe:         entry.setAdvisoryForFastProducers(true);
1:a5bb9bd:         entry.setAdvisoryWhenFull(true);
1:db1f6fe:         entry.setMemoryLimit(10000);
1:db1f6fe:         PolicyMap map = new PolicyMap();
1:db1f6fe:         map.setDefaultEntry(entry);
1:db1f6fe: 
1:db1f6fe:         answer.setDestinationPolicy(map);
1:db1f6fe:         answer.addConnector(bindAddress);
1:db1f6fe: 
1:db1f6fe:         answer.getSystemUsage().setSendFailIfNoSpace(true);
1:db1f6fe: 
1:db1f6fe:         return answer;
1:db1f6fe:     }
1:db1f6fe: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:a5bb9bd
/////////////////////////////////////////////////////////////////////////
1:         final Topic advisoryWhenFullTopic = AdvisorySupport.getFullAdvisoryTopic((ActiveMQDestination) queue);
1:         MessageConsumer advisoryWhenFullConsumer = session.createConsumer(advisoryWhenFullTopic);
1: 
/////////////////////////////////////////////////////////////////////////
1:         advCmsg = advisoryWhenFullConsumer.receive(4000);
1:         assertNotNull(advCmsg);
/////////////////////////////////////////////////////////////////////////
1:         entry.setAdvisoryWhenFull(true);
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ResourceAllocationException;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.Topic;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.broker.region.virtual.MirroredQueue;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertTrue;
1: 
1: public class AMQ3903Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3903Test.class);
1: 
1:     private static final String bindAddress = "tcp://0.0.0.0:0";
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory cf;
1: 
1:     private static final int MESSAGE_COUNT = 100;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = this.createBroker();
1:         String address = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         cf = new ActiveMQConnectionFactory(address);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testAdvisoryForFastGenericProducer() throws Exception {
1:         doTestAdvisoryForFastProducer(true);
1:     }
1: 
1:     @Test
1:     public void testAdvisoryForFastDedicatedProducer() throws Exception {
1:         doTestAdvisoryForFastProducer(false);
1:     }
1: 
1:     public void doTestAdvisoryForFastProducer(boolean genericProducer) throws Exception {
1: 
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         final TemporaryQueue queue = session.createTemporaryQueue();
1: 
1:         final Topic advisoryTopic = AdvisorySupport.getFastProducerAdvisoryTopic((ActiveMQDestination) queue);
1: 
1:         MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);
1:         MessageProducer producer = session.createProducer(genericProducer ? null : queue);
1: 
1:         try {
1:             // send lots of messages to the tempQueue
1:             for (int i = 0; i < MESSAGE_COUNT; i++) {
1:                 BytesMessage m = session.createBytesMessage();
1:                 m.writeBytes(new byte[1024]);
1:                 if (genericProducer) {
1:                     producer.send(queue, m, DeliveryMode.PERSISTENT, 4, 0);
1:                 } else {
1:                     producer.send(m);
1:                 }
1:             }
1:         } catch (ResourceAllocationException expectedOnLimitReachedAfterFastAdvisory) {}
1: 
1:         // check one advisory message has produced on the advisoryTopic
1:         Message advCmsg = advisoryConsumer.receive(4000);
1:         assertNotNull(advCmsg);
1: 
1: 
1:         connection.close();
1:         LOG.debug("Connection closed, destinations should now become inactive.");
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(false);
1:         answer.setUseJmx(false);
1: 
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setAdvisoryForFastProducers(true);
1:         entry.setMemoryLimit(10000);
1:         PolicyMap map = new PolicyMap();
1:         map.setDefaultEntry(entry);
1: 
1:         answer.setDestinationPolicy(map);
1:         answer.addConnector(bindAddress);
1: 
1:         answer.getSystemUsage().setSendFailIfNoSpace(true);
1: 
1:         return answer;
1:     }
1: }
============================================================================