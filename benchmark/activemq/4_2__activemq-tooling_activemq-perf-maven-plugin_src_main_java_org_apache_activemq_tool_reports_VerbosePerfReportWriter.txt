1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool.reports;
1:a88906f: 
1:540dd5c: import java.util.Arrays;
1:a88906f: import java.util.Iterator;
1:a88906f: import java.util.Map;
1:540dd5c: import java.util.Properties;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
1:540dd5c: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
1:a88906f: 
1:a88906f: public class VerbosePerfReportWriter extends AbstractPerfReportWriter {
1:a88906f: 
1:a88906f:     public void openReportWriter() {
1:a88906f:         // Do nothing
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void closeReportWriter() {
1:a88906f:         writeHeader("Performance Summary");
1:a88906f:         writePerfSummary();
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void writeInfo(String info) {
1:a88906f:         System.out.println("[PERF-INFO]: " + info);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void writeCsvData(int csvType, String csvData) {
1:fddc01d:         if (csvType == REPORT_PLUGIN_THROUGHPUT) {
1:a88906f:             System.out.println("[PERF-TP]: " + csvData);
1:fddc01d:         } else if (csvType == REPORT_PLUGIN_CPU) {
1:a88906f:             System.out.println("[PERF-CPU]: " + csvData);
1:a88906f:         }
1:a88906f:         handleCsvData(csvType, csvData);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void writeProperties(String header, Properties props) {
1:a88906f:         writeHeader(header);
1:a88906f:         writeProperties(props);
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void writeProperties(Properties props) {
1:540dd5c:         for (Iterator i = props.keySet().iterator(); i.hasNext();) {
1:a88906f:             String key = (String)i.next();
1:a88906f:             String val = props.getProperty(key, "");
1:a88906f:             System.out.println("[PERF-PROP]: " + key + "=" + val);
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void writePerfSummary() {
1:a88906f: 
1:fddc01d:         Map summary;
1:a88906f: 
1:fddc01d:         summary = getSummary(REPORT_PLUGIN_THROUGHPUT);
1:fddc01d:         if (summary != null && summary.size() > 0) {
1:fddc01d:             writeThroughputSummary(summary);
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:         summary = getSummary(REPORT_PLUGIN_CPU);
1:fddc01d:         if (summary != null && summary.size() > 0) {
1:fddc01d:             writeCpuSummary(summary);
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:     }
1:fddc01d: 
1:fddc01d:     protected void writeThroughputSummary(Map summary) {
1:fddc01d:         writeHeader("SYSTEM THROUGHPUT SUMMARY");
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] System Total Throughput: " + summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] System Total Clients: " + summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_CLIENTS));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] System Average Throughput: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] System Average Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_EMM_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] System Average Client Throughput: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] System Average Client Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_EMM_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] Min Client Throughput Per Sample: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] Max Client Throughput Per Sample: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] Min Client Total Throughput: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TOTAL_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] Max Client Total Throughput: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TOTAL_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] Min Client Average Throughput: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] Max Client Average Throughput: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] Min Client Average Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_EMM_TP));
1:a88906f:         System.out.println("[PERF-TP-SUMMARY] Max Client Average Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_EMM_TP));
1:a88906f:     }
1:a88906f: 
1:fddc01d:     protected void writeCpuSummary(Map summary) {
1:fddc01d:         writeHeader("SYSTEM CPU USAGE SUMMARY");
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Total Blocks Received: " + summary.get(CpuReportPlugin.KEY_BLOCK_RECV));
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Ave Blocks Received: " + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_RECV));
1:fddc01d: 
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Total Blocks Sent: " + summary.get(CpuReportPlugin.KEY_BLOCK_SENT));
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Ave Blocks Sent: " + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_SENT));
2:fddc01d: 
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Total Context Switches: " + summary.get(CpuReportPlugin.KEY_CTX_SWITCH));
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Ave Context Switches: " + summary.get(CpuReportPlugin.KEY_AVE_CTX_SWITCH));
1:fddc01d: 
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Total User Time: " + summary.get(CpuReportPlugin.KEY_USER_TIME));
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Ave User Time: " + summary.get(CpuReportPlugin.KEY_AVE_USER_TIME));
1:fddc01d: 
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Total System Time: " + summary.get(CpuReportPlugin.KEY_SYS_TIME));
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Ave System Time: " + summary.get(CpuReportPlugin.KEY_AVE_SYS_TIME));
1:fddc01d: 
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Total Idle Time: " + summary.get(CpuReportPlugin.KEY_IDLE_TIME));
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Ave Idle Time: " + summary.get(CpuReportPlugin.KEY_AVE_IDLE_TIME));
1:fddc01d: 
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Total Wait Time: " + summary.get(CpuReportPlugin.KEY_WAIT_TIME));
1:fddc01d:         System.out.println("[PERF-CPU-SUMMARY] Ave Wait Time: " + summary.get(CpuReportPlugin.KEY_AVE_WAIT_TIME));
1:fddc01d:     }
1:fddc01d: 
1:a88906f:     protected void writeHeader(String header) {
1:a88906f:         char[] border = new char[header.length() + 8]; // +8 for spacing
1:a88906f:         Arrays.fill(border, '#');
1:a88906f:         String borderStr = new String(border);
1:a88906f: 
1:a88906f:         System.out.println(borderStr);
1:a88906f:         System.out.println("#   " + header + "   #");
1:a88906f:         System.out.println(borderStr);
1:a88906f:     }
1:a88906f: 
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Properties;
1: 
1: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
1: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator i = props.keySet().iterator(); i.hasNext();) {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool.reports;
1: 
0: import org.apache.activemq.tool.reports.plugins.ReportPlugin;
0: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
1: 
0: import java.util.Properties;
1: import java.util.Iterator;
1: import java.util.Map;
0: import java.util.Arrays;
1: 
1: public class VerbosePerfReportWriter extends AbstractPerfReportWriter {
1: 
1:     public void openReportWriter() {
1:         // Do nothing
1:     }
1: 
1:     public void closeReportWriter() {
1:         writeHeader("Performance Summary");
1:         writePerfSummary();
1:     }
1: 
1:     public void writeInfo(String info) {
1:         System.out.println("[PERF-INFO]: " + info);
1:     }
1: 
1:     public void writeCsvData(int csvType, String csvData) {
0:         if (csvType == ReportPlugin.REPORT_PLUGIN_THROUGHPUT) {
1:             System.out.println("[PERF-TP]: " + csvData);
0:         } else if (csvType == ReportPlugin.REPORT_PLUGIN_CPU) {
1:             System.out.println("[PERF-CPU]: " + csvData);
1:         }
1:         handleCsvData(csvType, csvData);
1:     }
1: 
1:     public void writeProperties(String header, Properties props) {
1:         writeHeader(header);
1:         writeProperties(props);
1:     }
1: 
1:     public void writeProperties(Properties props) {
0:         for (Iterator i=props.keySet().iterator(); i.hasNext();) {
1:             String key = (String)i.next();
1:             String val = props.getProperty(key, "");
1:             System.out.println("[PERF-PROP]: " + key + "=" + val);
1:         }
1:     }
1: 
1:     public void writePerfSummary() {
0:         Map summary = getSummary(ReportPlugin.REPORT_PLUGIN_THROUGHPUT);
1: 
1:         System.out.println("[PERF-TP-SUMMARY] System Total Throughput: " + summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_TP));
1:         System.out.println("[PERF-TP-SUMMARY] System Total Clients: " + summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_CLIENTS));
1:         System.out.println("[PERF-TP-SUMMARY] System Average Throughput: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_TP));
1:         System.out.println("[PERF-TP-SUMMARY] System Average Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_EMM_TP));
1:         System.out.println("[PERF-TP-SUMMARY] System Average Client Throughput: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_TP));
1:         System.out.println("[PERF-TP-SUMMARY] System Average Client Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_EMM_TP));
1:         System.out.println("[PERF-TP-SUMMARY] Min Client Throughput Per Sample: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TP));
1:         System.out.println("[PERF-TP-SUMMARY] Max Client Throughput Per Sample: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TP));
1:         System.out.println("[PERF-TP-SUMMARY] Min Client Total Throughput: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TOTAL_TP));
1:         System.out.println("[PERF-TP-SUMMARY] Max Client Total Throughput: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TOTAL_TP));
1:         System.out.println("[PERF-TP-SUMMARY] Min Client Average Throughput: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_TP));
1:         System.out.println("[PERF-TP-SUMMARY] Max Client Average Throughput: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_TP));
1:         System.out.println("[PERF-TP-SUMMARY] Min Client Average Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_EMM_TP));
1:         System.out.println("[PERF-TP-SUMMARY] Max Client Average Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_EMM_TP));
1:     }
1: 
1:     protected void writeHeader(String header) {
1:         char[] border = new char[header.length() + 8]; // +8 for spacing
1:         Arrays.fill(border, '#');
1:         String borderStr = new String(border);
1: 
1:         System.out.println(borderStr);
1:         System.out.println("#   " + header + "   #");
1:         System.out.println(borderStr);
1:     }
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7450969
/////////////////////////////////////////////////////////////////////////
commit:fddc01d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
/////////////////////////////////////////////////////////////////////////
1:         if (csvType == REPORT_PLUGIN_THROUGHPUT) {
1:         } else if (csvType == REPORT_PLUGIN_CPU) {
/////////////////////////////////////////////////////////////////////////
1:         Map summary;
1: 
1:         summary = getSummary(REPORT_PLUGIN_THROUGHPUT);
1:         if (summary != null && summary.size() > 0) {
1:             writeThroughputSummary(summary);
1:         }
1: 
1:         summary = getSummary(REPORT_PLUGIN_CPU);
1:         if (summary != null && summary.size() > 0) {
1:             writeCpuSummary(summary);
1:         }
1: 
1:     }
1: 
1:     protected void writeThroughputSummary(Map summary) {
1:         writeHeader("SYSTEM THROUGHPUT SUMMARY");
/////////////////////////////////////////////////////////////////////////
1:     protected void writeCpuSummary(Map summary) {
1:         writeHeader("SYSTEM CPU USAGE SUMMARY");
1:         System.out.println("[PERF-CPU-SUMMARY] Total Blocks Received: " + summary.get(CpuReportPlugin.KEY_BLOCK_RECV));
1:         System.out.println("[PERF-CPU-SUMMARY] Ave Blocks Received: " + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_RECV));
1: 
1:         System.out.println("[PERF-CPU-SUMMARY] Total Blocks Sent: " + summary.get(CpuReportPlugin.KEY_BLOCK_SENT));
1:         System.out.println("[PERF-CPU-SUMMARY] Ave Blocks Sent: " + summary.get(CpuReportPlugin.KEY_AVE_BLOCK_SENT));
1: 
1:         System.out.println("[PERF-CPU-SUMMARY] Total Context Switches: " + summary.get(CpuReportPlugin.KEY_CTX_SWITCH));
1:         System.out.println("[PERF-CPU-SUMMARY] Ave Context Switches: " + summary.get(CpuReportPlugin.KEY_AVE_CTX_SWITCH));
1: 
1:         System.out.println("[PERF-CPU-SUMMARY] Total User Time: " + summary.get(CpuReportPlugin.KEY_USER_TIME));
1:         System.out.println("[PERF-CPU-SUMMARY] Ave User Time: " + summary.get(CpuReportPlugin.KEY_AVE_USER_TIME));
1: 
1:         System.out.println("[PERF-CPU-SUMMARY] Total System Time: " + summary.get(CpuReportPlugin.KEY_SYS_TIME));
1:         System.out.println("[PERF-CPU-SUMMARY] Ave System Time: " + summary.get(CpuReportPlugin.KEY_AVE_SYS_TIME));
1: 
1:         System.out.println("[PERF-CPU-SUMMARY] Total Idle Time: " + summary.get(CpuReportPlugin.KEY_IDLE_TIME));
1:         System.out.println("[PERF-CPU-SUMMARY] Ave Idle Time: " + summary.get(CpuReportPlugin.KEY_AVE_IDLE_TIME));
1: 
1:         System.out.println("[PERF-CPU-SUMMARY] Total Wait Time: " + summary.get(CpuReportPlugin.KEY_WAIT_TIME));
1:         System.out.println("[PERF-CPU-SUMMARY] Ave Wait Time: " + summary.get(CpuReportPlugin.KEY_AVE_WAIT_TIME));
1:     }
1: 
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.reports.plugins.ReportPlugin;
0: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
0: 
/////////////////////////////////////////////////////////////////////////
0:         // Do nothing
/////////////////////////////////////////////////////////////////////////
0:     public void writeCsvData(int csvType, String csvData) {
0:         if (csvType == ReportPlugin.REPORT_PLUGIN_THROUGHPUT) {
0:             System.out.println("[PERF-TP]: " + csvData);
0:         } else if (csvType == ReportPlugin.REPORT_PLUGIN_CPU) {
0:             System.out.println("[PERF-CPU]: " + csvData);
0:         }
0:         handleCsvData(csvType, csvData);
/////////////////////////////////////////////////////////////////////////
0:         Map summary = getSummary(ReportPlugin.REPORT_PLUGIN_THROUGHPUT);
0:         System.out.println("[PERF-TP-SUMMARY] System Total Throughput: " + summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_TP));
0:         System.out.println("[PERF-TP-SUMMARY] System Total Clients: " + summary.get(ThroughputReportPlugin.KEY_SYS_TOTAL_CLIENTS));
0:         System.out.println("[PERF-TP-SUMMARY] System Average Throughput: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_TP));
0:         System.out.println("[PERF-TP-SUMMARY] System Average Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_EMM_TP));
0:         System.out.println("[PERF-TP-SUMMARY] System Average Client Throughput: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_TP));
0:         System.out.println("[PERF-TP-SUMMARY] System Average Client Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_SYS_AVE_CLIENT_EMM_TP));
0:         System.out.println("[PERF-TP-SUMMARY] Min Client Throughput Per Sample: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TP));
0:         System.out.println("[PERF-TP-SUMMARY] Max Client Throughput Per Sample: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TP));
0:         System.out.println("[PERF-TP-SUMMARY] Min Client Total Throughput: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_TOTAL_TP));
0:         System.out.println("[PERF-TP-SUMMARY] Max Client Total Throughput: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_TOTAL_TP));
0:         System.out.println("[PERF-TP-SUMMARY] Min Client Average Throughput: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_TP));
0:         System.out.println("[PERF-TP-SUMMARY] Max Client Average Throughput: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_TP));
0:         System.out.println("[PERF-TP-SUMMARY] Min Client Average Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_MIN_CLIENT_AVE_EMM_TP));
0:         System.out.println("[PERF-TP-SUMMARY] Max Client Average Throughput Excluding Min/Max: " + summary.get(ThroughputReportPlugin.KEY_MAX_CLIENT_AVE_EMM_TP));
0:     }
0: 
0:     protected void writeHeader(String header) {
0:         char[] border = new char[header.length() + 8]; // +8 for spacing
0:         Arrays.fill(border, '#');
0:         String borderStr = new String(border);
0: 
0:         System.out.println(borderStr);
0:         System.out.println("#   " + header + "   #");
0:         System.out.println(borderStr);
commit:e0efebe
/////////////////////////////////////////////////////////////////////////
0:         System.out.println("[PERF-SUMMARY] System Average Client Throughput: " + summary.get(KEY_SYS_AVE_CLIENT_TP));
0:         System.out.println("[PERF-SUMMARY] System Average Client Throughput Excluding Min/Max: " + summary.get(KEY_SYS_AVE_CLIENT_EMM_TP));
commit:77c889d
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool.reports;
0: 
0: import java.util.Properties;
0: import java.util.Iterator;
0: import java.util.Map;
0: import java.util.Arrays;
0: 
0: public class VerbosePerfReportWriter extends AbstractPerfReportWriter {
0: 
0:     public void openReportWriter() {
0:         writeProperties("System Properties", System.getProperties());
0:     }
0: 
0:     public void closeReportWriter() {
0:         writeHeader("Performance Summary");
0:         writePerfSummary();
0:     }
0: 
0:     public void writeInfo(String info) {
0:         System.out.println("[PERF-INFO]: " + info);
0:     }
0: 
0:     public void writeHeader(String header) {
0:         char[] border = new char[header.length() + 8]; // +8 for spacing
0:         Arrays.fill(border, '#');
0:         String borderStr = new String(border);
0: 
0:         System.out.println(borderStr);
0:         System.out.println("#   " + header + "   #");
0:         System.out.println(borderStr);
0:     }
0: 
0:     public void writePerfData(String data) {
0:         System.out.println("[PERF-DATA]: " + data);
0:         // Assume data is a CSV of key-value pair
0:         parsePerfCsvData(data);
0:     }
0: 
0:     public void writeProperties(String header, Properties props) {
0:         writeHeader(header);
0:         writeProperties(props);
0:     }
0: 
0:     public void writeProperties(Properties props) {
0:         for (Iterator i=props.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0:             String val = props.getProperty(key, "");
0:             System.out.println("[PERF-PROP]: " + key + "=" + val);
0:         }
0:     }
0: 
0:     public void writePerfSummary() {
0:         Map summary = createPerfSummary(clientThroughputs);
0: 
0:         System.out.println("[PERF-SUMMARY] System Total Throughput: " + summary.get(KEY_SYS_TOTAL_TP));
0:         System.out.println("[PERF-SUMMARY] System Total Clients: " + summary.get(KEY_SYS_TOTAL_CLIENTS));
0:         System.out.println("[PERF-SUMMARY] System Average Throughput: " + summary.get(KEY_SYS_AVE_TP));
0:         System.out.println("[PERF-SUMMARY] System Average Throughput Excluding Min/Max: " + summary.get(KEY_SYS_AVE_EMM_TP));
0:         System.out.println("[PERF-SUMMARY] Min Client Throughput Per Sample: " + summary.get(KEY_MIN_CLIENT_TP));
0:         System.out.println("[PERF-SUMMARY] Max Client Throughput Per Sample: " + summary.get(KEY_MAX_CLIENT_TP));
0:         System.out.println("[PERF-SUMMARY] Min Client Total Throughput: " + summary.get(KEY_MIN_CLIENT_TOTAL_TP));
0:         System.out.println("[PERF-SUMMARY] Max Client Total Throughput: " + summary.get(KEY_MAX_CLIENT_TOTAL_TP));
0:         System.out.println("[PERF-SUMMARY] Min Client Average Throughput: " + summary.get(KEY_MIN_CLIENT_AVE_TP));
0:         System.out.println("[PERF-SUMMARY] Max Client Average Throughput: " + summary.get(KEY_MAX_CLIENT_AVE_TP));
0:         System.out.println("[PERF-SUMMARY] Min Client Average Throughput Excluding Min/Max: " + summary.get(KEY_MIN_CLIENT_AVE_EMM_TP));
0:         System.out.println("[PERF-SUMMARY] Max Client Average Throughput Excluding Min/Max: " + summary.get(KEY_MAX_CLIENT_AVE_EMM_TP));
0:     }
0: 
0: }
============================================================================