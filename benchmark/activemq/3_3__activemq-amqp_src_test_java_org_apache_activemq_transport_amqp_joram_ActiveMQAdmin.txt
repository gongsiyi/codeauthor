1:f355b16: /**
1:f355b16:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f355b16:  * contributor license agreements.  See the NOTICE file distributed with
1:f355b16:  * this work for additional information regarding copyright ownership.
1:f355b16:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f355b16:  * (the "License"); you may not use this file except in compliance with
1:f355b16:  * the License.  You may obtain a copy of the License at
1:f355b16:  *
1:f355b16:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f355b16:  *
1:f355b16:  * Unless required by applicable law or agreed to in writing, software
1:f355b16:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f355b16:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f355b16:  * See the License for the specific language governing permissions and
1:f355b16:  * limitations under the License.
1:f355b16:  */
1:f355b16: package org.apache.activemq.transport.amqp.joram;
3:f355b16: 
1:f355b16: import java.io.File;
1:2db73e2: import java.io.FileNotFoundException;
1:2db73e2: import java.io.FileOutputStream;
1:2db73e2: import java.io.PrintStream;
1:f355b16: import java.net.URI;
1:f355b16: import java.util.Hashtable;
1:1e5dac1: import java.util.logging.Handler;
1:1e5dac1: import java.util.logging.Level;
1:1e5dac1: import java.util.logging.LogRecord;
1:1e5dac1: import java.util.logging.Logger;
1:1e5dac1: 
1:1e5dac1: import javax.naming.Context;
1:1e5dac1: import javax.naming.InitialContext;
1:1e5dac1: import javax.naming.NamingException;
1:1e5dac1: 
1:1e5dac1: import org.apache.activemq.broker.BrokerFactory;
1:1e5dac1: import org.apache.activemq.broker.BrokerService;
1:1e5dac1: import org.apache.activemq.broker.TransportConnector;
1:3051882: import org.apache.qpid.jms.JmsConnectionFactory;
1:3051882: import org.apache.qpid.jms.JmsQueue;
1:3051882: import org.apache.qpid.jms.JmsTopic;
1:1e5dac1: import org.objectweb.jtests.jms.admin.Admin;
1:f355b16: 
1:f355b16: /**
1:f355b16:  *
1:f355b16:  */
1:f355b16: public class ActiveMQAdmin implements Admin {
1:f355b16: 
1:f355b16:     Context context;
1:f355b16:     {
1:6baed7a:         // enableJMSFrameTracing();
1:f355b16:         try {
1:f355b16:             // Use the jetty JNDI context since it's mutable.
1:f355b16:             final Hashtable<String, String> env = new Hashtable<String, String>();
1:f355b16:             env.put("java.naming.factory.initial", "org.eclipse.jetty.jndi.InitialContextFactory");
1:3051882:             env.put("java.naming.factory.url.pkgs", "org.eclipse.jetty.jndi");
1:3051882:             ;
1:f355b16:             context = new InitialContext(env);
1:f355b16:         } catch (NamingException e) {
1:f355b16:             throw new RuntimeException(e);
1:6baed7a:         }
1:6baed7a:     }
1:f355b16: 
1:1e5dac1:     @SuppressWarnings("resource")
1:e8eb58a:     static public void enableJMSFrameTracing() {
1:e8eb58a:         try {
1:e8eb58a:             String outputStreamName = "amqp-trace.txt";
1:39c27f9:             final PrintStream out = new PrintStream(new FileOutputStream(new File(outputStreamName)));
1:e8eb58a:             Handler handler = new Handler() {
1:1e5dac1:                 @Override
1:e8eb58a:                 public void publish(LogRecord r) {
1:e8eb58a:                     out.println(String.format("%s:%s", r.getLoggerName(), r.getMessage()));
1:e8eb58a:                 }
1:6baed7a: 
1:1e5dac1:                 @Override
1:e8eb58a:                 public void flush() {
1:e8eb58a:                     out.flush();
1:e8eb58a:                 }
1:6baed7a: 
1:1e5dac1:                 @Override
1:e8eb58a:                 public void close() throws SecurityException {
1:1e5dac1:                     out.close();
1:e8eb58a:                 }
1:e8eb58a:             };
1:6baed7a: 
1:e8eb58a:             Logger log = Logger.getLogger("FRM");
1:e8eb58a:             log.addHandler(handler);
1:e8eb58a:             log.setLevel(Level.FINEST);
1:e8eb58a:         } catch (FileNotFoundException e) {
1:e8eb58a:             throw new RuntimeException(e);
1:e8eb58a:         }
1:6baed7a:     }
1:6baed7a: 
1:f355b16:     protected BrokerService createBroker() throws Exception {
1:3051882:         return BrokerFactory.createBroker(new URI("broker://()/localhost" + "?persistent=false&useJmx=false&advisorySupport=false&schedulerSupport=false"));
1:6baed7a:     }
1:f355b16: 
1:1e5dac1:     @Override
1:f355b16:     public String getName() {
1:f355b16:         return getClass().getName();
4:f355b16:     }
1:f355b16: 
1:6baed7a:     static BrokerService broker;
1:6baed7a:     static int port;
1:f355b16: 
1:1e5dac1:     @Override
1:f355b16:     public void startServer() throws Exception {
1:3051882:         if (broker != null) {
1:6baed7a:             stopServer();
1:6baed7a:         }
1:f355b16:         if (System.getProperty("basedir") == null) {
1:f355b16:             File file = new File(".");
1:f355b16:             System.setProperty("basedir", file.getAbsolutePath());
1:f355b16:         }
1:f355b16:         broker = createBroker();
1:1e5dac1:         TransportConnector connector = broker.addConnector(getConnectorURI());
1:f355b16:         broker.start();
1:f355b16:         port = connector.getConnectUri().getPort();
1:f355b16:     }
1:f355b16: 
1:1e5dac1:     protected String getConnectorURI() {
1:1e5dac1:         return "amqp://localhost:0";
1:1e5dac1:     }
1:1e5dac1: 
1:1e5dac1:     @Override
1:f355b16:     public void stopServer() throws Exception {
1:f355b16:         broker.stop();
1:6baed7a:         broker = null;
1:f355b16:     }
1:f355b16: 
1:1e5dac1:     @Override
1:f355b16:     public void start() throws Exception {
1:f355b16:     }
1:f355b16: 
1:1e5dac1:     @Override
1:f355b16:     public void stop() throws Exception {
1:f355b16:     }
1:f355b16: 
1:1e5dac1:     @Override
1:f355b16:     public Context createContext() throws NamingException {
1:f355b16:         return context;
1:f355b16:     }
1:f355b16: 
1:1e5dac1:     @Override
1:f355b16:     public void createQueue(String name) {
1:f355b16:         try {
1:3051882:             context.bind(name, new JmsQueue(name));
1:f355b16:         } catch (NamingException e) {
1:f355b16:             throw new RuntimeException(e);
1:f355b16:         }
1:f355b16:     }
1:f355b16: 
1:1e5dac1:     @Override
1:f355b16:     public void createTopic(String name) {
1:f355b16:         try {
1:3051882:             context.bind(name, new JmsTopic(name));
1:f355b16:         } catch (NamingException e) {
1:f355b16:             throw new RuntimeException(e);
1:f355b16:         }
1:f355b16:     }
1:f355b16: 
1:1e5dac1:     @Override
1:f355b16:     public void deleteQueue(String name) {
1:f355b16:         try {
1:f355b16:             context.unbind(name);
1:f355b16:         } catch (NamingException e) {
1:f355b16:             throw new RuntimeException(e);
1:f355b16:         }
1:f355b16:     }
1:f355b16: 
1:1e5dac1:     @Override
1:f355b16:     public void deleteTopic(String name) {
1:f355b16:         try {
1:f355b16:             context.unbind(name);
1:f355b16:         } catch (NamingException e) {
1:f355b16:             throw new RuntimeException(e);
1:f355b16:         }
1:f355b16:     }
1:f355b16: 
1:e8eb58a:     @Override
1:f355b16:     public void createConnectionFactory(String name) {
1:f355b16:         try {
1:3051882:             final JmsConnectionFactory factory = new JmsConnectionFactory("amqp://localhost:" + port);
1:f355b16:             context.bind(name, factory);
1:f355b16:         } catch (NamingException e) {
1:f355b16:             throw new RuntimeException(e);
1:f355b16:         }
1:f355b16:     }
1:f355b16: 
1:e8eb58a:     @Override
1:f355b16:     public void deleteConnectionFactory(String name) {
1:f355b16:         try {
1:f355b16:             context.unbind(name);
1:f355b16:         } catch (NamingException e) {
1:f355b16:             throw new RuntimeException(e);
1:f355b16:         }
1:f355b16:     }
1:f355b16: 
1:e8eb58a:     @Override
1:f355b16:     public void createQueueConnectionFactory(String name) {
1:f355b16:         createConnectionFactory(name);
1:f355b16:     }
1:1e5dac1: 
1:1e5dac1:     @Override
1:f355b16:     public void createTopicConnectionFactory(String name) {
1:f355b16:         createConnectionFactory(name);
1:f355b16:     }
1:1e5dac1: 
1:1e5dac1:     @Override
1:f355b16:     public void deleteQueueConnectionFactory(String name) {
1:f355b16:         deleteConnectionFactory(name);
1:f355b16:     }
1:1e5dac1: 
1:1e5dac1:     @Override
1:f355b16:     public void deleteTopicConnectionFactory(String name) {
1:f355b16:         deleteConnectionFactory(name);
1:f355b16:     }
1:f355b16: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3051882
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.jms.JmsConnectionFactory;
1: import org.apache.qpid.jms.JmsQueue;
1: import org.apache.qpid.jms.JmsTopic;
/////////////////////////////////////////////////////////////////////////
1:             env.put("java.naming.factory.url.pkgs", "org.eclipse.jetty.jndi");
1:             ;
/////////////////////////////////////////////////////////////////////////
1:         return BrokerFactory.createBroker(new URI("broker://()/localhost" + "?persistent=false&useJmx=false&advisorySupport=false&schedulerSupport=false"));
/////////////////////////////////////////////////////////////////////////
1:         if (broker != null) {
/////////////////////////////////////////////////////////////////////////
1:             context.bind(name, new JmsQueue(name));
/////////////////////////////////////////////////////////////////////////
1:             context.bind(name, new JmsTopic(name));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             final JmsConnectionFactory factory = new JmsConnectionFactory("amqp://localhost:" + port);
commit:94937e8
/////////////////////////////////////////////////////////////////////////
0:         return BrokerFactory.createBroker(new URI("broker://()/localhost" +
0:             "?persistent=false&useJmx=false&advisorySupport=false&schedulerSupport=false"));
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1e5dac1
/////////////////////////////////////////////////////////////////////////
1: import java.util.logging.Handler;
1: import java.util.logging.Level;
1: import java.util.logging.LogRecord;
1: import java.util.logging.Logger;
1: 
0: import javax.jms.ConnectionFactory;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.NamingException;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
0: import org.apache.qpid.amqp_1_0.jms.impl.QueueImpl;
0: import org.apache.qpid.amqp_1_0.jms.impl.TopicImpl;
1: import org.objectweb.jtests.jms.admin.Admin;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
/////////////////////////////////////////////////////////////////////////
1:                     out.close();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector connector = broker.addConnector(getConnectorURI());
1:     protected String getConnectorURI() {
1:         return "amqp://localhost:0";
1:     }
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
1:     @Override
1: 
1:     @Override
1: 
1:     @Override
commit:39c27f9
/////////////////////////////////////////////////////////////////////////
0:         String outputStreamName = System.getProperty("java.io.tmpdir") + "/amqp-trace.txt";
1:         final PrintStream out = new PrintStream(new FileOutputStream(new File(outputStreamName)));
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:e8eb58a
/////////////////////////////////////////////////////////////////////////
1:     static public void enableJMSFrameTracing() {
1:         try {
0:             final SimpleFormatter formatter = new SimpleFormatter();
1:             String outputStreamName = "amqp-trace.txt";
0:             final PrintStream out = new PrintStream(new FileOutputStream(new File(outputStreamName)));
1:             Handler handler = new Handler() {
1:                 @Override
1:                 public void publish(LogRecord r) {
1:                     out.println(String.format("%s:%s", r.getLoggerName(), r.getMessage()));
1:                 }
1:                 @Override
1:                 public void flush() {
1:                     out.flush();
1:                 }
1:                 @Override
1:                 public void close() throws SecurityException {
1:                 }
1:             };
1:             Logger log = Logger.getLogger("FRM");
1:             log.addHandler(handler);
1:             log.setLevel(Level.FINEST);
1:         } catch (FileNotFoundException e) {
1:             throw new RuntimeException(e);
1:         }
commit:2db73e2
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileNotFoundException;
1: import java.io.FileOutputStream;
1: import java.io.PrintStream;
/////////////////////////////////////////////////////////////////////////
0:     static public void enableJMSFrameTracing() throws FileNotFoundException {
0:         final PrintStream out = new PrintStream(new FileOutputStream(new File("/tmp/amqp-trace.txt")));
0:                 out.println(String.format("%s:%s", r.getLoggerName(), r.getMessage()));
0:                 out.flush();
/////////////////////////////////////////////////////////////////////////
0:         Logger log = Logger.getLogger("FRM");
commit:6baed7a
/////////////////////////////////////////////////////////////////////////
0:     import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
/////////////////////////////////////////////////////////////////////////
0: import java.util.logging.*;
/////////////////////////////////////////////////////////////////////////
1:         // enableJMSFrameTracing();
/////////////////////////////////////////////////////////////////////////
0:     private void enableJMSFrameTracing() {
0:         final SimpleFormatter formatter = new SimpleFormatter();
0:         Handler handler = new Handler() {
0:             @Override
0:             public void publish(LogRecord r) {
0:                 System.out.println(String.format("%s:%s", r.getLoggerName(), r.getMessage()));
1:             }
1: 
0:             @Override
0:             public void flush() {
0:                 System.out.flush();
1:             }
1: 
0:             @Override
0:             public void close() throws SecurityException {
1:             }
0:         };
1: 
0:         Logger log = Logger.getLogger("RAW");
0:         log.addHandler(handler);
0:         log.setLevel(Level.FINEST);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     static BrokerService broker;
1:     static int port;
0:         if( broker!=null ) {
1:             stopServer();
1:         }
0:         TransportConnector connector = broker.addConnector("amqp://localhost:0");
1:         broker = null;
commit:f355b16
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.joram;
1: 
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
0: import org.objectweb.jtests.jms.admin.Admin;
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
0: import org.apache.qpid.amqp_1_0.jms.impl.QueueImpl;
0: import org.apache.qpid.amqp_1_0.jms.impl.TopicImpl;
1: 
0: import javax.jms.ConnectionFactory;
0: import javax.naming.Context;
0: import javax.naming.InitialContext;
0: import javax.naming.NamingException;
1: import java.io.File;
1: import java.net.URI;
1: import java.util.Hashtable;
1: 
1: /**
1:  *
0:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class ActiveMQAdmin implements Admin {
1: 
1:     Context context;
1:     {
1:         try {
1:             // Use the jetty JNDI context since it's mutable.
1:             final Hashtable<String, String> env = new Hashtable<String, String>();
1:             env.put("java.naming.factory.initial", "org.eclipse.jetty.jndi.InitialContextFactory");
0:             env.put("java.naming.factory.url.pkgs", "org.eclipse.jetty.jndi");;
1:             context = new InitialContext(env);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
0:         return BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false"));
1:     }
1: 
1:     public String getName() {
1:         return getClass().getName();
1:     }
1: 
0:     BrokerService broker;
0:     int port;
1: 
1:     public void startServer() throws Exception {
1:         if (System.getProperty("basedir") == null) {
1:             File file = new File(".");
1:             System.setProperty("basedir", file.getAbsolutePath());
1:         }
1:         broker = createBroker();
1:         broker.start();
0:         final TransportConnector connector = broker.addConnector("amqp://localhost:0");
1:         port = connector.getConnectUri().getPort();
1:     }
1: 
1:     public void stopServer() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     public void start() throws Exception {
1:     }
1: 
1:     public void stop() throws Exception {
1:     }
1: 
1:     public Context createContext() throws NamingException {
1:         return context;
1:     }
1: 
1:     public void createQueue(String name) {
1:         try {
0:             context.bind(name, new QueueImpl("queue://"+name));
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void createTopic(String name) {
1:         try {
0:             context.bind(name, new TopicImpl("topic://"+name));
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void deleteQueue(String name) {
0:         // BrokerTestSupport.delete_queue((Broker)base.broker, name);
1:         try {
1:             context.unbind(name);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void deleteTopic(String name) {
1:         try {
1:             context.unbind(name);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void createConnectionFactory(String name) {
1:         try {
0:             final ConnectionFactory factory = new ConnectionFactoryImpl("localhost", port, null, null);
1:             context.bind(name, factory);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void deleteConnectionFactory(String name) {
1:         try {
1:             context.unbind(name);
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public void createQueueConnectionFactory(String name) {
1:         createConnectionFactory(name);
1:     }
1:     public void createTopicConnectionFactory(String name) {
1:         createConnectionFactory(name);
1:     }
1:     public void deleteQueueConnectionFactory(String name) {
1:         deleteConnectionFactory(name);
1:     }
1:     public void deleteTopicConnectionFactory(String name) {
1:         deleteConnectionFactory(name);
1:     }
1: 
1: }
============================================================================