1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:4843dd4:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:5be5a62:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.store.jdbc.adapter;
7:d29ca2a: 
1:f451ad0: import java.io.ByteArrayOutputStream;
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.InputStream;
1:d29ca2a: import java.sql.PreparedStatement;
1:d29ca2a: import java.sql.ResultSet;
1:d29ca2a: import java.sql.SQLException;
1:d29ca2a: 
1:88acb0e: import org.apache.activemq.util.ByteArrayInputStream;
1:d29ca2a: 
1:d29ca2a: /**
1:f812e34:  * This JDBCAdapter inserts and extracts BLOB data using the
1:d29ca2a:  * setBinaryStream()/getBinaryStream() operations.
1:12b26b6:  *
1:d29ca2a:  * The databases/JDBC drivers that use this adapter are:
1:d29ca2a:  * <ul>
1:f812e34:  * <li>Axion</li>
1:d29ca2a:  * </ul>
1:12b26b6:  *
1:4843dd4:  * @org.apache.xbean.XBean element="streamJDBCAdapter"
1:12b26b6:  *
1:12b26b6:  *
1:d29ca2a:  */
1:d29ca2a: public class StreamJDBCAdapter extends DefaultJDBCAdapter {
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * @see org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter#getBinaryData(java.sql.ResultSet,
1:f812e34:      *      int)
1:d29ca2a:      */
1:adc45e8:     @Override
1:d29ca2a:     protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException {
1:f812e34: 
1:12b26b6:         try (InputStream is = rs.getBinaryStream(index);
1:12b26b6:              ByteArrayOutputStream os = new ByteArrayOutputStream(1024 * 4)) {
1:d29ca2a: 
1:d29ca2a:             int ch;
1:d29ca2a:             while ((ch = is.read()) >= 0) {
1:d29ca2a:                 os.write(ch);
4:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             return os.toByteArray();
1:d29ca2a:         } catch (IOException e) {
1:f812e34:             throw (SQLException)new SQLException("Error reading binary parameter: " + index).initCause(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * @see org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter#setBinaryData(java.sql.PreparedStatement,
1:f812e34:      *      int, byte[])
1:d29ca2a:      */
1:adc45e8:     @Override
1:d29ca2a:     protected void setBinaryData(PreparedStatement s, int index, byte[] data) throws SQLException {
1:d29ca2a:         s.setBinaryStream(index, new ByteArrayInputStream(data), data.length);
1:86cbdfd:     }
1:f812e34: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:         try (InputStream is = rs.getBinaryStream(index);
1:              ByteArrayOutputStream os = new ByteArrayOutputStream(1024 * 4)) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * This JDBCAdapter inserts and extracts BLOB data using the
1:  * <li>Axion</li>
/////////////////////////////////////////////////////////////////////////
1: 
1:      * @see org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter#getBinaryData(java.sql.ResultSet,
1:      *      int)
1: 
/////////////////////////////////////////////////////////////////////////
1:             throw (SQLException)new SQLException("Error reading binary parameter: " + index).initCause(e);
1: 
1:      * @see org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter#setBinaryData(java.sql.PreparedStatement,
1:      *      int, byte[])
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteArrayInputStream;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
0: import org.apache.activeio.util.ByteArrayInputStream;
commit:4843dd4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="streamJDBCAdapter"
1:  * 
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0: * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0: *
0: * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0: *
0: * Licensed under the Apache License, Version 2.0 (the "License");
0: * you may not use this file except in compliance with the License.
0: * You may obtain a copy of the License at
0: *
0: * http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing, software
0: * distributed under the License is distributed on an "AS IS" BASIS,
0: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: * See the License for the specific language governing permissions and
0: * limitations under the License.
0: *
0: **/
1: package org.apache.activemq.store.jdbc.adapter;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
0: import org.apache.activemq.store.jdbc.StatementProvider;
1: 
1: /**
0:  * This JDBCAdapter inserts and extracts BLOB data using the 
1:  * setBinaryStream()/getBinaryStream() operations.
0:  * 
1:  * The databases/JDBC drivers that use this adapter are:
1:  * <ul>
0:  * <li>Axion</li> 
1:  * </ul>
0:  * 
0:  * @version $Revision: 1.2 $
1:  */
1: public class StreamJDBCAdapter extends DefaultJDBCAdapter {
1:     
0:     public StreamJDBCAdapter() {
0:         super();
1:     }
1: 
0:     public StreamJDBCAdapter(StatementProvider provider) {
0:         super(provider);
1:     }
1:     
1:     /**
0:      * @see org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter#getBinaryData(java.sql.ResultSet, int)
1:      */
1:     protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException {
1:         
0:         try {
0:             InputStream is = rs.getBinaryStream(index);
0:             ByteArrayOutputStream os = new ByteArrayOutputStream(1024 * 4);
1: 
1:             int ch;
1:             while ((ch = is.read()) >= 0) {
1:                 os.write(ch);
1:             }
0:             is.close();
0:             os.close();
1: 
1:             return os.toByteArray();
1:         } catch (IOException e) {
0:             throw (SQLException)new SQLException("Error reading binary parameter: "+index).initCause(e);
1:         }
1:     }
1:     
1:     /**
0:      * @see org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter#setBinaryData(java.sql.PreparedStatement, int, byte[])
1:      */
1:     protected void setBinaryData(PreparedStatement s, int index, byte[] data) throws SQLException {
1:         s.setBinaryStream(index, new ByteArrayInputStream(data), data.length);
1:     }
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:adc45e8
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
============================================================================