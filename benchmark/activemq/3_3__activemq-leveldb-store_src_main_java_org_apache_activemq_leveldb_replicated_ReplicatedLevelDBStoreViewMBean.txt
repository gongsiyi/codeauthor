1:16cd8c3: /**
1:16cd8c3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:16cd8c3:  * contributor license agreements.  See the NOTICE file distributed with
1:16cd8c3:  * this work for additional information regarding copyright ownership.
1:16cd8c3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:16cd8c3:  * (the "License"); you may not use this file except in compliance with
1:16cd8c3:  * the License.  You may obtain a copy of the License at
1:16cd8c3:  *
1:16cd8c3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:16cd8c3:  *
1:16cd8c3:  * Unless required by applicable law or agreed to in writing, software
1:16cd8c3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:16cd8c3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:16cd8c3:  * See the License for the specific language governing permissions and
1:16cd8c3:  * limitations under the License.
1:16cd8c3:  */
12:16cd8c3: 
1:16cd8c3: package org.apache.activemq.leveldb.replicated;
1:16cd8c3: 
1:16cd8c3: import org.apache.activemq.broker.jmx.MBeanInfo;
1:16cd8c3: 
1:2019a21: import javax.management.openmbean.CompositeData;
1:2019a21: 
1:16cd8c3: /**
1:16cd8c3:  * <p>
1:16cd8c3:  * </p>
1:16cd8c3:  *
1:16cd8c3:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:16cd8c3:  */
1:16cd8c3: public interface ReplicatedLevelDBStoreViewMBean {
1:16cd8c3: 
1:16cd8c3:     @MBeanInfo("The address of the ZooKeeper server.")
1:16cd8c3:     String getZkAddress();
1:16cd8c3:     @MBeanInfo("The path in ZooKeeper to hold master elections.")
1:16cd8c3:     String getZkPath();
1:16cd8c3:     @MBeanInfo("The ZooKeeper session timeout.")
1:4d8489b:     String getZkSessionTimeout();
1:16cd8c3:     @MBeanInfo("The address and port the master will bind for the replication protocol.")
1:16cd8c3:     String getBind();
1:16cd8c3:     @MBeanInfo("The number of replication nodes that will be part of the replication cluster.")
1:16cd8c3:     int getReplicas();
1:16cd8c3: 
1:16cd8c3:     @MBeanInfo("The role of this node in the replication cluster.")
1:16cd8c3:     String getNodeRole();
1:16cd8c3: 
1:16cd8c3:     @MBeanInfo("The replication status.")
1:16cd8c3:     String getStatus();
1:16cd8c3: 
1:2019a21:     @MBeanInfo("The status of the connected slaves.")
1:2019a21:     CompositeData[] getSlaves();
1:2019a21: 
1:16cd8c3:     @MBeanInfo("The current position of the replication log.")
1:16cd8c3:     Long getPosition();
1:16cd8c3: 
1:d44c896:     @MBeanInfo("When the last entry was added to the replication log.")
1:d44c896:     Long getPositionDate();
1:d44c896: 
1:16cd8c3:     @MBeanInfo("The directory holding the data.")
1:16cd8c3:     String getDirectory();
1:16cd8c3: 
1:16cd8c3:     @MBeanInfo("The sync strategy to use.")
1:16cd8c3:     String getSync();
1:16cd8c3: 
1:2019a21:     @MBeanInfo("The node id of this replication node.")
1:2019a21:     String getNodeId();
1:16cd8c3: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4d8489b
/////////////////////////////////////////////////////////////////////////
1:     String getZkSessionTimeout();
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:d44c896
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("When the last entry was added to the replication log.")
1:     Long getPositionDate();
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:2019a21
/////////////////////////////////////////////////////////////////////////
1: import javax.management.openmbean.CompositeData;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("The status of the connected slaves.")
1:     CompositeData[] getSlaves();
1: 
1:     @MBeanInfo("The node id of this replication node.")
1:     String getNodeId();
commit:16cd8c3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.leveldb.replicated;
1: 
1: import org.apache.activemq.broker.jmx.MBeanInfo;
1: 
1: /**
1:  * <p>
1:  * </p>
1:  *
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public interface ReplicatedLevelDBStoreViewMBean {
1: 
1:     @MBeanInfo("The address of the ZooKeeper server.")
1:     String getZkAddress();
1:     @MBeanInfo("The path in ZooKeeper to hold master elections.")
1:     String getZkPath();
1:     @MBeanInfo("The ZooKeeper session timeout.")
0:     String getZkSessionTmeout();
1:     @MBeanInfo("The address and port the master will bind for the replication protocol.")
1:     String getBind();
1:     @MBeanInfo("The number of replication nodes that will be part of the replication cluster.")
1:     int getReplicas();
1: 
1:     @MBeanInfo("The role of this node in the replication cluster.")
1:     String getNodeRole();
1: 
1:     @MBeanInfo("The replication status.")
1:     String getStatus();
1: 
1:     @MBeanInfo("The current position of the replication log.")
1:     Long getPosition();
1: 
1:     @MBeanInfo("The directory holding the data.")
1:     String getDirectory();
1: 
0:     @MBeanInfo("The size the log files are allowed to grow to.")
0:     long getLogSize();
1: 
0:     @MBeanInfo("The implementation of the LevelDB index being used.")
0:     String getIndexFactory();
1: 
0:     @MBeanInfo("Is data verified against checksums as it's loaded back from disk.")
0:     boolean getVerifyChecksums();
1: 
0:     @MBeanInfo("The maximum number of open files the index will open at one time.")
0:     int getIndexMaxOpenFiles();
1: 
0:     @MBeanInfo("Number of keys between restart points for delta encoding of keys in the index")
0:     int getIndexBlockRestartInterval();
1: 
0:     @MBeanInfo("Do aggressive checking of store data")
0:     boolean getParanoidChecks();
1: 
0:     @MBeanInfo("Amount of data to build up in memory for the index before converting to a sorted on-disk file.")
0:     int getIndexWriteBufferSize();
1: 
0:     @MBeanInfo("Approximate size of user data packed per block for the index")
0:     int getIndexBlockSize();
1: 
0:     @MBeanInfo("The type of compression to use for the index")
0:     String getIndexCompression();
1: 
0:     @MBeanInfo("The size of the cache index")
0:     long getIndexCacheSize();
1: 
0:     @MBeanInfo("The maximum amount of async writes to buffer up")
0:     int getAsyncBufferSize();
1: 
1:     @MBeanInfo("The sync strategy to use.")
1:     String getSync();
1: 
1: }
============================================================================