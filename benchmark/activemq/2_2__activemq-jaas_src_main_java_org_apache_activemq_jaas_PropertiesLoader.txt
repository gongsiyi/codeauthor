1:59cd018: /**
1:59cd018:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:59cd018:  * contributor license agreements.  See the NOTICE file distributed with
1:59cd018:  * this work for additional information regarding copyright ownership.
1:59cd018:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:59cd018:  * (the "License"); you may not use this file except in compliance with
1:59cd018:  * the License.  You may obtain a copy of the License at
1:59cd018:  *
1:59cd018:  *      http://www.apache.org/licenses/LICENSE-2.0
1:59cd018:  *
1:59cd018:  * Unless required by applicable law or agreed to in writing, software
1:59cd018:  * distributed under the License is distributed on an "AS IS" BASIS,
1:59cd018:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:59cd018:  * See the License for the specific language governing permissions and
1:59cd018:  * limitations under the License.
1:59cd018:  */
1:59cd018: package org.apache.activemq.jaas;
1:59cd018: 
1:59cd018: import java.io.File;
1:59cd018: import java.util.HashMap;
1:59cd018: import java.util.Map;
1:59cd018: import org.slf4j.Logger;
1:59cd018: import org.slf4j.LoggerFactory;
1:59cd018: 
1:59cd018: public class PropertiesLoader {
1:59cd018:     private static final Logger LOG = LoggerFactory.getLogger(PropertiesLoader.class);
1:59cd018:     static Map<FileNameKey, ReloadableProperties> staticCache = new HashMap<FileNameKey, ReloadableProperties>();
1:59cd018:     protected boolean debug;
1:59cd018: 
1:59cd018:     public void init(Map options) {
1:59cd018:         debug = booleanOption("debug", options);
1:59cd018:         if (debug) {
1:59cd018:             LOG.debug("Initialized debug");
1:59cd018:         }
1:59cd018:     }
1:59cd018: 
1:59cd018:     public ReloadableProperties load(String nameProperty, String fallbackName, Map options) {
1:59cd018:         ReloadableProperties result;
1:59cd018:         FileNameKey key = new FileNameKey(nameProperty, fallbackName, options);
1:59cd018:         key.setDebug(debug);
1:59cd018: 
1:59cd018:         synchronized (staticCache) {
1:59cd018:             result = staticCache.get(key);
1:59cd018:             if (result == null) {
1:59cd018:                 result = new ReloadableProperties(key);
1:59cd018:                 staticCache.put(key, result);
1:59cd018:             }
1:59cd018:         }
1:59cd018: 
1:59cd018:         return result.obtained();
1:59cd018:     }
1:59cd018: 
1:59cd018:     private static boolean booleanOption(String name, Map options) {
1:59cd018:         return Boolean.parseBoolean((String) options.get(name));
1:59cd018:     }
1:59cd018: 
1:59cd018:     public class FileNameKey {
1:59cd018:         final File file;
1:59cd018:         final String absPath;
1:59cd018:         final boolean reload;
1:59cd018:         private boolean decrypt;
1:59cd018:         private boolean debug;
1:59cd018: 
1:59cd018:         public FileNameKey(String nameProperty, String fallbackName, Map options) {
1:59cd018:             this.file = new File(baseDir(options), stringOption(nameProperty, fallbackName, options));
1:59cd018:             absPath = file.getAbsolutePath();
1:59cd018:             reload = booleanOption("reload", options);
1:59cd018:             decrypt = booleanOption("decrypt", options);
1:59cd018:         }
1:59cd018: 
1:59cd018:         @Override
1:59cd018:         public boolean equals(Object other) {
1:59cd018:             return other instanceof FileNameKey && this.absPath.equals(((FileNameKey) other).absPath);
1:59cd018:         }
1:59cd018: 
1:2788bd5:         @Override
1:59cd018:         public int hashCode() {
1:59cd018:             return this.absPath.hashCode();
1:59cd018:         }
1:59cd018: 
1:59cd018:         public boolean isReload() {
1:59cd018:             return reload;
1:59cd018:         }
1:59cd018: 
1:59cd018:         public File file() {
1:59cd018:             return file;
1:59cd018:         }
1:59cd018: 
1:59cd018:         public boolean isDecrypt() {
1:59cd018:             return decrypt;
1:59cd018:         }
1:59cd018: 
1:59cd018:         public void setDecrypt(boolean decrypt) {
1:59cd018:             this.decrypt = decrypt;
1:59cd018:         }
1:59cd018: 
1:59cd018:         private String stringOption(String key, String nameDefault, Map options) {
1:59cd018:             Object result = options.get(key);
1:59cd018:             return result != null ? result.toString() : nameDefault;
1:59cd018:         }
1:59cd018: 
1:59cd018:         private File baseDir(Map options) {
1:59cd018:             File baseDir = null;
1:59cd018:             if (options.get("baseDir") != null) {
1:59cd018:                 baseDir = new File((String) options.get("baseDir"));
1:59cd018:             } else {
1:59cd018:                 if (System.getProperty("java.security.auth.login.config") != null) {
1:59cd018:                     baseDir = new File(System.getProperty("java.security.auth.login.config")).getParentFile();
1:59cd018:                 }
1:59cd018:             }
1:59cd018:             if (debug) {
1:59cd018:                 LOG.debug("Using basedir=" + baseDir.getAbsolutePath());
1:59cd018:             }
1:59cd018:             return baseDir;
1:59cd018:         }
1:59cd018: 
1:2788bd5:         @Override
1:59cd018:         public String toString() {
1:59cd018:             return "PropsFile=" + absPath;
1:59cd018:         }
1:59cd018: 
1:59cd018:         public void setDebug(boolean debug) {
1:59cd018:             this.debug = debug;
1:59cd018:         }
1:59cd018: 
1:59cd018:         public boolean isDebug() {
1:59cd018:             return debug;
1:59cd018:         }
1:59cd018:     }
1:59cd018: 
1:59cd018:     /**
1:59cd018:      * For test-usage only.
1:59cd018:      */
1:59cd018:     public static void resetUsersAndGroupsCache() {
1:59cd018:         staticCache.clear();
1:59cd018:     }
1:59cd018: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2788bd5
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
author:gtully
-------------------------------------------------------------------------------
commit:59cd018
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jaas;
1: 
1: import java.io.File;
1: import java.util.HashMap;
1: import java.util.Map;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class PropertiesLoader {
1:     private static final Logger LOG = LoggerFactory.getLogger(PropertiesLoader.class);
1:     static Map<FileNameKey, ReloadableProperties> staticCache = new HashMap<FileNameKey, ReloadableProperties>();
1:     protected boolean debug;
1: 
1:     public void init(Map options) {
1:         debug = booleanOption("debug", options);
1:         if (debug) {
1:             LOG.debug("Initialized debug");
1:         }
1:     }
1: 
1:     public ReloadableProperties load(String nameProperty, String fallbackName, Map options) {
1:         ReloadableProperties result;
1:         FileNameKey key = new FileNameKey(nameProperty, fallbackName, options);
1:         key.setDebug(debug);
1: 
1:         synchronized (staticCache) {
1:             result = staticCache.get(key);
1:             if (result == null) {
1:                 result = new ReloadableProperties(key);
1:                 staticCache.put(key, result);
1:             }
1:         }
1: 
1:         return result.obtained();
1:     }
1: 
1:     private static boolean booleanOption(String name, Map options) {
1:         return Boolean.parseBoolean((String) options.get(name));
1:     }
1: 
1:     public class FileNameKey {
1:         final File file;
1:         final String absPath;
1:         final boolean reload;
1:         private boolean decrypt;
1:         private boolean debug;
1: 
1:         public FileNameKey(String nameProperty, String fallbackName, Map options) {
1:             this.file = new File(baseDir(options), stringOption(nameProperty, fallbackName, options));
1:             absPath = file.getAbsolutePath();
1:             reload = booleanOption("reload", options);
1:             decrypt = booleanOption("decrypt", options);
1:         }
1: 
1:         @Override
1:         public boolean equals(Object other) {
1:             return other instanceof FileNameKey && this.absPath.equals(((FileNameKey) other).absPath);
1:         }
1: 
1:         public int hashCode() {
1:             return this.absPath.hashCode();
1:         }
1: 
1:         public boolean isReload() {
1:             return reload;
1:         }
1: 
1:         public File file() {
1:             return file;
1:         }
1: 
1:         public boolean isDecrypt() {
1:             return decrypt;
1:         }
1: 
1:         public void setDecrypt(boolean decrypt) {
1:             this.decrypt = decrypt;
1:         }
1: 
1:         private String stringOption(String key, String nameDefault, Map options) {
1:             Object result = options.get(key);
1:             return result != null ? result.toString() : nameDefault;
1:         }
1: 
1:         private File baseDir(Map options) {
1:             File baseDir = null;
1:             if (options.get("baseDir") != null) {
1:                 baseDir = new File((String) options.get("baseDir"));
1:             } else {
1:                 if (System.getProperty("java.security.auth.login.config") != null) {
1:                     baseDir = new File(System.getProperty("java.security.auth.login.config")).getParentFile();
1:                 }
1:             }
1:             if (debug) {
1:                 LOG.debug("Using basedir=" + baseDir.getAbsolutePath());
1:             }
1:             return baseDir;
1:         }
1: 
1:         public String toString() {
1:             return "PropsFile=" + absPath;
1:         }
1: 
1:         public void setDebug(boolean debug) {
1:             this.debug = debug;
1:         }
1: 
1:         public boolean isDebug() {
1:             return debug;
1:         }
1:     }
1: 
1:     /**
1:      * For test-usage only.
1:      */
1:     public static void resetUsersAndGroupsCache() {
1:         staticCache.clear();
1:     }
1: }
============================================================================