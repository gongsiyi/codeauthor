5:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:5f1adbe:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f1adbe:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
5:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
5:a107823: 
1:5f1adbe: import java.io.IOException;
1:5f1adbe: import java.net.MalformedURLException;
1:5f1adbe: import java.util.Arrays;
1:5f1adbe: import java.util.Iterator;
1:5f1adbe: import java.util.List;
1:5f1adbe: 
1:a107823: import javax.management.MBeanServerConnection;
1:a107823: import javax.management.ObjectName;
1:a107823: import javax.management.openmbean.CompositeData;
1:5f1adbe: import javax.management.remote.JMXConnector;
1:5f1adbe: import javax.management.remote.JMXConnectorFactory;
1:5f1adbe: import javax.management.remote.JMXServiceURL;
1:a107823: 
1:a107823: public class MessagesQueryFilter extends AbstractQueryFilter {
1:a107823: 
1:0dec0b6:     private MBeanServerConnection jmxConnection;
1:5f1adbe:     private ObjectName destName;
1:a107823: 
1:a107823:     /**
1:a107823:      * Create a JMS message query filter
1:5f1adbe:      * 
1:0dec0b6:      * @param jmxConnection - JMX connection to use
1:a107823:      * @param destName - object name query to retrieve the destination
1:a107823:      */
1:0dec0b6:     public MessagesQueryFilter(MBeanServerConnection jmxConnection, ObjectName destName) {
1:a107823:         super(null);
1:0dec0b6:         this.jmxConnection = jmxConnection;
1:5f1adbe:         this.destName = destName;
5:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Queries the specified destination using the message selector format query
1:5f1adbe:      * 
1:a107823:      * @param queries - message selector queries
1:a107823:      * @return list messages that matches the selector
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     public List query(List queries) throws Exception {
1:a107823:         String selector = "";
1:a107823: 
1:a107823:         // Convert to message selector
1:5f1adbe:         for (Iterator i = queries.iterator(); i.hasNext();) {
1:a107823:             selector = selector + "(" + i.next().toString() + ") AND ";
1:a107823:         }
1:a107823: 
1:a107823:         // Remove last AND
1:5f1adbe:         if (!selector.equals("")) {
1:a107823:             selector = selector.substring(0, selector.length() - 5);
1:a107823:         }
1:a107823: 
1:a107823:         return queryMessages(selector);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Query the messages of a queue destination using JMX
1:5f1adbe:      * 
1:a107823:      * @param selector - message selector
1:a107823:      * @return list of messages that matches the selector
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     protected List queryMessages(String selector) throws Exception {
1:e282571:     	CompositeData[] messages = (CompositeData[]) jmxConnection.invoke(destName, "browse", new Object[] {selector}, new String[] {});
1:a107823:         return Arrays.asList(messages);
1:a107823:     }
1:a107823: 
1:a107823: }
============================================================================
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:e282571
/////////////////////////////////////////////////////////////////////////
1:     	CompositeData[] messages = (CompositeData[]) jmxConnection.invoke(destName, "browse", new Object[] {selector}, new String[] {});
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1:     private MBeanServerConnection jmxConnection;
1:      * @param jmxConnection - JMX connection to use
1:     public MessagesQueryFilter(MBeanServerConnection jmxConnection, ObjectName destName) {
1:         this.jmxConnection = jmxConnection;
/////////////////////////////////////////////////////////////////////////
0:         CompositeData[] messages = (CompositeData[]) jmxConnection.invoke(destName, "browse", new Object[] {}, new String[] {});
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.MalformedURLException;
1: import java.util.Arrays;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import javax.management.remote.JMXConnector;
1: import javax.management.remote.JMXConnectorFactory;
1: import javax.management.remote.JMXServiceURL;
1:     private ObjectName destName;
1:      * 
1:         this.destName = destName;
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator i = queries.iterator(); i.hasNext();) {
1:         if (!selector.equals("")) {
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXServiceURL;
0: import javax.management.remote.JMXConnectorFactory;
1: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
0: import java.net.MalformedURLException;
0: import java.util.List;
0: import java.util.Iterator;
0: import java.util.Arrays;
0: import java.io.IOException;
1: 
1: public class MessagesQueryFilter extends AbstractQueryFilter {
1: 
0:     private JMXServiceURL jmxServiceUrl;
0:     private ObjectName    destName;
1: 
1:     /**
1:      * Create a JMS message query filter
0:      * @param jmxServiceUrl - JMX service URL to connect to
1:      * @param destName - object name query to retrieve the destination
1:      */
0:     public MessagesQueryFilter(JMXServiceURL jmxServiceUrl, ObjectName destName) {
1:         super(null);
0:         this.jmxServiceUrl = jmxServiceUrl;
0:         this.destName      = destName;
1:     }
1: 
1:     /**
1:      * Queries the specified destination using the message selector format query
1:      * @param queries - message selector queries
1:      * @return list messages that matches the selector
1:      * @throws Exception
1:      */
1:     public List query(List queries) throws Exception {
1:         String selector = "";
1: 
1:         // Convert to message selector
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
1:             selector = selector + "(" + i.next().toString() + ") AND ";
1:         }
1: 
1:         // Remove last AND
0:         if (selector != "") {
1:             selector = selector.substring(0, selector.length() - 5);
1:         }
1: 
1:         return queryMessages(selector);
1:     }
1: 
1:     /**
1:      * Query the messages of a queue destination using JMX
1:      * @param selector - message selector
1:      * @return list of messages that matches the selector
1:      * @throws Exception
1:      */
1:     protected List queryMessages(String selector) throws Exception {
0:         JMXConnector connector = createJmxConnector();
0:         MBeanServerConnection server = connector.getMBeanServerConnection();
0:         CompositeData[] messages = (CompositeData[])server.invoke(destName, "browse", new Object[] {}, new String[] {});
0:         connector.close();
1: 
1:         return Arrays.asList(messages);
1:     }
1: 
1:     /**
0:      * Get the JMX service URL the query is connecting to.
0:      * @return JMX service URL
1:      */
0:     public JMXServiceURL getJmxServiceUrl() {
0:         return jmxServiceUrl;
1:     }
1: 
1:     /**
0:      * Sets the JMX service URL the query is going to connect to.
0:      * @param jmxServiceUrl - new JMX service URL
1:      */
0:     public void setJmxServiceUrl(JMXServiceURL jmxServiceUrl) {
0:         this.jmxServiceUrl = jmxServiceUrl;
1:     }
1: 
1:     /**
0:      * Sets the JMX service URL the query is going to connect to.
0:      * @param jmxServiceUrl - new JMX service URL
1:      */
0:     public void setJmxServiceUrl(String jmxServiceUrl) throws MalformedURLException {
0:         setJmxServiceUrl(new JMXServiceURL(jmxServiceUrl));
1:     }
1: 
1:     /**
0:      * Creates a JMX connector
0:      * @return JMX connector
0:      * @throws java.io.IOException
1:      */
0:     protected JMXConnector createJmxConnector() throws IOException {
0:         return JMXConnectorFactory.connect(getJmxServiceUrl());
1:     }
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:35bfe5c
/////////////////////////////////////////////////////////////////////////
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXServiceURL;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.MBeanServerConnection;
0: import javax.management.ObjectName;
0: import javax.management.openmbean.CompositeData;
0: import java.net.MalformedURLException;
0: import java.util.Arrays;
0: import java.io.IOException;
0:     private JMXServiceURL jmxServiceUrl;
0:     private ObjectName    destName;
0:      * @param jmxServiceUrl - JMX service URL to connect to
0:      * @param destName - object name query to retrieve the destination
0:     public MessagesQueryFilter(JMXServiceURL jmxServiceUrl, ObjectName destName) {
0:         this.jmxServiceUrl = jmxServiceUrl;
0:         this.destName      = destName;
/////////////////////////////////////////////////////////////////////////
0:         return queryMessages(selector);
0:      * Query the messages of a queue destination using JMX
0:     protected List queryMessages(String selector) throws Exception {
0:         JMXConnector connector = createJmxConnector();
0:         MBeanServerConnection server = connector.getMBeanServerConnection();
0:         CompositeData[] messages = (CompositeData[])server.invoke(destName, "browse", new Object[] {}, new String[] {});
0:         connector.close();
0:         return Arrays.asList(messages);
0:      * Get the JMX service URL the query is connecting to.
0:      * @return JMX service URL
0:     public JMXServiceURL getJmxServiceUrl() {
0:         return jmxServiceUrl;
0:      * Sets the JMX service URL the query is going to connect to.
0:      * @param jmxServiceUrl - new JMX service URL
0:     public void setJmxServiceUrl(JMXServiceURL jmxServiceUrl) {
0:         this.jmxServiceUrl = jmxServiceUrl;
0:      * Sets the JMX service URL the query is going to connect to.
0:      * @param jmxServiceUrl - new JMX service URL
0:     public void setJmxServiceUrl(String jmxServiceUrl) throws MalformedURLException {
0:         setJmxServiceUrl(new JMXServiceURL(jmxServiceUrl));
0:      * Creates a JMX connector
0:      * @return JMX connector
0:      * @throws java.io.IOException
0:     protected JMXConnector createJmxConnector() throws IOException {
0:         return JMXConnectorFactory.connect(getJmxServiceUrl());
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: 
0: import javax.jms.Destination;
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Session;
0: import javax.jms.QueueBrowser;
0: import java.net.URI;
0: import java.util.Collections;
0: import java.util.List;
0: import java.util.Iterator;
0: 
0: public class MessagesQueryFilter extends AbstractQueryFilter {
0: 
0:     private URI brokerUrl;
0:     private Destination destination;
0: 
0:     /**
0:      * Create a JMS message query filter
0:      * @param brokerUrl - broker url to connect to
0:      * @param destination - JMS destination to query
0:      */
0:     public MessagesQueryFilter(URI brokerUrl, Destination destination) {
0:         super(null);
0:         this.brokerUrl   = brokerUrl;
0:         this.destination = destination;
0:     }
0: 
0:     /**
0:      * Queries the specified destination using the message selector format query
0:      * @param queries - message selector queries
0:      * @return list messages that matches the selector
0:      * @throws Exception
0:      */
0:     public List query(List queries) throws Exception {
0:         String selector = "";
0: 
0:         // Convert to message selector
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
0:             selector = selector + "(" + i.next().toString() + ") AND ";
0:         }
0: 
0:         // Remove last AND
0:         if (selector != "") {
0:             selector = selector.substring(0, selector.length() - 5);
0:         }
0: 
0:         if (destination instanceof ActiveMQQueue) {
0:             return queryMessages((ActiveMQQueue)destination, selector);
0:         } else {
0:             return queryMessages((ActiveMQTopic)destination, selector);
0:         }
0:     }
0: 
0:     /**
0:      * Query the messages of a queue destination using a queue browser
0:      * @param queue - queue destination
0:      * @param selector - message selector
0:      * @return list of messages that matches the selector
0:      * @throws Exception
0:      */
0:     protected List queryMessages(ActiveMQQueue queue, String selector) throws Exception {
0:         Connection conn = createConnection(getBrokerUrl());
0: 
0:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         QueueBrowser browser = sess.createBrowser(queue, selector);
0: 
0:         List messages = Collections.list(browser.getEnumeration());
0: 
0:         conn.close();
0: 
0:         return messages;
0:     }
0: 
0:     /**
0:      * Query the messages of a topic destination using a message consumer
0:      * @param topic - topic destination
0:      * @param selector - message selector
0:      * @return list of messages that matches the selector
0:      * @throws Exception
0:      */
0:     protected List queryMessages(ActiveMQTopic topic, String selector) throws Exception {
0:         // TODO: should we use a durable subscriber or a retroactive non-durable subscriber?
0:         // TODO: if a durable subscriber is used, how do we manage it? subscribe/unsubscribe tasks?
0:         return null;
0:     }
0: 
0:     /**
0:      * Create and start a JMS connection
0:      * @param brokerUrl - broker url to connect to.
0:      * @return JMS connection
0:      * @throws JMSException
0:      */
0:     protected Connection createConnection(URI brokerUrl) throws JMSException {
0:         Connection conn = (new ActiveMQConnectionFactory(brokerUrl)).createConnection();
0:         conn.start();
0:         return conn;
0:     }
0: 
0:     /**
0:      * Get the broker url being used.
0:      * @return broker url
0:      */
0:     public URI getBrokerUrl() {
0:         return brokerUrl;
0:     }
0: 
0:     /**
0:      * Set the broker url to use.
0:      * @param brokerUrl - broker url
0:      */
0:     public void setBrokerUrl(URI brokerUrl) {
0:         this.brokerUrl = brokerUrl;
0:     }
0: 
0:     /**
0:      * Get the destination being used.
0:      * @return - JMS destination
0:      */
0:     public Destination getDestination() {
0:         return destination;
0:     }
0: 
0:     /**
0:      * Set the destination to use.
0:      * @param destination - JMS destination
0:      */
0:     public void setDestination(Destination destination) {
0:         this.destination = destination;
0:     }
0: 
0: }
============================================================================