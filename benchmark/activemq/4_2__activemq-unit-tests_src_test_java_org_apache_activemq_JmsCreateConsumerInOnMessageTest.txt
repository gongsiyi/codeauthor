3:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
6:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
5:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
4:d29ca2a: 
1:02dc6ce: import static org.junit.Assert.assertTrue;
1:02dc6ce: 
1:02dc6ce: import java.util.concurrent.CountDownLatch;
1:02dc6ce: import java.util.concurrent.TimeUnit;
1:02dc6ce: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: 
1:02dc6ce: import org.junit.After;
1:02dc6ce: import org.junit.Before;
1:02dc6ce: import org.junit.Rule;
1:02dc6ce: import org.junit.Test;
1:02dc6ce: import org.junit.rules.TestName;
1:02dc6ce: 
1:02dc6ce: public class JmsCreateConsumerInOnMessageTest {
1:d29ca2a: 
1:d29ca2a:     private Connection connection;
1:02dc6ce:     private ActiveMQConnectionFactory factory;
1:d29ca2a: 
1:02dc6ce:     @Rule
1:02dc6ce:     public final TestName name = new TestName();
1:02dc6ce: 
1:02dc6ce:     @Before
1:02dc6ce:     public void setUp() throws Exception {
1:02dc6ce:         factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
1:02dc6ce:         connection = factory.createConnection();
5:d29ca2a:     }
1:230a86c: 
1:02dc6ce:     @After
1:02dc6ce:     public void tearDown() throws Exception {
1:02dc6ce:         if (connection != null) {
1:02dc6ce:             connection.close();
1:02dc6ce:             connection = null;
1:02dc6ce:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Tests if a consumer can be created asynchronusly
1:02dc6ce:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:02dc6ce:     @Test(timeout = 60000)
1:230a86c:     public void testCreateConsumer() throws Exception {
1:02dc6ce:         final CountDownLatch done = new CountDownLatch(1);
1:d29ca2a: 
1:02dc6ce:         final Session publisherSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:02dc6ce:         final Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:02dc6ce:         final Topic topic = publisherSession.createTopic("Test.Topic");
1:02dc6ce: 
1:02dc6ce:         MessageConsumer consumer = consumerSession.createConsumer(topic);
1:02dc6ce:         consumer.setMessageListener(new MessageListener() {
1:02dc6ce: 
1:02dc6ce:             @Override
1:02dc6ce:             public void onMessage(Message message) {
1:02dc6ce:                 try {
1:02dc6ce:                     consumerSession.createConsumer(topic);
1:02dc6ce:                     consumerSession.createProducer(topic);
1:02dc6ce:                     done.countDown();
1:02dc6ce:                 } catch (Exception ex) {
1:02dc6ce:                     assertTrue(false);
1:02dc6ce:                 }
1:d29ca2a:             }
1:02dc6ce:         });
1:02dc6ce: 
1:02dc6ce:         MessageProducer producer = publisherSession.createProducer(topic);
1:02dc6ce:         connection.start();
1:02dc6ce: 
1:02dc6ce:         producer.send(publisherSession.createTextMessage("test"));
1:02dc6ce: 
1:02dc6ce:         assertTrue("Should have finished onMessage", done.await(5, TimeUnit.SECONDS));
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:02dc6ce
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1: public class JmsCreateConsumerInOnMessageTest {
1:     private ActiveMQConnectionFactory factory;
1:     @Rule
1:     public final TestName name = new TestName();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
1:         connection = factory.createConnection();
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:      *
1:     @Test(timeout = 60000)
1:         final CountDownLatch done = new CountDownLatch(1);
1:         final Session publisherSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Topic topic = publisherSession.createTopic("Test.Topic");
1: 
1:         MessageConsumer consumer = consumerSession.createConsumer(topic);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     consumerSession.createConsumer(topic);
1:                     consumerSession.createProducer(topic);
1:                     done.countDown();
1:                 } catch (Exception ex) {
1:                     assertTrue(false);
1:                 }
1:         });
1: 
1:         MessageProducer producer = publisherSession.createProducer(topic);
1:         connection.start();
1: 
1:         producer.send(publisherSession.createTextMessage("test"));
1: 
1:         assertTrue("Should have finished onMessage", done.await(5, TimeUnit.SECONDS));
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:             consumerSession.createProducer(topic);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     /*
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Tests if a consumer can be created asynchronusly
1:     public void testCreateConsumer() throws Exception {
0:         if (testConsumer == null) {
0:             synchronized (lock) {
/////////////////////////////////////////////////////////////////////////
0:             synchronized (lock) {
0:         } catch (Exception ex) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
0: import org.apache.activemq.TestSupport;
1: 
1: /**
0:  * @version $Revision: 1.2 $
1:  */
0: public class JmsCreateConsumerInOnMessageTest extends TestSupport implements MessageListener {
1: 
1:     private Connection connection;
0:     private Session publisherSession;
0:     private Session consumerSession;
0:     private MessageConsumer consumer;
0:     private MessageConsumer testConsumer;
0:     private MessageProducer producer;
0:     private Topic topic;
0:     private Object lock = new Object();
1: 
0:     /* 
0:      * @see junit.framework.TestCase#setUp()
1:      */
0:     protected void setUp() throws Exception {
0:         super.setUp();
0:         super.topic = true;
0:         connection = createConnection();
0:         connection.setClientID("connection:" + getSubject());
0:         publisherSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         topic = (Topic)super.createDestination("Test.Topic");
0:         consumer = consumerSession.createConsumer(topic);
0:         consumer.setMessageListener(this);
0:         producer = publisherSession.createProducer(topic);
0:         connection.start();
1:     }
1:     
0:     /*
0:      * @see junit.framework.TestCase#tearDown()
1:      */
0:     protected void tearDown() throws Exception {
0:         super.tearDown();
0:         connection.close();
1:     }
1: 
1:     
1:     /**
0:      * Tests if a consumer can be created asynchronusly  
1:      * 
1:      * @throws Exception
1:      */
0:     public void testCreateConsumer() throws Exception{
0:         Message msg = super.createMessage();
0:         producer.send(msg);
0:         if (testConsumer == null){
0:             synchronized(lock){
0:                 lock.wait(3000);
1:             }
1:         }
0:         assertTrue(testConsumer != null);
1:     }
1: 
1:     /**
0:      * Use the asynchronous subscription mechanism
1:      * 
0:      * @param message
1:      */
0:     public void onMessage(Message message) {
0:         try {
0:             testConsumer = consumerSession.createConsumer(topic);
0:             MessageProducer anotherProducer = consumerSession.createProducer(topic);
0:             synchronized(lock){
0:                 lock.notify();
1:             }
0:         }catch (Exception ex){
0:             ex.printStackTrace();
0:             assertTrue(false);
1:         }
1:     }
1: }
============================================================================