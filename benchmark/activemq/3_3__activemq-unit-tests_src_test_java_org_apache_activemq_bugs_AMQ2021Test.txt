1:99819f3: /**
1:99819f3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:99819f3:  * contributor license agreements.  See the NOTICE file distributed with
1:99819f3:  * this work for additional information regarding copyright ownership.
1:99819f3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:99819f3:  * (the "License"); you may not use this file except in compliance with
1:99819f3:  * the License.  You may obtain a copy of the License at
1:99819f3:  *
1:99819f3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:99819f3:  *
1:99819f3:  * Unless required by applicable law or agreed to in writing, software
1:99819f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:99819f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:99819f3:  * See the License for the specific language governing permissions and
1:99819f3:  * limitations under the License.
1:99819f3:  */
1:99819f3: package org.apache.activemq.bugs;
27:99819f3: 
1:acbe549: import static org.junit.Assert.assertEquals;
1:acbe549: import static org.junit.Assert.assertTrue;
1:acbe549: import static org.junit.Assert.fail;
1:acbe549: 
1:99819f3: import java.lang.Thread.UncaughtExceptionHandler;
1:99819f3: import java.util.ArrayList;
1:99819f3: import java.util.Vector;
1:99819f3: import java.util.concurrent.CountDownLatch;
1:99819f3: import java.util.concurrent.TimeUnit;
1:99819f3: 
1:99819f3: import javax.jms.Connection;
1:99819f3: import javax.jms.ExceptionListener;
1:99819f3: import javax.jms.JMSException;
1:99819f3: import javax.jms.Message;
1:99819f3: import javax.jms.MessageConsumer;
1:99819f3: import javax.jms.MessageListener;
1:99819f3: import javax.jms.MessageProducer;
1:99819f3: import javax.jms.Session;
1:99819f3: import javax.jms.TextMessage;
1:99819f3: 
1:99819f3: import org.apache.activemq.ActiveMQConnectionFactory;
1:99819f3: import org.apache.activemq.broker.BrokerService;
1:99819f3: import org.apache.activemq.command.ActiveMQQueue;
1:99819f3: import org.apache.activemq.command.ActiveMQTopic;
1:acbe549: import org.junit.After;
1:acbe549: import org.junit.Before;
1:acbe549: import org.junit.Rule;
1:acbe549: import org.junit.Test;
1:acbe549: import org.junit.rules.TestName;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:99819f3: 
1:99819f3: /**
1:acbe549:  * This is a test case for the issue reported at: https://issues.apache.org/activemq/browse/AMQ-2021 Bug is modification
1:acbe549:  * of inflight message properties so the failure can manifest itself in a bunch or ways, from message receipt with null
1:acbe549:  * properties to marshall errors
1:99819f3:  */
1:acbe549: public class AMQ2021Test implements ExceptionListener, UncaughtExceptionHandler {
1:99819f3: 
1:8bf987b:     private static final Logger log = LoggerFactory.getLogger(AMQ2021Test.class);
1:99819f3:     BrokerService brokerService;
1:99819f3:     ArrayList<Thread> threads = new ArrayList<Thread>();
1:99819f3:     Vector<Throwable> exceptions;
1:2db7cbf: 
1:acbe549:     @Rule
1:acbe549:     public TestName name = new TestName();
1:acbe549: 
1:99819f3:     AMQ2021Test testCase;
1:2db7cbf: 
1:2db7cbf:     private final String ACTIVEMQ_BROKER_BIND = "tcp://localhost:0";
1:2db7cbf:     private String CONSUMER_BROKER_URL = "?jms.redeliveryPolicy.maximumRedeliveries=1&jms.redeliveryPolicy.initialRedeliveryDelay=0";
1:2db7cbf:     private String PRODUCER_BROKER_URL;
1:2db7cbf: 
1:2db7cbf:     private final int numMessages = 1000;
1:2db7cbf:     private final int numConsumers = 2;
1:acbe549:     private final int dlqMessages = numMessages / 2;
1:2db7cbf: 
1:2db7cbf:     private CountDownLatch receivedLatch;
1:99819f3:     private ActiveMQTopic destination;
1:2db7cbf:     private CountDownLatch started;
1:99819f3: 
1:acbe549:     @Before
1:acbe549:     public void setUp() throws Exception {
1:99819f3:         Thread.setDefaultUncaughtExceptionHandler(this);
1:99819f3:         testCase = this;
1:2db7cbf: 
1:99819f3:         // Start an embedded broker up.
1:99819f3:         brokerService = new BrokerService();
1:99819f3:         brokerService.setDeleteAllMessagesOnStartup(true);
1:99819f3:         brokerService.addConnector(ACTIVEMQ_BROKER_BIND);
1:99819f3:         brokerService.start();
1:acbe549:         destination = new ActiveMQTopic(name.getMethodName());
1:99819f3:         exceptions = new Vector<Throwable>();
1:2db7cbf: 
1:2db7cbf:         CONSUMER_BROKER_URL = brokerService.getTransportConnectors().get(0).getPublishableConnectString() + CONSUMER_BROKER_URL;
1:2db7cbf:         PRODUCER_BROKER_URL = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:2db7cbf: 
1:acbe549:         receivedLatch = new CountDownLatch(numConsumers * (numMessages + dlqMessages));
1:99819f3:         started = new CountDownLatch(1);
5:99819f3:     }
1:2db7cbf: 
1:acbe549:     @After
1:acbe549:     public void tearDown() throws Exception {
1:99819f3:         for (Thread t : threads) {
1:99819f3:             t.interrupt();
1:99819f3:             t.join();
1:2db7cbf:         }
1:99819f3:         brokerService.stop();
1:99819f3:     }
1:2db7cbf: 
1:acbe549:     @Test(timeout=240000)
1:99819f3:     public void testConcurrentTopicResendToDLQ() throws Exception {
1:99819f3: 
1:acbe549:         for (int i = 0; i < numConsumers; i++) {
1:99819f3:             ConsumerThread c1 = new ConsumerThread("Consumer-" + i);
1:99819f3:             threads.add(c1);
1:99819f3:             c1.start();
1:99819f3:         }
1:2db7cbf: 
1:2c73c3d:         assertTrue(started.await(10, TimeUnit.SECONDS));
1:2db7cbf: 
1:99819f3:         Thread producer = new Thread() {
1:acbe549:             @Override
1:99819f3:             public void run() {
1:99819f3:                 try {
1:99819f3:                     produce(numMessages);
1:99819f3:                 } catch (Exception e) {
1:99819f3:                 }
1:99819f3:             }
1:99819f3:         };
1:99819f3:         threads.add(producer);
1:99819f3:         producer.start();
1:2db7cbf: 
1:2db7cbf:         boolean allGood = receivedLatch.await(90, TimeUnit.SECONDS);
1:acbe549:         for (Throwable t : exceptions) {
1:99819f3:             log.error("failing test with first exception", t);
1:99819f3:             fail("exception during test : " + t);
1:2db7cbf:         }
1:99819f3:         assertTrue("excepted messages received within time limit", allGood);
1:2db7cbf: 
1:99819f3:         assertEquals(0, exceptions.size());
1:2db7cbf: 
1:acbe549:         for (int i = 0; i < numConsumers; i++) {
1:99819f3:             // last recovery sends message to deq so is not received again
1:acbe549:             assertEquals(dlqMessages * 2, ((ConsumerThread) threads.get(i)).recoveries);
1:acbe549:             assertEquals(numMessages + dlqMessages, ((ConsumerThread) threads.get(i)).counter);
1:99819f3:         }
1:2db7cbf: 
1:99819f3:         // half of the messages for each consumer should go to the dlq but duplicates will
1:99819f3:         // be suppressed
1:99819f3:         consumeFromDLQ(dlqMessages);
1:2db7cbf: 
1:2db7cbf:     }
1:2db7cbf: 
1:acbe549:     private void consumeFromDLQ(int messageCount) throws Exception {
1:acbe549:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(CONSUMER_BROKER_URL);
1:99819f3:         Connection connection = connectionFactory.createConnection();
1:99819f3:         connection.start();
1:2db7cbf: 
1:99819f3:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:99819f3:         MessageConsumer dlqConsumer = session.createConsumer(new ActiveMQQueue("ActiveMQ.DLQ"));
1:99819f3:         int count = 0;
1:acbe549:         for (int i = 0; i < messageCount; i++) {
1:99819f3:             if (dlqConsumer.receive(1000) == null) {
1:99819f3:                 break;
1:99819f3:             }
1:99819f3:             count++;
1:99819f3:         }
1:99819f3:         assertEquals(messageCount, count);
1:99819f3:     }
1:99819f3: 
1:99819f3:     public void produce(int count) throws Exception {
1:acbe549:         Connection connection = null;
1:99819f3:         try {
1:2db7cbf:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(PRODUCER_BROKER_URL);
1:99819f3:             connection = factory.createConnection();
1:99819f3:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:99819f3:             MessageProducer producer = session.createProducer(destination);
1:99819f3:             producer.setTimeToLive(0);
1:99819f3:             connection.start();
1:2db7cbf: 
1:acbe549:             for (int i = 0; i < count; i++) {
1:acbe549:                 int id = i + 1;
1:acbe549:                 TextMessage message = session.createTextMessage(name.getMethodName() + " Message " + id);
1:99819f3:                 message.setIntProperty("MsgNumber", id);
1:99819f3:                 producer.send(message);
1:2db7cbf: 
1:99819f3:                 if (id % 500 == 0) {
1:99819f3:                     log.info("sent " + id + ", ith " + message);
1:99819f3:                 }
1:99819f3:             }
1:99819f3:         } catch (JMSException e) {
1:99819f3:             log.error("unexpected ex on produce", e);
1:99819f3:             exceptions.add(e);
1:99819f3:         } finally {
1:99819f3:             try {
1:99819f3:                 if (connection != null) {
1:99819f3:                     connection.close();
1:99819f3:                 }
1:99819f3:             } catch (Throwable e) {
1:99819f3:             }
1:99819f3:         }
1:99819f3:     }
1:2db7cbf: 
1:acbe549:     public class ConsumerThread extends Thread implements MessageListener {
1:99819f3:         public long counter = 0;
1:99819f3:         public long recoveries = 0;
1:99819f3:         private Session session;
1:99819f3: 
1:99819f3:         public ConsumerThread(String threadId) {
1:99819f3:             super(threadId);
1:99819f3:         }
1:99819f3: 
1:acbe549:         @Override
1:99819f3:         public void run() {
1:99819f3:             try {
1:acbe549:                 ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(CONSUMER_BROKER_URL);
1:99819f3:                 Connection connection = connectionFactory.createConnection();
1:99819f3:                 connection.setExceptionListener(testCase);
1:2db7cbf:                 connection.setClientID(getName());
1:99819f3:                 session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:2db7cbf:                 MessageConsumer consumer = session.createDurableSubscriber(destination, getName());
1:99819f3:                 consumer.setMessageListener(this);
1:99819f3:                 connection.start();
1:2db7cbf: 
1:acbe549:                 started.countDown();
1:2db7cbf: 
1:99819f3:             } catch (JMSException exception) {
1:99819f3:                 log.error("unexpected ex in consumer run", exception);
1:99819f3:                 exceptions.add(exception);
1:99819f3:             }
1:99819f3:         }
1:2db7cbf: 
1:acbe549:         @Override
1:99819f3:         public void onMessage(Message message) {
1:99819f3:             try {
1:99819f3:                 counter++;
1:acbe549:                 int messageNumber = message.getIntProperty("MsgNumber");
1:acbe549:                 if (messageNumber % 2 == 0) {
1:99819f3:                     session.recover();
1:99819f3:                     recoveries++;
1:99819f3:                 } else {
1:99819f3:                     message.acknowledge();
1:2db7cbf:                 }
1:2db7cbf: 
1:99819f3:                 if (counter % 200 == 0) {
1:99819f3:                     log.info("recoveries:" + recoveries + ", Received " + counter + ", counter'th " + message);
1:99819f3:                 }
1:99819f3:                 receivedLatch.countDown();
1:acbe549:             } catch (Exception e) {
1:99819f3:                 log.error("unexpected ex on onMessage", e);
1:99819f3:                 exceptions.add(e);
1:99819f3:             }
1:99819f3:         }
1:99819f3: 
1:99819f3:     }
1:99819f3: 
3:99819f3:     @Override
1:99819f3:     public void onException(JMSException exception) {
1:99819f3:         log.info("Unexpected JMSException", exception);
1:99819f3:         exceptions.add(exception);
1:99819f3:     }
1:99819f3: 
1:acbe549:     @Override
1:99819f3:     public void uncaughtException(Thread thread, Throwable exception) {
1:99819f3:         log.info("Unexpected exception from thread " + thread + ", ex: " + exception);
1:99819f3:         exceptions.add(exception);
1:99819f3:     }
1:99819f3: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:acbe549
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1:  * This is a test case for the issue reported at: https://issues.apache.org/activemq/browse/AMQ-2021 Bug is modification
1:  * of inflight message properties so the failure can manifest itself in a bunch or ways, from message receipt with null
1:  * properties to marshall errors
1: public class AMQ2021Test implements ExceptionListener, UncaughtExceptionHandler {
1:     @Rule
1:     public TestName name = new TestName();
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final int dlqMessages = numMessages / 2;
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         destination = new ActiveMQTopic(name.getMethodName());
1:         receivedLatch = new CountDownLatch(numConsumers * (numMessages + dlqMessages));
1:     @After
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=240000)
1:         for (int i = 0; i < numConsumers; i++) {
/////////////////////////////////////////////////////////////////////////
1:         for (Throwable t : exceptions) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < numConsumers; i++) {
1:             assertEquals(dlqMessages * 2, ((ConsumerThread) threads.get(i)).recoveries);
1:             assertEquals(numMessages + dlqMessages, ((ConsumerThread) threads.get(i)).counter);
/////////////////////////////////////////////////////////////////////////
1:     private void consumeFromDLQ(int messageCount) throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(CONSUMER_BROKER_URL);
1:         for (int i = 0; i < messageCount; i++) {
/////////////////////////////////////////////////////////////////////////
1:         Connection connection = null;
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < count; i++) {
1:                 int id = i + 1;
1:                 TextMessage message = session.createTextMessage(name.getMethodName() + " Message " + id);
/////////////////////////////////////////////////////////////////////////
1:     public class ConsumerThread extends Thread implements MessageListener {
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:                 ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(CONSUMER_BROKER_URL);
/////////////////////////////////////////////////////////////////////////
1:                 started.countDown();
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:                 int messageNumber = message.getIntProperty("MsgNumber");
1:                 if (messageNumber % 2 == 0) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:ef24cc9
commit:2db7cbf
/////////////////////////////////////////////////////////////////////////
0:  * https://issues.apache.org/activemq/browse/AMQ-2021
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     private final String ACTIVEMQ_BROKER_BIND = "tcp://localhost:0";
1:     private String CONSUMER_BROKER_URL = "?jms.redeliveryPolicy.maximumRedeliveries=1&jms.redeliveryPolicy.initialRedeliveryDelay=0";
1:     private String PRODUCER_BROKER_URL;
1: 
1:     private final int numMessages = 1000;
1:     private final int numConsumers = 2;
0:     private final int dlqMessages = numMessages/2;
1: 
1:     private CountDownLatch receivedLatch;
1:     private CountDownLatch started;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         CONSUMER_BROKER_URL = brokerService.getTransportConnectors().get(0).getPublishableConnectString() + CONSUMER_BROKER_URL;
1:         PRODUCER_BROKER_URL = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1: 
0:         receivedLatch =
1: 
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         boolean allGood = receivedLatch.await(90, TimeUnit.SECONDS);
1:         }
1: 
1: 
1: 
1: 
1:     }
1: 
0:         ActiveMQConnectionFactory connectionFactory =
0:             new ActiveMQConnectionFactory(CONSUMER_BROKER_URL);
1: 
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(PRODUCER_BROKER_URL);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:                 ActiveMQConnectionFactory connectionFactory =
0:                     new ActiveMQConnectionFactory(CONSUMER_BROKER_URL);
1:                 connection.setClientID(getName());
1:                 MessageConsumer consumer = session.createDurableSubscriber(destination, getName());
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                 }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger log = LoggerFactory.getLogger(AMQ2021Test.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:c23f9e6
/////////////////////////////////////////////////////////////////////////
0:     String ACTIVEMQ_BROKER_URL = ACTIVEMQ_BROKER_BIND + "?jms.redeliveryPolicy.maximumRedeliveries=1&jms.redeliveryPolicy.initialRedeliveryDelay=0";
commit:2c73c3d
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(started.await(10, TimeUnit.SECONDS));
commit:99819f3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.lang.Thread.UncaughtExceptionHandler;
1: import java.util.ArrayList;
1: import java.util.Vector;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * This is a test case for the issue reported at:
0:  * https://issues.apache.org/activemq/browse/AMQ-2021 
0:  * Bug is modification of inflight message properties so the failure can manifest itself in a bunch
0:  * or ways, from message receipt with null properties to marshall errors
1:  */
0: public class AMQ2021Test extends TestCase implements ExceptionListener, UncaughtExceptionHandler {
1: 
0:     private static final Log log = LogFactory.getLog(AMQ2021Test.class);
1:     BrokerService brokerService;
1:     ArrayList<Thread> threads = new ArrayList<Thread>();
1:     Vector<Throwable> exceptions;
1:     
1:     AMQ2021Test testCase;
1:     
0:     String ACTIVEMQ_BROKER_BIND = "tcp://localhost:61616";    
0:     String ACTIVEMQ_BROKER_URL = ACTIVEMQ_BROKER_BIND + "?jms.redeliveryPolicy.maximumRedeliveries=1";
1:     
0:     private int numMessages = 1000;
0:     private int numConsumers = 2;
0:     private int dlqMessages = numMessages/2;
1:     
0:     CountDownLatch receivedLatch;
1:     private ActiveMQTopic destination;
0:     public CountDownLatch started;
1: 
1:     @Override
0:     protected void setUp() throws Exception {
1:         Thread.setDefaultUncaughtExceptionHandler(this);
1:         testCase = this;
1:         
1:         // Start an embedded broker up.
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.addConnector(ACTIVEMQ_BROKER_BIND);
1:         brokerService.start();
0:         destination = new ActiveMQTopic(getName());
1:         exceptions = new Vector<Throwable>();
1:         
0:         receivedLatch = 
0:             new CountDownLatch(numConsumers * (numMessages + dlqMessages));
1:         started = new CountDownLatch(1);
1:     }
1:     
1:     @Override
0:     protected void tearDown() throws Exception {
1:         for (Thread t : threads) {
1:             t.interrupt();
1:             t.join();
1:         }        
1:         brokerService.stop();
1:     }
1: 
1:     public void testConcurrentTopicResendToDLQ() throws Exception {
1: 
0:         for (int i=0; i<numConsumers;i++) {
1:             ConsumerThread c1 = new ConsumerThread("Consumer-" + i);
1:             threads.add(c1);
1:             c1.start();
1:         }
1:         
0:         assertTrue(started.await(5, TimeUnit.SECONDS));
1:         
1:         Thread producer = new Thread() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     produce(numMessages);
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         };
1:         threads.add(producer);
1:         producer.start();
1:         
0:         boolean allGood = receivedLatch.await(30, TimeUnit.SECONDS);
0:         for (Throwable t: exceptions) {
1:             log.error("failing test with first exception", t);
1:             fail("exception during test : " + t);
1:         }        
1:         assertTrue("excepted messages received within time limit", allGood);
1:         
1:         assertEquals(0, exceptions.size());
1:     
0:         for (int i=0; i<numConsumers; i++) {
1:             // last recovery sends message to deq so is not received again
0:             assertEquals(dlqMessages*2, ((ConsumerThread)threads.get(i)).recoveries);
0:             assertEquals(numMessages + dlqMessages, ((ConsumerThread)threads.get(i)).counter);
1:         }
1:        
1:         // half of the messages for each consumer should go to the dlq but duplicates will
1:         // be suppressed
1:         consumeFromDLQ(dlqMessages);
1:         
1:     }    
1:     
0:     private void consumeFromDLQ( int messageCount) throws Exception {
0:         ActiveMQConnectionFactory connectionFactory = 
0:             new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_URL);
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1:                     
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer dlqConsumer = session.createConsumer(new ActiveMQQueue("ActiveMQ.DLQ"));
1:         int count = 0;
0:         for (int i=0; i< messageCount; i++) {
1:             if (dlqConsumer.receive(1000) == null) {
1:                 break;
1:             }
1:             count++;
1:         }
1:         assertEquals(messageCount, count);
1:     }
1: 
1:     public void produce(int count) throws Exception {
0:         Connection connection=null;
1:         try {
0:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_BIND);
1:             connection = factory.createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(destination);
1:             producer.setTimeToLive(0);
1:             connection.start();
1:             
0:             for (int i=0 ; i< count; i++) {
0:                 int id = i+1;
0:                 TextMessage message = session.createTextMessage(getName()+" Message "+ id);
1:                 message.setIntProperty("MsgNumber", id);
1:                 producer.send(message);
1:                 
1:                 if (id % 500 == 0) {
1:                     log.info("sent " + id + ", ith " + message);
1:                 }
1:             }
1:         } catch (JMSException e) {
1:             log.error("unexpected ex on produce", e);
1:             exceptions.add(e);
1:         } finally {
1:             try {
1:                 if (connection != null) {
1:                     connection.close();
1:                 }
1:             } catch (Throwable e) {
1:             }
1:         }
1:     }
1:     
0:     public class ConsumerThread extends Thread implements MessageListener   {
1:         public long counter = 0;
1:         public long recoveries = 0;
1:         private Session session;
1: 
1:         public ConsumerThread(String threadId) {
1:             super(threadId);
1:         }
1: 
1:         public void run() {
1:             try {
0:                 ActiveMQConnectionFactory connectionFactory = 
0:                     new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_URL);
1:                 Connection connection = connectionFactory.createConnection();
1:                 connection.setExceptionListener(testCase);
0:                 connection.setClientID(getName());            
1:                 session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:                 MessageConsumer consumer = session.createDurableSubscriber(destination, getName());                            
1:                 consumer.setMessageListener(this);
1:                 connection.start();
1:                 
0:                 started .countDown();
1:             
1:             } catch (JMSException exception) {
1:                 log.error("unexpected ex in consumer run", exception);
1:                 exceptions.add(exception);
1:             }
1:         }
1:         
1:         public void onMessage(Message message) {
1:             try {
1:                 counter++;
0:                 int messageNumber=message.getIntProperty("MsgNumber");
0:                 if(messageNumber%2==0){
1:                     session.recover();
1:                     recoveries++;
1:                 } else {
1:                     message.acknowledge();
1:                 }     
1:                 
1:                 if (counter % 200 == 0) {
1:                     log.info("recoveries:" + recoveries + ", Received " + counter + ", counter'th " + message);
1:                 }
1:                 receivedLatch.countDown();
0:             }catch (Exception e) {
1:                 log.error("unexpected ex on onMessage", e);
1:                 exceptions.add(e);
1:             }
1:         }
1:         
1:     }
1: 
1:     public void onException(JMSException exception) {
1:         log.info("Unexpected JMSException", exception);
1:         exceptions.add(exception);
1:     }
1: 
1:     public void uncaughtException(Thread thread, Throwable exception) {
1:         log.info("Unexpected exception from thread " + thread + ", ex: " + exception);
1:         exceptions.add(exception);
1:     }
1: 
1: }
============================================================================