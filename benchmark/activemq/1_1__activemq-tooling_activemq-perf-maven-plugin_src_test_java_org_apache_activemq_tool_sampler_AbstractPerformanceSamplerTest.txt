1:e47e0e0: /**
1:e47e0e0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e47e0e0:  * contributor license agreements.  See the NOTICE file distributed with
1:e47e0e0:  * this work for additional information regarding copyright ownership.
1:e47e0e0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e47e0e0:  * (the "License"); you may not use this file except in compliance with
1:e47e0e0:  * the License.  You may obtain a copy of the License at
1:e47e0e0:  *
1:e47e0e0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e47e0e0:  *
1:e47e0e0:  * Unless required by applicable law or agreed to in writing, software
1:e47e0e0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e47e0e0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e47e0e0:  * See the License for the specific language governing permissions and
1:e47e0e0:  * limitations under the License.
1:e47e0e0:  */
1:e47e0e0: 
1:e47e0e0: package org.apache.activemq.tool.sampler;
1:e47e0e0: 
1:e47e0e0: import org.apache.activemq.tool.ClientRunBasis;
1:e47e0e0: import org.junit.Before;
1:e47e0e0: import org.junit.Test;
1:e47e0e0: 
1:e47e0e0: import java.util.concurrent.CountDownLatch;
1:e47e0e0: 
1:e47e0e0: import static org.junit.Assert.*;
1:e47e0e0: 
1:e47e0e0: public class AbstractPerformanceSamplerTest {
1:e47e0e0: 
1:e47e0e0:     private class EmptySampler extends AbstractPerformanceSampler {
1:e47e0e0:         @Override
1:e47e0e0:         public void sampleData() {}
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     private AbstractPerformanceSampler sampler;
1:e47e0e0:     private CountDownLatch samplerLatch;
1:e47e0e0: 
1:e47e0e0:     @Before
1:e47e0e0:     public void setUpSampler() {
1:e47e0e0:         sampler = new EmptySampler();
1:e47e0e0:         samplerLatch = new CountDownLatch(1);
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Test(expected = IllegalArgumentException.class)
1:e47e0e0:     public void testSetRampUpPercent_exceeds100() {
1:e47e0e0:         sampler.setRampUpPercent(101);
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Test(expected = IllegalArgumentException.class)
1:e47e0e0:     public void testSetRampUpPercent_lessThan0() {
1:e47e0e0:         sampler.setRampUpPercent(-1);
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Test(expected = IllegalArgumentException.class)
1:e47e0e0:     public void testSetRampDownPercent_exceeds99() {
1:e47e0e0:         sampler.setRampDownPercent(100);
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Test(expected = IllegalArgumentException.class)
1:e47e0e0:     public void testSetRampDownPercent_lessThan0() {
1:e47e0e0:         sampler.setRampDownPercent(-1);
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Test
1:e47e0e0:     public void testSamplerOnCountBasis() throws InterruptedException {
1:e47e0e0:         final CountDownLatch latch = samplerLatch;
1:e47e0e0:         sampler.startSampler(latch, ClientRunBasis.count, 0);
1:e47e0e0:         sampler.finishSampling();
1:e47e0e0:         samplerLatch.await();
1:e47e0e0:         assertNull(sampler.getDuration());
1:e47e0e0:         assertEquals(0, (long) sampler.getRampUpTime());
1:e47e0e0:         assertEquals(0, (long) sampler.getRampDownTime());
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Test
1:e47e0e0:     public void testSamplerOnTimeBasis_matchesClientSettings() throws InterruptedException {
1:e47e0e0:         final CountDownLatch latch = samplerLatch;
1:e47e0e0:         sampler.startSampler(latch, ClientRunBasis.time, 1000);
1:e47e0e0:         samplerLatch.await();
1:e47e0e0:         assertEquals(1000, (long) sampler.getDuration());
1:e47e0e0:         assertEquals(0, (long) sampler.getRampUpTime());
1:e47e0e0:         assertEquals(0, (long) sampler.getRampDownTime());
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Test
1:e47e0e0:     public void testSamplerOnTimeBasis_percentageOverrides() throws InterruptedException {
1:e47e0e0:         final CountDownLatch latch = samplerLatch;
1:e47e0e0:         sampler.setRampUpPercent(10);
1:e47e0e0:         sampler.setRampDownPercent(20);
1:e47e0e0:         sampler.startSampler(latch, ClientRunBasis.time, 1000);
1:e47e0e0:         samplerLatch.await();
1:e47e0e0:         assertEquals(1000, (long) sampler.getDuration());
1:e47e0e0:         assertEquals(100, (long) sampler.getRampUpTime());
1:e47e0e0:         assertEquals(200, (long) sampler.getRampDownTime());
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Test(expected = IllegalArgumentException.class)
1:e47e0e0:     public void testSamplerOnTimeBasis_percentageOverridesExceedSamplerDuration() throws InterruptedException {
1:e47e0e0:         final CountDownLatch latch = samplerLatch;
1:e47e0e0:         sampler.setRampUpPercent(60);
1:e47e0e0:         sampler.setRampDownPercent(41);
1:e47e0e0:         sampler.startSampler(latch, ClientRunBasis.time, 1000);
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Test
1:e47e0e0:     public void testSamplerOnTimeBasis_timeOverrides() throws InterruptedException {
1:e47e0e0:         final CountDownLatch latch = samplerLatch;
1:e47e0e0:         sampler.setRampUpTime(10);
1:e47e0e0:         sampler.setRampDownTime(20);
1:e47e0e0:         sampler.startSampler(latch, ClientRunBasis.time, 1000);
1:e47e0e0:         samplerLatch.await();
1:e47e0e0:         assertEquals(1000, (long) sampler.getDuration());
1:e47e0e0:         assertEquals(10, (long) sampler.getRampUpTime());
1:e47e0e0:         assertEquals(20, (long) sampler.getRampDownTime());
1:e47e0e0:     }
1:e47e0e0: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e47e0e0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.tool.sampler;
1: 
1: import org.apache.activemq.tool.ClientRunBasis;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.util.concurrent.CountDownLatch;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class AbstractPerformanceSamplerTest {
1: 
1:     private class EmptySampler extends AbstractPerformanceSampler {
1:         @Override
1:         public void sampleData() {}
1:     }
1: 
1:     private AbstractPerformanceSampler sampler;
1:     private CountDownLatch samplerLatch;
1: 
1:     @Before
1:     public void setUpSampler() {
1:         sampler = new EmptySampler();
1:         samplerLatch = new CountDownLatch(1);
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testSetRampUpPercent_exceeds100() {
1:         sampler.setRampUpPercent(101);
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testSetRampUpPercent_lessThan0() {
1:         sampler.setRampUpPercent(-1);
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testSetRampDownPercent_exceeds99() {
1:         sampler.setRampDownPercent(100);
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testSetRampDownPercent_lessThan0() {
1:         sampler.setRampDownPercent(-1);
1:     }
1: 
1:     @Test
1:     public void testSamplerOnCountBasis() throws InterruptedException {
1:         final CountDownLatch latch = samplerLatch;
1:         sampler.startSampler(latch, ClientRunBasis.count, 0);
1:         sampler.finishSampling();
1:         samplerLatch.await();
1:         assertNull(sampler.getDuration());
1:         assertEquals(0, (long) sampler.getRampUpTime());
1:         assertEquals(0, (long) sampler.getRampDownTime());
1:     }
1: 
1:     @Test
1:     public void testSamplerOnTimeBasis_matchesClientSettings() throws InterruptedException {
1:         final CountDownLatch latch = samplerLatch;
1:         sampler.startSampler(latch, ClientRunBasis.time, 1000);
1:         samplerLatch.await();
1:         assertEquals(1000, (long) sampler.getDuration());
1:         assertEquals(0, (long) sampler.getRampUpTime());
1:         assertEquals(0, (long) sampler.getRampDownTime());
1:     }
1: 
1:     @Test
1:     public void testSamplerOnTimeBasis_percentageOverrides() throws InterruptedException {
1:         final CountDownLatch latch = samplerLatch;
1:         sampler.setRampUpPercent(10);
1:         sampler.setRampDownPercent(20);
1:         sampler.startSampler(latch, ClientRunBasis.time, 1000);
1:         samplerLatch.await();
1:         assertEquals(1000, (long) sampler.getDuration());
1:         assertEquals(100, (long) sampler.getRampUpTime());
1:         assertEquals(200, (long) sampler.getRampDownTime());
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testSamplerOnTimeBasis_percentageOverridesExceedSamplerDuration() throws InterruptedException {
1:         final CountDownLatch latch = samplerLatch;
1:         sampler.setRampUpPercent(60);
1:         sampler.setRampDownPercent(41);
1:         sampler.startSampler(latch, ClientRunBasis.time, 1000);
1:     }
1: 
1:     @Test
1:     public void testSamplerOnTimeBasis_timeOverrides() throws InterruptedException {
1:         final CountDownLatch latch = samplerLatch;
1:         sampler.setRampUpTime(10);
1:         sampler.setRampDownTime(20);
1:         sampler.startSampler(latch, ClientRunBasis.time, 1000);
1:         samplerLatch.await();
1:         assertEquals(1000, (long) sampler.getDuration());
1:         assertEquals(10, (long) sampler.getRampUpTime());
1:         assertEquals(20, (long) sampler.getRampDownTime());
1:     }
1: }
============================================================================