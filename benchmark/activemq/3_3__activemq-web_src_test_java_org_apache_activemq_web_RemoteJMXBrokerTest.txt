1:43e2083: /**
1:43e2083:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43e2083:  * contributor license agreements.  See the NOTICE file distributed with
1:43e2083:  * this work for additional information regarding copyright ownership.
1:43e2083:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43e2083:  * (the "License"); you may not use this file except in compliance with
1:43e2083:  * the License.  You may obtain a copy of the License at
1:43e2083:  *
1:43e2083:  * http://www.apache.org/licenses/LICENSE-2.0
1:43e2083:  *
1:43e2083:  * Unless required by applicable law or agreed to in writing, software
1:43e2083:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43e2083:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43e2083:  * See the License for the specific language governing permissions and
1:43e2083:  * limitations under the License.
1:43e2083:  */
1:43e2083: package org.apache.activemq.web;
1:43e2083: 
1:ac3d088: import static org.junit.Assert.assertEquals;
1:ac3d088: import static org.junit.Assert.assertNull;
1:ac3d088: 
1:ac3d088: import java.lang.reflect.Field;
1:ac3d088: import java.util.Collection;
1:ac3d088: import java.util.Set;
1:ac3d088: import java.util.concurrent.CountDownLatch;
1:ac3d088: import java.util.concurrent.ExecutorService;
1:ac3d088: import java.util.concurrent.Executors;
1:43e2083: 
1:43e2083: import javax.management.ObjectName;
1:43e2083: import javax.management.remote.JMXConnectorServer;
1:43e2083: 
1:ac3d088: import org.apache.activemq.broker.BrokerFactory;
1:ac3d088: import org.apache.activemq.broker.BrokerService;
1:ac3d088: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:ac3d088: import org.apache.activemq.broker.jmx.ManagementContext;
1:ac3d088: import org.apache.activemq.command.ActiveMQQueue;
1:8f960ea: import org.apache.activemq.util.TestUtils;
1:ac3d088: import org.apache.activemq.web.config.SystemPropertiesConfiguration;
1:ac3d088: import org.junit.After;
1:ac3d088: import org.junit.Before;
1:ac3d088: import org.junit.Test;
1:43e2083: 
1:43e2083: /**
1:43e2083:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:43e2083:  *
1:43e2083:  * You can use this class to connect up to a running web console and run some queries.
1:43e2083:  * Used to work through https://issues.apache.org/jira/browse/AMQ-4272 but would be useful
1:43e2083:  * in any scenario where you need access to the underlying broker in the web-console to hack
1:43e2083:  * at it
1:43e2083:  *
1:43e2083:  */
1:43e2083: public class RemoteJMXBrokerTest {
1:43e2083: 
1:43e2083: 
1:43e2083:     private BrokerService brokerService;
1:43e2083: 
1:43e2083:     @Before
1:43e2083:     public void startUp() throws Exception {
1:43e2083:         brokerService = BrokerFactory.createBroker("broker:()/remoteBroker?useJmx=true");
1:8f960ea:         brokerService.getManagementContext().setConnectorPort(TestUtils.findOpenPort());
1:dd6dcc1:         brokerService.getManagementContext().setCreateConnector(true);
1:43e2083:         brokerService.start();
1:43e2083:         brokerService.waitUntilStarted();
1:43e2083: 
1:ac3d088:         String jmxUri = getJmxUri();
1:ac3d088:         System.setProperty("webconsole.jmx.url", jmxUri);
1:ac3d088: 
1:ac3d088:     }
1:ac3d088: 
1:ac3d088:     @After
1:ac3d088:     public void after() throws Exception {
1:ac3d088:         brokerService.stop();
1:ac3d088:         brokerService.waitUntilStopped();
1:43e2083:     }
1:43e2083: 
1:ac3d088:     /**
1:43e2083:      * Test that we can query the remote broker...
1:43e2083:      * Specifically this tests that the domain and objectnames are correct (type and brokerName
1:43e2083:      * instead of Type and BrokerName, which they were)
1:43e2083:      * @throws Exception
1:43e2083:      */
1:43e2083:     @Test
1:43e2083:     public void testConnectRemoteBrokerFacade() throws Exception {
1:43e2083:         RemoteJMXBrokerFacade brokerFacade = new RemoteJMXBrokerFacade();
1:43e2083: 
1:43e2083:         SystemPropertiesConfiguration configuration = new SystemPropertiesConfiguration();
1:43e2083:         brokerFacade.setConfiguration(configuration);
1:43e2083: 
1:43e2083:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=remoteBroker");
1:43e2083:         Set<ObjectName> queryResult = brokerFacade.queryNames(query, null);
1:43e2083: 
1:43e2083:         System.out.println("Number: "  + queryResult.size());
1:43e2083:         assertEquals(1, queryResult.size());
1:43e2083: 
1:43e2083:     }
1:43e2083: 
1:43e2083:     /**
1:ac3d088:      * Before AMQ-5896 there was the possibility of an InstanceNotFoundException when
1:ac3d088:      * brokerFacade.getQueue if a destination was deleted after the initial list was looked
1:ac3d088:      * up but before iterating over the list to find the right destination by name.
1:ac3d088:      *
1:ac3d088:      */
1:ac3d088:     @Test(timeout=10000)
1:ac3d088:     public void testGetDestinationRaceCondition() throws Exception {
1:ac3d088:         final CountDownLatch getQueuesLatch = new CountDownLatch(1);
1:ac3d088:         final CountDownLatch destDeletionLatch = new CountDownLatch(1);
1:ac3d088:         // Adding a pause so we can test the case where the destination is
1:ac3d088:         // deleted in between calling getQueues() and iterating over the list
1:ac3d088:         //and calling getName() on the DestinationViewMBean
1:ac3d088:         // See AMQ-5896
1:ac3d088:         RemoteJMXBrokerFacade brokerFacade = new RemoteJMXBrokerFacade() {
1:ac3d088:             @Override
1:ac3d088:             protected DestinationViewMBean getDestinationByName(
1:ac3d088:                     Collection<? extends DestinationViewMBean> collection,
1:ac3d088:                     String name) {
1:ac3d088:                 try {
1:ac3d088:                     //we are done getting the queue collection so let thread know
1:ac3d088:                     //to remove destination
1:ac3d088:                     getQueuesLatch.countDown();
1:ac3d088:                     //wait until other thread is done removing destination
1:ac3d088:                     destDeletionLatch.await();
1:ac3d088:                 } catch (InterruptedException e) {
1:ac3d088:                 }
1:ac3d088:                 return super.getDestinationByName(collection, name);
1:ac3d088:             }
1:ac3d088: 
1:ac3d088:         };
1:ac3d088: 
1:ac3d088:         SystemPropertiesConfiguration configuration = new SystemPropertiesConfiguration();
1:ac3d088:         brokerFacade.setConfiguration(configuration);
1:ac3d088:         //Create the destination
1:ac3d088:         final ActiveMQQueue queue = new ActiveMQQueue("queue.test");
1:ac3d088:         brokerService.getDestination(queue);
1:ac3d088: 
1:ac3d088:         //after 1 second delete
1:ac3d088:         ExecutorService service = Executors.newCachedThreadPool();
1:ac3d088:         service.submit(new Runnable() {
1:ac3d088:             @Override
1:ac3d088:             public void run() {
1:ac3d088:                 try {
1:ac3d088:                     //wait for confirmation that the queue list was obtained
1:ac3d088:                     getQueuesLatch.await();
1:ac3d088:                     brokerService.removeDestination(queue);
1:ac3d088:                     //let original thread know destination was deleted
1:ac3d088:                     destDeletionLatch.countDown();
1:ac3d088:                 } catch (Exception e) {
1:ac3d088:                 }
1:ac3d088:             }
1:ac3d088:         });
1:ac3d088: 
1:ac3d088:         //Assert that the destination is now null because it was deleted in another thread
1:ac3d088:         //during iteration
1:ac3d088:         assertNull(brokerFacade.getQueue(queue.getPhysicalName()));
1:ac3d088:         service.shutdown();
1:ac3d088:     }
1:43e2083: 
1:43e2083:     public String  getJmxUri() throws NoSuchFieldException, IllegalAccessException {
1:43e2083:         Field field = ManagementContext.class.getDeclaredField("connectorServer");
1:43e2083:         field.setAccessible(true);
1:43e2083:         JMXConnectorServer server = (JMXConnectorServer) field.get(brokerService.getManagementContext());
1:43e2083:         return server.getAddress().toString();
1:43e2083:     }
1:43e2083: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:dd6dcc1
/////////////////////////////////////////////////////////////////////////
1:         brokerService.getManagementContext().setCreateConnector(true);
commit:8f960ea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.TestUtils;
/////////////////////////////////////////////////////////////////////////
1:         brokerService.getManagementContext().setConnectorPort(TestUtils.findOpenPort());
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:ac3d088
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.lang.reflect.Field;
1: import java.util.Collection;
1: import java.util.Set;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.web.config.SystemPropertiesConfiguration;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1:         String jmxUri = getJmxUri();
1:         System.setProperty("webconsole.jmx.url", jmxUri);
1: 
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Before AMQ-5896 there was the possibility of an InstanceNotFoundException when
1:      * brokerFacade.getQueue if a destination was deleted after the initial list was looked
1:      * up but before iterating over the list to find the right destination by name.
1:      *
1:      */
1:     @Test(timeout=10000)
1:     public void testGetDestinationRaceCondition() throws Exception {
1:         final CountDownLatch getQueuesLatch = new CountDownLatch(1);
1:         final CountDownLatch destDeletionLatch = new CountDownLatch(1);
1:         // Adding a pause so we can test the case where the destination is
1:         // deleted in between calling getQueues() and iterating over the list
1:         //and calling getName() on the DestinationViewMBean
1:         // See AMQ-5896
1:         RemoteJMXBrokerFacade brokerFacade = new RemoteJMXBrokerFacade() {
1:             @Override
1:             protected DestinationViewMBean getDestinationByName(
1:                     Collection<? extends DestinationViewMBean> collection,
1:                     String name) {
1:                 try {
1:                     //we are done getting the queue collection so let thread know
1:                     //to remove destination
1:                     getQueuesLatch.countDown();
1:                     //wait until other thread is done removing destination
1:                     destDeletionLatch.await();
1:                 } catch (InterruptedException e) {
1:                 }
1:                 return super.getDestinationByName(collection, name);
1:             }
1: 
1:         };
1: 
1:         SystemPropertiesConfiguration configuration = new SystemPropertiesConfiguration();
1:         brokerFacade.setConfiguration(configuration);
1:         //Create the destination
1:         final ActiveMQQueue queue = new ActiveMQQueue("queue.test");
1:         brokerService.getDestination(queue);
1: 
1:         //after 1 second delete
1:         ExecutorService service = Executors.newCachedThreadPool();
1:         service.submit(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     //wait for confirmation that the queue list was obtained
1:                     getQueuesLatch.await();
1:                     brokerService.removeDestination(queue);
1:                     //let original thread know destination was deleted
1:                     destDeletionLatch.countDown();
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         });
1: 
1:         //Assert that the destination is now null because it was deleted in another thread
1:         //during iteration
1:         assertNull(brokerFacade.getQueue(queue.getPhysicalName()));
1:         service.shutdown();
1:     }
author:Christian Posta
-------------------------------------------------------------------------------
commit:43e2083
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.jmx.ManagementContext;
0: import org.apache.activemq.web.config.SystemPropertiesConfiguration;
0: import org.junit.Before;
0: import org.junit.Test;
1: 
1: import javax.management.ObjectName;
1: import javax.management.remote.JMXConnectorServer;
0: import java.lang.reflect.Field;
0: import java.util.Set;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  *
1:  * You can use this class to connect up to a running web console and run some queries.
1:  * Used to work through https://issues.apache.org/jira/browse/AMQ-4272 but would be useful
1:  * in any scenario where you need access to the underlying broker in the web-console to hack
1:  * at it
1:  *
1:  */
1: public class RemoteJMXBrokerTest {
1: 
1: 
1:     private BrokerService brokerService;
1: 
1:     @Before
1:     public void startUp() throws Exception {
1:         brokerService = BrokerFactory.createBroker("broker:()/remoteBroker?useJmx=true");
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:     }
1: 
1:     /**
1:      * Test that we can query the remote broker...
1:      * Specifically this tests that the domain and objectnames are correct (type and brokerName
1:      * instead of Type and BrokerName, which they were)
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testConnectRemoteBrokerFacade() throws Exception {
0:         String jmxUri = getJmxUri();
0:         System.setProperty("webconsole.jmx.url", jmxUri);
1:         RemoteJMXBrokerFacade brokerFacade = new RemoteJMXBrokerFacade();
1: 
1:         SystemPropertiesConfiguration configuration = new SystemPropertiesConfiguration();
1:         brokerFacade.setConfiguration(configuration);
1: 
1:         ObjectName query = new ObjectName("org.apache.activemq:type=Broker,brokerName=remoteBroker");
1:         Set<ObjectName> queryResult = brokerFacade.queryNames(query, null);
1: 
1:         System.out.println("Number: "  + queryResult.size());
1:         assertEquals(1, queryResult.size());
1: 
1:     }
1: 
1: 
1:     public String  getJmxUri() throws NoSuchFieldException, IllegalAccessException {
1:         Field field = ManagementContext.class.getDeclaredField("connectorServer");
1:         field.setAccessible(true);
1:         JMXConnectorServer server = (JMXConnectorServer) field.get(brokerService.getManagementContext());
1:         return server.getAddress().toString();
1:     }
1: }
============================================================================