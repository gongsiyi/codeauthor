1:d7aaca5: /**
1:d7aaca5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d7aaca5:  * contributor license agreements.  See the NOTICE file distributed with
1:d7aaca5:  * this work for additional information regarding copyright ownership.
1:d7aaca5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d7aaca5:  * (the "License"); you may not use this file except in compliance with
1:d7aaca5:  * the License.  You may obtain a copy of the License at
1:d7aaca5:  *
1:d7aaca5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d7aaca5:  *
1:d7aaca5:  * Unless required by applicable law or agreed to in writing, software
1:d7aaca5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d7aaca5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7aaca5:  * See the License for the specific language governing permissions and
1:d7aaca5:  * limitations under the License.
1:d7aaca5:  */
1:d7aaca5: package org.apache.activemq.bugs;
1:d7aaca5: 
1:d7aaca5: import static org.junit.Assert.assertTrue;
1:d7aaca5: 
1:d7aaca5: import java.util.Random;
1:d7aaca5: import java.util.concurrent.ExecutorService;
1:d7aaca5: import java.util.concurrent.Executors;
1:d7aaca5: import java.util.concurrent.TimeUnit;
1:d7aaca5: 
1:d7aaca5: import javax.jms.DeliveryMode;
1:d7aaca5: import javax.jms.Destination;
1:d7aaca5: import javax.jms.MessageProducer;
1:d7aaca5: import javax.jms.Session;
1:d7aaca5: 
1:d7aaca5: import org.apache.activemq.ActiveMQConnection;
1:d7aaca5: import org.apache.activemq.ActiveMQConnectionFactory;
1:d7aaca5: import org.apache.activemq.broker.BrokerService;
1:d7aaca5: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:d7aaca5: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1:d7aaca5: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:d7aaca5: import org.apache.activemq.broker.region.policy.PolicyMap;
1:d7aaca5: import org.junit.After;
1:d7aaca5: import org.junit.Before;
1:d7aaca5: import org.junit.Test;
1:d7aaca5: 
1:d7aaca5: public class AMQ4513Test {
1:d7aaca5: 
1:d7aaca5:     private BrokerService brokerService;
1:d7aaca5:     private String connectionUri;
1:d7aaca5: 
1:d7aaca5:     @Before
1:d7aaca5:     public void setup() throws Exception {
1:d7aaca5:         brokerService = new BrokerService();
1:d7aaca5: 
1:d7aaca5:         connectionUri = brokerService.addConnector("tcp://localhost:0").getPublishableConnectString();
1:d7aaca5: 
1:d7aaca5:         // Configure Dead Letter Strategy
1:d7aaca5:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:d7aaca5:         ((IndividualDeadLetterStrategy)strategy).setUseQueueForQueueMessages(true);
1:d7aaca5:         ((IndividualDeadLetterStrategy)strategy).setQueuePrefix("DLQ.");
1:d7aaca5:         strategy.setProcessNonPersistent(false);
1:d7aaca5:         strategy.setProcessExpired(false);
1:d7aaca5: 
1:d7aaca5:         // Add policy and individual DLQ strategy
1:d7aaca5:         PolicyEntry policy = new PolicyEntry();
1:d7aaca5:         policy.setTimeBeforeDispatchStarts(3000);
1:d7aaca5:         policy.setDeadLetterStrategy(strategy);
1:d7aaca5: 
1:d7aaca5:         PolicyMap pMap = new PolicyMap();
1:d7aaca5:         pMap.setDefaultEntry(policy);
1:d7aaca5: 
1:d7aaca5:         brokerService.setDestinationPolicy(pMap);
1:d7aaca5: 
1:d7aaca5:         brokerService.setPersistent(false);
1:d7aaca5:         brokerService.start();
1:d7aaca5:     }
1:d7aaca5: 
1:d7aaca5:     @After
1:d7aaca5:     public void stop() throws Exception {
1:d7aaca5:         brokerService.stop();
1:d7aaca5:     }
1:d7aaca5: 
1:d7aaca5:     @Test(timeout=360000)
1:d7aaca5:     public void test() throws Exception {
1:d7aaca5: 
1:d7aaca5:         final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionUri);
1:d7aaca5: 
1:d7aaca5:         ExecutorService service = Executors.newFixedThreadPool(25);
1:d7aaca5: 
1:d7aaca5:         final Random ripple = new Random(System.currentTimeMillis());
1:d7aaca5: 
1:d7aaca5:         for (int i = 0; i < 1000; ++i) {
1:d7aaca5:             service.execute(new Runnable() {
1:d7aaca5:                 @Override
1:d7aaca5:                 public void run() {
1:d7aaca5:                     try {
1:d7aaca5:                         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:d7aaca5:                         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d7aaca5:                         Destination destination = session.createTemporaryQueue();
1:d7aaca5:                         session.createProducer(destination);
1:d7aaca5:                         connection.close();
1:d7aaca5:                         TimeUnit.MILLISECONDS.sleep(ripple.nextInt(20));
1:d7aaca5:                     } catch (Exception e) {
1:d7aaca5:                     }
1:d7aaca5:                 }
1:d7aaca5:             });
1:d7aaca5: 
1:d7aaca5:             service.execute(new Runnable() {
1:d7aaca5:                 @Override
1:d7aaca5:                 public void run() {
1:d7aaca5:                     try {
1:d7aaca5:                         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:d7aaca5:                         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d7aaca5:                         Destination destination = session.createTemporaryQueue();
1:d7aaca5:                         MessageProducer producer = session.createProducer(destination);
1:d7aaca5:                         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:d7aaca5:                         producer.setTimeToLive(400);
1:d7aaca5:                         producer.send(session.createTextMessage());
1:d7aaca5:                         producer.send(session.createTextMessage());
1:d7aaca5:                         TimeUnit.MILLISECONDS.sleep(500);
1:d7aaca5:                         connection.close();
1:d7aaca5:                     } catch (Exception e) {
1:d7aaca5:                     }
1:d7aaca5:                 }
1:d7aaca5:             });
1:d7aaca5: 
1:d7aaca5:             service.execute(new Runnable() {
1:d7aaca5:                 @Override
1:d7aaca5:                 public void run() {
1:d7aaca5:                     try {
1:d7aaca5:                         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:d7aaca5:                         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d7aaca5:                         Destination destination = session.createTemporaryQueue();
1:d7aaca5:                         session.createProducer(destination);
1:d7aaca5:                         connection.close();
1:d7aaca5:                         TimeUnit.MILLISECONDS.sleep(ripple.nextInt(20));
1:d7aaca5:                     } catch (Exception e) {
1:d7aaca5:                     }
1:d7aaca5:                 }
1:d7aaca5:             });
1:d7aaca5:         }
1:d7aaca5: 
1:d7aaca5:         service.shutdown();
1:d7aaca5:         assertTrue(service.awaitTermination(5, TimeUnit.MINUTES));
1:d7aaca5:     }
1:d7aaca5: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d7aaca5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Random;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ4513Test {
1: 
1:     private BrokerService brokerService;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         brokerService = new BrokerService();
1: 
1:         connectionUri = brokerService.addConnector("tcp://localhost:0").getPublishableConnectString();
1: 
1:         // Configure Dead Letter Strategy
1:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:         ((IndividualDeadLetterStrategy)strategy).setUseQueueForQueueMessages(true);
1:         ((IndividualDeadLetterStrategy)strategy).setQueuePrefix("DLQ.");
1:         strategy.setProcessNonPersistent(false);
1:         strategy.setProcessExpired(false);
1: 
1:         // Add policy and individual DLQ strategy
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setTimeBeforeDispatchStarts(3000);
1:         policy.setDeadLetterStrategy(strategy);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         brokerService.setDestinationPolicy(pMap);
1: 
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stop() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1:     @Test(timeout=360000)
1:     public void test() throws Exception {
1: 
1:         final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionUri);
1: 
1:         ExecutorService service = Executors.newFixedThreadPool(25);
1: 
1:         final Random ripple = new Random(System.currentTimeMillis());
1: 
1:         for (int i = 0; i < 1000; ++i) {
1:             service.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:                         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         Destination destination = session.createTemporaryQueue();
1:                         session.createProducer(destination);
1:                         connection.close();
1:                         TimeUnit.MILLISECONDS.sleep(ripple.nextInt(20));
1:                     } catch (Exception e) {
1:                     }
1:                 }
1:             });
1: 
1:             service.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:                         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         Destination destination = session.createTemporaryQueue();
1:                         MessageProducer producer = session.createProducer(destination);
1:                         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:                         producer.setTimeToLive(400);
1:                         producer.send(session.createTextMessage());
1:                         producer.send(session.createTextMessage());
1:                         TimeUnit.MILLISECONDS.sleep(500);
1:                         connection.close();
1:                     } catch (Exception e) {
1:                     }
1:                 }
1:             });
1: 
1:             service.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:                         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         Destination destination = session.createTemporaryQueue();
1:                         session.createProducer(destination);
1:                         connection.close();
1:                         TimeUnit.MILLISECONDS.sleep(ripple.nextInt(20));
1:                     } catch (Exception e) {
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         service.shutdown();
1:         assertTrue(service.awaitTermination(5, TimeUnit.MINUTES));
1:     }
1: }
============================================================================