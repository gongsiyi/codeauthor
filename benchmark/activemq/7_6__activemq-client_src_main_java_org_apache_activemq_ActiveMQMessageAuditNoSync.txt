1:a6a6a70: /**
1:a6a6a70:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a6a6a70:  * contributor license agreements.  See the NOTICE file distributed with
1:a6a6a70:  * this work for additional information regarding copyright ownership.
1:a6a6a70:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a6a6a70:  * (the "License"); you may not use this file except in compliance with
1:a6a6a70:  * the License.  You may obtain a copy of the License at
1:54d56df:  *
1:a6a6a70:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:a6a6a70:  * Unless required by applicable law or agreed to in writing, software
1:a6a6a70:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a6a6a70:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a6a6a70:  * See the License for the specific language governing permissions and
1:a6a6a70:  * limitations under the License.
1:a6a6a70:  */
1:a6a6a70: package org.apache.activemq;
10:a6a6a70: 
1:a6a6a70: import java.io.Serializable;
1:a6a6a70: 
1:a6a6a70: import javax.jms.JMSException;
1:a6a6a70: import javax.jms.Message;
1:a6a6a70: 
1:a6a6a70: import org.apache.activemq.broker.region.MessageReference;
1:a6a6a70: import org.apache.activemq.command.MessageId;
1:a6a6a70: import org.apache.activemq.command.ProducerId;
1:a6a6a70: import org.apache.activemq.util.BitArrayBin;
1:a6a6a70: import org.apache.activemq.util.IdGenerator;
1:a6a6a70: import org.apache.activemq.util.LRUCache;
1:a6a6a70: 
1:a6a6a70: /**
1:a6a6a70:  * Provides basic audit functions for Messages without sync
1:a6a6a70:  */
1:a6a6a70: public class ActiveMQMessageAuditNoSync implements Serializable {
1:a6a6a70: 
1:a6a6a70:     private static final long serialVersionUID = 1L;
1:a6a6a70: 
1:a6a6a70:     public static final int DEFAULT_WINDOW_SIZE = 2048;
1:a6a6a70:     public static final int MAXIMUM_PRODUCER_COUNT = 64;
1:a6a6a70:     private int auditDepth;
1:a6a6a70:     private int maximumNumberOfProducersToTrack;
1:40aa15c:     private final LRUCache<String, BitArrayBin> map;
1:54d56df:     private transient boolean modified = true;
1:a6a6a70: 
1:a6a6a70:     /**
1:54d56df:      * Default Constructor windowSize = 2048, maximumNumberOfProducersToTrack = 64
1:a6a6a70:      */
1:a6a6a70:     public ActiveMQMessageAuditNoSync() {
1:a6a6a70:         this(DEFAULT_WINDOW_SIZE, MAXIMUM_PRODUCER_COUNT);
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     /**
1:a6a6a70:      * Construct a MessageAudit
1:54d56df:      *
1:a6a6a70:      * @param auditDepth range of ids to track
1:54d56df:      * @param maximumNumberOfProducersToTrack number of producers expected in the system
1:a6a6a70:      */
1:a6a6a70:     public ActiveMQMessageAuditNoSync(int auditDepth, final int maximumNumberOfProducersToTrack) {
1:a6a6a70:         this.auditDepth = auditDepth;
1:a6a6a70:         this.maximumNumberOfProducersToTrack=maximumNumberOfProducersToTrack;
1:40aa15c:         this.map = new LRUCache<String, BitArrayBin>(0, maximumNumberOfProducersToTrack, 0.75f, true);
1:a6a6a70:     }
1:54d56df: 
1:a6a6a70:     /**
1:a6a6a70:      * @return the auditDepth
1:a6a6a70:      */
1:a6a6a70:     public int getAuditDepth() {
1:a6a6a70:         return auditDepth;
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     /**
1:a6a6a70:      * @param auditDepth the auditDepth to set
1:a6a6a70:      */
1:a6a6a70:     public void setAuditDepth(int auditDepth) {
1:a6a6a70:         this.auditDepth = auditDepth;
1:54d56df:         this.modified = true;
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     /**
1:a6a6a70:      * @return the maximumNumberOfProducersToTrack
1:a6a6a70:      */
1:a6a6a70:     public int getMaximumNumberOfProducersToTrack() {
1:a6a6a70:         return maximumNumberOfProducersToTrack;
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     /**
1:a6a6a70:      * @param maximumNumberOfProducersToTrack the maximumNumberOfProducersToTrack to set
1:a6a6a70:      */
1:54d56df:     public void setMaximumNumberOfProducersToTrack(int maximumNumberOfProducersToTrack) {
1:14e7689: 
1:14e7689:         if (maximumNumberOfProducersToTrack < this.maximumNumberOfProducersToTrack){
1:40aa15c:             LRUCache<String, BitArrayBin> newMap = new LRUCache<String, BitArrayBin>(0,maximumNumberOfProducersToTrack,0.75f,true);
1:14e7689:             /**
1:14e7689:              * As putAll will access the entries in the right order,
1:14e7689:              * this shouldn't result in wrong cache entries being removed
1:14e7689:              */
1:14e7689:             newMap.putAll(this.map);
1:14e7689:             this.map.clear();
1:14e7689:             this.map.putAll(newMap);
1:14e7689:         }
1:a6a6a70:         this.map.setMaxCacheSize(maximumNumberOfProducersToTrack);
1:14e7689:         this.maximumNumberOfProducersToTrack = maximumNumberOfProducersToTrack;
1:54d56df:         this.modified = true;
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     /**
1:a6a6a70:      * Checks if this message has been seen before
1:54d56df:      *
2:a6a6a70:      * @param message
1:a6a6a70:      * @return true if the message is a duplicate
1:a6a6a70:      * @throws JMSException
1:a6a6a70:      */
1:a6a6a70:     public boolean isDuplicate(Message message) throws JMSException {
1:a6a6a70:         return isDuplicate(message.getJMSMessageID());
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     /**
1:a6a6a70:      * checks whether this messageId has been seen before and adds this
1:a6a6a70:      * messageId to the list
1:54d56df:      *
1:a6a6a70:      * @param id
1:a6a6a70:      * @return true if the message is a duplicate
1:a6a6a70:      */
1:a6a6a70:     public boolean isDuplicate(String id) {
1:a6a6a70:         boolean answer = false;
1:a6a6a70:         String seed = IdGenerator.getSeedFromId(id);
1:a6a6a70:         if (seed != null) {
1:a6a6a70:             BitArrayBin bab = map.get(seed);
1:a6a6a70:             if (bab == null) {
1:a6a6a70:                 bab = new BitArrayBin(auditDepth);
1:a6a6a70:                 map.put(seed, bab);
1:54d56df:                 modified = true;
1:a6a6a70:             }
1:a6a6a70:             long index = IdGenerator.getSequenceFromId(id);
1:a6a6a70:             if (index >= 0) {
1:a6a6a70:                 answer = bab.setBit(index, true);
1:54d56df:                 modified = true;
1:a6a6a70:             }
1:a6a6a70:         }
1:a6a6a70:         return answer;
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     /**
1:a6a6a70:      * Checks if this message has been seen before
1:54d56df:      *
1:a6a6a70:      * @param message
1:a6a6a70:      * @return true if the message is a duplicate
1:a6a6a70:      */
1:a6a6a70:     public boolean isDuplicate(final MessageReference message) {
1:a6a6a70:         MessageId id = message.getMessageId();
1:a6a6a70:         return isDuplicate(id);
1:a6a6a70:     }
1:54d56df: 
1:a6a6a70:     /**
1:a6a6a70:      * Checks if this messageId has been seen before
1:54d56df:      *
1:a6a6a70:      * @param id
1:a6a6a70:      * @return true if the message is a duplicate
1:a6a6a70:      */
1:a6a6a70:     public boolean isDuplicate(final MessageId id) {
1:a6a6a70:         boolean answer = false;
1:54d56df: 
1:a6a6a70:         if (id != null) {
1:a6a6a70:             ProducerId pid = id.getProducerId();
1:a6a6a70:             if (pid != null) {
1:40aa15c:                 BitArrayBin bab = map.get(pid.toString());
1:a6a6a70:                 if (bab == null) {
1:a6a6a70:                     bab = new BitArrayBin(auditDepth);
1:45e1462:                     map.put(pid.toString(), bab);
1:54d56df:                     modified = true;
1:a6a6a70:                 }
1:a6a6a70:                 answer = bab.setBit(id.getProducerSequenceId(), true);
1:a6a6a70:             }
1:a6a6a70:         }
1:a6a6a70:         return answer;
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     /**
1:a6a6a70:      * mark this message as being received
1:54d56df:      *
1:a6a6a70:      * @param message
1:a6a6a70:      */
1:a6a6a70:     public void rollback(final MessageReference message) {
1:a6a6a70:         MessageId id = message.getMessageId();
1:a6a6a70:         rollback(id);
1:a6a6a70:     }
1:54d56df: 
1:a6a6a70:     /**
1:a6a6a70:      * mark this message as being received
1:54d56df:      *
1:a6a6a70:      * @param id
1:a6a6a70:      */
1:a6a6a70:     public void rollback(final  MessageId id) {
1:a6a6a70:         if (id != null) {
1:a6a6a70:             ProducerId pid = id.getProducerId();
1:a6a6a70:             if (pid != null) {
1:40aa15c:                 BitArrayBin bab = map.get(pid.toString());
1:a6a6a70:                 if (bab != null) {
1:a6a6a70:                     bab.setBit(id.getProducerSequenceId(), false);
1:54d56df:                     modified = true;
1:a6a6a70:                 }
1:a6a6a70:             }
1:a6a6a70:         }
1:a6a6a70:     }
1:a6a6a70: 
1:14755a1:     public void rollback(final String id) {
1:14755a1:         String seed = IdGenerator.getSeedFromId(id);
1:14755a1:         if (seed != null) {
1:14755a1:             BitArrayBin bab = map.get(seed);
1:14755a1:             if (bab != null) {
1:14755a1:                 long index = IdGenerator.getSequenceFromId(id);
1:14755a1:                 bab.setBit(index, false);
1:54d56df:                 modified = true;
1:14755a1:             }
1:14755a1:         }
1:14755a1:     }
1:54d56df: 
1:a6a6a70:     /**
1:a6a6a70:      * Check the message is in order
1:61b2f6b:      *
1:a6a6a70:      * @param msg
1:61b2f6b:      *
1:61b2f6b:      * @return true if the id is in order
1:61b2f6b:      *
1:a6a6a70:      * @throws JMSException
1:a6a6a70:      */
1:a6a6a70:     public boolean isInOrder(Message msg) throws JMSException {
1:a6a6a70:         return isInOrder(msg.getJMSMessageID());
1:a6a6a70:     }
1:54d56df: 
1:a6a6a70:     /**
1:a6a6a70:      * Check the message id is in order
1:61b2f6b:      *
1:a6a6a70:      * @param id
1:61b2f6b:      *
1:61b2f6b:      * @return true if the id is in order
1:a6a6a70:      */
1:a6a6a70:     public boolean isInOrder(final String id) {
1:a6a6a70:         boolean answer = true;
1:54d56df: 
1:a6a6a70:         if (id != null) {
1:a6a6a70:             String seed = IdGenerator.getSeedFromId(id);
1:a6a6a70:             if (seed != null) {
1:a6a6a70:                 BitArrayBin bab = map.get(seed);
1:a6a6a70:                 if (bab != null) {
1:a6a6a70:                     long index = IdGenerator.getSequenceFromId(id);
1:a6a6a70:                     answer = bab.isInOrder(index);
1:54d56df:                     modified = true;
1:a6a6a70:                 }
1:a6a6a70:             }
1:a6a6a70:         }
1:a6a6a70:         return answer;
1:a6a6a70:     }
1:54d56df: 
1:a6a6a70:     /**
1:a6a6a70:      * Check the MessageId is in order
1:61b2f6b:      *
1:54d56df:      * @param message
1:61b2f6b:      *
1:61b2f6b:      * @return true if the id is in order
1:a6a6a70:      */
1:a6a6a70:     public boolean isInOrder(final MessageReference message) {
1:a6a6a70:         return isInOrder(message.getMessageId());
1:a6a6a70:     }
1:54d56df: 
1:a6a6a70:     /**
1:a6a6a70:      * Check the MessageId is in order
1:61b2f6b:      *
1:a6a6a70:      * @param id
1:61b2f6b:      *
1:61b2f6b:      * @return true if the id is in order
1:a6a6a70:      */
1:a6a6a70:     public boolean isInOrder(final MessageId id) {
1:a6a6a70:         boolean answer = false;
1:a6a6a70: 
1:a6a6a70:         if (id != null) {
1:a6a6a70:             ProducerId pid = id.getProducerId();
1:a6a6a70:             if (pid != null) {
1:40aa15c:                 BitArrayBin bab = map.get(pid.toString());
1:a6a6a70:                 if (bab == null) {
1:a6a6a70:                     bab = new BitArrayBin(auditDepth);
1:45e1462:                     map.put(pid.toString(), bab);
1:54d56df:                     modified = true;
1:a6a6a70:                 }
1:a6a6a70:                 answer = bab.isInOrder(id.getProducerSequenceId());
1:a6a6a70: 
1:a6a6a70:             }
1:a6a6a70:         }
1:a6a6a70:         return answer;
1:a6a6a70:     }
1:a6a6a70: 
1:a6a6a70:     public long getLastSeqId(ProducerId id) {
1:a6a6a70:         long result = -1;
1:5165586:         BitArrayBin bab = map.get(id.toString());
1:a6a6a70:         if (bab != null) {
1:a6a6a70:             result = bab.getLastSetIndex();
1:a6a6a70:         }
1:a6a6a70:         return result;
1:a6a6a70:     }
1:93e2bd3: 
1:93e2bd3:     public void clear() {
1:93e2bd3:         map.clear();
1:93e2bd3:     }
1:54d56df: 
1:54d56df:     /**
1:54d56df:      * Returns if the Audit has been modified since last check, this method does not
1:54d56df:      * reset the modified flag.  If the caller needs to reset the flag in order to avoid
1:54d56df:      * serializing an unchanged Audit then its up the them to reset it themselves.
1:54d56df:      *
1:54d56df:      * @return true if the Audit has been modified.
1:54d56df:      */
1:54d56df:     public boolean isModified() {
1:54d56df:         return this.modified;
1:54d56df:     }
1:54d56df: 
1:54d56df:     public void setModified(boolean modified) {
1:54d56df:         this.modified = modified;
1:54d56df:     }
1:54d56df: 
1:54d56df:     /**
1:54d56df:      * Reads and returns the current modified state of the Audit, once called the state is
1:54d56df:      * reset to false.  This method is useful for code the needs to know if it should write
1:54d56df:      * out the Audit or otherwise execute some logic based on the Audit having changed since
1:54d56df:      * last check.
2:54d56df:      *
1:54d56df:      * @return true if the Audit has been modified since last check.
1:54d56df:      */
1:54d56df:     public boolean modified() {
1:54d56df:         if (this.modified) {
1:54d56df:             this.modified = false;
1:54d56df:             return true;
1:54d56df:         }
1:54d56df: 
1:54d56df:         return false;
1:54d56df:     }
1:a6a6a70: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:61b2f6b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      * @return true if the id is in order
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      * @return true if the id is in order
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      * @return true if the id is in order
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      * @return true if the id is in order
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:40aa15c
/////////////////////////////////////////////////////////////////////////
1:     private final LRUCache<String, BitArrayBin> map;
/////////////////////////////////////////////////////////////////////////
1:         this.map = new LRUCache<String, BitArrayBin>(0, maximumNumberOfProducersToTrack, 0.75f, true);
/////////////////////////////////////////////////////////////////////////
1:             LRUCache<String, BitArrayBin> newMap = new LRUCache<String, BitArrayBin>(0,maximumNumberOfProducersToTrack,0.75f,true);
/////////////////////////////////////////////////////////////////////////
1:                 BitArrayBin bab = map.get(pid.toString());
/////////////////////////////////////////////////////////////////////////
1:                 BitArrayBin bab = map.get(pid.toString());
/////////////////////////////////////////////////////////////////////////
1:                 BitArrayBin bab = map.get(pid.toString());
commit:45e1462
/////////////////////////////////////////////////////////////////////////
1:                     map.put(pid.toString(), bab);
/////////////////////////////////////////////////////////////////////////
1:                     map.put(pid.toString(), bab);
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:14e7689
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (maximumNumberOfProducersToTrack < this.maximumNumberOfProducersToTrack){
0:             LRUCache<Object, BitArrayBin> newMap = new LRUCache<Object, BitArrayBin>(0,maximumNumberOfProducersToTrack,0.75f,true);
1:             /**
1:              * As putAll will access the entries in the right order,
1:              * this shouldn't result in wrong cache entries being removed
1:              */
1:             newMap.putAll(this.map);
1:             this.map.clear();
1:             this.map.putAll(newMap);
1:         }
1:         this.maximumNumberOfProducersToTrack = maximumNumberOfProducersToTrack;
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:54d56df
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:     private final LRUCache<Object, BitArrayBin> map;
1:     private transient boolean modified = true;
1:      * Default Constructor windowSize = 2048, maximumNumberOfProducersToTrack = 64
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param maximumNumberOfProducersToTrack number of producers expected in the system
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.modified = true;
/////////////////////////////////////////////////////////////////////////
1:     public void setMaximumNumberOfProducersToTrack(int maximumNumberOfProducersToTrack) {
1:         this.modified = true;
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:                 modified = true;
1:                 modified = true;
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
1: 
/////////////////////////////////////////////////////////////////////////
1:                     modified = true;
/////////////////////////////////////////////////////////////////////////
1:      *
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1:                     modified = true;
/////////////////////////////////////////////////////////////////////////
1:                 modified = true;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                     modified = true;
1: 
1:      * @param message
1: 
/////////////////////////////////////////////////////////////////////////
1:                     modified = true;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns if the Audit has been modified since last check, this method does not
1:      * reset the modified flag.  If the caller needs to reset the flag in order to avoid
1:      * serializing an unchanged Audit then its up the them to reset it themselves.
1:      *
1:      * @return true if the Audit has been modified.
1:      */
1:     public boolean isModified() {
1:         return this.modified;
1:     }
1: 
1:     public void setModified(boolean modified) {
1:         this.modified = modified;
1:     }
1: 
1:     /**
1:      * Reads and returns the current modified state of the Audit, once called the state is
1:      * reset to false.  This method is useful for code the needs to know if it should write
1:      * out the Audit or otherwise execute some logic based on the Audit having changed since
1:      * last check.
1:      *
1:      * @return true if the Audit has been modified since last check.
1:      */
1:     public boolean modified() {
1:         if (this.modified) {
1:             this.modified = false;
1:             return true;
1:         }
1: 
1:         return false;
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:5165586
/////////////////////////////////////////////////////////////////////////
1:         BitArrayBin bab = map.get(id.toString());
commit:93e2bd3
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void clear() {
1:         map.clear();
1:     }
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.io.Serializable;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: 
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.util.BitArrayBin;
1: import org.apache.activemq.util.IdGenerator;
1: import org.apache.activemq.util.LRUCache;
1: 
1: /**
1:  * Provides basic audit functions for Messages without sync
0:  * 
0:  * @version $Revision$
1:  */
1: public class ActiveMQMessageAuditNoSync implements Serializable {
1: 
1:     private static final long serialVersionUID = 1L;
1: 
1:     public static final int DEFAULT_WINDOW_SIZE = 2048;
1:     public static final int MAXIMUM_PRODUCER_COUNT = 64;
1:     private int auditDepth;
1:     private int maximumNumberOfProducersToTrack;
0:     private LRUCache<Object, BitArrayBin> map;
1: 
1:     /**
0:      * Default Constructor windowSize = 2048, maximumNumberOfProducersToTrack =
0:      * 64
1:      */
1:     public ActiveMQMessageAuditNoSync() {
1:         this(DEFAULT_WINDOW_SIZE, MAXIMUM_PRODUCER_COUNT);
1:     }
1: 
1:     /**
1:      * Construct a MessageAudit
0:      * 
1:      * @param auditDepth range of ids to track
0:      * @param maximumNumberOfProducersToTrack number of producers expected in
0:      *                the system
1:      */
1:     public ActiveMQMessageAuditNoSync(int auditDepth, final int maximumNumberOfProducersToTrack) {
1:         this.auditDepth = auditDepth;
1:         this.maximumNumberOfProducersToTrack=maximumNumberOfProducersToTrack;
0:         this.map = new LRUCache<Object, BitArrayBin>(0, maximumNumberOfProducersToTrack, 0.75f, true);
1:     }
1:     
1:     /**
1:      * @return the auditDepth
1:      */
1:     public int getAuditDepth() {
1:         return auditDepth;
1:     }
1: 
1:     /**
1:      * @param auditDepth the auditDepth to set
1:      */
1:     public void setAuditDepth(int auditDepth) {
1:         this.auditDepth = auditDepth;
1:     }
1: 
1:     /**
1:      * @return the maximumNumberOfProducersToTrack
1:      */
1:     public int getMaximumNumberOfProducersToTrack() {
1:         return maximumNumberOfProducersToTrack;
1:     }
1: 
1:     /**
1:      * @param maximumNumberOfProducersToTrack the maximumNumberOfProducersToTrack to set
1:      */
0:     public void setMaximumNumberOfProducersToTrack(
0:             int maximumNumberOfProducersToTrack) {
0:         this.maximumNumberOfProducersToTrack = maximumNumberOfProducersToTrack;
1:         this.map.setMaxCacheSize(maximumNumberOfProducersToTrack);
1:     }
1: 
1:     /**
1:      * Checks if this message has been seen before
0:      * 
1:      * @param message
1:      * @return true if the message is a duplicate
1:      * @throws JMSException
1:      */
1:     public boolean isDuplicate(Message message) throws JMSException {
1:         return isDuplicate(message.getJMSMessageID());
1:     }
1: 
1:     /**
1:      * checks whether this messageId has been seen before and adds this
1:      * messageId to the list
0:      * 
1:      * @param id
1:      * @return true if the message is a duplicate
1:      */
1:     public boolean isDuplicate(String id) {
1:         boolean answer = false;
1:         String seed = IdGenerator.getSeedFromId(id);
1:         if (seed != null) {
1:             BitArrayBin bab = map.get(seed);
1:             if (bab == null) {
1:                 bab = new BitArrayBin(auditDepth);
1:                 map.put(seed, bab);
1:             }
1:             long index = IdGenerator.getSequenceFromId(id);
1:             if (index >= 0) {
1:                 answer = bab.setBit(index, true);
1:             }
1:         }
1:         return answer;
1:     }
1: 
1:     /**
1:      * Checks if this message has been seen before
0:      * 
1:      * @param message
1:      * @return true if the message is a duplicate
1:      */
1:     public boolean isDuplicate(final MessageReference message) {
1:         MessageId id = message.getMessageId();
1:         return isDuplicate(id);
1:     }
1:     
1:     /**
1:      * Checks if this messageId has been seen before
0:      * 
1:      * @param id
1:      * @return true if the message is a duplicate
1:      */
1:     public boolean isDuplicate(final MessageId id) {
1:         boolean answer = false;
1:         
1:         if (id != null) {
1:             ProducerId pid = id.getProducerId();
1:             if (pid != null) {
0:                 BitArrayBin bab = map.get(pid);
1:                 if (bab == null) {
1:                     bab = new BitArrayBin(auditDepth);
0:                     map.put(pid, bab);
1:                 }
1:                 answer = bab.setBit(id.getProducerSequenceId(), true);
1:             }
1:         }
1:         return answer;
1:     }
1: 
1:     /**
1:      * mark this message as being received
0:      * 
1:      * @param message
1:      */
1:     public void rollback(final MessageReference message) {
1:         MessageId id = message.getMessageId();
1:         rollback(id);
1:     }
1:     
1:     /**
1:      * mark this message as being received
0:      * 
1:      * @param id
1:      */
1:     public void rollback(final  MessageId id) {
1:         if (id != null) {
1:             ProducerId pid = id.getProducerId();
1:             if (pid != null) {
0:                 BitArrayBin bab = map.get(pid);
1:                 if (bab != null) {
1:                     bab.setBit(id.getProducerSequenceId(), false);
1:                 }
1:             }
1:         }
1:     }
1:     
1:     /**
1:      * Check the message is in order
1:      * @param msg
0:      * @return
1:      * @throws JMSException
1:      */
1:     public boolean isInOrder(Message msg) throws JMSException {
1:         return isInOrder(msg.getJMSMessageID());
1:     }
1:     
1:     /**
1:      * Check the message id is in order
1:      * @param id
0:      * @return
1:      */
1:     public boolean isInOrder(final String id) {
1:         boolean answer = true;
1:         
1:         if (id != null) {
1:             String seed = IdGenerator.getSeedFromId(id);
1:             if (seed != null) {
1:                 BitArrayBin bab = map.get(seed);
1:                 if (bab != null) {
1:                     long index = IdGenerator.getSequenceFromId(id);
1:                     answer = bab.isInOrder(index);
1:                 }
1:                
1:             }
1:         }
1:         return answer;
1:     }
1:     
1:     /**
1:      * Check the MessageId is in order
1:      * @param message 
0:      * @return
1:      */
1:     public boolean isInOrder(final MessageReference message) {
1:         return isInOrder(message.getMessageId());
1:     }
1:     
1:     /**
1:      * Check the MessageId is in order
1:      * @param id
0:      * @return
1:      */
1:     public boolean isInOrder(final MessageId id) {
1:         boolean answer = false;
1: 
1:         if (id != null) {
1:             ProducerId pid = id.getProducerId();
1:             if (pid != null) {
0:                 BitArrayBin bab = map.get(pid);
1:                 if (bab == null) {
1:                     bab = new BitArrayBin(auditDepth);
0:                     map.put(pid, bab);
1:                 }
1:                 answer = bab.isInOrder(id.getProducerSequenceId());
1: 
1:             }
1:         }
1:         return answer;
1:     }
1: 
1:     public long getLastSeqId(ProducerId id) {
1:         long result = -1;
0:         BitArrayBin bab = map.get(id.toString() + ":");
1:         if (bab != null) {
1:             result = bab.getLastSetIndex();
1:         }
1:         return result;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:14755a1
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void rollback(final String id) {
1:         String seed = IdGenerator.getSeedFromId(id);
1:         if (seed != null) {
1:             BitArrayBin bab = map.get(seed);
1:             if (bab != null) {
1:                 long index = IdGenerator.getSequenceFromId(id);
1:                 bab.setBit(index, false);
1:             }
1:         }
1:     }
============================================================================