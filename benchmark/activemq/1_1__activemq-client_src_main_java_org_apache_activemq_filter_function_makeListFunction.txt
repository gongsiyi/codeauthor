1:bf07137: /**
1:bf07137:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bf07137:  * contributor license agreements.  See the NOTICE file distributed with
1:bf07137:  * this work for additional information regarding copyright ownership.
1:bf07137:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bf07137:  * (the "License"); you may not use this file except in compliance with
1:bf07137:  * the License.  You may obtain a copy of the License at
1:bf07137:  *
1:bf07137:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bf07137:  *
1:bf07137:  * Unless required by applicable law or agreed to in writing, software
1:bf07137:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf07137:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf07137:  * See the License for the specific language governing permissions and
1:bf07137:  * limitations under the License.
1:bf07137:  */
1:bf07137: package org.apache.activemq.filter.function;
1:bf07137: 
1:bf07137: import org.apache.activemq.filter.FunctionCallExpression;
1:bf07137: import org.apache.activemq.filter.MessageEvaluationContext;
1:bf07137: 
1:bf07137: /**
1:bf07137:  * Filter function that creates a list with each argument being one element in the list.
1:bf07137:  * For example:
1:bf07137:  * <p/>
1:bf07137:  * <p style="margin-left: 4em">
1:bf07137:  * MAKELIST( '1', '2', '3' )
1:bf07137:  * </p>
1:bf07137:  */
1:bf07137: 
1:bf07137: public class makeListFunction implements FilterFunction {
1:bf07137:     /**
1:bf07137:      * Check whether the given expression is a valid call of this function.  Any number of arguments is accepted.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return true - if the expression is valid; false - otherwise.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public boolean isValid(FunctionCallExpression expr) {
1:bf07137:         return true;
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Indicate that this function never evaluates to a Boolean result.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return false - this Filter Function never evaluates to a Boolean.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public boolean returnsBoolean(FunctionCallExpression expr) {
1:bf07137:         return false;
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Evalutate the given expression, which consists of a call to this function, in the context given.  Creates
1:bf07137:      * a list containing the evaluated results of its argument expressions.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @param    message_ctx - the context in which the call is being evaluated.
1:bf07137:      * @return java.util.List - the result of the evaluation.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message)
1:bf07137:             throws javax.jms.JMSException {
1:bf07137:         java.util.ArrayList ele_arr;
1:bf07137:         int num_arg;
1:bf07137:         int cur;
1:bf07137: 
1:bf07137:         num_arg = expr.getNumArguments();
1:bf07137:         ele_arr = new java.util.ArrayList(num_arg);
1:bf07137: 
1:bf07137:         cur = 0;
1:bf07137:         while (cur < num_arg) {
1:bf07137:             ele_arr.add(expr.getArgument(cur).evaluate(message));
1:bf07137:             cur++;
1:bf07137:         }
1:bf07137: 
1:bf07137:         return (java.util.List) ele_arr;
1:bf07137:     }
1:bf07137: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter.function;
1: 
1: import org.apache.activemq.filter.FunctionCallExpression;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: 
1: /**
1:  * Filter function that creates a list with each argument being one element in the list.
1:  * For example:
1:  * <p/>
1:  * <p style="margin-left: 4em">
1:  * MAKELIST( '1', '2', '3' )
1:  * </p>
1:  */
1: 
1: public class makeListFunction implements FilterFunction {
1:     /**
1:      * Check whether the given expression is a valid call of this function.  Any number of arguments is accepted.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return true - if the expression is valid; false - otherwise.
1:      */
1: 
1:     public boolean isValid(FunctionCallExpression expr) {
1:         return true;
1:     }
1: 
1: 
1:     /**
1:      * Indicate that this function never evaluates to a Boolean result.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return false - this Filter Function never evaluates to a Boolean.
1:      */
1: 
1:     public boolean returnsBoolean(FunctionCallExpression expr) {
1:         return false;
1:     }
1: 
1: 
1:     /**
1:      * Evalutate the given expression, which consists of a call to this function, in the context given.  Creates
1:      * a list containing the evaluated results of its argument expressions.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @param    message_ctx - the context in which the call is being evaluated.
1:      * @return java.util.List - the result of the evaluation.
1:      */
1: 
1:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message)
1:             throws javax.jms.JMSException {
1:         java.util.ArrayList ele_arr;
1:         int num_arg;
1:         int cur;
1: 
1:         num_arg = expr.getNumArguments();
1:         ele_arr = new java.util.ArrayList(num_arg);
1: 
1:         cur = 0;
1:         while (cur < num_arg) {
1:             ele_arr.add(expr.getArgument(cur).evaluate(message));
1:             cur++;
1:         }
1: 
1:         return (java.util.List) ele_arr;
1:     }
1: }
============================================================================