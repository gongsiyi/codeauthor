1:aace7c6: /**
1:aace7c6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:aace7c6:  * contributor license agreements.  See the NOTICE file distributed with
1:aace7c6:  * this work for additional information regarding copyright ownership.
1:aace7c6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:aace7c6:  * (the "License"); you may not use this file except in compliance with
1:aace7c6:  * the License.  You may obtain a copy of the License at
1:aace7c6:  *
1:aace7c6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:aace7c6:  *
1:aace7c6:  * Unless required by applicable law or agreed to in writing, software
1:aace7c6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:aace7c6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aace7c6:  * See the License for the specific language governing permissions and
1:aace7c6:  * limitations under the License.
1:aace7c6:  */
1:aace7c6: 
1:aace7c6: package org.apache.activemq.transport.fanout;
1:aace7c6: 
1:aace7c6: import javax.jms.Connection;
1:aace7c6: import javax.jms.Message;
1:aace7c6: import javax.jms.MessageConsumer;
1:aace7c6: import javax.jms.MessageProducer;
1:aace7c6: import javax.jms.Session;
1:aace7c6: 
1:aace7c6: import junit.framework.TestCase;
1:aace7c6: 
1:aace7c6: import org.apache.activemq.ActiveMQConnectionFactory;
1:aace7c6: import org.apache.activemq.broker.BrokerFactory;
1:aace7c6: import org.apache.activemq.broker.BrokerService;
1:aace7c6: import org.apache.activemq.util.MessageIdList;
1:aace7c6: 
1:aace7c6: public class FanoutTest extends TestCase {
1:aace7c6: 
1:aace7c6:     BrokerService broker1;
1:aace7c6:     BrokerService broker2;
1:aace7c6:     
1:aace7c6:     ActiveMQConnectionFactory producerFactory = new ActiveMQConnectionFactory("fanout:(static:(tcp://localhost:61616,tcp://localhost:61617))?fanOutQueues=true");
1:aace7c6:     Connection producerConnection;
1:aace7c6:     Session producerSession;
1:aace7c6:     int messageCount = 100;
1:aace7c6: 
1:aace7c6:     public void setUp() throws Exception {
1:aace7c6:         broker1 = BrokerFactory.createBroker("broker:(tcp://localhost:61616)/brokerA?persistent=false&useJmx=false");
1:aace7c6:         broker2 = BrokerFactory.createBroker("broker:(tcp://localhost:61617)/brokerB?persistent=false&useJmx=false");
1:aace7c6:         
1:aace7c6:         broker1.start();
1:aace7c6:         broker2.start();
1:aace7c6:         
1:aace7c6:         broker1.waitUntilStarted();
1:aace7c6:         broker2.waitUntilStarted();
1:aace7c6:         
1:aace7c6:         producerConnection = producerFactory.createConnection();
1:aace7c6:         producerConnection.start();
1:aace7c6:         producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:aace7c6:     }
1:aace7c6:     
1:aace7c6:     public void tearDown() throws Exception {
1:aace7c6:         producerSession.close();
1:aace7c6:         producerConnection.close();
1:aace7c6:         
1:aace7c6:         broker1.stop();
1:aace7c6:         broker2.stop();
1:aace7c6:     }
1:aace7c6:     
1:aace7c6:     public void testSendReceive() throws Exception {
1:aace7c6: 
1:aace7c6:         MessageProducer prod = createProducer();
1:aace7c6:         for (int i = 0; i < messageCount; i++) {
1:aace7c6:             Message msg = producerSession.createTextMessage("Message " + i);
1:aace7c6:             prod.send(msg);
1:aace7c6:         }
1:aace7c6:         prod.close();
1:aace7c6:         
1:aace7c6:         assertMessagesReceived("tcp://localhost:61616");
1:aace7c6:         assertMessagesReceived("tcp://localhost:61617");
1:aace7c6:         
1:aace7c6:     }
1:aace7c6:     
1:aace7c6:     protected MessageProducer createProducer() throws Exception {
1:aace7c6:         return producerSession.createProducer(producerSession.createQueue("TEST"));   
1:aace7c6:     }
1:aace7c6:     
1:aace7c6:     protected void assertMessagesReceived(String brokerURL) throws Exception {
1:aace7c6:         ActiveMQConnectionFactory consumerFactory = new ActiveMQConnectionFactory(brokerURL);
1:aace7c6:         Connection consumerConnection = consumerFactory.createConnection();
1:aace7c6:         consumerConnection.start();
1:aace7c6:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:aace7c6:         MessageConsumer consumer = consumerSession.createConsumer(consumerSession.createQueue("TEST"));
1:aace7c6:         MessageIdList listener = new MessageIdList();
1:aace7c6:         consumer.setMessageListener(listener);
1:aace7c6:         listener.waitForMessagesToArrive(messageCount);
1:aace7c6:         listener.assertMessagesReceived(messageCount);
1:aace7c6:         
1:aace7c6:         consumer.close(); consumerConnection.close(); consumerSession.close();
1:aace7c6:     }
1:aace7c6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:aace7c6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.fanout;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.MessageIdList;
1: 
1: public class FanoutTest extends TestCase {
1: 
1:     BrokerService broker1;
1:     BrokerService broker2;
1:     
1:     ActiveMQConnectionFactory producerFactory = new ActiveMQConnectionFactory("fanout:(static:(tcp://localhost:61616,tcp://localhost:61617))?fanOutQueues=true");
1:     Connection producerConnection;
1:     Session producerSession;
1:     int messageCount = 100;
1: 
1:     public void setUp() throws Exception {
1:         broker1 = BrokerFactory.createBroker("broker:(tcp://localhost:61616)/brokerA?persistent=false&useJmx=false");
1:         broker2 = BrokerFactory.createBroker("broker:(tcp://localhost:61617)/brokerB?persistent=false&useJmx=false");
1:         
1:         broker1.start();
1:         broker2.start();
1:         
1:         broker1.waitUntilStarted();
1:         broker2.waitUntilStarted();
1:         
1:         producerConnection = producerFactory.createConnection();
1:         producerConnection.start();
1:         producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1:     
1:     public void tearDown() throws Exception {
1:         producerSession.close();
1:         producerConnection.close();
1:         
1:         broker1.stop();
1:         broker2.stop();
1:     }
1:     
1:     public void testSendReceive() throws Exception {
1: 
1:         MessageProducer prod = createProducer();
1:         for (int i = 0; i < messageCount; i++) {
1:             Message msg = producerSession.createTextMessage("Message " + i);
1:             prod.send(msg);
1:         }
1:         prod.close();
1:         
1:         assertMessagesReceived("tcp://localhost:61616");
1:         assertMessagesReceived("tcp://localhost:61617");
1:         
1:     }
1:     
1:     protected MessageProducer createProducer() throws Exception {
1:         return producerSession.createProducer(producerSession.createQueue("TEST"));   
1:     }
1:     
1:     protected void assertMessagesReceived(String brokerURL) throws Exception {
1:         ActiveMQConnectionFactory consumerFactory = new ActiveMQConnectionFactory(brokerURL);
1:         Connection consumerConnection = consumerFactory.createConnection();
1:         consumerConnection.start();
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(consumerSession.createQueue("TEST"));
1:         MessageIdList listener = new MessageIdList();
1:         consumer.setMessageListener(listener);
1:         listener.waitForMessagesToArrive(messageCount);
1:         listener.assertMessagesReceived(messageCount);
1:         
1:         consumer.close(); consumerConnection.close(); consumerSession.close();
1:     }
1: }
============================================================================