1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.jaas;
1:15023df: 
1:2788bd5: import java.io.File;
1:a107823: import java.io.IOException;
1:15023df: import java.net.URL;
1:15023df: 
1:a107823: import javax.security.auth.Subject;
1:a107823: import javax.security.auth.callback.Callback;
1:a107823: import javax.security.auth.callback.CallbackHandler;
1:a107823: import javax.security.auth.callback.NameCallback;
1:a107823: import javax.security.auth.callback.PasswordCallback;
1:a107823: import javax.security.auth.callback.UnsupportedCallbackException;
1:a107823: import javax.security.auth.login.FailedLoginException;
1:a107823: import javax.security.auth.login.LoginContext;
1:a107823: import javax.security.auth.login.LoginException;
3:a107823: 
1:2788bd5: import org.apache.commons.io.FileUtils;
1:2788bd5: 
1:a107823: import junit.framework.TestCase;
1:a107823: 
1:a107823: 
1:a107823: /**
1:a107823:  * @version $Rev: $ $Date: $
1:a107823:  */
1:a107823: public class PropertiesLoginModuleTest extends TestCase {
1:2788bd5: 
1:15023df:     static {
1:15023df:         String path = System.getProperty("java.security.auth.login.config");
1:15023df:         if (path == null) {
1:15023df:             URL resource = PropertiesLoginModuleTest.class.getClassLoader().getResource("login.config");
1:15023df:             if (resource != null) {
1:15023df:                 path = resource.getFile();
1:15023df:                 System.setProperty("java.security.auth.login.config", path);
1:15023df:             }
1:15023df:         }
1:15023df:     }
1:2788bd5: 
1:a107823:     public void testLogin() throws LoginException {
1:2788bd5:         LoginContext context = new LoginContext("PropertiesLogin", new UserPassHandler("first", "secret"));
1:a107823:         context.login();
1:a107823: 
1:a107823:         Subject subject = context.getSubject();
1:a107823: 
1:a107823:         assertEquals("Should have three principals", 3, subject.getPrincipals().size());
1:a107823:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:a107823:         assertEquals("Should have two group principals", 2, subject.getPrincipals(GroupPrincipal.class).size());
1:a107823: 
1:a107823:         context.logout();
1:a107823: 
1:a107823:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
10:a107823:     }
1:a107823: 
1:2788bd5:     public void testLoginReload() throws Exception {
1:2788bd5:         File targetPropDir = new File("target/loginReloadTest");
1:2788bd5:         File sourcePropDir = new File("src/test/resources");
1:2788bd5:         File usersFile = new File(targetPropDir, "users.properties");
1:2788bd5:         File groupsFile = new File(targetPropDir, "groups.properties");
1:2788bd5: 
1:2788bd5:         //Set up initial properties
1:2788bd5:         FileUtils.copyFile(new File(sourcePropDir, "users.properties"), usersFile);
1:2788bd5:         FileUtils.copyFile(new File(sourcePropDir, "groups.properties"), groupsFile);
1:2788bd5: 
1:2788bd5:         LoginContext context = new LoginContext("PropertiesLoginReload",
1:2788bd5:                 new UserPassHandler("first", "secret"));
1:2788bd5:         context.login();
1:2788bd5:         Subject subject = context.getSubject();
1:2788bd5: 
1:2788bd5:         //test initial principals
1:2788bd5:         assertEquals("Should have three principals", 3, subject.getPrincipals().size());
1:2788bd5:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:2788bd5:         assertEquals("Should have two group principals", 2, subject.getPrincipals(GroupPrincipal.class).size());
1:2788bd5: 
1:2788bd5:         context.logout();
1:2788bd5: 
1:2788bd5:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
1:2788bd5: 
1:2788bd5:         //Modify the file and test that the properties are reloaded
1:2788bd5:         Thread.sleep(1000);
1:2788bd5:         FileUtils.copyFile(new File(sourcePropDir, "usersReload.properties"), usersFile);
1:2788bd5:         FileUtils.copyFile(new File(sourcePropDir, "groupsReload.properties"), groupsFile);
1:2788bd5:         FileUtils.touch(usersFile);
1:2788bd5:         FileUtils.touch(groupsFile);
1:2788bd5: 
1:2788bd5:         //Use new password to verify  users file was reloaded
1:2788bd5:         context = new LoginContext("PropertiesLoginReload", new UserPassHandler("first", "secrets"));
1:2788bd5:         context.login();
1:2788bd5:         subject = context.getSubject();
1:2788bd5: 
1:2788bd5:         //Check that the principals changed
1:2788bd5:         assertEquals("Should have three principals", 2, subject.getPrincipals().size());
1:2788bd5:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:2788bd5:         assertEquals("Should have one group principals", 1, subject.getPrincipals(GroupPrincipal.class).size());
1:2788bd5: 
1:2788bd5:         context.logout();
1:2788bd5: 
1:2788bd5:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
1:2788bd5:     }
1:2788bd5: 
1:a107823:     public void testBadUseridLogin() throws Exception {
1:2788bd5:         LoginContext context = new LoginContext("PropertiesLogin", new UserPassHandler("BAD", "secret"));
1:2788bd5: 
1:a107823:         try {
1:a107823:             context.login();
1:a107823:             fail("Should have thrown a FailedLoginException");
1:a107823:         } catch (FailedLoginException doNothing) {
1:a107823:         }
1:a107823: 
1:a107823:     }
1:a107823: 
1:a107823:     public void testBadPWLogin() throws Exception {
1:2788bd5:         LoginContext context = new LoginContext("PropertiesLogin", new UserPassHandler("first", "BAD"));
1:2788bd5: 
1:a107823:         try {
1:a107823:             context.login();
1:a107823:             fail("Should have thrown a FailedLoginException");
1:a107823:         } catch (FailedLoginException doNothing) {
1:a107823:         }
1:a107823: 
1:a107823:     }
1:a107823: 
1:2788bd5:     private static class UserPassHandler implements CallbackHandler {
1:2788bd5: 
1:2788bd5:         private final String user;
1:2788bd5:         private final String pass;
1:2788bd5: 
1:2788bd5:         public UserPassHandler(final String user, final String pass) {
1:2788bd5:             this.user = user;
1:2788bd5:             this.pass = pass;
1:2788bd5:         }
1:2788bd5: 
1:2788bd5:         @Override
1:2788bd5:         public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:2788bd5:             for (int i = 0; i < callbacks.length; i++) {
1:2788bd5:                 if (callbacks[i] instanceof NameCallback) {
1:2788bd5:                     ((NameCallback) callbacks[i]).setName(user);
1:2788bd5:                 } else if (callbacks[i] instanceof PasswordCallback) {
1:2788bd5:                     ((PasswordCallback) callbacks[i]).setPassword(pass.toCharArray());
1:2788bd5:                 } else {
1:2788bd5:                     throw new UnsupportedCallbackException(callbacks[i]);
1:2788bd5:                 }
1:2788bd5:             }
1:2788bd5:         }
1:2788bd5:     }
1:a107823: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2788bd5
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.FileUtils;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         LoginContext context = new LoginContext("PropertiesLogin", new UserPassHandler("first", "secret"));
/////////////////////////////////////////////////////////////////////////
1:     public void testLoginReload() throws Exception {
1:         File targetPropDir = new File("target/loginReloadTest");
1:         File sourcePropDir = new File("src/test/resources");
1:         File usersFile = new File(targetPropDir, "users.properties");
1:         File groupsFile = new File(targetPropDir, "groups.properties");
1: 
1:         //Set up initial properties
1:         FileUtils.copyFile(new File(sourcePropDir, "users.properties"), usersFile);
1:         FileUtils.copyFile(new File(sourcePropDir, "groups.properties"), groupsFile);
1: 
1:         LoginContext context = new LoginContext("PropertiesLoginReload",
1:                 new UserPassHandler("first", "secret"));
1:         context.login();
1:         Subject subject = context.getSubject();
1: 
1:         //test initial principals
1:         assertEquals("Should have three principals", 3, subject.getPrincipals().size());
1:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:         assertEquals("Should have two group principals", 2, subject.getPrincipals(GroupPrincipal.class).size());
1: 
1:         context.logout();
1: 
1:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
1: 
1:         //Modify the file and test that the properties are reloaded
1:         Thread.sleep(1000);
1:         FileUtils.copyFile(new File(sourcePropDir, "usersReload.properties"), usersFile);
1:         FileUtils.copyFile(new File(sourcePropDir, "groupsReload.properties"), groupsFile);
1:         FileUtils.touch(usersFile);
1:         FileUtils.touch(groupsFile);
1: 
1:         //Use new password to verify  users file was reloaded
1:         context = new LoginContext("PropertiesLoginReload", new UserPassHandler("first", "secrets"));
1:         context.login();
1:         subject = context.getSubject();
1: 
1:         //Check that the principals changed
1:         assertEquals("Should have three principals", 2, subject.getPrincipals().size());
1:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:         assertEquals("Should have one group principals", 1, subject.getPrincipals(GroupPrincipal.class).size());
1: 
1:         context.logout();
1: 
1:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
1:     }
1: 
1:         LoginContext context = new LoginContext("PropertiesLogin", new UserPassHandler("BAD", "secret"));
1: 
/////////////////////////////////////////////////////////////////////////
1:         LoginContext context = new LoginContext("PropertiesLogin", new UserPassHandler("first", "BAD"));
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static class UserPassHandler implements CallbackHandler {
1: 
1:         private final String user;
1:         private final String pass;
1: 
1:         public UserPassHandler(final String user, final String pass) {
1:             this.user = user;
1:             this.pass = pass;
1:         }
1: 
1:         @Override
1:         public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:             for (int i = 0; i < callbacks.length; i++) {
1:                 if (callbacks[i] instanceof NameCallback) {
1:                     ((NameCallback) callbacks[i]).setName(user);
1:                 } else if (callbacks[i] instanceof PasswordCallback) {
1:                     ((PasswordCallback) callbacks[i]).setPassword(pass.toCharArray());
1:                 } else {
1:                     throw new UnsupportedCallbackException(callbacks[i]);
1:                 }
1:             }
1:         }
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6999a02
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:15023df
/////////////////////////////////////////////////////////////////////////
1: import java.net.URL;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     static {
1:         String path = System.getProperty("java.security.auth.login.config");
1:         if (path == null) {
1:             URL resource = PropertiesLoginModuleTest.class.getClassLoader().getResource("login.config");
1:             if (resource != null) {
1:                 path = resource.getFile();
1:                 System.setProperty("java.security.auth.login.config", path);
1:             }
1:         }
0:         System.out.println("Path to login config: " + path);
1:     }
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jaas;
1: 
1: import java.io.IOException;
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.Callback;
1: import javax.security.auth.callback.CallbackHandler;
1: import javax.security.auth.callback.NameCallback;
1: import javax.security.auth.callback.PasswordCallback;
1: import javax.security.auth.callback.UnsupportedCallbackException;
1: import javax.security.auth.login.FailedLoginException;
1: import javax.security.auth.login.LoginContext;
1: import javax.security.auth.login.LoginException;
1: 
0: import org.apache.activemq.jaas.GroupPrincipal;
0: import org.apache.activemq.jaas.UserPrincipal;
1: 
1: import junit.framework.TestCase;
1: 
1: 
1: /**
1:  * @version $Rev: $ $Date: $
1:  */
1: public class PropertiesLoginModuleTest extends TestCase {
1: 
1:     public void testLogin() throws LoginException {
0:         LoginContext context = new LoginContext("PropertiesLogin", new CallbackHandler() {
0:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
0:                 for (int i = 0; i < callbacks.length; i++) {
0:                     if (callbacks[i] instanceof NameCallback) {
0:                         ((NameCallback) callbacks[i]).setName("first");
0:                     } else if (callbacks[i] instanceof PasswordCallback) {
0:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
0:                     } else {
0:                         throw new UnsupportedCallbackException(callbacks[i]);
1:                     }
1:                 }
1:             }
0:         });
1:         context.login();
1: 
1:         Subject subject = context.getSubject();
1: 
1:         assertEquals("Should have three principals", 3, subject.getPrincipals().size());
1:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:         assertEquals("Should have two group principals", 2, subject.getPrincipals(GroupPrincipal.class).size());
1: 
1:         context.logout();
1: 
1:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
1:     }
1: 
1:     public void testBadUseridLogin() throws Exception {
0:         LoginContext context = new LoginContext("PropertiesLogin", new CallbackHandler() {
0:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
0:                 for (int i = 0; i < callbacks.length; i++) {
0:                     if (callbacks[i] instanceof NameCallback) {
0:                         ((NameCallback) callbacks[i]).setName("BAD");
0:                     } else if (callbacks[i] instanceof PasswordCallback) {
0:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
0:                     } else {
0:                         throw new UnsupportedCallbackException(callbacks[i]);
1:                     }
1:                 }
1:             }
0:         });
1:         try {
1:             context.login();
1:             fail("Should have thrown a FailedLoginException");
1:         } catch (FailedLoginException doNothing) {
1:         }
1: 
1:     }
1: 
1:     public void testBadPWLogin() throws Exception {
0:         LoginContext context = new LoginContext("PropertiesLogin", new CallbackHandler() {
0:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
0:                 for (int i = 0; i < callbacks.length; i++) {
0:                     if (callbacks[i] instanceof NameCallback) {
0:                         ((NameCallback) callbacks[i]).setName("first");
0:                     } else if (callbacks[i] instanceof PasswordCallback) {
0:                         ((PasswordCallback) callbacks[i]).setPassword("BAD".toCharArray());
0:                     } else {
0:                         throw new UnsupportedCallbackException(callbacks[i]);
1:                     }
1:                 }
1:             }
0:         });
1:         try {
1:             context.login();
1:             fail("Should have thrown a FailedLoginException");
1:         } catch (FailedLoginException doNothing) {
1:         }
1: 
1:     }
1: }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:2d0361b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.jaas;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.jaas.GroupPrincipal;
0: import org.apache.activemq.jaas.UserPrincipal;
0: 
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2004 The Apache Software Foundation
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0:  *
0:  * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.activemq.jaas;
0: 
0: import java.io.IOException;
0: import javax.security.auth.Subject;
0: import javax.security.auth.callback.Callback;
0: import javax.security.auth.callback.CallbackHandler;
0: import javax.security.auth.callback.NameCallback;
0: import javax.security.auth.callback.PasswordCallback;
0: import javax.security.auth.callback.UnsupportedCallbackException;
0: import javax.security.auth.login.FailedLoginException;
0: import javax.security.auth.login.LoginContext;
0: import javax.security.auth.login.LoginException;
0: 
0: import junit.framework.TestCase;
0: 
0: 
0: /**
0:  * @version $Rev: $ $Date: $
0:  */
0: public class PropertiesLoginModuleTest extends TestCase {
0: 
0:     public void testLogin() throws LoginException {
0:         LoginContext context = new LoginContext("PropertiesLogin", new CallbackHandler() {
0:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
0:                 for (int i = 0; i < callbacks.length; i++) {
0:                     if (callbacks[i] instanceof NameCallback) {
0:                         ((NameCallback) callbacks[i]).setName("first");
0:                     } else if (callbacks[i] instanceof PasswordCallback) {
0:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
0:                     } else {
0:                         throw new UnsupportedCallbackException(callbacks[i]);
0:                     }
0:                 }
0:             }
0:         });
0:         context.login();
0: 
0:         Subject subject = context.getSubject();
0: 
0:         assertEquals("Should have three principals", 3, subject.getPrincipals().size());
0:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
0:         assertEquals("Should have two group principals", 2, subject.getPrincipals(GroupPrincipal.class).size());
0: 
0:         context.logout();
0: 
0:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
0:     }
0: 
0:     public void testBadUseridLogin() throws Exception {
0:         LoginContext context = new LoginContext("PropertiesLogin", new CallbackHandler() {
0:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
0:                 for (int i = 0; i < callbacks.length; i++) {
0:                     if (callbacks[i] instanceof NameCallback) {
0:                         ((NameCallback) callbacks[i]).setName("BAD");
0:                     } else if (callbacks[i] instanceof PasswordCallback) {
0:                         ((PasswordCallback) callbacks[i]).setPassword("secret".toCharArray());
0:                     } else {
0:                         throw new UnsupportedCallbackException(callbacks[i]);
0:                     }
0:                 }
0:             }
0:         });
0:         try {
0:             context.login();
0:             fail("Should have thrown a FailedLoginException");
0:         } catch (FailedLoginException doNothing) {
0:         }
0: 
0:     }
0: 
0:     public void testBadPWLogin() throws Exception {
0:         LoginContext context = new LoginContext("PropertiesLogin", new CallbackHandler() {
0:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
0:                 for (int i = 0; i < callbacks.length; i++) {
0:                     if (callbacks[i] instanceof NameCallback) {
0:                         ((NameCallback) callbacks[i]).setName("first");
0:                     } else if (callbacks[i] instanceof PasswordCallback) {
0:                         ((PasswordCallback) callbacks[i]).setPassword("BAD".toCharArray());
0:                     } else {
0:                         throw new UnsupportedCallbackException(callbacks[i]);
0:                     }
0:                 }
0:             }
0:         });
0:         try {
0:             context.login();
0:             fail("Should have thrown a FailedLoginException");
0:         } catch (FailedLoginException doNothing) {
0:         }
0: 
0:     }
0: }
============================================================================