1:3f32507: /**
1:3f32507:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  * this work for additional information regarding copyright ownership.
1:3f32507:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  * (the "License"); you may not use this file except in compliance with
1:3f32507:  * the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  */
1:3f32507: package org.apache.activemq.usecases;
1:3f32507: 
1:3f32507: import java.util.concurrent.TimeUnit;
1:3f32507: import javax.jms.JMSException;
1:3f32507: import javax.jms.Message;
1:3f32507: import javax.jms.MessageProducer;
1:3f32507: import javax.jms.Session;
1:3f32507: import javax.jms.TextMessage;
1:3f32507: import javax.jms.Topic;
1:3f32507: import javax.jms.TopicConnection;
1:3f32507: import javax.jms.TopicSession;
1:3f32507: import javax.jms.TopicSubscriber;
1:3f32507: import org.apache.activemq.ActiveMQConnectionFactory;
1:3f32507: import org.apache.activemq.broker.BrokerService;
1:3f32507: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:3f32507: import org.apache.activemq.broker.region.policy.PolicyMap;
1:3f32507: import org.apache.commons.lang.RandomStringUtils;
1:3f32507: import org.junit.After;
1:3f32507: import org.junit.Before;
1:3f32507: import org.junit.Test;
1:3f32507: import org.slf4j.Logger;
1:3f32507: import org.slf4j.LoggerFactory;
1:3f32507: 
1:3f32507: 
1:3f32507: import static org.junit.Assert.assertNotNull;
1:3f32507: 
1:3f32507: public class DurableSubscriptionHangTestCase {
1:3f32507:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionHangTestCase.class);
1:3f32507:     final static String brokerName = "DurableSubscriptionHangTestCase";
1:3f32507:     final static String clientID = "myId";
1:3f32507:     private static final String topicName = "myTopic";
1:3f32507:     private static final String durableSubName = "mySub";
1:3f32507:     BrokerService brokerService;
1:3f32507: 
1:3f32507:     @Before
1:3f32507:     public void startBroker() throws Exception {
1:3f32507:         brokerService = new BrokerService();
1:3f32507:         brokerService.setDeleteAllMessagesOnStartup(true);
1:3f32507:         brokerService.setBrokerName(brokerName);
1:3f32507:         PolicyMap policyMap = new PolicyMap();
1:3f32507:         PolicyEntry defaultEntry = new PolicyEntry();
1:3f32507:         defaultEntry.setExpireMessagesPeriod(5000);
1:3f32507:         policyMap.setDefaultEntry(defaultEntry);
1:3f32507:         brokerService.setDestinationPolicy(policyMap);
1:3f32507:         brokerService.start();
1:3f32507:     }
1:3f32507: 
1:3f32507:     @After
1:3f32507:     public void brokerStop() throws Exception {
1:3f32507:         brokerService.stop();
1:3f32507:     }
1:3f32507: 
1:3f32507: 	@Test
1:3f32507: 	public void testHanging() throws Exception
1:3f32507: 	{
1:3f32507: 		registerDurableSubscription();
1:3f32507: 		produceExpiredAndOneNonExpiredMessages();
1:3f32507: 		TimeUnit.SECONDS.sleep(10);		// make sure messages are expired
1:3f32507:         Message message = collectMessagesFromDurableSubscriptionForOneMinute();
1:3f32507:         LOG.info("got message:" + message);
1:3f32507:         assertNotNull("Unable to read unexpired message", message);
1:3f32507: 	}
1:3f32507: 
1:3f32507: 	private void produceExpiredAndOneNonExpiredMessages() throws JMSException {
1:3f32507: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + brokerName);
1:3f32507:         TopicConnection connection = connectionFactory.createTopicConnection();
1:3f32507:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:3f32507:         Topic topic = session.createTopic(topicName);
1:3f32507:         MessageProducer producer = session.createProducer(topic);
1:3f32507:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(1));
1:3f32507:         for(int i=0; i<40000; i++)
1:3f32507:         {
1:3f32507:         	sendRandomMessage(session, producer);
1:3f32507:         }
1:3f32507:         producer.setTimeToLive(TimeUnit.DAYS.toMillis(1));
1:3f32507:         sendRandomMessage(session, producer);
1:3f32507:         connection.close();
1:3f32507:         LOG.info("produceExpiredAndOneNonExpiredMessages done");
1:3f32507: 	}
1:3f32507: 
1:3f32507: 	private void registerDurableSubscription() throws JMSException
1:3f32507: 	{
1:3f32507: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + brokerName);
1:3f32507: 		TopicConnection connection = connectionFactory.createTopicConnection();
1:3f32507: 		connection.setClientID(clientID);
1:3f32507: 		TopicSession topicSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:3f32507: 		Topic topic = topicSession.createTopic(topicName);
1:3f32507: 		TopicSubscriber durableSubscriber = topicSession.createDurableSubscriber(topic, durableSubName);
1:3f32507: 		connection.start();
1:3f32507: 		durableSubscriber.close();
1:3f32507: 		connection.close();
1:3f32507: 		LOG.info("Durable Sub Registered");
1:3f32507: 	}
1:3f32507: 
1:3f32507: 	private Message collectMessagesFromDurableSubscriptionForOneMinute() throws Exception
1:3f32507: 	{
1:3f32507: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + brokerName);
1:3f32507: 		TopicConnection connection = connectionFactory.createTopicConnection();
1:3f32507: 
1:3f32507: 		connection.setClientID(clientID);
1:3f32507: 		TopicSession topicSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:3f32507: 		Topic topic = topicSession.createTopic(topicName);
1:3f32507: 		connection.start();
1:3f32507: 		TopicSubscriber subscriber = topicSession.createDurableSubscriber(topic, durableSubName);
1:3f32507: 		LOG.info("About to receive messages");
1:3f32507: 		Message message = subscriber.receive(120000);
1:3f32507: 		subscriber.close();
1:3f32507: 		connection.close();
1:3f32507: 		LOG.info("collectMessagesFromDurableSubscriptionForOneMinute done");
1:3f32507: 
1:3f32507: 		return message;
1:3f32507: 	}
1:3f32507: 
1:3f32507: 	private void sendRandomMessage(TopicSession session, MessageProducer producer) throws JMSException {
1:3f32507: 		TextMessage textMessage = session.createTextMessage();
1:3f32507: 		textMessage.setText(RandomStringUtils.random(500, "abcdefghijklmnopqrstuvwxyz"));
1:3f32507: 		producer.send(textMessage);
1:3f32507: 	}
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicSession;
1: import javax.jms.TopicSubscriber;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.commons.lang.RandomStringUtils;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: public class DurableSubscriptionHangTestCase {
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionHangTestCase.class);
1:     final static String brokerName = "DurableSubscriptionHangTestCase";
1:     final static String clientID = "myId";
1:     private static final String topicName = "myTopic";
1:     private static final String durableSubName = "mySub";
1:     BrokerService brokerService;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setBrokerName(brokerName);
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(5000);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         brokerService.setDestinationPolicy(policyMap);
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void brokerStop() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1: 	@Test
1: 	public void testHanging() throws Exception
1: 	{
1: 		registerDurableSubscription();
1: 		produceExpiredAndOneNonExpiredMessages();
1: 		TimeUnit.SECONDS.sleep(10);		// make sure messages are expired
1:         Message message = collectMessagesFromDurableSubscriptionForOneMinute();
1:         LOG.info("got message:" + message);
1:         assertNotNull("Unable to read unexpired message", message);
1: 	}
1: 
1: 	private void produceExpiredAndOneNonExpiredMessages() throws JMSException {
1: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + brokerName);
1:         TopicConnection connection = connectionFactory.createTopicConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(topicName);
1:         MessageProducer producer = session.createProducer(topic);
1:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(1));
1:         for(int i=0; i<40000; i++)
1:         {
1:         	sendRandomMessage(session, producer);
1:         }
1:         producer.setTimeToLive(TimeUnit.DAYS.toMillis(1));
1:         sendRandomMessage(session, producer);
1:         connection.close();
1:         LOG.info("produceExpiredAndOneNonExpiredMessages done");
1: 	}
1: 
1: 	private void registerDurableSubscription() throws JMSException
1: 	{
1: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + brokerName);
1: 		TopicConnection connection = connectionFactory.createTopicConnection();
1: 		connection.setClientID(clientID);
1: 		TopicSession topicSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 		Topic topic = topicSession.createTopic(topicName);
1: 		TopicSubscriber durableSubscriber = topicSession.createDurableSubscriber(topic, durableSubName);
1: 		connection.start();
1: 		durableSubscriber.close();
1: 		connection.close();
1: 		LOG.info("Durable Sub Registered");
1: 	}
1: 
1: 	private Message collectMessagesFromDurableSubscriptionForOneMinute() throws Exception
1: 	{
1: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + brokerName);
1: 		TopicConnection connection = connectionFactory.createTopicConnection();
1: 
1: 		connection.setClientID(clientID);
1: 		TopicSession topicSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 		Topic topic = topicSession.createTopic(topicName);
1: 		connection.start();
1: 		TopicSubscriber subscriber = topicSession.createDurableSubscriber(topic, durableSubName);
1: 		LOG.info("About to receive messages");
1: 		Message message = subscriber.receive(120000);
1: 		subscriber.close();
1: 		connection.close();
1: 		LOG.info("collectMessagesFromDurableSubscriptionForOneMinute done");
1: 
1: 		return message;
1: 	}
1: 
1: 	private void sendRandomMessage(TopicSession session, MessageProducer producer) throws JMSException {
1: 		TextMessage textMessage = session.createTextMessage();
1: 		textMessage.setText(RandomStringUtils.random(500, "abcdefghijklmnopqrstuvwxyz"));
1: 		producer.send(textMessage);
1: 	}
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:9c9b856
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.usecases;
0: 
0: import java.util.concurrent.TimeUnit;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import javax.jms.Topic;
0: import javax.jms.TopicConnection;
0: import javax.jms.TopicSession;
0: import javax.jms.TopicSubscriber;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.commons.lang.RandomStringUtils;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: 
0: import static org.junit.Assert.assertNotNull;
0: 
0: public class DurableSubscriptionHangTestCase {
0:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionHangTestCase.class);
0:     final static String brokerName = "DurableSubscriptionHangTestCase";
0:     final static String clientID = "myId";
0:     private static final String topicName = "myTopic";
0:     private static final String durableSubName = "mySub";
0:     BrokerService brokerService;
0: 
0:     @Before
0:     public void startBroker() throws Exception {
0:         brokerService = new BrokerService();
0:         brokerService.setDeleteAllMessagesOnStartup(true);
0:         brokerService.setBrokerName(brokerName);
0:         PolicyMap policyMap = new PolicyMap();
0:         PolicyEntry defaultEntry = new PolicyEntry();
0:         defaultEntry.setExpireMessagesPeriod(5000);
0:         policyMap.setDefaultEntry(defaultEntry);
0:         brokerService.setDestinationPolicy(policyMap);
0:         brokerService.start();
0:     }
0: 
0:     @After
0:     public void brokerStop() throws Exception {
0:         brokerService.stop();
0:     }
0: 
0: 	@Test
0: 	public void testHanging() throws Exception
0: 	{
0: 		registerDurableSubscription();
0: 		produceExpiredAndOneNonExpiredMessages();
0: 		TimeUnit.SECONDS.sleep(10);		// make sure messages are expired
0:         Message message = collectMessagesFromDurableSubscriptionForOneMinute();
0:         LOG.info("got message:" + message);
0:         assertNotNull("Unable to read unexpired message", message);
0: 	}
0: 
0: 	private void produceExpiredAndOneNonExpiredMessages() throws JMSException {
0: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + brokerName);
0:         TopicConnection connection = connectionFactory.createTopicConnection();
0:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Topic topic = session.createTopic(topicName);
0:         MessageProducer producer = session.createProducer(topic);
0:         producer.setTimeToLive(TimeUnit.SECONDS.toMillis(1));
0:         for(int i=0; i<40000; i++)
0:         {
0:         	sendRandomMessage(session, producer);
0:         }
0:         producer.setTimeToLive(TimeUnit.DAYS.toMillis(1));
0:         sendRandomMessage(session, producer);
0:         connection.close();
0:         LOG.info("produceExpiredAndOneNonExpiredMessages done");
0: 	}
0: 
0: 	private void registerDurableSubscription() throws JMSException
0: 	{
0: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + brokerName);
0: 		TopicConnection connection = connectionFactory.createTopicConnection();
0: 		connection.setClientID(clientID);
0: 		TopicSession topicSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		Topic topic = topicSession.createTopic(topicName);
0: 		TopicSubscriber durableSubscriber = topicSession.createDurableSubscriber(topic, durableSubName);
0: 		connection.start();
0: 		durableSubscriber.close();
0: 		connection.close();
0: 		LOG.info("Durable Sub Registered");
0: 	}
0: 
0: 	private Message collectMessagesFromDurableSubscriptionForOneMinute() throws Exception
0: 	{
0: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + brokerName);
0: 		TopicConnection connection = connectionFactory.createTopicConnection();
0: 
0: 		connection.setClientID(clientID);
0: 		TopicSession topicSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		Topic topic = topicSession.createTopic(topicName);
0: 		connection.start();
0: 		TopicSubscriber subscriber = topicSession.createDurableSubscriber(topic, durableSubName);
0: 		LOG.info("About to receive messages");
0: 		Message message = subscriber.receive(120000);
0: 		subscriber.close();
0: 		connection.close();
0: 		LOG.info("collectMessagesFromDurableSubscriptionForOneMinute done");
0: 
0: 		return message;
0: 	}
0: 
0: 	private void sendRandomMessage(TopicSession session, MessageProducer producer) throws JMSException {
0: 		TextMessage textMessage = session.createTextMessage();
0: 		textMessage.setText(RandomStringUtils.random(500, "abcdefghijklmnopqrstuvwxyz"));
0: 		producer.send(textMessage);
0: 	}
0: }
============================================================================