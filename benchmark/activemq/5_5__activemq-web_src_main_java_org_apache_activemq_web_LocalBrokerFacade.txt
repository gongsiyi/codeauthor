1:5a5056e: /**
1:5a5056e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a5056e:  * contributor license agreements.  See the NOTICE file distributed with
1:5a5056e:  * this work for additional information regarding copyright ownership.
1:5a5056e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a5056e:  * (the "License"); you may not use this file except in compliance with
1:5a5056e:  * the License.  You may obtain a copy of the License at
3:5a5056e:  *
1:5a5056e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:5a5056e:  * Unless required by applicable law or agreed to in writing, software
1:5a5056e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a5056e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a5056e:  * See the License for the specific language governing permissions and
1:5a5056e:  * limitations under the License.
1:5a5056e:  */
1:5a5056e: package org.apache.activemq.web;
6:5a5056e: 
1:5a5056e: import java.util.Iterator;
1:5a5056e: import java.util.Set;
1:5a5056e: 
1:1f35514: import javax.management.ObjectName;
1:1f35514: import javax.management.QueryExp;
1:1f35514: 
1:5a5056e: import org.apache.activemq.broker.Broker;
1:5a5056e: import org.apache.activemq.broker.BrokerService;
1:5a5056e: import org.apache.activemq.broker.jmx.BrokerView;
1:5a5056e: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:5a5056e: import org.apache.activemq.broker.jmx.ManagedRegionBroker;
1:5a5056e: import org.apache.activemq.broker.jmx.ManagementContext;
1:390bb14: import org.apache.activemq.broker.region.Destination;
1:9445e93: import org.apache.activemq.broker.region.DestinationFilter;
1:5a5056e: import org.apache.activemq.broker.region.Queue;
1:5a5056e: import org.apache.activemq.command.ActiveMQDestination;
1:5a5056e: 
1:5a5056e: /**
1:5a5056e:  * An implementation of {@link BrokerFacade} which uses a local in JVM broker
1:5a5056e:  */
1:5a5056e: public class LocalBrokerFacade extends BrokerFacadeSupport {
1:5a5056e: 
1:9445e93:     private final BrokerService brokerService;
1:5a5056e: 
1:9445e93:     public LocalBrokerFacade(BrokerService brokerService) {
1:9445e93:         this.brokerService = brokerService;
1:9445e93:     }
1:1f35514: 
1:9445e93:     public BrokerService getBrokerService() {
1:9445e93:         return brokerService;
1:9445e93:     }
1:9445e93: 
1:9445e93:     @Override
1:9445e93:     public String getBrokerName() throws Exception {
1:9445e93:         return brokerService.getBrokerName();
1:9445e93:     }
1:9445e93: 
1:9445e93:     public Broker getBroker() throws Exception {
1:9445e93:         return brokerService.getBroker();
1:9445e93:     }
1:9445e93: 
1:9445e93:     @Override
1:9445e93:     public ManagementContext getManagementContext() {
1:9445e93:         return brokerService.getManagementContext();
1:9445e93:     }
1:9445e93: 
1:9445e93:     @Override
1:9445e93:     public BrokerViewMBean getBrokerAdmin() throws Exception {
1:9445e93:         return brokerService.getAdminView();
1:9445e93:     }
1:9445e93: 
1:9445e93:     public ManagedRegionBroker getManagedBroker() throws Exception {
1:9445e93:         BrokerView adminView = brokerService.getAdminView();
1:9445e93:         if (adminView == null) {
1:9445e93:             return null;
1:9445e93:         }
1:9445e93:         return adminView.getBroker();
1:9445e93:     }
1:9445e93: 
1:9445e93:     @Override
1:5a5056e:     public void purgeQueue(ActiveMQDestination destination) throws Exception {
1:9445e93:         Set<Destination> destinations = getManagedBroker().getQueueRegion().getDestinations(destination);
1:9445e93:         for (Iterator<Destination> i = destinations.iterator(); i.hasNext();) {
1:9445e93:             Destination dest = unwrap(i.next());
1:390bb14:             if (dest instanceof Queue) {
1:390bb14:                 Queue regionQueue = (Queue) dest;
1:390bb14:                 regionQueue.purge();
5:b514d3f:             }
1:b514d3f:         }
1:b514d3f:     }
1:b514d3f: 
1:9445e93:     private Destination unwrap(Destination dest) {
1:9445e93:         if (dest instanceof DestinationFilter) {
1:9445e93:             return unwrap(((DestinationFilter) dest).getNext());
1:9445e93:         }
1:9445e93:         return dest;
1:9445e93:     }
1:9445e93: 
1:1f35514:     @Override
1:1f35514:     public Set queryNames(ObjectName name, QueryExp query) throws Exception {
1:1f35514:         return getManagementContext().queryNames(name, query);
1:1f35514:     }
1:1f35514: 
1:1f35514:     @Override
1:1f35514:     public Object newProxyInstance(ObjectName objectName, Class interfaceClass, boolean notificationBroadcaster) {
1:1f35514:         return getManagementContext().newProxyInstance(objectName, interfaceClass, notificationBroadcaster);
1:1f35514:     }
1:b514d3f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9445e93
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DestinationFilter;
1:     private final BrokerService brokerService;
1:     public LocalBrokerFacade(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
1:     public BrokerService getBrokerService() {
1:         return brokerService;
1:     }
1: 
1:     @Override
1:     public String getBrokerName() throws Exception {
1:         return brokerService.getBrokerName();
1:     }
1: 
1:     public Broker getBroker() throws Exception {
1:         return brokerService.getBroker();
1:     }
1: 
1:     @Override
1:     public ManagementContext getManagementContext() {
1:         return brokerService.getManagementContext();
1:     }
1: 
1:     @Override
1:     public BrokerViewMBean getBrokerAdmin() throws Exception {
1:         return brokerService.getAdminView();
1:     }
1: 
1:     public ManagedRegionBroker getManagedBroker() throws Exception {
1:         BrokerView adminView = brokerService.getAdminView();
1:         if (adminView == null) {
1:             return null;
1:         }
1:         return adminView.getBroker();
1:     }
1: 
1:     @Override
1:         Set<Destination> destinations = getManagedBroker().getQueueRegion().getDestinations(destination);
1:         for (Iterator<Destination> i = destinations.iterator(); i.hasNext();) {
1:             Destination dest = unwrap(i.next());
/////////////////////////////////////////////////////////////////////////
1:     private Destination unwrap(Destination dest) {
1:         if (dest instanceof DestinationFilter) {
1:             return unwrap(((DestinationFilter) dest).getNext());
1:         }
1:         return dest;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1f35514
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
1: import javax.management.QueryExp;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public Set queryNames(ObjectName name, QueryExp query) throws Exception {
1:         return getManagementContext().queryNames(name, query);
1:     }
1: 
1:     @Override
1:     public Object newProxyInstance(ObjectName objectName, Class interfaceClass, boolean notificationBroadcaster) {
1:         return getManagementContext().newProxyInstance(objectName, interfaceClass, notificationBroadcaster);
1:     }
commit:b514d3f
/////////////////////////////////////////////////////////////////////////
0: 	private BrokerService brokerService;
0: 	public LocalBrokerFacade(BrokerService brokerService) {
0: 		this.brokerService = brokerService;
1: 	}
0: 	public BrokerService getBrokerService() {
0: 		return brokerService;
1: 	}
0: 	public String getBrokerName() throws Exception {
0: 		return brokerService.getBrokerName();
1: 	}
0: 	public Broker getBroker() throws Exception {
0: 		return brokerService.getBroker();
1: 	}
0: 	public ManagementContext getManagementContext() {
0: 		return brokerService.getManagementContext();
1: 	}
0: 	public BrokerViewMBean getBrokerAdmin() throws Exception {
0: 		return brokerService.getAdminView();
1: 	}
0: 	public ManagedRegionBroker getManagedBroker() throws Exception {
0: 		BrokerView adminView = brokerService.getAdminView();
0: 		if (adminView == null) {
0: 			return null;
1: 		}
0: 		return adminView.getBroker();
1: 	}
/////////////////////////////////////////////////////////////////////////
1:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:390bb14
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
0:             Destination dest = (Destination) i.next();
1:             if (dest instanceof Queue) {
1:                 Queue regionQueue = (Queue) dest;
1:                 regionQueue.purge();
0:             }
author:James Strachan
-------------------------------------------------------------------------------
commit:5a5056e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
1: import java.util.Iterator;
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerView;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.ManagedRegionBroker;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
1:  * An implementation of {@link BrokerFacade} which uses a local in JVM broker
1:  * 
0:  * @version $Revision$
1:  */
1: public class LocalBrokerFacade extends BrokerFacadeSupport {
0:     private BrokerService brokerService;
1: 
0:     public LocalBrokerFacade(BrokerService brokerService) {
0:         this.brokerService = brokerService;
0:     }
1: 
0:     public BrokerService getBrokerService() {
0:         return brokerService;
0:     }
1: 
0:     public Broker getBroker() throws Exception {
0:         return brokerService.getBroker();
0:     }
1: 
0:     public ManagementContext getManagementContext() {
0:         return brokerService.getManagementContext();
0:     }
1: 
0:     public BrokerViewMBean getBrokerAdmin() throws Exception {
0:         // TODO could use JMX to look this up
0:         return brokerService.getAdminView();
0:     }
1: 
0:     public ManagedRegionBroker getManagedBroker() throws Exception {
0:         BrokerView adminView = brokerService.getAdminView();
0:         if (adminView == null) {
0:             return null;
0:         }
0:         return adminView.getBroker();
0:     }
1: 
1:     public void purgeQueue(ActiveMQDestination destination) throws Exception {
0:         Set destinations = getManagedBroker().getQueueRegion().getDestinations(destination);
0:         for (Iterator i = destinations.iterator(); i.hasNext();) {
0:             Queue regionQueue = (Queue)i.next();
0:             regionQueue.purge();
0:         }
0:     }
0: }
============================================================================