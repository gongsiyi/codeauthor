1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:ced6909: package org.apache.activemq.broker.jmx;
1:2306d96: 
1:ced6909: import java.lang.annotation.Annotation;
1:ced6909: import java.lang.reflect.Method;
1:2306d96: import java.security.AccessController;
1:2306d96: import java.security.Principal;
1:ced6909: import java.util.HashMap;
1:d7f7083: import java.util.Locale;
1:ced6909: import java.util.Map;
8:ced6909: 
1:584c133: import javax.management.MBeanAttributeInfo;
1:584c133: import javax.management.MBeanException;
1:584c133: import javax.management.MBeanOperationInfo;
1:584c133: import javax.management.MBeanParameterInfo;
1:584c133: import javax.management.NotCompliantMBeanException;
1:584c133: import javax.management.ObjectName;
1:584c133: import javax.management.ReflectionException;
1:584c133: import javax.management.StandardMBean;
1:2306d96: import javax.security.auth.Subject;
1:ced6909: 
1:584c133: import org.apache.activemq.broker.util.AuditLogEntry;
1:584c133: import org.apache.activemq.broker.util.AuditLogService;
1:584c133: import org.apache.activemq.broker.util.JMXAuditLogEntry;
1:584c133: import org.slf4j.Logger;
1:584c133: import org.slf4j.LoggerFactory;
1:584c133: 
3:ced6909: /**
1:ced6909:  * MBean that looks for method/parameter descriptions in the Info annotation.
3:ced6909:  */
1:ced6909: public class AnnotatedMBean extends StandardMBean {
1:ced6909: 
1:584c133:     private static final Map<String, Class<?>> primitives = new HashMap<String, Class<?>>();
1:2306d96: 
1:584c133:     private static final Logger LOG = LoggerFactory.getLogger("org.apache.activemq.audit");
1:2306d96: 
1:d7f7083:     private static final byte OFF = 0b00;
1:d7f7083:     private static final byte ENTRY = 0b01;
1:d7f7083:     private static final byte EXIT = 0b10;
1:d7f7083:     private static final byte ALL = 0b11;
1:d7f7083: 
1:d7f7083:     private static byte audit = OFF;
1:584c133:     private static AuditLogService auditLog;
1:2306d96: 
1:584c133:     static {
1:584c133:         Class<?>[] p = { byte.class, short.class, int.class, long.class, float.class, double.class, char.class, boolean.class, };
1:584c133:         for (Class<?> c : p) {
1:584c133:             primitives.put(c.getName(), c);
1:584c133:         }
1:d7f7083:         audit = byteFromProperty("org.apache.activemq.audit");
1:d7f7083:         if (audit != OFF) {
1:584c133:             auditLog = AuditLogService.getAuditLog();
1:584c133:         }
1:1f9cc43:     }
1:ced6909: 
1:d7f7083:     private static byte byteFromProperty(String s) {
1:d7f7083:         byte val = OFF;
1:d7f7083:         String config = System.getProperty(s, "").toLowerCase(Locale.ENGLISH);
1:d7f7083:         if ("true".equals(config) || "entry".equals(config)) {
1:d7f7083:             val = ENTRY;
1:d7f7083:         } else if ("exit".equals(config)) {
1:d7f7083:             val = EXIT;
1:d7f7083:         } else if ("all".equals(config)) {
1:d7f7083:             val = ALL;
1:d7f7083:         }
1:d7f7083:         return val;
1:d7f7083:     }
1:d7f7083: 
1:584c133:     @SuppressWarnings({ "unchecked", "rawtypes" })
1:584c133:     public static void registerMBean(ManagementContext context, Object object, ObjectName objectName) throws Exception {
1:ced6909: 
1:584c133:         String mbeanName = object.getClass().getName() + "MBean";
1:ced6909: 
1:584c133:         for (Class c : object.getClass().getInterfaces()) {
1:584c133:             if (mbeanName.equals(c.getName())) {
1:584c133:                 context.registerMBean(new AnnotatedMBean(object, c), objectName);
1:584c133:                 return;
1:584c133:             }
1:584c133:         }
1:ced6909: 
1:584c133:         context.registerMBean(object, objectName);
1:2306d96:     }
1:ced6909: 
1:584c133:     /** Instance where the MBean interface is implemented by another object. */
1:584c133:     public <T> AnnotatedMBean(T impl, Class<T> mbeanInterface) throws NotCompliantMBeanException {
1:584c133:         super(impl, mbeanInterface);
16:ced6909:     }
1:ced6909: 
1:584c133:     /** Instance where the MBean interface is implemented by this object. */
1:584c133:     protected AnnotatedMBean(Class<?> mbeanInterface) throws NotCompliantMBeanException {
1:584c133:         super(mbeanInterface);
1:ced6909:     }
1:ced6909: 
1:584c133:     /** {@inheritDoc} */
1:584c133:     @Override
1:584c133:     protected String getDescription(MBeanAttributeInfo info) {
1:ced6909: 
1:584c133:         String descr = info.getDescription();
1:584c133:         Method m = getMethod(getMBeanInterface(), "get" + info.getName().substring(0, 1).toUpperCase() + info.getName().substring(1));
1:584c133:         if (m == null)
1:584c133:             m = getMethod(getMBeanInterface(), "is" + info.getName().substring(0, 1).toUpperCase() + info.getName().substring(1));
1:584c133:         if (m == null)
1:584c133:             m = getMethod(getMBeanInterface(), "does" + info.getName().substring(0, 1).toUpperCase() + info.getName().substring(1));
1:ced6909: 
1:584c133:         if (m != null) {
1:584c133:             MBeanInfo d = m.getAnnotation(MBeanInfo.class);
1:584c133:             if (d != null)
1:584c133:                 descr = d.value();
1:584c133:         }
1:584c133:         return descr;
1:ced6909:     }
1:584c133: 
1:584c133:     /** {@inheritDoc} */
1:584c133:     @Override
1:584c133:     protected String getDescription(MBeanOperationInfo op) {
1:584c133: 
1:584c133:         String descr = op.getDescription();
1:584c133:         Method m = getMethod(op);
1:584c133:         if (m != null) {
1:584c133:             MBeanInfo d = m.getAnnotation(MBeanInfo.class);
1:584c133:             if (d != null)
1:584c133:                 descr = d.value();
1:584c133:         }
1:584c133:         return descr;
1:584c133:     }
1:584c133: 
1:584c133:     /** {@inheritDoc} */
1:584c133:     @Override
1:584c133:     protected String getParameterName(MBeanOperationInfo op, MBeanParameterInfo param, int paramNo) {
1:584c133:         String name = param.getName();
1:584c133:         Method m = getMethod(op);
1:584c133:         if (m != null) {
1:584c133:             for (Annotation a : m.getParameterAnnotations()[paramNo]) {
1:584c133:                 if (MBeanInfo.class.isInstance(a))
1:584c133:                     name = MBeanInfo.class.cast(a).value();
1:584c133:             }
1:584c133:         }
1:584c133:         return name;
1:584c133:     }
1:584c133: 
1:584c133:     /**
1:584c133:      * Extracts the Method from the MBeanOperationInfo
1:584c133:      *
1:584c133:      * @param op
1:5e05df1:      *
1:5e05df1:      * @return a Method
1:584c133:      */
1:584c133:     private Method getMethod(MBeanOperationInfo op) {
1:584c133:         final MBeanParameterInfo[] params = op.getSignature();
1:584c133:         final String[] paramTypes = new String[params.length];
1:584c133:         for (int i = 0; i < params.length; i++)
1:584c133:             paramTypes[i] = params[i].getType();
1:584c133: 
1:584c133:         return getMethod(getMBeanInterface(), op.getName(), paramTypes);
1:584c133:     }
1:584c133: 
1:584c133:     /**
1:584c133:      * Returns the Method with the specified name and parameter types for the
1:584c133:      * given class, null if it doesn't exist.
1:584c133:      *
1:584c133:      * @param mbean
1:584c133:      * @param method
1:584c133:      * @param params
1:5e05df1:      *
1:5e05df1:      * @return a Method
1:584c133:      */
1:584c133:     private static Method getMethod(Class<?> mbean, String method, String... params) {
1:584c133:         try {
1:584c133:             final ClassLoader loader = mbean.getClassLoader();
1:584c133:             final Class<?>[] paramClasses = new Class<?>[params.length];
1:584c133:             for (int i = 0; i < params.length; i++) {
1:584c133:                 paramClasses[i] = primitives.get(params[i]);
1:584c133:                 if (paramClasses[i] == null)
1:584c133:                     paramClasses[i] = Class.forName(params[i], false, loader);
1:584c133:             }
1:584c133:             return mbean.getMethod(method, paramClasses);
1:584c133:         } catch (RuntimeException e) {
1:584c133:             throw e;
1:584c133:         } catch (Exception e) {
1:584c133:             return null;
1:584c133:         }
1:584c133:     }
1:2306d96: 
1:2306d96:     @Override
1:2306d96:     public Object invoke(String s, Object[] objects, String[] strings) throws MBeanException, ReflectionException {
1:d7f7083:         JMXAuditLogEntry entry = null;
1:d7f7083:         if (audit != OFF) {
1:2306d96:             Subject subject = Subject.getSubject(AccessController.getContext());
1:2306d96:             String caller = "anonymous";
1:2306d96:             if (subject != null) {
1:2306d96:                 caller = "";
1:2306d96:                 for (Principal principal : subject.getPrincipals()) {
1:7267896:                     caller += principal.getName() + " ";
1:2306d96:                 }
1:2306d96:             }
1:b026971: 
1:d7f7083:             entry = new JMXAuditLogEntry();
1:b026971:             entry.setUser(caller);
1:b026971:             entry.setTimestamp(System.currentTimeMillis());
1:b026971:             entry.setOperation(this.getMBeanInfo().getClassName() + "." + s);
1:a65ac58: 
1:a65ac58:             try
3:a65ac58:             {
1:a65ac58:                if (objects.length == strings.length)
1:a65ac58:                {
1:a65ac58:                   Method m = getMBeanMethod(this.getImplementationClass(), s, strings);
1:a65ac58:                   entry.getParameters().put("arguments", AuditLogEntry.sanitizeArguments(objects, m));
1:a65ac58:                }
1:a65ac58:                else
1:a65ac58:                {
1:a65ac58:                   // Supplied Method Signature and Arguments do not match.  Set all supplied Arguments in Log Entry.  To diagnose user error.
1:a65ac58:                   entry.getParameters().put("arguments", objects);
1:a65ac58:                }
1:a65ac58:             }
1:a65ac58:             catch (ReflectiveOperationException e)
1:a65ac58:             {
1:a65ac58:                // Method or Class not found, set all supplied arguments.  Set all supplied Arguments in Log Entry.  To diagnose user error.
1:a65ac58:                entry.getParameters().put("arguments", objects);
1:a65ac58:             }
1:b026971: 
1:d7f7083:             if ((audit&ENTRY) == ENTRY) {
1:d7f7083:                 auditLog.log(entry);
1:d7f7083:             }
1:d7f7083:         }
1:d7f7083:         Object result = super.invoke(s, objects, strings);
1:d7f7083:         if ((audit&EXIT) == EXIT) {
1:d7f7083:             entry.complete();
1:b026971:             auditLog.log(entry);
1:2306d96:         }
1:d7f7083:         return result;
1:2306d96:     }
1:a65ac58: 
1:5e05df1:     private Method getMBeanMethod(Class clazz, String methodName, String[] signature) throws ReflectiveOperationException {
1:5e05df1:         Class[] parameterTypes = new Class[signature.length];
1:5e05df1:         for (int i = 0; i < signature.length; i++) {
1:5e05df1:             parameterTypes[i] = Class.forName(signature[i]);
1:5e05df1:         }
1:5e05df1:         return clazz.getMethod(methodName, parameterTypes);
1:a65ac58:     }
1:a65ac58: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d7f7083
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1:     private static final byte OFF = 0b00;
1:     private static final byte ENTRY = 0b01;
1:     private static final byte EXIT = 0b10;
1:     private static final byte ALL = 0b11;
1: 
1:     private static byte audit = OFF;
/////////////////////////////////////////////////////////////////////////
1:         audit = byteFromProperty("org.apache.activemq.audit");
1:         if (audit != OFF) {
1:     private static byte byteFromProperty(String s) {
1:         byte val = OFF;
1:         String config = System.getProperty(s, "").toLowerCase(Locale.ENGLISH);
1:         if ("true".equals(config) || "entry".equals(config)) {
1:             val = ENTRY;
1:         } else if ("exit".equals(config)) {
1:             val = EXIT;
1:         } else if ("all".equals(config)) {
1:             val = ALL;
1:         }
1:         return val;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         JMXAuditLogEntry entry = null;
1:         if (audit != OFF) {
/////////////////////////////////////////////////////////////////////////
1:             entry = new JMXAuditLogEntry();
/////////////////////////////////////////////////////////////////////////
1:             if ((audit&ENTRY) == ENTRY) {
1:                 auditLog.log(entry);
1:             }
1:         }
1:         Object result = super.invoke(s, objects, strings);
1:         if ((audit&EXIT) == EXIT) {
1:             entry.complete();
1:         return result;
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return a Method
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return a Method
/////////////////////////////////////////////////////////////////////////
1:     private Method getMBeanMethod(Class clazz, String methodName, String[] signature) throws ReflectiveOperationException {
1:         Class[] parameterTypes = new Class[signature.length];
1:         for (int i = 0; i < signature.length; i++) {
1:             parameterTypes[i] = Class.forName(signature[i]);
1:         }
1:         return clazz.getMethod(methodName, parameterTypes);
author:Martyn Taylor
-------------------------------------------------------------------------------
commit:a65ac58
/////////////////////////////////////////////////////////////////////////
1: 
1:             try
1:             {
1:                if (objects.length == strings.length)
1:                {
1:                   Method m = getMBeanMethod(this.getImplementationClass(), s, strings);
1:                   entry.getParameters().put("arguments", AuditLogEntry.sanitizeArguments(objects, m));
1:                }
1:                else
1:                {
1:                   // Supplied Method Signature and Arguments do not match.  Set all supplied Arguments in Log Entry.  To diagnose user error.
1:                   entry.getParameters().put("arguments", objects);
1:                }
1:             }
1:             catch (ReflectiveOperationException e)
1:             {
1:                // Method or Class not found, set all supplied arguments.  Set all supplied Arguments in Log Entry.  To diagnose user error.
1:                entry.getParameters().put("arguments", objects);
1:             }
1: 
0:     private Method getMBeanMethod(Class clazz, String methodName, String[] signature) throws ReflectiveOperationException
1:     {
0:        Class[] parameterTypes = new Class[signature.length];
0:        for (int i = 0; i < signature.length; i++)
1:        {
0:           parameterTypes[i] = Class.forName(signature[i]);
1:        }
0:        return clazz.getMethod(methodName, parameterTypes);
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:584c133
/////////////////////////////////////////////////////////////////////////
1: import javax.management.MBeanAttributeInfo;
1: import javax.management.MBeanException;
1: import javax.management.MBeanOperationInfo;
1: import javax.management.MBeanParameterInfo;
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.ObjectName;
1: import javax.management.ReflectionException;
1: import javax.management.StandardMBean;
1: import org.apache.activemq.broker.util.AuditLogEntry;
1: import org.apache.activemq.broker.util.AuditLogService;
1: import org.apache.activemq.broker.util.JMXAuditLogEntry;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Map<String, Class<?>> primitives = new HashMap<String, Class<?>>();
1:     private static final Logger LOG = LoggerFactory.getLogger("org.apache.activemq.audit");
0:     private static boolean audit;
1:     private static AuditLogService auditLog;
1:     static {
1:         Class<?>[] p = { byte.class, short.class, int.class, long.class, float.class, double.class, char.class, boolean.class, };
1:         for (Class<?> c : p) {
1:             primitives.put(c.getName(), c);
1:         }
0:         audit = "true".equalsIgnoreCase(System.getProperty("org.apache.activemq.audit"));
0:         if (audit) {
1:             auditLog = AuditLogService.getAuditLog();
1:         }
1:     @SuppressWarnings({ "unchecked", "rawtypes" })
1:     public static void registerMBean(ManagementContext context, Object object, ObjectName objectName) throws Exception {
1:         String mbeanName = object.getClass().getName() + "MBean";
1:         for (Class c : object.getClass().getInterfaces()) {
1:             if (mbeanName.equals(c.getName())) {
1:                 context.registerMBean(new AnnotatedMBean(object, c), objectName);
1:                 return;
1:             }
1:         }
1:         context.registerMBean(object, objectName);
1:     /** Instance where the MBean interface is implemented by another object. */
1:     public <T> AnnotatedMBean(T impl, Class<T> mbeanInterface) throws NotCompliantMBeanException {
1:         super(impl, mbeanInterface);
1:     /** Instance where the MBean interface is implemented by this object. */
1:     protected AnnotatedMBean(Class<?> mbeanInterface) throws NotCompliantMBeanException {
1:         super(mbeanInterface);
1:     /** {@inheritDoc} */
1:     @Override
1:     protected String getDescription(MBeanAttributeInfo info) {
1:         String descr = info.getDescription();
1:         Method m = getMethod(getMBeanInterface(), "get" + info.getName().substring(0, 1).toUpperCase() + info.getName().substring(1));
1:         if (m == null)
1:             m = getMethod(getMBeanInterface(), "is" + info.getName().substring(0, 1).toUpperCase() + info.getName().substring(1));
1:         if (m == null)
1:             m = getMethod(getMBeanInterface(), "does" + info.getName().substring(0, 1).toUpperCase() + info.getName().substring(1));
1:         if (m != null) {
1:             MBeanInfo d = m.getAnnotation(MBeanInfo.class);
1:             if (d != null)
1:                 descr = d.value();
1:         }
1:         return descr;
1: 
1:     /** {@inheritDoc} */
1:     @Override
1:     protected String getDescription(MBeanOperationInfo op) {
1: 
1:         String descr = op.getDescription();
1:         Method m = getMethod(op);
1:         if (m != null) {
1:             MBeanInfo d = m.getAnnotation(MBeanInfo.class);
1:             if (d != null)
1:                 descr = d.value();
1:         }
1:         return descr;
1:     }
1: 
1:     /** {@inheritDoc} */
1:     @Override
1:     protected String getParameterName(MBeanOperationInfo op, MBeanParameterInfo param, int paramNo) {
1:         String name = param.getName();
1:         Method m = getMethod(op);
1:         if (m != null) {
1:             for (Annotation a : m.getParameterAnnotations()[paramNo]) {
1:                 if (MBeanInfo.class.isInstance(a))
1:                     name = MBeanInfo.class.cast(a).value();
1:             }
1:         }
1:         return name;
1:     }
1: 
1:     /**
1:      * Extracts the Method from the MBeanOperationInfo
1:      *
1:      * @param op
0:      * @return
1:      */
1:     private Method getMethod(MBeanOperationInfo op) {
1:         final MBeanParameterInfo[] params = op.getSignature();
1:         final String[] paramTypes = new String[params.length];
1:         for (int i = 0; i < params.length; i++)
1:             paramTypes[i] = params[i].getType();
1: 
1:         return getMethod(getMBeanInterface(), op.getName(), paramTypes);
1:     }
1: 
1:     /**
1:      * Returns the Method with the specified name and parameter types for the
1:      * given class, null if it doesn't exist.
1:      *
1:      * @param mbean
1:      * @param method
1:      * @param params
0:      * @return
1:      */
1:     private static Method getMethod(Class<?> mbean, String method, String... params) {
1:         try {
1:             final ClassLoader loader = mbean.getClassLoader();
1:             final Class<?>[] paramClasses = new Class<?>[params.length];
1:             for (int i = 0; i < params.length; i++) {
1:                 paramClasses[i] = primitives.get(params[i]);
1:                 if (paramClasses[i] == null)
1:                     paramClasses[i] = Class.forName(params[i], false, loader);
1:             }
1:             return mbean.getMethod(method, paramClasses);
1:         } catch (RuntimeException e) {
1:             throw e;
1:         } catch (Exception e) {
1:             return null;
1:         }
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:   private static final Logger LOG = LoggerFactory.getLogger("org.apache.activemq.audit");
commit:b026971
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.util.*;
/////////////////////////////////////////////////////////////////////////
1: 
0:             AuditLogEntry entry = new JMXAuditLogEntry();
1:             entry.setUser(caller);
1:             entry.setTimestamp(System.currentTimeMillis());
1:             entry.setOperation(this.getMBeanInfo().getClassName() + "." + s);
0:             entry.getParameters().put("arguments", objects);
1: 
1:             auditLog.log(entry);
commit:7b1cdbc
/////////////////////////////////////////////////////////////////////////
0:         auditLog = AuditLogService.getAuditLog();
commit:1f9cc43
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.util.AuditLogService;
/////////////////////////////////////////////////////////////////////////
0:   private static AuditLogService auditLog;
/////////////////////////////////////////////////////////////////////////
0:     if (audit) {
0:         auditLog = new AuditLogService();
1:     }
commit:10a403b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.util.AuditLog;
0: import org.apache.activemq.broker.util.DefaultAuditLog;
/////////////////////////////////////////////////////////////////////////
0:   private static AuditLog auditLog;
/////////////////////////////////////////////////////////////////////////
0:     auditLog = DefaultAuditLog.getAuditLog();
/////////////////////////////////////////////////////////////////////////
0:             auditLog.log(caller.trim() + " called " + this.getMBeanInfo().getClassName() + "." + s  + Arrays.toString(objects));
commit:a2d4eb5
/////////////////////////////////////////////////////////////////////////
0:             LOG.info(caller.trim() + " called " + this.getMBeanInfo().getClassName() + "." + s  + Arrays.toString(objects));
commit:7267896
/////////////////////////////////////////////////////////////////////////
1:                     caller += principal.getName() + " ";
0:             LOG.info(caller.trim() + " called " + this.getMBeanInfo().getClassName() + "." + s  + Arrays.toString(objects) + "");
commit:2306d96
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import java.security.AccessController;
1: import java.security.Principal;
0: import java.util.Arrays;
0: import javax.management.*;
1: import javax.security.auth.Subject;
/////////////////////////////////////////////////////////////////////////
1: 
0:   private static final Log LOG = LogFactory.getLog("org.apache.activemq.audit");
1: 
0:   private static boolean audit;
1: 
0:     for (Class<?> c : p) {
1:     }
0:     audit = "true".equalsIgnoreCase(System.getProperty("org.apache.activemq.audit"));
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public Object invoke(String s, Object[] objects, String[] strings) throws MBeanException, ReflectionException {
0:         if (audit) {
1:             Subject subject = Subject.getSubject(AccessController.getContext());
1:             String caller = "anonymous";
1:             if (subject != null) {
1:                 caller = "";
1:                 for (Principal principal : subject.getPrincipals()) {
0:                     caller += principal + " ";
1:                 }
1:             }
0:             LOG.info(caller + " called " + this.getMBeanInfo().getClassName() + "." + s  + Arrays.toString(objects) + "");
1:         }
0:         return super.invoke(s, objects, strings);
1:     }
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.lang.annotation.Annotation;
1: import java.lang.reflect.Method;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import javax.management.InstanceAlreadyExistsException;
0: import javax.management.MBeanAttributeInfo;
0: import javax.management.MBeanOperationInfo;
0: import javax.management.MBeanParameterInfo;
0: import javax.management.MBeanRegistrationException;
0: import javax.management.MBeanServer;
0: import javax.management.NotCompliantMBeanException;
0: import javax.management.ObjectName;
0: import javax.management.StandardMBean;
1: 
1: /**
1:  * MBean that looks for method/parameter descriptions in the Info annotation.
1:  */
1: public class AnnotatedMBean extends StandardMBean {
1: 
0:   private static final Map<String, Class<?>> primitives = new HashMap<String, Class<?>>();
0:   static {
0:     Class<?>[] p = { byte.class, short.class, int.class, long.class, float.class, double.class, char.class, boolean.class, };
0:     for (Class<?> c : p)
0:       primitives.put(c.getName(), c);
1:   }
1:   
0:   @SuppressWarnings("unchecked")
0:   public static void registerMBean(ManagementContext context, Object object, ObjectName objectName) 
0:     throws Exception {
1: 
0:     String mbeanName = object.getClass().getName() + "MBean";
1:     
0:     for (Class c : object.getClass().getInterfaces()) {
0:       if (mbeanName.equals(c.getName())) {
0:         context.registerMBean(new AnnotatedMBean(object, c), objectName);
0:         return;
1:       }
1:     }
1: 
0:     context.registerMBean(object, objectName);
1:   }
1:   
0:   /** Instance where the MBean interface is implemented by another object. */
0:   public <T> AnnotatedMBean(T impl, Class<T> mbeanInterface) throws NotCompliantMBeanException {
0:     super(impl, mbeanInterface);
1:   }
1: 
0:   /** Instance where the MBean interface is implemented by this object. */
0:   protected AnnotatedMBean(Class<?> mbeanInterface) throws NotCompliantMBeanException {
0:     super(mbeanInterface);
1:   }
1: 
0:   /** {@inheritDoc} */
0:   @Override
0:   protected String getDescription(MBeanAttributeInfo info) {
1: 
0:     String descr = info.getDescription();
0:     Method m = getMethod(getMBeanInterface(), "get"+info.getName().substring(0, 1).toUpperCase()+info.getName().substring(1));
0:     if (m == null)
0:       m = getMethod(getMBeanInterface(), "is"+info.getName().substring(0, 1).toUpperCase()+info.getName().substring(1));
0:     if (m == null)
0:       m = getMethod(getMBeanInterface(), "does"+info.getName().substring(0, 1).toUpperCase()+info.getName().substring(1));
1:       
0:     if (m != null) {
0:       MBeanInfo d = m.getAnnotation(MBeanInfo.class);
0:       if (d != null)
0:         descr = d.value();
1:     }
0:     return descr;
1:   }
1:   
0:   /** {@inheritDoc} */
0:   @Override
0:   protected String getDescription(MBeanOperationInfo op) {
1: 
0:     String descr = op.getDescription();
0:     Method m = getMethod(op);
0:     if (m != null) {
0:       MBeanInfo d = m.getAnnotation(MBeanInfo.class);
0:       if (d != null)
0:         descr = d.value();
1:     }
0:     return descr;
1:   }
1: 
0:   /** {@inheritDoc} */
0:   @Override
0:   protected String getParameterName(MBeanOperationInfo op, MBeanParameterInfo param, int paramNo) {
0:     String name = param.getName();
0:     Method m = getMethod(op);
0:     if (m != null) {
0:       for (Annotation a : m.getParameterAnnotations()[paramNo]) {
0:         if (MBeanInfo.class.isInstance(a))
0:           name = MBeanInfo.class.cast(a).value();
1:       }
1:     }
0:     return name;
1:   }
1: 
1:   /**
0:    * Extracts the Method from the MBeanOperationInfo
0:    * @param op
0:    * @return
1:    */
0:   private Method getMethod(MBeanOperationInfo op) {
0:     final MBeanParameterInfo[] params = op.getSignature();
0:     final String[] paramTypes = new String[params.length];
0:     for (int i = 0; i < params.length; i++)
0:       paramTypes[i] = params[i].getType();
1: 
0:     return getMethod(getMBeanInterface(), op.getName(), paramTypes);
1:   }
1: 
1:   /**
0:    * Returns the Method with the specified name and parameter types for the given class,
0:    * null if it doesn't exist.
0:    * @param mbean
0:    * @param method
0:    * @param params
0:    * @return
1:    */
0:   private static Method getMethod(Class<?> mbean, String method, String... params) {
0:     try {
0:       final ClassLoader loader = mbean.getClassLoader();
0:       final Class<?>[] paramClasses = new Class<?>[params.length];
0:       for (int i = 0; i < params.length; i++) {
0:         paramClasses[i] = primitives.get(params[i]);
0:         if (paramClasses[i] == null)
0:           paramClasses[i] = Class.forName(params[i], false, loader);
1:       }
0:       return mbean.getMethod(method, paramClasses);
0:     } catch (RuntimeException e) {
0:       throw e;
0:     } catch (Exception e) {
0:       return null;
1:     }
1:   }
1: }
============================================================================