1:5361df1: /**
1:5361df1:  *
1:5361df1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5361df1:  * contributor license agreements.  See the NOTICE file distributed with
1:5361df1:  * this work for additional information regarding copyright ownership.
1:5361df1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5361df1:  * (the "License"); you may not use this file except in compliance with
1:5361df1:  * the License.  You may obtain a copy of the License at
1:5361df1:  *
1:5361df1:  * http://www.apache.org/licenses/LICENSE-2.0
1:5361df1:  *
1:5361df1:  * Unless required by applicable law or agreed to in writing, software
1:5361df1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5361df1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5361df1:  * See the License for the specific language governing permissions and
1:5361df1:  * limitations under the License.
1:5361df1:  */
1:5361df1: package org.apache.activemq.spring;
1:5361df1: 
1:5361df1: import java.util.Arrays;
1:5361df1: 
1:5361df1: import junit.framework.TestCase;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:5361df1: 
1:5361df1: /**
1:b0c2a40:  * 
1:5361df1:  */
1:5361df1: public class ActiveMQConnectionFactoryFactoryBeanTest extends TestCase {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(ActiveMQConnectionFactoryFactoryBeanTest.class);
1:5361df1: 
1:5361df1:     private ActiveMQConnectionFactoryFactoryBean factory;
1:5361df1: 
1:5361df1: 
1:5361df1:     public void testSingleTcpURL() throws Exception {
1:5361df1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:5361df1:         assertCreatedURL("failover:(tcp://localhost:61616)");
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void testSingleTcpURLWithInactivityTimeout() throws Exception {
1:5361df1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:5361df1:         factory.setMaxInactivityDuration(60000L);
1:5361df1:         assertCreatedURL("failover:(tcp://localhost:61616?wireFormat.maxInactivityDuration=60000)");
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void testSingleTcpURLWithInactivityTimeoutAndTcpNoDelay() throws Exception {
1:5361df1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:5361df1:         factory.setMaxInactivityDuration(50000L);
1:5361df1:         factory.setTcpProperties("tcpNoDelayEnabled=true");
1:5361df1:         assertCreatedURL("failover:(tcp://localhost:61616?wireFormat.maxInactivityDuration=50000&tcpNoDelayEnabled=true)");
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void testSingleTcpURLWithInactivityTimeoutAndMaxReconnectDelay() throws Exception {
1:5361df1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:5361df1:         factory.setMaxInactivityDuration(60000L);
1:5361df1:         factory.setMaxReconnectDelay(50000L);
1:5361df1:         assertCreatedURL("failover:(tcp://localhost:61616?wireFormat.maxInactivityDuration=60000)?maxReconnectDelay=50000");
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void testSingleTcpURLWithInactivityTimeoutAndMaxReconnectDelayAndFailoverProperty() throws Exception {
1:5361df1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:5361df1:         factory.setMaxInactivityDuration(40000L);
1:5361df1:         factory.setMaxReconnectDelay(30000L);
1:5361df1:         factory.setFailoverProperties("useExponentialBackOff=false");
1:5361df1: 
1:5361df1:         assertCreatedURL("failover:(tcp://localhost:61616?wireFormat.maxInactivityDuration=40000)?maxReconnectDelay=30000&useExponentialBackOff=false");
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void testMultipleTcpURLsWithInactivityTimeoutAndMaxReconnectDelayAndFailoverProperty() throws Exception {
1:5361df1:         factory.setTcpHostAndPorts(Arrays.asList(new String[] {"tcp://localhost:61618", "tcp://foo:61619"}));
1:5361df1:         factory.setMaxInactivityDuration(40000L);
1:5361df1:         factory.setMaxReconnectDelay(30000L);
1:5361df1:         factory.setFailoverProperties("useExponentialBackOff=false");
1:5361df1: 
1:5361df1:         assertCreatedURL("failover:(tcp://localhost:61618?wireFormat.maxInactivityDuration=40000,tcp://foo:61619?wireFormat.maxInactivityDuration=40000)?maxReconnectDelay=30000&useExponentialBackOff=false");
1:5361df1:     }
1:5361df1: 
1:5361df1:     protected void assertCreatedURL(String expectedURL) throws Exception {
1:5361df1:         String url = factory.getBrokerURL();
1:5361df1:         LOG.debug("Generated URL: " + url);
1:5361df1: 
1:5361df1:         assertEquals("URL", expectedURL, url);
1:5361df1:         Object value = factory.getObject();
1:5361df1:         assertTrue("Value should be an ActiveMQConnectionFactory", value instanceof ActiveMQConnectionFactory);
1:5361df1:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory) value;
1:5361df1:         String brokerURL = connectionFactory.getBrokerURL();
1:5361df1:         assertEquals("brokerURL", expectedURL, brokerURL);
1:5361df1:     }
1:5361df1: 
1:5361df1:     @Override
1:5361df1:     protected void setUp() throws Exception {
1:5361df1:         factory = new ActiveMQConnectionFactoryFactoryBean();
1:5361df1:     }
1:5361df1: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(ActiveMQConnectionFactoryFactoryBeanTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:5361df1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.spring;
1: 
1: import java.util.Arrays;
1: 
1: import junit.framework.TestCase;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision: 1.1 $
1:  */
1: public class ActiveMQConnectionFactoryFactoryBeanTest extends TestCase {
0:     private static final transient Log LOG = LogFactory.getLog(ActiveMQConnectionFactoryFactoryBeanTest.class);
1: 
1:     private ActiveMQConnectionFactoryFactoryBean factory;
1: 
1: 
1:     public void testSingleTcpURL() throws Exception {
1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:         assertCreatedURL("failover:(tcp://localhost:61616)");
1:     }
1: 
1:     public void testSingleTcpURLWithInactivityTimeout() throws Exception {
1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:         factory.setMaxInactivityDuration(60000L);
1:         assertCreatedURL("failover:(tcp://localhost:61616?wireFormat.maxInactivityDuration=60000)");
1:     }
1: 
1:     public void testSingleTcpURLWithInactivityTimeoutAndTcpNoDelay() throws Exception {
1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:         factory.setMaxInactivityDuration(50000L);
1:         factory.setTcpProperties("tcpNoDelayEnabled=true");
1:         assertCreatedURL("failover:(tcp://localhost:61616?wireFormat.maxInactivityDuration=50000&tcpNoDelayEnabled=true)");
1:     }
1: 
1:     public void testSingleTcpURLWithInactivityTimeoutAndMaxReconnectDelay() throws Exception {
1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:         factory.setMaxInactivityDuration(60000L);
1:         factory.setMaxReconnectDelay(50000L);
1:         assertCreatedURL("failover:(tcp://localhost:61616?wireFormat.maxInactivityDuration=60000)?maxReconnectDelay=50000");
1:     }
1: 
1:     public void testSingleTcpURLWithInactivityTimeoutAndMaxReconnectDelayAndFailoverProperty() throws Exception {
1:         factory.setTcpHostAndPort("tcp://localhost:61616");
1:         factory.setMaxInactivityDuration(40000L);
1:         factory.setMaxReconnectDelay(30000L);
1:         factory.setFailoverProperties("useExponentialBackOff=false");
1: 
1:         assertCreatedURL("failover:(tcp://localhost:61616?wireFormat.maxInactivityDuration=40000)?maxReconnectDelay=30000&useExponentialBackOff=false");
1:     }
1: 
1:     public void testMultipleTcpURLsWithInactivityTimeoutAndMaxReconnectDelayAndFailoverProperty() throws Exception {
1:         factory.setTcpHostAndPorts(Arrays.asList(new String[] {"tcp://localhost:61618", "tcp://foo:61619"}));
1:         factory.setMaxInactivityDuration(40000L);
1:         factory.setMaxReconnectDelay(30000L);
1:         factory.setFailoverProperties("useExponentialBackOff=false");
1: 
1:         assertCreatedURL("failover:(tcp://localhost:61618?wireFormat.maxInactivityDuration=40000,tcp://foo:61619?wireFormat.maxInactivityDuration=40000)?maxReconnectDelay=30000&useExponentialBackOff=false");
1:     }
1: 
1:     protected void assertCreatedURL(String expectedURL) throws Exception {
1:         String url = factory.getBrokerURL();
1:         LOG.debug("Generated URL: " + url);
1: 
1:         assertEquals("URL", expectedURL, url);
1:         Object value = factory.getObject();
1:         assertTrue("Value should be an ActiveMQConnectionFactory", value instanceof ActiveMQConnectionFactory);
1:         ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory) value;
1:         String brokerURL = connectionFactory.getBrokerURL();
1:         assertEquals("brokerURL", expectedURL, brokerURL);
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         factory = new ActiveMQConnectionFactoryFactoryBean();
1:     }
1: }
============================================================================