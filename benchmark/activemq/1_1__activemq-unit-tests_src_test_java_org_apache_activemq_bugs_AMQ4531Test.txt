1:66c8f9c: /**
1:66c8f9c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:66c8f9c:  * contributor license agreements.  See the NOTICE file distributed with
1:66c8f9c:  * this work for additional information regarding copyright ownership.
1:66c8f9c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:66c8f9c:  * (the "License"); you may not use this file except in compliance with
1:66c8f9c:  * the License.  You may obtain a copy of the License at
1:66c8f9c:  *
1:66c8f9c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:66c8f9c:  *
1:66c8f9c:  * Unless required by applicable law or agreed to in writing, software
1:66c8f9c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:66c8f9c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:66c8f9c:  * See the License for the specific language governing permissions and
1:66c8f9c:  * limitations under the License.
1:66c8f9c:  */
1:e731c39: package org.apache.activemq.bugs;
1:e731c39: 
1:e731c39: import java.io.PrintWriter;
1:e731c39: import java.io.StringWriter;
1:e731c39: import java.io.Writer;
1:e731c39: import java.lang.management.ManagementFactory;
1:e731c39: import java.util.concurrent.CountDownLatch;
1:e731c39: 
1:e731c39: import javax.management.MBeanServer;
1:e731c39: import javax.management.ObjectName;
1:e731c39: 
1:e731c39: import junit.framework.Test;
1:e731c39: import junit.framework.TestCase;
1:e731c39: import junit.framework.TestSuite;
1:e731c39: 
1:e731c39: import org.apache.activemq.ActiveMQConnection;
1:e731c39: import org.apache.activemq.ActiveMQConnectionFactory;
1:e731c39: import org.apache.activemq.broker.BrokerService;
1:e731c39: import org.apache.activemq.util.Wait;
1:e731c39: import org.slf4j.Logger;
1:e731c39: import org.slf4j.LoggerFactory;
1:e731c39: 
1:e731c39: /**
1:e731c39:  * Unit test for simple App.
1:e731c39:  */
1:e731c39: public class AMQ4531Test extends TestCase {
1:e731c39: 
1:e731c39:     private final Logger LOG = LoggerFactory.getLogger(AMQ4531Test.class);
1:e731c39: 
1:e731c39:     private String connectionURI;
1:e731c39:     private MBeanServer mbeanServer;
1:e731c39:     private BrokerService broker;
1:e731c39: 
1:e731c39:     @Override
1:e731c39:     protected void setUp() throws Exception {
1:e731c39:         super.setUp();
1:e731c39:         broker = new BrokerService();
1:e731c39:         connectionURI = broker.addConnector("tcp://0.0.0.0:0?maximumConnections=1").getPublishableConnectString();
1:e731c39:         broker.setPersistent(false);
1:e731c39:         broker.start();
1:e731c39:         mbeanServer = ManagementFactory.getPlatformMBeanServer();
1:e731c39:     }
1:e731c39: 
1:e731c39:     @Override
1:e731c39:     protected void tearDown() throws Exception {
1:e731c39:         broker.stop();
1:e731c39:         super.tearDown();
1:e731c39:     }
1:e731c39: 
1:e731c39:     /**
1:e731c39:      * Create the test case
1:e731c39:      *
1:e731c39:      * @param testName
1:e731c39:      *            name of the test case
1:e731c39:      */
1:e731c39:     public AMQ4531Test(String testName) {
1:e731c39:         super(testName);
1:e731c39:     }
1:e731c39: 
1:e731c39:     /**
1:e731c39:      * @return the suite of tests being tested
1:e731c39:      */
1:e731c39:     public static Test suite() {
1:e731c39:         return new TestSuite(AMQ4531Test.class);
1:e731c39:     }
1:e731c39: 
1:e731c39:     public void testFDSLeak() throws Exception {
1:e731c39: 
1:e731c39:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:e731c39:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:e731c39:         connection.start();
1:e731c39: 
1:e731c39:         int connections = 100;
1:e731c39:         final long original = openFileDescriptorCount();
1:e731c39:         LOG.info("FD count: " + original);
1:e731c39:         final CountDownLatch done = new CountDownLatch(connections);
1:e731c39:         for (int i = 0; i < connections; i++) {
1:e731c39:             new Thread("worker: " + i) {
1:e731c39:                 @Override
1:e731c39:                 public void run() {
1:e731c39:                     ActiveMQConnection connection = null;
1:e731c39:                     try {
1:e731c39:                         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:e731c39:                         connection = (ActiveMQConnection) factory.createConnection();
1:e731c39:                         connection.start();
1:e731c39:                     } catch (Exception e) {
1:e731c39:                         LOG.debug(getStack(e));
1:e731c39:                     } finally {
1:e731c39:                         try {
1:e731c39:                             connection.close();
1:e731c39:                         } catch (Exception e) {
1:e731c39:                             LOG.debug(getStack(e));
1:e731c39:                         }
1:e731c39:                         done.countDown();
1:e731c39:                         LOG.debug("Latch count down called.");
1:e731c39:                     }
1:e731c39:                 }
1:e731c39:             }.start();
1:e731c39:         }
1:e731c39: 
1:e731c39:         // Wait for all the clients to finish
1:e731c39:         LOG.info("Waiting for latch...");
1:e731c39:         done.await();
1:e731c39:         LOG.info("Latch complete.");
1:e731c39:         LOG.info("FD count: " + openFileDescriptorCount());
1:e731c39: 
1:e731c39:         assertTrue("Too many open file descriptors: " + openFileDescriptorCount(), Wait.waitFor(new Wait.Condition() {
1:e731c39: 
1:e731c39:             @Override
1:e731c39:             public boolean isSatisified() throws Exception {
1:e731c39:                 long openFDs = openFileDescriptorCount();
1:e731c39:                 LOG.info("Current FD count [{}], original FD count[{}]", openFDs, original);
1:e731c39:                 return (openFDs - original) < 10;
1:e731c39:             }
1:e731c39:         }));
1:e731c39:     }
1:e731c39: 
1:e731c39:     private long openFileDescriptorCount() throws Exception {
1:e731c39:         return ((Long) mbeanServer.getAttribute(new ObjectName("java.lang:type=OperatingSystem"), "OpenFileDescriptorCount")).longValue();
1:e731c39:     }
1:e731c39: 
1:e731c39:     private String getStack(Throwable aThrowable) {
1:e731c39:         final Writer result = new StringWriter();
1:e731c39:         final PrintWriter printWriter = new PrintWriter(result);
1:e731c39:         aThrowable.printStackTrace(printWriter);
1:e731c39:         return result.toString();
1:e731c39:     }
1:e731c39: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:66c8f9c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:e731c39
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
1: 
1: import java.io.PrintWriter;
1: import java.io.StringWriter;
1: import java.io.Writer;
1: import java.lang.management.ManagementFactory;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
1: import junit.framework.Test;
1: import junit.framework.TestCase;
1: import junit.framework.TestSuite;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Unit test for simple App.
1:  */
1: public class AMQ4531Test extends TestCase {
1: 
1:     private final Logger LOG = LoggerFactory.getLogger(AMQ4531Test.class);
1: 
1:     private String connectionURI;
1:     private MBeanServer mbeanServer;
1:     private BrokerService broker;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         broker = new BrokerService();
1:         connectionURI = broker.addConnector("tcp://0.0.0.0:0?maximumConnections=1").getPublishableConnectString();
1:         broker.setPersistent(false);
1:         broker.start();
1:         mbeanServer = ManagementFactory.getPlatformMBeanServer();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Create the test case
1:      *
1:      * @param testName
1:      *            name of the test case
1:      */
1:     public AMQ4531Test(String testName) {
1:         super(testName);
1:     }
1: 
1:     /**
1:      * @return the suite of tests being tested
1:      */
1:     public static Test suite() {
1:         return new TestSuite(AMQ4531Test.class);
1:     }
1: 
1:     public void testFDSLeak() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.start();
1: 
1:         int connections = 100;
1:         final long original = openFileDescriptorCount();
1:         LOG.info("FD count: " + original);
1:         final CountDownLatch done = new CountDownLatch(connections);
1:         for (int i = 0; i < connections; i++) {
1:             new Thread("worker: " + i) {
1:                 @Override
1:                 public void run() {
1:                     ActiveMQConnection connection = null;
1:                     try {
1:                         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:                         connection = (ActiveMQConnection) factory.createConnection();
1:                         connection.start();
1:                     } catch (Exception e) {
1:                         LOG.debug(getStack(e));
1:                     } finally {
1:                         try {
1:                             connection.close();
1:                         } catch (Exception e) {
1:                             LOG.debug(getStack(e));
1:                         }
1:                         done.countDown();
1:                         LOG.debug("Latch count down called.");
1:                     }
1:                 }
1:             }.start();
1:         }
1: 
1:         // Wait for all the clients to finish
1:         LOG.info("Waiting for latch...");
1:         done.await();
1:         LOG.info("Latch complete.");
1:         LOG.info("FD count: " + openFileDescriptorCount());
1: 
1:         assertTrue("Too many open file descriptors: " + openFileDescriptorCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 long openFDs = openFileDescriptorCount();
1:                 LOG.info("Current FD count [{}], original FD count[{}]", openFDs, original);
1:                 return (openFDs - original) < 10;
1:             }
1:         }));
1:     }
1: 
1:     private long openFileDescriptorCount() throws Exception {
1:         return ((Long) mbeanServer.getAttribute(new ObjectName("java.lang:type=OperatingSystem"), "OpenFileDescriptorCount")).longValue();
1:     }
1: 
1:     private String getStack(Throwable aThrowable) {
1:         final Writer result = new StringWriter();
1:         final PrintWriter printWriter = new PrintWriter(result);
1:         aThrowable.printStackTrace(printWriter);
1:         return result.toString();
1:     }
1: }
============================================================================