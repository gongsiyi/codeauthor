1:8be1486: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:c7d559f:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:10c6b29:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:10c6b29: package org.apache.activemq.broker.policy;
6:10c6b29: 
1:1554954: import java.util.Enumeration;
1:1554954: 
1:1554954: import javax.jms.DeliveryMode;
1:74a7a8b: import javax.jms.Destination;
1:1554954: import javax.jms.Message;
1:1554954: import javax.jms.MessageConsumer;
1:1554954: import javax.jms.Queue;
1:74a7a8b: 
1:1554954: import org.apache.activemq.ActiveMQConnection;
1:10c6b29: import org.apache.activemq.broker.BrokerService;
1:0d85869: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:10c6b29: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1:10c6b29: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:10c6b29: import org.apache.activemq.broker.region.policy.PolicyMap;
1:10c6b29: import org.apache.activemq.command.ActiveMQQueue;
1:be919fb: import org.apache.activemq.command.ActiveMQTopic;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:1554954: 
1:10c6b29: public class IndividualDeadLetterTest extends DeadLetterTest {
1:8be1486: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(IndividualDeadLetterTest.class);
1:1554954: 
1:c7d559f:     @Override
1:10c6b29:     protected BrokerService createBroker() throws Exception {
1:10c6b29:         BrokerService broker = super.createBroker();
1:10c6b29: 
1:10c6b29:         PolicyEntry policy = new PolicyEntry();
1:0d85869:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:0d85869:         strategy.setProcessNonPersistent(true);
1:0d85869:         policy.setDeadLetterStrategy(strategy);
1:10c6b29: 
1:10c6b29:         PolicyMap pMap = new PolicyMap();
1:be919fb:         pMap.put(new ActiveMQQueue(getDestinationString()), policy);
1:be919fb:         pMap.put(new ActiveMQTopic(getDestinationString()), policy);
1:10c6b29: 
1:10c6b29:         broker.setDestinationPolicy(pMap);
1:10c6b29: 
1:10c6b29:         return broker;
1:10c6b29:     }
1:1554954: 
1:c7d559f:     @Override
1:10c6b29:     protected Destination createDlqDestination() {
1:74a7a8b:         String prefix = topic ? "ActiveMQ.DLQ.Topic." : "ActiveMQ.DLQ.Queue.";
1:1f3f80c:         return new ActiveMQQueue(prefix + getClass().getName() + "." + getName());
1:10c6b29:     }
1:c7d559f: 
1:1554954:     public void testDLQBrowsing() throws Exception {
1:1554954:         super.topic = false;
1:1554954:         deliveryMode = DeliveryMode.PERSISTENT;
1:1554954:         durableSubscriber = false;
1:1554954:         messageCount = 1;
1:1554954: 
1:1554954:         connection.start();
1:1554954: 
1:1554954:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:1554954:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:1554954:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1:1554954: 
1:1554954:         sendMessages();
1:1554954: 
1:1554954:         // now lets receive and rollback N times
1:1554954:         for (int i = 0; i < rollbackCount; i++) {
1:1554954:             makeConsumer();
1:1554954:             Message message = consumer.receive(5000);
1:1554954:             assertNotNull("No message received: ", message);
1:1554954: 
1:1554954:             session.rollback();
1:1554954:             LOG.info("Rolled back: " + rollbackCount + " times");
1:1554954:             consumer.close();
1:1554954:         }
1:1554954: 
1:1554954:         makeDlqBrowser();
1:1554954:         browseDlq();
1:1554954:         dlqBrowser.close();
1:1554954:         session.close();
1:1554954:         Thread.sleep(1000);
1:1554954:         session = connection.createSession(transactedMode, acknowledgeMode);
1:1554954:         Queue testQueue = new ActiveMQQueue("ActiveMQ.DLQ.Queue.ActiveMQ.DLQ.Queue." + getClass().getName() + "." + getName());
1:1554954:         MessageConsumer testConsumer = session.createConsumer(testQueue);
1:1554954:         assertNull("The message shouldn't be sent to another DLQ", testConsumer.receive(1000));
1:1554954:     }
1:c7d559f: 
1:1554954:     protected void browseDlq() throws Exception {
1:c7d559f:         Enumeration<?> messages = dlqBrowser.getEnumeration();
1:1554954:         while (messages.hasMoreElements()) {
1:1554954:             LOG.info("Browsing: " + messages.nextElement());
1:1554954:         }
1:1554954:     }
1:10c6b29: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8be1486
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:be919fb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1:         pMap.put(new ActiveMQQueue(getDestinationString()), policy);
1:         pMap.put(new ActiveMQTopic(getDestinationString()), policy);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:  *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         Enumeration<?> messages = dlqBrowser.getEnumeration();
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: 
/////////////////////////////////////////////////////////////////////////
1:         String prefix = topic ? "ActiveMQ.DLQ.Topic." : "ActiveMQ.DLQ.Queue.";
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(IndividualDeadLetterTest.class);
commit:1554954
/////////////////////////////////////////////////////////////////////////
1: import java.util.Enumeration;
1: import javax.jms.DeliveryMode;
0: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Queue;
1: 
1: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(IndividualDeadLetterTest.class);
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testDLQBrowsing() throws Exception {
1:         super.topic = false;
1:         deliveryMode = DeliveryMode.PERSISTENT;
1:         durableSubscriber = false;
1:         messageCount = 1;
1: 
1:         connection.start();
1: 
1:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1: 
1:         sendMessages();
1: 
1:         // now lets receive and rollback N times
1:         for (int i = 0; i < rollbackCount; i++) {
1:             makeConsumer();
1:             Message message = consumer.receive(5000);
1:             assertNotNull("No message received: ", message);
1: 
1:             session.rollback();
1:             LOG.info("Rolled back: " + rollbackCount + " times");
1:             consumer.close();
1:         }
1: 
1:         makeDlqBrowser();
1:         browseDlq();
1:         dlqBrowser.close();
1:         session.close();
1:         Thread.sleep(1000);
1:         session = connection.createSession(transactedMode, acknowledgeMode);
1:         Queue testQueue = new ActiveMQQueue("ActiveMQ.DLQ.Queue.ActiveMQ.DLQ.Queue." + getClass().getName() + "." + getName());
1:         MessageConsumer testConsumer = session.createConsumer(testQueue);
1:         assertNull("The message shouldn't be sent to another DLQ", testConsumer.receive(1000));
1: 
1:     }
1:     
1:     protected void browseDlq() throws Exception {
0:         Enumeration messages = dlqBrowser.getEnumeration();
1:         while (messages.hasMoreElements()) {
1:             LOG.info("Browsing: " + messages.nextElement());
1:         }
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:0d85869
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
/////////////////////////////////////////////////////////////////////////
1:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:         strategy.setProcessNonPersistent(true);
1:         policy.setDeadLetterStrategy(strategy);
author:James Strachan
-------------------------------------------------------------------------------
commit:1f3f80c
/////////////////////////////////////////////////////////////////////////
0:         String prefix = (topic) ? "ActiveMQ.DLQ.Topic.": "ActiveMQ.DLQ.Queue.";
1:         return new ActiveMQQueue(prefix + getClass().getName() + "." + getName());
commit:10c6b29
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq.broker.policy;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: import javax.jms.Destination;
1: 
0: /**
0:  *
0:  * @version $Revision$
0:  */
1: public class IndividualDeadLetterTest extends DeadLetterTest {
1: 
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1: 
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setDeadLetterStrategy(new IndividualDeadLetterStrategy());
1: 
1:         PolicyMap pMap = new PolicyMap();
0:         pMap.setDefaultEntry(policy);
1: 
1:         broker.setDestinationPolicy(pMap);
1: 
1:         return broker;
1:     }
1: 
1:     protected Destination createDlqDestination() {
0:         return new ActiveMQQueue("ActiveMQ.DLQ.Queue." + getClass().getName() + "." + getName());
1:     }
1: }
============================================================================