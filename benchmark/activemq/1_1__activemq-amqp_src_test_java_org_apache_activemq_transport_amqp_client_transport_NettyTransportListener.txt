1:4b018b4: /*
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82a5839:  * contributor license agreements.  See the NOTICE file distributed with
1:82a5839:  * this work for additional information regarding copyright ownership.
1:82a5839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82a5839:  * (the "License"); you may not use this file except in compliance with
1:82a5839:  * the License.  You may obtain a copy of the License at
1:82a5839:  *
1:82a5839:  *      http://www.apache.org/licenses/LICENSE-2.0
1:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing, software
1:82a5839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82a5839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82a5839:  * See the License for the specific language governing permissions and
1:82a5839:  * limitations under the License.
1:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.transport;
1:82a5839: 
1:82a5839: import io.netty.buffer.ByteBuf;
1:82a5839: 
2:82a5839: /**
1:82a5839:  * Listener interface that should be implemented by users of the various
1:82a5839:  * QpidJMS Transport classes.
1:82a5839:  */
1:82a5839: public interface NettyTransportListener {
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Called when new incoming data has become available.
1:82a5839:      *
1:82a5839:      * @param incoming
1:82a5839:      *        the next incoming packet of data.
1:82a5839:      */
1:82a5839:     void onData(ByteBuf incoming);
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Called if the connection state becomes closed.
1:82a5839:      */
1:82a5839:     void onTransportClosed();
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Called when an error occurs during normal Transport operations.
1:82a5839:      *
1:82a5839:      * @param cause
1:82a5839:      *        the error that triggered this event.
1:82a5839:      */
1:82a5839:     void onTransportError(Throwable cause);
1:82a5839: 
1:82a5839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4b018b4
/////////////////////////////////////////////////////////////////////////
1: /*
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
1: import io.netty.buffer.ByteBuf;
1: 
1: /**
1:  * Listener interface that should be implemented by users of the various
1:  * QpidJMS Transport classes.
1:  */
1: public interface NettyTransportListener {
1: 
1:     /**
1:      * Called when new incoming data has become available.
1:      *
1:      * @param incoming
1:      *        the next incoming packet of data.
1:      */
1:     void onData(ByteBuf incoming);
1: 
1:     /**
1:      * Called if the connection state becomes closed.
1:      */
1:     void onTransportClosed();
1: 
1:     /**
1:      * Called when an error occurs during normal Transport operations.
1:      *
1:      * @param cause
1:      *        the error that triggered this event.
1:      */
1:     void onTransportError(Throwable cause);
1: 
1: }
============================================================================