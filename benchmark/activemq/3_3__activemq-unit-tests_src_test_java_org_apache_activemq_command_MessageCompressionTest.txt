1:be35271: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
3:be35271:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:be35271:  *
1:be35271:  * Unless required by applicable law or agreed to in writing, software
1:be35271:  * distributed under the License is distributed on an "AS IS" BASIS,
1:be35271:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:be35271:  * See the License for the specific language governing permissions and
1:be35271:  * limitations under the License.
1:be35271:  */
1:be35271: package org.apache.activemq.command;
20:be35271: 
1:c0c55ae: import java.io.UnsupportedEncodingException;
1:ecf89a6: 
1:c0c55ae: import javax.jms.BytesMessage;
1:be35271: import javax.jms.JMSException;
1:be35271: import javax.jms.MessageConsumer;
1:be35271: import javax.jms.MessageProducer;
1:be35271: import javax.jms.Session;
1:230a86c: 
1:be35271: import junit.framework.TestCase;
1:230a86c: 
1:be35271: import org.apache.activemq.ActiveMQConnection;
1:be35271: import org.apache.activemq.ActiveMQConnectionFactory;
1:be35271: import org.apache.activemq.broker.BrokerService;
1:be35271: 
1:be35271: public class MessageCompressionTest extends TestCase {
1:c0c55ae: 
1:1fd39c9:     private static final String BROKER_URL = "tcp://localhost:0";
1:be35271:     // The following text should compress well
1:1fd39c9:     private static final String TEXT = "The quick red fox jumped over the lazy brown dog. "
1:1fd39c9:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:1fd39c9:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:1fd39c9:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:1fd39c9:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:1fd39c9:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:1fd39c9:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:1fd39c9:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:1fd39c9:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. ";
1:230a86c: 
1:1fd39c9:     private BrokerService broker;
1:ecf89a6:     private ActiveMQQueue queue;
1:1fd39c9:     private String connectionUri;
1:ecf89a6: 
1:230a86c:     protected void setUp() throws Exception {
1:230a86c:         broker = new BrokerService();
1:1fd39c9:         connectionUri = broker.addConnector(BROKER_URL).getPublishableConnectString();
1:be35271:         broker.start();
1:1fd39c9:         queue = new ActiveMQQueue("TEST." + System.currentTimeMillis());
1:230a86c:     }
1:230a86c: 
1:be35271:     protected void tearDown() throws Exception {
1:be35271:         if (broker != null) {
1:be35271:             broker.stop();
5:be35271:         }
1:be35271:     }
1:230a86c: 
1:230a86c:     public void testTextMessageCompression() throws Exception {
1:230a86c: 
1:1fd39c9:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:be35271:         factory.setUseCompression(true);
1:230a86c:         sendTestMessage(factory, TEXT);
1:230a86c:         ActiveMQTextMessage message = receiveTestMessage(factory);
1:230a86c:         int compressedSize = message.getContent().getLength();
1:230a86c: 
1:1fd39c9:         factory = new ActiveMQConnectionFactory(connectionUri);
1:be35271:         factory.setUseCompression(false);
1:230a86c:         sendTestMessage(factory, TEXT);
1:230a86c:         message = receiveTestMessage(factory);
1:230a86c:         int unCompressedSize = message.getContent().getLength();
1:230a86c: 
1:1fd39c9:         assertTrue("expected: compressed Size '" + compressedSize + "' < unCompressedSize '" + unCompressedSize + "'",
1:1fd39c9:                 compressedSize < unCompressedSize);
1:be35271:     }
1:230a86c: 
1:c0c55ae:     public void testBytesMessageCompression() throws Exception {
1:c0c55ae: 
1:1fd39c9:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:c0c55ae:         factory.setUseCompression(true);
1:c0c55ae:         sendTestBytesMessage(factory, TEXT);
1:c0c55ae:         ActiveMQBytesMessage message = receiveTestBytesMessage(factory);
1:c0c55ae:         int compressedSize = message.getContent().getLength();
1:c0c55ae:         byte[] bytes = new byte[TEXT.getBytes("UTF8").length];
1:c0c55ae:         message.readBytes(bytes);
1:1fd39c9:         assertTrue(message.readBytes(new byte[255]) == -1);
1:c0c55ae:         String rcvString = new String(bytes, "UTF8");
1:c0c55ae:         assertEquals(TEXT, rcvString);
1:1fd39c9:         assertTrue(message.isCompressed());
1:c0c55ae: 
1:1fd39c9:         factory = new ActiveMQConnectionFactory(connectionUri);
1:c0c55ae:         factory.setUseCompression(false);
1:c0c55ae:         sendTestBytesMessage(factory, TEXT);
1:c0c55ae:         message = receiveTestBytesMessage(factory);
1:c0c55ae:         int unCompressedSize = message.getContent().getLength();
1:c0c55ae: 
1:1fd39c9:         assertTrue("expected: compressed Size '" + compressedSize + "' < unCompressedSize '" + unCompressedSize + "'",
1:1fd39c9:                    compressedSize < unCompressedSize);
1:c0c55ae:     }
1:c0c55ae: 
1:230a86c:     private void sendTestMessage(ActiveMQConnectionFactory factory, String message) throws JMSException {
1:1fd39c9:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:1e73d70:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         MessageProducer producer = session.createProducer(queue);
1:230a86c:         producer.send(session.createTextMessage(message));
1:c0c55ae:         connection.close();
1:230a86c:     }
1:230a86c: 
1:230a86c:     private ActiveMQTextMessage receiveTestMessage(ActiveMQConnectionFactory factory) throws JMSException {
1:1fd39c9:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:230a86c:         connection.start();
1:1e73d70:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         MessageConsumer consumer = session.createConsumer(queue);
1:1fd39c9:         ActiveMQTextMessage rc = (ActiveMQTextMessage) consumer.receive();
1:230a86c:         connection.close();
1:230a86c:         return rc;
1:230a86c:     }
1:c0c55ae: 
1:c0c55ae:     private void sendTestBytesMessage(ActiveMQConnectionFactory factory, String message) throws JMSException, UnsupportedEncodingException {
1:1fd39c9:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:c0c55ae:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c0c55ae:         MessageProducer producer = session.createProducer(queue);
1:c0c55ae:         BytesMessage bytesMessage = session.createBytesMessage();
1:c0c55ae:         bytesMessage.writeBytes(message.getBytes("UTF8"));
1:c0c55ae:         producer.send(bytesMessage);
1:c0c55ae:         connection.close();
1:c0c55ae:     }
1:c0c55ae: 
1:c0c55ae:     private ActiveMQBytesMessage receiveTestBytesMessage(ActiveMQConnectionFactory factory) throws JMSException, UnsupportedEncodingException {
1:1fd39c9:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:c0c55ae:         connection.start();
1:c0c55ae:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c0c55ae:         MessageConsumer consumer = session.createConsumer(queue);
1:1fd39c9:         ActiveMQBytesMessage rc = (ActiveMQBytesMessage) consumer.receive();
1:230a86c:         connection.close();
1:c0c55ae:         return rc;
1:c0c55ae:     }
1:230a86c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:1fd39c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String BROKER_URL = "tcp://localhost:0";
1:     private static final String TEXT = "The quick red fox jumped over the lazy brown dog. "
1:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
1:             + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. ";
1:     private BrokerService broker;
1:     private String connectionUri;
1:         connectionUri = broker.addConnector(BROKER_URL).getPublishableConnectString();
1:         queue = new ActiveMQQueue("TEST." + System.currentTimeMillis());
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         factory = new ActiveMQConnectionFactory(connectionUri);
1:         assertTrue("expected: compressed Size '" + compressedSize + "' < unCompressedSize '" + unCompressedSize + "'",
1:                 compressedSize < unCompressedSize);
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         assertTrue(message.readBytes(new byte[255]) == -1);
1:         assertTrue(message.isCompressed());
1:         factory = new ActiveMQConnectionFactory(connectionUri);
1:         assertTrue("expected: compressed Size '" + compressedSize + "' < unCompressedSize '" + unCompressedSize + "'",
1:                    compressedSize < unCompressedSize);
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         ActiveMQTextMessage rc = (ActiveMQTextMessage) consumer.receive();
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         ActiveMQBytesMessage rc = (ActiveMQBytesMessage) consumer.receive();
commit:c0c55ae
/////////////////////////////////////////////////////////////////////////
1: import java.io.UnsupportedEncodingException;
1: import javax.jms.BytesMessage;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testBytesMessageCompression() throws Exception {
1: 
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(BROKER_URL);
1:         factory.setUseCompression(true);
1:         sendTestBytesMessage(factory, TEXT);
1:         ActiveMQBytesMessage message = receiveTestBytesMessage(factory);
1:         int compressedSize = message.getContent().getLength();
1:         byte[] bytes = new byte[TEXT.getBytes("UTF8").length];
1:         message.readBytes(bytes);
0:         assertTrue(message.readBytes( new byte[255]) == -1);
1:         String rcvString = new String(bytes, "UTF8");
1:         assertEquals(TEXT, rcvString);
1: 
0:         factory = new ActiveMQConnectionFactory(BROKER_URL);
1:         factory.setUseCompression(false);
1:         sendTestBytesMessage(factory, TEXT);
1:         message = receiveTestBytesMessage(factory);
1:         int unCompressedSize = message.getContent().getLength();
1: 
0:         assertTrue("expected: compressed Size '" + compressedSize + "' < unCompressedSize '" + unCompressedSize + "'", compressedSize < unCompressedSize);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private void sendTestBytesMessage(ActiveMQConnectionFactory factory, String message) throws JMSException, UnsupportedEncodingException {
0:         ActiveMQConnection connection = (ActiveMQConnection)factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(queue);
1:         BytesMessage bytesMessage = session.createBytesMessage();
1:         bytesMessage.writeBytes(message.getBytes("UTF8"));
1:         producer.send(bytesMessage);
1:         connection.close();
1:     }
1: 
1:     private ActiveMQBytesMessage receiveTestBytesMessage(ActiveMQConnectionFactory factory) throws JMSException, UnsupportedEncodingException {
0:         ActiveMQConnection connection = (ActiveMQConnection)factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         ActiveMQBytesMessage rc = (ActiveMQBytesMessage)consumer.receive();
1:         connection.close();
1:         return rc;
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:1e73d70
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
0:     protected BrokerService broker;
1:     private ActiveMQQueue queue;
1: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     //
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected BrokerService broker;
0:     private ActiveMQQueue queue;
0:     private static final String TEXT = "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
0:                                        + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
0:                                        + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
0:                                        + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
0:                                        + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
0:                                        + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
0:                                        + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
0:                                        + "The quick red fox jumped over the lazy brown dog. " + "The quick red fox jumped over the lazy brown dog. "
0:                                        + "The quick red fox jumped over the lazy brown dog. ";
1: 
1:     protected void setUp() throws Exception {
1:         broker = new BrokerService();
1: 
0:         TransportConnector tc = new TransportConnector();
0:         queue = new ActiveMQQueue("TEST." + System.currentTimeMillis());
1: 
1:     }
1: 
1: 
1:     public void testTextMessageCompression() throws Exception {
1: 
1:         sendTestMessage(factory, TEXT);
1:         ActiveMQTextMessage message = receiveTestMessage(factory);
1:         int compressedSize = message.getContent().getLength();
1: 
1:         sendTestMessage(factory, TEXT);
1:         message = receiveTestMessage(factory);
1:         int unCompressedSize = message.getContent().getLength();
0:         assertTrue("expected: compressed Size '" + compressedSize + "' < unCompressedSize '" + unCompressedSize + "'", compressedSize < unCompressedSize);
1:     private void sendTestMessage(ActiveMQConnectionFactory factory, String message) throws JMSException {
0:         ActiveMQConnection connection = (ActiveMQConnection)factory.createConnection();
0:         Session session = connection.createSession(false, 0);
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage(message));
1:         connection.close();
1:     }
1: 
1:     private ActiveMQTextMessage receiveTestMessage(ActiveMQConnectionFactory factory) throws JMSException {
0:         ActiveMQConnection connection = (ActiveMQConnection)factory.createConnection();
1:         connection.start();
0:         Session session = connection.createSession(false, 0);
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         ActiveMQTextMessage rc = (ActiveMQTextMessage)consumer.receive();
1:         connection.close();
1:         return rc;
1:     }
1: 
0:     // public void testJavaUtilZip() throws Exception {
0:     // String str = "When the going gets weird, the weird turn pro.";
0:     // byte[] bytes = str.getBytes();
0:     //		
0:     // ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length);
0:     // DeflaterOutputStream dos = new DeflaterOutputStream(baos);
0:     // dos.
0:     // }
1: }
commit:be35271
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import java.net.URI;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
1: 
1: public class MessageCompressionTest extends TestCase {
1: 	
0: 	protected BrokerService broker;
0: 	private ActiveMQQueue queue;
0:     private static final String BROKER_URL = "tcp://localhost:61216";
1: 
1:     // The following text should compress well
0:     private static final String TEXT = 
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. " +
0:     	 "The quick red fox jumped over the lazy brown dog. ";
1:     
0: 	protected void setUp() throws Exception {
0: 		broker = new BrokerService();
1: 		
0: 		TransportConnector tc = new TransportConnector();
0:         tc.setUri(new URI(BROKER_URL));
0:         tc.setName("tcp");
1: 
0:         queue = new ActiveMQQueue("TEST."+System.currentTimeMillis());
1:         
0:         broker.addConnector(tc);
1:         broker.start();
1: 
1: 	}
1: 	
1:     protected void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 	
0: 	public void testTextMessageCompression() throws Exception {
1: 		
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(BROKER_URL);
1:         factory.setUseCompression(true);
0:     	sendTestMessage(factory, TEXT);
0:     	ActiveMQTextMessage message = receiveTestMessage(factory);
0:     	int compressedSize = message.getContent().getLength();
1:     	
0:         factory = new ActiveMQConnectionFactory(BROKER_URL);
1:         factory.setUseCompression(false);
0:     	sendTestMessage(factory, TEXT);
0:     	message = receiveTestMessage(factory);
0:     	int unCompressedSize = message.getContent().getLength();
1: 
0:     	assertTrue("expected: compressed Size '"+compressedSize+"' < unCompressedSize '"+unCompressedSize+"'", compressedSize < unCompressedSize);
1:     }
1: 
0: 	private void sendTestMessage(ActiveMQConnectionFactory factory, String message) throws JMSException {
0: 		ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
0:     	Session session = connection.createSession(false, 0);
0: 		MessageProducer producer = session.createProducer(queue);
0: 		producer.send(session.createTextMessage(message));
0: 		connection.close();
1: 	}
1: 	
0: 	private ActiveMQTextMessage receiveTestMessage(ActiveMQConnectionFactory factory) throws JMSException {
0: 		ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
0: 		connection.start();
0:     	Session session = connection.createSession(false, 0);
0: 		MessageConsumer consumer = session.createConsumer(queue);
0: 		ActiveMQTextMessage rc = (ActiveMQTextMessage) consumer.receive();
0: 		connection.close();
0: 		return rc;
1: 	}
1: 	
1: 	
0: //	public void testJavaUtilZip() throws Exception {
0: //		String str = "When the going gets weird, the weird turn pro.";
0: //		byte[] bytes = str.getBytes();
0: //		
0: //		ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length);
0: //		DeflaterOutputStream dos = new DeflaterOutputStream(baos);
0: //		dos.
0: //	}
1: }
============================================================================