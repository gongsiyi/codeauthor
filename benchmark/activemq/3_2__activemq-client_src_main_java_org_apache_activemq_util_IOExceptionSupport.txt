1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.util;
3:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:98165c4: import java.math.BigInteger;
1:d29ca2a: 
1:fc00993: public final class IOExceptionSupport {
1:d29ca2a: 
1:933eb2f:     private IOExceptionSupport() {
1:933eb2f:     }
1:933eb2f: 
1:d29ca2a:     public static IOException create(String msg, Throwable cause) {
1:d29ca2a:         IOException exception = new IOException(msg);
1:d29ca2a:         exception.initCause(cause);
1:d29ca2a:         return exception;
1:d29ca2a:     }
1:933eb2f: 
1:d29ca2a:     public static IOException create(String msg, Exception cause) {
1:d29ca2a:         IOException exception = new IOException(msg);
1:d29ca2a:         exception.initCause(cause);
1:d29ca2a:         return exception;
1:d29ca2a:     }
1:933eb2f: 
1:d29ca2a:     public static IOException create(Throwable cause) {
1:d29ca2a:         IOException exception = new IOException(cause.getMessage());
1:d29ca2a:         exception.initCause(cause);
1:d29ca2a:         return exception;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static IOException create(Exception cause) {
1:d29ca2a:         IOException exception = new IOException(cause.getMessage());
1:d29ca2a:         exception.initCause(cause);
1:d29ca2a:         return exception;
1:d29ca2a:     }
1:d29ca2a: 
1:98165c4:     public static IOException createFrameSizeException(int size, long maxSize) {
1:98165c4:         return new IOException("Frame size of " + toHumanReadableSizeString(size) +
1:98165c4:             " larger than max allowed " + toHumanReadableSizeString(maxSize));
1:98165c4:     }
1:98165c4: 
1:98165c4:     private static String toHumanReadableSizeString(final int size) {
1:98165c4:         return toHumanReadableSizeString(BigInteger.valueOf(size));
1:98165c4:     }
1:98165c4: 
1:98165c4:     private static String toHumanReadableSizeString(final long size) {
1:98165c4:         return toHumanReadableSizeString(BigInteger.valueOf(size));
1:98165c4:     }
1:98165c4: 
1:98165c4:     private static String toHumanReadableSizeString(final BigInteger size) {
1:98165c4:         String displaySize;
1:98165c4: 
1:98165c4:         final BigInteger ONE_KB_BI = BigInteger.valueOf(1024);
1:98165c4:         final BigInteger ONE_MB_BI = ONE_KB_BI.multiply(ONE_KB_BI);
1:98165c4:         final BigInteger ONE_GB_BI = ONE_KB_BI.multiply(ONE_MB_BI);
1:98165c4: 
1:98165c4:         if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {
1:98165c4:             displaySize = String.valueOf(size.divide(ONE_GB_BI)) + " GB";
1:98165c4:         } else if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {
1:98165c4:             displaySize = String.valueOf(size.divide(ONE_MB_BI)) + " MB";
1:98165c4:         } else if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {
1:98165c4:             displaySize = String.valueOf(size.divide(ONE_KB_BI)) + " KB";
1:98165c4:         } else {
1:98165c4:             displaySize = String.valueOf(size) + " bytes";
1:98165c4:         }
1:98165c4: 
1:98165c4:         return displaySize;
1:98165c4:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:98165c4
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigInteger;
/////////////////////////////////////////////////////////////////////////
1:     public static IOException createFrameSizeException(int size, long maxSize) {
1:         return new IOException("Frame size of " + toHumanReadableSizeString(size) +
1:             " larger than max allowed " + toHumanReadableSizeString(maxSize));
1:     }
1: 
1:     private static String toHumanReadableSizeString(final int size) {
1:         return toHumanReadableSizeString(BigInteger.valueOf(size));
1:     }
1: 
1:     private static String toHumanReadableSizeString(final long size) {
1:         return toHumanReadableSizeString(BigInteger.valueOf(size));
1:     }
1: 
1:     private static String toHumanReadableSizeString(final BigInteger size) {
1:         String displaySize;
1: 
1:         final BigInteger ONE_KB_BI = BigInteger.valueOf(1024);
1:         final BigInteger ONE_MB_BI = ONE_KB_BI.multiply(ONE_KB_BI);
1:         final BigInteger ONE_GB_BI = ONE_KB_BI.multiply(ONE_MB_BI);
1: 
1:         if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {
1:             displaySize = String.valueOf(size.divide(ONE_GB_BI)) + " GB";
1:         } else if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {
1:             displaySize = String.valueOf(size.divide(ONE_MB_BI)) + " MB";
1:         } else if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {
1:             displaySize = String.valueOf(size.divide(ONE_KB_BI)) + " KB";
1:         } else {
1:             displaySize = String.valueOf(size) + " bytes";
1:         }
1: 
1:         return displaySize;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private IOExceptionSupport() {
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public final class IOExceptionSupport {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.IOException;
1: 
0: final public class IOExceptionSupport {
1: 
1:     public static IOException create(String msg, Throwable cause) {
1:         IOException exception = new IOException(msg);
1:         exception.initCause(cause);
1:         return exception;
1:     }
1: 
1:     public static IOException create(String msg, Exception cause) {
1:         IOException exception = new IOException(msg);
1:         exception.initCause(cause);
1:         return exception;
1:     }
1:     
1:     public static IOException create(Throwable cause) {
1:         IOException exception = new IOException(cause.getMessage());
1:         exception.initCause(cause);
1:         return exception;
1:     }
1: 
1:     public static IOException create(Exception cause) {
1:         IOException exception = new IOException(cause.getMessage());
1:         exception.initCause(cause);
1:         return exception;
1:     }
1:     
1: }
============================================================================