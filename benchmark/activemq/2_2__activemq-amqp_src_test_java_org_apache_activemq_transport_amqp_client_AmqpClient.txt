1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client;
1:72839b7: 
1:72839b7: import java.net.URI;
1:72839b7: import java.util.Collections;
1:72839b7: import java.util.List;
1:72839b7: import java.util.Map;
1:72839b7: 
1:31c55f7: import org.apache.activemq.transport.amqp.client.transport.NettyTransport;
1:84cd815: import org.apache.activemq.transport.amqp.client.transport.NettyTransportFactory;
1:72839b7: import org.apache.qpid.proton.amqp.Symbol;
1:72839b7: import org.slf4j.Logger;
1:72839b7: import org.slf4j.LoggerFactory;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Connection instance used to connect to the Broker using Proton as
1:72839b7:  * the AMQP protocol handler.
1:72839b7:  */
1:72839b7: public class AmqpClient {
1:72839b7: 
1:72839b7:     private static final Logger LOG = LoggerFactory.getLogger(AmqpClient.class);
1:72839b7: 
1:72839b7:     private final String username;
1:72839b7:     private final String password;
1:72839b7:     private final URI remoteURI;
1:ce5628a:     private String authzid;
1:ce5628a:     private String mechanismRestriction;
1:84cd815:     private boolean traceFrames;
1:72839b7: 
1:1a0f73e:     private AmqpValidator stateInspector = new AmqpValidator();
1:72839b7:     private List<Symbol> offeredCapabilities = Collections.emptyList();
1:72839b7:     private Map<Symbol, Object> offeredProperties = Collections.emptyMap();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Creates an AmqpClient instance which can be used as a factory for connections.
1:72839b7:      *
1:72839b7:      * @param remoteURI
1:72839b7:      *        The address of the remote peer to connect to.
1:72839b7:      * @param username
1:72839b7:      *	      The user name to use when authenticating the client.
1:72839b7:      * @param password
1:72839b7:      *		  The password to use when authenticating the client.
1:72839b7:      */
1:72839b7:     public AmqpClient(URI remoteURI, String username, String password) {
1:72839b7:         this.remoteURI = remoteURI;
1:72839b7:         this.password = password;
1:72839b7:         this.username = username;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Creates a connection with the broker at the given location, this method initiates a
1:72839b7:      * connect attempt immediately and will fail if the remote peer cannot be reached.
1:72839b7:      *
1:72839b7:      * @returns a new connection object used to interact with the connected peer.
1:72839b7:      *
1:72839b7:      * @throws Exception if an error occurs attempting to connect to the Broker.
1:72839b7:      */
1:72839b7:     public AmqpConnection connect() throws Exception {
1:72839b7: 
1:72839b7:         AmqpConnection connection = createConnection();
1:72839b7: 
1:72839b7:         LOG.debug("Attempting to create new connection to peer: {}", remoteURI);
1:72839b7:         connection.connect();
1:72839b7: 
1:72839b7:         return connection;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Creates a connection object using the configured values for user, password, remote URI
1:72839b7:      * etc.  This method does not immediately initiate a connection to the remote leaving that
1:72839b7:      * to the caller which provides a connection object that can have additional configuration
1:72839b7:      * changes applied before the <code>connect</code> method is invoked.
1:72839b7:      *
1:72839b7:      * @returns a new connection object used to interact with the connected peer.
1:72839b7:      *
1:72839b7:      * @throws Exception if an error occurs attempting to connect to the Broker.
1:72839b7:      */
1:72839b7:     public AmqpConnection createConnection() throws Exception {
1:72839b7:         if (username == null && password != null) {
1:72839b7:             throw new IllegalArgumentException("Password must be null if user name value is null");
1:72839b7:         }
1:72839b7: 
1:82a5839:         NettyTransport transport = NettyTransportFactory.createTransport(remoteURI);
1:72839b7:         AmqpConnection connection = new AmqpConnection(transport, username, password);
1:72839b7: 
1:ce5628a:         connection.setMechanismRestriction(mechanismRestriction);
1:ce5628a:         connection.setAuthzid(authzid);
1:72839b7: 
1:72839b7:         connection.setOfferedCapabilities(getOfferedCapabilities());
1:72839b7:         connection.setOfferedProperties(getOfferedProperties());
1:72839b7:         connection.setStateInspector(getStateInspector());
1:84cd815:         connection.setTraceFrames(isTraceFrames());
1:72839b7: 
1:72839b7:         return connection;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:ce5628a:      * @return the user name value given when constructed.
1:72839b7:      */
1:72839b7:     public String getUsername() {
1:72839b7:         return username;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:ce5628a:      * @return the password value given when constructed.
1:72839b7:      */
1:72839b7:     public String getPassword() {
1:72839b7:         return password;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:ce5628a:      * @param authzid
1:ce5628a:      *        The authzid used when authenticating (currently only with PLAIN)
1:ce5628a:      */
1:ce5628a:     public void setAuthzid(String authzid) {
1:ce5628a:         this.authzid = authzid;
1:72839b7:     }
1:72839b7: 
1:ce5628a:     public String getAuthzid() {
1:ce5628a:         return authzid;
2:ce5628a:     }
1:ce5628a: 
1:ce5628a:     /**
1:ce5628a:      * @param mechanismRestriction
1:ce5628a:      *        The mechanism to use when authenticating (if offered by the server)
1:ce5628a:      */
1:ce5628a:     public void setMechanismRestriction(String mechanismRestriction) {
1:ce5628a:         this.mechanismRestriction = mechanismRestriction;
1:ce5628a:     }
3:ce5628a: 
1:ce5628a:     public String getMechanismRestriction() {
1:ce5628a:         return mechanismRestriction;
1:ce5628a:     }
1:ce5628a: 
1:ce5628a:     /**
1:72839b7:      * @return the currently set address to use to connect to the AMQP peer.
1:72839b7:      */
1:72839b7:     public URI getRemoteURI() {
1:72839b7:         return remoteURI;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Sets the offered capabilities that should be used when a new connection attempt
1:72839b7:      * is made.
1:72839b7:      *
1:72839b7:      * @param offeredCapabilities
1:72839b7:      *        the list of capabilities to offer when connecting.
1:72839b7:      */
1:72839b7:     public void setOfferedCapabilities(List<Symbol> offeredCapabilities) {
1:72839b7:         if (offeredCapabilities != null) {
1:72839b7:             offeredCapabilities = Collections.emptyList();
1:72839b7:         }
1:72839b7: 
1:72839b7:         this.offeredCapabilities = offeredCapabilities;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * @return an unmodifiable view of the currently set offered capabilities
1:72839b7:      */
1:72839b7:     public List<Symbol> getOfferedCapabilities() {
1:72839b7:         return Collections.unmodifiableList(offeredCapabilities);
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Sets the offered connection properties that should be used when a new connection
1:72839b7:      * attempt is made.
1:72839b7:      *
1:72839b7:      * @param connectionProperties
1:72839b7:      *        the map of properties to offer when connecting.
1:72839b7:      */
1:72839b7:     public void setOfferedProperties(Map<Symbol, Object> offeredProperties) {
1:72839b7:         if (offeredProperties != null) {
1:72839b7:             offeredProperties = Collections.emptyMap();
1:72839b7:         }
1:72839b7: 
1:72839b7:         this.offeredProperties = offeredProperties;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * @return an unmodifiable view of the currently set connection properties.
1:72839b7:      */
1:72839b7:     public Map<Symbol, Object> getOfferedProperties() {
1:72839b7:         return Collections.unmodifiableMap(offeredProperties);
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * @return the currently set state inspector used to check state after various events.
1:72839b7:      */
1:1a0f73e:     public AmqpValidator getStateInspector() {
1:72839b7:         return stateInspector;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Sets the state inspector used to check that the AMQP resource is valid after
1:72839b7:      * specific lifecycle events such as open and close.
1:72839b7:      *
1:72839b7:      * @param stateInspector
1:72839b7:      *        the new state inspector to use.
1:72839b7:      */
1:ca456c4:     public void setValidator(AmqpValidator stateInspector) {
1:72839b7:         if (stateInspector == null) {
1:1a0f73e:             stateInspector = new AmqpValidator();
1:72839b7:         }
1:72839b7: 
1:72839b7:         this.stateInspector = stateInspector;
1:72839b7:     }
1:72839b7: 
1:84cd815:     /**
1:84cd815:      * @return the traceFrames setting for the client, true indicates frame tracing is on.
1:84cd815:      */
1:84cd815:     public boolean isTraceFrames() {
1:84cd815:         return traceFrames;
1:84cd815:     }
1:84cd815: 
1:84cd815:     /**
1:84cd815:      * Controls whether connections created from this client object will log AMQP
1:84cd815:      * frames to a trace level logger or not.
1:84cd815:      *
1:84cd815:      * @param traceFrames
1:84cd815:      *      configure the trace frames option for the client created connections.
1:84cd815:      */
1:84cd815:     public void setTraceFrames(boolean traceFrames) {
1:84cd815:         this.traceFrames = traceFrames;
1:84cd815:     }
1:84cd815: 
1:72839b7:     @Override
1:72839b7:     public String toString() {
1:72839b7:         return "AmqpClient: " + getRemoteURI().getHost() + ":" + getRemoteURI().getPort();
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Creates an anonymous connection with the broker at the given location.
1:72839b7:      *
1:72839b7:      * @param broker
1:72839b7:      *        the address of the remote broker instance.
1:72839b7:      *
1:72839b7:      * @returns a new connection object used to interact with the connected peer.
1:72839b7:      *
1:72839b7:      * @throws Exception if an error occurs attempting to connect to the Broker.
1:72839b7:      */
1:72839b7:     public static AmqpConnection connect(URI broker) throws Exception {
1:72839b7:         return connect(broker, null, null);
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Creates a connection with the broker at the given location.
1:72839b7:      *
1:72839b7:      * @param broker
1:72839b7:      *        the address of the remote broker instance.
1:72839b7:      * @param username
1:72839b7:      *        the user name to use to connect to the broker or null for anonymous.
1:72839b7:      * @param password
1:72839b7:      *        the password to use to connect to the broker, must be null if user name is null.
1:72839b7:      *
1:72839b7:      * @returns a new connection object used to interact with the connected peer.
1:72839b7:      *
1:72839b7:      * @throws Exception if an error occurs attempting to connect to the Broker.
1:72839b7:      */
1:72839b7:     public static AmqpConnection connect(URI broker, String username, String password) throws Exception {
1:72839b7:         if (username == null && password != null) {
1:72839b7:             throw new IllegalArgumentException("Password must be null if user name value is null");
1:72839b7:         }
1:72839b7: 
1:72839b7:         AmqpClient client = new AmqpClient(broker, username, password);
1:72839b7: 
1:72839b7:         return client.connect();
1:72839b7:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:84cd815
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.transport.NettyTransportFactory;
/////////////////////////////////////////////////////////////////////////
1:     private boolean traceFrames;
/////////////////////////////////////////////////////////////////////////
1:         connection.setTraceFrames(isTraceFrames());
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the traceFrames setting for the client, true indicates frame tracing is on.
1:      */
1:     public boolean isTraceFrames() {
1:         return traceFrames;
1:     }
1: 
1:     /**
1:      * Controls whether connections created from this client object will log AMQP
1:      * frames to a trace level logger or not.
1:      *
1:      * @param traceFrames
1:      *      configure the trace frames option for the client created connections.
1:      */
1:     public void setTraceFrames(boolean traceFrames) {
1:         this.traceFrames = traceFrames;
1:     }
1: 
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.transport.NettyTransport;
commit:82a5839
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.amqp.client.transport.NettyTransport;
0: import org.apache.activemq.transport.amqp.client.transport.NettyTransportFactory;
/////////////////////////////////////////////////////////////////////////
1:         NettyTransport transport = NettyTransportFactory.createTransport(remoteURI);
commit:a812131
/////////////////////////////////////////////////////////////////////////
0:         ClientTcpTransport transport = new ClientTcpTransport(remoteURI);
commit:ca456c4
/////////////////////////////////////////////////////////////////////////
1:     public void setValidator(AmqpValidator stateInspector) {
commit:1a0f73e
/////////////////////////////////////////////////////////////////////////
1:     private AmqpValidator stateInspector = new AmqpValidator();
/////////////////////////////////////////////////////////////////////////
1:     public AmqpValidator getStateInspector() {
/////////////////////////////////////////////////////////////////////////
0:     public void setStateInspector(AmqpValidator stateInspector) {
1:             stateInspector = new AmqpValidator();
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import java.net.URI;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.activemq.transport.amqp.client.util.ClientTcpTransport;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Connection instance used to connect to the Broker using Proton as
1:  * the AMQP protocol handler.
1:  */
1: public class AmqpClient {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpClient.class);
1: 
1:     private final String username;
1:     private final String password;
1:     private final URI remoteURI;
1: 
0:     private AmqpStateInspector stateInspector = new AmqpStateInspector();
1:     private List<Symbol> offeredCapabilities = Collections.emptyList();
1:     private Map<Symbol, Object> offeredProperties = Collections.emptyMap();
1: 
1:     /**
1:      * Creates an AmqpClient instance which can be used as a factory for connections.
1:      *
1:      * @param remoteURI
1:      *        The address of the remote peer to connect to.
1:      * @param username
1:      *	      The user name to use when authenticating the client.
1:      * @param password
1:      *		  The password to use when authenticating the client.
1:      */
1:     public AmqpClient(URI remoteURI, String username, String password) {
1:         this.remoteURI = remoteURI;
1:         this.password = password;
1:         this.username = username;
1:     }
1: 
1:     /**
1:      * Creates a connection with the broker at the given location, this method initiates a
1:      * connect attempt immediately and will fail if the remote peer cannot be reached.
1:      *
1:      * @returns a new connection object used to interact with the connected peer.
1:      *
1:      * @throws Exception if an error occurs attempting to connect to the Broker.
1:      */
1:     public AmqpConnection connect() throws Exception {
1: 
1:         AmqpConnection connection = createConnection();
1: 
1:         LOG.debug("Attempting to create new connection to peer: {}", remoteURI);
1:         connection.connect();
1: 
1:         return connection;
1:     }
1: 
1:     /**
1:      * Creates a connection object using the configured values for user, password, remote URI
1:      * etc.  This method does not immediately initiate a connection to the remote leaving that
1:      * to the caller which provides a connection object that can have additional configuration
1:      * changes applied before the <code>connect</code> method is invoked.
1:      *
1:      * @returns a new connection object used to interact with the connected peer.
1:      *
1:      * @throws Exception if an error occurs attempting to connect to the Broker.
1:      */
1:     public AmqpConnection createConnection() throws Exception {
1:         if (username == null && password != null) {
1:             throw new IllegalArgumentException("Password must be null if user name value is null");
1:         }
1: 
0:         ClientTcpTransport transport = null;
1: 
0:         if (remoteURI.getScheme().equals("tcp")) {
0:             transport = new ClientTcpTransport(remoteURI);
0:         } else {
0:             throw new IllegalArgumentException("Client only support TCP currently.");
1:         }
1: 
1:         AmqpConnection connection = new AmqpConnection(transport, username, password);
1: 
1:         connection.setOfferedCapabilities(getOfferedCapabilities());
1:         connection.setOfferedProperties(getOfferedProperties());
1:         connection.setStateInspector(getStateInspector());
1: 
1:         return connection;
1:     }
1: 
1:     /**
0:      * @return the user name value given when connect was called, always null before connect.
1:      */
1:     public String getUsername() {
1:         return username;
1:     }
1: 
1:     /**
0:      * @return the password value given when connect was called, always null before connect.
1:      */
1:     public String getPassword() {
1:         return password;
1:     }
1: 
1:     /**
1:      * @return the currently set address to use to connect to the AMQP peer.
1:      */
1:     public URI getRemoteURI() {
1:         return remoteURI;
1:     }
1: 
1:     /**
1:      * Sets the offered capabilities that should be used when a new connection attempt
1:      * is made.
1:      *
1:      * @param offeredCapabilities
1:      *        the list of capabilities to offer when connecting.
1:      */
1:     public void setOfferedCapabilities(List<Symbol> offeredCapabilities) {
1:         if (offeredCapabilities != null) {
1:             offeredCapabilities = Collections.emptyList();
1:         }
1: 
1:         this.offeredCapabilities = offeredCapabilities;
1:     }
1: 
1:     /**
1:      * @return an unmodifiable view of the currently set offered capabilities
1:      */
1:     public List<Symbol> getOfferedCapabilities() {
1:         return Collections.unmodifiableList(offeredCapabilities);
1:     }
1: 
1:     /**
1:      * Sets the offered connection properties that should be used when a new connection
1:      * attempt is made.
1:      *
1:      * @param connectionProperties
1:      *        the map of properties to offer when connecting.
1:      */
1:     public void setOfferedProperties(Map<Symbol, Object> offeredProperties) {
1:         if (offeredProperties != null) {
1:             offeredProperties = Collections.emptyMap();
1:         }
1: 
1:         this.offeredProperties = offeredProperties;
1:     }
1: 
1:     /**
1:      * @return an unmodifiable view of the currently set connection properties.
1:      */
1:     public Map<Symbol, Object> getOfferedProperties() {
1:         return Collections.unmodifiableMap(offeredProperties);
1:     }
1: 
1:     /**
1:      * @return the currently set state inspector used to check state after various events.
1:      */
0:     public AmqpStateInspector getStateInspector() {
1:         return stateInspector;
1:     }
1: 
1:     /**
1:      * Sets the state inspector used to check that the AMQP resource is valid after
1:      * specific lifecycle events such as open and close.
1:      *
1:      * @param stateInspector
1:      *        the new state inspector to use.
1:      */
0:     public void setStateInspector(AmqpStateInspector stateInspector) {
1:         if (stateInspector == null) {
0:             stateInspector = new AmqpStateInspector();
1:         }
1: 
1:         this.stateInspector = stateInspector;
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return "AmqpClient: " + getRemoteURI().getHost() + ":" + getRemoteURI().getPort();
1:     }
1: 
1:     /**
1:      * Creates an anonymous connection with the broker at the given location.
1:      *
1:      * @param broker
1:      *        the address of the remote broker instance.
1:      *
1:      * @returns a new connection object used to interact with the connected peer.
1:      *
1:      * @throws Exception if an error occurs attempting to connect to the Broker.
1:      */
1:     public static AmqpConnection connect(URI broker) throws Exception {
1:         return connect(broker, null, null);
1:     }
1: 
1:     /**
1:      * Creates a connection with the broker at the given location.
1:      *
1:      * @param broker
1:      *        the address of the remote broker instance.
1:      * @param username
1:      *        the user name to use to connect to the broker or null for anonymous.
1:      * @param password
1:      *        the password to use to connect to the broker, must be null if user name is null.
1:      *
1:      * @returns a new connection object used to interact with the connected peer.
1:      *
1:      * @throws Exception if an error occurs attempting to connect to the Broker.
1:      */
1:     public static AmqpConnection connect(URI broker, String username, String password) throws Exception {
1:         if (username == null && password != null) {
1:             throw new IllegalArgumentException("Password must be null if user name value is null");
1:         }
1: 
1:         AmqpClient client = new AmqpClient(broker, username, password);
1: 
1:         return client.connect();
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:ce5628a
/////////////////////////////////////////////////////////////////////////
1:     private String authzid;
1:     private String mechanismRestriction;
/////////////////////////////////////////////////////////////////////////
1:         connection.setMechanismRestriction(mechanismRestriction);
1:         connection.setAuthzid(authzid);
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @return the user name value given when constructed.
1:      * @return the password value given when constructed.
1:      * @param authzid
1:      *        The authzid used when authenticating (currently only with PLAIN)
1:      */
1:     public void setAuthzid(String authzid) {
1:         this.authzid = authzid;
1:     }
1: 
1:     public String getAuthzid() {
1:         return authzid;
1:     }
1: 
1:     /**
1:      * @param mechanismRestriction
1:      *        The mechanism to use when authenticating (if offered by the server)
1:      */
1:     public void setMechanismRestriction(String mechanismRestriction) {
1:         this.mechanismRestriction = mechanismRestriction;
1:     }
1: 
1:     public String getMechanismRestriction() {
1:         return mechanismRestriction;
1:     }
1: 
1:     /**
============================================================================