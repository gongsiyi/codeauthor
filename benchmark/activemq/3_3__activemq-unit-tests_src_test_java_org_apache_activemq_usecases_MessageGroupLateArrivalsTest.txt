1:0a7c5dc: /**
1:0a7c5dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0a7c5dc:  * contributor license agreements.  See the NOTICE file distributed with
1:0a7c5dc:  * this work for additional information regarding copyright ownership.
1:0a7c5dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0a7c5dc:  * (the "License"); you may not use this file except in compliance with
1:0a7c5dc:  * the License.  You may obtain a copy of the License at
1:0a7c5dc:  *
1:0a7c5dc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0a7c5dc:  *
1:0a7c5dc:  * Unless required by applicable law or agreed to in writing, software
1:0a7c5dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0a7c5dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0a7c5dc:  * See the License for the specific language governing permissions and
1:0a7c5dc:  * limitations under the License.
1:0a7c5dc:  */
1:0a7c5dc: package org.apache.activemq.usecases;
7:0a7c5dc: 
1:f5d8a05: import java.util.ArrayList;
1:f5d8a05: import java.util.Collections;
1:0a7c5dc: import java.util.HashMap;
1:0a7c5dc: import java.util.HashSet;
1:f5d8a05: import java.util.List;
1:0a7c5dc: import java.util.Set;
1:0a7c5dc: import java.util.concurrent.CountDownLatch;
1:f5d8a05: 
1:0a7c5dc: import javax.jms.Connection;
1:0a7c5dc: import javax.jms.Destination;
1:0a7c5dc: import javax.jms.Message;
1:0a7c5dc: import javax.jms.MessageConsumer;
1:0a7c5dc: import javax.jms.MessageProducer;
1:0a7c5dc: import javax.jms.Session;
1:f5d8a05: 
1:0a7c5dc: import org.apache.activemq.ActiveMQConnectionFactory;
1:0a7c5dc: import org.apache.activemq.JmsTestSupport;
1:0a7c5dc: import org.apache.activemq.broker.BrokerService;
1:0a7c5dc: import org.apache.activemq.broker.TransportConnector;
1:0a7c5dc: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:0a7c5dc: import org.apache.activemq.broker.region.policy.PolicyMap;
1:0a7c5dc: import org.apache.activemq.command.ActiveMQQueue;
1:d29bab5: import org.junit.After;
1:d29bab5: import org.junit.Before;
1:d29bab5: import org.junit.Test;
1:d29bab5: import org.junit.runner.RunWith;
1:d29bab5: import org.junit.runners.BlockJUnit4ClassRunner;
1:0a7c5dc: import org.slf4j.Logger;
1:0a7c5dc: import org.slf4j.LoggerFactory;
1:f5d8a05: 
1:d29bab5: import static org.junit.Assert.*;
1:d29bab5: 
1:d29bab5: @RunWith(BlockJUnit4ClassRunner.class)
1:d29bab5: public class MessageGroupLateArrivalsTest {
1:0a7c5dc:     public static final Logger log = LoggerFactory.getLogger(MessageGroupLateArrivalsTest.class);
1:0a7c5dc:     protected Connection connection;
1:0a7c5dc:     protected Session session;
1:0a7c5dc:     protected MessageProducer producer;
1:0a7c5dc:     protected Destination destination;
1:0a7c5dc: 
1:0a7c5dc:     BrokerService broker;
1:0a7c5dc:     protected TransportConnector connector;
1:0a7c5dc: 
1:0a7c5dc:     protected HashMap<String, Integer> messageCount = new HashMap<String, Integer>();
1:0a7c5dc:     protected HashMap<String, Set<String>> messageGroups = new HashMap<String, Set<String>>();
1:0a7c5dc: 
1:d29bab5:     @Before
1:0a7c5dc:     public void setUp() throws Exception {
1:0a7c5dc:         broker = createBroker();
1:0a7c5dc:         broker.start();
1:0a7c5dc:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri() + "?jms.prefetchPolicy.all=1000");
1:0a7c5dc:         connection = connFactory.createConnection();
1:0a7c5dc:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:0a7c5dc:         destination = new ActiveMQQueue("test-queue2");
1:0a7c5dc:         producer = session.createProducer(destination);
1:0a7c5dc:         connection.start();
3:0a7c5dc:     }
1:0a7c5dc: 
1:0a7c5dc:     protected BrokerService createBroker() throws Exception {
1:0a7c5dc:         BrokerService service = new BrokerService();
1:0a7c5dc:         service.setPersistent(false);
1:0a7c5dc:         service.setUseJmx(false);
1:0a7c5dc: 
1:0a7c5dc:         PolicyMap policyMap = new PolicyMap();
1:0a7c5dc:         PolicyEntry policy = new PolicyEntry();
1:0a7c5dc:         policy.setUseConsumerPriority(true);
1:0a7c5dc:         policyMap.setDefaultEntry(policy);
1:0a7c5dc:         service.setDestinationPolicy(policyMap);
1:0a7c5dc: 
1:0a7c5dc:         connector = service.addConnector("tcp://localhost:0");
1:0a7c5dc:         return service;
1:0a7c5dc:     }
1:0a7c5dc: 
1:d29bab5:     @After
1:0a7c5dc:     public void tearDown() throws Exception {
1:0a7c5dc:         producer.close();
1:0a7c5dc:         session.close();
1:0a7c5dc:         connection.close();
1:0a7c5dc:         broker.stop();
1:0a7c5dc:     }
1:0a7c5dc: 
1:d29bab5:     @Test(timeout = 30 * 1000)
1:0a7c5dc:     public void testConsumersLateToThePartyGetSomeNewGroups() throws Exception {
1:0a7c5dc: 
1:0a7c5dc:         final int perBatch = 3;
1:0a7c5dc:         int[] counters = {perBatch, perBatch, perBatch};
1:0a7c5dc: 
1:0a7c5dc:         CountDownLatch startSignal = new CountDownLatch(0);
1:f5d8a05:         CountDownLatch doneSignal = new CountDownLatch(3);
1:f5d8a05:         CountDownLatch worker1Started = new CountDownLatch(1);
1:f5d8a05:         CountDownLatch worker2Started = new CountDownLatch(1);
1:f5d8a05:         CountDownLatch worker3Started = new CountDownLatch(1);
1:0a7c5dc: 
1:0a7c5dc:         messageCount.put("worker1", 0);
1:0a7c5dc:         messageGroups.put("worker1", new HashSet<String>());
1:f5d8a05:         Worker worker1 = new Worker(connection, destination, "worker1", startSignal, doneSignal, counters, messageCount, messageGroups, worker1Started);
1:0a7c5dc:         messageCount.put("worker2", 0);
1:0a7c5dc:         messageGroups.put("worker2", new HashSet<String>());
1:f5d8a05:         Worker worker2 = new Worker(connection, destination, "worker2", startSignal, doneSignal, counters, messageCount, messageGroups, worker2Started);
1:0a7c5dc:         messageCount.put("worker3", 0);
1:0a7c5dc:         messageGroups.put("worker3", new HashSet<String>());
1:f5d8a05:         Worker worker3 = new Worker(connection, destination, "worker3", startSignal, doneSignal, counters, messageCount, messageGroups, worker3Started);
1:0a7c5dc: 
1:0a7c5dc:         new Thread(worker1).start();
1:0a7c5dc:         new Thread(worker2).start();
1:f5d8a05:         worker1Started.await();
1:f5d8a05:         worker2Started.await();
1:0a7c5dc: 
1:0a7c5dc:         for (int i = 0; i < perBatch; i++) {
1:0a7c5dc:             Message msga = session.createTextMessage("hello a");
1:0a7c5dc:             msga.setStringProperty("JMSXGroupID", "A");
1:0a7c5dc:             producer.send(msga);
1:0a7c5dc: 
1:0a7c5dc:             Message msgb = session.createTextMessage("hello b");
1:0a7c5dc:             msgb.setStringProperty("JMSXGroupID", "B");
1:0a7c5dc:             producer.send(msgb);
1:0a7c5dc:         }
1:0a7c5dc: 
1:0a7c5dc:         // ensure this chap, late to the party gets a new group
1:0a7c5dc:         new Thread(worker3).start();
1:0a7c5dc: 
1:0a7c5dc:         // wait for presence before new group
1:f5d8a05:         worker3Started.await();
1:0a7c5dc: 
1:0a7c5dc:         for (int i = 0; i < perBatch; i++) {
1:0a7c5dc:             Message msgc = session.createTextMessage("hello c");
1:0a7c5dc:             msgc.setStringProperty("JMSXGroupID", "C");
1:0a7c5dc:             producer.send(msgc);
1:0a7c5dc:         }
1:0a7c5dc: 
1:0a7c5dc:         doneSignal.await();
1:0a7c5dc: 
1:f5d8a05:         List<String> workers = new ArrayList<String>(messageCount.keySet());
1:f5d8a05:         Collections.sort(workers);
1:f5d8a05:         for (String worker : workers) {
1:0a7c5dc:             log.info("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker));
1:f5d8a05:         }
1:f5d8a05: 
1:f5d8a05:         for (String worker : workers) {
1:0a7c5dc:             assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker)
1:0a7c5dc:                     , perBatch, messageCount.get(worker).intValue());
1:0a7c5dc:             assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker)
1:0a7c5dc:                     , 1, messageGroups.get(worker).size());
1:0a7c5dc:         }
1:0a7c5dc:     }
1:0a7c5dc: 
1:d29bab5:     @Test(timeout = 30 * 1000)
1:0a7c5dc:     public void testConsumerLateToBigPartyGetsNewGroup() throws Exception {
1:0a7c5dc: 
1:0a7c5dc:         final int perBatch = 2;
1:0a7c5dc:         int[] counters = {perBatch, perBatch, perBatch};
1:0a7c5dc: 
1:0a7c5dc:         CountDownLatch startSignal = new CountDownLatch(0);
1:f5d8a05:         CountDownLatch doneSignal = new CountDownLatch(2);
1:f5d8a05:         CountDownLatch worker1Started = new CountDownLatch(1);
1:f5d8a05:         CountDownLatch worker2Started = new CountDownLatch(1);
1:0a7c5dc: 
1:0a7c5dc:         messageCount.put("worker1", 0);
1:0a7c5dc:         messageGroups.put("worker1", new HashSet<String>());
1:f5d8a05:         Worker worker1 = new Worker(connection, destination, "worker1", startSignal, doneSignal, counters, messageCount, messageGroups, worker1Started);
1:0a7c5dc:         messageCount.put("worker2", 0);
1:0a7c5dc:         messageGroups.put("worker2", new HashSet<String>());
1:f5d8a05:         Worker worker2 = new Worker(connection, destination, "worker2", startSignal, doneSignal, counters, messageCount, messageGroups, worker2Started);
1:0a7c5dc: 
1:0a7c5dc:         new Thread(worker1).start();
1:0a7c5dc: 
1:0a7c5dc:         for (int i = 0; i < perBatch; i++) {
1:0a7c5dc:             Message msga = session.createTextMessage("hello c");
1:0a7c5dc:             msga.setStringProperty("JMSXGroupID", "A");
1:0a7c5dc:             producer.send(msga);
1:0a7c5dc: 
1:0a7c5dc:             Message msgb = session.createTextMessage("hello b");
1:0a7c5dc:             msgb.setStringProperty("JMSXGroupID", "B");
1:0a7c5dc:             producer.send(msgb);
1:0a7c5dc:         }
1:0a7c5dc: 
1:0a7c5dc:         // ensure this chap, late to the party gets a new group
1:0a7c5dc:         new Thread(worker2).start();
1:0a7c5dc: 
1:0a7c5dc:         // wait for presence before new group
1:f5d8a05:         worker2Started.await();
1:0a7c5dc: 
1:0a7c5dc:         for (int i = 0; i < perBatch; i++) {
1:0a7c5dc:             Message msgc = session.createTextMessage("hello a");
1:0a7c5dc:             msgc.setStringProperty("JMSXGroupID", "C");
1:0a7c5dc:             producer.send(msgc);
1:0a7c5dc:         }
1:0a7c5dc: 
1:0a7c5dc:         doneSignal.await();
1:0a7c5dc: 
1:0a7c5dc:         log.info("worker1  received " + messageCount.get("worker1") + " messages from groups " + messageGroups.get("worker1"));
1:0a7c5dc:         assertEquals("worker1 received " + messageCount.get("worker1") + " messages from groups " + messageGroups.get("worker1")
1:0a7c5dc:                 , 2 * perBatch, messageCount.get("worker1").intValue());
1:0a7c5dc:         assertEquals("worker1 received " + messageCount.get("worker1") + " messages from groups " + messageGroups.get("worker1")
1:0a7c5dc:                 , 2, messageGroups.get("worker1").size());
1:0a7c5dc: 
1:0a7c5dc:         log.info("worker2  received " + messageCount.get("worker2") + " messages from groups " + messageGroups.get("worker2"));
1:0a7c5dc:         assertEquals("worker2 received " + messageCount.get("worker2") + " messages from groups " + messageGroups.get("worker2")
1:0a7c5dc:                 , 2 * perBatch, messageCount.get("worker1").intValue());
1:0a7c5dc:         assertEquals("worker2 received " + messageCount.get("worker2") + " messages from groups " + messageGroups.get("worker2")
1:0a7c5dc:                 , 1, messageGroups.get("worker2").size());
1:0a7c5dc:     }
1:0a7c5dc: 
1:0a7c5dc:     private static final class Worker implements Runnable {
1:0a7c5dc:         private Connection connection = null;
1:0a7c5dc:         private Destination queueName = null;
1:0a7c5dc:         private String workerName = null;
1:0a7c5dc:         private CountDownLatch startSignal = null;
1:0a7c5dc:         private CountDownLatch doneSignal = null;
1:f5d8a05:         private CountDownLatch workerStarted = null;
1:0a7c5dc:         private int[] counters = null;
1:f5d8a05:         private final HashMap<String, Integer> messageCount;
1:f5d8a05:         private final HashMap<String, Set<String>> messageGroups;
1:0a7c5dc: 
1:f5d8a05:         private Worker(Connection connection, Destination queueName, String workerName, CountDownLatch startSignal, CountDownLatch doneSignal,
1:f5d8a05:                        int[] counters, HashMap<String, Integer> messageCount, HashMap<String, Set<String>> messageGroups, CountDownLatch workerStarted) {
1:0a7c5dc:             this.connection = connection;
1:0a7c5dc:             this.queueName = queueName;
1:0a7c5dc:             this.workerName = workerName;
1:0a7c5dc:             this.startSignal = startSignal;
1:0a7c5dc:             this.doneSignal = doneSignal;
1:0a7c5dc:             this.counters = counters;
1:0a7c5dc:             this.messageCount = messageCount;
1:0a7c5dc:             this.messageGroups = messageGroups;
1:f5d8a05:             this.workerStarted = workerStarted;
1:0a7c5dc:         }
1:0a7c5dc: 
1:0a7c5dc:         private void update(String group) {
1:0a7c5dc:             int msgCount = messageCount.get(workerName);
1:0a7c5dc:             messageCount.put(workerName, msgCount + 1);
1:0a7c5dc:             Set<String> groups = messageGroups.get(workerName);
1:0a7c5dc:             groups.add(group);
1:0a7c5dc:             messageGroups.put(workerName, groups);
1:0a7c5dc:         }
1:0a7c5dc: 
1:f5d8a05:         @Override
1:0a7c5dc:         public void run() {
1:0a7c5dc: 
1:0a7c5dc:             try {
1:0a7c5dc:                 startSignal.await();
1:0a7c5dc:                 log.info(workerName);
1:0a7c5dc:                 Session sess = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:0a7c5dc:                 MessageConsumer consumer = sess.createConsumer(queueName);
1:f5d8a05:                 workerStarted.countDown();
1:0a7c5dc: 
1:0a7c5dc:                 while (true) {
1:0a7c5dc:                     if (counters[0] == 0 && counters[1] == 0 && counters[2] == 0) {
1:0a7c5dc:                         doneSignal.countDown();
1:0a7c5dc:                         log.info(workerName + " done...");
1:0a7c5dc:                         break;
1:0a7c5dc:                     }
1:0a7c5dc: 
1:0a7c5dc:                     Message msg = consumer.receive(500);
1:0a7c5dc:                     if (msg == null)
1:0a7c5dc:                         continue;
1:0a7c5dc: 
1:0a7c5dc:                     msg.acknowledge();
1:0a7c5dc: 
1:0a7c5dc:                     String group = msg.getStringProperty("JMSXGroupID");
1:f5d8a05:                     msg.getBooleanProperty("JMSXGroupFirstForConsumer");
1:0a7c5dc: 
1:0a7c5dc:                     if ("A".equals(group)) {
1:0a7c5dc:                         --counters[0];
1:0a7c5dc:                         update(group);
1:0a7c5dc:                     } else if ("B".equals(group)) {
1:0a7c5dc:                         --counters[1];
1:0a7c5dc:                         update(group);
1:0a7c5dc:                     } else if ("C".equals(group)) {
1:0a7c5dc:                         --counters[2];
1:0a7c5dc:                         update(group);
1:0a7c5dc:                     } else {
1:0a7c5dc:                         log.warn(workerName + ", unknown group");
1:0a7c5dc:                     }
1:0a7c5dc:                     if (counters[0] != 0 || counters[1] != 0 || counters[2] != 0) {
1:0a7c5dc:                         msg.acknowledge();
1:0a7c5dc:                     }
1:0a7c5dc:                 }
1:0a7c5dc:                 consumer.close();
1:0a7c5dc:                 sess.close();
1:0a7c5dc:             } catch (Exception e) {
1:0a7c5dc:                 e.printStackTrace();
1:0a7c5dc:             }
1:0a7c5dc:         }
1:0a7c5dc:     }
1:0a7c5dc: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:d29bab5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: import static org.junit.Assert.*;
1: 
1: @RunWith(BlockJUnit4ClassRunner.class)
1: public class MessageGroupLateArrivalsTest {
/////////////////////////////////////////////////////////////////////////
1:     @Before
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @After
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30 * 1000)
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:f5d8a05
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
1:         CountDownLatch doneSignal = new CountDownLatch(3);
1:         CountDownLatch worker1Started = new CountDownLatch(1);
1:         CountDownLatch worker2Started = new CountDownLatch(1);
1:         CountDownLatch worker3Started = new CountDownLatch(1);
1:         Worker worker1 = new Worker(connection, destination, "worker1", startSignal, doneSignal, counters, messageCount, messageGroups, worker1Started);
1:         Worker worker2 = new Worker(connection, destination, "worker2", startSignal, doneSignal, counters, messageCount, messageGroups, worker2Started);
1:         Worker worker3 = new Worker(connection, destination, "worker3", startSignal, doneSignal, counters, messageCount, messageGroups, worker3Started);
1:         worker1Started.await();
1:         worker2Started.await();
/////////////////////////////////////////////////////////////////////////
1:         worker3Started.await();
/////////////////////////////////////////////////////////////////////////
1:         List<String> workers = new ArrayList<String>(messageCount.keySet());
1:         Collections.sort(workers);
1:         for (String worker : workers) {
1:         }
1: 
1:         for (String worker : workers) {
/////////////////////////////////////////////////////////////////////////
1:         CountDownLatch doneSignal = new CountDownLatch(2);
1:         CountDownLatch worker1Started = new CountDownLatch(1);
1:         CountDownLatch worker2Started = new CountDownLatch(1);
1:         Worker worker1 = new Worker(connection, destination, "worker1", startSignal, doneSignal, counters, messageCount, messageGroups, worker1Started);
1:         Worker worker2 = new Worker(connection, destination, "worker2", startSignal, doneSignal, counters, messageCount, messageGroups, worker2Started);
/////////////////////////////////////////////////////////////////////////
1:         worker2Started.await();
/////////////////////////////////////////////////////////////////////////
1:         private CountDownLatch workerStarted = null;
1:         private final HashMap<String, Integer> messageCount;
1:         private final HashMap<String, Set<String>> messageGroups;
1:         private Worker(Connection connection, Destination queueName, String workerName, CountDownLatch startSignal, CountDownLatch doneSignal,
1:                        int[] counters, HashMap<String, Integer> messageCount, HashMap<String, Set<String>> messageGroups, CountDownLatch workerStarted) {
/////////////////////////////////////////////////////////////////////////
1:             this.workerStarted = workerStarted;
/////////////////////////////////////////////////////////////////////////
0:         @Override
/////////////////////////////////////////////////////////////////////////
1:                 workerStarted.countDown();
/////////////////////////////////////////////////////////////////////////
1:                     msg.getBooleanProperty("JMSXGroupFirstForConsumer");
author:Gary Tully
-------------------------------------------------------------------------------
commit:0a7c5dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Set;
1: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: public class MessageGroupLateArrivalsTest extends JmsTestSupport {
1:     public static final Logger log = LoggerFactory.getLogger(MessageGroupLateArrivalsTest.class);
1:     protected Connection connection;
1:     protected Session session;
1:     protected MessageProducer producer;
1:     protected Destination destination;
1: 
1:     BrokerService broker;
1:     protected TransportConnector connector;
1: 
1:     protected HashMap<String, Integer> messageCount = new HashMap<String, Integer>();
1:     protected HashMap<String, Set<String>> messageGroups = new HashMap<String, Set<String>>();
1: 
0:     public static Test suite() {
0:         return suite(MessageGroupLateArrivalsTest.class);
1:     }
1: 
0:     public static void main(String[] args) {
0:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri() + "?jms.prefetchPolicy.all=1000");
1:         connection = connFactory.createConnection();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         destination = new ActiveMQQueue("test-queue2");
1:         producer = session.createProducer(destination);
1:         connection.start();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setUseConsumerPriority(true);
1:         policyMap.setDefaultEntry(policy);
1:         service.setDestinationPolicy(policyMap);
1: 
1:         connector = service.addConnector("tcp://localhost:0");
1:         return service;
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         producer.close();
1:         session.close();
1:         connection.close();
1:         broker.stop();
1:     }
1: 
1:     public void testConsumersLateToThePartyGetSomeNewGroups() throws Exception {
1: 
1:         final int perBatch = 3;
1:         int[] counters = {perBatch, perBatch, perBatch};
1: 
1:         CountDownLatch startSignal = new CountDownLatch(0);
0:         CountDownLatch doneSignal = new CountDownLatch(1);
1: 
1:         messageCount.put("worker1", 0);
1:         messageGroups.put("worker1", new HashSet<String>());
0:         Worker worker1 = new Worker(connection, destination, "worker1", startSignal, doneSignal, counters, messageCount, messageGroups);
1:         messageCount.put("worker2", 0);
1:         messageGroups.put("worker2", new HashSet<String>());
0:         Worker worker2 = new Worker(connection, destination, "worker2", startSignal, doneSignal, counters, messageCount, messageGroups);
1:         messageCount.put("worker3", 0);
1:         messageGroups.put("worker3", new HashSet<String>());
0:         Worker worker3 = new Worker(connection, destination, "worker3", startSignal, doneSignal, counters, messageCount, messageGroups);
1: 
1:         new Thread(worker1).start();
1:         new Thread(worker2).start();
1: 
1:         for (int i = 0; i < perBatch; i++) {
1:             Message msga = session.createTextMessage("hello a");
1:             msga.setStringProperty("JMSXGroupID", "A");
1:             producer.send(msga);
1: 
1:             Message msgb = session.createTextMessage("hello b");
1:             msgb.setStringProperty("JMSXGroupID", "B");
1:             producer.send(msgb);
1:         }
1: 
1:         // ensure this chap, late to the party gets a new group
1:         new Thread(worker3).start();
1: 
1:         // wait for presence before new group
0:         TimeUnit.SECONDS.sleep(4);
1: 
0:         // ensure worker 3 is not next in line with normal dispatch
0:         //Message msga = session.createTextMessage("hello to who ever is next in line");
0:         //producer.send(msga);
1: 
1:         for (int i = 0; i < perBatch; i++) {
1:             Message msgc = session.createTextMessage("hello c");
1:             msgc.setStringProperty("JMSXGroupID", "C");
1:             producer.send(msgc);
1:         }
1: 
1:         doneSignal.await();
1: 
0:         for (String worker : messageCount.keySet()) {
1:             log.info("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker));
1:             assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker)
1:                     , perBatch, messageCount.get(worker).intValue());
1:             assertEquals("worker " + worker + " received " + messageCount.get(worker) + " messages from groups " + messageGroups.get(worker)
1:                     , 1, messageGroups.get(worker).size());
1:         }
1:     }
1: 
1:     public void testConsumerLateToBigPartyGetsNewGroup() throws Exception {
1: 
1:         final int perBatch = 2;
1:         int[] counters = {perBatch, perBatch, perBatch};
1: 
1:         CountDownLatch startSignal = new CountDownLatch(0);
0:         CountDownLatch doneSignal = new CountDownLatch(1);
1: 
1:         messageCount.put("worker1", 0);
1:         messageGroups.put("worker1", new HashSet<String>());
0:         Worker worker1 = new Worker(connection, destination, "worker1", startSignal, doneSignal, counters, messageCount, messageGroups);
1:         messageCount.put("worker2", 0);
1:         messageGroups.put("worker2", new HashSet<String>());
0:         Worker worker2 = new Worker(connection, destination, "worker2", startSignal, doneSignal, counters, messageCount, messageGroups);
1: 
1:         new Thread(worker1).start();
1: 
1:         for (int i = 0; i < perBatch; i++) {
1:             Message msga = session.createTextMessage("hello c");
1:             msga.setStringProperty("JMSXGroupID", "A");
1:             producer.send(msga);
1: 
1:             Message msgb = session.createTextMessage("hello b");
1:             msgb.setStringProperty("JMSXGroupID", "B");
1:             producer.send(msgb);
1:         }
1: 
1:         // ensure this chap, late to the party gets a new group
1:         new Thread(worker2).start();
1: 
1:         // wait for presence before new group
0:         TimeUnit.SECONDS.sleep(4);
1: 
1:         for (int i = 0; i < perBatch; i++) {
1:             Message msgc = session.createTextMessage("hello a");
1:             msgc.setStringProperty("JMSXGroupID", "C");
1:             producer.send(msgc);
1:         }
1: 
1:         doneSignal.await();
1: 
1:         log.info("worker1  received " + messageCount.get("worker1") + " messages from groups " + messageGroups.get("worker1"));
1:         assertEquals("worker1 received " + messageCount.get("worker1") + " messages from groups " + messageGroups.get("worker1")
1:                 , 2 * perBatch, messageCount.get("worker1").intValue());
1:         assertEquals("worker1 received " + messageCount.get("worker1") + " messages from groups " + messageGroups.get("worker1")
1:                 , 2, messageGroups.get("worker1").size());
1: 
1:         log.info("worker2  received " + messageCount.get("worker2") + " messages from groups " + messageGroups.get("worker2"));
1:         assertEquals("worker2 received " + messageCount.get("worker2") + " messages from groups " + messageGroups.get("worker2")
1:                 , 2 * perBatch, messageCount.get("worker1").intValue());
1:         assertEquals("worker2 received " + messageCount.get("worker2") + " messages from groups " + messageGroups.get("worker2")
1:                 , 1, messageGroups.get("worker2").size());
1:     }
1: 
1:     private static final class Worker implements Runnable {
1:         private Connection connection = null;
1:         private Destination queueName = null;
1:         private String workerName = null;
1:         private CountDownLatch startSignal = null;
1:         private CountDownLatch doneSignal = null;
1:         private int[] counters = null;
0:         private HashMap<String, Integer> messageCount;
0:         private HashMap<String, Set<String>> messageGroups;
1: 
1: 
0:         private Worker(Connection connection, Destination queueName, String workerName, CountDownLatch startSignal, CountDownLatch doneSignal, int[] counters, HashMap<String, Integer> messageCount, HashMap<String, Set<String>> messageGroups) {
1:             this.connection = connection;
1:             this.queueName = queueName;
1:             this.workerName = workerName;
1:             this.startSignal = startSignal;
1:             this.doneSignal = doneSignal;
1:             this.counters = counters;
1:             this.messageCount = messageCount;
1:             this.messageGroups = messageGroups;
1:         }
1: 
1:         private void update(String group) {
1:             int msgCount = messageCount.get(workerName);
1:             messageCount.put(workerName, msgCount + 1);
1:             Set<String> groups = messageGroups.get(workerName);
1:             groups.add(group);
1:             messageGroups.put(workerName, groups);
1:         }
1: 
1:         public void run() {
1: 
1:             try {
1:                 startSignal.await();
1:                 log.info(workerName);
1:                 Session sess = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:                 MessageConsumer consumer = sess.createConsumer(queueName);
1: 
1:                 while (true) {
1:                     if (counters[0] == 0 && counters[1] == 0 && counters[2] == 0) {
1:                         doneSignal.countDown();
1:                         log.info(workerName + " done...");
1:                         break;
1:                     }
1: 
1:                     Message msg = consumer.receive(500);
1:                     if (msg == null)
1:                         continue;
1: 
1:                     msg.acknowledge();
1: 
1:                     String group = msg.getStringProperty("JMSXGroupID");
0:                     boolean first = msg.getBooleanProperty("JMSXGroupFirstForConsumer");
1: 
1:                     if ("A".equals(group)) {
1:                         --counters[0];
1:                         update(group);
0:                         //Thread.sleep(500);
1:                     } else if ("B".equals(group)) {
1:                         --counters[1];
1:                         update(group);
0:                         //Thread.sleep(100);
1:                     } else if ("C".equals(group)) {
1:                         --counters[2];
1:                         update(group);
0:                         //Thread.sleep(10);
1:                     } else {
1:                         log.warn(workerName + ", unknown group");
1:                     }
1:                     if (counters[0] != 0 || counters[1] != 0 || counters[2] != 0) {
1:                         msg.acknowledge();
1:                     }
1:                 }
1:                 consumer.close();
1:                 sess.close();
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: }
============================================================================