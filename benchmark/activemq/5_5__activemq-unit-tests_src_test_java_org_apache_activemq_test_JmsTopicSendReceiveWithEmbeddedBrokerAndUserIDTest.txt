1:10478c3: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:067660c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.test;
5:d29ca2a: 
1:74a7a8b: import java.util.List;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:10478c3: import org.apache.activemq.broker.TransportConnector;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:fc00993: public class JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest extends JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.class);
1:d29ca2a: 
1:d29ca2a:     protected String userName = "James";
1:fc00993: 
1:067660c:     @Override
1:d29ca2a:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:d29ca2a:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:d29ca2a:         answer.setUserName(userName);
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:067660c: 
1:067660c:     @Override
1:10478c3:     protected TransportConnector configureBroker(BrokerService answer) throws Exception {
1:d29ca2a:         answer.setPopulateJMSXUserID(true);
1:10478c3:         return super.configureBroker(answer);
1:d29ca2a:     }
1:d29ca2a: 
1:067660c:     @Override
1:067660c:     protected void assertMessagesReceivedAreValid(List<Message> receivedMessages) throws JMSException {
1:d29ca2a:         super.assertMessagesReceivedAreValid(receivedMessages);
1:d29ca2a: 
1:d29ca2a:         // lets assert that the user ID is set
1:067660c:         for (Message message : receivedMessages) {
1:d29ca2a:             String userID = message.getStringProperty("JMSXUserID");
1:933eb2f:             LOG.info("Received message with userID: " + userID);
1:067660c:             assertEquals("JMSXUserID header", userName, userID);
1:067660c:         }
1:067660c:     }
1:3df3302: 
1:067660c:     protected void assertMessagesAreReceived2() throws JMSException {
1:067660c:         waitForMessagesToBeDelivered();
1:067660c:         assertMessagesReceivedAreValid2(messages);
1:067660c:     }
1:067660c: 
1:067660c:     protected void assertMessagesReceivedAreValid2(List<Message> receivedMessages) throws JMSException {
1:067660c:         super.assertMessagesReceivedAreValid(receivedMessages);
1:067660c: 
1:067660c:         // lets assert that the user ID is set
1:067660c:         for (Message message : receivedMessages) {
1:067660c:             String userID = (String) message.getObjectProperty("JMSXUserID");
1:067660c:             LOG.info("Received message with userID: " + userID);
1:d29ca2a:             assertEquals("JMSXUserID header", userName, userID);
1:d29ca2a:         }
1:d29ca2a:     }
1:3df3302: 
1:3df3302:     public void testSpoofedJMSXUserIdIsIgnored() throws Exception {
1:3df3302:         for (int i = 0; i < data.length; i++) {
1:3df3302:             Message message = createMessage(i);
1:3df3302:             configureMessage(message);
1:3df3302:             message.setStringProperty("JMSXUserID", "spoofedId");
1:3df3302:             if (verbose) {
1:3df3302:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
1:3df3302:             }
1:3df3302:             sendMessage(i, message);
1:3df3302:         }
1:3df3302:         assertMessagesAreReceived();
1:3df3302:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:3df3302:     }
1:067660c: 
1:067660c:     public void testSpoofedJMSXUserIdIsIgnoredAsObjectProperty() throws Exception {
1:067660c:         for (int i = 0; i < data.length; i++) {
1:067660c:             Message message = createMessage(i);
1:067660c:             configureMessage(message);
1:067660c:             message.setStringProperty("JMSXUserID", "spoofedId");
1:067660c:             if (verbose) {
1:067660c:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
1:067660c:             }
1:067660c:             sendMessage(i, message);
1:067660c:         }
1:067660c:         assertMessagesAreReceived2();
1:067660c:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:067660c:     }
1:d29ca2a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:10478c3
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
1:     protected TransportConnector configureBroker(BrokerService answer) throws Exception {
1:         return super.configureBroker(answer);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:067660c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
1:     @Override
1:     @Override
1:     @Override
1:     protected void assertMessagesReceivedAreValid(List<Message> receivedMessages) throws JMSException {
1:         for (Message message : receivedMessages) {
1:             assertEquals("JMSXUserID header", userName, userID);
1:         }
1:     }
1:     protected void assertMessagesAreReceived2() throws JMSException {
1:         waitForMessagesToBeDelivered();
1:         assertMessagesReceivedAreValid2(messages);
1:     }
1: 
1:     protected void assertMessagesReceivedAreValid2(List<Message> receivedMessages) throws JMSException {
1:         super.assertMessagesReceivedAreValid(receivedMessages);
1: 
1:         // lets assert that the user ID is set
1:         for (Message message : receivedMessages) {
1:             String userID = (String) message.getObjectProperty("JMSXUserID");
1:             LOG.info("Received message with userID: " + userID);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testSpoofedJMSXUserIdIsIgnoredAsObjectProperty() throws Exception {
0:         Thread.sleep(1000);
0:         messages.clear();
1: 
1:         for (int i = 0; i < data.length; i++) {
1:             Message message = createMessage(i);
1:             configureMessage(message);
1:             message.setStringProperty("JMSXUserID", "spoofedId");
1:             if (verbose) {
1:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
1:             }
1:             sendMessage(i, message);
1:         }
1:         assertMessagesAreReceived2();
1:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:     }
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:3df3302
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testSpoofedJMSXUserIdIsIgnored() throws Exception {
0:         Thread.sleep(1000);
0:         messages.clear();
1: 
1:         for (int i = 0; i < data.length; i++) {
1:             Message message = createMessage(i);
1:             configureMessage(message);
1:             message.setStringProperty("JMSXUserID", "spoofedId");
1:             if (verbose) {
1:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
1:             }
1:             sendMessage(i, message);
1:         }
1:         assertMessagesAreReceived();
1:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Received message with userID: " + userID);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.security.SimpleSecurityBrokerSystemTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: public class JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest extends JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest {
0:     private static final Log log = LogFactory.getLog(JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:             Message message = (Message)iter.next();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
1: import java.util.List;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:             log.info("Received message with userID: " + userID);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: 
0: import java.util.Iterator;
0: import java.util.List;
1: 
0: /**
0:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest extends
0:         JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest {
1: 
1:     protected String userName = "James";
1:     
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:         answer.setUserName(userName);
1:         return answer;
1:     }
1: 
0:     protected void configureBroker(BrokerService answer) throws Exception {
1:         answer.setPopulateJMSXUserID(true);
0:         super.configureBroker(answer);
1:     }
1: 
0:     protected void assertMessagesReceivedAreValid(List receivedMessages) throws JMSException {
1:         super.assertMessagesReceivedAreValid(receivedMessages);
1: 
1:         // lets assert that the user ID is set
0:         for (Iterator iter = receivedMessages.iterator(); iter.hasNext();) {
0:             Message message = (Message) iter.next();
1:             String userID = message.getStringProperty("JMSXUserID");
1: 
0:             System.out.println("Received message with userID: " + userID);
1: 
1:             assertEquals("JMSXUserID header", userName, userID);
1:         }
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.class);
============================================================================