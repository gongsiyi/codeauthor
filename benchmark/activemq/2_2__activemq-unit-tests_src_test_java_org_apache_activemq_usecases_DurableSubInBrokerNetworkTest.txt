1:b7c32d9: /**
1:b7c32d9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b7c32d9:  * contributor license agreements.  See the NOTICE file distributed with
1:b7c32d9:  * this work for additional information regarding copyright ownership.
1:b7c32d9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b7c32d9:  * (the "License"); you may not use this file except in compliance with
1:b7c32d9:  * the License.  You may obtain a copy of the License at
1:b7c32d9:  *
1:b7c32d9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b7c32d9:  *
1:b7c32d9:  * Unless required by applicable law or agreed to in writing, software
1:b7c32d9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b7c32d9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7c32d9:  * See the License for the specific language governing permissions and
1:b7c32d9:  * limitations under the License.
1:b7c32d9:  */
1:b7c32d9: package org.apache.activemq.usecases;
3:b7c32d9: 
1:b7c32d9: import java.net.URI;
1:b7c32d9: 
1:b7c32d9: import javax.jms.Connection;
1:b7c32d9: import javax.jms.Destination;
1:b7c32d9: import javax.jms.Session;
1:b7c32d9: import javax.jms.Topic;
1:b7c32d9: import javax.jms.TopicSubscriber;
1:b7c32d9: 
1:b7c32d9: import javax.management.ObjectName;
1:b7c32d9: 
1:b7c32d9: import org.apache.activemq.ActiveMQConnectionFactory;
1:b7c32d9: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:b7c32d9: import org.apache.activemq.network.NetworkConnector;
1:b7c32d9: import org.apache.activemq.network.NetworkTestSupport;
1:b7c32d9: import org.slf4j.Logger;
1:b7c32d9: import org.slf4j.LoggerFactory;
1:b7c32d9: 
1:b7c32d9: /**
1:b7c32d9:  * Tests durable topic subscriptions inside a network of brokers.
1:b7c32d9:  * 
1:b7c32d9:  * @author tmielke
1:b7c32d9:  *
1:b7c32d9:  */
1:b7c32d9: public class DurableSubInBrokerNetworkTest extends NetworkTestSupport {
1:b7c32d9: 
1:620523a:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubInBrokerNetworkTest.class);
1:b7c32d9:     // protected BrokerService localBroker;
1:b7c32d9:     private final String subName = "Subscriber1";
1:83b8df6:     private final String subName2 = "Subscriber2";
1:b7c32d9:     private final String topicName = "TEST.FOO";
1:b7c32d9: 
1:b7c32d9:     protected void setUp() throws Exception {
1:b7c32d9:         useJmx=true;
1:b7c32d9:         super.setUp();
1:b7c32d9: 
1:b7c32d9:         URI ncUri = new URI("static:(" + connector.getConnectUri().toString() + ")");
1:b7c32d9:         NetworkConnector nc = new DiscoveryNetworkConnector(ncUri);
1:b7c32d9:         nc.setDuplex(true);
1:b7c32d9:         remoteBroker.addNetworkConnector(nc);
1:b7c32d9:         nc.start();
4:b7c32d9:     }
1:b7c32d9: 
1:b7c32d9:     protected void tearDown() throws Exception {
1:b7c32d9:         if (remoteBroker.isStarted()) {
1:b7c32d9:             remoteBroker.stop();
1:b7c32d9:             remoteBroker.waitUntilStopped();
1:b7c32d9:         }
1:b7c32d9:         if (broker.isStarted()) {
1:b7c32d9:             broker.stop();
1:b7c32d9:             broker.waitUntilStopped();
1:b7c32d9:         }
1:b7c32d9:         super.tearDown();
1:b7c32d9:     }
1:b7c32d9: 
1:b7c32d9: 
1:b7c32d9:     /**
1:b7c32d9:      * Creates a durable topic subscription, checks that it is propagated
1:b7c32d9:      * in the broker network, removes the subscription and checks that
1:b7c32d9:      * the subscription is removed from remote broker as well.
1:b7c32d9:      *  
1:b7c32d9:      * @throws Exception
1:b7c32d9:      */
1:b7c32d9:     public void testDurableSubNetwork() throws Exception {
1:b7c32d9:         LOG.info("testDurableSubNetwork started.");
1:b7c32d9: 
1:b7c32d9:         // create durable sub
1:b7c32d9:         ActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());
1:b7c32d9:         Connection conn = fact.createConnection();
1:b7c32d9:         conn.setClientID("clientID1");
1:b7c32d9:         Session session = conn.createSession(false, 1);
1:b7c32d9:         Destination dest = session.createTopic(topicName);
1:b7c32d9:         TopicSubscriber sub = session.createDurableSubscriber((Topic)dest, subName);
1:b7c32d9:         LOG.info("Durable subscription of name " + subName + "created.");
1:b7c32d9:         Thread.sleep(100);
1:b7c32d9: 
1:b7c32d9:         // query durable sub on local and remote broker
1:b7c32d9:         // raise an error if not found
1:b7c32d9: 
1:83b8df6:         assertTrue(foundSubInLocalBroker(subName));
1:83b8df6: 
1:83b8df6: 
1:83b8df6:         assertTrue(foundSubInRemoteBrokerByTopicName(topicName));
1:b7c32d9: 
1:b7c32d9:         // unsubscribe from durable sub
1:b7c32d9:         sub.close();
1:b7c32d9:         session.unsubscribe(subName);
1:b7c32d9:         LOG.info("Unsubscribed from durable subscription.");
1:b7c32d9:         Thread.sleep(100);
1:b7c32d9: 
1:b7c32d9:         // query durable sub on local and remote broker
1:b7c32d9:         // raise an error if its not removed from both brokers
1:83b8df6:         assertFalse(foundSubInLocalBroker(subName));
1:83b8df6: 
1:83b8df6:         assertFalse("Durable subscription not unregistered on remote broker",
1:83b8df6:                 foundSubInRemoteBrokerByTopicName(topicName));
1:83b8df6: 
1:83b8df6: 
1:83b8df6:     }
1:83b8df6: 
1:83b8df6:     public void testTwoDurableSubsInNetworkWithUnsubscribe() throws Exception{
1:83b8df6: 
1:83b8df6:         // create 1st durable sub to topic TEST.FOO
1:83b8df6:         ActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());
1:83b8df6:         Connection conn = fact.createConnection();
1:83b8df6:         conn.setClientID("clientID1");
1:83b8df6:         Session session = conn.createSession(false, 1);
1:83b8df6:         Destination dest = session.createTopic(topicName);
1:83b8df6:         TopicSubscriber sub = session.createDurableSubscriber((Topic)dest, subName);
1:83b8df6:         LOG.info("Durable subscription of name " + subName + "created.");
1:83b8df6:         TopicSubscriber sub2 = session.createDurableSubscriber((Topic) dest, subName2);
1:83b8df6:         LOG.info("Durable subscription of name " + subName2 + "created.");
1:83b8df6: 
1:83b8df6:         Thread.sleep(100);
1:83b8df6: 
1:83b8df6:         // query durable sub on local and remote broker
1:83b8df6:         // raise an error if not found
1:83b8df6: 
1:83b8df6:         assertTrue(foundSubInLocalBroker(subName));
1:83b8df6:         assertTrue(foundSubInLocalBroker(subName2));
1:83b8df6: 
1:83b8df6: 
1:83b8df6:         assertTrue(foundSubInRemoteBrokerByTopicName(topicName));
1:83b8df6: 
1:83b8df6:         // unsubscribe from durable sub
1:83b8df6:         sub.close();
1:83b8df6:         session.unsubscribe(subName);
1:83b8df6:         LOG.info("Unsubscribed from durable subscription.");
1:83b8df6:         Thread.sleep(100);
1:83b8df6: 
1:83b8df6:         // query durable sub on local and remote broker
1:83b8df6:         assertFalse(foundSubInLocalBroker(subName));
1:83b8df6:         assertTrue(foundSubInLocalBroker(subName2));
1:b7c32d9: 
1:83b8df6:         assertTrue("Durable subscription should still be on remote broker",
1:83b8df6:                 foundSubInRemoteBrokerByTopicName(topicName));
1:83b8df6: 
1:620523a:         sub2.close();
1:620523a:         session.unsubscribe(subName2);
1:620523a: 
1:620523a:         Thread.sleep(100);
1:620523a: 
1:620523a:         assertFalse(foundSubInLocalBroker(subName2));
1:620523a: 
1:620523a:         assertFalse("Durable subscription not unregistered on remote broker",
1:620523a:                 foundSubInRemoteBrokerByTopicName(topicName));
1:620523a: 
1:83b8df6:     }
1:83b8df6: 
1:83b8df6:     private boolean foundSubInRemoteBrokerByTopicName(String topicName) throws Exception {
1:83b8df6:         boolean foundSub = false;
1:83b8df6:         ObjectName[] subs = remoteBroker.getAdminView().getDurableTopicSubscribers();
4:b7c32d9:         for (int i=0 ; i<subs.length; i++) {
2:b7c32d9:             if (subs[i].toString().contains("destinationName=" + topicName))
4:b7c32d9:                 foundSub = true;
1:b7c32d9:         }
1:83b8df6:         return foundSub;
1:83b8df6:     }
1:b7c32d9: 
1:83b8df6:     private boolean foundSubInLocalBroker(String subName) throws Exception {
1:83b8df6:         boolean foundSub = false;
1:83b8df6:         ObjectName[] subs = broker.getAdminView().getDurableTopicSubscribers();
1:b7c32d9: 
1:83b8df6:         for (int i=0 ; i<subs.length; i++) {
1:83b8df6:             if (subs[i].toString().contains(subName))
1:83b8df6:                 foundSub = true;
1:83b8df6:         }
1:83b8df6:         return foundSub;
1:b7c32d9:     }
1:b7c32d9: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:620523a
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubInBrokerNetworkTest.class);
/////////////////////////////////////////////////////////////////////////
1:         sub2.close();
1:         session.unsubscribe(subName2);
1: 
1:         Thread.sleep(100);
1: 
1:         assertFalse(foundSubInLocalBroker(subName2));
1: 
1:         assertFalse("Durable subscription not unregistered on remote broker",
1:                 foundSubInRemoteBrokerByTopicName(topicName));
1: 
author:Christian Posta
-------------------------------------------------------------------------------
commit:83b8df6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final String subName2 = "Subscriber2";
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(foundSubInLocalBroker(subName));
1: 
1: 
1:         assertTrue(foundSubInRemoteBrokerByTopicName(topicName));
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(foundSubInLocalBroker(subName));
1:         assertFalse("Durable subscription not unregistered on remote broker",
1:                 foundSubInRemoteBrokerByTopicName(topicName));
1: 
1: 
1:     }
1: 
1:     public void testTwoDurableSubsInNetworkWithUnsubscribe() throws Exception{
1: 
1:         // create 1st durable sub to topic TEST.FOO
1:         ActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());
1:         Connection conn = fact.createConnection();
1:         conn.setClientID("clientID1");
1:         Session session = conn.createSession(false, 1);
1:         Destination dest = session.createTopic(topicName);
1:         TopicSubscriber sub = session.createDurableSubscriber((Topic)dest, subName);
1:         LOG.info("Durable subscription of name " + subName + "created.");
1:         TopicSubscriber sub2 = session.createDurableSubscriber((Topic) dest, subName2);
1:         LOG.info("Durable subscription of name " + subName2 + "created.");
1: 
1:         Thread.sleep(100);
1: 
1:         // query durable sub on local and remote broker
1:         // raise an error if not found
1: 
1:         assertTrue(foundSubInLocalBroker(subName));
1:         assertTrue(foundSubInLocalBroker(subName2));
1: 
1: 
1:         assertTrue(foundSubInRemoteBrokerByTopicName(topicName));
1: 
1:         // unsubscribe from durable sub
1:         sub.close();
1:         session.unsubscribe(subName);
1:         LOG.info("Unsubscribed from durable subscription.");
1:         Thread.sleep(100);
1: 
1:         // query durable sub on local and remote broker
1:         assertFalse(foundSubInLocalBroker(subName));
1:         assertTrue(foundSubInLocalBroker(subName2));
1: 
1:         assertTrue("Durable subscription should still be on remote broker",
1:                 foundSubInRemoteBrokerByTopicName(topicName));
1: 
1:     }
1: 
1:     private boolean foundSubInRemoteBrokerByTopicName(String topicName) throws Exception {
1:         boolean foundSub = false;
1:         ObjectName[] subs = remoteBroker.getAdminView().getDurableTopicSubscribers();
1:         return foundSub;
1:     }
1:     private boolean foundSubInLocalBroker(String subName) throws Exception {
1:         boolean foundSub = false;
1:         ObjectName[] subs = broker.getAdminView().getDurableTopicSubscribers();
1:         for (int i=0 ; i<subs.length; i++) {
1:             if (subs[i].toString().contains(subName))
1:                 foundSub = true;
1:         }
1:         return foundSub;
commit:b7c32d9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: 
1: import javax.management.ObjectName;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.network.NetworkTestSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests durable topic subscriptions inside a network of brokers.
1:  * 
1:  * @author tmielke
1:  *
1:  */
1: public class DurableSubInBrokerNetworkTest extends NetworkTestSupport {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(NetworkConnector.class);
1:     // protected BrokerService localBroker;
1:     private final String subName = "Subscriber1";
1:     private final String topicName = "TEST.FOO";
1: 
1:     protected void setUp() throws Exception {
1:         useJmx=true;
1:         super.setUp();
1: 
1:         URI ncUri = new URI("static:(" + connector.getConnectUri().toString() + ")");
1:         NetworkConnector nc = new DiscoveryNetworkConnector(ncUri);
1:         nc.setDuplex(true);
1:         remoteBroker.addNetworkConnector(nc);
1:         nc.start();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (remoteBroker.isStarted()) {
1:             remoteBroker.stop();
1:             remoteBroker.waitUntilStopped();
1:         }
1:         if (broker.isStarted()) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:         super.tearDown();
1:     }
1: 
1: 
1:     /**
1:      * Creates a durable topic subscription, checks that it is propagated
1:      * in the broker network, removes the subscription and checks that
1:      * the subscription is removed from remote broker as well.
1:      *  
1:      * @throws Exception
1:      */
1:     public void testDurableSubNetwork() throws Exception {
1:         LOG.info("testDurableSubNetwork started.");
1: 
1:         // create durable sub
1:         ActiveMQConnectionFactory fact = new ActiveMQConnectionFactory(connector.getConnectUri().toString());
1:         Connection conn = fact.createConnection();
1:         conn.setClientID("clientID1");
1:         Session session = conn.createSession(false, 1);
1:         Destination dest = session.createTopic(topicName);
1:         TopicSubscriber sub = session.createDurableSubscriber((Topic)dest, subName);
1:         LOG.info("Durable subscription of name " + subName + "created.");
1:         Thread.sleep(100);
1: 
1:         // query durable sub on local and remote broker
1:         // raise an error if not found
0:         boolean foundSub = false;
0:         ObjectName[] subs = broker.getAdminView().getDurableTopicSubscribers();
1:         
1:         for (int i=0 ; i<subs.length; i++) {
0:             if (subs[i].toString().contains(subName))
1:                 foundSub = true;
1:         }
0:         Assert.assertTrue(foundSub);
1: 
0:         foundSub = false;
0:         subs = remoteBroker.getAdminView().getDurableTopicSubscribers();
1:         for (int i=0 ; i<subs.length; i++) {
1:             if (subs[i].toString().contains("destinationName=" + topicName))
1:                 foundSub = true;
1:         }
0:         Assert.assertTrue(foundSub);
1: 
1:         // unsubscribe from durable sub
1:         sub.close();
1:         session.unsubscribe(subName);
1:         LOG.info("Unsubscribed from durable subscription.");
1:         Thread.sleep(100);
1: 
1:         // query durable sub on local and remote broker
1:         // raise an error if its not removed from both brokers
0:         foundSub = false;
0:         subs = broker.getAdminView().getDurableTopicSubscribers();
1:         for (int i=0 ; i<subs.length; i++) {
0:             if (subs[i].toString().contains(subName))
1:                 foundSub = true;
1:         }
0:         Assert.assertFalse(foundSub);
1: 
0:         foundSub = false;
0:         subs = remoteBroker.getAdminView().getDurableTopicSubscribers();
1:         for (int i=0 ; i<subs.length; i++) {
1:             if (subs[i].toString().contains("destinationName=" + topicName))
1:                 foundSub = true;
1:         }
0:         Assert.assertFalse("Durable subscription not unregistered on remote broker", foundSub);
1: 
1: 
1:     }
1: }
============================================================================