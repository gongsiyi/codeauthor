1:c5c1495: /**
1:c5c1495:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c5c1495:  * contributor license agreements.  See the NOTICE file distributed with
1:c5c1495:  * this work for additional information regarding copyright ownership.
1:c5c1495:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c5c1495:  * (the "License"); you may not use this file except in compliance with
1:c5c1495:  * the License.  You may obtain a copy of the License at
1:c5c1495:  *
1:c5c1495:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c5c1495:  *
1:c5c1495:  * Unless required by applicable law or agreed to in writing, software
1:c5c1495:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5c1495:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5c1495:  * See the License for the specific language governing permissions and
1:c5c1495:  * limitations under the License.
1:c5c1495:  */
1:c5c1495: package org.apache.activemq.bugs;
1:c5c1495: 
1:c5c1495: import javax.jms.BytesMessage;
1:c5c1495: import javax.jms.Connection;
1:c5c1495: import javax.jms.ConnectionFactory;
1:c5c1495: import javax.jms.JMSException;
1:c5c1495: import javax.jms.MessageProducer;
1:c5c1495: import javax.jms.Session;
1:c5c1495: import javax.jms.Topic;
1:5667e4d: 
1:c5c1495: import org.apache.activemq.ActiveMQConnectionFactory;
1:c5c1495: import org.apache.activemq.broker.BrokerRegistry;
1:c5c1495: import org.apache.activemq.broker.BrokerService;
1:c5c1495: import org.junit.After;
1:c5c1495: import org.junit.Before;
1:c5c1495: import org.junit.Test;
1:c5c1495: 
1:c5c1495: public class AMQ5136Test {
1:c5c1495: 
1:c5c1495:     BrokerService brokerService;
1:c5c1495:     @Before
1:c5c1495:     public void startBroker() throws Exception {
1:c5c1495:         brokerService = new BrokerService();
1:c5c1495:         brokerService.setPersistent(false);
1:5667e4d:         brokerService.setUseJmx(false);
1:c5c1495:         brokerService.start();
1:c5c1495:     }
1:c5c1495: 
1:c5c1495:     @After
1:c5c1495:     public void stopBroker() throws Exception {
1:c5c1495:         brokerService.stop();
1:c5c1495:     }
1:c5c1495: 
1:c5c1495:     @Test
1:c5c1495:     public void memoryUsageOnCommit() throws Exception {
1:c5c1495:         sendMessagesAndAssertMemoryUsage(new TransactionHandler() {
1:c5c1495:             @Override
1:c5c1495:             public void finishTransaction(Session session) throws JMSException {
1:c5c1495:                 session.commit();
1:c5c1495:             }
1:c5c1495:         });
1:c5c1495:     }
1:c5c1495: 
1:c5c1495:     @Test
1:c5c1495:     public void memoryUsageOnRollback() throws Exception {
1:c5c1495:         sendMessagesAndAssertMemoryUsage(new TransactionHandler() {
1:c5c1495:             @Override
1:c5c1495:             public void finishTransaction(Session session) throws JMSException {
1:c5c1495:                 session.rollback();
1:c5c1495:             }
1:c5c1495:         });
1:c5c1495:     }
1:c5c1495: 
1:c5c1495:     private void sendMessagesAndAssertMemoryUsage(TransactionHandler transactionHandler) throws Exception {
1:c5c1495:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:c5c1495:         Connection connection = connectionFactory.createConnection();
1:c5c1495:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:c5c1495:         Topic destination = session.createTopic("ActiveMQBug");
1:c5c1495:         MessageProducer producer = session.createProducer(destination);
1:c5c1495:         for (int i = 0; i < 100; i++) {
1:c5c1495:             BytesMessage message = session.createBytesMessage();
1:c5c1495:             message.writeBytes(generateBytes());
1:c5c1495:             producer.send(message);
1:c5c1495:             transactionHandler.finishTransaction(session);
1:c5c1495:         }
1:c5c1495:         connection.close();
1:c5c1495:         org.junit.Assert.assertEquals(0, BrokerRegistry.getInstance().findFirst().getSystemUsage().getMemoryUsage().getPercentUsage());
1:c5c1495:     }
1:c5c1495: 
1:c5c1495:     private byte[] generateBytes() {
1:c5c1495:         byte[] bytes = new byte[100000];
1:c5c1495:         for (int i = 0; i < 100000; i++) {
1:c5c1495:             bytes[i] = (byte) i;
1:c5c1495:         }
1:c5c1495:         return bytes;
1:c5c1495:     }
1:c5c1495: 
1:c5c1495:     private static interface TransactionHandler {
1:c5c1495:         void finishTransaction(Session session) throws JMSException;
1:c5c1495:     }
1:c5c1495: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5667e4d
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(false);
author:gtully
-------------------------------------------------------------------------------
commit:c5c1495
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ5136Test {
1: 
1:     BrokerService brokerService;
1:     @Before
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1:     @Test
1:     public void memoryUsageOnCommit() throws Exception {
1:         sendMessagesAndAssertMemoryUsage(new TransactionHandler() {
1:             @Override
1:             public void finishTransaction(Session session) throws JMSException {
1:                 session.commit();
1:             }
1:         });
1:     }
1: 
1:     @Test
1:     public void memoryUsageOnRollback() throws Exception {
1:         sendMessagesAndAssertMemoryUsage(new TransactionHandler() {
1:             @Override
1:             public void finishTransaction(Session session) throws JMSException {
1:                 session.rollback();
1:             }
1:         });
1:     }
1: 
1:     private void sendMessagesAndAssertMemoryUsage(TransactionHandler transactionHandler) throws Exception {
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = connectionFactory.createConnection();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Topic destination = session.createTopic("ActiveMQBug");
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 0; i < 100; i++) {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeBytes(generateBytes());
1:             producer.send(message);
1:             transactionHandler.finishTransaction(session);
1:         }
1:         connection.close();
1:         org.junit.Assert.assertEquals(0, BrokerRegistry.getInstance().findFirst().getSystemUsage().getMemoryUsage().getPercentUsage());
1:     }
1: 
1:     private byte[] generateBytes() {
1:         byte[] bytes = new byte[100000];
1:         for (int i = 0; i < 100000; i++) {
1:             bytes[i] = (byte) i;
1:         }
1:         return bytes;
1:     }
1: 
1:     private static interface TransactionHandler {
1:         void finishTransaction(Session session) throws JMSException;
1:     }
1: }
============================================================================