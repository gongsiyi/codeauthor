1:31834ed: /**
1:31834ed:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:31834ed:  * contributor license agreements.  See the NOTICE file distributed with
1:31834ed:  * this work for additional information regarding copyright ownership.
1:31834ed:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:31834ed:  * (the "License"); you may not use this file except in compliance with
1:31834ed:  * the License.  You may obtain a copy of the License at
1:31834ed:  *
1:31834ed:  *      http://www.apache.org/licenses/LICENSE-2.0
1:31834ed:  *
1:31834ed:  * Unless required by applicable law or agreed to in writing, software
1:31834ed:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31834ed:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31834ed:  * See the License for the specific language governing permissions and
1:31834ed:  * limitations under the License.
1:31834ed:  */
1:31834ed: package org.apache.activemq.transport.amqp.interop;
1:31834ed: 
1:31834ed: import static org.junit.Assert.assertEquals;
1:31834ed: import static org.junit.Assert.assertTrue;
1:31834ed: 
1:31834ed: import java.util.Random;
1:31834ed: 
1:31834ed: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:31834ed: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:31834ed: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:31834ed: import org.apache.activemq.util.Wait;
1:31834ed: import org.junit.Test;
1:31834ed: 
1:31834ed: /**
1:31834ed:  * Test that broker closes connection and allows a new one when the transport
1:31834ed:  * receives a bad chunk of data after a successful connect.
1:31834ed:  */
1:31834ed: public class AmqpCorruptedFrameHandlingTest extends AmqpClientTestSupport {
1:31834ed: 
1:a5c2f3f:     @Override
1:a5c2f3f:     protected String getAdditionalConfig() {
1:7c41ebc:         return "?transport.maxFrameSize=65535&transport.wireFormat.idleTimeout=5000";
1:a5c2f3f:     }
1:a5c2f3f: 
1:31834ed:     @Test(timeout = 60000)
1:a5c2f3f:     public void testHandlingCorruptedFramePayload() throws Exception {
1:31834ed:         Random random = new Random();
1:31834ed:         random.setSeed(System.nanoTime());
1:31834ed: 
1:31834ed:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:31834ed: 
1:31834ed:         connection.setContainerId("ClientID:" + getTestName());
1:31834ed:         connection.connect();
1:31834ed: 
1:31834ed:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:31834ed: 
1:31834ed:         // Send frame with valid size prefix, but corrupted payload.
1:31834ed:         byte[] corruptedFrame = new byte[1024];
1:31834ed:         random.nextBytes(corruptedFrame);
1:31834ed:         corruptedFrame[0] = 0x0;
1:31834ed:         corruptedFrame[1] = 0x0;
1:31834ed:         corruptedFrame[2] = 0x4;
1:31834ed:         corruptedFrame[3] = 0x0;
1:31834ed: 
1:31834ed:         connection.sendRawBytes(corruptedFrame);
1:31834ed: 
1:31834ed:         assertTrue("Connection should have dropped.", Wait.waitFor(new Wait.Condition() {
1:31834ed: 
1:31834ed:             @Override
1:31834ed:             public boolean isSatisified() throws Exception {
1:31834ed:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:31834ed:             }
1:31834ed:         }));
1:a5c2f3f: 
1:31834ed:         connection.close();
1:a5c2f3f: 
1:a5c2f3f:         // Should be able to recycle the client ID now.
1:a5c2f3f:         connection = client.createConnection();
1:a5c2f3f:         connection.setContainerId("ClientID:" + getTestName());
1:a5c2f3f:         connection.connect();
1:a5c2f3f:     }
1:a5c2f3f: 
1:a5c2f3f:     @Test(timeout = 60000)
1:a5c2f3f:     public void testHandleFrameWithNegativeSize() throws Exception {
1:a5c2f3f:         Random random = new Random();
1:a5c2f3f:         random.setSeed(System.nanoTime());
1:a5c2f3f: 
1:a5c2f3f:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:a5c2f3f: 
1:a5c2f3f:         connection.setContainerId("ClientID:" + getTestName());
1:a5c2f3f:         connection.connect();
1:a5c2f3f: 
1:a5c2f3f:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:a5c2f3f: 
1:a5c2f3f:         // Send frame with valid size prefix, but corrupted payload.
1:a5c2f3f:         byte[] corruptedFrame = new byte[1024];
1:a5c2f3f:         random.nextBytes(corruptedFrame);
1:a5c2f3f:         corruptedFrame[0] = (byte) 0xFF;
1:a5c2f3f:         corruptedFrame[1] = 0x0;
1:a5c2f3f:         corruptedFrame[2] = 0x4;
1:a5c2f3f:         corruptedFrame[3] = 0x0;
1:a5c2f3f: 
1:a5c2f3f:         connection.sendRawBytes(corruptedFrame);
1:a5c2f3f: 
1:a5c2f3f:         assertTrue("Connection should have dropped.", Wait.waitFor(new Wait.Condition() {
1:a5c2f3f: 
1:a5c2f3f:             @Override
1:a5c2f3f:             public boolean isSatisified() throws Exception {
1:a5c2f3f:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:a5c2f3f:             }
1:a5c2f3f:         }));
1:a5c2f3f: 
1:a5c2f3f:         connection.close();
1:a5c2f3f: 
1:a5c2f3f:         // Should be able to recycle the client ID now.
1:a5c2f3f:         connection = client.createConnection();
1:a5c2f3f:         connection.setContainerId("ClientID:" + getTestName());
1:a5c2f3f:         connection.connect();
1:a5c2f3f:     }
1:a5c2f3f: 
1:a5c2f3f:     @Test(timeout = 60000)
1:a5c2f3f:     public void testHandleFrameSizeExceedsMaxFrameSize() throws Exception {
1:a5c2f3f:         Random random = new Random();
1:a5c2f3f:         random.setSeed(System.nanoTime());
1:a5c2f3f: 
1:a5c2f3f:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:a5c2f3f: 
1:a5c2f3f:         connection.setContainerId("ClientID:" + getTestName());
1:a5c2f3f:         connection.connect();
1:a5c2f3f: 
1:a5c2f3f:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1:a5c2f3f: 
1:a5c2f3f:         // Send frame with valid size prefix, but corrupted payload.
1:a5c2f3f:         byte[] corruptedFrame = new byte[1024];
1:a5c2f3f:         random.nextBytes(corruptedFrame);
1:a5c2f3f:         corruptedFrame[0] = 0x0;
1:a5c2f3f:         corruptedFrame[1] = 0x7F;
1:a5c2f3f:         corruptedFrame[2] = 0x7F;
1:a5c2f3f:         corruptedFrame[3] = 0x7F;
1:a5c2f3f: 
1:a5c2f3f:         connection.sendRawBytes(corruptedFrame);
1:a5c2f3f: 
1:a5c2f3f:         assertTrue("Connection should have dropped.", Wait.waitFor(new Wait.Condition() {
1:a5c2f3f: 
1:a5c2f3f:             @Override
1:a5c2f3f:             public boolean isSatisified() throws Exception {
1:a5c2f3f:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:a5c2f3f:             }
1:a5c2f3f:         }));
1:a5c2f3f: 
1:a5c2f3f:         connection.close();
1:31834ed: 
1:a5c2f3f:         // Should be able to recycle the client ID now.
1:a5c2f3f:         connection = client.createConnection();
1:a5c2f3f:         connection.setContainerId("ClientID:" + getTestName());
1:a5c2f3f:         connection.connect();
1:31834ed:     }
1:31834ed: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
commit:7c41ebc
/////////////////////////////////////////////////////////////////////////
1:         return "?transport.maxFrameSize=65535&transport.wireFormat.idleTimeout=5000";
commit:a5c2f3f
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected String getAdditionalConfig() {
0:         return "?transport.wireFormat.maxFrameSize=65535";
1:     }
1: 
1:     public void testHandlingCorruptedFramePayload() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Should be able to recycle the client ID now.
1:         connection = client.createConnection();
1:         connection.setContainerId("ClientID:" + getTestName());
1:         connection.connect();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testHandleFrameWithNegativeSize() throws Exception {
1:         Random random = new Random();
1:         random.setSeed(System.nanoTime());
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1: 
1:         connection.setContainerId("ClientID:" + getTestName());
1:         connection.connect();
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         // Send frame with valid size prefix, but corrupted payload.
1:         byte[] corruptedFrame = new byte[1024];
1:         random.nextBytes(corruptedFrame);
1:         corruptedFrame[0] = (byte) 0xFF;
1:         corruptedFrame[1] = 0x0;
1:         corruptedFrame[2] = 0x4;
1:         corruptedFrame[3] = 0x0;
1: 
1:         connection.sendRawBytes(corruptedFrame);
1: 
1:         assertTrue("Connection should have dropped.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1: 
1:         connection.close();
1: 
1:         // Should be able to recycle the client ID now.
1:         connection = client.createConnection();
1:         connection.setContainerId("ClientID:" + getTestName());
1:         connection.connect();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testHandleFrameSizeExceedsMaxFrameSize() throws Exception {
1:         Random random = new Random();
1:         random.setSeed(System.nanoTime());
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1: 
1:         connection.setContainerId("ClientID:" + getTestName());
1:         connection.connect();
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         // Send frame with valid size prefix, but corrupted payload.
1:         byte[] corruptedFrame = new byte[1024];
1:         random.nextBytes(corruptedFrame);
1:         corruptedFrame[0] = 0x0;
1:         corruptedFrame[1] = 0x7F;
1:         corruptedFrame[2] = 0x7F;
1:         corruptedFrame[3] = 0x7F;
1: 
1:         connection.sendRawBytes(corruptedFrame);
1: 
1:         assertTrue("Connection should have dropped.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1: 
1:         connection.close();
1: 
1:         // Should be able to recycle the client ID now.
1:         connection = client.createConnection();
1:         connection.setContainerId("ClientID:" + getTestName());
1:         connection.connect();
commit:31834ed
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Random;
1: 
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: 
1: /**
1:  * Test that broker closes connection and allows a new one when the transport
1:  * receives a bad chunk of data after a successful connect.
1:  */
1: public class AmqpCorruptedFrameHandlingTest extends AmqpClientTestSupport {
1: 
1:     @Test(timeout = 60000)
0:     public void testCanConnect() throws Exception {
1:         Random random = new Random();
1:         random.setSeed(System.nanoTime());
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1: 
1:         connection.setContainerId("ClientID:" + getTestName());
1:         connection.connect();
1: 
1:         assertEquals(1, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         // Send frame with valid size prefix, but corrupted payload.
1:         byte[] corruptedFrame = new byte[1024];
1:         random.nextBytes(corruptedFrame);
1:         corruptedFrame[0] = 0x0;
1:         corruptedFrame[1] = 0x0;
1:         corruptedFrame[2] = 0x4;
1:         corruptedFrame[3] = 0x0;
1: 
1:         connection.sendRawBytes(corruptedFrame);
1: 
1:         assertTrue("Connection should have dropped.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1: 
1:         connection.close();
1:     }
1: }
============================================================================