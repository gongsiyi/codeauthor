1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
3:d29ca2a: 
1:1a5ad28: import java.io.File;
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URISyntaxException;
1:58aca86: 
1:1a5ad28: import org.apache.activemq.util.IOHelper;
1:d29ca2a: 
1:d29ca2a: public class BrokerRestartTestSupport extends BrokerTestSupport {
1:d29ca2a: 
1:1a5ad28:     @Override
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:d29ca2a:         BrokerService broker = new BrokerService();
1:1a5ad28:         File dir = broker.getBrokerDataDirectory();
1:1a5ad28:         if (dir != null) {
1:1a5ad28:             IOHelper.deleteChildren(dir);
1:1a5ad28:         }
1:409902c:         broker.setDeleteAllMessagesOnStartup(true);
1:101e711:         configureBroker(broker);
1:d29ca2a:         return broker;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * @return
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     protected BrokerService createRestartedBroker() throws Exception {
1:d29ca2a:         BrokerService broker = new BrokerService();
1:101e711:         configureBroker(broker);
1:d29ca2a:         return broker;
1:d29ca2a:     }
1:d29ca2a: 
1:7631ca9:     protected void configureBroker(BrokerService broker) throws Exception {
1:7631ca9:          broker.setDestinationPolicy(policyMap);
1:101e711:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Simulates a broker restart. The memory based persistence adapter is
1:d29ca2a:      * reused so that it does not "loose" it's "persistent" messages.
1:d29ca2a:      * 
1:d29ca2a:      * @throws IOException
1:230a86c:      * @throws URISyntaxException
1:d29ca2a:      */
1:d29ca2a:     protected void restartBroker() throws Exception {
1:24b9ae2:         stopBroker();
1:d29ca2a:         broker.start();
1:d29ca2a:     }
1:d29ca2a: 
1:24b9ae2:     protected void stopBroker() throws Exception {
1:24b9ae2:         broker.stop();
1:24b9ae2:         broker.waitUntilStopped();
1:24b9ae2:         broker = createRestartedBroker();
1:24b9ae2:     }
1:d29ca2a: }
============================================================================
author:hkesler
-------------------------------------------------------------------------------
commit:24b9ae2
/////////////////////////////////////////////////////////////////////////
1:         stopBroker();
1:     protected void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = createRestartedBroker();
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:266d23e
/////////////////////////////////////////////////////////////////////////
0:         broker.waitUntilStopped();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
/////////////////////////////////////////////////////////////////////////
1: 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @return
/////////////////////////////////////////////////////////////////////////
1:      * Simulates a broker restart. The memory based persistence adapter is
1:      * @throws URISyntaxException
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.io.IOException;
1: import java.net.URISyntaxException;
1: 
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.PersistenceAdapter;
1: 
1: public class BrokerRestartTestSupport extends BrokerTestSupport {
1: 
0:     private PersistenceAdapter persistenceAdapter;
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
0:         broker.setPersistent(false);
0:         persistenceAdapter = broker.getPersistenceAdapter();
1:         return broker;
1:     }
1: 
1:     /**
0:      * @return 
1:      * @throws Exception
1:      */
1:     protected BrokerService createRestartedBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
0:         broker.setPersistenceAdapter(persistenceAdapter);
1:         return broker;
1:     }
1: 
1:     /**
0:      * Simulates a broker restart.  The memory based persistence adapter is
1:      * reused so that it does not "loose" it's "persistent" messages.
1:      * 
1:      * @throws IOException
0:      * @throws URISyntaxException 
1:      */
1:     protected void restartBroker() throws Exception {
0:         broker.stop();
0:         broker = createRestartedBroker();
1:         broker.start();
1:     }
1: 
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:7631ca9
/////////////////////////////////////////////////////////////////////////
1:     protected void configureBroker(BrokerService broker) throws Exception {
1:          broker.setDestinationPolicy(policyMap);
commit:101e711
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         configureBroker(broker);
/////////////////////////////////////////////////////////////////////////
1:         configureBroker(broker);
0:     protected void configureBroker(BrokerService broker) {
1:     }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
0: import java.io.IOException;
0: import java.net.URISyntaxException;
1: import org.apache.activemq.util.IOHelper;
1:     @Override
1:         File dir = broker.getBrokerDataDirectory();
1:         if (dir != null) {
1:             IOHelper.deleteChildren(dir);
1:         }
commit:409902c
/////////////////////////////////////////////////////////////////////////
0:         //broker.setPersistent(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
/////////////////////////////////////////////////////////////////////////
0:         //broker.setPersistenceAdapter(persistenceAdapter);
============================================================================