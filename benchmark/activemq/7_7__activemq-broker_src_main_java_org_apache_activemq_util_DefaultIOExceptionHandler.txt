1:e8a641c: /**
1:e8a641c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e8a641c:  * contributor license agreements.  See the NOTICE file distributed with
1:e8a641c:  * this work for additional information regarding copyright ownership.
1:e8a641c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e8a641c:  * (the "License"); you may not use this file except in compliance with
1:e8a641c:  * the License.  You may obtain a copy of the License at
1:e8a641c:  *
1:e8a641c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e8a641c:  *
1:e8a641c:  * Unless required by applicable law or agreed to in writing, software
1:e8a641c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e8a641c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e8a641c:  * See the License for the specific language governing permissions and
1:e8a641c:  * limitations under the License.
1:e8a641c:  */
1:e8a641c: package org.apache.activemq.util;
3:e8a641c: 
1:e8a641c: import java.io.IOException;
1:4150650: import java.sql.SQLException;
1:dcedd9f: import java.util.Map;
1:4150650: import java.util.concurrent.TimeUnit;
1:4150650: import java.util.concurrent.atomic.AtomicBoolean;
1:e8a641c: 
1:e8a641c: import org.apache.activemq.broker.BrokerService;
1:13bbe52: import org.apache.activemq.broker.SuppressReplyException;
1:dcedd9f: import org.apache.activemq.broker.region.Destination;
1:dcedd9f: import org.apache.activemq.broker.region.Queue;
1:dcedd9f: import org.apache.activemq.broker.region.RegionBroker;
1:dcedd9f: import org.apache.activemq.command.ActiveMQDestination;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e8a641c: 
1:4150650: /**
1:4150650:  * @org.apache.xbean.XBean
1:4150650:  */
1:4150650:  public class DefaultIOExceptionHandler implements IOExceptionHandler {
1:e8a641c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory
1:8bf987b:             .getLogger(DefaultIOExceptionHandler.class);
1:dc258ab:     protected BrokerService broker;
1:e8a641c:     private boolean ignoreAllErrors = false;
1:0728ec9:     private boolean ignoreNoSpaceErrors = true;
1:4150650:     private boolean ignoreSQLExceptions = true;
1:4150650:     private boolean stopStartConnectors = false;
1:0728ec9:     private String noSpaceMessage = "space";
1:4150650:     private String sqlExceptionMessage = ""; // match all
1:4150650:     private long resumeCheckSleepPeriod = 5*1000;
1:1271d2e:     private final AtomicBoolean handlingException = new AtomicBoolean(false);
1:2aa172f:     private boolean systemExitOnShutdown = false;
1:e8a641c: 
1:1271d2e:     @Override
1:e8a641c:     public void handle(IOException exception) {
1:c7291f1:         if (!broker.isStarted() || ignoreAllErrors) {
1:c5a8b2c:             allowIOResumption();
1:e8a641c:             LOG.info("Ignoring IO exception, " + exception, exception);
2:4150650:             return;
6:e8a641c:         }
1:4150650: 
1:0728ec9:         if (ignoreNoSpaceErrors) {
1:0728ec9:             Throwable cause = exception;
1:0728ec9:             while (cause != null && cause instanceof IOException) {
1:71e228f:                 String message = cause.getMessage();
1:71e228f:                 if (message != null && message.contains(noSpaceMessage)) {
1:0728ec9:                     LOG.info("Ignoring no space left exception, " + exception, exception);
1:c5a8b2c:                     allowIOResumption();
1:4150650:                     return;
1:4150650:                 }
1:0728ec9:                 cause = cause.getCause();
1:4150650:             }
1:4150650:         }
1:0728ec9: 
1:4150650:         if (ignoreSQLExceptions) {
1:4150650:             Throwable cause = exception;
1:4150650:             while (cause != null) {
1:1271d2e:                 if (cause instanceof SQLException) {
1:1271d2e:                     String message = cause.getMessage();
1:1271d2e: 
1:1271d2e:                     if (message == null) {
1:1271d2e:                         message = "";
1:1271d2e:                     }
1:1271d2e: 
1:1271d2e:                     if (message.contains(sqlExceptionMessage)) {
1:1271d2e:                         LOG.info("Ignoring SQLException, " + exception, cause);
1:1271d2e:                         return;
1:1271d2e:                     }
1:4150650:                 }
1:4150650:                 cause = cause.getCause();
1:4150650:             }
1:4150650:         }
1:4150650: 
1:4150650:         if (stopStartConnectors) {
1:13bbe52:             if (handlingException.compareAndSet(false, true)) {
1:13bbe52:                 LOG.info("Initiating stop/restart of transports on " + broker + " due to IO exception, " + exception, exception);
1:4150650: 
1:13bbe52:                 new Thread("IOExceptionHandler: stop transports") {
1:1271d2e:                     @Override
1:13bbe52:                     public void run() {
1:13bbe52:                         try {
1:13bbe52:                             ServiceStopper stopper = new ServiceStopper();
1:13bbe52:                             broker.stopAllConnectors(stopper);
1:13bbe52:                             LOG.info("Successfully stopped transports on " + broker);
1:13bbe52:                         } catch (Exception e) {
1:13bbe52:                             LOG.warn("Failure occurred while stopping broker connectors", e);
1:13bbe52:                         } finally {
1:13bbe52:                             // resume again
1:13bbe52:                             new Thread("IOExceptionHandler: restart transports") {
1:1271d2e:                                 @Override
1:13bbe52:                                 public void run() {
1:13bbe52:                                     try {
1:c5a8b2c:                                         allowIOResumption();
1:13bbe52:                                         while (hasLockOwnership() && isPersistenceAdapterDown()) {
1:13bbe52:                                             LOG.info("waiting for broker persistence adapter checkpoint to succeed before restarting transports");
1:13bbe52:                                             TimeUnit.MILLISECONDS.sleep(resumeCheckSleepPeriod);
1:13bbe52:                                         }
1:7d98b32:                                         if (hasLockOwnership()) {
1:dcedd9f:                                             Map<ActiveMQDestination, Destination> destinations = ((RegionBroker)broker.getRegionBroker()).getDestinationMap();
1:dcedd9f:                                             for (Destination destination : destinations.values()) {
1:dcedd9f: 
1:dcedd9f:                                                 if (destination instanceof Queue) {
1:dcedd9f:                                                     Queue queue = (Queue)destination;
1:dcedd9f:                                                     if (queue.isResetNeeded()) {
1:ea70e82:                                                         queue.clearPendingMessages(0);
1:dcedd9f:                                                     }
1:dcedd9f:                                                 }
1:dcedd9f:                                             }
1:7d98b32:                                             broker.startAllConnectors();
1:7d98b32:                                             LOG.info("Successfully restarted transports on " + broker);
1:7d98b32:                                         }
1:13bbe52:                                     } catch (Exception e) {
1:7d98b32:                                         LOG.warn("Stopping " + broker + " due to failure restarting transports", e);
1:13bbe52:                                         stopBroker(e);
1:13bbe52:                                     } finally {
1:13bbe52:                                         handlingException.compareAndSet(true, false);
1:13bbe52:                                     }
1:13bbe52:                                 }
1:4150650: 
1:13bbe52:                                 private boolean isPersistenceAdapterDown() {
1:13bbe52:                                     boolean checkpointSuccess = false;
1:13bbe52:                                     try {
1:13bbe52:                                         broker.getPersistenceAdapter().checkpoint(true);
1:13bbe52:                                         checkpointSuccess = true;
1:13bbe52:                                     } catch (Throwable ignored) {
1:13bbe52:                                     }
1:13bbe52:                                     return !checkpointSuccess;
1:13bbe52:                                 }
1:13bbe52:                             }.start();
1:13bbe52: 
1:13bbe52: 
1:13bbe52:                         }
1:4150650:                     }
1:13bbe52:                 }.start();
1:4150650:             }
1:4150650: 
1:13bbe52:             throw new SuppressReplyException("Stop/RestartTransportsInitiated", exception);
1:4150650:         }
1:4150650: 
1:13bbe52:         if (handlingException.compareAndSet(false, true)) {
1:13bbe52:             stopBroker(exception);
1:13bbe52:         }
1:13bbe52: 
1:13bbe52:         // we don't want to propagate the exception back to the client
1:13bbe52:         // They will see a delay till they see a disconnect via socket.close
1:13bbe52:         // at which point failover: can kick in.
1:13bbe52:         throw new SuppressReplyException("ShutdownBrokerInitiated", exception);
1:dc258ab:     }
1:dc258ab: 
1:c5a8b2c:     protected void allowIOResumption() {
1:b07821a:         try {
1:c7291f1:             if (broker.getPersistenceAdapter() != null) {
1:b07821a:                 broker.getPersistenceAdapter().allowIOResumption();
1:c5a8b2c:             }
1:b07821a:         } catch (IOException e) {
1:b07821a:             LOG.warn("Failed to allow IO resumption", e);
1:b07821a:         }
1:c7291f1:     }
1:c5a8b2c: 
1:dc258ab:     private void stopBroker(Exception exception) {
1:13bbe52:         LOG.info("Stopping " + broker + " due to exception, " + exception, exception);
1:13bbe52:         new Thread("IOExceptionHandler: stopping " + broker) {
1:1271d2e:             @Override
2:4150650:             public void run() {
3:4150650:                 try {
1:4a16c1f:                     if( broker.isRestartAllowed() ) {
1:4a16c1f:                         broker.requestRestart();
1:4150650:                     }
1:2aa172f:                     broker.setSystemExitOnShutdown(isSystemExitOnShutdown());
1:e8a641c:                     broker.stop();
2:4150650:                 } catch (Exception e) {
1:4150650:                     LOG.warn("Failure occurred while stopping broker", e);
1:4150650:                 }
1:4a16c1f:             }
2:4150650:         }.start();
1:0728ec9:     }
1:4150650: 
1:dc258ab:     protected boolean hasLockOwnership() throws IOException {
1:dc258ab:         return true;
1:dc258ab:     }
1:dc258ab: 
1:1271d2e:     @Override
1:e8a641c:     public void setBrokerService(BrokerService broker) {
1:e8a641c:         this.broker = broker;
1:0728ec9:     }
1:e8a641c: 
1:e8a641c:     public boolean isIgnoreAllErrors() {
1:e8a641c:         return ignoreAllErrors;
1:0728ec9:     }
1:e8a641c: 
1:e8a641c:     public void setIgnoreAllErrors(boolean ignoreAllErrors) {
1:e8a641c:         this.ignoreAllErrors = ignoreAllErrors;
1:e8a641c:     }
1:e8a641c: 
1:0728ec9:     public boolean isIgnoreNoSpaceErrors() {
1:0728ec9:         return ignoreNoSpaceErrors;
1:0728ec9:     }
1:0728ec9: 
1:0728ec9:     public void setIgnoreNoSpaceErrors(boolean ignoreNoSpaceErrors) {
1:0728ec9:         this.ignoreNoSpaceErrors = ignoreNoSpaceErrors;
1:0728ec9:     }
1:0728ec9: 
1:0728ec9:     public String getNoSpaceMessage() {
1:0728ec9:         return noSpaceMessage;
1:0728ec9:     }
1:0728ec9: 
1:0728ec9:     public void setNoSpaceMessage(String noSpaceMessage) {
1:0728ec9:         this.noSpaceMessage = noSpaceMessage;
1:0728ec9:     }
1:0728ec9: 
1:4150650:     public boolean isIgnoreSQLExceptions() {
1:4150650:         return ignoreSQLExceptions;
1:4150650:     }
1:4150650: 
1:4150650:     public void setIgnoreSQLExceptions(boolean ignoreSQLExceptions) {
1:4150650:         this.ignoreSQLExceptions = ignoreSQLExceptions;
1:4150650:     }
1:4150650: 
1:4150650:     public String getSqlExceptionMessage() {
1:4150650:         return sqlExceptionMessage;
1:4150650:     }
1:4150650: 
1:4150650:     public void setSqlExceptionMessage(String sqlExceptionMessage) {
1:4150650:         this.sqlExceptionMessage = sqlExceptionMessage;
1:4150650:     }
1:4150650: 
1:4150650:     public boolean isStopStartConnectors() {
1:4150650:         return stopStartConnectors;
1:4150650:     }
1:4150650: 
1:4150650:     public void setStopStartConnectors(boolean stopStartConnectors) {
1:4150650:         this.stopStartConnectors = stopStartConnectors;
1:4150650:     }
1:4150650: 
1:4150650:     public long getResumeCheckSleepPeriod() {
1:4150650:         return resumeCheckSleepPeriod;
1:4150650:     }
1:4150650: 
1:4150650:     public void setResumeCheckSleepPeriod(long resumeCheckSleepPeriod) {
1:4150650:         this.resumeCheckSleepPeriod = resumeCheckSleepPeriod;
1:4150650:     }
1:2aa172f: 
1:2aa172f:     public void setSystemExitOnShutdown(boolean systemExitOnShutdown) {
1:2aa172f:         this.systemExitOnShutdown = systemExitOnShutdown;
1:2aa172f:     }
1:2aa172f: 
1:2aa172f:     public boolean isSystemExitOnShutdown() {
1:2aa172f:         return systemExitOnShutdown;
1:2aa172f:     }
1:e8a641c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ea70e82
/////////////////////////////////////////////////////////////////////////
1:                                                         queue.clearPendingMessages(0);
commit:b07821a
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             broker.getPersistenceAdapter().allowIOResumption();
1:         } catch (IOException e) {
1:             LOG.warn("Failed to allow IO resumption", e);
1:         }
commit:c5a8b2c
/////////////////////////////////////////////////////////////////////////
1:             allowIOResumption();
/////////////////////////////////////////////////////////////////////////
1:                     allowIOResumption();
/////////////////////////////////////////////////////////////////////////
1:                                         allowIOResumption();
/////////////////////////////////////////////////////////////////////////
1:     protected void allowIOResumption() {
1:     }
1: 
commit:2aa172f
/////////////////////////////////////////////////////////////////////////
1:     private boolean systemExitOnShutdown = false;
/////////////////////////////////////////////////////////////////////////
1:                     broker.setSystemExitOnShutdown(isSystemExitOnShutdown());
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setSystemExitOnShutdown(boolean systemExitOnShutdown) {
1:         this.systemExitOnShutdown = systemExitOnShutdown;
1:     }
1: 
1:     public boolean isSystemExitOnShutdown() {
1:         return systemExitOnShutdown;
1:     }
commit:7d98b32
/////////////////////////////////////////////////////////////////////////
1:                                         if (hasLockOwnership()) {
1:                                             broker.startAllConnectors();
1:                                             LOG.info("Successfully restarted transports on " + broker);
1:                                         }
1:                                         LOG.warn("Stopping " + broker + " due to failure restarting transports", e);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:c7291f1
/////////////////////////////////////////////////////////////////////////
1:         if (!broker.isStarted() || ignoreAllErrors) {
/////////////////////////////////////////////////////////////////////////
1:             if (broker.getPersistenceAdapter() != null) {
0:                 broker.getPersistenceAdapter().allowIOResumption();
1:             }
commit:dcedd9f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:                                             Map<ActiveMQDestination, Destination> destinations = ((RegionBroker)broker.getRegionBroker()).getDestinationMap();
1:                                             for (Destination destination : destinations.values()) {
1: 
1:                                                 if (destination instanceof Queue) {
1:                                                     Queue queue = (Queue)destination;
1:                                                     if (queue.isResetNeeded()) {
0:                                                         queue.clearPendingMessages();
1:                                                     }
1:                                                 }
1:                                             }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1271d2e
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicBoolean handlingException = new AtomicBoolean(false);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 if (cause instanceof SQLException) {
1:                     String message = cause.getMessage();
1: 
1:                     if (message == null) {
1:                         message = "";
1:                     }
1: 
1:                     if (message.contains(sqlExceptionMessage)) {
1:                         LOG.info("Ignoring SQLException, " + exception, cause);
1:                         return;
1:                     }
/////////////////////////////////////////////////////////////////////////
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                                 @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Gary Tully
-------------------------------------------------------------------------------
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.SuppressReplyException;
/////////////////////////////////////////////////////////////////////////
0:     private AtomicBoolean handlingException = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
1:             if (handlingException.compareAndSet(false, true)) {
1:                 LOG.info("Initiating stop/restart of transports on " + broker + " due to IO exception, " + exception, exception);
1:                 new Thread("IOExceptionHandler: stop transports") {
1:                     public void run() {
1:                         try {
1:                             ServiceStopper stopper = new ServiceStopper();
1:                             broker.stopAllConnectors(stopper);
1:                             LOG.info("Successfully stopped transports on " + broker);
1:                         } catch (Exception e) {
1:                             LOG.warn("Failure occurred while stopping broker connectors", e);
1:                         } finally {
1:                             // resume again
1:                             new Thread("IOExceptionHandler: restart transports") {
1:                                 public void run() {
1:                                     try {
1:                                         while (hasLockOwnership() && isPersistenceAdapterDown()) {
1:                                             LOG.info("waiting for broker persistence adapter checkpoint to succeed before restarting transports");
1:                                             TimeUnit.MILLISECONDS.sleep(resumeCheckSleepPeriod);
1:                                         }
0:                                         broker.startAllConnectors();
0:                                         LOG.info("Successfully restarted transports on " + broker);
1:                                     } catch (Exception e) {
0:                                         LOG.warn("Stopping " + broker + " due to failure while restarting transports", e);
1:                                         stopBroker(e);
1:                                     } finally {
1:                                         handlingException.compareAndSet(true, false);
1:                                     }
1:                                 }
1:                                 private boolean isPersistenceAdapterDown() {
1:                                     boolean checkpointSuccess = false;
1:                                     try {
1:                                         broker.getPersistenceAdapter().checkpoint(true);
1:                                         checkpointSuccess = true;
1:                                     } catch (Throwable ignored) {
1:                                     }
1:                                     return !checkpointSuccess;
1:                                 }
1:                             }.start();
1: 
1: 
1:                 }.start();
1:             }
1:             throw new SuppressReplyException("Stop/RestartTransportsInitiated", exception);
1:         if (handlingException.compareAndSet(false, true)) {
1:             stopBroker(exception);
1:         }
1: 
1:         // we don't want to propagate the exception back to the client
1:         // They will see a delay till they see a disconnect via socket.close
1:         // at which point failover: can kick in.
1:         throw new SuppressReplyException("ShutdownBrokerInitiated", exception);
1:         LOG.info("Stopping " + broker + " due to exception, " + exception, exception);
1:         new Thread("IOExceptionHandler: stopping " + broker) {
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService broker;
/////////////////////////////////////////////////////////////////////////
0:                         while (hasLockOwnership() && isPersistenceAdapterDown()) {
0:                         LOG.warn("Stopping broker due to failure while restarting broker connectors", e);
0:                         stopBroker(e);
/////////////////////////////////////////////////////////////////////////
0:         stopBroker(exception);
1:     }
1: 
1:     private void stopBroker(Exception exception) {
0:         LOG.info("Stopping the broker due to exception, " + exception, exception);
/////////////////////////////////////////////////////////////////////////
1:     protected boolean hasLockOwnership() throws IOException {
1:         return true;
1:     }
1: 
commit:4150650
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: /**
1:  * @org.apache.xbean.XBean
1:  */
1:  public class DefaultIOExceptionHandler implements IOExceptionHandler {
1:     private boolean ignoreSQLExceptions = true;
1:     private boolean stopStartConnectors = false;
1:     private String sqlExceptionMessage = ""; // match all
1:     private long resumeCheckSleepPeriod = 5*1000;
0:     private AtomicBoolean stopStartInProgress = new AtomicBoolean(false);
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (ignoreSQLExceptions) {
1:             Throwable cause = exception;
1:             while (cause != null) {
0:                 if (cause instanceof SQLException && cause.getMessage().contains(sqlExceptionMessage)) {
0:                     LOG.info("Ignoring SQLException, " + exception, cause);
1:                     return;
1:                 }
1:                 cause = cause.getCause();
1:             }
1:         }
1: 
1:         if (stopStartConnectors) {
0:             if (!stopStartInProgress.compareAndSet(false, true)) {
0:                 // we are already working on it
1:                 return;
1:             }
0:             LOG.info("Initiating stop/restart of broker transport due to IO exception, " + exception, exception);
1: 
0:             new Thread("stop transport connectors on IO exception") {
1:                 public void run() {
1:                     try {
0:                         ServiceStopper stopper = new ServiceStopper();
0:                         broker.stopAllConnectors(stopper);
1:                     } catch (Exception e) {
0:                         LOG.warn("Failure occurred while stopping broker connectors", e);
1:                     }
1:                 }
1:             }.start();
1: 
0:             // resume again
0:             new Thread("restart transport connectors post IO exception") {
1:                 public void run() {
1:                     try {
0:                         while (isPersistenceAdapterDown()) {
0:                             LOG.info("waiting for broker persistence adapter checkpoint to succeed before restarting transports");
0:                             TimeUnit.MILLISECONDS.sleep(resumeCheckSleepPeriod);
1:                         }
0:                         broker.startAllConnectors();
1:                     } catch (Exception e) {
0:                         LOG.warn("Failure occurred while restarting broker connectors", e);
0:                     } finally {
0:                         stopStartInProgress.compareAndSet(true, false);
1:                     }
1:                 }
1: 
0:                 private boolean isPersistenceAdapterDown() {
0:                     boolean checkpointSuccess = false;
1:                     try {
0:                         broker.getPersistenceAdapter().checkpoint(true);
0:                         checkpointSuccess = true;
0:                     } catch (Throwable ignored) {}
0:                     return !checkpointSuccess;
1:                 }
1:             }.start();
1: 
1:             return;
1:         }
1: 
0:         new Thread("Stopping the broker due to IO exception") {
1:                     LOG.warn("Failure occurred while stopping broker", e);
/////////////////////////////////////////////////////////////////////////
1:     public boolean isIgnoreSQLExceptions() {
1:         return ignoreSQLExceptions;
1:     }
1: 
1:     public void setIgnoreSQLExceptions(boolean ignoreSQLExceptions) {
1:         this.ignoreSQLExceptions = ignoreSQLExceptions;
1:     }
1: 
1:     public String getSqlExceptionMessage() {
1:         return sqlExceptionMessage;
1:     }
1: 
1:     public void setSqlExceptionMessage(String sqlExceptionMessage) {
1:         this.sqlExceptionMessage = sqlExceptionMessage;
1:     }
1: 
1:     public boolean isStopStartConnectors() {
1:         return stopStartConnectors;
1:     }
1: 
1:     public void setStopStartConnectors(boolean stopStartConnectors) {
1:         this.stopStartConnectors = stopStartConnectors;
1:     }
1: 
1:     public long getResumeCheckSleepPeriod() {
1:         return resumeCheckSleepPeriod;
1:     }
1: 
1:     public void setResumeCheckSleepPeriod(long resumeCheckSleepPeriod) {
1:         this.resumeCheckSleepPeriod = resumeCheckSleepPeriod;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:4a16c1f
/////////////////////////////////////////////////////////////////////////
1:                     if( broker.isRestartAllowed() ) {
1:                         broker.requestRestart();
1:                     }
commit:58aca86
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:71e228f
/////////////////////////////////////////////////////////////////////////
1:                 String message = cause.getMessage();
1:                 if (message != null && message.contains(noSpaceMessage)) {
/////////////////////////////////////////////////////////////////////////
0:                 String message = cause.getMessage();
0:                 if (cause instanceof SQLException && message.contains(sqlExceptionMessage)) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory
1:             .getLogger(DefaultIOExceptionHandler.class);
commit:0728ec9
/////////////////////////////////////////////////////////////////////////
1:     private boolean ignoreNoSpaceErrors = true;
1:     private String noSpaceMessage = "space";
1:         
1:         if (ignoreNoSpaceErrors) {
1:             Throwable cause = exception;
1:             while (cause != null && cause instanceof IOException) {
0:                 if (cause.getMessage().contains(noSpaceMessage)) {
1:                     LOG.info("Ignoring no space left exception, " + exception, exception);
0:                     return;
1:                 }
1:                 cause = cause.getCause();
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public boolean isIgnoreNoSpaceErrors() {
1:         return ignoreNoSpaceErrors;
1:     }
1: 
1:     public void setIgnoreNoSpaceErrors(boolean ignoreNoSpaceErrors) {
1:         this.ignoreNoSpaceErrors = ignoreNoSpaceErrors;
1:     }
1: 
1:     public String getNoSpaceMessage() {
1:         return noSpaceMessage;
1:     }
1: 
1:     public void setNoSpaceMessage(String noSpaceMessage) {
1:         this.noSpaceMessage = noSpaceMessage;
1:     }
1: 
commit:e8a641c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: public class DefaultIOExceptionHandler implements IOExceptionHandler {
1: 
0:     private static final Log LOG = LogFactory
0:             .getLog(DefaultIOExceptionHandler.class);
0:     private BrokerService broker;
1:     private boolean ignoreAllErrors = false;
1: 
1:     public void handle(IOException exception) {
0:         if (ignoreAllErrors) {
1:             LOG.info("Ignoring IO exception, " + exception, exception);
0:             return;
1:         }
1: 
0:         LOG.info("Stopping the broker due to IO exception, " + exception, exception);
0:         new Thread() {
0:             public void run() {
0:                 try {
1:                     broker.stop();
0:                 } catch (Exception e) {
0:                     LOG.warn("Failure occured while stopping broker", e);
1:                 }
1:             }
0:         }.start();
1:     }
1: 
1:     public void setBrokerService(BrokerService broker) {
1:         this.broker = broker;
1:     }
1: 
1:     public boolean isIgnoreAllErrors() {
1:         return ignoreAllErrors;
1:     }
1: 
1:     public void setIgnoreAllErrors(boolean ignoreAllErrors) {
1:         this.ignoreAllErrors = ignoreAllErrors;
1:     }
1: 
1: }
============================================================================