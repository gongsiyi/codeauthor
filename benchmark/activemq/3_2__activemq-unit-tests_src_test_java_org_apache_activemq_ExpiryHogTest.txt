1:219c5d3: /**
1:219c5d3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:219c5d3:  * contributor license agreements.  See the NOTICE file distributed with
1:219c5d3:  * this work for additional information regarding copyright ownership.
1:219c5d3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:219c5d3:  * (the "License"); you may not use this file except in compliance with
1:219c5d3:  * the License.  You may obtain a copy of the License at
1:219c5d3:  *
1:219c5d3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:219c5d3:  *
1:219c5d3:  * Unless required by applicable law or agreed to in writing, software
1:219c5d3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:219c5d3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:219c5d3:  * See the License for the specific language governing permissions and
1:219c5d3:  * limitations under the License.
1:219c5d3:  */
1:219c5d3: package org.apache.activemq;
1:219c5d3: 
1:219c5d3: import java.util.concurrent.TimeUnit;
1:219c5d3: import javax.jms.ConnectionFactory;
1:219c5d3: import javax.jms.Session;
1:219c5d3: import javax.jms.TextMessage;
1:219c5d3: import org.apache.activemq.broker.BrokerService;
1:219c5d3: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:219c5d3: import org.apache.activemq.broker.region.policy.PolicyMap;
1:219c5d3: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:bec711c: import org.junit.Before;
1:bec711c: import org.junit.Test;
1:bec711c: import org.junit.runner.RunWith;
1:bec711c: import org.junit.runners.BlockJUnit4ClassRunner;
1:219c5d3: 
1:219c5d3: /**
1:219c5d3:  * User: gtully
1:219c5d3:  */
1:bec711c: @RunWith(BlockJUnit4ClassRunner.class)
1:219c5d3: public class ExpiryHogTest extends JmsMultipleClientsTestSupport {
1:219c5d3:     boolean sleep = false;
1:219c5d3: 
1:219c5d3:     int numMessages = 4;
1:219c5d3: 
1:bec711c:     @Test(timeout = 2 * 60 * 1000)
1:aad7e73:     public void testImmediateDispatchWhenCacheDisabled() throws Exception {
1:219c5d3:         ConnectionFactory f = createConnectionFactory();
1:219c5d3:         destination = createDestination();
1:219c5d3:         startConsumers(f, destination);
1:219c5d3:         sleep = true;
1:219c5d3:         this.startProducers(f, destination, numMessages);
1:219c5d3:         allMessagesList.assertMessagesReceived(numMessages);
1:219c5d3:     }
1:219c5d3: 
1:219c5d3:     protected BrokerService createBroker() throws Exception {
1:219c5d3:         BrokerService bs = new BrokerService();
1:219c5d3:         bs.setDeleteAllMessagesOnStartup(true);
1:219c5d3:         PolicyMap policyMap = new PolicyMap();
1:219c5d3:         PolicyEntry defaultEntry = new PolicyEntry();
1:219c5d3:         defaultEntry.setExpireMessagesPeriod(5000);
1:219c5d3:         defaultEntry.setUseCache(false);
1:219c5d3:         policyMap.setDefaultEntry(defaultEntry);
1:219c5d3:         bs.setDestinationPolicy(policyMap);
1:219c5d3: 
1:219c5d3:         KahaDBPersistenceAdapter ad = (KahaDBPersistenceAdapter) bs.getPersistenceAdapter();
1:aad7e73:         ad.setConcurrentStoreAndDispatchQueues(true);
1:219c5d3:         return bs;
1:219c5d3:     }
1:219c5d3: 
1:219c5d3:     protected TextMessage createTextMessage(Session session, String initText) throws Exception {
1:219c5d3:         if (sleep) {
1:219c5d3:             TimeUnit.SECONDS.sleep(10);
1:219c5d3:         }
1:219c5d3:         TextMessage msg = super.createTextMessage(session, initText);
1:219c5d3:         msg.setJMSExpiration(4000);
1:219c5d3:         return msg;
1:219c5d3:     }
1:219c5d3: 
1:219c5d3:     @Override
1:bec711c:     @Before
1:bec711c:     public void setUp() throws Exception {
1:219c5d3:         autoFail = false;
1:219c5d3:         persistent = true;
1:219c5d3:         super.setUp();
1:219c5d3:     }
1:219c5d3: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: @RunWith(BlockJUnit4ClassRunner.class)
1:     @Test(timeout = 2 * 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
1:     public void testImmediateDispatchWhenCacheDisabled() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         ad.setConcurrentStoreAndDispatchQueues(true);
commit:219c5d3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: 
1: /**
1:  * User: gtully
1:  */
1: public class ExpiryHogTest extends JmsMultipleClientsTestSupport {
1:     boolean sleep = false;
1: 
1:     int numMessages = 4;
1: 
0:     public void testHog() throws Exception {
1:         ConnectionFactory f = createConnectionFactory();
1:         destination = createDestination();
1:         startConsumers(f, destination);
1:         sleep = true;
1:         this.startProducers(f, destination, numMessages);
1:         allMessagesList.assertMessagesReceived(numMessages);
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService bs = new BrokerService();
1:         bs.setDeleteAllMessagesOnStartup(true);
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setExpireMessagesPeriod(5000);
1:         defaultEntry.setUseCache(false);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         bs.setDestinationPolicy(policyMap);
1: 
1:         KahaDBPersistenceAdapter ad = (KahaDBPersistenceAdapter) bs.getPersistenceAdapter();
0:         ad.setConcurrentStoreAndDispatchQueues(false);
1:         return bs;
1:     }
1: 
1:     protected TextMessage createTextMessage(Session session, String initText) throws Exception {
1:         if (sleep) {
1:             TimeUnit.SECONDS.sleep(10);
1:         }
1:         TextMessage msg = super.createTextMessage(session, initText);
1:         msg.setJMSExpiration(4000);
1:         return msg;
1:     }
1: 
1:     @Override
0:     protected void setUp() throws Exception {
1:         autoFail = false;
1:         persistent = true;
1:         super.setUp();
1:     }
1: }
============================================================================