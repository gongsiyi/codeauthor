2:bff39c5: /**
1:bff39c5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bff39c5:  * contributor license agreements.  See the NOTICE file distributed with
1:bff39c5:  * this work for additional information regarding copyright ownership.
1:bff39c5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bff39c5:  * (the "License"); you may not use this file except in compliance with
1:bff39c5:  * the License.  You may obtain a copy of the License at
1:9529b24:  *
1:bff39c5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:bff39c5:  * Unless required by applicable law or agreed to in writing, software
1:bff39c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bff39c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bff39c5:  * See the License for the specific language governing permissions and
1:bff39c5:  * limitations under the License.
2:bff39c5:  */
1:bff39c5: package org.apache.activemq.advisory;
14:bff39c5: 
1:1651992: import java.util.Vector;
1:b2681b9: 
1:bff39c5: import javax.jms.Connection;
1:bff39c5: import javax.jms.Destination;
1:1651992: import javax.jms.JMSException;
1:bff39c5: import javax.jms.Message;
1:bff39c5: import javax.jms.MessageConsumer;
1:bff39c5: import javax.jms.MessageListener;
1:bff39c5: import javax.jms.MessageProducer;
1:bff39c5: import javax.jms.Session;
1:bff39c5: import javax.jms.TemporaryQueue;
1:bff39c5: 
1:b2681b9: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:b2681b9: import org.apache.activemq.broker.region.RegionBroker;
1:b2681b9: import org.apache.activemq.command.ActiveMQDestination;
1:b2681b9: import org.apache.activemq.command.ActiveMQQueue;
1:b2681b9: 
1:bff39c5: public class TempQueueMemoryTest extends EmbeddedBrokerTestSupport {
1:2142045: 
1:ae1bb66:     protected Connection serverConnection;
1:ae1bb66:     protected Session serverSession;
1:ae1bb66:     protected Connection clientConnection;
1:ae1bb66:     protected Session clientSession;
1:ae1bb66:     protected Destination serverDestination;
1:2142045:     protected int messagesToSend = 10;
1:d81ce2e:     protected boolean deleteTempQueue = true;
1:1651992:     protected boolean serverTransactional = false;
1:1651992:     protected boolean clientTransactional = false;
1:1651992:     protected int numConsumers = 1;
1:1651992:     protected int numProducers = 1;
1:9529b24: 
1:7238f80:     public void testConcurrentProducerRequestReply() throws Exception {
1:7238f80:         numProducers = 10;
1:7238f80:         testLoadRequestReply();
1:7238f80:     }
1:9529b24: 
1:bff39c5:     public void testLoadRequestReply() throws Exception {
1:2142045:         for (int i = 0; i < numConsumers; i++) {
1:1651992:             serverSession.createConsumer(serverDestination).setMessageListener(new MessageListener() {
1:b2681b9:                 @Override
1:bff39c5:                 public void onMessage(Message msg) {
1:bff39c5:                     try {
1:bff39c5:                         Destination replyTo = msg.getJMSReplyTo();
1:bff39c5:                         MessageProducer producer = serverSession.createProducer(replyTo);
1:bff39c5:                         producer.send(replyTo, msg);
1:1651992:                         if (serverTransactional) {
1:1651992:                             serverSession.commit();
1:1651992:                         }
1:bff39c5:                         producer.close();
1:bff39c5:                     } catch (Exception e) {
1:bff39c5:                         e.printStackTrace();
1:bff39c5:                     }
1:bff39c5:                 }
1:bff39c5:             });
1:1651992:         }
1:9529b24: 
1:1651992:         class Producer extends Thread {
1:b2681b9:             private final int numToSend;
1:2142045: 
1:1651992:             public Producer(int numToSend) {
1:1651992:                 this.numToSend = numToSend;
1:1651992:             }
1:2142045: 
1:b2681b9:             @Override
1:9529b24:             public void run() {
1:1651992:                 try {
1:2142045:                     Session session = clientConnection.createSession(clientTransactional, clientTransactional ?
1:2142045:                         Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
1:7238f80:                     MessageProducer producer = session.createProducer(serverDestination);
1:9529b24: 
1:2142045:                     for (int i = 0; i < numToSend; i++) {
1:7238f80:                         TemporaryQueue replyTo = session.createTemporaryQueue();
1:7238f80:                         MessageConsumer consumer = session.createConsumer(replyTo);
1:7238f80:                         Message msg = session.createMessage();
1:bff39c5:                         msg.setJMSReplyTo(replyTo);
1:bff39c5:                         producer.send(msg);
1:1651992:                         if (clientTransactional) {
1:7238f80:                             session.commit();
1:1651992:                         }
1:7238f80:                         consumer.receive();
1:1651992:                         if (clientTransactional) {
1:7238f80:                             session.commit();
1:1651992:                         }
1:bff39c5:                         consumer.close();
1:1651992:                         if (deleteTempQueue) {
1:bff39c5:                             replyTo.delete();
1:1651992:                         } else {
1:1651992:                             // temp queue will be cleaned up on clientConnection.close
1:bff39c5:                         }
1:1651992:                     }
1:1651992:                 } catch (JMSException e) {
1:1651992:                     e.printStackTrace();
1:1651992:                 }
1:1651992:             }
1:1651992:         }
1:1651992:         Vector<Thread> threads = new Vector<Thread>(numProducers);
1:2142045:         for (int i = 0; i < numProducers; i++) {
1:2142045:             threads.add(new Producer(messagesToSend / numProducers));
1:1651992:         }
1:1651992:         startAndJoinThreads(threads);
1:9529b24: 
1:bff39c5:         clientSession.close();
1:bff39c5:         serverSession.close();
1:bff39c5:         clientConnection.close();
1:bff39c5:         serverConnection.close();
1:9529b24: 
1:2142045:         AdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(AdvisoryBroker.class);
1:9529b24: 
1:2142045:         // The server destination will be left
1:bff39c5:         assertTrue(ab.getAdvisoryDestinations().size() == 1);
1:9529b24: 
1:2142045:         assertTrue("should be zero but is " + ab.getAdvisoryConsumers().size(), ab.getAdvisoryConsumers().size() == 0);
1:2142045:         assertTrue("should be zero but is " + ab.getAdvisoryProducers().size(), ab.getAdvisoryProducers().size() == 0);
1:9529b24: 
1:b2681b9:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class);
1:9529b24: 
1:b2681b9:         assertTrue(rb.getDestinationMap().size() >= 6);
1:bff39c5:     }
1:9529b24: 
1:1651992:     private void startAndJoinThreads(Vector<Thread> threads) throws Exception {
1:2142045:         for (Thread thread : threads) {
1:1651992:             thread.start();
1:1651992:         }
1:2142045:         for (Thread thread : threads) {
1:1651992:             thread.join();
1:1651992:         }
1:1651992:     }
1:9529b24: 
1:b2681b9:     @Override
1:bff39c5:     protected void setUp() throws Exception {
1:bff39c5:         super.setUp();
1:bff39c5:         serverConnection = createConnection();
1:bff39c5:         serverConnection.start();
1:874e935:         serverSession = serverConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bff39c5:         clientConnection = createConnection();
1:bff39c5:         clientConnection.start();
1:874e935:         clientSession = clientConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bff39c5:         serverDestination = createDestination();
1:bff39c5:     }
1:9529b24: 
1:b2681b9:     @Override
1:bff39c5:     protected void tearDown() throws Exception {
1:bff39c5:         super.tearDown();
1:1651992:         serverTransactional = clientTransactional = false;
1:1651992:         numConsumers = numProducers = 1;
1:1651992:         messagesToSend = 2000;
1:bff39c5:     }
1:9529b24: 
1:b2681b9:     @Override
1:a0426cb:     protected ActiveMQDestination createDestination() {
1:bff39c5:         return new ActiveMQQueue(getClass().getName());
1:bff39c5:     }
1:bff39c5: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2142045
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected int messagesToSend = 10;
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < numConsumers; i++) {
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:                     Session session = clientConnection.createSession(clientTransactional, clientTransactional ?
1:                         Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
1:                     for (int i = 0; i < numToSend; i++) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < numProducers; i++) {
1:             threads.add(new Producer(messagesToSend / numProducers));
/////////////////////////////////////////////////////////////////////////
1:         AdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(AdvisoryBroker.class);
1:         // The server destination will be left
1:         assertTrue("should be zero but is " + ab.getAdvisoryConsumers().size(), ab.getAdvisoryConsumers().size() == 0);
1:         assertTrue("should be zero but is " + ab.getAdvisoryProducers().size(), ab.getAdvisoryProducers().size() == 0);
/////////////////////////////////////////////////////////////////////////
1:         for (Thread thread : threads) {
1:         for (Thread thread : threads) {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:b2681b9
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:             private final int numToSend;
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class);
1:         assertTrue(rb.getDestinationMap().size() >= 6);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:9529b24
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             public void run() {
0:                     Session session = clientConnection.createSession(clientTransactional,
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
0:         //serverDestination +
0:         assertEquals(6, rb.getDestinationMap().size());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:a0426cb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.broker.region.RegionBroker;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination createDestination() {
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
0:         assertTrue(rb.getDestinationMap().size()==6);          
commit:bff39c5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.broker.region.RegionBroker;
0: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: /**
0:  * @version $Revision: 397249 $
1:  */
1: public class TempQueueMemoryTest extends EmbeddedBrokerTestSupport {
0:     private Connection serverConnection;
0:     private Session serverSession;
0:     private Connection clientConnection;
0:     private Session clientSession;
0:     private Destination serverDestination;
0:     private static final int COUNT = 1000;
1: 
1:     public void testLoadRequestReply() throws Exception {
0:         MessageConsumer serverConsumer = serverSession.createConsumer(serverDestination);
0:         serverConsumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message msg) {
1:                 try {
1:                     Destination replyTo = msg.getJMSReplyTo();
1:                     MessageProducer producer = serverSession.createProducer(replyTo);
1:                     producer.send(replyTo, msg);
1:                     producer.close();
1:                 } catch (Exception e) {
0:                     // TODO Auto-generated catch block
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1:         
0:         MessageProducer producer = clientSession.createProducer(serverDestination);
0:         for (int i =0; i< COUNT; i++) {
0:             TemporaryQueue replyTo = clientSession.createTemporaryQueue();
0:             MessageConsumer consumer = clientSession.createConsumer(replyTo);
0:             Message msg = clientSession.createMessage();
1:             msg.setJMSReplyTo(replyTo);
1:             producer.send(msg);
0:             Message reply = consumer.receive();
1:             consumer.close();
1:             replyTo.delete();
1:         }
1:         
1:         clientSession.close();
1:         serverSession.close();
1:         clientConnection.close();
1:         serverConnection.close();
1:         
0:         AdvisoryBroker ab = (AdvisoryBroker) broker.getBroker().getAdaptor(
0:                 AdvisoryBroker.class);
1:               
0:         ///The server destination will be left
1:         assertTrue(ab.getAdvisoryDestinations().size() == 1);
1:         
0:         assertTrue("should be zero but is "+ab.getAdvisoryConsumers().size(),ab.getAdvisoryConsumers().size() == 0);
0:         assertTrue("should be zero but is "+ab.getAdvisoryProducers().size(),ab.getAdvisoryProducers().size() == 0);
1:                
0:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(
0:                 RegionBroker.class);
1:         
1:                
0:         //serverDestination + 
0:         assertTrue(rb.getDestinationMap().size()==7);          
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         serverConnection = createConnection();
1:         serverConnection.start();
0:         serverSession = serverConnection.createSession(false, 0);
1:         clientConnection = createConnection();
1:         clientConnection.start();
0:         clientSession = clientConnection.createSession(false, 0);
1:         serverDestination = createDestination();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         
1:         super.tearDown();
1:     }
1:     
0:     protected Destination createDestination() {
1:         return new ActiveMQQueue(getClass().getName());
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:7238f80
/////////////////////////////////////////////////////////////////////////
1:     public void testConcurrentProducerRequestReply() throws Exception {
1:         numProducers = 10;
1:         testLoadRequestReply();
1:     }
0:     
/////////////////////////////////////////////////////////////////////////
0:             public void run() {     
0:                     Session session = clientConnection.createSession(clientTransactional, 
0:                             clientTransactional ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE);
1:                     MessageProducer producer = session.createProducer(serverDestination);
1:                         TemporaryQueue replyTo = session.createTemporaryQueue();
1:                         MessageConsumer consumer = session.createConsumer(replyTo);
1:                         Message msg = session.createMessage();
1:                             session.commit();
1:                         consumer.receive();
1:                             session.commit();
/////////////////////////////////////////////////////////////////////////
commit:5b47fe7
/////////////////////////////////////////////////////////////////////////
0:                 } catch (IllegalStateException IgnoredAsCanOcurrDuringShutdown) {
commit:1651992
/////////////////////////////////////////////////////////////////////////
1: import java.util.Vector;
0: 
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1:     protected boolean serverTransactional = false;
1:     protected boolean clientTransactional = false;
1:     protected int numConsumers = 1;
1:     protected int numProducers = 1;
0:     
0:         for (int i=0; i< numConsumers; i++) {
1:             serverSession.createConsumer(serverDestination).setMessageListener(new MessageListener() {
0:                 public void onMessage(Message msg) {
1:                     try {
0:                         Destination replyTo = msg.getJMSReplyTo();
0:                         MessageProducer producer = serverSession.createProducer(replyTo);
0:                         producer.send(replyTo, msg);
1:                         if (serverTransactional) {
1:                             serverSession.commit();
1:                         }
0:                         producer.close();
0:                     } catch (Exception e) {
0:                         // TODO Auto-generated catch block
1:                         e.printStackTrace();
1:                     }
1:                 }
0:             });
1:         }
0:         
1:         class Producer extends Thread {
0:             private int numToSend;
1:             public Producer(int numToSend) {
1:                 this.numToSend = numToSend;
1:             }
0:             public void run() {
0:                 MessageProducer producer;
0:                     producer = clientSession.createProducer(serverDestination);
0:                
0:                     for (int i =0; i< numToSend; i++) {
0:                         TemporaryQueue replyTo = clientSession.createTemporaryQueue();
0:                         MessageConsumer consumer = clientSession.createConsumer(replyTo);
0:                         Message msg = clientSession.createMessage();
0:                         msg.setJMSReplyTo(replyTo);
0:                         producer.send(msg);
1:                         if (clientTransactional) {
0:                             clientSession.commit();
1:                         }
0:                         Message reply = consumer.receive();
1:                         if (clientTransactional) {
0:                             clientSession.commit();
1:                         }
0:                         consumer.close();
1:                         if (deleteTempQueue) {
0:                             replyTo.delete();
1:                         } else {
1:                             // temp queue will be cleaned up on clientConnection.close
1:                         }
1:                     }
1:                 } catch (JMSException e) {
1:         Vector<Thread> threads = new Vector<Thread>(numProducers);
0:         for (int i=0; i<numProducers ; i++) {
0:             threads.add(new Producer(messagesToSend/numProducers));
1:         }
1:         startAndJoinThreads(threads);
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(6, rb.getDestinationMap().size());          
1:     }
0: 
1:     private void startAndJoinThreads(Vector<Thread> threads) throws Exception {
0:         for (Thread thread: threads) {
1:             thread.start();
1:         }
0:         for (Thread thread: threads) {
1:             thread.join();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         serverTransactional = clientTransactional = false;
1:         numConsumers = numProducers = 1;
1:         messagesToSend = 2000;
0:     
commit:d81ce2e
/////////////////////////////////////////////////////////////////////////
0:     protected int messagesToSend = 2000;
1:     protected boolean deleteTempQueue = true;
/////////////////////////////////////////////////////////////////////////
0:         for (int i =0; i< messagesToSend; i++) {
/////////////////////////////////////////////////////////////////////////
0:             if (deleteTempQueue) {
0:                 replyTo.delete();
0:             } else {
0:                 // temp queue will be cleaned up on clientConnection.close
0:             }
commit:ae1bb66
/////////////////////////////////////////////////////////////////////////
1:     protected Connection serverConnection;
1:     protected Session serverSession;
1:     protected Connection clientConnection;
1:     protected Session clientSession;
1:     protected Destination serverDestination;
commit:4713040
/////////////////////////////////////////////////////////////////////////
0:     protected static final int COUNT = 2000;
commit:874e935
/////////////////////////////////////////////////////////////////////////
1:         serverSession = serverConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         clientSession = clientConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
============================================================================