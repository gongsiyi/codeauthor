1:f05f83b: /**
1:f05f83b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f05f83b:  * contributor license agreements.  See the NOTICE file distributed with
1:f05f83b:  * this work for additional information regarding copyright ownership.
1:f05f83b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f05f83b:  * (the "License"); you may not use this file except in compliance with
1:f05f83b:  * the License.  You may obtain a copy of the License at
1:f05f83b:  *
1:f05f83b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f05f83b:  *
1:f05f83b:  * Unless required by applicable law or agreed to in writing, software
1:f05f83b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f05f83b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f05f83b:  * See the License for the specific language governing permissions and
1:f05f83b:  * limitations under the License.
1:f05f83b:  */
1:f05f83b: package org.apache.activemq.transport.ws;
1:f05f83b: 
1:913f644: import static org.junit.Assert.assertEquals;
1:f05f83b: import static org.junit.Assert.assertNotNull;
1:f05f83b: import static org.junit.Assert.assertTrue;
1:f05f83b: 
1:f05f83b: import java.io.IOException;
1:f05f83b: import java.util.concurrent.Executors;
1:f05f83b: import java.util.concurrent.ScheduledExecutorService;
1:f05f83b: import java.util.concurrent.TimeUnit;
1:f05f83b: 
1:f05f83b: import org.apache.activemq.transport.stomp.Stomp;
1:f05f83b: import org.apache.activemq.transport.stomp.StompFrame;
1:f05f83b: import org.apache.activemq.util.Wait;
1:f8bfff0: import org.eclipse.jetty.util.ssl.SslContextFactory;
1:913f644: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1:f44c3d2: import org.eclipse.jetty.websocket.client.WebSocketClient;
1:f05f83b: import org.junit.After;
1:f05f83b: import org.junit.Before;
1:f05f83b: import org.junit.Test;
1:f05f83b: import org.slf4j.Logger;
1:f05f83b: import org.slf4j.LoggerFactory;
1:f05f83b: 
1:f05f83b: /**
1:f05f83b:  * Test STOMP over WebSockets functionality.
1:f05f83b:  */
1:f05f83b: public class StompWSTransportTest extends WSTransportTestSupport {
1:f05f83b: 
1:f05f83b:     private static final Logger LOG = LoggerFactory.getLogger(StompWSTransportTest.class);
1:f05f83b: 
1:f05f83b:     protected WebSocketClient wsClient;
1:f05f83b:     protected StompWSConnection wsStompConnection;
1:f05f83b: 
1:f05f83b:     @Override
1:f05f83b:     @Before
1:f05f83b:     public void setUp() throws Exception {
1:f05f83b:         super.setUp();
1:f05f83b:         wsStompConnection = new StompWSConnection();
1:f05f83b: 
1:f05f83b: 
1:913f644:         ClientUpgradeRequest request = new ClientUpgradeRequest();
1:913f644:         request.setSubProtocols("v11.stomp");
1:f05f83b: 
1:f8bfff0:         wsClient = new WebSocketClient(new SslContextFactory(true));
1:f44c3d2:         wsClient.start();
1:f05f83b: 
1:913f644:         wsClient.connect(wsStompConnection, wsConnectUri, request);
1:f05f83b:         if (!wsStompConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:f05f83b:             throw new IOException("Could not connect to STOMP WS endpoint");
1:f05f83b:         }
1:f05f83b:     }
1:2490c85: 
1:f05f83b:     @Override
1:f05f83b:     @After
1:f05f83b:     public void tearDown() throws Exception {
1:f05f83b:         if (wsStompConnection != null) {
1:f05f83b:             wsStompConnection.close();
1:f05f83b:             wsStompConnection = null;
1:f05f83b:             wsClient = null;
1:f05f83b:         }
1:f05f83b: 
1:f05f83b:         super.tearDown();
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     @Test(timeout = 60000)
1:f05f83b:     public void testConnect() throws Exception {
1:f05f83b:         String connectFrame = "STOMP\n" +
1:f05f83b:                               "login:system\n" +
1:f05f83b:                               "passcode:manager\n" +
1:f05f83b:                               "accept-version:1.2\n" +
1:f05f83b:                               "host:localhost\n" +
1:f05f83b:                               "\n" + Stomp.NULL;
1:f05f83b: 
1:f05f83b:         wsStompConnection.sendRawFrame(connectFrame);
1:f05f83b: 
4:f05f83b:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:f05f83b:         assertNotNull(incoming);
1:f05f83b:         assertTrue(incoming.startsWith("CONNECTED"));
1:913f644:         assertEquals("v11.stomp", wsStompConnection.getConnection().getUpgradeResponse().getAcceptedSubProtocol());
1:f05f83b: 
1:f05f83b:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:f05f83b: 
1:f05f83b:             @Override
1:f05f83b:             public boolean isSatisified() throws Exception {
1:f05f83b:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:f05f83b:             }
1:f05f83b:         }));
1:f05f83b: 
2:f05f83b:         wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:f05f83b:         wsStompConnection.close();
1:f05f83b: 
1:f05f83b:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:f05f83b: 
1:f05f83b:             @Override
1:f05f83b:             public boolean isSatisified() throws Exception {
1:f05f83b:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:f05f83b:             }
1:f05f83b:         }));
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     @Test(timeout = 60000)
1:f05f83b:     public void testConnectWithVersionOptions() throws Exception {
1:f05f83b:         String connectFrame = "STOMP\n" +
1:f05f83b:                               "login:system\n" +
1:f05f83b:                               "passcode:manager\n" +
1:f05f83b:                               "accept-version:1.0,1.1\n" +
1:f05f83b:                               "host:localhost\n" +
1:f05f83b:                               "\n" + Stomp.NULL;
1:f05f83b:         wsStompConnection.sendRawFrame(connectFrame);
1:f05f83b: 
1:f05f83b:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:f05f83b: 
1:f05f83b:         assertTrue(incoming.startsWith("CONNECTED"));
1:f05f83b:         assertTrue(incoming.indexOf("version:1.1") >= 0);
1:f05f83b:         assertTrue(incoming.indexOf("session:") >= 0);
1:f05f83b: 
1:f05f83b:         wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:f05f83b:         wsStompConnection.close();
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     @Test(timeout = 60000)
1:f05f83b:     public void testRejectInvalidHeartbeats1() throws Exception {
1:f05f83b:         String connectFrame = "STOMP\n" +
1:f05f83b:                               "login:system\n" +
1:f05f83b:                               "passcode:manager\n" +
1:f05f83b:                               "accept-version:1.1\n" +
1:f05f83b:                               "heart-beat:0\n" +
1:f05f83b:                               "host:localhost\n" +
1:f05f83b:                               "\n" + Stomp.NULL;
1:f05f83b:         wsStompConnection.sendRawFrame(connectFrame);
1:f05f83b: 
1:5ba8679:         try {
1:5ba8679:             String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:f05f83b: 
1:5ba8679:             assertTrue(incoming.startsWith("ERROR"));
1:5ba8679:             assertTrue(incoming.indexOf("heart-beat") >= 0);
1:5ba8679:             assertTrue(incoming.indexOf("message:") >= 0);
1:5ba8679:         } catch (IOException ex) {
1:5ba8679:             LOG.debug("Connection closed before Frame was read.");
1:5ba8679:         }
1:f05f83b: 
1:f05f83b:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:f05f83b: 
1:f05f83b:             @Override
1:f05f83b:             public boolean isSatisified() throws Exception {
1:f05f83b:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:5ba8679:             }
1:f05f83b:         }));
1:5ba8679:     }
1:f05f83b: 
1:f05f83b:     @Test(timeout = 60000)
1:f05f83b:     public void testRejectInvalidHeartbeats2() throws Exception {
1:f05f83b:         String connectFrame = "STOMP\n" +
1:f05f83b:                               "login:system\n" +
1:f05f83b:                               "passcode:manager\n" +
1:f05f83b:                               "accept-version:1.1\n" +
1:f05f83b:                               "heart-beat:T,0\n" +
1:f05f83b:                               "host:localhost\n" +
1:f05f83b:                               "\n" + Stomp.NULL;
1:f05f83b:         wsStompConnection.sendRawFrame(connectFrame);
1:f05f83b: 
1:5ba8679:         try {
1:5ba8679:             String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:f05f83b: 
1:5ba8679:             assertTrue(incoming.startsWith("ERROR"));
1:5ba8679:             assertTrue(incoming.indexOf("heart-beat") >= 0);
1:5ba8679:             assertTrue(incoming.indexOf("message:") >= 0);
1:5ba8679:         } catch (IOException ex) {
1:5ba8679:             LOG.debug("Connection closed before Frame was read.");
1:f05f83b:         }
1:f05f83b: 
1:f05f83b:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:f05f83b: 
1:f05f83b:             @Override
1:f05f83b:             public boolean isSatisified() throws Exception {
1:f05f83b:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:f05f83b:             }
1:f05f83b:         }));
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     @Test(timeout = 60000)
1:f05f83b:     public void testRejectInvalidHeartbeats3() throws Exception {
1:f05f83b:         String connectFrame = "STOMP\n" +
1:f05f83b:                               "login:system\n" +
1:f05f83b:                               "passcode:manager\n" +
1:f05f83b:                               "accept-version:1.1\n" +
1:f05f83b:                               "heart-beat:100,10,50\n" +
1:f05f83b:                               "host:localhost\n" +
1:f05f83b:                               "\n" + Stomp.NULL;
1:f05f83b:         wsStompConnection.sendRawFrame(connectFrame);
1:f05f83b: 
1:5ba8679:         try {
1:5ba8679:             String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:f05f83b: 
1:5ba8679:             assertTrue(incoming.startsWith("ERROR"));
1:5ba8679:             assertTrue(incoming.indexOf("heart-beat") >= 0);
1:5ba8679:             assertTrue(incoming.indexOf("message:") >= 0);
1:5ba8679:         } catch (IOException ex) {
1:5ba8679:             LOG.debug("Connection closed before Frame was read.");
1:f05f83b:         }
1:f05f83b: 
1:f05f83b:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1:f05f83b: 
1:f05f83b:             @Override
1:f05f83b:             public boolean isSatisified() throws Exception {
1:f05f83b:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:f05f83b:             }
1:f05f83b:         }));
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     @Test(timeout = 60000)
1:f05f83b:     public void testHeartbeatsDropsIdleConnection() throws Exception {
1:f05f83b:         String connectFrame = "STOMP\n" +
1:f05f83b:                               "login:system\n" +
1:f05f83b:                               "passcode:manager\n" +
1:f05f83b:                               "accept-version:1.1\n" +
1:f05f83b:                               "heart-beat:1000,0\n" +
1:f05f83b:                               "host:localhost\n" +
1:f05f83b:                               "\n" + Stomp.NULL;
1:f05f83b: 
1:f05f83b:         wsStompConnection.sendRawFrame(connectFrame);
1:f05f83b:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:f05f83b:         assertTrue(incoming.startsWith("CONNECTED"));
1:f05f83b:         assertTrue(incoming.indexOf("version:1.1") >= 0);
1:f05f83b:         assertTrue(incoming.indexOf("heart-beat:") >= 0);
1:f05f83b:         assertTrue(incoming.indexOf("session:") >= 0);
1:f05f83b: 
1:f05f83b:         assertTrue("Broker should have closed WS connection:", Wait.waitFor(new Wait.Condition() {
1:f05f83b: 
1:f05f83b:             @Override
1:f05f83b:             public boolean isSatisified() throws Exception {
1:f05f83b:                 return !wsStompConnection.isConnected();
1:f05f83b:             }
1:f05f83b:         }));
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     @Test(timeout = 60000)
1:f05f83b:     public void testHeartbeatsKeepsConnectionOpen() throws Exception {
1:f05f83b:         String connectFrame = "STOMP\n" +
1:f05f83b:                               "login:system\n" +
1:f05f83b:                               "passcode:manager\n" +
1:f05f83b:                               "accept-version:1.1\n" +
1:f05f83b:                               "heart-beat:2000,0\n" +
1:f05f83b:                               "host:localhost\n" +
1:f05f83b:                               "\n" + Stomp.NULL;
1:f05f83b: 
1:f05f83b:         wsStompConnection.sendRawFrame(connectFrame);
1:f05f83b:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:f05f83b:         assertTrue(incoming.startsWith("CONNECTED"));
1:f05f83b:         assertTrue(incoming.indexOf("version:1.1") >= 0);
1:f05f83b:         assertTrue(incoming.indexOf("heart-beat:") >= 0);
1:f05f83b:         assertTrue(incoming.indexOf("session:") >= 0);
1:f05f83b: 
1:f05f83b:         String message = "SEND\n" + "destination:/queue/" + getTestName() + "\n\n" + "Hello World" + Stomp.NULL;
1:f05f83b:         wsStompConnection.sendRawFrame(message);
1:f05f83b: 
1:f05f83b:         ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
1:f05f83b: 
1:f05f83b:         service.scheduleAtFixedRate(new Runnable() {
1:f05f83b:             @Override
1:f05f83b:             public void run() {
1:f05f83b:                 try {
1:f05f83b:                     LOG.info("Sending next KeepAlive");
1:f05f83b:                     wsStompConnection.keepAlive();
1:f05f83b:                 } catch (Exception e) {
1:f05f83b:                 }
1:f05f83b:             }
1:f05f83b:         }, 1, 1, TimeUnit.SECONDS);
1:f05f83b: 
1:f05f83b:         TimeUnit.SECONDS.sleep(15);
1:f05f83b: 
1:f05f83b:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getTestName() + "\n" +
1:f05f83b:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:f05f83b:         wsStompConnection.sendRawFrame(frame);
1:f05f83b: 
1:f05f83b:         incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:f05f83b:         assertTrue(incoming.startsWith("MESSAGE"));
1:f05f83b: 
1:f05f83b:         service.shutdownNow();
1:f05f83b:         service.awaitTermination(5, TimeUnit.SECONDS);
1:f05f83b: 
1:30d6ad7:         try {
1:30d6ad7:             wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:30d6ad7:         } catch (Exception ex) {
1:30d6ad7:             LOG.info("Caught exception on write of disconnect", ex);
1:30d6ad7:         }
1:f05f83b:     }
1:2490c85: 
1:2490c85:     @Test(timeout = 60000)
1:2490c85:     public void testEscapedHeaders() throws Exception {
1:2490c85:         String connectFrame = "STOMP\n" +
1:2490c85:                               "login:system\n" +
1:2490c85:                               "passcode:manager\n" +
1:2490c85:                               "accept-version:1.1\n" +
1:2490c85:                               "heart-beat:0,0\n" +
1:2490c85:                               "host:localhost\n" +
1:2490c85:                               "\n" + Stomp.NULL;
1:2490c85: 
1:2490c85:         wsStompConnection.sendRawFrame(connectFrame);
1:2490c85:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:2490c85:         assertTrue(incoming.startsWith("CONNECTED"));
2:913f644: 
1:2490c85:         String message = "SEND\n" + "destination:/queue/" + getTestName() + "\nescaped-header:one\\ntwo\\cthree\n\n" + "Hello World" + Stomp.NULL;
1:2490c85:         wsStompConnection.sendRawFrame(message);
1:2490c85: 
1:2490c85:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getTestName() + "\n" +
1:2490c85:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:2490c85:         wsStompConnection.sendRawFrame(frame);
1:2490c85: 
1:2490c85:         incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:2490c85:         assertTrue(incoming.startsWith("MESSAGE"));
1:2490c85:         assertTrue(incoming.indexOf("escaped-header:one\\ntwo\\cthree") >= 0);
1:2490c85: 
1:2490c85:         try {
1:2490c85:             wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:2490c85:         } catch (Exception ex) {
1:2490c85:             LOG.info("Caught exception on write of disconnect", ex);
1:2490c85:         }
1:2490c85:     }
1:f05f83b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2490c85
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testEscapedHeaders() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:0,0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         wsStompConnection.sendRawFrame(connectFrame);
1:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:         assertTrue(incoming.startsWith("CONNECTED"));
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getTestName() + "\nescaped-header:one\\ntwo\\cthree\n\n" + "Hello World" + Stomp.NULL;
1:         wsStompConnection.sendRawFrame(message);
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getTestName() + "\n" +
1:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:         wsStompConnection.sendRawFrame(frame);
1: 
1:         incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:         assertTrue(incoming.startsWith("MESSAGE"));
1:         assertTrue(incoming.indexOf("escaped-header:one\\ntwo\\cthree") >= 0);
1: 
1:         try {
1:             wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:         } catch (Exception ex) {
1:             LOG.info("Caught exception on write of disconnect", ex);
1:         }
1:     }
commit:5ba8679
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:             assertTrue(incoming.startsWith("ERROR"));
1:             assertTrue(incoming.indexOf("heart-beat") >= 0);
1:             assertTrue(incoming.indexOf("message:") >= 0);
1:         } catch (IOException ex) {
1:             LOG.debug("Connection closed before Frame was read.");
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:             assertTrue(incoming.startsWith("ERROR"));
1:             assertTrue(incoming.indexOf("heart-beat") >= 0);
1:             assertTrue(incoming.indexOf("message:") >= 0);
1:         } catch (IOException ex) {
1:             LOG.debug("Connection closed before Frame was read.");
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:             assertTrue(incoming.startsWith("ERROR"));
1:             assertTrue(incoming.indexOf("heart-beat") >= 0);
1:             assertTrue(incoming.indexOf("message:") >= 0);
1:         } catch (IOException ex) {
1:             LOG.debug("Connection closed before Frame was read.");
1:         }
commit:30d6ad7
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:         } catch (Exception ex) {
1:             LOG.info("Caught exception on write of disconnect", ex);
1:         }
commit:f05f83b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.ScheduledExecutorService;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.transport.stomp.Stomp;
1: import org.apache.activemq.transport.stomp.StompFrame;
1: import org.apache.activemq.util.Wait;
0: import org.eclipse.jetty.websocket.WebSocketClient;
0: import org.eclipse.jetty.websocket.WebSocketClientFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test STOMP over WebSockets functionality.
1:  */
1: public class StompWSTransportTest extends WSTransportTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompWSTransportTest.class);
1: 
1:     protected WebSocketClient wsClient;
1:     protected StompWSConnection wsStompConnection;
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
0:         WebSocketClientFactory clientFactory = new WebSocketClientFactory();
0:         clientFactory.start();
1: 
0:         wsClient = clientFactory.newWebSocketClient();
1:         wsStompConnection = new StompWSConnection();
1: 
0:         wsClient.open(wsConnectUri, wsStompConnection);
1:         if (!wsStompConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:             throw new IOException("Could not connect to STOMP WS endpoint");
1:         }
1:     }
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (wsStompConnection != null) {
1:             wsStompConnection.close();
1:             wsStompConnection = null;
1:             wsClient = null;
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnect() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.2\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         wsStompConnection.sendRawFrame(connectFrame);
1: 
1:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:         assertNotNull(incoming);
1:         assertTrue(incoming.startsWith("CONNECTED"));
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:             }
1:         }));
1: 
1:         wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:         wsStompConnection.close();
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnectWithVersionOptions() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.0,1.1\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         wsStompConnection.sendRawFrame(connectFrame);
1: 
1:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1: 
1:         assertTrue(incoming.startsWith("CONNECTED"));
1:         assertTrue(incoming.indexOf("version:1.1") >= 0);
1:         assertTrue(incoming.indexOf("session:") >= 0);
1: 
1:         wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:         wsStompConnection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testRejectInvalidHeartbeats1() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         wsStompConnection.sendRawFrame(connectFrame);
1: 
1:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1: 
0:         assertTrue(incoming.startsWith("ERROR"));
0:         assertTrue(incoming.indexOf("heart-beat") >= 0);
0:         assertTrue(incoming.indexOf("message:") >= 0);
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testRejectInvalidHeartbeats2() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:T,0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         wsStompConnection.sendRawFrame(connectFrame);
1: 
1:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1: 
0:         assertTrue(incoming.startsWith("ERROR"));
0:         assertTrue(incoming.indexOf("heart-beat") >= 0);
0:         assertTrue(incoming.indexOf("message:") >= 0);
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testRejectInvalidHeartbeats3() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:100,10,50\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1:         wsStompConnection.sendRawFrame(connectFrame);
1: 
1:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1: 
0:         assertTrue(incoming.startsWith("ERROR"));
0:         assertTrue(incoming.indexOf("heart-beat") >= 0);
0:         assertTrue(incoming.indexOf("message:") >= 0);
1: 
1:         assertTrue("Connection should close", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 0;
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testHeartbeatsDropsIdleConnection() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:1000,0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         wsStompConnection.sendRawFrame(connectFrame);
1:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:         assertTrue(incoming.startsWith("CONNECTED"));
1:         assertTrue(incoming.indexOf("version:1.1") >= 0);
1:         assertTrue(incoming.indexOf("heart-beat:") >= 0);
1:         assertTrue(incoming.indexOf("session:") >= 0);
1: 
1:         assertTrue("Broker should have closed WS connection:", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !wsStompConnection.isConnected();
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testHeartbeatsKeepsConnectionOpen() throws Exception {
1:         String connectFrame = "STOMP\n" +
1:                               "login:system\n" +
1:                               "passcode:manager\n" +
1:                               "accept-version:1.1\n" +
1:                               "heart-beat:2000,0\n" +
1:                               "host:localhost\n" +
1:                               "\n" + Stomp.NULL;
1: 
1:         wsStompConnection.sendRawFrame(connectFrame);
1:         String incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:         assertTrue(incoming.startsWith("CONNECTED"));
1:         assertTrue(incoming.indexOf("version:1.1") >= 0);
1:         assertTrue(incoming.indexOf("heart-beat:") >= 0);
1:         assertTrue(incoming.indexOf("session:") >= 0);
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getTestName() + "\n\n" + "Hello World" + Stomp.NULL;
1:         wsStompConnection.sendRawFrame(message);
1: 
1:         ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
1: 
1:         service.scheduleAtFixedRate(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     LOG.info("Sending next KeepAlive");
1:                     wsStompConnection.keepAlive();
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         }, 1, 1, TimeUnit.SECONDS);
1: 
1:         TimeUnit.SECONDS.sleep(15);
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getTestName() + "\n" +
1:                        "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:         wsStompConnection.sendRawFrame(frame);
1: 
1:         incoming = wsStompConnection.receive(30, TimeUnit.SECONDS);
1:         assertTrue(incoming.startsWith("MESSAGE"));
1: 
1:         service.shutdownNow();
1:         service.awaitTermination(5, TimeUnit.SECONDS);
1: 
1:         wsStompConnection.sendFrame(new StompFrame(Stomp.Commands.DISCONNECT));
1:     }
1: }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:913f644
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
/////////////////////////////////////////////////////////////////////////
1: 
1:         ClientUpgradeRequest request = new ClientUpgradeRequest();
1:         request.setSubProtocols("v11.stomp");
1: 
1:         wsClient.connect(wsStompConnection, wsConnectUri, request);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("v11.stomp", wsStompConnection.getConnection().getUpgradeResponse().getAcceptedSubProtocol());
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.websocket.client.WebSocketClient;
/////////////////////////////////////////////////////////////////////////
0:         wsClient = new WebSocketClient();
1:         wsClient.start();
0: 
0:         wsClient.connect(wsStompConnection, wsConnectUri);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:f8bfff0
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.util.ssl.SslContextFactory;
/////////////////////////////////////////////////////////////////////////
1:         wsClient = new WebSocketClient(new SslContextFactory(true));
============================================================================