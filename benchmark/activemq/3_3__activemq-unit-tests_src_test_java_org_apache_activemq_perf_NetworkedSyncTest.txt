1:be47d0b: /**
1:be47d0b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:be47d0b:  * contributor license agreements.  See the NOTICE file distributed with
1:be47d0b:  * this work for additional information regarding copyright ownership.
1:be47d0b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:be47d0b:  * (the "License"); you may not use this file except in compliance with
1:be47d0b:  * the License.  You may obtain a copy of the License at
4:be47d0b:  *
1:be47d0b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:be47d0b:  *
1:be47d0b:  * Unless required by applicable law or agreed to in writing, software
1:be47d0b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:be47d0b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:be47d0b:  * See the License for the specific language governing permissions and
1:be47d0b:  * limitations under the License.
1:be47d0b:  */
1:be47d0b: package org.apache.activemq.perf;
7:be47d0b: 
1:be47d0b: import javax.jms.Connection;
1:be47d0b: import javax.jms.DeliveryMode;
1:be47d0b: import javax.jms.Destination;
1:be47d0b: import javax.jms.Message;
1:be47d0b: import javax.jms.MessageConsumer;
1:be47d0b: import javax.jms.MessageProducer;
1:be47d0b: import javax.jms.Session;
1:be47d0b: import javax.jms.TextMessage;
1:be47d0b: import javax.jms.Topic;
1:be47d0b: 
1:be47d0b: import junit.framework.TestCase;
1:be47d0b: import junit.textui.TestRunner;
1:be47d0b: 
1:be47d0b: import org.apache.activemq.ActiveMQConnectionFactory;
1:be47d0b: import org.apache.activemq.broker.BrokerService;
1:be47d0b: import org.apache.activemq.network.NetworkConnector;
1:be47d0b: import org.apache.activemq.xbean.BrokerFactoryBean;
1:4743a20: import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:be47d0b: import org.springframework.core.io.ClassPathResource;
1:be47d0b: 
1:be47d0b: 
1:be47d0b: public class NetworkedSyncTest extends TestCase {
1:be47d0b: 
1:be47d0b:     // constants
1:be47d0b:     public static final int MESSAGE_COUNT = 10000; //100000;
1:be47d0b:     public final static String config = "org/apache/activemq/perf/networkSync.xml";
1:be47d0b:     public final static String broker1URL = "tcp://localhost:61616";
1:be47d0b:     public final static String broker2URL = "tcp://localhost:62616";
1:be47d0b:     private final String networkConnectorURL = "static://(" + broker2URL + ")";
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NetworkedSyncTest.class);
1:be47d0b:     BrokerService broker1 = null;
1:be47d0b:     BrokerService broker2 = null;
1:be47d0b:     NetworkConnector connector = null;
1:be47d0b: 
1:be47d0b:     /**
1:be47d0b:      * @param name
1:be47d0b:      */
1:be47d0b:     public NetworkedSyncTest(String name) {
1:be47d0b:         super(name);
1:be47d0b:         LOG.info("Testcase started.");
1:be47d0b:     }
1:4743a20: 
1:be47d0b:    public static void main(String args[]) {
1:be47d0b:        TestRunner.run(NetworkedSyncTest.class);
1:be47d0b:    }
1:be47d0b: 
1:be47d0b:     /**
1:be47d0b:      * @throws java.lang.Exception
1:be47d0b:      */
1:4743a20:     @Override
1:be47d0b:     protected void setUp() throws Exception {
1:be47d0b:         LOG.info("setUp() called.");
1:be47d0b:         ClassPathXmlApplicationContext context1 = null;
1:be47d0b:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(config));
1:4743a20:         assertNotNull(brokerFactory);
1:be47d0b: 
1:be47d0b:         /* start up first broker instance */
1:be47d0b:         try {
1:be47d0b:             // resolve broker1
1:be47d0b:             Thread.currentThread().setContextClassLoader(
1:be47d0b:                     NetworkedSyncTest.class.getClassLoader());
1:be47d0b:             context1 = new ClassPathXmlApplicationContext(config);
1:be47d0b:             broker1 = (BrokerService) context1.getBean("broker1");
1:be47d0b: 
1:be47d0b:             // start the broker
1:be47d0b:             if (!broker1.isStarted()) {
1:be47d0b:                 LOG.info("Broker broker1 not yet started. Kicking it off now.");
1:be47d0b:                 broker1.start();
1:be47d0b:             } else {
1:be47d0b:                 LOG.info("Broker broker1 already started. Not kicking it off a second time.");
1:be47d0b:                 broker1.waitUntilStopped();
1:be47d0b:             }
1:be47d0b:         } catch (Exception e) {
1:8bf987b:             LOG.error("Error: " + e.getMessage());
1:be47d0b:             throw e;
1:be47d0b:             // brokerService.stop();
1:be47d0b:         }
1:be47d0b: 
1:be47d0b:         /* start up second broker instance */
1:be47d0b:         try {
1:be47d0b:             Thread.currentThread().setContextClassLoader(
1:be47d0b:                     NetworkedSyncTest.class.getClassLoader());
1:be47d0b:             context1 = new ClassPathXmlApplicationContext(config);
1:be47d0b:             broker2 = (BrokerService) context1.getBean("broker2");
1:be47d0b: 
1:be47d0b:             // start the broker
1:be47d0b:             if (!broker2.isStarted()) {
1:be47d0b:                 LOG.info("Broker broker2 not yet started. Kicking it off now.");
1:be47d0b:                 broker2.start();
1:be47d0b:             } else {
1:be47d0b:                 LOG.info("Broker broker2 already started. Not kicking it off a second time.");
1:be47d0b:                 broker2.waitUntilStopped();
1:be47d0b:             }
1:be47d0b:         } catch (Exception e) {
1:8bf987b:             LOG.error("Error: " + e.getMessage());
1:be47d0b:             throw e;
1:be47d0b:         }
1:be47d0b: 
1:be47d0b:         // setup network connector from broker1 to broker2
1:be47d0b:         connector = broker1.addNetworkConnector(networkConnectorURL);
1:be47d0b:         connector.setBrokerName(broker1.getBrokerName());
1:be47d0b:         connector.setDuplex(true);
1:be47d0b:         connector.start();
1:be47d0b:         LOG.info("Network connector created.");
1:be47d0b:     }
1:be47d0b: 
1:be47d0b:     /**
1:be47d0b:      * @throws java.lang.Exception
1:be47d0b:      */
1:4743a20:     @Override
1:be47d0b:     protected void tearDown() throws Exception {
1:be47d0b: 
1:be47d0b:         LOG.info("tearDown() called.");
1:be47d0b: 
1:be47d0b:         if (broker1 != null && broker1.isStarted()) {
1:be47d0b:             LOG.info("Broker1 still running, stopping it now.");
1:be47d0b:             broker1.stop();
1:be47d0b:         } else {
1:be47d0b:             LOG.info("Broker1 not running, nothing to shutdown.");
1:be47d0b:         }
1:be47d0b:         if (broker2 != null && broker2.isStarted()) {
1:be47d0b:             LOG.info("Broker2 still running, stopping it now.");
1:be47d0b:             broker2.stop();
1:be47d0b:         } else {
1:be47d0b:             LOG.info("Broker2 not running, nothing to shutdown.");
1:be47d0b:         }
1:be47d0b: 
1:be47d0b:     }
1:be47d0b: 
1:be47d0b:     public void testMessageExchange() throws Exception {
1:be47d0b:         LOG.info("testMessageExchange() called.");
1:be47d0b: 
1:be47d0b:         long start = System.currentTimeMillis();
1:4743a20: 
1:be47d0b:         // create producer and consumer threads
1:be47d0b:         Thread producer = new Thread(new Producer());
1:be47d0b:         Thread consumer = new Thread(new Consumer());
1:be47d0b:         // start threads
1:be47d0b:         consumer.start();
1:be47d0b:         Thread.sleep(2000);
1:be47d0b:         producer.start();
1:4743a20: 
1:be47d0b: 
1:be47d0b:         // wait for threads to finish
1:be47d0b:         producer.join();
1:be47d0b:         consumer.join();
1:be47d0b:         long end = System.currentTimeMillis();
1:4743a20: 
1:be47d0b:         System.out.println("Duration: "+(end-start));
1:be47d0b:     }
1:be47d0b: }
1:be47d0b: 
1:be47d0b: /**
1:be47d0b:  * Message producer running as a separate thread, connecting to broker1
1:4743a20:  *
1:be47d0b:  * @author tmielke
1:4743a20:  *
1:be47d0b:  */
1:be47d0b: class Producer implements Runnable {
1:be47d0b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(Producer.class);
1:be47d0b: 
1:be47d0b:     /**
1:be47d0b:      * connect to broker and constantly send messages
1:be47d0b:      */
1:4743a20:     @Override
1:be47d0b:     public void run() {
1:be47d0b: 
1:be47d0b:         Connection connection = null;
1:be47d0b:         Session session = null;
1:be47d0b:         MessageProducer producer = null;
1:be47d0b: 
1:be47d0b:         try {
1:be47d0b:             ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(
1:be47d0b:                     NetworkedSyncTest.broker1URL);
1:be47d0b:             connection = amq.createConnection();
1:be47d0b: 
1:be47d0b:             connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:4743a20:                 @Override
1:be47d0b:                 public void onException(javax.jms.JMSException e) {
1:be47d0b:                     e.printStackTrace();
1:be47d0b:                 }
1:be47d0b:             });
1:be47d0b: 
1:be47d0b:             connection.start();
1:be47d0b:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:be47d0b:             Topic destination = session.createTopic("TEST.FOO");
1:be47d0b: 
1:be47d0b:             producer = session.createProducer(destination);
1:be47d0b:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:be47d0b: 
1:be47d0b:             long counter = 0;
1:be47d0b: 
1:be47d0b:             // Create and send message
2:be47d0b:             for (int i = 0; i < NetworkedSyncTest.MESSAGE_COUNT; i++) {
1:be47d0b: 
1:be47d0b:                 String text = "Hello world! From: "
1:be47d0b:                         + Thread.currentThread().getName() + " : "
1:be47d0b:                         + this.hashCode() + ":" + counter;
1:be47d0b:                 TextMessage message = session.createTextMessage(text);
1:be47d0b:                 producer.send(message);
1:be47d0b:                 counter++;
1:be47d0b: 
1:be47d0b:                 if ((counter % 1000) == 0)
1:be47d0b:                     LOG.info("sent " + counter + " messages");
1:be47d0b: 
1:be47d0b:             }
1:be47d0b:         } catch (Exception ex) {
1:8bf987b:             LOG.error(ex.toString());
1:be47d0b:             return;
1:be47d0b:         } finally {
1:be47d0b:             try {
1:be47d0b:                 if (producer != null)
1:be47d0b:                     producer.close();
1:be47d0b:                 if (session != null)
1:be47d0b:                     session.close();
1:be47d0b:                 if (connection != null)
1:be47d0b:                     connection.close();
1:be47d0b:             } catch (Exception e) {
1:be47d0b:                 LOG.error("Problem closing down JMS objects: " + e);
1:be47d0b:             }
1:be47d0b:         }
1:be47d0b:     }
1:be47d0b: }
1:be47d0b: 
1:be47d0b: /*
1:be47d0b:  * * Message consumer running as a separate thread, connecting to broker2
1:be47d0b:  * @author tmielke
1:4743a20:  *
1:be47d0b:  */
1:be47d0b: class Consumer implements Runnable {
1:be47d0b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(Consumer.class);;
1:4743a20: 
1:be47d0b: 
1:be47d0b:     /**
1:be47d0b:      * connect to broker and receive messages
1:be47d0b:      */
1:4743a20:     @Override
1:be47d0b:     public void run() {
1:be47d0b:         Connection connection = null;
1:be47d0b:         Session session = null;
1:be47d0b:         MessageConsumer consumer = null;
1:be47d0b: 
1:be47d0b:         try {
1:be47d0b:             ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(
1:be47d0b:                     NetworkedSyncTest.broker2URL);
1:be47d0b:             connection = amq.createConnection();
1:be47d0b:             // need to set clientID when using durable subscription.
1:be47d0b:             connection.setClientID("tmielke");
1:be47d0b: 
1:be47d0b:             connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:4743a20:                 @Override
1:be47d0b:                 public void onException(javax.jms.JMSException e) {
1:be47d0b:                     e.printStackTrace();
1:be47d0b:                 }
1:be47d0b:             });
1:be47d0b: 
1:be47d0b:             connection.start();
1:be47d0b:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:be47d0b:             Destination destination = session.createTopic("TEST.FOO");
1:be47d0b:             consumer = session.createDurableSubscriber((Topic) destination,"tmielke");
1:be47d0b: 
1:be47d0b:             long counter = 0;
1:be47d0b:             // Wait for a message
1:4743a20:             for (int i = 0; i < NetworkedSyncTest.MESSAGE_COUNT; i++) {
1:be47d0b:                 Message message2 = consumer.receive();
1:be47d0b:                 if (message2 instanceof TextMessage) {
1:be47d0b:                     TextMessage textMessage = (TextMessage) message2;
1:4743a20:                     textMessage.getText();
1:be47d0b:                     // logger.info("Received: " + text);
1:be47d0b:                 } else {
1:be47d0b:                     LOG.error("Received message of unsupported type. Expecting TextMessage. "+ message2);
1:be47d0b:                 }
1:be47d0b:                 counter++;
1:be47d0b:                 if ((counter % 1000) == 0)
1:be47d0b:                     LOG.info("received " + counter + " messages");
1:4743a20: 
1:be47d0b: 
1:be47d0b:             }
1:be47d0b:         } catch (Exception e) {
1:be47d0b:             LOG.error("Error in Consumer: " + e);
1:be47d0b:             return;
1:be47d0b:         } finally {
1:be47d0b:             try {
1:be47d0b:                 if (consumer != null)
1:be47d0b:                     consumer.close();
1:be47d0b:                 if (session != null)
1:be47d0b:                     session.close();
1:be47d0b:                 if (connection != null)
1:be47d0b:                     connection.close();
1:be47d0b:             } catch (Exception ex) {
1:be47d0b:                 LOG.error("Error closing down JMS objects: " + ex);
1:be47d0b:             }
1:be47d0b:         }
1:be47d0b:     }
1:be47d0b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         assertNotNull(brokerFactory);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < NetworkedSyncTest.MESSAGE_COUNT; i++) {
1:                     textMessage.getText();
/////////////////////////////////////////////////////////////////////////
1: 
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkedSyncTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.error("Error: " + e.getMessage());
/////////////////////////////////////////////////////////////////////////
1:             LOG.error("Error: " + e.getMessage());
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(Producer.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.error(ex.toString());
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(Consumer.class);;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:be47d0b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import junit.framework.TestCase;
1: import junit.textui.TestRunner;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
1: import org.springframework.core.io.ClassPathResource;
1: 
1: 
1: public class NetworkedSyncTest extends TestCase {
1: 
1:     // constants
1:     public static final int MESSAGE_COUNT = 10000; //100000;
1:     public final static String config = "org/apache/activemq/perf/networkSync.xml";
1:     public final static String broker1URL = "tcp://localhost:61616";
1:     public final static String broker2URL = "tcp://localhost:62616";
1:     private final String networkConnectorURL = "static://(" + broker2URL + ")";
0:     private static final Log LOG = LogFactory.getLog(NetworkedSyncTest.class);
1:     BrokerService broker1 = null;
1:     BrokerService broker2 = null;
1:     NetworkConnector connector = null;
1: 
1:     /**
1:      * @param name
1:      */
1:     public NetworkedSyncTest(String name) {
1:         super(name);
1:         LOG.info("Testcase started.");
1:     }
1:     
1:    public static void main(String args[]) {
1:        TestRunner.run(NetworkedSyncTest.class);
1:    }
1: 
1:     /**
1:      * @throws java.lang.Exception
1:      */
1:     protected void setUp() throws Exception {
1:         LOG.info("setUp() called.");
1:         ClassPathXmlApplicationContext context1 = null;
1:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(config));
1: 
1:         /* start up first broker instance */
1:         try {
1:             // resolve broker1
1:             Thread.currentThread().setContextClassLoader(
1:                     NetworkedSyncTest.class.getClassLoader());
1:             context1 = new ClassPathXmlApplicationContext(config);
1:             broker1 = (BrokerService) context1.getBean("broker1");
1: 
1:             // start the broker
1:             if (!broker1.isStarted()) {
1:                 LOG.info("Broker broker1 not yet started. Kicking it off now.");
1:                 broker1.start();
1:             } else {
1:                 LOG.info("Broker broker1 already started. Not kicking it off a second time.");
1:                 broker1.waitUntilStopped();
1:             }
1:         } catch (Exception e) {
0:             LOG.fatal("Error: " + e.getMessage());
1:             throw e;
1:             // brokerService.stop();
1:         }
1: 
1:         /* start up second broker instance */
1:         try {
1:             Thread.currentThread().setContextClassLoader(
1:                     NetworkedSyncTest.class.getClassLoader());
1:             context1 = new ClassPathXmlApplicationContext(config);
1:             broker2 = (BrokerService) context1.getBean("broker2");
1: 
1:             // start the broker
1:             if (!broker2.isStarted()) {
1:                 LOG.info("Broker broker2 not yet started. Kicking it off now.");
1:                 broker2.start();
1:             } else {
1:                 LOG.info("Broker broker2 already started. Not kicking it off a second time.");
1:                 broker2.waitUntilStopped();
1:             }
1:         } catch (Exception e) {
0:             LOG.fatal("Error: " + e.getMessage());
1:             throw e;
1:         }
1: 
1:         // setup network connector from broker1 to broker2
1:         connector = broker1.addNetworkConnector(networkConnectorURL);
1:         connector.setBrokerName(broker1.getBrokerName());
1:         connector.setDuplex(true);
1:         connector.start();
1:         LOG.info("Network connector created.");
1:     }
1: 
1:     /**
1:      * @throws java.lang.Exception
1:      */
1:     protected void tearDown() throws Exception {
1: 
1:         LOG.info("tearDown() called.");
1: 
1:         if (broker1 != null && broker1.isStarted()) {
1:             LOG.info("Broker1 still running, stopping it now.");
1:             broker1.stop();
1:         } else {
1:             LOG.info("Broker1 not running, nothing to shutdown.");
1:         }
1:         if (broker2 != null && broker2.isStarted()) {
1:             LOG.info("Broker2 still running, stopping it now.");
1:             broker2.stop();
1:         } else {
1:             LOG.info("Broker2 not running, nothing to shutdown.");
1:         }
1: 
1:     }
1: 
1:     public void testMessageExchange() throws Exception {
1:         LOG.info("testMessageExchange() called.");
1: 
1:         long start = System.currentTimeMillis();
1:         
1:         // create producer and consumer threads
1:         Thread producer = new Thread(new Producer());
1:         Thread consumer = new Thread(new Consumer());
1:         // start threads
1:         consumer.start();
1:         Thread.sleep(2000);
1:         producer.start();
1:         
1: 
1:         // wait for threads to finish
1:         producer.join();
1:         consumer.join();
1:         long end = System.currentTimeMillis();
1:         
1:         System.out.println("Duration: "+(end-start));
1:     }
1: }
1: 
1: /**
1:  * Message producer running as a separate thread, connecting to broker1
1:  * 
1:  * @author tmielke
1:  * 
1:  */
1: class Producer implements Runnable {
1: 
0:     private static final Log LOG = LogFactory.getLog(Producer.class);
1: 
1:     /**
1:      * connect to broker and constantly send messages
1:      */
1:     public void run() {
1: 
1:         Connection connection = null;
1:         Session session = null;
1:         MessageProducer producer = null;
1: 
1:         try {
1:             ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(
1:                     NetworkedSyncTest.broker1URL);
1:             connection = amq.createConnection();
1: 
1:             connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:                 public void onException(javax.jms.JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             });
1: 
1:             connection.start();
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Topic destination = session.createTopic("TEST.FOO");
1: 
1:             producer = session.createProducer(destination);
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:             long counter = 0;
1: 
1:             // Create and send message
1:             for (int i = 0; i < NetworkedSyncTest.MESSAGE_COUNT; i++) {
1: 
1:                 String text = "Hello world! From: "
1:                         + Thread.currentThread().getName() + " : "
1:                         + this.hashCode() + ":" + counter;
1:                 TextMessage message = session.createTextMessage(text);
1:                 producer.send(message);
1:                 counter++;
1: 
1:                 if ((counter % 1000) == 0)
1:                     LOG.info("sent " + counter + " messages");
1: 
1:             }
1:         } catch (Exception ex) {
0:             LOG.error(ex);
1:             return;
1:         } finally {
1:             try {
1:                 if (producer != null)
1:                     producer.close();
1:                 if (session != null)
1:                     session.close();
1:                 if (connection != null)
1:                     connection.close();
1:             } catch (Exception e) {
1:                 LOG.error("Problem closing down JMS objects: " + e);
1:             }
1:         }
1:     }
1: }
1: 
1: /*
1:  * * Message consumer running as a separate thread, connecting to broker2
1:  * @author tmielke
1:  * 
1:  */
1: class Consumer implements Runnable {
1: 
0:     private static final Log LOG = LogFactory.getLog(Consumer.class);;
1: 
1:     
1:     /**
1:      * connect to broker and receive messages
1:      */
1:     public void run() {
1:         Connection connection = null;
1:         Session session = null;
1:         MessageConsumer consumer = null;
1: 
1:         try {
1:             ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(
1:                     NetworkedSyncTest.broker2URL);
1:             connection = amq.createConnection();
1:             // need to set clientID when using durable subscription.
1:             connection.setClientID("tmielke");
1: 
1:             connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:                 public void onException(javax.jms.JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             });
1: 
1:             connection.start();
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createTopic("TEST.FOO");
1:             consumer = session.createDurableSubscriber((Topic) destination,"tmielke");
1: 
1:             long counter = 0;
1:             // Wait for a message
1:             for (int i = 0; i < NetworkedSyncTest.MESSAGE_COUNT; i++) { 
1:                 Message message2 = consumer.receive();
1:                 if (message2 instanceof TextMessage) {
1:                     TextMessage textMessage = (TextMessage) message2;
0:                     String text = textMessage.getText();
1:                     // logger.info("Received: " + text);
1:                 } else {
1:                     LOG.error("Received message of unsupported type. Expecting TextMessage. "+ message2);
1:                 }
1:                 counter++;
1:                 if ((counter % 1000) == 0)
1:                     LOG.info("received " + counter + " messages");
1: 
1:                 
1:             }
1:         } catch (Exception e) {
1:             LOG.error("Error in Consumer: " + e);
1:             return;
1:         } finally {
1:             try {
1:                 if (consumer != null)
1:                     consumer.close();
1:                 if (session != null)
1:                     session.close();
1:                 if (connection != null)
1:                     connection.close();
1:             } catch (Exception ex) {
1:                 LOG.error("Error closing down JMS objects: " + ex);
1:             }
1:         }
1:     }
1: }
============================================================================