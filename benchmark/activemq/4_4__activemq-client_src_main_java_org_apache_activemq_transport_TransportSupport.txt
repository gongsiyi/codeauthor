1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
1:d29ca2a: 
1:9ca56a0: import java.io.IOException;
1:3ac0537: import java.net.URI;
1:11be076: import org.apache.activemq.util.ServiceSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:9ca56a0: 
1:d29ca2a: /**
1:d29ca2a:  * A useful base class for transport implementations.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:11be076: public abstract class TransportSupport extends ServiceSupport implements Transport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TransportSupport.class);
1:d29ca2a: 
1:436fe42:     TransportListener transportListener;
1:d29ca2a: 
1:436fe42:     /**
1:436fe42:      * Returns the current transport listener
1:436fe42:      */
1:d29ca2a:     public TransportListener getTransportListener() {
1:d29ca2a:         return transportListener;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Registers an inbound command listener
1:d29ca2a:      * 
1:d29ca2a:      * @param commandListener
1:d29ca2a:      */
1:d29ca2a:     public void setTransportListener(TransportListener commandListener) {
1:d29ca2a:         this.transportListener = commandListener;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * narrow acceptance
1:d29ca2a:      * 
1:d29ca2a:      * @param target
1:d29ca2a:      * @return 'this' if assignable
1:d29ca2a:      */
1:933eb2f:     public <T> T narrow(Class<T> target) {
1:d29ca2a:         boolean assignableFrom = target.isAssignableFrom(getClass());
1:d29ca2a:         if (assignableFrom) {
1:933eb2f:             return target.cast(this);
1:d29ca2a:         }
1:d29ca2a:         return null;
1:d29ca2a:     }
1:d29ca2a: 
1:9ca56a0:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
1:d29ca2a:         throw new AssertionError("Unsupported Method");
1:d29ca2a:     }
1:d29ca2a: 
1:9ca56a0:     public Object request(Object command) throws IOException {
1:d29ca2a:         throw new AssertionError("Unsupported Method");
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     public Object request(Object command, int timeout) throws IOException {
1:5fe0a4c:         throw new AssertionError("Unsupported Method");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Process the inbound command
1:d29ca2a:      */
1:9ca56a0:     public void doConsume(Object command) {
1:d29ca2a:         if (command != null) {
1:d29ca2a:             if (transportListener != null) {
1:d29ca2a:                 transportListener.onCommand(command);
1:f812e34:             } else {
1:fc00993:                 LOG.error("No transportListener available to process inbound command: " + command);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Passes any IO exceptions into the transport listener
1:d29ca2a:      */
1:d29ca2a:     public void onException(IOException e) {
1:d29ca2a:         if (transportListener != null) {
1:5efe421:             try {
1:5efe421:                 transportListener.onException(e);
1:5efe421:             } catch (RuntimeException e2) {
1:f392884:                 // Handle any unexpected runtime exceptions by debug logging
1:f392884:                 // them.
1:f392884:                 LOG.debug("Unexpected runtime exception: " + e2, e2);
1:5efe421:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:9ca56a0:     protected void checkStarted() throws IOException {
1:436fe42:         if (!isStarted()) {
1:f812e34:             throw new IOException("The transport is not running.");
1:d29ca2a:         }
1:3ac0537:     }
1:f812e34: 
1:f812e34:     public boolean isFaultTolerant() {
1:c7469c4:         return false;
1:3ac0537:     }
1:d29ca2a: 
1:f392884:     public void reconnect(URI uri) throws IOException {
1:f392884:         throw new IOException("Not supported");
1:f392884:     }
1:d29ca2a: 
1:f392884:     public boolean isReconnectSupported() {
1:f392884:         return false;
1:f392884:     }
2:f392884: 
1:f392884:     public boolean isUpdateURIsSupported() {
1:f392884:         return false;
1:f392884:     }
1:f392884:     public void updateURIs(boolean reblance,URI[] uris) throws IOException {
1:f392884:         throw new IOException("Not supported");
1:f392884:     }
1:f392884: 
1:f392884:     public boolean isDisposed() {
1:f392884:         return isStopped();
1:f392884:     }
1:f392884: 
1:f392884:     public boolean isConnected() {
1:f392884:         return isStarted();
1:f392884:     }
1:f392884: 
1:ecc87ea: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:5efe421
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 transportListener.onException(e);
1:             } catch (RuntimeException e2) {
0:                 // Handle any unexpected runtime exceptions by debug logging them.
0:                 LOG.debug("Unexpected runtime exception: "+e2, e2);
1:             }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public <T> T narrow(Class<T> target) {
1:             return target.cast(this);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TransportSupport.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("No transportListener available to process inbound command: " + command);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Object request(Object command, int timeout) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:             } else {
/////////////////////////////////////////////////////////////////////////
1:             throw new IOException("The transport is not running.");
1: 
1:     public boolean isFaultTolerant() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
1:     public Object request(Object command) throws IOException {
0:     public Object request(Object command,int timeout) throws IOException {
1:     public void doConsume(Object command) {
/////////////////////////////////////////////////////////////////////////
1:     protected void checkStarted() throws IOException {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:50a6495
/////////////////////////////////////////////////////////////////////////
0: 			throw new IOException("The transport is not running.");
commit:84fd773
/////////////////////////////////////////////////////////////////////////
0:     public FutureResponse asyncRequest(Command command, ResponseCallback responseCallback) throws IOException {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.Response;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import java.io.IOException;
1: 
1: /**
1:  * A useful base class for transport implementations.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public abstract class TransportSupport implements Transport {
0:     private static final Log log = LogFactory.getLog(TransportSupport.class);
1: 
0:     private TransportListener transportListener;
1: 
1:     public TransportListener getTransportListener() {
1:         return transportListener;
1:     }
1: 
1:     /**
1:      * Registers an inbound command listener
1:      * 
1:      * @param commandListener
1:      */
1:     public void setTransportListener(TransportListener commandListener) {
1:         this.transportListener = commandListener;
1:     }
1: 
1:     /**
1:      * narrow acceptance
1:      * 
1:      * @param target
1:      * @return 'this' if assignable
1:      */
0:     public Object narrow(Class target) {
1:         boolean assignableFrom = target.isAssignableFrom(getClass());
1:         if (assignableFrom) {
0:             return this;
1:         }
1:         return null;
1:     }
1: 
0:     public FutureResponse asyncRequest(Command command) throws IOException {
1:         throw new AssertionError("Unsupported Method");
1:     }
1: 
0:     public Response request(Command command) throws IOException {
1:         throw new AssertionError("Unsupported Method");
1:     }
1: 
1:     /**
1:      * Process the inbound command
1:      */
0:     public void doConsume(Command command) {
1:         if (command != null) {
1:             if (transportListener != null) {
1:                 transportListener.onCommand(command);
1:             }
0:             else {
0:                 log.error("No transportListener available to process inbound command: " + command);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Passes any IO exceptions into the transport listener
1:      */
1:     public void onException(IOException e) {
1:         if (transportListener != null) {
0:             transportListener.onException(e);
1:         }
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TransportSupport.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 // Handle any unexpected runtime exceptions by debug logging
1:                 // them.
1:                 LOG.debug("Unexpected runtime exception: " + e2, e2);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void reconnect(URI uri) throws IOException {
1:         throw new IOException("Not supported");
1:     }
1: 
1:     public boolean isReconnectSupported() {
1:         return false;
1:     }
1: 
1:     public boolean isUpdateURIsSupported() {
1:         return false;
1:     }
1:     public void updateURIs(boolean reblance,URI[] uris) throws IOException {
1:         throw new IOException("Not supported");
1:     }
1: 
1:     public boolean isDisposed() {
1:         return isStopped();
1:     }
1: 
1:     public boolean isConnected() {
1:         return isStarted();
1:     }
commit:ecc87ea
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public  boolean isConnected() {
0: 	    return isStarted();
1: 	}
commit:3ac0537
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0:     
0:    
0: 	public void reconnect(URI uri) throws IOException {
0: 		throw new IOException("Not supported");
1: 	}
0: 	
0: 	public boolean isDisposed() {
0: 		return isStopped();
1: 	}
commit:c7469c4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.MessageDispatch;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public boolean isFaultTolerant(){
1:         return false;
0:     }
commit:5fe0a4c
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Response request(Command command,int timeout) throws IOException {
1:         throw new AssertionError("Unsupported Method");
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:436fe42
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.RemoveInfo;
0: import org.apache.activemq.command.ShutdownInfo;
/////////////////////////////////////////////////////////////////////////
1:     TransportListener transportListener;
1:     /**
1:      * Returns the current transport listener
1:      */
/////////////////////////////////////////////////////////////////////////
0:     protected void checkStarted(Command command) throws IOException {
1:         if (!isStarted()) {
0:             // we might try to shut down the transport before it was ever started in some test cases
0:             if (!(command instanceof ShutdownInfo || command instanceof RemoveInfo)) {
0:                 throw new IOException("The transport " + this + " of type: " + getClass().getName() + " is not running.");
0:             }
0:         }
0:     }
0: 
commit:11be076
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ServiceSupport;
/////////////////////////////////////////////////////////////////////////
1: public abstract class TransportSupport extends ServiceSupport implements Transport {
============================================================================