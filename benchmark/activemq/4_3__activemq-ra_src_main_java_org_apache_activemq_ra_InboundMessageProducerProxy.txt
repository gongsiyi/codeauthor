1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
1:40a7d3b: 
1:40a7d3b: import javax.jms.Destination;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Message;
1:40a7d3b: import javax.jms.MessageProducer;
1:40a7d3b: import javax.jms.Queue;
1:40a7d3b: import javax.jms.QueueSender;
1:40a7d3b: import javax.jms.Topic;
1:40a7d3b: import javax.jms.TopicPublisher;
1:40a7d3b: 
2:40a7d3b: /**
1:40a7d3b:  * An implementation of {@link MessageProducer} which uses the ActiveMQ JCA ResourceAdapter's
1:40a7d3b:  * current thread's JMS {@link javax.jms.Session} to send messages.
1:b0c2a40:  *
1:92a698f:  * 
1:40a7d3b:  */
1:40a7d3b: public class InboundMessageProducerProxy implements MessageProducer, QueueSender, TopicPublisher {
1:40a7d3b:     
1:40a7d3b:     private MessageProducer messageProducer;
1:40a7d3b:     private Destination destination;
1:40a7d3b:     private int deliveryMode;
1:40a7d3b:     private boolean disableMessageID;
1:40a7d3b:     private boolean disableMessageTimestamp;
1:40a7d3b:     private int priority;
1:40a7d3b:     private long timeToLive;
1:40a7d3b: 
1:40a7d3b:     public InboundMessageProducerProxy(MessageProducer messageProducer, Destination destination) throws JMSException {
1:40a7d3b:         this.messageProducer = messageProducer;
1:40a7d3b:         this.destination = destination;
1:40a7d3b: 
1:40a7d3b:         this.deliveryMode = messageProducer.getDeliveryMode();
1:40a7d3b:         this.disableMessageID = messageProducer.getDisableMessageID();
1:40a7d3b:         this.disableMessageTimestamp = messageProducer.getDisableMessageTimestamp();
1:40a7d3b:         this.priority = messageProducer.getPriority();
1:40a7d3b:         this.timeToLive = messageProducer.getTimeToLive();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void close() throws JMSException {
1:40a7d3b:         // do nothing as we just go back into the pool
1:40a7d3b:         // though lets reset the various settings which may have been changed
1:40a7d3b:         messageProducer.setDeliveryMode(deliveryMode);
1:40a7d3b:         messageProducer.setDisableMessageID(disableMessageID);
1:40a7d3b:         messageProducer.setDisableMessageTimestamp(disableMessageTimestamp);
1:40a7d3b:         messageProducer.setPriority(priority);
1:40a7d3b:         messageProducer.setTimeToLive(timeToLive);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public Destination getDestination() throws JMSException {
1:40a7d3b:         return destination;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public int getDeliveryMode() throws JMSException {
1:40a7d3b:         return messageProducer.getDeliveryMode();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean getDisableMessageID() throws JMSException {
1:40a7d3b:         return messageProducer.getDisableMessageID();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean getDisableMessageTimestamp() throws JMSException {
1:40a7d3b:         return messageProducer.getDisableMessageTimestamp();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public int getPriority() throws JMSException {
1:40a7d3b:         return messageProducer.getPriority();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public long getTimeToLive() throws JMSException {
1:40a7d3b:         return messageProducer.getTimeToLive();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void send(Destination destination, Message message) throws JMSException {
1:40a7d3b:         if (destination == null) {
1:40a7d3b:             destination = this.destination;
1:40a7d3b:         }
1:40a7d3b:         messageProducer.send(destination, message);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:40a7d3b:         if (destination == null) {
1:40a7d3b:             destination = this.destination;
1:40a7d3b:         }
1:40a7d3b:         messageProducer.send(destination, message, deliveryMode, priority, timeToLive);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void send(Message message) throws JMSException {
1:40a7d3b:         messageProducer.send(destination, message);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:40a7d3b:         messageProducer.send(destination, message, deliveryMode, priority, timeToLive);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setDeliveryMode(int i) throws JMSException {
1:40a7d3b:         messageProducer.setDeliveryMode(i);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setDisableMessageID(boolean b) throws JMSException {
1:40a7d3b:         messageProducer.setDisableMessageID(b);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setDisableMessageTimestamp(boolean b) throws JMSException {
1:40a7d3b:         messageProducer.setDisableMessageTimestamp(b);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setPriority(int i) throws JMSException {
1:40a7d3b:         messageProducer.setPriority(i);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setTimeToLive(long l) throws JMSException {
1:40a7d3b:         messageProducer.setTimeToLive(l);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public Queue getQueue() throws JMSException {
1:40a7d3b:         return (Queue) messageProducer.getDestination();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void send(Queue arg0, Message arg1) throws JMSException {
1:40a7d3b:         messageProducer.send(arg0, arg1);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void send(Queue arg0, Message arg1, int arg2, int arg3, long arg4) throws JMSException {
1:40a7d3b:         messageProducer.send(arg0, arg1, arg2, arg3, arg4);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public Topic getTopic() throws JMSException {
1:40a7d3b:         return (Topic) messageProducer.getDestination();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void publish(Message arg0) throws JMSException {
1:40a7d3b:         messageProducer.send(arg0);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void publish(Message arg0, int arg1, int arg2, long arg3) throws JMSException {
1:40a7d3b:         messageProducer.send(arg0, arg1, arg2, arg3);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void publish(Topic arg0, Message arg1) throws JMSException {
1:40a7d3b:         messageProducer.send(arg0, arg1);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void publish(Topic arg0, Message arg1, int arg2, int arg3, long arg4) throws JMSException {
1:40a7d3b:         messageProducer.send(arg0, arg1, arg2, arg3, arg4);
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueSender;
1: import javax.jms.Topic;
1: import javax.jms.TopicPublisher;
1: 
1: /**
1:  * An implementation of {@link MessageProducer} which uses the ActiveMQ JCA ResourceAdapter's
1:  * current thread's JMS {@link javax.jms.Session} to send messages.
0:  *
0:  * @version $Revision$
1:  */
1: public class InboundMessageProducerProxy implements MessageProducer, QueueSender, TopicPublisher {
1:     
1:     private MessageProducer messageProducer;
1:     private Destination destination;
1:     private int deliveryMode;
1:     private boolean disableMessageID;
1:     private boolean disableMessageTimestamp;
1:     private int priority;
1:     private long timeToLive;
1: 
1:     public InboundMessageProducerProxy(MessageProducer messageProducer, Destination destination) throws JMSException {
1:         this.messageProducer = messageProducer;
1:         this.destination = destination;
1: 
1:         this.deliveryMode = messageProducer.getDeliveryMode();
1:         this.disableMessageID = messageProducer.getDisableMessageID();
1:         this.disableMessageTimestamp = messageProducer.getDisableMessageTimestamp();
1:         this.priority = messageProducer.getPriority();
1:         this.timeToLive = messageProducer.getTimeToLive();
1:     }
1: 
1:     public void close() throws JMSException {
1:         // do nothing as we just go back into the pool
1:         // though lets reset the various settings which may have been changed
1:         messageProducer.setDeliveryMode(deliveryMode);
1:         messageProducer.setDisableMessageID(disableMessageID);
1:         messageProducer.setDisableMessageTimestamp(disableMessageTimestamp);
1:         messageProducer.setPriority(priority);
1:         messageProducer.setTimeToLive(timeToLive);
1:     }
1: 
1:     public Destination getDestination() throws JMSException {
1:         return destination;
1:     }
1: 
1:     public int getDeliveryMode() throws JMSException {
1:         return messageProducer.getDeliveryMode();
1:     }
1: 
1:     public boolean getDisableMessageID() throws JMSException {
1:         return messageProducer.getDisableMessageID();
1:     }
1: 
1:     public boolean getDisableMessageTimestamp() throws JMSException {
1:         return messageProducer.getDisableMessageTimestamp();
1:     }
1: 
1:     public int getPriority() throws JMSException {
1:         return messageProducer.getPriority();
1:     }
1: 
1:     public long getTimeToLive() throws JMSException {
1:         return messageProducer.getTimeToLive();
1:     }
1: 
1:     public void send(Destination destination, Message message) throws JMSException {
1:         if (destination == null) {
1:             destination = this.destination;
1:         }
1:         messageProducer.send(destination, message);
1:     }
1: 
1:     public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:         if (destination == null) {
1:             destination = this.destination;
1:         }
1:         messageProducer.send(destination, message, deliveryMode, priority, timeToLive);
1:     }
1: 
1:     public void send(Message message) throws JMSException {
1:         messageProducer.send(destination, message);
1:     }
1: 
1:     public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:         messageProducer.send(destination, message, deliveryMode, priority, timeToLive);
1:     }
1: 
1:     public void setDeliveryMode(int i) throws JMSException {
1:         messageProducer.setDeliveryMode(i);
1:     }
1: 
1:     public void setDisableMessageID(boolean b) throws JMSException {
1:         messageProducer.setDisableMessageID(b);
1:     }
1: 
1:     public void setDisableMessageTimestamp(boolean b) throws JMSException {
1:         messageProducer.setDisableMessageTimestamp(b);
1:     }
1: 
1:     public void setPriority(int i) throws JMSException {
1:         messageProducer.setPriority(i);
1:     }
1: 
1:     public void setTimeToLive(long l) throws JMSException {
1:         messageProducer.setTimeToLive(l);
1:     }
1: 
1:     public Queue getQueue() throws JMSException {
1:         return (Queue) messageProducer.getDestination();
1:     }
1: 
1:     public void send(Queue arg0, Message arg1) throws JMSException {
1:         messageProducer.send(arg0, arg1);
1:     }
1: 
1:     public void send(Queue arg0, Message arg1, int arg2, int arg3, long arg4) throws JMSException {
1:         messageProducer.send(arg0, arg1, arg2, arg3, arg4);
1:     }
1: 
1:     public Topic getTopic() throws JMSException {
1:         return (Topic) messageProducer.getDestination();
1:     }
1: 
1:     public void publish(Message arg0) throws JMSException {
1:         messageProducer.send(arg0);
1:     }
1: 
1:     public void publish(Message arg0, int arg1, int arg2, long arg3) throws JMSException {
1:         messageProducer.send(arg0, arg1, arg2, arg3);
1:     }
1: 
1:     public void publish(Topic arg0, Message arg1) throws JMSException {
1:         messageProducer.send(arg0, arg1);
1:     }
1: 
1:     public void publish(Topic arg0, Message arg1, int arg2, int arg3, long arg4) throws JMSException {
1:         messageProducer.send(arg0, arg1, arg2, arg3, arg4);
1:     }
1: }
============================================================================