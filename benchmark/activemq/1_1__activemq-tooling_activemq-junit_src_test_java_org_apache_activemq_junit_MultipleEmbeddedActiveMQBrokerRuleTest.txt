1:da3b138: /*
1:da3b138:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:da3b138:  * contributor license agreements.  See the NOTICE file distributed with
1:da3b138:  * this work for additional information regarding copyright ownership.
1:da3b138:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:da3b138:  * (the "License"); you may not use this file except in compliance with
1:da3b138:  * the License.  You may obtain a copy of the License at
1:da3b138:  *
1:da3b138:  *      http://www.apache.org/licenses/LICENSE-2.0
1:da3b138:  *
1:da3b138:  * Unless required by applicable law or agreed to in writing, software
1:da3b138:  * distributed under the License is distributed on an "AS IS" BASIS,
1:da3b138:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da3b138:  * See the License for the specific language governing permissions and
1:da3b138:  * limitations under the License.
1:da3b138:  */
1:da3b138: package org.apache.activemq.junit;
1:da3b138: 
1:da3b138: import org.junit.After;
1:da3b138: import org.junit.Before;
1:da3b138: import org.junit.Rule;
1:da3b138: import org.junit.Test;
1:da3b138: 
1:da3b138: import static org.junit.Assert.assertEquals;
1:da3b138: import static org.junit.Assert.assertTrue;
1:da3b138: 
1:da3b138: public class MultipleEmbeddedActiveMQBrokerRuleTest {
1:da3b138:     final String brokerOneName = "broker-one";
1:da3b138:     final String brokerTwoName = "broker-two";
1:da3b138: 
1:da3b138:     @Rule
1:da3b138:     public EmbeddedActiveMQBroker brokerOne = new EmbeddedActiveMQBroker();
1:da3b138: 
1:da3b138:     @Rule
1:da3b138:     public EmbeddedActiveMQBroker brokerTwo = new EmbeddedActiveMQBroker();
1:da3b138: 
1:da3b138:     public MultipleEmbeddedActiveMQBrokerRuleTest() {
1:da3b138:         // Perform and broker configuation here before JUnit starts the brokers
1:da3b138:         brokerOne.setBrokerName( brokerOneName);
1:da3b138:         brokerTwo.setBrokerName( brokerTwoName);
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Before
1:da3b138:     public void setUp() throws Exception {
1:da3b138:         assertTrue( "Broker One should be started", brokerOne.brokerService.isStarted());
1:da3b138:         assertTrue( "Broker Two should be started", brokerTwo.brokerService.isStarted());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @After
1:da3b138:     public void tearDown() throws Exception {
1:da3b138:         assertTrue( "Broker One should still be running", brokerOne.brokerService.isStarted());
1:da3b138:         assertTrue( "Broker Two should still be running", brokerTwo.brokerService.isStarted());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testStart() throws Exception {
1:da3b138:         assertEquals( "Broker One name is incorrect", brokerOneName, brokerOne.getBrokerName());
1:da3b138:         assertEquals( "Broker Two name is incorrect", brokerTwoName, brokerTwo.getBrokerName());
1:da3b138:     }
1:da3b138: }
============================================================================
author:Quinn Stevenson
-------------------------------------------------------------------------------
commit:da3b138
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.junit;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class MultipleEmbeddedActiveMQBrokerRuleTest {
1:     final String brokerOneName = "broker-one";
1:     final String brokerTwoName = "broker-two";
1: 
1:     @Rule
1:     public EmbeddedActiveMQBroker brokerOne = new EmbeddedActiveMQBroker();
1: 
1:     @Rule
1:     public EmbeddedActiveMQBroker brokerTwo = new EmbeddedActiveMQBroker();
1: 
1:     public MultipleEmbeddedActiveMQBrokerRuleTest() {
1:         // Perform and broker configuation here before JUnit starts the brokers
1:         brokerOne.setBrokerName( brokerOneName);
1:         brokerTwo.setBrokerName( brokerTwoName);
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         assertTrue( "Broker One should be started", brokerOne.brokerService.isStarted());
1:         assertTrue( "Broker Two should be started", brokerTwo.brokerService.isStarted());
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         assertTrue( "Broker One should still be running", brokerOne.brokerService.isStarted());
1:         assertTrue( "Broker Two should still be running", brokerTwo.brokerService.isStarted());
1:     }
1: 
1:     @Test
1:     public void testStart() throws Exception {
1:         assertEquals( "Broker One name is incorrect", brokerOneName, brokerOne.getBrokerName());
1:         assertEquals( "Broker Two name is incorrect", brokerTwoName, brokerTwo.getBrokerName());
1:     }
1: }
============================================================================