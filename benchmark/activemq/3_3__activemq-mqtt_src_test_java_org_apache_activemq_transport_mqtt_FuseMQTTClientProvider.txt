1:09c4500: /**
1:09c4500:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:09c4500:  * contributor license agreements.  See the NOTICE file distributed with
1:09c4500:  * this work for additional information regarding copyright ownership.
1:09c4500:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:09c4500:  * (the "License"); you may not use this file except in compliance with
1:09c4500:  * the License.  You may obtain a copy of the License at
1:09c4500:  *
1:09c4500:  *      http://www.apache.org/licenses/LICENSE-2.0
1:09c4500:  *
1:09c4500:  * Unless required by applicable law or agreed to in writing, software
1:09c4500:  * distributed under the License is distributed on an "AS IS" BASIS,
1:09c4500:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09c4500:  * See the License for the specific language governing permissions and
1:09c4500:  * limitations under the License.
1:09c4500:  */
1:09c4500: package org.apache.activemq.transport.mqtt;
1:09c4500: 
1:09c4500: import java.util.concurrent.TimeUnit;
1:09c4500: 
1:09c4500: import javax.net.ssl.SSLContext;
1:09c4500: import org.fusesource.mqtt.client.BlockingConnection;
1:09c4500: import org.fusesource.mqtt.client.MQTT;
1:09c4500: import org.fusesource.mqtt.client.Message;
1:09c4500: import org.fusesource.mqtt.client.QoS;
1:09c4500: import org.fusesource.mqtt.client.Topic;
1:09c4500: import static org.fusesource.hawtbuf.UTF8Buffer.utf8;
1:09c4500: 
1:c42b874: public class FuseMQTTClientProvider implements MQTTClientProvider {
1:09c4500:     private final MQTT mqtt = new MQTT();
1:09c4500:     private BlockingConnection connection;
1:09c4500:     @Override
1:09c4500:     public void connect(String host) throws Exception {
1:09c4500:         mqtt.setHost(host);
1:09c4500:         // shut off connect retry
1:09c4500:         mqtt.setConnectAttemptsMax(0);
1:09c4500:         mqtt.setReconnectAttemptsMax(0);
1:09c4500:         connection = mqtt.blockingConnection();
1:09c4500:         connection.connect();
1:09c4500:     }
1:09c4500: 
1:09c4500:     @Override
1:09c4500:     public void disconnect() throws Exception {
1:09c4500:         if (this.connection != null){
1:09c4500:             this.connection.disconnect();
1:09c4500:         }
1:09c4500:     }
1:09c4500: 
1:09c4500:     @Override
1:09c4500:     public void publish(String topic, byte[] payload, int qos) throws Exception {
1:6683eb6:         publish(topic,payload,qos,false);
1:6683eb6:     }
1:6683eb6: 
1:6683eb6:     @Override
1:6683eb6:     public void publish(String topic, byte[] payload, int qos, boolean retained) throws Exception {
1:6683eb6:         connection.publish(topic,payload, QoS.values()[qos],retained);
1:09c4500:     }
1:09c4500: 
1:09c4500:     @Override
1:09c4500:     public void subscribe(String topic, int qos) throws Exception {
1:09c4500:         Topic[] topics = {new Topic(utf8(topic), QoS.values()[qos])};
1:09c4500:         connection.subscribe(topics);
1:09c4500:     }
1:09c4500: 
1:09c4500:     @Override
1:8335dfc:     public void unsubscribe(String topic) throws Exception {
1:8335dfc:         connection.unsubscribe(new String[]{topic});
1:8335dfc:     }
1:8335dfc: 
1:8335dfc:     @Override
1:09c4500:     public byte[] receive(int timeout) throws Exception {
1:09c4500:         byte[] result = null;
1:09c4500:         Message message = connection.receive(timeout, TimeUnit.MILLISECONDS);
1:09c4500:         if (message != null){
1:09c4500:             result = message.getPayload();
1:09c4500:             message.ack();
1:09c4500:         }
1:09c4500:         return result;
1:09c4500:     }
1:09c4500: 
1:09c4500:     @Override
1:09c4500:     public void setSslContext(SSLContext sslContext) {
1:09c4500:         mqtt.setSslContext(sslContext);
1:09c4500:     }
1:72e484c: 
1:72e484c:     @Override
1:72e484c:     public void setWillMessage(String string) {
1:72e484c:         mqtt.setWillMessage(string);
1:72e484c:     }
1:72e484c: 
1:72e484c:     @Override
1:72e484c:     public void setWillTopic(String topic) {
1:72e484c:         mqtt.setWillTopic(topic);
1:72e484c:     }
1:8335dfc: 
1:8335dfc:     @Override
1:8335dfc:     public void setClientId(String clientId) {
1:8335dfc:         mqtt.setClientId(clientId);
1:8335dfc:     }
1:8335dfc: 
1:8335dfc:     @Override
1:8335dfc:     public void kill() throws Exception {
1:8335dfc:         connection.kill();
1:8335dfc:     }
1:8335dfc: 
1:8335dfc:     @Override
1:8335dfc:     public void setKeepAlive(int keepAlive) throws Exception {
1:8335dfc:         mqtt.setKeepAlive((short) keepAlive);
1:8335dfc:     }
1:09c4500: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:c42b874
/////////////////////////////////////////////////////////////////////////
1: public class FuseMQTTClientProvider implements MQTTClientProvider {
author:rajdavies
-------------------------------------------------------------------------------
commit:6683eb6
/////////////////////////////////////////////////////////////////////////
1:         publish(topic,payload,qos,false);
1:     }
1: 
1:     @Override
1:     public void publish(String topic, byte[] payload, int qos, boolean retained) throws Exception {
1:         connection.publish(topic,payload, QoS.values()[qos],retained);
author:Robert Davies
-------------------------------------------------------------------------------
commit:8335dfc
/////////////////////////////////////////////////////////////////////////
1:     public void unsubscribe(String topic) throws Exception {
1:         connection.unsubscribe(new String[]{topic});
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void setClientId(String clientId) {
1:         mqtt.setClientId(clientId);
1:     }
1: 
1:     @Override
1:     public void kill() throws Exception {
1:         connection.kill();
1:     }
1: 
1:     @Override
1:     public void setKeepAlive(int keepAlive) throws Exception {
1:         mqtt.setKeepAlive((short) keepAlive);
1:     }
commit:72e484c
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void setWillMessage(String string) {
1:         mqtt.setWillMessage(string);
1:     }
1: 
1:     @Override
1:     public void setWillTopic(String topic) {
1:         mqtt.setWillTopic(topic);
1:     }
commit:09c4500
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.net.ssl.SSLContext;
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.fusesource.mqtt.client.Message;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.client.Topic;
1: import static org.fusesource.hawtbuf.UTF8Buffer.utf8;
1: 
0: class FuseMQQTTClientProvider implements MQTTClientProvider {
1:     private final MQTT mqtt = new MQTT();
1:     private BlockingConnection connection;
1:     @Override
1:     public void connect(String host) throws Exception {
1:         mqtt.setHost(host);
1:         // shut off connect retry
1:         mqtt.setConnectAttemptsMax(0);
1:         mqtt.setReconnectAttemptsMax(0);
1:         connection = mqtt.blockingConnection();
1:         connection.connect();
1:     }
1: 
1:     @Override
1:     public void disconnect() throws Exception {
1:         if (this.connection != null){
1:             this.connection.disconnect();
1:         }
1:     }
1: 
1:     @Override
1:     public void publish(String topic, byte[] payload, int qos) throws Exception {
0:         connection.publish(topic,payload, QoS.values()[qos],false);
1:     }
1: 
1:     @Override
1:     public void subscribe(String topic, int qos) throws Exception {
1:         Topic[] topics = {new Topic(utf8(topic), QoS.values()[qos])};
1:         connection.subscribe(topics);
1:     }
1: 
1:     @Override
1:     public byte[] receive(int timeout) throws Exception {
1:         byte[] result = null;
1:         Message message = connection.receive(timeout, TimeUnit.MILLISECONDS);
1:         if (message != null){
1:             result = message.getPayload();
1:             message.ack();
1:         }
1:         return result;
1:     }
1: 
1:     @Override
1:     public void setSslContext(SSLContext sslContext) {
1:         mqtt.setSslContext(sslContext);
1:     }
1: }
============================================================================