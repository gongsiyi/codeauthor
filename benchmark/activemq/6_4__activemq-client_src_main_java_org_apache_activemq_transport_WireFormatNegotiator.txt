1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
3:6583ef1: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.InterruptedIOException;
1:642d38c: import java.net.Socket;
1:74a7a8b: import java.util.concurrent.CountDownLatch;
1:74a7a8b: import java.util.concurrent.TimeUnit;
1:74a7a8b: import java.util.concurrent.atomic.AtomicBoolean;
1:f812e34: 
1:d29ca2a: import org.apache.activemq.command.Command;
1:d29ca2a: import org.apache.activemq.command.WireFormatInfo;
1:d29ca2a: import org.apache.activemq.openwire.OpenWireFormat;
1:f6d4f9f: import org.apache.activemq.util.IOExceptionSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e423bc5: 
1:f6d4f9f: /**
1:f6d4f9f:  * Negotiates the wire format with a new connection
1:f6d4f9f:  */
1:d29ca2a: public class WireFormatNegotiator extends TransportFilter {
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(WireFormatNegotiator.class);
1:e423bc5: 
1:6583ef1:     private OpenWireFormat wireFormat;
1:d29ca2a:     private final int minimumVersion;
1:f812e34:     private long negotiateTimeout = 15000L;
1:f812e34: 
1:f812e34:     private final AtomicBoolean firstStart = new AtomicBoolean(true);
1:6583ef1:     private final CountDownLatch readyCountDownLatch = new CountDownLatch(1);
1:6583ef1:     private final CountDownLatch wireInfoSentDownLatch = new CountDownLatch(1);
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * Negotiator
1:d29ca2a:      * 
1:d29ca2a:      * @param next
1:d29ca2a:      */
1:6583ef1:     public WireFormatNegotiator(Transport next, OpenWireFormat wireFormat, int minimumVersion) {
1:d29ca2a:         super(next);
1:d29ca2a:         this.wireFormat = wireFormat;
1:f6d4f9f:         if (minimumVersion <= 0) {
1:f6d4f9f:             minimumVersion = 1;
1:446629b:         }
1:d29ca2a:         this.minimumVersion = minimumVersion;
1:c04d8c5:         
1:c04d8c5:         // Setup the initial negociation timeout to be the same as the inital max inactivity delay specified on the wireformat
1:c04d8c5:         // Does not make sense for us to take longer.
1:c04d8c5:         try {
1:f9585fd:             if( wireFormat.getPreferedWireFormatInfo() !=null ) {
1:f9585fd:                 setNegotiateTimeout(wireFormat.getPreferedWireFormatInfo().getMaxInactivityDurationInitalDelay());
1:f9585fd:             }
1:c04d8c5:         } catch (IOException e) {
1:c04d8c5:         }
1:6583ef1:     }
1:f812e34: 
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:         super.start();
1:f812e34:         if (firstStart.compareAndSet(true, false)) {
1:95ff010:             sendWireFormat();
1:95ff010:         }
1:95ff010:     }
1:95ff010: 
1:95ff010:     public void sendWireFormat() throws IOException {
1:95ff010:         try {
1:95ff010:             WireFormatInfo info = wireFormat.getPreferedWireFormatInfo();
1:95ff010:             if (LOG.isDebugEnabled()) {
1:95ff010:                 LOG.debug("Sending: " + info);
1:446629b:             }
1:95ff010:             sendWireFormat(info);
1:95ff010:         } finally {
1:95ff010:             wireInfoSentDownLatch.countDown();
1:f812e34:         }
1:446629b:     }
1:f812e34: 
1:98a6f18:     public void stop() throws Exception {
1:f812e34:         super.stop();
1:98a6f18:         readyCountDownLatch.countDown();
1:98a6f18:     }
1:f812e34: 
1:9ca56a0:     public void oneway(Object command) throws IOException {
1:0a12bcb:         boolean wasInterrupted = Thread.interrupted();
1:f812e34:         try {
1:0a12bcb:             if (readyCountDownLatch.getCount() > 0 && !readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS)) {
1:f812e34:                 throw new IOException("Wire format negotiation timeout: peer did not send his wire format.");
1:fc00993:             }
1:6583ef1:         } catch (InterruptedException e) {
1:0a12bcb:             InterruptedIOException interruptedIOException = new InterruptedIOException("Interrupted waiting for wire format negotiation");
1:0a12bcb:             interruptedIOException.initCause(e);
1:0a12bcb:             try {
1:0a12bcb:                 onException(interruptedIOException);
1:0a12bcb:             } finally {
1:0a12bcb:                 Thread.currentThread().interrupt();
1:0a12bcb:                 wasInterrupted = false;
1:0a12bcb:             }
1:0a12bcb:             throw interruptedIOException;
1:0a12bcb:         }  finally {
1:0a12bcb:             if (wasInterrupted) {
1:0a12bcb:                 Thread.currentThread().interrupt();
1:0a12bcb:             }
1:6583ef1:         }
1:d29ca2a:         super.oneway(command);
1:446629b:     }
1:f812e34: 
1:9ca56a0:     public void onCommand(Object o) {
1:f812e34:         Command command = (Command)o;
1:f812e34:         if (command.isWireFormatInfo()) {
1:f812e34:             WireFormatInfo info = (WireFormatInfo)command;
1:95ff010:             negociate(info);
1:446629b:         }
1:436fe42:         getTransportListener().onCommand(command);
1:6583ef1:     }
1:f812e34: 
1:95ff010:     public void negociate(WireFormatInfo info) {
1:95ff010:         if (LOG.isDebugEnabled()) {
1:95ff010:             LOG.debug("Received WireFormat: " + info);
1:95ff010:         }
1:95ff010: 
1:95ff010:         try {
1:95ff010:             wireInfoSentDownLatch.await();
1:95ff010: 
1:95ff010:             if (LOG.isDebugEnabled()) {
1:95ff010:                 LOG.debug(this + " before negotiation: " + wireFormat);
1:95ff010:             }
1:95ff010:             if (!info.isValid()) {
1:95ff010:                 onException(new IOException("Remote wire format magic is invalid"));
1:95ff010:             } else if (info.getVersion() < minimumVersion) {
1:95ff010:                 onException(new IOException("Remote wire format (" + info.getVersion() + ") is lower the minimum version required (" + minimumVersion + ")"));
1:95ff010:             }
1:95ff010: 
1:95ff010:             wireFormat.renegotiateWireFormat(info);
1:95ff010:             Socket socket = next.narrow(Socket.class);
1:95ff010:             if (socket != null) {
1:95ff010:                 socket.setTcpNoDelay(wireFormat.isTcpNoDelayEnabled());
1:95ff010:             }
1:95ff010: 
1:95ff010:             if (LOG.isDebugEnabled()) {
1:95ff010:                 LOG.debug(this + " after negotiation: " + wireFormat);
1:95ff010:             }
1:95ff010: 
1:95ff010:         } catch (IOException e) {
1:95ff010:             onException(e);
1:95ff010:         } catch (InterruptedException e) {
1:0a12bcb:             Thread.currentThread().interrupt();
1:95ff010:             onException((IOException)new InterruptedIOException().initCause(e));
1:95ff010:         } catch (Exception e) {
1:95ff010:             onException(IOExceptionSupport.create(e));
1:95ff010:         }
1:95ff010:         readyCountDownLatch.countDown();
1:95ff010:         onWireFormatNegotiated(info);
1:95ff010:     }
1:95ff010: 
1:6583ef1:     public void onException(IOException error) {
1:6583ef1:         readyCountDownLatch.countDown();
1:f6d4f9f:         /*
1:f812e34:          * try { super.oneway(new ExceptionResponse(error)); } catch
1:f812e34:          * (IOException e) { // ignore as we are already throwing an exception }
1:f812e34:          */
1:6583ef1:         super.onException(error);
1:642d38c:     }
1:f812e34: 
1:d29ca2a:     public String toString() {
1:d29ca2a:         return next.toString();
1:f812e34:     }
1:f812e34: 
1:4f446eb:     protected void sendWireFormat(WireFormatInfo info) throws IOException {
1:6583ef1:         next.oneway(info);
1:6583ef1:     }
1:f812e34: 
1:4f446eb:     protected void onWireFormatNegotiated(WireFormatInfo info) {
1:e423bc5:     }
1:98a6f18: 
1:f812e34:     public long getNegotiateTimeout() {
1:f812e34:         return negotiateTimeout;
1:f812e34:     }
1:e423bc5: 
1:f812e34:     public void setNegotiateTimeout(long negotiateTimeout) {
1:f812e34:         this.negotiateTimeout = negotiateTimeout;
1:f812e34:     }
1:e423bc5: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:0a12bcb
/////////////////////////////////////////////////////////////////////////
1:         boolean wasInterrupted = Thread.interrupted();
1:             if (readyCountDownLatch.getCount() > 0 && !readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS)) {
1:             InterruptedIOException interruptedIOException = new InterruptedIOException("Interrupted waiting for wire format negotiation");
1:             interruptedIOException.initCause(e);
1:             try {
1:                 onException(interruptedIOException);
1:             } finally {
1:                 Thread.currentThread().interrupt();
1:                 wasInterrupted = false;
1:             }
1:             throw interruptedIOException;
1:         }  finally {
1:             if (wasInterrupted) {
1:                 Thread.currentThread().interrupt();
1:             }
/////////////////////////////////////////////////////////////////////////
1:             Thread.currentThread().interrupt();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:95ff010
/////////////////////////////////////////////////////////////////////////
1:             sendWireFormat();
1:         }
1:     }
1: 
1:     public void sendWireFormat() throws IOException {
1:         try {
1:             WireFormatInfo info = wireFormat.getPreferedWireFormatInfo();
1:             if (LOG.isDebugEnabled()) {
1:                 LOG.debug("Sending: " + info);
1:             sendWireFormat(info);
1:         } finally {
1:             wireInfoSentDownLatch.countDown();
/////////////////////////////////////////////////////////////////////////
1:             negociate(info);
1:     public void negociate(WireFormatInfo info) {
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("Received WireFormat: " + info);
1:         }
1: 
1:         try {
1:             wireInfoSentDownLatch.await();
1: 
1:             if (LOG.isDebugEnabled()) {
1:                 LOG.debug(this + " before negotiation: " + wireFormat);
1:             }
1:             if (!info.isValid()) {
1:                 onException(new IOException("Remote wire format magic is invalid"));
1:             } else if (info.getVersion() < minimumVersion) {
1:                 onException(new IOException("Remote wire format (" + info.getVersion() + ") is lower the minimum version required (" + minimumVersion + ")"));
1:             }
1: 
1:             wireFormat.renegotiateWireFormat(info);
1:             Socket socket = next.narrow(Socket.class);
1:             if (socket != null) {
1:                 socket.setTcpNoDelay(wireFormat.isTcpNoDelayEnabled());
1:             }
1: 
1:             if (LOG.isDebugEnabled()) {
1:                 LOG.debug(this + " after negotiation: " + wireFormat);
1:             }
1: 
1:         } catch (IOException e) {
1:             onException(e);
1:         } catch (InterruptedException e) {
1:             onException((IOException)new InterruptedIOException().initCause(e));
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:         readyCountDownLatch.countDown();
1:         onWireFormatNegotiated(info);
1:     }
1: 
commit:f9585fd
/////////////////////////////////////////////////////////////////////////
1:             if( wireFormat.getPreferedWireFormatInfo() !=null ) {
1:                 setNegotiateTimeout(wireFormat.getPreferedWireFormatInfo().getMaxInactivityDurationInitalDelay());
1:             }
commit:c04d8c5
/////////////////////////////////////////////////////////////////////////
1:         
1:         // Setup the initial negociation timeout to be the same as the inital max inactivity delay specified on the wireformat
1:         // Does not make sense for us to take longer.
1:         try {
0:             setNegotiateTimeout(wireFormat.getPreferedWireFormatInfo().getMaxInactivityDurationInitalDelay());
1:         } catch (IOException e) {
1:         }
commit:642d38c
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
/////////////////////////////////////////////////////////////////////////
0:                 Socket socket = next.narrow(Socket.class);
0:                 if (socket != null) {
0:                     socket.setTcpNoDelay(wireFormat.isTcpNoDelayEnabled());
1:                 }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:             if (!readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS)) {
1:             }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(WireFormatNegotiator.class);
1: 
1:     private long negotiateTimeout = 15000L;
1: 
1:     private final AtomicBoolean firstStart = new AtomicBoolean(true);
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (firstStart.compareAndSet(true, false)) {
1:             try {
0:                 WireFormatInfo info = wireFormat.getPreferedWireFormatInfo();
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("Sending: " + info);
0:                 sendWireFormat(info);
0:             } finally {
0:                 wireInfoSentDownLatch.countDown();
1:             }
1: 
1:         super.stop();
1: 
0:             if (!readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS))
1:                 throw new IOException("Wire format negotiation timeout: peer did not send his wire format.");
/////////////////////////////////////////////////////////////////////////
1:         Command command = (Command)o;
1:         if (command.isWireFormatInfo()) {
1:             WireFormatInfo info = (WireFormatInfo)command;
0:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug("Received WireFormat: " + info);
1: 
1: 
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug(this + " before negotiation: " + wireFormat);
0:                 if (!info.isValid()) {
0:                 } else if (info.getVersion() < minimumVersion) {
0:                     onException(new IOException("Remote wire format (" + info.getVersion() + ") is lower the minimum version required (" + minimumVersion + ")"));
1: 
1: 
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug(this + " after negotiation: " + wireFormat);
1: 
0:                 onException((IOException)new InterruptedIOException().initCause(e));
1:             }
1:          * try { super.oneway(new ExceptionResponse(error)); } catch
1:          * (IOException e) { // ignore as we are already throwing an exception }
1:          */
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public long getNegotiateTimeout() {
1:         return negotiateTimeout;
1:     }
1:     public void setNegotiateTimeout(long negotiateTimeout) {
1:         this.negotiateTimeout = negotiateTimeout;
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicBoolean;
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void oneway(Object command) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void onCommand(Object o) {
0:     	Command command = (Command) o;
commit:b75a6da
/////////////////////////////////////////////////////////////////////////
0:             Thread.currentThread().interrupt();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:98a6f18
/////////////////////////////////////////////////////////////////////////
1:     public void stop() throws Exception {
0:     	super.stop();
1:         readyCountDownLatch.countDown();
1:     }
1:     
commit:e423bc5
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
0:     private long negotiateTimeout=15000;
/////////////////////////////////////////////////////////////////////////
0:             if( !readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS) ) 
0:             	throw new IOException("Wire format negociation timeout: peer did not send his wire format.");
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0: 	public long getNegotiateTimeout() {
0: 		return negotiateTimeout;
1: 	}
1: 
0: 	public void setNegotiateTimeout(long negotiateTimeout) {
0: 		this.negotiateTimeout = negotiateTimeout;
1: 	}
commit:e264e6f
/////////////////////////////////////////////////////////////////////////
0:                 wireFormat.renegotiateWireFormat(info);
commit:6583ef1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1:     private OpenWireFormat wireFormat;
0:     private final AtomicBoolean firstStart=new AtomicBoolean(true);
1:     private final CountDownLatch readyCountDownLatch = new CountDownLatch(1);
1:     private final CountDownLatch wireInfoSentDownLatch = new CountDownLatch(1);
/////////////////////////////////////////////////////////////////////////
1:     public WireFormatNegotiator(Transport next, OpenWireFormat wireFormat, int minimumVersion) {
/////////////////////////////////////////////////////////////////////////
0:         if( firstStart.compareAndSet(true, false) ) {
0:         	try {
0:         		WireFormatInfo info = wireFormat.getPreferedWireFormatInfo();
1: 	            next.oneway(info);
0:         	} finally {
0:         		wireInfoSentDownLatch.countDown();
1:         	}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             try {
0:                 wireInfoSentDownLatch.await();
0:                 if( !info.isValid() ) {
0:                     onException(new IOException("Remote wire format magic is invalid"));
0:                 } else if( info.getVersion() < minimumVersion ) {
0:                     onException(new IOException("Remote wire format ("+info.getVersion()+") is lower the minimum version required ("+minimumVersion+")"));
1:                 }
1:                 
0:                 wireFormat.renegociatWireFormat(info);
1: 	
0:             } catch (IOException e) {
0:                 onException(e);
1:             } catch (InterruptedException e) {
0:                 onException((IOException) new InterruptedIOException().initCause(e));
1: 			}
1:     public void onException(IOException error) {
1:         readyCountDownLatch.countDown();
1:     	super.onException(error);
1:     }
1:     
commit:446629b
/////////////////////////////////////////////////////////////////////////
0:     protected WireFormatInfo createWireFormatInfo() throws IOException {
/////////////////////////////////////////////////////////////////////////
0:                 try {
0:                     if( !info.isStackTraceEnabled() ) {
0:                         ((OpenWireFormat)wireFormat).setStackTraceEnabled(false);
1:                     }
0:                     if( info.isTcpNoDelayEnabled() ) {
0:                         ((OpenWireFormat)wireFormat).setTcpNoDelayEnabled(true);
1:                     }
0:                     if( !info.isCacheEnabled() ) {
0:                         ((OpenWireFormat)wireFormat).setCacheEnabled(false);
1:                     }
0:                     if( !info.isPrefixPacketSize() ) {
0:                         ((OpenWireFormat)wireFormat).setPrefixPacketSize(false);
1:                     }
0:                     if( !info.isTightEncodingEnabled() ) {
0:                         ((OpenWireFormat)wireFormat).setTightEncodingEnabled(false);
1:                     }
0:                 } catch (IOException e) {
0:                     commandListener.onException(e);
commit:33b73ac
/////////////////////////////////////////////////////////////////////////
0:             info.setPrefixPacketSize(((OpenWireFormat)wireFormat).isPrefixPacketSize());
0:             info.setTightEncodingEnabled(((OpenWireFormat)wireFormat).isTightEncodingEnabled());
/////////////////////////////////////////////////////////////////////////
0:                 log.debug("Received WireFormat: " + info);
/////////////////////////////////////////////////////////////////////////
0:                 if( !info.isPrefixPacketSize() ) {
0:                     ((OpenWireFormat)wireFormat).setPrefixPacketSize(false);
0:                 }
0:                 if( !info.isTightEncodingEnabled() ) {
0:                     ((OpenWireFormat)wireFormat).setTightEncodingEnabled(false);
0:                 }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
0: 
1: import java.io.IOException;
1: import java.io.InterruptedIOException;
0: 
0: import org.activeio.command.WireFormat;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.WireFormatInfo;
1: import org.apache.activemq.openwire.OpenWireFormat;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: 
0: 
1: public class WireFormatNegotiator extends TransportFilter {
0: 
0:     private final WireFormat wireFormat;
1:     private final int minimumVersion;
0:     
0:     private boolean firstStart=true;
0:     private CountDownLatch readyCountDownLatch = new CountDownLatch(1);
0:     
1:     /**
1:      * Negotiator
1:      * 
1:      * @param next
0:      * @param preferedFormat
1:      */
0:     public WireFormatNegotiator(Transport next, WireFormat wireFormat, int minimumVersion) {
1:         super(next);
1:         this.wireFormat = wireFormat;
1:         this.minimumVersion = minimumVersion;
0:     }
0: 
0:     
1:     public void start() throws Exception {
1:         super.start();
0:         if( firstStart ) {
0:             WireFormatInfo info = createWireFormatInfo();
0:             next.oneway(info);
0:         }
0:     }
0:     
0:     public void oneway(Command command) throws IOException {
0:         try {
0:             readyCountDownLatch.await();
0:         } catch (InterruptedException e) {
0:             throw new InterruptedIOException();
0:         }
1:         super.oneway(command);
0:     }
0: 
0:     protected WireFormatInfo createWireFormatInfo() {
0:         WireFormatInfo info = new WireFormatInfo();
0:         info.setVersion(wireFormat.getVersion());
0:         if ( wireFormat instanceof OpenWireFormat ) {
0:             info.setStackTraceEnabled(((OpenWireFormat)wireFormat).isStackTraceEnabled());
0:             info.setTcpNoDelayEnabled(((OpenWireFormat)wireFormat).isTcpNoDelayEnabled());
0:             info.setCacheEnabled(((OpenWireFormat)wireFormat).isCacheEnabled());
0:         }            
0:         return info;
0:     }
0:  
0:     public void onCommand(Command command) {
0:         if( command.isWireFormatInfo() ) {
0:             WireFormatInfo info = (WireFormatInfo) command;
0:             if( !info.isValid() ) {
0:                 commandListener.onException(new IOException("Remote wire format magic is invalid"));
0:             } else if( info.getVersion() < minimumVersion ) {
0:                 commandListener.onException(new IOException("Remote wire format ("+info.getVersion()+") is lower the minimum version required ("+minimumVersion+")"));
0:             } else if ( info.getVersion()!=wireFormat.getVersion() ) {
0:                 // Match the remote side.
0:                 wireFormat.setVersion(info.getVersion());
0:             }
0:             if ( wireFormat instanceof OpenWireFormat ) {
0:                 if( !info.isStackTraceEnabled() ) {
0:                     ((OpenWireFormat)wireFormat).setStackTraceEnabled(false);
0:                 }
0:                 if( info.isTcpNoDelayEnabled() ) {
0:                     ((OpenWireFormat)wireFormat).setTcpNoDelayEnabled(true);
0:                 }
0:                 if( !info.isCacheEnabled() ) {
0:                     ((OpenWireFormat)wireFormat).setCacheEnabled(false);
0:                 }
0:             }
0:                 
0:             readyCountDownLatch.countDown();
0:             
0:         }
0:         commandListener.onCommand(command);
0:     }
0:     
1:     public String toString() {
1:         return next.toString();
0:     }
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(WireFormatNegotiator.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:28a7312
/////////////////////////////////////////////////////////////////////////
0:             	throw new IOException("Wire format negotiation timeout: peer did not send his wire format.");
author:James Strachan
-------------------------------------------------------------------------------
commit:f6d4f9f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ExceptionResponse;
1: import org.apache.activemq.util.IOExceptionSupport;
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Negotiates the wire format with a new connection
1:  */
/////////////////////////////////////////////////////////////////////////
1:         if (minimumVersion <= 0) {
1:             minimumVersion = 1;
0:         }
/////////////////////////////////////////////////////////////////////////
0:             } catch (Exception e) {
0:                 onException(IOExceptionSupport.create(e));
/////////////////////////////////////////////////////////////////////////
1:         /*
0:         try {
0:             super.oneway(new ExceptionResponse(error));
0:         }
0:         catch (IOException e) {
0:             // ignore as we are already throwing an exception
0:         }
0:         */
0:         super.onException(error);
commit:72b382d
/////////////////////////////////////////////////////////////////////////
0:                 if (log.isDebugEnabled()) {
0:                     log.debug(this + " before negotiation: " + wireFormat);
0:                 }
commit:4446d55
/////////////////////////////////////////////////////////////////////////
0:                 if (log.isDebugEnabled()) {
0:                     log.debug(this + " before negotiation: " + wireFormat);
0:                 }
0:                 
0:                 if (log.isDebugEnabled()) {
0:                     log.debug(this + " after negotiation: " + wireFormat);
0:                 }
commit:4f446eb
/////////////////////////////////////////////////////////////////////////
0:                 if (log.isDebugEnabled()) {
0:                     log.debug("Sending: " + info);
0:                 }
0: 	            sendWireFormat(info);
/////////////////////////////////////////////////////////////////////////
0:             onWireFormatNegotiated(info);
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected void sendWireFormat(WireFormatInfo info) throws IOException {
0:         next.oneway(info);
0:     }
0:     
1:     protected void onWireFormatNegotiated(WireFormatInfo info) {
0:     }
commit:436fe42
/////////////////////////////////////////////////////////////////////////
0:                 getTransportListener().onException(new IOException("Remote wire format magic is invalid"));
0:                 getTransportListener().onException(new IOException("Remote wire format ("+info.getVersion()+") is lower the minimum version required ("+minimumVersion+")"));
/////////////////////////////////////////////////////////////////////////
0:                     getTransportListener().onException(e);
1:         getTransportListener().onCommand(command);
commit:7dca720
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log log = LogFactory.getLog(WireFormatNegotiator.class);
0:     
/////////////////////////////////////////////////////////////////////////
0:             if (log.isDebugEnabled()) {
0:                 log.debug("Received WireFormat: " + info + " with version: 0x" + Integer.toString(info.getVersion(), 16));
0:             }
0:             
============================================================================