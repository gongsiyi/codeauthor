1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
4:a677c21: 
1:a677c21: import java.util.ArrayList;
1:a677c21: import java.util.List;
1:74a7a8b: import java.util.concurrent.CountDownLatch;
1:a677c21: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageListener;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: import javax.jms.Session;
1:a677c21: import javax.jms.TextMessage;
1:a677c21: 
1:a677c21: import junit.framework.TestCase;
1:a677c21: import org.apache.activemq.ActiveMQConnectionFactory;
1:a677c21: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a677c21: 
1:a677c21: /**
1:a677c21:  * Test case for AMQ-268
1:230a86c:  * 
1:a677c21:  * @author Paul Smith
1:b0c2a40:  * 
1:a677c21:  */
1:a677c21: public final class TransactionRollbackOrderTest extends TestCase {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TransactionRollbackOrderTest.class);
1:a677c21: 
1:a677c21:     private volatile String receivedText;
1:a677c21: 
1:a677c21:     private Session producerSession;
1:a677c21:     private Session consumerSession;
1:a677c21:     private Destination queue;
1:a677c21: 
1:a677c21:     private MessageProducer producer;
1:a677c21:     private MessageConsumer consumer;
1:a677c21:     private Connection connection;
1:a677c21:     private CountDownLatch latch = new CountDownLatch(1);
1:fc00993:     private int numMessages = 5;
1:933eb2f:     private List<String> msgSent = new ArrayList<String>();
1:933eb2f:     private List<String> msgCommitted = new ArrayList<String>();
1:933eb2f:     private List<String> msgRolledBack = new ArrayList<String>();
1:933eb2f:     private List<String> msgRedelivered = new ArrayList<String>();
1:a677c21: 
1:a677c21:     public void testTransaction() throws Exception {
1:a677c21: 
1:a677c21:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:a677c21: 
1:a677c21:         connection = factory.createConnection();
1:a677c21:         queue = new ActiveMQQueue(getClass().getName() + "." + getName());
1:a677c21: 
1:a677c21:         producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         consumerSession = connection.createSession(true, 0);
1:a677c21: 
1:a677c21:         producer = producerSession.createProducer(queue);
1:a677c21: 
1:a677c21:         consumer = consumerSession.createConsumer(queue);
1:a677c21:         consumer.setMessageListener(new MessageListener() {
1:a677c21: 
1:230a86c:             int msgCount;
1:230a86c:             int msgCommittedCount;
1:a677c21: 
1:a677c21:             public void onMessage(Message m) {
1:a677c21:                 try {
1:a677c21:                     msgCount++;
1:230a86c:                     TextMessage tm = (TextMessage)m;
1:a677c21:                     receivedText = tm.getText();
1:a677c21: 
1:a677c21:                     if (tm.getJMSRedelivered()) {
1:a677c21:                         msgRedelivered.add(receivedText);
6:a677c21:                     }
1:a677c21: 
1:fc00993:                     LOG.info("consumer received message: " + receivedText + (tm.getJMSRedelivered() ? " ** Redelivered **" : ""));
1:a677c21:                     if (msgCount == 3) {
1:a677c21:                         msgRolledBack.add(receivedText);
1:a677c21:                         consumerSession.rollback();
1:fc00993:                         LOG.info("[msg: " + receivedText + "] ** rolled back **");
1:230a86c:                     } else {
1:a677c21:                         msgCommittedCount++;
1:a677c21:                         msgCommitted.add(receivedText);
1:a677c21:                         consumerSession.commit();
1:fc00993:                         LOG.info("[msg: " + receivedText + "] committed transaction ");
1:a677c21:                     }
1:fc00993:                     if (msgCommittedCount == numMessages) {
1:a677c21:                         latch.countDown();
1:a677c21:                     }
1:230a86c:                 } catch (JMSException e) {
1:a677c21:                     try {
1:a677c21:                         consumerSession.rollback();
1:fc00993:                         LOG.info("rolled back transaction");
1:230a86c:                     } catch (JMSException e1) {
1:8bf987b:                         LOG.info(e1.toString());
1:a677c21:                         e1.printStackTrace();
1:a677c21:                     }
1:8bf987b:                     LOG.info(e.toString());
1:a677c21:                     e.printStackTrace();
1:a677c21:                 }
1:a677c21:             }
1:a677c21:         });
1:a677c21:         connection.start();
1:a677c21: 
1:a677c21:         TextMessage tm = null;
1:a677c21:         try {
1:fc00993:             for (int i = 1; i <= numMessages; i++) {
1:a677c21:                 tm = producerSession.createTextMessage();
1:a677c21:                 tm.setText("Hello " + i);
1:a677c21:                 msgSent.add(tm.getText());
1:a677c21:                 producer.send(tm);
1:fc00993:                 LOG.info("producer sent message: " + tm.getText());
1:a677c21:             }
1:230a86c:         } catch (JMSException e) {
1:a677c21:             e.printStackTrace();
1:a677c21:         }
1:a677c21: 
1:fc00993:         LOG.info("Waiting for latch");
1:a677c21:         latch.await();
1:a677c21: 
1:a677c21:         assertEquals(1, msgRolledBack.size());
1:a677c21:         assertEquals(1, msgRedelivered.size());
1:a677c21: 
1:fc00993:         LOG.info("msg RolledBack = " + msgRolledBack.get(0));
1:fc00993:         LOG.info("msg Redelivered = " + msgRedelivered.get(0));
1:a677c21: 
1:a677c21:         assertEquals(msgRolledBack.get(0), msgRedelivered.get(0));
1:a677c21: 
1:fc00993:         assertEquals(numMessages, msgSent.size());
1:fc00993:         assertEquals(numMessages, msgCommitted.size());
1:a677c21: 
1:a677c21:         assertEquals(msgSent, msgCommitted);
1:a677c21: 
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void tearDown() throws Exception {
1:a677c21:         if (connection != null) {
1:fc00993:             LOG.info("Closing the connection");
1:a677c21:             connection.close();
1:a677c21:         }
1:a677c21:         super.tearDown();
1:86cbdfd:     }
1:a677c21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private List<String> msgSent = new ArrayList<String>();
1:     private List<String> msgCommitted = new ArrayList<String>();
1:     private List<String> msgRolledBack = new ArrayList<String>();
1:     private List<String> msgRedelivered = new ArrayList<String>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TransactionRollbackOrderTest.class);
/////////////////////////////////////////////////////////////////////////
1:     private int numMessages = 5;
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("consumer received message: " + receivedText + (tm.getJMSRedelivered() ? " ** Redelivered **" : ""));
1:                         LOG.info("[msg: " + receivedText + "] ** rolled back **");
1:                         LOG.info("[msg: " + receivedText + "] committed transaction ");
1:                     if (msgCommittedCount == numMessages) {
1:                         LOG.info("rolled back transaction");
0:                         LOG.info(e1);
0:                     LOG.info(e);
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 1; i <= numMessages; i++) {
1:                 LOG.info("producer sent message: " + tm.getText());
1:         LOG.info("Waiting for latch");
1:         LOG.info("msg RolledBack = " + msgRolledBack.get(0));
1:         LOG.info("msg Redelivered = " + msgRedelivered.get(0));
1:         assertEquals(numMessages, msgSent.size());
1:         assertEquals(numMessages, msgCommitted.size());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Closing the connection");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:             int msgCount;
1:             int msgCommittedCount;
1:                     TextMessage tm = (TextMessage)m;
/////////////////////////////////////////////////////////////////////////
1:                     } else {
/////////////////////////////////////////////////////////////////////////
1:                 } catch (JMSException e) {
1:                     } catch (JMSException e1) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TransactionRollbackOrderTest.class);
/////////////////////////////////////////////////////////////////////////
1:                         LOG.info(e1.toString());
1:                     LOG.info(e.toString());
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
1: 
1: 
1: /**
1:  * Test case for AMQ-268
1:  *
1:  * @author Paul Smith
0:  * @version $Revision: 1.1 $
1:  */
1: public final class TransactionRollbackOrderTest extends TestCase {
0:     private static final Log log = LogFactory.getLog(TransactionRollbackOrderTest.class);
1: 
1:     private volatile String receivedText;
1: 
1:     private Session producerSession;
1:     private Session consumerSession;
1:     private Destination queue;
1: 
1:     private MessageProducer producer;
1:     private MessageConsumer consumer;
1:     private Connection connection;
1:     private CountDownLatch latch = new CountDownLatch(1);
0:     private int NUM_MESSAGES = 5;
0:     private List msgSent = new ArrayList();
0:     private List msgCommitted = new ArrayList();
0:     private List msgRolledBack = new ArrayList();
0:     private List msgRedelivered = new ArrayList();
1: 
1:     public void testTransaction() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1: 
1:         connection = factory.createConnection();
1:         queue = new ActiveMQQueue(getClass().getName() + "." + getName());
1: 
1:         producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumerSession = connection.createSession(true, 0);
1: 
1:         producer = producerSession.createProducer(queue);
1: 
1:         consumer = consumerSession.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1: 
0:             int msgCount = 0;
0:             int msgCommittedCount = 0;
1: 
1:             public void onMessage(Message m) {
1:                 try {
1:                     msgCount++;
0:                     TextMessage tm = (TextMessage) m;
1:                     receivedText = tm.getText();
1: 
1:                     if (tm.getJMSRedelivered()) {
1:                         msgRedelivered.add(receivedText);
1:                     }
1: 
0:                     log.info("consumer received message: " + receivedText + (tm.getJMSRedelivered() ? " ** Redelivered **" : ""));
1:                     if (msgCount == 3) {
1:                         msgRolledBack.add(receivedText);
1:                         consumerSession.rollback();
0:                         log.info("[msg: " + receivedText + "] ** rolled back **");
1:                     }
0:                     else {
1:                         msgCommittedCount++;
1:                         msgCommitted.add(receivedText);
1:                         consumerSession.commit();
0:                         log.info("[msg: " + receivedText + "] committed transaction ");
1:                     }
0:                     if (msgCommittedCount == NUM_MESSAGES) {
1:                         latch.countDown();
1:                     }
1:                 }
0:                 catch (JMSException e) {
1:                     try {
1:                         consumerSession.rollback();
0:                         log.info("rolled back transaction");
1:                     }
0:                     catch (JMSException e1) {
0:                         log.info(e1);
1:                         e1.printStackTrace();
1:                     }
0:                     log.info(e);
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1:         connection.start();
1: 
1:         TextMessage tm = null;
1:         try {
0:             for (int i = 1; i <= NUM_MESSAGES; i++) {
1:                 tm = producerSession.createTextMessage();
1:                 tm.setText("Hello " + i);
1:                 msgSent.add(tm.getText());
1:                 producer.send(tm);
0:                 log.info("producer sent message: " + tm.getText());
1:             }
1:         }
0:         catch (JMSException e) {
1:             e.printStackTrace();
1:         }
1: 
0:         log.info("Waiting for latch");
1:         latch.await();
1: 
1:         assertEquals(1, msgRolledBack.size());
1:         assertEquals(1, msgRedelivered.size());
1: 
0:         log.info("msg RolledBack = " + msgRolledBack.get(0));
0:         log.info("msg Redelivered = " + msgRedelivered.get(0));
1: 
1:         assertEquals(msgRolledBack.get(0), msgRedelivered.get(0));
1: 
0:         assertEquals(NUM_MESSAGES, msgSent.size());
0:         assertEquals(NUM_MESSAGES, msgCommitted.size());
1: 
1:         assertEquals(msgSent, msgCommitted);
1: 
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
0:             log.info("Closing the connection");
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: }
============================================================================