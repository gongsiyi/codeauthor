1:0c6165f: /**
1:0c6165f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0c6165f:  * contributor license agreements.  See the NOTICE file distributed with
1:0c6165f:  * this work for additional information regarding copyright ownership.
1:0c6165f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0c6165f:  * (the "License"); you may not use this file except in compliance with
1:0c6165f:  * the License.  You may obtain a copy of the License at
1:0885c60:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0885c60:  *
1:0c6165f:  * Unless required by applicable law or agreed to in writing, software
1:0c6165f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0c6165f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0c6165f:  * See the License for the specific language governing permissions and
1:0c6165f:  * limitations under the License.
1:0c6165f:  */
1:0c6165f: package org.apache.activemq.transport.stomp;
2:0c6165f: 
1:f8f24e8: import java.io.IOException;
1:f8f24e8: import java.net.Socket;
1:f8f24e8: import java.net.URI;
1:f8f24e8: import java.net.URISyntaxException;
1:f8f24e8: import java.security.cert.X509Certificate;
1:f33f32e: import java.util.HashMap;
1:0c6165f: import java.util.Map;
1:0c6165f: 
1:f8f24e8: import javax.net.ssl.SSLServerSocketFactory;
1:f8f24e8: import javax.net.ssl.SSLSocket;
1:f8f24e8: 
1:11705e7: import org.apache.activemq.broker.BrokerContext;
1:3910056: import org.apache.activemq.broker.BrokerService;
1:3910056: import org.apache.activemq.broker.BrokerServiceAware;
1:f33f32e: import org.apache.activemq.transport.MutexTransport;
1:05de2b1: import org.apache.activemq.transport.Transport;
1:f8f24e8: import org.apache.activemq.transport.tcp.SslTransport;
1:05de2b1: import org.apache.activemq.transport.tcp.SslTransportFactory;
1:f8f24e8: import org.apache.activemq.transport.tcp.SslTransportServer;
1:98c5866: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:05de2b1: import org.apache.activemq.util.IntrospectionSupport;
1:05de2b1: import org.apache.activemq.wireformat.WireFormat;
1:05de2b1: 
1:0c6165f: /**
1:0c6165f:  * A <a href="http://stomp.codehaus.org/">STOMP</a> over SSL transport factory
1:0bbc0ac:  *
1:74a7a8b:  *
1:0c6165f:  */
1:3910056: public class StompSslTransportFactory extends SslTransportFactory implements BrokerServiceAware {
1:3910056: 
1:11705e7:     private BrokerContext brokerContext = null;
1:0c6165f: 
1:98c5866:     @Override
1:0c6165f:     protected String getDefaultWireFormatType() {
1:0c6165f:         return "stomp";
2:0c6165f:     }
1:0c6165f: 
1:98c5866:     @Override
1:f8f24e8:     protected SslTransportServer createSslTransportServer(final URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:f8f24e8:         return new SslTransportServer(this, location, serverSocketFactory) {
1:f8f24e8: 
1:f8f24e8:             @Override
1:f8f24e8:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:f8f24e8:                 return new SslTransport(format, (SSLSocket)socket) {
1:f8f24e8: 
1:f8f24e8:                     private X509Certificate[] cachedPeerCerts;
1:f8f24e8: 
1:f8f24e8:                     @Override
1:f8f24e8:                     public void doConsume(Object command) {
1:f8f24e8:                         StompFrame frame = (StompFrame) command;
1:f8f24e8:                         if (cachedPeerCerts == null) {
1:f8f24e8:                             cachedPeerCerts = getPeerCertificates();
1:f8f24e8:                         }
1:f8f24e8:                         frame.setTransportContext(cachedPeerCerts);
1:f8f24e8:                         super.doConsume(command);
1:f8f24e8:                     }
1:f8f24e8:                 };
1:f8f24e8:             }
1:f8f24e8:         };
1:f8f24e8:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     public SslTransport createTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer)
1:98c5866:             throws IOException {
1:98c5866: 
1:98c5866:         return new SslTransport(wireFormat, (SSLSocket)socket, initBuffer) {
1:98c5866: 
1:98c5866:             private X509Certificate[] cachedPeerCerts;
1:98c5866: 
1:98c5866:             @Override
1:98c5866:             public void doConsume(Object command) {
1:98c5866:                 StompFrame frame = (StompFrame) command;
1:98c5866:                 if (cachedPeerCerts == null) {
1:98c5866:                     cachedPeerCerts = getPeerCertificates();
1:98c5866:                 }
1:98c5866:                 frame.setTransportContext(cachedPeerCerts);
1:98c5866:                 super.doConsume(command);
1:98c5866:             }
1:98c5866:         };
1:98c5866:     }
1:f8f24e8: 
1:98c5866:     @Override
1:0885c60:     @SuppressWarnings("rawtypes")
1:0c6165f:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:0885c60:         transport = new StompTransportFilter(transport, format, brokerContext);
1:74a7a8b:         IntrospectionSupport.setProperties(transport, options);
1:74a7a8b:         return super.compositeConfigure(transport, format, options);
1:3910056:     }
1:3910056: 
1:f33f32e:     @SuppressWarnings("rawtypes")
1:f33f32e:     @Override
1:f33f32e:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:f33f32e:         transport = super.serverConfigure(transport, format, options);
1:f33f32e: 
1:f33f32e:         MutexTransport mutex = transport.narrow(MutexTransport.class);
1:f33f32e:         if (mutex != null) {
1:f33f32e:             mutex.setSyncOnCommand(true);
1:f33f32e:         }
1:f33f32e: 
1:f33f32e:         return transport;
1:f33f32e:     }
1:f33f32e: 
1:98c5866:     @Override
1:3910056:     public void setBrokerService(BrokerService brokerService) {
1:11705e7:         this.brokerContext = brokerService.getBrokerContext();
1:3910056:     }
1:3910056: 
1:b7a1883:     @Override
1:b7a1883:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:b7a1883:         StompInactivityMonitor monitor = new StompInactivityMonitor(transport, format);
1:b7a1883: 
1:b7a1883:         StompTransportFilter filter = (StompTransportFilter) transport.narrow(StompTransportFilter.class);
1:b7a1883:         filter.setInactivityMonitor(monitor);
1:b7a1883: 
1:b7a1883:         return monitor;
1:b7a1883:     }
1:0c6165f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:98c5866
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public SslTransport createTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer)
1:             throws IOException {
1: 
1:         return new SslTransport(wireFormat, (SSLSocket)socket, initBuffer) {
1: 
1:             private X509Certificate[] cachedPeerCerts;
1: 
1:             @Override
1:             public void doConsume(Object command) {
1:                 StompFrame frame = (StompFrame) command;
1:                 if (cachedPeerCerts == null) {
1:                     cachedPeerCerts = getPeerCertificates();
1:                 }
1:                 frame.setTransportContext(cachedPeerCerts);
1:                 super.doConsume(command);
1:             }
1:         };
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:3910056
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
0: import org.apache.activemq.xbean.XBeanBrokerService;
0: import org.springframework.context.ApplicationContext;
1: public class StompSslTransportFactory extends SslTransportFactory implements BrokerServiceAware {
1: 
0:     private ApplicationContext applicationContext = null;
0:         transport = new StompTransportFilter(transport, new LegacyFrameTranslator(), applicationContext);
1: 
1:     public void setBrokerService(BrokerService brokerService) {
0:         if (brokerService instanceof XBeanBrokerService) {
0:             this.applicationContext = ((XBeanBrokerService)brokerService).getApplicationContext();
1:         }
1:     }
1: 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
0:         transport = new StompTransportFilter(transport, new LegacyFrameTranslator());
1:         IntrospectionSupport.setProperties(transport, options);
1:         return super.compositeConfigure(transport, format, options);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:05de2b1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.tcp.SslTransportFactory;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
/////////////////////////////////////////////////////////////////////////
0:     	IntrospectionSupport.setProperties(transport, options);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f8f24e8
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.security.cert.X509Certificate;
1: import javax.net.ssl.SSLServerSocketFactory;
1: import javax.net.ssl.SSLSocket;
1: 
1: import org.apache.activemq.transport.tcp.SslTransport;
1: import org.apache.activemq.transport.tcp.SslTransportServer;
/////////////////////////////////////////////////////////////////////////
1:     protected SslTransportServer createSslTransportServer(final URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         return new SslTransportServer(this, location, serverSocketFactory) {
1: 
1:             @Override
1:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:                 return new SslTransport(format, (SSLSocket)socket) {
1: 
1:                     private X509Certificate[] cachedPeerCerts;
1: 
1:                     @Override
1:                     public void doConsume(Object command) {
1:                         StompFrame frame = (StompFrame) command;
1:                         if (cachedPeerCerts == null) {
1:                             cachedPeerCerts = getPeerCertificates();
1:                         }
1:                         frame.setTransportContext(cachedPeerCerts);
1:                         super.doConsume(command);
1:                     }
1:                 };
1:             }
1:         };
1:     }
1: 
commit:b7a1883
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:         StompInactivityMonitor monitor = new StompInactivityMonitor(transport, format);
1: 
1:         StompTransportFilter filter = (StompTransportFilter) transport.narrow(StompTransportFilter.class);
1:         filter.setInactivityMonitor(monitor);
1: 
1:         return monitor;
1:     }
commit:f33f32e
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import org.apache.activemq.transport.MutexTransport;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1:     @Override
1:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:         transport = super.serverConfigure(transport, format, options);
1: 
1:         MutexTransport mutex = transport.narrow(MutexTransport.class);
1:         if (mutex != null) {
1:             mutex.setSyncOnCommand(true);
1:         }
1: 
1:         return transport;
1:     }
1: 
commit:0885c60
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1:         transport = new StompTransportFilter(transport, format, brokerContext);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:11705e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerContext;
/////////////////////////////////////////////////////////////////////////
1:     private BrokerContext brokerContext = null;
0:         transport = new StompTransportFilter(transport, new LegacyFrameTranslator(), brokerContext);
1:         this.brokerContext = brokerService.getBrokerContext();
author:James Strachan
-------------------------------------------------------------------------------
commit:0c6165f
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
0: import org.apache.activemq.transport.tcp.TcpTransportFactory;
0: import org.apache.activemq.transport.tcp.SslTransportFactory;
0: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.wireformat.WireFormat;
1: 
1: import java.util.Map;
1: 
1: /**
1:  * A <a href="http://stomp.codehaus.org/">STOMP</a> over SSL transport factory
0:  *
0:  * @version $Revision$
1:  */
0: public class StompSslTransportFactory extends SslTransportFactory {
1: 
1:     protected String getDefaultWireFormatType() {
1:         return "stomp";
1:     }
1: 
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
0:     	transport = new StompTransportFilter(transport, new LegacyFrameTranslator());
0:     	return super.compositeConfigure(transport, format, options);
1:     }
1: }
============================================================================