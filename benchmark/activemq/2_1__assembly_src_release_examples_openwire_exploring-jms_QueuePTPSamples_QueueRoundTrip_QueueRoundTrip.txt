1:3f32507: /*
1:3f32507:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:3f32507:  *
1:3f32507:  * Licensed under the Apache License, Version 2.0 (the "License");
1:3f32507:  * you may not use this file except in compliance with the License.
1:3f32507:  * You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  
1:3f32507: Sample Application
1:3f32507: 
1:3f32507: Queue/PTP
1:3f32507: Send and receive using multiple sessions and a temporary queue
1:3f32507: 
1:3f32507: This sample shows the round trip time for a message being sent to the broker
1:3f32507: and received. A temporary queue is used to guarantee that each instance of this
1:3f32507: sample receives its own messages only.
1:3f32507: 
1:3f32507: Usage:
1:3f32507: 
1:3f32507:     java QueueRoundTrip -b <broker:port> -u <username> -p <password> -n <numTests> -h
1:3f32507:         Optional Parameters:
1:3f32507:         -b  broker:port    Broker name and port of your message server
1:3f32507:                             Default: tcp://localhost:61616
1:3f32507:         -u  username       Default: user (username required)
1:3f32507:         -p  password       Default: password (not checked)
1:3f32507:         -n  numTests       The number of messages to be sent/received
1:3f32507:                            Default: 100
1:3f32507:         -h                 Prints help screen.
1:3f32507:  */
1:3f32507: import org.apache.activemq.*;
1:3f32507: 
1:3f32507: 
1:3f32507: public class QueueRoundTrip
1:3f32507: {
1:3f32507:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1:3f32507:     private static final String DEFAULT_PASSWORD    = "password";
1:3f32507:     private static final String DEFAULT_USER_NAME   = "user";
1:3f32507:     private static final int DEFAULT_NUM_TESTS      = 100;
1:3f32507: 
1:3f32507:     private static final int msgSize = 1400;
1:3f32507:     private static byte[] msgBody = new byte[msgSize];
1:3f32507: 
1:3f32507:     private javax.jms.ConnectionFactory factory = null;
1:3f32507:     private javax.jms.Connection connection     = null;
1:3f32507:     private javax.jms.Session sendSession       = null;
1:3f32507:     private javax.jms.Session receiveSession    = null;
1:3f32507:     private javax.jms.MessageProducer sender    = null;
1:3f32507:     private javax.jms.MessageConsumer receiver  = null;
1:3f32507: 
1:3f32507:     private void QueueRoundTripper(String broker, String username, String password, int numTests){
1:3f32507: 
1:3f32507:         try
1:3f32507:         {
1:3f32507:             //Set up two sessions, one for sending and the other for receiving
1:3f32507:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:3f32507:             connection = factory.createConnection(username, password);
1:3f32507:             sendSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:             receiveSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             System.err.println ("error: Cannot connect to broker- " + broker + ".\n");
1:3f32507:             jmse.printStackTrace ();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         try
1:3f32507:         {
1:3f32507:             //Set up a temporary Queue:
1:3f32507:             javax.jms.TemporaryQueue tempQueue = sendSession.createTemporaryQueue();
1:3f32507:             receiver = receiveSession.createConsumer(tempQueue);
1:3f32507:             sender = sendSession.createProducer(tempQueue);
1:3f32507:             connection.start();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse){
1:3f32507:             System.err.println("error: Connection couldn't be started.\n");
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         //Send messages using Temporary Queue:
1:3f32507:         try {
1:3f32507:             System.out.println("QueueRoundTrip application:");
1:3f32507:             System.out.println("===========================");
1:3f32507:             System.out.println("Sending Messages to Temporary Queue...");
1:3f32507: 
1:3f32507:             //create a message to send
1:3f32507:             javax.jms.BytesMessage msg = sendSession.createBytesMessage();
1:3f32507:             msg.writeBytes(msgBody);
1:3f32507: 
1:3f32507:             //send and receive the message the specified number of times:
1:3f32507:             long time = System.currentTimeMillis();
1:3f32507:             for (int i = 0; i < numTests; i++){
1:3f32507:                 sender.send(msg);
1:3f32507:                 msg = (javax.jms.BytesMessage)receiver.receive();
1:3f32507:             }
1:3f32507:             time = System.currentTimeMillis()-time;
1:3f32507: 
1:3f32507:             System.out.println("\nTime for " + numTests + " sends and receives:\t\t" +
1:3f32507:                                 time + "ms\n" +
1:3f32507:                                 "Average Time per message:\t\t\t" + (float)time/(float)numTests + "ms\n");
1:3f32507:             System.out.println("\n\nPress Enter to close this window.");
1:3f32507:             java.io.BufferedReader stdin =
1:3f32507:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
1:3f32507:             stdin.readLine();
1:3f32507:             System.exit(0);
1:3f32507:         }
1:3f32507: 
1:3f32507:         catch (javax.jms.JMSException jmse) {
1:3f32507:             System.err.println("error: message not sent/received.\n");
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         catch (java.io.IOException ioe) {
1:3f32507:             ioe.printStackTrace();
1:3f32507:         }
1:3f32507: 
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507:         /** Cleanup resources and then exit. */
1:3f32507:     private void exit()
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             connection.close();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:         }
1:3f32507: 
1:3f32507:         System.exit(0);
1:3f32507:     }
1:3f32507: 
1:3f32507:     public static void main (String argv[])
1:3f32507:     {
1:3f32507:         // Values to be read from parameters
1:3f32507:         String broker    = DEFAULT_BROKER_NAME;
1:3f32507:         String username  = DEFAULT_USER_NAME;
1:3f32507:         String password  = DEFAULT_PASSWORD;
1:3f32507:         int numTests = DEFAULT_NUM_TESTS;
1:3f32507: 
1:3f32507:         // Check parameters
1:3f32507:         if(argv.length > 0){
1:3f32507:             for (int i = 0; i < argv.length; i++) {
1:3f32507:                 String arg = argv[i];
1:3f32507: 
1:3f32507:                 // Options
1:3f32507:                 if (!arg.startsWith("-")) {
1:3f32507:                     System.err.println ("error: unexpected argument - "+arg);
1:3f32507:                     printUsage();
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:                 else {
1:3f32507:                     if (arg.equals("-b")) {
1:3f32507:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                             System.err.println("error: missing broker name:port");
1:3f32507:                             System.exit(1);
1:3f32507:                         }
1:3f32507:                         broker = argv[++i];
1:3f32507:                         continue;
1:3f32507:                     }
1:3f32507: 
1:3f32507:                     if (arg.equals("-u")) {
1:3f32507:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                             System.err.println("error: missing user name");
1:3f32507:                             System.exit(1);
1:3f32507:                         }
1:3f32507:                         username = argv[++i];
1:3f32507:                         continue;
1:3f32507:                     }
1:3f32507: 
1:3f32507:                     if (arg.equals("-p")) {
1:3f32507:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                             System.err.println("error: missing password");
1:3f32507:                             System.exit(1);
1:3f32507:                         }
1:3f32507:                         password = argv[++i];
1:3f32507:                         continue;
1:3f32507:                     }
1:3f32507:                     if (arg.equals("-n")) {
1:3f32507:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                             System.err.println("error: missing number of test to run.");
1:3f32507:                             System.exit(1);
1:3f32507:                         }
1:3f32507:                         numTests = (new Integer(argv[++i])).intValue();
1:3f32507:                         continue;
1:3f32507:                     }
1:3f32507: 
1:3f32507:                     if (arg.equals("-h")) {
1:3f32507:                         printUsage();
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         // create the payload
1:3f32507:         byte charToWrite = (0x30);
1:3f32507:         for (int i = 0; i < msgSize; i++)
1:3f32507:         {
1:3f32507:             msgBody[i] = charToWrite;
1:3f32507:             charToWrite = (byte) ((int) charToWrite + (int) 0x01);
1:3f32507:             if (charToWrite == (0x39))
1:3f32507:             {
1:3f32507:                 charToWrite = (0x30);
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Start the JMS client for the test.
1:3f32507:         QueueRoundTrip queueRoundTripper = new QueueRoundTrip();
1:3f32507:         queueRoundTripper.QueueRoundTripper(broker, username, password, numTests);
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507:     private static void printUsage()
1:3f32507:     {
1:3f32507:         StringBuffer use = new StringBuffer();
1:3f32507: 
1:3f32507:         use.append("Usage:\n");
1:3f32507:         use.append("java QueueRoundTrip (options)...\n\n");
1:3f32507:         use.append("options:\n");
1:3f32507:         use.append("-b  broker:port    Broker name and port of your message server\n");
1:3f32507:         use.append("                   Default: tcp://localhost:61616\n");
1:3f32507:         use.append("-u  username       Default: user (username required)\n");
1:3f32507:         use.append("-p  password       Default: password (not checked)\n");
1:3f32507:         use.append("-n  numTests       The number of messages to be sent/received\n");
1:3f32507:         use.append("                   Default: 100\n");
1:3f32507:         use.append("-h                 This help screen");
1:3f32507:         System.err.println (use);
1:3f32507:     }
1:3f32507: 
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  
1: Sample Application
1: 
1: Queue/PTP
1: Send and receive using multiple sessions and a temporary queue
1: 
1: This sample shows the round trip time for a message being sent to the broker
1: and received. A temporary queue is used to guarantee that each instance of this
1: sample receives its own messages only.
1: 
1: Usage:
1: 
1:     java QueueRoundTrip -b <broker:port> -u <username> -p <password> -n <numTests> -h
1:         Optional Parameters:
1:         -b  broker:port    Broker name and port of your message server
1:                             Default: tcp://localhost:61616
1:         -u  username       Default: user (username required)
1:         -p  password       Default: password (not checked)
1:         -n  numTests       The number of messages to be sent/received
1:                            Default: 100
1:         -h                 Prints help screen.
1:  */
1: import org.apache.activemq.*;
1: 
1: 
1: public class QueueRoundTrip
1: {
1:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1:     private static final String DEFAULT_PASSWORD    = "password";
1:     private static final String DEFAULT_USER_NAME   = "user";
1:     private static final int DEFAULT_NUM_TESTS      = 100;
1: 
1:     private static final int msgSize = 1400;
1:     private static byte[] msgBody = new byte[msgSize];
1: 
1:     private javax.jms.ConnectionFactory factory = null;
1:     private javax.jms.Connection connection     = null;
1:     private javax.jms.Session sendSession       = null;
1:     private javax.jms.Session receiveSession    = null;
1:     private javax.jms.MessageProducer sender    = null;
1:     private javax.jms.MessageConsumer receiver  = null;
1: 
1:     private void QueueRoundTripper(String broker, String username, String password, int numTests){
1: 
1:         try
1:         {
1:             //Set up two sessions, one for sending and the other for receiving
1:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:             connection = factory.createConnection(username, password);
1:             sendSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:             receiveSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             System.err.println ("error: Cannot connect to broker- " + broker + ".\n");
1:             jmse.printStackTrace ();
1:             System.exit(1);
1:         }
1: 
1:         try
1:         {
1:             //Set up a temporary Queue:
1:             javax.jms.TemporaryQueue tempQueue = sendSession.createTemporaryQueue();
1:             receiver = receiveSession.createConsumer(tempQueue);
1:             sender = sendSession.createProducer(tempQueue);
1:             connection.start();
1:         }
1:         catch (javax.jms.JMSException jmse){
1:             System.err.println("error: Connection couldn't be started.\n");
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         //Send messages using Temporary Queue:
1:         try {
1:             System.out.println("QueueRoundTrip application:");
1:             System.out.println("===========================");
1:             System.out.println("Sending Messages to Temporary Queue...");
1: 
1:             //create a message to send
1:             javax.jms.BytesMessage msg = sendSession.createBytesMessage();
1:             msg.writeBytes(msgBody);
1: 
1:             //send and receive the message the specified number of times:
1:             long time = System.currentTimeMillis();
1:             for (int i = 0; i < numTests; i++){
1:                 sender.send(msg);
1:                 msg = (javax.jms.BytesMessage)receiver.receive();
1:             }
1:             time = System.currentTimeMillis()-time;
1: 
1:             System.out.println("\nTime for " + numTests + " sends and receives:\t\t" +
1:                                 time + "ms\n" +
1:                                 "Average Time per message:\t\t\t" + (float)time/(float)numTests + "ms\n");
1:             System.out.println("\n\nPress Enter to close this window.");
1:             java.io.BufferedReader stdin =
1:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
1:             stdin.readLine();
1:             System.exit(0);
1:         }
1: 
1:         catch (javax.jms.JMSException jmse) {
1:             System.err.println("error: message not sent/received.\n");
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         catch (java.io.IOException ioe) {
1:             ioe.printStackTrace();
1:         }
1: 
1: 
1:     }
1: 
1:         /** Cleanup resources and then exit. */
1:     private void exit()
1:     {
1:         try
1:         {
1:             connection.close();
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             jmse.printStackTrace();
1:         }
1: 
1:         System.exit(0);
1:     }
1: 
1:     public static void main (String argv[])
1:     {
1:         // Values to be read from parameters
1:         String broker    = DEFAULT_BROKER_NAME;
1:         String username  = DEFAULT_USER_NAME;
1:         String password  = DEFAULT_PASSWORD;
1:         int numTests = DEFAULT_NUM_TESTS;
1: 
1:         // Check parameters
1:         if(argv.length > 0){
1:             for (int i = 0; i < argv.length; i++) {
1:                 String arg = argv[i];
1: 
1:                 // Options
1:                 if (!arg.startsWith("-")) {
1:                     System.err.println ("error: unexpected argument - "+arg);
1:                     printUsage();
1:                     System.exit(1);
1:                 }
1:                 else {
1:                     if (arg.equals("-b")) {
1:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                             System.err.println("error: missing broker name:port");
1:                             System.exit(1);
1:                         }
1:                         broker = argv[++i];
1:                         continue;
1:                     }
1: 
1:                     if (arg.equals("-u")) {
1:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                             System.err.println("error: missing user name");
1:                             System.exit(1);
1:                         }
1:                         username = argv[++i];
1:                         continue;
1:                     }
1: 
1:                     if (arg.equals("-p")) {
1:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                             System.err.println("error: missing password");
1:                             System.exit(1);
1:                         }
1:                         password = argv[++i];
1:                         continue;
1:                     }
1:                     if (arg.equals("-n")) {
1:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                             System.err.println("error: missing number of test to run.");
1:                             System.exit(1);
1:                         }
1:                         numTests = (new Integer(argv[++i])).intValue();
1:                         continue;
1:                     }
1: 
1:                     if (arg.equals("-h")) {
1:                         printUsage();
1:                         System.exit(1);
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         // create the payload
1:         byte charToWrite = (0x30);
1:         for (int i = 0; i < msgSize; i++)
1:         {
1:             msgBody[i] = charToWrite;
1:             charToWrite = (byte) ((int) charToWrite + (int) 0x01);
1:             if (charToWrite == (0x39))
1:             {
1:                 charToWrite = (0x30);
1:             }
1:         }
1: 
1:         // Start the JMS client for the test.
1:         QueueRoundTrip queueRoundTripper = new QueueRoundTrip();
1:         queueRoundTripper.QueueRoundTripper(broker, username, password, numTests);
1: 
1:     }
1: 
1:     private static void printUsage()
1:     {
1:         StringBuffer use = new StringBuffer();
1: 
1:         use.append("Usage:\n");
1:         use.append("java QueueRoundTrip (options)...\n\n");
1:         use.append("options:\n");
1:         use.append("-b  broker:port    Broker name and port of your message server\n");
1:         use.append("                   Default: tcp://localhost:61616\n");
1:         use.append("-u  username       Default: user (username required)\n");
1:         use.append("-p  password       Default: password (not checked)\n");
1:         use.append("-n  numTests       The number of messages to be sent/received\n");
1:         use.append("                   Default: 100\n");
1:         use.append("-h                 This help screen");
1:         System.err.println (use);
1:     }
1: 
1: }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  
0: Sample Application
0: 
0: Queue/PTP
0: Send and receive using multiple sessions and a temporary queue
0: 
0: This sample shows the round trip time for a message being sent to the broker
0: and received. A temporary queue is used to guarantee that each instance of this
0: sample receives its own messages only.
0: 
0: Usage:
0: 
0:     java QueueRoundTrip -b <broker:port> -u <username> -p <password> -n <numTests> -h
0:         Optional Parameters:
0:         -b  broker:port    Broker name and port of your message server
0:                             Default: tcp://localhost:61616
0:         -u  username       Default: user (username required)
0:         -p  password       Default: password (not checked)
0:         -n  numTests       The number of messages to be sent/received
0:                            Default: 100
0:         -h                 Prints help screen.
0:  */
0: import org.apache.activemq.*;
0: 
0: 
0: public class QueueRoundTrip
0: {
0:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
0:     private static final String DEFAULT_PASSWORD    = "password";
0:     private static final String DEFAULT_USER_NAME   = "user";
0:     private static final int DEFAULT_NUM_TESTS      = 100;
0: 
0:     private static final int msgSize = 1400;
0:     private static byte[] msgBody = new byte[msgSize];
0: 
0:     private javax.jms.ConnectionFactory factory = null;
0:     private javax.jms.Connection connection     = null;
0:     private javax.jms.Session sendSession       = null;
0:     private javax.jms.Session receiveSession    = null;
0:     private javax.jms.MessageProducer sender    = null;
0:     private javax.jms.MessageConsumer receiver  = null;
0: 
0:     private void QueueRoundTripper(String broker, String username, String password, int numTests){
0: 
0:         try
0:         {
0:             //Set up two sessions, one for sending and the other for receiving
0:             factory = new ActiveMQConnectionFactory(username, password, broker);
0:             connection = factory.createConnection(username, password);
0:             sendSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
0:             receiveSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             System.err.println ("error: Cannot connect to broker- " + broker + ".\n");
0:             jmse.printStackTrace ();
0:             System.exit(1);
0:         }
0: 
0:         try
0:         {
0:             //Set up a temporary Queue:
0:             javax.jms.TemporaryQueue tempQueue = sendSession.createTemporaryQueue();
0:             receiver = receiveSession.createConsumer(tempQueue);
0:             sender = sendSession.createProducer(tempQueue);
0:             connection.start();
0:         }
0:         catch (javax.jms.JMSException jmse){
0:             System.err.println("error: Connection couldn't be started.\n");
0:             jmse.printStackTrace();
0:             System.exit(1);
0:         }
0: 
0:         //Send messages using Temporary Queue:
0:         try {
0:             System.out.println("QueueRoundTrip application:");
0:             System.out.println("===========================");
0:             System.out.println("Sending Messages to Temporary Queue...");
0: 
0:             //create a message to send
0:             javax.jms.BytesMessage msg = sendSession.createBytesMessage();
0:             msg.writeBytes(msgBody);
0: 
0:             //send and receive the message the specified number of times:
0:             long time = System.currentTimeMillis();
0:             for (int i = 0; i < numTests; i++){
0:                 sender.send(msg);
0:                 msg = (javax.jms.BytesMessage)receiver.receive();
0:             }
0:             time = System.currentTimeMillis()-time;
0: 
0:             System.out.println("\nTime for " + numTests + " sends and receives:\t\t" +
0:                                 time + "ms\n" +
0:                                 "Average Time per message:\t\t\t" + (float)time/(float)numTests + "ms\n");
0:             System.out.println("\n\nPress Enter to close this window.");
0:             java.io.BufferedReader stdin =
0:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
0:             stdin.readLine();
0:             System.exit(0);
0:         }
0: 
0:         catch (javax.jms.JMSException jmse) {
0:             System.err.println("error: message not sent/received.\n");
0:             jmse.printStackTrace();
0:             System.exit(1);
0:         }
0: 
0:         catch (java.io.IOException ioe) {
0:             ioe.printStackTrace();
0:         }
0: 
0: 
0:     }
0: 
0:         /** Cleanup resources and then exit. */
0:     private void exit()
0:     {
0:         try
0:         {
0:             connection.close();
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             jmse.printStackTrace();
0:         }
0: 
0:         System.exit(0);
0:     }
0: 
0:     public static void main (String argv[])
0:     {
0:         // Values to be read from parameters
0:         String broker    = DEFAULT_BROKER_NAME;
0:         String username  = DEFAULT_USER_NAME;
0:         String password  = DEFAULT_PASSWORD;
0:         int numTests = DEFAULT_NUM_TESTS;
0: 
0:         // Check parameters
0:         if(argv.length > 0){
0:             for (int i = 0; i < argv.length; i++) {
0:                 String arg = argv[i];
0: 
0:                 // Options
0:                 if (!arg.startsWith("-")) {
0:                     System.err.println ("error: unexpected argument - "+arg);
0:                     printUsage();
0:                     System.exit(1);
0:                 }
0:                 else {
0:                     if (arg.equals("-b")) {
0:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                             System.err.println("error: missing broker name:port");
0:                             System.exit(1);
0:                         }
0:                         broker = argv[++i];
0:                         continue;
0:                     }
0: 
0:                     if (arg.equals("-u")) {
0:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                             System.err.println("error: missing user name");
0:                             System.exit(1);
0:                         }
0:                         username = argv[++i];
0:                         continue;
0:                     }
0: 
0:                     if (arg.equals("-p")) {
0:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                             System.err.println("error: missing password");
0:                             System.exit(1);
0:                         }
0:                         password = argv[++i];
0:                         continue;
0:                     }
0:                     if (arg.equals("-n")) {
0:                         if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                             System.err.println("error: missing number of test to run.");
0:                             System.exit(1);
0:                         }
0:                         numTests = (new Integer(argv[++i])).intValue();
0:                         continue;
0:                     }
0: 
0:                     if (arg.equals("-h")) {
0:                         printUsage();
0:                         System.exit(1);
0:                     }
0:                 }
0:             }
0:         }
0: 
0:         // create the payload
0:         byte charToWrite = (0x30);
0:         for (int i = 0; i < msgSize; i++)
0:         {
0:             msgBody[i] = charToWrite;
0:             charToWrite = (byte) ((int) charToWrite + (int) 0x01);
0:             if (charToWrite == (0x39))
0:             {
0:                 charToWrite = (0x30);
0:             }
0:         }
0: 
0:         // Start the JMS client for the test.
0:         QueueRoundTrip queueRoundTripper = new QueueRoundTrip();
0:         queueRoundTripper.QueueRoundTripper(broker, username, password, numTests);
0: 
0:     }
0: 
0:     private static void printUsage()
0:     {
0:         StringBuffer use = new StringBuffer();
0: 
0:         use.append("Usage:\n");
0:         use.append("java QueueRoundTrip (options)...\n\n");
0:         use.append("options:\n");
0:         use.append("-b  broker:port    Broker name and port of your message server\n");
0:         use.append("                   Default: tcp://localhost:61616\n");
0:         use.append("-u  username       Default: user (username required)\n");
0:         use.append("-p  password       Default: password (not checked)\n");
0:         use.append("-n  numTests       The number of messages to be sent/received\n");
0:         use.append("                   Default: 100\n");
0:         use.append("-h                 This help screen");
0:         System.err.println (use);
0:     }
0: 
0: }
============================================================================