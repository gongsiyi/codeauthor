1:bf07137: /**
1:bf07137:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bf07137:  * contributor license agreements.  See the NOTICE file distributed with
1:bf07137:  * this work for additional information regarding copyright ownership.
1:bf07137:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bf07137:  * (the "License"); you may not use this file except in compliance with
1:bf07137:  * the License.  You may obtain a copy of the License at
1:bf07137:  *
1:bf07137:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bf07137:  *
1:bf07137:  * Unless required by applicable law or agreed to in writing, software
1:bf07137:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf07137:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf07137:  * See the License for the specific language governing permissions and
1:bf07137:  * limitations under the License.
1:bf07137:  */
1:bf07137: package org.apache.activemq.filter.function;
1:bf07137: 
1:bf07137: import java.util.regex.Matcher;
1:bf07137: import java.util.regex.Pattern;
1:bf07137: import org.apache.activemq.filter.FunctionCallExpression;
1:bf07137: import org.apache.activemq.filter.MessageEvaluationContext;
1:bf07137: import org.apache.activemq.util.LRUCache;
1:bf07137: 
1:bf07137: /**
1:bf07137:  * Filter function that matches a value against a regular expression.
1:bf07137:  * <p/>
1:bf07137:  * <p style="margin-left: 4em">
1:bf07137:  * REGEX( 'A.B', 'A-B' )
1:bf07137:  * </p>
1:bf07137:  * <p/>
1:bf07137:  * Note that the regular expression is not anchored; use the anchor characters, ^ and $, as-needed.  For example,
1:bf07137:  * REGEX( 'AA', 'XAAX' ) evaluates to true while REGEX( '^AA$' , 'XAAX' ) evaluates to false.
1:bf07137:  */
1:bf07137: 
1:bf07137: public class regexMatchFunction implements FilterFunction {
1:bf07137:     protected static final LRUCache<String, Pattern> compiledExprCache = new LRUCache(100);
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Check whether the given expression is a valid call of this function.  Two arguments are required.  When
1:bf07137:      * evaluated, the arguments are converted to strings if they are not already strings.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return true - if the expression is valid; false - otherwise.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public boolean isValid(FunctionCallExpression expr) {
1:bf07137:         if (expr.getNumArguments() == 2)
1:bf07137:             return true;
1:bf07137: 
1:bf07137:         return false;
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Indicate that this Filter Function evaluates to a Boolean result.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return true - this function always evaluates to a Boolean result.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public boolean returnsBoolean(FunctionCallExpression expr) {
1:bf07137:         return true;
1:bf07137:     }
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Evalutate the given expression, which consists of a call to this function, in the context given.  Returns
1:bf07137:      * an indication of whether the second argument matches the regular expression in the first argument.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @param    message_ctx - the context in which the call is being evaluated.
1:bf07137:      * @return true - if the value matches the regular expression; false - otherwise.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message)
1:bf07137:             throws javax.jms.JMSException {
1:bf07137:         Object reg;
1:bf07137:         Object cand;
1:bf07137:         String reg_str;
1:bf07137:         String cand_str;
1:bf07137:         Pattern pat;
1:bf07137:         Matcher match_eng;
1:bf07137: 
1:bf07137:         //
1:bf07137:         // Evaluate the first argument (the regular expression).
1:bf07137:         //
1:bf07137:         reg = expr.getArgument(0).evaluate(message);
1:bf07137: 
1:bf07137:         if (reg != null) {
1:bf07137:             // Convert to a string, if it's not already a string.
1:bf07137:             if (reg instanceof String)
1:bf07137:                 reg_str = (String) reg;
1:bf07137:             else
1:bf07137:                 reg_str = reg.toString();
1:bf07137: 
1:bf07137: 
1:bf07137:             //
1:bf07137:             // Evaluate the second argument (the candidate to match against the regular
1:bf07137:             //  expression).
1:bf07137:             //
1:bf07137:             cand = expr.getArgument(1).evaluate(message);
1:bf07137: 
1:bf07137:             if (cand != null) {
1:bf07137:                 // Convert to a string, if it's not already a string.
1:bf07137:                 if (cand instanceof String)
1:bf07137:                     cand_str = (String) cand;
1:bf07137:                 else
1:bf07137:                     cand_str = cand.toString();
1:bf07137: 
1:bf07137: 
1:bf07137:                 //
1:bf07137:                 // Obtain the compiled regular expression and match it.
1:bf07137:                 //
1:bf07137: 
1:bf07137:                 pat = getCompiledPattern(reg_str);
1:bf07137:                 match_eng = pat.matcher(cand_str);
1:bf07137: 
1:bf07137: 
1:bf07137:                 //
1:bf07137:                 // Return an indication of whether the regular expression matches at any
1:bf07137:                 //  point in the candidate (see Matcher#find()).
1:bf07137:                 //
1:bf07137: 
1:bf07137:                 return Boolean.valueOf(match_eng.find());
1:bf07137:             }
1:bf07137:         }
1:bf07137: 
1:bf07137:         return Boolean.FALSE;
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Retrieve a compiled pattern for the given pattern string.  A cache of recently used strings is maintained to
1:bf07137:      * improve performance.
1:bf07137:      *
1:bf07137:      * @param    reg_ex_str - the string specifying the regular expression.
1:bf07137:      * @return Pattern - compiled form of the regular expression.
1:bf07137:      */
1:bf07137: 
1:bf07137:     protected Pattern getCompiledPattern(String reg_ex_str) {
1:bf07137:         Pattern result;
1:bf07137: 
1:bf07137:         //
1:bf07137:         // Look for the compiled pattern in the cache.
1:bf07137:         //
1:bf07137: 
1:bf07137:         synchronized (compiledExprCache) {
1:bf07137:             result = compiledExprCache.get(reg_ex_str);
1:bf07137:         }
1:bf07137: 
1:bf07137: 
1:bf07137:         //
1:bf07137:         // If it was not found, compile it and add it to the cache.
1:bf07137:         //
1:bf07137: 
1:bf07137:         if (result == null) {
1:bf07137:             result = Pattern.compile(reg_ex_str);
1:bf07137: 
1:bf07137:             synchronized (compiledExprCache) {
1:bf07137:                 compiledExprCache.put(reg_ex_str, result);
1:bf07137:             }
1:bf07137:         }
1:bf07137: 
1:bf07137:         return result;
1:bf07137:     }
1:bf07137: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter.function;
1: 
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: import org.apache.activemq.filter.FunctionCallExpression;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.util.LRUCache;
1: 
1: /**
1:  * Filter function that matches a value against a regular expression.
1:  * <p/>
1:  * <p style="margin-left: 4em">
1:  * REGEX( 'A.B', 'A-B' )
1:  * </p>
1:  * <p/>
1:  * Note that the regular expression is not anchored; use the anchor characters, ^ and $, as-needed.  For example,
1:  * REGEX( 'AA', 'XAAX' ) evaluates to true while REGEX( '^AA$' , 'XAAX' ) evaluates to false.
1:  */
1: 
1: public class regexMatchFunction implements FilterFunction {
1:     protected static final LRUCache<String, Pattern> compiledExprCache = new LRUCache(100);
1: 
1:     /**
1:      * Check whether the given expression is a valid call of this function.  Two arguments are required.  When
1:      * evaluated, the arguments are converted to strings if they are not already strings.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return true - if the expression is valid; false - otherwise.
1:      */
1: 
1:     public boolean isValid(FunctionCallExpression expr) {
1:         if (expr.getNumArguments() == 2)
1:             return true;
1: 
1:         return false;
1:     }
1: 
1: 
1:     /**
1:      * Indicate that this Filter Function evaluates to a Boolean result.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return true - this function always evaluates to a Boolean result.
1:      */
1: 
1:     public boolean returnsBoolean(FunctionCallExpression expr) {
1:         return true;
1:     }
1: 
1:     /**
1:      * Evalutate the given expression, which consists of a call to this function, in the context given.  Returns
1:      * an indication of whether the second argument matches the regular expression in the first argument.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @param    message_ctx - the context in which the call is being evaluated.
1:      * @return true - if the value matches the regular expression; false - otherwise.
1:      */
1: 
1:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message)
1:             throws javax.jms.JMSException {
1:         Object reg;
1:         Object cand;
1:         String reg_str;
1:         String cand_str;
1:         Pattern pat;
1:         Matcher match_eng;
1: 
1:         //
1:         // Evaluate the first argument (the regular expression).
1:         //
1:         reg = expr.getArgument(0).evaluate(message);
1: 
1:         if (reg != null) {
1:             // Convert to a string, if it's not already a string.
1:             if (reg instanceof String)
1:                 reg_str = (String) reg;
1:             else
1:                 reg_str = reg.toString();
1: 
1: 
1:             //
1:             // Evaluate the second argument (the candidate to match against the regular
1:             //  expression).
1:             //
1:             cand = expr.getArgument(1).evaluate(message);
1: 
1:             if (cand != null) {
1:                 // Convert to a string, if it's not already a string.
1:                 if (cand instanceof String)
1:                     cand_str = (String) cand;
1:                 else
1:                     cand_str = cand.toString();
1: 
1: 
1:                 //
1:                 // Obtain the compiled regular expression and match it.
1:                 //
1: 
1:                 pat = getCompiledPattern(reg_str);
1:                 match_eng = pat.matcher(cand_str);
1: 
1: 
1:                 //
1:                 // Return an indication of whether the regular expression matches at any
1:                 //  point in the candidate (see Matcher#find()).
1:                 //
1: 
1:                 return Boolean.valueOf(match_eng.find());
1:             }
1:         }
1: 
1:         return Boolean.FALSE;
1:     }
1: 
1: 
1:     /**
1:      * Retrieve a compiled pattern for the given pattern string.  A cache of recently used strings is maintained to
1:      * improve performance.
1:      *
1:      * @param    reg_ex_str - the string specifying the regular expression.
1:      * @return Pattern - compiled form of the regular expression.
1:      */
1: 
1:     protected Pattern getCompiledPattern(String reg_ex_str) {
1:         Pattern result;
1: 
1:         //
1:         // Look for the compiled pattern in the cache.
1:         //
1: 
1:         synchronized (compiledExprCache) {
1:             result = compiledExprCache.get(reg_ex_str);
1:         }
1: 
1: 
1:         //
1:         // If it was not found, compile it and add it to the cache.
1:         //
1: 
1:         if (result == null) {
1:             result = Pattern.compile(reg_ex_str);
1: 
1:             synchronized (compiledExprCache) {
1:                 compiledExprCache.put(reg_ex_str, result);
1:             }
1:         }
1: 
1:         return result;
1:     }
1: }
============================================================================