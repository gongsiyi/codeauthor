1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
4:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
1:8733d17: 
1:ba1bd26: import static org.junit.Assert.assertEquals;
1:ba1bd26: import static org.junit.Assert.assertFalse;
1:ba1bd26: import static org.junit.Assert.assertNotNull;
1:ba1bd26: import static org.junit.Assert.assertNotSame;
1:ba1bd26: import static org.junit.Assert.assertNull;
1:ba1bd26: import static org.junit.Assert.assertTrue;
1:ba1bd26: 
1:8733d17: import java.io.ByteArrayInputStream;
1:8733d17: import java.io.ByteArrayOutputStream;
1:8733d17: import java.io.ObjectInputStream;
1:8733d17: import java.io.ObjectOutputStream;
1:8733d17: import java.io.PrintWriter;
1:40a7d3b: import java.io.Serializable;
1:40a7d3b: import java.util.HashSet;
1:540dd5c: 
1:40a7d3b: import javax.jms.Connection;
1:40a7d3b: import javax.jms.ConnectionFactory;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.QueueConnectionFactory;
1:adb49f5: import javax.jms.Session;
1:40a7d3b: import javax.jms.TopicConnectionFactory;
1:40a7d3b: import javax.resource.Referenceable;
1:40a7d3b: import javax.resource.ResourceException;
1:40a7d3b: import javax.resource.spi.ConnectionRequestInfo;
1:40a7d3b: import javax.resource.spi.ManagedConnection;
1:40a7d3b: import javax.resource.spi.ManagedConnectionFactory;
1:540dd5c: 
1:fd4bb60: import org.apache.activemq.ActiveMQConnectionFactory;
1:ba1bd26: import org.junit.Before;
1:ba1bd26: import org.junit.Test;
1:540dd5c: 
1:ba1bd26: public class ManagedConnectionFactoryTest {
1:540dd5c: 
1:a222b7b:     private static final String DEFAULT_HOST = "vm://localhost?broker.persistent=false&broker.schedulerSupport=false";
1:a222b7b:     private static final String REMOTE_HOST = "vm://remotehost?broker.persistent=false&broker.schedulerSupport=false";
1:40a7d3b:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:540dd5c: 
1:ba1bd26:     @Before
1:ba1bd26:     public void setUp() throws Exception {
1:40a7d3b:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
1:8733d17:         managedConnectionFactory.setServerUrl(DEFAULT_HOST);
1:8733d17:         managedConnectionFactory.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:8733d17:         managedConnectionFactory.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:9e13901:         managedConnectionFactory.setUseSessionArgs(false);
1:540dd5c:     }
1:540dd5c: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testConnectionFactoryAllocation() throws ResourceException, JMSException {
1:540dd5c: 
1:540dd5c:         // Make sure that the ConnectionFactory is asking the connection manager
1:ba1bd26:         // to allocate the connection.
1:540dd5c:         final boolean allocateRequested[] = new boolean[] {
1:540dd5c:             false
1:540dd5c:         };
1:ba1bd26: 
1:540dd5c:         Object cf = managedConnectionFactory.createConnectionFactory(new ConnectionManagerAdapter() {
1:540dd5c:             private static final long serialVersionUID = 1699499816530099939L;
1:540dd5c: 
1:ba1bd26:             @Override
1:540dd5c:             public Object allocateConnection(ManagedConnectionFactory connectionFactory, ConnectionRequestInfo info) throws ResourceException {
1:540dd5c:                 allocateRequested[0] = true;
1:540dd5c:                 return super.allocateConnection(connectionFactory, info);
1:540dd5c:             }
2:540dd5c:         });
1:540dd5c: 
1:40a7d3b:         // We should be getting a JMS Connection Factory.
1:540dd5c:         assertTrue(cf instanceof ConnectionFactory);
1:40a7d3b:         ConnectionFactory connectionFactory = (ConnectionFactory)cf;
1:540dd5c: 
1:540dd5c:         // Make sure that the connection factory is using the
1:540dd5c:         // ConnectionManager..
1:540dd5c:         Connection connection = connectionFactory.createConnection();
1:40a7d3b:         assertTrue(allocateRequested[0]);
1:540dd5c: 
1:40a7d3b:         // Make sure that the returned connection is of the expected type.
1:540dd5c:         assertTrue(connection != null);
1:540dd5c:         assertTrue(connection instanceof ManagedConnectionProxy);
1:540dd5c: 
1:adb49f5:         Session session = connection.createSession(true, 0);
1:adb49f5:         assertFalse("transacted attribute is ignored, only transacted with xa or local tx", session.getTransacted());
1:adb49f5: 
1:757a2f1:         connection.close();
1:540dd5c:     }
1:757a2f1: 
1:ba1bd26:     @Test(timeout = 60000)
1:9e13901:     public void testConnectionSessionArgs() throws ResourceException, JMSException {
1:9e13901:         ActiveMQConnectionRequestInfo connectionRequestInfo = new ActiveMQConnectionRequestInfo();
1:9e13901:         connectionRequestInfo.setServerUrl(DEFAULT_HOST);
1:9e13901:         connectionRequestInfo.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:9e13901:         connectionRequestInfo.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:9e13901:         connectionRequestInfo.setUseSessionArgs(true);
1:9e13901: 
1:9e13901:         ManagedConnection managedConnection = managedConnectionFactory.createManagedConnection(null, connectionRequestInfo);
1:9e13901:         Connection connection = (Connection) managedConnection.getConnection(null, connectionRequestInfo);
1:9e13901: 
1:9e13901:         Session session = connection.createSession(true, 0);
1:9e13901:         assertTrue("transacted attribute is respected", session.getTransacted());
1:9e13901:         connection.close();
1:9e13901:     }
1:9e13901: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testConnectionFactoryConnectionMatching() throws ResourceException, JMSException {
1:540dd5c: 
1:40a7d3b:         ActiveMQConnectionRequestInfo ri1 = new ActiveMQConnectionRequestInfo();
1:40a7d3b:         ri1.setServerUrl(DEFAULT_HOST);
1:40a7d3b:         ri1.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:40a7d3b:         ri1.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:8733d17: 
1:40a7d3b:         ActiveMQConnectionRequestInfo ri2 = new ActiveMQConnectionRequestInfo();
1:40a7d3b:         ri2.setServerUrl(REMOTE_HOST);
1:40a7d3b:         ri2.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:40a7d3b:         ri2.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:40a7d3b:         assertNotSame(ri1, ri2);
1:540dd5c: 
1:40a7d3b:         ManagedConnection connection1 = managedConnectionFactory.createManagedConnection(null, ri1);
1:540dd5c:         ManagedConnection connection2 = managedConnectionFactory.createManagedConnection(null, ri2);
1:540dd5c:         assertTrue(connection1 != connection2);
1:540dd5c: 
1:540dd5c:         HashSet<ManagedConnection> set = new HashSet<ManagedConnection>();
1:40a7d3b:         set.add(connection1);
1:40a7d3b:         set.add(connection2);
1:540dd5c: 
1:40a7d3b:         // Can we match for the first connection?
1:40a7d3b:         ActiveMQConnectionRequestInfo ri3 = ri1.copy();
1:540dd5c:         assertTrue(ri1 != ri3 && ri1.equals(ri3));
1:540dd5c:         ManagedConnection test = managedConnectionFactory.matchManagedConnections(set, null, ri3);
1:540dd5c:         assertTrue(connection1 == test);
1:8733d17: 
1:40a7d3b:         // Can we match for the second connection?
1:40a7d3b:         ri3 = ri2.copy();
1:540dd5c:         assertTrue(ri2 != ri3 && ri2.equals(ri3));
1:540dd5c:         test = managedConnectionFactory.matchManagedConnections(set, null, ri2);
1:540dd5c:         assertTrue(connection2 == test);
1:540dd5c: 
1:757a2f1:         for (ManagedConnection managedConnection : set) {
1:757a2f1:             managedConnection.destroy();
1:757a2f1:         }
1:540dd5c:     }
1:540dd5c: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testConnectionFactoryIsSerializableAndReferenceable() throws ResourceException, JMSException {
1:40a7d3b:         Object cf = managedConnectionFactory.createConnectionFactory(new ConnectionManagerAdapter());
1:540dd5c:         assertTrue(cf != null);
1:540dd5c:         assertTrue(cf instanceof Serializable);
1:540dd5c:         assertTrue(cf instanceof Referenceable);
10:40a7d3b:     }
1:8733d17: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testImplementsQueueAndTopicConnectionFactory() throws Exception {
1:40a7d3b:         Object cf = managedConnectionFactory.createConnectionFactory(new ConnectionManagerAdapter());
1:540dd5c:         assertTrue(cf instanceof QueueConnectionFactory);
1:540dd5c:         assertTrue(cf instanceof TopicConnectionFactory);
1:40a7d3b:     }
1:8733d17: 
1:ba1bd26:     @Test(timeout = 60000)
1:8733d17:     public void testSerializability() throws Exception {
1:ba1bd26: 
1:8733d17:         managedConnectionFactory.setLogWriter(new PrintWriter(new ByteArrayOutputStream()));
1:ba1bd26: 
1:8733d17:         ByteArrayOutputStream bos = new ByteArrayOutputStream();
1:8733d17:         ObjectOutputStream oos = new ObjectOutputStream(bos);
1:8733d17:         oos.writeObject(managedConnectionFactory);
1:8733d17:         oos.close();
1:8733d17:         byte[] byteArray = bos.toByteArray();
1:ba1bd26: 
1:8733d17:         ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(byteArray));
1:8733d17:         ActiveMQManagedConnectionFactory deserializedFactory = (ActiveMQManagedConnectionFactory) ois.readObject();
1:8733d17:         ois.close();
1:ba1bd26: 
1:8733d17:         assertNull(
1:ba1bd26:                 "[logWriter] property of deserialized ActiveMQManagedConnectionFactory is not null",
1:8733d17:                 deserializedFactory.getLogWriter());
1:8733d17:         assertNotNull(
1:ba1bd26:                 "ConnectionRequestInfo of deserialized ActiveMQManagedConnectionFactory is null",
1:8733d17:                 deserializedFactory.getInfo());
1:8733d17:         assertEquals(
1:ba1bd26:                 "[serverUrl] property of deserialized ConnectionRequestInfo object is not [" + DEFAULT_HOST + "]",
1:8733d17:                 DEFAULT_HOST,
1:8733d17:                 deserializedFactory.getInfo().getServerUrl());
1:8733d17:         assertNotNull(
1:8733d17:                 "Log instance of deserialized ActiveMQManagedConnectionFactory is null",
1:8733d17:                 deserializedFactory.log);
1:ba1bd26:     }
1:8733d17: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNotSame;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.junit.Test;
1: public class ManagedConnectionFactoryTest {
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         // to allocate the connection.
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
1: 
1: 
1: 
1: 
1:                 "[logWriter] property of deserialized ActiveMQManagedConnectionFactory is not null",
1:                 "ConnectionRequestInfo of deserialized ActiveMQManagedConnectionFactory is null",
1:                 "[serverUrl] property of deserialized ConnectionRequestInfo object is not [" + DEFAULT_HOST + "]",
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:9e13901
/////////////////////////////////////////////////////////////////////////
1:         managedConnectionFactory.setUseSessionArgs(false);
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectionSessionArgs() throws ResourceException, JMSException {
1:         ActiveMQConnectionRequestInfo connectionRequestInfo = new ActiveMQConnectionRequestInfo();
1:         connectionRequestInfo.setServerUrl(DEFAULT_HOST);
1:         connectionRequestInfo.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:         connectionRequestInfo.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:         connectionRequestInfo.setUseSessionArgs(true);
1: 
1:         ManagedConnection managedConnection = managedConnectionFactory.createManagedConnection(null, connectionRequestInfo);
1:         Connection connection = (Connection) managedConnection.getConnection(null, connectionRequestInfo);
1: 
1:         Session session = connection.createSession(true, 0);
1:         assertTrue("transacted attribute is respected", session.getTransacted());
1:         connection.close();
1:     }
1: 
commit:adb49f5
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(true, 0);
1:         assertFalse("transacted attribute is ignored, only transacted with xa or local tx", session.getTransacted());
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:757a2f1
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (ManagedConnection managedConnection : set) {
1:             managedConnection.destroy();
1:         }
commit:a222b7b
/////////////////////////////////////////////////////////////////////////
1:     private static final String DEFAULT_HOST = "vm://localhost?broker.persistent=false&broker.schedulerSupport=false";
1:     private static final String REMOTE_HOST = "vm://remotehost?broker.persistent=false&broker.schedulerSupport=false";
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
0:         adapter.setServerUrl(DEFAULT_HOST);
0:         adapter.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
0:         adapter.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
0:         adapter.start(new BootstrapContext() {
0:             public WorkManager getWorkManager() {
0:                 return null;
1:             }
1: 
0:             public XATerminator getXATerminator() {
0:                 return null;
1:             }
1: 
0:             public Timer createTimer() throws UnavailableException {
0:                 return null;
1:             }
1:         });
1: 
1: 
1: 
1:         // Make sure that the ConnectionFactory is asking the connection manager
0:         // to
0:         // allocate the connection.
1:         final boolean allocateRequested[] = new boolean[] {
1:             false
1:         };
1:         Object cf = managedConnectionFactory.createConnectionFactory(new ConnectionManagerAdapter() {
1:             private static final long serialVersionUID = 1699499816530099939L;
1: 
1:             public Object allocateConnection(ManagedConnectionFactory connectionFactory, ConnectionRequestInfo info) throws ResourceException {
1:                 allocateRequested[0] = true;
1:                 return super.allocateConnection(connectionFactory, info);
1:             }
1:         });
1: 
1:         assertTrue(cf instanceof ConnectionFactory);
1: 
1:         // Make sure that the connection factory is using the
1:         // ConnectionManager..
1:         Connection connection = connectionFactory.createConnection();
1: 
1:         assertTrue(connection != null);
1:         assertTrue(connection instanceof ManagedConnectionProxy);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         ManagedConnection connection2 = managedConnectionFactory.createManagedConnection(null, ri2);
1:         assertTrue(connection1 != connection2);
1: 
1:         HashSet<ManagedConnection> set = new HashSet<ManagedConnection>();
1: 
1:         assertTrue(ri1 != ri3 && ri1.equals(ri3));
1:         ManagedConnection test = managedConnectionFactory.matchManagedConnections(set, null, ri3);
1:         assertTrue(connection1 == test);
1:         assertTrue(ri2 != ri3 && ri2.equals(ri3));
1:         test = managedConnectionFactory.matchManagedConnections(set, null, ri2);
1:         assertTrue(connection2 == test);
1: 
1: 
1:         assertTrue(cf != null);
1:         assertTrue(cf instanceof Serializable);
1:         assertTrue(cf instanceof Referenceable);
1:         assertTrue(cf instanceof QueueConnectionFactory);
1:         assertTrue(cf instanceof TopicConnectionFactory);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.ra.ActiveMQConnectionRequestInfo;
0: import org.apache.activemq.ra.ActiveMQManagedConnectionFactory;
0: import org.apache.activemq.ra.ActiveMQResourceAdapter;
0: import org.apache.activemq.ra.ManagedConnectionProxy;
author:Robert Davies
-------------------------------------------------------------------------------
commit:8733d17
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: import java.io.PrintWriter;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         managedConnectionFactory.setServerUrl(DEFAULT_HOST);
1:         managedConnectionFactory.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:         managedConnectionFactory.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
/////////////////////////////////////////////////////////////////////////
1:     public void testSerializability() throws Exception {
1:         
1:         managedConnectionFactory.setLogWriter(new PrintWriter(new ByteArrayOutputStream()));
1:         
1:         ByteArrayOutputStream bos = new ByteArrayOutputStream();
1:         ObjectOutputStream oos = new ObjectOutputStream(bos);
1:         oos.writeObject(managedConnectionFactory);
1:         oos.close();
1:         byte[] byteArray = bos.toByteArray();
1:         
1:         ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(byteArray));
1:         ActiveMQManagedConnectionFactory deserializedFactory = (ActiveMQManagedConnectionFactory) ois.readObject();
1:         ois.close();
1:         
1:         assertNull(
0:                 "[logWriter] property of deserialized ActiveMQManagedConnectionFactory is not null", 
1:                 deserializedFactory.getLogWriter());
1:         assertNotNull(
0:                 "ConnectionRequestInfo of deserialized ActiveMQManagedConnectionFactory is null", 
1:                 deserializedFactory.getInfo());
1:         assertEquals(
0:                 "[serverUrl] property of deserialized ConnectionRequestInfo object is not [" + DEFAULT_HOST + "]", 
1:                 DEFAULT_HOST,
1:                 deserializedFactory.getInfo().getServerUrl());
1:         assertNotNull(
1:                 "Log instance of deserialized ActiveMQManagedConnectionFactory is null",
1:                 deserializedFactory.log);
1: }
1: 
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /** 
0:  * 
0:  * Copyright 2004 Hiram Chirino
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
0: 
1: import java.io.Serializable;
1: import java.util.HashSet;
0: import java.util.Timer;
0: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.QueueConnectionFactory;
1: import javax.jms.TopicConnectionFactory;
1: import javax.resource.Referenceable;
1: import javax.resource.ResourceException;
0: import javax.resource.spi.BootstrapContext;
1: import javax.resource.spi.ConnectionRequestInfo;
1: import javax.resource.spi.ManagedConnection;
1: import javax.resource.spi.ManagedConnectionFactory;
0: import javax.resource.spi.UnavailableException;
0: import javax.resource.spi.XATerminator;
0: import javax.resource.spi.work.WorkManager;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.activemq.ActiveMQConnectionFactory;
0: 
0: 
0: /**
0:  * @version $Revision$
0:  */
0: public class ManagedConnectionFactoryTest extends TestCase {
0:     
0:     private static final String DEFAULT_HOST = "vm://localhost?broker.persistent=false";
0:     private static final String REMOTE_HOST = "vm://remotehost?broker.persistent=false";
1:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
0:     
0:     /**
0:      * @see junit.framework.TestCase#setUp()
0:      */
0:     protected void setUp() throws Exception {
0:         
0:     	ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter(); 
0:     	adapter.setServerUrl(DEFAULT_HOST);
0:     	adapter.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
0:     	adapter.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
0:     	adapter.start(new BootstrapContext(){
0: 			public WorkManager getWorkManager() {
0: 				return null;
1: 			}
0: 			public XATerminator getXATerminator() {
0: 				return null;
1: 			}
0: 
0: 			public Timer createTimer() throws UnavailableException {
0: 				return null;
1: 			}
0: 		});
0:     	
1:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
0:         managedConnectionFactory.setResourceAdapter(adapter);
0:         
1:     }
0:     
1:     public void testConnectionFactoryAllocation() throws ResourceException, JMSException {
0:         
0:         // Make sure that the ConnectionFactory is asking the connection manager to
0:         // allocate the connection.
0:         final boolean allocateRequested[] = new boolean[]{false};
0:         Object cf = managedConnectionFactory.createConnectionFactory(
0:             new ConnectionManagerAdapter() {
0:                 private static final long serialVersionUID = 1699499816530099939L;
0: 
0:                 public Object allocateConnection(ManagedConnectionFactory connectionFactory, ConnectionRequestInfo info)
0:                         throws ResourceException {
0:                     allocateRequested[0]=true;
0:                     return super.allocateConnection(connectionFactory, info);
1:                 }
1:             }    
0:         );
0:         
1:         // We should be getting a JMS Connection Factory.
0:         assertTrue( cf instanceof ConnectionFactory );
1:         ConnectionFactory connectionFactory = (ConnectionFactory)cf;
0:         
0:         // Make sure that the connection factory is using the ConnectionManager..
0:         Connection connection = connectionFactory.createConnection();        
1:         assertTrue(allocateRequested[0]);
0:         
1:         // Make sure that the returned connection is of the expected type.
0:         assertTrue( connection!=null );
0:         assertTrue( connection instanceof ManagedConnectionProxy );
0:         
1:     }
0: 
0:     
1:     public void testConnectionFactoryConnectionMatching() throws ResourceException, JMSException {
0:         
1:         ActiveMQConnectionRequestInfo ri1 = new ActiveMQConnectionRequestInfo();
1:         ri1.setServerUrl(DEFAULT_HOST);
1:         ri1.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:         ri1.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
0: 
1:         ActiveMQConnectionRequestInfo ri2 = new ActiveMQConnectionRequestInfo();
1:         ri2.setServerUrl(REMOTE_HOST);
1:         ri2.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:         ri2.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:         assertNotSame(ri1, ri2);
0:         
1:         ManagedConnection connection1 = managedConnectionFactory.createManagedConnection(null, ri1);
0:         ManagedConnection connection2 = managedConnectionFactory.createManagedConnection(null, ri2);        
0:         assertTrue(connection1!=connection2);
0:         
0:         HashSet set = new HashSet();
1:         set.add(connection1);
1:         set.add(connection2);
0:         
1:         // Can we match for the first connection?
1:         ActiveMQConnectionRequestInfo ri3 = ri1.copy();
0:         assertTrue( ri1!=ri3 && ri1.equals(ri3) );
0:         ManagedConnection test = managedConnectionFactory.matchManagedConnections(set,null, ri3);
0:         assertTrue( connection1==test );
0: 
1:         // Can we match for the second connection?
1:         ri3 = ri2.copy();
0:         assertTrue( ri2!=ri3 && ri2.equals(ri3) );
0:         test = managedConnectionFactory.matchManagedConnections(set,null, ri2);
0:         assertTrue( connection2==test );
0:         
1:     }
0:     
1:     public void testConnectionFactoryIsSerializableAndReferenceable() throws ResourceException, JMSException {
1:         Object cf = managedConnectionFactory.createConnectionFactory(new ConnectionManagerAdapter());
0:         assertTrue( cf!=null );
0:         assertTrue( cf instanceof Serializable );
0:         assertTrue( cf instanceof Referenceable );
1:     }
0: 
1:     public void testImplementsQueueAndTopicConnectionFactory() throws Exception {
1:         Object cf = managedConnectionFactory.createConnectionFactory(new ConnectionManagerAdapter());
0:         assertTrue( cf instanceof QueueConnectionFactory );
0:         assertTrue( cf instanceof TopicConnectionFactory );
1:     }
0: 
1: }
============================================================================