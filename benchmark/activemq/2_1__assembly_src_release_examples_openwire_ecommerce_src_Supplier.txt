1:6707ac6: /*
1:6707ac6:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:6707ac6:  *  contributor license agreements.  See the NOTICE file distributed with
1:6707ac6:  *  this work for additional information regarding copyright ownership.
1:6707ac6:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:6707ac6:  *  (the "License"); you may not use this file except in compliance with
1:6707ac6:  *  the License.  You may obtain a copy of the License at
1:6707ac6:  *
1:6707ac6:  *  http://www.apache.org/licenses/LICENSE-2.0
1:6707ac6:  *
1:6707ac6:  *  Unless required by applicable law or agreed to in writing, software
1:6707ac6:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:6707ac6:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6707ac6:  *  See the License for the specific language governing permissions and
1:6707ac6:  *  limitations under the License.
1:6707ac6:  */
1:6707ac6: import java.util.Random;
1:6707ac6: 
1:6707ac6: import javax.jms.Connection;
1:6707ac6: import javax.jms.Destination;
1:6707ac6: import javax.jms.JMSException;
1:6707ac6: import javax.jms.MapMessage;
1:6707ac6: import javax.jms.Message;
1:6707ac6: import javax.jms.MessageConsumer;
1:6707ac6: import javax.jms.MessageProducer;
1:6707ac6: import javax.jms.Session;
1:6707ac6: 
1:6707ac6: import org.apache.activemq.ActiveMQConnectionFactory;
1:6707ac6: 
1:6707ac6: /**
1:6707ac6:  * The Supplier synchronously receives the order from the Vendor and
1:6707ac6:  * randomly responds with either the number ordered, or some lower
1:6707ac6:  * quantity. 
1:6707ac6:  */
1:6707ac6: public class Supplier implements Runnable {
1:6707ac6: 	private String url;
1:6707ac6: 	private String user;
1:6707ac6: 	private String password;
1:6707ac6: 	private final String ITEM;
1:6707ac6: 	private final String QUEUE;
1:6707ac6: 	
1:6707ac6: 	public Supplier(String item, String queue, String url, String user, String password) {
1:6707ac6: 		this.url = url;
1:6707ac6: 		this.user = user;
1:6707ac6: 		this.password = password;
1:6707ac6: 		this.ITEM = item;
1:6707ac6: 		this.QUEUE = queue;
1:6707ac6: 	}
1:6707ac6: 	
1:6707ac6: 	public void run() {
1:6707ac6: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);
1:6707ac6: 		Session session = null;
1:6707ac6: 		Destination orderQueue;
1:6707ac6: 		try {
1:6707ac6: 			Connection connection = connectionFactory.createConnection();
1:6707ac6: 
1:6707ac6: 			session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:6707ac6: 			orderQueue = session.createQueue(QUEUE);
1:6707ac6: 			MessageConsumer consumer = session.createConsumer(orderQueue);
1:6707ac6: 			
1:6707ac6: 			connection.start();
1:6707ac6: 			
1:6707ac6: 			while (true) {
1:6707ac6: 				Message message = consumer.receive();
1:6707ac6: 				MessageProducer producer = session.createProducer(message.getJMSReplyTo());
1:6707ac6: 				MapMessage orderMessage;
1:6707ac6: 				if (message instanceof MapMessage) {
1:6707ac6: 					orderMessage = (MapMessage) message;
1:6707ac6: 				} else {
1:6707ac6: 					// End of Stream
1:6707ac6: 					producer.send(session.createMessage());
1:6707ac6: 					session.commit();
1:6707ac6: 					producer.close();
1:6707ac6: 					break;
1:6707ac6: 				}
1:6707ac6: 				
1:6707ac6: 				int quantity = orderMessage.getInt("Quantity");
1:6707ac6: 				System.out.println(ITEM + " Supplier: Vendor ordered " + quantity + " " + orderMessage.getString("Item"));
1:6707ac6: 				
1:6707ac6: 				MapMessage outMessage = session.createMapMessage();
1:6707ac6: 				outMessage.setInt("VendorOrderNumber", orderMessage.getInt("VendorOrderNumber"));
1:6707ac6: 				outMessage.setString("Item", ITEM);
1:6707ac6: 				
1:6707ac6: 				quantity = Math.min(
1:6707ac6: 						orderMessage.getInt("Quantity"),
1:6707ac6: 						new Random().nextInt(orderMessage.getInt("Quantity") * 10));
1:6707ac6: 				outMessage.setInt("Quantity", quantity);
1:6707ac6: 				
1:6707ac6: 				producer.send(outMessage);
1:6707ac6: 				System.out.println(ITEM + " Supplier: Sent " + quantity + " " + ITEM + "(s)");
1:6707ac6: 				session.commit();
1:6707ac6: 				System.out.println(ITEM + " Supplier: committed transaction");
1:6707ac6: 				producer.close();
1:6707ac6: 			}
1:6707ac6: 			connection.close();
1:6707ac6: 		} catch (JMSException e) {
1:6707ac6: 			e.printStackTrace();
1:6707ac6: 		}
1:6707ac6: 	}
1:6707ac6: 	
1:6707ac6: 	public static void main(String[] args) {
1:6707ac6: 		String url = "tcp://localhost:61616";
1:6707ac6: 		String user = null;
1:6707ac6: 		String password = null;
1:6707ac6: 		String item = "HardDrive";
1:6707ac6: 		
1:6707ac6: 		if (args.length >= 1) {
1:6707ac6: 			item = args[0];
1:6707ac6: 		}
1:6707ac6: 		String queue;
1:6707ac6: 		if ("HardDrive".equals(item)) {
1:6707ac6: 			queue = "StorageOrderQueue";
1:6707ac6: 		} else if ("Monitor".equals(item)) {
1:6707ac6: 			queue = "MonitorOrderQueue";
1:6707ac6: 		} else {
1:6707ac6: 			throw new IllegalArgumentException("Item must be either HardDrive or Monitor");
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		if (args.length >= 2) {
1:6707ac6: 			url = args[1];
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		if (args.length >= 3) {
1:6707ac6: 			user = args[2];
1:6707ac6: 		}
1:6707ac6: 
1:6707ac6: 		if (args.length >= 4) {
1:6707ac6: 			password = args[3];
1:6707ac6: 		}
1:6707ac6: 		
1:6707ac6: 		Supplier s = new Supplier(item, queue, url, user, password);
1:6707ac6: 		
1:6707ac6: 		new Thread(s, "Supplier " + item).start();
1:6707ac6: 	}
1:6707ac6: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
author:Robert Davies
-------------------------------------------------------------------------------
commit:6707ac6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: import java.util.Random;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: /**
1:  * The Supplier synchronously receives the order from the Vendor and
1:  * randomly responds with either the number ordered, or some lower
1:  * quantity. 
1:  */
1: public class Supplier implements Runnable {
1: 	private String url;
1: 	private String user;
1: 	private String password;
1: 	private final String ITEM;
1: 	private final String QUEUE;
1: 	
1: 	public Supplier(String item, String queue, String url, String user, String password) {
1: 		this.url = url;
1: 		this.user = user;
1: 		this.password = password;
1: 		this.ITEM = item;
1: 		this.QUEUE = queue;
1: 	}
1: 	
1: 	public void run() {
1: 		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);
1: 		Session session = null;
1: 		Destination orderQueue;
1: 		try {
1: 			Connection connection = connectionFactory.createConnection();
1: 
1: 			session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 			orderQueue = session.createQueue(QUEUE);
1: 			MessageConsumer consumer = session.createConsumer(orderQueue);
1: 			
1: 			connection.start();
1: 			
1: 			while (true) {
1: 				Message message = consumer.receive();
1: 				MessageProducer producer = session.createProducer(message.getJMSReplyTo());
1: 				MapMessage orderMessage;
1: 				if (message instanceof MapMessage) {
1: 					orderMessage = (MapMessage) message;
1: 				} else {
1: 					// End of Stream
1: 					producer.send(session.createMessage());
1: 					session.commit();
1: 					producer.close();
1: 					break;
1: 				}
1: 				
1: 				int quantity = orderMessage.getInt("Quantity");
1: 				System.out.println(ITEM + " Supplier: Vendor ordered " + quantity + " " + orderMessage.getString("Item"));
1: 				
1: 				MapMessage outMessage = session.createMapMessage();
1: 				outMessage.setInt("VendorOrderNumber", orderMessage.getInt("VendorOrderNumber"));
1: 				outMessage.setString("Item", ITEM);
1: 				
1: 				quantity = Math.min(
1: 						orderMessage.getInt("Quantity"),
1: 						new Random().nextInt(orderMessage.getInt("Quantity") * 10));
1: 				outMessage.setInt("Quantity", quantity);
1: 				
1: 				producer.send(outMessage);
1: 				System.out.println(ITEM + " Supplier: Sent " + quantity + " " + ITEM + "(s)");
1: 				session.commit();
1: 				System.out.println(ITEM + " Supplier: committed transaction");
1: 				producer.close();
1: 			}
1: 			connection.close();
1: 		} catch (JMSException e) {
1: 			e.printStackTrace();
1: 		}
1: 	}
1: 	
1: 	public static void main(String[] args) {
1: 		String url = "tcp://localhost:61616";
1: 		String user = null;
1: 		String password = null;
1: 		String item = "HardDrive";
1: 		
1: 		if (args.length >= 1) {
1: 			item = args[0];
1: 		}
1: 		String queue;
1: 		if ("HardDrive".equals(item)) {
1: 			queue = "StorageOrderQueue";
1: 		} else if ("Monitor".equals(item)) {
1: 			queue = "MonitorOrderQueue";
1: 		} else {
1: 			throw new IllegalArgumentException("Item must be either HardDrive or Monitor");
1: 		}
1: 		
1: 		if (args.length >= 2) {
1: 			url = args[1];
1: 		}
1: 		
1: 		if (args.length >= 3) {
1: 			user = args[2];
1: 		}
1: 
1: 		if (args.length >= 4) {
1: 			password = args[3];
1: 		}
1: 		
1: 		Supplier s = new Supplier(item, queue, url, user, password);
1: 		
1: 		new Thread(s, "Supplier " + item).start();
1: 	}
1: }
============================================================================