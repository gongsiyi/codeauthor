1:2ecf41d: /**
1:2ecf41d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2ecf41d:  * contributor license agreements.  See the NOTICE file distributed with
1:2ecf41d:  * this work for additional information regarding copyright ownership.
1:2ecf41d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2ecf41d:  * (the "License"); you may not use this file except in compliance with
1:2ecf41d:  * the License.  You may obtain a copy of the License at
1:2ecf41d:  *
1:2ecf41d:  * http://www.apache.org/licenses/LICENSE-2.0
1:2ecf41d:  *
1:2ecf41d:  * Unless required by applicable law or agreed to in writing, software
1:2ecf41d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ecf41d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ecf41d:  * See the License for the specific language governing permissions and
1:2ecf41d:  * limitations under the License.
1:2ecf41d:  */
1:2ecf41d: package example.queue.exclusive;
1:2ecf41d: 
1:2ecf41d: import org.apache.activemq.ActiveMQConnectionFactory;
1:2ecf41d: 
1:2ecf41d: import javax.jms.*;
1:2ecf41d: 
1:2ecf41d: /**
1:2ecf41d:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:2ecf41d:  */
1:2ecf41d: public class Producer {
1:2ecf41d:     private static final String BROKER_URL = "tcp://localhost:61616";
1:2ecf41d:     private static final Boolean NON_TRANSACTED = false;
1:2ecf41d:     private static final int NUM_MESSAGES_TO_SEND = 100;
1:2ecf41d:     private static final long DELAY = 100;
1:2ecf41d: 
1:2ecf41d:     public static void main(String[] args) {
1:2ecf41d:         String url = BROKER_URL;
1:2ecf41d:         if (args.length > 0) {
1:2ecf41d:             url = args[0].trim();
1:2ecf41d:         }
1:2ecf41d:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "password", url);
1:2ecf41d:         Connection connection = null;
1:2ecf41d: 
1:2ecf41d:         try {
1:2ecf41d: 
1:2ecf41d:             connection = connectionFactory.createConnection();
1:2ecf41d:             connection.start();
1:2ecf41d: 
1:2ecf41d:             Session session = connection.createSession(NON_TRANSACTED, Session.AUTO_ACKNOWLEDGE);
1:2ecf41d:             Destination destination = session.createQueue("test-queue");
1:2ecf41d:             MessageProducer producer = session.createProducer(destination);
1:2ecf41d: 
1:2ecf41d:             for (int i = 0; i < NUM_MESSAGES_TO_SEND; i++) {
1:2ecf41d:                 TextMessage message = session.createTextMessage("Message #" + i);
1:2ecf41d:                 System.out.println("Sending message #" + i);
1:2ecf41d:                 producer.send(message);
1:2ecf41d:                 Thread.sleep(DELAY);
1:2ecf41d:             }
1:2ecf41d: 
1:2ecf41d:             producer.close();
1:2ecf41d:             session.close();
1:2ecf41d: 
1:2ecf41d:         } catch (Exception e) {
1:2ecf41d:             System.out.println("Caught exception!");
1:2ecf41d:         }
1:2ecf41d:         finally {
1:2ecf41d:             if (connection != null) {
1:2ecf41d:                 try {
1:2ecf41d:                     connection.close();
1:2ecf41d:                 } catch (JMSException e) {
1:2ecf41d:                     System.out.println("Could not close an open connection...");
1:2ecf41d:                 }
1:2ecf41d:             }
1:2ecf41d:         }
1:2ecf41d:     }
1:2ecf41d: 
1:2ecf41d: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package example.queue.exclusive;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: import javax.jms.*;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class Producer {
1:     private static final String BROKER_URL = "tcp://localhost:61616";
1:     private static final Boolean NON_TRANSACTED = false;
1:     private static final int NUM_MESSAGES_TO_SEND = 100;
1:     private static final long DELAY = 100;
1: 
1:     public static void main(String[] args) {
1:         String url = BROKER_URL;
1:         if (args.length > 0) {
1:             url = args[0].trim();
1:         }
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "password", url);
1:         Connection connection = null;
1: 
1:         try {
1: 
1:             connection = connectionFactory.createConnection();
1:             connection.start();
1: 
1:             Session session = connection.createSession(NON_TRANSACTED, Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createQueue("test-queue");
1:             MessageProducer producer = session.createProducer(destination);
1: 
1:             for (int i = 0; i < NUM_MESSAGES_TO_SEND; i++) {
1:                 TextMessage message = session.createTextMessage("Message #" + i);
1:                 System.out.println("Sending message #" + i);
1:                 producer.send(message);
1:                 Thread.sleep(DELAY);
1:             }
1: 
1:             producer.close();
1:             session.close();
1: 
1:         } catch (Exception e) {
1:             System.out.println("Caught exception!");
1:         }
1:         finally {
1:             if (connection != null) {
1:                 try {
1:                     connection.close();
1:                 } catch (JMSException e) {
1:                     System.out.println("Could not close an open connection...");
1:                 }
1:             }
1:         }
1:     }
1: 
1: }
============================================================================