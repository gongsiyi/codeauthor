1:075903c: /**
1:075903c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:075903c:  * contributor license agreements.  See the NOTICE file distributed with
1:075903c:  * this work for additional information regarding copyright ownership.
1:075903c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:075903c:  * (the "License"); you may not use this file except in compliance with
1:075903c:  * the License.  You may obtain a copy of the License at
1:075903c:  *
1:075903c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:075903c:  *
1:075903c:  * Unless required by applicable law or agreed to in writing, software
1:075903c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:075903c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:075903c:  * See the License for the specific language governing permissions and
1:075903c:  * limitations under the License.
1:075903c:  */
1:075903c: package org.apache.activemq.broker.jmx;
5:075903c: 
1:075903c: import java.util.List;
1:075903c: 
1:075903c: import javax.jms.BytesMessage;
1:075903c: import javax.jms.Connection;
1:075903c: import javax.jms.ConnectionFactory;
1:075903c: import javax.jms.DeliveryMode;
1:075903c: import javax.jms.MessageProducer;
1:075903c: import javax.jms.Session;
1:075903c: import javax.management.MBeanServer;
1:075903c: import javax.management.MBeanServerInvocationHandler;
1:075903c: import javax.management.MalformedObjectNameException;
1:075903c: import javax.management.ObjectName;
1:541ed8c: 
1:075903c: import org.apache.activemq.ActiveMQConnectionFactory;
1:075903c: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:075903c: import org.apache.activemq.broker.BrokerService;
1:075903c: import org.slf4j.Logger;
1:075903c: import org.slf4j.LoggerFactory;
1:075903c: 
1:075903c: public class HealthViewMBeanTest extends EmbeddedBrokerTestSupport {
1:075903c:     private static final Logger LOG = LoggerFactory.getLogger(MBeanTest.class);
1:075903c:     protected MBeanServer mbeanServer;
1:075903c:     protected String domain = "org.apache.activemq";
1:075903c: 
1:541ed8c:     @Override
1:075903c:     protected void setUp() throws Exception {
1:075903c:         bindAddress = "tcp://localhost:0";
1:075903c:         useTopic = false;
1:075903c:         super.setUp();
1:075903c:         mbeanServer = broker.getManagementContext().getMBeanServer();
2:075903c:     }
1:075903c: 
1:541ed8c:     @Override
1:075903c:     protected void tearDown() throws Exception {
1:075903c:         super.tearDown();
1:075903c:     }
1:075903c: 
1:075903c:     @Override
1:075903c:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:075903c:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:075903c:     }
1:075903c: 
1:541ed8c:     @Override
1:075903c:     protected BrokerService createBroker() throws Exception {
1:075903c:         BrokerService answer = new BrokerService();
1:075903c:         answer.setPersistent(true);
1:075903c:         answer.setDeleteAllMessagesOnStartup(true);
1:031611e:         answer.getSystemUsage().getMemoryUsage().setLimit(1024 * 1024 * 64);
1:075903c:         answer.getSystemUsage().getTempUsage().setLimit(1024 * 1024 * 64);
1:0309eb3:         answer.getSystemUsage().getStoreUsage().setLimit(1024 * 1024 * 64);
1:4f57744:         answer.getSystemUsage().getJobSchedulerUsage().setLimit(1024 * 1024 * 64);
1:075903c:         answer.setUseJmx(true);
1:541ed8c:         answer.setSchedulerSupport(true);
1:075903c: 
1:075903c:         // allow options to be visible via jmx
1:075903c: 
1:075903c:         answer.addConnector(bindAddress);
1:075903c:         return answer;
1:075903c:     }
1:075903c: 
1:075903c:     public void testHealthView() throws Exception{
1:0309eb3:         Connection connection = connectionFactory.createConnection();
1:075903c: 
1:0309eb3:         connection.start();
1:0309eb3:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0309eb3:         destination = createDestination();
1:0309eb3:         MessageProducer producer = session.createProducer(destination);
1:0309eb3:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:075903c: 
1:0309eb3:         for (int i = 0; i < 60; i++) {
1:0309eb3:             BytesMessage message = session.createBytesMessage();
1:0309eb3:             message.writeBytes(new byte[1024 *1024]);
1:0309eb3:             producer.send(message);
1:0309eb3:         }
1:541ed8c: 
1:0309eb3:         Thread.sleep(1000);
1:075903c: 
1:cb7b657:         String objectNameStr = broker.getBrokerObjectName().toString();
1:cb7b657:         objectNameStr += ",service=Health";
1:0309eb3:         ObjectName brokerName = assertRegisteredObjectName(objectNameStr);
1:075903c:         HealthViewMBean health =  MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, HealthViewMBean.class, true);
1:075903c:         List<HealthStatus> list = health.healthList();
1:075903c: 
1:0309eb3:         for (HealthStatus status : list) {
1:0309eb3:             LOG.info("Health status: {}", status);
1:0309eb3:         }
1:0309eb3: 
1:0309eb3:         assertEquals(2, list.size());
1:19fd084: 
1:19fd084:         String healthStatus = health.healthStatus();
1:19fd084:         String currentStatus = health.getCurrentStatus();
1:19fd084: 
1:19fd084:         assertEquals(healthStatus, currentStatus);
1:075903c:     }
1:075903c: 
1:075903c:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:075903c:         ObjectName objectName = new ObjectName(name);
1:075903c:         if (mbeanServer.isRegistered(objectName)) {
1:075903c:             LOG.info("Bean Registered: " + objectName);
1:075903c:         } else {
1:075903c:             fail("Could not find MBean!: " + objectName);
1:075903c:         }
1:075903c:         return objectName;
1:075903c:     }
1:075903c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:19fd084
/////////////////////////////////////////////////////////////////////////
1: 
1:         String healthStatus = health.healthStatus();
1:         String currentStatus = health.getCurrentStatus();
1: 
1:         assertEquals(healthStatus, currentStatus);
commit:541ed8c
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         answer.setSchedulerSupport(true);
/////////////////////////////////////////////////////////////////////////
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4f57744
/////////////////////////////////////////////////////////////////////////
1:         answer.getSystemUsage().getJobSchedulerUsage().setLimit(1024 * 1024 * 64);
author:gtully
-------------------------------------------------------------------------------
commit:031611e
/////////////////////////////////////////////////////////////////////////
1:         answer.getSystemUsage().getMemoryUsage().setLimit(1024 * 1024 * 64);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:0309eb3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         answer.getSystemUsage().getStoreUsage().setLimit(1024 * 1024 * 64);
/////////////////////////////////////////////////////////////////////////
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination();
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         for (int i = 0; i < 60; i++) {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeBytes(new byte[1024 *1024]);
1:             producer.send(message);
1:         }
1:         Thread.sleep(1000);
1:         ObjectName brokerName = assertRegisteredObjectName(objectNameStr);
1:         for (HealthStatus status : list) {
1:             LOG.info("Health status: {}", status);
1:         }
1: 
1:         assertEquals(2, list.size());
author:Robert Davies
-------------------------------------------------------------------------------
commit:f0baf85
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(2,list.size());
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
1:         String objectNameStr = broker.getBrokerObjectName().toString();
1:         objectNameStr += ",service=Health";
0:         ObjectName brokerName = assertRegisteredObjectName(objectNameStr
0:         );
commit:075903c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.util.List;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class HealthViewMBeanTest extends EmbeddedBrokerTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(MBeanTest.class);
1:     protected MBeanServer mbeanServer;
1:     protected String domain = "org.apache.activemq";
1: 
1: 
1:     protected void setUp() throws Exception {
1:         bindAddress = "tcp://localhost:0";
1:         useTopic = false;
1:         super.setUp();
1:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1: 
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(true);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.getSystemUsage().getTempUsage().setLimit(1024 * 1024 * 64);
1:         answer.setUseJmx(true);
1: 
1: 
1:         // allow options to be visible via jmx
1: 
1:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: 
1:     public void testHealthView() throws Exception{
0:             Connection connection = connectionFactory.createConnection();
1: 
0:             connection.start();
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             destination = createDestination();
0:             MessageProducer producer = session.createProducer(destination);
0:             producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
0:             for (int i = 0; i < 60; i++) {
0:                 BytesMessage message = session.createBytesMessage();
0:                 message.writeBytes(new byte[1024 *1024]);
0:                 producer.send(message);
1:             }
0:             Thread.sleep(1000);
1: 
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Health,BrokerName=localhost");
1:         HealthViewMBean health =  MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, HealthViewMBean.class, true);
1:         List<HealthStatus> list = health.healthList();
0:         assertEquals(2,list.size());
1: 
1:     }
1: 
1:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:         ObjectName objectName = new ObjectName(name);
1:         if (mbeanServer.isRegistered(objectName)) {
1:             LOG.info("Bean Registered: " + objectName);
1:         } else {
1:             fail("Could not find MBean!: " + objectName);
1:         }
1:         return objectName;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1f8306b
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("There should be at least two statuses", list.size() >= 2);
============================================================================