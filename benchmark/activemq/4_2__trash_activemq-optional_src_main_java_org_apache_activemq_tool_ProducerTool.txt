2:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:5be5a62:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.tool;
5:40a7d3b: 
1:40a7d3b: import java.util.Date;
1:40a7d3b: import javax.jms.Connection;
1:40a7d3b: import javax.jms.DeliveryMode;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.MessageProducer;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.jms.TextMessage;
1:40a7d3b: 
1:40a7d3b: /**
1:40a7d3b:  * A simple tool for publishing messages
1:b0c2a40:  * 
1:540dd5c:  * 
2:40a7d3b:  */
1:40a7d3b: public class ProducerTool extends ToolSupport {
1:40a7d3b: 
1:40a7d3b:     protected int messageCount = 10;
1:540dd5c:     protected long sleepTime;
1:40a7d3b:     protected boolean verbose = true;
1:40a7d3b:     protected int messageSize = 255;
1:40a7d3b: 
1:40a7d3b:     public static void main(String[] args) {
1:40a7d3b:         runTool(args, new ProducerTool());
6:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected static void runTool(String[] args, ProducerTool tool) {
1:40a7d3b:         if (args.length > 0) {
1:40a7d3b:             tool.url = args[0];
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 1) {
1:40a7d3b:             tool.topic = args[1].equalsIgnoreCase("true");
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 2) {
1:40a7d3b:             tool.subject = args[2];
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 3) {
1:40a7d3b:             tool.durable = args[3].equalsIgnoreCase("true");
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 4) {
1:40a7d3b:             tool.messageCount = Integer.parseInt(args[4]);
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 5) {
1:40a7d3b:             tool.messageSize = Integer.parseInt(args[5]);
1:40a7d3b:         }
1:40a7d3b:         tool.run();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void run() {
1:40a7d3b:         try {
1:40a7d3b:             System.out.println("Connecting to URL: " + url);
1:540dd5c:             System.out.println("Publishing a Message with size " + messageSize + " to " + (topic ? "topic" : "queue") + ": " + subject);
1:40a7d3b:             System.out.println("Using " + (durable ? "durable" : "non-durable") + " publishing");
1:40a7d3b: 
1:40a7d3b:             Connection connection = createConnection();
1:40a7d3b:             Session session = createSession(connection);
1:40a7d3b:             MessageProducer producer = createProducer(session);
1:540dd5c:             // connection.start();
1:40a7d3b: 
1:40a7d3b:             sendLoop(session, producer);
1:40a7d3b: 
1:40a7d3b:             System.out.println("Done.");
1:40a7d3b:             close(connection, session);
1:540dd5c:         } catch (Exception e) {
1:40a7d3b:             System.out.println("Caught: " + e);
1:40a7d3b:             e.printStackTrace();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected MessageProducer createProducer(Session session) throws JMSException {
1:40a7d3b:         MessageProducer producer = session.createProducer(destination);
1:40a7d3b:         if (durable) {
1:40a7d3b:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:540dd5c:         } else {
1:40a7d3b:             producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:40a7d3b:         }
1:40a7d3b:         return producer;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void sendLoop(Session session, MessageProducer producer) throws Exception {
1:540dd5c: 
1:40a7d3b:         for (int i = 0; i < messageCount; i++) {
1:540dd5c: 
1:540dd5c:             TextMessage message = session.createTextMessage(createMessageText(i));
1:40a7d3b: 
1:40a7d3b:             if (verbose) {
1:540dd5c:                 String msg = message.getText();
1:540dd5c:                 if (msg.length() > 50) {
1:540dd5c:                     msg = msg.substring(0, 50) + "...";
1:540dd5c:                 }
1:40a7d3b:                 System.out.println("Sending message: " + msg);
1:40a7d3b:             }
1:40a7d3b: 
1:40a7d3b:             producer.send(message);
1:40a7d3b:             Thread.sleep(sleepTime);
1:40a7d3b:         }
1:40a7d3b:         producer.send(session.createMessage());
1:40a7d3b:     }
1:40a7d3b: 
1:540dd5c:     /**
1:540dd5c:      * @param i
1:540dd5c:      * @return
1:540dd5c:      */
1:540dd5c:     private String createMessageText(int index) {
1:540dd5c:         StringBuffer buffer = new StringBuffer(messageSize);
1:540dd5c:         buffer.append("Message: " + index + " sent at: " + new Date());
1:540dd5c:         if (buffer.length() > messageSize) {
1:540dd5c:             return buffer.substring(0, messageSize);
1:540dd5c:         }
1:540dd5c:         for (int i = buffer.length(); i < messageSize; i++) {
1:540dd5c:             buffer.append(' ');
1:540dd5c:         }
1:540dd5c:         return buffer.toString();
1:540dd5c:     }
1:86cbdfd: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  * 
1:     protected long sleepTime;
/////////////////////////////////////////////////////////////////////////
1:             System.out.println("Publishing a Message with size " + messageSize + " to " + (topic ? "topic" : "queue") + ": " + subject);
1:             // connection.start();
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:         } else {
1: 
1: 
1:             TextMessage message = session.createTextMessage(createMessageText(i));
1:                 String msg = message.getText();
1:                 if (msg.length() > 50) {
1:                     msg = msg.substring(0, 50) + "...";
1:                 }
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param i
1:      * @return
1:      */
1:     private String createMessageText(int index) {
1:         StringBuffer buffer = new StringBuffer(messageSize);
1:         buffer.append("Message: " + index + " sent at: " + new Date());
1:         if (buffer.length() > messageSize) {
1:             return buffer.substring(0, messageSize);
1:         }
1:         for (int i = buffer.length(); i < messageSize; i++) {
1:             buffer.append(' ');
1:         }
1:         return buffer.toString();
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.tool;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.tool;
1: 
1: import java.util.Date;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: /**
1:  * A simple tool for publishing messages
0:  *
0:  * @version $Revision$
1:  */
1: public class ProducerTool extends ToolSupport {
1: 
1:     protected int messageCount = 10;
0:     protected long sleepTime = 0L;
1:     protected boolean verbose = true;
1:     protected int messageSize = 255;
1: 
1:     public static void main(String[] args) {
1:         runTool(args, new ProducerTool());
1:     }
1: 
1:     protected static void runTool(String[] args, ProducerTool tool) {
1:         if (args.length > 0) {
1:             tool.url = args[0];
1:         }
1:         if (args.length > 1) {
1:             tool.topic = args[1].equalsIgnoreCase("true");
1:         }
1:         if (args.length > 2) {
1:             tool.subject = args[2];
1:         }
1:         if (args.length > 3) {
1:             tool.durable = args[3].equalsIgnoreCase("true");
1:         }
1:         if (args.length > 4) {
1:             tool.messageCount = Integer.parseInt(args[4]);
1:         }
1:         if (args.length > 5) {
1:             tool.messageSize = Integer.parseInt(args[5]);
1:         }
1:         tool.run();
1:     }
1: 
1:     public void run() {
1:         try {
1:             System.out.println("Connecting to URL: " + url);
0:             System.out.println("Publishing a Message with size "+messageSize+" to " + (topic ? "topic" : "queue") + ": " + subject);
1:             System.out.println("Using " + (durable ? "durable" : "non-durable") + " publishing");
1: 
1:             Connection connection = createConnection();
1:             Session session = createSession(connection);
1:             MessageProducer producer = createProducer(session);
0:             //connection.start();
1: 
1:             sendLoop(session, producer);
1: 
1:             System.out.println("Done.");
1:             close(connection, session);
1:         }
0:         catch (Exception e) {
1:             System.out.println("Caught: " + e);
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     protected MessageProducer createProducer(Session session) throws JMSException {
1:         MessageProducer producer = session.createProducer(destination);
1:         if (durable) {
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         }
0:         else {
1:             producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         }
1:         return producer;
1:     }
1: 
1:     protected void sendLoop(Session session, MessageProducer producer) throws Exception {
1:     	
1:         for (int i = 0; i < messageCount; i++) {
1:         
1:         	
0:         	TextMessage message = session.createTextMessage(createMessageText(i));
1: 
1:             if (verbose) {
0:             	String msg = message.getText();
0:             	if( msg.length() > 50 )
0:             		msg = msg.substring(0, 50)+"...";
1:                 System.out.println("Sending message: " + msg);
1:             }
1: 
1:             producer.send(message);
1:             Thread.sleep(sleepTime);
1:         }
1:         producer.send(session.createMessage());
1:     }
1: 
1: 	/**
0: 	 * @param i
0: 	 * @return
1: 	 */
0: 	private String createMessageText(int index) {
0: 		StringBuffer buffer = new StringBuffer(messageSize);
0: 		buffer.append("Message: " + index + " sent at: " + new Date());
0: 		if( buffer.length() > messageSize ) {
0: 			return buffer.substring(0, messageSize);
1: 		}
0:     	for( int i=buffer.length(); i < messageSize; i++)
0:     		buffer.append(' ');
0:     	return buffer.toString();
1: 	}
1: }
============================================================================