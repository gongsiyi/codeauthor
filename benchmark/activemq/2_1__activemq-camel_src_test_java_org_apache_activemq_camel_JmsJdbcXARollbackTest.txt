1:1039473: /**
1:1039473:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1039473:  * contributor license agreements.  See the NOTICE file distributed with
1:1039473:  * this work for additional information regarding copyright ownership.
1:1039473:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1039473:  * (the "License"); you may not use this file except in compliance with
1:1039473:  * the License.  You may obtain a copy of the License at
1:1039473:  *
1:1039473:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1039473:  *
1:1039473:  * Unless required by applicable law or agreed to in writing, software
1:1039473:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1039473:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1039473:  * See the License for the specific language governing permissions and
1:1039473:  * limitations under the License.
1:1039473:  */
1:1039473: package org.apache.activemq.camel;
1:1039473: 
1:1039473: import java.sql.ResultSet;
1:1039473: import java.sql.SQLException;
1:1039473: import javax.jms.Connection;
1:1039473: import javax.jms.Message;
1:1039473: import javax.jms.MessageConsumer;
1:1039473: import javax.jms.MessageProducer;
1:1039473: import javax.jms.Session;
1:1039473: import javax.jms.TextMessage;
1:c8d96c6: import javax.sql.DataSource;
1:1039473: import javax.transaction.TransactionManager;
1:1039473: import org.apache.activemq.ActiveMQConnectionFactory;
1:1039473: import org.apache.activemq.broker.BrokerService;
1:1039473: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:1039473: import org.apache.activemq.command.ActiveMQQueue;
1:1039473: import org.apache.activemq.util.Wait;
1:1039473: import org.apache.camel.Exchange;
1:1039473: import org.apache.camel.component.jms.JmsMessage;
1:1039473: import org.apache.camel.test.spring.CamelSpringTestSupport;
1:1039473: import org.junit.Test;
1:1039473: import org.slf4j.Logger;
1:1039473: import org.slf4j.LoggerFactory;
1:1039473: import org.springframework.context.support.AbstractXmlApplicationContext;
1:1039473: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:1039473: import org.springframework.transaction.jta.JtaTransactionManager;
1:1039473: 
1:1039473: /**
1:1039473:  *  shows rollback and redelivery dlq respected with external tm
1:1039473:  */
1:1039473: public class JmsJdbcXARollbackTest extends CamelSpringTestSupport {
1:1039473:     private static final Logger LOG = LoggerFactory.getLogger(JmsJdbcXARollbackTest.class);
1:1039473:     BrokerService broker = null;
1:1039473:     int messageCount;
1:1039473: 
1:1039473:     public java.sql.Connection initDb() throws Exception {
1:1039473:         String createStatement =
1:1039473:                 "CREATE TABLE SCP_INPUT_MESSAGES (" +
1:1039473:                         "id int NOT NULL GENERATED ALWAYS AS IDENTITY, " +
1:1039473:                         "messageId varchar(96) NOT NULL, " +
1:1039473:                         "messageCorrelationId varchar(96) NOT NULL, " +
1:1039473:                         "messageContent varchar(2048) NOT NULL, " +
1:1039473:                         "PRIMARY KEY (id) )";
1:1039473: 
1:1039473:         java.sql.Connection conn = getJDBCConnection();
1:1039473:         try {
1:1039473:             conn.createStatement().execute(createStatement);
1:1039473:         } catch (SQLException alreadyExists) {
1:1039473:             log.info("ex on create tables", alreadyExists);
1:1039473:         }
1:1039473: 
1:1039473:         try {
1:1039473:             conn.createStatement().execute("DELETE FROM SCP_INPUT_MESSAGES");
1:1039473:         } catch (SQLException ex) {
1:1039473:             log.info("ex on create delete all", ex);
1:1039473:         }
1:1039473: 
1:1039473:         return conn;
1:1039473:     }
1:1039473: 
1:1039473:     private java.sql.Connection getJDBCConnection() throws Exception {
1:c8d96c6:         DataSource dataSource = getMandatoryBean(DataSource.class, "managedDataSourceWithRecovery");
1:1039473:         return dataSource.getConnection();
1:1039473:     }
1:1039473: 
1:1039473:     private int dumpDb(java.sql.Connection jdbcConn) throws Exception {
1:1039473:         int count = 0;
1:1039473:         ResultSet resultSet = jdbcConn.createStatement().executeQuery("SELECT * FROM SCP_INPUT_MESSAGES");
1:1039473:         while (resultSet.next()) {
1:1039473:             count++;
1:1039473:             log.info("message - seq:" + resultSet.getInt(1)
1:1039473:                     + ", id: " + resultSet.getString(2)
1:1039473:                     + ", corr: " + resultSet.getString(3)
1:1039473:                     + ", content: " + resultSet.getString(4));
1:1039473:         }
1:1039473:         return count;
1:1039473:     }
1:1039473: 
1:1039473:     @Test
1:1039473:     public void testConsumeRollback() throws Exception {
1:1039473:         java.sql.Connection jdbcConn = initDb();
1:1039473: 
1:1039473:         initTMRef();
1:1039473:         sendJMSMessageToKickOffRoute();
1:1039473: 
1:1039473:         // should go to dlq eventually
1:1039473:         Wait.waitFor(new Wait.Condition() {
1:1039473:             @Override
1:1039473:             public boolean isSatisified() throws Exception {
1:1039473:                 return consumedFrom(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME);
1:1039473:             }
1:1039473:         });
1:1039473:         assertEquals("message in db, commit to db worked", 0, dumpDb(jdbcConn));
1:1039473:         assertFalse("Nothing to to out q", consumedFrom("scp_transacted_out"));
1:1039473: 
1:1039473:     }
1:1039473: 
1:1039473:     private boolean consumedFrom(String qName) throws Exception {
1:1039473:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testXA");
1:1039473:         factory.setWatchTopicAdvisories(false);
1:1039473:         Connection connection = factory.createConnection();
1:1039473:         connection.start();
1:1039473:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1039473:         MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(qName));
1:1039473:         Message message = consumer.receive(500);
1:1039473:         LOG.info("Got from queue:{} {}", qName, message);
1:1039473:         connection.close();
1:1039473:         return message != null;
1:1039473:     }
1:1039473: 
1:1039473:     static TransactionManager[] transactionManager = new TransactionManager[1];
1:1039473:     private void initTMRef() {
1:1039473:         transactionManager[0] = getMandatoryBean(JtaTransactionManager.class, "jtaTransactionManager").getTransactionManager();
1:1039473: 
1:1039473:     }
1:1039473: 
1:1039473:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:1039473:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testXA");
1:1039473:         factory.setWatchTopicAdvisories(false);
1:1039473:         Connection connection = factory.createConnection();
1:1039473:         connection.start();
1:1039473:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1039473:         MessageProducer producer = session.createProducer(new ActiveMQQueue("scp_transacted"));
1:1039473:         TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:1039473:         message.setJMSCorrelationID("pleaseCorrelate");
1:1039473:         producer.send(message);
1:1039473:         connection.close();
1:1039473:     }
1:1039473: 
1:1039473:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:1039473:         BrokerService brokerService = new BrokerService();
1:1039473:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:1039473:         brokerService.setBrokerName("testXA");
1:1039473:         brokerService.setAdvisorySupport(false);
1:1039473:         brokerService.setUseJmx(false);
1:1039473:         brokerService.setDataDirectory("target/data");
1:1039473:         brokerService.addConnector("tcp://0.0.0.0:61616");
1:1039473:         return brokerService;
1:1039473:     }
1:1039473: 
1:1039473:     @SuppressWarnings("unchecked")
1:1039473:     @Override
1:1039473:     protected AbstractXmlApplicationContext createApplicationContext() {
1:1039473: 
1:1039473:         deleteDirectory("target/data/howl");
1:1039473: 
1:1039473:         // make broker available to recovery processing on app context start
1:1039473:         try {
1:1039473:             broker = createBroker(true);
1:1039473:             broker.start();
1:1039473:         } catch (Exception e) {
1:1039473:             throw new RuntimeException("Failed to start broker", e);
1:1039473:         }
1:1039473: 
1:1039473:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsXajdbcRollback.xml");
1:1039473:     }
1:1039473: 
1:1039473:     public static class MarkRollbackOnly {
1:1039473:             public String enrich(Exchange exchange) throws Exception {
1:1039473:                 LOG.info("Got exchange: " + exchange);
1:1039473:                 LOG.info("Got message: " + ((JmsMessage)exchange.getIn()).getJmsMessage());
1:1039473: 
1:1039473:                 LOG.info("Current tx: " + transactionManager[0].getTransaction());
1:1039473:                 LOG.info("Marking rollback only...");
1:1039473:                 transactionManager[0].getTransaction().setRollbackOnly();
1:1039473:                 return "Some Text";
1:1039473:             }
1:1039473:         }
1:1039473: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c8d96c6
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         DataSource dataSource = getMandatoryBean(DataSource.class, "managedDataSourceWithRecovery");
commit:1039473
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.transaction.TransactionManager;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.Wait;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.component.jms.JmsMessage;
1: import org.apache.camel.test.spring.CamelSpringTestSupport;
0: import org.apache.commons.dbcp.BasicDataSource;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.context.support.AbstractXmlApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: import org.springframework.transaction.jta.JtaTransactionManager;
1: 
1: /**
1:  *  shows rollback and redelivery dlq respected with external tm
1:  */
1: public class JmsJdbcXARollbackTest extends CamelSpringTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsJdbcXARollbackTest.class);
1:     BrokerService broker = null;
1:     int messageCount;
1: 
1:     public java.sql.Connection initDb() throws Exception {
1:         String createStatement =
1:                 "CREATE TABLE SCP_INPUT_MESSAGES (" +
1:                         "id int NOT NULL GENERATED ALWAYS AS IDENTITY, " +
1:                         "messageId varchar(96) NOT NULL, " +
1:                         "messageCorrelationId varchar(96) NOT NULL, " +
1:                         "messageContent varchar(2048) NOT NULL, " +
1:                         "PRIMARY KEY (id) )";
1: 
1:         java.sql.Connection conn = getJDBCConnection();
1:         try {
1:             conn.createStatement().execute(createStatement);
1:         } catch (SQLException alreadyExists) {
1:             log.info("ex on create tables", alreadyExists);
1:         }
1: 
1:         try {
1:             conn.createStatement().execute("DELETE FROM SCP_INPUT_MESSAGES");
1:         } catch (SQLException ex) {
1:             log.info("ex on create delete all", ex);
1:         }
1: 
1:         return conn;
1:     }
1: 
1:     private java.sql.Connection getJDBCConnection() throws Exception {
0:         BasicDataSource dataSource = getMandatoryBean(BasicDataSource.class, "managedDataSourceWithRecovery");
1:         return dataSource.getConnection();
1:     }
1: 
1:     private int dumpDb(java.sql.Connection jdbcConn) throws Exception {
1:         int count = 0;
1:         ResultSet resultSet = jdbcConn.createStatement().executeQuery("SELECT * FROM SCP_INPUT_MESSAGES");
1:         while (resultSet.next()) {
1:             count++;
1:             log.info("message - seq:" + resultSet.getInt(1)
1:                     + ", id: " + resultSet.getString(2)
1:                     + ", corr: " + resultSet.getString(3)
1:                     + ", content: " + resultSet.getString(4));
1:         }
1:         return count;
1:     }
1: 
1:     @Test
1:     public void testConsumeRollback() throws Exception {
1:         java.sql.Connection jdbcConn = initDb();
1: 
1:         initTMRef();
1:         sendJMSMessageToKickOffRoute();
1: 
1:         // should go to dlq eventually
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return consumedFrom(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME);
1:             }
1:         });
1:         assertEquals("message in db, commit to db worked", 0, dumpDb(jdbcConn));
1:         assertFalse("Nothing to to out q", consumedFrom("scp_transacted_out"));
1: 
1:     }
1: 
1:     private boolean consumedFrom(String qName) throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testXA");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(qName));
1:         Message message = consumer.receive(500);
1:         LOG.info("Got from queue:{} {}", qName, message);
1:         connection.close();
1:         return message != null;
1:     }
1: 
1:     static TransactionManager[] transactionManager = new TransactionManager[1];
1:     private void initTMRef() {
1:         transactionManager[0] = getMandatoryBean(JtaTransactionManager.class, "jtaTransactionManager").getTransactionManager();
1: 
1:     }
1: 
1:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testXA");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("scp_transacted"));
1:         TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:         message.setJMSCorrelationID("pleaseCorrelate");
1:         producer.send(message);
1:         connection.close();
1:     }
1: 
1:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         brokerService.setBrokerName("testXA");
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setDataDirectory("target/data");
1:         brokerService.addConnector("tcp://0.0.0.0:61616");
1:         return brokerService;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     @Override
1:     protected AbstractXmlApplicationContext createApplicationContext() {
1: 
1:         deleteDirectory("target/data/howl");
1: 
1:         // make broker available to recovery processing on app context start
1:         try {
1:             broker = createBroker(true);
1:             broker.start();
1:         } catch (Exception e) {
1:             throw new RuntimeException("Failed to start broker", e);
1:         }
1: 
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsXajdbcRollback.xml");
1:     }
1: 
1:     public static class MarkRollbackOnly {
1:             public String enrich(Exchange exchange) throws Exception {
1:                 LOG.info("Got exchange: " + exchange);
1:                 LOG.info("Got message: " + ((JmsMessage)exchange.getIn()).getJmsMessage());
1: 
1:                 LOG.info("Current tx: " + transactionManager[0].getTransaction());
1:                 LOG.info("Marking rollback only...");
1:                 transactionManager[0].getTransaction().setRollbackOnly();
1:                 return "Some Text";
1:             }
1:         }
1: }
author:Jeff Genender
-------------------------------------------------------------------------------
commit:939c8a1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.dbcp2.BasicDataSource;
============================================================================