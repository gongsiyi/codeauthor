1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:efc9a8d: import javax.jms.*;
1:efc9a8d: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsQueueSelectorTest extends JmsTopicSelectorTest {
1:d29ca2a:     public void setUp() throws Exception {
1:f812e34:         topic = false;
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:efc9a8d: 
1:efc9a8d:     public void testRedeliveryWithSelectors() throws Exception {
1:efc9a8d:         consumer = createConsumer("");
1:efc9a8d: 
1:efc9a8d:         // send a message that would go to this consumer, but not to the next consumer we open
1:efc9a8d:         TextMessage message = session.createTextMessage("1");
1:efc9a8d:         message.setIntProperty("id", 1);
1:efc9a8d:         message.setJMSType("b");
1:efc9a8d:         message.setStringProperty("stringProperty", "b");
1:efc9a8d:         message.setLongProperty("longProperty", 1);
1:efc9a8d:         message.setBooleanProperty("booleanProperty", true);
1:efc9a8d:         producer.send(message);
1:efc9a8d: 
1:efc9a8d:         // don't consume any messages.. close the consumer so that messages that had
1:efc9a8d:         // been dispatched get marked as delivered, and queued for redelivery
1:efc9a8d:         consumer.close();
1:efc9a8d: 
1:efc9a8d:         // send a message that will match the selector for the next consumer
1:efc9a8d:         message = session.createTextMessage("1");
1:efc9a8d:         message.setIntProperty("id", 1);
1:efc9a8d:         message.setJMSType("a");
1:efc9a8d:         message.setStringProperty("stringProperty", "a");
1:efc9a8d:         message.setLongProperty("longProperty", 1);
1:efc9a8d:         message.setBooleanProperty("booleanProperty", true);
1:efc9a8d:         producer.send(message);
1:efc9a8d: 
1:efc9a8d:         consumer = createConsumer("stringProperty = 'a' and longProperty = 1 and booleanProperty = true");
1:efc9a8d: 
1:efc9a8d:         // now we, should only receive 1 message, not two
1:efc9a8d:         int remaining = 2;
1:efc9a8d: 
1:efc9a8d:         javax.jms.Message recievedMsg = null;
1:efc9a8d: 
1:efc9a8d:         while (true) {
1:efc9a8d:             recievedMsg = consumer.receive(1000);
1:efc9a8d:             if (recievedMsg == null) {
1:efc9a8d:                 break;
1:efc9a8d:             }
1:efc9a8d:             String text = ((TextMessage)recievedMsg).getText();
1:efc9a8d:             if (!text.equals("1") && !text.equals("3")) {
1:efc9a8d:                 fail("unexpected message: " + text);
1:efc9a8d:             }
1:efc9a8d:             remaining--;
1:efc9a8d:         }
1:efc9a8d: 
1:efc9a8d:         assertEquals(1, remaining);
1:efc9a8d:         consumer.close();
1:efc9a8d:         consumeMessages(remaining);
1:efc9a8d: 
1:efc9a8d:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Christian Posta
-------------------------------------------------------------------------------
commit:efc9a8d
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.*;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testRedeliveryWithSelectors() throws Exception {
1:         consumer = createConsumer("");
1: 
1:         // send a message that would go to this consumer, but not to the next consumer we open
1:         TextMessage message = session.createTextMessage("1");
1:         message.setIntProperty("id", 1);
1:         message.setJMSType("b");
1:         message.setStringProperty("stringProperty", "b");
1:         message.setLongProperty("longProperty", 1);
1:         message.setBooleanProperty("booleanProperty", true);
1:         producer.send(message);
1: 
1:         // don't consume any messages.. close the consumer so that messages that had
1:         // been dispatched get marked as delivered, and queued for redelivery
1:         consumer.close();
1: 
1:         // send a message that will match the selector for the next consumer
1:         message = session.createTextMessage("1");
1:         message.setIntProperty("id", 1);
1:         message.setJMSType("a");
1:         message.setStringProperty("stringProperty", "a");
1:         message.setLongProperty("longProperty", 1);
1:         message.setBooleanProperty("booleanProperty", true);
1:         producer.send(message);
1: 
1:         consumer = createConsumer("stringProperty = 'a' and longProperty = 1 and booleanProperty = true");
1: 
1:         // now we, should only receive 1 message, not two
1:         int remaining = 2;
1: 
1:         javax.jms.Message recievedMsg = null;
1: 
1:         while (true) {
1:             recievedMsg = consumer.receive(1000);
1:             if (recievedMsg == null) {
1:                 break;
1:             }
1:             String text = ((TextMessage)recievedMsg).getText();
1:             if (!text.equals("1") && !text.equals("3")) {
1:                 fail("unexpected message: " + text);
1:             }
1:             remaining--;
1:         }
1: 
1:         assertEquals(1, remaining);
1:         consumer.close();
1:         consumeMessages(remaining);
1: 
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         topic = false;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: /**
0:  * @version $Revision: 1.2 $
1:  */
1: public class JmsQueueSelectorTest extends JmsTopicSelectorTest {
1:     public void setUp() throws Exception {
0:         topic=false;
1:         super.setUp();
1:     }
1: }
============================================================================