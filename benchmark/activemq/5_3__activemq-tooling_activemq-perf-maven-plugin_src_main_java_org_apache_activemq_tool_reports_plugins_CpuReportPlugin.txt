1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool.reports.plugins;
1:a88906f: 
1:fddc01d: import java.util.ArrayList;
1:fddc01d: import java.util.HashMap;
1:540dd5c: import java.util.List;
1:540dd5c: import java.util.Map;
1:540dd5c: import java.util.StringTokenizer;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.tool.reports.PerformanceStatisticsUtil;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a88906f: 
1:a88906f: public class CpuReportPlugin implements ReportPlugin {
2:fddc01d: 
1:94df6d1:     public static final String NAME_IGNORE_LIST = "$index$timeUnit$r$b$w$swpd$inact$active$free$buff$cache$si$so$in$";
1:fddc01d:     public static final String NAME_BLOCK_RECV = "bi";
1:7450969:     public static final String NAME_BLOCK_SENT = "bo";
1:fddc01d:     public static final String NAME_CTX_SWITCH = "cs";
1:fddc01d:     public static final String NAME_USER_TIME  = "us";
1:fddc01d:     public static final String NAME_SYS_TIME   = "sy";
1:fddc01d:     public static final String NAME_IDLE_TIME  = "id";
1:fddc01d:     public static final String NAME_WAIT_TIME  = "wa";
1:fddc01d: 
1:fddc01d:     public static final String KEY_BLOCK_RECV = "BlocksReceived";
1:fddc01d:     public static final String KEY_BLOCK_SENT = "BlocksSent";
1:fddc01d:     public static final String KEY_CTX_SWITCH = "ContextSwitches";
1:fddc01d:     public static final String KEY_USER_TIME  = "UserTime";
1:fddc01d:     public static final String KEY_SYS_TIME   = "SystemTime";
1:fddc01d:     public static final String KEY_IDLE_TIME  = "IdleTime";
1:fddc01d:     public static final String KEY_WAIT_TIME  = "WaitingTime";
1:fddc01d: 
1:fddc01d:     public static final String KEY_AVE_BLOCK_RECV = "AveBlocksReceived";
1:fddc01d:     public static final String KEY_AVE_BLOCK_SENT = "AveBlocksSent";
1:fddc01d:     public static final String KEY_AVE_CTX_SWITCH = "AveContextSwitches";
1:fddc01d:     public static final String KEY_AVE_USER_TIME  = "AveUserTime";
1:fddc01d:     public static final String KEY_AVE_SYS_TIME   = "AveSystemTime";
1:fddc01d:     public static final String KEY_AVE_IDLE_TIME  = "AveIdleTime";
1:fddc01d:     public static final String KEY_AVE_WAIT_TIME  = "AveWaitingTime";
1:540dd5c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CpuReportPlugin.class);
1:fddc01d: 
1:540dd5c:     protected List<Long> blockRecv = new ArrayList<Long>();
1:540dd5c:     protected List<Long> blockSent = new ArrayList<Long>();
1:540dd5c:     protected List<Long> ctxSwitch = new ArrayList<Long>();
1:540dd5c:     protected List<Long> userTime  = new ArrayList<Long>();
1:540dd5c:     protected List<Long> sysTime   = new ArrayList<Long>();
1:540dd5c:     protected List<Long> idleTime  = new ArrayList<Long>();
1:540dd5c:     protected List<Long> waitTime  = new ArrayList<Long>();
1:fddc01d: 
1:a88906f:     public void handleCsvData(String csvData) {
1:fddc01d:         StringTokenizer tokenizer = new StringTokenizer(csvData, ",");
1:540dd5c:         String data;
1:540dd5c:         String key;
1:540dd5c:         String val;
1:fddc01d:         while (tokenizer.hasMoreTokens()) {
1:fddc01d:             data = tokenizer.nextToken();
1:fddc01d:             key  = data.substring(0, data.indexOf("="));
1:fddc01d:             val  = data.substring(data.indexOf("=") + 1);
1:fddc01d: 
1:fddc01d:             addToCpuList(key, val);
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:540dd5c:     public Map<String, String> getSummary() {
1:fddc01d:         long val;
1:fddc01d: 
1:540dd5c:         Map<String, String> summary = new HashMap<String, String>();
1:fddc01d: 
1:fddc01d:         if (blockRecv.size() > 0) {
1:fddc01d:             val = PerformanceStatisticsUtil.getSum(blockRecv);
1:fddc01d:             summary.put(KEY_BLOCK_RECV, String.valueOf(val));
1:fddc01d:             summary.put(KEY_AVE_BLOCK_RECV, String.valueOf((double)val / (double)blockRecv.size()));
1:a88906f:         }
1:fddc01d: 
1:fddc01d:         if (blockSent.size() > 0) {
1:fddc01d:             val = PerformanceStatisticsUtil.getSum(blockSent);
1:fddc01d:             summary.put(KEY_BLOCK_SENT, String.valueOf(val));
1:fddc01d:             summary.put(KEY_AVE_BLOCK_SENT, String.valueOf((double)val / (double)blockSent.size()));
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:         if (ctxSwitch.size() > 0) {
1:fddc01d:             val = PerformanceStatisticsUtil.getSum(ctxSwitch);
1:fddc01d:             summary.put(KEY_CTX_SWITCH, String.valueOf(val));
1:fddc01d:             summary.put(KEY_AVE_CTX_SWITCH, String.valueOf((double)val / (double)ctxSwitch.size()));
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:         if (userTime.size() > 0) {
1:fddc01d:             val = PerformanceStatisticsUtil.getSum(userTime);
1:fddc01d:             summary.put(KEY_USER_TIME, String.valueOf(val));
1:fddc01d:             summary.put(KEY_AVE_USER_TIME, String.valueOf((double)val / (double)userTime.size()));
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:         if (sysTime.size() > 0) {
1:fddc01d:             val = PerformanceStatisticsUtil.getSum(sysTime);
1:fddc01d:             summary.put(KEY_SYS_TIME, String.valueOf(val));
1:fddc01d:             summary.put(KEY_AVE_SYS_TIME, String.valueOf((double)val / (double)sysTime.size()));
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:         if (idleTime.size() > 0) {
1:fddc01d:             val = PerformanceStatisticsUtil.getSum(idleTime);
1:fddc01d:             summary.put(KEY_IDLE_TIME, String.valueOf(val));
1:fddc01d:             summary.put(KEY_AVE_IDLE_TIME, String.valueOf((double)val / (double)idleTime.size()));
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:         if (waitTime.size() > 0) {
1:fddc01d:             val = PerformanceStatisticsUtil.getSum(waitTime);
1:fddc01d:             summary.put(KEY_WAIT_TIME, String.valueOf(val));
1:fddc01d:             summary.put(KEY_AVE_WAIT_TIME, String.valueOf((double)val / (double)waitTime.size()));
1:fddc01d:         }
1:fddc01d: 
1:fddc01d:         if (summary.size() > 0) {
1:fddc01d:             return summary;
1:fddc01d:         } else {
1:fddc01d:             return null;
1:fddc01d:         }
1:fddc01d:     }
1:fddc01d: 
1:fddc01d:     protected void addToCpuList(String key, String val) {
1:fddc01d:         if (key.equals(NAME_BLOCK_RECV)) {
1:fddc01d:             blockRecv.add(Long.valueOf(val));
1:fddc01d:         } else if (key.equals(NAME_BLOCK_SENT)) {
1:fddc01d:             blockSent.add(Long.valueOf(val));
1:fddc01d:         } else if (key.equals(NAME_CTX_SWITCH)) {
1:fddc01d:             ctxSwitch.add(Long.valueOf(val));
1:fddc01d:         } else if (key.equals(NAME_USER_TIME)) {
1:fddc01d:             userTime.add(Long.valueOf(val));
1:fddc01d:         } else if (key.equals(NAME_SYS_TIME)) {
1:fddc01d:             sysTime.add(Long.valueOf(val));
1:fddc01d:         } else if (key.equals(NAME_IDLE_TIME)) {
1:fddc01d:             idleTime.add(Long.valueOf(val));
1:fddc01d:         } else if (key.equals(NAME_WAIT_TIME)) {
1:fddc01d:             waitTime.add(Long.valueOf(val));
1:94df6d1:         } else if (NAME_IGNORE_LIST.indexOf("$" + key + "$") != -1) {
1:7450969:             // Ignore key
1:fddc01d:         } else {
1:540dd5c:             LOG.warn("Unrecognized CPU data. " + key + "=" + val);
1:fddc01d:         }
1:fddc01d:     }
1:fddc01d: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(CpuReportPlugin.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.Map;
1: import java.util.StringTokenizer;
1: 
1: import org.apache.activemq.tool.reports.PerformanceStatisticsUtil;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(CpuReportPlugin.class);
1: 
1:     protected List<Long> blockRecv = new ArrayList<Long>();
1:     protected List<Long> blockSent = new ArrayList<Long>();
1:     protected List<Long> ctxSwitch = new ArrayList<Long>();
1:     protected List<Long> userTime  = new ArrayList<Long>();
1:     protected List<Long> sysTime   = new ArrayList<Long>();
1:     protected List<Long> idleTime  = new ArrayList<Long>();
1:     protected List<Long> waitTime  = new ArrayList<Long>();
1:         String data;
1:         String key;
1:         String val;
/////////////////////////////////////////////////////////////////////////
1:     public Map<String, String> getSummary() {
1:         Map<String, String> summary = new HashMap<String, String>();
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Unrecognized CPU data. " + key + "=" + val);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool.reports.plugins;
1: 
0: import java.util.Map;
1: 
1: public class CpuReportPlugin implements ReportPlugin {
1:     public void handleCsvData(String csvData) {
0:         // Do nothing
1:     }
1: 
0:     public Map getSummary() {
0:         return null; // Do nothing
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
commit:4b2f479
/////////////////////////////////////////////////////////////////////////
0:     public int getClientNumber();
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:94df6d1
/////////////////////////////////////////////////////////////////////////
1:     public static final String NAME_IGNORE_LIST = "$index$timeUnit$r$b$w$swpd$inact$active$free$buff$cache$si$so$in$";
/////////////////////////////////////////////////////////////////////////
1:         } else if (NAME_IGNORE_LIST.indexOf("$" + key + "$") != -1) {
commit:7450969
/////////////////////////////////////////////////////////////////////////
0:     public static final String NAME_IGNORE_LIST = "$r$b$w$swpd$inact$active$free$buff$cache$si$so$in$";
1:     public static final String NAME_BLOCK_SENT = "bo";
/////////////////////////////////////////////////////////////////////////
0:         } else if (NAME_IGNORE_LIST.indexOf("$" + key + "$") > 0) {
1:             // Ignore key
commit:fddc01d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.activemq.tool.reports.PerformanceStatisticsUtil;
1: 
0: import java.util.StringTokenizer;
0: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.HashMap;
0:     private static final Log log = LogFactory.getLog(CpuReportPlugin.class);
1: 
1:     public static final String NAME_BLOCK_RECV = "bi";
0:     public static final String NAME_BLOCK_SENT = "bu";
1:     public static final String NAME_CTX_SWITCH = "cs";
1:     public static final String NAME_USER_TIME  = "us";
1:     public static final String NAME_SYS_TIME   = "sy";
1:     public static final String NAME_IDLE_TIME  = "id";
1:     public static final String NAME_WAIT_TIME  = "wa";
1: 
1:     public static final String KEY_BLOCK_RECV = "BlocksReceived";
1:     public static final String KEY_BLOCK_SENT = "BlocksSent";
1:     public static final String KEY_CTX_SWITCH = "ContextSwitches";
1:     public static final String KEY_USER_TIME  = "UserTime";
1:     public static final String KEY_SYS_TIME   = "SystemTime";
1:     public static final String KEY_IDLE_TIME  = "IdleTime";
1:     public static final String KEY_WAIT_TIME  = "WaitingTime";
1: 
1:     public static final String KEY_AVE_BLOCK_RECV = "AveBlocksReceived";
1:     public static final String KEY_AVE_BLOCK_SENT = "AveBlocksSent";
1:     public static final String KEY_AVE_CTX_SWITCH = "AveContextSwitches";
1:     public static final String KEY_AVE_USER_TIME  = "AveUserTime";
1:     public static final String KEY_AVE_SYS_TIME   = "AveSystemTime";
1:     public static final String KEY_AVE_IDLE_TIME  = "AveIdleTime";
1:     public static final String KEY_AVE_WAIT_TIME  = "AveWaitingTime";
1: 
0:     protected List blockRecv = new ArrayList();
0:     protected List blockSent = new ArrayList();
0:     protected List ctxSwitch = new ArrayList();
0:     protected List userTime  = new ArrayList();
0:     protected List sysTime   = new ArrayList();
0:     protected List idleTime  = new ArrayList();
0:     protected List waitTime  = new ArrayList();
1: 
1:         StringTokenizer tokenizer = new StringTokenizer(csvData, ",");
0:         String data, key, val;
1:         while (tokenizer.hasMoreTokens()) {
1:             data = tokenizer.nextToken();
1:             key  = data.substring(0, data.indexOf("="));
1:             val  = data.substring(data.indexOf("=") + 1);
1: 
1:             addToCpuList(key, val);
1:         }
1:         long val;
1: 
0:         Map summary = new HashMap();
1: 
1:         if (blockRecv.size() > 0) {
1:             val = PerformanceStatisticsUtil.getSum(blockRecv);
1:             summary.put(KEY_BLOCK_RECV, String.valueOf(val));
1:             summary.put(KEY_AVE_BLOCK_RECV, String.valueOf((double)val / (double)blockRecv.size()));
1:         }
1: 
1:         if (blockSent.size() > 0) {
1:             val = PerformanceStatisticsUtil.getSum(blockSent);
1:             summary.put(KEY_BLOCK_SENT, String.valueOf(val));
1:             summary.put(KEY_AVE_BLOCK_SENT, String.valueOf((double)val / (double)blockSent.size()));
1:         }
1: 
1:         if (ctxSwitch.size() > 0) {
1:             val = PerformanceStatisticsUtil.getSum(ctxSwitch);
1:             summary.put(KEY_CTX_SWITCH, String.valueOf(val));
1:             summary.put(KEY_AVE_CTX_SWITCH, String.valueOf((double)val / (double)ctxSwitch.size()));
1:         }
1: 
1:         if (userTime.size() > 0) {
1:             val = PerformanceStatisticsUtil.getSum(userTime);
1:             summary.put(KEY_USER_TIME, String.valueOf(val));
1:             summary.put(KEY_AVE_USER_TIME, String.valueOf((double)val / (double)userTime.size()));
1:         }
1: 
1:         if (sysTime.size() > 0) {
1:             val = PerformanceStatisticsUtil.getSum(sysTime);
1:             summary.put(KEY_SYS_TIME, String.valueOf(val));
1:             summary.put(KEY_AVE_SYS_TIME, String.valueOf((double)val / (double)sysTime.size()));
1:         }
1: 
1:         if (idleTime.size() > 0) {
1:             val = PerformanceStatisticsUtil.getSum(idleTime);
1:             summary.put(KEY_IDLE_TIME, String.valueOf(val));
1:             summary.put(KEY_AVE_IDLE_TIME, String.valueOf((double)val / (double)idleTime.size()));
1:         }
1: 
1:         if (waitTime.size() > 0) {
1:             val = PerformanceStatisticsUtil.getSum(waitTime);
1:             summary.put(KEY_WAIT_TIME, String.valueOf(val));
1:             summary.put(KEY_AVE_WAIT_TIME, String.valueOf((double)val / (double)waitTime.size()));
1:         }
1: 
1:         if (summary.size() > 0) {
1:             return summary;
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     protected void addToCpuList(String key, String val) {
1:         if (key.equals(NAME_BLOCK_RECV)) {
1:             blockRecv.add(Long.valueOf(val));
1:         } else if (key.equals(NAME_BLOCK_SENT)) {
1:             blockSent.add(Long.valueOf(val));
1:         } else if (key.equals(NAME_CTX_SWITCH)) {
1:             ctxSwitch.add(Long.valueOf(val));
1:         } else if (key.equals(NAME_USER_TIME)) {
1:             userTime.add(Long.valueOf(val));
1:         } else if (key.equals(NAME_SYS_TIME)) {
1:             sysTime.add(Long.valueOf(val));
1:         } else if (key.equals(NAME_IDLE_TIME)) {
1:             idleTime.add(Long.valueOf(val));
1:         } else if (key.equals(NAME_WAIT_TIME)) {
1:             waitTime.add(Long.valueOf(val));
1:         } else {
0:             log.warn("Unrecognized CPU data. " + key + "=" + val);
1:         }
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.tool.reports.plugins;
0: import java.util.Map;
0: public class CpuReportPlugin implements ReportPlugin {
0:     public void handleCsvData(String csvData) {
0:         // Do nothing
0:     }
0: 
0:     public Map getSummary() {
0:         return null; // Do nothing
0:     }
commit:77c889d
/////////////////////////////////////////////////////////////////////////
commit:5f5bff6
/////////////////////////////////////////////////////////////////////////
0: import java.util.Properties;
0:     public Properties getSettings();
commit:3a92ec3
/////////////////////////////////////////////////////////////////////////
0:     public String getClientName();
commit:29eef80
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: 
0:     public Map  getClientSettings();
commit:8afd2f6
/////////////////////////////////////////////////////////////////////////
0:     public void reset();
commit:e45af98
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool;
0: 
0: public interface PerfMeasurable {
0:     public long getThroughput();
0:     public long getInterval();
0:     public long getDuration();
0:     public long getRampUpTime();
0:     public long getRampDownTime();
0:     public void setPerfEventListener(PerfEventListener listener);
0:     public PerfEventListener getPerfEventListener();
0: }
============================================================================