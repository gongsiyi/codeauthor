1:90b808a: /*
1:90b808a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:90b808a:  * contributor license agreements.  See the NOTICE file distributed with
1:90b808a:  * this work for additional information regarding copyright ownership.
1:90b808a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:90b808a:  * (the "License"); you may not use this file except in compliance with
1:90b808a:  * the License.  You may obtain a copy of the License at
1:90b808a:  *
1:90b808a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:90b808a:  *
1:90b808a:  * Unless required by applicable law or agreed to in writing, software
1:90b808a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90b808a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90b808a:  * See the License for the specific language governing permissions and
1:90b808a:  * limitations under the License.
1:90b808a:  */
1:90b808a: package org.apache.activemq.transport.failover;
1:90b808a: 
1:90b808a: import static org.junit.Assert.assertEquals;
1:90b808a: import static org.junit.Assert.assertTrue;
1:90b808a: import static org.junit.Assert.fail;
1:90b808a: 
1:90b808a: import java.io.IOException;
1:90b808a: import java.net.ServerSocket;
1:90b808a: import java.util.concurrent.CountDownLatch;
1:90b808a: import java.util.concurrent.TimeUnit;
1:90b808a: import java.util.concurrent.atomic.AtomicLong;
1:90b808a: 
1:90b808a: import javax.jms.JMSSecurityException;
1:90b808a: import javax.jms.Queue;
1:90b808a: import javax.jms.Session;
1:90b808a: import javax.net.ServerSocketFactory;
1:90b808a: 
1:90b808a: import org.apache.activemq.ActiveMQConnection;
1:90b808a: import org.apache.activemq.ActiveMQConnectionFactory;
1:90b808a: import org.apache.activemq.broker.BrokerPlugin;
1:90b808a: import org.apache.activemq.broker.BrokerPluginSupport;
1:90b808a: import org.apache.activemq.broker.BrokerService;
1:90b808a: import org.apache.activemq.broker.ConnectionContext;
1:90b808a: import org.apache.activemq.broker.LinkStealingTest;
1:90b808a: import org.apache.activemq.broker.region.Subscription;
1:90b808a: import org.apache.activemq.command.ConsumerInfo;
1:90b808a: import org.apache.activemq.command.ProducerInfo;
1:90b808a: import org.apache.activemq.transport.TransportListener;
1:90b808a: import org.junit.After;
1:90b808a: import org.junit.Before;
1:90b808a: import org.junit.Test;
1:90b808a: import org.slf4j.Logger;
1:90b808a: import org.slf4j.LoggerFactory;
1:90b808a: 
1:90b808a: /**
1:90b808a:  * Test state tracking operations during failover
1:90b808a:  */
1:90b808a: public class FailoverStateTrackingTest {
1:90b808a: 
1:90b808a:     private static final Logger LOG = LoggerFactory.getLogger(LinkStealingTest.class);
1:90b808a: 
1:90b808a:     private BrokerService brokerService;
1:90b808a: 
1:90b808a:     private int serverPort;
1:90b808a:     private ActiveMQConnectionFactory cf;
1:90b808a:     private String connectionURI;
1:90b808a:     private ActiveMQConnection connection;
1:90b808a: 
1:90b808a:     private final AtomicLong consumerCounter = new AtomicLong();
1:90b808a:     private final AtomicLong producerCounter = new AtomicLong();
1:90b808a: 
1:90b808a:     @Before
1:90b808a:     public void setUp() throws Exception {
1:90b808a:         serverPort = getProxyPort();
1:90b808a:         createAuthenticatingBroker();
1:90b808a: 
1:90b808a:         connectionURI = "failover:(tcp://0.0.0.0:" + serverPort + ")?jms.watchTopicAdvisories=false";
1:90b808a:         cf = new ActiveMQConnectionFactory(connectionURI);
1:90b808a: 
1:90b808a:         brokerService.start();
1:90b808a:     }
1:90b808a: 
1:90b808a:     @After
1:90b808a:     public void tearDown() throws Exception {
1:90b808a:         if (connection != null) {
1:90b808a:             try {
1:90b808a:                 connection.close();
1:90b808a:             } catch (Exception e) {}
1:90b808a:             connection = null;
1:90b808a:         }
1:90b808a: 
1:90b808a:         if (brokerService != null) {
1:90b808a:             brokerService.stop();
1:90b808a:             brokerService = null;
1:90b808a:         }
1:90b808a:     }
1:90b808a: 
1:90b808a:     @Test
1:90b808a:     public void testUnauthorizedConsumerIsNotRecreated() throws Exception {
1:90b808a:         final CountDownLatch connectionDropped = new CountDownLatch(1);
1:90b808a:         final CountDownLatch connectionRestored = new CountDownLatch(1);
1:90b808a: 
1:90b808a:         connection = (ActiveMQConnection) cf.createConnection();
1:90b808a:         connection.addTransportListener(new TransportListener() {
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void transportResumed() {
1:90b808a:                 if (connectionDropped.getCount() == 0) {
1:90b808a:                     connectionRestored.countDown();
1:90b808a:                 }
1:90b808a:             }
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void transportInterupted() {
1:90b808a:                 connectionDropped.countDown();
1:90b808a:             }
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void onException(IOException error) {
1:90b808a:             }
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void onCommand(Object command) {
1:90b808a:             }
1:90b808a:         });
1:90b808a: 
1:90b808a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:90b808a:         Queue queue = session.createQueue("testQueue");
1:90b808a:         try {
1:90b808a:             session.createConsumer(queue);
1:90b808a:             fail("Should have failed to create this consumer");
1:90b808a:         } catch (JMSSecurityException ex) {}
1:90b808a: 
1:90b808a:         brokerService.stop();
1:90b808a:         brokerService.waitUntilStopped();
1:90b808a: 
1:90b808a:         assertTrue("Connection should be interrupted", connectionDropped.await(10, TimeUnit.SECONDS));
1:90b808a: 
1:90b808a:         createTrackingBroker();
1:90b808a:         brokerService.start();
1:90b808a: 
1:90b808a:         assertTrue("Connection should be reconnected", connectionRestored.await(10, TimeUnit.SECONDS));
1:90b808a: 
1:90b808a:         try {
1:90b808a:             session.createConsumer(queue);
1:90b808a:         } catch (JMSSecurityException ex) {
1:90b808a:             fail("Should have been able to create this consumer");
1:90b808a:         }
1:90b808a: 
1:90b808a:         assertEquals(1, consumerCounter.get());
1:90b808a:     }
1:90b808a: 
1:90b808a:     @Test
1:90b808a:     public void testUnauthorizedProducerIsNotRecreated() throws Exception {
1:90b808a:         final CountDownLatch connectionDropped = new CountDownLatch(1);
1:90b808a:         final CountDownLatch connectionRestored = new CountDownLatch(1);
1:90b808a: 
1:90b808a:         connection = (ActiveMQConnection) cf.createConnection();
1:90b808a:         connection.addTransportListener(new TransportListener() {
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void transportResumed() {
1:90b808a:                 LOG.debug("Connection restored");
1:90b808a:                 if (connectionDropped.getCount() == 0) {
1:90b808a:                     connectionRestored.countDown();
1:90b808a:                 }
1:90b808a:             }
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void transportInterupted() {
1:90b808a:                 LOG.debug("Connection interrupted");
1:90b808a:                 connectionDropped.countDown();
1:90b808a:             }
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void onException(IOException error) {
1:90b808a:             }
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void onCommand(Object command) {
1:90b808a:             }
1:90b808a:         });
1:90b808a: 
1:90b808a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:90b808a:         Queue queue = session.createQueue("testQueue");
1:90b808a:         try {
1:90b808a:             session.createProducer(queue);
1:90b808a:             fail("Should have failed to create this producer");
1:90b808a:         } catch (JMSSecurityException ex) {}
1:90b808a: 
1:90b808a:         brokerService.stop();
1:90b808a:         brokerService.waitUntilStopped();
1:90b808a: 
1:90b808a:         assertTrue("Connection should be interrupted", connectionDropped.await(10, TimeUnit.SECONDS));
1:90b808a: 
1:90b808a:         createTrackingBroker();
1:90b808a:         brokerService.start();
1:90b808a: 
1:90b808a:         assertTrue("Connection should be reconnected", connectionRestored.await(10, TimeUnit.SECONDS));
1:90b808a: 
1:90b808a:         try {
1:90b808a:             session.createProducer(queue);
1:90b808a:         } catch (JMSSecurityException ex) {
1:90b808a:             fail("Should have been able to create this producer");
1:90b808a:         }
1:90b808a: 
1:90b808a:         assertEquals(1, producerCounter.get());
1:90b808a:     }
1:90b808a: 
1:90b808a:     private void createAuthenticatingBroker() throws Exception {
1:90b808a:         brokerService = new BrokerService();
1:90b808a:         brokerService.setPersistent(false);
1:90b808a:         brokerService.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:90b808a:                 throw new SecurityException();
1:90b808a:             }
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:90b808a:                 throw new SecurityException();
1:90b808a:             }
1:90b808a:         }});
1:90b808a: 
1:90b808a:         brokerService.addConnector("tcp://0.0.0.0:" + serverPort);
1:90b808a:     }
1:90b808a: 
1:90b808a:     private void createTrackingBroker() throws Exception {
1:90b808a:         consumerCounter.set(0);
1:90b808a:         producerCounter.set(0);
1:90b808a: 
1:90b808a:         brokerService = new BrokerService();
1:90b808a:         brokerService.setPersistent(false);
1:90b808a:         brokerService.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:90b808a:                 consumerCounter.incrementAndGet();
1:90b808a:                 return getNext().addConsumer(context, info);
1:90b808a:             }
1:90b808a: 
1:90b808a:             @Override
1:90b808a:             public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:90b808a:                 producerCounter.incrementAndGet();
1:90b808a:                 getNext().addProducer(context, info);
1:90b808a:             }
1:90b808a: 
1:90b808a:         }});
1:90b808a: 
1:90b808a:         brokerService.addConnector("tcp://0.0.0.0:" + serverPort);
1:90b808a:     }
1:90b808a: 
1:90b808a:     protected int getProxyPort() {
1:90b808a:         int proxyPort = 61616;
1:90b808a: 
1:90b808a:         try (ServerSocket ss = ServerSocketFactory.getDefault().createServerSocket(0)) {
1:90b808a:             proxyPort = ss.getLocalPort();
1:90b808a:         } catch (IOException e) {
1:90b808a:         }
1:90b808a: 
1:90b808a:         return proxyPort;
1:90b808a:     }
1:90b808a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:90b808a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.net.ServerSocket;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.JMSSecurityException;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.net.ServerSocketFactory;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.LinkStealingTest;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.transport.TransportListener;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test state tracking operations during failover
1:  */
1: public class FailoverStateTrackingTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(LinkStealingTest.class);
1: 
1:     private BrokerService brokerService;
1: 
1:     private int serverPort;
1:     private ActiveMQConnectionFactory cf;
1:     private String connectionURI;
1:     private ActiveMQConnection connection;
1: 
1:     private final AtomicLong consumerCounter = new AtomicLong();
1:     private final AtomicLong producerCounter = new AtomicLong();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         serverPort = getProxyPort();
1:         createAuthenticatingBroker();
1: 
1:         connectionURI = "failover:(tcp://0.0.0.0:" + serverPort + ")?jms.watchTopicAdvisories=false";
1:         cf = new ActiveMQConnectionFactory(connectionURI);
1: 
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Exception e) {}
1:             connection = null;
1:         }
1: 
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService = null;
1:         }
1:     }
1: 
1:     @Test
1:     public void testUnauthorizedConsumerIsNotRecreated() throws Exception {
1:         final CountDownLatch connectionDropped = new CountDownLatch(1);
1:         final CountDownLatch connectionRestored = new CountDownLatch(1);
1: 
1:         connection = (ActiveMQConnection) cf.createConnection();
1:         connection.addTransportListener(new TransportListener() {
1: 
1:             @Override
1:             public void transportResumed() {
1:                 if (connectionDropped.getCount() == 0) {
1:                     connectionRestored.countDown();
1:                 }
1:             }
1: 
1:             @Override
1:             public void transportInterupted() {
1:                 connectionDropped.countDown();
1:             }
1: 
1:             @Override
1:             public void onException(IOException error) {
1:             }
1: 
1:             @Override
1:             public void onCommand(Object command) {
1:             }
1:         });
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("testQueue");
1:         try {
1:             session.createConsumer(queue);
1:             fail("Should have failed to create this consumer");
1:         } catch (JMSSecurityException ex) {}
1: 
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1: 
1:         assertTrue("Connection should be interrupted", connectionDropped.await(10, TimeUnit.SECONDS));
1: 
1:         createTrackingBroker();
1:         brokerService.start();
1: 
1:         assertTrue("Connection should be reconnected", connectionRestored.await(10, TimeUnit.SECONDS));
1: 
1:         try {
1:             session.createConsumer(queue);
1:         } catch (JMSSecurityException ex) {
1:             fail("Should have been able to create this consumer");
1:         }
1: 
1:         assertEquals(1, consumerCounter.get());
1:     }
1: 
1:     @Test
1:     public void testUnauthorizedProducerIsNotRecreated() throws Exception {
1:         final CountDownLatch connectionDropped = new CountDownLatch(1);
1:         final CountDownLatch connectionRestored = new CountDownLatch(1);
1: 
1:         connection = (ActiveMQConnection) cf.createConnection();
1:         connection.addTransportListener(new TransportListener() {
1: 
1:             @Override
1:             public void transportResumed() {
1:                 LOG.debug("Connection restored");
1:                 if (connectionDropped.getCount() == 0) {
1:                     connectionRestored.countDown();
1:                 }
1:             }
1: 
1:             @Override
1:             public void transportInterupted() {
1:                 LOG.debug("Connection interrupted");
1:                 connectionDropped.countDown();
1:             }
1: 
1:             @Override
1:             public void onException(IOException error) {
1:             }
1: 
1:             @Override
1:             public void onCommand(Object command) {
1:             }
1:         });
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("testQueue");
1:         try {
1:             session.createProducer(queue);
1:             fail("Should have failed to create this producer");
1:         } catch (JMSSecurityException ex) {}
1: 
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1: 
1:         assertTrue("Connection should be interrupted", connectionDropped.await(10, TimeUnit.SECONDS));
1: 
1:         createTrackingBroker();
1:         brokerService.start();
1: 
1:         assertTrue("Connection should be reconnected", connectionRestored.await(10, TimeUnit.SECONDS));
1: 
1:         try {
1:             session.createProducer(queue);
1:         } catch (JMSSecurityException ex) {
1:             fail("Should have been able to create this producer");
1:         }
1: 
1:         assertEquals(1, producerCounter.get());
1:     }
1: 
1:     private void createAuthenticatingBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1: 
1:             @Override
1:             public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:                 throw new SecurityException();
1:             }
1: 
1:             @Override
1:             public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:                 throw new SecurityException();
1:             }
1:         }});
1: 
1:         brokerService.addConnector("tcp://0.0.0.0:" + serverPort);
1:     }
1: 
1:     private void createTrackingBroker() throws Exception {
1:         consumerCounter.set(0);
1:         producerCounter.set(0);
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setPlugins(new BrokerPlugin[] { new BrokerPluginSupport() {
1: 
1:             @Override
1:             public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:                 consumerCounter.incrementAndGet();
1:                 return getNext().addConsumer(context, info);
1:             }
1: 
1:             @Override
1:             public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:                 producerCounter.incrementAndGet();
1:                 getNext().addProducer(context, info);
1:             }
1: 
1:         }});
1: 
1:         brokerService.addConnector("tcp://0.0.0.0:" + serverPort);
1:     }
1: 
1:     protected int getProxyPort() {
1:         int proxyPort = 61616;
1: 
1:         try (ServerSocket ss = ServerSocketFactory.getDefault().createServerSocket(0)) {
1:             proxyPort = ss.getLocalPort();
1:         } catch (IOException e) {
1:         }
1: 
1:         return proxyPort;
1:     }
1: }
============================================================================