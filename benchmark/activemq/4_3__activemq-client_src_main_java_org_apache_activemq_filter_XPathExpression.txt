1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
8:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.lang.reflect.Constructor;
1:d29ca2a: import java.lang.reflect.InvocationTargetException;
1:b9696ac: import java.util.ArrayList;
1:b9696ac: import java.util.List;
1:b9696ac: import java.util.Map;
1:b9696ac: import java.util.Properties;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:b9696ac: import javax.xml.parsers.DocumentBuilder;
1:b9696ac: import javax.xml.parsers.DocumentBuilderFactory;
1:b9696ac: import javax.xml.parsers.ParserConfigurationException;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.util.JMSExceptionSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Used to evaluate an XPath Expression in a JMS selector.
1:d29ca2a:  */
1:d29ca2a: public final class XPathExpression implements BooleanExpression {
1:d29ca2a: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(XPathExpression.class);
1:d29ca2a:     private static final String EVALUATOR_SYSTEM_PROPERTY = "org.apache.activemq.XPathEvaluatorClassName";
1:2c82258:     private static final String DEFAULT_EVALUATOR_CLASS_NAME = "org.apache.activemq.filter.XalanXPathEvaluator";
1:b9696ac:     public static final String DOCUMENT_BUILDER_FACTORY_FEATURE = "org.apache.activemq.documentBuilderFactory.feature";
1:f812e34: 
1:d29ca2a:     private static final Constructor EVALUATOR_CONSTRUCTOR;
1:b9696ac:     private static DocumentBuilder builder = null;
1:f812e34: 
1:d29ca2a:     static {
1:f812e34:         String cn = System.getProperty(EVALUATOR_SYSTEM_PROPERTY, DEFAULT_EVALUATOR_CLASS_NAME);
1:d29ca2a:         Constructor m = null;
1:d29ca2a:         try {
1:d29ca2a:             try {
1:d29ca2a:                 m = getXPathEvaluatorConstructor(cn);
1:b9696ac:                 DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
1:b9696ac:                 builderFactory.setNamespaceAware(true);
1:b9696ac:                 builderFactory.setIgnoringElementContentWhitespace(true);
1:b9696ac:                 builderFactory.setIgnoringComments(true);
1:b9696ac:                 try {
1:b9696ac:                     // set some reasonable defaults
1:b9696ac:                     builderFactory.setFeature("http://xml.org/sax/features/external-general-entities", false);
1:b9696ac:                     builderFactory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
1:b9696ac:                     builderFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
1:b9696ac:                 } catch (ParserConfigurationException e) {
1:b9696ac:                     LOG.warn("Error setting document builder factory feature", e);
1:b9696ac:                 }
1:b9696ac:                 // setup the feature from the system property
1:b9696ac:                 setupFeatures(builderFactory);
1:b9696ac:                 builder = builderFactory.newDocumentBuilder();
1:d29ca2a:             } catch (Throwable e) {
1:ecf89a6:                 LOG.warn("Invalid " + XPathEvaluator.class.getName() + " implementation: " + cn + ", reason: " + e, e);
1:d29ca2a:                 cn = DEFAULT_EVALUATOR_CLASS_NAME;
1:d29ca2a:                 try {
1:d29ca2a:                     m = getXPathEvaluatorConstructor(cn);
1:d29ca2a:                 } catch (Throwable e2) {
1:fc00993:                     LOG.error("Default XPath evaluator could not be loaded", e);
1:86cbdfd:                 }
5:d29ca2a:             }
1:d29ca2a:         } finally {
1:d29ca2a:             EVALUATOR_CONSTRUCTOR = m;
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     private final String xpath;
1:d29ca2a:     private final XPathEvaluator evaluator;
1:f812e34: 
1:fc00993:     public static interface XPathEvaluator {
1:fc00993:         boolean evaluate(Message message) throws JMSException;
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     XPathExpression(String xpath) {
1:d29ca2a:         this.xpath = xpath;
1:d29ca2a:         this.evaluator = createEvaluator(xpath);
1:d29ca2a:     }
1:d29ca2a: 
1:ecf89a6:     private static Constructor getXPathEvaluatorConstructor(String cn) throws ClassNotFoundException, SecurityException, NoSuchMethodException {
1:ecf89a6:         Class c = XPathExpression.class.getClassLoader().loadClass(cn);
1:ecf89a6:         if (!XPathEvaluator.class.isAssignableFrom(c)) {
1:ecf89a6:             throw new ClassCastException("" + c + " is not an instance of " + XPathEvaluator.class);
1:ecf89a6:         }
1:b9696ac:         return c.getConstructor(new Class[] {String.class, DocumentBuilder.class});
1:b9696ac:     }
1:b9696ac: 
1:b9696ac:     protected static void setupFeatures(DocumentBuilderFactory factory) {
1:b9696ac:         Properties properties = System.getProperties();
1:b9696ac:         List<String> features = new ArrayList<String>();
1:b9696ac:         for (Map.Entry<Object, Object> prop : properties.entrySet()) {
1:b9696ac:             String key = (String) prop.getKey();
1:b9696ac:             if (key.startsWith(DOCUMENT_BUILDER_FACTORY_FEATURE)) {
1:b9696ac:                 String uri = key.split(DOCUMENT_BUILDER_FACTORY_FEATURE + ":")[1];
1:b9696ac:                 Boolean value = Boolean.valueOf((String)prop.getValue());
1:b9696ac:                 try {
1:b9696ac:                     factory.setFeature(uri, value);
1:b9696ac:                     features.add("feature " + uri + " value " + value);
1:b9696ac:                 } catch (ParserConfigurationException e) {
1:b9696ac:                     LOG.warn("DocumentBuilderFactory doesn't support the feature {} with value {}, due to {}.", new Object[]{uri, value, e});
1:b9696ac:                 }
1:b9696ac:             }
1:b9696ac:         }
1:b9696ac:         if (features.size() > 0) {
1:b9696ac:             StringBuffer featureString = new StringBuffer();
1:b9696ac:             // just log the configured feature
1:b9696ac:             for (String feature : features) {
1:b9696ac:                 if (featureString.length() != 0) {
1:b9696ac:                     featureString.append(", ");
1:b9696ac:                 }
1:b9696ac:                 featureString.append(feature);
1:b9696ac:             }
1:b9696ac:         }
1:b9696ac: 
1:ecf89a6:     }
1:ecf89a6: 
1:d29ca2a:     private XPathEvaluator createEvaluator(String xpath2) {
1:d29ca2a:         try {
1:b9696ac:             return (XPathEvaluator)EVALUATOR_CONSTRUCTOR.newInstance(new Object[] {xpath, builder});
1:d29ca2a:         } catch (InvocationTargetException e) {
1:d29ca2a:             Throwable cause = e.getCause();
1:f812e34:             if (cause instanceof RuntimeException) {
1:d29ca2a:                 throw (RuntimeException)cause;
1:d29ca2a:             }
1:f812e34:             throw new RuntimeException("Invalid XPath Expression: " + xpath + " reason: " + e.getMessage(), e);
1:d29ca2a:         } catch (Throwable e) {
1:f812e34:             throw new RuntimeException("Invalid XPath Expression: " + xpath + " reason: " + e.getMessage(), e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:         try {
1:ecf89a6:             if (message.isDropped()) {
1:d29ca2a:                 return null;
1:ecf89a6:             }
1:d29ca2a:             return evaluator.evaluate(message.getMessage()) ? Boolean.TRUE : Boolean.FALSE;
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.create(e);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String toString() {
1:f812e34:         return "XPATH " + ConstantExpression.encodeString(xpath);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @param message
1:d29ca2a:      * @return true if the expression evaluates to Boolean.TRUE.
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     public boolean matches(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:         Object object = evaluate(message);
1:f812e34:         return object != null && object == Boolean.TRUE;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:b9696ac
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: import javax.xml.parsers.DocumentBuilder;
1: import javax.xml.parsers.DocumentBuilderFactory;
1: import javax.xml.parsers.ParserConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:     public static final String DOCUMENT_BUILDER_FACTORY_FEATURE = "org.apache.activemq.documentBuilderFactory.feature";
1:     private static DocumentBuilder builder = null;
/////////////////////////////////////////////////////////////////////////
1:                 DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
1:                 builderFactory.setNamespaceAware(true);
1:                 builderFactory.setIgnoringElementContentWhitespace(true);
1:                 builderFactory.setIgnoringComments(true);
1:                 try {
1:                     // set some reasonable defaults
1:                     builderFactory.setFeature("http://xml.org/sax/features/external-general-entities", false);
1:                     builderFactory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
1:                     builderFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
1:                 } catch (ParserConfigurationException e) {
1:                     LOG.warn("Error setting document builder factory feature", e);
1:                 }
1:                 // setup the feature from the system property
1:                 setupFeatures(builderFactory);
1:                 builder = builderFactory.newDocumentBuilder();
/////////////////////////////////////////////////////////////////////////
1:         return c.getConstructor(new Class[] {String.class, DocumentBuilder.class});
1:     }
1: 
1:     protected static void setupFeatures(DocumentBuilderFactory factory) {
1:         Properties properties = System.getProperties();
1:         List<String> features = new ArrayList<String>();
1:         for (Map.Entry<Object, Object> prop : properties.entrySet()) {
1:             String key = (String) prop.getKey();
1:             if (key.startsWith(DOCUMENT_BUILDER_FACTORY_FEATURE)) {
1:                 String uri = key.split(DOCUMENT_BUILDER_FACTORY_FEATURE + ":")[1];
1:                 Boolean value = Boolean.valueOf((String)prop.getValue());
1:                 try {
1:                     factory.setFeature(uri, value);
1:                     features.add("feature " + uri + " value " + value);
1:                 } catch (ParserConfigurationException e) {
1:                     LOG.warn("DocumentBuilderFactory doesn't support the feature {} with value {}, due to {}.", new Object[]{uri, value, e});
1:                 }
1:             }
1:         }
1:         if (features.size() > 0) {
1:             StringBuffer featureString = new StringBuffer();
1:             // just log the configured feature
1:             for (String feature : features) {
1:                 if (featureString.length() != 0) {
1:                     featureString.append(", ");
1:                 }
1:                 featureString.append(feature);
1:             }
1:         }
1: 
1:             return (XPathEvaluator)EVALUATOR_CONSTRUCTOR.newInstance(new Object[] {xpath, builder});
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:2c82258
/////////////////////////////////////////////////////////////////////////
1:     private static final String DEFAULT_EVALUATOR_CLASS_NAME = "org.apache.activemq.filter.XalanXPathEvaluator";
commit:9a8f6e4
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Invalid " + XPathEvaluator.class.getName() + " implementation: " + cn + ", reason: " + e, e);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static Constructor getXPathEvaluatorConstructor(String cn) throws ClassNotFoundException, SecurityException, NoSuchMethodException {
1:         Class c = XPathExpression.class.getClassLoader().loadClass(cn);
1:         if (!XPathEvaluator.class.isAssignableFrom(c)) {
1:             throw new ClassCastException("" + c + " is not an instance of " + XPathEvaluator.class);
1:         }
0:         return c.getConstructor(new Class[] {String.class});
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (message.isDropped()) {
1:             }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(XPathExpression.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Invalid " + XPathEvaluator.class.getName() + " implementation: " + cn
1:                     LOG.error("Default XPath evaluator could not be loaded", e);
/////////////////////////////////////////////////////////////////////////
1:     public static interface XPathEvaluator {
1:         boolean evaluate(Message message) throws JMSException;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     private static final String DEFAULT_EVALUATOR_CLASS_NAME = XalanXPathEvaluator.class.getName();
1: 
1: 
1:         String cn = System.getProperty(EVALUATOR_SYSTEM_PROPERTY, DEFAULT_EVALUATOR_CLASS_NAME);
0:                 log.warn("Invalid " + XPathEvaluator.class.getName() + " implementation: " + cn
0:                          + ", reason: " + e, e);
0:                     log.error("Default XPath evaluator could not be loaded", e);
/////////////////////////////////////////////////////////////////////////
0:     private static Constructor getXPathEvaluatorConstructor(String cn) throws ClassNotFoundException,
0:         SecurityException, NoSuchMethodException {
0:         if (!XPathEvaluator.class.isAssignableFrom(c)) {
0:             throw new ClassCastException("" + c + " is not an instance of " + XPathEvaluator.class);
0:         return c.getConstructor(new Class[] {String.class});
1: 
1: 
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:             return (XPathEvaluator)EVALUATOR_CONSTRUCTOR.newInstance(new Object[] {xpath});
1:             if (cause instanceof RuntimeException) {
1:             throw new RuntimeException("Invalid XPath Expression: " + xpath + " reason: " + e.getMessage(), e);
1:             throw new RuntimeException("Invalid XPath Expression: " + xpath + " reason: " + e.getMessage(), e);
0:             if (message.isDropped())
/////////////////////////////////////////////////////////////////////////
1:         return "XPATH " + ConstantExpression.encodeString(xpath);
1: 
/////////////////////////////////////////////////////////////////////////
1:         return object != null && object == Boolean.TRUE;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.io.IOException;
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.InvocationTargetException;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.util.JMSExceptionSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Used to evaluate an XPath Expression in a JMS selector.
1:  */
1: public final class XPathExpression implements BooleanExpression {
1: 
0:     private static final Log log = LogFactory.getLog(XPathExpression.class);
1:     private static final String EVALUATOR_SYSTEM_PROPERTY = "org.apache.activemq.XPathEvaluatorClassName";
0:     private static final String DEFAULT_EVALUATOR_CLASS_NAME=XalanXPathEvaluator.class.getName();
1:     
1:     private static final Constructor EVALUATOR_CONSTRUCTOR;
1:     
1:     static {
0:         String cn = System.getProperty(EVALUATOR_SYSTEM_PROPERTY, DEFAULT_EVALUATOR_CLASS_NAME);        
1:         Constructor m = null;
1:         try {
1:             try {
1:                 m = getXPathEvaluatorConstructor(cn);
1:             } catch (Throwable e) {
0:                 log.warn("Invalid "+XPathEvaluator.class.getName()+" implementation: "+cn+", reason: "+e,e);
1:                 cn = DEFAULT_EVALUATOR_CLASS_NAME;
1:                 try {
1:                     m = getXPathEvaluatorConstructor(cn);
1:                 } catch (Throwable e2) {
0:                     log.error("Default XPath evaluator could not be loaded",e);
1:                 }
1:             }
1:         } finally {
1:             EVALUATOR_CONSTRUCTOR = m;
1:         }
1:     }
1: 
0:     private static Constructor getXPathEvaluatorConstructor(String cn) throws ClassNotFoundException, SecurityException, NoSuchMethodException {
0:         Class c = XPathExpression.class.getClassLoader().loadClass(cn);
0:         if( !XPathEvaluator.class.isAssignableFrom(c) ) {
0:             throw new ClassCastException(""+c+" is not an instance of "+XPathEvaluator.class);
1:         }
0:         return c.getConstructor(new Class[]{String.class});
1:     }
1:     
1:     private final String xpath;
1:     private final XPathEvaluator evaluator;
1:     
0:     static public interface XPathEvaluator {
0:         public boolean evaluate(Message message) throws JMSException;
1:     }    
1:     
1:     XPathExpression(String xpath) {
1:         this.xpath = xpath;
1:         this.evaluator = createEvaluator(xpath);
1:     }
1: 
1:     private XPathEvaluator createEvaluator(String xpath2) {
1:         try {
0:             return (XPathEvaluator)EVALUATOR_CONSTRUCTOR.newInstance(new Object[]{xpath});
1:         } catch (InvocationTargetException e) {
1:             Throwable cause = e.getCause();
0:             if( cause instanceof RuntimeException ) {
1:                 throw (RuntimeException)cause;
1:             }
0:             throw new RuntimeException("Invalid XPath Expression: "+xpath+" reason: "+e.getMessage(), e);
1:         } catch (Throwable e) {
0:             throw new RuntimeException("Invalid XPath Expression: "+xpath+" reason: "+e.getMessage(), e);
1:         }
1:     }
1: 
1:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:         try {
0:             if( message.isDropped() )
1:                 return null;
1:             return evaluator.evaluate(message.getMessage()) ? Boolean.TRUE : Boolean.FALSE;
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1: 
1:     }
1: 
1:     public String toString() {
0:         return "XPATH "+ConstantExpression.encodeString(xpath);
1:     }
1:     
1:     /**
1:      * @param message
1:      * @return true if the expression evaluates to Boolean.TRUE.
1:      * @throws JMSException
1:      */
1:     public boolean matches(MessageEvaluationContext message) throws JMSException {
1:         Object object = evaluate(message);
0:         return object!=null && object==Boolean.TRUE;            
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(XPathExpression.class);
============================================================================