1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.selector;
1:0fd46ce: 
1:d29ca2a: import javax.jms.InvalidSelectorException;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:4743a20: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTextMessage;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.filter.BooleanExpression;
1:d29ca2a: import org.apache.activemq.filter.MessageEvaluationContext;
1:0fd46ce: 
1:7b20756: import junit.framework.TestCase;
1:7b20756: 
1:d29ca2a: /**
1:4743a20:  *
1:d29ca2a:  */
1:d29ca2a: public class SelectorTest extends TestCase {
1:74a7a8b: 
1:d29ca2a:     public void testBooleanSelector() throws Exception {
1:d29ca2a:         Message message = createMessage();
21:d29ca2a: 
1:d29ca2a:         assertSelector(message, "(trueProp OR falseProp) AND trueProp", true);
1:d29ca2a:         assertSelector(message, "(trueProp OR falseProp) AND falseProp", false);
1:d1e35e6:         assertSelector(message, "trueProp", true);
1:74a7a8b: 
3:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testXPathSelectors() throws Exception {
1:d29ca2a:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:74a7a8b: 
1:d29ca2a:         message.setJMSType("xml");
1:42d91a3:         message.setText("<root><a key='first' num='1'/><b key='second' num='2'>b</b></root>");
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "XPATH 'root/a'", true);
1:d29ca2a:         assertSelector(message, "XPATH '//root/b'", true);
1:d29ca2a:         assertSelector(message, "XPATH 'root/c'", false);
1:42d91a3:         assertSelector(message, "XPATH '//root/b/text()=\"b\"'", true);
1:42d91a3:         assertSelector(message, "XPATH '//root/b=\"b\"'", true);
1:42d91a3:         assertSelector(message, "XPATH '//root/b=\"c\"'", false);
1:42d91a3:         assertSelector(message, "XPATH '//root/b!=\"c\"'", true);
1:4743a20: 
1:d29ca2a:         assertSelector(message, "XPATH '//root/*[@key=''second'']'", true);
1:d29ca2a:         assertSelector(message, "XPATH '//root/*[@key=''third'']'", false);
1:d29ca2a:         assertSelector(message, "XPATH '//root/a[@key=''first'']'", true);
1:42d91a3:         assertSelector(message, "XPATH '//root/a[@num=1]'", true);
1:d29ca2a:         assertSelector(message, "XPATH '//root/a[@key=''second'']'", false);
1:4743a20: 
1:42d91a3:         assertSelector(message, "XPATH '/root/*[@key=''first'' or @key=''third'']'", true);
1:42d91a3:         assertSelector(message, "XPATH '//root/*[@key=''third'' or @key=''forth'']'", false);
1:d29ca2a: 
1:42d91a3:         assertSelector(message, "XPATH '/root/b=''b'' and /root/b[@key=''second'']'", true);
1:42d91a3:         assertSelector(message, "XPATH '/root/b=''b'' and /root/b[@key=''first'']'", false);
1:4743a20: 
1:42d91a3:         assertSelector(message, "XPATH 'not(//root/a)'", false);
1:42d91a3:         assertSelector(message, "XPATH 'not(//root/c)'", true);
1:42d91a3:         assertSelector(message, "XPATH '//root/a[not(@key=''first'')]'", false);
1:42d91a3:         assertSelector(message, "XPATH '//root/a[not(not(@key=''first''))]'", true);
1:4743a20: 
1:42d91a3:         assertSelector(message, "XPATH 'string(//root/b)'", true);
1:42d91a3:         assertSelector(message, "XPATH 'string(//root/a)'", false);
1:4743a20: 
1:42d91a3:         assertSelector(message, "XPATH 'sum(//@num) < 10'", true);
1:42d91a3:         assertSelector(message, "XPATH 'sum(//@num) > 10'", false);
1:4743a20: 
1:42d91a3:         assertSelector(message, "XPATH '//root/a[@num > 1]'", false);
1:4743a20:         assertSelector(message, "XPATH '//root/b[@num > 1]'", true);
1:4743a20: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testJMSPropertySelectors() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a:         message.setJMSType("selector-test");
1:d29ca2a:         message.setJMSMessageID("id:test:1:1:1:1");
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "JMSType = 'selector-test'", true);
1:d29ca2a:         assertSelector(message, "JMSType = 'crap'", false);
1:74a7a8b: 
1:d29ca2a:         assertSelector(message, "JMSMessageID = 'id:test:1:1:1:1'", true);
1:d29ca2a:         assertSelector(message, "JMSMessageID = 'id:not-test:1:1:1:1'", false);
1:74a7a8b: 
1:2026e6e:         message = createMessage();
1:2026e6e:         message.setJMSType("1001");
1:74a7a8b: 
1:2026e6e:         assertSelector(message, "JMSType='1001'", true);
1:2026e6e:         assertSelector(message, "JMSType='1001' OR JMSType='1002'", true);
1:2026e6e:         assertSelector(message, "JMSType = 'crap'", false);
1:d29ca2a:     }
1:74a7a8b: 
1:d29ca2a:     public void testBasicSelectors() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "name = 'James'", true);
1:d29ca2a:         assertSelector(message, "rank > 100", true);
1:d29ca2a:         assertSelector(message, "rank >= 123", true);
1:d29ca2a:         assertSelector(message, "rank >= 124", false);
1:74a7a8b: 
1:d29ca2a:     }
1:0fd46ce: 
1:0fd46ce:     public void testPropertyTypes() throws Exception {
1:0fd46ce:         Message message = createMessage();
1:0fd46ce:         assertSelector(message, "byteProp = 123", true);
1:0fd46ce:         assertSelector(message, "byteProp = 10", false);
1:c172b50:         assertSelector(message, "byteProp2 = 33", true);
1:c172b50:         assertSelector(message, "byteProp2 = 10", false);
1:0fd46ce: 
1:0fd46ce:         assertSelector(message, "shortProp = 123", true);
1:0fd46ce:         assertSelector(message, "shortProp = 10", false);
1:0fd46ce: 
1:0fd46ce:         assertSelector(message, "shortProp = 123", true);
1:0fd46ce:         assertSelector(message, "shortProp = 10", false);
1:0fd46ce: 
1:0fd46ce:         assertSelector(message, "intProp = 123", true);
1:0fd46ce:         assertSelector(message, "intProp = 10", false);
1:0fd46ce: 
1:0fd46ce:         assertSelector(message, "longProp = 123", true);
1:0fd46ce:         assertSelector(message, "longProp = 10", false);
1:0fd46ce: 
1:0fd46ce:         assertSelector(message, "floatProp = 123", true);
1:0fd46ce:         assertSelector(message, "floatProp = 10", false);
1:0fd46ce: 
1:0fd46ce:         assertSelector(message, "doubleProp = 123", true);
1:0fd46ce:         assertSelector(message, "doubleProp = 10", false);
1:0fd46ce:     }
1:74a7a8b: 
1:d29ca2a:     public void testAndSelectors() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "name = 'James' and rank < 200", true);
1:d29ca2a:         assertSelector(message, "name = 'James' and rank > 200", false);
1:d29ca2a:         assertSelector(message, "name = 'Foo' and rank < 200", false);
1:d29ca2a:         assertSelector(message, "unknown = 'Foo' and anotherUnknown < 200", false);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testOrSelectors() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "name = 'James' or rank < 200", true);
1:d29ca2a:         assertSelector(message, "name = 'James' or rank > 200", true);
1:d29ca2a:         assertSelector(message, "name = 'Foo' or rank < 200", true);
1:d29ca2a:         assertSelector(message, "name = 'Foo' or rank > 200", false);
1:d29ca2a:         assertSelector(message, "unknown = 'Foo' or anotherUnknown < 200", false);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testPlus() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "rank + 2 = 125", true);
1:d29ca2a:         assertSelector(message, "(rank + 2) = 125", true);
1:d29ca2a:         assertSelector(message, "125 = (rank + 2)", true);
1:d29ca2a:         assertSelector(message, "rank + version = 125", true);
1:d29ca2a:         assertSelector(message, "rank + 2 < 124", false);
1:d29ca2a:         assertSelector(message, "name + '!' = 'James!'", true);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testMinus() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "rank - 2 = 121", true);
1:d29ca2a:         assertSelector(message, "rank - version = 121", true);
1:d29ca2a:         assertSelector(message, "rank - 2 > 122", false);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testMultiply() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "rank * 2 = 246", true);
1:d29ca2a:         assertSelector(message, "rank * version = 246", true);
1:d29ca2a:         assertSelector(message, "rank * 2 < 130", false);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testDivide() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "rank / version = 61.5", true);
1:d29ca2a:         assertSelector(message, "rank / 3 > 100.0", false);
1:d29ca2a:         assertSelector(message, "rank / 3 > 100", false);
1:d29ca2a:         assertSelector(message, "version / 2 = 1", true);
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testBetween() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "rank between 100 and 150", true);
1:d29ca2a:         assertSelector(message, "rank between 10 and 120", false);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testIn() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "name in ('James', 'Bob', 'Gromit')", true);
1:d29ca2a:         assertSelector(message, "name in ('Bob', 'James', 'Gromit')", true);
1:d29ca2a:         assertSelector(message, "name in ('Gromit', 'Bob', 'James')", true);
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "name in ('Gromit', 'Bob', 'Cheddar')", false);
1:d29ca2a:         assertSelector(message, "name not in ('Gromit', 'Bob', 'Cheddar')", true);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testIsNull() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "dummy is null", true);
1:d29ca2a:         assertSelector(message, "dummy is not null", false);
1:d29ca2a:         assertSelector(message, "name is not null", true);
1:d29ca2a:         assertSelector(message, "name is null", false);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testLike() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a:         message.setStringProperty("modelClassId", "com.whatever.something.foo.bar");
1:d29ca2a:         message.setStringProperty("modelInstanceId", "170");
1:d29ca2a:         message.setStringProperty("modelRequestError", "abc");
1:d29ca2a:         message.setStringProperty("modelCorrelatedClientId", "whatever");
1:d29ca2a: 
1:74a7a8b:         assertSelector(message, "modelClassId LIKE 'com.whatever.something.%' AND modelInstanceId = '170' AND (modelRequestError IS NULL OR modelCorrelatedClientId = 'whatever')",
1:74a7a8b:                        true);
1:d29ca2a: 
1:d29ca2a:         message.setStringProperty("modelCorrelatedClientId", "shouldFailNow");
1:d29ca2a: 
1:74a7a8b:         assertSelector(message, "modelClassId LIKE 'com.whatever.something.%' AND modelInstanceId = '170' AND (modelRequestError IS NULL OR modelCorrelatedClientId = 'whatever')",
1:74a7a8b:                        false);
1:d29ca2a: 
1:d29ca2a:         message = createMessage();
1:d29ca2a:         message.setStringProperty("modelClassId", "com.whatever.something.foo.bar");
1:d29ca2a:         message.setStringProperty("modelInstanceId", "170");
1:d29ca2a:         message.setStringProperty("modelCorrelatedClientId", "shouldNotMatch");
1:d29ca2a: 
1:74a7a8b:         assertSelector(message, "modelClassId LIKE 'com.whatever.something.%' AND modelInstanceId = '170' AND (modelRequestError IS NULL OR modelCorrelatedClientId = 'whatever')",
1:74a7a8b:                        true);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Test cases from Mats Henricson
1:d29ca2a:      */
1:d29ca2a:     public void testMatsHenricsonUseCases() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a:         assertSelector(message, "SessionserverId=1870414179", false);
1:d29ca2a: 
1:d29ca2a:         message.setLongProperty("SessionserverId", 1870414179);
1:d29ca2a:         assertSelector(message, "SessionserverId=1870414179", true);
1:d29ca2a: 
1:d29ca2a:         message.setLongProperty("SessionserverId", 1234);
1:d29ca2a:         assertSelector(message, "SessionserverId=1870414179", false);
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')", false);
1:d29ca2a: 
1:d29ca2a:         message.setStringProperty("Command", "Cheese");
1:d29ca2a:         assertSelector(message, "Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')", true);
1:d29ca2a: 
1:d29ca2a:         message.setStringProperty("Command", "MirrorLobbyRequest");
1:d29ca2a:         assertSelector(message, "Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')", false);
1:d29ca2a:         message.setStringProperty("Command", "MirrorLobbyReply");
1:d29ca2a:         assertSelector(message, "Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')", false);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testFloatComparisons() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:74a7a8b: 
1:d29ca2a:         assertSelector(message, "1.0 < 1.1", true);
1:d29ca2a:         assertSelector(message, "-1.1 < 1.0", true);
1:d29ca2a:         assertSelector(message, "1.0E1 < 1.1E1", true);
1:d29ca2a:         assertSelector(message, "-1.1E1 < 1.0E1", true);
1:74a7a8b: 
1:d29ca2a:         assertSelector(message, "1. < 1.1", true);
1:d29ca2a:         assertSelector(message, "-1.1 < 1.", true);
1:d29ca2a:         assertSelector(message, "1.E1 < 1.1E1", true);
1:d29ca2a:         assertSelector(message, "-1.1E1 < 1.E1", true);
1:74a7a8b: 
1:d29ca2a:         assertSelector(message, ".1 < .5", true);
1:d29ca2a:         assertSelector(message, "-.5 < .1", true);
1:d29ca2a:         assertSelector(message, ".1E1 < .5E1", true);
1:d29ca2a:         assertSelector(message, "-.5E1 < .1E1", true);
1:74a7a8b: 
1:d29ca2a:         assertSelector(message, "4E10 < 5E10", true);
1:d29ca2a:         assertSelector(message, "5E8 < 5E10", true);
1:d29ca2a:         assertSelector(message, "-4E10 < 2E10", true);
1:d29ca2a:         assertSelector(message, "-5E8 < 2E2", true);
1:d29ca2a:         assertSelector(message, "4E+10 < 5E+10", true);
1:d29ca2a:         assertSelector(message, "4E-10 < 5E-10", true);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testStringQuoteParsing() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a:         assertSelector(message, "quote = '''In God We Trust'''", true);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testLikeComparisons() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "quote LIKE '''In G_d We Trust'''", true);
1:d29ca2a:         assertSelector(message, "quote LIKE '''In Gd_ We Trust'''", false);
1:d29ca2a:         assertSelector(message, "quote NOT LIKE '''In G_d We Trust'''", false);
1:d29ca2a:         assertSelector(message, "quote NOT LIKE '''In Gd_ We Trust'''", true);
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "foo LIKE '%oo'", true);
1:d29ca2a:         assertSelector(message, "foo LIKE '%ar'", false);
1:d29ca2a:         assertSelector(message, "foo NOT LIKE '%oo'", false);
1:d29ca2a:         assertSelector(message, "foo NOT LIKE '%ar'", true);
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "foo LIKE '!_%' ESCAPE '!'", true);
1:d29ca2a:         assertSelector(message, "quote LIKE '!_%' ESCAPE '!'", false);
1:d29ca2a:         assertSelector(message, "foo NOT LIKE '!_%' ESCAPE '!'", false);
1:d29ca2a:         assertSelector(message, "quote NOT LIKE '!_%' ESCAPE '!'", true);
1:d29ca2a: 
1:d29ca2a:         assertSelector(message, "punctuation LIKE '!#$&()*+,-./:;<=>?@[\\]^`{|}~'", true);
1:d29ca2a:     }
1:d29ca2a: 
1:acbe31f:     public void testSpecialEscapeLiteral() throws Exception {
1:acbe31f:         Message message = createMessage();
1:acbe31f:         assertSelector(message, "foo LIKE '%_%' ESCAPE '%'", true);
1:acbe31f:         assertSelector(message, "endingUnderScore LIKE '_D7xlJIQn$_' ESCAPE '$'", true);
1:acbe31f:         assertSelector(message, "endingUnderScore LIKE '_D7xlJIQn__' ESCAPE '_'", true);
1:acbe31f:         assertSelector(message, "endingUnderScore LIKE '%D7xlJIQn%_' ESCAPE '%'", true);
1:acbe31f:         assertSelector(message, "endingUnderScore LIKE '%D7xlJIQn%'  ESCAPE '%'", true);
1:acbe31f: 
1:acbe31f:         // literal '%' at the end, no match
1:acbe31f:         assertSelector(message, "endingUnderScore LIKE '%D7xlJIQn%%'  ESCAPE '%'", false);
1:acbe31f: 
1:acbe31f:         assertSelector(message, "endingUnderScore LIKE '_D7xlJIQn\\_' ESCAPE '\\'", true);
1:acbe31f:         assertSelector(message, "endingUnderScore LIKE '%D7xlJIQn\\_' ESCAPE '\\'", true);
1:acbe31f:     }
1:acbe31f: 
1:d29ca2a:     public void testInvalidSelector() throws Exception {
1:d29ca2a:         Message message = createMessage();
1:d29ca2a:         assertInvalidSelector(message, "3+5");
1:d29ca2a:         assertInvalidSelector(message, "True AND 3+5");
1:d29ca2a:         assertInvalidSelector(message, "=TEST 'test'");
1:7b20756:         assertInvalidSelector(message, "prop1 = prop2 foo AND string = 'Test'");
1:7b20756:         assertInvalidSelector(message, "a = 1 AMD  b = 2");
1:d29ca2a:     }
1:d29ca2a: 
1:bf07137:     public void testFunctionSelector() throws Exception {
1:bf07137:         Message message = createMessage();
1:bf07137:         assertSelector(message, "REGEX('1870414179', SessionserverId)", false);
1:bf07137:         message.setLongProperty("SessionserverId", 1870414179);
1:bf07137:         assertSelector(message, "REGEX('1870414179', SessionserverId)", true);
1:bf07137:         assertSelector(message, "REGEX('[0-9]*', SessionserverId)", true);
1:bf07137:         assertSelector(message, "REGEX('^[1-8]*$', SessionserverId)", false);
1:bf07137:         assertSelector(message, "REGEX('^[1-8]*$', SessionserverId)", false);
1:bf07137: 
1:bf07137:         assertSelector(message, "INLIST(SPLIT('Tom,Dick,George',','), name)", false);
1:bf07137:         assertSelector(message, "INLIST(SPLIT('Tom,James,George',','), name)", true);
1:bf07137: 
1:bf07137:         assertSelector(message, "INLIST(MAKELIST('Tom','Dick','George'), name)", false);
1:bf07137:         assertSelector(message, "INLIST(MAKELIST('Tom','James','George'), name)", true);
1:bf07137: 
1:bf07137:         assertSelector(message, "REGEX('connection1111', REPLACE(JMSMessageID,':',''))", true);
1:bf07137:     }
1:bf07137: 
1:d29ca2a:     protected Message createMessage() throws JMSException {
1:d29ca2a:         Message message = createMessage("FOO.BAR");
1:d29ca2a:         message.setJMSType("selector-test");
1:d29ca2a:         message.setJMSMessageID("connection:1:1:1:1");
1:d29ca2a:         message.setObjectProperty("name", "James");
1:d29ca2a:         message.setObjectProperty("location", "London");
1:74a7a8b: 
1:0fd46ce:         message.setByteProperty("byteProp", (byte)123);
1:74a7a8b:         message.setByteProperty("byteProp2", (byte)33);
1:0fd46ce:         message.setShortProperty("shortProp", (short)123);
1:4743a20:         message.setIntProperty("intProp", 123);
1:4743a20:         message.setLongProperty("longProp", 123);
1:4743a20:         message.setFloatProperty("floatProp", 123);
1:4743a20:         message.setDoubleProperty("doubleProp", 123);
1:0fd46ce: 
1:d29ca2a:         message.setIntProperty("rank", 123);
1:d29ca2a:         message.setIntProperty("version", 2);
1:d29ca2a:         message.setStringProperty("quote", "'In God We Trust'");
1:d29ca2a:         message.setStringProperty("foo", "_foo");
1:d29ca2a:         message.setStringProperty("punctuation", "!#$&()*+,-./:;<=>?@[\\]^`{|}~");
1:acbe31f:         message.setStringProperty("endingUnderScore", "XD7xlJIQn_");
1:acbe31f: 
1:d29ca2a:         message.setBooleanProperty("trueProp", true);
1:d29ca2a:         message.setBooleanProperty("falseProp", false);
1:d29ca2a:         return message;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertInvalidSelector(Message message, String text) throws JMSException {
1:d29ca2a:         try {
1:1ab76f7:             SelectorParser.parse(text);
1:d29ca2a:             fail("Created a valid selector");
1:74a7a8b:         } catch (InvalidSelectorException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertSelector(Message message, String text, boolean expected) throws JMSException {
1:1ab76f7:         BooleanExpression selector = SelectorParser.parse(text);
1:d29ca2a:         assertTrue("Created a valid selector", selector != null);
1:d29ca2a:         MessageEvaluationContext context = new MessageEvaluationContext();
1:d29ca2a:         context.setMessageReference((org.apache.activemq.command.Message)message);
1:d29ca2a:         boolean value = selector.matches(context);
1:50d27e7:         context.clear();
1:d29ca2a:         assertEquals("Selector for: " + text, expected, value);
1:50d27e7:         assertEquals("ref 0", 0, ((ActiveMQMessage)message).getReferenceCount());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Message createMessage(String subject) throws JMSException {
1:d29ca2a:         ActiveMQMessage message = new ActiveMQMessage();
1:d29ca2a:         message.setJMSDestination(new ActiveMQTopic(subject));
1:d29ca2a:         return message;
1:86cbdfd:     }
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:50d27e7
/////////////////////////////////////////////////////////////////////////
1:         context.clear();
1:         assertEquals("ref 0", 0, ((ActiveMQMessage)message).getReferenceCount());
commit:acbe31f
/////////////////////////////////////////////////////////////////////////
1:     public void testSpecialEscapeLiteral() throws Exception {
1:         Message message = createMessage();
1:         assertSelector(message, "foo LIKE '%_%' ESCAPE '%'", true);
1:         assertSelector(message, "endingUnderScore LIKE '_D7xlJIQn$_' ESCAPE '$'", true);
1:         assertSelector(message, "endingUnderScore LIKE '_D7xlJIQn__' ESCAPE '_'", true);
1:         assertSelector(message, "endingUnderScore LIKE '%D7xlJIQn%_' ESCAPE '%'", true);
1:         assertSelector(message, "endingUnderScore LIKE '%D7xlJIQn%'  ESCAPE '%'", true);
1: 
1:         // literal '%' at the end, no match
1:         assertSelector(message, "endingUnderScore LIKE '%D7xlJIQn%%'  ESCAPE '%'", false);
1: 
1:         assertSelector(message, "endingUnderScore LIKE '_D7xlJIQn\\_' ESCAPE '\\'", true);
1:         assertSelector(message, "endingUnderScore LIKE '%D7xlJIQn\\_' ESCAPE '\\'", true);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         message.setStringProperty("endingUnderScore", "XD7xlJIQn_");
1: 
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:7b20756
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertInvalidSelector(message, "prop1 = prop2 foo AND string = 'Test'");
1:         assertInvalidSelector(message, "a = 1 AMD  b = 2");
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1:     public void testFunctionSelector() throws Exception {
1:         Message message = createMessage();
1:         assertSelector(message, "REGEX('1870414179', SessionserverId)", false);
1:         message.setLongProperty("SessionserverId", 1870414179);
1:         assertSelector(message, "REGEX('1870414179', SessionserverId)", true);
1:         assertSelector(message, "REGEX('[0-9]*', SessionserverId)", true);
1:         assertSelector(message, "REGEX('^[1-8]*$', SessionserverId)", false);
1:         assertSelector(message, "REGEX('^[1-8]*$', SessionserverId)", false);
1: 
1:         assertSelector(message, "INLIST(SPLIT('Tom,Dick,George',','), name)", false);
1:         assertSelector(message, "INLIST(SPLIT('Tom,James,George',','), name)", true);
1: 
1:         assertSelector(message, "INLIST(MAKELIST('Tom','Dick','George'), name)", false);
1:         assertSelector(message, "INLIST(MAKELIST('Tom','James','George'), name)", true);
1: 
1:         assertSelector(message, "REGEX('connection1111', REPLACE(JMSMessageID,':',''))", true);
1:     }
1: 
commit:d1e35e6
/////////////////////////////////////////////////////////////////////////
1:         assertSelector(message, "trueProp", true);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1:         assertSelector(message, "XPATH '//root/b[@num > 1]'", true);
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         message.setIntProperty("intProp", 123);
1:         message.setLongProperty("longProp", 123);
1:         message.setFloatProperty("floatProp", 123);
1:         message.setDoubleProperty("doubleProp", 123);
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertSelector(message, "modelClassId LIKE 'com.whatever.something.%' AND modelInstanceId = '170' AND (modelRequestError IS NULL OR modelCorrelatedClientId = 'whatever')",
1:                        true);
1:         assertSelector(message, "modelClassId LIKE 'com.whatever.something.%' AND modelInstanceId = '170' AND (modelRequestError IS NULL OR modelCorrelatedClientId = 'whatever')",
1:                        false);
1:         assertSelector(message, "modelClassId LIKE 'com.whatever.something.%' AND modelInstanceId = '170' AND (modelRequestError IS NULL OR modelCorrelatedClientId = 'whatever')",
1:                        true);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:         // JMS 1.1 Section 3.8.1.1 : Approximate literals use the Java
0:         // floating-point literal syntax.
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         message.setByteProperty("byteProp2", (byte)33);
/////////////////////////////////////////////////////////////////////////
1:         } catch (InvalidSelectorException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:0fd46ce
/////////////////////////////////////////////////////////////////////////
1:         
1:     public void testPropertyTypes() throws Exception {
1:         Message message = createMessage();
1:         assertSelector(message, "byteProp = 123", true);
1:         assertSelector(message, "byteProp = 10", false);
1: 
1:         assertSelector(message, "shortProp = 123", true);
1:         assertSelector(message, "shortProp = 10", false);
1: 
1: 
1:         assertSelector(message, "shortProp = 123", true);
1:         assertSelector(message, "shortProp = 10", false);
1: 
1:         assertSelector(message, "intProp = 123", true);
1:         assertSelector(message, "intProp = 10", false);
1: 
1:         assertSelector(message, "longProp = 123", true);
1:         assertSelector(message, "longProp = 10", false);
1: 
1:         assertSelector(message, "floatProp = 123", true);
1:         assertSelector(message, "floatProp = 10", false);
1: 
1:         assertSelector(message, "doubleProp = 123", true);
1:         assertSelector(message, "doubleProp = 10", false);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         
1:         message.setByteProperty("byteProp", (byte)123);
1:         message.setShortProperty("shortProp", (short)123);
0:         message.setIntProperty("intProp", (int)123);
0:         message.setLongProperty("longProp", (long)123);
0:         message.setFloatProperty("floatProp", (float)123);
0:         message.setDoubleProperty("doubleProp", (double)123);
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.selector;
1: 
1: import javax.jms.InvalidSelectorException;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.filter.BooleanExpression;
1: import org.apache.activemq.filter.MessageEvaluationContext;
0: import org.apache.activemq.selector.SelectorParser;
1: 
1: /**
0:  * @version $Revision: 1.7 $
1:  */
1: public class SelectorTest extends TestCase {
1:     
1:     public void testBooleanSelector() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "(trueProp OR falseProp) AND trueProp", true);
1:         assertSelector(message, "(trueProp OR falseProp) AND falseProp", false);
1:         
1:     }
1: 
1:     public void testXPathSelectors() throws Exception {
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         
1:         message.setJMSType("xml");
0:         message.setText("<root><a key='first'/><b key='second'/></root>");
1: 
1:         assertSelector(message, "XPATH 'root/a'", true);
1:         assertSelector(message, "XPATH '//root/b'", true);
1:         assertSelector(message, "XPATH 'root/c'", false);
1: 
1:         assertSelector(message, "XPATH '//root/*[@key=''second'']'", true);
1:         assertSelector(message, "XPATH '//root/*[@key=''third'']'", false);
1: 
1:         assertSelector(message, "XPATH '//root/a[@key=''first'']'", true);
1:         assertSelector(message, "XPATH '//root/a[@key=''second'']'", false);
1:     }
1: 
1:     public void testJMSPropertySelectors() throws Exception {
1:         Message message = createMessage();
1:         message.setJMSType("selector-test");
1:         message.setJMSMessageID("id:test:1:1:1:1");
1: 
1:         assertSelector(message, "JMSType = 'selector-test'", true);
1:         assertSelector(message, "JMSType = 'crap'", false);
1:         
1:         assertSelector(message, "JMSMessageID = 'id:test:1:1:1:1'", true);
1:         assertSelector(message, "JMSMessageID = 'id:not-test:1:1:1:1'", false);
1:     }
1:     
1:     public void testBasicSelectors() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "name = 'James'", true);
1:         assertSelector(message, "rank > 100", true);
1:         assertSelector(message, "rank >= 123", true);
1:         assertSelector(message, "rank >= 124", false);
1:     }
1: 
1:     public void testAndSelectors() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "name = 'James' and rank < 200", true);
1:         assertSelector(message, "name = 'James' and rank > 200", false);
1:         assertSelector(message, "name = 'Foo' and rank < 200", false);
1:         assertSelector(message, "unknown = 'Foo' and anotherUnknown < 200", false);
1:     }
1: 
1:     public void testOrSelectors() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "name = 'James' or rank < 200", true);
1:         assertSelector(message, "name = 'James' or rank > 200", true);
1:         assertSelector(message, "name = 'Foo' or rank < 200", true);
1:         assertSelector(message, "name = 'Foo' or rank > 200", false);
1:         assertSelector(message, "unknown = 'Foo' or anotherUnknown < 200", false);
1:     }
1: 
1:     public void testPlus() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "rank + 2 = 125", true);
1:         assertSelector(message, "(rank + 2) = 125", true);
1:         assertSelector(message, "125 = (rank + 2)", true);
1:         assertSelector(message, "rank + version = 125", true);
1:         assertSelector(message, "rank + 2 < 124", false);
1:         assertSelector(message, "name + '!' = 'James!'", true);
1:     }
1: 
1:     public void testMinus() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "rank - 2 = 121", true);
1:         assertSelector(message, "rank - version = 121", true);
1:         assertSelector(message, "rank - 2 > 122", false);
1:     }
1: 
1:     public void testMultiply() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "rank * 2 = 246", true);
1:         assertSelector(message, "rank * version = 246", true);
1:         assertSelector(message, "rank * 2 < 130", false);
1:     }
1: 
1:     public void testDivide() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "rank / version = 61.5", true);
1:         assertSelector(message, "rank / 3 > 100.0", false);
1:         assertSelector(message, "rank / 3 > 100", false);
1:         assertSelector(message, "version / 2 = 1", true);
1: 
1:     }
1: 
1:     public void testBetween() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "rank between 100 and 150", true);
1:         assertSelector(message, "rank between 10 and 120", false);
1:     }
1: 
1:     public void testIn() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "name in ('James', 'Bob', 'Gromit')", true);
1:         assertSelector(message, "name in ('Bob', 'James', 'Gromit')", true);
1:         assertSelector(message, "name in ('Gromit', 'Bob', 'James')", true);
1: 
1:         assertSelector(message, "name in ('Gromit', 'Bob', 'Cheddar')", false);
1:         assertSelector(message, "name not in ('Gromit', 'Bob', 'Cheddar')", true);
1:     }
1: 
1:     public void testIsNull() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "dummy is null", true);
1:         assertSelector(message, "dummy is not null", false);
1:         assertSelector(message, "name is not null", true);
1:         assertSelector(message, "name is null", false);
1:     }
1: 
1: 
1:     public void testLike() throws Exception {
1:         Message message = createMessage();
1:         message.setStringProperty("modelClassId", "com.whatever.something.foo.bar");
1:         message.setStringProperty("modelInstanceId", "170");
1:         message.setStringProperty("modelRequestError", "abc");
1:         message.setStringProperty("modelCorrelatedClientId", "whatever");
1: 
0:         assertSelector(message, "modelClassId LIKE 'com.whatever.something.%' AND modelInstanceId = '170' AND (modelRequestError IS NULL OR modelCorrelatedClientId = 'whatever')", true);
1: 
1:         message.setStringProperty("modelCorrelatedClientId", "shouldFailNow");
1: 
0:         assertSelector(message, "modelClassId LIKE 'com.whatever.something.%' AND modelInstanceId = '170' AND (modelRequestError IS NULL OR modelCorrelatedClientId = 'whatever')", false);
1: 
1:         message = createMessage();
1:         message.setStringProperty("modelClassId", "com.whatever.something.foo.bar");
1:         message.setStringProperty("modelInstanceId", "170");
1:         message.setStringProperty("modelCorrelatedClientId", "shouldNotMatch");
1: 
0:         assertSelector(message, "modelClassId LIKE 'com.whatever.something.%' AND modelInstanceId = '170' AND (modelRequestError IS NULL OR modelCorrelatedClientId = 'whatever')", true);
1:     }
1: 
1:     /**
1:      * Test cases from Mats Henricson
1:      */
1:     public void testMatsHenricsonUseCases() throws Exception {
1:         Message message = createMessage();
1:         assertSelector(message, "SessionserverId=1870414179", false);
1: 
1:         message.setLongProperty("SessionserverId", 1870414179);
1:         assertSelector(message, "SessionserverId=1870414179", true);
1: 
1:         message.setLongProperty("SessionserverId", 1234);
1:         assertSelector(message, "SessionserverId=1870414179", false);
1: 
1: 
1:         assertSelector(message, "Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')", false);
1: 
1:         message.setStringProperty("Command", "Cheese");
1:         assertSelector(message, "Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')", true);
1: 
1:         message.setStringProperty("Command", "MirrorLobbyRequest");
1:         assertSelector(message, "Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')", false);
1:         message.setStringProperty("Command", "MirrorLobbyReply");
1:         assertSelector(message, "Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')", false);
1:     }
1: 
1:     public void testFloatComparisons() throws Exception {
1:         Message message = createMessage();
1:         
0:         // JMS 1.1 Section 3.8.1.1 : Approximate literals use the Java floating-point literal syntax. 
0:         // We will use the java varible x to demo valid floating point syntaxs.
0:         double x;
1:         
0:         // test decimals like x.x
0:         x = 1.0;
0:         x = -1.1;
0:         x = 1.0E1;
0:         x = 1.1E1;
0:         x = -1.1E1;
1:         assertSelector(message, "1.0 < 1.1", true);
1:         assertSelector(message, "-1.1 < 1.0", true);
1:         assertSelector(message, "1.0E1 < 1.1E1", true);
1:         assertSelector(message, "-1.1E1 < 1.0E1", true);
1: 
0:         // test decimals like x.
0:         x = 1.;
0:         x = 1.E1;
1:         assertSelector(message, "1. < 1.1", true);
1:         assertSelector(message, "-1.1 < 1.", true);
1:         assertSelector(message, "1.E1 < 1.1E1", true);
1:         assertSelector(message, "-1.1E1 < 1.E1", true);
1:         
0:         // test decimals like .x
0:         x = .5;
0:         x = -.5;
0:         x = .5E1;
1:         assertSelector(message, ".1 < .5", true);
1:         assertSelector(message, "-.5 < .1", true);
1:         assertSelector(message, ".1E1 < .5E1", true);
1:         assertSelector(message, "-.5E1 < .1E1", true);
1:         
0:         // test exponents
0:         x = 4E10;
0:         x = -4E10;
0:         x = 5E+10;
0:         x = 5E-10;
1:         assertSelector(message, "4E10 < 5E10", true);
1:         assertSelector(message, "5E8 < 5E10", true);
1:         assertSelector(message, "-4E10 < 2E10", true);
1:         assertSelector(message, "-5E8 < 2E2", true);
1:         assertSelector(message, "4E+10 < 5E+10", true);
1:         assertSelector(message, "4E-10 < 5E-10", true);
1:     }
1: 
1:     public void testStringQuoteParsing() throws Exception {
1:         Message message = createMessage();
1:         assertSelector(message, "quote = '''In God We Trust'''", true);
1:     }
1: 
1:     public void testLikeComparisons() throws Exception {
1:         Message message = createMessage();
1: 
1:         assertSelector(message, "quote LIKE '''In G_d We Trust'''", true);
1:         assertSelector(message, "quote LIKE '''In Gd_ We Trust'''", false);
1:         assertSelector(message, "quote NOT LIKE '''In G_d We Trust'''", false);
1:         assertSelector(message, "quote NOT LIKE '''In Gd_ We Trust'''", true);
1: 
1:         assertSelector(message, "foo LIKE '%oo'", true);
1:         assertSelector(message, "foo LIKE '%ar'", false);
1:         assertSelector(message, "foo NOT LIKE '%oo'", false);
1:         assertSelector(message, "foo NOT LIKE '%ar'", true);
1: 
1:         assertSelector(message, "foo LIKE '!_%' ESCAPE '!'", true);
1:         assertSelector(message, "quote LIKE '!_%' ESCAPE '!'", false);
1:         assertSelector(message, "foo NOT LIKE '!_%' ESCAPE '!'", false);
1:         assertSelector(message, "quote NOT LIKE '!_%' ESCAPE '!'", true);
1: 
1:         assertSelector(message, "punctuation LIKE '!#$&()*+,-./:;<=>?@[\\]^`{|}~'", true);
1:     }
1: 
1:     public void testInvalidSelector() throws Exception {
1:         Message message = createMessage();
1:         assertInvalidSelector(message, "3+5");
1:         assertInvalidSelector(message, "True AND 3+5");
1:         assertInvalidSelector(message, "=TEST 'test'");
1:     }
1: 
1:     protected Message createMessage() throws JMSException {
1:         Message message = createMessage("FOO.BAR");
1:         message.setJMSType("selector-test");
1:         message.setJMSMessageID("connection:1:1:1:1");
1:         message.setObjectProperty("name", "James");
1:         message.setObjectProperty("location", "London");
1:         message.setIntProperty("rank", 123);
1:         message.setIntProperty("version", 2);
1:         message.setStringProperty("quote", "'In God We Trust'");
1:         message.setStringProperty("foo", "_foo");
1:         message.setStringProperty("punctuation", "!#$&()*+,-./:;<=>?@[\\]^`{|}~");
1:         message.setBooleanProperty("trueProp", true);
1:         message.setBooleanProperty("falseProp", false);
1: 
1:         return message;
1:     }
1: 
1: 
1:     protected void assertInvalidSelector(Message message, String text) throws JMSException {
1:         try {
0:             new SelectorParser().parse(text);
1:             fail("Created a valid selector");
1:         }
0:         catch (InvalidSelectorException e) {
1:         }
1:     }
1: 
1:     protected void assertSelector(Message message, String text, boolean expected) throws JMSException {
0:         BooleanExpression selector = new SelectorParser().parse(text);
1:         assertTrue("Created a valid selector", selector != null);
1:         MessageEvaluationContext context = new MessageEvaluationContext();
1:         context.setMessageReference((org.apache.activemq.command.Message)message);
1:         boolean value = selector.matches(context);
1:         assertEquals("Selector for: " + text, expected, value);
1:     }
1: 
1:     protected Message createMessage(String subject) throws JMSException {
1:         ActiveMQMessage message = new ActiveMQMessage();
1:         message.setJMSDestination(new ActiveMQTopic(subject));
1:         return message;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:42d91a3
/////////////////////////////////////////////////////////////////////////
1:         message.setText("<root><a key='first' num='1'/><b key='second' num='2'>b</b></root>");
1:         assertSelector(message, "XPATH '//root/b/text()=\"b\"'", true);
1:         assertSelector(message, "XPATH '//root/b=\"b\"'", true);
1:         assertSelector(message, "XPATH '//root/b=\"c\"'", false);
1:         assertSelector(message, "XPATH '//root/b!=\"c\"'", true);
0:         
1:         assertSelector(message, "XPATH '//root/a[@num=1]'", true);
0:         
1:         assertSelector(message, "XPATH '/root/*[@key=''first'' or @key=''third'']'", true);
1:         assertSelector(message, "XPATH '//root/*[@key=''third'' or @key=''forth'']'", false);
0: 
1:         assertSelector(message, "XPATH '/root/b=''b'' and /root/b[@key=''second'']'", true);
1:         assertSelector(message, "XPATH '/root/b=''b'' and /root/b[@key=''first'']'", false);
0:         
1:         assertSelector(message, "XPATH 'not(//root/a)'", false);
1:         assertSelector(message, "XPATH 'not(//root/c)'", true);
1:         assertSelector(message, "XPATH '//root/a[not(@key=''first'')]'", false);
1:         assertSelector(message, "XPATH '//root/a[not(not(@key=''first''))]'", true);
0:         
1:         assertSelector(message, "XPATH 'string(//root/b)'", true);
1:         assertSelector(message, "XPATH 'string(//root/a)'", false);
0:         
1:         assertSelector(message, "XPATH 'sum(//@num) < 10'", true);
1:         assertSelector(message, "XPATH 'sum(//@num) > 10'", false);
0:         
1:         assertSelector(message, "XPATH '//root/a[@num > 1]'", false);
0:         assertSelector(message, "XPATH '//root/b[@num > 1]'", true);  
0:         
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1ab76f7
/////////////////////////////////////////////////////////////////////////
1:             SelectorParser.parse(text);
1:         BooleanExpression selector = SelectorParser.parse(text);
author:James Strachan
-------------------------------------------------------------------------------
commit:2026e6e
/////////////////////////////////////////////////////////////////////////
0:         
1:         message = createMessage();
1:         message.setJMSType("1001");
0:         
1:         assertSelector(message, "JMSType='1001'", true);
1:         assertSelector(message, "JMSType='1001' OR JMSType='1002'", true);
1:         assertSelector(message, "JMSType = 'crap'", false);
commit:c172b50
/////////////////////////////////////////////////////////////////////////
1:         assertSelector(message, "byteProp2 = 33", true);
1:         assertSelector(message, "byteProp2 = 10", false);
/////////////////////////////////////////////////////////////////////////
0:         message.setByteProperty("byteProp2", (byte) 33);
/////////////////////////////////////////////////////////////////////////
============================================================================