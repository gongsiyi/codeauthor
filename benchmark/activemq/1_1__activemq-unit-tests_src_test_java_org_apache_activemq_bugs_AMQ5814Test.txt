1:e4af2eb: /**
1:e4af2eb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e4af2eb:  * contributor license agreements.  See the NOTICE file distributed with
1:e4af2eb:  * this work for additional information regarding copyright ownership.
1:e4af2eb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e4af2eb:  * (the "License"); you may not use this file except in compliance with
1:e4af2eb:  * the License.  You may obtain a copy of the License at
1:e4af2eb:  *
1:e4af2eb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e4af2eb:  *
1:e4af2eb:  * Unless required by applicable law or agreed to in writing, software
1:e4af2eb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e4af2eb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e4af2eb:  * See the License for the specific language governing permissions and
1:e4af2eb:  * limitations under the License.
1:e4af2eb:  */
1:e4af2eb: package org.apache.activemq.bugs;
1:e4af2eb: 
1:e4af2eb: import static org.junit.Assert.assertNotNull;
1:e4af2eb: 
1:e4af2eb: import java.net.URI;
1:e4af2eb: import java.util.ArrayList;
1:e4af2eb: import java.util.List;
1:e4af2eb: 
1:e4af2eb: import javax.jms.Connection;
1:e4af2eb: import javax.jms.ConnectionFactory;
1:e4af2eb: import javax.jms.MessageConsumer;
1:e4af2eb: import javax.jms.MessageProducer;
1:e4af2eb: import javax.jms.Session;
1:e4af2eb: import javax.jms.Topic;
1:e4af2eb: 
1:e4af2eb: import org.apache.activemq.ActiveMQConnectionFactory;
1:e4af2eb: import org.apache.activemq.broker.BrokerPlugin;
1:e4af2eb: import org.apache.activemq.broker.BrokerService;
1:e4af2eb: import org.apache.activemq.broker.TransportConnector;
1:e4af2eb: import org.apache.activemq.filter.DestinationMapEntry;
1:e4af2eb: import org.apache.activemq.security.AuthenticationUser;
1:e4af2eb: import org.apache.activemq.security.AuthorizationEntry;
1:e4af2eb: import org.apache.activemq.security.AuthorizationPlugin;
1:e4af2eb: import org.apache.activemq.security.DefaultAuthorizationMap;
1:e4af2eb: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:e4af2eb: import org.junit.After;
1:e4af2eb: import org.junit.Before;
1:e4af2eb: import org.junit.Test;
1:e4af2eb: 
1:e4af2eb: public class AMQ5814Test {
1:e4af2eb: 
1:e4af2eb:     private BrokerService brokerService;
1:e4af2eb:     private String openwireClientUrl;
1:e4af2eb: 
1:e4af2eb:     public BrokerPlugin configureAuthentication() throws Exception {
1:e4af2eb:         List<AuthenticationUser> users = new ArrayList<>();
1:e4af2eb:         users.add(new AuthenticationUser("publisher", "123", "publisher"));
1:e4af2eb:         users.add(new AuthenticationUser("subscriber", "123", "subscriber"));
1:e4af2eb:         users.add(new AuthenticationUser("admin", "123", "publisher,subscriber"));
1:e4af2eb: 
1:e4af2eb:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1:e4af2eb: 
1:e4af2eb:         return authenticationPlugin;
1:e4af2eb:     }
1:e4af2eb: 
1:e4af2eb:     public BrokerPlugin configureAuthorization() throws Exception {
1:e4af2eb: 
1:e4af2eb:         @SuppressWarnings("rawtypes")
1:e4af2eb:         List<DestinationMapEntry> authorizationEntries = new ArrayList<>();
1:e4af2eb: 
1:e4af2eb:         AuthorizationEntry entry = new AuthorizationEntry();
1:e4af2eb:         entry.setTopic("dcu.>");
1:e4af2eb:         entry.setRead("subscriber");
1:e4af2eb:         entry.setWrite("publisher");
1:e4af2eb:         entry.setAdmin("publisher,subscriber");
1:e4af2eb:         authorizationEntries.add(entry);
1:e4af2eb: 
1:e4af2eb:         entry = new AuthorizationEntry();
1:e4af2eb:         entry.setTopic("ActiveMQ.Advisory.>");
1:e4af2eb:         entry.setRead("publisher,subscriber");
1:e4af2eb:         entry.setWrite("publisher,subscriber");
1:e4af2eb:         entry.setAdmin("publisher,subscriber");
1:e4af2eb:         authorizationEntries.add(entry);
1:e4af2eb: 
1:e4af2eb:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:e4af2eb:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1:e4af2eb: 
1:e4af2eb:         return authorizationPlugin;
1:e4af2eb:     }
1:e4af2eb: 
1:e4af2eb:     @Before
1:e4af2eb:     public void setup() throws Exception {
1:e4af2eb: 
1:e4af2eb:         TransportConnector openwireConnector = new TransportConnector();
1:e4af2eb:         openwireConnector.setUri(new URI("tcp://localhost:0"));
1:e4af2eb:         openwireConnector.setName("openwire");
1:e4af2eb: 
1:e4af2eb:         ArrayList<BrokerPlugin> plugins = new ArrayList<>();
1:e4af2eb:         plugins.add(configureAuthentication());
1:e4af2eb:         plugins.add(configureAuthorization());
1:e4af2eb: 
1:e4af2eb:         brokerService = new BrokerService();
1:e4af2eb:         brokerService.setPersistent(false);
1:e4af2eb:         brokerService.addConnector(openwireConnector);
1:e4af2eb:         if (!plugins.isEmpty()) {
1:e4af2eb:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:e4af2eb:             brokerService.setPlugins(plugins.toArray(array));
1:e4af2eb:         }
1:e4af2eb:         brokerService.start();
1:e4af2eb:         brokerService.waitUntilStarted();
1:e4af2eb: 
1:e4af2eb:         openwireClientUrl = openwireConnector.getPublishableConnectString();
1:e4af2eb:     }
1:e4af2eb: 
1:e4af2eb:     @After
1:e4af2eb:     public void shutdown() throws Exception {
1:e4af2eb:         if (brokerService != null) {
1:e4af2eb:             brokerService.stop();
1:e4af2eb:             brokerService.waitUntilStopped();
1:e4af2eb:             brokerService = null;
1:e4af2eb:         }
1:e4af2eb:     }
1:e4af2eb: 
1:e4af2eb:     @Test(timeout=30000)
1:e4af2eb:     public void testProduceConsumeWithAuthorization() throws Exception {
1:e4af2eb:         ConnectionFactory factory = new ActiveMQConnectionFactory(openwireClientUrl);
1:e4af2eb:         Connection connection1 = factory.createConnection("subscriber", "123");
1:e4af2eb:         Session session1 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e4af2eb:         Topic wildCarded = session1.createTopic("dcu.>");
1:e4af2eb:         MessageConsumer consumer = session1.createConsumer(wildCarded);
1:e4af2eb:         connection1.start();
1:e4af2eb: 
1:e4af2eb:         Connection connection2 = factory.createConnection("publisher", "123");
1:e4af2eb:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e4af2eb:         Topic named = session2.createTopic("dcu.id");
1:e4af2eb:         MessageProducer producer = session2.createProducer(named);
1:e4af2eb:         producer.send(session2.createTextMessage("test"));
1:e4af2eb: 
1:e4af2eb:         assertNotNull(consumer.receive(2000));
1:e4af2eb: 
1:e4af2eb:         connection1.close();
1:e4af2eb:         connection2.close();
1:e4af2eb:     }
1:e4af2eb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e4af2eb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.security.AuthenticationUser;
1: import org.apache.activemq.security.AuthorizationEntry;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.DefaultAuthorizationMap;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ5814Test {
1: 
1:     private BrokerService brokerService;
1:     private String openwireClientUrl;
1: 
1:     public BrokerPlugin configureAuthentication() throws Exception {
1:         List<AuthenticationUser> users = new ArrayList<>();
1:         users.add(new AuthenticationUser("publisher", "123", "publisher"));
1:         users.add(new AuthenticationUser("subscriber", "123", "subscriber"));
1:         users.add(new AuthenticationUser("admin", "123", "publisher,subscriber"));
1: 
1:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1: 
1:         return authenticationPlugin;
1:     }
1: 
1:     public BrokerPlugin configureAuthorization() throws Exception {
1: 
1:         @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> authorizationEntries = new ArrayList<>();
1: 
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setTopic("dcu.>");
1:         entry.setRead("subscriber");
1:         entry.setWrite("publisher");
1:         entry.setAdmin("publisher,subscriber");
1:         authorizationEntries.add(entry);
1: 
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("ActiveMQ.Advisory.>");
1:         entry.setRead("publisher,subscriber");
1:         entry.setWrite("publisher,subscriber");
1:         entry.setAdmin("publisher,subscriber");
1:         authorizationEntries.add(entry);
1: 
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1: 
1:         return authorizationPlugin;
1:     }
1: 
1:     @Before
1:     public void setup() throws Exception {
1: 
1:         TransportConnector openwireConnector = new TransportConnector();
1:         openwireConnector.setUri(new URI("tcp://localhost:0"));
1:         openwireConnector.setName("openwire");
1: 
1:         ArrayList<BrokerPlugin> plugins = new ArrayList<>();
1:         plugins.add(configureAuthentication());
1:         plugins.add(configureAuthorization());
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.addConnector(openwireConnector);
1:         if (!plugins.isEmpty()) {
1:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:             brokerService.setPlugins(plugins.toArray(array));
1:         }
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         openwireClientUrl = openwireConnector.getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void shutdown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:             brokerService = null;
1:         }
1:     }
1: 
1:     @Test(timeout=30000)
1:     public void testProduceConsumeWithAuthorization() throws Exception {
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(openwireClientUrl);
1:         Connection connection1 = factory.createConnection("subscriber", "123");
1:         Session session1 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic wildCarded = session1.createTopic("dcu.>");
1:         MessageConsumer consumer = session1.createConsumer(wildCarded);
1:         connection1.start();
1: 
1:         Connection connection2 = factory.createConnection("publisher", "123");
1:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic named = session2.createTopic("dcu.id");
1:         MessageProducer producer = session2.createProducer(named);
1:         producer.send(session2.createTextMessage("test"));
1: 
1:         assertNotNull(consumer.receive(2000));
1: 
1:         connection1.close();
1:         connection2.close();
1:     }
1: }
============================================================================