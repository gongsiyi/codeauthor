1:489f929: /**
1:489f929:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:489f929:  * contributor license agreements.  See the NOTICE file distributed with
1:489f929:  * this work for additional information regarding copyright ownership.
1:489f929:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:489f929:  * (the "License"); you may not use this file except in compliance with
1:489f929:  * the License.  You may obtain a copy of the License at
1:3bb7e4a:  *
1:3bb7e4a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3bb7e4a:  *
1:489f929:  * Unless required by applicable law or agreed to in writing, software
1:489f929:  * distributed under the License is distributed on an "AS IS" BASIS,
1:489f929:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:489f929:  * See the License for the specific language governing permissions and
1:489f929:  * limitations under the License.
1:489f929:  */
1:489f929: package org.apache.activemq.network;
1:bf1c57b: 
1:489f929: import org.apache.activemq.broker.BrokerService;
1:489f929: import org.apache.activemq.broker.jmx.AnnotatedMBean;
1:489f929: import org.apache.activemq.broker.jmx.BrokerMBeanSupport;
1:9b88902: import org.apache.activemq.broker.jmx.NetworkBridgeView;
1:489f929: import org.apache.activemq.broker.jmx.NetworkDestinationView;
1:489f929: import org.apache.activemq.command.ActiveMQDestination;
1:489f929: import org.apache.activemq.command.Message;
1:374cab9: import org.apache.activemq.thread.Scheduler;
1:489f929: import org.slf4j.Logger;
1:489f929: import org.slf4j.LoggerFactory;
5:489f929: 
1:6b1e874: import javax.management.ObjectName;
1:6b1e874: import java.util.Iterator;
1:6b1e874: import java.util.Map;
1:6b1e874: import java.util.concurrent.ConcurrentHashMap;
1:6b1e874: 
1:489f929: public class MBeanBridgeDestination {
1:489f929:     private static final Logger LOG = LoggerFactory.getLogger(MBeanBridgeDestination.class);
1:489f929:     private final BrokerService brokerService;
1:489f929:     private final NetworkBridge bridge;
1:9b88902:     private final NetworkBridgeView networkBridgeView;
1:374cab9:     private final NetworkBridgeConfiguration networkBridgeConfiguration;
1:374cab9:     private final Scheduler scheduler;
1:374cab9:     private final Runnable purgeInactiveDestinationViewTask;
1:6b1e874:     private final Map<ActiveMQDestination, NetworkDestinationContainer> outboundDestinationViewMap = new ConcurrentHashMap<>();
1:6b1e874:     private final Map<ActiveMQDestination, NetworkDestinationContainer> inboundDestinationViewMap = new ConcurrentHashMap<>();
1:489f929: 
1:374cab9:     public MBeanBridgeDestination(BrokerService brokerService, NetworkBridgeConfiguration networkBridgeConfiguration, NetworkBridge bridge, NetworkBridgeView networkBridgeView) {
1:489f929:         this.brokerService = brokerService;
1:374cab9:         this.networkBridgeConfiguration = networkBridgeConfiguration;
1:489f929:         this.bridge = bridge;
1:9b88902:         this.networkBridgeView = networkBridgeView;
1:374cab9:         this.scheduler = brokerService.getScheduler();
1:374cab9:         purgeInactiveDestinationViewTask = new Runnable() {
1:374cab9:             public void run() {
1:374cab9:                 purgeInactiveDestinationViews();
1:374cab9:             }
1:374cab9:         };
11:489f929:     }
1:489f929: 
1:489f929: 
1:489f929:     public void onOutboundMessage(Message message) {
1:489f929:         ActiveMQDestination destination = message.getDestination();
1:6b1e874:         NetworkDestinationContainer networkDestinationContainer;
1:489f929: 
1:6b1e874:         if ((networkDestinationContainer = outboundDestinationViewMap.get(destination)) == null) {
1:6b1e874:             ObjectName bridgeObjectName = bridge.getMbeanObjectName();
1:6b1e874:             try {
1:6b1e874:                 ObjectName objectName = BrokerMBeanSupport.createNetworkOutBoundDestinationObjectName(bridgeObjectName, destination);
1:6b1e874:                 NetworkDestinationView networkDestinationView = new NetworkDestinationView(networkBridgeView, destination.getPhysicalName());
1:6b1e874:                 AnnotatedMBean.registerMBean(brokerService.getManagementContext(), networkDestinationView, objectName);
1:6b1e874: 
1:6b1e874:                 networkDestinationContainer = new NetworkDestinationContainer(networkDestinationView, objectName);
1:6b1e874:                 outboundDestinationViewMap.put(destination, networkDestinationContainer);
1:6b1e874:                 networkDestinationView.messageSent();
1:6b1e874:             } catch (Exception e) {
1:6b1e874:                 LOG.warn("Failed to register " + destination, e);
1:489f929:             }
1:6b1e874:         } else {
1:6b1e874:             networkDestinationContainer.view.messageSent();
1:489f929:         }
1:489f929:     }
1:489f929: 
1:489f929: 
1:489f929:     public void onInboundMessage(Message message) {
1:489f929:         ActiveMQDestination destination = message.getDestination();
1:6b1e874:         NetworkDestinationContainer networkDestinationContainer;
1:6b1e874: 
1:6b1e874:         if ((networkDestinationContainer = inboundDestinationViewMap.get(destination)) == null) {
1:6b1e874:             ObjectName bridgeObjectName = bridge.getMbeanObjectName();
1:6b1e874:             try {
1:6b1e874:                 ObjectName objectName = BrokerMBeanSupport.createNetworkInBoundDestinationObjectName(bridgeObjectName, destination);
1:6b1e874:                 NetworkDestinationView networkDestinationView = new NetworkDestinationView(networkBridgeView, destination.getPhysicalName());
1:6b1e874:                 AnnotatedMBean.registerMBean(brokerService.getManagementContext(), networkDestinationView, objectName);
1:6b1e874: 
1:6b1e874:                 networkBridgeView.addNetworkDestinationView(networkDestinationView);
1:6b1e874:                 networkDestinationContainer = new NetworkDestinationContainer(networkDestinationView, objectName);
1:6b1e874:                 inboundDestinationViewMap.put(destination, networkDestinationContainer);
1:6b1e874:                 networkDestinationView.messageSent();
1:6b1e874:             } catch (Exception e) {
1:6b1e874:                 LOG.warn("Failed to register " + destination, e);
1:489f929:             }
1:6b1e874:         } else {
1:6b1e874:             networkDestinationContainer.view.messageSent();
1:489f929:         }
1:489f929:     }
1:489f929: 
1:374cab9:     public void start() {
1:374cab9:         if (networkBridgeConfiguration.isGcDestinationViews()) {
1:374cab9:             long period = networkBridgeConfiguration.getGcSweepTime();
1:374cab9:             if (period > 0) {
1:374cab9:                 scheduler.executePeriodically(purgeInactiveDestinationViewTask, period);
1:374cab9:             }
1:374cab9:         }
1:374cab9:     }
1:374cab9: 
1:374cab9:     public void stop() {
1:489f929:         if (!brokerService.isUseJmx()) {
1:489f929:             return;
1:374cab9:         }
1:374cab9: 
1:374cab9:         scheduler.cancel(purgeInactiveDestinationViewTask);
1:6b1e874:         for (NetworkDestinationContainer networkDestinationContainer : inboundDestinationViewMap.values()) {
1:bf1c57b:             try {
1:6b1e874:                 brokerService.getManagementContext().unregisterMBean(networkDestinationContainer.objectName);
1:6b1e874:             } catch (Exception e) {
1:6b1e874:                 LOG.error("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
1:6b1e874:             }
1:6b1e874:         }
1:6b1e874:         for (NetworkDestinationContainer networkDestinationContainer : outboundDestinationViewMap.values()) {
1:6b1e874:             try {
1:6b1e874:                 brokerService.getManagementContext().unregisterMBean(networkDestinationContainer.objectName);
1:6b1e874:             } catch (Exception e) {
1:bf1c57b:                 LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
1:374cab9:             }
1:374cab9:         }
1:489f929:         inboundDestinationViewMap.clear();
1:6b1e874:         outboundDestinationViewMap.clear();
1:374cab9:     }
1:374cab9: 
1:374cab9:     private void purgeInactiveDestinationViews() {
1:374cab9:         if (!brokerService.isUseJmx()) {
1:374cab9:             return;
1:374cab9:         }
1:374cab9:         purgeInactiveDestinationView(inboundDestinationViewMap);
1:374cab9:         purgeInactiveDestinationView(outboundDestinationViewMap);
1:374cab9:     }
1:374cab9: 
1:6b1e874:     private void purgeInactiveDestinationView(Map<ActiveMQDestination, NetworkDestinationContainer> map) {
1:374cab9:         long time = System.currentTimeMillis() - networkBridgeConfiguration.getGcSweepTime();
1:6b1e874:         for (Iterator<Map.Entry<ActiveMQDestination, NetworkDestinationContainer>> it = map.entrySet().iterator(); it.hasNext(); ) {
1:6b1e874:             Map.Entry<ActiveMQDestination, NetworkDestinationContainer> entry = it.next();
1:6b1e874:             if (entry.getValue().view.getLastAccessTime() <= time) {
1:6b1e874:                 ObjectName objectName = entry.getValue().objectName;
1:6b1e874:                 if (objectName != null) {
1:6b1e874:                     try {
1:6b1e874:                         brokerService.getManagementContext().unregisterMBean(entry.getValue().objectName);
1:6b1e874:                     } catch (Throwable e) {
1:6b1e874:                         LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
1:bf1c57b:                     }
1:374cab9:                 }
1:6b1e874:                 entry.getValue().view.close();
1:6b1e874:                 it.remove();
1:374cab9:             }
1:374cab9:         }
1:374cab9:     }
1:6b1e874: 
1:6b1e874:     private static class NetworkDestinationContainer {
1:6b1e874:         private final NetworkDestinationView view;
1:6b1e874:         private final ObjectName objectName;
1:6b1e874: 
1:6b1e874:         private NetworkDestinationContainer(NetworkDestinationView view, ObjectName objectName) {
1:6b1e874:             this.view = view;
1:6b1e874:             this.objectName = objectName;
1:6b1e874:         }
1:6b1e874:     }
1:374cab9: }
============================================================================
author:Altaflux
-------------------------------------------------------------------------------
commit:3bb7e4a
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
commit:6b1e874
/////////////////////////////////////////////////////////////////////////
0:  * <p/>
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * <p/>
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
1: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final Map<ActiveMQDestination, NetworkDestinationContainer> outboundDestinationViewMap = new ConcurrentHashMap<>();
1:     private final Map<ActiveMQDestination, NetworkDestinationContainer> inboundDestinationViewMap = new ConcurrentHashMap<>();
/////////////////////////////////////////////////////////////////////////
1:         NetworkDestinationContainer networkDestinationContainer;
1:         if ((networkDestinationContainer = outboundDestinationViewMap.get(destination)) == null) {
1:             ObjectName bridgeObjectName = bridge.getMbeanObjectName();
1:             try {
1:                 ObjectName objectName = BrokerMBeanSupport.createNetworkOutBoundDestinationObjectName(bridgeObjectName, destination);
1:                 NetworkDestinationView networkDestinationView = new NetworkDestinationView(networkBridgeView, destination.getPhysicalName());
1:                 AnnotatedMBean.registerMBean(brokerService.getManagementContext(), networkDestinationView, objectName);
1: 
1:                 networkDestinationContainer = new NetworkDestinationContainer(networkDestinationView, objectName);
1:                 outboundDestinationViewMap.put(destination, networkDestinationContainer);
1:                 networkDestinationView.messageSent();
1:             } catch (Exception e) {
1:                 LOG.warn("Failed to register " + destination, e);
1:         } else {
1:             networkDestinationContainer.view.messageSent();
1:         NetworkDestinationContainer networkDestinationContainer;
1: 
1:         if ((networkDestinationContainer = inboundDestinationViewMap.get(destination)) == null) {
1:             ObjectName bridgeObjectName = bridge.getMbeanObjectName();
1:             try {
1:                 ObjectName objectName = BrokerMBeanSupport.createNetworkInBoundDestinationObjectName(bridgeObjectName, destination);
1:                 NetworkDestinationView networkDestinationView = new NetworkDestinationView(networkBridgeView, destination.getPhysicalName());
1:                 AnnotatedMBean.registerMBean(brokerService.getManagementContext(), networkDestinationView, objectName);
1: 
1:                 networkBridgeView.addNetworkDestinationView(networkDestinationView);
1:                 networkDestinationContainer = new NetworkDestinationContainer(networkDestinationView, objectName);
1:                 inboundDestinationViewMap.put(destination, networkDestinationContainer);
1:                 networkDestinationView.messageSent();
1:             } catch (Exception e) {
1:                 LOG.warn("Failed to register " + destination, e);
1:         } else {
1:             networkDestinationContainer.view.messageSent();
/////////////////////////////////////////////////////////////////////////
1:         for (NetworkDestinationContainer networkDestinationContainer : inboundDestinationViewMap.values()) {
1:                 brokerService.getManagementContext().unregisterMBean(networkDestinationContainer.objectName);
1:             } catch (Exception e) {
1:                 LOG.error("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
1:             }
1:         }
1:         for (NetworkDestinationContainer networkDestinationContainer : outboundDestinationViewMap.values()) {
1:             try {
1:                 brokerService.getManagementContext().unregisterMBean(networkDestinationContainer.objectName);
1:             } catch (Exception e) {
1:         outboundDestinationViewMap.clear();
/////////////////////////////////////////////////////////////////////////
1:     private void purgeInactiveDestinationView(Map<ActiveMQDestination, NetworkDestinationContainer> map) {
1:         for (Iterator<Map.Entry<ActiveMQDestination, NetworkDestinationContainer>> it = map.entrySet().iterator(); it.hasNext(); ) {
1:             Map.Entry<ActiveMQDestination, NetworkDestinationContainer> entry = it.next();
1:             if (entry.getValue().view.getLastAccessTime() <= time) {
1:                 ObjectName objectName = entry.getValue().objectName;
1:                 if (objectName != null) {
1:                     try {
1:                         brokerService.getManagementContext().unregisterMBean(entry.getValue().objectName);
1:                     } catch (Throwable e) {
1:                         LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
1:                 entry.getValue().view.close();
1:                 it.remove();
1: 
1:     private static class NetworkDestinationContainer {
1:         private final NetworkDestinationView view;
1:         private final ObjectName objectName;
1: 
1:         private NetworkDestinationContainer(NetworkDestinationView view, ObjectName objectName) {
1:             this.view = view;
1:             this.objectName = objectName;
1:         }
1:     }
author:Jeff Genender
-------------------------------------------------------------------------------
commit:bf1c57b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:                 synchronized (destinationObjectNameMap) {
0:                     map.remove(entry.getKey());
0:                     ObjectName objectName = destinationObjectNameMap.remove(entry.getKey());
0:                     if (objectName != null) {
1:                         try {
0:                             if (objectName != null) {
0:                                 brokerService.getManagementContext().unregisterMBean(objectName);
1:                             }
0:                         } catch (Throwable e) {
1:                             LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
0:                     entry.getValue().close();
author:rajdavies
-------------------------------------------------------------------------------
commit:374cab9
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.thread.Scheduler;
/////////////////////////////////////////////////////////////////////////
1:     private final NetworkBridgeConfiguration networkBridgeConfiguration;
1:     private final Scheduler scheduler;
1:     private final Runnable purgeInactiveDestinationViewTask;
1:     public MBeanBridgeDestination(BrokerService brokerService, NetworkBridgeConfiguration networkBridgeConfiguration, NetworkBridge bridge, NetworkBridgeView networkBridgeView) {
1:         this.networkBridgeConfiguration = networkBridgeConfiguration;
1:         this.scheduler = brokerService.getScheduler();
1:         purgeInactiveDestinationViewTask = new Runnable() {
1:             public void run() {
1:                 purgeInactiveDestinationViews();
1:             }
1:         };
/////////////////////////////////////////////////////////////////////////
0:                         networkDestinationView = new NetworkDestinationView(networkBridgeView, destination.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
0:                         networkDestinationView = new NetworkDestinationView(networkBridgeView, destination.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
1:     public void start() {
1:         if (networkBridgeConfiguration.isGcDestinationViews()) {
1:             long period = networkBridgeConfiguration.getGcSweepTime();
1:             if (period > 0) {
1:                 scheduler.executePeriodically(purgeInactiveDestinationViewTask, period);
1:             }
1:         }
1:     }
1: 
1:     public void stop() {
1:         scheduler.cancel(purgeInactiveDestinationViewTask);
/////////////////////////////////////////////////////////////////////////
1:     private void purgeInactiveDestinationViews() {
1:         if (!brokerService.isUseJmx()) {
1:             return;
1:         }
1:         purgeInactiveDestinationView(inboundDestinationViewMap);
1:         purgeInactiveDestinationView(outboundDestinationViewMap);
1:     }
1: 
0:     private void purgeInactiveDestinationView(Map<ActiveMQDestination, NetworkDestinationView> map) {
1:         long time = System.currentTimeMillis() - networkBridgeConfiguration.getGcSweepTime();
0:         Map<ActiveMQDestination, NetworkDestinationView> gc = null;
0:         for (Map.Entry<ActiveMQDestination, NetworkDestinationView> entry : map.entrySet()) {
0:             if (entry.getValue().getLastAccessTime() <= time) {
0:                 if (gc == null) {
0:                     gc = new HashMap<ActiveMQDestination, NetworkDestinationView>();
1:                 }
0:                 gc.put(entry.getKey(), entry.getValue());
1:             }
1:         }
1: 
0:         if (gc != null) {
0:             for (Map.Entry<ActiveMQDestination, NetworkDestinationView> entry : gc.entrySet()) {
0:                 map.remove(entry.getKey());
0:                 ObjectName objectName = destinationObjectNameMap.get(entry.getKey());
0:                 if (objectName != null) {
0:                     try {
0:                         if (objectName != null) {
0:                             brokerService.getManagementContext().unregisterMBean(objectName);
1:                         }
0:                     } catch (Throwable e) {
0:                         LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
1:                     }
1:                 }
0:                 entry.getValue().close();
1:             }
1:         }
1:     }
1: 
commit:9b88902
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.NetworkBridgeView;
/////////////////////////////////////////////////////////////////////////
1:     private final NetworkBridgeView networkBridgeView;
0:     public MBeanBridgeDestination(BrokerService brokerService, NetworkBridge bridge, NetworkBridgeView networkBridgeView) {
1:         this.networkBridgeView = networkBridgeView;
/////////////////////////////////////////////////////////////////////////
0:                 if ((networkDestinationView = outboundDestinationViewMap.get(destination)) == null) {
0:                         networkDestinationView = new NetworkDestinationView(networkBridgeView,destination.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
0:                 if ((networkDestinationView = inboundDestinationViewMap.get(destination)) == null) {
0:                         networkDestinationView= new NetworkDestinationView(networkBridgeView,destination.getPhysicalName());
0:                         networkBridgeView.addNetworkDestinationView(networkDestinationView);
commit:489f929
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
0: import java.util.Map;
0: import java.util.concurrent.ConcurrentHashMap;
1: 
0: import javax.management.ObjectName;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.AnnotatedMBean;
1: import org.apache.activemq.broker.jmx.BrokerMBeanSupport;
1: import org.apache.activemq.broker.jmx.NetworkDestinationView;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class MBeanBridgeDestination {
1:     private static final Logger LOG = LoggerFactory.getLogger(MBeanBridgeDestination.class);
1:     private final BrokerService brokerService;
1:     private final NetworkBridge bridge;
0:     private Map<ActiveMQDestination, ObjectName> destinationObjectNameMap = new ConcurrentHashMap<ActiveMQDestination, ObjectName>();
0:     private Map<ActiveMQDestination, NetworkDestinationView> outboundDestinationViewMap = new ConcurrentHashMap<ActiveMQDestination, NetworkDestinationView>();
0:     private Map<ActiveMQDestination, NetworkDestinationView> inboundDestinationViewMap = new ConcurrentHashMap<ActiveMQDestination, NetworkDestinationView>();
1: 
0:     public MBeanBridgeDestination(BrokerService brokerService, NetworkBridge bridge) {
1:         this.brokerService = brokerService;
1:         this.bridge = bridge;
1:     }
1: 
1: 
1:     public void onOutboundMessage(Message message) {
1:         ActiveMQDestination destination = message.getDestination();
0:         NetworkDestinationView networkDestinationView = outboundDestinationViewMap.get(destination);
0:         if (networkDestinationView == null) {
0:             synchronized (destinationObjectNameMap) {
0:                 if (!destinationObjectNameMap.containsKey(destination)) {
0:                     ObjectName bridgeObjectName = bridge.getMbeanObjectName();
0:                     try {
0:                         ObjectName objectName = BrokerMBeanSupport.createNetworkOutBoundDestinationObjectName(bridgeObjectName, destination);
0:                         networkDestinationView = new NetworkDestinationView(destination.getPhysicalName());
0:                         AnnotatedMBean.registerMBean(brokerService.getManagementContext(), networkDestinationView, objectName);
0:                         destinationObjectNameMap.put(destination, objectName);
0:                         outboundDestinationViewMap.put(destination, networkDestinationView);
1: 
0:                     } catch (Exception e) {
0:                         LOG.warn("Failed to register " + destination, e);
1:                     }
1:                 }
1:             }
1:         }
0:         networkDestinationView.messageSent();
1:     }
1: 
1: 
1:     public void onInboundMessage(Message message) {
1:         ActiveMQDestination destination = message.getDestination();
0:         NetworkDestinationView networkDestinationView = inboundDestinationViewMap.get(destination);
0:         if (networkDestinationView == null) {
0:             synchronized (destinationObjectNameMap) {
0:                 if (!destinationObjectNameMap.containsKey(destination)) {
0:                     ObjectName bridgeObjectName = bridge.getMbeanObjectName();
0:                     try {
0:                         ObjectName objectName = BrokerMBeanSupport.createNetworkInBoundDestinationObjectName(bridgeObjectName, destination);
0:                         networkDestinationView= new NetworkDestinationView(destination.getPhysicalName());
0:                         AnnotatedMBean.registerMBean(brokerService.getManagementContext(), networkDestinationView, objectName);
0:                         destinationObjectNameMap.put(destination, objectName);
0:                         inboundDestinationViewMap.put(destination, networkDestinationView);
0:                     } catch (Exception e) {
0:                         LOG.warn("Failed to register " + destination, e);
1:                     }
1:                 }
1:             }
1:         }
0:         networkDestinationView.messageSent();
1:     }
1: 
0:     public void close() {
1:         if (!brokerService.isUseJmx()) {
1:             return;
1:         }
1: 
0:         for (ObjectName objectName : destinationObjectNameMap.values()) {
0:             try {
0:                 if (objectName != null) {
0:                     brokerService.getManagementContext().unregisterMBean(objectName);
1:                 }
0:             } catch (Throwable e) {
0:                 LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
1:             }
1:         }
0:         destinationObjectNameMap.clear();
0:         outboundDestinationViewMap.clear();
1:         inboundDestinationViewMap.clear();
1:     }
1: 
1: }
============================================================================