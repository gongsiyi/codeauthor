1:1559808: /**
1:1559808:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1559808:  * contributor license agreements.  See the NOTICE file distributed with
1:1559808:  * this work for additional information regarding copyright ownership.
1:1559808:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1559808:  * (the "License"); you may not use this file except in compliance with
1:1559808:  * the License.  You may obtain a copy of the License at
1:1559808:  *
1:1559808:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1559808:  *
1:1559808:  * Unless required by applicable law or agreed to in writing, software
1:1559808:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1559808:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1559808:  * See the License for the specific language governing permissions and
1:1559808:  * limitations under the License.
1:1559808:  */
1:1559808: package org.apache.activemq.jaas;
1:1559808: 
1:1559808: import static org.junit.Assert.assertTrue;
1:1559808: 
1:1559808: import java.io.File;
1:1559808: import java.io.FileNotFoundException;
1:1559808: import java.io.FileOutputStream;
1:1559808: import java.io.IOException;
1:1559808: import java.util.HashMap;
1:1559808: import java.util.Map;
1:1559808: import java.util.Properties;
1:1559808: import java.util.concurrent.ArrayBlockingQueue;
1:1559808: import java.util.concurrent.BlockingQueue;
1:1559808: import java.util.concurrent.CountDownLatch;
1:1559808: import java.util.concurrent.ExecutorService;
1:1559808: import java.util.concurrent.Executors;
1:1559808: import java.util.concurrent.TimeUnit;
1:1559808: 
1:1559808: import javax.security.auth.Subject;
1:1559808: import javax.security.auth.callback.CallbackHandler;
1:1559808: 
1:1559808: import org.junit.After;
1:1559808: import org.junit.Before;
1:1559808: import org.junit.Rule;
1:1559808: import org.junit.Test;
1:1559808: import org.junit.rules.ErrorCollector;
1:1559808: import org.junit.rules.TemporaryFolder;
1:1559808: import org.junit.rules.TestName;
1:1559808: 
1:1559808: public class PropertiesLoginModuleRaceConditionTest {
1:1559808: 
1:1559808:     private static final String GROUPS_FILE = "groups.properties";
1:1559808:     private static final String USERS_FILE = "users.properties";
1:1559808:     private static final String USERNAME = "first";
1:1559808:     private static final String PASSWORD = "secret";
1:1559808: 
1:1559808:     @Rule
1:1559808:     public final ErrorCollector e = new ErrorCollector();
1:1559808: 
1:1559808:     @Rule
1:1559808:     public final TemporaryFolder temp = new TemporaryFolder();
1:1559808: 
1:1559808:     @Rule
1:1559808:     public final TestName name = new TestName();
1:1559808: 
1:1559808:     private Map<String, String> options;
1:1559808:     private BlockingQueue<Exception> errors;
1:1559808:     private ExecutorService pool;
1:1559808:     private CallbackHandler callback;
1:1559808: 
1:1559808:     private static class LoginTester implements Runnable {
1:1559808:         private final CountDownLatch finished;
1:1559808:         private final BlockingQueue<Exception> errors;
1:1559808:         private final Map<String, String> options;
1:1559808:         private final CountDownLatch start;
1:1559808:         private final CallbackHandler callback;
1:1559808: 
1:1559808:         LoginTester(CountDownLatch start, CountDownLatch finished,
1:1559808:                 BlockingQueue<Exception> errors, Map<String, String> options,
1:1559808:                 CallbackHandler callbackHandler) {
1:1559808:             this.finished = finished;
1:1559808:             this.errors = errors;
1:1559808:             this.options = options;
1:1559808:             this.start = start;
1:1559808:             this.callback = callbackHandler;
1:1559808:         }
1:1559808: 
1:1559808:         @Override
1:1559808:         public void run() {
1:1559808:             try {
1:1559808:                 start.await();
1:1559808: 
1:1559808:                 Subject subject = new Subject();
1:1559808:                 PropertiesLoginModule module = new PropertiesLoginModule();
1:1559808:                 module.initialize(subject, callback, new HashMap<Object, Object>(),
1:1559808:                         options);
1:1559808:                 module.login();
1:1559808:                 module.commit();
1:1559808:             } catch (Exception e) {
1:1559808:                 errors.offer(e);
1:1559808:             } finally {
1:1559808:                 finished.countDown();
1:1559808:             }
1:1559808:         }
1:1559808:     }
1:1559808: 
1:1559808:     @Before
1:1559808:     public void before() throws FileNotFoundException, IOException {
1:1559808:         createUsers();
1:1559808:         createGroups();
1:1559808: 
1:1559808:         options = new HashMap<String, String>();
1:1559808:         options.put("reload", "true"); // Used to simplify reproduction of the
1:1559808:                                         // race condition
1:1559808:         options.put("org.apache.activemq.jaas.properties.user", USERS_FILE);
1:1559808:         options.put("org.apache.activemq.jaas.properties.group", GROUPS_FILE);
1:1559808:         options.put("baseDir", temp.getRoot().getAbsolutePath());
1:1559808: 
1:1559808:         errors = new ArrayBlockingQueue<Exception>(processorCount());
1:1559808:         pool = Executors.newFixedThreadPool(processorCount());
1:1559808:         callback = new JassCredentialCallbackHandler(USERNAME, PASSWORD);
1:1559808:     }
1:1559808: 
1:1559808:     @After
1:1559808:     public void after() throws InterruptedException {
1:1559808:         pool.shutdown();
1:1559808:         assertTrue(pool.awaitTermination(500, TimeUnit.SECONDS));
1:59cd018:         PropertiesLoader.resetUsersAndGroupsCache();
1:1559808:     }
1:1559808: 
1:1559808:     @Test
1:1559808:     public void raceConditionInUsersAndGroupsLoading() throws InterruptedException, FileNotFoundException, IOException {
1:1559808: 
1:1559808:         // Brute force approach to increase the likelihood of the race condition occurring
1:1559808:         for (int i = 0; i < 25000; i++) {
1:1559808:             final CountDownLatch start = new CountDownLatch(1);
1:1559808:             final CountDownLatch finished = new CountDownLatch(processorCount());
1:1559808:             prepareLoginThreads(start, finished);
1:1559808: 
1:1559808:             // Releases every login thread simultaneously to increase our chances of
1:1559808:             // encountering the race condition
1:1559808:             start.countDown();
1:1559808: 
1:1559808:             finished.await();
1:1559808:             if (isRaceConditionDetected()) {
1:1559808:                 e.addError(new AssertionError("At least one race condition in PropertiesLoginModule "
1:1559808:                         + "has been encountered. Please examine the "
1:1559808:                         + "following stack traces for more details:"));
1:1559808:                 for (Exception exception : errors) {
1:1559808:                     e.addError(exception);
1:1559808:                 }
1:1559808:                 return;
1:1559808:             }
1:1559808:         }
1:1559808:     }
1:1559808: 
1:1559808:     private boolean isRaceConditionDetected() {
1:1559808:         return errors.size() > 0;
1:1559808:     }
1:1559808: 
1:1559808:     private void prepareLoginThreads(final CountDownLatch start, final CountDownLatch finished) {
1:1559808:         for (int processor = 1; processor <= processorCount() * 2; processor++) {
1:1559808:             pool.submit(new LoginTester(start, finished, errors, options, callback));
1:1559808:         }
1:1559808:     }
1:1559808: 
1:1559808:     private int processorCount() {
1:1559808:         return Runtime.getRuntime().availableProcessors();
1:1559808:     }
1:1559808: 
1:1559808:     private void store(Properties from, File to) throws FileNotFoundException, IOException {
1:1559808:         FileOutputStream output = new FileOutputStream(to);
1:1559808:         try {
1:1559808:             from.store(output, "Generated by " + name.getMethodName());
1:1559808:         } finally {
1:1559808:             output.close();
1:1559808:         }
1:1559808:     }
1:1559808: 
1:1559808:     private void createGroups() throws FileNotFoundException, IOException {
1:1559808:         Properties groups = new Properties();
1:1559808:         for (int i = 0; i < 100; i++) {
1:1559808:             groups.put("group" + i, "first,second,third");
1:1559808:         }
1:1559808:         store(groups, temp.newFile(GROUPS_FILE));
1:1559808:     }
1:1559808: 
1:1559808:     private void createUsers() throws FileNotFoundException, IOException {
1:1559808:         Properties users = new Properties();
1:1559808:         users.put(USERNAME, PASSWORD);
1:1559808:         users.put("second", PASSWORD);
1:1559808:         users.put("third", PASSWORD);
1:1559808:         store(users, temp.newFile(USERS_FILE));
1:1559808:     }
1:1559808: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:59cd018
/////////////////////////////////////////////////////////////////////////
1:         PropertiesLoader.resetUsersAndGroupsCache();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1559808
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jaas;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.FileNotFoundException;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.concurrent.ArrayBlockingQueue;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.CallbackHandler;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.ErrorCollector;
1: import org.junit.rules.TemporaryFolder;
1: import org.junit.rules.TestName;
1: 
1: public class PropertiesLoginModuleRaceConditionTest {
1: 
1:     private static final String GROUPS_FILE = "groups.properties";
1:     private static final String USERS_FILE = "users.properties";
1:     private static final String USERNAME = "first";
1:     private static final String PASSWORD = "secret";
1: 
1:     @Rule
1:     public final ErrorCollector e = new ErrorCollector();
1: 
1:     @Rule
1:     public final TemporaryFolder temp = new TemporaryFolder();
1: 
1:     @Rule
1:     public final TestName name = new TestName();
1: 
1:     private Map<String, String> options;
1:     private BlockingQueue<Exception> errors;
1:     private ExecutorService pool;
1:     private CallbackHandler callback;
1: 
1:     private static class LoginTester implements Runnable {
1:         private final CountDownLatch finished;
1:         private final BlockingQueue<Exception> errors;
1:         private final Map<String, String> options;
1:         private final CountDownLatch start;
1:         private final CallbackHandler callback;
1: 
1:         LoginTester(CountDownLatch start, CountDownLatch finished,
1:                 BlockingQueue<Exception> errors, Map<String, String> options,
1:                 CallbackHandler callbackHandler) {
1:             this.finished = finished;
1:             this.errors = errors;
1:             this.options = options;
1:             this.start = start;
1:             this.callback = callbackHandler;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 start.await();
1: 
1:                 Subject subject = new Subject();
1:                 PropertiesLoginModule module = new PropertiesLoginModule();
1:                 module.initialize(subject, callback, new HashMap<Object, Object>(),
1:                         options);
1:                 module.login();
1:                 module.commit();
1:             } catch (Exception e) {
1:                 errors.offer(e);
1:             } finally {
1:                 finished.countDown();
1:             }
1:         }
1:     }
1: 
1:     @Before
1:     public void before() throws FileNotFoundException, IOException {
1:         createUsers();
1:         createGroups();
1: 
1:         options = new HashMap<String, String>();
1:         options.put("reload", "true"); // Used to simplify reproduction of the
1:                                         // race condition
1:         options.put("org.apache.activemq.jaas.properties.user", USERS_FILE);
1:         options.put("org.apache.activemq.jaas.properties.group", GROUPS_FILE);
1:         options.put("baseDir", temp.getRoot().getAbsolutePath());
1: 
1:         errors = new ArrayBlockingQueue<Exception>(processorCount());
1:         pool = Executors.newFixedThreadPool(processorCount());
1:         callback = new JassCredentialCallbackHandler(USERNAME, PASSWORD);
1:     }
1: 
1:     @After
1:     public void after() throws InterruptedException {
1:         pool.shutdown();
1:         assertTrue(pool.awaitTermination(500, TimeUnit.SECONDS));
0:         PropertiesLoginModule.resetUsersAndGroupsCache();
1:     }
1: 
1:     @Test
1:     public void raceConditionInUsersAndGroupsLoading() throws InterruptedException, FileNotFoundException, IOException {
1: 
1:         // Brute force approach to increase the likelihood of the race condition occurring
1:         for (int i = 0; i < 25000; i++) {
1:             final CountDownLatch start = new CountDownLatch(1);
1:             final CountDownLatch finished = new CountDownLatch(processorCount());
1:             prepareLoginThreads(start, finished);
1: 
1:             // Releases every login thread simultaneously to increase our chances of
1:             // encountering the race condition
1:             start.countDown();
1: 
1:             finished.await();
1:             if (isRaceConditionDetected()) {
1:                 e.addError(new AssertionError("At least one race condition in PropertiesLoginModule "
1:                         + "has been encountered. Please examine the "
1:                         + "following stack traces for more details:"));
1:                 for (Exception exception : errors) {
1:                     e.addError(exception);
1:                 }
1:                 return;
1:             }
1:         }
1:     }
1: 
1:     private boolean isRaceConditionDetected() {
1:         return errors.size() > 0;
1:     }
1: 
1:     private void prepareLoginThreads(final CountDownLatch start, final CountDownLatch finished) {
1:         for (int processor = 1; processor <= processorCount() * 2; processor++) {
1:             pool.submit(new LoginTester(start, finished, errors, options, callback));
1:         }
1:     }
1: 
1:     private int processorCount() {
1:         return Runtime.getRuntime().availableProcessors();
1:     }
1: 
1:     private void store(Properties from, File to) throws FileNotFoundException, IOException {
1:         FileOutputStream output = new FileOutputStream(to);
1:         try {
1:             from.store(output, "Generated by " + name.getMethodName());
1:         } finally {
1:             output.close();
1:         }
1:     }
1: 
1:     private void createGroups() throws FileNotFoundException, IOException {
1:         Properties groups = new Properties();
1:         for (int i = 0; i < 100; i++) {
1:             groups.put("group" + i, "first,second,third");
1:         }
1:         store(groups, temp.newFile(GROUPS_FILE));
1:     }
1: 
1:     private void createUsers() throws FileNotFoundException, IOException {
1:         Properties users = new Properties();
1:         users.put(USERNAME, PASSWORD);
1:         users.put("second", PASSWORD);
1:         users.put("third", PASSWORD);
1:         store(users, temp.newFile(USERS_FILE));
1:     }
1: }
============================================================================