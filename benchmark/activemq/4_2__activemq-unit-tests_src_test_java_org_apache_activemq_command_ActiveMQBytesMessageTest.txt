2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
3:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MessageFormatException;
1:d29ca2a: import javax.jms.MessageNotReadableException;
1:d29ca2a: import javax.jms.MessageNotWriteableException;
1:d29ca2a: 
1:d29ca2a: import junit.framework.TestCase;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQBytesMessageTest extends TestCase {
1:933eb2f: 
1:933eb2f:     public ActiveMQBytesMessageTest(String name) {
1:933eb2f:         super(name);
1:933eb2f:     }
1:933eb2f: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(ActiveMQBytesMessageTest.class);
2:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /*
1:d29ca2a:      * @see TestCase#setUp()
1:d29ca2a:      */
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /*
1:d29ca2a:      * @see TestCase#tearDown()
1:d29ca2a:      */
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetDataStructureType() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         assertEquals(msg.getDataStructureType(), CommandTypes.ACTIVEMQ_BYTES_MESSAGE);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetBodyLength() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         int len = 10;
1:d29ca2a:         try {
1:d29ca2a:             for (int i = 0; i < len; i++) {
1:74a7a8b:                 msg.writeLong(5L);
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException ex) {
1:d29ca2a:             ex.printStackTrace();
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.getBodyLength() == (len * 8));
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:             e.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadBoolean() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeBoolean(true);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readBoolean());
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadByte() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeByte((byte) 2);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readByte() == 2);
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadUnsignedByte() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeByte((byte) 2);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readUnsignedByte() == 2);
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadShort() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeShort((short) 3000);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readShort() == 3000);
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadUnsignedShort() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeShort((short) 3000);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readUnsignedShort() == 3000);
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadChar() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeChar('a');
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readChar() == 'a');
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadInt() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeInt(3000);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readInt() == 3000);
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadLong() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeLong(3000);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readLong() == 3000);
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadFloat() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeFloat(3.3f);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readFloat() == 3.3f);
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadDouble() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeDouble(3.3d);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readDouble() == 3.3d);
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadUTF() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             String str = "this is a test";
1:d29ca2a:             msg.writeUTF(str);
1:d29ca2a:             msg.reset();
1:d29ca2a:             assertTrue(msg.readUTF().equals(str));
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /*
1:d29ca2a:      * Class to test for int readBytes(byte[])
1:d29ca2a:      */
1:d29ca2a:     public void testReadBytesbyteArray() {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             byte[] data = new byte[50];
1:d29ca2a:             for (int i = 0; i < data.length; i++) {
1:d29ca2a:                 data[i] = (byte) i;
1:d29ca2a:             }
1:d29ca2a:             msg.writeBytes(data);
1:d29ca2a:             msg.reset();
1:d29ca2a:             byte[] test = new byte[data.length];
1:d29ca2a:             msg.readBytes(test);
1:d29ca2a:             for (int i = 0; i < test.length; i++) {
1:d29ca2a:                 assertTrue(test[i] == i);
1:d29ca2a:             }
1:d29ca2a:         } catch (JMSException jmsEx) {
1:d29ca2a:             jmsEx.printStackTrace();
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testWriteObject() throws JMSException {
1:d29ca2a:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             msg.writeObject("fred");
1:d29ca2a:             msg.writeObject(Boolean.TRUE);
1:d36c0d4:             msg.writeObject(Character.valueOf('q'));
1:d36c0d4:             msg.writeObject(Byte.valueOf((byte) 1));
1:d36c0d4:             msg.writeObject(Short.valueOf((short) 3));
1:d36c0d4:             msg.writeObject(Integer.valueOf(3));
1:74a7a8b:             msg.writeObject(Long.valueOf(300L));
1:d29ca2a:             msg.writeObject(new Float(3.3f));
1:d29ca2a:             msg.writeObject(new Double(3.3));
1:d29ca2a:             msg.writeObject(new byte[3]);
1:d29ca2a:         } catch (MessageFormatException mfe) {
1:d29ca2a:             fail("objectified primitives should be allowed");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.writeObject(new Object());
1:d29ca2a:             fail("only objectified primitives are allowed");
1:d29ca2a:         } catch (MessageFormatException mfe) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a:     /* new */
1:d29ca2a:     public void testClearBody() throws JMSException {
1:d29ca2a:         ActiveMQBytesMessage bytesMessage = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             bytesMessage.writeInt(1);
1:d29ca2a:             bytesMessage.clearBody();
1:d29ca2a:             assertFalse(bytesMessage.isReadOnlyBody());
1:d29ca2a:             bytesMessage.writeInt(1);
1:d29ca2a:             bytesMessage.readInt();
1:d29ca2a:         } catch (MessageNotReadableException mnwe) {
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             assertTrue(false);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReset() throws JMSException {
1:d29ca2a:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             message.writeDouble(24.5);
1:d29ca2a:             message.writeLong(311);
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             fail("should be writeable");
1:d29ca2a:         }
1:d29ca2a:         message.reset();
1:d29ca2a:         try {
1:d29ca2a:             assertTrue(message.isReadOnlyBody());
1:d29ca2a:             assertEquals(message.readDouble(), 24.5, 0);
1:d29ca2a:             assertEquals(message.readLong(), 311);
1:d29ca2a:         } catch (MessageNotReadableException mnre) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeInt(33);
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadOnlyBody() throws JMSException {
1:d29ca2a:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:d29ca2a:         try {
1:d29ca2a:             message.writeBoolean(true);
1:d29ca2a:             message.writeByte((byte) 1);
1:d29ca2a:             message.writeByte((byte) 1);
1:d29ca2a:             message.writeBytes(new byte[1]);
1:d29ca2a:             message.writeBytes(new byte[3], 0, 2);
1:d29ca2a:             message.writeChar('a');
1:d29ca2a:             message.writeDouble(1.5);
1:d29ca2a:             message.writeFloat((float) 1.5);
1:d29ca2a:             message.writeInt(1);
1:d29ca2a:             message.writeLong(1);
1:d29ca2a:             message.writeObject("stringobj");
1:d29ca2a:             message.writeShort((short) 1);
1:d29ca2a:             message.writeShort((short) 1);
1:d29ca2a:             message.writeUTF("utfstring");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             fail("Should be writeable");
1:d29ca2a:         }
1:d29ca2a:         message.reset();
1:d29ca2a:         try {
1:d29ca2a:             message.readBoolean();
1:d29ca2a:             message.readByte();
1:d29ca2a:             message.readUnsignedByte();
1:d29ca2a:             message.readBytes(new byte[1]);
1:d29ca2a:             message.readBytes(new byte[2], 2);
1:d29ca2a:             message.readChar();
1:d29ca2a:             message.readDouble();
1:d29ca2a:             message.readFloat();
1:d29ca2a:             message.readInt();
1:d29ca2a:             message.readLong();
1:d29ca2a:             message.readUTF();
1:d29ca2a:             message.readShort();
1:d29ca2a:             message.readUnsignedShort();
1:d29ca2a:             message.readUTF();
1:d29ca2a:         } catch (MessageNotReadableException mnwe) {
1:d29ca2a:             fail("Should be readable");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeBoolean(true);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeByte((byte) 1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeBytes(new byte[1]);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeBytes(new byte[3], 0, 2);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeChar('a');
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeDouble(1.5);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeFloat((float) 1.5);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeInt(1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeLong(1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeObject("stringobj");
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeShort((short) 1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.writeUTF("utfstring");
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testWriteOnlyBody() throws JMSException {
1:d29ca2a:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:d29ca2a:         message.clearBody();
1:d29ca2a:         try {
1:d29ca2a:             message.writeBoolean(true);
1:d29ca2a:             message.writeByte((byte) 1);
1:d29ca2a:             message.writeByte((byte) 1);
1:d29ca2a:             message.writeBytes(new byte[1]);
1:d29ca2a:             message.writeBytes(new byte[3], 0, 2);
1:d29ca2a:             message.writeChar('a');
1:d29ca2a:             message.writeDouble(1.5);
1:d29ca2a:             message.writeFloat((float) 1.5);
1:d29ca2a:             message.writeInt(1);
1:d29ca2a:             message.writeLong(1);
1:d29ca2a:             message.writeObject("stringobj");
1:d29ca2a:             message.writeShort((short) 1);
1:d29ca2a:             message.writeShort((short) 1);
1:d29ca2a:             message.writeUTF("utfstring");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             fail("Should be writeable");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readBoolean();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readByte();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readUnsignedByte();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readBytes(new byte[1]);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readBytes(new byte[2], 2);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readChar();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readDouble();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readFloat();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readInt();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readLong();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readUTF();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readShort();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readUnsignedShort();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             message.readUTF();
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: 
1:     public ActiveMQBytesMessageTest(String name) {
1:         super(name);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:                 msg.writeLong(5L);
/////////////////////////////////////////////////////////////////////////
1:             msg.writeObject(Long.valueOf(300L));
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageFormatException;
1: import javax.jms.MessageNotReadableException;
1: import javax.jms.MessageNotWriteableException;
1: 
0: import org.apache.activemq.command.ActiveMQBytesMessage;
0: import org.apache.activemq.command.CommandTypes;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class ActiveMQBytesMessageTest extends TestCase {
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(ActiveMQBytesMessageTest.class);
1:     }
1: 
1:     /*
1:      * @see TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     /*
1:      * @see TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     /**
0:      * Constructor for ActiveMQBytesMessageTest.
1:      *
0:      * @param arg0
1:      */
0:     public ActiveMQBytesMessageTest(String arg0) {
0:         super(arg0);
1:     }
1: 
1:     public void testGetDataStructureType() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         assertEquals(msg.getDataStructureType(), CommandTypes.ACTIVEMQ_BYTES_MESSAGE);
1:     }
1: 
1:     public void testGetBodyLength() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         int len = 10;
1:         try {
1:             for (int i = 0; i < len; i++) {
0:                 msg.writeLong(5l);
1:             }
1:         } catch (JMSException ex) {
1:             ex.printStackTrace();
1:         }
1:         try {
1:             msg.reset();
1:             assertTrue(msg.getBodyLength() == (len * 8));
1:         } catch (Throwable e) {
1:             e.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadBoolean() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeBoolean(true);
1:             msg.reset();
1:             assertTrue(msg.readBoolean());
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadByte() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeByte((byte) 2);
1:             msg.reset();
1:             assertTrue(msg.readByte() == 2);
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadUnsignedByte() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeByte((byte) 2);
1:             msg.reset();
1:             assertTrue(msg.readUnsignedByte() == 2);
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadShort() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeShort((short) 3000);
1:             msg.reset();
1:             assertTrue(msg.readShort() == 3000);
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadUnsignedShort() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeShort((short) 3000);
1:             msg.reset();
1:             assertTrue(msg.readUnsignedShort() == 3000);
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadChar() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeChar('a');
1:             msg.reset();
1:             assertTrue(msg.readChar() == 'a');
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadInt() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeInt(3000);
1:             msg.reset();
1:             assertTrue(msg.readInt() == 3000);
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadLong() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeLong(3000);
1:             msg.reset();
1:             assertTrue(msg.readLong() == 3000);
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadFloat() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeFloat(3.3f);
1:             msg.reset();
1:             assertTrue(msg.readFloat() == 3.3f);
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadDouble() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeDouble(3.3d);
1:             msg.reset();
1:             assertTrue(msg.readDouble() == 3.3d);
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReadUTF() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             String str = "this is a test";
1:             msg.writeUTF(str);
1:             msg.reset();
1:             assertTrue(msg.readUTF().equals(str));
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     /*
1:      * Class to test for int readBytes(byte[])
1:      */
1:     public void testReadBytesbyteArray() {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             byte[] data = new byte[50];
1:             for (int i = 0; i < data.length; i++) {
1:                 data[i] = (byte) i;
1:             }
1:             msg.writeBytes(data);
1:             msg.reset();
1:             byte[] test = new byte[data.length];
1:             msg.readBytes(test);
1:             for (int i = 0; i < test.length; i++) {
1:                 assertTrue(test[i] == i);
1:             }
1:         } catch (JMSException jmsEx) {
1:             jmsEx.printStackTrace();
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testWriteObject() throws JMSException {
1:         ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:         try {
1:             msg.writeObject("fred");
1:             msg.writeObject(Boolean.TRUE);
0:             msg.writeObject(new Character('q'));
0:             msg.writeObject(new Byte((byte) 1));
0:             msg.writeObject(new Short((short) 3));
0:             msg.writeObject(new Integer(3));
0:             msg.writeObject(new Long(300l));
1:             msg.writeObject(new Float(3.3f));
1:             msg.writeObject(new Double(3.3));
1:             msg.writeObject(new byte[3]);
1:         } catch (MessageFormatException mfe) {
1:             fail("objectified primitives should be allowed");
1:         }
1:         try {
1:             msg.writeObject(new Object());
1:             fail("only objectified primitives are allowed");
1:         } catch (MessageFormatException mfe) {
1:         }
1:     }
1: 
1: 
1:     /* new */
1:     public void testClearBody() throws JMSException {
1:         ActiveMQBytesMessage bytesMessage = new ActiveMQBytesMessage();
1:         try {
1:             bytesMessage.writeInt(1);
1:             bytesMessage.clearBody();
1:             assertFalse(bytesMessage.isReadOnlyBody());
1:             bytesMessage.writeInt(1);
1:             bytesMessage.readInt();
1:         } catch (MessageNotReadableException mnwe) {
1:         } catch (MessageNotWriteableException mnwe) {
1:             assertTrue(false);
1:         }
1:     }
1: 
1:     public void testReset() throws JMSException {
1:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:         try {
1:             message.writeDouble(24.5);
1:             message.writeLong(311);
1:         } catch (MessageNotWriteableException mnwe) {
1:             fail("should be writeable");
1:         }
1:         message.reset();
1:         try {
1:             assertTrue(message.isReadOnlyBody());
1:             assertEquals(message.readDouble(), 24.5, 0);
1:             assertEquals(message.readLong(), 311);
1:         } catch (MessageNotReadableException mnre) {
1:             fail("should be readable");
1:         }
1:         try {
1:             message.writeInt(33);
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:     }
1: 
1:     public void testReadOnlyBody() throws JMSException {
1:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:         try {
1:             message.writeBoolean(true);
1:             message.writeByte((byte) 1);
1:             message.writeByte((byte) 1);
1:             message.writeBytes(new byte[1]);
1:             message.writeBytes(new byte[3], 0, 2);
1:             message.writeChar('a');
1:             message.writeDouble(1.5);
1:             message.writeFloat((float) 1.5);
1:             message.writeInt(1);
1:             message.writeLong(1);
1:             message.writeObject("stringobj");
1:             message.writeShort((short) 1);
1:             message.writeShort((short) 1);
1:             message.writeUTF("utfstring");
1:         } catch (MessageNotWriteableException mnwe) {
1:             fail("Should be writeable");
1:         }
1:         message.reset();
1:         try {
1:             message.readBoolean();
1:             message.readByte();
1:             message.readUnsignedByte();
1:             message.readBytes(new byte[1]);
1:             message.readBytes(new byte[2], 2);
1:             message.readChar();
1:             message.readDouble();
1:             message.readFloat();
1:             message.readInt();
1:             message.readLong();
1:             message.readUTF();
1:             message.readShort();
1:             message.readUnsignedShort();
1:             message.readUTF();
1:         } catch (MessageNotReadableException mnwe) {
1:             fail("Should be readable");
1:         }
1:         try {
1:             message.writeBoolean(true);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeByte((byte) 1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeBytes(new byte[1]);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeBytes(new byte[3], 0, 2);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeChar('a');
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeDouble(1.5);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeFloat((float) 1.5);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeInt(1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeLong(1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeObject("stringobj");
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeShort((short) 1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:         try {
1:             message.writeUTF("utfstring");
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:     }
1: 
1:     public void testWriteOnlyBody() throws JMSException {
1:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:         message.clearBody();
1:         try {
1:             message.writeBoolean(true);
1:             message.writeByte((byte) 1);
1:             message.writeByte((byte) 1);
1:             message.writeBytes(new byte[1]);
1:             message.writeBytes(new byte[3], 0, 2);
1:             message.writeChar('a');
1:             message.writeDouble(1.5);
1:             message.writeFloat((float) 1.5);
1:             message.writeInt(1);
1:             message.writeLong(1);
1:             message.writeObject("stringobj");
1:             message.writeShort((short) 1);
1:             message.writeShort((short) 1);
1:             message.writeUTF("utfstring");
1:         } catch (MessageNotWriteableException mnwe) {
1:             fail("Should be writeable");
1:         }
1:         try {
1:             message.readBoolean();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException mnwe) {
1:         }
1:         try {
1:             message.readByte();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readUnsignedByte();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readBytes(new byte[1]);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readBytes(new byte[2], 2);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readChar();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readDouble();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readFloat();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readInt();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readLong();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readUTF();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readShort();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readUnsignedShort();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:         try {
1:             message.readUTF();
1:             fail("Should have thrown exception");
1:         } catch (MessageNotReadableException e) {
1:         }
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:             msg.writeObject(Character.valueOf('q'));
1:             msg.writeObject(Byte.valueOf((byte) 1));
1:             msg.writeObject(Short.valueOf((short) 3));
1:             msg.writeObject(Integer.valueOf(3));
0:             msg.writeObject(Long.valueOf(300l));
============================================================================