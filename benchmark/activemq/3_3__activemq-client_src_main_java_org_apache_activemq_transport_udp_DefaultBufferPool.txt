1:1c5ecb3: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:1c5ecb3:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:1c5ecb3:  * Unless required by applicable law or agreed to in writing, software
1:1c5ecb3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1c5ecb3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1c5ecb3:  * See the License for the specific language governing permissions and
1:1c5ecb3:  * limitations under the License.
2:1c5ecb3:  */
1:1c5ecb3: package org.apache.activemq.transport.udp;
3:1c5ecb3: 
1:1c5ecb3: import java.nio.ByteBuffer;
1:1c5ecb3: import java.util.ArrayList;
1:1c5ecb3: import java.util.List;
1:1c5ecb3: 
1:1c5ecb3: /**
1:d8c0ff1:  * A default implementation of {@link SimpleBufferPool} which keeps a pool of direct
1:1c5ecb3:  * byte buffers.
1:1c5ecb3:  */
1:187f884: public class DefaultBufferPool extends SimpleBufferPool implements ByteBufferPool {
1:1c5ecb3: 
1:933eb2f:     private List<ByteBuffer> buffers = new ArrayList<ByteBuffer>();
1:1c5ecb3:     private Object lock = new Object();
1:1c5ecb3: 
1:187f884:     public DefaultBufferPool() {
1:187f884:         super(true);
1:187f884:     }
1:187f884: 
1:187f884:     public DefaultBufferPool(boolean useDirect) {
1:187f884:         super(useDirect);
1:187f884:     }
1:187f884: 
1:d8c0ff1:     @Override
1:1c5ecb3:     public synchronized ByteBuffer borrowBuffer() {
1:1c5ecb3:         synchronized (lock) {
1:1c5ecb3:             int size = buffers.size();
1:1c5ecb3:             if (size > 0) {
1:933eb2f:                 return buffers.remove(size - 1);
3:1c5ecb3:             }
1:1c5ecb3:         }
1:187f884:         return createBuffer();
1:1c5ecb3:     }
1:1c5ecb3: 
1:d8c0ff1:     @Override
1:187f884:     public void returnBuffer(ByteBuffer buffer) {
1:1c5ecb3:         synchronized (lock) {
1:1c5ecb3:             buffers.add(buffer);
1:1c5ecb3:         }
1:1c5ecb3:     }
1:1c5ecb3: 
1:d8c0ff1:     @Override
1:187f884:     public void start() throws Exception {
1:1c5ecb3:     }
1:1c5ecb3: 
1:d8c0ff1:     @Override
1:187f884:     public void stop() throws Exception {
1:1c5ecb3:         synchronized (lock) {
1:1c5ecb3:             /*
1:187f884:              * for (Iterator iter = buffers.iterator(); iter.hasNext();) {
1:187f884:              * ByteBuffer buffer = (ByteBuffer) iter.next(); }
1:187f884:              */
1:1c5ecb3:             buffers.clear();
1:1c5ecb3:         }
1:1c5ecb3:     }
1:1c5ecb3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d8c0ff1
/////////////////////////////////////////////////////////////////////////
1:  * A default implementation of {@link SimpleBufferPool} which keeps a pool of direct
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private List<ByteBuffer> buffers = new ArrayList<ByteBuffer>();
/////////////////////////////////////////////////////////////////////////
1:                 return buffers.remove(size - 1);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:187f884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class DefaultBufferPool extends SimpleBufferPool implements ByteBufferPool {
1:     public DefaultBufferPool() {
1:         super(true);
1:     }
1: 
1:     public DefaultBufferPool(boolean useDirect) {
1:         super(useDirect);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return createBuffer();
1:     public void returnBuffer(ByteBuffer buffer) {
1:     public void start() throws Exception {
1:     public void stop() throws Exception {
1:              * for (Iterator iter = buffers.iterator(); iter.hasNext();) {
1:              * ByteBuffer buffer = (ByteBuffer) iter.next(); }
1:              */
commit:1c5ecb3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.udp;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
0: import java.util.Iterator;
1: import java.util.List;
1: 
1: /**
0:  * A default implementation of {@link BufferPool} which keeps a pool of direct
1:  * byte buffers.
1:  * 
0:  * @version $Revision$
1:  */
0: public class DefaultBufferPool implements ByteBufferPool {
1: 
0:     private int defaultSize;
0:     private List buffers = new ArrayList();
1:     private Object lock = new Object();
1: 
1:     public synchronized ByteBuffer borrowBuffer() {
1:         synchronized (lock) {
1:             int size = buffers.size();
1:             if (size > 0) {
0:                 return (ByteBuffer) buffers.remove(size - 1);
1:             }
1:         }
0:         return ByteBuffer.allocateDirect(defaultSize);
1:     }
1: 
0:     public synchronized void returnBuffer(ByteBuffer buffer) {
1:         synchronized (lock) {
1:             buffers.add(buffer);
1:         }
1:     }
1: 
0:     public void setDefaultSize(int defaultSize) {
0:         this.defaultSize = defaultSize;
1:     }
1: 
0:     public synchronized void start() throws Exception {
1:     }
1: 
0:     public synchronized void stop() throws Exception {
1:         synchronized (lock) {
1:             /*
0:             for (Iterator iter = buffers.iterator(); iter.hasNext();) {
0:                 ByteBuffer buffer = (ByteBuffer) iter.next();
1:             }
1:             */
1:             buffers.clear();
1:         }
1:     }
1: 
1: }
============================================================================