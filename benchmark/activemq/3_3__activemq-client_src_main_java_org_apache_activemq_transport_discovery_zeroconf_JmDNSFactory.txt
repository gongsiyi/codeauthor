1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:3c3feb4: package org.apache.activemq.transport.discovery.zeroconf;
5:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.InetAddress;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Map;
1:86cbdfd: import java.util.concurrent.atomic.AtomicInteger;
1:74a7a8b: import javax.jmdns.JmDNS;
1:74a7a8b: 
1:933eb2f: public final class JmDNSFactory {
1:f812e34: 
1:ecf89a6:     static Map<InetAddress, UsageTracker> registry = new HashMap<InetAddress, UsageTracker>();
1:f812e34: 
1:d29ca2a:     static class UsageTracker {
1:d29ca2a:         AtomicInteger count = new AtomicInteger(0);
1:f812e34:         JmDNS jmDNS;
4:d29ca2a:     }
1:f812e34: 
1:933eb2f:     private JmDNSFactory() {        
1:933eb2f:     }
1:933eb2f:     
1:d29ca2a:     static synchronized JmDNS create(final InetAddress address) throws IOException {
1:ecf89a6:         UsageTracker tracker = registry.get(address);
1:f812e34:         if (tracker == null) {
1:d29ca2a:             tracker = new UsageTracker();
1:9a32e38:             tracker.jmDNS = JmDNS.create(address);
1:d29ca2a:             registry.put(address, tracker);
1:f812e34:         }
1:d29ca2a:         tracker.count.incrementAndGet();
1:d29ca2a:         return tracker.jmDNS;
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     static synchronized boolean onClose(InetAddress address) {
1:ecf89a6:         UsageTracker tracker = registry.get(address);
1:f812e34:         if (tracker != null) {
1:f812e34:             if (tracker.count.decrementAndGet() == 0) {
1:d29ca2a:                 registry.remove(address);
1:d29ca2a:                 return true;
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:af27811
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.jmdns.JmDNS;
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class JmDNSFactory {
/////////////////////////////////////////////////////////////////////////
1:     private JmDNSFactory() {        
1:     }
1:     
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     static Map<InetAddress, UsageTracker> registry = new HashMap<InetAddress, UsageTracker>();
/////////////////////////////////////////////////////////////////////////
1:         UsageTracker tracker = registry.get(address);
/////////////////////////////////////////////////////////////////////////
1:         UsageTracker tracker = registry.get(address);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jmdns.JmDNS;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         JmDNS jmDNS;
1: 
1:         if (tracker == null) {
0:                     if (onClose(address)) {
1:         }
1: 
1:     static synchronized boolean onClose(InetAddress address) {
0:         UsageTracker tracker = (UsageTracker)registry.get(address);
1:         if (tracker != null) {
1:             if (tracker.count.decrementAndGet() == 0) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.transport.discovery.rendezvous;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.util.HashMap;
1: import java.util.Map;
0: import javax.jmdns.JmDNS;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
0: public class JmDNSFactory {
1:     
0:     static Map registry = new HashMap();
1:     static class UsageTracker {
1:         AtomicInteger count = new AtomicInteger(0);
0:         JmDNS jmDNS; 
1:     }
1:     
1:     static synchronized JmDNS create(final InetAddress address) throws IOException {
0:         UsageTracker tracker = (UsageTracker)registry.get(address);
0:         if( tracker == null ) {
1:             tracker = new UsageTracker();
0:             tracker.jmDNS = new JmDNS(address) {
0:                 public void close() {
0:                     if( onClose(address) ) {
0:                         super.close();
1:                     }
1:                 }
0:             };
1:             registry.put(address, tracker);
1:         } 
1:         tracker.count.incrementAndGet();
1:         return tracker.jmDNS;
1:     }
1:     
0:     static synchronized boolean onClose(InetAddress address){
0:         UsageTracker tracker=(UsageTracker) registry.get(address);
0:         if(tracker!=null){
0:             if(tracker.count.decrementAndGet()==0){
1:                 registry.remove(address);
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:13270e4
/////////////////////////////////////////////////////////////////////////
0:     static synchronized boolean onClose(InetAddress address) {
commit:3c3feb4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.discovery.zeroconf;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:9a32e38
/////////////////////////////////////////////////////////////////////////
0: import javax.jmdns.JmDNS;
/////////////////////////////////////////////////////////////////////////
1:             tracker.jmDNS = JmDNS.create(address);
0:     static synchronized boolean onClose(InetAddress address, JmDNS dns) {
============================================================================