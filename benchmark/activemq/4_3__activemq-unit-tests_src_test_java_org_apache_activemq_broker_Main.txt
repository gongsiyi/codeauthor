1:876d9cf: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:44bafc3:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:876d9cf:  *
1:876d9cf:  * Unless required by applicable law or agreed to in writing, software
1:876d9cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:876d9cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:876d9cf:  * See the License for the specific language governing permissions and
1:876d9cf:  * limitations under the License.
1:876d9cf:  */
1:876d9cf: package org.apache.activemq.broker;
4:876d9cf: 
1:74a7a8b: import javax.jms.Connection;
1:74a7a8b: import javax.jms.Session;
1:74a7a8b: 
1:876d9cf: import org.apache.activemq.ActiveMQConnectionFactory;
1:0aac7f5: import org.apache.activemq.broker.jmx.ManagementContext;
1:876d9cf: import org.apache.activemq.command.ActiveMQQueue;
1:876d9cf: import org.apache.activemq.demo.DefaultQueueSender;
1:876d9cf: 
1:876d9cf: /**
1:876d9cf:  * A helper class which can be handy for running a broker in your IDE from the
1:876d9cf:  * activemq-core module.
1:0bbc0ac:  * 
1:230a86c:  * 
1:876d9cf:  */
1:933eb2f: public final class Main {
1:230a86c:     protected static boolean createConsumers;
1:876d9cf: 
1:933eb2f:     private Main() {        
1:933eb2f:     }
1:933eb2f:     
1:876d9cf:     /**
1:876d9cf:      * @param args
1:876d9cf:      */
1:876d9cf:     public static void main(String[] args) {
1:876d9cf:         try {
1:876d9cf:             BrokerService broker = new BrokerService();
1:876d9cf:             broker.setPersistent(false);
1:0aac7f5: 
1:fc36cd7:             // String brokerDir = "xbean:...;
1:fc36cd7:             // System.setProperty("activemq.base", brokerDir);
1:fc36cd7:             // BrokerService broker = BrokerFactory.createBroker(new URI(brokerDir + "/activemq.xml"));
1:fc36cd7: 
1:0aac7f5:             // for running on Java 5 without mx4j
1:0aac7f5:             ManagementContext managementContext = broker.getManagementContext();
1:0aac7f5:             managementContext.setFindTigerMbeanServer(true);
1:0aac7f5:             managementContext.setUseMBeanServer(true);
1:0aac7f5:             managementContext.setCreateConnector(false);
1:0aac7f5: 
1:876d9cf:             broker.setUseJmx(true);
1:230a86c:             // broker.setPlugins(new BrokerPlugin[] { new
1:230a86c:             // ConnectionDotFilePlugin(), new UDPTraceBrokerPlugin() });
1:876d9cf:             broker.addConnector("tcp://localhost:61616");
1:876d9cf:             broker.addConnector("stomp://localhost:61613");
1:876d9cf:             broker.start();
1:876d9cf: 
1:876d9cf:             // lets publish some messages so that there is some stuff to browse
1:230a86c:             DefaultQueueSender.main(new String[] {"Prices.Equity.IBM"});
1:230a86c:             DefaultQueueSender.main(new String[] {"Prices.Equity.MSFT"});
1:44bafc3: 
1:44bafc3:             // lets create a dummy couple of consumers
1:44bafc3:             if (createConsumers) {
1:44bafc3:                 Connection connection = new ActiveMQConnectionFactory().createConnection();
1:44bafc3:                 connection.start();
1:44bafc3:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:933eb2f:                 session.createConsumer(new ActiveMQQueue("Orders.IBM"));
1:933eb2f:                 session.createConsumer(new ActiveMQQueue("Orders.MSFT"), "price > 100");
1:44bafc3:                 Session session2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:933eb2f:                 session2.createConsumer(new ActiveMQQueue("Orders.MSFT"), "price > 200");
1:230a86c:             } else {
1:44bafc3:                 // Lets wait for the broker
1:44bafc3:                 broker.waitUntilStopped();
1:44bafc3:             }
1:230a86c:         } catch (Exception e) {
1:876d9cf:             System.out.println("Failed: " + e);
1:876d9cf:             e.printStackTrace();
1:44bafc3:         }
4:876d9cf:     }
1:876d9cf: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class Main {
1:     private Main() {        
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:                 session.createConsumer(new ActiveMQQueue("Orders.IBM"));
1:                 session.createConsumer(new ActiveMQQueue("Orders.MSFT"), "price > 100");
1:                 session2.createConsumer(new ActiveMQQueue("Orders.MSFT"), "price > 200");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * 
1:     protected static boolean createConsumers;
/////////////////////////////////////////////////////////////////////////
1:             // broker.setPlugins(new BrokerPlugin[] { new
1:             // ConnectionDotFilePlugin(), new UDPTraceBrokerPlugin() });
1:             DefaultQueueSender.main(new String[] {"Prices.Equity.IBM"});
1:             DefaultQueueSender.main(new String[] {"Prices.Equity.MSFT"});
/////////////////////////////////////////////////////////////////////////
1:             } else {
1:         } catch (Exception e) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:fc36cd7
/////////////////////////////////////////////////////////////////////////
1:             // String brokerDir = "xbean:...;
1:             // System.setProperty("activemq.base", brokerDir);
1:             // BrokerService broker = BrokerFactory.createBroker(new URI(brokerDir + "/activemq.xml"));
1: 
author:James Strachan
-------------------------------------------------------------------------------
commit:44bafc3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
0:     protected static boolean createConsumers = false;
/////////////////////////////////////////////////////////////////////////
0:             DefaultQueueSender.main(new String[]{"Prices.Equity.IBM"});
0:             DefaultQueueSender.main(new String[]{"Prices.Equity.MSFT"});
1: 
1:             // lets create a dummy couple of consumers
1:             if (createConsumers) {
1:                 Connection connection = new ActiveMQConnectionFactory().createConnection();
1:                 connection.start();
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                 MessageConsumer consumer1 = session.createConsumer(new ActiveMQQueue("Orders.IBM"));
0:                 MessageConsumer consumer2 = session.createConsumer(new ActiveMQQueue("Orders.MSFT"), "price > 100");
1:                 Session session2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                 MessageConsumer consumer3 = session2.createConsumer(new ActiveMQQueue("Orders.MSFT"), "price > 200");
1:             }
0:             else {
1:                 // Lets wait for the broker
1:                 broker.waitUntilStopped();
1:             }
commit:0aac7f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.ManagementContext;
/////////////////////////////////////////////////////////////////////////
1: 
1:             // for running on Java 5 without mx4j
1:             ManagementContext managementContext = broker.getManagementContext();
1:             managementContext.setFindTigerMbeanServer(true);
1:             managementContext.setUseMBeanServer(true);
1:             managementContext.setCreateConnector(false);
1: 
0:             //broker.setPlugins(new BrokerPlugin[] { new ConnectionDotFilePlugin(), new UDPTraceBrokerPlugin() });
commit:09990f2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.util.UDPTraceBrokerPlugin;
/////////////////////////////////////////////////////////////////////////
0:             broker.setPlugins(new BrokerPlugin[] { new ConnectionDotFilePlugin(), new UDPTraceBrokerPlugin() });
commit:876d9cf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerPlugin;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.view.ConnectionDotFilePlugin;
0: import org.apache.activemq.broker.view.DestinationDotFilePlugin;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.demo.DefaultQueueSender;
1: 
0: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Session;
1: 
1: /**
1:  * A helper class which can be handy for running a broker in your IDE from the
1:  * activemq-core module.
1:  * 
0:  * @version $Revision$
1:  */
0: public class Main {
1: 
1:     /**
1:      * @param args
1:      */
1:     public static void main(String[] args) {
0:         String brokerURI = "broker:(tcp://localhost:61616,stomp://localhost:61613)?persistent=false&useJmx=true";
0:         if (args.length > 0) {
0:             brokerURI = args[0];
1:         }
1:         try {
0:             // TODO - this seems to break interceptors for some reason
0:             // BrokerService broker = BrokerFactory.createBroker(new
0:             // URI(brokerURI));
1:             BrokerService broker = new BrokerService();
1:             broker.setPersistent(false);
1:             broker.setUseJmx(true);
0:             broker.setPlugins(new BrokerPlugin[] { /*new DestinationDotFilePlugin(), */ new ConnectionDotFilePlugin() });
1:             broker.addConnector("tcp://localhost:61616");
1:             broker.addConnector("stomp://localhost:61613");
1:             broker.start();
1: 
0:             // lets create a dummy couple of consumers
0:             Connection connection = new ActiveMQConnectionFactory().createConnection();
0:             connection.start();
0:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             MessageConsumer consumer1 = session.createConsumer(new ActiveMQQueue("Orders.IBM"));
0:             MessageConsumer consumer2 = session.createConsumer(new ActiveMQQueue("Orders.MSFT"), "price > 100");
0:             Session session2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             MessageConsumer consumer3 = session2.createConsumer(new ActiveMQQueue("Orders.MSFT"), "price > 200");
1: 
1:             // lets publish some messages so that there is some stuff to browse
0:             DefaultQueueSender.main(new String[] { "Prices.Equity.IBM" });
0:             DefaultQueueSender.main(new String[] { "Prices.Equity.MSFT" });
1:         }
0:         catch (Exception e) {
1:             System.out.println("Failed: " + e);
1:             e.printStackTrace();
1:         }
1:     }
1: 
1: }
============================================================================