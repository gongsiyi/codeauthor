1:bc45bf8: /**
1:bc45bf8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc45bf8:  * contributor license agreements.  See the NOTICE file distributed with
1:bc45bf8:  * this work for additional information regarding copyright ownership.
1:bc45bf8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc45bf8:  * (the "License"); you may not use this file except in compliance with
1:bc45bf8:  * the License.  You may obtain a copy of the License at
1:bc45bf8:  *
1:bc45bf8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bc45bf8:  *
1:bc45bf8:  * Unless required by applicable law or agreed to in writing, software
1:bc45bf8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc45bf8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc45bf8:  * See the License for the specific language governing permissions and
1:bc45bf8:  * limitations under the License.
1:bc45bf8:  */
5:bc45bf8: 
1:bc45bf8: package org.apache.activemq.transport.stomp;
1:bc45bf8: 
1:1b38caa: import static org.junit.Assert.assertTrue;
1:1b38caa: 
1:bc45bf8: import java.util.HashMap;
1:388c16d: import java.util.concurrent.TimeUnit;
1:1b38caa: 
1:bc45bf8: import javax.jms.Destination;
1:1b38caa: 
1:bc45bf8: import org.apache.activemq.broker.region.Subscription;
1:bc45bf8: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:bc45bf8: import org.apache.activemq.broker.region.policy.PolicyMap;
1:bc45bf8: import org.apache.activemq.command.ActiveMQDestination;
1:bc45bf8: import org.apache.activemq.command.ActiveMQQueue;
1:bc45bf8: import org.apache.activemq.command.ActiveMQTopic;
1:bc45bf8: import org.apache.activemq.util.Wait;
1:bc45bf8: import org.junit.Test;
1:bc45bf8: import org.slf4j.Logger;
1:bc45bf8: import org.slf4j.LoggerFactory;
1:bc45bf8: 
1:bc45bf8: public class StompPrefetchTest extends StompTestSupport {
1:540a66b: 
1:bc45bf8:     private static final Logger LOG = LoggerFactory.getLogger(StompPrefetchTest.class);
1:bc45bf8: 
1:bc45bf8:     @Override
1:bc45bf8:     protected void applyBrokerPolicies() throws Exception {
1:bc45bf8: 
1:bc45bf8:         PolicyEntry policy = new PolicyEntry();
1:bc45bf8:         policy.setQueuePrefetch(10);
1:bc45bf8:         policy.setTopicPrefetch(10);
1:bc45bf8:         policy.setDurableTopicPrefetch(10);
1:bc45bf8:         policy.setQueueBrowserPrefetch(10);
1:bc45bf8:         PolicyMap pMap = new PolicyMap();
1:bc45bf8:         pMap.setDefaultEntry(policy);
1:bc45bf8: 
1:bc45bf8:         brokerService.setDestinationPolicy(pMap);
1:bc45bf8:         brokerService.setAdvisorySupport(true);
1:388c16d:         brokerService.setUseJmx(false);
1:388c16d:         brokerService.setPersistent(false);
1:bc45bf8:     }
1:bc45bf8: 
1:388c16d:     @Test(timeout = 60000)
1:bc45bf8:     public void testTopicSubPrefetch() throws Exception {
1:540a66b:         stompConnect();
1:bc45bf8:         stompConnection.connect("system", "manager");
1:bc45bf8:         stompConnection.subscribe("/topic/T", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1:bc45bf8: 
1:bc45bf8:         verifyPrefetch(10, new ActiveMQTopic("T"));
1:bc45bf8:     }
1:bc45bf8: 
1:388c16d:     @Test(timeout = 60000)
1:bc45bf8:     public void testDurableSubPrefetch() throws Exception {
1:540a66b:         stompConnect();
1:bc45bf8:         stompConnection.connect("system", "manager");
1:bc45bf8:         HashMap<String,String> headers = new HashMap<String, String>();
1:bc45bf8:         headers.put("id", "durablesub");
1:bc45bf8:         stompConnection.subscribe("/topic/T", Stomp.Headers.Subscribe.AckModeValues.AUTO, headers);
1:bc45bf8: 
1:bc45bf8:         verifyPrefetch(10, new ActiveMQTopic("T"));
1:bc45bf8:     }
1:bc45bf8: 
1:388c16d:     @Test(timeout = 60000)
1:bc45bf8:     public void testQBrowserSubPrefetch() throws Exception {
1:bc45bf8:         HashMap<String,String> headers = new HashMap<String, String>();
1:bc45bf8:         headers.put("login","system");
1:bc45bf8:         headers.put("passcode","manager");
1:bc45bf8:         headers.put("id", "aBrowser");
1:bc45bf8:         headers.put("browser", "true");
1:bc45bf8:         headers.put("accept-version","1.1");
1:bc45bf8: 
1:540a66b:         stompConnect();
1:bc45bf8:         stompConnection.connect(headers);
1:bc45bf8:         stompConnection.subscribe("/queue/Q", Stomp.Headers.Subscribe.AckModeValues.AUTO, headers);
1:bc45bf8: 
1:bc45bf8:         verifyPrefetch(10, new ActiveMQQueue("Q"));
1:bc45bf8:     }
1:bc45bf8: 
1:388c16d:     @Test(timeout = 60000)
1:bc45bf8:     public void testQueueSubPrefetch() throws Exception {
1:540a66b:         stompConnect();
1:bc45bf8:         stompConnection.connect("system", "manager");
1:bc45bf8:         stompConnection.subscribe("/queue/Q", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1:bc45bf8: 
1:bc45bf8:         verifyPrefetch(10, new ActiveMQQueue("Q"));
1:bc45bf8:     }
1:bc45bf8: 
1:bc45bf8:     private void verifyPrefetch(final int val, final Destination dest) throws Exception {
1:bc45bf8:         assertTrue("success in time", Wait.waitFor(new Wait.Condition() {
1:bc45bf8:             @Override
1:bc45bf8:             public boolean isSatisified() throws Exception {
1:bc45bf8:                 try {
1:bc45bf8:                     Subscription sub =
1:bc45bf8:                             brokerService.getRegionBroker().getDestinationMap().get(ActiveMQDestination.transform(dest)).getConsumers().get(0);
1:bc45bf8:                     LOG.info("sub prefetch: " + sub.getConsumerInfo().getPrefetchSize());
1:bc45bf8:                     return val == sub.getConsumerInfo().getPrefetchSize();
1:bc45bf8:                 } catch (Exception ignored) {
1:bc45bf8:                 }
1:bc45bf8:                 return false;
1:bc45bf8:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:bc45bf8:     }
1:bc45bf8: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:         stompConnect();
commit:388c16d
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(false);
1:         brokerService.setPersistent(false);
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:bc45bf8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.util.HashMap;
0: import javax.jms.Connection;
1: import javax.jms.Destination;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.broker.region.Subscription;
0: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: import static org.junit.Assert.*;
1: 
1: public class StompPrefetchTest extends StompTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(StompPrefetchTest.class);
1: 
1:     @Override
1:     protected void applyBrokerPolicies() throws Exception {
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setQueuePrefetch(10);
1:         policy.setTopicPrefetch(10);
1:         policy.setDurableTopicPrefetch(10);
1:         policy.setQueueBrowserPrefetch(10);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         brokerService.setDestinationPolicy(pMap);
1:         brokerService.setAdvisorySupport(true);
1:     }
1: 
0:     @Test
1:     public void testTopicSubPrefetch() throws Exception {
1: 
1:         stompConnection.connect("system", "manager");
1:         stompConnection.subscribe("/topic/T", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1: 
1:         verifyPrefetch(10, new ActiveMQTopic("T"));
1:     }
1: 
0:     @Test
1:     public void testDurableSubPrefetch() throws Exception {
1:         stompConnection.connect("system", "manager");
1:         HashMap<String,String> headers = new HashMap<String, String>();
1:         headers.put("id", "durablesub");
1:         stompConnection.subscribe("/topic/T", Stomp.Headers.Subscribe.AckModeValues.AUTO, headers);
1: 
1:         verifyPrefetch(10, new ActiveMQTopic("T"));
1:     }
1: 
0:     @Test
1:     public void testQBrowserSubPrefetch() throws Exception {
1:         HashMap<String,String> headers = new HashMap<String, String>();
1:         headers.put("login","system");
1:         headers.put("passcode","manager");
1:         headers.put("id", "aBrowser");
1:         headers.put("browser", "true");
1:         headers.put("accept-version","1.1");
1: 
1:         stompConnection.connect(headers);
1:         stompConnection.subscribe("/queue/Q", Stomp.Headers.Subscribe.AckModeValues.AUTO, headers);
1: 
1:         verifyPrefetch(10, new ActiveMQQueue("Q"));
1:     }
1: 
0:     @Test
1:     public void testQueueSubPrefetch() throws Exception {
1:         stompConnection.connect("system", "manager");
1:         stompConnection.subscribe("/queue/Q", Stomp.Headers.Subscribe.AckModeValues.AUTO);
1: 
1:         verifyPrefetch(10, new ActiveMQQueue("Q"));
1:     }
1: 
1:     private void verifyPrefetch(final int val, final Destination dest) throws Exception {
1:         assertTrue("success in time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 try {
1:                     Subscription sub =
1:                             brokerService.getRegionBroker().getDestinationMap().get(ActiveMQDestination.transform(dest)).getConsumers().get(0);
1:                     LOG.info("sub prefetch: " + sub.getConsumerInfo().getPrefetchSize());
1:                     return val == sub.getConsumerInfo().getPrefetchSize();
1:                 } catch (Exception ignored) {
1:                 }
1:                 return false;
1:             }
0:         }));
1:     }
1: 
1: }
============================================================================