1:fe5164a: /**
1:fe5164a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fe5164a:  * contributor license agreements.  See the NOTICE file distributed with
1:fe5164a:  * this work for additional information regarding copyright ownership.
1:fe5164a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fe5164a:  * (the "License"); you may not use this file except in compliance with
1:fe5164a:  * the License.  You may obtain a copy of the License at
1:fe5164a:  *
1:fe5164a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fe5164a:  *
1:fe5164a:  * Unless required by applicable law or agreed to in writing, software
1:fe5164a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fe5164a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fe5164a:  * See the License for the specific language governing permissions and
1:fe5164a:  * limitations under the License.
1:fe5164a:  */
1:fe5164a: package org.apache.activemq.thread;
1:fe5164a: 
1:fe5164a: import static org.junit.Assert.assertTrue;
1:fe5164a: 
1:fe5164a: import java.util.ArrayList;
1:fe5164a: import java.util.Collections;
1:fe5164a: import java.util.List;
1:fe5164a: import java.util.concurrent.CountDownLatch;
1:fe5164a: import java.util.concurrent.ExecutorService;
1:fe5164a: import java.util.concurrent.Executors;
1:fe5164a: 
1:fe5164a: import org.junit.Test;
1:fe5164a: 
1:fe5164a: public class TaskRunnerFactoryTest {
1:fe5164a: 
1:fe5164a:     /**
1:fe5164a:      * AMQ-6602 test
1:fe5164a:      * Test contention on createTaskRunner() to make sure that all threads end up
1:fe5164a:      * using a PooledTaskRunner
1:fe5164a:      *
1:fe5164a:      * @throws Exception
1:fe5164a:      */
1:fe5164a:     @Test
1:7906959:     public void testConcurrentTaskRunnerCreation() throws Exception {
1:fe5164a: 
1:fe5164a:         final TaskRunnerFactory factory = new TaskRunnerFactory();
1:fe5164a:         final ExecutorService service = Executors.newFixedThreadPool(10);
1:fe5164a:         final CountDownLatch latch1 = new CountDownLatch(1);
1:fe5164a:         final CountDownLatch latch2 = new CountDownLatch(10);
1:0cf6478:         final List<TaskRunner> runners = Collections.<TaskRunner>synchronizedList(new ArrayList<TaskRunner>(10));
1:fe5164a: 
1:fe5164a:         for (int i = 0; i < 10; i++) {
1:1f53b12:             service.execute(new Runnable() {
1:1f53b12: 
1:1f53b12:                 @Override
1:1f53b12:                 public void run() {
1:1f53b12:                     try {
1:1f53b12:                         latch1.await();
1:1f53b12:                     } catch (InterruptedException e) {
1:1f53b12:                        throw new IllegalStateException(e);
1:1f53b12:                     }
1:1f53b12:                     runners.add(factory.createTaskRunner(new Task() {
1:1f53b12: 
1:1f53b12:                         @Override
1:1f53b12:                         public boolean iterate() {
1:1f53b12:                             return false;
1:1f53b12:                         }
1:1f53b12:                     }, "task"));
1:1f53b12:                     latch2.countDown();
1:fe5164a:                 }
1:fe5164a:             });
1:fe5164a:         }
1:fe5164a: 
1:fe5164a:         latch1.countDown();
1:fe5164a:         latch2.await();
1:fe5164a: 
1:fe5164a:         for (TaskRunner runner : runners) {
1:fe5164a:             assertTrue(runner instanceof PooledTaskRunner);
1:fe5164a:         }
1:fe5164a:     }
1:fe5164a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0cf6478
/////////////////////////////////////////////////////////////////////////
1:         final List<TaskRunner> runners = Collections.<TaskRunner>synchronizedList(new ArrayList<TaskRunner>(10));
commit:1f53b12
/////////////////////////////////////////////////////////////////////////
1:             service.execute(new Runnable() {
1: 
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         latch1.await();
1:                     } catch (InterruptedException e) {
1:                        throw new IllegalStateException(e);
1:                     }
1:                     runners.add(factory.createTaskRunner(new Task() {
1: 
1:                         @Override
1:                         public boolean iterate() {
1:                             return false;
1:                         }
1:                     }, "task"));
1:                     latch2.countDown();
commit:7906959
/////////////////////////////////////////////////////////////////////////
1:     public void testConcurrentTaskRunnerCreation() throws Exception {
commit:fe5164a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.thread;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: import org.junit.Test;
1: 
1: public class TaskRunnerFactoryTest {
1: 
1:     /**
1:      * AMQ-6602 test
1:      * Test contention on createTaskRunner() to make sure that all threads end up
1:      * using a PooledTaskRunner
1:      *
1:      * @throws Exception
1:      */
1:     @Test
0:     public void testConcurrentTaskRunnerCreaction() throws Exception {
1: 
1:         final TaskRunnerFactory factory = new TaskRunnerFactory();
1:         final ExecutorService service = Executors.newFixedThreadPool(10);
1:         final CountDownLatch latch1 = new CountDownLatch(1);
1:         final CountDownLatch latch2 = new CountDownLatch(10);
0:         final List<TaskRunner> runners = Collections.synchronizedList(new ArrayList<>(10));
1: 
1:         for (int i = 0; i < 10; i++) {
0:             service.execute(() -> {
0:                 try {
0:                     latch1.await();
0:                 } catch (InterruptedException e) {
0:                    throw new IllegalStateException(e);
1:                 }
0:                 runners.add(factory.createTaskRunner(() -> true, "task") );
0:                 latch2.countDown();
1:             });
1:         }
1: 
1:         latch1.countDown();
1:         latch2.await();
1: 
1:         for (TaskRunner runner : runners) {
1:             assertTrue(runner instanceof PooledTaskRunner);
1:         }
1:     }
1: }
============================================================================