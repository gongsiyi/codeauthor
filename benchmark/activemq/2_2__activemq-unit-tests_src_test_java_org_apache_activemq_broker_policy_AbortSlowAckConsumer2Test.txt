1:bec711c: /**
1:bec711c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bec711c:  * contributor license agreements.  See the NOTICE file distributed with
1:bec711c:  * this work for additional information regarding copyright ownership.
1:bec711c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bec711c:  * (the "License"); you may not use this file except in compliance with
1:bec711c:  * the License.  You may obtain a copy of the License at
1:bec711c:  *
1:bec711c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bec711c:  *
1:bec711c:  * Unless required by applicable law or agreed to in writing, software
1:bec711c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bec711c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bec711c:  * See the License for the specific language governing permissions and
1:bec711c:  * limitations under the License.
1:bec711c:  */
1:bec711c: package org.apache.activemq.broker.policy;
3:bec711c: 
1:9bf9e1c: import javax.jms.ConnectionFactory;
1:bec711c: import org.apache.activemq.ActiveMQConnectionFactory;
1:bec711c: import org.apache.activemq.broker.BrokerService;
1:bec711c: import org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy;
1:bec711c: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1:bec711c: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:bec711c: import org.apache.activemq.broker.region.policy.PolicyMap;
1:bec711c: import org.junit.runner.RunWith;
1:bec711c: import org.junit.runners.Parameterized;
1:bec711c: 
1:bec711c: @RunWith(value = Parameterized.class)
1:bec711c: public class AbortSlowAckConsumer2Test extends AbortSlowConsumer2Test {
1:bec711c: 
1:bec711c:     protected long maxTimeSinceLastAck = 5 * 1000;
1:bec711c: 
1:bec711c:     public AbortSlowAckConsumer2Test(Boolean topic) {
1:bec711c:         super(topic);
1:bec711c:     }
1:bec711c: 
1:bec711c:     @Override
1:bec711c:     protected AbortSlowConsumerStrategy createSlowConsumerStrategy() {
1:bec711c:         return new AbortSlowConsumerStrategy();
1:bec711c:     }
1:bec711c: 
1:bec711c:     @Override
1:bec711c:     protected BrokerService createBroker() throws Exception {
1:bec711c:         BrokerService broker = super.createBroker();
1:bec711c:         PolicyEntry policy = new PolicyEntry();
1:bec711c: 
1:bec711c:         AbortSlowAckConsumerStrategy strategy = new AbortSlowAckConsumerStrategy();
1:bec711c:         strategy.setAbortConnection(abortConnection);
1:bec711c:         strategy.setCheckPeriod(checkPeriod);
1:bec711c:         strategy.setMaxSlowDuration(maxSlowDuration);
1:bec711c:         strategy.setMaxTimeSinceLastAck(maxTimeSinceLastAck);
1:bec711c: 
1:bec711c:         policy.setSlowConsumerStrategy(strategy);
1:bec711c:         policy.setQueuePrefetch(10);
1:bec711c:         policy.setTopicPrefetch(10);
1:bec711c:         PolicyMap pMap = new PolicyMap();
1:bec711c:         pMap.setDefaultEntry(policy);
1:bec711c:         broker.setDestinationPolicy(pMap);
1:bec711c:         return broker;
1:bec711c:     }
1:bec711c: 
1:bec711c:     @Override
1:bec711c:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:bec711c:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:bec711c:         factory.getPrefetchPolicy().setAll(1);
1:bec711c:         return factory;
1:bec711c:     }
1:bec711c: 
1:bec711c: 
1:bec711c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:9bf9e1c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
/////////////////////////////////////////////////////////////////////////
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy;
1: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.runner.RunWith;
0: import org.junit.runners.BlockJUnit4ClassRunner;
1: import org.junit.runners.Parameterized;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.ConnectionFactory;
1: 
1: @RunWith(value = Parameterized.class)
1: public class AbortSlowAckConsumer2Test extends AbortSlowConsumer2Test {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowAckConsumer2Test.class);
1: 
1:     protected long maxTimeSinceLastAck = 5 * 1000;
1: 
1:     public AbortSlowAckConsumer2Test(Boolean topic) {
1:         super(topic);
1:     }
1: 
1:     @Override
1:     protected AbortSlowConsumerStrategy createSlowConsumerStrategy() {
1:         return new AbortSlowConsumerStrategy();
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1:         PolicyEntry policy = new PolicyEntry();
1: 
1:         AbortSlowAckConsumerStrategy strategy = new AbortSlowAckConsumerStrategy();
1:         strategy.setAbortConnection(abortConnection);
1:         strategy.setCheckPeriod(checkPeriod);
1:         strategy.setMaxSlowDuration(maxSlowDuration);
1:         strategy.setMaxTimeSinceLastAck(maxTimeSinceLastAck);
1: 
1:         policy.setSlowConsumerStrategy(strategy);
1:         policy.setQueuePrefetch(10);
1:         policy.setTopicPrefetch(10);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(pMap);
1:         return broker;
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         factory.getPrefetchPolicy().setAll(1);
1:         return factory;
1:     }
1: 
1: 
1: }
============================================================================