1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network.jms;
5:d29ca2a: 
1:28647f1: import javax.jms.Connection;
1:28647f1: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:f812e34: 
1:d29ca2a: /**
1:d29ca2a:  * Converts Message from one JMS to another
1:d29ca2a:  *
1:68d245f:  * @org.apache.xbean.XBean
1:d29ca2a:  */
1:f812e34: public class SimpleJmsMessageConvertor implements JmsMesageConvertor {
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * Convert a foreign JMS Message to a native ActiveMQ Message - Inbound or
1:bc78238:      * visa-versa outbound.
1:f812e34:      *
1:d29ca2a:      * @param message
1:bc78238:      *      The target message to convert to a native ActiveMQ message
1:d29ca2a:      * @return the converted message
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:f812e34:     public Message convert(Message message) throws JMSException {
1:d29ca2a:         return message;
1:d29ca2a:     }
1:f812e34: 
1:bc78238:     /**
1:bc78238:      * Convert a foreign JMS Message to a native ActiveMQ Message - Inbound or
1:bc78238:      * visa-versa outbound.  If the replyTo Destination instance is not null
1:bc78238:      * then the Message is configured with the given replyTo value.
1:d29ca2a:      *
1:bc78238:      * @param message
1:bc78238:      *      The target message to convert to a native ActiveMQ message
1:bc78238:      * @param replyTo
1:bc78238:      *      The replyTo Destination to set on the converted Message.
1:d29ca2a:      *
1:bc78238:      * @return the converted message
1:bc78238:      * @throws JMSException
1:bc78238:      */
1:f812e34:     public Message convert(Message message, Destination replyTo) throws JMSException {
1:f812e34:         Message msg = convert(message);
1:f812e34:         if (replyTo != null) {
1:f812e34:             msg.setJMSReplyTo(replyTo);
1:f812e34:         } else {
1:f812e34:             msg.setJMSReplyTo(null);
1:f812e34:         }
1:f812e34:         return msg;
1:86cbdfd:     }
1:f812e34: 
1:f812e34:     public void setConnection(Connection connection) {
1:f812e34:         // do nothing
1:d29ca2a:     }
3:28647f1: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: public class SimpleJmsMessageConvertor implements JmsMesageConvertor {
1: 
1:      * Convert a foreign JMS Message to a native ActiveMQ Message - Inbound or
0:      * visa-versa outbound
1:      * 
1:     public Message convert(Message message) throws JMSException {
1: 
1:     public Message convert(Message message, Destination replyTo) throws JMSException {
1:         Message msg = convert(message);
1:         if (replyTo != null) {
1:             msg.setJMSReplyTo(replyTo);
1:         } else {
1:             msg.setJMSReplyTo(null);
1:         }
1:         return msg;
1: 
1:     public void setConnection(Connection connection) {
1:         // do nothing
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network.jms;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: 
1: /**
1:  * Converts Message from one JMS to another
1:  * 
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class SimpleJmsMessageConvertor implements  JmsMesageConvertor {
1:     
1:     /**
0:      * Convert a foreign JMS Message to a native ActiveMQ Message
1:      * @param message
1:      * @return the converted message
1:      * @throws JMSException
1:      */
0:     public Message convert(Message message) throws JMSException{
1:         return message;
1:     }
1:     
1:    
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:bc78238
/////////////////////////////////////////////////////////////////////////
0:  *
1:      * visa-versa outbound.
0:      *
1:      *      The target message to convert to a native ActiveMQ message
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Convert a foreign JMS Message to a native ActiveMQ Message - Inbound or
1:      * visa-versa outbound.  If the replyTo Destination instance is not null
1:      * then the Message is configured with the given replyTo value.
0:      *
1:      * @param message
1:      *      The target message to convert to a native ActiveMQ message
1:      * @param replyTo
1:      *      The replyTo Destination to set on the converted Message.
0:      *
1:      * @return the converted message
1:      * @throws JMSException
1:      */
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:28647f1
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
0:     public Message convert(Message message, Destination replyTo) throws JMSException{
0:     	Message msg = convert(message);
0:     	if(replyTo != null) {
0:     		msg.setJMSReplyTo(replyTo);
0: 		}else{
0: 			msg.setJMSReplyTo(null);
1: 		}
0: 		return msg;
1:     }
0:     
0:     public void setConnection(Connection connection){
0:     	//do nothing
1:     }
0:     
commit:e627117
/////////////////////////////////////////////////////////////////////////
0:      * Convert a foreign JMS Message to a native ActiveMQ Message - Inbound
0:      * or visa-versa outbound
============================================================================