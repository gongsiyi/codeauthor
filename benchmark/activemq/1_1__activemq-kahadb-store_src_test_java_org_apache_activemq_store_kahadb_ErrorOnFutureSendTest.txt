1:f4c11f7: /**
1:f4c11f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f4c11f7:  * contributor license agreements.  See the NOTICE file distributed with
1:f4c11f7:  * this work for additional information regarding copyright ownership.
1:f4c11f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f4c11f7:  * (the "License"); you may not use this file except in compliance with
1:f4c11f7:  * the License.  You may obtain a copy of the License at
1:f4c11f7:  *
1:f4c11f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f4c11f7:  *
1:f4c11f7:  * Unless required by applicable law or agreed to in writing, software
1:f4c11f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f4c11f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f4c11f7:  * See the License for the specific language governing permissions and
1:f4c11f7:  * limitations under the License.
1:f4c11f7:  */
1:f4c11f7: 
1:f4c11f7: package org.apache.activemq.store.kahadb;
1:f4c11f7: 
1:f4c11f7: import org.apache.activemq.ActiveMQConnection;
1:f4c11f7: import org.apache.activemq.ActiveMQConnectionFactory;
1:f4c11f7: import org.apache.activemq.broker.BrokerService;
1:83514ef: import org.apache.activemq.broker.region.Queue;
1:83514ef: import org.apache.activemq.broker.region.RegionBroker;
1:83514ef: import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
1:83514ef: import org.apache.activemq.broker.region.cursors.StoreQueueCursor;
1:f4c11f7: import org.apache.activemq.command.ActiveMQQueue;
1:f4c11f7: import org.apache.activemq.command.TransactionId;
1:f4c11f7: import org.apache.activemq.store.TransactionIdTransformer;
1:83514ef: import org.apache.activemq.util.Wait;
1:f4c11f7: import org.junit.After;
1:f4c11f7: import org.junit.Before;
1:f4c11f7: import org.junit.Rule;
1:f4c11f7: import org.junit.Test;
1:f4c11f7: import org.junit.rules.TemporaryFolder;
1:f4c11f7: import org.slf4j.Logger;
1:f4c11f7: import org.slf4j.LoggerFactory;
1:f4c11f7: 
1:f4c11f7: import javax.jms.JMSException;
1:f4c11f7: import javax.jms.Message;
1:83514ef: import javax.jms.MessageConsumer;
1:83514ef: import javax.jms.MessageListener;
1:f4c11f7: import javax.jms.MessageProducer;
1:f4c11f7: import javax.jms.Session;
1:f4c11f7: import java.io.File;
1:83514ef: import java.util.concurrent.atomic.AtomicInteger;
1:f4c11f7: 
1:83514ef: import static org.junit.Assert.assertTrue;
1:f4c11f7: import static org.junit.Assert.fail;
1:f4c11f7: 
1:f4c11f7: 
1:f4c11f7: public class ErrorOnFutureSendTest {
1:f4c11f7: 
1:f4c11f7:     private static final Logger LOG = LoggerFactory.getLogger(ErrorOnFutureSendTest.class);
1:f4c11f7: 
1:f4c11f7:     @Rule
1:f4c11f7:     public TemporaryFolder dataDir = new TemporaryFolder(new File("target"));
1:f4c11f7: 
1:f4c11f7:     private BrokerService broker = null;
1:f4c11f7:     private final ActiveMQQueue destination = new ActiveMQQueue("Test");
1:f4c11f7:     private KahaDBPersistenceAdapter adapter;
1:f4c11f7: 
1:f4c11f7:     protected void startBroker() throws Exception {
1:f4c11f7:         broker = new BrokerService();
1:f4c11f7:         broker.setDeleteAllMessagesOnStartup(true);
1:f4c11f7:         broker.setPersistent(true);
1:f4c11f7:         broker.setUseJmx(false);
1:f4c11f7:         broker.setAdvisorySupport(false);
1:f4c11f7:         broker.setDataDirectory(dataDir.getRoot().getAbsolutePath());
1:f4c11f7:         adapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:f4c11f7:         broker.start();
1:f4c11f7:         LOG.info("Starting broker..");
2:f4c11f7:     }
1:f4c11f7: 
1:f4c11f7:     @Before
1:f4c11f7:     public void start() throws Exception {
1:f4c11f7:         startBroker();
1:f4c11f7:     }
1:f4c11f7: 
1:f4c11f7:     @After
1:f4c11f7:     public void tearDown() throws Exception {
1:f4c11f7:         if (broker != null) {
1:f4c11f7:             broker.stop();
1:f4c11f7:             broker.waitUntilStopped();
1:f4c11f7:         }
1:f4c11f7:     }
1:f4c11f7: 
1:f4c11f7: 
1:f4c11f7:     @Test(timeout = 30000)
1:f4c11f7:     public void testSendErrorBubblesBackFromStoreTask() throws Exception {
1:83514ef: 
1:f4c11f7:         adapter.setTransactionIdTransformer(new TransactionIdTransformer() {
1:f4c11f7:             @Override
1:f4c11f7:             public TransactionId transform(TransactionId txid) {
1:f4c11f7:                 throw new RuntimeException("Bla");
1:f4c11f7:             }
1:f4c11f7:         });
1:83514ef: 
1:f4c11f7:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:f4c11f7:         connectionFactory.setWatchTopicAdvisories(false);
1:f4c11f7:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:f4c11f7:         connection.start();
1:f4c11f7:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f4c11f7: 
1:f4c11f7:         MessageProducer producer = session.createProducer(destination);
1:f4c11f7:         Message message = session.createMessage();
1:f4c11f7: 
1:f4c11f7:         try {
1:f4c11f7:             producer.send(message);
1:f4c11f7:             fail("Expect exaception");
1:f4c11f7:         } catch (JMSException expected) {
1:f4c11f7:             expected.printStackTrace();
1:f4c11f7:         }
1:f4c11f7: 
1:f4c11f7:         adapter.setTransactionIdTransformer(new TransactionIdTransformer() {
1:f4c11f7:             @Override
1:f4c11f7:             public TransactionId transform(TransactionId txid) {
1:f4c11f7:                 throw new java.lang.OutOfMemoryError("Bla");
1:f4c11f7:             }
1:f4c11f7:         });
1:f4c11f7: 
1:f4c11f7:         try {
1:f4c11f7:             producer.send(message);
1:f4c11f7:             fail("Expect exaception");
1:f4c11f7:         } catch (JMSException expected) {
1:f4c11f7:             expected.printStackTrace();
1:f4c11f7:         }
1:f4c11f7: 
1:f4c11f7: 
1:f4c11f7:         connection.close();
1:f4c11f7:     }
1:83514ef: 
1:83514ef:     @Test(timeout = 30000)
1:83514ef:     public void testSuccessiveFailedSendsDoesNotConsumeMemInError() throws Exception {
1:83514ef: 
1:83514ef:         adapter.setTransactionIdTransformer(new TransactionIdTransformer() {
1:83514ef:             @Override
1:83514ef:             public TransactionId transform(TransactionId txid) {
1:83514ef:                 throw new RuntimeException("Bla");
1:83514ef:             }
1:83514ef:         });
1:83514ef: 
1:83514ef:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:83514ef:         connectionFactory.setWatchTopicAdvisories(false);
1:83514ef:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:83514ef:         connection.start();
1:83514ef:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f4c11f7: 
1:83514ef:         MessageProducer producer = session.createProducer(destination);
1:83514ef:         Message message = session.createMessage();
1:f4c11f7: 
1:83514ef:         final AtomicInteger received = new AtomicInteger();
1:83514ef:         MessageConsumer consumer = session.createConsumer(destination);
1:83514ef:         consumer.setMessageListener(new MessageListener() {
1:83514ef:             @Override
1:83514ef:             public void onMessage(Message message) {
1:83514ef:                 received.incrementAndGet();
1:83514ef:             }
1:83514ef:         });
1:83514ef: 
1:83514ef:         final int numIterations = 10;
1:83514ef:         for (int i=0; i<numIterations; i++) {
1:83514ef:             try {
1:83514ef:                 producer.send(message);
1:83514ef:                 fail("Expect exception");
1:83514ef:             } catch (JMSException expected) {}
1:83514ef:         }
1:83514ef: 
1:83514ef:         Wait.waitFor(new Wait.Condition() {
1:83514ef:             @Override
1:83514ef:             public boolean isSatisified() throws Exception {
1:83514ef:                 return received.get() == numIterations;
1:83514ef:             }
1:83514ef:         });
1:83514ef:         consumer.close();
1:83514ef:         connection.close();
1:83514ef: 
1:83514ef:         RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:83514ef:         Queue queue = (Queue) regionBroker.getQueueRegion().getDestinationMap().get(destination);
1:83514ef:         StoreQueueCursor storeQueueCursor = (StoreQueueCursor) queue.getMessages();
1:83514ef:         PendingMessageCursor queueStorePrefetch = storeQueueCursor.getPersistent();
1:83514ef:         LOG.info("QueueStorePrefetch {}", queueStorePrefetch);
1:83514ef:         String toString = queueStorePrefetch.toString();
1:83514ef:         assertTrue("contains pendingCachedIds.size:1", toString.contains("pendingCachedIds.size:1"));
1:83514ef:     }
1:83514ef: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:83514ef
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
1: import org.apache.activemq.broker.region.cursors.StoreQueueCursor;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 30000)
1:     public void testSuccessiveFailedSendsDoesNotConsumeMemInError() throws Exception {
1: 
1:         adapter.setTransactionIdTransformer(new TransactionIdTransformer() {
1:             @Override
1:             public TransactionId transform(TransactionId txid) {
1:                 throw new RuntimeException("Bla");
1:             }
1:         });
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         Message message = session.createMessage();
1: 
1:         final AtomicInteger received = new AtomicInteger();
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 received.incrementAndGet();
1:             }
1:         });
1: 
1:         final int numIterations = 10;
1:         for (int i=0; i<numIterations; i++) {
1:             try {
1:                 producer.send(message);
1:                 fail("Expect exception");
1:             } catch (JMSException expected) {}
1:         }
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return received.get() == numIterations;
1:             }
1:         });
1:         consumer.close();
1:         connection.close();
1: 
1:         RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:         Queue queue = (Queue) regionBroker.getQueueRegion().getDestinationMap().get(destination);
1:         StoreQueueCursor storeQueueCursor = (StoreQueueCursor) queue.getMessages();
1:         PendingMessageCursor queueStorePrefetch = storeQueueCursor.getPersistent();
1:         LOG.info("QueueStorePrefetch {}", queueStorePrefetch);
1:         String toString = queueStorePrefetch.toString();
1:         assertTrue("contains pendingCachedIds.size:1", toString.contains("pendingCachedIds.size:1"));
1:     }
1: }
commit:f4c11f7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store.kahadb;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.store.TransactionIdTransformer;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.io.File;
1: 
1: import static org.junit.Assert.fail;
1: 
1: 
1: public class ErrorOnFutureSendTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ErrorOnFutureSendTest.class);
1: 
1:     @Rule
1:     public TemporaryFolder dataDir = new TemporaryFolder(new File("target"));
1: 
1:     private BrokerService broker = null;
1:     private final ActiveMQQueue destination = new ActiveMQQueue("Test");
1:     private KahaDBPersistenceAdapter adapter;
1: 
1:     protected void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(true);
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setDataDirectory(dataDir.getRoot().getAbsolutePath());
1:         adapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:         broker.start();
1:         LOG.info("Starting broker..");
1:     }
1: 
1:     @Before
1:     public void start() throws Exception {
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1: 
1:     @Test(timeout = 30000)
1:     public void testSendErrorBubblesBackFromStoreTask() throws Exception {
1: 
1:         adapter.setTransactionIdTransformer(new TransactionIdTransformer() {
1:             @Override
1:             public TransactionId transform(TransactionId txid) {
1:                 throw new RuntimeException("Bla");
1:             }
1:         });
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         Message message = session.createMessage();
1: 
1:         try {
1:             producer.send(message);
1:             fail("Expect exaception");
1:         } catch (JMSException expected) {
1:             expected.printStackTrace();
1:         }
1: 
1:         adapter.setTransactionIdTransformer(new TransactionIdTransformer() {
1:             @Override
1:             public TransactionId transform(TransactionId txid) {
1:                 throw new java.lang.OutOfMemoryError("Bla");
1:             }
1:         });
1: 
1:         try {
1:             producer.send(message);
1:             fail("Expect exaception");
1:         } catch (JMSException expected) {
1:             expected.printStackTrace();
1:         }
1: 
1: 
1:         connection.close();
1:     }
1: }
============================================================================