1:155461a: /**
1:155461a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:155461a:  * contributor license agreements.  See the NOTICE file distributed with
1:155461a:  * this work for additional information regarding copyright ownership.
1:155461a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:155461a:  * (the "License"); you may not use this file except in compliance with
1:155461a:  * the License.  You may obtain a copy of the License at
1:155461a:  *
1:155461a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:155461a:  *
1:155461a:  * Unless required by applicable law or agreed to in writing, software
1:155461a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:155461a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:155461a:  * See the License for the specific language governing permissions and
1:155461a:  * limitations under the License.
1:155461a:  */
1:155461a: package org.apache.activemq.camel;
1:155461a: 
1:155461a: import org.apache.activemq.broker.BrokerService;
1:155461a: import org.apache.activemq.camel.component.ActiveMQComponent;
1:155461a: import org.apache.camel.Exchange;
1:155461a: import org.apache.camel.Processor;
1:155461a: import org.apache.camel.ProducerTemplate;
1:155461a: import org.apache.camel.builder.RouteBuilder;
1:155461a: import org.apache.camel.impl.DefaultCamelContext;
1:155461a: import org.junit.Test;
1:155461a: 
1:155461a: import static org.junit.Assert.assertTrue;
1:155461a: 
1:155461a: public class BrokerPreShutdownHookTest {
1:155461a: 
1:155461a:     static class TestProcessor implements Processor {
1:155461a: 
1:155461a:         boolean messageReceived;
1:155461a: 
1:155461a:         @Override
1:155461a:         public void process(final Exchange exchange) throws Exception {
1:155461a:             messageReceived = true;
1:155461a:         }
1:155461a:     }
1:155461a: 
1:155461a:     @Test
1:155461a:     public void testShouldCleanlyShutdownCamelBeforeStoppingBroker() throws Exception {
1:155461a:         final BrokerService broker = new BrokerService();
1:155461a:         broker.setBrokerName("testBroker");
1:155461a:         broker.setUseJmx(true);
1:155461a:         broker.setPersistent(false);
1:155461a:         broker.addConnector("vm://testBroker");
1:155461a: 
1:155461a:         final DefaultCamelContext camel = new DefaultCamelContext();
1:155461a:         camel.setName("test-camel");
1:155461a: 
1:155461a:         final CamelShutdownHook hook = new CamelShutdownHook(broker);
1:155461a:         hook.setCamelContext(camel);
1:155461a: 
1:155461a:         broker.start();
1:155461a: 
1:155461a:         camel.addComponent("testq", ActiveMQComponent.activeMQComponent("vm://testBroker?create=false"));
1:155461a: 
1:155461a:         final TestProcessor processor = new TestProcessor();
1:155461a:         camel.addRoutes(new RouteBuilder() {
1:155461a:             @Override
1:155461a:             public void configure() throws Exception {
1:155461a:                 from("testq:test.in").delay(200).process(processor);
1:155461a:             }
1:155461a:         });
1:155461a:         camel.start();
1:155461a: 
1:155461a:         final ProducerTemplate producer = camel.createProducerTemplate();
1:155461a:         producer.sendBody("testq:test.in", "Hi!");
1:155461a:         producer.stop();
1:155461a: 
1:155461a:         broker.stop();
1:155461a: 
1:155461a:         assertTrue("Message should be received", processor.messageReceived);
1:155461a:         assertTrue("Camel context should be stopped", camel.isStopped());
1:155461a:         assertTrue("Broker should be stopped", broker.isStopped());
1:155461a: 
1:155461a:     }
1:155461a: }
============================================================================
author:Zoran Regvart
-------------------------------------------------------------------------------
commit:155461a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.camel.component.ActiveMQComponent;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.Processor;
1: import org.apache.camel.ProducerTemplate;
1: import org.apache.camel.builder.RouteBuilder;
1: import org.apache.camel.impl.DefaultCamelContext;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public class BrokerPreShutdownHookTest {
1: 
1:     static class TestProcessor implements Processor {
1: 
1:         boolean messageReceived;
1: 
1:         @Override
1:         public void process(final Exchange exchange) throws Exception {
1:             messageReceived = true;
1:         }
1:     }
1: 
1:     @Test
1:     public void testShouldCleanlyShutdownCamelBeforeStoppingBroker() throws Exception {
1:         final BrokerService broker = new BrokerService();
1:         broker.setBrokerName("testBroker");
1:         broker.setUseJmx(true);
1:         broker.setPersistent(false);
1:         broker.addConnector("vm://testBroker");
1: 
1:         final DefaultCamelContext camel = new DefaultCamelContext();
1:         camel.setName("test-camel");
1: 
1:         final CamelShutdownHook hook = new CamelShutdownHook(broker);
1:         hook.setCamelContext(camel);
1: 
1:         broker.start();
1: 
1:         camel.addComponent("testq", ActiveMQComponent.activeMQComponent("vm://testBroker?create=false"));
1: 
1:         final TestProcessor processor = new TestProcessor();
1:         camel.addRoutes(new RouteBuilder() {
1:             @Override
1:             public void configure() throws Exception {
1:                 from("testq:test.in").delay(200).process(processor);
1:             }
1:         });
1:         camel.start();
1: 
1:         final ProducerTemplate producer = camel.createProducerTemplate();
1:         producer.sendBody("testq:test.in", "Hi!");
1:         producer.stop();
1: 
1:         broker.stop();
1: 
1:         assertTrue("Message should be received", processor.messageReceived);
1:         assertTrue("Camel context should be stopped", camel.isStopped());
1:         assertTrue("Broker should be stopped", broker.isStopped());
1: 
1:     }
1: }
============================================================================