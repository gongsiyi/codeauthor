1:3340371: /**
1:3340371:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3340371:  * contributor license agreements.  See the NOTICE file distributed with
1:3340371:  * this work for additional information regarding copyright ownership.
1:3340371:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3340371:  * (the "License"); you may not use this file except in compliance with
1:3340371:  * the License.  You may obtain a copy of the License at
1:3340371:  *
1:3340371:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3340371:  *
1:3340371:  * Unless required by applicable law or agreed to in writing, software
1:3340371:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3340371:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3340371:  * See the License for the specific language governing permissions and
1:3340371:  * limitations under the License.
1:3340371:  */
1:3340371: package org.apache.activemq.usecases;
1:3340371: 
1:3340371: import java.io.File;
1:591e55f: import java.io.IOException;
1:3340371: import java.net.URI;
1:3340371: 
1:3340371: import javax.jms.Destination;
1:3340371: import javax.jms.MessageConsumer;
1:3340371: 
1:3340371: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:3340371: import org.apache.activemq.broker.BrokerService;
1:3340371: import org.apache.activemq.broker.region.DestinationInterceptor;
1:3340371: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:3340371: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:3340371: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:9b7ce0e: import org.apache.activemq.network.NetworkConnector;
1:3340371: import org.apache.activemq.store.kahadb.KahaDBStore;
1:3340371: import org.apache.activemq.util.MessageIdList;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:3340371: 
1:3340371: 
1:3340371: public class ThreeBrokerVirtualTopicNetworkTest extends JmsMultipleBrokersTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ThreeBrokerVirtualTopicNetworkTest.class);
1:3340371:     protected static final int MESSAGE_COUNT = 1;
1:3340371:     public boolean dynamicOnly = false;
1:3340371: 
1:3340371:     
1:3340371:     public void testNetworkVirtualTopic() throws Exception {
1:3340371:         int networkTTL = 6;
1:3340371:         boolean conduitSubs = true;
1:3340371:         // Setup broker networks
1:3340371:         bridgeAndConfigureBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:14f7c66:         bridgeAndConfigureBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:14f7c66:         bridgeAndConfigureBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:14f7c66:         bridgeAndConfigureBrokers("BrokerB", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:14f7c66:         bridgeAndConfigureBrokers("BrokerC", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:14f7c66:         bridgeAndConfigureBrokers("BrokerC", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:3340371: 
1:3340371:         startAllBrokers();      
1:3340371:         waitForBridgeFormation();
1:3340371:         
1:3340371:         // Setup destination
1:3340371:         Destination dest = createDestination("TEST.FOO", true);
1:3340371: 
1:3340371:         // Setup consumers
1:3340371:         MessageConsumer clientA = createConsumer("BrokerA", createDestination("Consumer.A.TEST.FOO", false));
1:3340371:         MessageConsumer clientB = createConsumer("BrokerB", createDestination("Consumer.B.TEST.FOO", false));
1:14f7c66:         MessageConsumer clientC = createConsumer("BrokerC", createDestination("Consumer.C.TEST.FOO", false));
1:3340371:         
1:3340371:         Thread.sleep(2000);
1:3340371: 
1:3340371:         // Send messages
2:3340371:         sendMessages("BrokerA", dest, 1);
1:3340371: 
1:3340371:         // Get message count
1:3340371:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:3340371:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:3340371:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1:3340371: 
2:3340371:         msgsA.waitForMessagesToArrive(1);
1:3340371:         msgsB.waitForMessagesToArrive(1);
1:3340371:         msgsC.waitForMessagesToArrive(1);
1:3340371: 
1:3340371:         // ensure we don't get any more messages
1:3340371:         Thread.sleep(2000);
1:3340371:         
2:3340371:         assertEquals(1, msgsA.getMessageCount());
1:3340371:         assertEquals(1, msgsB.getMessageCount());
1:3340371:         assertEquals(1, msgsC.getMessageCount());
1:3340371:         
1:3340371:         // restart to ensure no hanging messages
1:3340371:         LOG.info("Restarting brokerA");
1:3340371:         BrokerItem brokerItem = brokers.remove("BrokerA");
1:3340371:         if (brokerItem != null) {
1:3340371:             brokerItem.destroy();
3:3340371:         }
1:3340371:         
1:14f7c66:         BrokerService restartedBroker = createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?useJmx=false"));
1:3340371:         bridgeAndConfigureBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:14f7c66:         bridgeAndConfigureBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:3340371:         restartedBroker.start();
1:3340371:         waitForBridgeFormation();
1:3340371:         
1:3340371:         clientA = createConsumer("BrokerA", createDestination("Consumer.A.TEST.FOO", false));
1:591e55f:         LOG.info("recreated clientA");
1:3340371:         
1:3340371:         Thread.sleep(2000);
1:3340371: 
1:591e55f:         sendMessages("BrokerA", dest, 10);
1:3340371: 
1:3340371:         msgsA = getConsumerMessages("BrokerA", clientA);
1:3340371: 
1:591e55f:         msgsA.waitForMessagesToArrive(10);
1:591e55f:         msgsB.waitForMessagesToArrive(11);
1:591e55f:         msgsC.waitForMessagesToArrive(11);
1:3340371: 
1:3340371:         // ensure we don't get any more messages
1:3340371:         Thread.sleep(2000);
1:3340371:         
1:33f4190:         LOG.info("MessagesA: " + msgsA.getMessageIds());
1:591e55f:         assertEquals(10, msgsA.getMessageCount());
1:591e55f:         assertEquals(11, msgsB.getMessageCount());
1:591e55f:         assertEquals(11, msgsC.getMessageCount());        
1:591e55f:         
1:591e55f:         // restart to ensure no hanging messages
1:591e55f:         LOG.info("Restarting brokerA again");
1:591e55f:         brokerItem = brokers.remove("BrokerA");
1:591e55f:         if (brokerItem != null) {
1:591e55f:             brokerItem.destroy();
1:591e55f:         }
1:591e55f:         
1:591e55f:         restartedBroker = createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?useJmx=false"));
1:591e55f:         bridgeAndConfigureBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:591e55f:         bridgeAndConfigureBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:591e55f:         restartedBroker.start();
1:591e55f:         waitForBridgeFormation();
1:591e55f:         
1:591e55f:         clientA = createConsumer("BrokerA", createDestination("Consumer.A.TEST.FOO", false));
1:591e55f:         LOG.info("recreated clientA again");
1:591e55f:         
1:591e55f:         Thread.sleep(2000);
1:591e55f: 
1:591e55f:         msgsA = getConsumerMessages("BrokerA", clientA);
1:591e55f: 
1:591e55f:         // ensure we don't get any more messages
1:591e55f:         Thread.sleep(5000);
1:591e55f:         
1:33f4190:         LOG.info("Extra MessagesA: " + msgsA.getMessageIds());
1:591e55f:         assertEquals(0, msgsA.getMessageCount());
1:591e55f:         assertEquals(11, msgsB.getMessageCount());
1:591e55f:         assertEquals(11, msgsC.getMessageCount());
1:3340371:     }
1:3340371:     
1:3340371: 
1:3340371:     private void bridgeAndConfigureBrokers(String local, String remote, boolean dynamicOnly, int networkTTL, boolean conduitSubs) throws Exception {
1:9b7ce0e:         NetworkConnector bridge = bridgeBrokers(local, remote, dynamicOnly, networkTTL, conduitSubs);
1:9b7ce0e:         bridge.setDecreaseNetworkConsumerPriority(true);
1:3340371:     }
1:3340371: 
1:3340371:     public void setUp() throws Exception {
1:3340371:         super.setAutoFail(true);
1:3340371:         super.setUp();
1:3340371:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true"); 
1:3340371:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:3340371:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1:14f7c66:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61618)/BrokerC" + options));
1:3340371:     }
1:3340371:     
1:3340371:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:3340371:         BrokerService broker = createBroker(uri);
1:3340371:         
1:591e55f:         configurePersistenceAdapter(broker);
1:3340371:         
1:3340371:         // make all topics virtual and consumers use the default prefix
1:3340371:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:3340371:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()});
1:3340371:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor};
1:3340371:         broker.setDestinationInterceptors(destinationInterceptors);
1:3340371:         return broker;
1:591e55f:     }
1:591e55f:     
1:591e55f:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:591e55f:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:591e55f:         KahaDBStore kaha = new KahaDBStore();
1:591e55f:         kaha.setDirectory(dataFileDir);
1:591e55f:         broker.setPersistenceAdapter(kaha);
1:8bf987b:     }
1:591e55f: 
1:591e55f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ThreeBrokerVirtualTopicNetworkTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:33f4190
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("MessagesA: " + msgsA.getMessageIds());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Extra MessagesA: " + msgsA.getMessageIds());
commit:591e55f
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("recreated clientA");
1:         sendMessages("BrokerA", dest, 10);
1:         msgsA.waitForMessagesToArrive(10);
1:         msgsB.waitForMessagesToArrive(11);
1:         msgsC.waitForMessagesToArrive(11);
1:         assertEquals(10, msgsA.getMessageCount());
1:         assertEquals(11, msgsB.getMessageCount());
1:         assertEquals(11, msgsC.getMessageCount());        
1:         
1:         // restart to ensure no hanging messages
1:         LOG.info("Restarting brokerA again");
1:         brokerItem = brokers.remove("BrokerA");
1:         if (brokerItem != null) {
1:             brokerItem.destroy();
1:         }
1:         
1:         restartedBroker = createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?useJmx=false"));
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:         restartedBroker.start();
1:         waitForBridgeFormation();
1:         
1:         clientA = createConsumer("BrokerA", createDestination("Consumer.A.TEST.FOO", false));
1:         LOG.info("recreated clientA again");
1:         
1:         Thread.sleep(2000);
1: 
1:         msgsA = getConsumerMessages("BrokerA", clientA);
1: 
1:         // ensure we don't get any more messages
1:         Thread.sleep(5000);
1:         
1:         assertEquals(0, msgsA.getMessageCount());
1:         assertEquals(11, msgsB.getMessageCount());
1:         assertEquals(11, msgsC.getMessageCount());
/////////////////////////////////////////////////////////////////////////
1:         configurePersistenceAdapter(broker);
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(dataFileDir);
1:         broker.setPersistenceAdapter(kaha);
1:     }
1: 
1: }
commit:9b7ce0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.network.NetworkConnector;
/////////////////////////////////////////////////////////////////////////
0:         sendMessages("BrokerA", dest, 2);
0:         msgsA.waitForMessagesToArrive(2);
0:         msgsB.waitForMessagesToArrive(3);
0:         msgsC.waitForMessagesToArrive(3);
0:         assertEquals(2, msgsA.getMessageCount());
0:         assertEquals(3, msgsB.getMessageCount());
0:         assertEquals(3, msgsC.getMessageCount());        
1:         NetworkConnector bridge = bridgeBrokers(local, remote, dynamicOnly, networkTTL, conduitSubs);
1:         bridge.setDecreaseNetworkConsumerPriority(true);
commit:14f7c66
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeAndConfigureBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeAndConfigureBrokers("BrokerB", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeAndConfigureBrokers("BrokerC", "BrokerA", dynamicOnly, networkTTL, conduitSubs);
1:         bridgeAndConfigureBrokers("BrokerC", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
/////////////////////////////////////////////////////////////////////////
1:         MessageConsumer clientC = createConsumer("BrokerC", createDestination("Consumer.C.TEST.FOO", false));
/////////////////////////////////////////////////////////////////////////
1:         BrokerService restartedBroker = createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?useJmx=false"));
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerC", dynamicOnly, networkTTL, conduitSubs);
/////////////////////////////////////////////////////////////////////////
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61618)/BrokerC" + options));
commit:3340371
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.File;
1: import java.net.URI;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
0: import org.apache.activemq.JmsMultipleBrokersTestSupport.BrokerItem;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
0: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.MessageIdList;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: public class ThreeBrokerVirtualTopicNetworkTest extends JmsMultipleBrokersTestSupport {
0:     private static final Log LOG = LogFactory.getLog(ThreeBrokerVirtualTopicNetworkTest.class);
1:     protected static final int MESSAGE_COUNT = 1;
1:     public boolean dynamicOnly = false;
1: 
1:     
1:     public void testNetworkVirtualTopic() throws Exception {
1:         int networkTTL = 6;
1:         boolean conduitSubs = true;
1:         // Setup broker networks
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1: 
1:         startAllBrokers();      
1:         waitForBridgeFormation();
1:         
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", createDestination("Consumer.A.TEST.FOO", false));
1:         MessageConsumer clientB = createConsumer("BrokerB", createDestination("Consumer.B.TEST.FOO", false));
0:         MessageConsumer clientC = createConsumer("BrokerB", createDestination("Consumer.C.TEST.FOO", false));
1:         
1:         Thread.sleep(2000);
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, 1);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         MessageIdList msgsC = getConsumerMessages("BrokerC", clientC);
1: 
1:         msgsA.waitForMessagesToArrive(1);
1:         msgsB.waitForMessagesToArrive(1);
1:         msgsC.waitForMessagesToArrive(1);
1: 
1:         // ensure we don't get any more messages
1:         Thread.sleep(2000);
1:         
1:         assertEquals(1, msgsA.getMessageCount());
1:         assertEquals(1, msgsB.getMessageCount());
1:         assertEquals(1, msgsC.getMessageCount());
1:         
1:         // restart to ensure no hanging messages
1:         LOG.info("Restarting brokerA");
1:         BrokerItem brokerItem = brokers.remove("BrokerA");
1:         if (brokerItem != null) {
1:             brokerItem.destroy();
1:         }
1:         
0:         BrokerService restartedBroker = createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA"));
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduitSubs);
1:         restartedBroker.start();
1:         waitForBridgeFormation();
1:         
1:         clientA = createConsumer("BrokerA", createDestination("Consumer.A.TEST.FOO", false));
1:         
1:         Thread.sleep(2000);
1: 
1:         sendMessages("BrokerA", dest, 1);
1: 
1:         msgsA = getConsumerMessages("BrokerA", clientA);
1: 
1:         msgsA.waitForMessagesToArrive(1);
0:         msgsB.waitForMessagesToArrive(2);
0:         msgsC.waitForMessagesToArrive(2);
1: 
1:         // ensure we don't get any more messages
1:         Thread.sleep(2000);
1:         
1:         assertEquals(1, msgsA.getMessageCount());
0:         assertEquals(2, msgsB.getMessageCount());
0:         assertEquals(2, msgsC.getMessageCount());        
1:     }
1:     
1: 
1:     private void bridgeAndConfigureBrokers(String local, String remote, boolean dynamicOnly, int networkTTL, boolean conduitSubs) throws Exception {
0:         bridgeBrokers(local, remote, dynamicOnly, networkTTL, conduitSubs);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true"); 
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
1:     }
1:     
1:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:         BrokerService broker = createBroker(uri);
1:         
0:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
0:         KahaDBStore kaha = new KahaDBStore();
0:         kaha.setDirectory(dataFileDir);
0:         broker.setPersistenceAdapter(kaha);
1:         
1:         // make all topics virtual and consumers use the default prefix
1:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()});
1:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor};
1:         broker.setDestinationInterceptors(destinationInterceptors);
1:         return broker;
1:     }
1: }
============================================================================