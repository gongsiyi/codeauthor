1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
1:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Collection;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Iterator;
1:ecf89a6: import java.util.List;
1:ecf89a6: import java.util.Map;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: 
1:d29ca2a: /**
1:230a86c:  * A MultiExpressionEvaluator is used to evaluate multiple expressions in single
1:230a86c:  * method call. <p/> Multiple Expression/ExpressionListener pairs can be added
1:230a86c:  * to a MultiExpressionEvaluator object. When the MultiExpressionEvaluator
1:230a86c:  * object is evaluated, all the registed Expressions are evaluated and then the
1:230a86c:  * associated ExpressionListener is invoked to inform it of the evaluation
1:230a86c:  * result. <p/> By evaluating multiple expressions at one time, some
1:230a86c:  * optimizations can be made to reduce the number of computations normally
1:230a86c:  * required to evaluate all the expressions. <p/> When this class adds an
1:230a86c:  * Expression it wrapps each node in the Expression's AST with a CacheExpression
1:230a86c:  * object. Then each CacheExpression object (one for each node) is placed in the
1:230a86c:  * cachedExpressions map. The cachedExpressions map allows us to find the sub
1:230a86c:  * expressions that are common across two different expressions. When adding an
1:230a86c:  * Expression in, if a sub Expression of the Expression is allready in the
1:230a86c:  * cachedExpressions map, then instead of wrapping the sub expression in a new
1:230a86c:  * CacheExpression object, we reuse the CacheExpression allready int the map.
1:230a86c:  * <p/> To help illustrate what going on, lets try to give an exmample: If we
1:230a86c:  * denote the AST of a Expression as follows:
1:230a86c:  * [AST-Node-Type,Left-Node,Right-Node], then A expression like: "3*5+6" would
1:230a86c:  * result in "[*,3,[+,5,6]]" <p/> If the [*,3,[+,5,6]] expression is added to
1:230a86c:  * the MultiExpressionEvaluator, it would really be converted to:
1:230a86c:  * [c0,[*,3,[c1,[+,5,6]]]] where c0 and c1 represent the CacheExpression
1:230a86c:  * expression objects that cache the results of the * and the + operation.
1:230a86c:  * Constants and Property nodes are not cached. <p/> If later on we add the
1:230a86c:  * following expression [=,11,[+,5,6]] ("11=5+6") to the
1:230a86c:  * MultiExpressionEvaluator it would be converted to: [c2,[=,11,[c1,[+,5,6]]]],
1:230a86c:  * where c2 is a new CacheExpression object but c1 is the same CacheExpression
1:230a86c:  * used in the previous expression. <p/> When the expressions are evaluated, the
1:230a86c:  * c1 CacheExpression object will only evaluate the [+,5,6] expression once and
1:230a86c:  * cache the resulting value. Hence evauating the second expression costs less
1:230a86c:  * because that [+,5,6] is not done 2 times. <p/> Problems: - cacheing the
1:230a86c:  * values introduces overhead. It may be possible to be smarter about WHICH
1:230a86c:  * nodes in the AST are cached and which are not. - Current implementation is
1:230a86c:  * not thread safe. This is because you need a way to invalidate all the cached
1:230a86c:  * values so that the next evaluation re-evaluates the nodes. By going single
1:230a86c:  * threaded, chache invalidation is done quickly by incrementing a 'view'
1:230a86c:  * counter. When a CacheExpressionnotices it's last cached value was generated
1:230a86c:  * in an old 'view', it invalidates its cached value.
1:230a86c:  * 
1:b0c2a40:  *  $Date: 2005/08/27 03:52:36 $
1:d29ca2a:  */
1:d29ca2a: public class MultiExpressionEvaluator {
1:d29ca2a: 
1:ecf89a6:     Map<String, ExpressionListenerSet> rootExpressions = new HashMap<String, ExpressionListenerSet>();
1:ecf89a6:     Map<Expression, CacheExpression> cachedExpressions = new HashMap<Expression, CacheExpression>();
1:d29ca2a: 
1:230a86c:     int view;
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * A UnaryExpression that caches the result of the nested expression. The
1:230a86c:      * cached value is valid if the
1:230a86c:      * CacheExpression.cview==MultiExpressionEvaluator.view
1:d29ca2a:      */
1:d29ca2a:     public class CacheExpression extends UnaryExpression {
1:230a86c:         short refCount;
1:d29ca2a:         int cview = view - 1;
1:d29ca2a:         Object cachedValue;
1:d29ca2a:         int cachedHashCode;
1:d29ca2a: 
1:d29ca2a:         public CacheExpression(Expression realExpression) {
1:d29ca2a:             super(realExpression);
1:d29ca2a:             cachedHashCode = realExpression.hashCode();
4:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         /**
1:d29ca2a:          * @see org.apache.activemq.filter.Expression#evaluate(MessageEvaluationContext)
1:d29ca2a:          */
1:d29ca2a:         public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:             if (view == cview) {
1:d29ca2a:                 return cachedValue;
1:86cbdfd:             }
1:d29ca2a:             cachedValue = right.evaluate(message);
1:d29ca2a:             cview = view;
1:d29ca2a:             return cachedValue;
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         public int hashCode() {
1:d29ca2a:             return cachedHashCode;
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         public boolean equals(Object o) {
1:ecf89a6:             if (o == null) {
1:d29ca2a:                 return false;
1:ecf89a6:             }
1:230a86c:             return ((CacheExpression)o).right.equals(right);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         public String getExpressionSymbol() {
1:d29ca2a:             return null;
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         public String toString() {
1:d29ca2a:             return right.toString();
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Multiple listeners my be interested in the results of a single
1:230a86c:      * expression.
1:d29ca2a:      */
1:d29ca2a:     static class ExpressionListenerSet {
1:d29ca2a:         Expression expression;
1:ecf89a6:         List<ExpressionListener> listeners = new ArrayList<ExpressionListener>();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Objects that are interested in the results of an expression should
1:230a86c:      * implement this interface.
1:d29ca2a:      */
1:d29ca2a:     static interface ExpressionListener {
1:fc00993:         void evaluateResultEvent(Expression selector, MessageEvaluationContext message, Object result);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Adds an ExpressionListener to a given expression. When evaluate is
1:d29ca2a:      * called, the ExpressionListener will be provided the results of the
1:d29ca2a:      * Expression applied to the evaluated message.
1:d29ca2a:      */
1:d29ca2a:     public void addExpressionListner(Expression selector, ExpressionListener c) {
1:ecf89a6:         ExpressionListenerSet data = rootExpressions.get(selector.toString());
1:d29ca2a:         if (data == null) {
1:d29ca2a:             data = new ExpressionListenerSet();
1:d29ca2a:             data.expression = addToCache(selector);
1:d29ca2a:             rootExpressions.put(selector.toString(), data);
1:d29ca2a:         }
1:d29ca2a:         data.listeners.add(c);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Removes an ExpressionListener from receiving the results of a given
1:230a86c:      * evaluation.
1:d29ca2a:      */
1:d29ca2a:     public boolean removeEventListner(String selector, ExpressionListener c) {
1:d29ca2a:         String expKey = selector;
1:ecf89a6:         ExpressionListenerSet d = rootExpressions.get(expKey);
1:ecf89a6:         // that selector had not been added.
1:ecf89a6:         if (d == null) {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:ecf89a6:         // that selector did not have that listeners..
1:ecf89a6:         if (!d.listeners.remove(c)) {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:d29ca2a: 
1:ecf89a6:         // If there are no more listeners for this expression....
1:d29ca2a:         if (d.listeners.size() == 0) {
1:ecf89a6:             // Un-cache it...
1:230a86c:             removeFromCache((CacheExpression)d.expression);
1:d29ca2a:             rootExpressions.remove(expKey);
1:d29ca2a:         }
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Finds the CacheExpression that has been associated with an expression. If
1:230a86c:      * it is the first time the Expression is being added to the Cache, a new
1:230a86c:      * CacheExpression is created and associated with the expression. <p/> This
1:230a86c:      * method updates the reference counters on the CacheExpression to know when
1:230a86c:      * it is no longer needed.
1:d29ca2a:      */
1:d29ca2a:     private CacheExpression addToCache(Expression expr) {
1:d29ca2a: 
1:ecf89a6:         CacheExpression n = cachedExpressions.get(expr);
1:d29ca2a:         if (n == null) {
1:d29ca2a:             n = new CacheExpression(expr);
1:d29ca2a:             cachedExpressions.put(expr, n);
1:d29ca2a:             if (expr instanceof UnaryExpression) {
1:d29ca2a: 
1:d29ca2a:                 // Cache the sub expressions too
1:230a86c:                 UnaryExpression un = (UnaryExpression)expr;
1:d29ca2a:                 un.setRight(addToCache(un.getRight()));
1:d29ca2a: 
1:230a86c:             } else if (expr instanceof BinaryExpression) {
1:d29ca2a: 
1:d29ca2a:                 // Cache the sub expressions too.
1:230a86c:                 BinaryExpression bn = (BinaryExpression)expr;
1:d29ca2a:                 bn.setRight(addToCache(bn.getRight()));
1:d29ca2a:                 bn.setLeft(addToCache(bn.getLeft()));
1:d29ca2a: 
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         n.refCount++;
1:d29ca2a:         return n;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Removes an expression from the cache. Updates the reference counters on
1:230a86c:      * the CacheExpression object. When the refernce counter goes to zero, the
1:230a86c:      * entry int the Expression to CacheExpression map is removed.
1:230a86c:      * 
1:d29ca2a:      * @param cn
1:d29ca2a:      */
1:d29ca2a:     private void removeFromCache(CacheExpression cn) {
1:d29ca2a:         cn.refCount--;
1:d29ca2a:         Expression realExpr = cn.getRight();
1:d29ca2a:         if (cn.refCount == 0) {
1:d29ca2a:             cachedExpressions.remove(realExpr);
1:d29ca2a:         }
1:d29ca2a:         if (realExpr instanceof UnaryExpression) {
1:230a86c:             UnaryExpression un = (UnaryExpression)realExpr;
1:230a86c:             removeFromCache((CacheExpression)un.getRight());
1:d29ca2a:         }
1:d29ca2a:         if (realExpr instanceof BinaryExpression) {
1:230a86c:             BinaryExpression bn = (BinaryExpression)realExpr;
1:230a86c:             removeFromCache((CacheExpression)bn.getRight());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Evaluates the message against all the Expressions added to this object.
1:230a86c:      * The added ExpressionListeners are notified of the result of the
1:230a86c:      * evaluation.
1:230a86c:      * 
1:d29ca2a:      * @param message
1:d29ca2a:      */
1:d29ca2a:     public void evaluate(MessageEvaluationContext message) {
1:ecf89a6:         Collection<ExpressionListenerSet> expressionListeners = rootExpressions.values();
1:ecf89a6:         for (Iterator<ExpressionListenerSet> iter = expressionListeners.iterator(); iter.hasNext();) {
1:ecf89a6:             ExpressionListenerSet els = iter.next();
1:d29ca2a:             try {
1:d29ca2a:                 Object result = els.expression.evaluate(message);
1:ecf89a6:                 for (Iterator<ExpressionListener> iterator = els.listeners.iterator(); iterator.hasNext();) {
1:ecf89a6:                     ExpressionListener l = iterator.next();
1:d29ca2a:                     l.evaluateResultEvent(els.expression, message, result);
1:d29ca2a:                 }
1:230a86c:             } catch (Throwable e) {
1:d29ca2a:                 e.printStackTrace();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  *  $Date: 2005/08/27 03:52:36 $
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     Map<String, ExpressionListenerSet> rootExpressions = new HashMap<String, ExpressionListenerSet>();
1:     Map<Expression, CacheExpression> cachedExpressions = new HashMap<Expression, CacheExpression>();
/////////////////////////////////////////////////////////////////////////
1:             if (o == null) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:         List<ExpressionListener> listeners = new ArrayList<ExpressionListener>();
/////////////////////////////////////////////////////////////////////////
1:         ExpressionListenerSet data = rootExpressions.get(selector.toString());
/////////////////////////////////////////////////////////////////////////
1:         ExpressionListenerSet d = rootExpressions.get(expKey);
1:         // that selector had not been added.
1:         if (d == null) {
1:         // that selector did not have that listeners..
1:         if (!d.listeners.remove(c)) {
1:         // If there are no more listeners for this expression....
1:             // Un-cache it...
/////////////////////////////////////////////////////////////////////////
1:         CacheExpression n = cachedExpressions.get(expr);
/////////////////////////////////////////////////////////////////////////
1:         Collection<ExpressionListenerSet> expressionListeners = rootExpressions.values();
1:         for (Iterator<ExpressionListenerSet> iter = expressionListeners.iterator(); iter.hasNext();) {
1:             ExpressionListenerSet els = iter.next();
1:                 for (Iterator<ExpressionListener> iterator = els.listeners.iterator(); iterator.hasNext();) {
1:                     ExpressionListener l = iterator.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         void evaluateResultEvent(Expression selector, MessageEvaluationContext message, Object result);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A MultiExpressionEvaluator is used to evaluate multiple expressions in single
1:  * method call. <p/> Multiple Expression/ExpressionListener pairs can be added
1:  * to a MultiExpressionEvaluator object. When the MultiExpressionEvaluator
1:  * object is evaluated, all the registed Expressions are evaluated and then the
1:  * associated ExpressionListener is invoked to inform it of the evaluation
1:  * result. <p/> By evaluating multiple expressions at one time, some
1:  * optimizations can be made to reduce the number of computations normally
1:  * required to evaluate all the expressions. <p/> When this class adds an
1:  * Expression it wrapps each node in the Expression's AST with a CacheExpression
1:  * object. Then each CacheExpression object (one for each node) is placed in the
1:  * cachedExpressions map. The cachedExpressions map allows us to find the sub
1:  * expressions that are common across two different expressions. When adding an
1:  * Expression in, if a sub Expression of the Expression is allready in the
1:  * cachedExpressions map, then instead of wrapping the sub expression in a new
1:  * CacheExpression object, we reuse the CacheExpression allready int the map.
1:  * <p/> To help illustrate what going on, lets try to give an exmample: If we
1:  * denote the AST of a Expression as follows:
1:  * [AST-Node-Type,Left-Node,Right-Node], then A expression like: "3*5+6" would
1:  * result in "[*,3,[+,5,6]]" <p/> If the [*,3,[+,5,6]] expression is added to
1:  * the MultiExpressionEvaluator, it would really be converted to:
1:  * [c0,[*,3,[c1,[+,5,6]]]] where c0 and c1 represent the CacheExpression
1:  * expression objects that cache the results of the * and the + operation.
1:  * Constants and Property nodes are not cached. <p/> If later on we add the
1:  * following expression [=,11,[+,5,6]] ("11=5+6") to the
1:  * MultiExpressionEvaluator it would be converted to: [c2,[=,11,[c1,[+,5,6]]]],
1:  * where c2 is a new CacheExpression object but c1 is the same CacheExpression
1:  * used in the previous expression. <p/> When the expressions are evaluated, the
1:  * c1 CacheExpression object will only evaluate the [+,5,6] expression once and
1:  * cache the resulting value. Hence evauating the second expression costs less
1:  * because that [+,5,6] is not done 2 times. <p/> Problems: - cacheing the
1:  * values introduces overhead. It may be possible to be smarter about WHICH
1:  * nodes in the AST are cached and which are not. - Current implementation is
1:  * not thread safe. This is because you need a way to invalidate all the cached
1:  * values so that the next evaluation re-evaluates the nodes. By going single
1:  * threaded, chache invalidation is done quickly by incrementing a 'view'
1:  * counter. When a CacheExpressionnotices it's last cached value was generated
1:  * in an old 'view', it invalidates its cached value.
1:  * 
/////////////////////////////////////////////////////////////////////////
1:     int view;
1:      * A UnaryExpression that caches the result of the nested expression. The
1:      * cached value is valid if the
1:      * CacheExpression.cview==MultiExpressionEvaluator.view
1:         short refCount;
/////////////////////////////////////////////////////////////////////////
0:             if (o == null)
1:             return ((CacheExpression)o).right.equals(right);
/////////////////////////////////////////////////////////////////////////
1:      * Multiple listeners my be interested in the results of a single
1:      * expression.
/////////////////////////////////////////////////////////////////////////
1:      * Objects that are interested in the results of an expression should
1:      * implement this interface.
1:      * Adds an ExpressionListener to a given expression. When evaluate is
0:         ExpressionListenerSet data = (ExpressionListenerSet)rootExpressions.get(selector.toString());
/////////////////////////////////////////////////////////////////////////
1:      * Removes an ExpressionListener from receiving the results of a given
1:      * evaluation.
0:         ExpressionListenerSet d = (ExpressionListenerSet)rootExpressions.get(expKey);
/////////////////////////////////////////////////////////////////////////
1:             removeFromCache((CacheExpression)d.expression);
1:      * Finds the CacheExpression that has been associated with an expression. If
1:      * it is the first time the Expression is being added to the Cache, a new
1:      * CacheExpression is created and associated with the expression. <p/> This
1:      * method updates the reference counters on the CacheExpression to know when
1:      * it is no longer needed.
0:         CacheExpression n = (CacheExpression)cachedExpressions.get(expr);
1:                 UnaryExpression un = (UnaryExpression)expr;
1:             } else if (expr instanceof BinaryExpression) {
1:                 BinaryExpression bn = (BinaryExpression)expr;
/////////////////////////////////////////////////////////////////////////
1:      * Removes an expression from the cache. Updates the reference counters on
1:      * the CacheExpression object. When the refernce counter goes to zero, the
1:      * entry int the Expression to CacheExpression map is removed.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:             UnaryExpression un = (UnaryExpression)realExpr;
1:             removeFromCache((CacheExpression)un.getRight());
1:             BinaryExpression bn = (BinaryExpression)realExpr;
1:             removeFromCache((CacheExpression)bn.getRight());
1:      * Evaluates the message against all the Expressions added to this object.
1:      * The added ExpressionListeners are notified of the result of the
1:      * evaluation.
1:      * 
0:             ExpressionListenerSet els = (ExpressionListenerSet)iter.next();
0:                     ExpressionListener l = (ExpressionListener)iterator.next();
1:             } catch (Throwable e) {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: 
1: import javax.jms.JMSException;
1: 
1: /**
0:  * A MultiExpressionEvaluator is used to evaluate multiple expressions in
0:  * single method call.
0:  * <p/>
0:  * Multiple Expression/ExpressionListener pairs can be added to a MultiExpressionEvaluator object.  When
0:  * the MultiExpressionEvaluator object is evaluated, all the registed Expressions are evaluated and then the
0:  * associated ExpressionListener is invoked to inform it of the evaluation result.
0:  * <p/>
0:  * By evaluating multiple expressions at one time, some optimizations can be made
0:  * to reduce the number of computations normally required to evaluate all the expressions.
0:  * <p/>
0:  * When this class adds an Expression it wrapps each node in the Expression's AST with a
0:  * CacheExpression object.  Then each CacheExpression object (one for each node) is placed
0:  * in the cachedExpressions map.  The cachedExpressions map allows us to find the sub expressions
0:  * that are common across two different expressions.  When adding an Expression in, if a sub
0:  * Expression of the Expression is allready in the cachedExpressions map, then instead of
0:  * wrapping the sub expression in a new CacheExpression object, we reuse the CacheExpression allready
0:  * int the map.
0:  * <p/>
0:  * To help illustrate what going on, lets try to give an exmample:
0:  * If we denote the AST of a Expression as follows: [AST-Node-Type,Left-Node,Right-Node], then
0:  * A expression like: "3*5+6" would result in "[*,3,[+,5,6]]"
0:  * <p/>
0:  * If the [*,3,[+,5,6]] expression is added to the MultiExpressionEvaluator, it would really
0:  * be converted to: [c0,[*,3,[c1,[+,5,6]]]] where c0 and c1 represent the CacheExpression expression
0:  * objects that cache the results of the * and the + operation.  Constants and Property nodes are not
0:  * cached.
0:  * <p/>
0:  * If later on we add the following expression [=,11,[+,5,6]] ("11=5+6") to the MultiExpressionEvaluator
0:  * it would be converted to: [c2,[=,11,[c1,[+,5,6]]]], where c2 is a new CacheExpression object
0:  * but c1 is the same CacheExpression used in the previous expression.
0:  * <p/>
0:  * When the expressions are evaluated, the c1 CacheExpression object will only evaluate the
0:  * [+,5,6] expression once and cache the resulting value.  Hence evauating the second expression
0:  * costs less because that [+,5,6] is not done 2 times.
0:  * <p/>
0:  * Problems:
0:  * - cacheing the values introduces overhead.  It may be possible to be smarter about WHICH
0:  * nodes in the AST are cached and which are not.
0:  * - Current implementation is not thread safe.  This is because you need a way to invalidate
0:  * all the cached values so that the next evaluation re-evaluates the nodes.  By going single
0:  * threaded, chache invalidation is done quickly by incrementing a 'view' counter.
0:  * When a CacheExpressionnotices it's last cached value was generated in an old 'view',
0:  * it invalidates its cached value.
1:  *
0:  * @version $Revision: 1.2 $ $Date: 2005/08/27 03:52:36 $
1:  */
1: public class MultiExpressionEvaluator {
1: 
0:     HashMap rootExpressions = new HashMap();
0:     HashMap cachedExpressions = new HashMap();
1: 
0:     int view = 0;
1: 
1:     /**
0:      * A UnaryExpression that caches the result of the
0:      * nested expression.  The cached value is valid
0:      * if the CacheExpression.cview==MultiExpressionEvaluator.view
1:      */
1:     public class CacheExpression extends UnaryExpression {
0:         short refCount = 0;
1:         int cview = view - 1;
1:         Object cachedValue;
1:         int cachedHashCode;
1: 
1:         public CacheExpression(Expression realExpression) {
1:             super(realExpression);
1:             cachedHashCode = realExpression.hashCode();
1:         }
1: 
1:         /**
1:          * @see org.apache.activemq.filter.Expression#evaluate(MessageEvaluationContext)
1:          */
1:         public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:             if (view == cview) {
1:                 return cachedValue;
1:             }
1:             cachedValue = right.evaluate(message);
1:             cview = view;
1:             return cachedValue;
1:         }
1: 
1:         public int hashCode() {
1:             return cachedHashCode;
1:         }
1: 
1:         public boolean equals(Object o) {
0:             if( o == null )
1:                 return false;
0:             return ((CacheExpression) o).right.equals(right);
1:         }
1: 
1:         public String getExpressionSymbol() {
1:             return null;
1:         }
1: 
1:         public String toString() {
1:             return right.toString();
1:         }
1: 
1:     }
1: 
1:     /**
0:      * Multiple listeners my be interested in the results
0:      * of a single expression.
1:      */
1:     static class ExpressionListenerSet {
1:         Expression expression;
0:         ArrayList listeners = new ArrayList();
1:     }
1: 
1:     /**
0:      * Objects that are interested in the results of an expression
0:      * should implement this interface.
1:      */
1:     static interface ExpressionListener {
0:         public void evaluateResultEvent(Expression selector, MessageEvaluationContext message, Object result);
1:     }
1: 
1:     /**
0:      * Adds an ExpressionListener to a given expression.  When evaluate is
1:      * called, the ExpressionListener will be provided the results of the
1:      * Expression applied to the evaluated message.
1:      */
1:     public void addExpressionListner(Expression selector, ExpressionListener c) {
0:         ExpressionListenerSet data = (ExpressionListenerSet) rootExpressions.get(selector.toString());
1:         if (data == null) {
1:             data = new ExpressionListenerSet();
1:             data.expression = addToCache(selector);
1:             rootExpressions.put(selector.toString(), data);
1:         }
1:         data.listeners.add(c);
1:     }
1: 
1:     /**
0:      * Removes an ExpressionListener from receiving the results of
0:      * a given evaluation.
1:      */
1:     public boolean removeEventListner(String selector, ExpressionListener c) {
1:         String expKey = selector;
0:         ExpressionListenerSet d = (ExpressionListenerSet) rootExpressions.get(expKey);
0:         if (d == null) // that selector had not been added.
0:         {
1:             return false;
1:         }
0:         if (!d.listeners.remove(c)) // that selector did not have that listner..
0:         {
1:             return false;
1:         }
1: 
0:         // If there are no more listners for this expression....
1:         if (d.listeners.size() == 0) {
0:             // Uncache it...
0:             removeFromCache((CacheExpression) d.expression);
1:             rootExpressions.remove(expKey);
1:         }
1:         return true;
1:     }
1: 
1:     /**
0:      * Finds the CacheExpression that has been associated
0:      * with an expression.  If it is the first time the
0:      * Expression is being added to the Cache, a new
0:      * CacheExpression is created and associated with
0:      * the expression.
0:      * <p/>
0:      * This method updates the reference counters on the
0:      * CacheExpression to know when it is no longer needed.
1:      */
1:     private CacheExpression addToCache(Expression expr) {
1: 
0:         CacheExpression n = (CacheExpression) cachedExpressions.get(expr);
1:         if (n == null) {
1:             n = new CacheExpression(expr);
1:             cachedExpressions.put(expr, n);
1:             if (expr instanceof UnaryExpression) {
1: 
1:                 // Cache the sub expressions too
0:                 UnaryExpression un = (UnaryExpression) expr;
1:                 un.setRight(addToCache(un.getRight()));
1: 
1:             }
0:             else if (expr instanceof BinaryExpression) {
1: 
1:                 // Cache the sub expressions too.
0:                 BinaryExpression bn = (BinaryExpression) expr;
1:                 bn.setRight(addToCache(bn.getRight()));
1:                 bn.setLeft(addToCache(bn.getLeft()));
1: 
1:             }
1:         }
1:         n.refCount++;
1:         return n;
1:     }
1: 
1:     /**
0:      * Removes an expression from the cache.  Updates the
0:      * reference counters on the CacheExpression object.  When
0:      * the refernce counter goes to zero, the entry
0:      * int the Expression to CacheExpression map is removed.
1:      *
1:      * @param cn
1:      */
1:     private void removeFromCache(CacheExpression cn) {
1:         cn.refCount--;
1:         Expression realExpr = cn.getRight();
1:         if (cn.refCount == 0) {
1:             cachedExpressions.remove(realExpr);
1:         }
1:         if (realExpr instanceof UnaryExpression) {
0:             UnaryExpression un = (UnaryExpression) realExpr;
0:             removeFromCache((CacheExpression) un.getRight());
1:         }
1:         if (realExpr instanceof BinaryExpression) {
0:             BinaryExpression bn = (BinaryExpression) realExpr;
0:             removeFromCache((CacheExpression) bn.getRight());
1:         }
1:     }
1: 
1:     /**
0:      * Evaluates the message against all the Expressions added to
0:      * this object.  The added ExpressionListeners are notified
0:      * of the result of the evaluation.
1:      *
1:      * @param message
1:      */
1:     public void evaluate(MessageEvaluationContext message) {
0:         Collection expressionListeners = rootExpressions.values();
0:         for (Iterator iter = expressionListeners.iterator(); iter.hasNext();) {
0:             ExpressionListenerSet els = (ExpressionListenerSet) iter.next();
1:             try {
1:                 Object result = els.expression.evaluate(message);
0:                 for (Iterator iterator = els.listeners.iterator(); iterator.hasNext();) {
0:                     ExpressionListener l = (ExpressionListener) iterator.next();
1:                     l.evaluateResultEvent(els.expression, message, result);
1:                 }
1:             }
0:             catch (Throwable e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: }
============================================================================