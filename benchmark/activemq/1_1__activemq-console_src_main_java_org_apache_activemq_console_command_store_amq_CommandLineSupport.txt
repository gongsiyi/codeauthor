1:e0ee613: /**
1:e0ee613:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e0ee613:  * contributor license agreements.  See the NOTICE file distributed with
1:e0ee613:  * this work for additional information regarding copyright ownership.
1:e0ee613:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e0ee613:  * (the "License"); you may not use this file except in compliance with
1:e0ee613:  * the License.  You may obtain a copy of the License at
1:e0ee613:  *
1:e0ee613:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e0ee613:  *
1:e0ee613:  * Unless required by applicable law or agreed to in writing, software
1:e0ee613:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e0ee613:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e0ee613:  * See the License for the specific language governing permissions and
1:e0ee613:  * limitations under the License.
1:e0ee613:  */
1:e0ee613: package org.apache.activemq.console.command.store.amq;
1:e0ee613: 
1:e0ee613: import java.util.ArrayList;
1:e0ee613: 
1:e0ee613: import org.apache.activemq.util.IntrospectionSupport;
1:e0ee613: 
1:e0ee613: /**
1:e0ee613:  * Helper utility that can be used to set the properties on any object using
1:e0ee613:  * command line arguments.
1:e0ee613:  * 
1:e0ee613:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:e0ee613:  */
1:e0ee613: public final class CommandLineSupport {
1:e0ee613: 
1:e0ee613:     private CommandLineSupport() {
1:e0ee613:     }
1:e0ee613:     
1:e0ee613:     /**
1:e0ee613:      * Sets the properties of an object given the command line args.
1:e0ee613:      * 
1:e0ee613:      * if args contains: --ack-mode=AUTO --url=tcp://localhost:61616 --persistent 
1:e0ee613:      * 
1:e0ee613:      * then it will try to call the following setters on the target object.
1:e0ee613:      * 
1:e0ee613:      * target.setAckMode("AUTO");
1:e0ee613:      * target.setURL(new URI("tcp://localhost:61616") );
1:e0ee613:      * target.setPersistent(true);
1:e0ee613:      * 
1:e0ee613:      * Notice the the proper conversion for the argument is determined by examining the 
1:e0ee613:      * setter arguement type.  
1:e0ee613:      * 
1:e0ee613:      * @param target the object that will have it's properties set
1:e0ee613:      * @param args the commline options
1:e0ee613:      * @return any arguments that are not valid options for the target
1:e0ee613:      */
1:e0ee613:     public static String[] setOptions(Object target, String[] args) {
1:e0ee613:         ArrayList<String> rc = new ArrayList<String>();
1:e0ee613: 
1:e0ee613:         for (int i = 0; i < args.length; i++) {
1:e0ee613:             if (args[i] == null) {
1:e0ee613:                 continue;
1:e0ee613:             }
1:e0ee613: 
1:e0ee613:             if (args[i].startsWith("--")) {
1:e0ee613: 
1:e0ee613:                 // --options without a specified value are considered boolean
1:e0ee613:                 // flags that are enabled.
1:e0ee613:                 String value = "true";
1:e0ee613:                 String name = args[i].substring(2);
1:e0ee613: 
1:e0ee613:                 // if --option=value case
1:e0ee613:                 int p = name.indexOf("=");
1:e0ee613:                 if (p > 0) {
1:e0ee613:                     value = name.substring(p + 1);
1:e0ee613:                     name = name.substring(0, p);
1:e0ee613:                 }
1:e0ee613: 
1:e0ee613:                 // name not set, then it's an unrecognized option
1:e0ee613:                 if (name.length() == 0) {
1:e0ee613:                     rc.add(args[i]);
1:e0ee613:                     continue;
1:e0ee613:                 }
1:e0ee613: 
1:e0ee613:                 String propName = convertOptionToPropertyName(name);
1:e0ee613:                 if (!IntrospectionSupport.setProperty(target, propName, value)) {
1:e0ee613:                     rc.add(args[i]);
1:e0ee613:                     continue;
1:e0ee613:                 }
1:e0ee613:             } else {
1:e0ee613:                 rc.add(args[i]);
1:e0ee613:             }
1:e0ee613: 
1:e0ee613:         }
1:e0ee613: 
1:e0ee613:         String r[] = new String[rc.size()];
1:e0ee613:         rc.toArray(r);
1:e0ee613:         return r;
1:e0ee613:     }
1:e0ee613: 
1:e0ee613:     /**
1:e0ee613:      * converts strings like: test-enabled to testEnabled
1:e0ee613:      * 
1:e0ee613:      * @param name
1:e0ee613:      * @return
1:e0ee613:      */
1:e0ee613:     private static String convertOptionToPropertyName(String name) {
1:e0ee613:         String rc = "";
1:e0ee613: 
1:e0ee613:         // Look for '-' and strip and then convert the subsequent char to
1:e0ee613:         // uppercase
1:e0ee613:         int p = name.indexOf("-");
1:e0ee613:         while (p > 0) {
1:e0ee613:             // strip
1:e0ee613:             rc += name.substring(0, p);
1:e0ee613:             name = name.substring(p + 1);
1:e0ee613: 
1:e0ee613:             // can I convert the next char to upper?
1:e0ee613:             if (name.length() > 0) {
1:e0ee613:                 rc += name.substring(0, 1).toUpperCase();
1:e0ee613:                 name = name.substring(1);
1:e0ee613:             }
1:e0ee613: 
1:e0ee613:             p = name.indexOf("-");
1:e0ee613:         }
1:e0ee613:         return rc + name;
1:e0ee613:     }
1:e0ee613: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e0ee613
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command.store.amq;
1: 
1: import java.util.ArrayList;
1: 
1: import org.apache.activemq.util.IntrospectionSupport;
1: 
1: /**
1:  * Helper utility that can be used to set the properties on any object using
1:  * command line arguments.
1:  * 
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public final class CommandLineSupport {
1: 
1:     private CommandLineSupport() {
1:     }
1:     
1:     /**
1:      * Sets the properties of an object given the command line args.
1:      * 
1:      * if args contains: --ack-mode=AUTO --url=tcp://localhost:61616 --persistent 
1:      * 
1:      * then it will try to call the following setters on the target object.
1:      * 
1:      * target.setAckMode("AUTO");
1:      * target.setURL(new URI("tcp://localhost:61616") );
1:      * target.setPersistent(true);
1:      * 
1:      * Notice the the proper conversion for the argument is determined by examining the 
1:      * setter arguement type.  
1:      * 
1:      * @param target the object that will have it's properties set
1:      * @param args the commline options
1:      * @return any arguments that are not valid options for the target
1:      */
1:     public static String[] setOptions(Object target, String[] args) {
1:         ArrayList<String> rc = new ArrayList<String>();
1: 
1:         for (int i = 0; i < args.length; i++) {
1:             if (args[i] == null) {
1:                 continue;
1:             }
1: 
1:             if (args[i].startsWith("--")) {
1: 
1:                 // --options without a specified value are considered boolean
1:                 // flags that are enabled.
1:                 String value = "true";
1:                 String name = args[i].substring(2);
1: 
1:                 // if --option=value case
1:                 int p = name.indexOf("=");
1:                 if (p > 0) {
1:                     value = name.substring(p + 1);
1:                     name = name.substring(0, p);
1:                 }
1: 
1:                 // name not set, then it's an unrecognized option
1:                 if (name.length() == 0) {
1:                     rc.add(args[i]);
1:                     continue;
1:                 }
1: 
1:                 String propName = convertOptionToPropertyName(name);
1:                 if (!IntrospectionSupport.setProperty(target, propName, value)) {
1:                     rc.add(args[i]);
1:                     continue;
1:                 }
1:             } else {
1:                 rc.add(args[i]);
1:             }
1: 
1:         }
1: 
1:         String r[] = new String[rc.size()];
1:         rc.toArray(r);
1:         return r;
1:     }
1: 
1:     /**
1:      * converts strings like: test-enabled to testEnabled
1:      * 
1:      * @param name
1:      * @return
1:      */
1:     private static String convertOptionToPropertyName(String name) {
1:         String rc = "";
1: 
1:         // Look for '-' and strip and then convert the subsequent char to
1:         // uppercase
1:         int p = name.indexOf("-");
1:         while (p > 0) {
1:             // strip
1:             rc += name.substring(0, p);
1:             name = name.substring(p + 1);
1: 
1:             // can I convert the next char to upper?
1:             if (name.length() > 0) {
1:                 rc += name.substring(0, 1).toUpperCase();
1:                 name = name.substring(1);
1:             }
1: 
1:             p = name.indexOf("-");
1:         }
1:         return rc + name;
1:     }
1: }
============================================================================