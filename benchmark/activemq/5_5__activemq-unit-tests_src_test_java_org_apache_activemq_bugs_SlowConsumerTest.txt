1:2db848f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:2db848f:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2db848f:  *
1:2db848f:  * Unless required by applicable law or agreed to in writing, software
1:2db848f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2db848f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2db848f:  * See the License for the specific language governing permissions and
1:2db848f:  * limitations under the License.
1:2db848f:  */
1:2db848f: package org.apache.activemq.bugs;
2:2db848f: 
1:2db848f: import java.io.ByteArrayOutputStream;
1:2db848f: import java.io.IOException;
1:2db848f: import java.io.InputStream;
1:2db848f: import java.io.OutputStream;
1:2db848f: import java.net.Socket;
1:2db848f: 
1:2db848f: import javax.jms.Connection;
1:2db848f: import javax.jms.Message;
1:2db848f: import javax.jms.MessageConsumer;
1:2db848f: import javax.jms.MessageProducer;
1:2db848f: import javax.jms.Session;
1:2db848f: import javax.jms.TextMessage;
1:2db848f: 
1:2db848f: import junit.framework.TestCase;
1:2db848f: import org.apache.activemq.ActiveMQConnectionFactory;
1:2db848f: import org.apache.activemq.broker.BrokerService;
1:2db848f: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:2db848f: 
1:2db848f: public class SlowConsumerTest extends TestCase {
1:2db848f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SlowConsumerTest.class);
1:2db848f:     private static final int MESSAGES_COUNT = 10000;
1:ecf89a6: 
1:42e51a3:     private final int messageLogFrequency = 2500;
1:42e51a3:     private final long messageReceiveTimeout = 10000L;
1:2db848f: 
1:ecf89a6:     private Socket stompSocket;
1:ecf89a6:     private ByteArrayOutputStream inputBuffer;
1:ecf89a6:     private int messagesCount;
1:ecf89a6: 
1:2db848f:     /**
1:2db848f:      * @param args
1:2db848f:      * @throws Exception
1:2db848f:      */
1:2db848f:     public void testRemoveSubscriber() throws Exception {
1:2db848f:         final BrokerService broker = new BrokerService();
1:2db848f:         broker.setPersistent(true);
1:2db848f:         broker.setUseJmx(true);
1:aee4378:         broker.setDeleteAllMessagesOnStartup(true);
1:2db848f: 
1:42e51a3:         broker.addConnector("tcp://localhost:0").setName("Default");
1:2db848f:         broker.start();
1:42e51a3:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:42e51a3:                 broker.getTransportConnectors().get(0).getPublishableConnectString());
1:2db848f:         final Connection connection = factory.createConnection();
1:2db848f:         connection.start();
1:2db848f: 
1:2db848f:         Thread producingThread = new Thread("Producing thread") {
1:2db848f:             public void run() {
1:2db848f:                 try {
1:2db848f:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2db848f:                     MessageProducer producer = session.createProducer(new ActiveMQQueue(getDestinationName()));
1:2db848f:                     for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:2db848f:                         Message message = session.createTextMessage("" + idx);
1:2db848f:                         producer.send(message);
1:fc00993:                         LOG.debug("Sending: " + idx);
5:2db848f:                     }
1:2db848f:                     producer.close();
1:2db848f:                     session.close();
1:74a7a8b:                 } catch (Throwable ex) {
1:2db848f:                     ex.printStackTrace();
1:2db848f:                 }
1:2db848f:             }
1:2db848f:         };
1:2db848f:         producingThread.setPriority(Thread.MAX_PRIORITY);
1:2db848f:         producingThread.start();
1:2db848f:         Thread.sleep(1000);
1:2db848f: 
1:2db848f:         Thread consumingThread = new Thread("Consuming thread") {
1:2db848f: 
1:2db848f:             public void run() {
1:2db848f:                 try {
1:2db848f:                     Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:2db848f:                     MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(getDestinationName()));
1:2db848f:                     int diff = 0;
1:2db848f:                     while (messagesCount != MESSAGES_COUNT) {
1:74a7a8b:                         Message msg = consumer.receive(messageReceiveTimeout);
1:2db848f:                         if (msg == null) {
1:fc00993:                             LOG.warn("Got null message at count: " + messagesCount + ". Continuing...");
1:2db848f:                             break;
1:2db848f:                         }
1:74a7a8b:                         String text = ((TextMessage)msg).getText();
1:2db848f:                         int currentMsgIdx = Integer.parseInt(text);
1:fc00993:                         LOG.debug("Received: " + text + " messageCount: " + messagesCount);
1:2db848f:                         msg.acknowledge();
1:2db848f:                         if ((messagesCount + diff) != currentMsgIdx) {
1:fc00993:                             LOG.debug("Message(s) skipped!! Should be message no.: " + messagesCount + " but got: " + currentMsgIdx);
1:2db848f:                             diff = currentMsgIdx - messagesCount;
1:2db848f:                         }
1:2db848f:                         ++messagesCount;
1:2db848f:                         if (messagesCount % messageLogFrequency == 0) {
1:fc00993:                             LOG.info("Received: " + messagesCount + " messages so far");
1:2db848f:                         }
1:74a7a8b:                         // Thread.sleep(70);
1:2db848f:                     }
1:74a7a8b:                 } catch (Throwable ex) {
1:2db848f:                     ex.printStackTrace();
1:2db848f:                 }
1:2db848f:             }
1:2db848f:         };
1:2db848f:         consumingThread.start();
1:2db848f:         consumingThread.join();
1:2db848f: 
1:2db848f:         assertEquals(MESSAGES_COUNT, messagesCount);
1:2db848f: 
1:2db848f:     }
1:2db848f: 
1:2db848f:     public void sendFrame(String data) throws Exception {
1:2db848f:         byte[] bytes = data.getBytes("UTF-8");
1:2db848f:         OutputStream outputStream = stompSocket.getOutputStream();
1:2db848f:         for (int i = 0; i < bytes.length; i++) {
1:2db848f:             outputStream.write(bytes[i]);
1:2db848f:         }
1:2db848f:         outputStream.flush();
1:2db848f:     }
1:2db848f: 
1:2db848f:     public String receiveFrame(long timeOut) throws Exception {
1:74a7a8b:         stompSocket.setSoTimeout((int)timeOut);
1:2db848f:         InputStream is = stompSocket.getInputStream();
1:2db848f:         int c = 0;
1:2db848f:         for (;;) {
1:2db848f:             c = is.read();
1:2db848f:             if (c < 0) {
1:2db848f:                 throw new IOException("socket closed.");
1:74a7a8b:             } else if (c == 0) {
1:2db848f:                 c = is.read();
1:2db848f:                 byte[] ba = inputBuffer.toByteArray();
1:2db848f:                 inputBuffer.reset();
1:2db848f:                 return new String(ba, "UTF-8");
1:74a7a8b:             } else {
1:2db848f:                 inputBuffer.write(c);
1:2db848f:             }
1:2db848f:         }
1:2db848f:     }
1:2db848f: 
1:2db848f:     protected String getDestinationName() {
1:2db848f:         return getClass().getName() + "." + getName();
1:2db848f:     }
1:2db848f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1:     private final int messageLogFrequency = 2500;
1:     private final long messageReceiveTimeout = 10000L;
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:0").setName("Default");
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                 broker.getTransportConnectors().get(0).getPublishableConnectString());
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SlowConsumerTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SlowConsumerTest.class);
1: 
1:     private Socket stompSocket;
1:     private ByteArrayOutputStream inputBuffer;
1:     private int messagesCount;
1: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SlowConsumerTest.class);
/////////////////////////////////////////////////////////////////////////
1:                         LOG.debug("Sending: " + idx);
/////////////////////////////////////////////////////////////////////////
1:                             LOG.warn("Got null message at count: " + messagesCount + ". Continuing...");
1:                         LOG.debug("Received: " + text + " messageCount: " + messagesCount);
1:                             LOG.debug("Message(s) skipped!! Should be message no.: " + messagesCount + " but got: " + currentMsgIdx);
1:                             LOG.info("Received: " + messagesCount + " messages so far");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 } catch (Throwable ex) {
/////////////////////////////////////////////////////////////////////////
1:                         Message msg = consumer.receive(messageReceiveTimeout);
1:                         String text = ((TextMessage)msg).getText();
/////////////////////////////////////////////////////////////////////////
1:                         // Thread.sleep(70);
1:                 } catch (Throwable ex) {
/////////////////////////////////////////////////////////////////////////
1:         stompSocket.setSoTimeout((int)timeOut);
1:             } else if (c == 0) {
1:             } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Robert Davies
-------------------------------------------------------------------------------
commit:aee4378
/////////////////////////////////////////////////////////////////////////
1:         broker.setDeleteAllMessagesOnStartup(true);
author:James Strachan
-------------------------------------------------------------------------------
commit:2db848f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.net.Socket;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class SlowConsumerTest extends TestCase {
0:     private static final Log log = LogFactory.getLog(SlowConsumerTest.class);
0:     private Socket stompSocket;
0:     private ByteArrayOutputStream inputBuffer;
1: 
1:     private static final int MESSAGES_COUNT = 10000;
0:     private int messagesCount;
0:     protected int messageLogFrequency = 2500;
0:     protected long messageReceiveTimeout = 10000L;
1: 
1:     /**
1:      * @param args
1:      * @throws Exception
1:      */
1:     public void testRemoveSubscriber() throws Exception {
1:         final BrokerService broker = new BrokerService();
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1: 
0:         broker.addConnector("tcp://localhost:61616").setName("Default");
1:         broker.start();
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         final Connection connection = factory.createConnection();
1:         connection.start();
1: 
1:         Thread producingThread = new Thread("Producing thread") {
1:             public void run() {
1:                 try {
1:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageProducer producer = session.createProducer(new ActiveMQQueue(getDestinationName()));
1:                     for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:                         Message message = session.createTextMessage("" + idx);
1:                         producer.send(message);
0:                         log.debug("Sending: " + idx);
1:                     }
1:                     producer.close();
1:                     session.close();
1:                 }
0:                 catch (Throwable ex) {
1:                     ex.printStackTrace();
1:                 }
1:             }
1:         };
1:         producingThread.setPriority(Thread.MAX_PRIORITY);
1:         producingThread.start();
1:         Thread.sleep(1000);
1: 
1:         Thread consumingThread = new Thread("Consuming thread") {
1: 
1:             public void run() {
1:                 try {
1:                     Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:                     MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(getDestinationName()));
1:                     int diff = 0;
1:                     while (messagesCount != MESSAGES_COUNT) {
0:                         Message msg = consumer.receive(messageReceiveTimeout );
1:                         if (msg == null) {
0:                             log.warn("Got null message at count: " + messagesCount + ". Continuing...");
1:                             break;
1:                         }
0:                         String text = ((TextMessage) msg).getText();
1:                         int currentMsgIdx = Integer.parseInt(text);
0:                         log.debug("Received: " + text + " messageCount: " + messagesCount);
1:                         msg.acknowledge();
1:                         if ((messagesCount + diff) != currentMsgIdx) {
0:                             log.debug("Message(s) skipped!! Should be message no.: " + messagesCount + " but got: " + currentMsgIdx);
1:                             diff = currentMsgIdx - messagesCount;
1:                         }
1:                         ++messagesCount;
1:                         if (messagesCount % messageLogFrequency == 0) {
0:                             log.info("Received: " + messagesCount + " messages so far");
1:                         }
0:                         //Thread.sleep(70);
1:                     }
1:                 }
0:                 catch (Throwable ex) {
1:                     ex.printStackTrace();
1:                 }
1:             }
1:         };
1:         consumingThread.start();
1:         consumingThread.join();
1: 
1:         assertEquals(MESSAGES_COUNT, messagesCount);
1: 
1:     }
1: 
1:     public void sendFrame(String data) throws Exception {
1:         byte[] bytes = data.getBytes("UTF-8");
1:         OutputStream outputStream = stompSocket.getOutputStream();
1:         for (int i = 0; i < bytes.length; i++) {
1:             outputStream.write(bytes[i]);
1:         }
1:         outputStream.flush();
1:     }
1: 
1:     public String receiveFrame(long timeOut) throws Exception {
0:         stompSocket.setSoTimeout((int) timeOut);
1:         InputStream is = stompSocket.getInputStream();
1:         int c = 0;
1:         for (;;) {
1:             c = is.read();
1:             if (c < 0) {
1:                 throw new IOException("socket closed.");
1:             }
0:             else if (c == 0) {
1:                 c = is.read();
1:                 byte[] ba = inputBuffer.toByteArray();
1:                 inputBuffer.reset();
1:                 return new String(ba, "UTF-8");
1:             }
0:             else {
1:                 inputBuffer.write(c);
1:             }
1:         }
1:     }
1: 
1:     protected String getDestinationName() {
1:         return getClass().getName() + "." + getName();
1:     }
1: }
============================================================================