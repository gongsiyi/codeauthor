1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:26c25eb: package org.apache.activemq.broker.region.group;
1:26c25eb: 
1:26c25eb: import javax.jms.Connection;
1:26c25eb: import javax.jms.Message;
1:26c25eb: import javax.jms.MessageConsumer;
1:26c25eb: import javax.jms.MessageProducer;
1:26c25eb: import javax.jms.Session;
1:26c25eb: import javax.jms.TextMessage;
1:26c25eb: 
1:26c25eb: import org.apache.activemq.CombinationTestSupport;
1:26c25eb: import org.apache.activemq.JmsTestSupport;
1:26c25eb: import org.apache.activemq.command.ActiveMQDestination;
1:26c25eb: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:26c25eb: 
1:26c25eb: public class MessageGroupTest extends JmsTestSupport {
1:26c25eb: 	
1:8bf987b: 	 private static final Logger LOG = LoggerFactory.getLogger(CombinationTestSupport.class);
1:26c25eb: 
1:26c25eb:     public void testGroupedMessagesDeliveredToOnlyOneConsumer() throws Exception {
1:26c25eb: 
1:26c25eb:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:26c25eb: 
1:26c25eb:         // Setup a first connection
1:26c25eb:         connection.start();
1:26c25eb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:26c25eb:         MessageConsumer consumer1 = session.createConsumer(destination);
1:26c25eb:         MessageProducer producer = session.createProducer(destination);
1:26c25eb: 
1:26c25eb:         // Send the messages.
1:26c25eb:         for (int i = 0; i < 4; i++) {     	
1:26c25eb:         	TextMessage message = session.createTextMessage("message " + i);
1:26c25eb:             message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:26c25eb:             message.setIntProperty("JMSXGroupSeq", i + 1);
1:26c25eb:             LOG.info("sending message: " + message);
1:26c25eb:             producer.send(message);
1:26c25eb:         }
1:26c25eb: 
1:26c25eb:         // All the messages should have been sent down connection 1.. just get
1:26c25eb:         // the first 3
1:26c25eb:         for (int i = 0; i < 3; i++) {
1:26c25eb:             TextMessage m1 = (TextMessage)consumer1.receive(500);
1:26c25eb:             assertNotNull("m1 is null for index: " + i, m1);
1:26c25eb:             assertEquals(m1.getIntProperty("JMSXGroupSeq"), i + 1);
1:26c25eb:         }
1:26c25eb:         
1:26c25eb:         // Setup a second connection
1:26c25eb:         Connection connection1 = factory.createConnection(userName, password);
1:26c25eb:         connection1.start();
1:26c25eb:         Session session2 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:26c25eb:         MessageConsumer consumer2 = session2.createConsumer(destination);
1:26c25eb: 
1:26c25eb:         // Close the first consumer.
1:26c25eb:         consumer1.close();
1:26c25eb: 
1:26c25eb:         // The last messages should now go the the second consumer.
1:26c25eb:         for (int i = 0; i < 1; i++) {
1:26c25eb:             TextMessage m1 = (TextMessage)consumer2.receive(500);
1:26c25eb:             assertNotNull("m1 is null for index: " + i, m1);
1:26c25eb:             assertEquals(m1.getIntProperty("JMSXGroupSeq"), 4 + i);
1:26c25eb:         }
1:26c25eb: 
1:26c25eb:         //assert that there are no other messages left for the consumer 2
1:26c25eb:         Message m = consumer2.receive(100);
1:26c25eb:         assertNull("consumer 2 has some messages left", m);
1:26c25eb:     }	
1:26c25eb:     
1:26c25eb:     public void testAddingConsumer() throws Exception {
1:26c25eb:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:26c25eb: 
1:26c25eb:         // Setup a first connection
1:26c25eb:         connection.start();
1:26c25eb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:26c25eb:         
1:26c25eb:         MessageProducer producer = session.createProducer(destination);
1:26c25eb:         //MessageConsumer consumer = session.createConsumer(destination);
1:26c25eb:         
1:26c25eb:     	TextMessage message = session.createTextMessage("message");
1:26c25eb:         message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:26c25eb:         
1:26c25eb:         LOG.info("sending message: " + message);
1:26c25eb:         producer.send(message);
1:26c25eb:         
1:26c25eb:         MessageConsumer consumer = session.createConsumer(destination);
1:26c25eb:         
1:26c25eb:         TextMessage msg = (TextMessage)consumer.receive();
1:26c25eb:         assertNotNull(msg);
1:26c25eb:         boolean first = msg.getBooleanProperty("JMSXGroupFirstForConsumer");
1:26c25eb:         assertTrue(first);
1:26c25eb:     }    
1:26c25eb:     
1:26c25eb:     public void testClosingMessageGroup() throws Exception {
1:26c25eb: 
1:26c25eb:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:26c25eb: 
1:26c25eb:         // Setup a first connection
1:26c25eb:         connection.start();
1:26c25eb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:26c25eb:         MessageConsumer consumer1 = session.createConsumer(destination);
1:26c25eb:         MessageProducer producer = session.createProducer(destination);
1:26c25eb: 
1:26c25eb:         // Send the messages.
1:26c25eb:         for (int i = 0; i < 4; i++) {     	
1:26c25eb:         	TextMessage message = session.createTextMessage("message " + i);
1:26c25eb:             message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:26c25eb:             LOG.info("sending message: " + message);
1:26c25eb:             producer.send(message);
1:26c25eb:         }
1:26c25eb: 
1:26c25eb: 
1:26c25eb: 
1:26c25eb:         // All the messages should have been sent down consumer1.. just get
1:26c25eb:         // the first 3
1:26c25eb:         for (int i = 0; i < 3; i++) {
1:26c25eb:             TextMessage m1 = (TextMessage)consumer1.receive(500);
1:26c25eb:             assertNotNull("m1 is null for index: " + i, m1);
1:26c25eb:         }
1:26c25eb:         
1:26c25eb:         // Setup a second consumer
1:26c25eb:         Connection connection1 = factory.createConnection(userName, password);
1:26c25eb:         connection1.start();
1:26c25eb:         Session session2 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:26c25eb:         MessageConsumer consumer2 = session2.createConsumer(destination);
1:26c25eb:         
1:26c25eb:         //assert that there are no messages for the consumer 2
1:26c25eb:         Message m = consumer2.receive(100);
1:26c25eb:         assertNull("consumer 2 has some messages", m);
1:26c25eb: 
1:26c25eb:         // Close the group
1:26c25eb:     	TextMessage message = session.createTextMessage("message " + 5);
1:26c25eb:         message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:26c25eb:         message.setIntProperty("JMSXGroupSeq", -1);
1:26c25eb:         LOG.info("sending message: " + message);
1:26c25eb:         producer.send(message);
1:26c25eb:         
1:26c25eb:         //Send some more messages
1:26c25eb:         for (int i = 0; i < 4; i++) {     	
1:26c25eb:         	message = session.createTextMessage("message " + i);
1:26c25eb:             message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:26c25eb:             LOG.info("sending message: " + message);
1:26c25eb:             producer.send(message);
1:26c25eb:         }
1:26c25eb:         
1:26c25eb:         // Receive the fourth message
1:26c25eb:         TextMessage m1 = (TextMessage)consumer1.receive(500);
1:26c25eb:         assertNotNull("m1 is null for index: " + 4, m1);
1:26c25eb:         
1:26c25eb:         // Receive the closing message
1:26c25eb:         m1 = (TextMessage)consumer1.receive(500);
1:26c25eb:         assertNotNull("m1 is null for index: " + 5, m1);        
1:26c25eb:         
1:26c25eb:         //assert that there are no messages for the consumer 1
1:26c25eb:         m = consumer1.receive(100);
1:26c25eb:         assertNull("consumer 1 has some messages left", m);
1:26c25eb: 
1:26c25eb:         // The messages should now go to the second consumer.
1:26c25eb:         for (int i = 0; i < 4; i++) {
1:26c25eb:             m1 = (TextMessage)consumer2.receive(500);
1:26c25eb:             assertNotNull("m1 is null for index: " + i, m1);
1:26c25eb:         }
1:26c25eb: 
1:26c25eb:     }
1:26c25eb: 	
1:26c25eb: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	 private static final Logger LOG = LoggerFactory.getLogger(CombinationTestSupport.class);
commit:26c25eb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker.region.group;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class MessageGroupTest extends JmsTestSupport {
1: 	
0: 	 private static final Log LOG = LogFactory.getLog(CombinationTestSupport.class);
1: 
1:     public void testGroupedMessagesDeliveredToOnlyOneConsumer() throws Exception {
1: 
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1: 
1:         // Setup a first connection
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer1 = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // Send the messages.
1:         for (int i = 0; i < 4; i++) {     	
1:         	TextMessage message = session.createTextMessage("message " + i);
1:             message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:             message.setIntProperty("JMSXGroupSeq", i + 1);
1:             LOG.info("sending message: " + message);
1:             producer.send(message);
1:         }
1: 
1:         // All the messages should have been sent down connection 1.. just get
1:         // the first 3
1:         for (int i = 0; i < 3; i++) {
1:             TextMessage m1 = (TextMessage)consumer1.receive(500);
1:             assertNotNull("m1 is null for index: " + i, m1);
1:             assertEquals(m1.getIntProperty("JMSXGroupSeq"), i + 1);
1:         }
1:         
1:         // Setup a second connection
1:         Connection connection1 = factory.createConnection(userName, password);
1:         connection1.start();
1:         Session session2 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer2 = session2.createConsumer(destination);
1: 
1:         // Close the first consumer.
1:         consumer1.close();
1: 
1:         // The last messages should now go the the second consumer.
1:         for (int i = 0; i < 1; i++) {
1:             TextMessage m1 = (TextMessage)consumer2.receive(500);
1:             assertNotNull("m1 is null for index: " + i, m1);
1:             assertEquals(m1.getIntProperty("JMSXGroupSeq"), 4 + i);
1:         }
1: 
1:         //assert that there are no other messages left for the consumer 2
1:         Message m = consumer2.receive(100);
1:         assertNull("consumer 2 has some messages left", m);
1:     }	
1:     
1:     public void testAddingConsumer() throws Exception {
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1: 
1:         // Setup a first connection
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         
1:         MessageProducer producer = session.createProducer(destination);
1:         //MessageConsumer consumer = session.createConsumer(destination);
1:         
1:     	TextMessage message = session.createTextMessage("message");
1:         message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:         
1:         LOG.info("sending message: " + message);
1:         producer.send(message);
1:         
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         
1:         TextMessage msg = (TextMessage)consumer.receive();
1:         assertNotNull(msg);
1:         boolean first = msg.getBooleanProperty("JMSXGroupFirstForConsumer");
1:         assertTrue(first);
1:     }    
1:     
1:     public void testClosingMessageGroup() throws Exception {
1: 
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1: 
1:         // Setup a first connection
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer1 = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // Send the messages.
1:         for (int i = 0; i < 4; i++) {     	
1:         	TextMessage message = session.createTextMessage("message " + i);
1:             message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:             LOG.info("sending message: " + message);
1:             producer.send(message);
1:         }
1: 
1: 
1: 
1:         // All the messages should have been sent down consumer1.. just get
1:         // the first 3
1:         for (int i = 0; i < 3; i++) {
1:             TextMessage m1 = (TextMessage)consumer1.receive(500);
1:             assertNotNull("m1 is null for index: " + i, m1);
1:         }
1:         
1:         // Setup a second consumer
1:         Connection connection1 = factory.createConnection(userName, password);
1:         connection1.start();
1:         Session session2 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer2 = session2.createConsumer(destination);
1:         
1:         //assert that there are no messages for the consumer 2
1:         Message m = consumer2.receive(100);
1:         assertNull("consumer 2 has some messages", m);
1: 
1:         // Close the group
1:     	TextMessage message = session.createTextMessage("message " + 5);
1:         message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:         message.setIntProperty("JMSXGroupSeq", -1);
1:         LOG.info("sending message: " + message);
1:         producer.send(message);
1:         
1:         //Send some more messages
1:         for (int i = 0; i < 4; i++) {     	
1:         	message = session.createTextMessage("message " + i);
1:             message.setStringProperty("JMSXGroupID", "TEST-GROUP");
1:             LOG.info("sending message: " + message);
1:             producer.send(message);
1:         }
1:         
1:         // Receive the fourth message
1:         TextMessage m1 = (TextMessage)consumer1.receive(500);
1:         assertNotNull("m1 is null for index: " + 4, m1);
1:         
1:         // Receive the closing message
1:         m1 = (TextMessage)consumer1.receive(500);
1:         assertNotNull("m1 is null for index: " + 5, m1);        
1:         
1:         //assert that there are no messages for the consumer 1
1:         m = consumer1.receive(100);
1:         assertNull("consumer 1 has some messages left", m);
1: 
1:         // The messages should now go to the second consumer.
1:         for (int i = 0; i < 4; i++) {
1:             m1 = (TextMessage)consumer2.receive(500);
1:             assertNotNull("m1 is null for index: " + i, m1);
1:         }
1: 
1:     }
1: 	
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
============================================================================