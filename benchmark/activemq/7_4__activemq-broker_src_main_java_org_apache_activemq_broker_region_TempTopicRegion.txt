1:d29ca2a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region;
5:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:0c0be94: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.thread.TaskRunnerFactory;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:cd24f80: public class TempTopicRegion extends AbstractTempRegion {
1:d29ca2a: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TempTopicRegion.class);
1:d29ca2a: 
1:6d8e2c5:     public TempTopicRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
1:230a86c:                            DestinationFactory destinationFactory) {
1:230a86c:         super(broker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws JMSException {
1:230a86c:         if (info.isDurable()) {
1:d29ca2a:             throw new JMSException("A durable subscription cannot be created for a temporary topic.");
1:d29ca2a:         }
1:230a86c:         try {
1:16f2d75:             TopicSubscription answer = new TopicSubscription(broker, context, info, usageManager);
1:0c0be94:             // lets configure the subscription depending on the destination
1:230a86c:             ActiveMQDestination destination = info.getDestination();
1:230a86c:             if (destination != null && broker.getDestinationPolicy() != null) {
1:230a86c:                 PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:230a86c:                 if (entry != null) {
1:9dd11cb:                     entry.configure(broker, usageManager, answer);
1:d29ca2a:                 }
1:d29ca2a:             }
1:0c0be94:             answer.init();
1:0c0be94:             return answer;
1:230a86c:         } catch (Exception e) {
1:74a7a8b:             LOG.error("Failed to create TopicSubscription ", e);
1:230a86c:             JMSException jmsEx = new JMSException("Couldn't create TopicSubscription");
1:0c0be94:             jmsEx.setLinkedException(e);
1:0c0be94:             throw jmsEx;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public String toString() {
1:9dd11cb:         return "TempTopicRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size() + ", memory=" + usageManager.getMemoryUsage().getPercentUsage() + "%";
1:d29ca2a:     }
1:230a86c: 
1:bd7d59c:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:230a86c: 
1:230a86c:         // Force a timeout value so that we don't get an error that
1:230a86c:         // there is still an active sub. Temp destination may be removed
1:230a86c:         // while a network sub is still active which is valid.
1:ecf89a6:         if (timeout == 0) {
1:230a86c:             timeout = 1;
1:ecf89a6:         }
1:230a86c: 
1:230a86c:         super.removeDestination(context, destination, timeout);
1:230a86c:     }
1:d29ca2a: 
1:cd24f80: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (timeout == 0) {
1:         }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TempTopicRegion.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.error("Failed to create TopicSubscription ", e);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
0: public class TempTopicRegion extends AbstractRegion {
0:     private static final Log log = LogFactory.getLog(TempTopicRegion.class);
0:     public TempTopicRegion(RegionBroker broker, DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory,
1:                            DestinationFactory destinationFactory) {
1:         super(broker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);
0:         // We should allow the following to be configurable via a Destination
0:         // Policy
1:     protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws JMSException {
1:         if (info.isDurable()) {
1:         try {
0:             TopicSubscription answer = new TopicSubscription(broker, context, info, memoryManager);
1:             ActiveMQDestination destination = info.getDestination();
1:             if (destination != null && broker.getDestinationPolicy() != null) {
1:                 PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:                 if (entry != null) {
0:                     entry.configure(broker, memoryManager, answer);
1:         } catch (Exception e) {
0:             log.error("Failed to create TopicSubscription ", e);
1:             JMSException jmsEx = new JMSException("Couldn't create TopicSubscription");
1:     public String toString() {
0:         return "TempTopicRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size() + ", memory=" + memoryManager.getPercentUsage() + "%";
1: 
1: 
1:         // Force a timeout value so that we don't get an error that
1:         // there is still an active sub. Temp destination may be removed
1:         // while a network sub is still active which is valid.
0:         if (timeout == 0)
1:             timeout = 1;
1: 
1:         super.removeDestination(context, destination, timeout);
1:     }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:             public void addSubscription(ConnectionContext context,Subscription sub) throws Exception {
commit:0f502fa
/////////////////////////////////////////////////////////////////////////
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Throwable {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQTempDestination;
1: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.memory.UsageManager;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: 
1: /**
0:  * 
0:  * @version $Revision: 1.7 $
1:  */
0: public class TempTopicRegion extends AbstractRegion {
1: 
0:     public TempTopicRegion(DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory) {
0:         super(destinationStatistics, memoryManager, taskRunnerFactory, null);
0:         setAutoCreateDestinations(false);
1:     }
1: 
0:     protected Destination createDestination(ActiveMQDestination destination) throws Throwable {
0:         final ActiveMQTempDestination tempDest = (ActiveMQTempDestination) destination;
0:         return new Topic(destination, null, memoryManager, destinationStatistics, taskRunnerFactory) {
1:             
0:             public void addSubscription(ConnectionContext context,Subscription sub) throws Throwable {
0:                 // Only consumers on the same connection can consume from 
0:                 // the temporary destination
0:                 if( !tempDest.getConnectionId().equals( sub.getConsumerInfo().getConsumerId().getConnectionId() ) ) {
0:                     throw new JMSException("Cannot subscribe to remote temporary destination: "+tempDest);
1:                 }
0:                 super.addSubscription(context, sub);
0:             };
1:             
0:         };
1:     }
1: 
0:     protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws JMSException {
0:         if( info.isDurable() ) {
1:             throw new JMSException("A durable subscription cannot be created for a temporary topic.");
0:         } else {
0:             return new TopicSubscription(context, info, this.memoryManager);
1:         }
1:     }
1:         
0:     public String toString() {
0:         return "TempTopicRegion: destinations="+destinations.size()+", subscriptions="+subscriptions.size()+", memory="+memoryManager.getPercentUsage()+"%";
1:     }
1: 
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:1005fc5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQTempTopic;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TempTopicRegion.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
1:             TopicSubscription answer = new TopicSubscription(broker, context, info, usageManager);
commit:044c07d
/////////////////////////////////////////////////////////////////////////
0:            
0:             Destination dest = lookup(context, info.getDestination());
0:             TopicSubscription answer = new TopicSubscription(broker, dest,context, info, usageManager);
commit:cd24f80
/////////////////////////////////////////////////////////////////////////
1: public class TempTopicRegion extends AbstractTempRegion {
/////////////////////////////////////////////////////////////////////////
0: 
0:     
0:     protected Destination doCreateDestination(ConnectionContext context,
0:             ActiveMQDestination destination) throws Exception {
0:         return destinationFactory.createDestination(context, destination, destinationStatistics);
1:     }
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
0:             TopicSubscription answer = new TopicSubscription(broker, context, info, usageManager);
1:                     entry.configure(broker, usageManager, answer);
/////////////////////////////////////////////////////////////////////////
1:         return "TempTopicRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size() + ", memory=" + usageManager.getMemoryUsage().getPercentUsage() + "%";
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:     public TempTopicRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
/////////////////////////////////////////////////////////////////////////
0:         return "TempTopicRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size() + ", memory=" + memoryManager.getMemoryUsage().getPercentUsage() + "%";
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: 
0: import org.apache.activemq.broker.region.cursors.VMPendingMessageCursor;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: public class TempTopicRegion extends AbstractRegion{
0:     private static final Log log=LogFactory.getLog(TempTopicRegion.class);
0: 
0:     public TempTopicRegion(RegionBroker broker,DestinationStatistics destinationStatistics,UsageManager memoryManager,
0:             TaskRunnerFactory taskRunnerFactory,DestinationFactory destinationFactory){
0:         super(broker,destinationStatistics,memoryManager,taskRunnerFactory,destinationFactory);
0:     protected Subscription createSubscription(ConnectionContext context,ConsumerInfo info) throws JMSException{
0:         if(info.isDurable()){
0:         }
0:         try{
0:             TopicSubscription answer=new TopicSubscription(broker,context,info,memoryManager);
1:             // lets configure the subscription depending on the destination
0:             ActiveMQDestination destination=info.getDestination();
0:             if(destination!=null&&broker.getDestinationPolicy()!=null){
0:                 PolicyEntry entry=broker.getDestinationPolicy().getEntryFor(destination);
0:                 if(entry!=null){
0:                     entry.configure(broker,memoryManager,answer);
0:                 }
0:             }
1:             answer.init();
1:             return answer;
0:         }catch(Exception e){
0:             log.error("Failed to create TopicSubscription ",e);
0:             JMSException jmsEx=new JMSException("Couldn't create TopicSubscription");
1:             jmsEx.setLinkedException(e);
1:             throw jmsEx;
0: 
0:     public String toString(){
0:         return "TempTopicRegion: destinations="+destinations.size()+", subscriptions="+subscriptions.size()+", memory="
0:                 +memoryManager.getPercentUsage()+"%";
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public TempTopicRegion(RegionBroker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) {
0:         super(broker,destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);
commit:6cb66e4
/////////////////////////////////////////////////////////////////////////
0:     public TempTopicRegion(RegionBroker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory) {
commit:4098942
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
0:     public TempTopicRegion(Broker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory) {
0:         super(broker,destinationStatistics, memoryManager, taskRunnerFactory, null);
/////////////////////////////////////////////////////////////////////////
0:             return new TopicSubscription(broker,context, info, this.memoryManager);
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:bd7d59c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
0:         // We should allow the following to be configurable via a Destination Policy 
0:         // setAutoCreateDestinations(false);
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
0:     	
0:     	// Force a timeout value so that we don't get an error that 
0:     	// there is still an active sub.  Temp destination may be removed   
0:     	// while a network sub is still active which is valid.
0:     	if( timeout == 0 ) 
0:     		timeout = 1;
0:     	
0:     	super.removeDestination(context, destination, timeout);
0:     }    
============================================================================