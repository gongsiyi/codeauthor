1:326d959: /**
1:326d959:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:326d959:  * contributor license agreements.  See the NOTICE file distributed with
1:326d959:  * this work for additional information regarding copyright ownership.
1:326d959:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:326d959:  * (the "License"); you may not use this file except in compliance with
1:326d959:  * the License.  You may obtain a copy of the License at
1:326d959:  *
1:326d959:  *      http://www.apache.org/licenses/LICENSE-2.0
1:326d959:  *
1:326d959:  * Unless required by applicable law or agreed to in writing, software
1:326d959:  * distributed under the License is distributed on an "AS IS" BASIS,
1:326d959:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:326d959:  * See the License for the specific language governing permissions and
1:326d959:  * limitations under the License.
1:326d959:  */
1:326d959: package org.apache.activemq.transport.nio;
1:326d959: 
1:326d959: import junit.framework.TestCase;
1:326d959: import org.apache.activemq.ActiveMQConnectionFactory;
1:326d959: import org.apache.activemq.broker.BrokerService;
1:326d959: import org.apache.activemq.broker.TransportConnector;
1:326d959: import org.apache.activemq.util.ConsumerThread;
1:326d959: import org.apache.activemq.util.ProducerThread;
1:326d959: import org.apache.activemq.util.Wait;
1:52e4527: import org.junit.After;
1:52e4527: import org.junit.Before;
1:52e4527: import org.junit.Ignore;
1:52e4527: import org.junit.Test;
1:52e4527: import org.slf4j.Logger;
1:52e4527: import org.slf4j.LoggerFactory;
1:326d959: 
1:326d959: import javax.jms.Connection;
1:326d959: import javax.jms.Queue;
1:326d959: import javax.jms.Session;
1:52e4527: import java.util.Random;
1:52e4527: import java.util.concurrent.CountDownLatch;
1:52e4527: import java.util.concurrent.TimeUnit;
1:52e4527: import java.util.concurrent.atomic.AtomicInteger;
1:52e4527: import java.util.concurrent.atomic.AtomicReference;
1:326d959: 
1:52e4527: import static org.junit.Assert.assertEquals;
1:52e4527: import static org.junit.Assert.assertNull;
1:52e4527: 
1:52e4527: public class NIOSSLLoadTest {
1:52e4527: 
1:52e4527:     private static final Logger LOG = LoggerFactory.getLogger(NIOSSLLoadTest.class);
1:326d959: 
1:326d959:     BrokerService broker;
1:326d959:     Connection connection;
1:326d959:     Session session;
1:326d959: 
1:326d959:     public static final String KEYSTORE_TYPE = "jks";
1:326d959:     public static final String PASSWORD = "password";
1:326d959:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:326d959:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:326d959: 
1:326d959:     public static final int PRODUCER_COUNT = 10;
1:326d959:     public static final int CONSUMER_COUNT = 10;
1:326d959:     public static final int MESSAGE_COUNT = 1000;
1:326d959: 
1:326d959:     final ConsumerThread[] consumers = new ConsumerThread[CONSUMER_COUNT];
1:52e4527:     TransportConnector connector;
1:326d959: 
1:52e4527:     @Before
1:52e4527:     public void setUp() throws Exception {
1:326d959:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:326d959:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:326d959:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:326d959:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:326d959:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:326d959:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:326d959: 
1:326d959:         broker = new BrokerService();
1:326d959:         broker.setPersistent(false);
1:326d959:         broker.setUseJmx(false);
1:1e31df9:         connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=TLS_RSA_WITH_AES_256_CBC_SHA256");
1:326d959:         broker.start();
1:326d959:         broker.waitUntilStarted();
1:326d959: 
1:a26f03f:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("nio+ssl://localhost:" + connector.getConnectUri().getPort());
1:326d959:         connection = factory.createConnection();
1:326d959:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:326d959:         connection.start();
1:326d959:     }
1:326d959: 
1:52e4527:     @After
1:52e4527:     public void tearDown() throws Exception {
1:326d959:         if (connection != null) {
1:326d959:             connection.close();
1:326d959:         }
1:326d959: 
1:326d959:         if (broker != null) {
1:326d959:             broker.stop();
1:326d959:             broker.waitUntilStopped();
1:326d959:         }
1:326d959:     }
1:326d959: 
1:52e4527:     @Test
1:326d959:     public void testLoad() throws Exception {
1:326d959:         Queue dest = session.createQueue("TEST");
1:326d959:         for (int i = 0; i < PRODUCER_COUNT; i++) {
1:326d959:             ProducerThread producer = new ProducerThread(session, dest);
1:326d959:             producer.setMessageCount(MESSAGE_COUNT);
1:326d959:             producer.start();
1:326d959:         }
1:326d959: 
1:326d959:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:326d959:             ConsumerThread consumer = new ConsumerThread(session, dest);
1:326d959:             consumer.setMessageCount(MESSAGE_COUNT);
1:326d959:             consumer.start();
1:326d959:             consumers[i] = consumer;
1:326d959:         }
1:326d959: 
1:326d959:         Wait.waitFor(new Wait.Condition() {
1:69fad2a:             @Override
1:326d959:             public boolean isSatisified() throws Exception {
1:326d959:                 return getReceived() == PRODUCER_COUNT * MESSAGE_COUNT;
1:326d959:             }
1:326d959:         }, 60000);
1:326d959: 
1:326d959:         assertEquals(PRODUCER_COUNT * MESSAGE_COUNT, getReceived());
1:326d959: 
1:326d959:     }
1:326d959: 
1:52e4527:     @Test(timeout=360000)
1:52e4527:     @Ignore
1:52e4527:     public void testConnectionHandshakeLoad() throws Exception {
1:52e4527:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("nio+ssl://localhost:" + connector.getConnectUri().getPort());
1:52e4527:         int threadNumber = 500;
1:52e4527:         final CountDownLatch latch = new CountDownLatch(threadNumber);
1:52e4527:         final AtomicInteger errors = new AtomicInteger(0);
1:52e4527:         final Random rand = new Random();
1:52e4527:         for (int i = 0; i < threadNumber; i++) {
1:52e4527:             Thread thread = new Thread("thread " + i) {
1:52e4527:                 @Override
1:52e4527:                 public void run() {
1:52e4527:                     for (int i = 0; i < 100; i++) {
1:52e4527:                         Connection conn = null;
1:52e4527:                         try {
1:52e4527:                             conn = factory.createConnection();
1:52e4527:                             conn.start();
1:52e4527:                             Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:52e4527:                             int sleepTime = rand.nextInt((3000 - 1000) + 1) + 1000;
1:52e4527:                             LOG.info(getName() + " sleeping " + sleepTime);
1:52e4527:                             Thread.sleep(sleepTime);
1:52e4527:                         } catch (Exception e) {
1:52e4527:                             e.printStackTrace();
1:52e4527:                             errors.incrementAndGet();
1:52e4527:                         }  finally {
1:52e4527:                             try {
1:52e4527:                                 conn.close();
1:52e4527:                             } catch (Exception e) {}
1:52e4527:                             LOG.info(getName() + " iteration " + i);
1:52e4527:                         }
1:52e4527:                     }
1:52e4527: 
1:52e4527:                     LOG.info(getName() + " finished");
1:52e4527:                     latch.countDown();
1:52e4527:                 }
1:52e4527:             };
1:52e4527:             thread.start();
1:52e4527:         }
1:52e4527: 
1:52e4527:         latch.await(5, TimeUnit.MINUTES);
1:52e4527: 
1:52e4527:         LOG.info("errors " + errors.get());
1:52e4527: 
1:52e4527:     }
1:52e4527: 
1:326d959:     protected int getReceived() {
1:326d959:         int received = 0;
1:326d959:         for (ConsumerThread consumer : consumers) {
1:326d959:             received += consumer.getReceived();
1:326d959:         }
1:326d959:         return received;
1:326d959:     }
1:326d959: 
1:326d959: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
1:         connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=TLS_RSA_WITH_AES_256_CBC_SHA256");
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
0:         connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true&transport.verifyHostName=false&transport.enabledCipherSuites=TLS_RSA_WITH_AES_256_CBC_SHA256");
/////////////////////////////////////////////////////////////////////////
1:             @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:52e4527
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import java.util.Random;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import java.util.concurrent.atomic.AtomicReference;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: 
1: public class NIOSSLLoadTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(NIOSSLLoadTest.class);
/////////////////////////////////////////////////////////////////////////
1:     TransportConnector connector;
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA");
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=360000)
1:     @Ignore
1:     public void testConnectionHandshakeLoad() throws Exception {
1:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("nio+ssl://localhost:" + connector.getConnectUri().getPort());
1:         int threadNumber = 500;
1:         final CountDownLatch latch = new CountDownLatch(threadNumber);
1:         final AtomicInteger errors = new AtomicInteger(0);
1:         final Random rand = new Random();
1:         for (int i = 0; i < threadNumber; i++) {
1:             Thread thread = new Thread("thread " + i) {
1:                 @Override
1:                 public void run() {
1:                     for (int i = 0; i < 100; i++) {
1:                         Connection conn = null;
1:                         try {
1:                             conn = factory.createConnection();
1:                             conn.start();
1:                             Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                             int sleepTime = rand.nextInt((3000 - 1000) + 1) + 1000;
1:                             LOG.info(getName() + " sleeping " + sleepTime);
1:                             Thread.sleep(sleepTime);
1:                         } catch (Exception e) {
1:                             e.printStackTrace();
1:                             errors.incrementAndGet();
1:                         }  finally {
1:                             try {
1:                                 conn.close();
1:                             } catch (Exception e) {}
1:                             LOG.info(getName() + " iteration " + i);
1:                         }
1:                     }
1: 
1:                     LOG.info(getName() + " finished");
1:                     latch.countDown();
1:                 }
1:             };
1:             thread.start();
1:         }
1: 
1:         latch.await(5, TimeUnit.MINUTES);
1: 
1:         LOG.info("errors " + errors.get());
1: 
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a26f03f
/////////////////////////////////////////////////////////////////////////
0:         TransportConnector connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA");
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("nio+ssl://localhost:" + connector.getConnectUri().getPort());
commit:326d959
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.util.ConsumerThread;
1: import org.apache.activemq.util.ProducerThread;
1: import org.apache.activemq.util.Wait;
0: import org.omg.CORBA.PUBLIC_MEMBER;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
0: public class NIOSSLLoadTest extends TestCase {
1: 
1:     BrokerService broker;
1:     Connection connection;
1:     Session session;
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     public static final int PRODUCER_COUNT = 10;
1:     public static final int CONSUMER_COUNT = 10;
1:     public static final int MESSAGE_COUNT = 1000;
1: 
1:     final ConsumerThread[] consumers = new ConsumerThread[CONSUMER_COUNT];
1: 
0:     @Override
0:     protected void setUp() throws Exception {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1: 
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
0:         TransportConnector connector = broker.addConnector("nio+ssl://localhost:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connector.getConnectUri());
1:         connection = factory.createConnection();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1:     }
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     public void testLoad() throws Exception {
1:         Queue dest = session.createQueue("TEST");
1:         for (int i = 0; i < PRODUCER_COUNT; i++) {
1:             ProducerThread producer = new ProducerThread(session, dest);
1:             producer.setMessageCount(MESSAGE_COUNT);
1:             producer.start();
1:         }
1: 
1:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:             ConsumerThread consumer = new ConsumerThread(session, dest);
1:             consumer.setMessageCount(MESSAGE_COUNT);
1:             consumer.start();
1:             consumers[i] = consumer;
1:         }
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return getReceived() == PRODUCER_COUNT * MESSAGE_COUNT;
1:             }
1:         }, 60000);
1: 
1:         assertEquals(PRODUCER_COUNT * MESSAGE_COUNT, getReceived());
1: 
1:     }
1: 
1:     protected int getReceived() {
1:         int received = 0;
1:         for (ConsumerThread consumer : consumers) {
1:             received += consumer.getReceived();
1:         }
1:         return received;
1:     }
1: 
1: }
============================================================================