1:41ee3ec: /**
1:41ee3ec:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41ee3ec:  * contributor license agreements.  See the NOTICE file distributed with
1:41ee3ec:  * this work for additional information regarding copyright ownership.
1:41ee3ec:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41ee3ec:  * (the "License"); you may not use this file except in compliance with
1:41ee3ec:  * the License.  You may obtain a copy of the License at
1:41ee3ec:  *
1:41ee3ec:  *      http://www.apache.org/licenses/LICENSE-2.0
1:41ee3ec:  *
1:41ee3ec:  * Unless required by applicable law or agreed to in writing, software
1:41ee3ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41ee3ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41ee3ec:  * See the License for the specific language governing permissions and
1:41ee3ec:  * limitations under the License.
1:41ee3ec:  */
1:41ee3ec: package org.apache.activemq.bugs;
1:41ee3ec: 
1:41ee3ec: import javax.jms.DeliveryMode;
1:41ee3ec: import javax.jms.Destination;
1:41ee3ec: import javax.jms.MessageConsumer;
1:41ee3ec: import javax.jms.MessageProducer;
1:41ee3ec: import javax.jms.ObjectMessage;
1:41ee3ec: import javax.jms.Session;
1:41ee3ec: 
1:41ee3ec: import org.apache.activemq.ActiveMQConnection;
1:41ee3ec: import org.apache.activemq.ActiveMQConnectionFactory;
1:41ee3ec: import org.apache.activemq.broker.BrokerService;
1:41ee3ec: import org.apache.activemq.command.ActiveMQObjectMessage;
1:41ee3ec: import org.junit.After;
1:41ee3ec: import org.junit.Before;
1:41ee3ec: import org.junit.Rule;
1:41ee3ec: import org.junit.Test;
1:41ee3ec: import org.junit.rules.TestName;
1:41ee3ec: import org.slf4j.Logger;
1:41ee3ec: import org.slf4j.LoggerFactory;
1:41ee3ec: 
1:41ee3ec: public class AMQ5921Test {
1:41ee3ec: 
1:41ee3ec:     private static Logger LOG = LoggerFactory.getLogger(AMQ5921Test.class);
1:41ee3ec: 
1:41ee3ec:     private ActiveMQConnection connection;
1:41ee3ec:     private BrokerService broker;
1:41ee3ec:     private String connectionUri;
1:41ee3ec: 
1:41ee3ec:     @Rule
1:41ee3ec:     public TestName name = new TestName();
1:41ee3ec: 
1:41ee3ec:     @Test
1:41ee3ec:     public void testVoidSupport() throws Exception {
1:41ee3ec:         sendMessage();
1:41ee3ec: 
1:41ee3ec:         connection.start();
1:41ee3ec: 
1:41ee3ec:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:41ee3ec:         Destination destination = session.createQueue(name.getMethodName());
1:41ee3ec: 
1:41ee3ec:         MessageConsumer consumer = session.createConsumer(destination);
1:41ee3ec:         ActiveMQObjectMessage msg = (ActiveMQObjectMessage) consumer.receive();
1:41ee3ec:         AMQ5921MessagePayload payload = (AMQ5921MessagePayload) msg.getObject();
1:41ee3ec:         LOG.info("Received: {}", payload.getField1());
1:41ee3ec: 
1:41ee3ec:         session.close();
1:41ee3ec:     }
1:41ee3ec: 
1:41ee3ec:     @Before
1:41ee3ec:     public void setUp() throws Exception {
1:41ee3ec:         broker = new BrokerService();
1:41ee3ec:         broker.setUseJmx(false);
1:41ee3ec:         broker.setPersistent(false);
1:41ee3ec:         broker.addConnector("tcp://localhost:0");
1:41ee3ec:         broker.start();
1:41ee3ec:         broker.waitUntilStarted();
1:41ee3ec: 
1:41ee3ec:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:41ee3ec: 
1:41ee3ec:         connection = createConnection();
1:41ee3ec:     }
1:41ee3ec: 
1:41ee3ec:     @After
1:41ee3ec:     public void tearDown() throws Exception {
1:41ee3ec:         if (connection != null) {
1:41ee3ec:             try {
1:41ee3ec:                 connection.close();
1:41ee3ec:             } catch (Exception e) {}
1:41ee3ec:         }
1:41ee3ec: 
1:41ee3ec:         if (broker != null) {
1:41ee3ec:             broker.stop();
1:41ee3ec:             broker.waitUntilStopped();
1:41ee3ec:         }
1:41ee3ec:     }
1:41ee3ec: 
1:41ee3ec:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:41ee3ec:         return new ActiveMQConnectionFactory(connectionUri);
1:41ee3ec:     }
1:41ee3ec: 
1:41ee3ec:     protected ActiveMQConnection createConnection() throws Exception {
1:41ee3ec:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:41ee3ec:     }
1:41ee3ec: 
1:41ee3ec:     private void sendMessage() throws Exception {
1:41ee3ec:         AMQ5921MessagePayload msgPayload = new AMQ5921MessagePayload();
1:41ee3ec:         msgPayload.setField1(void.class);  // <-- does not work
1:41ee3ec: 
1:41ee3ec:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:41ee3ec:         Destination destination = session.createQueue(name.getMethodName());
1:41ee3ec:         MessageProducer producer = session.createProducer(destination);
1:41ee3ec:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:41ee3ec: 
1:41ee3ec:         ObjectMessage message = session.createObjectMessage();
1:41ee3ec:         message.setObject(msgPayload);
1:41ee3ec: 
1:41ee3ec:         producer.send(message);
1:41ee3ec:         session.close();
1:41ee3ec:     }
1:41ee3ec: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:41ee3ec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ5921Test {
1: 
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ5921Test.class);
1: 
1:     private ActiveMQConnection connection;
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     @Rule
1:     public TestName name = new TestName();
1: 
1:     @Test
1:     public void testVoidSupport() throws Exception {
1:         sendMessage();
1: 
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.getMethodName());
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         ActiveMQObjectMessage msg = (ActiveMQObjectMessage) consumer.receive();
1:         AMQ5921MessagePayload payload = (AMQ5921MessagePayload) msg.getObject();
1:         LOG.info("Received: {}", payload.getField1());
1: 
1:         session.close();
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setPersistent(false);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:         connection = createConnection();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Exception e) {}
1:         }
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     protected ActiveMQConnection createConnection() throws Exception {
1:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:     }
1: 
1:     private void sendMessage() throws Exception {
1:         AMQ5921MessagePayload msgPayload = new AMQ5921MessagePayload();
1:         msgPayload.setField1(void.class);  // <-- does not work
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.getMethodName());
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         ObjectMessage message = session.createObjectMessage();
1:         message.setObject(msgPayload);
1: 
1:         producer.send(message);
1:         session.close();
1:     }
1: }
============================================================================