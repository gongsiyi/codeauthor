1:d53b8f8: /**
1:d53b8f8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d53b8f8:  * contributor license agreements.  See the NOTICE file distributed with
1:d53b8f8:  * this work for additional information regarding copyright ownership.
1:d53b8f8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d53b8f8:  * (the "License"); you may not use this file except in compliance with
1:d53b8f8:  * the License.  You may obtain a copy of the License at
1:d53b8f8:  *
1:d53b8f8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d53b8f8:  *
1:d53b8f8:  * Unless required by applicable law or agreed to in writing, software
1:d53b8f8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d53b8f8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d53b8f8:  * See the License for the specific language governing permissions and
1:d53b8f8:  * limitations under the License.
1:d53b8f8:  */
1:d53b8f8: package org.apache.activemq.store.kahadb.disk.journal;
2:d53b8f8: 
1:d53b8f8: import org.apache.activemq.util.ByteSequence;
1:d53b8f8: import org.apache.activemq.util.RecoverableRandomAccessFile;
1:d53b8f8: import org.junit.Rule;
1:d53b8f8: import org.junit.Test;
1:d53b8f8: import org.junit.rules.TemporaryFolder;
1:21ae1ef: import org.slf4j.Logger;
1:21ae1ef: import org.slf4j.LoggerFactory;
1:d53b8f8: 
1:d53b8f8: import java.io.File;
1:d53b8f8: import java.io.IOException;
1:d53b8f8: import java.util.ArrayList;
1:d53b8f8: import java.util.Collections;
1:21ae1ef: import java.util.HashSet;
1:d53b8f8: import java.util.List;
1:21ae1ef: import java.util.concurrent.ConcurrentLinkedQueue;
1:21ae1ef: import java.util.concurrent.CountDownLatch;
1:21ae1ef: import java.util.concurrent.TimeUnit;
1:d53b8f8: 
1:d53b8f8: import static org.junit.Assert.assertEquals;
1:21ae1ef: import static org.junit.Assert.assertTrue;
1:d53b8f8: import static org.junit.Assert.fail;
1:d53b8f8: 
1:d53b8f8: public class DataFileAppenderNoSpaceNoBatchTest {
1:21ae1ef: 
1:21ae1ef:     private static final Logger LOG = LoggerFactory.getLogger(DataFileAppenderNoSpaceNoBatchTest.class);
1:21ae1ef: 
1:d53b8f8:     @Rule
1:d53b8f8:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:d53b8f8: 
1:d53b8f8:     private DataFileAppender underTest;
1:d53b8f8: 
1:d53b8f8:     @Test
1:d53b8f8:     public void testNoSpaceNextWriteSameBatch() throws Exception {
1:d53b8f8:         final List<Long> seekPositions = Collections.synchronizedList(new ArrayList<Long>());
1:d53b8f8: 
1:d53b8f8:         final DataFile currentDataFile = new DataFile(dataFileDir.newFile(), 0) {
1:d53b8f8:             public RecoverableRandomAccessFile appendRandomAccessFile() throws IOException {
1:d53b8f8: 
1:d53b8f8:                 return new RecoverableRandomAccessFile(dataFileDir.newFile(), "rw") {
1:d53b8f8: 
1:d53b8f8:                     public void seek(long pos) throws IOException {
1:d53b8f8:                         seekPositions.add(pos);
1:d53b8f8:                     }
1:c5a8b2c: 
1:d53b8f8:                     public void write(byte[] bytes, int offset, int len) throws IOException {
1:d53b8f8:                         throw new IOException("No space on device");
1:c5a8b2c:                     }
1:21ae1ef:                 };
1:d53b8f8:             };
1:d53b8f8:         };
1:c5a8b2c: 
1:d53b8f8:         underTest = new DataFileAppender(new Journal() {
1:d53b8f8:             @Override
1:d53b8f8:             public DataFile getCurrentDataFile(int capacity) throws IOException {
1:d53b8f8:                 return currentDataFile;
1:d53b8f8:             };
1:d53b8f8:         });
1:d53b8f8: 
1:d53b8f8:         final ByteSequence byteSequence = new ByteSequence(new byte[4*1024]);
1:d53b8f8:         for (int i=0; i<2; i++) {
1:d53b8f8:             try {
1:d53b8f8:                 underTest.storeItem(byteSequence, (byte) 1, true);
1:d53b8f8:                 fail("expect no space");
1:d53b8f8:             } catch (IOException expected) {
1:c5a8b2c:                 underTest.shutdown = false;
1:c5a8b2c:             }
1:d53b8f8:         }
1:d53b8f8: 
1:d53b8f8:         assertEquals("got 2 seeks: " + seekPositions, 2, seekPositions.size());
1:d53b8f8:         assertEquals("offset is reused", seekPositions.get(0), seekPositions.get(1));
1:21ae1ef: 
1:d53b8f8:     }
1:21ae1ef: 
1:c5a8b2c:     @Test
1:c5a8b2c:     public void testSingleNoSpaceNextWriteSameBatch() throws Exception {
1:c5a8b2c:         final List<Long> seekPositions = Collections.synchronizedList(new ArrayList<Long>());
1:c5a8b2c: 
1:c5a8b2c:         final DataFile currentDataFile = new DataFile(dataFileDir.newFile(), 0) {
1:c5a8b2c:             public RecoverableRandomAccessFile appendRandomAccessFile() throws IOException {
1:c5a8b2c: 
1:c5a8b2c:                 return new RecoverableRandomAccessFile(dataFileDir.newFile(), "rw") {
1:c5a8b2c: 
1:c5a8b2c:                     public void seek(long pos) throws IOException {
1:c5a8b2c:                         seekPositions.add(pos);
1:c5a8b2c:                     }
1:c5a8b2c: 
1:c5a8b2c:                     public void write(byte[] bytes, int offset, int len) throws IOException {
1:c5a8b2c:                         throw new IOException("No space on device");
1:c5a8b2c:                     }
1:c5a8b2c:                 };
1:c5a8b2c:             };
1:c5a8b2c:         };
1:c5a8b2c: 
1:c5a8b2c:         underTest = new DataFileAppender(new Journal() {
1:c5a8b2c:             @Override
1:c5a8b2c:             public DataFile getCurrentDataFile(int capacity) throws IOException {
1:c5a8b2c:                 return currentDataFile;
1:c5a8b2c:             };
1:c5a8b2c:         });
1:21ae1ef: 
1:c5a8b2c:         final ByteSequence byteSequence = new ByteSequence(new byte[4*1024]);
1:c5a8b2c:         for (int i=0; i<2; i++) {
1:c5a8b2c:             try {
1:c5a8b2c:                 underTest.storeItem(byteSequence, (byte) 1, true);
1:c5a8b2c:                 fail("expect no space");
1:c5a8b2c:             } catch (IOException expected) {
1:d53b8f8:             }
1:d53b8f8:         }
1:d53b8f8: 
1:c5a8b2c:         assertEquals("got 1 seeks: " + seekPositions, 1, seekPositions.size());
1:c5a8b2c:     }
1:c5a8b2c: 
1:21ae1ef:     @Test(timeout = 10000)
1:21ae1ef:     public void testNoSpaceNextWriteSameBatchAsync() throws Exception {
1:21ae1ef:         final List<Long> seekPositions = Collections.synchronizedList(new ArrayList<Long>());
1:21ae1ef: 
1:21ae1ef:         final DataFile currentDataFile = new DataFile(dataFileDir.newFile(), 0) {
1:21ae1ef:             public RecoverableRandomAccessFile appendRandomAccessFile() throws IOException {
1:21ae1ef: 
1:21ae1ef:                 return new RecoverableRandomAccessFile(dataFileDir.newFile(), "rw") {
1:21ae1ef: 
1:21ae1ef:                     public void seek(long pos) throws IOException {
1:21ae1ef:                         seekPositions.add(pos);
1:21ae1ef:                     }
1:21ae1ef: 
1:21ae1ef:                     public void write(byte[] bytes, int offset, int len) throws IOException {
1:21ae1ef:                         if (seekPositions.size() == 2) {
1:21ae1ef:                             throw new IOException("No space on device: " + seekPositions.size());
1:21ae1ef:                         }
1:21ae1ef:                     }
1:21ae1ef:                 };
1:21ae1ef:             };
1:21ae1ef:         };
1:21ae1ef: 
1:21ae1ef:         underTest = new DataFileAppender(new Journal() {
1:21ae1ef:             @Override
1:21ae1ef:             public DataFile getCurrentDataFile(int capacity) throws IOException {
1:21ae1ef:                 return currentDataFile;
1:d53b8f8:             };
1:d53b8f8: 
1:21ae1ef:             @Override
1:21ae1ef:             public int getWriteBatchSize() {
1:21ae1ef:                 // force multiple async batches
1:21ae1ef:                 return 4*1024;
1:21ae1ef:             }
1:21ae1ef:         });
1:21ae1ef: 
1:21ae1ef:         final ByteSequence byteSequence = new ByteSequence(new byte[1024]);
1:21ae1ef: 
1:21ae1ef:         ConcurrentLinkedQueue<Location> locations = new ConcurrentLinkedQueue<Location>();
1:21ae1ef:         HashSet<CountDownLatch> latches = new HashSet<CountDownLatch>();
1:21ae1ef:         for (int i = 0; i <= 20; i++) {
1:c5a8b2c:             try {
1:c5a8b2c:                 Location location = underTest.storeItem(byteSequence, (byte) 1, false);
1:c5a8b2c:                 locations.add(location);
1:c5a8b2c:                 latches.add(location.getLatch());
1:c5a8b2c:             } catch (IOException expected) {
1:c5a8b2c:                 underTest.shutdown = false;
1:c5a8b2c:             }
1:21ae1ef:         }
1:21ae1ef: 
1:21ae1ef:         for (CountDownLatch latch: latches) {
1:21ae1ef:             assertTrue("write complete", latch.await(5, TimeUnit.SECONDS));
1:21ae1ef:         }
1:21ae1ef: 
1:8c3ef6c:         boolean someExceptions = false;
1:8c3ef6c:         for (Location location: locations) {
1:ec6fa19:             someExceptions |= (location.getException().get() != null);
1:8c3ef6c:         }
1:8c3ef6c:         assertTrue(someExceptions);
1:8c3ef6c: 
1:21ae1ef:         LOG.info("Latches count: " + latches.size());
1:21ae1ef:         LOG.info("Seeks: " + seekPositions);
1:21ae1ef: 
1:21ae1ef:         assertTrue("got more than on latch: " + latches.size(), latches.size() > 1);
1:21ae1ef:         assertTrue("got seeks: " + seekPositions, seekPositions.size() > 2);
1:21ae1ef:         assertEquals("no duplicates: " + seekPositions, seekPositions.size(), new HashSet<Long>(seekPositions).size());
1:21ae1ef:     }
1:d53b8f8: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ec6fa19
/////////////////////////////////////////////////////////////////////////
1:             someExceptions |= (location.getException().get() != null);
commit:8c3ef6c
/////////////////////////////////////////////////////////////////////////
1:         boolean someExceptions = false;
1:         for (Location location: locations) {
0:             someExceptions |= (location.getBatch().exception != null);
1:         }
1:         assertTrue(someExceptions);
1: 
commit:c5a8b2c
/////////////////////////////////////////////////////////////////////////
1:                 underTest.shutdown = false;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testSingleNoSpaceNextWriteSameBatch() throws Exception {
1:         final List<Long> seekPositions = Collections.synchronizedList(new ArrayList<Long>());
1: 
1:         final DataFile currentDataFile = new DataFile(dataFileDir.newFile(), 0) {
1:             public RecoverableRandomAccessFile appendRandomAccessFile() throws IOException {
1: 
1:                 return new RecoverableRandomAccessFile(dataFileDir.newFile(), "rw") {
1: 
1:                     public void seek(long pos) throws IOException {
1:                         seekPositions.add(pos);
1:                     }
1: 
1:                     public void write(byte[] bytes, int offset, int len) throws IOException {
1:                         throw new IOException("No space on device");
1:                     }
1:                 };
1:             };
1:         };
1: 
1:         underTest = new DataFileAppender(new Journal() {
1:             @Override
1:             public DataFile getCurrentDataFile(int capacity) throws IOException {
1:                 return currentDataFile;
1:             };
1:         });
1: 
1:         final ByteSequence byteSequence = new ByteSequence(new byte[4*1024]);
1:         for (int i=0; i<2; i++) {
1:             try {
1:                 underTest.storeItem(byteSequence, (byte) 1, true);
1:                 fail("expect no space");
1:             } catch (IOException expected) {
1:             }
1:         }
1: 
1:         assertEquals("got 1 seeks: " + seekPositions, 1, seekPositions.size());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 Location location = underTest.storeItem(byteSequence, (byte) 1, false);
1:                 locations.add(location);
1:                 latches.add(location.getLatch());
1:             } catch (IOException expected) {
1:                 underTest.shutdown = false;
1:             }
commit:21ae1ef
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import java.util.HashSet;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import static org.junit.Assert.assertTrue;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DataFileAppenderNoSpaceNoBatchTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     
1:     @Test(timeout = 10000)
1:     public void testNoSpaceNextWriteSameBatchAsync() throws Exception {
1:         final List<Long> seekPositions = Collections.synchronizedList(new ArrayList<Long>());
1: 
1:         final DataFile currentDataFile = new DataFile(dataFileDir.newFile(), 0) {
1:             public RecoverableRandomAccessFile appendRandomAccessFile() throws IOException {
1: 
1:                 return new RecoverableRandomAccessFile(dataFileDir.newFile(), "rw") {
1: 
1:                     public void seek(long pos) throws IOException {
1:                         seekPositions.add(pos);
1:                     }
1: 
1:                     public void write(byte[] bytes, int offset, int len) throws IOException {
1:                         if (seekPositions.size() == 2) {
1:                             throw new IOException("No space on device: " + seekPositions.size());
1:                         }
1:                     }
1:                 };
1:             };
1:         };
1: 
1:         underTest = new DataFileAppender(new Journal() {
1:             @Override
1:             public DataFile getCurrentDataFile(int capacity) throws IOException {
1:                 return currentDataFile;
1:             };
1: 
1:             @Override
1:             public int getWriteBatchSize() {
1:                 // force multiple async batches
1:                 return 4*1024;
1:             }
1:         });
1: 
1:         final ByteSequence byteSequence = new ByteSequence(new byte[1024]);
1: 
1:         ConcurrentLinkedQueue<Location> locations = new ConcurrentLinkedQueue<Location>();
1:         HashSet<CountDownLatch> latches = new HashSet<CountDownLatch>();
1:         for (int i = 0; i <= 20; i++) {
0:             Location location = underTest.storeItem(byteSequence, (byte) 1, false);
0:             locations.add(location);
0:             latches.add(location.getLatch());
1:         }
1: 
1:         for (CountDownLatch latch: latches) {
1:             assertTrue("write complete", latch.await(5, TimeUnit.SECONDS));
1:         }
1: 
1:         LOG.info("Latches count: " + latches.size());
1:         LOG.info("Seeks: " + seekPositions);
1: 
1:         assertTrue("got more than on latch: " + latches.size(), latches.size() > 1);
1:         assertTrue("got seeks: " + seekPositions, seekPositions.size() > 2);
1:         assertEquals("no duplicates: " + seekPositions, seekPositions.size(), new HashSet<Long>(seekPositions).size());
1:     }
commit:d53b8f8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.disk.journal;
1: 
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.RecoverableRandomAccessFile;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: public class DataFileAppenderNoSpaceNoBatchTest {
1:     @Rule
1:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1: 
1:     private DataFileAppender underTest;
1: 
1:     @Test
1:     public void testNoSpaceNextWriteSameBatch() throws Exception {
1:         final List<Long> seekPositions = Collections.synchronizedList(new ArrayList<Long>());
1: 
1:         final DataFile currentDataFile = new DataFile(dataFileDir.newFile(), 0) {
1:             public RecoverableRandomAccessFile appendRandomAccessFile() throws IOException {
1: 
1:                 return new RecoverableRandomAccessFile(dataFileDir.newFile(), "rw") {
1: 
1:                     public void seek(long pos) throws IOException {
1:                         seekPositions.add(pos);
1:                     }
1: 
1:                     public void write(byte[] bytes, int offset, int len) throws IOException {
1:                         throw new IOException("No space on device");
1:                     }
1:                 };
1:             };
1:         };
1: 
1:         underTest = new DataFileAppender(new Journal() {
1:             @Override
1:             public DataFile getCurrentDataFile(int capacity) throws IOException {
1:                 return currentDataFile;
1:             };
1:         });
1: 
1:         final ByteSequence byteSequence = new ByteSequence(new byte[4*1024]);
1:         for (int i=0; i<2; i++) {
1:             try {
1:                 underTest.storeItem(byteSequence, (byte) 1, true);
1:                 fail("expect no space");
1:             } catch (IOException expected) {
1:             }
1:         }
1: 
1:         assertEquals("got 2 seeks: " + seekPositions, 2, seekPositions.size());
1:         assertEquals("offset is reused", seekPositions.get(0), seekPositions.get(1));
1: 
1:     }
1: }
============================================================================