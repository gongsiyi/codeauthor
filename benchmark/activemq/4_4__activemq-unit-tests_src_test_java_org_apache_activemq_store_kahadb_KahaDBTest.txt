1:fbc5eb5: /**
1:fbc5eb5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fbc5eb5:  * contributor license agreements.  See the NOTICE file distributed with
1:fbc5eb5:  * this work for additional information regarding copyright ownership.
1:fbc5eb5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fbc5eb5:  * (the "License"); you may not use this file except in compliance with
1:fbc5eb5:  * the License.  You may obtain a copy of the License at
1:fbc5eb5:  *
1:fbc5eb5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fbc5eb5:  *
1:fbc5eb5:  * Unless required by applicable law or agreed to in writing, software
1:fbc5eb5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fbc5eb5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fbc5eb5:  * See the License for the specific language governing permissions and
1:fbc5eb5:  * limitations under the License.
1:fbc5eb5:  */
1:fbc5eb5: package org.apache.activemq.store.kahadb;
3:fbc5eb5: 
1:fbc5eb5: import java.io.File;
1:fbc5eb5: import java.io.IOException;
1:ded6363: import java.io.RandomAccessFile;
1:ba77b9f: import java.util.concurrent.atomic.AtomicBoolean;
1:4743a20: 
1:4743a20: import javax.jms.Connection;
1:4743a20: import javax.jms.JMSException;
1:4743a20: import javax.jms.MessageConsumer;
1:4743a20: import javax.jms.MessageProducer;
1:4743a20: import javax.jms.Session;
1:4743a20: 
1:4743a20: import junit.framework.TestCase;
1:4743a20: 
1:4743a20: import org.apache.activemq.ActiveMQConnectionFactory;
1:4743a20: import org.apache.activemq.broker.BrokerService;
1:4743a20: import org.apache.activemq.command.ActiveMQQueue;
1:ba77b9f: import org.apache.activemq.util.DefaultTestAppender;
1:ba77b9f: import org.apache.log4j.Level;
1:ba77b9f: import org.apache.log4j.Logger;
1:ba77b9f: import org.apache.log4j.spi.LoggingEvent;
1:fbc5eb5: 
1:fbc5eb5: /**
1:fbc5eb5:  * @author chirino
1:fbc5eb5:  */
1:fbc5eb5: public class KahaDBTest extends TestCase {
1:fbc5eb5: 
1:fbc5eb5:     protected BrokerService createBroker(KahaDBStore kaha) throws Exception {
1:fbc5eb5: 
1:fbc5eb5:         BrokerService broker = new BrokerService();
1:fbc5eb5:         broker.setUseJmx(false);
1:fbc5eb5:         broker.setPersistenceAdapter(kaha);
1:fbc5eb5:         broker.start();
1:fbc5eb5:         return broker;
1:fbc5eb5:     }
1:5cadb04: 
1:fbc5eb5:     private KahaDBStore createStore(boolean delete) throws IOException {
1:fbc5eb5:         KahaDBStore kaha = new KahaDBStore();
1:fbc5eb5:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:fbc5eb5:         if( delete ) {
1:fbc5eb5:             kaha.deleteAllMessages();
1:fbc5eb5:         }
1:fbc5eb5:         return kaha;
1:fbc5eb5:     }
1:fbc5eb5: 
1:fbc5eb5:     public void testIgnoreMissingJournalfilesOptionSetFalse() throws Exception {
1:fbc5eb5:         KahaDBStore kaha = createStore(true);
1:fbc5eb5:         kaha.setJournalMaxFileLength(1024*100);
1:fbc5eb5:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:fbc5eb5:         BrokerService broker = createBroker(kaha);
1:fbc5eb5:         sendMessages(1000);
1:fbc5eb5:         broker.stop();
1:ded6363: 
1:fbc5eb5:         // Delete some journal files..
1:fbc5eb5:         assertExistsAndDelete(new File(kaha.getDirectory(), "db-4.log"));
1:fbc5eb5:         assertExistsAndDelete(new File(kaha.getDirectory(), "db-8.log"));
1:ded6363: 
1:fbc5eb5:         kaha = createStore(false);
1:fbc5eb5:         kaha.setJournalMaxFileLength(1024*100);
1:fbc5eb5:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:fbc5eb5:         try {
1:fbc5eb5:             broker = createBroker(kaha);
1:fbc5eb5:             fail("expected IOException");
1:fbc5eb5:         } catch (IOException e) {
1:ded6363:             assertTrue( e.getMessage().startsWith("Detected missing/corrupt journal files") );
1:fbc5eb5:         }
1:fbc5eb5: 
1:fbc5eb5:     }
1:fbc5eb5: 
1:fbc5eb5: 
1:fbc5eb5:     public void testIgnoreMissingJournalfilesOptionSetTrue() throws Exception {
1:fbc5eb5:         KahaDBStore kaha = createStore(true);
1:fbc5eb5:         kaha.setJournalMaxFileLength(1024*100);
1:fbc5eb5:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:fbc5eb5:         BrokerService broker = createBroker(kaha);
1:fbc5eb5:         sendMessages(1000);
1:fbc5eb5:         broker.stop();
1:fbc5eb5: 
1:fbc5eb5:         // Delete some journal files..
1:fbc5eb5:         assertExistsAndDelete(new File(kaha.getDirectory(), "db-4.log"));
1:fbc5eb5:         assertExistsAndDelete(new File(kaha.getDirectory(), "db-8.log"));
1:fbc5eb5: 
1:fbc5eb5:         kaha = createStore(false);
1:fbc5eb5:         kaha.setIgnoreMissingJournalfiles(true);
1:fbc5eb5:         kaha.setJournalMaxFileLength(1024*100);
1:fbc5eb5:         broker = createBroker(kaha);
1:fbc5eb5: 
1:fbc5eb5:         // We know we won't get all the messages but we should get most of them.
1:fbc5eb5:         int count = receiveMessages();
1:4743a20:         assertTrue( count > 800 );
1:fbc5eb5:         assertTrue( count < 1000 );
1:fbc5eb5: 
1:fbc5eb5:         broker.stop();
1:fbc5eb5:     }
1:fbc5eb5: 
1:fbc5eb5: 
1:ded6363:     public void testCheckCorruptionNotIgnored() throws Exception {
1:ded6363:         KahaDBStore kaha = createStore(true);
1:5cadb04:         assertTrue(kaha.isChecksumJournalFiles());
1:ded6363:         assertFalse(kaha.isCheckForCorruptJournalFiles());
1:ded6363: 
1:ded6363:         kaha.setJournalMaxFileLength(1024*100);
3:ded6363:         kaha.setChecksumJournalFiles(true);
1:ded6363:         BrokerService broker = createBroker(kaha);
1:ded6363:         sendMessages(1000);
1:ded6363:         broker.stop();
1:ded6363: 
1:ded6363:         // Modify/Corrupt some journal files..
1:ded6363:         assertExistsAndCorrupt(new File(kaha.getDirectory(), "db-4.log"));
1:ded6363:         assertExistsAndCorrupt(new File(kaha.getDirectory(), "db-8.log"));
1:ded6363: 
1:ded6363:         kaha = createStore(false);
1:ded6363:         kaha.setJournalMaxFileLength(1024*100);
1:ded6363:         kaha.setChecksumJournalFiles(true);
1:ded6363:         kaha.setCheckForCorruptJournalFiles(true);
1:ded6363:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:ded6363:         try {
1:ded6363:             broker = createBroker(kaha);
1:ded6363:             fail("expected IOException");
1:ded6363:         } catch (IOException e) {
1:ded6363:             assertTrue( e.getMessage().startsWith("Detected missing/corrupt journal files") );
1:ded6363:         }
1:ded6363: 
1:ded6363:     }
1:fbc5eb5: 
1:fbc5eb5: 
1:5cadb04:     public void testMigrationOnNewDefaultForChecksumJournalFiles() throws Exception {
1:5cadb04:         KahaDBStore kaha = createStore(true);
1:5cadb04:         kaha.setChecksumJournalFiles(false);
1:5cadb04:         assertFalse(kaha.isChecksumJournalFiles());
1:5cadb04:         assertFalse(kaha.isCheckForCorruptJournalFiles());
1:5cadb04: 
1:5cadb04:         kaha.setJournalMaxFileLength(1024*100);
1:5cadb04:         BrokerService broker = createBroker(kaha);
1:5cadb04:         sendMessages(1000);
1:5cadb04:         broker.stop();
1:5cadb04: 
1:5cadb04:         kaha = createStore(false);
1:5cadb04:         kaha.setJournalMaxFileLength(1024*100);
1:5cadb04:         kaha.setCheckForCorruptJournalFiles(true);
1:5cadb04:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:5cadb04:         createBroker(kaha);
1:5cadb04:         assertEquals(1000, receiveMessages());
1:5cadb04:     }
1:5cadb04: 
1:5cadb04: 
1:ded6363:     private void assertExistsAndCorrupt(File file) throws IOException {
1:ded6363:         assertTrue(file.exists());
1:ded6363:         RandomAccessFile f = new RandomAccessFile(file, "rw");
1:ded6363:         try {
1:ded6363:             f.seek(1024*5+134);
1:ded6363:             f.write("... corruption string ...".getBytes());
1:ded6363:         } finally {
1:ded6363:             f.close();
1:ded6363:         }
1:ded6363:     }
1:ded6363: 
1:ded6363: 
1:ded6363:     public void testCheckCorruptionIgnored() throws Exception {
1:ded6363:         KahaDBStore kaha = createStore(true);
1:ded6363:         kaha.setJournalMaxFileLength(1024*100);
1:ded6363:         BrokerService broker = createBroker(kaha);
1:ded6363:         sendMessages(1000);
1:ded6363:         broker.stop();
1:ded6363: 
1:ded6363:         // Delete some journal files..
1:ded6363:         assertExistsAndCorrupt(new File(kaha.getDirectory(), "db-4.log"));
1:ded6363:         assertExistsAndCorrupt(new File(kaha.getDirectory(), "db-8.log"));
1:ded6363: 
1:ded6363:         kaha = createStore(false);
1:ded6363:         kaha.setIgnoreMissingJournalfiles(true);
1:ded6363:         kaha.setJournalMaxFileLength(1024*100);
1:ded6363:         kaha.setCheckForCorruptJournalFiles(true);
1:ded6363:         broker = createBroker(kaha);
1:ded6363: 
1:ded6363:         // We know we won't get all the messages but we should get most of them.
1:ded6363:         int count = receiveMessages();
1:ded6363:         assertTrue("Expected to received a min # of messages.. Got: "+count,  count > 990 );
1:ded6363:         assertTrue( count < 1000 );
1:ded6363: 
1:ded6363:         broker.stop();
1:ded6363:     }
1:ded6363: 
1:ba77b9f:     public void testNoReplayOnStopStart() throws Exception {
1:ba77b9f:         KahaDBStore kaha = createStore(true);
1:ba77b9f:         BrokerService broker = createBroker(kaha);
1:ba77b9f:         sendMessages(100);
1:ba77b9f:         broker.stop();
1:ba77b9f:         broker.waitUntilStopped();
1:ba77b9f: 
1:ba77b9f:         kaha = createStore(false);
1:ba77b9f:         kaha.setCheckForCorruptJournalFiles(true);
1:ba77b9f: 
1:ba77b9f:         final AtomicBoolean didSomeRecovery = new AtomicBoolean(false);
1:ba77b9f:         DefaultTestAppender appender = new DefaultTestAppender() {
1:ba77b9f:             @Override
1:ba77b9f:             public void doAppend(LoggingEvent event) {
1:ba77b9f:                 if (event.getLevel() == Level.INFO && event.getRenderedMessage().contains("Recovering from the journal @")) {
1:ba77b9f:                     didSomeRecovery.set(true);
1:ba77b9f:                 }
1:ba77b9f:             }
1:ba77b9f:         };
1:ba77b9f: 
2:ba77b9f:         Logger.getRootLogger().addAppender(appender);
1:ba77b9f: 
1:ba77b9f:         broker = createBroker(kaha);
1:ba77b9f: 
1:ba77b9f:         int count = receiveMessages();
1:ba77b9f:         assertEquals("Expected to received all messages.", count, 100);
1:ba77b9f:         broker.stop();
1:ba77b9f: 
1:5385fd1:         Logger.getRootLogger().removeAppender(appender);
1:ba77b9f:         assertFalse("Did not replay any records from the journal", didSomeRecovery.get());
1:ba77b9f:     }
1:ba77b9f: 
1:fbc5eb5:     private void assertExistsAndDelete(File file) {
1:fbc5eb5:         assertTrue(file.exists());
1:fbc5eb5:         file.delete();
1:fbc5eb5:         assertFalse(file.exists());
1:fbc5eb5:     }
1:fbc5eb5: 
1:fbc5eb5:     private void sendMessages(int count) throws JMSException {
1:fbc5eb5:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:fbc5eb5:         Connection connection = cf.createConnection();
1:fbc5eb5:         try {
1:fbc5eb5:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:fbc5eb5:             MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:fbc5eb5:             for (int i = 0; i < count; i++) {
1:fbc5eb5:                 producer.send(session.createTextMessage(createContent(i)));
1:fbc5eb5:             }
1:fbc5eb5:         } finally {
1:fbc5eb5:             connection.close();
1:fbc5eb5:         }
1:fbc5eb5:     }
1:fbc5eb5: 
1:fbc5eb5:     private int receiveMessages() throws JMSException {
1:fbc5eb5:         int rc=0;
1:fbc5eb5:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:fbc5eb5:         Connection connection = cf.createConnection();
1:fbc5eb5:         try {
1:fbc5eb5:             connection.start();
1:fbc5eb5:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:fbc5eb5:             MessageConsumer messageConsumer = session.createConsumer(new ActiveMQQueue("TEST"));
1:fbc5eb5:             while ( messageConsumer.receive(1000) !=null ) {
1:fbc5eb5:                 rc++;
1:fbc5eb5:             }
1:fbc5eb5:             return rc;
1:fbc5eb5:         } finally {
1:fbc5eb5:             connection.close();
1:fbc5eb5:         }
1:fbc5eb5:     }
1:fbc5eb5: 
1:fbc5eb5:     private String createContent(int i) {
1:fbc5eb5:         StringBuilder sb = new StringBuilder(i+":");
1:fbc5eb5:         while( sb.length() < 1024 ) {
1:fbc5eb5:             sb.append("*");
1:fbc5eb5:         }
1:fbc5eb5:         return sb.toString();
1:fbc5eb5:     }
1:fbc5eb5: 
1:fbc5eb5: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5385fd1
/////////////////////////////////////////////////////////////////////////
1:         Logger.getRootLogger().removeAppender(appender);
commit:ba77b9f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
/////////////////////////////////////////////////////////////////////////
1:     public void testNoReplayOnStopStart() throws Exception {
1:         KahaDBStore kaha = createStore(true);
1:         BrokerService broker = createBroker(kaha);
1:         sendMessages(100);
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:         kaha = createStore(false);
1:         kaha.setCheckForCorruptJournalFiles(true);
1: 
1:         final AtomicBoolean didSomeRecovery = new AtomicBoolean(false);
1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel() == Level.INFO && event.getRenderedMessage().contains("Recovering from the journal @")) {
1:                     didSomeRecovery.set(true);
1:                 }
1:             }
1:         };
1: 
1:         Logger.getRootLogger().addAppender(appender);
1: 
1:         broker = createBroker(kaha);
1: 
1:         int count = receiveMessages();
1:         assertEquals("Expected to received all messages.", count, 100);
1:         broker.stop();
1: 
1:         Logger.getRootLogger().addAppender(appender);
1:         assertFalse("Did not replay any records from the journal", didSomeRecovery.get());
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:5cadb04
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(kaha.isChecksumJournalFiles());
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testMigrationOnNewDefaultForChecksumJournalFiles() throws Exception {
1:         KahaDBStore kaha = createStore(true);
1:         kaha.setChecksumJournalFiles(false);
1:         assertFalse(kaha.isChecksumJournalFiles());
1:         assertFalse(kaha.isCheckForCorruptJournalFiles());
1: 
1:         kaha.setJournalMaxFileLength(1024*100);
1:         BrokerService broker = createBroker(kaha);
1:         sendMessages(1000);
1:         broker.stop();
1: 
1:         kaha = createStore(false);
1:         kaha.setJournalMaxFileLength(1024*100);
1:         kaha.setCheckForCorruptJournalFiles(true);
1:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:         createBroker(kaha);
1:         assertEquals(1000, receiveMessages());
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertTrue( count > 800 );
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ded6363
/////////////////////////////////////////////////////////////////////////
1: import java.io.RandomAccessFile;
0: import java.io.FileNotFoundException;
/////////////////////////////////////////////////////////////////////////
1:             assertTrue( e.getMessage().startsWith("Detected missing/corrupt journal files") );
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testCheckCorruptionNotIgnored() throws Exception {
1:         KahaDBStore kaha = createStore(true);
0:         assertFalse(kaha.isChecksumJournalFiles());
1:         assertFalse(kaha.isCheckForCorruptJournalFiles());
1: 
1:         kaha.setJournalMaxFileLength(1024*100);
1:         kaha.setChecksumJournalFiles(true);
1:         BrokerService broker = createBroker(kaha);
1:         sendMessages(1000);
1:         broker.stop();
1: 
1:         // Modify/Corrupt some journal files..
1:         assertExistsAndCorrupt(new File(kaha.getDirectory(), "db-4.log"));
1:         assertExistsAndCorrupt(new File(kaha.getDirectory(), "db-8.log"));
1: 
1:         kaha = createStore(false);
1:         kaha.setJournalMaxFileLength(1024*100);
1:         kaha.setChecksumJournalFiles(true);
1:         kaha.setCheckForCorruptJournalFiles(true);
1:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:         try {
1:             broker = createBroker(kaha);
1:             fail("expected IOException");
1:         } catch (IOException e) {
1:             assertTrue( e.getMessage().startsWith("Detected missing/corrupt journal files") );
1:         }
1: 
1:     }
1: 
1:     private void assertExistsAndCorrupt(File file) throws IOException {
1:         assertTrue(file.exists());
1:         RandomAccessFile f = new RandomAccessFile(file, "rw");
1:         try {
1:             f.seek(1024*5+134);
1:             f.write("... corruption string ...".getBytes());
1:         } finally {
1:             f.close();
1:         }
1:     }
1: 
1: 
1:     public void testCheckCorruptionIgnored() throws Exception {
1:         KahaDBStore kaha = createStore(true);
1:         kaha.setJournalMaxFileLength(1024*100);
1:         kaha.setChecksumJournalFiles(true);
1:         BrokerService broker = createBroker(kaha);
1:         sendMessages(1000);
1:         broker.stop();
1: 
1:         // Delete some journal files..
1:         assertExistsAndCorrupt(new File(kaha.getDirectory(), "db-4.log"));
1:         assertExistsAndCorrupt(new File(kaha.getDirectory(), "db-8.log"));
1: 
1:         kaha = createStore(false);
1:         kaha.setIgnoreMissingJournalfiles(true);
1:         kaha.setJournalMaxFileLength(1024*100);
1:         kaha.setChecksumJournalFiles(true);
1:         kaha.setCheckForCorruptJournalFiles(true);
1:         broker = createBroker(kaha);
1: 
1:         // We know we won't get all the messages but we should get most of them.
1:         int count = receiveMessages();
1:         assertTrue("Expected to received a min # of messages.. Got: "+count,  count > 990 );
1:         assertTrue( count < 1000 );
1: 
1:         broker.stop();
1:     }
1: 
commit:fbc5eb5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
0: import junit.framework.TestCase;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: import javax.jms.*;
1: import java.io.File;
1: import java.io.IOException;
1: 
1: /**
1:  * @author chirino
1:  */
1: public class KahaDBTest extends TestCase {
1: 
1:     protected BrokerService createBroker(KahaDBStore kaha) throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setPersistenceAdapter(kaha);
1:         broker.start();
1:         return broker;
1: 
1:     }
1: 
1:     private KahaDBStore createStore(boolean delete) throws IOException {
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:         if( delete ) {
1:             kaha.deleteAllMessages();
1:         }
1:         return kaha;
1:     }
1: 
1:     public void testIgnoreMissingJournalfilesOptionSetFalse() throws Exception {
1:         KahaDBStore kaha = createStore(true);
1:         kaha.setJournalMaxFileLength(1024*100);
1:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:         BrokerService broker = createBroker(kaha);
1:         sendMessages(1000);
1:         broker.stop();
1: 
1:         // Delete some journal files..
1:         assertExistsAndDelete(new File(kaha.getDirectory(), "db-4.log"));
1:         assertExistsAndDelete(new File(kaha.getDirectory(), "db-8.log"));
1: 
1:         kaha = createStore(false);
1:         kaha.setJournalMaxFileLength(1024*100);
1:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:         try {
1:             broker = createBroker(kaha);
1:             fail("expected IOException");
1:         } catch (IOException e) {
0:             assertTrue( e.getMessage().startsWith("Detected missing journal files") );
1:         }
1: 
1:     }
1: 
1: 
1:     public void testIgnoreMissingJournalfilesOptionSetTrue() throws Exception {
1:         KahaDBStore kaha = createStore(true);
1:         kaha.setJournalMaxFileLength(1024*100);
1:         assertFalse(kaha.isIgnoreMissingJournalfiles());
1:         BrokerService broker = createBroker(kaha);
1:         sendMessages(1000);
1:         broker.stop();
1: 
1:         // Delete some journal files..
1:         assertExistsAndDelete(new File(kaha.getDirectory(), "db-4.log"));
1:         assertExistsAndDelete(new File(kaha.getDirectory(), "db-8.log"));
1: 
1:         kaha = createStore(false);
1:         kaha.setIgnoreMissingJournalfiles(true);
1:         kaha.setJournalMaxFileLength(1024*100);
1:         broker = createBroker(kaha);
1: 
1:         // We know we won't get all the messages but we should get most of them.
1:         int count = receiveMessages();
0:         assertTrue( count > 800 ); 
1:         assertTrue( count < 1000 );
1: 
1:         broker.stop();
1:     }
1: 
1:     private void assertExistsAndDelete(File file) {
1:         assertTrue(file.exists());
1:         file.delete();
1:         assertFalse(file.exists());
1:     }
1: 
1:     private void sendMessages(int count) throws JMSException {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(new ActiveMQQueue("TEST"));
1:             for (int i = 0; i < count; i++) {
1:                 producer.send(session.createTextMessage(createContent(i)));
1:             }
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     private int receiveMessages() throws JMSException {
1:         int rc=0;
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         try {
1:             connection.start();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer messageConsumer = session.createConsumer(new ActiveMQQueue("TEST"));
1:             while ( messageConsumer.receive(1000) !=null ) {
1:                 rc++;
1:             }
1:             return rc;
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     private String createContent(int i) {
1:         StringBuilder sb = new StringBuilder(i+":");
1:         while( sb.length() < 1024 ) {
1:             sb.append("*");
1:         }
1:         return sb.toString();
1:     }
1: 
1: }
============================================================================