1:e6909d8: /**
1:e6909d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6909d8:  * contributor license agreements.  See the NOTICE file distributed with
1:e6909d8:  * this work for additional information regarding copyright ownership.
1:e6909d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6909d8:  * (the "License"); you may not use this file except in compliance with
1:e6909d8:  * the License.  You may obtain a copy of the License at
1:e6909d8:  *
1:e6909d8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e6909d8:  *
1:e6909d8:  * Unless required by applicable law or agreed to in writing, software
1:e6909d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6909d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6909d8:  * See the License for the specific language governing permissions and
1:e6909d8:  * limitations under the License.
1:e6909d8:  */
1:e6909d8: package org.apache.activemq.bugs;
4:e6909d8: 
1:e6909d8: import static org.junit.Assert.fail;
1:e6909d8: 
1:8bab1c1: import java.util.concurrent.atomic.AtomicBoolean;
1:e6909d8: 
1:e6909d8: import javax.jms.Connection;
1:e6909d8: import javax.jms.Destination;
1:e6909d8: import javax.jms.JMSException;
1:e6909d8: import javax.jms.Message;
1:e6909d8: import javax.jms.MessageConsumer;
1:e6909d8: import javax.jms.MessageListener;
1:e6909d8: import javax.jms.MessageProducer;
1:e6909d8: import javax.jms.Queue;
1:e6909d8: import javax.jms.Session;
1:e6909d8: 
1:e6909d8: import org.apache.activemq.ActiveMQConnectionFactory;
1:e6909d8: import org.apache.activemq.broker.BrokerService;
1:8bab1c1: import org.apache.activemq.util.DefaultTestAppender;
1:9873e21: import org.apache.log4j.Appender;
1:5219fa1: import org.apache.log4j.Level;
1:8bab1c1: import org.apache.log4j.spi.LoggingEvent;
1:e6909d8: import org.junit.Before;
1:e6909d8: import org.junit.Test;
1:e6909d8: import org.slf4j.Logger;
1:e6909d8: import org.slf4j.LoggerFactory;
1:e6909d8: 
1:e6909d8: /**
1:e6909d8:  * @author Claudio Corsi
1:e6909d8:  *
1:e6909d8:  */
1:e6909d8: public class AMQ3567Test {
1:e6909d8: 
1:e6909d8:     private static Logger logger = LoggerFactory.getLogger(AMQ3567Test.class);
1:e6909d8: 
1:e6909d8:     private ActiveMQConnectionFactory factory;
1:e6909d8:     private Connection connection;
1:e6909d8:     private Session sessionWithListener, session;
1:e6909d8:     private Queue destination;
1:e6909d8:     private MessageConsumer consumer;
1:e6909d8:     private Thread thread;
1:e6909d8:     private BrokerService broker;
1:e6909d8:     private String connectionUri;
1:e6909d8: 
1:e6909d8:     /**
1:e6909d8:      * @throws java.lang.Exception
1:e6909d8:      */
1:e6909d8:     @Before
1:e6909d8:     public void setUp() throws Exception {
1:e6909d8:         startBroker();
1:e6909d8:         initializeConsumer();
1:e6909d8:         startConsumer();
1:e6909d8:     }
1:e6909d8: 
1:e6909d8:     @Test
1:e6909d8:     public void runTest() throws Exception {
1:e6909d8:         produceSingleMessage();
1:e6909d8:         org.apache.log4j.Logger log4jLogger = org.apache.log4j.Logger.getLogger("org.apache.activemq.util.ServiceSupport");
1:8bab1c1:         final AtomicBoolean failed = new AtomicBoolean(false);
1:e6909d8: 
1:9873e21:         Appender appender = new DefaultTestAppender() {
1:8bab1c1:             @Override
1:8bab1c1:             public void doAppend(LoggingEvent event) {
1:8bab1c1:                 if (event.getThrowableInformation() != null) {
1:8bab1c1:                     if (event.getThrowableInformation().getThrowable() instanceof InterruptedException) {
1:8bab1c1:                         InterruptedException ie = (InterruptedException)event.getThrowableInformation().getThrowable();
1:8bab1c1:                         if (ie.getMessage().startsWith("Could not stop service:")) {
1:8bab1c1:                             logger.info("Received an interrupted exception : ", ie);
1:8bab1c1:                             failed.set(true);
1:e6909d8:                         }
1:e6909d8:                     }
3:8bab1c1:                 }
1:8bab1c1:             }
1:9873e21:         };
1:e6909d8:         log4jLogger.addAppender(appender);
1:5219fa1: 
1:e6909d8:         Level level = log4jLogger.getLevel();
1:e6909d8:         log4jLogger.setLevel(Level.DEBUG);
1:e6909d8: 
1:e6909d8:         try {
1:e6909d8:             stopConsumer();
1:e6909d8:             stopBroker();
1:8bab1c1:             if (failed.get()) {
1:e6909d8:                 fail("An Interrupt exception was generated");
1:e6909d8:             }
1:e6909d8: 
1:e6909d8:         } finally {
1:e6909d8:             log4jLogger.setLevel(level);
1:e6909d8:             log4jLogger.removeAppender(appender);
1:e6909d8:         }
1:e6909d8:     }
1:e6909d8: 
1:e6909d8:     private void startBroker() throws Exception {
1:e6909d8:         broker = new BrokerService();
1:e6909d8:         broker.setDataDirectory("target/data");
1:e6909d8:         connectionUri = broker.addConnector("tcp://localhost:0?wireFormat.maxInactivityDuration=30000&transport.closeAsync=false&transport.threadName&soTimeout=60000&transport.keepAlive=false&transport.useInactivityMonitor=false").getPublishableConnectString();
1:e6909d8:         broker.start(true);
1:e6909d8:         broker.waitUntilStarted();
1:e6909d8:     }
1:e6909d8: 
1:e6909d8:     private void stopBroker() throws Exception {
1:e6909d8:         broker.stop();
1:e6909d8:         broker.waitUntilStopped();
1:e6909d8:     }
1:e6909d8: 
1:e6909d8:     private void initializeConsumer() throws JMSException {
1:e6909d8:         logger.info("Initializing the consumer messagor that will just not do anything....");
1:e6909d8:         factory = new ActiveMQConnectionFactory();
1:e6909d8:         factory.setBrokerURL("failover:("+connectionUri+"?wireFormat.maxInactivityDuration=30000&keepAlive=true&soTimeout=60000)?jms.watchTopicAdvisories=false&jms.useAsyncSend=false&jms.dispatchAsync=true&jms.producerWindowSize=10485760&jms.copyMessageOnSend=false&jms.disableTimeStampsByDefault=true&InitialReconnectDelay=1000&maxReconnectDelay=10000&maxReconnectAttempts=400&useExponentialBackOff=true");
1:e6909d8:         connection = factory.createConnection();
1:e6909d8:         connection.start();
1:e6909d8:         sessionWithListener = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e6909d8:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e6909d8:         destination = sessionWithListener.createQueue("EMPTY.QUEUE");
1:e6909d8:     }
1:e6909d8: 
1:e6909d8:     private void startConsumer() throws Exception {
1:e6909d8:         logger.info("Starting the consumer");
1:e6909d8:         consumer = sessionWithListener.createConsumer(destination);
1:e6909d8:         consumer.setMessageListener(new MessageListener() {
1:e6909d8: 
1:e6909d8:             @Override
1:e6909d8:             public void onMessage(Message message) {
1:e6909d8:                 logger.info("Received a message: " + message);
1:e6909d8:             }
1:e6909d8: 
1:e6909d8:         });
1:e6909d8: 
1:e6909d8:         thread = new Thread(new Runnable() {
1:e6909d8: 
1:e6909d8:             private Session session;
1:e6909d8: 
1:e6909d8:             @Override
1:e6909d8:             public void run() {
1:e6909d8:                 try {
1:e6909d8:                     destination = session.createQueue("EMPTY.QUEUE");
1:e6909d8:                     MessageConsumer consumer = session.createConsumer(destination);
1:e6909d8:                     for (int cnt = 0; cnt < 2; cnt++) {
1:e6909d8:                         Message message = consumer.receive(50000);
1:e6909d8:                         logger.info("Received message: " + message);
1:e6909d8:                     }
1:e6909d8:                 } catch (JMSException e) {
1:e6909d8:                     logger.debug("Received an exception while processing messages", e);
1:e6909d8:                 } finally {
1:e6909d8:                     try {
1:e6909d8:                         session.close();
1:e6909d8:                     } catch (JMSException e) {
1:e6909d8:                         logger.debug("Received an exception while closing session", e);
1:e6909d8:                     }
1:e6909d8:                 }
1:e6909d8:             }
1:e6909d8: 
1:e6909d8:             public Runnable setSession(Session session) {
1:e6909d8:                 this.session = session;
1:e6909d8:                 return this;
1:e6909d8:             }
1:e6909d8: 
1:e6909d8:         }.setSession(session)) {
1:e6909d8:             {
1:e6909d8:                 start();
1:e6909d8:             }
1:e6909d8:         };
1:e6909d8:     }
1:e6909d8: 
1:e6909d8:     private void stopConsumer() throws JMSException {
1:e6909d8:         logger.info("Stopping the consumer");
1:e6909d8:         try {
1:e6909d8:             thread.join();
1:e6909d8:         } catch (InterruptedException e) {
1:e6909d8:             logger.debug("Received an exception while waiting for thread to complete", e);
1:e6909d8:         }
1:e6909d8:         if (sessionWithListener != null) {
1:e6909d8:             sessionWithListener.close();
1:e6909d8:         }
1:e6909d8:         if (connection != null) {
1:e6909d8:             connection.stop();
1:e6909d8:         }
1:e6909d8:     }
1:e6909d8: 
1:e6909d8:     private void produceSingleMessage() throws JMSException {
1:e6909d8:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:e6909d8:         factory.setBrokerURL(connectionUri);
1:e6909d8:         Connection connection = factory.createConnection();
1:e6909d8:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e6909d8:         Destination destination = session.createQueue("EMPTY.QUEUE");
1:e6909d8:         MessageProducer producer = session.createProducer(destination);
1:e6909d8:         producer.send(session.createTextMessage("Single Message"));
1:e6909d8:         producer.close();
1:e6909d8:         session.close();
1:e6909d8:         connection.close();
1:e6909d8:     }
1:e6909d8: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.log4j.Level;
/////////////////////////////////////////////////////////////////////////
1: 
commit:ef24cc9
commit:e6909d8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.fail;
1: 
0: import java.io.BufferedReader;
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.FileReader;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.log4j.Layout;
0: import org.apache.log4j.Level;
0: import org.apache.log4j.PatternLayout;
0: import org.apache.log4j.WriterAppender;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * @author Claudio Corsi
1:  *
1:  */
1: public class AMQ3567Test {
1: 
1:     private static Logger logger = LoggerFactory.getLogger(AMQ3567Test.class);
1: 
1:     private ActiveMQConnectionFactory factory;
1:     private Connection connection;
1:     private Session sessionWithListener, session;
1:     private Queue destination;
1:     private MessageConsumer consumer;
1:     private Thread thread;
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     /**
1:      * @throws java.lang.Exception
1:      */
1:     @Before
1:     public void setUp() throws Exception {
1:         startBroker();
1:         initializeConsumer();
1:         startConsumer();
1:     }
1: 
1:     @Test
1:     public void runTest() throws Exception {
1:         produceSingleMessage();
0:         File file = File.createTempFile("whatever", null);
0:         FileOutputStream fos = new FileOutputStream(file);
1:         org.apache.log4j.Logger log4jLogger = org.apache.log4j.Logger.getLogger("org.apache.activemq.util.ServiceSupport");
0:         Layout layout = new PatternLayout("%d | %-5p | %c - %m%n");
0:         WriterAppender appender = new WriterAppender(layout, fos);
1:         log4jLogger.addAppender(appender);
1:         Level level = log4jLogger.getLevel();
1:         log4jLogger.setLevel(Level.DEBUG);
1: 
0:         BufferedReader read = null;
1: 
1:         try {
1:             stopConsumer();
1:             stopBroker();
1:             log4jLogger.removeAppender(appender);
0:             fos.close();
0:             read = new BufferedReader(new FileReader(file));
0:             String line;
1: 
0:             while ((line = read.readLine()) != null) {
0:                 if (line.indexOf("InterruptedException") > -1) {
0:                     if (line.indexOf("Could not stop service:") > -1) {
0:                         logger.info("Received an interrupted exception {}", line);
1:                         fail("An Interrupt exception was generated");
1:                     }
1:                 }
1:             }
1: 
1:         } finally {
1:             log4jLogger.setLevel(level);
1: 
0:             if (read != null)
0:                 read.close();
1: 
0:             file.deleteOnExit();
1:         }
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target/data");
1:         connectionUri = broker.addConnector("tcp://localhost:0?wireFormat.maxInactivityDuration=30000&transport.closeAsync=false&transport.threadName&soTimeout=60000&transport.keepAlive=false&transport.useInactivityMonitor=false").getPublishableConnectString();
1:         broker.start(true);
1:         broker.waitUntilStarted();
1:     }
1: 
1:     private void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     private void initializeConsumer() throws JMSException {
1:         logger.info("Initializing the consumer messagor that will just not do anything....");
1:         factory = new ActiveMQConnectionFactory();
1:         factory.setBrokerURL("failover:("+connectionUri+"?wireFormat.maxInactivityDuration=30000&keepAlive=true&soTimeout=60000)?jms.watchTopicAdvisories=false&jms.useAsyncSend=false&jms.dispatchAsync=true&jms.producerWindowSize=10485760&jms.copyMessageOnSend=false&jms.disableTimeStampsByDefault=true&InitialReconnectDelay=1000&maxReconnectDelay=10000&maxReconnectAttempts=400&useExponentialBackOff=true");
1:         connection = factory.createConnection();
1:         connection.start();
1:         sessionWithListener = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = sessionWithListener.createQueue("EMPTY.QUEUE");
1:     }
1: 
1:     private void startConsumer() throws Exception {
1:         logger.info("Starting the consumer");
1:         consumer = sessionWithListener.createConsumer(destination);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 logger.info("Received a message: " + message);
1:             }
1: 
1:         });
1: 
1:         thread = new Thread(new Runnable() {
1: 
1:             private Session session;
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     destination = session.createQueue("EMPTY.QUEUE");
1:                     MessageConsumer consumer = session.createConsumer(destination);
1:                     for (int cnt = 0; cnt < 2; cnt++) {
1:                         Message message = consumer.receive(50000);
1:                         logger.info("Received message: " + message);
1:                     }
1:                 } catch (JMSException e) {
1:                     logger.debug("Received an exception while processing messages", e);
1:                 } finally {
1:                     try {
1:                         session.close();
1:                     } catch (JMSException e) {
1:                         logger.debug("Received an exception while closing session", e);
1:                     }
1:                 }
1:             }
1: 
1:             public Runnable setSession(Session session) {
1:                 this.session = session;
1:                 return this;
1:             }
1: 
1:         }.setSession(session)) {
1:             {
1:                 start();
1:             }
1:         };
1:     }
1: 
1:     private void stopConsumer() throws JMSException {
1:         logger.info("Stopping the consumer");
1:         try {
1:             thread.join();
1:         } catch (InterruptedException e) {
1:             logger.debug("Received an exception while waiting for thread to complete", e);
1:         }
1:         if (sessionWithListener != null) {
1:             sessionWithListener.close();
1:         }
1:         if (connection != null) {
1:             connection.stop();
1:         }
1:     }
1: 
1:     private void produceSingleMessage() throws JMSException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:         factory.setBrokerURL(connectionUri);
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue("EMPTY.QUEUE");
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(session.createTextMessage("Single Message"));
1:         producer.close();
1:         session.close();
1:         connection.close();
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:9873e21
/////////////////////////////////////////////////////////////////////////
1: import org.apache.log4j.Appender;
/////////////////////////////////////////////////////////////////////////
1:         Appender appender = new DefaultTestAppender() {
/////////////////////////////////////////////////////////////////////////
1:         };
0:         log4jLogger.addAppender(appender);
/////////////////////////////////////////////////////////////////////////
0:             log4jLogger.removeAppender(appender);
commit:8bab1c1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.spi.LoggingEvent;
/////////////////////////////////////////////////////////////////////////
1:         final AtomicBoolean failed = new AtomicBoolean(false);
0: 
0:         log4jLogger.addAppender(new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getThrowableInformation() != null) {
1:                     if (event.getThrowableInformation().getThrowable() instanceof InterruptedException) {
1:                         InterruptedException ie = (InterruptedException)event.getThrowableInformation().getThrowable();
1:                         if (ie.getMessage().startsWith("Could not stop service:")) {
1:                             logger.info("Received an interrupted exception : ", ie);
1:                             failed.set(true);
1:                         }
1:                     }
1:                 }
1:             }
0:         });
0:         
/////////////////////////////////////////////////////////////////////////
1:             if (failed.get()) {
0:                 fail("An Interrupt exception was generated");
============================================================================