1:e168b3c: /**
1:e168b3c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e168b3c:  * contributor license agreements.  See the NOTICE file distributed with
1:e168b3c:  * this work for additional information regarding copyright ownership.
1:e168b3c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e168b3c:  * (the "License"); you may not use this file except in compliance with
1:e168b3c:  * the License.  You may obtain a copy of the License at
1:e168b3c:  *
1:e168b3c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e168b3c:  *
1:e168b3c:  * Unless required by applicable law or agreed to in writing, software
1:e168b3c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e168b3c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e168b3c:  * See the License for the specific language governing permissions and
1:e168b3c:  * limitations under the License.
1:e168b3c:  */
1:e168b3c: package org.apache.activemq.usecases;
32:e168b3c: 
1:e168b3c: import org.apache.activemq.broker.BrokerService;
1:665c3ab: import org.apache.activemq.leveldb.LevelDBStore;
1:e168b3c: 
1:665c3ab: import java.io.File;
1:665c3ab: import java.io.IOException;
1:e168b3c: 
1:665c3ab: public class QueueBrowsingLevelDBTest extends QueueBrowsingTest {
1:e168b3c: 
1:665c3ab:     @Override
1:665c3ab:     public BrokerService createBroker() throws IOException {
1:665c3ab:         BrokerService broker = super.createBroker();
1:665c3ab:         LevelDBStore store = new LevelDBStore();
1:665c3ab:         store.setDirectory(new File("target/test-data/leveldb"));
1:665c3ab:         broker.setPersistenceAdapter(store);
1:665c3ab:         return broker;
20:e168b3c:     }
1:e168b3c: 
1:e168b3c: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:665c3ab
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.leveldb.LevelDBStore;
1: import java.io.File;
1: import java.io.IOException;
1: public class QueueBrowsingLevelDBTest extends QueueBrowsingTest {
1:     @Override
1:     public BrokerService createBroker() throws IOException {
1:         BrokerService broker = super.createBroker();
1:         LevelDBStore store = new LevelDBStore();
1:         store.setDirectory(new File("target/test-data/leveldb"));
1:         broker.setPersistenceAdapter(store);
1:         return broker;
commit:e168b3c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: import java.net.URI;
0: import java.util.Enumeration;
1: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.QueueBrowser;
0: import javax.jms.Session;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: public class QueueBrowsingLevelDBTest {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(QueueBrowsingLevelDBTest.class);
1: 
0:     private BrokerService broker;
0:     private URI connectUri;
0:     private ActiveMQConnectionFactory factory;
1: 
1: 
0:     @Before
0:     public void startBroker() throws Exception {
0:         createBroker();
0:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
0:         broker.deleteAllMessages();
0:         broker.start();
0:         broker.waitUntilStarted();
0:         connectUri = connector.getConnectUri();
0:         factory = new ActiveMQConnectionFactory(connectUri);
1:     }
1: 
0:     private void createBroker() {
0:         broker = new BrokerService();
1:     }
1: 
0:     @After
0:     public void stopBroker() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
1:     }
1: 
0:     @Test
0:     public void testBrowsing() throws JMSException {
1: 
0:         int messageToSend = 370;
1: 
0:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
0:         Connection connection = factory.createConnection();
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(queue);
1: 
0:         String data = "";
0:         for( int i=0; i < 1024*2; i++ ) {
0:             data += "x";
1:         }
1: 
0:         for( int i=0; i < messageToSend; i++ ) {
0:             producer.send(session.createTextMessage(data));
1:         }
1: 
0:         QueueBrowser browser = session.createBrowser(queue);
0:         Enumeration<?> enumeration = browser.getEnumeration();
0:         int received = 0;
0:         while (enumeration.hasMoreElements()) {
0:             Message m = (Message) enumeration.nextElement();
0:             received++;
0:             LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
1:         }
1: 
0:         browser.close();
1: 
0:         assertEquals(messageToSend, received);
1:     }
1: 
0:     @Test
0:     public void testBrowseConcurrent() throws Exception {
0:         final int messageToSend = 370;
1: 
0:         final ActiveMQQueue queue = new ActiveMQQueue("TEST");
0:         Connection connection = factory.createConnection();
0:         connection.start();
0:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         MessageProducer producer = session.createProducer(queue);
1: 
0:         String data = "";
0:         for( int i=0; i < 1024*2; i++ ) {
0:             data += "x";
1:         }
1: 
0:         for( int i=0; i < messageToSend; i++ ) {
0:             producer.send(session.createTextMessage(data));
1:         }
1: 
0:         Thread browserThread = new Thread() {
0:             @Override
0:             public void run() {
0:                 try {
0:                     QueueBrowser browser = session.createBrowser(queue);
0:                     Enumeration<?> enumeration = browser.getEnumeration();
0:                     int received = 0;
0:                     while (enumeration.hasMoreElements()) {
0:                         Message m = (Message) enumeration.nextElement();
0:                         received++;
0:                         LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
1:                     }
0:                     assertEquals("Browsed all messages", messageToSend, received);
0:                 } catch (Exception e) {
0:                     e.printStackTrace();
1:                 }
1:             }
0:         };
1: 
0:         browserThread.start();
1: 
0:         Thread consumerThread = new Thread() {
0:             @Override
0:             public void run() {
0:                 try {
0:                     MessageConsumer consumer = session.createConsumer(queue);
0:                     int received = 0;
0:                     while (true) {
0:                         Message m = consumer.receive(1000);
0:                         if (m == null)
0:                             break;
0:                         received++;
1:                     }
0:                     assertEquals("Consumed all messages", messageToSend, received);
0:                 } catch (Exception e) {
0:                     e.printStackTrace();
1:                 }
1:             }
0:         };
1: 
0:         consumerThread.start();
1: 
0:         browserThread.join();
0:         consumerThread.join();
1:     }
1: 
0:     @Test
0:     public void testMemoryLimit() throws Exception {
0:         broker.getSystemUsage().getMemoryUsage().setLimit(10 * 1024);
1: 
0:         int messageToSend = 370;
1: 
0:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
0:         Connection connection = factory.createConnection();
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(queue);
1: 
0:         String data = "";
0:         for( int i=0; i < 1024*2; i++ ) {
0:             data += "x";
1:         }
1: 
0:         for( int i=0; i < messageToSend; i++ ) {
0:             producer.send(session.createTextMessage(data));
1:         }
1: 
0:         QueueBrowser browser = session.createBrowser(queue);
0:         Enumeration<?> enumeration = browser.getEnumeration();
0:         int received = 0;
0:         while (enumeration.hasMoreElements()) {
0:             Message m = (Message) enumeration.nextElement();
0:             received++;
0:             LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
1:         }
1: 
0:         browser.close();
0:         assertEquals(3, received);
1:     }
1: }
============================================================================