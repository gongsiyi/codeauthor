1:419fde4: /**
1:419fde4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:419fde4:  * contributor license agreements.  See the NOTICE file distributed with
1:419fde4:  * this work for additional information regarding copyright ownership.
1:419fde4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:419fde4:  * (the "License"); you may not use this file except in compliance with
1:419fde4:  * the License.  You may obtain a copy of the License at
1:419fde4:  *
1:419fde4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:419fde4:  *
1:419fde4:  * Unless required by applicable law or agreed to in writing, software
1:419fde4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:419fde4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:419fde4:  * See the License for the specific language governing permissions and
1:419fde4:  * limitations under the License.
1:419fde4:  */
1:419fde4: package org.apache.activemq.bugs;
2:419fde4: 
1:5219fa1: import static org.junit.Assert.assertEquals;
1:5219fa1: 
1:419fde4: import java.io.ByteArrayInputStream;
1:419fde4: import java.io.ByteArrayOutputStream;
1:419fde4: import java.io.ObjectOutputStream;
1:419fde4: import java.io.Serializable;
1:419fde4: import java.lang.reflect.InvocationHandler;
1:419fde4: import java.lang.reflect.Method;
1:419fde4: import java.util.ArrayList;
1:419fde4: import java.util.List;
1:419fde4: 
1:419fde4: import org.apache.activemq.util.ClassLoadingAwareObjectInputStream;
1:419fde4: import org.junit.Before;
1:419fde4: import org.junit.Test;
1:419fde4: 
1:419fde4: /**
1:419fde4:  * Quick port to java to support AMQ build.
1:419fde4:  *
1:419fde4:  * This test demonstrates the classloader problem in the
1:419fde4:  * ClassLoadingAwareObjectInputStream impl. If the first interface in the proxy
1:419fde4:  * interfaces list is JDK and there are any subsequent interfaces that are NOT
1:419fde4:  * JDK interfaces the ClassLoadingAwareObjectInputStream will ignore their
1:419fde4:  * respective classloaders and cause the Proxy to throw an
1:419fde4:  * IllegalArgumentException because the core JDK classloader can't load the
1:419fde4:  * interfaces that are not JDK interfaces.
1:419fde4:  *
1:419fde4:  * See AMQ-3537
1:419fde4:  *
1:419fde4:  * @author jason.yankus
1:419fde4:  *
1:419fde4:  */
1:419fde4: @SuppressWarnings({ "rawtypes", "unchecked" })
1:419fde4: public class AMQ3537Test implements InvocationHandler, Serializable {
1:419fde4: 
1:419fde4:     private static final long serialVersionUID = 1L;
1:419fde4: 
1:419fde4:     /**
1:419fde4:      * If the first and second element in this array are swapped, the test will
1:419fde4:      * fail.
1:419fde4:      */
1:419fde4:     public static final Class[] TEST_CLASSES = new Class[] { List.class, NonJDKList.class, Serializable.class };
1:419fde4: 
1:419fde4:     /** Underlying list */
1:5219fa1:     private final List l = new ArrayList<String>();
1:419fde4: 
1:419fde4:     @Before
1:419fde4:     public void setUp() throws Exception {
1:419fde4:         l.add("foo");
1:419fde4:     }
1:419fde4: 
1:419fde4:     @Test
1:419fde4:     public void testDeserializeProxy() throws Exception {
1:419fde4:         // create the proxy
1:419fde4:         List proxy = (List) java.lang.reflect.Proxy.newProxyInstance(this.getClass().getClassLoader(), TEST_CLASSES, this);
1:419fde4: 
1:419fde4:         // serialize it
1:419fde4:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:419fde4:         ObjectOutputStream oos = new ObjectOutputStream(baos);
1:419fde4:         oos.writeObject(proxy);
1:419fde4:         byte[] serializedProxy = baos.toByteArray();
1:419fde4:         oos.close();
1:419fde4:         baos.close();
1:419fde4: 
1:419fde4:         // deserialize the proxy
1:419fde4:         ClassLoadingAwareObjectInputStream claois =
1:419fde4:             new ClassLoadingAwareObjectInputStream(new ByteArrayInputStream(serializedProxy));
1:419fde4: 
1:419fde4:         // this is where it fails due to the rudimentary classloader selection
1:419fde4:         // in ClassLoadingAwareObjectInputStream
1:419fde4:         List deserializedProxy = (List) claois.readObject();
1:419fde4: 
1:5219fa1:         claois.close();
1:5219fa1: 
1:419fde4:         // assert the invocation worked
1:5219fa1:         assertEquals("foo", deserializedProxy.get(0));
1:419fde4:     }
1:419fde4: 
1:419fde4:     @Override
1:419fde4:     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
1:419fde4:         return method.invoke(l, args);
1:419fde4:     }
1:419fde4: 
1:419fde4:     public interface NonJDKList {
1:419fde4:         int size();
1:419fde4:     }
1:419fde4: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final List l = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1:         claois.close();
1: 
1:         assertEquals("foo", deserializedProxy.get(0));
commit:ef24cc9
commit:419fde4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.ObjectOutputStream;
1: import java.io.Serializable;
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.Method;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.activemq.util.ClassLoadingAwareObjectInputStream;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Quick port to java to support AMQ build.
1:  *
1:  * This test demonstrates the classloader problem in the
1:  * ClassLoadingAwareObjectInputStream impl. If the first interface in the proxy
1:  * interfaces list is JDK and there are any subsequent interfaces that are NOT
1:  * JDK interfaces the ClassLoadingAwareObjectInputStream will ignore their
1:  * respective classloaders and cause the Proxy to throw an
1:  * IllegalArgumentException because the core JDK classloader can't load the
1:  * interfaces that are not JDK interfaces.
1:  *
1:  * See AMQ-3537
1:  *
1:  * @author jason.yankus
1:  *
1:  */
1: @SuppressWarnings({ "rawtypes", "unchecked" })
1: public class AMQ3537Test implements InvocationHandler, Serializable {
1: 
1:     private static final long serialVersionUID = 1L;
1: 
1:     /**
1:      * If the first and second element in this array are swapped, the test will
1:      * fail.
1:      */
1:     public static final Class[] TEST_CLASSES = new Class[] { List.class, NonJDKList.class, Serializable.class };
1: 
1:     /** Underlying list */
0:     private List l = new ArrayList<String>();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         l.add("foo");
1:     }
1: 
1:     @Test
1:     public void testDeserializeProxy() throws Exception {
1:         // create the proxy
1:         List proxy = (List) java.lang.reflect.Proxy.newProxyInstance(this.getClass().getClassLoader(), TEST_CLASSES, this);
1: 
1:         // serialize it
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ObjectOutputStream oos = new ObjectOutputStream(baos);
1:         oos.writeObject(proxy);
1:         byte[] serializedProxy = baos.toByteArray();
1:         oos.close();
1:         baos.close();
1: 
1:         // deserialize the proxy
1:         ClassLoadingAwareObjectInputStream claois =
1:             new ClassLoadingAwareObjectInputStream(new ByteArrayInputStream(serializedProxy));
1: 
1:         // this is where it fails due to the rudimentary classloader selection
1:         // in ClassLoadingAwareObjectInputStream
1:         List deserializedProxy = (List) claois.readObject();
1: 
1:         // assert the invocation worked
0:         Assert.assertEquals("foo", deserializedProxy.get(0));
1:     }
1: 
1:     @Override
1:     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
1:         return method.invoke(l, args);
1:     }
1: 
1:     public interface NonJDKList {
1:         int size();
1:     }
1: }
============================================================================