1:81b4b9a: /**
1:81b4b9a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:81b4b9a:  * contributor license agreements.  See the NOTICE file distributed with
1:81b4b9a:  * this work for additional information regarding copyright ownership.
1:81b4b9a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:81b4b9a:  * (the "License"); you may not use this file except in compliance with
1:81b4b9a:  * the License.  You may obtain a copy of the License at
1:81b4b9a:  *
1:81b4b9a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:81b4b9a:  *
1:81b4b9a:  * Unless required by applicable law or agreed to in writing, software
1:81b4b9a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:81b4b9a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:81b4b9a:  * See the License for the specific language governing permissions and
1:81b4b9a:  * limitations under the License.
1:81b4b9a:  */
1:81b4b9a: package org.apache.activemq.usecases;
1:81b4b9a: 
1:81b4b9a: import static org.junit.Assert.assertEquals;
1:81b4b9a: import static org.junit.Assert.assertNotNull;
1:81b4b9a: import static org.junit.Assert.assertNull;
1:81b4b9a: import static org.junit.Assert.assertTrue;
1:81b4b9a: 
1:81b4b9a: import java.net.URI;
1:81b4b9a: 
1:81b4b9a: import javax.jms.JMSException;
1:81b4b9a: import javax.jms.Message;
1:81b4b9a: import javax.jms.Session;
1:81b4b9a: import javax.jms.Topic;
1:81b4b9a: import javax.jms.TopicConnection;
1:81b4b9a: import javax.jms.TopicPublisher;
1:81b4b9a: import javax.jms.TopicSession;
1:81b4b9a: import javax.jms.TopicSubscriber;
1:81b4b9a: 
1:81b4b9a: import org.apache.activemq.ActiveMQConnectionFactory;
1:81b4b9a: import org.apache.activemq.broker.BrokerService;
1:81b4b9a: import org.apache.activemq.broker.TransportConnector;
1:81b4b9a: import org.apache.activemq.util.Wait;
1:81b4b9a: import org.junit.After;
1:81b4b9a: import org.junit.Before;
1:81b4b9a: import org.junit.Rule;
1:81b4b9a: import org.junit.Test;
1:81b4b9a: import org.junit.rules.TestName;
1:81b4b9a: import org.slf4j.Logger;
1:81b4b9a: import org.slf4j.LoggerFactory;
1:81b4b9a: 
1:81b4b9a: /**
1:81b4b9a:  * Test that the durable sub updates when the offline sub is reactivated with new values.
1:81b4b9a:  */
1:81b4b9a: public class DurableSubscriptionUpdatesTest {
1:81b4b9a: 
1:81b4b9a:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionUpdatesTest.class);
1:81b4b9a: 
1:81b4b9a:     private final int MSG_COUNT = 5;
1:81b4b9a: 
1:81b4b9a:     private BrokerService brokerService;
1:81b4b9a:     private URI connectionUri;
1:81b4b9a: 
1:81b4b9a:     private String clientId;
1:81b4b9a:     private String subscriptionName;
1:81b4b9a:     private String topicName;
1:81b4b9a: 
1:81b4b9a:     private TopicConnection connection;
1:81b4b9a: 
1:81b4b9a:     @Rule public TestName name = new TestName();
1:81b4b9a: 
1:81b4b9a:     protected TopicConnection createConnection() throws JMSException {
1:81b4b9a:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:81b4b9a:         factory.setUseAsyncSend(true);
1:81b4b9a: 
1:81b4b9a:         TopicConnection connection = factory.createTopicConnection();
1:81b4b9a:         connection.setClientID(clientId);
1:81b4b9a:         connection.start();
1:81b4b9a: 
1:81b4b9a:         return connection;
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     @Before
1:81b4b9a:     public void setUp() throws Exception {
1:81b4b9a:         startBroker();
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     @After
1:81b4b9a:     public void tearDown() throws Exception {
1:81b4b9a:         try {
1:81b4b9a:             connection.close();
1:81b4b9a:         } catch (Exception e) {
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         stopBroker();
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     @Test(timeout = 60000)
1:81b4b9a:     public void testSelectorChange() throws Exception {
1:81b4b9a:         connection = createConnection();
1:81b4b9a:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:81b4b9a: 
1:81b4b9a:         Topic topic = session.createTopic(topicName);
1:81b4b9a: 
1:81b4b9a:         // Create a Durable Topic Subscription with noLocal set to true.
1:81b4b9a:         TopicSubscriber durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, "JMSPriority > 8", false);
1:81b4b9a: 
1:81b4b9a:         // Public first set, only the non durable sub should get these.
1:81b4b9a:         publishToTopic(session, topic, 9);
1:81b4b9a:         publishToTopic(session, topic, 8);
1:81b4b9a: 
1:81b4b9a:         // Standard subscriber should receive them
1:81b4b9a:         for (int i = 0; i < MSG_COUNT; ++i) {
1:81b4b9a:             Message message = durableSubscriber.receive(2000);
1:81b4b9a:             assertNotNull(message);
1:81b4b9a:             assertEquals(9, message.getJMSPriority());
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         // Subscriber should not receive the others.
1:81b4b9a:         {
1:81b4b9a:             Message message = durableSubscriber.receive(500);
1:81b4b9a:             assertNull(message);
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         // Public second set for testing durable sub changed.
1:81b4b9a:         publishToTopic(session, topic, 9);
1:81b4b9a: 
1:81b4b9a:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:81b4b9a:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:81b4b9a: 
1:81b4b9a:         // Durable now goes inactive.
1:81b4b9a:         durableSubscriber.close();
1:81b4b9a: 
1:81b4b9a:         assertTrue("Should have no durables.", Wait.waitFor(new Wait.Condition() {
1:81b4b9a: 
1:81b4b9a:             @Override
1:81b4b9a:             public boolean isSatisified() throws Exception {
1:81b4b9a:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 0;
1:81b4b9a:             }
1:81b4b9a:         }));
1:81b4b9a:         assertTrue("Should have an inactive sub.", Wait.waitFor(new Wait.Condition() {
1:81b4b9a: 
1:81b4b9a:             @Override
1:81b4b9a:             public boolean isSatisified() throws Exception {
1:81b4b9a:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:81b4b9a:             }
1:81b4b9a:         }));
1:81b4b9a: 
1:81b4b9a:         LOG.debug("Testing that updated selector subscription does get any messages.");
1:81b4b9a: 
1:81b4b9a:         // Recreate a Durable Topic Subscription with noLocal set to false.
1:81b4b9a:         durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, "JMSPriority > 7", false);
1:81b4b9a: 
1:81b4b9a:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:81b4b9a:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:81b4b9a: 
1:81b4b9a:         // Durable subscription should not receive them as the subscriptions should
1:81b4b9a:         // have been removed and recreated to update the noLocal flag.
1:81b4b9a:         {
1:81b4b9a:             Message message = durableSubscriber.receive(500);
1:81b4b9a:             assertNull(message);
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         // Public third set which should get queued for the durable sub with noLocal=false
1:81b4b9a:         publishToTopic(session, topic, 8);
1:81b4b9a: 
1:81b4b9a:         // Durable subscriber should receive them
1:81b4b9a:         for (int i = 0; i < MSG_COUNT; ++i) {
1:81b4b9a:             Message message = durableSubscriber.receive(5000);
1:81b4b9a:             assertNotNull("Should get messages now", message);
1:81b4b9a:             assertEquals(8, message.getJMSPriority());
1:81b4b9a:         }
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     @Test(timeout = 60000)
1:81b4b9a:     public void testResubscribeWithNewNoLocalValueNoBrokerRestart() throws Exception {
1:81b4b9a:         connection = createConnection();
1:81b4b9a:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:81b4b9a: 
1:81b4b9a:         Topic topic = session.createTopic(topicName);
1:81b4b9a: 
1:81b4b9a:         // Create a Durable Topic Subscription with noLocal set to true.
1:81b4b9a:         TopicSubscriber durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, null, true);
1:81b4b9a: 
1:81b4b9a:         // Create a Durable Topic Subscription with noLocal set to true.
1:81b4b9a:         TopicSubscriber nonDurableSubscriber = session.createSubscriber(topic);
1:81b4b9a: 
1:81b4b9a:         // Public first set, only the non durable sub should get these.
1:81b4b9a:         publishToTopic(session, topic);
1:81b4b9a: 
1:81b4b9a:         LOG.debug("Testing that noLocal=true subscription doesn't get any messages.");
1:81b4b9a: 
1:81b4b9a:         // Standard subscriber should receive them
1:81b4b9a:         for (int i = 0; i < MSG_COUNT; ++i) {
1:81b4b9a:             Message message = nonDurableSubscriber.receive(2000);
1:81b4b9a:             assertNotNull(message);
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         // Durable noLocal=true subscription should not receive them
1:81b4b9a:         {
1:81b4b9a:             Message message = durableSubscriber.receive(500);
1:81b4b9a:             assertNull(message);
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         // Public second set for testing durable sub changed.
1:81b4b9a:         publishToTopic(session, topic);
1:81b4b9a: 
1:81b4b9a:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:81b4b9a:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:81b4b9a: 
1:81b4b9a:         // Durable now goes inactive.
1:81b4b9a:         durableSubscriber.close();
1:81b4b9a: 
1:81b4b9a:         assertTrue("Should have no durables.", Wait.waitFor(new Wait.Condition() {
1:81b4b9a: 
1:81b4b9a:             @Override
1:81b4b9a:             public boolean isSatisified() throws Exception {
1:81b4b9a:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 0;
1:81b4b9a:             }
1:81b4b9a:         }));
1:81b4b9a:         assertTrue("Should have an inactive sub.", Wait.waitFor(new Wait.Condition() {
1:81b4b9a: 
1:81b4b9a:             @Override
1:81b4b9a:             public boolean isSatisified() throws Exception {
1:81b4b9a:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:81b4b9a:             }
1:81b4b9a:         }));
1:81b4b9a: 
1:81b4b9a:         LOG.debug("Testing that updated noLocal=false subscription does get any messages.");
1:81b4b9a: 
1:81b4b9a:         // Recreate a Durable Topic Subscription with noLocal set to false.
1:81b4b9a:         durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, null, false);
1:81b4b9a: 
1:81b4b9a:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:81b4b9a:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:81b4b9a: 
1:81b4b9a:         // Durable noLocal=false subscription should not receive them as the subscriptions should
1:81b4b9a:         // have been removed and recreated to update the noLocal flag.
1:81b4b9a:         {
1:81b4b9a:             Message message = durableSubscriber.receive(500);
1:81b4b9a:             assertNull(message);
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         // Public third set which should get queued for the durable sub with noLocal=false
1:81b4b9a:         publishToTopic(session, topic);
1:81b4b9a: 
1:81b4b9a:         // Durable subscriber should receive them
1:81b4b9a:         for (int i = 0; i < MSG_COUNT; ++i) {
1:81b4b9a:             Message message = durableSubscriber.receive(5000);
1:81b4b9a:             assertNotNull("Should get local messages now", message);
1:81b4b9a:         }
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     @Test(timeout = 60000)
1:81b4b9a:     public void testDurableResubscribeWithNewNoLocalValueWithBrokerRestart() throws Exception {
1:81b4b9a:         connection = createConnection();
1:81b4b9a:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:81b4b9a: 
1:81b4b9a:         Topic topic = session.createTopic(topicName);
1:81b4b9a: 
1:81b4b9a:         // Create a Durable Topic Subscription with noLocal set to true.
1:81b4b9a:         TopicSubscriber durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, null, true);
1:81b4b9a: 
1:81b4b9a:         // Create a Durable Topic Subscription with noLocal set to true.
1:81b4b9a:         TopicSubscriber nonDurableSubscriber = session.createSubscriber(topic);
1:81b4b9a: 
1:81b4b9a:         // Public first set, only the non durable sub should get these.
1:81b4b9a:         publishToTopic(session, topic);
1:81b4b9a: 
1:81b4b9a:         LOG.debug("Testing that noLocal=true subscription doesn't get any messages.");
1:81b4b9a: 
1:81b4b9a:         // Standard subscriber should receive them
1:81b4b9a:         for (int i = 0; i < MSG_COUNT; ++i) {
1:81b4b9a:             Message message = nonDurableSubscriber.receive(2000);
1:81b4b9a:             assertNotNull(message);
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         // Durable noLocal=true subscription should not receive them
1:81b4b9a:         {
1:81b4b9a:             Message message = durableSubscriber.receive(500);
1:81b4b9a:             assertNull(message);
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         // Public second set for testing durable sub changed.
1:81b4b9a:         publishToTopic(session, topic);
1:81b4b9a: 
1:81b4b9a:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:81b4b9a:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:81b4b9a: 
1:81b4b9a:         // Durable now goes inactive.
1:81b4b9a:         durableSubscriber.close();
1:81b4b9a: 
1:81b4b9a:         assertTrue("Should have no durables.", Wait.waitFor(new Wait.Condition() {
1:81b4b9a: 
1:81b4b9a:             @Override
1:81b4b9a:             public boolean isSatisified() throws Exception {
1:81b4b9a:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 0;
1:81b4b9a:             }
1:81b4b9a:         }));
1:81b4b9a:         assertTrue("Should have an inactive sub.", Wait.waitFor(new Wait.Condition() {
1:81b4b9a: 
1:81b4b9a:             @Override
1:81b4b9a:             public boolean isSatisified() throws Exception {
1:81b4b9a:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:81b4b9a:             }
1:81b4b9a:         }));
1:81b4b9a: 
1:81b4b9a:         LOG.debug("Testing that updated noLocal=false subscription does get any messages.");
1:81b4b9a: 
1:81b4b9a:         connection.close();
1:81b4b9a: 
1:81b4b9a:         restartBroker();
1:81b4b9a: 
1:81b4b9a:         connection = createConnection();
1:81b4b9a: 
1:81b4b9a:         session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:81b4b9a: 
1:81b4b9a:         // The previous subscription should be restored as an offline subscription.
1:81b4b9a:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:81b4b9a:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:81b4b9a: 
1:81b4b9a:         // Recreate a Durable Topic Subscription with noLocal set to false.
1:81b4b9a:         durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, null, false);
1:81b4b9a: 
1:81b4b9a:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:81b4b9a:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1:81b4b9a: 
1:81b4b9a:         // Durable noLocal=false subscription should not receive them as the subscriptions should
1:81b4b9a:         // have been removed and recreated to update the noLocal flag.
1:81b4b9a:         {
1:81b4b9a:             Message message = durableSubscriber.receive(500);
1:81b4b9a:             assertNull(message);
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         // Public third set which should get queued for the durable sub with noLocal=false
1:81b4b9a:         publishToTopic(session, topic);
1:81b4b9a: 
1:81b4b9a:         // Durable subscriber should receive them
1:81b4b9a:         for (int i = 0; i < MSG_COUNT; ++i) {
1:81b4b9a:             Message message = durableSubscriber.receive(2000);
1:81b4b9a:             assertNotNull("Should get local messages now", message);
1:81b4b9a:         }
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     private void publishToTopic(TopicSession session, Topic destination) throws Exception {
1:81b4b9a:         publishToTopic(session, destination, Message.DEFAULT_PRIORITY);
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     private void publishToTopic(TopicSession session, Topic destination, int priority) throws Exception {
1:81b4b9a:         TopicPublisher publisher = session.createPublisher(destination);
1:81b4b9a:         for (int i = 0; i < MSG_COUNT; ++i) {
1:81b4b9a:             publisher.send(session.createMessage(), Message.DEFAULT_DELIVERY_MODE, priority, Message.DEFAULT_TIME_TO_LIVE);
1:81b4b9a:         }
1:81b4b9a: 
1:81b4b9a:         publisher.close();
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     private void startBroker() throws Exception {
1:81b4b9a:         createBroker(true);
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     private void restartBroker() throws Exception {
1:81b4b9a:         stopBroker();
1:81b4b9a:         createBroker(false);
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     private void stopBroker() throws Exception {
1:81b4b9a:         if (brokerService != null) {
1:81b4b9a:             brokerService.stop();
1:81b4b9a:             brokerService.waitUntilStopped();
1:81b4b9a:             brokerService = null;
1:81b4b9a:         }
1:81b4b9a:     }
1:81b4b9a: 
1:81b4b9a:     private void createBroker(boolean deleteMessages) throws Exception {
1:81b4b9a:         brokerService = new BrokerService();
1:81b4b9a:         brokerService.setUseJmx(true);
1:81b4b9a:         brokerService.getManagementContext().setCreateMBeanServer(false);
1:81b4b9a:         brokerService.setPersistent(true);
1:81b4b9a:         brokerService.setDeleteAllMessagesOnStartup(deleteMessages);
1:81b4b9a:         brokerService.setAdvisorySupport(false);
1:81b4b9a:         brokerService.setSchedulerSupport(false);
1:81b4b9a:         brokerService.setKeepDurableSubsActive(false);
1:81b4b9a:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:81b4b9a:         brokerService.start();
1:81b4b9a: 
1:81b4b9a:         connectionUri = connector.getPublishableConnectURI();
1:81b4b9a: 
1:81b4b9a:         clientId = name.getMethodName() + "-ClientId";
1:81b4b9a:         subscriptionName = name.getMethodName() + "-Subscription";
1:81b4b9a:         topicName = name.getMethodName();
1:81b4b9a:     }
1:81b4b9a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:81b4b9a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that the durable sub updates when the offline sub is reactivated with new values.
1:  */
1: public class DurableSubscriptionUpdatesTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionUpdatesTest.class);
1: 
1:     private final int MSG_COUNT = 5;
1: 
1:     private BrokerService brokerService;
1:     private URI connectionUri;
1: 
1:     private String clientId;
1:     private String subscriptionName;
1:     private String topicName;
1: 
1:     private TopicConnection connection;
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     protected TopicConnection createConnection() throws JMSException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         factory.setUseAsyncSend(true);
1: 
1:         TopicConnection connection = factory.createTopicConnection();
1:         connection.setClientID(clientId);
1:         connection.start();
1: 
1:         return connection;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             connection.close();
1:         } catch (Exception e) {
1:         }
1: 
1:         stopBroker();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSelectorChange() throws Exception {
1:         connection = createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Topic topic = session.createTopic(topicName);
1: 
1:         // Create a Durable Topic Subscription with noLocal set to true.
1:         TopicSubscriber durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, "JMSPriority > 8", false);
1: 
1:         // Public first set, only the non durable sub should get these.
1:         publishToTopic(session, topic, 9);
1:         publishToTopic(session, topic, 8);
1: 
1:         // Standard subscriber should receive them
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             Message message = durableSubscriber.receive(2000);
1:             assertNotNull(message);
1:             assertEquals(9, message.getJMSPriority());
1:         }
1: 
1:         // Subscriber should not receive the others.
1:         {
1:             Message message = durableSubscriber.receive(500);
1:             assertNull(message);
1:         }
1: 
1:         // Public second set for testing durable sub changed.
1:         publishToTopic(session, topic, 9);
1: 
1:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         // Durable now goes inactive.
1:         durableSubscriber.close();
1: 
1:         assertTrue("Should have no durables.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 0;
1:             }
1:         }));
1:         assertTrue("Should have an inactive sub.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         LOG.debug("Testing that updated selector subscription does get any messages.");
1: 
1:         // Recreate a Durable Topic Subscription with noLocal set to false.
1:         durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, "JMSPriority > 7", false);
1: 
1:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         // Durable subscription should not receive them as the subscriptions should
1:         // have been removed and recreated to update the noLocal flag.
1:         {
1:             Message message = durableSubscriber.receive(500);
1:             assertNull(message);
1:         }
1: 
1:         // Public third set which should get queued for the durable sub with noLocal=false
1:         publishToTopic(session, topic, 8);
1: 
1:         // Durable subscriber should receive them
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             Message message = durableSubscriber.receive(5000);
1:             assertNotNull("Should get messages now", message);
1:             assertEquals(8, message.getJMSPriority());
1:         }
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testResubscribeWithNewNoLocalValueNoBrokerRestart() throws Exception {
1:         connection = createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Topic topic = session.createTopic(topicName);
1: 
1:         // Create a Durable Topic Subscription with noLocal set to true.
1:         TopicSubscriber durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, null, true);
1: 
1:         // Create a Durable Topic Subscription with noLocal set to true.
1:         TopicSubscriber nonDurableSubscriber = session.createSubscriber(topic);
1: 
1:         // Public first set, only the non durable sub should get these.
1:         publishToTopic(session, topic);
1: 
1:         LOG.debug("Testing that noLocal=true subscription doesn't get any messages.");
1: 
1:         // Standard subscriber should receive them
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             Message message = nonDurableSubscriber.receive(2000);
1:             assertNotNull(message);
1:         }
1: 
1:         // Durable noLocal=true subscription should not receive them
1:         {
1:             Message message = durableSubscriber.receive(500);
1:             assertNull(message);
1:         }
1: 
1:         // Public second set for testing durable sub changed.
1:         publishToTopic(session, topic);
1: 
1:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         // Durable now goes inactive.
1:         durableSubscriber.close();
1: 
1:         assertTrue("Should have no durables.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 0;
1:             }
1:         }));
1:         assertTrue("Should have an inactive sub.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         LOG.debug("Testing that updated noLocal=false subscription does get any messages.");
1: 
1:         // Recreate a Durable Topic Subscription with noLocal set to false.
1:         durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, null, false);
1: 
1:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         // Durable noLocal=false subscription should not receive them as the subscriptions should
1:         // have been removed and recreated to update the noLocal flag.
1:         {
1:             Message message = durableSubscriber.receive(500);
1:             assertNull(message);
1:         }
1: 
1:         // Public third set which should get queued for the durable sub with noLocal=false
1:         publishToTopic(session, topic);
1: 
1:         // Durable subscriber should receive them
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             Message message = durableSubscriber.receive(5000);
1:             assertNotNull("Should get local messages now", message);
1:         }
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDurableResubscribeWithNewNoLocalValueWithBrokerRestart() throws Exception {
1:         connection = createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Topic topic = session.createTopic(topicName);
1: 
1:         // Create a Durable Topic Subscription with noLocal set to true.
1:         TopicSubscriber durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, null, true);
1: 
1:         // Create a Durable Topic Subscription with noLocal set to true.
1:         TopicSubscriber nonDurableSubscriber = session.createSubscriber(topic);
1: 
1:         // Public first set, only the non durable sub should get these.
1:         publishToTopic(session, topic);
1: 
1:         LOG.debug("Testing that noLocal=true subscription doesn't get any messages.");
1: 
1:         // Standard subscriber should receive them
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             Message message = nonDurableSubscriber.receive(2000);
1:             assertNotNull(message);
1:         }
1: 
1:         // Durable noLocal=true subscription should not receive them
1:         {
1:             Message message = durableSubscriber.receive(500);
1:             assertNull(message);
1:         }
1: 
1:         // Public second set for testing durable sub changed.
1:         publishToTopic(session, topic);
1: 
1:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         // Durable now goes inactive.
1:         durableSubscriber.close();
1: 
1:         assertTrue("Should have no durables.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 0;
1:             }
1:         }));
1:         assertTrue("Should have an inactive sub.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         LOG.debug("Testing that updated noLocal=false subscription does get any messages.");
1: 
1:         connection.close();
1: 
1:         restartBroker();
1: 
1:         connection = createConnection();
1: 
1:         session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         // The previous subscription should be restored as an offline subscription.
1:         assertEquals(0, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         // Recreate a Durable Topic Subscription with noLocal set to false.
1:         durableSubscriber = session.createDurableSubscriber(topic, subscriptionName, null, false);
1: 
1:         assertEquals(1, brokerService.getAdminView().getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerService.getAdminView().getInactiveDurableTopicSubscribers().length);
1: 
1:         // Durable noLocal=false subscription should not receive them as the subscriptions should
1:         // have been removed and recreated to update the noLocal flag.
1:         {
1:             Message message = durableSubscriber.receive(500);
1:             assertNull(message);
1:         }
1: 
1:         // Public third set which should get queued for the durable sub with noLocal=false
1:         publishToTopic(session, topic);
1: 
1:         // Durable subscriber should receive them
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             Message message = durableSubscriber.receive(2000);
1:             assertNotNull("Should get local messages now", message);
1:         }
1:     }
1: 
1:     private void publishToTopic(TopicSession session, Topic destination) throws Exception {
1:         publishToTopic(session, destination, Message.DEFAULT_PRIORITY);
1:     }
1: 
1:     private void publishToTopic(TopicSession session, Topic destination, int priority) throws Exception {
1:         TopicPublisher publisher = session.createPublisher(destination);
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             publisher.send(session.createMessage(), Message.DEFAULT_DELIVERY_MODE, priority, Message.DEFAULT_TIME_TO_LIVE);
1:         }
1: 
1:         publisher.close();
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     private void restartBroker() throws Exception {
1:         stopBroker();
1:         createBroker(false);
1:     }
1: 
1:     private void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:             brokerService = null;
1:         }
1:     }
1: 
1:     private void createBroker(boolean deleteMessages) throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setUseJmx(true);
1:         brokerService.getManagementContext().setCreateMBeanServer(false);
1:         brokerService.setPersistent(true);
1:         brokerService.setDeleteAllMessagesOnStartup(deleteMessages);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.setKeepDurableSubsActive(false);
1:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:         brokerService.start();
1: 
1:         connectionUri = connector.getPublishableConnectURI();
1: 
1:         clientId = name.getMethodName() + "-ClientId";
1:         subscriptionName = name.getMethodName() + "-Subscription";
1:         topicName = name.getMethodName();
1:     }
1: }
============================================================================