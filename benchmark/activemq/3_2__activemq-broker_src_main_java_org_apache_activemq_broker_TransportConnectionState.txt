1:a9119ec: /**
1:a9119ec:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a9119ec:  * contributor license agreements.  See the NOTICE file distributed with
1:a9119ec:  * this work for additional information regarding copyright ownership.
1:a9119ec:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a9119ec:  * (the "License"); you may not use this file except in compliance with
1:a9119ec:  * the License.  You may obtain a copy of the License at
1:a9119ec:  *
1:a9119ec:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a9119ec:  *
1:a9119ec:  * Unless required by applicable law or agreed to in writing, software
1:a9119ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a9119ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a9119ec:  * See the License for the specific language governing permissions and
1:a9119ec:  * limitations under the License.
1:a9119ec:  */
1:a9119ec: package org.apache.activemq.broker;
1:a9119ec: 
1:a9119ec: import java.util.concurrent.atomic.AtomicInteger;
1:a9119ec: 
1:a9119ec: import org.apache.activemq.command.ConnectionInfo;
1:a9119ec: 
1:a9119ec: /**
1:b0c2a40:  * 
1:a9119ec:  */
1:a9119ec: 
1:a9119ec: public class TransportConnectionState extends org.apache.activemq.state.ConnectionState {
1:a9119ec: 
1:a9119ec:     private ConnectionContext context;
1:a9119ec:     private TransportConnection connection;
1:a9119ec:     private AtomicInteger referenceCounter = new AtomicInteger();
1:a9119ec:     private final Object connectionMutex = new Object();
1:a9119ec: 
1:a9119ec:     public TransportConnectionState(ConnectionInfo info, TransportConnection transportConnection) {
1:a9119ec:         super(info);
1:a9119ec:         connection = transportConnection;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public ConnectionContext getContext() {
1:a9119ec:         return context;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public TransportConnection getConnection() {
1:a9119ec:         return connection;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public void setContext(ConnectionContext context) {
1:a9119ec:         this.context = context;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public void setConnection(TransportConnection connection) {
1:a9119ec:         this.connection = connection;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public int incrementReference() {
1:a9119ec:         return referenceCounter.incrementAndGet();
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public int decrementReference() {
1:a9119ec:         return referenceCounter.decrementAndGet();
1:a9119ec:     }
1:a9119ec: 
1:a9119ec: 	public AtomicInteger getReferenceCounter() {
1:a9119ec: 		return referenceCounter;
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public void setReferenceCounter(AtomicInteger referenceCounter) {
1:a9119ec: 		this.referenceCounter = referenceCounter;
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public Object getConnectionMutex() {
1:a9119ec: 		return connectionMutex;
1:a9119ec: 	}
1:a9119ec: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:a9119ec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.apache.activemq.command.ConnectionInfo;
1: 
1: /**
0:  * @version $Revision: 1.8 $
1:  */
1: 
1: public class TransportConnectionState extends org.apache.activemq.state.ConnectionState {
1: 
1:     private ConnectionContext context;
1:     private TransportConnection connection;
1:     private AtomicInteger referenceCounter = new AtomicInteger();
1:     private final Object connectionMutex = new Object();
1: 
1:     public TransportConnectionState(ConnectionInfo info, TransportConnection transportConnection) {
1:         super(info);
1:         connection = transportConnection;
1:     }
1: 
1:     public ConnectionContext getContext() {
1:         return context;
1:     }
1: 
1:     public TransportConnection getConnection() {
1:         return connection;
1:     }
1: 
1:     public void setContext(ConnectionContext context) {
1:         this.context = context;
1:     }
1: 
1:     public void setConnection(TransportConnection connection) {
1:         this.connection = connection;
1:     }
1: 
1:     public int incrementReference() {
1:         return referenceCounter.incrementAndGet();
1:     }
1: 
1:     public int decrementReference() {
1:         return referenceCounter.decrementAndGet();
1:     }
1: 
1: 	public AtomicInteger getReferenceCounter() {
1: 		return referenceCounter;
1: 	}
1: 
1: 	public void setReferenceCounter(AtomicInteger referenceCounter) {
1: 		this.referenceCounter = referenceCounter;
1: 	}
1: 
1: 	public Object getConnectionMutex() {
1: 		return connectionMutex;
1: 	}
1: }
============================================================================