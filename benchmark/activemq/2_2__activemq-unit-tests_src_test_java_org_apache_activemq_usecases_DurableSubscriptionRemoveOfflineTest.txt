1:6f70393: /**
1:6f70393:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6f70393:  * contributor license agreements.  See the NOTICE file distributed with
1:6f70393:  * this work for additional information regarding copyright ownership.
1:6f70393:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6f70393:  * (the "License"); you may not use this file except in compliance with
1:6f70393:  * the License.  You may obtain a copy of the License at
1:6f70393:  *
1:6f70393:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6f70393:  *
1:6f70393:  * Unless required by applicable law or agreed to in writing, software
1:6f70393:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6f70393:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6f70393:  * See the License for the specific language governing permissions and
1:6f70393:  * limitations under the License.
1:6f70393:  */
1:6f70393: package org.apache.activemq.usecases;
3:6f70393: 
1:6f70393: import javax.jms.Connection;
1:6f70393: import javax.jms.Session;
1:6f70393: import javax.jms.Topic;
1:6f70393: import javax.jms.TopicSubscriber;
1:6f70393: 
1:cb3392c: import junit.framework.Test;
1:cb3392c: 
1:cb3392c: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:cb3392c: import org.apache.activemq.broker.BrokerService;
1:cb3392c: import org.apache.activemq.util.Wait;
1:566039f: import org.slf4j.Logger;
1:566039f: import org.slf4j.LoggerFactory;
1:cb3392c: 
1:6f70393: public class DurableSubscriptionRemoveOfflineTest extends EmbeddedBrokerTestSupport {
1:6f70393: 
1:566039f:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionRemoveOfflineTest.class);
1:566039f: 
1:6f70393:     protected void setUp() throws Exception {
1:6f70393:         useTopic = true;
1:6f70393:         super.setUp();
1:6f70393:     }
1:6f70393: 
1:6f70393:     protected void tearDown() throws Exception {
1:6f70393:         super.tearDown();
1:6f70393:     }
1:6f70393: 
1:6f70393:     @Override
1:6f70393:     protected BrokerService createBroker() throws Exception {
1:6f70393:         BrokerService answer = super.createBroker();
1:6f70393:         answer.setOfflineDurableSubscriberTaskSchedule(3 * 1000);
1:6f70393:         answer.setOfflineDurableSubscriberTimeout(5 * 1000);
1:6f70393:         answer.setDeleteAllMessagesOnStartup(true);
1:6f70393:         return answer;
1:6f70393:     }
1:6f70393: 
1:cb3392c:     protected BrokerService restartBroker() throws Exception {
1:cb3392c:         broker.stop();
1:cb3392c:         broker.waitUntilStopped();
1:cb3392c:         broker = null;
1:cb3392c: 
1:cb3392c:         broker = super.createBroker();
1:cb3392c:         broker.setOfflineDurableSubscriberTaskSchedule(3 * 1000);
1:cb3392c:         broker.setOfflineDurableSubscriberTimeout(5 * 1000);
1:cb3392c: 
1:cb3392c:         broker.start();
1:cb3392c:         broker.waitUntilStarted();
1:cb3392c: 
1:cb3392c:         return broker;
1:cb3392c:     }
1:cb3392c: 
1:6f70393:     public void testRemove() throws Exception {
1:6f70393:         Connection connection = createConnection();
1:6f70393:         connection.setClientID("cliID");
1:6f70393:         connection.start();
1:6f70393:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6f70393:         TopicSubscriber subscriber = session.createDurableSubscriber((Topic) createDestination(), "subName");
1:6f70393:         subscriber.close();
1:6f70393:         connection.close();
1:6f70393: 
1:5e03927:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:6f70393:             @Override
1:6f70393:             public boolean isSatisified() throws Exception {
1:6f70393:                  return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:6f70393:             }
1:5e03927:         }, 15000));
1:6f70393:     }
1:6f70393: 
1:cb3392c:     public void testRemoveAfterRestart() throws Exception {
1:cb3392c:         Connection connection = createConnection();
1:cb3392c:         connection.setClientID("cliID");
1:cb3392c:         connection.start();
1:cb3392c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cb3392c:         TopicSubscriber subscriber = session.createDurableSubscriber((Topic) createDestination(), "subName");
1:cb3392c:         subscriber.close();
1:cb3392c:         connection.close();
1:cb3392c: 
1:566039f:         LOG.info("Broker restarting, wait for inactive cleanup afterwards.");
1:566039f: 
1:cb3392c:         restartBroker();
1:cb3392c: 
1:566039f:         LOG.info("Broker restarted, wait for inactive cleanup now.");
1:566039f: 
1:cb3392c:         assertTrue(broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1);
1:cb3392c: 
1:566039f:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:cb3392c:             @Override
1:cb3392c:             public boolean isSatisified() throws Exception {
1:cb3392c:                  return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:cb3392c:             }
1:566039f:         }, 20000));
1:cb3392c:     }
1:6f70393: 
1:6f70393:     protected boolean isPersistent() {
1:6f70393:         return true;
1:6f70393:     }
1:6f70393: 
1:6f70393:     public static Test suite() {
1:6f70393:         return suite(DurableSubscriptionRemoveOfflineTest.class);
1:6f70393:      }
1:6f70393: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:5e03927
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:         }, 15000));
commit:566039f
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionRemoveOfflineTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Broker restarting, wait for inactive cleanup afterwards.");
1: 
1:         LOG.info("Broker restarted, wait for inactive cleanup now.");
1: 
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:         }, 20000));
commit:cb3392c
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.Wait;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService restartBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = null;
1: 
1:         broker = super.createBroker();
1:         broker.setOfflineDurableSubscriberTaskSchedule(3 * 1000);
1:         broker.setOfflineDurableSubscriberTimeout(5 * 1000);
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         return broker;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         }, 15000);
1:     public void testRemoveAfterRestart() throws Exception {
1:         Connection connection = createConnection();
1:         connection.setClientID("cliID");
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber subscriber = session.createDurableSubscriber((Topic) createDestination(), "subName");
1:         subscriber.close();
1:         connection.close();
1: 
1:         restartBroker();
1: 
1:         assertTrue(broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1);
1: 
0:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                  return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:             }
0:         }, 20000);
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6f70393
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import junit.framework.Test;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.util.Wait;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: 
1: public class DurableSubscriptionRemoveOfflineTest extends EmbeddedBrokerTestSupport {
1: 
1:     protected void setUp() throws Exception {
1:         useTopic = true;
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = super.createBroker();
1:         answer.setOfflineDurableSubscriberTaskSchedule(3 * 1000);
1:         answer.setOfflineDurableSubscriberTimeout(5 * 1000);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         return answer;
1:     }
1: 
1:     public void testRemove() throws Exception {
1:         Connection connection = createConnection();
1:         connection.setClientID("cliID");
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber subscriber = session.createDurableSubscriber((Topic) createDestination(), "subName");
1:         subscriber.close();
1:         connection.close();
1: 
0:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                  return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:             }
0:         }, 10000);
1: 
1:     }
1: 
1: 
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1: 
1:     public static Test suite() {
1:         return suite(DurableSubscriptionRemoveOfflineTest.class);
1:      }
1: }
============================================================================