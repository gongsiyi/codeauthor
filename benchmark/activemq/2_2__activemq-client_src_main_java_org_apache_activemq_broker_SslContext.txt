1:139a220: /**
1:139a220:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:139a220:  * contributor license agreements.  See the NOTICE file distributed with
1:139a220:  * this work for additional information regarding copyright ownership.
1:139a220:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:139a220:  * (the "License"); you may not use this file except in compliance with
1:139a220:  * the License.  You may obtain a copy of the License at
1:139a220:  *
1:139a220:  *      http://www.apache.org/licenses/LICENSE-2.0
1:139a220:  *
1:139a220:  * Unless required by applicable law or agreed to in writing, software
1:139a220:  * distributed under the License is distributed on an "AS IS" BASIS,
1:139a220:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:139a220:  * See the License for the specific language governing permissions and
1:139a220:  * limitations under the License.
1:139a220:  */
1:139a220: package org.apache.activemq.broker;
1:139a220: 
1:7d87837: import java.security.KeyManagementException;
1:7d87837: import java.security.NoSuchAlgorithmException;
1:7d87837: import java.security.NoSuchProviderException;
1:139a220: import java.security.SecureRandom;
1:139a220: import java.util.ArrayList;
1:7d87837: import java.util.Arrays;
1:139a220: import java.util.List;
1:139a220: 
1:139a220: import javax.net.ssl.KeyManager;
1:7d87837: import javax.net.ssl.SSLContext;
1:139a220: import javax.net.ssl.TrustManager;
1:139a220: 
1:139a220: /**
1:139a220:  * A holder of SSL configuration.
1:139a220:  */
1:139a220: public class SslContext {
1:139a220:     
1:7d87837:     protected String protocol = "TLS";
1:7d87837:     protected String provider = null;
1:139a220:     protected List<KeyManager> keyManagers = new ArrayList<KeyManager>();
1:139a220:     protected List<TrustManager> trustManagers = new ArrayList<TrustManager>();
1:139a220:     protected SecureRandom secureRandom;
1:8bb3a77:     private volatile boolean initialized;
1:7d87837:     private SSLContext sslContext;
1:7d87837:     
1:7d87837:     private static final ThreadLocal<SslContext> current = new ThreadLocal<SslContext>();
1:7d87837:     
1:7d87837:     public SslContext() {
1:7d87837:     }
1:7d87837:     
1:7d87837:     public SslContext(KeyManager[] km, TrustManager[] tm, SecureRandom random) {
1:7d87837:         if( km!=null ) {
1:7d87837:             setKeyManagers(Arrays.asList(km));
1:7d87837:         }
1:7d87837:         if( tm!=null ) {
1:7d87837:             setTrustManagers(Arrays.asList(tm));
1:7d87837:         }
1:7d87837:         setSecureRandom(random);        
1:7d87837:     }
1:7d87837:     
1:7d87837:     static public void setCurrentSslContext(SslContext bs) {
1:7d87837:         current.set(bs);
1:7d87837:     }
1:7d87837:     static public SslContext getCurrentSslContext() {
1:7d87837:         return current.get();
1:7d87837:     }
1:139a220:     
1:139a220:     public KeyManager[] getKeyManagersAsArray() {
1:139a220:         KeyManager rc[] = new KeyManager[keyManagers.size()];
1:139a220:         return keyManagers.toArray(rc);
1:139a220:     }
1:139a220:     public TrustManager[] getTrustManagersAsArray() {
1:139a220:         TrustManager rc[] = new TrustManager[trustManagers.size()];
1:139a220:         return trustManagers.toArray(rc);
1:139a220:     }
1:139a220:     
1:139a220:     public void addKeyManager(KeyManager km) {
1:139a220:         keyManagers.add(km);
1:139a220:     }
1:139a220:     public boolean removeKeyManager(KeyManager km) {
1:139a220:         return keyManagers.remove(km);
1:139a220:     }
1:139a220:     public void addTrustManager(TrustManager tm) {
1:139a220:         trustManagers.add(tm);
1:139a220:     }
1:139a220:     public boolean removeTrustManager(TrustManager tm) {
1:139a220:         return trustManagers.remove(tm);
1:139a220:     }
1:139a220:     
1:139a220:     public List<KeyManager> getKeyManagers() {
1:139a220:         return keyManagers;
1:139a220:     }
1:139a220:     public void setKeyManagers(List<KeyManager> keyManagers) {
1:139a220:         this.keyManagers = keyManagers;
1:139a220:     }
1:139a220:     public List<TrustManager> getTrustManagers() {
1:139a220:         return trustManagers;
1:139a220:     }
1:139a220:     public void setTrustManagers(List<TrustManager> trustManagers) {
1:139a220:         this.trustManagers = trustManagers;
1:139a220:     }
1:139a220:     public SecureRandom getSecureRandom() {
1:139a220:         return secureRandom;
1:139a220:     }
1:139a220:     public void setSecureRandom(SecureRandom secureRandom) {
1:139a220:         this.secureRandom = secureRandom;
1:139a220:     }
1:139a220:         
1:7d87837:     public String getProtocol() {
1:7d87837:         return protocol;
1:7d87837:     }
1:7d87837:     public void setProtocol(String protocol) {
1:7d87837:         this.protocol = protocol;
1:7d87837:     }
1:7d87837:     public String getProvider() {
1:7d87837:         return provider;
1:7d87837:     }
1:7d87837:     public void setProvider(String provider) {
1:7d87837:         this.provider = provider;
1:7d87837:     }
1:7d87837: 
1:7d87837:     public SSLContext getSSLContext() throws NoSuchProviderException, NoSuchAlgorithmException, KeyManagementException {
1:8bb3a77:         if (!initialized) {
1:8bb3a77:             synchronized (this) {
1:8bb3a77:                 if (!initialized) {
1:8bb3a77:                     if (provider == null) {
1:8bb3a77:                         sslContext = SSLContext.getInstance(protocol);
1:8bb3a77:                     } else {
1:8bb3a77:                         sslContext = SSLContext.getInstance(protocol, provider);
1:8bb3a77:                     }
1:8bb3a77:                     sslContext.init(getKeyManagersAsArray(), getTrustManagersAsArray(), getSecureRandom());
1:8bb3a77:                     initialized = true;
1:8bb3a77:                 }
1:7d87837:             }
1:7d87837:         }
1:7d87837:         return sslContext;
1:7d87837:     }
1:8bb3a77:     public synchronized void setSSLContext(SSLContext sslContext) {
1:7d87837:         this.sslContext = sslContext;
1:8bb3a77:         initialized = true;
1:7d87837:     }
1:7d87837:     
1:7d87837:     
1:139a220: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8bb3a77
/////////////////////////////////////////////////////////////////////////
1:     private volatile boolean initialized;
/////////////////////////////////////////////////////////////////////////
1:         if (!initialized) {
1:             synchronized (this) {
1:                 if (!initialized) {
1:                     if (provider == null) {
1:                         sslContext = SSLContext.getInstance(protocol);
1:                     } else {
1:                         sslContext = SSLContext.getInstance(protocol, provider);
1:                     }
1:                     sslContext.init(getKeyManagersAsArray(), getTrustManagersAsArray(), getSecureRandom());
1:                     initialized = true;
1:                 }
1:     public synchronized void setSSLContext(SSLContext sslContext) {
1:         initialized = true;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:7d87837
/////////////////////////////////////////////////////////////////////////
1: import java.security.KeyManagementException;
1: import java.security.NoSuchAlgorithmException;
1: import java.security.NoSuchProviderException;
1: import java.util.Arrays;
1: import javax.net.ssl.SSLContext;
/////////////////////////////////////////////////////////////////////////
1:     protected String protocol = "TLS";
1:     protected String provider = null;
1:     private SSLContext sslContext;
1:     
1:     private static final ThreadLocal<SslContext> current = new ThreadLocal<SslContext>();
1:     
1:     public SslContext() {
1:     }
1:     
1:     public SslContext(KeyManager[] km, TrustManager[] tm, SecureRandom random) {
1:         if( km!=null ) {
1:             setKeyManagers(Arrays.asList(km));
1:         }
1:         if( tm!=null ) {
1:             setTrustManagers(Arrays.asList(tm));
1:         }
1:         setSecureRandom(random);        
1:     }
1:     
1:     static public void setCurrentSslContext(SslContext bs) {
1:         current.set(bs);
1:     }
1:     static public SslContext getCurrentSslContext() {
1:         return current.get();
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public String getProtocol() {
1:         return protocol;
1:     }
1:     public void setProtocol(String protocol) {
1:         this.protocol = protocol;
1:     }
1:     public String getProvider() {
1:         return provider;
1:     }
1:     public void setProvider(String provider) {
1:         this.provider = provider;
1:     }
1: 
1:     public SSLContext getSSLContext() throws NoSuchProviderException, NoSuchAlgorithmException, KeyManagementException {
0:         if( sslContext == null ) {
0:             if( provider == null ) {
0:                 sslContext = SSLContext.getInstance(protocol);
0:             } else {
0:                 sslContext = SSLContext.getInstance(protocol, provider);
1:             }
0:             sslContext.init(getKeyManagersAsArray(), getTrustManagersAsArray(), getSecureRandom());
1:         }
1:         return sslContext;
1:     }
0:     public void setSSLContext(SSLContext sslContext) {
1:         this.sslContext = sslContext;
1:     }
1:     
1:     
commit:139a220
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.security.SecureRandom;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.net.ssl.KeyManager;
1: import javax.net.ssl.TrustManager;
1: 
1: /**
1:  * A holder of SSL configuration.
1:  */
1: public class SslContext {
1:     
1:     protected List<KeyManager> keyManagers = new ArrayList<KeyManager>();
1:     protected List<TrustManager> trustManagers = new ArrayList<TrustManager>();
1:     protected SecureRandom secureRandom;
1:     
1:     public KeyManager[] getKeyManagersAsArray() {
1:         KeyManager rc[] = new KeyManager[keyManagers.size()];
1:         return keyManagers.toArray(rc);
1:     }
1:     public TrustManager[] getTrustManagersAsArray() {
1:         TrustManager rc[] = new TrustManager[trustManagers.size()];
1:         return trustManagers.toArray(rc);
1:     }
1:     
1:     public void addKeyManager(KeyManager km) {
1:         keyManagers.add(km);
1:     }
1:     public boolean removeKeyManager(KeyManager km) {
1:         return keyManagers.remove(km);
1:     }
1:     public void addTrustManager(TrustManager tm) {
1:         trustManagers.add(tm);
1:     }
1:     public boolean removeTrustManager(TrustManager tm) {
1:         return trustManagers.remove(tm);
1:     }
1:     
1:     public List<KeyManager> getKeyManagers() {
1:         return keyManagers;
1:     }
1:     public void setKeyManagers(List<KeyManager> keyManagers) {
1:         this.keyManagers = keyManagers;
1:     }
1:     public List<TrustManager> getTrustManagers() {
1:         return trustManagers;
1:     }
1:     public void setTrustManagers(List<TrustManager> trustManagers) {
1:         this.trustManagers = trustManagers;
1:     }
1:     public SecureRandom getSecureRandom() {
1:         return secureRandom;
1:     }
1:     public void setSecureRandom(SecureRandom secureRandom) {
1:         this.secureRandom = secureRandom;
1:     }
1:         
1: }
============================================================================