1:61fd811: /**
1:61fd811:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:61fd811:  * contributor license agreements.  See the NOTICE file distributed with
1:61fd811:  * this work for additional information regarding copyright ownership.
1:61fd811:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:61fd811:  * (the "License"); you may not use this file except in compliance with
1:61fd811:  * the License.  You may obtain a copy of the License at
1:61fd811:  *
1:61fd811:  *      http://www.apache.org/licenses/LICENSE-2.0
1:61fd811:  *
1:61fd811:  * Unless required by applicable law or agreed to in writing, software
1:61fd811:  * distributed under the License is distributed on an "AS IS" BASIS,
1:61fd811:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:61fd811:  * See the License for the specific language governing permissions and
1:61fd811:  * limitations under the License.
1:61fd811:  */
1:61fd811: package org.apache.activemq.usage;
7:61fd811: 
1:61fd811: import static org.junit.Assert.assertEquals;
1:61fd811: import static org.junit.Assert.assertTrue;
1:61fd811: 
1:61fd811: import java.io.File;
1:61fd811: import java.io.FileOutputStream;
1:61fd811: import java.io.IOException;
1:4cddd2c: import java.net.URI;
1:61fd811: import java.util.Random;
1:61fd811: 
1:61fd811: import org.apache.activemq.broker.BrokerService;
1:4cddd2c: import org.apache.activemq.broker.TransportConnector;
1:61fd811: import org.apache.activemq.store.PersistenceAdapter;
1:4cddd2c: import org.apache.activemq.util.StoreUtil;
1:61fd811: import org.apache.activemq.util.Wait;
1:61fd811: import org.apache.commons.io.FileUtils;
1:61fd811: import org.apache.commons.io.IOUtils;
1:61fd811: import org.junit.After;
1:61fd811: import org.junit.Before;
1:4cddd2c: import org.junit.Rule;
1:61fd811: import org.junit.Test;
1:4cddd2c: import org.junit.rules.TemporaryFolder;
1:61fd811: import org.slf4j.Logger;
1:61fd811: import org.slf4j.LoggerFactory;
1:61fd811: 
1:61fd811: /**
1:61fd811:  *
1:61fd811:  * This test is for AMQ-5393  and will check that schedulePeriodForDiskLimitCheck
1:61fd811:  * properly schedules a task that will update disk limits if the amount of usable disk space drops
1:61fd811:  * because another process uses up disk space.
1:61fd811:  *
1:61fd811:  */
1:61fd811: public class PeriodicDiskUsageLimitTest {
1:61fd811:     protected static final Logger LOG = LoggerFactory
1:61fd811:             .getLogger(PeriodicDiskUsageLimitTest.class);
1:61fd811: 
1:4cddd2c:     @Rule
1:4cddd2c:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:4cddd2c:     File testfile;
1:61fd811:     private BrokerService broker;
1:61fd811:     private PersistenceAdapter adapter;
1:61fd811:     private TempUsage tempUsage;
1:61fd811:     private StoreUsage storeUsage;
1:4cddd2c:     protected URI brokerConnectURI;
1:61fd811: 
1:61fd811:     @Before
1:61fd811:     public void setUpBroker() throws Exception {
1:61fd811:         broker = new BrokerService();
1:9a35c37:         broker.setUseJmx(false);
1:61fd811:         broker.setPersistent(true);
1:4cddd2c:         testfile = dataFileDir.newFile();
1:4cddd2c:         broker.setDataDirectoryFile(dataFileDir.getRoot());
1:61fd811:         broker.setDeleteAllMessagesOnStartup(true);
1:61fd811:         adapter = broker.getPersistenceAdapter();
1:61fd811: 
1:86ead7e:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
1:4cddd2c:         connector.setName("tcp");
1:4cddd2c: 
1:4cddd2c:         brokerConnectURI = broker.getConnectorByName("tcp").getConnectUri();
1:4cddd2c: 
2:61fd811:         FileUtils.deleteQuietly(testfile);
1:61fd811:         FileUtils.forceMkdir(adapter.getDirectory());
1:61fd811:         FileUtils.forceMkdir(broker.getTempDataStore().getDirectory());
1:61fd811: 
1:61fd811:         final SystemUsage systemUsage = broker.getSystemUsage();
1:61fd811:         tempUsage = systemUsage.getTempUsage();
1:61fd811:         storeUsage = systemUsage.getStoreUsage();
5:61fd811:     }
1:61fd811: 
1:61fd811:     protected void startBroker() throws Exception {
1:61fd811:         broker.start();
1:61fd811:         broker.waitUntilStarted();
1:61fd811:     }
1:61fd811: 
1:61fd811:     @After
1:61fd811:     public void stopBroker() throws Exception {
1:61fd811:         broker.stop();
1:61fd811:         broker.waitUntilStopped();
1:9acee62:         FileUtils.deleteQuietly(testfile);
1:61fd811:     }
1:61fd811: 
1:61fd811:     /**
1:4cddd2c:      * This test will show that if a file is written to take away free space, and
1:4cddd2c:      * if the usage limit is now less than the store size plus remaining free space, then
1:61fd811:      * the usage limits will adjust lower.
1:61fd811:      */
1:9acee62:     @Test(timeout=90000)
1:61fd811:     public void testDiskUsageAdjustLower() throws Exception {
1:61fd811:         //set the limit to max space so that if a file is added to eat up free space then
1:9acee62:         //the broker should adjust the usage limit..set time to 2 seconds for testing
1:61fd811:         setLimitMaxSpace();
1:9acee62:         broker.setSchedulePeriodForDiskUsageCheck(2000);
1:61fd811:         startBroker();
1:4cddd2c: 
1:9acee62:         assertRampDown();
1:4cddd2c:     }
1:61fd811: 
1:61fd811:     /**
1:61fd811:      * This test will show that if a file is written to take away free space, and
1:61fd811:      * if the usage limit is now less than the store size plus remaining free space, then
1:4cddd2c:      * the usage limits will adjust lower.  Then test that size regrows when file is deleted.
1:4cddd2c:      */
1:9acee62:     @Test(timeout=90000)
1:4cddd2c:     public void testDiskUsageAdjustLowerAndHigherUsingPercent() throws Exception {
1:4cddd2c:         //set the limit to max space so that if a file is added to eat up free space then
1:4cddd2c:         //the broker should adjust the usage limit..add 5% above free space
1:4cddd2c:         tempUsage.setPercentLimit(getFreePercentage(broker.getTempDataStore().getDirectory()) + 5);
1:4cddd2c:         storeUsage.setPercentLimit(getFreePercentage(adapter.getDirectory()) + 5);
1:4cddd2c: 
1:4cddd2c:         //set threshold to 1 megabyte
1:4cddd2c:         broker.setDiskUsageCheckRegrowThreshold(1024 * 1024);
1:9acee62:         broker.setSchedulePeriodForDiskUsageCheck(2000);
1:4cddd2c:         startBroker();
1:4cddd2c: 
1:9acee62:         assertRampDown();
1:4cddd2c: 
1:4cddd2c:         //get the limits and then delete the test file to free up space
1:4cddd2c:         final long storeLimit = broker.getSystemUsage().getStoreUsage().getLimit();
1:4cddd2c:         final long tmpLimit = broker.getSystemUsage().getTempUsage().getLimit();
1:4cddd2c:         FileUtils.deleteQuietly(testfile);
1:4cddd2c: 
1:4cddd2c:         //regrow
1:4cddd2c:         assertTrue("Store Usage should ramp up.", Wait.waitFor(new Wait.Condition() {
3:4cddd2c:             @Override
3:4cddd2c:             public boolean isSatisified() throws Exception {
1:4cddd2c:                 return broker.getSystemUsage().getStoreUsage().getLimit() >  storeLimit;
1:4cddd2c:             }
1:9acee62:         }, 15000));
1:4cddd2c: 
1:4cddd2c:         //regrow
1:4cddd2c:         assertTrue("Temp Usage should ramp up.", Wait.waitFor(new Wait.Condition() {
1:4cddd2c:             @Override
1:4cddd2c:             public boolean isSatisified() throws Exception {
1:4cddd2c:                 return broker.getSystemUsage().getTempUsage().getLimit() >  tmpLimit;
1:4cddd2c:             }
1:9acee62:         }, 15000));
1:61fd811:     }
1:4cddd2c: 
1:4cddd2c:     /**
1:4cddd2c:      * This test shows that the usage limits will not change if the
1:4cddd2c:      * schedulePeriodForDiskLimitCheck property is not set because no task will run
1:4cddd2c:      */
1:5107262:     @Test(timeout=60000)
1:61fd811:     public void testDiskLimitCheckNotSet() throws Exception {
1:61fd811:         setLimitMaxSpace();
1:61fd811:         startBroker();
1:61fd811: 
1:61fd811:         long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:61fd811:         long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1:61fd811: 
1:9acee62:         //write a 5 meg file to the file system
1:9acee62:         writeTestFile(5 * 1024 * 1024);
1:9acee62:         Thread.sleep(5000);
1:61fd811: 
1:61fd811:         //assert that the usage limits have not changed because a task should not have run
1:61fd811:         assertEquals(originalDisk, broker.getSystemUsage().getStoreUsage().getLimit());
1:61fd811:         assertEquals(originalTmp, broker.getSystemUsage().getTempUsage().getLimit());
1:61fd811:     }
1:61fd811: 
1:4cddd2c:     /**
1:61fd811:      * This test shows that the usage limits will not change if the
1:61fd811:      * schedulePeriodForDiskLimitCheck property is not set because no task will run
1:61fd811:      */
1:5107262:     @Test(timeout=60000)
1:4cddd2c:     public void testDiskLimitCheckNotSetUsingPercent() throws Exception {
1:4cddd2c:         tempUsage.setPercentLimit(getFreePercentage(broker.getTempDataStore().getDirectory()) + 5);
1:4cddd2c:         storeUsage.setPercentLimit(getFreePercentage(adapter.getDirectory()) + 5);
1:4cddd2c:         startBroker();
1:4cddd2c: 
1:4cddd2c:         long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:4cddd2c:         long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1:4cddd2c: 
1:d328864:         //write a 5 meg file to the file system
1:d328864:         writeTestFile(5 * 1024 * 1024);
1:9acee62:         Thread.sleep(5000);
1:61fd811: 
1:4cddd2c:         //assert that the usage limits have not changed because a task should not have run
1:61fd811:         assertEquals(originalDisk, broker.getSystemUsage().getStoreUsage().getLimit());
1:61fd811:         assertEquals(originalTmp, broker.getSystemUsage().getTempUsage().getLimit());
1:61fd811:     }
1:61fd811: 
1:61fd811:     /**
1:4cddd2c:      * This test will show that if a file is written to take away free space, but
1:4cddd2c:      * if the limit is greater than the store size and the remaining free space, then
1:4cddd2c:      * the usage limits will not adjust.
1:4cddd2c:      */
1:5107262:     @Test(timeout=60000)
1:61fd811:     public void testDiskUsageStaySame() throws Exception {
1:9acee62:         //set a limit lower than max available space and set the period to 2 seconds
1:61fd811:         tempUsage.setLimit(10000000);
1:61fd811:         storeUsage.setLimit(100000000);
1:61fd811:         broker.setSchedulePeriodForDiskUsageCheck(2000);
1:61fd811:         startBroker();
1:4cddd2c: 
1:61fd811:         long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:61fd811:         long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1:61fd811: 
1:9acee62:         //write a 2 meg file to the file system
1:9acee62:         writeTestFile(2 * 1024 * 1024);
1:61fd811:         Thread.sleep(5000);
1:4cddd2c: 
1:9acee62:         //Assert that the usage limits have not changed because writing a 2 meg file
1:61fd811:         //did not decrease the the free space below the already set limit
1:4cddd2c:         assertEquals(originalDisk, broker.getSystemUsage().getStoreUsage().getLimit());
1:4cddd2c:         assertEquals(originalTmp, broker.getSystemUsage().getTempUsage().getLimit());
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c:     /**
1:61fd811:      * This test will show that if a file is written to take away free space, but
1:61fd811:      * if the limit is greater than the store size and the remaining free space, then
1:61fd811:      * the usage limits will not adjust.
1:61fd811:      */
1:5107262:     @Test(timeout=60000)
1:4cddd2c:     public void testDiskUsageStaySameUsingPercent() throws Exception {
1:4cddd2c:         //set a limit lower than max available space and set the period to 5 seconds
1:4cddd2c:         //only run if at least 4 percent disk space free
1:4cddd2c:         int tempFreePercent = getFreePercentage(broker.getTempDataStore().getDirectory());
1:4cddd2c:         int freePercent = getFreePercentage(adapter.getDirectory());
1:4cddd2c:         if (freePercent >= 4 && tempFreePercent >= 4) {
1:4cddd2c:             tempUsage.setPercentLimit(freePercent / 2);
1:4cddd2c:             storeUsage.setPercentLimit(tempFreePercent / 2);
1:4cddd2c: 
1:4cddd2c:             broker.setSchedulePeriodForDiskUsageCheck(2000);
1:4cddd2c:             startBroker();
1:4cddd2c: 
1:4cddd2c:             long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:4cddd2c:             long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1:4cddd2c: 
1:d328864:             //write a 5 meg file to the file system
1:d328864:             writeTestFile(5 * 1024 * 1024);
1:4cddd2c:             Thread.sleep(5000);
1:4cddd2c: 
1:4cddd2c:             //Assert that the usage limits have not changed because writing a 2 meg file
1:4cddd2c:             //did not decrease the the free space below the already set limit
1:4cddd2c:             assertEquals(originalDisk, broker.getSystemUsage().getStoreUsage().getLimit());
1:4cddd2c:             assertEquals(originalTmp, broker.getSystemUsage().getTempUsage().getLimit());
1:4cddd2c:         }
1:9a35c37:         LOG.info("Not running b/c there is less that 4% disk space, freePrecent:" + freePercent);
1:4cddd2c:     }
1:61fd811: 
1:9acee62:     protected void assertRampDown() throws Exception {
1:9acee62:         //Try a couple of times because other processes could write/delete from disk
1:9acee62:         assertTrue("Store Usage should ramp down", Wait.waitFor(new Wait.Condition() {
1:9acee62: 
1:9acee62:             @Override
1:9acee62:             public boolean isSatisified() throws Exception {
1:9acee62: 
1:9acee62:                 FileUtils.deleteQuietly(testfile);
1:9acee62:                 final long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:9acee62:                 final long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1:9acee62: 
1:9acee62:                 //write a 10 meg file to the file system
1:9acee62:                 writeTestFile(10 * 1024 * 1024);
1:9acee62: 
1:9acee62:                 //Assert that the usage limits have been decreased because some free space was used
1:9acee62:                 //up by a file
1:9acee62:                 boolean storeUsageRampDown = Wait.waitFor(new Wait.Condition() {
1:9acee62:                     @Override
1:9acee62:                     public boolean isSatisified() throws Exception {
1:9acee62:                         return broker.getSystemUsage().getStoreUsage().getLimit() <  originalDisk;
1:9acee62:                     }
1:9acee62:                 }, 12000);
1:9acee62: 
1:9acee62:                 boolean tempUsageRampDown = false;
1:9acee62:                 if (storeUsageRampDown) {
1:9acee62:                     tempUsageRampDown = Wait.waitFor(new Wait.Condition() {
1:9acee62:                         @Override
1:9acee62:                         public boolean isSatisified() throws Exception {
1:9acee62:                             return broker.getSystemUsage().getTempUsage().getLimit() <  originalTmp;
1:9acee62:                         }
1:9acee62:                     }, 12000);
1:9acee62:                 }
1:9acee62: 
1:9acee62:                 return storeUsageRampDown && tempUsageRampDown;
1:9acee62:             }
1:9acee62:         }, 60000));
1:9acee62:     }
1:9acee62: 
1:61fd811:     protected void setLimitMaxSpace() {
1:61fd811:         //Configure store limits to be the max usable space on startup
1:61fd811:         tempUsage.setLimit(broker.getTempDataStore().getDirectory().getUsableSpace());
1:61fd811:         storeUsage.setLimit(adapter.getDirectory().getUsableSpace());
1:4cddd2c:     }
1:4cddd2c: 
1:61fd811:     protected void writeTestFile(int size) throws IOException {
1:61fd811:         final byte[] data = new byte[size];
1:61fd811:         final Random rng = new Random();
1:61fd811:         rng.nextBytes(data);
1:4cddd2c:         try(FileOutputStream stream = new FileOutputStream(testfile)) {
1:4cddd2c:             IOUtils.write(data, stream);
1:4cddd2c:         }
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c:     protected int getFreePercentage(File directory) {
1:4cddd2c:         File storeDir = StoreUtil.findParentDirectory(directory);
1:4cddd2c:         return (int) (((double)storeDir.getUsableSpace() / storeDir.getTotalSpace()) * 100);
1:4cddd2c:     }
1:4cddd2c: 
1:61fd811: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:9a35c37
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(false);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Not running b/c there is less that 4% disk space, freePrecent:" + freePercent);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:9acee62
/////////////////////////////////////////////////////////////////////////
1:         FileUtils.deleteQuietly(testfile);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=90000)
1:         //the broker should adjust the usage limit..set time to 2 seconds for testing
1:         broker.setSchedulePeriodForDiskUsageCheck(2000);
1:         assertRampDown();
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=90000)
/////////////////////////////////////////////////////////////////////////
1:         broker.setSchedulePeriodForDiskUsageCheck(2000);
1:         assertRampDown();
/////////////////////////////////////////////////////////////////////////
1:         }, 15000));
/////////////////////////////////////////////////////////////////////////
1:         }, 15000));
/////////////////////////////////////////////////////////////////////////
1:         //write a 5 meg file to the file system
1:         writeTestFile(5 * 1024 * 1024);
1:         Thread.sleep(5000);
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(5000);
/////////////////////////////////////////////////////////////////////////
1:         //set a limit lower than max available space and set the period to 2 seconds
/////////////////////////////////////////////////////////////////////////
1:         //write a 2 meg file to the file system
1:         writeTestFile(2 * 1024 * 1024);
1:         //Assert that the usage limits have not changed because writing a 2 meg file
/////////////////////////////////////////////////////////////////////////
1:     protected void assertRampDown() throws Exception {
1:         //Try a couple of times because other processes could write/delete from disk
1:         assertTrue("Store Usage should ramp down", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1: 
1:                 FileUtils.deleteQuietly(testfile);
1:                 final long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:                 final long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1: 
1:                 //write a 10 meg file to the file system
1:                 writeTestFile(10 * 1024 * 1024);
1: 
1:                 //Assert that the usage limits have been decreased because some free space was used
1:                 //up by a file
1:                 boolean storeUsageRampDown = Wait.waitFor(new Wait.Condition() {
1:                     @Override
1:                     public boolean isSatisified() throws Exception {
1:                         return broker.getSystemUsage().getStoreUsage().getLimit() <  originalDisk;
1:                     }
1:                 }, 12000);
1: 
1:                 boolean tempUsageRampDown = false;
1:                 if (storeUsageRampDown) {
1:                     tempUsageRampDown = Wait.waitFor(new Wait.Condition() {
1:                         @Override
1:                         public boolean isSatisified() throws Exception {
1:                             return broker.getSystemUsage().getTempUsage().getLimit() <  originalTmp;
1:                         }
1:                     }, 12000);
1:                 }
1: 
1:                 return storeUsageRampDown && tempUsageRampDown;
1:             }
1:         }, 60000));
1:     }
1: 
commit:86ead7e
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
commit:d328864
/////////////////////////////////////////////////////////////////////////
1:         //write a 5 meg file to the file system
1:         writeTestFile(5 * 1024 * 1024);
/////////////////////////////////////////////////////////////////////////
1:         //write a 5 meg file to the file system
1:         writeTestFile(5 * 1024 * 1024);
/////////////////////////////////////////////////////////////////////////
0:         //write a 5 meg file to the file system
0:         writeTestFile(5 * 1024 * 1024);
/////////////////////////////////////////////////////////////////////////
0:             //write a 5 meg file to the file system
0:             writeTestFile(5 * 1024 * 1024);
commit:5107262
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=60000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=60000)
commit:4cddd2c
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.util.StoreUtil;
1: import org.junit.Rule;
1: import org.junit.rules.TemporaryFolder;
/////////////////////////////////////////////////////////////////////////
1:     @Rule
1:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:     File testfile;
1:     protected URI brokerConnectURI;
1:         testfile = dataFileDir.newFile();
1:         broker.setDataDirectoryFile(dataFileDir.getRoot());
0:         TransportConnector connector = broker
0:                 .addConnector(new TransportConnector());
0:         connector.setUri(new URI("tcp://0.0.0.0:8000"));
1:         connector.setName("tcp");
1: 
1:         brokerConnectURI = broker.getConnectorByName("tcp").getConnectUri();
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         //write a 2 meg file to the file system
0:         writeTestFile(2 * 1024 * 1024);
/////////////////////////////////////////////////////////////////////////
1:      * This test will show that if a file is written to take away free space, and
1:      * if the usage limit is now less than the store size plus remaining free space, then
1:      * the usage limits will adjust lower.  Then test that size regrows when file is deleted.
1:      */
0:     @Test(timeout=30000)
1:     public void testDiskUsageAdjustLowerAndHigherUsingPercent() throws Exception {
1:         //set the limit to max space so that if a file is added to eat up free space then
1:         //the broker should adjust the usage limit..add 5% above free space
1:         tempUsage.setPercentLimit(getFreePercentage(broker.getTempDataStore().getDirectory()) + 5);
1:         storeUsage.setPercentLimit(getFreePercentage(adapter.getDirectory()) + 5);
1: 
1:         //set threshold to 1 megabyte
1:         broker.setDiskUsageCheckRegrowThreshold(1024 * 1024);
0:         broker.setSchedulePeriodForDiskUsageCheck(4000);
1:         startBroker();
1: 
0:         final long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
0:         final long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1: 
0:         //write a 2 meg file to the file system
0:         writeTestFile(2 * 1024 * 1024);
1: 
0:         //Assert that the usage limits have been decreased because some free space was used
0:         //up by a file
0:         assertTrue("Store Usage should ramp down.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return broker.getSystemUsage().getStoreUsage().getLimit() <  originalDisk;
1:             }
0:         }));
1: 
0:         assertTrue("Temp Usage should ramp down.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return broker.getSystemUsage().getTempUsage().getLimit() <  originalTmp;
1:             }
0:         }));
1: 
1:         //get the limits and then delete the test file to free up space
1:         final long storeLimit = broker.getSystemUsage().getStoreUsage().getLimit();
1:         final long tmpLimit = broker.getSystemUsage().getTempUsage().getLimit();
1:         FileUtils.deleteQuietly(testfile);
1: 
1:         //regrow
1:         assertTrue("Store Usage should ramp up.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getSystemUsage().getStoreUsage().getLimit() >  storeLimit;
1:             }
0:         }));
1: 
1:         //regrow
1:         assertTrue("Temp Usage should ramp up.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getSystemUsage().getTempUsage().getLimit() >  tmpLimit;
1:             }
0:         }));
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * This test shows that the usage limits will not change if the
1:      * schedulePeriodForDiskLimitCheck property is not set because no task will run
1:      */
0:     @Test(timeout=30000)
1:     public void testDiskLimitCheckNotSetUsingPercent() throws Exception {
1:         tempUsage.setPercentLimit(getFreePercentage(broker.getTempDataStore().getDirectory()) + 5);
1:         storeUsage.setPercentLimit(getFreePercentage(adapter.getDirectory()) + 5);
1:         startBroker();
1: 
1:         long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:         long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1: 
0:         //write a 2 meg file to the file system
0:         writeTestFile(2 * 1024 * 1024);
0:         Thread.sleep(3000);
1: 
1:         //assert that the usage limits have not changed because a task should not have run
1:         assertEquals(originalDisk, broker.getSystemUsage().getStoreUsage().getLimit());
1:         assertEquals(originalTmp, broker.getSystemUsage().getTempUsage().getLimit());
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * This test will show that if a file is written to take away free space, but
1:      * if the limit is greater than the store size and the remaining free space, then
1:      * the usage limits will not adjust.
1:      */
0:     @Test(timeout=30000)
1:     public void testDiskUsageStaySameUsingPercent() throws Exception {
1:         //set a limit lower than max available space and set the period to 5 seconds
1:         //only run if at least 4 percent disk space free
1:         int tempFreePercent = getFreePercentage(broker.getTempDataStore().getDirectory());
1:         int freePercent = getFreePercentage(adapter.getDirectory());
1:         if (freePercent >= 4 && tempFreePercent >= 4) {
1:             tempUsage.setPercentLimit(freePercent / 2);
1:             storeUsage.setPercentLimit(tempFreePercent / 2);
1: 
1:             broker.setSchedulePeriodForDiskUsageCheck(2000);
1:             startBroker();
1: 
1:             long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:             long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1: 
0:             //write a 2 meg file to the file system
0:             writeTestFile(2 * 1024 * 1024);
1:             Thread.sleep(5000);
1: 
1:             //Assert that the usage limits have not changed because writing a 2 meg file
1:             //did not decrease the the free space below the already set limit
1:             assertEquals(originalDisk, broker.getSystemUsage().getStoreUsage().getLimit());
1:             assertEquals(originalTmp, broker.getSystemUsage().getTempUsage().getLimit());
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         try(FileOutputStream stream = new FileOutputStream(testfile)) {
1:             IOUtils.write(data, stream);
1:         }
1:     }
1: 
1:     protected int getFreePercentage(File directory) {
1:         File storeDir = StoreUtil.findParentDirectory(directory);
1:         return (int) (((double)storeDir.getUsableSpace() / storeDir.getTotalSpace()) * 100);
commit:61fd811
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usage;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.util.Random;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.usage.StoreUsage;
0: import org.apache.activemq.usage.SystemUsage;
0: import org.apache.activemq.usage.TempUsage;
1: import org.apache.activemq.util.Wait;
1: import org.apache.commons.io.FileUtils;
1: import org.apache.commons.io.IOUtils;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  *
1:  * This test is for AMQ-5393  and will check that schedulePeriodForDiskLimitCheck
1:  * properly schedules a task that will update disk limits if the amount of usable disk space drops
1:  * because another process uses up disk space.
1:  *
1:  */
1: public class PeriodicDiskUsageLimitTest {
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(PeriodicDiskUsageLimitTest.class);
1: 
0:     File dataFileDir = new File("target/test-amq-5393/datadb");
0:     File testfile = new File("target/test-amq-5393/testfile");
1:     private BrokerService broker;
1:     private PersistenceAdapter adapter;
1:     private TempUsage tempUsage;
1:     private StoreUsage storeUsage;
1: 
1:     @Before
1:     public void setUpBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(true);
0:         broker.setDataDirectoryFile(dataFileDir);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         adapter = broker.getPersistenceAdapter();
1: 
1:         FileUtils.deleteQuietly(testfile);
1:         FileUtils.forceMkdir(adapter.getDirectory());
1:         FileUtils.forceMkdir(broker.getTempDataStore().getDirectory());
1: 
1:         final SystemUsage systemUsage = broker.getSystemUsage();
1:         tempUsage = systemUsage.getTempUsage();
1:         storeUsage = systemUsage.getStoreUsage();
1:     }
1: 
1:     protected void startBroker() throws Exception {
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         FileUtils.deleteQuietly(testfile);
0:         FileUtils.deleteQuietly(dataFileDir);
1:     }
1: 
1:     /**
1:      * This test will show that if a file is written to take away free space, and
1:      * if the usage limit is now less than the store size plus remaining free space, then
1:      * the usage limits will adjust lower.
1:      */
0:     @Test(timeout=30000)
1:     public void testDiskUsageAdjustLower() throws Exception {
1:         //set the limit to max space so that if a file is added to eat up free space then
0:         //the broker should adjust the usage limit..set time to 5 seconds for testing
1:         setLimitMaxSpace();
0:         broker.setSchedulePeriodForDiskUsageCheck(4000);
1:         startBroker();
1: 
0:         final long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
0:         final long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1: 
0:         //write a 1 meg file to the file system
0:         writeTestFile(1024 * 1024);
1: 
0:         //Assert that the usage limits have been decreased because some free space was used
0:         //up by a file
0:         assertTrue("Store Usage should ramp down.", Wait.waitFor(new Wait.Condition() {
0:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return broker.getSystemUsage().getStoreUsage().getLimit() <  originalDisk;
1:             }
0:         }));
1: 
0:         assertTrue("Temp Usage should ramp down.", Wait.waitFor(new Wait.Condition() {
0:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return broker.getSystemUsage().getTempUsage().getLimit() <  originalTmp;
1:             }
0:         }));
1:     }
1: 
1:     /**
1:      * This test shows that the usage limits will not change if the
1:      * schedulePeriodForDiskLimitCheck property is not set because no task will run
1:      */
0:     @Test(timeout=30000)
1:     public void testDiskLimitCheckNotSet() throws Exception {
1:         setLimitMaxSpace();
1:         startBroker();
1: 
1:         long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:         long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1: 
0:         //write a 1 meg file to the file system
0:         writeTestFile(1024 * 1024);
0:         Thread.sleep(3000);
1: 
1:         //assert that the usage limits have not changed because a task should not have run
1:         assertEquals(originalDisk, broker.getSystemUsage().getStoreUsage().getLimit());
1:         assertEquals(originalTmp, broker.getSystemUsage().getTempUsage().getLimit());
1:     }
1: 
1:     /**
1:      * This test will show that if a file is written to take away free space, but
1:      * if the limit is greater than the store size and the remaining free space, then
1:      * the usage limits will not adjust.
1:      */
0:     @Test(timeout=30000)
1:     public void testDiskUsageStaySame() throws Exception {
0:         //set a limit lower than max available space and set the period to 5 seconds
1:         tempUsage.setLimit(10000000);
1:         storeUsage.setLimit(100000000);
1:         broker.setSchedulePeriodForDiskUsageCheck(2000);
1:         startBroker();
1: 
1:         long originalDisk = broker.getSystemUsage().getStoreUsage().getLimit();
1:         long originalTmp = broker.getSystemUsage().getTempUsage().getLimit();
1: 
0:         //write a 1 meg file to the file system
0:         writeTestFile(1024 * 1024);
1:         Thread.sleep(5000);
1: 
0:         //Assert that the usage limits have not changed because writing a 1 meg file
1:         //did not decrease the the free space below the already set limit
1:         assertEquals(originalDisk, broker.getSystemUsage().getStoreUsage().getLimit());
1:         assertEquals(originalTmp, broker.getSystemUsage().getTempUsage().getLimit());
1:     }
1: 
1:     protected void setLimitMaxSpace() {
1:         //Configure store limits to be the max usable space on startup
1:         tempUsage.setLimit(broker.getTempDataStore().getDirectory().getUsableSpace());
1:         storeUsage.setLimit(adapter.getDirectory().getUsableSpace());
1:     }
1: 
1:     protected void writeTestFile(int size) throws IOException {
1:         final byte[] data = new byte[size];
1:         final Random rng = new Random();
1:         rng.nextBytes(data);
0:         IOUtils.write(data, new FileOutputStream(testfile));
1:     }
1: 
1: }
============================================================================