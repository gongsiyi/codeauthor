1:bc7e759: /**
1:bc7e759:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc7e759:  * contributor license agreements.  See the NOTICE file distributed with
1:bc7e759:  * this work for additional information regarding copyright ownership.
1:bc7e759:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc7e759:  * (the "License"); you may not use this file except in compliance with
1:bc7e759:  * the License.  You may obtain a copy of the License at
1:bc7e759:  *
1:bc7e759:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bc7e759:  *
1:bc7e759:  * Unless required by applicable law or agreed to in writing, software
1:bc7e759:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc7e759:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc7e759:  * See the License for the specific language governing permissions and
1:bc7e759:  * limitations under the License.
1:bc7e759:  */
1:bc7e759: package org.apache.activemq.usecases;
4:bc7e759: 
1:bc7e759: import java.net.URI;
1:bc7e759: import java.util.ArrayList;
1:bc7e759: import java.util.List;
1:bc7e759: import java.util.concurrent.CountDownLatch;
1:bc7e759: import java.util.concurrent.TimeUnit;
1:bc7e759: 
1:bc7e759: import javax.jms.Destination;
1:bc7e759: 
1:bc7e759: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:bc7e759: import org.apache.activemq.broker.BrokerService;
1:bc7e759: import org.apache.activemq.broker.region.Queue;
1:bc7e759: import org.apache.activemq.broker.region.RegionBroker;
1:bc7e759: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:bc7e759: import org.apache.activemq.broker.region.policy.PolicyMap;
1:bc7e759: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:bc7e759: import org.apache.activemq.command.ActiveMQDestination;
1:bc7e759: import org.apache.activemq.usage.SystemUsage;
1:bc7e759: 
1:bc7e759: public class QueueMemoryFullMultiBrokersTest extends JmsMultipleBrokersTestSupport {
1:bc7e759:     public static final int BROKER_COUNT = 2;
1:bc7e759:     public static final int MESSAGE_COUNT = 2000;
1:bc7e759:    
1:bc7e759:     public void testQueueNetworkWithConsumerFull() throws Exception {
1:bc7e759:         
1:bc7e759:         bridgeAllBrokers();
1:bc7e759:         startAllBrokers();
1:bc7e759: 
1:bc7e759:         Destination dest = createDestination("TEST.FOO", false);
1:bc7e759: 
1:bc7e759:         sendMessages("Broker1", dest, 50);
1:bc7e759: 
1:bc7e759:         CountDownLatch latch = new CountDownLatch(MESSAGE_COUNT);
1:bc7e759:         createConsumer("Broker2", dest, latch);
1:bc7e759:         assertConsumersConnect("Broker1", dest, 1, 30000);
1:bc7e759:         sendMessages("Broker1", dest, MESSAGE_COUNT - 50);
1:bc7e759: 
1:bc7e759:         // Wait for messages to be delivered
1:bc7e759:         assertTrue("Missing " + latch.getCount() + " messages", latch.await(45, TimeUnit.SECONDS));
1:bc7e759:         
1:bc7e759:         // verify stats, all messages acked
1:bc7e759:         BrokerService broker1 = brokers.get("Broker1").broker;
1:bc7e759:         RegionBroker regionBroker = (RegionBroker) broker1.getRegionBroker();
1:bc7e759:         // give the acks a chance to flow
1:bc7e759:         Thread.sleep(2000);
1:bc7e759:         Queue internalQueue = (Queue) regionBroker.getDestinations(ActiveMQDestination.transform(dest)).iterator().next(); 
1:bc7e759:         
1:bc7e759:         assertTrue("All messages are consumed and acked from source:" + internalQueue, internalQueue.getMessages().isEmpty());
1:bc7e759:         assertEquals("messages source:" + internalQueue, 0, internalQueue.getDestinationStatistics().getMessages().getCount());
1:bc7e759:         assertEquals("inflight source:" + internalQueue, 0, internalQueue.getDestinationStatistics().getInflight().getCount());
1:bc7e759:     }
1:bc7e759: 
1:bc7e759:     public void setUp() throws Exception {
1:bc7e759:         super.setAutoFail(true);
1:bc7e759:         super.setUp();
1:bc7e759:         messageSize = 1024;
1:bc7e759:         
1:bc7e759:         // Setup n brokers
1:bc7e759:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:bc7e759:             createBroker(new URI("broker:()/Broker" + i + "?persistent=false&useJmx=false"));
1:bc7e759:         }
1:bc7e759:         BrokerService broker2 = brokers.get("Broker2").broker;
1:bc7e759:         applyMemoryLimitPolicy(broker2);
1:bc7e759:     }
1:bc7e759: 
1:bc7e759:     private void applyMemoryLimitPolicy(BrokerService broker) {
1:bc7e759:         final SystemUsage memoryManager = new SystemUsage();
1:bc7e759:         memoryManager.getMemoryUsage().setLimit(1024 * 50); // 50 MB
1:bc7e759:         broker.setSystemUsage(memoryManager);
1:bc7e759: 
1:bc7e759:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:bc7e759:         final PolicyEntry entry = new PolicyEntry();
1:bc7e759:         entry.setQueue(">");
1:bc7e759:         entry.setMemoryLimit(1024 * 4); // Set to 2 kb
1:bc7e759:         entry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:bc7e759:         policyEntries.add(entry);
1:bc7e759: 
1:bc7e759:         final PolicyMap policyMap = new PolicyMap();
1:bc7e759:         policyMap.setPolicyEntries(policyEntries);
1:bc7e759:         broker.setDestinationPolicy(policyMap);
1:bc7e759:         
1:bc7e759:     }
1:bc7e759: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:81f0cc0
/////////////////////////////////////////////////////////////////////////
commit:fdee6e8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:bc7e759
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Destination;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.usage.SystemUsage;
1: 
1: public class QueueMemoryFullMultiBrokersTest extends JmsMultipleBrokersTestSupport {
1:     public static final int BROKER_COUNT = 2;
1:     public static final int MESSAGE_COUNT = 2000;
1:    
1:     public void testQueueNetworkWithConsumerFull() throws Exception {
0:         if (true) return;
1:         
1:         bridgeAllBrokers();
1:         startAllBrokers();
1: 
1:         Destination dest = createDestination("TEST.FOO", false);
1: 
1:         sendMessages("Broker1", dest, 50);
1: 
1:         CountDownLatch latch = new CountDownLatch(MESSAGE_COUNT);
1:         createConsumer("Broker2", dest, latch);
1:         assertConsumersConnect("Broker1", dest, 1, 30000);
1:         sendMessages("Broker1", dest, MESSAGE_COUNT - 50);
1: 
1:         // Wait for messages to be delivered
1:         assertTrue("Missing " + latch.getCount() + " messages", latch.await(45, TimeUnit.SECONDS));
1:         
1:         // verify stats, all messages acked
1:         BrokerService broker1 = brokers.get("Broker1").broker;
1:         RegionBroker regionBroker = (RegionBroker) broker1.getRegionBroker();
1:         // give the acks a chance to flow
1:         Thread.sleep(2000);
1:         Queue internalQueue = (Queue) regionBroker.getDestinations(ActiveMQDestination.transform(dest)).iterator().next(); 
0:         System.err.println(internalQueue);
1:         
1:         assertTrue("All messages are consumed and acked from source:" + internalQueue, internalQueue.getMessages().isEmpty());
1:         assertEquals("messages source:" + internalQueue, 0, internalQueue.getDestinationStatistics().getMessages().getCount());
1:         assertEquals("inflight source:" + internalQueue, 0, internalQueue.getDestinationStatistics().getInflight().getCount());
1:         
1: 
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         messageSize = 1024;
1:         
1:         // Setup n brokers
1:         for (int i = 1; i <= BROKER_COUNT; i++) {
1:             createBroker(new URI("broker:()/Broker" + i + "?persistent=false&useJmx=false"));
1:         }
1:         BrokerService broker2 = brokers.get("Broker2").broker;
1:         applyMemoryLimitPolicy(broker2);
1:         
1:     }
1: 
1:     private void applyMemoryLimitPolicy(BrokerService broker) {
1:         final SystemUsage memoryManager = new SystemUsage();
1:         memoryManager.getMemoryUsage().setLimit(1024 * 50); // 50 MB
1:         broker.setSystemUsage(memoryManager);
1: 
1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         final PolicyEntry entry = new PolicyEntry();
1:         entry.setQueue(">");
1:         entry.setMemoryLimit(1024 * 4); // Set to 2 kb
1:         entry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         policyEntries.add(entry);
1: 
1:         final PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(policyEntries);
1:         broker.setDestinationPolicy(policyMap);
1:         
1:     }
1: }
============================================================================