1:ce4c065: /**
1:ce4c065:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ce4c065:  * contributor license agreements.  See the NOTICE file distributed with
1:ce4c065:  * this work for additional information regarding copyright ownership.
1:ce4c065:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ce4c065:  * (the "License"); you may not use this file except in compliance with
1:ce4c065:  * the License.  You may obtain a copy of the License at
1:ce4c065:  *
1:ce4c065:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ce4c065:  *
1:ce4c065:  * Unless required by applicable law or agreed to in writing, software
1:ce4c065:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ce4c065:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ce4c065:  * See the License for the specific language governing permissions and
1:ce4c065:  * limitations under the License.
1:ce4c065:  */
1:ce4c065: package org.apache.activemq.console.command;
1:ce4c065: 
1:ce4c065: 
1:ce4c065: import java.util.Collection;
1:ce4c065: import java.util.Iterator;
1:ce4c065: import java.util.List;
1:ce4c065: 
1:ce4c065: import javax.management.MBeanServerConnection;
1:ce4c065: import javax.management.ObjectInstance;
1:ce4c065: import javax.management.ObjectName;
1:ce4c065: 
1:ce4c065: 
1:ce4c065: /**
1:ce4c065:  * A StopGracefullyCommand
1:ce4c065:  *
1:ce4c065:  */
1:ce4c065: public class StopGracefullyCommand extends ShutdownCommand {
1:ce4c065:     
1:60646c9:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "stop-gracefully";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Stops a running broker gracefully.";
1:60646c9:     }
1:60646c9: 
1:ce4c065:         protected String connectorName, queueName;
1:ce4c065:         protected long timeout;
1:ce4c065:         protected long pollInterval;
1:ce4c065:         /**
1:ce4c065:          * Constructor
1:ce4c065:          */
1:ce4c065:         public StopGracefullyCommand(){
1:ce4c065:             super();
1:ce4c065:             this.helpFile = new String[] {
1:ce4c065:                 "Task Usage: Main stopGracefully [stop-options] [broker-name1] [broker-name2] ...",
1:ce4c065:                 "Description: Stops a running broker if there is no pending messages in the queues. It first stops the connector for client connection, then check queuesize until it becomes 0 before stop the broker.",
1:ce4c065:                 "", 
1:ce4c065:                 "Stop Options:",
1:ce4c065:                 "    --connectorName <connectorName> connectorName to stop",
1:ce4c065:                 "    --queueName <queueName>         check the queuesize of the queueName for pending message",
1:ce4c065:                 "    --timeout <timeout>             periodically check the queuesize before the timeout expires",
1:ce4c065:                 "    --pollInterval <pollInterval>   the time interval it checks the queuesize",
1:ce4c065:                 "    --jmxurl <url>             Set the JMX URL to connect to.",
1:ce4c065:                 "    --jmxuser <user>           Set the JMX user used for authenticating.",
1:ce4c065:                 "    --jmxpassword <password>   Set the JMX password used for authenticating.",
1:ce4c065:                 "    --jmxlocal                 Use the local JMX server instead of a remote one.",
1:ce4c065:                 "    --localProcessId           Use the local process id to connect( ignore jmxurl, jmxuser, jmxpassword), need to be root to use this option",
1:ce4c065:                 "    --all                      Stop all brokers.",
1:ce4c065:                 "    --version                  Display the version information.",
1:ce4c065:                 "    -h,-?,--help               Display the stop broker help information.",
1:ce4c065:                 "",
1:ce4c065:                 "Broker Names:",
1:ce4c065:                 "    Name of the brokers that will be stopped.",
1:ce4c065:                 "    If omitted, it is assumed that there is only one broker running, and it will be stopped.",
1:ce4c065:                 "    Use -all to stop all running brokers.",
1:ce4c065:                 ""
1:ce4c065:             };
1:ce4c065:         }
1:ce4c065: 
1:ce4c065:         /**
1:ce4c065:          * Stops the list of brokers.
1:ce4c065:          * 
1:ce4c065:          * @param jmxConnection - connection to the mbean server
1:ce4c065:          * @param brokerBeans - broker mbeans to stop @throws Exception
1:ce4c065:          */
1:ce4c065:         protected void stopBrokers(MBeanServerConnection jmxConnection, Collection brokerBeans) throws Exception {
1:ce4c065:             ObjectName brokerObjName;
1:ce4c065:             for (Iterator i = brokerBeans.iterator(); i.hasNext();) {
1:ce4c065:                 brokerObjName = ((ObjectInstance)i.next()).getObjectName();
1:ce4c065: 
1:ce4c065:                 String brokerName = brokerObjName.getKeyProperty("BrokerName");
1:ce4c065:                 context.print("Stopping broker: " + brokerName);
1:ce4c065: 
1:ce4c065:                 try {
1:ce4c065:                     jmxConnection.invoke(brokerObjName, "stopGracefully", new Object[] {
1:ce4c065:                        connectorName, queueName, timeout, pollInterval
1:ce4c065:                     }, new String[] {
1:ce4c065:                         "java.lang.String", "java.lang.String", "long", "long"
1:ce4c065:                     });
1:ce4c065:                     context.print("Succesfully stopped broker: " + brokerName);
1:ce4c065:                 } catch (Exception e) {
1:ce4c065:                     if(!(e.getMessage().startsWith("Error unmarshaling return header"))){
1:ce4c065:                         context.print("Exception:"+e.getMessage());
1:ce4c065:                     }
1:ce4c065:                 }
1:ce4c065:             }
1:ce4c065: 
1:ce4c065:             closeJmxConnection();
1:ce4c065:         }
1:ce4c065:     /**
1:ce4c065:      * @param token - option token to handle
1:ce4c065:      * @param tokens - succeeding command arguments
1:ce4c065:      * @throws Exception
1:ce4c065:      */
1:ce4c065:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:ce4c065:         // Try to handle the options first
1:ce4c065:         if (token.equals("--connectorName")) {
1:ce4c065:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:ce4c065:                 context.printException(new IllegalArgumentException("connectorName not specified"));
1:ce4c065:                 return;
1:ce4c065:             }
1:ce4c065: 
1:ce4c065:             connectorName=(String)tokens.remove(0);
1:ce4c065:         } else if (token.equals("--timeout")) {
1:ce4c065:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:ce4c065:                 context.printException(new IllegalArgumentException("timeout not specified"));
1:ce4c065:                 return;
1:ce4c065:             }
1:ce4c065:             timeout=Long.parseLong(tokens.remove(0));
1:ce4c065:         } else if (token.equals("--pollInterval")) {
1:ce4c065:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:ce4c065:                 context.printException(new IllegalArgumentException("pollInterval not specified"));
1:ce4c065:                 return;
1:ce4c065:             }
1:ce4c065:             pollInterval=Long.parseLong(tokens.remove(0));
1:ce4c065:         }else if(token.equals("--queueName")) {
1:ce4c065:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:ce4c065:                 context.printException(new IllegalArgumentException("queueName not specified"));
1:ce4c065:                 return;
1:ce4c065:             }
1:ce4c065:             queueName=(String)tokens.remove(0);
1:ce4c065:         }else {
1:ce4c065:             // Let the super class handle the option
1:ce4c065:             super.handleOption(token, tokens);
1:ce4c065:         }
1:ce4c065:     }
1:ce4c065: 
1:ce4c065: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getName() {
1:         return "stop-gracefully";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Stops a running broker gracefully.";
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:ce4c065
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
1: 
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: 
1: 
1: /**
1:  * A StopGracefullyCommand
1:  *
1:  */
1: public class StopGracefullyCommand extends ShutdownCommand {
1:     
1:         protected String connectorName, queueName;
1:         protected long timeout;
1:         protected long pollInterval;
1:         /**
1:          * Constructor
1:          */
1:         public StopGracefullyCommand(){
1:             super();
1:             this.helpFile = new String[] {
1:                 "Task Usage: Main stopGracefully [stop-options] [broker-name1] [broker-name2] ...",
1:                 "Description: Stops a running broker if there is no pending messages in the queues. It first stops the connector for client connection, then check queuesize until it becomes 0 before stop the broker.",
1:                 "", 
1:                 "Stop Options:",
1:                 "    --connectorName <connectorName> connectorName to stop",
1:                 "    --queueName <queueName>         check the queuesize of the queueName for pending message",
1:                 "    --timeout <timeout>             periodically check the queuesize before the timeout expires",
1:                 "    --pollInterval <pollInterval>   the time interval it checks the queuesize",
1:                 "    --jmxurl <url>             Set the JMX URL to connect to.",
1:                 "    --jmxuser <user>           Set the JMX user used for authenticating.",
1:                 "    --jmxpassword <password>   Set the JMX password used for authenticating.",
1:                 "    --jmxlocal                 Use the local JMX server instead of a remote one.",
1:                 "    --localProcessId           Use the local process id to connect( ignore jmxurl, jmxuser, jmxpassword), need to be root to use this option",
1:                 "    --all                      Stop all brokers.",
1:                 "    --version                  Display the version information.",
1:                 "    -h,-?,--help               Display the stop broker help information.",
1:                 "",
1:                 "Broker Names:",
1:                 "    Name of the brokers that will be stopped.",
1:                 "    If omitted, it is assumed that there is only one broker running, and it will be stopped.",
1:                 "    Use -all to stop all running brokers.",
1:                 ""
1:             };
1:         }
1: 
1:         /**
1:          * Stops the list of brokers.
1:          * 
1:          * @param jmxConnection - connection to the mbean server
1:          * @param brokerBeans - broker mbeans to stop @throws Exception
1:          */
1:         protected void stopBrokers(MBeanServerConnection jmxConnection, Collection brokerBeans) throws Exception {
1:             ObjectName brokerObjName;
1:             for (Iterator i = brokerBeans.iterator(); i.hasNext();) {
1:                 brokerObjName = ((ObjectInstance)i.next()).getObjectName();
1: 
1:                 String brokerName = brokerObjName.getKeyProperty("BrokerName");
1:                 context.print("Stopping broker: " + brokerName);
1: 
1:                 try {
1:                     jmxConnection.invoke(brokerObjName, "stopGracefully", new Object[] {
1:                        connectorName, queueName, timeout, pollInterval
1:                     }, new String[] {
1:                         "java.lang.String", "java.lang.String", "long", "long"
1:                     });
1:                     context.print("Succesfully stopped broker: " + brokerName);
1:                 } catch (Exception e) {
1:                     if(!(e.getMessage().startsWith("Error unmarshaling return header"))){
1:                         context.print("Exception:"+e.getMessage());
1:                     }
1:                 }
1:             }
1: 
1:             closeJmxConnection();
1:         }
1:     /**
1:      * @param token - option token to handle
1:      * @param tokens - succeeding command arguments
1:      * @throws Exception
1:      */
1:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:         // Try to handle the options first
1:         if (token.equals("--connectorName")) {
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:                 context.printException(new IllegalArgumentException("connectorName not specified"));
1:                 return;
1:             }
1: 
1:             connectorName=(String)tokens.remove(0);
1:         } else if (token.equals("--timeout")) {
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:                 context.printException(new IllegalArgumentException("timeout not specified"));
1:                 return;
1:             }
1:             timeout=Long.parseLong(tokens.remove(0));
1:         } else if (token.equals("--pollInterval")) {
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:                 context.printException(new IllegalArgumentException("pollInterval not specified"));
1:                 return;
1:             }
1:             pollInterval=Long.parseLong(tokens.remove(0));
1:         }else if(token.equals("--queueName")) {
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:                 context.printException(new IllegalArgumentException("queueName not specified"));
1:                 return;
1:             }
1:             queueName=(String)tokens.remove(0);
1:         }else {
1:             // Let the super class handle the option
1:             super.handleOption(token, tokens);
1:         }
1:     }
1: 
1: }
============================================================================