1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: package org.apache.activemq.store.kahadb.scheduler.legacy;
1:74846bb: 
1:74846bb: import java.io.DataInput;
1:74846bb: import java.io.DataOutput;
1:74846bb: import java.io.IOException;
1:74846bb: import java.util.ArrayList;
1:74846bb: import java.util.Iterator;
1:74846bb: import java.util.List;
1:74846bb: import java.util.Map;
1:74846bb: 
1:74846bb: import org.apache.activemq.store.kahadb.disk.index.BTreeIndex;
1:74846bb: import org.apache.activemq.store.kahadb.disk.journal.Location;
1:74846bb: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:74846bb: import org.apache.activemq.store.kahadb.disk.util.LongMarshaller;
1:74846bb: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
1:74846bb: import org.apache.activemq.util.ByteSequence;
1:74846bb: import org.apache.activemq.util.ServiceStopper;
1:74846bb: import org.apache.activemq.util.ServiceSupport;
1:74846bb: 
1:74846bb: /**
1:74846bb:  * Read-only view of a stored legacy JobScheduler instance.
1:74846bb:  */
1:74846bb: final class LegacyJobSchedulerImpl extends ServiceSupport {
1:74846bb: 
1:74846bb:     private final LegacyJobSchedulerStoreImpl store;
1:74846bb:     private String name;
1:74846bb:     private BTreeIndex<Long, List<LegacyJobLocation>> index;
1:74846bb: 
1:74846bb:     LegacyJobSchedulerImpl(LegacyJobSchedulerStoreImpl store) {
1:74846bb:         this.store = store;
1:74846bb:     }
1:74846bb: 
1:74846bb:     public void setName(String name) {
1:74846bb:         this.name = name;
1:74846bb:     }
1:74846bb: 
1:74846bb:     public String getName() {
1:74846bb:         return this.name;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Returns the next time that a job would be scheduled to run.
1:74846bb:      *
1:74846bb:      * @return time of next scheduled job to run.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while fetching the time.
1:74846bb:      */
1:74846bb:     public long getNextScheduleTime() throws IOException {
1:74846bb:         Map.Entry<Long, List<LegacyJobLocation>> first = this.index.getFirst(this.store.getPageFile().tx());
1:74846bb:         return first != null ? first.getKey() : -1l;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Gets the list of the next batch of scheduled jobs in the store.
1:74846bb:      *
1:74846bb:      * @return a list of the next jobs that will run.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while fetching the jobs list.
1:74846bb:      */
1:74846bb:     public List<LegacyJobImpl> getNextScheduleJobs() throws IOException {
1:74846bb:         final List<LegacyJobImpl> result = new ArrayList<LegacyJobImpl>();
1:74846bb: 
1:74846bb:         this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
1:74846bb:             @Override
1:74846bb:             public void execute(Transaction tx) throws IOException {
1:74846bb:                 Map.Entry<Long, List<LegacyJobLocation>> first = index.getFirst(store.getPageFile().tx());
1:74846bb:                 if (first != null) {
1:74846bb:                     for (LegacyJobLocation jl : first.getValue()) {
1:74846bb:                         ByteSequence bs = getPayload(jl.getLocation());
1:74846bb:                         LegacyJobImpl job = new LegacyJobImpl(jl, bs);
1:74846bb:                         result.add(job);
1:74846bb:                     }
1:74846bb:                 }
1:74846bb:             }
1:74846bb:         });
1:74846bb:         return result;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Gets a list of all scheduled jobs in this store.
1:74846bb:      *
1:74846bb:      * @return a list of all the currently scheduled jobs in this store.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while fetching the list of jobs.
1:74846bb:      */
1:74846bb:     public List<LegacyJobImpl> getAllJobs() throws IOException {
1:74846bb:         final List<LegacyJobImpl> result = new ArrayList<LegacyJobImpl>();
1:74846bb:         this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
1:74846bb:             @Override
1:74846bb:             public void execute(Transaction tx) throws IOException {
1:74846bb:                 Iterator<Map.Entry<Long, List<LegacyJobLocation>>> iter = index.iterator(store.getPageFile().tx());
1:74846bb:                 while (iter.hasNext()) {
1:74846bb:                     Map.Entry<Long, List<LegacyJobLocation>> next = iter.next();
1:74846bb:                     if (next != null) {
1:74846bb:                         for (LegacyJobLocation jl : next.getValue()) {
1:74846bb:                             ByteSequence bs = getPayload(jl.getLocation());
1:74846bb:                             LegacyJobImpl job = new LegacyJobImpl(jl, bs);
1:74846bb:                             result.add(job);
1:74846bb:                         }
1:74846bb:                     } else {
1:74846bb:                         break;
1:74846bb:                     }
1:74846bb:                 }
1:74846bb:             }
1:74846bb:         });
1:74846bb:         return result;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Gets a list of all scheduled jobs that exist between the given start and end time.
1:74846bb:      *
1:74846bb:      * @param start
1:74846bb:      *      The start time to look for scheduled jobs.
1:74846bb:      * @param finish
1:74846bb:      *      The end time to stop looking for scheduled jobs.
1:74846bb:      *
1:74846bb:      * @return a list of all scheduled jobs that would run between the given start and end time.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while fetching the list of jobs.
1:74846bb:      */
1:74846bb:     public List<LegacyJobImpl> getAllJobs(final long start, final long finish) throws IOException {
1:74846bb:         final List<LegacyJobImpl> result = new ArrayList<LegacyJobImpl>();
1:74846bb:         this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
1:74846bb:             @Override
1:74846bb:             public void execute(Transaction tx) throws IOException {
1:74846bb:                 Iterator<Map.Entry<Long, List<LegacyJobLocation>>> iter = index.iterator(store.getPageFile().tx(), start);
1:74846bb:                 while (iter.hasNext()) {
1:74846bb:                     Map.Entry<Long, List<LegacyJobLocation>> next = iter.next();
1:74846bb:                     if (next != null && next.getKey().longValue() <= finish) {
1:74846bb:                         for (LegacyJobLocation jl : next.getValue()) {
1:74846bb:                             ByteSequence bs = getPayload(jl.getLocation());
1:74846bb:                             LegacyJobImpl job = new LegacyJobImpl(jl, bs);
1:74846bb:                             result.add(job);
1:74846bb:                         }
1:74846bb:                     } else {
1:74846bb:                         break;
1:74846bb:                     }
1:74846bb:                 }
1:74846bb:             }
1:74846bb:         });
1:74846bb:         return result;
1:74846bb:     }
1:74846bb: 
1:74846bb:     ByteSequence getPayload(Location location) throws IllegalStateException, IOException {
1:74846bb:         return this.store.getPayload(location);
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public String toString() {
1:74846bb:         return "LegacyJobScheduler: " + this.name;
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     protected void doStart() throws Exception {
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     protected void doStop(ServiceStopper stopper) throws Exception {
1:74846bb:     }
1:74846bb: 
1:74846bb:     void createIndexes(Transaction tx) throws IOException {
1:74846bb:         this.index = new BTreeIndex<Long, List<LegacyJobLocation>>(this.store.getPageFile(), tx.allocate().getPageId());
1:74846bb:     }
1:74846bb: 
1:74846bb:     void load(Transaction tx) throws IOException {
1:74846bb:         this.index.setKeyMarshaller(LongMarshaller.INSTANCE);
1:74846bb:         this.index.setValueMarshaller(ValueMarshaller.INSTANCE);
1:74846bb:         this.index.load(tx);
1:74846bb:     }
1:74846bb: 
1:74846bb:     void read(DataInput in) throws IOException {
1:74846bb:         this.name = in.readUTF();
1:74846bb:         this.index = new BTreeIndex<Long, List<LegacyJobLocation>>(this.store.getPageFile(), in.readLong());
1:74846bb:         this.index.setKeyMarshaller(LongMarshaller.INSTANCE);
1:74846bb:         this.index.setValueMarshaller(ValueMarshaller.INSTANCE);
1:74846bb:     }
1:74846bb: 
1:74846bb:     public void write(DataOutput out) throws IOException {
1:74846bb:         out.writeUTF(name);
1:74846bb:         out.writeLong(this.index.getPageId());
1:74846bb:     }
1:74846bb: 
1:74846bb:     static class ValueMarshaller extends VariableMarshaller<List<LegacyJobLocation>> {
1:74846bb:         static ValueMarshaller INSTANCE = new ValueMarshaller();
1:74846bb: 
1:74846bb:         @Override
1:74846bb:         public List<LegacyJobLocation> readPayload(DataInput dataIn) throws IOException {
1:74846bb:             List<LegacyJobLocation> result = new ArrayList<LegacyJobLocation>();
1:74846bb:             int size = dataIn.readInt();
1:74846bb:             for (int i = 0; i < size; i++) {
1:74846bb:                 LegacyJobLocation jobLocation = new LegacyJobLocation();
1:74846bb:                 jobLocation.readExternal(dataIn);
1:74846bb:                 result.add(jobLocation);
1:74846bb:             }
1:74846bb:             return result;
1:74846bb:         }
1:74846bb: 
1:74846bb:         @Override
1:74846bb:         public void writePayload(List<LegacyJobLocation> value, DataOutput dataOut) throws IOException {
1:74846bb:             dataOut.writeInt(value.size());
1:74846bb:             for (LegacyJobLocation jobLocation : value) {
1:74846bb:                 jobLocation.writeExternal(dataOut);
1:74846bb:             }
1:74846bb:         }
1:74846bb:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.scheduler.legacy;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.activemq.store.kahadb.disk.index.BTreeIndex;
1: import org.apache.activemq.store.kahadb.disk.journal.Location;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.apache.activemq.store.kahadb.disk.util.LongMarshaller;
1: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.util.ServiceSupport;
1: 
1: /**
1:  * Read-only view of a stored legacy JobScheduler instance.
1:  */
1: final class LegacyJobSchedulerImpl extends ServiceSupport {
1: 
1:     private final LegacyJobSchedulerStoreImpl store;
1:     private String name;
1:     private BTreeIndex<Long, List<LegacyJobLocation>> index;
1: 
1:     LegacyJobSchedulerImpl(LegacyJobSchedulerStoreImpl store) {
1:         this.store = store;
1:     }
1: 
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
1:     public String getName() {
1:         return this.name;
1:     }
1: 
1:     /**
1:      * Returns the next time that a job would be scheduled to run.
1:      *
1:      * @return time of next scheduled job to run.
1:      *
1:      * @throws IOException if an error occurs while fetching the time.
1:      */
1:     public long getNextScheduleTime() throws IOException {
1:         Map.Entry<Long, List<LegacyJobLocation>> first = this.index.getFirst(this.store.getPageFile().tx());
1:         return first != null ? first.getKey() : -1l;
1:     }
1: 
1:     /**
1:      * Gets the list of the next batch of scheduled jobs in the store.
1:      *
1:      * @return a list of the next jobs that will run.
1:      *
1:      * @throws IOException if an error occurs while fetching the jobs list.
1:      */
1:     public List<LegacyJobImpl> getNextScheduleJobs() throws IOException {
1:         final List<LegacyJobImpl> result = new ArrayList<LegacyJobImpl>();
1: 
1:         this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
1:             @Override
1:             public void execute(Transaction tx) throws IOException {
1:                 Map.Entry<Long, List<LegacyJobLocation>> first = index.getFirst(store.getPageFile().tx());
1:                 if (first != null) {
1:                     for (LegacyJobLocation jl : first.getValue()) {
1:                         ByteSequence bs = getPayload(jl.getLocation());
1:                         LegacyJobImpl job = new LegacyJobImpl(jl, bs);
1:                         result.add(job);
1:                     }
1:                 }
1:             }
1:         });
1:         return result;
1:     }
1: 
1:     /**
1:      * Gets a list of all scheduled jobs in this store.
1:      *
1:      * @return a list of all the currently scheduled jobs in this store.
1:      *
1:      * @throws IOException if an error occurs while fetching the list of jobs.
1:      */
1:     public List<LegacyJobImpl> getAllJobs() throws IOException {
1:         final List<LegacyJobImpl> result = new ArrayList<LegacyJobImpl>();
1:         this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
1:             @Override
1:             public void execute(Transaction tx) throws IOException {
1:                 Iterator<Map.Entry<Long, List<LegacyJobLocation>>> iter = index.iterator(store.getPageFile().tx());
1:                 while (iter.hasNext()) {
1:                     Map.Entry<Long, List<LegacyJobLocation>> next = iter.next();
1:                     if (next != null) {
1:                         for (LegacyJobLocation jl : next.getValue()) {
1:                             ByteSequence bs = getPayload(jl.getLocation());
1:                             LegacyJobImpl job = new LegacyJobImpl(jl, bs);
1:                             result.add(job);
1:                         }
1:                     } else {
1:                         break;
1:                     }
1:                 }
1:             }
1:         });
1:         return result;
1:     }
1: 
1:     /**
1:      * Gets a list of all scheduled jobs that exist between the given start and end time.
1:      *
1:      * @param start
1:      *      The start time to look for scheduled jobs.
1:      * @param finish
1:      *      The end time to stop looking for scheduled jobs.
1:      *
1:      * @return a list of all scheduled jobs that would run between the given start and end time.
1:      *
1:      * @throws IOException if an error occurs while fetching the list of jobs.
1:      */
1:     public List<LegacyJobImpl> getAllJobs(final long start, final long finish) throws IOException {
1:         final List<LegacyJobImpl> result = new ArrayList<LegacyJobImpl>();
1:         this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
1:             @Override
1:             public void execute(Transaction tx) throws IOException {
1:                 Iterator<Map.Entry<Long, List<LegacyJobLocation>>> iter = index.iterator(store.getPageFile().tx(), start);
1:                 while (iter.hasNext()) {
1:                     Map.Entry<Long, List<LegacyJobLocation>> next = iter.next();
1:                     if (next != null && next.getKey().longValue() <= finish) {
1:                         for (LegacyJobLocation jl : next.getValue()) {
1:                             ByteSequence bs = getPayload(jl.getLocation());
1:                             LegacyJobImpl job = new LegacyJobImpl(jl, bs);
1:                             result.add(job);
1:                         }
1:                     } else {
1:                         break;
1:                     }
1:                 }
1:             }
1:         });
1:         return result;
1:     }
1: 
1:     ByteSequence getPayload(Location location) throws IllegalStateException, IOException {
1:         return this.store.getPayload(location);
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return "LegacyJobScheduler: " + this.name;
1:     }
1: 
1:     @Override
1:     protected void doStart() throws Exception {
1:     }
1: 
1:     @Override
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:     }
1: 
1:     void createIndexes(Transaction tx) throws IOException {
1:         this.index = new BTreeIndex<Long, List<LegacyJobLocation>>(this.store.getPageFile(), tx.allocate().getPageId());
1:     }
1: 
1:     void load(Transaction tx) throws IOException {
1:         this.index.setKeyMarshaller(LongMarshaller.INSTANCE);
1:         this.index.setValueMarshaller(ValueMarshaller.INSTANCE);
1:         this.index.load(tx);
1:     }
1: 
1:     void read(DataInput in) throws IOException {
1:         this.name = in.readUTF();
1:         this.index = new BTreeIndex<Long, List<LegacyJobLocation>>(this.store.getPageFile(), in.readLong());
1:         this.index.setKeyMarshaller(LongMarshaller.INSTANCE);
1:         this.index.setValueMarshaller(ValueMarshaller.INSTANCE);
1:     }
1: 
1:     public void write(DataOutput out) throws IOException {
1:         out.writeUTF(name);
1:         out.writeLong(this.index.getPageId());
1:     }
1: 
1:     static class ValueMarshaller extends VariableMarshaller<List<LegacyJobLocation>> {
1:         static ValueMarshaller INSTANCE = new ValueMarshaller();
1: 
1:         @Override
1:         public List<LegacyJobLocation> readPayload(DataInput dataIn) throws IOException {
1:             List<LegacyJobLocation> result = new ArrayList<LegacyJobLocation>();
1:             int size = dataIn.readInt();
1:             for (int i = 0; i < size; i++) {
1:                 LegacyJobLocation jobLocation = new LegacyJobLocation();
1:                 jobLocation.readExternal(dataIn);
1:                 result.add(jobLocation);
1:             }
1:             return result;
1:         }
1: 
1:         @Override
1:         public void writePayload(List<LegacyJobLocation> value, DataOutput dataOut) throws IOException {
1:             dataOut.writeInt(value.size());
1:             for (LegacyJobLocation jobLocation : value) {
1:                 jobLocation.writeExternal(dataOut);
1:             }
1:         }
1:     }
1: }
============================================================================