1:10a74ce: /**
1:10a74ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:10a74ce:  * contributor license agreements.  See the NOTICE file distributed with
1:10a74ce:  * this work for additional information regarding copyright ownership.
1:10a74ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:10a74ce:  * (the "License"); you may not use this file except in compliance with
1:10a74ce:  * the License.  You may obtain a copy of the License at
1:10a74ce:  *
1:10a74ce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:10a74ce:  *
1:10a74ce:  * Unless required by applicable law or agreed to in writing, software
1:10a74ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:10a74ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10a74ce:  * See the License for the specific language governing permissions and
1:10a74ce:  * limitations under the License.
1:10a74ce:  */
1:10a74ce: package org.apache.activemq.security;
1:10a74ce: 
1:10a74ce: import java.net.URL;
1:10a74ce: import java.util.Collection;
1:10a74ce: import java.util.List;
1:10a74ce: 
1:10a74ce: import org.apache.activemq.broker.BrokerService;
1:10a74ce: import org.apache.activemq.network.NetworkBridge;
1:10a74ce: import org.apache.activemq.network.NetworkConnector;
1:10a74ce: import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
1:10a74ce: 
1:10a74ce: import org.junit.After;
1:10a74ce: import org.junit.Before;
1:10a74ce: import org.junit.Test;
1:10a74ce: import org.junit.Assert;
1:10a74ce: 
1:10a74ce: import org.slf4j.Logger;
1:10a74ce: import org.slf4j.LoggerFactory;
1:10a74ce: 
1:10a74ce: 
1:10a74ce: /**
1:10a74ce:  * Unit test for https://issues.apache.org/jira/browse/AMQ-5943.
1:10a74ce:  * Creates a network bridge to a broker that is configured for 
1:10a74ce:  * JaasDualAuthenticationPlugin.
1:10a74ce:  * The broker that creates the network bridge does not set a 
1:10a74ce:  * username/password on the nc configuration but expects to be 
1:10a74ce:  * authenticated via its SSL certificate.
1:10a74ce:  * This test uses these external configuration files from
1:10a74ce:  * src/test/resources/
1:10a74ce:  * - org/apache/activemq/security/JaasDualAuthenticationNetworkBridgeTest.xml
1:10a74ce:  * - login-JaasDualAuthenticationNetworkBridgeTest.config
1:10a74ce:  * - users-JaasDualAuthenticationNetworkBridgeTest.properties
1:10a74ce:  * - groups-JaasDualAuthenticationNetworkBridgeTest.properties
1:10a74ce:  * - ssl-domain-JaasDualAuthenticationNetworkBridgeTest.properties
1:10a74ce:  */
1:10a74ce: public class JaasDualAuthenticationNetworkBridgeTest {
1:57795ba:     protected String CONFIG_FILE="org/apache/activemq/security/JaasDualAuthenticationNetworkBridge.xml";
1:10a74ce:     protected static Logger LOG = LoggerFactory.getLogger(JaasDualAuthenticationNetworkBridgeTest.class);
1:10a74ce:     private BrokerService broker1 = null;
1:10a74ce:     private BrokerService broker2 = null;
1:10a74ce: 
1:10a74ce:     /**
1:10a74ce:      * @throws java.lang.Exception
1:10a74ce:      */
1:10a74ce:     @Before
1:10a74ce:     public void setUp() throws Exception {
1:10a74ce:         LOG.info("Starting up");
1:10a74ce:         String path = null;
1:1ea2897:         URL resource = JaasDualAuthenticationNetworkBridgeTest.class.getClassLoader().getResource("login-JaasDualAuthenticationNetworkBridge.config");
1:10a74ce:         if (resource != null) {
1:10a74ce:             path = resource.getFile();
1:10a74ce:             System.setProperty("java.security.auth.login.config", path);
1:10a74ce:         }
1:10a74ce:         LOG.info("Path to login config: " + path);
1:10a74ce: 
1:10a74ce:         try {
1:10a74ce:             ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(CONFIG_FILE);
1:10a74ce:             broker1 = (BrokerService)context.getBean("broker1");
1:10a74ce:             broker2 = (BrokerService)context.getBean("broker2");
1:10a74ce:         }
1:10a74ce:         catch(Exception e) {
1:10a74ce:             LOG.error("Error: " + e.getMessage());
1:10a74ce:             throw e;
1:10a74ce:         }
1:57795ba: 
1:57795ba:         broker2.start();
1:57795ba:         broker1.start();
1:10a74ce:     }
1:10a74ce: 
1:10a74ce:     /**
1:10a74ce:      * @throws java.lang.Exception
1:10a74ce:      */
1:10a74ce:     @After
1:10a74ce:     public void tearDown() throws Exception {
1:10a74ce:         LOG.info("Shutting down");
1:10a74ce:         if (broker1 != null && broker1.isStarted()) {
1:10a74ce:             LOG.info("Broker still running, stopping it now.");
1:10a74ce:             broker1.stop();
1:10a74ce:         }
1:10a74ce:         else {
1:10a74ce:             LOG.info("Broker1 not running, nothing to shutdown.");
1:10a74ce:         }
1:10a74ce:         if (broker2 != null && broker2.isStarted()) {
1:10a74ce:             LOG.info("Broker still running, stopping it now.");
1:10a74ce:             broker2.stop();
1:10a74ce:         }
1:10a74ce:         else {
1:10a74ce:             LOG.info("Broker2 not running, nothing to shutdown.");
1:10a74ce:         }
1:10a74ce:     }
1:10a74ce: 
1:10a74ce: 
1:10a74ce:     /**
1:10a74ce:      * Waits 5 seconds for the network bridge between broker 1 and 2 to be
1:10a74ce:      * established, then checks if the bridge exists, by querying broker1.
1:10a74ce:      * 
1:10a74ce:      * @throws Exception is network bridge does not exist between both
1:10a74ce:      * broker instances.
1:10a74ce:      */
1:10a74ce:     @Test
1:10a74ce:     public void testNetworkBridgeUsingJaasDualAuthenticationPlugin() throws Exception {
1:10a74ce:         LOG.info("testNetworkBridgeUsingJaasDualAuthenticationPlugin() called.");
1:10a74ce:         try {
1:10a74ce:             // give 5 seconds for broker instances to establish network bridge
1:10a74ce:             Thread.sleep(5000);
1:10a74ce: 
1:10a74ce:             // verify that network bridge is established
1:10a74ce:             Assert.assertNotNull(broker1);
1:10a74ce:             List<NetworkConnector> ncs = broker1.getNetworkConnectors();
1:10a74ce:             Assert.assertNotNull("Network Connector not found.", ncs);
1:10a74ce:             Assert.assertFalse("Network Connector not found.", ncs.isEmpty());
1:10a74ce:             NetworkConnector nc =(NetworkConnector)ncs.get(0);
1:10a74ce:             Collection<NetworkBridge> bridges = nc.activeBridges();
1:10a74ce:             Assert.assertFalse("Network bridge not established to broker 2", bridges.isEmpty());
1:10a74ce:             Assert.assertTrue("Network bridge not established to broker 2", bridges.size() == 1);
1:57795ba:             for (NetworkBridge nb : bridges) {
1:57795ba:                 Assert.assertTrue(nb.getRemoteBrokerId() != null);
1:57795ba:             }
1:10a74ce:             LOG.info("Network bridge is correctly established.");
1:10a74ce:         } catch (java.lang.InterruptedException ex) {
1:10a74ce:             LOG.warn(ex.getMessage());
1:10a74ce:         }
1:10a74ce:     }
1:10a74ce: }
1:10a74ce: 
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b30ae4e
/////////////////////////////////////////////////////////////////////////
commit:57795ba
/////////////////////////////////////////////////////////////////////////
0: import sun.nio.ch.Net;
/////////////////////////////////////////////////////////////////////////
1:     protected String CONFIG_FILE="org/apache/activemq/security/JaasDualAuthenticationNetworkBridge.xml";
/////////////////////////////////////////////////////////////////////////
1: 
1:         broker2.start();
1:         broker1.start();
/////////////////////////////////////////////////////////////////////////
1:             for (NetworkBridge nb : bridges) {
1:                 Assert.assertTrue(nb.getRemoteBrokerId() != null);
1:             }
commit:1ea2897
/////////////////////////////////////////////////////////////////////////
0:     protected final static String CONFIG_FILE="org/apache/activemq/security/JaasDualAuthenticationNetworkBridge.xml";
/////////////////////////////////////////////////////////////////////////
1:         URL resource = JaasDualAuthenticationNetworkBridgeTest.class.getClassLoader().getResource("login-JaasDualAuthenticationNetworkBridge.config");
commit:10a74ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import java.net.URL;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.NetworkBridge;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.Assert;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: /**
1:  * Unit test for https://issues.apache.org/jira/browse/AMQ-5943.
1:  * Creates a network bridge to a broker that is configured for 
1:  * JaasDualAuthenticationPlugin.
1:  * The broker that creates the network bridge does not set a 
1:  * username/password on the nc configuration but expects to be 
1:  * authenticated via its SSL certificate.
1:  * This test uses these external configuration files from
1:  * src/test/resources/
1:  * - org/apache/activemq/security/JaasDualAuthenticationNetworkBridgeTest.xml
1:  * - login-JaasDualAuthenticationNetworkBridgeTest.config
1:  * - users-JaasDualAuthenticationNetworkBridgeTest.properties
1:  * - groups-JaasDualAuthenticationNetworkBridgeTest.properties
1:  * - ssl-domain-JaasDualAuthenticationNetworkBridgeTest.properties
1:  */
1: public class JaasDualAuthenticationNetworkBridgeTest {
0:     protected final static String CONFIG_FILE="org/apache/activemq/security/JaasDualAuthenticationNetworkBridgeTest.xml";
1:     protected static Logger LOG = LoggerFactory.getLogger(JaasDualAuthenticationNetworkBridgeTest.class);
1:     private BrokerService broker1 = null;
1:     private BrokerService broker2 = null;
1: 
1:     /**
1:      * @throws java.lang.Exception
1:      */
1:     @Before
1:     public void setUp() throws Exception {
1:         LOG.info("Starting up");
1:         String path = null;
0:         URL resource = JaasDualAuthenticationNetworkBridgeTest.class.getClassLoader().getResource("login-JaasDualAuthenticationNetworkBridgeTest.config");
1:         if (resource != null) {
1:             path = resource.getFile();
1:             System.setProperty("java.security.auth.login.config", path);
1:         }
1:         LOG.info("Path to login config: " + path);
1: 
1:         try {
1:             ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(CONFIG_FILE);
1:             broker1 = (BrokerService)context.getBean("broker1");
1:             broker2 = (BrokerService)context.getBean("broker2");
1:         }
1:         catch(Exception e) {
1:             LOG.error("Error: " + e.getMessage());
1:             throw e;
1:         }
1:     }
1: 
1:     /**
1:      * @throws java.lang.Exception
1:      */
1:     @After
1:     public void tearDown() throws Exception {
1:         LOG.info("Shutting down");
1:         if (broker1 != null && broker1.isStarted()) {
1:             LOG.info("Broker still running, stopping it now.");
1:             broker1.stop();
1:         }
1:         else {
1:             LOG.info("Broker1 not running, nothing to shutdown.");
1:         }
1:         if (broker2 != null && broker2.isStarted()) {
1:             LOG.info("Broker still running, stopping it now.");
1:             broker2.stop();
1:         }
1:         else {
1:             LOG.info("Broker2 not running, nothing to shutdown.");
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Waits 5 seconds for the network bridge between broker 1 and 2 to be
1:      * established, then checks if the bridge exists, by querying broker1.
1:      * 
1:      * @throws Exception is network bridge does not exist between both
1:      * broker instances.
1:      */
1:     @Test
1:     public void testNetworkBridgeUsingJaasDualAuthenticationPlugin() throws Exception {
1:         LOG.info("testNetworkBridgeUsingJaasDualAuthenticationPlugin() called.");
1:         try {
1:             // give 5 seconds for broker instances to establish network bridge
1:             Thread.sleep(5000);
1: 
1:             // verify that network bridge is established
1:             Assert.assertNotNull(broker1);
1:             List<NetworkConnector> ncs = broker1.getNetworkConnectors();
1:             Assert.assertNotNull("Network Connector not found.", ncs);
1:             Assert.assertFalse("Network Connector not found.", ncs.isEmpty());
1:             NetworkConnector nc =(NetworkConnector)ncs.get(0);
1:             Collection<NetworkBridge> bridges = nc.activeBridges();
1:             Assert.assertFalse("Network bridge not established to broker 2", bridges.isEmpty());
1:             Assert.assertTrue("Network bridge not established to broker 2", bridges.size() == 1);
1:             LOG.info("Network bridge is correctly established.");
1:         } catch (java.lang.InterruptedException ex) {
1:             LOG.warn(ex.getMessage());
1:         }
1:     }
1: }
1: 
============================================================================