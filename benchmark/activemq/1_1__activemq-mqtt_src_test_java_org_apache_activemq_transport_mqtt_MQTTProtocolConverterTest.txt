1:f3544f2: /*
1:f3544f2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f3544f2:  * contributor license agreements.  See the NOTICE file distributed with
1:f3544f2:  * this work for additional information regarding copyright ownership.
1:f3544f2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f3544f2:  * (the "License"); you may not use this file except in compliance with
1:f3544f2:  * the License.  You may obtain a copy of the License at
1:f3544f2:  *
1:f3544f2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f3544f2:  *
1:f3544f2:  * Unless required by applicable law or agreed to in writing, software
1:f3544f2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f3544f2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f3544f2:  * See the License for the specific language governing permissions and
1:f3544f2:  * limitations under the License.
1:f3544f2:  */
1:f3544f2: package org.apache.activemq.transport.mqtt;
1:f3544f2: 
1:f3544f2: import static org.junit.Assert.assertEquals;
1:f3544f2: import static org.junit.Assert.assertTrue;
1:f3544f2: 
1:f3544f2: import java.io.IOException;
1:f3544f2: 
1:f3544f2: import org.apache.activemq.broker.BrokerService;
1:f3544f2: import org.fusesource.mqtt.codec.CONNACK;
1:f3544f2: import org.fusesource.mqtt.codec.CONNECT;
1:f3544f2: import org.fusesource.mqtt.codec.MQTTFrame;
1:f3544f2: import org.junit.Before;
1:f3544f2: import org.junit.Test;
1:f3544f2: import org.mockito.ArgumentCaptor;
1:f3544f2: import org.mockito.Mockito;
1:f3544f2: 
1:f3544f2: /**
1:f3544f2:  * Tests for various usage scenarios of the protocol converter
1:f3544f2:  */
1:f3544f2: public class MQTTProtocolConverterTest {
1:f3544f2: 
1:f3544f2:     private MQTTTransport transport;
1:f3544f2:     private BrokerService broker;
1:f3544f2: 
1:f3544f2:     @Before
1:f3544f2:     public void setUp() throws Exception {
1:f3544f2:         transport = Mockito.mock(MQTTTransport.class);
1:f3544f2:         broker = Mockito.mock(BrokerService.class);
1:f3544f2:     }
1:f3544f2: 
1:f3544f2:     @Test
1:f3544f2:     public void testConnectWithInvalidProtocolVersionToLow() throws IOException {
1:f3544f2:         doTestConnectWithInvalidProtocolVersion(2);
1:f3544f2:     }
1:f3544f2: 
1:f3544f2:     @Test
1:f3544f2:     public void testConnectWithInvalidProtocolVersionToHigh() throws IOException {
1:f3544f2:         doTestConnectWithInvalidProtocolVersion(5);
1:f3544f2:     }
1:f3544f2: 
1:f3544f2:     private void doTestConnectWithInvalidProtocolVersion(int version) throws IOException {
1:f3544f2:         MQTTProtocolConverter converter = new MQTTProtocolConverter(transport, broker);
1:f3544f2: 
1:f3544f2:         CONNECT connect = Mockito.mock(CONNECT.class);
1:f3544f2: 
1:f3544f2:         Mockito.when(connect.version()).thenReturn(version);
1:f3544f2: 
1:f3544f2:         converter.onMQTTConnect(connect);
1:f3544f2:         ArgumentCaptor<IOException> capturedException = ArgumentCaptor.forClass(IOException.class);
1:f3544f2:         Mockito.verify(transport).onException(capturedException.capture());
1:f3544f2: 
1:f3544f2:         assertTrue(capturedException.getValue().getMessage().contains("version"));
1:f3544f2: 
1:f3544f2:         ArgumentCaptor<MQTTFrame> capturedFrame = ArgumentCaptor.forClass(MQTTFrame.class);
1:f3544f2:         Mockito.verify(transport).sendToMQTT(capturedFrame.capture());
1:f3544f2: 
1:f3544f2:         MQTTFrame response = capturedFrame.getValue();
1:f3544f2:         assertEquals(CONNACK.TYPE, response.messageType());
1:f3544f2: 
1:f3544f2:         CONNACK connAck = new CONNACK().decode(response);
1:f3544f2:         assertEquals(CONNACK.Code.CONNECTION_REFUSED_UNACCEPTED_PROTOCOL_VERSION, connAck.code());
1:f3544f2:     }
1:f3544f2: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f3544f2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.fusesource.mqtt.codec.CONNACK;
1: import org.fusesource.mqtt.codec.CONNECT;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.mockito.ArgumentCaptor;
1: import org.mockito.Mockito;
1: 
1: /**
1:  * Tests for various usage scenarios of the protocol converter
1:  */
1: public class MQTTProtocolConverterTest {
1: 
1:     private MQTTTransport transport;
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         transport = Mockito.mock(MQTTTransport.class);
1:         broker = Mockito.mock(BrokerService.class);
1:     }
1: 
1:     @Test
1:     public void testConnectWithInvalidProtocolVersionToLow() throws IOException {
1:         doTestConnectWithInvalidProtocolVersion(2);
1:     }
1: 
1:     @Test
1:     public void testConnectWithInvalidProtocolVersionToHigh() throws IOException {
1:         doTestConnectWithInvalidProtocolVersion(5);
1:     }
1: 
1:     private void doTestConnectWithInvalidProtocolVersion(int version) throws IOException {
1:         MQTTProtocolConverter converter = new MQTTProtocolConverter(transport, broker);
1: 
1:         CONNECT connect = Mockito.mock(CONNECT.class);
1: 
1:         Mockito.when(connect.version()).thenReturn(version);
1: 
1:         converter.onMQTTConnect(connect);
1:         ArgumentCaptor<IOException> capturedException = ArgumentCaptor.forClass(IOException.class);
1:         Mockito.verify(transport).onException(capturedException.capture());
1: 
1:         assertTrue(capturedException.getValue().getMessage().contains("version"));
1: 
1:         ArgumentCaptor<MQTTFrame> capturedFrame = ArgumentCaptor.forClass(MQTTFrame.class);
1:         Mockito.verify(transport).sendToMQTT(capturedFrame.capture());
1: 
1:         MQTTFrame response = capturedFrame.getValue();
1:         assertEquals(CONNACK.TYPE, response.messageType());
1: 
1:         CONNACK connAck = new CONNACK().decode(response);
1:         assertEquals(CONNACK.Code.CONNECTION_REFUSED_UNACCEPTED_PROTOCOL_VERSION, connAck.code());
1:     }
1: }
============================================================================