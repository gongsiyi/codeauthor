1:a095e9b: /**
1:a095e9b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a095e9b:  * contributor license agreements.  See the NOTICE file distributed with
1:a095e9b:  * this work for additional information regarding copyright ownership.
1:a095e9b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a095e9b:  * (the "License"); you may not use this file except in compliance with
1:a095e9b:  * the License.  You may obtain a copy of the License at
1:a095e9b:  *
1:a095e9b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a095e9b:  *
1:a095e9b:  * Unless required by applicable law or agreed to in writing, software
1:a095e9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a095e9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a095e9b:  * See the License for the specific language governing permissions and
1:a095e9b:  * limitations under the License.
1:a095e9b:  */
1:a095e9b: package org.apache.activemq;
1:a095e9b: 
1:a095e9b: import javax.jms.Connection;
1:a095e9b: import javax.jms.Destination;
1:a095e9b: import javax.jms.IllegalStateException;
1:a095e9b: import javax.jms.Message;
1:a095e9b: import javax.jms.MessageProducer;
1:a095e9b: import javax.jms.Session;
1:a095e9b: 
1:a095e9b: import org.apache.activemq.broker.BrokerService;
1:a095e9b: import org.junit.After;
1:a095e9b: import org.junit.Before;
1:a095e9b: import org.junit.Test;
1:a095e9b: 
1:a095e9b: /**
1:a095e9b:  * Test behavior of JMS MessageProducer API implementation when closed.
1:a095e9b:  */
1:a095e9b: public class JmsMessageProcuderClosedTest {
1:a095e9b: 
1:a095e9b:     private Connection connection;
1:a095e9b:     private MessageProducer producer;
1:a095e9b:     private Message message;
1:a095e9b:     private Destination destination;
1:a095e9b:     private BrokerService brokerService;
1:a095e9b: 
1:a095e9b:     protected BrokerService createBroker() throws Exception {
1:a095e9b:         BrokerService brokerService = new BrokerService();
1:a095e9b: 
1:a095e9b:         brokerService.setPersistent(false);
1:a095e9b:         brokerService.setUseJmx(false);
1:a095e9b:         brokerService.setAdvisorySupport(false);
1:a095e9b: 
1:a095e9b:         return brokerService;
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     protected MessageProducer createClosedProducer() throws Exception {
1:a095e9b:         MessageProducer producer = createProducer();
1:a095e9b:         producer.close();
1:a095e9b:         return producer;
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     protected MessageProducer createProducer() throws Exception {
1:a095e9b:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:a095e9b:         connection = factory.createConnection();
1:a095e9b:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a095e9b:         message = session.createMessage();
1:a095e9b:         destination = session.createTopic("test");
1:a095e9b:         return session.createProducer(destination);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Before
1:a095e9b:     public void setUp() throws Exception {
1:a095e9b:         brokerService = createBroker();
1:a095e9b:         brokerService.start();
1:a095e9b:         brokerService.waitUntilStarted();
1:a095e9b: 
1:a095e9b:         producer = createClosedProducer();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @After
1:a095e9b:     public void tearDown() throws Exception {
1:a095e9b:         try {
1:a095e9b:             if (connection != null) {
1:a095e9b:                 connection.close();
1:a095e9b:             }
1:a095e9b:         } catch (Exception ex) {}
1:a095e9b: 
1:a095e9b:         if (brokerService != null) {
1:a095e9b:             brokerService.stop();
1:a095e9b:             brokerService.waitUntilStopped();
1:a095e9b:         }
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000)
1:a095e9b:     public void testClose() throws Exception {
1:a095e9b:         producer.close();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSetDisableMessageIDFails() throws Exception {
1:a095e9b:         producer.setDisableMessageID(true);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testGetDisableMessageIDFails() throws Exception {
1:a095e9b:         producer.getDisableMessageID();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSetDisableMessageTimestampFails() throws Exception {
1:a095e9b:         producer.setDisableMessageTimestamp(false);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testGetDisableMessageTimestampFails() throws Exception {
1:a095e9b:         producer.getDisableMessageTimestamp();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSetDeliveryModeFails() throws Exception {
1:a095e9b:         producer.setDeliveryMode(1);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testGetDeliveryModeFails() throws Exception {
1:a095e9b:         producer.getDeliveryMode();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSetPriorityFails() throws Exception {
1:a095e9b:         producer.setPriority(1);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testGetPriorityFails() throws Exception {
1:a095e9b:         producer.getPriority();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSetTimeToLiveFails() throws Exception {
1:a095e9b:         producer.setTimeToLive(1);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testGetTimeToLiveFails() throws Exception {
1:a095e9b:         producer.getTimeToLive();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testGetDestinationFails() throws Exception {
1:a095e9b:         producer.getDestination();
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSendFails() throws Exception {
1:a095e9b:         producer.send(message);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSendWithDestinationFails() throws Exception {
1:a095e9b:         producer.send(destination, message);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSendWithModePriorityTTLFails() throws Exception {
1:a095e9b:         producer.send(message, 1, 3, 111);
1:a095e9b:     }
1:a095e9b: 
1:a095e9b:     @Test(timeout=30000, expected=IllegalStateException.class)
1:a095e9b:     public void testSendWithDestinationModePriorityTTLFails() throws Exception {
1:a095e9b:         producer.send(destination, message, 1, 3, 111);
1:a095e9b:     }
1:a095e9b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a095e9b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.IllegalStateException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test behavior of JMS MessageProducer API implementation when closed.
1:  */
1: public class JmsMessageProcuderClosedTest {
1: 
1:     private Connection connection;
1:     private MessageProducer producer;
1:     private Message message;
1:     private Destination destination;
1:     private BrokerService brokerService;
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1: 
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1: 
1:         return brokerService;
1:     }
1: 
1:     protected MessageProducer createClosedProducer() throws Exception {
1:         MessageProducer producer = createProducer();
1:         producer.close();
1:         return producer;
1:     }
1: 
1:     protected MessageProducer createProducer() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         message = session.createMessage();
1:         destination = session.createTopic("test");
1:         return session.createProducer(destination);
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         producer = createClosedProducer();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         } catch (Exception ex) {}
1: 
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout=30000)
1:     public void testClose() throws Exception {
1:         producer.close();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSetDisableMessageIDFails() throws Exception {
1:         producer.setDisableMessageID(true);
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testGetDisableMessageIDFails() throws Exception {
1:         producer.getDisableMessageID();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSetDisableMessageTimestampFails() throws Exception {
1:         producer.setDisableMessageTimestamp(false);
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testGetDisableMessageTimestampFails() throws Exception {
1:         producer.getDisableMessageTimestamp();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSetDeliveryModeFails() throws Exception {
1:         producer.setDeliveryMode(1);
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testGetDeliveryModeFails() throws Exception {
1:         producer.getDeliveryMode();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSetPriorityFails() throws Exception {
1:         producer.setPriority(1);
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testGetPriorityFails() throws Exception {
1:         producer.getPriority();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSetTimeToLiveFails() throws Exception {
1:         producer.setTimeToLive(1);
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testGetTimeToLiveFails() throws Exception {
1:         producer.getTimeToLive();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testGetDestinationFails() throws Exception {
1:         producer.getDestination();
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSendFails() throws Exception {
1:         producer.send(message);
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSendWithDestinationFails() throws Exception {
1:         producer.send(destination, message);
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSendWithModePriorityTTLFails() throws Exception {
1:         producer.send(message, 1, 3, 111);
1:     }
1: 
1:     @Test(timeout=30000, expected=IllegalStateException.class)
1:     public void testSendWithDestinationModePriorityTTLFails() throws Exception {
1:         producer.send(destination, message, 1, 3, 111);
1:     }
1: }
============================================================================