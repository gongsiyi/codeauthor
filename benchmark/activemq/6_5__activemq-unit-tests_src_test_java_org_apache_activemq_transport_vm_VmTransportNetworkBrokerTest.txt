1:ce8f83a: /**
1:ce8f83a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ce8f83a:  * contributor license agreements.  See the NOTICE file distributed with
1:ce8f83a:  * this work for additional information regarding copyright ownership.
1:ce8f83a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ce8f83a:  * (the "License"); you may not use this file except in compliance with
1:ce8f83a:  * the License.  You may obtain a copy of the License at
1:ce8f83a:  *
1:ce8f83a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ce8f83a:  *
1:ce8f83a:  * Unless required by applicable law or agreed to in writing, software
1:ce8f83a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ce8f83a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ce8f83a:  * See the License for the specific language governing permissions and
1:ce8f83a:  * limitations under the License.
1:ce8f83a:  */
1:ce8f83a: package org.apache.activemq.transport.vm;
13:ce8f83a: 
1:ce8f83a: import java.net.URI;
1:14110f5: import java.util.ArrayList;
1:14110f5: import java.util.Arrays;
1:14110f5: import java.util.List;
1:ce8f83a: import java.util.concurrent.TimeUnit;
1:b22184e: import java.util.concurrent.atomic.AtomicInteger;
1:ccd2e94: 
1:ccd2e94: import javax.jms.Connection;
1:fd76088: import javax.jms.Session;
1:ce8f83a: import junit.framework.TestCase;
1:ccd2e94: 
1:ce8f83a: import org.apache.activemq.ActiveMQConnectionFactory;
1:ce8f83a: import org.apache.activemq.broker.BrokerService;
1:ccd2e94: import org.apache.activemq.bugs.embedded.ThreadExplorer;
1:fd76088: import org.apache.activemq.command.ActiveMQQueue;
1:fd76088: import org.apache.activemq.command.ActiveMQTopic;
1:fd76088: import org.apache.activemq.network.DurableConduitBridge;
1:ce8f83a: import org.apache.activemq.network.NetworkConnector;
1:1355cf5: 
1:fd76088: import org.apache.activemq.util.DefaultTestAppender;
1:b22184e: import org.apache.activemq.util.Wait;
1:fd76088: import org.apache.log4j.Level;
1:fd76088: import org.apache.log4j.spi.LoggingEvent;
1:fd76088: import org.junit.Ignore;
1:14110f5: import org.slf4j.Logger;
1:14110f5: import org.slf4j.LoggerFactory;
1:14110f5: 
1:14110f5: 
1:ce8f83a: public class VmTransportNetworkBrokerTest extends TestCase {
1:14110f5: 
1:14110f5: 	private static final Logger LOG = LoggerFactory.getLogger(VmTransportNetworkBrokerTest.class);
1:14110f5: 
1:ce8f83a:     private static final String VM_BROKER_URI = 
1:ce8f83a:         "vm://localhost?create=false";
1:14110f5:     
1:6348481:     public void testNoThreadLeak() throws Exception {
1:6348481: 
1:6348481:         // with VMConnection and simple discovery network connector
1:b22184e:         Thread[] threads = filterDaemonThreads(ThreadExplorer.listThreads());
1:b22184e:         final int originalThreadCount = threads.length;
1:b22184e: 
1:14110f5:         LOG.debug(ThreadExplorer.show("threads at beginning"));
1:14110f5:         
1:ccd2e94:         BrokerService broker = new BrokerService();
1:ce8f83a:         broker.setDedicatedTaskRunner(true);
1:ce8f83a:         broker.setPersistent(false);
1:ccd2e94:         broker.addConnector("tcp://localhost:61616");
1:ce8f83a:         NetworkConnector networkConnector = broker.addNetworkConnector("static:(tcp://wrongHostname1:61617,tcp://wrongHostname2:61618)?useExponentialBackOff=false");
1:ce8f83a:         networkConnector.setDuplex(true);
1:ce8f83a:         broker.start();
1:1355cf5:         
1:ce8f83a:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI));
1:1355cf5:         Connection connection = cf.createConnection("system", "manager");
1:1355cf5:         connection.start();
1:14110f5:         
1:1355cf5:         // let it settle
1:1355cf5:         TimeUnit.SECONDS.sleep(5);
1:aa6a6d7:         
1:6348481:         int threadCountAfterStart = Thread.activeCount();
1:b22184e:         TimeUnit.SECONDS.sleep(20);
1:ce8f83a:         int threadCountAfterSleep = Thread.activeCount();
1:14110f5:         
1:6348481:         assertTrue("Threads are leaking: " + ThreadExplorer.show("active sleep") + ", threadCount=" +threadCountAfterStart + " threadCountAfterSleep=" + threadCountAfterSleep,
1:b22184e:                 threadCountAfterSleep < 2 * threadCountAfterStart);
1:14110f5: 
1:1355cf5:         connection.close();
1:ccd2e94:         broker.stop();
1:ccd2e94:         broker.waitUntilStopped();
1:ccd2e94: 
1:6348481:         // testNoDanglingThreadsAfterStop with tcp transport
1:6348481:         broker = new BrokerService();
1:ccd2e94:         broker.setSchedulerSupport(true);
1:ccd2e94:         broker.setDedicatedTaskRunner(true);
1:ccd2e94:         broker.setPersistent(false);
1:1355cf5:         broker.addConnector("tcp://localhost:61616?wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000");
1:ccd2e94:         broker.start();
1:1355cf5: 
1:6348481:         cf = new ActiveMQConnectionFactory("tcp://localhost:61616?wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000");
1:6348481:         connection = cf.createConnection("system", "manager");
1:ccd2e94:         connection.start();
1:1355cf5:         connection.close();
1:ccd2e94:         broker.stop();
1:ccd2e94:         broker.waitUntilStopped();
1:6348481: 
1:b22184e:         final AtomicInteger threadCountAfterStop = new AtomicInteger();
1:b22184e:         boolean ok = Wait.waitFor(new Wait.Condition() {
1:b22184e:             @Override
1:b22184e:             public boolean isSatisified() throws Exception {
1:b22184e:                 LOG.info(ThreadExplorer.show("active after stop"));
1:b22184e:                 // get final threads but filter out any daemon threads that the JVM may have created.
1:b22184e:                 Thread[] threads = filterDaemonThreads(ThreadExplorer.listThreads());
1:b22184e:                 threadCountAfterStop.set(threads.length);
1:b22184e:                 return threadCountAfterStop.get() <= originalThreadCount;
1:b22184e:             }
1:b22184e:         });
1:ccd2e94: 
1:aa6a6d7:         LOG.info("originalThreadCount=" + originalThreadCount + " threadCountAfterStop=" + threadCountAfterStop);
1:ccd2e94: 
1:14110f5:         assertTrue("Threads are leaking: " + 
1:14110f5:         		ThreadExplorer.show("active after stop") + 
1:14110f5:         		". originalThreadCount=" + 
1:14110f5:         		originalThreadCount + 
1:14110f5:         		" threadCountAfterStop=" + 
1:b22184e:         		threadCountAfterStop.get(),
1:b22184e:             ok);
1:ccd2e94:     }
1:fd76088:     
1:ccd2e94: 
1:fd76088:     public void testInvalidClientIdAndDurableSubs() throws Exception {
1:fd76088: 
1:fd76088:         BrokerService broker = new BrokerService();
1:fd76088:         broker.setUseJmx(false);
1:fd76088:         broker.setDedicatedTaskRunner(true);
1:fd76088:         broker.setPersistent(false);
1:fd76088:         broker.addConnector("tcp://localhost:0");
1:fd76088:         broker.start();
1:fd76088: 
1:fd76088:         // ensure remoteConnection fails with InvalidClientId
1:fd76088:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:fd76088:         Connection connection = connectionFactory.createConnection("system", "manager");
1:fd76088:         connection.setClientID("F1_forwarder_outbound");
1:fd76088:         connection.start();
1:fd76088: 
1:fd76088:         BrokerService forwarder = new BrokerService();
1:fd76088:         forwarder.setBrokerName("forwarder");
1:fd76088:         forwarder.setPersistent(false);
1:fd76088:         forwarder.setUseJmx(false);
1:fd76088: 
1:fd76088:         forwarder.start();
1:fd76088: 
1:fd76088:         // setup some durable subs to have some local work to do
1:fd76088:         ActiveMQConnectionFactory vmFactory = new ActiveMQConnectionFactory("vm://forwarder");
1:fd76088:         Connection vmConnection = vmFactory.createConnection("system", "manager");
1:fd76088:         vmConnection.setClientID("vm_local");
1:fd76088:         vmConnection.start();
1:fd76088:         Session session = vmConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:fd76088:         for (int i=0; i<5000; i++) {
1:fd76088:             session.createDurableSubscriber(new ActiveMQTopic("T" + i), "" + i);
1:fd76088:         }
1:fd76088:         vmConnection.close();
1:fd76088: 
1:fd76088:         final AtomicInteger logCounts = new AtomicInteger(0);
1:fd76088:         DefaultTestAppender appender = new DefaultTestAppender() {
1:fd76088:             @Override
1:fd76088:             public void doAppend(LoggingEvent event) {
1:fd76088:                 if (event.getLevel() == Level.ERROR) {
1:fd76088:                     logCounts.incrementAndGet();
1:fd76088:                 }
1:fd76088:             }
1:fd76088:         };
1:fd76088: 
1:fd76088:         org.apache.log4j.Logger.getLogger(DurableConduitBridge.class).addAppender(appender);
1:fd76088:         try {
1:fd76088: 
1:fd76088:             NetworkConnector networkConnector = forwarder.addNetworkConnector("static:("
1:fd76088:                     + broker.getTransportConnectors().get(0).getPublishableConnectString() + ")");
1:fd76088:             networkConnector.setName("F1");
1:fd76088:             forwarder.addNetworkConnector(networkConnector);
1:fd76088:             forwarder.startAllConnectors();
1:fd76088: 
1:fd76088:             TimeUnit.SECONDS.sleep(1);
1:fd76088:             connection.close();
1:fd76088: 
1:fd76088:             forwarder.stop();
1:fd76088:             broker.stop();
1:fd76088: 
1:fd76088:             assertEquals("no errors", 0, logCounts.get());
1:fd76088: 
1:fd76088:         } finally {
1:fd76088:             org.apache.log4j.Logger.getLogger(DurableConduitBridge.class).removeAppender(appender);
1:fd76088:         }
1:fd76088:     }
1:fd76088: 
1:14110f5:     /**
1:14110f5:      * Filters any daemon threads from the thread list.
1:14110f5:      * 
1:14110f5:      * Thread counts before and after the test should ideally be equal. 
1:14110f5:      * However there is no guarantee that the JVM does not create any 
1:14110f5:      * additional threads itself.
1:14110f5:      * E.g. on Mac OSX there is a JVM internal thread called
1:14110f5:      * "Poller SunPKCS11-Darwin" created after the test go started and 
1:14110f5:      * under the main thread group.
1:14110f5:      * When debugging tests in Eclipse another so called "Reader" thread 
1:14110f5:      * is created by Eclipse.
1:14110f5:      * So we cannot assume that the JVM does not create additional threads
1:14110f5:      * during the test. However for the time being we assume that any such 
1:14110f5:      * additionally created threads are daemon threads.
1:14110f5:      *   
1:14110f5:      * @param threads - the array of threads to parse
1:14110f5:      * @return a new array with any daemon threads removed
1:14110f5:      */
1:14110f5:     public Thread[] filterDaemonThreads(Thread[] threads) throws Exception {
1:ccd2e94:     
1:14110f5:     	List<Thread> threadList = new ArrayList<Thread>(Arrays.asList(threads));
1:aa6a6d7:     	
1:14110f5:     	// Can't use an Iterator as it would raise a 
1:14110f5:     	// ConcurrentModificationException when trying to remove an element
1:14110f5:     	// from the list, so using standard walk through
1:14110f5:     	for (int i = 0 ; i < threadList.size(); i++) {
1:14110f5:     		
1:14110f5:     		Thread thread = threadList.get(i);
1:14110f5:     		LOG.debug("Inspecting thread " + thread.getName());
1:b22184e:     		if (thread.isDaemon() && !thread.getName().contains("ActiveMQ")) {
1:14110f5:     			LOG.debug("Removing deamon thread.");
1:14110f5:     			threadList.remove(thread);
1:14110f5:     			Thread.sleep(100);
1:14110f5:     	
1:14110f5:     		}
1:14110f5:     	}
1:14110f5:     	LOG.debug("Converting list back to Array");
1:14110f5:     	return threadList.toArray(new Thread[0]);
1:14110f5:     }
1:14110f5: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:fd76088
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Session;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.network.DurableConduitBridge;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testInvalidClientIdAndDurableSubs() throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setDedicatedTaskRunner(true);
1:         broker.setPersistent(false);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1: 
1:         // ensure remoteConnection fails with InvalidClientId
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:         Connection connection = connectionFactory.createConnection("system", "manager");
1:         connection.setClientID("F1_forwarder_outbound");
1:         connection.start();
1: 
1:         BrokerService forwarder = new BrokerService();
1:         forwarder.setBrokerName("forwarder");
1:         forwarder.setPersistent(false);
1:         forwarder.setUseJmx(false);
1: 
1:         forwarder.start();
1: 
1:         // setup some durable subs to have some local work to do
1:         ActiveMQConnectionFactory vmFactory = new ActiveMQConnectionFactory("vm://forwarder");
1:         Connection vmConnection = vmFactory.createConnection("system", "manager");
1:         vmConnection.setClientID("vm_local");
1:         vmConnection.start();
1:         Session session = vmConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         for (int i=0; i<5000; i++) {
1:             session.createDurableSubscriber(new ActiveMQTopic("T" + i), "" + i);
1:         }
1:         vmConnection.close();
1: 
1:         final AtomicInteger logCounts = new AtomicInteger(0);
1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel() == Level.ERROR) {
1:                     logCounts.incrementAndGet();
1:                 }
1:             }
1:         };
1: 
1:         org.apache.log4j.Logger.getLogger(DurableConduitBridge.class).addAppender(appender);
1:         try {
1: 
1:             NetworkConnector networkConnector = forwarder.addNetworkConnector("static:("
1:                     + broker.getTransportConnectors().get(0).getPublishableConnectString() + ")");
1:             networkConnector.setName("F1");
1:             forwarder.addNetworkConnector(networkConnector);
1:             forwarder.startAllConnectors();
1: 
1:             TimeUnit.SECONDS.sleep(1);
1:             connection.close();
1: 
1:             forwarder.stop();
1:             broker.stop();
1: 
1:             assertEquals("no errors", 0, logCounts.get());
1: 
1:         } finally {
1:             org.apache.log4j.Logger.getLogger(DurableConduitBridge.class).removeAppender(appender);
1:         }
1:     }
1: 
commit:b22184e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         Thread[] threads = filterDaemonThreads(ThreadExplorer.listThreads());
1:         final int originalThreadCount = threads.length;
1: 
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(20);
1:                 threadCountAfterSleep < 2 * threadCountAfterStart);
/////////////////////////////////////////////////////////////////////////
1:         final AtomicInteger threadCountAfterStop = new AtomicInteger();
1:         boolean ok = Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info(ThreadExplorer.show("active after stop"));
1:                 // get final threads but filter out any daemon threads that the JVM may have created.
1:                 Thread[] threads = filterDaemonThreads(ThreadExplorer.listThreads());
1:                 threadCountAfterStop.set(threads.length);
1:                 return threadCountAfterStop.get() <= originalThreadCount;
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:         		threadCountAfterStop.get(),
1:             ok);
/////////////////////////////////////////////////////////////////////////
1:     		if (thread.isDaemon() && !thread.getName().contains("ActiveMQ")) {
author:Gary Tully
-------------------------------------------------------------------------------
commit:58b9a83
/////////////////////////////////////////////////////////////////////////
0:             threadCountAfterStop <= originalThreadCount);
commit:6348481
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.thread.DefaultThreadPools;
/////////////////////////////////////////////////////////////////////////
1:     public void testNoThreadLeak() throws Exception {
1: 
1:         // with VMConnection and simple discovery network connector
0:         int originalThreadCount = Thread.activeCount();
/////////////////////////////////////////////////////////////////////////
1:         int threadCountAfterStart = Thread.activeCount();
1:         assertTrue("Threads are leaking: " + ThreadExplorer.show("active sleep") + ", threadCount=" +threadCountAfterStart + " threadCountAfterSleep=" + threadCountAfterSleep,
0:                 threadCountAfterSleep < threadCountAfterStart + 8);
1:         // testNoDanglingThreadsAfterStop with tcp transport
1:         broker = new BrokerService();
1:         cf = new ActiveMQConnectionFactory("tcp://localhost:61616?wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000");
1:         connection = cf.createConnection("system", "manager");
1: 
0:         // must only be called when all brokers and connections are done!
0:         DefaultThreadPools.shutdown();
0:         assertTrue("Threads are leaking: " + ThreadExplorer.show("active after stop") + ". originalThreadCount=" + originalThreadCount + " threadCountAfterStop=" + threadCountAfterStop,
0:                 threadCountAfterStop == originalThreadCount);
commit:1355cf5
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.activemq.thread.DefaultThreadPools.shutdown;
1: 
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:61616?wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000");
1: 
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("tcp://localhost:61616?wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000");
1:         Connection connection = cf.createConnection("system", "manager");
1:         connection.start();
1:         connection.close();
0:         shutdown();
1: 
1:         // let it settle
1:         TimeUnit.SECONDS.sleep(5);        
0:         assertTrue("Threads are leaking: " + ThreadExplorer.show("active after stop") + ". threadCount=" + threadCount + " threadCountAfterStop=" + threadCountAfterStop,
commit:ccd2e94
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import org.apache.activemq.bugs.embedded.ThreadExplorer;
/////////////////////////////////////////////////////////////////////////
0:         Connection connection = cf.createConnection("system", "manager");
1:         connection.start();
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("Threads are leaking: " + ThreadExplorer.show("active sleep") + ", threadCount=" + threadCount + " threadCountAfterSleep=" + threadCountAfterSleep,
1: 
0:         connection.stop();
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1: 
0:     public void testNoDanglingThreadsAfterStop() throws Exception {
1: 
0:         int threadCount = Thread.activeCount();
1:         BrokerService broker = new BrokerService();
1:         broker.setSchedulerSupport(true);
1:         broker.setDedicatedTaskRunner(true);
1:         broker.setPersistent(false);
1:         broker.addConnector("tcp://localhost:61616");
1:         broker.start();
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         
0:         int threadCountAfterStop = Thread.activeCount();
0:         assertTrue("Threads are leaking: " + ThreadExplorer.show("active afer stop") + ". threadCount=" + threadCount + " threadCountAfterStop=" + threadCountAfterStop,
0:                 threadCountAfterStop == threadCount);
1: 
1:     }
1: 
commit:0e1d632
/////////////////////////////////////////////////////////////////////////
0:                 threadCountAfterSleep < threadCount + 8);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:aa6a6d7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:         // lets see the thread counts at INFO level so they are always in the test log
0:         LOG.info(ThreadExplorer.show("active after stop"));
1:         LOG.info("originalThreadCount=" + originalThreadCount + " threadCountAfterStop=" + threadCountAfterStop);
1: 
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:14110f5
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 	private static final Logger LOG = LoggerFactory.getLogger(VmTransportNetworkBrokerTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(ThreadExplorer.show("threads at beginning"));
1:         
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         // get final threads but filter out any daemon threads that the JVM may have created.
0:         Thread[] threads = filterDaemonThreads(ThreadExplorer.listThreads());
0:         int threadCountAfterStop = threads.length;
1:         
0:         if (LOG.isDebugEnabled()) {
0:         	LOG.debug(ThreadExplorer.show("active after stop"));
0:         	LOG.debug("originalThreadCount=" + originalThreadCount + " threadCountAfterStop=" + threadCountAfterStop); 
1:         }
1:         
1:         assertTrue("Threads are leaking: " + 
1:         		ThreadExplorer.show("active after stop") + 
1:         		". originalThreadCount=" + 
1:         		originalThreadCount + 
1:         		" threadCountAfterStop=" + 
0:         		threadCountAfterStop,
0:             threadCountAfterStop == originalThreadCount);
1:     }
1:     
1:     
1:     /**
1:      * Filters any daemon threads from the thread list.
1:      * 
1:      * Thread counts before and after the test should ideally be equal. 
1:      * However there is no guarantee that the JVM does not create any 
1:      * additional threads itself.
1:      * E.g. on Mac OSX there is a JVM internal thread called
1:      * "Poller SunPKCS11-Darwin" created after the test go started and 
1:      * under the main thread group.
1:      * When debugging tests in Eclipse another so called "Reader" thread 
1:      * is created by Eclipse.
1:      * So we cannot assume that the JVM does not create additional threads
1:      * during the test. However for the time being we assume that any such 
1:      * additionally created threads are daemon threads.
1:      *   
1:      * @param threads - the array of threads to parse
1:      * @return a new array with any daemon threads removed
1:      */
1:     public Thread[] filterDaemonThreads(Thread[] threads) throws Exception {
1:     
1:     	List<Thread> threadList = new ArrayList<Thread>(Arrays.asList(threads));
1:     	
1:     	// Can't use an Iterator as it would raise a 
1:     	// ConcurrentModificationException when trying to remove an element
1:     	// from the list, so using standard walk through
1:     	for (int i = 0 ; i < threadList.size(); i++) {
1:     		
1:     		Thread thread = threadList.get(i);
1:     		LOG.debug("Inspecting thread " + thread.getName());
0:     		if (thread.isDaemon()) {
1:     			LOG.debug("Removing deamon thread.");
1:     			threadList.remove(thread);
1:     			Thread.sleep(100);
1:     	
1:     		}
1:     	}
1:     	LOG.debug("Converting list back to Array");
1:     	return threadList.toArray(new Thread[0]);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e037e06
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("Threads are leaking, threadCount=" + threadCount + " threadCountAfterSleep=" + threadCountAfterSleep, 
0:                 threadCountAfterSleep < threadCount + 5);
commit:ce8f83a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.vm;
1: 
1: import java.net.URI;
0: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.NetworkConnector;
1: 
1: public class VmTransportNetworkBrokerTest extends TestCase {
1: 
1:     private static final String VM_BROKER_URI = 
1:         "vm://localhost?create=false";
1:     
0:     CountDownLatch started = new CountDownLatch(1);
0:     CountDownLatch gotConnection = new CountDownLatch(1);
1: 
0:     public void testNoThreadLeakWithActiveVMConnection() throws Exception {
1:         
0:         BrokerService broker = new BrokerService();
1:         broker.setDedicatedTaskRunner(true);
1:         broker.setPersistent(false);
0:         broker.addConnector("tcp://localhost:61616");
1:         NetworkConnector networkConnector = broker.addNetworkConnector("static:(tcp://wrongHostname1:61617,tcp://wrongHostname2:61618)?useExponentialBackOff=false");
1:         networkConnector.setDuplex(true);
1:         broker.start();
1:         
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI));
0:         cf.createConnection("system", "manager").start();
1:         
0:         // let it settle
0:         TimeUnit.SECONDS.sleep(5);
1:         
0:         int threadCount = Thread.activeCount();
0:         TimeUnit.SECONDS.sleep(30);
1:         int threadCountAfterSleep = Thread.activeCount();
1:         
0:         assertTrue("things are ok w.r.t.threads, threadCount=" + threadCount + " threadCountAfterSleep=" + threadCountAfterSleep, 
0:                 threadCountAfterSleep < threadCount+2);
1:                 
0:         broker.stop(); 
0:     }
0: }
============================================================================