1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
2:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
37:1a88ac6: 
1:1a88ac6: package org.apache.activemq.security;
1:1a88ac6: 
1:74a7a8b: import java.security.Principal;
1:74a7a8b: import java.util.HashMap;
1:74a7a8b: import java.util.HashSet;
1:74a7a8b: import java.util.Iterator;
1:74a7a8b: import java.util.Set;
1:1a88ac6: 
1:74a7a8b: import javax.security.auth.login.AppConfigurationEntry;
1:74a7a8b: import javax.security.auth.login.Configuration;
1:74a7a8b: 
1:74a7a8b: import junit.framework.TestCase;
1:4743a20: 
1:1a88ac6: import org.apache.activemq.broker.ConnectionContext;
1:1a88ac6: import org.apache.activemq.broker.StubBroker;
1:1a88ac6: import org.apache.activemq.command.ConnectionInfo;
1:1a88ac6: import org.apache.activemq.jaas.GroupPrincipal;
1:1a88ac6: import org.apache.activemq.jaas.UserPrincipal;
1:1a88ac6: import org.apache.activemq.transport.tcp.StubX509Certificate;
1:1a88ac6: 
1:1a88ac6: public class JaasCertificateAuthenticationBrokerTest extends TestCase {
1:1a88ac6:     StubBroker receiveBroker;
1:74a7a8b: 
1:1a88ac6:     JaasCertificateAuthenticationBroker authBroker;
1:74a7a8b: 
1:1a88ac6:     ConnectionContext connectionContext;
1:1a88ac6:     ConnectionInfo connectionInfo;
1:74a7a8b: 
1:4743a20:     @Override
1:1a88ac6:     protected void setUp() throws Exception {
1:1a88ac6:         receiveBroker = new StubBroker();
1:74a7a8b: 
1:1a88ac6:         authBroker = new JaasCertificateAuthenticationBroker(receiveBroker, "");
1:74a7a8b: 
1:1a88ac6:         connectionContext = new ConnectionContext();
1:1a88ac6:         connectionInfo = new ConnectionInfo();
1:74a7a8b: 
1:1a88ac6:         connectionInfo.setTransportContext(new StubX509Certificate[] {});
1:1a88ac6:     }
1:74a7a8b: 
1:4743a20:     @Override
1:1a88ac6:     protected void tearDown() throws Exception {
1:1a88ac6:         super.tearDown();
1:1a88ac6:     }
1:74a7a8b: 
1:933eb2f:     private void setConfiguration(Set<String> userNames, Set<String> groupNames, boolean loginShouldSucceed) {
1:933eb2f:         HashMap<String, String> configOptions = new HashMap<String, String>();
1:74a7a8b: 
1:1a88ac6:         String userNamesString;
1:1a88ac6:         {
1:933eb2f:             Iterator<String> iter = userNames.iterator();
1:933eb2f:             userNamesString = "" + (iter.hasNext() ? iter.next() : "");
1:1a88ac6:             while (iter.hasNext()) {
1:933eb2f:                 userNamesString += "," + iter.next();
1:1a88ac6:             }
1:1a88ac6:         }
1:74a7a8b: 
1:1a88ac6:         String groupNamesString = "";
1:1a88ac6:         {
1:933eb2f:             Iterator<String> iter = groupNames.iterator();
1:933eb2f:             groupNamesString = "" + (iter.hasNext() ? iter.next() : "");
1:1a88ac6:             while (iter.hasNext()) {
1:933eb2f:                 groupNamesString += "," + iter.next();
1:1a88ac6:             }
1:1a88ac6:         }
1:1a88ac6: 
1:74a7a8b:         configOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY, loginShouldSucceed ? "true" : "false");
1:1a88ac6:         configOptions.put(StubLoginModule.USERS_PROPERTY, userNamesString);
1:1a88ac6:         configOptions.put(StubLoginModule.GROUPS_PROPERTY, groupNamesString);
1:74a7a8b:         AppConfigurationEntry configEntry = new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule", AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,
1:74a7a8b:                                                                       configOptions);
1:74a7a8b: 
1:1a88ac6:         StubJaasConfiguration jaasConfig = new StubJaasConfiguration(configEntry);
1:74a7a8b: 
1:1a88ac6:         Configuration.setConfiguration(jaasConfig);
1:1a88ac6:     }
1:74a7a8b: 
1:1a88ac6:     public void testAddConnectionSuccess() {
1:1a88ac6:         String dnUserName = "dnUserName";
1:74a7a8b: 
1:933eb2f:         HashSet<String> userNames = new HashSet<String>();
1:1a88ac6:         userNames.add(dnUserName);
1:74a7a8b: 
1:933eb2f:         HashSet<String> groupNames = new HashSet<String>();
1:1a88ac6:         groupNames.add("testGroup1");
1:1a88ac6:         groupNames.add("testGroup2");
1:1a88ac6:         groupNames.add("tesetGroup3");
1:74a7a8b: 
1:74a7a8b:         setConfiguration(userNames, groupNames, true);
1:74a7a8b: 
1:1a88ac6:         try {
1:1a88ac6:             authBroker.addConnection(connectionContext, connectionInfo);
1:1a88ac6:         } catch (Exception e) {
1:1a88ac6:             fail("Call to addConnection failed: " + e.getMessage());
1:1a88ac6:         }
1:74a7a8b: 
1:74a7a8b:         assertEquals("Number of addConnection calls to underlying Broker must match number of calls made to " + "AuthenticationBroker.", 1, receiveBroker.addConnectionData.size());
1:74a7a8b: 
1:4743a20:         ConnectionContext receivedContext = receiveBroker.addConnectionData.getFirst().connectionContext;
1:74a7a8b: 
1:74a7a8b:         assertEquals("The SecurityContext's userName must be set to that of the UserPrincipal.", dnUserName, receivedContext.getSecurityContext().getUserName());
1:74a7a8b: 
1:4743a20:         Set<Principal> receivedPrincipals = receivedContext.getSecurityContext().getPrincipals();
1:74a7a8b: 
1:4743a20:         for (Iterator<Principal> iter = receivedPrincipals.iterator(); iter.hasNext();) {
1:4743a20:             Principal currentPrincipal = iter.next();
1:74a7a8b: 
1:1a88ac6:             if (currentPrincipal instanceof UserPrincipal) {
1:1a88ac6:                 if (userNames.remove(currentPrincipal.getName())) {
1:1a88ac6:                     // Nothing, we did good.
1:1a88ac6:                 } else {
1:1a88ac6:                     // Found an unknown userName.
1:1a88ac6:                     fail("Unknown UserPrincipal found");
1:1a88ac6:                 }
1:1a88ac6:             } else if (currentPrincipal instanceof GroupPrincipal) {
1:1a88ac6:                 if (groupNames.remove(currentPrincipal.getName())) {
1:1a88ac6:                     // Nothing, we did good.
1:1a88ac6:                 } else {
1:1a88ac6:                     fail("Unknown GroupPrincipal found.");
1:1a88ac6:                 }
1:1a88ac6:             } else {
1:1a88ac6:                 fail("Unexpected Principal subclass found.");
1:1a88ac6:             }
1:1a88ac6:         }
1:74a7a8b: 
1:1a88ac6:         if (!userNames.isEmpty()) {
1:1a88ac6:             fail("Some usernames were not added as UserPrincipals");
1:1a88ac6:         }
1:74a7a8b: 
1:1a88ac6:         if (!groupNames.isEmpty()) {
1:1a88ac6:             fail("Some group names were not added as GroupPrincipals");
1:1a88ac6:         }
1:1a88ac6:     }
1:74a7a8b: 
1:1a88ac6:     public void testAddConnectionFailure() {
1:933eb2f:         HashSet<String> userNames = new HashSet<String>();
1:74a7a8b: 
1:933eb2f:         HashSet<String> groupNames = new HashSet<String>();
1:1a88ac6:         groupNames.add("testGroup1");
1:1a88ac6:         groupNames.add("testGroup2");
1:1a88ac6:         groupNames.add("tesetGroup3");
1:74a7a8b: 
1:74a7a8b:         setConfiguration(userNames, groupNames, false);
1:74a7a8b: 
1:1a88ac6:         boolean connectFailed = false;
1:1a88ac6:         try {
1:1a88ac6:             authBroker.addConnection(connectionContext, connectionInfo);
1:1a88ac6:         } catch (SecurityException e) {
1:1a88ac6:             connectFailed = true;
1:1a88ac6:         } catch (Exception e) {
1:1a88ac6:             fail("Failed to connect for unexpected reason: " + e.getMessage());
1:1a88ac6:         }
1:74a7a8b: 
1:1a88ac6:         if (!connectFailed) {
1:1a88ac6:             fail("Unauthenticated connection allowed.");
1:1a88ac6:         }
1:74a7a8b: 
1:74a7a8b:         assertEquals("Unauthenticated connection allowed.", true, receiveBroker.addConnectionData.isEmpty());
1:1a88ac6:     }
1:74a7a8b: 
1:1a88ac6:     public void testRemoveConnection() throws Exception {
1:1a88ac6:         connectionContext.setSecurityContext(new StubSecurityContext());
1:1a88ac6: 
1:74a7a8b:         authBroker.removeConnection(connectionContext, connectionInfo, new Throwable());
1:74a7a8b: 
1:74a7a8b:         assertEquals("removeConnection should clear ConnectionContext.", null, connectionContext.getSecurityContext());
1:74a7a8b: 
1:74a7a8b:         assertEquals("Incorrect number of calls to underlying broker were made.", 1, receiveBroker.removeConnectionData.size());
1:1a88ac6:     }
1:1a88ac6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         ConnectionContext receivedContext = receiveBroker.addConnectionData.getFirst().connectionContext;
1:         Set<Principal> receivedPrincipals = receivedContext.getSecurityContext().getPrincipals();
1:         for (Iterator<Principal> iter = receivedPrincipals.iterator(); iter.hasNext();) {
1:             Principal currentPrincipal = iter.next();
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private void setConfiguration(Set<String> userNames, Set<String> groupNames, boolean loginShouldSucceed) {
1:         HashMap<String, String> configOptions = new HashMap<String, String>();
1:             Iterator<String> iter = userNames.iterator();
1:             userNamesString = "" + (iter.hasNext() ? iter.next() : "");
1:                 userNamesString += "," + iter.next();
1:             Iterator<String> iter = groupNames.iterator();
1:             groupNamesString = "" + (iter.hasNext() ? iter.next() : "");
1:                 groupNamesString += "," + iter.next();
/////////////////////////////////////////////////////////////////////////
1:         HashSet<String> userNames = new HashSet<String>();
1:         HashSet<String> groupNames = new HashSet<String>();
/////////////////////////////////////////////////////////////////////////
1:         HashSet<String> userNames = new HashSet<String>();
1:         HashSet<String> groupNames = new HashSet<String>();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.Set;
1: import javax.security.auth.login.AppConfigurationEntry;
1: import javax.security.auth.login.Configuration;
1: 
1: import junit.framework.TestCase;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         configOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY, loginShouldSucceed ? "true" : "false");
1:         AppConfigurationEntry configEntry = new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule", AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,
1:                                                                       configOptions);
1: 
1: 
1: 
1: 
1: 
1: 
1:         setConfiguration(userNames, groupNames, true);
1: 
1: 
1:         assertEquals("Number of addConnection calls to underlying Broker must match number of calls made to " + "AuthenticationBroker.", 1, receiveBroker.addConnectionData.size());
1: 
0:         ConnectionContext receivedContext = ((StubBroker.AddConnectionData)receiveBroker.addConnectionData.getFirst()).connectionContext;
1: 
1:         assertEquals("The SecurityContext's userName must be set to that of the UserPrincipal.", dnUserName, receivedContext.getSecurityContext().getUserName());
1: 
0:         Set receivedPrincipals = receivedContext.getSecurityContext().getPrincipals();
1: 
0:         for (Iterator iter = receivedPrincipals.iterator(); iter.hasNext();) {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1:         setConfiguration(userNames, groupNames, false);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertEquals("Unauthenticated connection allowed.", true, receiveBroker.addConnectionData.isEmpty());
1: 
1:         authBroker.removeConnection(connectionContext, connectionInfo, new Throwable());
1: 
1:         assertEquals("removeConnection should clear ConnectionContext.", null, connectionContext.getSecurityContext());
1: 
1:         assertEquals("Incorrect number of calls to underlying broker were made.", 1, receiveBroker.removeConnectionData.size());
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.security;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.StubBroker;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.jaas.GroupPrincipal;
1: import org.apache.activemq.jaas.UserPrincipal;
1: import org.apache.activemq.transport.tcp.StubX509Certificate;
1: 
0: import java.io.IOException;
0: import java.security.Principal;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Iterator;
0: import java.util.Set;
1: 
0: import javax.security.auth.Subject;
0: import javax.security.auth.callback.CallbackHandler;
0: import javax.security.auth.login.AppConfigurationEntry;
0: import javax.security.auth.login.Configuration;
0: import javax.security.auth.login.LoginContext;
1: 
1: public class JaasCertificateAuthenticationBrokerTest extends TestCase {
1:     StubBroker receiveBroker;
1:     
1:     JaasCertificateAuthenticationBroker authBroker;
1:     
1:     ConnectionContext connectionContext;
1:     ConnectionInfo connectionInfo;
1:     
1:     protected void setUp() throws Exception {
1:         receiveBroker = new StubBroker();
1:         
1:         authBroker = new JaasCertificateAuthenticationBroker(receiveBroker, "");
1:         
1:         connectionContext = new ConnectionContext();
1:         connectionInfo = new ConnectionInfo();
1:         
1:         connectionInfo.setTransportContext(new StubX509Certificate[] {});
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1:     
0:     private void setConfiguration(Set userNames, Set groupNames, boolean loginShouldSucceed) {
0:         HashMap configOptions = new HashMap();
1:         
1:         String userNamesString;
1:         {
0:             Iterator iter = userNames.iterator();
0:             userNamesString = "" + (iter.hasNext() ? (String)iter.next() : "");
1:             while (iter.hasNext()) {
0:                 userNamesString += "," + (String)iter.next();
1:             }
1:         }
1:         
1:         String groupNamesString = "";
1:         {
0:             Iterator iter = groupNames.iterator();
0:             groupNamesString = "" + (iter.hasNext() ? (String)iter.next() : "");
1:             while (iter.hasNext()) {
0:                 groupNamesString += "," + (String)iter.next();
1:             }
1:         }
1:         
0:         configOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY, (loginShouldSucceed ? "true" : "false"));
1:         configOptions.put(StubLoginModule.USERS_PROPERTY, userNamesString);
1:         configOptions.put(StubLoginModule.GROUPS_PROPERTY, groupNamesString);
0:         AppConfigurationEntry configEntry = new AppConfigurationEntry(
0:             "org.apache.activemq.security.StubLoginModule",
0:             AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,
0:             configOptions);
1:     
1:         StubJaasConfiguration jaasConfig = new StubJaasConfiguration(configEntry);
1:         
1:         Configuration.setConfiguration(jaasConfig);
1:     }
1:     
1:     public void testAddConnectionSuccess() {
1:         String dnUserName = "dnUserName";
1:         
0:         HashSet userNames = new HashSet();
1:         userNames.add(dnUserName);
1:         
0:         HashSet groupNames = new HashSet();
1:         groupNames.add("testGroup1");
1:         groupNames.add("testGroup2");
1:         groupNames.add("tesetGroup3");
1:         
0:         setConfiguration(
0:             userNames,
0:             groupNames,
0:             true);
1:         
1:         try {
1:             authBroker.addConnection(connectionContext, connectionInfo);
1:         } catch (Exception e) {
1:             fail("Call to addConnection failed: " + e.getMessage());
1:         }
1:         
0:         assertEquals("Number of addConnection calls to underlying Broker must match number of calls made to " +
0:                 "AuthenticationBroker.",
0:             1, receiveBroker.addConnectionData.size());
1:         
0:         ConnectionContext receivedContext =
0:             ((StubBroker.AddConnectionData)receiveBroker.addConnectionData.getFirst()).connectionContext; 
1:         
0:         assertEquals("The SecurityContext's userName must be set to that of the UserPrincipal.",
0:             dnUserName, receivedContext.getSecurityContext().getUserName());
1:         
0:         Set receivedPrincipals =
0:             receivedContext.getSecurityContext().getPrincipals();
1:         
0:         for (Iterator iter = receivedPrincipals.iterator(); iter.hasNext(); ) {
0:             Principal currentPrincipal = (Principal)iter.next();
1:             
1:             if (currentPrincipal instanceof UserPrincipal) {
1:                 if (userNames.remove(currentPrincipal.getName())) {
1:                     // Nothing, we did good.
1:                 } else {
1:                     // Found an unknown userName.
1:                     fail("Unknown UserPrincipal found");
1:                 }
1:             } else if (currentPrincipal instanceof GroupPrincipal) {
1:                 if (groupNames.remove(currentPrincipal.getName())) {
1:                     // Nothing, we did good.
1:                 } else {
1:                     fail("Unknown GroupPrincipal found.");
1:                 }
1:             } else {
1:                 fail("Unexpected Principal subclass found.");
1:             }
1:         }
1:         
1:         if (!userNames.isEmpty()) {
1:             fail("Some usernames were not added as UserPrincipals");
1:         }
1:         
1:         if (!groupNames.isEmpty()) {
1:             fail("Some group names were not added as GroupPrincipals");
1:         }
1:     }
1:     
1:     public void testAddConnectionFailure() {
0:         HashSet userNames = new HashSet();
1:         
0:         HashSet groupNames = new HashSet();
1:         groupNames.add("testGroup1");
1:         groupNames.add("testGroup2");
1:         groupNames.add("tesetGroup3");
1:         
0:         setConfiguration(
0:             userNames,
0:             groupNames,
0:             false);
1:         
1:         boolean connectFailed = false;
1:         try {
1:             authBroker.addConnection(connectionContext, connectionInfo);
1:         } catch (SecurityException e) {
1:             connectFailed = true;
1:         } catch (Exception e) {
1:             fail("Failed to connect for unexpected reason: " + e.getMessage());
1:         }
1:         
1:         if (!connectFailed) {
1:             fail("Unauthenticated connection allowed.");
1:         }
1:         
0:         assertEquals("Unauthenticated connection allowed.",
0:             true, receiveBroker.addConnectionData.isEmpty());
1:     }
1:     
1:     public void testRemoveConnection() throws Exception {
1:         connectionContext.setSecurityContext(new StubSecurityContext());
1:         
0:         authBroker.removeConnection(connectionContext, connectionInfo, new Throwable());
1:         
0:         assertEquals("removeConnection should clear ConnectionContext.",
0:             null, connectionContext.getSecurityContext());
1: 
0:         assertEquals("Incorrect number of calls to underlying broker were made.",
0:             1, receiveBroker.removeConnectionData.size());
1:     }
1: }
============================================================================