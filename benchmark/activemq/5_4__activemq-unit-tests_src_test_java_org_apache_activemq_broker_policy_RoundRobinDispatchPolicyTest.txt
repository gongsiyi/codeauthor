1:ff457e2: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:ff457e2:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ff457e2:  *
1:ff457e2:  * Unless required by applicable law or agreed to in writing, software
1:ff457e2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ff457e2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff457e2:  * See the License for the specific language governing permissions and
1:ff457e2:  * limitations under the License.
1:ff457e2:  */
1:ff457e2: package org.apache.activemq.broker.policy;
7:ff457e2: 
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:74a7a8b: import org.apache.activemq.broker.QueueSubscriptionTest;
1:74a7a8b: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:74a7a8b: import org.apache.activemq.broker.region.policy.PolicyMap;
1:74a7a8b: import org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy;
1:bec711c: import org.junit.Test;
1:bec711c: import org.junit.runner.RunWith;
1:bec711c: import org.junit.runners.BlockJUnit4ClassRunner;
1:ff457e2: 
1:fa6aaf9: import javax.jms.Connection;
1:fa6aaf9: import javax.jms.Destination;
1:fa6aaf9: import javax.jms.MessageConsumer;
1:fa6aaf9: import javax.jms.Session;
1:fa6aaf9: 
1:bec711c: @RunWith(BlockJUnit4ClassRunner.class)
1:ff457e2: public class RoundRobinDispatchPolicyTest extends QueueSubscriptionTest {
1:74a7a8b: 
1:ff457e2:     protected BrokerService createBroker() throws Exception {
1:ff457e2:         BrokerService broker = super.createBroker();
1:b02ca01: 
1:ff457e2:         PolicyEntry policy = new PolicyEntry();
1:ff457e2:         policy.setDispatchPolicy(new RoundRobinDispatchPolicy());
1:ff457e2: 
1:ff457e2:         PolicyMap pMap = new PolicyMap();
1:ff457e2:         pMap.setDefaultEntry(policy);
1:ff457e2: 
1:ff457e2:         broker.setDestinationPolicy(pMap);
1:ff457e2: 
1:ff457e2:         return broker;
2:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception {
1:ff457e2:         super.testOneProducerTwoConsumersSmallMessagesOnePrefetch();
1:ff457e2: 
1:ff457e2:         // Ensure that each consumer should have received at least one message
1:74a7a8b:         // We cannot guarantee that messages will be equally divided, since
1:74a7a8b:         // prefetch is one
1:ff457e2:         assertEachConsumerReceivedAtLeastXMessages(1);
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:ff457e2:         super.testOneProducerTwoConsumersSmallMessagesLargePrefetch();
1:ff457e2:         assertMessagesDividedAmongConsumers();
1:ff457e2:     }
1:b02ca01: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
1:ff457e2:         super.testOneProducerTwoConsumersLargeMessagesOnePrefetch();
1:b02ca01: 
1:ff457e2:         // Ensure that each consumer should have received at least one message
1:74a7a8b:         // We cannot guarantee that messages will be equally divided, since
1:74a7a8b:         // prefetch is one
1:ff457e2:         assertEachConsumerReceivedAtLeastXMessages(1);
1:ff457e2:     }
1:b02ca01: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:ff457e2:         super.testOneProducerTwoConsumersLargeMessagesLargePrefetch();
1:ff457e2:         assertMessagesDividedAmongConsumers();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerManyConsumersFewMessages() throws Exception {
1:ff457e2:         super.testOneProducerManyConsumersFewMessages();
1:ff457e2: 
1:74a7a8b:         // Since there are more consumers, each consumer should have received at
1:74a7a8b:         // most one message only
1:ff457e2:         assertMessagesDividedAmongConsumers();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerManyConsumersManyMessages() throws Exception {
1:ff457e2:         super.testOneProducerManyConsumersManyMessages();
1:ff457e2:         assertMessagesDividedAmongConsumers();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testManyProducersManyConsumers() throws Exception {
1:ff457e2:         super.testManyProducersManyConsumers();
1:ff457e2:         assertMessagesDividedAmongConsumers();
1:ff457e2:     }
1:74a7a8b: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:b02ca01:     public void testOneProducerTwoMatchingConsumersOneNotMatchingConsumer() throws Exception {
1:74a7a8b:         // Create consumer that won't consume any message
1:b02ca01:         createMessageConsumer(createConnectionFactory().createConnection(), createDestination(), "JMSPriority<1");
1:b02ca01:         super.testOneProducerTwoConsumersSmallMessagesLargePrefetch();
1:b02ca01:         assertMessagesDividedAmongConsumers();
1:b02ca01:     }
1:74a7a8b: 
1:b02ca01:     protected MessageConsumer createMessageConsumer(Connection conn, Destination dest, String selector) throws Exception {
1:b02ca01:         connections.add(conn);
1:74a7a8b: 
1:b02ca01:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:74a7a8b:         final MessageConsumer consumer = sess.createConsumer(dest, selector);
1:74a7a8b:         conn.start();
1:74a7a8b: 
1:74a7a8b:         return consumer;
1:74a7a8b:     }
1:b02ca01: 
1:ff457e2:     public void assertMessagesDividedAmongConsumers() {
1:ff457e2:         assertEachConsumerReceivedAtLeastXMessages((messageCount * producerCount) / consumerCount);
1:ff457e2:         assertEachConsumerReceivedAtMostXMessages(((messageCount * producerCount) / consumerCount) + 1);
1:b02ca01:     }
1:ff457e2: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:fa6aaf9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: @RunWith(BlockJUnit4ClassRunner.class)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
1:     @Test(timeout = 60 * 1000)
1:     @Test(timeout = 60 * 1000)
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.QueueSubscriptionTest;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy;
1: 
/////////////////////////////////////////////////////////////////////////
1:         // We cannot guarantee that messages will be equally divided, since
1:         // prefetch is one
/////////////////////////////////////////////////////////////////////////
1:         // We cannot guarantee that messages will be equally divided, since
1:         // prefetch is one
/////////////////////////////////////////////////////////////////////////
1:         // Since there are more consumers, each consumer should have received at
1:         // most one message only
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Create consumer that won't consume any message
1: 
1: 
1:         final MessageConsumer consumer = sess.createConsumer(dest, selector);
1:         conn.start();
1: 
1:         return consumer;
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:b02ca01
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Session;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testOneProducerTwoMatchingConsumersOneNotMatchingConsumer() throws Exception {
0:     // Create consumer that won't consume any message
1:         createMessageConsumer(createConnectionFactory().createConnection(), createDestination(), "JMSPriority<1");
1:         super.testOneProducerTwoConsumersSmallMessagesLargePrefetch();
1:         assertMessagesDividedAmongConsumers();
1:     }
1:     	
1:     protected MessageConsumer createMessageConsumer(Connection conn, Destination dest, String selector) throws Exception {
1:         connections.add(conn);
1:     
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:     	final MessageConsumer consumer = sess.createConsumer(dest, selector);
0:     	conn.start();
1:     	
0:     	return consumer;
1:     }    
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:ff457e2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
0: import org.apache.activemq.broker.QueueSubscriptionTest;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
1: 
1: public class RoundRobinDispatchPolicyTest extends QueueSubscriptionTest {
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setDispatchPolicy(new RoundRobinDispatchPolicy());
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         broker.setDestinationPolicy(pMap);
1: 
1:         return broker;
1:     }
1: 
1:     public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersSmallMessagesOnePrefetch();
1: 
1:         // Ensure that each consumer should have received at least one message
0:         // We cannot guarantee that messages will be equally divided, since prefetch is one
1:         assertEachConsumerReceivedAtLeastXMessages(1);
1:     }
1: 
1:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersSmallMessagesLargePrefetch();
1:         assertMessagesDividedAmongConsumers();
1:     }
1: 
1:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersLargeMessagesOnePrefetch();
1: 
1:         // Ensure that each consumer should have received at least one message
0:         // We cannot guarantee that messages will be equally divided, since prefetch is one
1:         assertEachConsumerReceivedAtLeastXMessages(1);
1:     }
1: 
1:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersLargeMessagesLargePrefetch();
1:         assertMessagesDividedAmongConsumers();
1:     }
1: 
1:     public void testOneProducerManyConsumersFewMessages() throws Exception {
1:         super.testOneProducerManyConsumersFewMessages();
1: 
0:         // Since there are more consumers, each consumer should have received at most one message only
1:         assertMessagesDividedAmongConsumers();
1:     }
1: 
1:     public void testOneProducerManyConsumersManyMessages() throws Exception {
1:         super.testOneProducerManyConsumersManyMessages();
1:         assertMessagesDividedAmongConsumers();
1:     }
1: 
1:     public void testManyProducersManyConsumers() throws Exception {
1:         super.testManyProducersManyConsumers();
1:         assertMessagesDividedAmongConsumers();
1:     }
1: 
1:     public void assertMessagesDividedAmongConsumers() {
1:         assertEachConsumerReceivedAtLeastXMessages((messageCount * producerCount) / consumerCount);
1:         assertEachConsumerReceivedAtMostXMessages(((messageCount * producerCount) / consumerCount) + 1);
1:     }
1: }
============================================================================