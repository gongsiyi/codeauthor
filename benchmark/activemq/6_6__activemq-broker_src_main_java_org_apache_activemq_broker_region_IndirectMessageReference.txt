1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:5be5a62:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:5be5a62:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.broker.region;
1:230a86c: 
1:d29ca2a: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageId;
1:230a86c: 
1:d29ca2a: /**
1:230a86c:  * Keeps track of a message that is flowing through the Broker. This object may
1:230a86c:  * hold a hard reference to the message or only hold the id of the message if
1:230a86c:  * the message has been persisted on in a MessageStore.
1:1241e41:  *
1:1241e41:  *
1:d29ca2a:  */
1:bfaff9b: public class IndirectMessageReference implements QueueMessageReference {
1:230a86c: 
1:d29ca2a:     /** The subscription that has locked the message */
1:44b00e9:     private LockOwner lockOwner;
1:d29ca2a:     /** Has the message been dropped? */
1:d29ca2a:     private boolean dropped;
1:d29ca2a:     /** Has the message been acked? */
1:230a86c:     private boolean acked;
1:d29ca2a:     /** Direct reference to the message */
1:cd54a16:     private final Message message;
1:32e63dc:     private final MessageId messageId;
1:1241e41: 
1:d29ca2a:     /**
1:cd54a16:      * @param message
1:d29ca2a:      */
1:cd54a16:     public IndirectMessageReference(final Message message) {
2:d29ca2a:         this.message = message;
1:32e63dc:         this.messageId = message.getMessageId().copy();
1:cd54a16:         message.getMessageId();
1:cd54a16:         message.getGroupID();
1:cd54a16:         message.getGroupSequence();
5:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:cd54a16:     public Message getMessageHardRef() {
1:230a86c:         return message;
1:ecf89a6:     }
1:230a86c: 
1:1241e41:     @Override
1:cd54a16:     public int getReferenceCount() {
1:cd54a16:         return message.getReferenceCount();
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:cd54a16:     public int incrementReferenceCount() {
1:cd54a16:         return message.incrementReferenceCount();
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:cd54a16:     public int decrementReferenceCount() {
1:cd54a16:         return message.decrementReferenceCount();
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:cd54a16:     public Message getMessage() {
2:d29ca2a:         return message;
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:d29ca2a:     public String toString() {
1:7a59d28:         return "Message " + message.getMessageId() + " dropped=" + dropped + " acked=" + acked + " locked=" + (lockOwner != null);
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:cd54a16:     public void incrementRedeliveryCounter() {
1:cd54a16:         message.incrementRedeliveryCounter();
1:d29ca2a:     }
20:d29ca2a: 
1:1241e41:     @Override
1:fc00993:     public synchronized boolean isDropped() {
1:d29ca2a:         return dropped;
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:fc00993:     public synchronized void drop() {
1:230a86c:         dropped = true;
1:acd5996:         lockOwner = null;
2:d29ca2a:         message.decrementReferenceCount();
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     /**
1:1241e41:      * Check if the message has already been dropped before
1:1241e41:      * dropping. Return true if dropped, else false.
1:1241e41:      * This method exists so that this can be done atomically
1:1241e41:      * under the intrinisic lock
1:1241e41:      */
1:1241e41:     @Override
1:1241e41:     public synchronized boolean dropIfLive() {
1:1241e41:         if (isDropped()) {
1:1241e41:             return false;
1:1241e41:         } else {
1:1241e41:             drop();
1:1241e41:             return true;
1:1241e41:         }
1:1241e41:     }
1:1241e41: 
1:1241e41:     @Override
1:44b00e9:     public boolean lock(LockOwner subscription) {
1:d29ca2a:         synchronized (this) {
1:3fe7760:             if (dropped || lockOwner != null) {
1:230a86c:                 return false;
1:ecf89a6:             }
1:d29ca2a:             lockOwner = subscription;
1:d29ca2a:             return true;
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:d4382e4:     public synchronized boolean unlock() {
1:d4382e4:         boolean result = lockOwner != null;
1:d29ca2a:         lockOwner = null;
1:d4382e4:         return result;
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:fc00993:     public synchronized LockOwner getLockOwner() {
1:d29ca2a:         return lockOwner;
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:cd54a16:     public int getRedeliveryCounter() {
1:cd54a16:         return message.getRedeliveryCounter();
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:d29ca2a:     public MessageId getMessageId() {
1:32e63dc:         return messageId;
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:9a8f6e4:     public Message.MessageDestination getRegionDestination() {
1:cd54a16:         return message.getRegionDestination();
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:d29ca2a:     public boolean isPersistent() {
1:cd54a16:         return message.isPersistent();
1:d29ca2a:     }
1:230a86c: 
1:fc00993:     public synchronized boolean isLocked() {
1:230a86c:         return lockOwner != null;
1:d29ca2a:     }
1:230a86c: 
1:1241e41:     @Override
1:fc00993:     public synchronized boolean isAcked() {
1:d29ca2a:         return acked;
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:fc00993:     public synchronized void setAcked(boolean b) {
1:230a86c:         acked = b;
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:d29ca2a:     public String getGroupID() {
1:cd54a16:         return message.getGroupID();
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:d29ca2a:     public int getGroupSequence() {
1:cd54a16:         return message.getGroupSequence();
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:d29ca2a:     public ConsumerId getTargetConsumerId() {
1:cd54a16:         return message.getTargetConsumerId();
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:cc6fec6:     public long getExpiration() {
1:cd54a16:         return message.getExpiration();
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:cc6fec6:     public boolean isExpired() {
1:cd54a16:         return message.isExpired();
1:d29ca2a:     }
1:d29ca2a: 
1:1241e41:     @Override
1:230a86c:     public synchronized int getSize() {
1:cd54a16:        return message.getSize();
1:230a86c:     }
1:d29ca2a: 
1:1241e41:     @Override
1:cdc2fd3:     public boolean isAdvisory() {
1:cdc2fd3:        return message.isAdvisory();
1:d29ca2a:     }
1:6cc2c11: 
1:6cc2c11:     @Override
1:6cc2c11:     public boolean canProcessAsExpired() {
1:6cc2c11:         return message.canProcessAsExpired();
1:6cc2c11:     }
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:6cc2c11
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean canProcessAsExpired() {
1:         return message.canProcessAsExpired();
1:     }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1241e41
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     /**
1:      * Check if the message has already been dropped before
1:      * dropping. Return true if dropped, else false.
1:      * This method exists so that this can be done atomically
1:      * under the intrinisic lock
1:      */
1:     @Override
1:     public synchronized boolean dropIfLive() {
1:         if (isDropped()) {
1:             return false;
1:         } else {
1:             drop();
1:             return true;
1:         }
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:32e63dc
/////////////////////////////////////////////////////////////////////////
1:     private final MessageId messageId;
1:         this.messageId = message.getMessageId().copy();
/////////////////////////////////////////////////////////////////////////
1:         return messageId;
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1:     public Message.MessageDestination getRegionDestination() {
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:3fe7760
/////////////////////////////////////////////////////////////////////////
1:             if (dropped || lockOwner != null) {
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:         if (!regionDestination.lock(this, subscription)) {
1:         }
0:             if (dropped || (lockOwner != null && lockOwner != subscription)) {
1:             }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     public synchronized Message getMessageHardRef() {
0:     public synchronized int getReferenceCount() {
0:     public synchronized int incrementReferenceCount() {
/////////////////////////////////////////////////////////////////////////
0:     public synchronized int decrementReferenceCount() {
/////////////////////////////////////////////////////////////////////////
0:     public synchronized Message getMessage() {
/////////////////////////////////////////////////////////////////////////
0:     public synchronized void incrementRedeliveryCounter() {
1:     public synchronized boolean isDropped() {
1:     public synchronized void drop() {
/////////////////////////////////////////////////////////////////////////
0:     public synchronized void unlock() {
1:     public synchronized LockOwner getLockOwner() {
0:     public synchronized int getRedeliveryCounter() {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized boolean isLocked() {
1:     public synchronized boolean isAcked() {
1:     public synchronized void setAcked(boolean b) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * Keeps track of a message that is flowing through the Broker. This object may
1:  * hold a hard reference to the message or only hold the id of the message if
1:  * the message has been persisted on in a MessageStore.
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     /** The number of times the message has been delivered. */
0:     private short redeliveryCounter;
1:     private boolean acked;
0:     private Message message;
0:     /** the size of the message * */
0:     private int cachedSize;
1: 
0:         this.regionDestination = destination;
0:         this.messageId = message.getMessageId();
0:         this.persistent = message.isPersistent() && destination.getMessageStore() != null;
0:         this.targetConsumerId = message.getTargetConsumerId();
1: 
0:         this.referenceCount = 1;
0:         message.incrementReferenceCount();
1: 
1: 
1: 
0:         if (persistent && rc == 1 && message == null) {
1: 
0:                 if (message == null) {
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (persistent && rc == 0 && message != null) {
0:             // message=null;
1:         return message;
0:         return "Message " + messageId + " dropped=" + dropped + " locked=" + (lockOwner != null);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         dropped = true;
0:         if (!persistent && message != null) {
0:             message = null;
0:         if (!regionDestination.lock(this, subscription))
1:             return false;
0:             if (dropped || (lockOwner != null && lockOwner != subscription))
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         return lockOwner != null;
1: 
1:         acked = b;
/////////////////////////////////////////////////////////////////////////
1:     public synchronized int getSize() {
0:         Message msg = message;
0:         if (msg != null) {
0:             return msg.getSize();
1:         }
0:         return cachedSize;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:acd5996
/////////////////////////////////////////////////////////////////////////
1:         lockOwner = null;
/////////////////////////////////////////////////////////////////////////
0:             if( dropped || (lockOwner!=null && lockOwner!=subscription) )
commit:44b00e9
/////////////////////////////////////////////////////////////////////////
1:     private LockOwner lockOwner;
/////////////////////////////////////////////////////////////////////////
1:     public boolean lock(LockOwner subscription) {
/////////////////////////////////////////////////////////////////////////
0:     synchronized public LockOwner getLockOwner() {
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0: * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0: *
0: * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0: *
0: * Licensed under the Apache License, Version 2.0 (the "License");
0: * you may not use this file except in compliance with the License.
0: * You may obtain a copy of the License at
0: *
0: * http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing, software
0: * distributed under the License is distributed on an "AS IS" BASIS,
0: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: * See the License for the specific language governing permissions and
0: * limitations under the License.
0: *
0: **/
1: package org.apache.activemq.broker.region;
1: 
0: import java.io.IOException;
1: 
0: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: 
1: /**
0:  * Keeps track of a message that is flowing through the Broker.  This 
0:  * object may hold a hard reference to the message or only hold the
0:  * id of the message if the message has been persisted on in a MessageStore.
0:  * 
0:  * @version $Revision: 1.15 $
1:  */
0: public class IndirectMessageReference implements MessageReference {
1:     
0:     public static final ActiveMQMessage END_OF_BROWSE_MARKER_MESSAGE = new ActiveMQMessage();
0:     public static final IndirectMessageReference END_OF_BROWSE_MARKER = new IndirectMessageReference(END_OF_BROWSE_MARKER_MESSAGE);
1: 
0:     /** The destination that is managing the message */
0:     private final Destination regionDestination;
0:     /** The id of the message is always valid */
0:     private final MessageId messageId;
0:     /** Is the message persistent? */
0:     private final boolean persistent;
0:     private final String groupID;
0:     private final int groupSequence;
0:     private final ConsumerId targetConsumerId;
1:     
0:     /** The number of times the message has been delivered.*/
0:     private short redeliveryCounter = 0;
1:     /** The subscription that has locked the message */
0:     private Subscription lockOwner;
1:     /** Has the message been dropped? */
1:     private boolean dropped;
1:     /** Has the message been acked? */
0:     private boolean acked;    
1:     /** Direct reference to the message */
0:     private Message message;    
0:     /** The number of times the message has requested being hardened */
0:     private int referenceCount;
1:     
1:     /**
0:      * Only used by the END_OF_BROWSE_MARKER singleton
1:      */
0:     private IndirectMessageReference(ActiveMQMessage message) {
0:         this.regionDestination=null;
1:         this.message = message;
0:         this.messageId=null;
0:         this.persistent=false;
0:         this.groupID = null;
0:         this.groupSequence = 0;
0:         this.targetConsumerId=null;
1:     }
1: 
0:     public IndirectMessageReference(Destination destination, Message message) {
0:         this.regionDestination=destination;
1:         this.message = message;
0:         this.messageId=message.getMessageId();
0:         this.persistent=message.isPersistent() && destination.getMessageStore()!=null;
0:         this.groupID = message.getGroupID();
0:         this.groupSequence = message.getGroupSequence();
0:         this.targetConsumerId=message.getTargetConsumerId();
1:         
0:         this.referenceCount=1;
0:         message.incrementReferenceCount();        
1:     }
1:     
0:     synchronized public Message getMessageHardRef() {
1:         return message;
1:     }
1:     
0:     synchronized public int getReferenceCount() {
0:         return referenceCount;
1:     }
1:     
0:     synchronized public int incrementReferenceCount() {
0:         int rc = ++referenceCount;
0:         if( persistent && rc==1 ) {
0:             assert message == null;            
0:             try {
0:                 message = regionDestination.loadMessage(messageId);
0:                 if( message == null ) {
0:                     dropped = true;
0:                 } else {
0:                     message.incrementReferenceCount();
1:                 }
0:             } catch (IOException e) {
0:                 throw new RuntimeException(e);
1:             }
1:         }
0:         return rc;
1:     }
1:     
0:     synchronized public int decrementReferenceCount() {
0:         int rc = --referenceCount;
0:         if( persistent && rc == 0 && message!=null) {
1:             message.decrementReferenceCount();
0:             message=null;
1:         }
0:         return rc;
1:     }
1: 
1: 
0:     synchronized public Message getMessage() {
1:         return message;        
1:     }
1: 
1:     public String toString() {
0:         return "Message "+messageId+" dropped="+dropped+" locked="+(lockOwner!=null);
1:     }
1:     
0:     synchronized public void incrementRedeliveryCounter() {
0:         this.redeliveryCounter++;
1:     }
1: 
0:     synchronized public boolean isDropped() {
1:         return dropped;
1:     }
1:     
0:     synchronized public void drop() {
0:         dropped=true;
0:         if( !persistent && message!=null ) {
1:             message.decrementReferenceCount();
0:             message=null;
1:         }
1:     }
1: 
0:     public boolean lock(Subscription subscription) {
0:         if( !regionDestination.lock(this, subscription) )
0:             return false;        
1:         synchronized (this) {
0:             if( lockOwner!=null && lockOwner!=subscription )
0:                 return false;
1:             lockOwner = subscription;
1:             return true;
1:         }
1:     }
1:     
0:     synchronized public void unlock() {
1:         lockOwner = null;
1:     }
1:     
0:     synchronized public Subscription getLockOwner() {
1:         return lockOwner;
1:     }
1: 
0:     synchronized public int getRedeliveryCounter() {
0:         return redeliveryCounter;
1:     }
1: 
1:     public MessageId getMessageId() {
0:         return messageId;
1:     }
1: 
0:     public Destination getRegionDestination() {
0:         return regionDestination;
1:     }
1: 
1:     public boolean isPersistent() {
0:         return persistent;
1:     }
1:     
0:     synchronized public boolean isLocked() {
0:         return lockOwner!=null;
1:     }
1:     
0:     synchronized public boolean isAcked() {
1:         return acked;
1:     }
1: 
0:     synchronized public void setAcked(boolean b) {
0:         acked=b;
1:     }
1: 
1:     public String getGroupID() {
0:         return groupID;
1:     }
1: 
1:     public int getGroupSequence() {
0:         return groupSequence;
1:     }
1: 
1:     public ConsumerId getTargetConsumerId() {
0:         return targetConsumerId;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:1b45e3b
/////////////////////////////////////////////////////////////////////////
commit:d8fd533
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public boolean equals(Object obj) {
0:         return this == obj || (obj instanceof IndirectMessageReference &&
0:                 message.getMessageId().equals(((IndirectMessageReference)obj).getMessage().getMessageId()));
0:     }
0: 
0:     @Override
0:     public int hashCode() {
0:         return message.hashCode();
0:     }
0: 
commit:7a59d28
/////////////////////////////////////////////////////////////////////////
1:         return "Message " + message.getMessageId() + " dropped=" + dropped + " acked=" + acked + " locked=" + (lockOwner != null);
author:Robert Davies
-------------------------------------------------------------------------------
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
0: 
1:     public boolean isAdvisory() {
1:        return message.isAdvisory();
0:     }
commit:cd54a16
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final Message message;
0:     
0:     /**
1:      * @param message
0:      */
1:     public IndirectMessageReference(final Message message) {
1:         message.getMessageId();
1:         message.getGroupID();
1:         message.getGroupSequence();
1:     public Message getMessageHardRef() {
1:     public int getReferenceCount() {
1:         return message.getReferenceCount();
1:     public int incrementReferenceCount() {
1:         return message.incrementReferenceCount();
1:     public int decrementReferenceCount() {
1:         return message.decrementReferenceCount();
1:     public Message getMessage() {
0:         return "Message " + message.getMessageId() + " dropped=" + dropped + " locked=" + (lockOwner != null);
1:     public void incrementRedeliveryCounter() {
1:         message.incrementRedeliveryCounter();
/////////////////////////////////////////////////////////////////////////
0:         message.decrementReferenceCount();
/////////////////////////////////////////////////////////////////////////
1:     public int getRedeliveryCounter() {
1:         return message.getRedeliveryCounter();
0:         return message.getMessageId();
1:         return message.getRegionDestination();
1:         return message.isPersistent();
/////////////////////////////////////////////////////////////////////////
1:         return message.getGroupID();
1:         return message.getGroupSequence();
1:         return message.getTargetConsumerId();
1:         return message.getExpiration();
1:         return message.isExpired();
1:        return message.getSize();
commit:d4382e4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public synchronized boolean unlock() {
1:         boolean result = lockOwner != null;
1:         return result;
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
0:         this.cachedSize = message.getSize();
/////////////////////////////////////////////////////////////////////////
0:     public synchronized int getSize(){
commit:720a19c
/////////////////////////////////////////////////////////////////////////
0:             //message=null;
commit:5367f1e
/////////////////////////////////////////////////////////////////////////
0:         if( persistent && rc==1 && message == null) {
0:                  
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.MessageStore;
/////////////////////////////////////////////////////////////////////////
1: public class IndirectMessageReference implements QueueMessageReference {
0:     
0:     private final MessageStore destinationStore;
0:     
/////////////////////////////////////////////////////////////////////////
0:     public IndirectMessageReference(Queue destination, MessageStore destinationStore, Message message) {
0:         this.destinationStore = destinationStore;
/////////////////////////////////////////////////////////////////////////
0:                 message = destinationStore.getMessage(messageId);
0:                     message.setRegionDestination(regionDestination);
commit:8b04e15
/////////////////////////////////////////////////////////////////////////
0:     /** the size of the message **/
0:     private int cachedSize = 0;
/////////////////////////////////////////////////////////////////////////
0:         this.cachedSize = message != null ? message.getSize() : 0;
/////////////////////////////////////////////////////////////////////////
0:         message.incrementReferenceCount();     
0:         this.cachedSize = message != null ? message.getSize() : 0;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public int getSize(){
0:        Message msg = message;
0:        if (msg != null){
0:            return msg.getSize();
0:        }
0:        return cachedSize;
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:cc6fec6
/////////////////////////////////////////////////////////////////////////
0:     /** the expiration time of the message */
0:     private long expiration;
/////////////////////////////////////////////////////////////////////////
0:         this.expiration = message.getExpiration();
/////////////////////////////////////////////////////////////////////////
0:         this.expiration = message.getExpiration();
/////////////////////////////////////////////////////////////////////////
1:     public long getExpiration() {
0:         return expiration;
0:     }
0: 
1:     public boolean isExpired() {
0:         long expireTime = getExpiration();
0:         if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
0:             return true;
0:         }
0:         return false;
0:     }
0: 
============================================================================