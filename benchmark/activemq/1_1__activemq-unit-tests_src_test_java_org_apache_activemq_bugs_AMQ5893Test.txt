1:b9b27b9: /**
1:b9b27b9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b9b27b9:  * contributor license agreements.  See the NOTICE file distributed with
1:b9b27b9:  * this work for additional information regarding copyright ownership.
1:b9b27b9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b9b27b9:  * (the "License"); you may not use this file except in compliance with
1:b9b27b9:  * the License.  You may obtain a copy of the License at
1:b9b27b9:  *
1:b9b27b9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b9b27b9:  *
1:b9b27b9:  * Unless required by applicable law or agreed to in writing, software
1:b9b27b9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b9b27b9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b9b27b9:  * See the License for the specific language governing permissions and
1:b9b27b9:  * limitations under the License.
1:b9b27b9:  */
1:b9b27b9: package org.apache.activemq.bugs;
1:b9b27b9: 
1:b9b27b9: import static org.junit.Assert.assertEquals;
1:b9b27b9: import static org.junit.Assert.assertNotNull;
1:b9b27b9: 
1:b9b27b9: import java.util.concurrent.CountDownLatch;
1:b9b27b9: import java.util.concurrent.TimeUnit;
1:b9b27b9: 
1:b9b27b9: import javax.jms.Connection;
1:b9b27b9: import javax.jms.JMSException;
1:b9b27b9: import javax.jms.Message;
1:b9b27b9: import javax.jms.MessageConsumer;
1:b9b27b9: import javax.jms.MessageListener;
1:b9b27b9: import javax.jms.MessageProducer;
1:b9b27b9: import javax.jms.Queue;
1:b9b27b9: import javax.jms.Session;
1:b9b27b9: import javax.management.MalformedObjectNameException;
1:b9b27b9: import javax.management.ObjectName;
1:b9b27b9: 
1:b9b27b9: import org.apache.activemq.ActiveMQConnectionFactory;
1:b9b27b9: import org.apache.activemq.ActiveMQSession;
1:b9b27b9: import org.apache.activemq.broker.BrokerService;
1:b9b27b9: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:b9b27b9: import org.junit.After;
1:b9b27b9: import org.junit.Before;
1:b9b27b9: import org.junit.Rule;
1:b9b27b9: import org.junit.Test;
1:b9b27b9: import org.junit.rules.TestName;
1:b9b27b9: import org.slf4j.Logger;
1:b9b27b9: import org.slf4j.LoggerFactory;
1:b9b27b9: 
1:b9b27b9: public class AMQ5893Test {
1:b9b27b9: 
1:b9b27b9:     private static Logger LOG = LoggerFactory.getLogger(AMQ5893Test.class);
1:b9b27b9: 
1:b9b27b9:     private final int MSG_COUNT = 20;
1:b9b27b9: 
1:b9b27b9:     private BrokerService brokerService;
1:b9b27b9:     private Connection connection;
1:b9b27b9:     private String brokerURI;
1:b9b27b9:     private CountDownLatch done;
1:b9b27b9: 
1:b9b27b9:     @Rule public TestName name = new TestName();
1:b9b27b9: 
1:b9b27b9:     @Before
1:b9b27b9:     public void startBroker() throws Exception {
1:b9b27b9:         brokerService = new BrokerService();
1:b9b27b9:         brokerService.setPersistent(false);
1:b9b27b9:         brokerService.setUseJmx(true);
1:b9b27b9:         brokerService.getManagementContext().setCreateConnector(false);
1:b9b27b9:         brokerService.addConnector("tcp://localhost:0");
1:b9b27b9:         brokerService.start();
1:b9b27b9:         brokerService.waitUntilStarted();
1:b9b27b9: 
1:b9b27b9:         brokerURI = "failover:" + brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:b9b27b9:     }
1:b9b27b9: 
1:b9b27b9:     @After
1:b9b27b9:     public void stopBroker() throws Exception {
1:b9b27b9:         if (connection != null) {
1:b9b27b9:             try {
1:b9b27b9:                 connection.close();
1:b9b27b9:             } catch (Exception ex) {}
1:b9b27b9:         }
1:b9b27b9: 
1:b9b27b9:         if (brokerService != null) {
1:b9b27b9:             brokerService.stop();
1:b9b27b9:         }
1:b9b27b9:     }
1:b9b27b9: 
1:b9b27b9:     @Test(timeout = 60000)
1:b9b27b9:     public void tesIndividualAcksWithClosedConsumerAndAuditAsync() throws Exception {
1:b9b27b9:         produceSomeMessages(MSG_COUNT);
1:b9b27b9: 
1:b9b27b9:         QueueViewMBean queueView = getProxyToQueue(getDestinationName());
1:b9b27b9:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1:b9b27b9: 
1:b9b27b9:         connection = createConnection();
1:b9b27b9:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:b9b27b9:         Queue queue = session.createQueue(getDestinationName());
1:b9b27b9:         MessageConsumer consumer = session.createConsumer(queue);
1:b9b27b9:         connection.start();
1:b9b27b9: 
1:b9b27b9:         // Consume all messages with no ACK
1:b9b27b9:         done = new CountDownLatch(MSG_COUNT);
1:b9b27b9:         consumer.setMessageListener(new MessageListener() {
1:b9b27b9: 
1:b9b27b9:             @Override
1:b9b27b9:             public void onMessage(Message message) {
1:b9b27b9:                 LOG.debug("Received message: {}", message);
1:b9b27b9:                 done.countDown();
1:b9b27b9:             }
1:b9b27b9:         });
1:b9b27b9:         done.await(15, TimeUnit.SECONDS);
1:b9b27b9:         consumer.close();
1:b9b27b9:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1:b9b27b9: 
1:b9b27b9:         // Consumer the same batch again.
1:b9b27b9:         consumer = session.createConsumer(queue);
1:b9b27b9:         done = new CountDownLatch(MSG_COUNT);
1:b9b27b9:         consumer.setMessageListener(new MessageListener() {
1:b9b27b9: 
1:b9b27b9:             @Override
1:b9b27b9:             public void onMessage(Message message) {
1:b9b27b9:                 LOG.debug("Received message: {}", message);
1:b9b27b9:                 done.countDown();
1:b9b27b9:             }
1:b9b27b9:         });
1:b9b27b9:         done.await(15, TimeUnit.SECONDS);
1:b9b27b9:         consumer.close();
1:b9b27b9:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1:b9b27b9:     }
1:b9b27b9: 
1:b9b27b9:     @Test(timeout = 60000)
1:b9b27b9:     public void tesIndividualAcksWithClosedConsumerAndAuditSync() throws Exception {
1:b9b27b9:         produceSomeMessages(MSG_COUNT);
1:b9b27b9: 
1:b9b27b9:         QueueViewMBean queueView = getProxyToQueue(getDestinationName());
1:b9b27b9:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1:b9b27b9: 
1:b9b27b9:         connection = createConnection();
1:b9b27b9:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:b9b27b9:         Queue queue = session.createQueue(getDestinationName());
1:b9b27b9:         MessageConsumer consumer = session.createConsumer(queue);
1:b9b27b9:         connection.start();
1:b9b27b9: 
1:b9b27b9:         // Consume all messages with no ACK
1:b9b27b9:         for (int i = 0; i < MSG_COUNT; ++i) {
1:b9b27b9:             Message message = consumer.receive(1000);
1:b9b27b9:             assertNotNull(message);
1:b9b27b9:             LOG.debug("Received message: {}", message);
1:b9b27b9:         }
1:b9b27b9:         consumer.close();
1:b9b27b9:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1:b9b27b9: 
1:b9b27b9:         // Consumer the same batch again.
1:b9b27b9:         consumer = session.createConsumer(queue);
1:b9b27b9:         for (int i = 0; i < MSG_COUNT; ++i) {
1:b9b27b9:             Message message = consumer.receive(1000);
1:b9b27b9:             assertNotNull(message);
1:b9b27b9:             LOG.debug("Received message: {}", message);
1:b9b27b9:         }
1:b9b27b9:         consumer.close();
1:b9b27b9:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1:b9b27b9:     }
1:b9b27b9: 
1:b9b27b9:     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:b9b27b9:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:b9b27b9:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:b9b27b9:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:b9b27b9:         return proxy;
1:b9b27b9:     }
1:b9b27b9: 
1:b9b27b9:     private void produceSomeMessages(int count) throws Exception {
1:b9b27b9:         Connection connection = createConnection();
1:b9b27b9:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:b9b27b9:         Queue queue = session.createQueue(getDestinationName());
1:b9b27b9:         MessageProducer producer = session.createProducer(queue);
1:b9b27b9:         for (int i = 0; i < count; ++i) {
1:b9b27b9:             Message message = session.createMessage();
1:b9b27b9:             producer.send(message);
1:b9b27b9:         }
1:b9b27b9: 
1:b9b27b9:         connection.close();
1:b9b27b9:     }
1:b9b27b9: 
1:b9b27b9:     private Connection createConnection() throws Exception {
1:b9b27b9:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:b9b27b9:         Connection connection = factory.createConnection();
1:b9b27b9:         return connection;
1:b9b27b9:     }
1:b9b27b9: 
1:b9b27b9:     private String getDestinationName() {
1:b9b27b9:         return name.getMethodName() + "-Queue";
1:b9b27b9:     }
1:b9b27b9: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b9b27b9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ5893Test {
1: 
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ5893Test.class);
1: 
1:     private final int MSG_COUNT = 20;
1: 
1:     private BrokerService brokerService;
1:     private Connection connection;
1:     private String brokerURI;
1:     private CountDownLatch done;
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         brokerURI = "failover:" + brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Exception ex) {}
1:         }
1: 
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void tesIndividualAcksWithClosedConsumerAndAuditAsync() throws Exception {
1:         produceSomeMessages(MSG_COUNT);
1: 
1:         QueueViewMBean queueView = getProxyToQueue(getDestinationName());
1:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1: 
1:         connection = createConnection();
1:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         connection.start();
1: 
1:         // Consume all messages with no ACK
1:         done = new CountDownLatch(MSG_COUNT);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 LOG.debug("Received message: {}", message);
1:                 done.countDown();
1:             }
1:         });
1:         done.await(15, TimeUnit.SECONDS);
1:         consumer.close();
1:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1: 
1:         // Consumer the same batch again.
1:         consumer = session.createConsumer(queue);
1:         done = new CountDownLatch(MSG_COUNT);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 LOG.debug("Received message: {}", message);
1:                 done.countDown();
1:             }
1:         });
1:         done.await(15, TimeUnit.SECONDS);
1:         consumer.close();
1:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void tesIndividualAcksWithClosedConsumerAndAuditSync() throws Exception {
1:         produceSomeMessages(MSG_COUNT);
1: 
1:         QueueViewMBean queueView = getProxyToQueue(getDestinationName());
1:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1: 
1:         connection = createConnection();
1:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         connection.start();
1: 
1:         // Consume all messages with no ACK
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             Message message = consumer.receive(1000);
1:             assertNotNull(message);
1:             LOG.debug("Received message: {}", message);
1:         }
1:         consumer.close();
1:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1: 
1:         // Consumer the same batch again.
1:         consumer = session.createConsumer(queue);
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             Message message = consumer.receive(1000);
1:             assertNotNull(message);
1:             LOG.debug("Received message: {}", message);
1:         }
1:         consumer.close();
1:         assertEquals(MSG_COUNT, queueView.getQueueSize());
1:     }
1: 
1:     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     private void produceSomeMessages(int count) throws Exception {
1:         Connection connection = createConnection();
1:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < count; ++i) {
1:             Message message = session.createMessage();
1:             producer.send(message);
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     private Connection createConnection() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:         Connection connection = factory.createConnection();
1:         return connection;
1:     }
1: 
1:     private String getDestinationName() {
1:         return name.getMethodName() + "-Queue";
1:     }
1: }
============================================================================