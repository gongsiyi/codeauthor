1:59cd018: /**
1:59cd018:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:59cd018:  * contributor license agreements.  See the NOTICE file distributed with
1:59cd018:  * this work for additional information regarding copyright ownership.
1:59cd018:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:59cd018:  * (the "License"); you may not use this file except in compliance with
1:59cd018:  * the License.  You may obtain a copy of the License at
1:59cd018:  *
1:59cd018:  *      http://www.apache.org/licenses/LICENSE-2.0
1:59cd018:  *
1:59cd018:  * Unless required by applicable law or agreed to in writing, software
1:59cd018:  * distributed under the License is distributed on an "AS IS" BASIS,
1:59cd018:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:59cd018:  * See the License for the specific language governing permissions and
1:59cd018:  * limitations under the License.
1:59cd018:  */
1:59cd018: package org.apache.activemq.jaas;
1:59cd018: 
1:59cd018: import java.io.File;
1:59cd018: import java.io.FileInputStream;
1:59cd018: import java.io.IOException;
1:59cd018: import java.util.HashMap;
1:8d63083: import java.util.HashSet;
1:59cd018: import java.util.Map;
1:59cd018: import java.util.Properties;
1:8d63083: import java.util.Set;
1:59cd018: import org.slf4j.Logger;
1:59cd018: import org.slf4j.LoggerFactory;
1:59cd018: 
1:59cd018: public class ReloadableProperties {
1:59cd018:     private static final Logger LOG = LoggerFactory.getLogger(ReloadableProperties.class);
1:59cd018: 
1:59cd018:     private Properties props = new Properties();
1:59cd018:     private Map<String, String> invertedProps;
1:8d63083:     private Map<String, Set<String>> invertedValueProps;
1:59cd018:     private long reloadTime = -1;
1:59cd018:     private final PropertiesLoader.FileNameKey key;
1:59cd018: 
1:59cd018:     public ReloadableProperties(PropertiesLoader.FileNameKey key) {
1:59cd018:         this.key = key;
1:59cd018:     }
1:59cd018: 
1:59cd018:     public synchronized Properties getProps() {
1:59cd018:         return props;
1:59cd018:     }
1:59cd018: 
1:59cd018:     public synchronized ReloadableProperties obtained() {
1:59cd018:         if (reloadTime < 0 || (key.isReload() && hasModificationAfter(reloadTime))) {
1:59cd018:             props = new Properties();
1:59cd018:             try {
1:59cd018:                 load(key.file(), props);
1:59cd018:                 invertedProps = null;
1:2788bd5:                 invertedValueProps = null;
1:59cd018:                 if (key.isDebug()) {
1:59cd018:                     LOG.debug("Load of: " + key);
1:59cd018:                 }
1:59cd018:             } catch (IOException e) {
1:59cd018:                 LOG.error("Failed to load: " + key + ", reason:" + e.getLocalizedMessage());
1:59cd018:                 if (key.isDebug()) {
1:59cd018:                     LOG.debug("Load of: " + key + ", failure exception" + e);
1:59cd018:                 }
1:59cd018:             }
1:59cd018:             reloadTime = System.currentTimeMillis();
1:59cd018:         }
1:59cd018:         return this;
1:59cd018:     }
1:59cd018: 
1:59cd018:     public synchronized Map<String, String> invertedPropertiesMap() {
1:59cd018:         if (invertedProps == null) {
1:59cd018:             invertedProps = new HashMap<>(props.size());
1:59cd018:             for (Map.Entry<Object, Object> val : props.entrySet()) {
1:59cd018:                 invertedProps.put((String) val.getValue(), (String) val.getKey());
1:59cd018:             }
1:59cd018:         }
1:59cd018:         return invertedProps;
1:59cd018:     }
1:59cd018: 
1:8d63083:     public synchronized Map<String, Set<String>> invertedPropertiesValuesMap() {
1:8d63083:         if (invertedValueProps == null) {
1:8d63083:             invertedValueProps = new HashMap<>(props.size());
1:8d63083:             for (Map.Entry<Object, Object> val : props.entrySet()) {
1:8d63083:                 String[] userList = ((String)val.getValue()).split(",");
1:8d63083:                 for (String user : userList) {
1:8d63083:                     Set<String> set = invertedValueProps.get(user);
1:8d63083:                     if (set == null) {
1:8d63083:                         set = new HashSet<>();
1:8d63083:                         invertedValueProps.put(user, set);
1:8d63083:                     }
1:8d63083:                     set.add((String)val.getKey());
1:8d63083:                 }
1:8d63083:             }
1:8d63083:         }
1:8d63083:         return invertedValueProps;
1:8d63083:     }
1:8d63083: 
1:59cd018:     private void load(final File source, Properties props) throws IOException {
1:59cd018:         FileInputStream in = new FileInputStream(source);
1:59cd018:         try {
1:59cd018:             props.load(in);
1:59cd018:             if (key.isDecrypt()) {
1:59cd018:                 try {
1:59cd018:                     EncryptionSupport.decrypt(this.props);
1:59cd018:                 } catch (NoClassDefFoundError e) {
1:59cd018:                     // this Happens whe jasypt is not on the classpath..
1:59cd018:                     key.setDecrypt(false);
1:59cd018:                     LOG.info("jasypt is not on the classpath: password decryption disabled.");
1:59cd018:                 }
1:59cd018:             }
1:59cd018: 
1:59cd018:         } finally {
1:59cd018:             in.close();
1:59cd018:         }
1:59cd018:     }
1:59cd018: 
1:59cd018:     private boolean hasModificationAfter(long reloadTime) {
1:59cd018:         return key.file.lastModified() > reloadTime;
1:59cd018:     }
1:59cd018: 
1:59cd018: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2788bd5
/////////////////////////////////////////////////////////////////////////
1:                 invertedValueProps = null;
author:gtully
-------------------------------------------------------------------------------
commit:8d63083
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, Set<String>> invertedValueProps;
/////////////////////////////////////////////////////////////////////////
1:     public synchronized Map<String, Set<String>> invertedPropertiesValuesMap() {
1:         if (invertedValueProps == null) {
1:             invertedValueProps = new HashMap<>(props.size());
1:             for (Map.Entry<Object, Object> val : props.entrySet()) {
1:                 String[] userList = ((String)val.getValue()).split(",");
1:                 for (String user : userList) {
1:                     Set<String> set = invertedValueProps.get(user);
1:                     if (set == null) {
1:                         set = new HashSet<>();
1:                         invertedValueProps.put(user, set);
1:                     }
1:                     set.add((String)val.getKey());
1:                 }
1:             }
1:         }
1:         return invertedValueProps;
1:     }
1: 
commit:59cd018
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jaas;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Properties;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ReloadableProperties {
1:     private static final Logger LOG = LoggerFactory.getLogger(ReloadableProperties.class);
1: 
1:     private Properties props = new Properties();
1:     private Map<String, String> invertedProps;
1:     private long reloadTime = -1;
1:     private final PropertiesLoader.FileNameKey key;
1: 
1:     public ReloadableProperties(PropertiesLoader.FileNameKey key) {
1:         this.key = key;
1:     }
1: 
1:     public synchronized Properties getProps() {
1:         return props;
1:     }
1: 
1:     public synchronized ReloadableProperties obtained() {
1:         if (reloadTime < 0 || (key.isReload() && hasModificationAfter(reloadTime))) {
1:             props = new Properties();
1:             try {
1:                 load(key.file(), props);
1:                 invertedProps = null;
1:                 if (key.isDebug()) {
1:                     LOG.debug("Load of: " + key);
1:                 }
1:             } catch (IOException e) {
1:                 LOG.error("Failed to load: " + key + ", reason:" + e.getLocalizedMessage());
1:                 if (key.isDebug()) {
1:                     LOG.debug("Load of: " + key + ", failure exception" + e);
1:                 }
1:             }
1:             reloadTime = System.currentTimeMillis();
1:         }
1:         return this;
1:     }
1: 
1:     public synchronized Map<String, String> invertedPropertiesMap() {
1:         if (invertedProps == null) {
1:             invertedProps = new HashMap<>(props.size());
1:             for (Map.Entry<Object, Object> val : props.entrySet()) {
1:                 invertedProps.put((String) val.getValue(), (String) val.getKey());
1:             }
1:         }
1:         return invertedProps;
1:     }
1: 
1:     private void load(final File source, Properties props) throws IOException {
1:         FileInputStream in = new FileInputStream(source);
1:         try {
1:             props.load(in);
1:             if (key.isDecrypt()) {
1:                 try {
1:                     EncryptionSupport.decrypt(this.props);
1:                 } catch (NoClassDefFoundError e) {
1:                     // this Happens whe jasypt is not on the classpath..
1:                     key.setDecrypt(false);
1:                     LOG.info("jasypt is not on the classpath: password decryption disabled.");
1:                 }
1:             }
1: 
1:         } finally {
1:             in.close();
1:         }
1:     }
1: 
1:     private boolean hasModificationAfter(long reloadTime) {
1:         return key.file.lastModified() > reloadTime;
1:     }
1: 
1: }
============================================================================