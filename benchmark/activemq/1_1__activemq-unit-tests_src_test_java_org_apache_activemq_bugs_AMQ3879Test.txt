1:59b38fc: /**
1:59b38fc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:59b38fc:  * contributor license agreements.  See the NOTICE file distributed with
1:59b38fc:  * this work for additional information regarding copyright ownership.
1:59b38fc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:59b38fc:  * (the "License"); you may not use this file except in compliance with
1:59b38fc:  * the License.  You may obtain a copy of the License at
1:59b38fc:  *
1:59b38fc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:59b38fc:  *
1:59b38fc:  * Unless required by applicable law or agreed to in writing, software
1:59b38fc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:59b38fc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:59b38fc:  * See the License for the specific language governing permissions and
1:59b38fc:  * limitations under the License.
1:59b38fc:  */
1:59b38fc: package org.apache.activemq.bugs;
1:59b38fc: 
1:59b38fc: import static org.junit.Assert.assertNotNull;
1:59b38fc: 
1:59b38fc: import javax.jms.Connection;
1:59b38fc: import javax.jms.Destination;
1:59b38fc: import javax.jms.Message;
1:59b38fc: import javax.jms.MessageConsumer;
1:59b38fc: import javax.jms.MessageProducer;
1:59b38fc: import javax.jms.Session;
1:59b38fc: 
1:59b38fc: import org.apache.activemq.ActiveMQConnectionFactory;
1:59b38fc: import org.apache.activemq.advisory.AdvisorySupport;
1:59b38fc: import org.apache.activemq.broker.BrokerService;
1:59b38fc: import org.junit.After;
1:59b38fc: import org.junit.Before;
1:59b38fc: import org.junit.Test;
1:59b38fc: import org.slf4j.Logger;
1:59b38fc: import org.slf4j.LoggerFactory;
1:59b38fc: 
1:59b38fc: public class AMQ3879Test {
1:59b38fc: 
1:59b38fc:     static final Logger LOG = LoggerFactory.getLogger(AMQ3841Test.class);
1:59b38fc:     private BrokerService broker;
1:59b38fc: 
1:59b38fc:     private ActiveMQConnectionFactory factory;
1:59b38fc: 
1:59b38fc:     @Before
1:59b38fc:     public void setUp() throws Exception {
1:59b38fc:         broker = createBroker();
1:59b38fc:         broker.start();
1:59b38fc:         broker.waitUntilStarted();
1:59b38fc: 
1:59b38fc:         factory = new ActiveMQConnectionFactory("vm://localhost");
1:59b38fc:         factory.setAlwaysSyncSend(true);
1:59b38fc:     }
1:59b38fc: 
1:59b38fc:     @After
1:59b38fc:     public void tearDown() throws Exception {
1:59b38fc:         broker.stop();
1:59b38fc:         broker.waitUntilStopped();
1:59b38fc:         broker = null;
1:59b38fc:     }
1:59b38fc: 
1:59b38fc:     protected BrokerService createBroker() throws Exception {
1:59b38fc:         BrokerService broker = new BrokerService();
1:59b38fc:         broker.setDeleteAllMessagesOnStartup(true);
1:59b38fc:         broker.setPersistent(false);
1:59b38fc:         broker.setUseJmx(false);
1:59b38fc:         broker.setBrokerName("localhost");
1:59b38fc:         broker.addConnector("vm://localhost");
1:59b38fc:         return broker;
1:59b38fc:     }
1:59b38fc: 
1:59b38fc:     @Test
1:59b38fc:     public void testConnectionDletesWrongTempDests() throws Exception {
1:59b38fc: 
1:59b38fc:         final Connection connection1 = factory.createConnection();
1:59b38fc:         final Connection connection2 = factory.createConnection();
1:59b38fc: 
1:59b38fc:         Session session1 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:59b38fc:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:59b38fc: 
1:59b38fc:         Destination tempDestAdvisory = AdvisorySupport.TEMP_QUEUE_ADVISORY_TOPIC;
1:59b38fc: 
1:59b38fc:         MessageConsumer advisoryConsumer = session1.createConsumer(tempDestAdvisory);
1:59b38fc:         connection1.start();
1:59b38fc: 
1:59b38fc:         Destination tempQueue = session2.createTemporaryQueue();
1:59b38fc:         MessageProducer tempProducer = session2.createProducer(tempQueue);
1:59b38fc: 
1:59b38fc:         assertNotNull(advisoryConsumer.receive(5000));
1:59b38fc: 
1:59b38fc:         Thread t = new Thread(new Runnable() {
1:59b38fc: 
1:59b38fc:             @Override
1:59b38fc:             public void run() {
1:59b38fc:                 try {
1:59b38fc:                     Thread.sleep(20);
1:59b38fc:                     connection1.close();
1:59b38fc:                 } catch (Exception e) {
1:59b38fc:                 }
1:59b38fc:             }
1:59b38fc:         });
1:59b38fc: 
1:59b38fc:         t.start();
1:59b38fc: 
1:59b38fc:         for (int i = 0; i < 256; ++i) {
1:59b38fc:             Message msg = session2.createTextMessage("Temp Data");
1:59b38fc:             tempProducer.send(msg);
1:59b38fc:             Thread.sleep(2);
1:59b38fc:         }
1:59b38fc: 
1:59b38fc:         t.join();
1:59b38fc:     }
1:59b38fc: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:59b38fc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3879Test {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ3841Test.class);
1:     private BrokerService broker;
1: 
1:     private ActiveMQConnectionFactory factory;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         factory = new ActiveMQConnectionFactory("vm://localhost");
1:         factory.setAlwaysSyncSend(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = null;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.setBrokerName("localhost");
1:         broker.addConnector("vm://localhost");
1:         return broker;
1:     }
1: 
1:     @Test
1:     public void testConnectionDletesWrongTempDests() throws Exception {
1: 
1:         final Connection connection1 = factory.createConnection();
1:         final Connection connection2 = factory.createConnection();
1: 
1:         Session session1 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination tempDestAdvisory = AdvisorySupport.TEMP_QUEUE_ADVISORY_TOPIC;
1: 
1:         MessageConsumer advisoryConsumer = session1.createConsumer(tempDestAdvisory);
1:         connection1.start();
1: 
1:         Destination tempQueue = session2.createTemporaryQueue();
1:         MessageProducer tempProducer = session2.createProducer(tempQueue);
1: 
1:         assertNotNull(advisoryConsumer.receive(5000));
1: 
1:         Thread t = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     Thread.sleep(20);
1:                     connection1.close();
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         });
1: 
1:         t.start();
1: 
1:         for (int i = 0; i < 256; ++i) {
1:             Message msg = session2.createTextMessage("Temp Data");
1:             tempProducer.send(msg);
1:             Thread.sleep(2);
1:         }
1: 
1:         t.join();
1:     }
1: }
============================================================================