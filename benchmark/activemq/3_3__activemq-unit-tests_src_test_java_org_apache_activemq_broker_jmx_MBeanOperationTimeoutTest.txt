1:584c133: /**
1:584c133:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:584c133:  * contributor license agreements.  See the NOTICE file distributed with
1:584c133:  * this work for additional information regarding copyright ownership.
1:584c133:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:584c133:  * (the "License"); you may not use this file except in compliance with
1:584c133:  * the License.  You may obtain a copy of the License at
1:584c133:  *
1:584c133:  *      http://www.apache.org/licenses/LICENSE-2.0
1:584c133:  *
1:584c133:  * Unless required by applicable law or agreed to in writing, software
1:584c133:  * distributed under the License is distributed on an "AS IS" BASIS,
1:584c133:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:584c133:  * See the License for the specific language governing permissions and
1:584c133:  * limitations under the License.
1:584c133:  */
1:584c133: package org.apache.activemq.broker.jmx;
3:584c133: 
1:584c133: import java.util.concurrent.TimeUnit;
1:584c133: import java.util.concurrent.TimeoutException;
1:584c133: 
1:584c133: import javax.jms.Connection;
1:584c133: import javax.jms.Destination;
1:584c133: import javax.jms.Message;
1:584c133: import javax.jms.MessageProducer;
1:584c133: import javax.jms.Session;
1:584c133: import javax.management.MBeanServer;
1:584c133: import javax.management.MBeanServerInvocationHandler;
1:584c133: import javax.management.MalformedObjectNameException;
1:584c133: import javax.management.ObjectName;
1:584c133: import org.apache.activemq.ActiveMQConnectionFactory;
1:584c133: import org.apache.activemq.broker.BrokerService;
1:584c133: import org.junit.After;
1:584c133: import org.junit.Before;
1:584c133: import org.junit.Test;
1:584c133: import org.slf4j.Logger;
1:584c133: import org.slf4j.LoggerFactory;
1:584c133: import static org.junit.Assert.assertEquals;
1:584c133: import static org.junit.Assert.fail;
1:584c133: 
1:584c133: public class MBeanOperationTimeoutTest {
1:584c133:     private static final Logger LOG = LoggerFactory.getLogger(MBeanOperationTimeoutTest.class);
1:584c133: 
1:584c133:     private ActiveMQConnectionFactory connectionFactory;
1:584c133:     private BrokerService broker;
1:584c133:     private String connectionUri;
1:584c133:     private static final String destinationName = "MBeanOperationTimeoutTestQ";
1:584c133:     private static final String moveToDestinationName = "MBeanOperationTimeoutTestQ.Moved";
1:584c133: 
1:584c133:     protected MBeanServer mbeanServer;
1:584c133:     protected String domain = "org.apache.activemq";
1:584c133: 
1:584c133:     protected int messageCount = 50000;
1:584c133: 
1:96bdda7:     @Test(expected = TimeoutException.class)
1:584c133:     public void testLongOperationTimesOut() throws Exception {
1:584c133: 
1:584c133:         sendMessages(messageCount);
1:584c133:         LOG.info("Produced " + messageCount + " messages to the broker.");
1:584c133: 
1:584c133:         // Now get the QueueViewMBean and purge
1:cb7b657:         String objectNameStr = broker.getBrokerObjectName().toString();
1:cb7b657:         objectNameStr += ",destinationType=Queue,destinationName="+destinationName;
1:584c133: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
1:584c133:         QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:584c133: 
1:584c133:         long count = proxy.getQueueSize();
1:584c133:         assertEquals("Queue size", count, messageCount);
1:584c133: 
1:96bdda7:         LOG.info("Attempting to move one message, TimeoutException expected");
1:96bdda7:         proxy.moveMatchingMessagesTo(null, moveToDestinationName);
2:584c133:     }
1:584c133: 
1:584c133:     private void sendMessages(int count) throws Exception {
1:584c133:         Connection connection = connectionFactory.createConnection();
2:584c133:         try {
1:584c133:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:584c133:             Destination destination = session.createQueue(destinationName);
1:584c133:             MessageProducer producer = session.createProducer(destination);
1:584c133:             for (int i = 0; i < messageCount; i++) {
1:584c133:                 Message message = session.createMessage();
1:584c133:                 message.setIntProperty("id", i);
1:584c133:                 producer.send(message);
1:584c133:             }
1:584c133:             session.commit();
1:584c133:         } finally {
1:584c133:             connection.close();
1:584c133:         }
1:584c133:     }
1:584c133: 
1:584c133:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:584c133:         ObjectName objectName = new ObjectName(name);
1:584c133:         if (mbeanServer.isRegistered(objectName)) {
1:584c133:             LOG.info("Bean Registered: " + objectName);
1:584c133:         } else {
1:584c133:             fail("Could not find MBean!: " + objectName);
1:584c133:         }
1:584c133:         return objectName;
1:584c133:     }
1:584c133: 
1:584c133:     @Before
1:584c133:     public void setUp() throws Exception {
1:584c133:         broker = createBroker();
1:584c133:         broker.start();
1:584c133:         broker.waitUntilStarted();
1:584c133: 
1:584c133:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:584c133:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:584c133:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:584c133:     }
1:584c133: 
1:584c133:     @After
1:584c133:     public void tearDown() throws Exception {
1:96bdda7:         Thread.sleep(500);
1:584c133:         if (broker != null) {
1:584c133:             broker.stop();
1:584c133:             broker.waitUntilStopped();
1:584c133:             broker = null;
1:584c133:         }
1:584c133:     }
1:584c133: 
1:584c133:     protected BrokerService createBroker() throws Exception {
1:584c133:         BrokerService answer = new BrokerService();
1:584c133:         answer.setMbeanInvocationTimeout(TimeUnit.SECONDS.toMillis(1));
1:584c133:         answer.setUseJmx(true);
1:584c133:         answer.addConnector("vm://localhost");
1:584c133:         answer.setDeleteAllMessagesOnStartup(true);
1:584c133:         return answer;
1:584c133:     }
1:584c133: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:96bdda7
/////////////////////////////////////////////////////////////////////////
1:     @Test(expected = TimeoutException.class)
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Attempting to move one message, TimeoutException expected");
1:         proxy.moveMatchingMessagesTo(null, moveToDestinationName);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(500);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:584c133
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class MBeanOperationTimeoutTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(MBeanOperationTimeoutTest.class);
1: 
1:     private ActiveMQConnectionFactory connectionFactory;
1:     private BrokerService broker;
1:     private String connectionUri;
1:     private static final String destinationName = "MBeanOperationTimeoutTestQ";
1:     private static final String moveToDestinationName = "MBeanOperationTimeoutTestQ.Moved";
1: 
1:     protected MBeanServer mbeanServer;
1:     protected String domain = "org.apache.activemq";
1: 
1:     protected int messageCount = 50000;
1: 
0:     @Test
1:     public void testLongOperationTimesOut() throws Exception {
1: 
1:         sendMessages(messageCount);
1:         LOG.info("Produced " + messageCount + " messages to the broker.");
1: 
1:         // Now get the QueueViewMBean and purge
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + destinationName + ",BrokerName=localhost");
1:         QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         long count = proxy.getQueueSize();
1:         assertEquals("Queue size", count, messageCount);
1: 
1:         try {
0:             LOG.info("Attempting to move one message.");
0:             proxy.moveMatchingMessagesTo(null, moveToDestinationName);
0:             fail("Queue purge should have timed out.");
0:         } catch (TimeoutException e) {
0:             LOG.info("Queue message move Timed out as expected.");
1:         }
1:     }
1: 
1:     private void sendMessages(int count) throws Exception {
1:         Connection connection = connectionFactory.createConnection();
1:         try {
1:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             Destination destination = session.createQueue(destinationName);
1:             MessageProducer producer = session.createProducer(destination);
1:             for (int i = 0; i < messageCount; i++) {
1:                 Message message = session.createMessage();
1:                 message.setIntProperty("id", i);
1:                 producer.send(message);
1:             }
1:             session.commit();
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:         ObjectName objectName = new ObjectName(name);
1:         if (mbeanServer.isRegistered(objectName)) {
1:             LOG.info("Bean Registered: " + objectName);
1:         } else {
1:             fail("Could not find MBean!: " + objectName);
1:         }
1:         return objectName;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setMbeanInvocationTimeout(TimeUnit.SECONDS.toMillis(1));
1:         answer.setUseJmx(true);
1:         answer.addConnector("vm://localhost");
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         return answer;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:         String objectNameStr = broker.getBrokerObjectName().toString();
1:         objectNameStr += ",destinationType=Queue,destinationName="+destinationName;
0: 
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
============================================================================