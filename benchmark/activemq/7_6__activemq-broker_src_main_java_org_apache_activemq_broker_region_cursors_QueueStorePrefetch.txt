2:629bc81: /**
1:629bc81:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
2:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:629bc81:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
2:629bc81:  */
1:629bc81: package org.apache.activemq.broker.region.cursors;
1:230a86c: 
1:629bc81: import java.io.IOException;
1:7450a32: 
1:7450a32: import org.apache.activemq.broker.Broker;
1:7450a32: import org.apache.activemq.broker.BrokerService;
1:629bc81: import org.apache.activemq.broker.region.Queue;
1:629bc81: import org.apache.activemq.command.Message;
1:e5efc58: import org.apache.activemq.command.MessageId;
1:629bc81: import org.apache.activemq.store.MessageStore;
1:7450a32: import org.apache.activemq.store.memory.MemoryMessageStore;
1:7450a32: import org.apache.activemq.store.memory.MemoryTransactionStore;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:230a86c: 
1:629bc81: /**
1:1ee0017:  * persist pending messages pending message (messages awaiting dispatch to a
1:629bc81:  * consumer) cursor
1:734fb7d:  *
1:734fb7d:  *
1:629bc81:  */
1:071b4b1: class QueueStorePrefetch extends AbstractStoreCursor {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(QueueStorePrefetch.class);
1:affd91e:     private final MessageStore store;
1:a0ba0bf:     private final Queue queue;
1:13ec994:     private final Broker broker;
1:734fb7d: 
1:629bc81:     /**
1:e16bcf2:      * Construct it
1:e16bcf2:      * @param queue
1:629bc81:      */
1:13ec994:     public QueueStorePrefetch(Queue queue, Broker broker) {
1:071b4b1:         super(queue);
1:a0ba0bf:         this.queue = queue;
1:affd91e:         this.store = queue.getMessageStore();
1:13ec994:         this.broker = broker;
1:230a86c: 
1:409902c:     }
1:734fb7d: 
1:9c2b1d2:     @Override
1:3a5f48d:     public boolean recoverMessageReference(MessageId messageReference) throws Exception {
1:071b4b1:         Message msg = this.store.getMessage(messageReference);
1:230a86c:         if (msg != null) {
1:3a5f48d:             return recoverMessage(msg);
1:230a86c:         } else {
1:230a86c:             String err = "Failed to retrieve message for id: " + messageReference;
1:230a86c:             LOG.error(err);
1:e5efc58:             throw new IOException(err);
1:409902c:         }
1:409902c:     }
1:734fb7d: 
1:230a86c: 
1:230a86c: 
1:734fb7d:     @Override
1:409902c:     protected synchronized int getStoreSize() {
1:d7f34d9:         try {
1:affd91e:             int result = this.store.getMessageCount();
1:affd91e:             return result;
1:734fb7d: 
1:230a86c:         } catch (IOException e) {
1:230a86c:             LOG.error("Failed to get message count", e);
1:409902c:             throw new RuntimeException(e);
1:071b4b1:         }
1:409902c:     }
1:734fb7d: 
1:734fb7d:     @Override
1:734fb7d:     protected synchronized long getStoreMessageSize() {
1:734fb7d:         try {
1:734fb7d:             return this.store.getMessageSize();
1:734fb7d:         } catch (IOException e) {
1:734fb7d:             LOG.error("Failed to get message size", e);
1:734fb7d:             throw new RuntimeException(e);
1:734fb7d:         }
1:734fb7d:     }
1:734fb7d: 
2:affd91e:     @Override
1:a0ba0bf:     protected boolean canEnableCash() {
1:a0ba0bf:         return super.canEnableCash() && queue.singlePendingSend();
1:a0ba0bf:     }
1:a0ba0bf: 
1:a0ba0bf:     @Override
1:affd91e:     protected synchronized boolean isStoreEmpty() {
1:230a86c:         try {
1:affd91e:             return this.store.isEmpty();
1:734fb7d: 
1:230a86c:         } catch (Exception e) {
1:affd91e:             LOG.error("Failed to get message count", e);
1:affd91e:             throw new RuntimeException(e);
1:affd91e:         }
1:affd91e:     }
1:734fb7d: 
1:affd91e:     @Override
1:071b4b1:     protected void resetBatch() {
1:071b4b1:         this.store.resetBatching();
1:d7f34d9:     }
1:734fb7d: 
1:affd91e:     @Override
1:180b0ec:     protected void setBatch(MessageId messageId) throws Exception {
1:9c2b1d2:         if (LOG.isTraceEnabled()) {
1:9c2b1d2:             LOG.trace("{}  setBatch {} seq: {}, loc: {}", this, messageId, messageId.getFutureOrSequenceLong(), messageId.getEntryLocator());
1:9c2b1d2:         }
1:37c2a95:         store.setBatch(messageId);
1:d7f34d9:         batchResetNeeded = false;
1:d7f34d9:     }
1:734fb7d: 
1:230a86c: 
1:affd91e:     @Override
1:071b4b1:     protected void doFillBatch() throws Exception {
1:13ec994:         hadSpace = this.hasSpace();
1:13ec994:         if (!broker.getBrokerService().isPersistent() || hadSpace) {
1:13ec994:             this.store.recoverNextMessages(this.maxBatchSize, this);
1:13ec994:             dealWithDuplicates(); // without the index lock
1:13ec994:         }
1:7450a32:     }
1:230a86c: 
1:affd91e:     @Override
1:9c2b1d2:     public String toString(){
1:9c2b1d2:         return super.toString() + ",store=" + store;
1:9c2b1d2:     }
1:071b4b1: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:a0ba0bf
/////////////////////////////////////////////////////////////////////////
1:     private final Queue queue;
/////////////////////////////////////////////////////////////////////////
1:         this.queue = queue;
/////////////////////////////////////////////////////////////////////////
1:     protected boolean canEnableCash() {
1:         return super.canEnableCash() && queue.singlePendingSend();
1:     }
1: 
1:     @Override
commit:13ec994
/////////////////////////////////////////////////////////////////////////
1:     private final Broker broker;
1:     public QueueStorePrefetch(Queue queue, Broker broker) {
1:         this.broker = broker;
/////////////////////////////////////////////////////////////////////////
1:         hadSpace = this.hasSpace();
1:         if (!broker.getBrokerService().isPersistent() || hadSpace) {
1:             this.store.recoverNextMessages(this.maxBatchSize, this);
1:             dealWithDuplicates(); // without the index lock
1:         }
commit:d8cf54b
/////////////////////////////////////////////////////////////////////////
0:     public QueueStorePrefetch(Queue queue) {
/////////////////////////////////////////////////////////////////////////
0:         this.store.recoverNextMessages(this.maxBatchSize, this);
0:         dealWithDuplicates(); // without the index lock
commit:9c2b1d2
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isTraceEnabled()) {
1:             LOG.trace("{}  setBatch {} seq: {}, loc: {}", this, messageId, messageId.getFutureOrSequenceLong(), messageId.getEntryLocator());
1:         }
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String toString(){
1:         return super.toString() + ",store=" + store;
1:     }
commit:97c127d
/////////////////////////////////////////////////////////////////////////
0:         LOG.trace("{}  setBatch {} seq: {}, loc: {}", this, messageId, messageId.getFutureOrSequenceLong(), messageId.getEntryLocator());
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
0:         LOG.trace("{}  setBatch {} loc: {}", this, messageId, messageId.getEntryLocator());
commit:f92d45b
/////////////////////////////////////////////////////////////////////////
0:             dealWithDuplicates(); // without the index lock
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:     @Override
1:     protected synchronized long getStoreMessageSize() {
1:         try {
1:             return this.store.getMessageSize();
1:         } catch (IOException e) {
1:             LOG.error("Failed to get message size", e);
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7450a32
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.memory.MemoryMessageStore;
1: import org.apache.activemq.store.memory.MemoryTransactionStore;
/////////////////////////////////////////////////////////////////////////
0:     private final Broker broker;
0:     public QueueStorePrefetch(Queue queue, Broker broker) {
0:         this.broker = broker;
/////////////////////////////////////////////////////////////////////////
0:         hadSpace = this.hasSpace();
0:         if (!broker.getBrokerService().isPersistent() || hadSpace) {
0:             this.store.recoverNextMessages(this.maxBatchSize, this);
1:         }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueStorePrefetch.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:180b0ec
/////////////////////////////////////////////////////////////////////////
1:     protected void setBatch(MessageId messageId) throws Exception {
commit:5719351
/////////////////////////////////////////////////////////////////////////
0:         store.resetBatching();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(QueueStorePrefetch.class);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
0: class QueueStorePrefetch extends AbstractPendingMessageCursor implements MessageRecoveryListener {
0:     static private final Log LOG = LogFactory.getLog(QueueStorePrefetch.class);
1: 
0:     private final LinkedList<Message> batchList = new LinkedList<Message>();
0:     private int size;
/////////////////////////////////////////////////////////////////////////
0:     public QueueStorePrefetch(Queue queue) {
0:         this.store = (MessageStore)queue.getMessageStore();
1: 
0:     public void start() throws Exception {
0:     public void stop() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public boolean isEmpty() {
1: 
1: 
0:     public synchronized int size() {
0:             size = store.getMessageCount();
1:         } catch (IOException e) {
1:             LOG.error("Failed to get message count", e);
1: 
0:     public synchronized void addMessageLast(MessageReference node) throws Exception {
1: 
0:     public void addMessageFirst(MessageReference node) throws Exception {
1: 
0:     public void remove() {
0:     public void remove(MessageReference node) {
0:     public synchronized boolean hasNext() {
0:         if (batchList.isEmpty()) {
1:             try {
1:             } catch (Exception e) {
0:                 LOG.error("Failed to fill batch", e);
0:     public synchronized MessageReference next() {
0:     public void reset() {
0:     public void finished() {
0:     public boolean recoverMessage(Message message) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         Message msg = store.getMessage(messageReference);
1:         if (msg != null) {
1:         } else {
1:             String err = "Failed to retrieve message for id: " + messageReference;
1:             LOG.error(err);
0: 
0:         for (Message msg : batchList) {
0:     protected void fillBatch() throws Exception {
0:         store.recoverNextMessages(maxBatchSize, this);
0: 
0:         return "QueueStorePrefetch" + System.identityHashCode(this);
0: 
commit:a0e92d7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         result.decrementReferenceCount();
/////////////////////////////////////////////////////////////////////////
0:         message.incrementReferenceCount();
commit:0afb7f9
/////////////////////////////////////////////////////////////////////////
0:     public void recoverMessageReference(MessageId messageReference) throws Exception {
0:         Message msg=store.getMessage(messageReference);
author:Gary Tully
-------------------------------------------------------------------------------
commit:101e711
/////////////////////////////////////////////////////////////////////////
commit:c8e518b
/////////////////////////////////////////////////////////////////////////
commit:37c2a95
/////////////////////////////////////////////////////////////////////////
1:         store.setBatch(messageId);
commit:d7f34d9
/////////////////////////////////////////////////////////////////////////
0: import java.io.InterruptedIOException;
0: import org.apache.activemq.store.amq.AMQMessageStore;
0: import org.apache.activemq.store.kahadaptor.KahaReferenceStore;
/////////////////////////////////////////////////////////////////////////
0:     protected void setBatch(MessageId messageId) {
0:         AMQMessageStore amqStore = (AMQMessageStore) store;
1:         try {
0:             amqStore.flush();
0:         } catch (InterruptedIOException e) {
0:             LOG.debug("flush on setBatch resulted in exception", e);        
1:         }
0:         KahaReferenceStore kahaStore = 
0:             (KahaReferenceStore) amqStore.getReferenceStore();
0:         kahaStore.setBatch(messageId);
1:         batchResetNeeded = false;
1:     }
0: 
0:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:affd91e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final MessageStore store;
/////////////////////////////////////////////////////////////////////////
1:         this.store = queue.getMessageStore();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             int result = this.store.getMessageCount();
1:             return result;
0:             
1:     @Override
1:     protected synchronized boolean isStoreEmpty() {
0:         try {
1:             return this.store.isEmpty();
0:             
0:         } catch (Exception e) {
1:             LOG.error("Failed to get message count", e);
1:             throw new RuntimeException(e);
1:         }
1:     }
0:     
1:     @Override
1:     @Override
1:     @Override
1:     @Override
commit:071b4b1
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1: class QueueStorePrefetch extends AbstractStoreCursor {
0:    
1:         super(queue);
1:         Message msg = this.store.getMessage(messageReference);
/////////////////////////////////////////////////////////////////////////
0:    
0:         
0:             return this.store.getMessageCount();
0:     
1:     protected void resetBatch() {
1:         this.store.resetBatching();
1:     }
0:     
1:     protected void doFillBatch() throws Exception {
0:         this.store.recoverNextMessages(this.maxBatchSize, this);
1:     }
commit:3249682
/////////////////////////////////////////////////////////////////////////
0:         if (size==0 && isStarted() && cacheEnabled) {
commit:e16bcf2
/////////////////////////////////////////////////////////////////////////
0:     private boolean useCache =false;
1:      * Construct it
1:      * @param queue
/////////////////////////////////////////////////////////////////////////
0:             if (this.size==0&&useCache) {
commit:23cda2d
/////////////////////////////////////////////////////////////////////////
0:         if (cacheEnabled && hasSpace()) {
commit:3d10acc
/////////////////////////////////////////////////////////////////////////
0:             rollback(msg.getMessageId());
commit:409902c
/////////////////////////////////////////////////////////////////////////
0:     private boolean cacheEnabled;
/////////////////////////////////////////////////////////////////////////
0:     public synchronized void start() throws Exception{
0:         if (!isStarted()) {
0:             this.size = getStoreSize();
0:             if (this.size==0) {
0:                 cacheEnabled=true;
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (isStarted()) {
0:             return size;
0:         this.size = getStoreSize();
0:         
0:         if (cacheEnabled && !isFull()) {
0:             //optimization - A persistent queue will add the message to
0:             //to store then retrieve it again from the store.
0:             recoverMessage(node.getMessage());
0:         }else {
0:             cacheEnabled=false;
1:         }
/////////////////////////////////////////////////////////////////////////
0:     public synchronized void remove() {
0:         if (size==0 && isStarted()) {
0:             cacheEnabled=true;
1:         }
0:         cacheEnabled=false;
/////////////////////////////////////////////////////////////////////////
0:     public synchronized void gc() {
0:         cacheEnabled=false;
/////////////////////////////////////////////////////////////////////////
0:     
1:     protected synchronized int getStoreSize() {
0:         try {
0:             return store.getMessageCount();
0:         } catch (IOException e) {
0:             LOG.error("Failed to get message count", e);
1:             throw new RuntimeException(e);
0:         }
0:     }
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
0:         result.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
/////////////////////////////////////////////////////////////////////////
0:             message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
commit:1ee0017
/////////////////////////////////////////////////////////////////////////
1:  * persist pending messages pending message (messages awaiting dispatch to a
/////////////////////////////////////////////////////////////////////////
0:     private boolean fillBatchDuplicates;
/////////////////////////////////////////////////////////////////////////
0:     public void start() throws Exception{
0:         super.start();
0:         super.stop();
/////////////////////////////////////////////////////////////////////////
0:     public synchronized boolean recoverMessage(Message message)
0:             throws Exception {
0:         if (!isDuplicate(message.getMessageId())) {
0:             message.setRegionDestination(regionDestination);
0:             message.incrementReferenceCount();
0:             batchList.addLast(message);
0:         } else {
0:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug("Ignoring batched duplicated from store: " + message);
0:             }
0:             fillBatchDuplicates=true;
0:         }
/////////////////////////////////////////////////////////////////////////
0:     protected synchronized void fillBatch() throws Exception {
0:         while (fillBatchDuplicates && batchList.isEmpty()) {
0:             fillBatchDuplicates=false;
0:             store.recoverNextMessages(maxBatchSize, this);
0:         }
0:         fillBatchDuplicates=false;
commit:3a5f48d
/////////////////////////////////////////////////////////////////////////
0:     public boolean recoverMessage(Message message) throws Exception{
0:         return true;
1:     public boolean recoverMessageReference(MessageId messageReference) throws Exception {
1:             return recoverMessage(msg);
commit:c46003f
/////////////////////////////////////////////////////////////////////////
0:     private final LinkedList <Message>batchList=new LinkedList<Message>();
/////////////////////////////////////////////////////////////////////////
0:         Message result = batchList.removeFirst();
/////////////////////////////////////////////////////////////////////////
0:         // only increment if count is zero (could have been cached)
0:         if(message.getReferenceCount()==0){
0:             message.incrementReferenceCount();
0:         }
/////////////////////////////////////////////////////////////////////////
0:         for (Message msg:batchList) {
0:             msg.decrementReferenceCount();
0:         }
commit:e5efc58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageId;
/////////////////////////////////////////////////////////////////////////
0:     private int size = 0;
/////////////////////////////////////////////////////////////////////////
0:         return size <= 0;
0:     }
0:     
0:     public boolean hasMessagesBufferedToDeliver() {
0:         return !batchList.isEmpty();
0:         size =  store.getMessageCount();
0:         return size;
0:         size++;
0:     }
0:     
0:     public void addMessageFirst(MessageReference node) throws Exception{
0:         if(node!=null){
0:             node.decrementReferenceCount();
0:         }
0:         size++;
0:     }
0:     
0:     public void remove(){
0:         size--;
0:     public void remove(MessageReference node){
0:         size--;
0:     }
0: 
0: 
0:         if(batchList.isEmpty()){
/////////////////////////////////////////////////////////////////////////
0:         return !batchList.isEmpty();
/////////////////////////////////////////////////////////////////////////
0:     public void recoverMessageReference(String messageReference) throws Exception{
0:         Message msg=store.getMessage(new MessageId(messageReference));
0:         if(msg!=null){
0:             recoverMessage(msg);
0:         }else{
0:             String err = "Failed to retrieve message for id: "+messageReference;
0:             log.error(err);
1:             throw new IOException(err);
0:         }
commit:3bf0245
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         gc();
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void gc() {
0:         batchList.clear();
0:     }
commit:e006780
/////////////////////////////////////////////////////////////////////////
commit:629bc81
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements. See the NOTICE file distributed with this
0:  * work for additional information regarding copyright ownership. The ASF
0:  * licenses this file to You under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
0:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
0:  * License for the specific language governing permissions and limitations under
0:  * the License.
1:  */
0: 
1: package org.apache.activemq.broker.region.cursors;
0: 
1: import java.io.IOException;
0: import java.util.LinkedList;
0: import javax.jms.JMSException;
0: import org.apache.activemq.broker.region.Destination;
0: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.Queue;
0: import org.apache.activemq.broker.region.Topic;
1: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.store.MessageRecoveryListener;
1: import org.apache.activemq.store.MessageStore;
0: import org.apache.activemq.store.TopicMessageStore;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
1: /**
0:  * perist pending messages pending message (messages awaiting disptach to a
1:  * consumer) cursor
0:  * 
0:  * @version $Revision: 474985 $
1:  */
0: class QueueStorePrefetch extends AbstractPendingMessageCursor implements
0:         MessageRecoveryListener {
0: 
0:     static private final Log log=LogFactory.getLog(QueueStorePrefetch.class);
0:    
0:     private MessageStore store;
0:     private final LinkedList batchList=new LinkedList();
0:     private Destination regionDestination;
0: 
1:     /**
0:      * @param topic
0:      * @param clientId
0:      * @param subscriberName
0:      * @throws IOException
1:      */
0:     public QueueStorePrefetch(Queue queue){
0:         this.regionDestination = queue;
0:         this.store=(MessageStore)queue.getMessageStore();
0:         
0:     }
0: 
0:     public void start() throws Exception{
0:     }
0: 
0:     public void stop() throws Exception{
0:         store.resetBatching();
0:     }
0: 
1:     /**
0:      * @return true if there are no pending messages
1:      */
0:     public boolean isEmpty(){
0:         return batchList.isEmpty();
0:     }
0:     
0:     public synchronized int size(){
0:         try {
0:         return store.getMessageCount();
0:         }catch(IOException e) {
0:             log.error("Failed to get message count",e);
0:             throw new RuntimeException(e);
0:         }
0:     }
0:     
0:     public synchronized void addMessageLast(MessageReference node) throws Exception{
0:         if(node!=null){
0:             node.decrementReferenceCount();
0:         }
0:     }
0: 
0:     public synchronized boolean hasNext(){
0:         if(isEmpty()){
0:             try{
0:                 fillBatch();
0:             }catch(Exception e){
0:                 log.error("Failed to fill batch",e);
0:                 throw new RuntimeException(e);
0:             }
0:         }
0:         return !isEmpty();
0:     }
0: 
0:     public synchronized MessageReference next(){
0:         Message result = (Message)batchList.removeFirst();
0:         result.setRegionDestination(regionDestination);
0:         return result;
0:     }
0: 
0:     public void reset(){
0:     }
0: 
0:     // MessageRecoveryListener implementation
0:     public void finished(){
0:     }
0: 
0:     public void recoverMessage(Message message) throws Exception{
0:         message.setRegionDestination(regionDestination);
0:         message.incrementReferenceCount();
0:         batchList.addLast(message);
0:     }
0: 
0:     public void recoverMessageReference(String messageReference)
0:             throws Exception{
0:         // shouldn't get called
0:         throw new RuntimeException("Not supported");
0:     }
0: 
0:     // implementation
0:     protected void fillBatch() throws Exception{
0:         store.recoverNextMessages(maxBatchSize,this);
0:         // this will add more messages to the batch list
0:         if(!batchList.isEmpty()){
0:             Message message=(Message)batchList.getLast();
0:         }
0:     }
0:     
0:     public String toString() {
0:         return "QueueStorePrefetch" + System.identityHashCode(this) ;
0:     }
0:     
0: }
============================================================================