1:ca067a6: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:ca067a6:  *
1:ca067a6:  * Unless required by applicable law or agreed to in writing, software
1:ca067a6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ca067a6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ca067a6:  * See the License for the specific language governing permissions and
1:ca067a6:  * limitations under the License.
1:ca067a6:  */
1:ca067a6: package org.apache.activemq.test.message;
1:ca067a6: 
1:74a7a8b: import java.util.Arrays;
1:74a7a8b: import java.util.HashMap;
1:74a7a8b: import java.util.List;
1:74a7a8b: import java.util.Map;
1:ca067a6: 
1:ca067a6: import javax.jms.JMSException;
1:ca067a6: import javax.jms.MapMessage;
1:ca067a6: import javax.jms.Message;
1:ca067a6: 
1:74a7a8b: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ca067a6: 
1:ca067a6: /**
1:4743a20:  *
1:ca067a6:  */
1:ca067a6: public class NestedMapMessageTest extends JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest {
1:ca067a6: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NestedMapMessageTest.class);
1:ca067a6: 
1:4743a20:     @Override
1:4743a20:     @SuppressWarnings("rawtypes")
1:ca067a6:     protected void assertMessageValid(int index, Message message) throws JMSException {
1:ca067a6:         assertTrue("Should be a MapMessage: " + message, message instanceof MapMessage);
1:ca067a6: 
1:ecf89a6:         MapMessage mapMessage = (MapMessage)message;
1:ca067a6: 
1:ca067a6:         Object value = mapMessage.getObject("textField");
1:ca067a6:         assertEquals("textField", data[index], value);
1:ca067a6: 
1:ecf89a6:         Map map = (Map)mapMessage.getObject("mapField");
1:ca067a6:         assertNotNull(map);
1:ca067a6:         assertEquals("mapField.a", "foo", map.get("a"));
1:d36c0d4:         assertEquals("mapField.b", Integer.valueOf(23), map.get("b"));
1:d36c0d4:         assertEquals("mapField.c", Long.valueOf(45), map.get("c"));
1:ca067a6: 
1:ca067a6:         value = map.get("d");
1:ca067a6:         assertTrue("mapField.d should be a Map", value instanceof Map);
1:ecf89a6:         map = (Map)value;
1:ca067a6: 
1:ca067a6:         assertEquals("mapField.d.x", "abc", map.get("x"));
1:ca067a6:         value = map.get("y");
1:ca067a6:         assertTrue("mapField.d.y is a List", value instanceof List);
1:ecf89a6:         List list = (List)value;
1:fc00993:         LOG.debug("mapField.d.y: " + list);
1:ca067a6:         assertEquals("listField.size", 3, list.size());
1:ca067a6: 
1:fc00993:         LOG.debug("Found map: " + map);
1:ca067a6: 
1:ecf89a6:         list = (List)mapMessage.getObject("listField");
1:fc00993:         LOG.debug("listField: " + list);
1:ca067a6:         assertEquals("listField.size", 3, list.size());
1:ca067a6:         assertEquals("listField[0]", "a", list.get(0));
1:ca067a6:         assertEquals("listField[1]", "b", list.get(1));
1:ca067a6:         assertEquals("listField[2]", "c", list.get(2));
1:ca067a6:     }
1:ca067a6: 
1:4743a20:     @Override
1:ca067a6:     protected Message createMessage(int index) throws JMSException {
1:ca067a6:         MapMessage answer = session.createMapMessage();
1:ca067a6: 
1:ca067a6:         answer.setString("textField", data[index]);
1:ca067a6: 
1:933eb2f:         Map<String, Object> grandChildMap = new HashMap<String, Object>();
1:ca067a6:         grandChildMap.put("x", "abc");
1:ecf89a6:         grandChildMap.put("y", Arrays.asList(new Object[] {"a", "b", "c"}));
1:ca067a6: 
1:933eb2f:         Map<String, Object> nestedMap = new HashMap<String, Object>();
1:ca067a6:         nestedMap.put("a", "foo");
1:d36c0d4:         nestedMap.put("b", Integer.valueOf(23));
1:d36c0d4:         nestedMap.put("c", Long.valueOf(45));
1:ca067a6:         nestedMap.put("d", grandChildMap);
1:ca067a6: 
1:ca067a6:         answer.setObject("mapField", nestedMap);
1:ecf89a6:         answer.setObject("listField", Arrays.asList(new Object[] {"a", "b", "c"}));
1:ca067a6: 
1:ca067a6:         return answer;
1:ca067a6:     }
1:ca067a6: 
1:ca067a6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:  *
1:     @Override
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> grandChildMap = new HashMap<String, Object>();
1:         Map<String, Object> nestedMap = new HashMap<String, Object>();
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         MapMessage mapMessage = (MapMessage)message;
1:         Map map = (Map)mapMessage.getObject("mapField");
/////////////////////////////////////////////////////////////////////////
1:         map = (Map)value;
1:         List list = (List)value;
1:         list = (List)mapMessage.getObject("listField");
/////////////////////////////////////////////////////////////////////////
1:         grandChildMap.put("y", Arrays.asList(new Object[] {"a", "b", "c"}));
/////////////////////////////////////////////////////////////////////////
1:         answer.setObject("listField", Arrays.asList(new Object[] {"a", "b", "c"}));
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(NestedMapMessageTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("mapField.d.y: " + list);
1:         LOG.debug("Found map: " + map);
1:         LOG.debug("listField: " + list);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(NestedMapMessageTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("mapField.b", Integer.valueOf(23), map.get("b"));
1:         assertEquals("mapField.c", Long.valueOf(45), map.get("c"));
/////////////////////////////////////////////////////////////////////////
1:         nestedMap.put("b", Integer.valueOf(23));
1:         nestedMap.put("c", Long.valueOf(45));
author:James Strachan
-------------------------------------------------------------------------------
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test.message;
1: 
0: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: 
0: import java.util.Arrays;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class NestedMapMessageTest extends JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest {
1: 
0:     private static final Log log = LogFactory.getLog(NestedMapMessageTest.class);
1: 
1:     protected void assertMessageValid(int index, Message message) throws JMSException {
1:         assertTrue("Should be a MapMessage: " + message, message instanceof MapMessage);
1: 
0:         MapMessage mapMessage = (MapMessage) message;
1: 
1:         Object value = mapMessage.getObject("textField");
1:         assertEquals("textField", data[index], value);
1: 
0:         Map map = (Map) mapMessage.getObject("mapField");
1:         assertNotNull(map);
1:         assertEquals("mapField.a", "foo", map.get("a"));
0:         assertEquals("mapField.b", new Integer(23), map.get("b"));
0:         assertEquals("mapField.c", new Long(45), map.get("c"));
1: 
1:         value = map.get("d");
1:         assertTrue("mapField.d should be a Map", value instanceof Map);
0:         map = (Map) value;
1: 
1:         assertEquals("mapField.d.x", "abc", map.get("x"));
1:         value = map.get("y");
1:         assertTrue("mapField.d.y is a List", value instanceof List);
0:         List list = (List) value;
0:         log.debug("mapField.d.y: " + list);
1:         assertEquals("listField.size", 3, list.size());
1: 
0:         log.debug("Found map: " + map);
1: 
0:         list = (List) mapMessage.getObject("listField");
0:         log.debug("listField: " + list);
1:         assertEquals("listField.size", 3, list.size());
1:         assertEquals("listField[0]", "a", list.get(0));
1:         assertEquals("listField[1]", "b", list.get(1));
1:         assertEquals("listField[2]", "c", list.get(2));
1:     }
1: 
1:     protected Message createMessage(int index) throws JMSException {
1:         MapMessage answer = session.createMapMessage();
1: 
1:         answer.setString("textField", data[index]);
1: 
0:         Map grandChildMap = new HashMap();
1:         grandChildMap.put("x", "abc");
0:         grandChildMap.put("y", Arrays.asList(new Object[] { "a", "b", "c" }));
1: 
0:         Map nestedMap = new HashMap();
1:         nestedMap.put("a", "foo");
0:         nestedMap.put("b", new Integer(23));
0:         nestedMap.put("c", new Long(45));
1:         nestedMap.put("d", grandChildMap);
1: 
1:         answer.setObject("mapField", nestedMap);
0:         answer.setObject("listField", Arrays.asList(new Object[] { "a", "b", "c" }));
1: 
1:         return answer;
1:     }
1: 
1: }
============================================================================