1:ea03bb1: /**
1:ea03bb1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ea03bb1:  * contributor license agreements.  See the NOTICE file distributed with
1:ea03bb1:  * this work for additional information regarding copyright ownership.
1:ea03bb1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ea03bb1:  * (the "License"); you may not use this file except in compliance with
1:ea03bb1:  * the License.  You may obtain a copy of the License at
1:ea03bb1:  *
1:ea03bb1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ea03bb1:  *
1:ea03bb1:  * Unless required by applicable law or agreed to in writing, software
1:ea03bb1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ea03bb1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ea03bb1:  * See the License for the specific language governing permissions and
1:ea03bb1:  * limitations under the License.
1:ea03bb1:  */
1:ea03bb1: package org.apache.activemq;
1:ea03bb1: 
1:ea03bb1: import javax.jms.Connection;
1:ea03bb1: import javax.jms.JMSException;
1:ea03bb1: import javax.jms.MessageProducer;
1:ea03bb1: import javax.jms.Session;
1:ea03bb1: import javax.jms.Topic;
1:ea03bb1: 
1:ea03bb1: import org.apache.activemq.broker.BrokerService;
1:ea03bb1: import org.apache.activemq.broker.TransportConnector;
1:ea03bb1: import org.apache.activemq.broker.region.Destination;
1:ea03bb1: import org.apache.activemq.broker.region.Subscription;
1:ea03bb1: import org.apache.activemq.command.ActiveMQTopic;
1:ea03bb1: import org.junit.Test;
1:ea03bb1: 
1:ea03bb1: /**
1:ea03bb1:  * This test shows that the countBeforeFull statistic that is part of a Subscription is correct
1:ea03bb1:  * for TopicSubscriptions.
1:ea03bb1:  */
1:ea03bb1: public class TopicSubscriptionCountBeforeFullTest extends TestSupport {
1:ea03bb1: 
1:ea03bb1:     protected BrokerService brokerService;
1:ea03bb1:     private Connection connection;
1:ea03bb1:     private String brokerUrlString;
1:ea03bb1:     private Session session;
1:ea03bb1:     private Topic topic;
1:ea03bb1:     private Destination amqDestination;
1:ea03bb1:     private int prefetch = 10;
1:ea03bb1: 
1:ea03bb1:     protected void setUp() throws Exception {
1:ea03bb1:         super.setUp();
1:ea03bb1:         brokerService = new BrokerService();
1:ea03bb1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:ea03bb1:         TransportConnector tcp = brokerService
1:ea03bb1:                 .addConnector("tcp://localhost:0");
1:ea03bb1:         brokerService.start();
1:ea03bb1:         brokerUrlString = tcp.getPublishableConnectString();
1:ea03bb1:         connection = createConnection();
1:ea03bb1:         connection.start();
1:ea03bb1:         session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:ea03bb1:         topic = session.createTopic("test");
1:ea03bb1:         session.createConsumer(topic);
1:ea03bb1:         amqDestination = TestSupport.getDestination(brokerService,new ActiveMQTopic("test"));
1:ea03bb1:     }
1:ea03bb1: 
1:ea03bb1:     @Override
1:ea03bb1:     protected ActiveMQConnectionFactory createConnectionFactory()
1:ea03bb1:             throws Exception {
1:ea03bb1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlString);
1:ea03bb1:         ActiveMQPrefetchPolicy prefecthPolicy = new ActiveMQPrefetchPolicy();
1:ea03bb1:         prefecthPolicy.setTopicPrefetch(prefetch);
1:ea03bb1:         factory.setPrefetchPolicy(prefecthPolicy);
1:ea03bb1:         return factory;
1:ea03bb1:     }
1:ea03bb1: 
1:ea03bb1:     /**
1:ea03bb1:      * @see junit.framework.TestCase#tearDown()
1:ea03bb1:      */
1:ea03bb1:     protected void tearDown() throws Exception {
1:ea03bb1:         if (connection != null) {
1:ea03bb1:             connection.close();
1:ea03bb1:             connection = null;
1:ea03bb1:         }
1:ea03bb1:         brokerService.stop();
1:ea03bb1:         super.tearDown();
1:ea03bb1:     }
1:ea03bb1: 
1:ea03bb1:     /**
1:ea03bb1:      * Tests that countBeforeFull is 0 if prefetch is filled
1:ea03bb1:      *
1:ea03bb1:      * @throws javax.jms.JMSException
1:ea03bb1:      */
1:ea03bb1:     @Test
1:ea03bb1:     public void testCountBeforeFullPrefetchFilled() throws JMSException {
1:ea03bb1:         sendMessages(10);
1:ea03bb1:         assertEquals(getSubscription().countBeforeFull(), 0);
1:ea03bb1:     }
1:ea03bb1: 
1:ea03bb1:     /**
1:ea03bb1:      * Tests that countBeforeFull is a positive number when no messages have been sent
1:ea03bb1:      * and prefetch is greater than 0
1:ea03bb1:      *
1:ea03bb1:      * @throws javax.jms.JMSException
1:ea03bb1:      */
1:ea03bb1:     @Test
1:ea03bb1:     public void testCountBeforeFullNotNull() throws JMSException {
1:ea03bb1:         assertTrue(getSubscription().countBeforeFull() == prefetch);
1:ea03bb1:     }
1:ea03bb1: 
1:ea03bb1:     protected void sendMessages(int count) throws JMSException {
1:ea03bb1:         MessageProducer producer = session.createProducer(topic);
1:ea03bb1:         for (int i = 0; i < count; i++) {
1:ea03bb1:             producer.send(session.createTextMessage("testMessage"));
1:ea03bb1:         }
1:ea03bb1:     }
1:ea03bb1: 
1:ea03bb1:     protected Subscription getSubscription() {
1:ea03bb1:         return amqDestination.getConsumers().get(0);
1:ea03bb1:     }
1:ea03bb1: 
1:ea03bb1: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:ea03bb1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.Test;
1: 
1: /**
1:  * This test shows that the countBeforeFull statistic that is part of a Subscription is correct
1:  * for TopicSubscriptions.
1:  */
1: public class TopicSubscriptionCountBeforeFullTest extends TestSupport {
1: 
1:     protected BrokerService brokerService;
1:     private Connection connection;
1:     private String brokerUrlString;
1:     private Session session;
1:     private Topic topic;
1:     private Destination amqDestination;
1:     private int prefetch = 10;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         TransportConnector tcp = brokerService
1:                 .addConnector("tcp://localhost:0");
1:         brokerService.start();
1:         brokerUrlString = tcp.getPublishableConnectString();
1:         connection = createConnection();
1:         connection.start();
1:         session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:         topic = session.createTopic("test");
1:         session.createConsumer(topic);
1:         amqDestination = TestSupport.getDestination(brokerService,new ActiveMQTopic("test"));
1:     }
1: 
1:     @Override
1:     protected ActiveMQConnectionFactory createConnectionFactory()
1:             throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrlString);
1:         ActiveMQPrefetchPolicy prefecthPolicy = new ActiveMQPrefetchPolicy();
1:         prefecthPolicy.setTopicPrefetch(prefetch);
1:         factory.setPrefetchPolicy(prefecthPolicy);
1:         return factory;
1:     }
1: 
1:     /**
1:      * @see junit.framework.TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         brokerService.stop();
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Tests that countBeforeFull is 0 if prefetch is filled
1:      *
1:      * @throws javax.jms.JMSException
1:      */
1:     @Test
1:     public void testCountBeforeFullPrefetchFilled() throws JMSException {
1:         sendMessages(10);
1:         assertEquals(getSubscription().countBeforeFull(), 0);
1:     }
1: 
1:     /**
1:      * Tests that countBeforeFull is a positive number when no messages have been sent
1:      * and prefetch is greater than 0
1:      *
1:      * @throws javax.jms.JMSException
1:      */
1:     @Test
1:     public void testCountBeforeFullNotNull() throws JMSException {
1:         assertTrue(getSubscription().countBeforeFull() == prefetch);
1:     }
1: 
1:     protected void sendMessages(int count) throws JMSException {
1:         MessageProducer producer = session.createProducer(topic);
1:         for (int i = 0; i < count; i++) {
1:             producer.send(session.createTextMessage("testMessage"));
1:         }
1:     }
1: 
1:     protected Subscription getSubscription() {
1:         return amqDestination.getConsumers().get(0);
1:     }
1: 
1: }
============================================================================