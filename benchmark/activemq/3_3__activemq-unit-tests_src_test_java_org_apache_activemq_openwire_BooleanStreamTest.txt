1:c874b21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:c874b21:  *
1:c874b21:  * Unless required by applicable law or agreed to in writing, software
1:c874b21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c874b21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c874b21:  * See the License for the specific language governing permissions and
1:c874b21:  * limitations under the License.
1:c874b21:  */
1:c874b21: package org.apache.activemq.openwire;
2:c874b21: 
1:c874b21: import java.io.ByteArrayInputStream;
1:c874b21: import java.io.ByteArrayOutputStream;
1:c874b21: import java.io.DataInputStream;
1:c874b21: import java.io.DataOutputStream;
1:c874b21: import java.io.IOException;
1:c874b21: 
1:4a65a33: import junit.framework.AssertionFailedError;
1:c874b21: import junit.framework.TestCase;
1:c874b21: 
1:c874b21: /**
1:c7d559f:  *
1:c874b21:  */
1:c874b21: public class BooleanStreamTest extends TestCase {
1:c874b21: 
1:c874b21:     protected OpenWireFormat openWireformat;
1:c874b21:     protected int endOfStreamMarker = 0x12345678;
1:4a65a33:     int numberOfBytes = 8 * 200;
1:c874b21: 
1:c874b21:     interface BooleanValueSet {
1:fc00993:         boolean getBooleanValueFor(int index, int count);
4:c874b21:     }
1:c874b21: 
1:7f5213b:     public void testBooleanMarshallingUsingAllTrue() throws Exception {
1:c874b21:         testBooleanStream(numberOfBytes, new BooleanValueSet() {
1:c7d559f:             @Override
1:c874b21:             public boolean getBooleanValueFor(int index, int count) {
1:c874b21:                 return true;
1:c874b21:             }
1:c874b21:         });
1:c874b21:     }
1:230a86c: 
1:7f5213b:     public void testBooleanMarshallingUsingAllFalse() throws Exception {
1:c874b21:         testBooleanStream(numberOfBytes, new BooleanValueSet() {
1:c7d559f:             @Override
1:c874b21:             public boolean getBooleanValueFor(int index, int count) {
1:c874b21:                 return false;
1:c874b21:             }
1:c874b21:         });
1:c874b21:     }
1:c874b21: 
1:7f5213b:     public void testBooleanMarshallingUsingOddAlternateTrueFalse() throws Exception {
1:c874b21:         testBooleanStream(numberOfBytes, new BooleanValueSet() {
1:c7d559f:             @Override
1:c874b21:             public boolean getBooleanValueFor(int index, int count) {
1:c874b21:                 return (index & 1) == 0;
1:4a65a33:             }
1:c874b21:         });
1:c874b21:     }
1:4a65a33: 
1:7f5213b:     public void testBooleanMarshallingUsingEvenAlternateTrueFalse() throws Exception {
1:4a65a33:         testBooleanStream(numberOfBytes, new BooleanValueSet() {
1:c7d559f:             @Override
1:4a65a33:             public boolean getBooleanValueFor(int index, int count) {
1:4a65a33:                 return (index & 1) != 0;
1:4a65a33:             }
1:4a65a33:         });
1:c874b21:     }
1:c874b21: 
1:c874b21:     protected void testBooleanStream(int numberOfBytes, BooleanValueSet valueSet) throws Exception {
1:c874b21:         for (int i = 0; i < numberOfBytes; i++) {
1:4a65a33:             try {
1:4a65a33:                 assertMarshalBooleans(i, valueSet);
1:4a65a33:             } catch (Throwable e) {
1:230a86c:                 throw (AssertionFailedError)new AssertionFailedError("Iteration failed at: " + i).initCause(e);
1:4a65a33:             }
1:c874b21:         }
1:c874b21:     }
1:c874b21: 
1:c874b21:     protected void assertMarshalBooleans(int count, BooleanValueSet valueSet) throws Exception {
1:c874b21:         BooleanStream bs = new BooleanStream();
1:c874b21:         for (int i = 0; i < count; i++) {
1:c874b21:             bs.writeBoolean(valueSet.getBooleanValueFor(i, count));
1:c874b21:         }
1:c874b21:         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:c874b21:         DataOutputStream ds = new DataOutputStream(buffer);
1:c874b21:         bs.marshal(ds);
1:c874b21:         ds.writeInt(endOfStreamMarker);
1:c874b21: 
1:c874b21:         // now lets read from the stream
1:c874b21:         ds.close();
1:c874b21: 
1:c874b21:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:c874b21:         DataInputStream dis = new DataInputStream(in);
1:c874b21:         bs = new BooleanStream();
1:c874b21:         try {
1:c874b21:             bs.unmarshal(dis);
1:230a86c:         } catch (Exception e) {
1:c874b21:             e.printStackTrace();
1:c874b21:             fail("Failed to unmarshal: " + count + " booleans: " + e);
1:c874b21:         }
1:c874b21: 
1:c874b21:         for (int i = 0; i < count; i++) {
1:c874b21:             boolean expected = valueSet.getBooleanValueFor(i, count);
1:c874b21:             // /System.out.println("Unmarshaling value: " + i + " = " + expected
1:c874b21:             // + " out of: " + count);
1:c874b21: 
1:c874b21:             try {
1:c874b21:                 boolean actual = bs.readBoolean();
1:c874b21:                 assertEquals("value of object: " + i + " was: " + actual, expected, actual);
1:230a86c:             } catch (IOException e) {
1:c874b21:                 e.printStackTrace();
1:c874b21:                 fail("Failed to parse boolean: " + i + " out of: " + count + " due to: " + e);
1:c874b21:             }
1:c874b21:         }
1:c874b21:         int marker = dis.readInt();
1:c874b21:         assertEquals("Marker int when unmarshalling: " + count + " booleans", Integer.toHexString(endOfStreamMarker), Integer.toHexString(marker));
1:c874b21: 
1:c874b21:         // lets try read and we should get an exception
1:c874b21:         try {
1:c7d559f:             dis.readByte();
1:c874b21:             fail("Should have reached the end of the stream");
1:230a86c:         } catch (IOException e) {
1:c874b21:             // worked!
1:c874b21:         }
1:c874b21:     }
1:c874b21: 
1:c7d559f:     @Override
1:c874b21:     protected void setUp() throws Exception {
1:c874b21:         super.setUp();
1:c874b21:         openWireformat = createOpenWireFormat();
1:c874b21:     }
1:c874b21: 
1:c874b21:     protected OpenWireFormat createOpenWireFormat() {
1:c874b21:         OpenWireFormat wf = new OpenWireFormat();
1:c874b21:         wf.setCacheEnabled(true);
1:c874b21:         wf.setStackTraceEnabled(false);
1:c874b21:         wf.setVersion(1);
1:c874b21:         return wf;
1:c874b21:     }
1:c874b21: 
1:c874b21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             dis.readByte();
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         boolean getBooleanValueFor(int index, int count);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 throw (AssertionFailedError)new AssertionFailedError("Iteration failed at: " + i).initCause(e);
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (IOException e) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testBooleanMarshallingUsingAllTrue() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testBooleanMarshallingUsingAllFalse() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testBooleanMarshallingUsingOddAlternateTrueFalse() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testBooleanMarshallingUsingEvenAlternateTrueFalse() throws Exception {
commit:4a65a33
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.AssertionFailedError;
/////////////////////////////////////////////////////////////////////////
1:     int numberOfBytes = 8 * 200;
0:     public void testBooleanMarshallingUsingAllTrue() throws Throwable {
/////////////////////////////////////////////////////////////////////////
0:     public void testBooleanMarshallingUsingAllFalse() throws Throwable {
/////////////////////////////////////////////////////////////////////////
0:     public void testBooleanMarshallingUsingOddAlternateTrueFalse() throws Throwable {
1:     
0:     public void testBooleanMarshallingUsingEvenAlternateTrueFalse() throws Throwable {
1:         testBooleanStream(numberOfBytes, new BooleanValueSet() {
1:             public boolean getBooleanValueFor(int index, int count) {
1:                 return (index & 1) != 0;
1:             }
1:         });
1:     }
1:             try {
1:                 assertMarshalBooleans(i, valueSet);
1:             } catch (Throwable e) {
0:                 throw (AssertionFailedError) new AssertionFailedError("Iteration failed at: "+i).initCause(e);
1:             }
author:James Strachan
-------------------------------------------------------------------------------
commit:c874b21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class BooleanStreamTest extends TestCase {
1: 
1:     protected OpenWireFormat openWireformat;
1:     protected int endOfStreamMarker = 0x12345678;
0:     int numberOfBytes = 8 * 50;
1: 
1:     interface BooleanValueSet {
0:         public boolean getBooleanValueFor(int index, int count);
1:     }
1: 
0:     public void testBooleanMarshallingUsingAllTrue() throws Exception {
1:         testBooleanStream(numberOfBytes, new BooleanValueSet() {
1:             public boolean getBooleanValueFor(int index, int count) {
1:                 return true;
1:             }
1:         });
1:     }
1: 
0:     public void testBooleanMarshallingUsingAllFalse() throws Exception {
1:         testBooleanStream(numberOfBytes, new BooleanValueSet() {
1:             public boolean getBooleanValueFor(int index, int count) {
1:                 return false;
1:             }
1:         });
1:     }
1: 
0:     public void testBooleanMarshallingUsingAlternateTrueFalse() throws Exception {
1:         testBooleanStream(numberOfBytes, new BooleanValueSet() {
1:             public boolean getBooleanValueFor(int index, int count) {
1:                 return (index & 1) == 0;
1:             }
1:         });
1:     }
1: 
1:     protected void testBooleanStream(int numberOfBytes, BooleanValueSet valueSet) throws Exception {
1:         for (int i = 0; i < numberOfBytes; i++) {
0:             assertMarshalBooleans(i, valueSet);
1:         }
1:     }
1: 
1:     protected void assertMarshalBooleans(int count, BooleanValueSet valueSet) throws Exception {
1:         BooleanStream bs = new BooleanStream();
1:         for (int i = 0; i < count; i++) {
1:             bs.writeBoolean(valueSet.getBooleanValueFor(i, count));
1:         }
1:         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:         DataOutputStream ds = new DataOutputStream(buffer);
1:         bs.marshal(ds);
1:         ds.writeInt(endOfStreamMarker);
1: 
1:         // now lets read from the stream
1:         ds.close();
1: 
1:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:         DataInputStream dis = new DataInputStream(in);
1:         bs = new BooleanStream();
1:         try {
1:             bs.unmarshal(dis);
1:         }
0:         catch (Exception e) {
1:             e.printStackTrace();
1:             fail("Failed to unmarshal: " + count + " booleans: " + e);
1:         }
1: 
1:         for (int i = 0; i < count; i++) {
1:             boolean expected = valueSet.getBooleanValueFor(i, count);
1:             // /System.out.println("Unmarshaling value: " + i + " = " + expected
1:             // + " out of: " + count);
1: 
1:             try {
1:                 boolean actual = bs.readBoolean();
1:                 assertEquals("value of object: " + i + " was: " + actual, expected, actual);
1:             }
0:             catch (IOException e) {
1:                 e.printStackTrace();
1:                 fail("Failed to parse boolean: " + i + " out of: " + count + " due to: " + e);
1:             }
1:         }
1:         int marker = dis.readInt();
1:         assertEquals("Marker int when unmarshalling: " + count + " booleans", Integer.toHexString(endOfStreamMarker), Integer.toHexString(marker));
1: 
1:         // lets try read and we should get an exception
1:         try {
0:             byte value = dis.readByte();
1:             fail("Should have reached the end of the stream");
1:         }
0:         catch (IOException e) {
1:             // worked!
1:         }
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         openWireformat = createOpenWireFormat();
1:     }
1: 
1:     protected OpenWireFormat createOpenWireFormat() {
1:         OpenWireFormat wf = new OpenWireFormat();
1:         wf.setCacheEnabled(true);
1:         wf.setStackTraceEnabled(false);
1:         wf.setVersion(1);
1:         return wf;
1:     }
1: 
1: }
============================================================================