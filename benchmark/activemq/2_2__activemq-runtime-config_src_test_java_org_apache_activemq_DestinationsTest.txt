1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq;
3:bbc039f: 
1:43c3cae: import static org.junit.Assert.assertTrue;
1:43c3cae: 
1:43c3cae: import java.util.Arrays;
1:43c3cae: 
1:bbc039f: import org.apache.activemq.command.ActiveMQDestination;
1:bbc039f: import org.apache.activemq.command.ActiveMQQueue;
1:bbc039f: import org.apache.activemq.command.ActiveMQTopic;
1:bbc039f: import org.junit.Test;
1:bbc039f: import org.slf4j.Logger;
1:bbc039f: import org.slf4j.LoggerFactory;
1:bbc039f: 
1:bbc039f: public class DestinationsTest extends RuntimeConfigTestSupport {
1:bbc039f:     public static final Logger LOG = LoggerFactory.getLogger(DestinationsTest.class);
1:bbc039f: 
1:bbc039f:     @Test
1:bbc039f:     public void testMod() throws Exception {
1:bbc039f:         String configurationSeed = "destinationTest";
1:bbc039f:         final String brokerConfig = configurationSeed + "-destinations";
1:bbc039f:         applyNewConfig(brokerConfig, configurationSeed + "-original");
1:bbc039f: 
1:bbc039f:         startBroker(brokerConfig);
1:bbc039f:         assertTrue("broker alive", brokerService.isStarted());
1:bbc039f:         printDestinations();
1:bbc039f:         assertTrue("contains original", containsDestination(new ActiveMQQueue("ORIGINAL")));
1:bbc039f: 
1:bbc039f:         LOG.info("Adding destinations");
1:bbc039f:         applyNewConfig(brokerConfig, configurationSeed + "-add", SLEEP);
1:bbc039f:         printDestinations();
1:bbc039f:         assertTrue("contains original", containsDestination(new ActiveMQQueue("ORIGINAL")));
1:bbc039f:         assertTrue("contains before", containsDestination(new ActiveMQTopic("BEFORE")));
1:bbc039f:         assertTrue("contains after", containsDestination(new ActiveMQQueue("AFTER")));
1:bbc039f: 
1:bbc039f: 
1:bbc039f:         LOG.info("Removing destinations");
1:bbc039f:         applyNewConfig(brokerConfig, configurationSeed + "-remove", SLEEP);
1:bbc039f:         printDestinations();
1:bbc039f:         assertTrue("contains original", containsDestination(new ActiveMQQueue("ORIGINAL")));
1:bbc039f:         assertTrue("contains before", containsDestination(new ActiveMQTopic("BEFORE")));
1:bbc039f:         assertTrue("contains after", containsDestination(new ActiveMQQueue("AFTER")));
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     protected boolean containsDestination(ActiveMQDestination destination) throws Exception {
1:bbc039f:         return Arrays.asList(brokerService.getRegionBroker().getDestinations()).contains(destination);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     protected void printDestinations() throws Exception {
1:bbc039f:         ActiveMQDestination[] destinations = brokerService.getRegionBroker().getDestinations();
1:bbc039f:         for (ActiveMQDestination destination : destinations) {
1:bbc039f:             LOG.info("Broker destination: " + destination.toString());
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: 
/////////////////////////////////////////////////////////////////////////
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.util.Arrays;
0: import java.util.Set;
1: 
0: import static org.junit.Assert.assertTrue;
1: 
1: public class DestinationsTest extends RuntimeConfigTestSupport {
1:     public static final Logger LOG = LoggerFactory.getLogger(DestinationsTest.class);
1: 
1:     @Test
1:     public void testMod() throws Exception {
1:         String configurationSeed = "destinationTest";
1:         final String brokerConfig = configurationSeed + "-destinations";
1:         applyNewConfig(brokerConfig, configurationSeed + "-original");
1: 
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         printDestinations();
1:         assertTrue("contains original", containsDestination(new ActiveMQQueue("ORIGINAL")));
1: 
1:         LOG.info("Adding destinations");
1:         applyNewConfig(brokerConfig, configurationSeed + "-add", SLEEP);
1:         printDestinations();
1:         assertTrue("contains original", containsDestination(new ActiveMQQueue("ORIGINAL")));
1:         assertTrue("contains before", containsDestination(new ActiveMQTopic("BEFORE")));
1:         assertTrue("contains after", containsDestination(new ActiveMQQueue("AFTER")));
1: 
1: 
1:         LOG.info("Removing destinations");
1:         applyNewConfig(brokerConfig, configurationSeed + "-remove", SLEEP);
1:         printDestinations();
1:         assertTrue("contains original", containsDestination(new ActiveMQQueue("ORIGINAL")));
1:         assertTrue("contains before", containsDestination(new ActiveMQTopic("BEFORE")));
1:         assertTrue("contains after", containsDestination(new ActiveMQQueue("AFTER")));
1:     }
1: 
1:     protected boolean containsDestination(ActiveMQDestination destination) throws Exception {
1:         return Arrays.asList(brokerService.getRegionBroker().getDestinations()).contains(destination);
1:     }
1: 
1:     protected void printDestinations() throws Exception {
1:         ActiveMQDestination[] destinations = brokerService.getRegionBroker().getDestinations();
1:         for (ActiveMQDestination destination : destinations) {
1:             LOG.info("Broker destination: " + destination.toString());
1:         }
1:     }
1: }
============================================================================