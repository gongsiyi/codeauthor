1:5b11ea0: /**
1:5b11ea0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5b11ea0:  * contributor license agreements.  See the NOTICE file distributed with
1:5b11ea0:  * this work for additional information regarding copyright ownership.
1:5b11ea0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5b11ea0:  * (the "License"); you may not use this file except in compliance with
1:5b11ea0:  * the License.  You may obtain a copy of the License at
1:5b11ea0:  *
1:5b11ea0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5b11ea0:  *
1:5b11ea0:  * Unless required by applicable law or agreed to in writing, software
1:5b11ea0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5b11ea0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5b11ea0:  * See the License for the specific language governing permissions and
1:5b11ea0:  * limitations under the License.
1:5b11ea0:  */
1:5b11ea0: package org.apache.activemq.transport.http;
14:5b11ea0: 
1:5b11ea0: import java.util.UUID;
1:5b11ea0: import java.util.concurrent.TimeUnit;
1:5b11ea0: import javax.jms.BytesMessage;
1:5b11ea0: import javax.jms.MapMessage;
1:5b11ea0: import javax.jms.MessageConsumer;
1:5b11ea0: import javax.jms.MessageProducer;
1:5b11ea0: import javax.jms.Session;
1:5b11ea0: import javax.jms.StreamMessage;
1:5b11ea0: import javax.jms.Topic;
1:5b11ea0: 
1:5b11ea0: import org.apache.activemq.ActiveMQConnection;
1:5b11ea0: import org.apache.activemq.ActiveMQConnectionFactory;
1:5b11ea0: import org.apache.activemq.broker.BrokerService;
1:5b11ea0: import org.apache.activemq.broker.TransportConnector;
1:5b11ea0: import org.apache.activemq.command.ActiveMQBytesMessage;
1:5b11ea0: import org.apache.activemq.command.ActiveMQMapMessage;
1:5b11ea0: import org.apache.activemq.command.ActiveMQStreamMessage;
1:5b11ea0: import org.apache.activemq.command.ActiveMQTextMessage;
1:5b11ea0: import org.apache.activemq.util.ByteSequence;
1:5b11ea0: import org.junit.After;
1:5b11ea0: import org.junit.Before;
1:5b11ea0: import org.junit.Test;
1:5b11ea0: import org.slf4j.Logger;
1:5b11ea0: import org.slf4j.LoggerFactory;
1:5b11ea0: 
1:3b4aadc: import static org.junit.Assert.assertEquals;
1:3b4aadc: import static org.junit.Assert.assertNotNull;
1:3b4aadc: import static org.junit.Assert.assertTrue;
1:3b4aadc: 
1:ef85089: /**
1:ef85089:  * This test covers the Message Compression feature of the ActiveMQConnectionFactory.setUseCompression
1:ef85089:  * and has no relation to Http transport level compression.  The Messages are compressed using the
1:ef85089:  * deflate algorithm by the ActiveMQ layer before marshalled to XML so only the Message body will
1:ef85089:  * be compressed.
1:ef85089:  */
1:5b11ea0: public class HttpSendCompressedMessagesTest {
1:5b11ea0: 
1:5b11ea0:     private static final Logger LOG = LoggerFactory.getLogger(HttpSendCompressedMessagesTest.class);
1:5b11ea0: 
1:5b11ea0:     private BrokerService broker;
1:5b11ea0:     private static final String tcpBindAddress = "tcp://0.0.0.0:0";
1:5b11ea0:     private static final String httpBindAddress = "http://0.0.0.0:8171";
1:5b11ea0:     private ActiveMQConnectionFactory tcpConnectionFactory;
1:5b11ea0:     private ActiveMQConnectionFactory httpConnectionFactory;
1:5b11ea0:     private ActiveMQConnection tcpConnection;
1:5b11ea0:     private ActiveMQConnection httpConnection;
1:5b11ea0:     private Session tcpSession;
1:5b11ea0:     private Session httpSession;
1:5b11ea0:     private Topic destination;
1:5b11ea0:     private MessageConsumer tcpConsumer;
1:5b11ea0:     private MessageConsumer httpConsumer;
1:5b11ea0: 
1:5b11ea0:     private static final String destinationName = "HttpCompressionTopic";
1:5b11ea0: 
1:4b202c1:     @Test
1:4b202c1:     public void testTextMessageCompressionFromTcp() throws Exception {
1:4b202c1:         sendTextMessage(true);
1:4b202c1:         doTestTextMessageCompression();
8:5b11ea0:     }
1:5b11ea0: 
1:5b11ea0:     @Test
1:4b202c1:     public void testTextMessageCompressionFromHttp() throws Exception {
1:4b202c1:         sendTextMessage(httpConnectionFactory, true);
1:4b202c1:         doTestTextMessageCompression();
1:4b202c1:     }
1:5b11ea0: 
1:4b202c1:     private void doTestTextMessageCompression() throws Exception {
1:5b11ea0:         ActiveMQTextMessage tcpMessage = (ActiveMQTextMessage) tcpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0:         ActiveMQTextMessage httpMessage = (ActiveMQTextMessage) httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0: 
1:5b11ea0:         assertNotNull(tcpMessage);
1:5b11ea0:         assertNotNull(httpMessage);
1:5b11ea0: 
1:5b11ea0:         ByteSequence tcpContent = tcpMessage.getContent();
1:5b11ea0:         ByteSequence httpContent = httpMessage.getContent();
1:5b11ea0: 
1:5b11ea0:         assertNotNull(tcpContent);
1:5b11ea0:         assertNotNull(httpContent);
1:5b11ea0: 
1:5b11ea0:         assertTrue(tcpMessage.isCompressed());
1:5b11ea0:         assertTrue(httpMessage.isCompressed());
1:5b11ea0: 
1:5b11ea0:         int tcpCompressedSize = tcpContent.getLength();
1:5b11ea0:         int httpCompressedSize = httpContent.getLength();
1:5b11ea0: 
1:5b11ea0:         assertEquals(tcpContent.getLength(), httpContent.getLength());
1:5b11ea0:         assertEquals(tcpMessage.getText(), httpMessage.getText());
1:5b11ea0: 
1:5b11ea0:         LOG.info("Received Message on TCP: " + tcpMessage.toString());
1:5b11ea0:         LOG.info("Received Message on HTTP: " + httpMessage.toString());
1:5b11ea0: 
1:5b11ea0:         sendTextMessage(false);
1:5b11ea0: 
1:5b11ea0:         ActiveMQTextMessage uncompressedHttpMessage = (ActiveMQTextMessage)
1:5b11ea0:             httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0:         int httpUncompressedSize = uncompressedHttpMessage.getContent().getLength();
1:5b11ea0: 
1:5b11ea0:         assertTrue(httpUncompressedSize > httpCompressedSize);
1:5b11ea0:         assertTrue(httpUncompressedSize > tcpCompressedSize);
1:5b11ea0:     }
1:5b11ea0: 
1:5b11ea0:     @Test
1:4b202c1:     public void testBytesMessageCompressionFromTcp() throws Exception {
1:5b11ea0:         sendBytesMessage(true);
1:4b202c1:         doTestBytesMessageCompression();
1:4b202c1:     }
1:5b11ea0: 
1:4b202c1:     @Test
1:4b202c1:     public void testBytesMessageCompressionFromHttp() throws Exception {
1:4b202c1:         sendBytesMessage(httpConnectionFactory, true);
1:4b202c1:         doTestBytesMessageCompression();
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void doTestBytesMessageCompression() throws Exception {
1:5b11ea0:         ActiveMQBytesMessage tcpMessage = (ActiveMQBytesMessage) tcpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0:         ActiveMQBytesMessage httpMessage = (ActiveMQBytesMessage) httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0: 
1:5b11ea0:         assertNotNull(tcpMessage);
1:5b11ea0:         assertNotNull(httpMessage);
1:5b11ea0: 
1:5b11ea0:         ByteSequence tcpContent = tcpMessage.getContent();
1:5b11ea0:         ByteSequence httpContent = httpMessage.getContent();
1:5b11ea0: 
1:5b11ea0:         assertNotNull(tcpContent);
1:5b11ea0:         assertNotNull(httpContent);
1:5b11ea0: 
1:5b11ea0:         assertTrue(tcpMessage.isCompressed());
1:5b11ea0:         assertTrue(httpMessage.isCompressed());
1:5b11ea0: 
1:5b11ea0:         int tcpCompressedSize = tcpContent.getLength();
1:5b11ea0:         int httpCompressedSize = httpContent.getLength();
1:5b11ea0: 
1:5b11ea0:         assertEquals(tcpContent.getLength(), httpContent.getLength());
1:5b11ea0:         assertEquals(tcpMessage.readUTF(), httpMessage.readUTF());
1:5b11ea0: 
1:5b11ea0:         LOG.info("Received Message on TCP: " + tcpMessage.toString());
1:5b11ea0:         LOG.info("Received Message on HTTP: " + httpMessage.toString());
1:5b11ea0: 
1:5b11ea0:         sendBytesMessage(false);
1:5b11ea0: 
1:5b11ea0:         ActiveMQBytesMessage uncompressedHttpMessage = (ActiveMQBytesMessage)
1:5b11ea0:             httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0:         int httpUncompressedSize = uncompressedHttpMessage.getContent().getLength();
1:5b11ea0: 
1:5b11ea0:         assertTrue(httpUncompressedSize > httpCompressedSize);
1:5b11ea0:         assertTrue(httpUncompressedSize > tcpCompressedSize);
1:5b11ea0:     }
1:5b11ea0: 
1:5b11ea0:     @Test
1:4b202c1:     public void testStreamMessageCompressionFromTcp() throws Exception {
1:5b11ea0:         sendStreamMessage(true);
1:4b202c1:         doTestStreamMessageCompression();
1:4b202c1:     }
1:5b11ea0: 
1:4b202c1:     @Test
1:4b202c1:     public void testStreamMessageCompressionFromHttp() throws Exception {
1:4b202c1:         sendStreamMessage(httpConnectionFactory, true);
1:4b202c1:         doTestStreamMessageCompression();
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void doTestStreamMessageCompression() throws Exception {
1:5b11ea0:         ActiveMQStreamMessage tcpMessage = (ActiveMQStreamMessage) tcpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0:         ActiveMQStreamMessage httpMessage = (ActiveMQStreamMessage) httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0: 
1:5b11ea0:         assertNotNull(tcpMessage);
1:5b11ea0:         assertNotNull(httpMessage);
1:5b11ea0: 
1:5b11ea0:         ByteSequence tcpContent = tcpMessage.getContent();
1:5b11ea0:         ByteSequence httpContent = httpMessage.getContent();
1:5b11ea0: 
1:5b11ea0:         assertNotNull(tcpContent);
1:5b11ea0:         assertNotNull(httpContent);
1:5b11ea0: 
1:5b11ea0:         assertTrue(tcpMessage.isCompressed());
1:5b11ea0:         assertTrue(httpMessage.isCompressed());
1:5b11ea0: 
1:5b11ea0:         int tcpCompressedSize = tcpContent.getLength();
1:5b11ea0:         int httpCompressedSize = httpContent.getLength();
1:5b11ea0: 
1:5b11ea0:         assertEquals(tcpContent.getLength(), httpContent.getLength());
1:5b11ea0:         assertEquals(tcpMessage.readString(), httpMessage.readString());
1:5b11ea0: 
1:5b11ea0:         LOG.info("Received Message on TCP: " + tcpMessage.toString());
1:5b11ea0:         LOG.info("Received Message on HTTP: " + httpMessage.toString());
1:5b11ea0: 
1:5b11ea0:         sendStreamMessage(false);
1:5b11ea0: 
1:5b11ea0:         ActiveMQStreamMessage uncompressedHttpMessage = (ActiveMQStreamMessage)
1:5b11ea0:             httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0:         int httpUncompressedSize = uncompressedHttpMessage.getContent().getLength();
1:5b11ea0: 
1:5b11ea0:         assertTrue(httpUncompressedSize > httpCompressedSize);
1:5b11ea0:         assertTrue(httpUncompressedSize > tcpCompressedSize);
1:5b11ea0:     }
1:5b11ea0: 
1:5b11ea0:     @Test
1:4b202c1:     public void testMapMessageCompressionFromTcp() throws Exception {
1:5b11ea0:         sendMapMessage(true);
1:4b202c1:         doTestMapMessageCompression();
1:4b202c1:     }
1:5b11ea0: 
1:4b202c1:     @Test
1:4b202c1:     public void testMapMessageCompressionFromHttp() throws Exception {
1:4b202c1:         sendMapMessage(httpConnectionFactory, true);
1:4b202c1:         doTestMapMessageCompression();
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void doTestMapMessageCompression() throws Exception {
1:5b11ea0:         ActiveMQMapMessage tcpMessage = (ActiveMQMapMessage) tcpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0:         ActiveMQMapMessage httpMessage = (ActiveMQMapMessage) httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0: 
1:5b11ea0:         assertNotNull(tcpMessage);
1:5b11ea0:         assertNotNull(httpMessage);
1:5b11ea0: 
1:5b11ea0:         ByteSequence tcpContent = tcpMessage.getContent();
1:5b11ea0:         ByteSequence httpContent = httpMessage.getContent();
1:5b11ea0: 
1:5b11ea0:         assertNotNull(tcpContent);
1:5b11ea0:         assertNotNull(httpContent);
1:5b11ea0: 
1:5b11ea0:         assertTrue(tcpMessage.isCompressed());
1:5b11ea0:         assertTrue(httpMessage.isCompressed());
1:5b11ea0: 
1:5b11ea0:         int tcpCompressedSize = tcpContent.getLength();
1:5b11ea0:         int httpCompressedSize = httpContent.getLength();
1:5b11ea0: 
1:5b11ea0:         assertEquals(tcpContent.getLength(), httpContent.getLength());
1:5b11ea0:         assertEquals(tcpMessage.getString("content"), httpMessage.getString("content"));
1:5b11ea0: 
1:5b11ea0:         LOG.info("Received Message on TCP: " + tcpMessage.toString());
1:5b11ea0:         LOG.info("Received Message on HTTP: " + httpMessage.toString());
1:5b11ea0: 
1:5b11ea0:         sendMapMessage(false);
1:5b11ea0: 
1:5b11ea0:         ActiveMQMapMessage uncompressedHttpMessage = (ActiveMQMapMessage)
1:5b11ea0:             httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:5b11ea0:         int httpUncompressedSize = uncompressedHttpMessage.getContent().getLength();
1:5b11ea0: 
1:5b11ea0:         assertTrue(httpUncompressedSize > httpCompressedSize);
1:5b11ea0:         assertTrue(httpUncompressedSize > tcpCompressedSize);
1:5b11ea0:     }
1:5b11ea0: 
1:5b11ea0:     @Before
1:5b11ea0:     public void setUp() throws Exception {
1:5b11ea0:         broker = new BrokerService();
1:5b11ea0:         broker.setPersistent(false);
1:5b11ea0:         broker.setUseJmx(false);
1:5b11ea0:         broker.setAdvisorySupport(false);
1:5b11ea0:         broker.setDeleteAllMessagesOnStartup(true);
1:5b11ea0:         TransportConnector tcpConnector = broker.addConnector(tcpBindAddress);
1:5b11ea0:         TransportConnector httpConnector = broker.addConnector(httpBindAddress);
1:5b11ea0:         broker.start();
1:5b11ea0:         broker.waitUntilStarted();
1:5b11ea0: 
1:5b11ea0:         WaitForJettyListener.waitForJettySocketToAccept(httpConnector.getPublishableConnectString());
1:5b11ea0: 
1:5b11ea0:         tcpConnectionFactory = new ActiveMQConnectionFactory(tcpConnector.getPublishableConnectString());
1:5b11ea0:         tcpConnectionFactory.setUseCompression(true);
1:5b11ea0:         httpConnectionFactory = new ActiveMQConnectionFactory(httpConnector.getPublishableConnectString());
1:5b11ea0:         httpConnectionFactory.setUseCompression(true);
1:5b11ea0:         tcpConnection = (ActiveMQConnection) tcpConnectionFactory.createConnection();
1:5b11ea0:         httpConnection = (ActiveMQConnection) httpConnectionFactory.createConnection();
1:5b11ea0:         tcpSession = tcpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5b11ea0:         httpSession = httpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5b11ea0:         destination = tcpSession.createTopic(destinationName);
1:5b11ea0:         tcpConsumer = tcpSession.createConsumer(destination);
1:5b11ea0:         httpConsumer = httpSession.createConsumer(destination);
1:5b11ea0:         tcpConnection.start();
1:5b11ea0:         httpConnection.start();
1:5b11ea0:     }
1:5b11ea0: 
1:5b11ea0:     @After
1:5b11ea0:     public void shutDown() throws Exception {
1:5b11ea0:         if (broker != null) {
1:5b11ea0:             broker.stop();
1:5b11ea0:             broker.waitUntilStopped();
1:5b11ea0:         }
1:5b11ea0:     }
1:4b202c1: 
1:4b202c1:     private void sendTextMessage(boolean compressed) throws Exception {
1:4b202c1:         sendTextMessage(tcpConnectionFactory, compressed);
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void sendTextMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception {
1:4b202c1: 
1:4b202c1:         StringBuilder builder = new StringBuilder();
1:4b202c1:         for(int i = 0; i < 10; ++i) {
1:4b202c1:             builder.append(UUID.randomUUID().toString());
1:4b202c1:         }
1:4b202c1: 
1:4b202c1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:4b202c1:         connection.setUseCompression(compressed);
1:4b202c1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4b202c1:         Topic destination = session.createTopic(destinationName);
1:4b202c1:         MessageProducer producer = session.createProducer(destination);
1:4b202c1:         producer.send(session.createTextMessage(builder.toString()));
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void sendBytesMessage(boolean compressed) throws Exception {
1:4b202c1:         sendBytesMessage(tcpConnectionFactory, compressed);
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void sendBytesMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception {
1:4b202c1: 
1:4b202c1:         StringBuilder builder = new StringBuilder();
1:4b202c1:         for(int i = 0; i < 10; ++i) {
1:4b202c1:             builder.append(UUID.randomUUID().toString());
1:4b202c1:         }
1:4b202c1: 
1:4b202c1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:4b202c1:         connection.setUseCompression(compressed);
1:4b202c1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4b202c1:         Topic destination = session.createTopic(destinationName);
1:4b202c1:         MessageProducer producer = session.createProducer(destination);
1:4b202c1:         BytesMessage message = session.createBytesMessage();
1:4b202c1:         message.writeUTF(builder.toString());
1:4b202c1:         producer.send(message);
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void sendStreamMessage(boolean compressed) throws Exception {
1:4b202c1:         sendStreamMessage(tcpConnectionFactory, compressed);
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void sendStreamMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception {
1:4b202c1: 
1:4b202c1:         StringBuilder builder = new StringBuilder();
1:4b202c1:         for(int i = 0; i < 10; ++i) {
1:4b202c1:             builder.append(UUID.randomUUID().toString());
1:4b202c1:         }
1:4b202c1: 
1:4b202c1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:4b202c1:         connection.setUseCompression(compressed);
1:4b202c1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4b202c1:         Topic destination = session.createTopic(destinationName);
1:4b202c1:         MessageProducer producer = session.createProducer(destination);
1:4b202c1:         StreamMessage message = session.createStreamMessage();
1:4b202c1:         message.writeString(builder.toString());
1:4b202c1:         producer.send(message);
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void sendMapMessage(boolean compressed) throws Exception {
1:4b202c1:         sendMapMessage(tcpConnectionFactory, compressed);
1:4b202c1:     }
1:4b202c1: 
1:4b202c1:     private void sendMapMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception {
1:4b202c1: 
1:4b202c1:         StringBuilder builder = new StringBuilder();
1:4b202c1:         for(int i = 0; i < 10; ++i) {
1:4b202c1:             builder.append(UUID.randomUUID().toString());
1:4b202c1:         }
1:4b202c1: 
1:4b202c1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:4b202c1:         connection.setUseCompression(compressed);
1:4b202c1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4b202c1:         Topic destination = session.createTopic(destinationName);
1:4b202c1:         MessageProducer producer = session.createProducer(destination);
1:4b202c1:         MapMessage message = session.createMapMessage();
1:4b202c1:         message.setString("content", builder.toString());
1:4b202c1:         producer.send(message);
1:4b202c1:     }
1:5b11ea0: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef85089
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * This test covers the Message Compression feature of the ActiveMQConnectionFactory.setUseCompression
1:  * and has no relation to Http transport level compression.  The Messages are compressed using the
1:  * deflate algorithm by the ActiveMQ layer before marshalled to XML so only the Message body will
1:  * be compressed.
1:  */
commit:4b202c1
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testTextMessageCompressionFromTcp() throws Exception {
1:         sendTextMessage(true);
1:         doTestTextMessageCompression();
1:     public void testTextMessageCompressionFromHttp() throws Exception {
1:         sendTextMessage(httpConnectionFactory, true);
1:         doTestTextMessageCompression();
1:     }
1:     private void doTestTextMessageCompression() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testBytesMessageCompressionFromTcp() throws Exception {
1:         doTestBytesMessageCompression();
1:     }
1:     @Test
1:     public void testBytesMessageCompressionFromHttp() throws Exception {
1:         sendBytesMessage(httpConnectionFactory, true);
1:         doTestBytesMessageCompression();
1:     }
1: 
1:     private void doTestBytesMessageCompression() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testStreamMessageCompressionFromTcp() throws Exception {
1:         doTestStreamMessageCompression();
1:     }
1:     @Test
1:     public void testStreamMessageCompressionFromHttp() throws Exception {
1:         sendStreamMessage(httpConnectionFactory, true);
1:         doTestStreamMessageCompression();
1:     }
1: 
1:     private void doTestStreamMessageCompression() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testMapMessageCompressionFromTcp() throws Exception {
1:         doTestMapMessageCompression();
1:     }
1:     @Test
1:     public void testMapMessageCompressionFromHttp() throws Exception {
1:         sendMapMessage(httpConnectionFactory, true);
1:         doTestMapMessageCompression();
1:     }
1: 
1:     private void doTestMapMessageCompression() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void sendTextMessage(boolean compressed) throws Exception {
1:         sendTextMessage(tcpConnectionFactory, compressed);
1:     }
1: 
1:     private void sendTextMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception {
1: 
1:         StringBuilder builder = new StringBuilder();
1:         for(int i = 0; i < 10; ++i) {
1:             builder.append(UUID.randomUUID().toString());
1:         }
1: 
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.setUseCompression(compressed);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic destination = session.createTopic(destinationName);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(session.createTextMessage(builder.toString()));
1:     }
1: 
1:     private void sendBytesMessage(boolean compressed) throws Exception {
1:         sendBytesMessage(tcpConnectionFactory, compressed);
1:     }
1: 
1:     private void sendBytesMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception {
1: 
1:         StringBuilder builder = new StringBuilder();
1:         for(int i = 0; i < 10; ++i) {
1:             builder.append(UUID.randomUUID().toString());
1:         }
1: 
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.setUseCompression(compressed);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic destination = session.createTopic(destinationName);
1:         MessageProducer producer = session.createProducer(destination);
1:         BytesMessage message = session.createBytesMessage();
1:         message.writeUTF(builder.toString());
1:         producer.send(message);
1:     }
1: 
1:     private void sendStreamMessage(boolean compressed) throws Exception {
1:         sendStreamMessage(tcpConnectionFactory, compressed);
1:     }
1: 
1:     private void sendStreamMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception {
1: 
1:         StringBuilder builder = new StringBuilder();
1:         for(int i = 0; i < 10; ++i) {
1:             builder.append(UUID.randomUUID().toString());
1:         }
1: 
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.setUseCompression(compressed);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic destination = session.createTopic(destinationName);
1:         MessageProducer producer = session.createProducer(destination);
1:         StreamMessage message = session.createStreamMessage();
1:         message.writeString(builder.toString());
1:         producer.send(message);
1:     }
1: 
1:     private void sendMapMessage(boolean compressed) throws Exception {
1:         sendMapMessage(tcpConnectionFactory, compressed);
1:     }
1: 
1:     private void sendMapMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception {
1: 
1:         StringBuilder builder = new StringBuilder();
1:         for(int i = 0; i < 10; ++i) {
1:             builder.append(UUID.randomUUID().toString());
1:         }
1: 
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.setUseCompression(compressed);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic destination = session.createTopic(destinationName);
1:         MessageProducer producer = session.createProducer(destination);
1:         MapMessage message = session.createMapMessage();
1:         message.setString("content", builder.toString());
1:         producer.send(message);
1:     }
commit:5b11ea0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.http;
1: 
0: import static org.junit.Assert.*;
1: 
1: import java.util.UUID;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.MapMessage;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.StreamMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQStreamMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.util.ByteSequence;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class HttpSendCompressedMessagesTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(HttpSendCompressedMessagesTest.class);
1: 
1:     private BrokerService broker;
1:     private static final String tcpBindAddress = "tcp://0.0.0.0:0";
1:     private static final String httpBindAddress = "http://0.0.0.0:8171";
1:     private ActiveMQConnectionFactory tcpConnectionFactory;
1:     private ActiveMQConnectionFactory httpConnectionFactory;
1:     private ActiveMQConnection tcpConnection;
1:     private ActiveMQConnection httpConnection;
1:     private Session tcpSession;
1:     private Session httpSession;
1:     private Topic destination;
1:     private MessageConsumer tcpConsumer;
1:     private MessageConsumer httpConsumer;
1: 
1:     private static final String destinationName = "HttpCompressionTopic";
1: 
0:     private void sendTextMessage(boolean compressed) throws Exception {
1: 
0:         StringBuilder builder = new StringBuilder();
0:         for(int i = 0; i < 10; ++i) {
0:             builder.append(UUID.randomUUID().toString());
1:         }
1: 
0:         ActiveMQConnection connection = (ActiveMQConnection) tcpConnectionFactory.createConnection();
0:         connection.setUseCompression(compressed);
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Topic destination = session.createTopic(destinationName);
0:         MessageProducer producer = session.createProducer(destination);
0:         producer.send(session.createTextMessage(builder.toString()));
1:     }
1: 
0:     private void sendBytesMessage(boolean compressed) throws Exception {
1: 
0:         StringBuilder builder = new StringBuilder();
0:         for(int i = 0; i < 10; ++i) {
0:             builder.append(UUID.randomUUID().toString());
1:         }
1: 
0:         ActiveMQConnection connection = (ActiveMQConnection) tcpConnectionFactory.createConnection();
0:         connection.setUseCompression(compressed);
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Topic destination = session.createTopic(destinationName);
0:         MessageProducer producer = session.createProducer(destination);
0:         BytesMessage message = session.createBytesMessage();
0:         message.writeUTF(builder.toString());
0:         producer.send(message);
1:     }
1: 
0:     private void sendStreamMessage(boolean compressed) throws Exception {
1: 
0:         StringBuilder builder = new StringBuilder();
0:         for(int i = 0; i < 10; ++i) {
0:             builder.append(UUID.randomUUID().toString());
1:         }
1: 
0:         ActiveMQConnection connection = (ActiveMQConnection) tcpConnectionFactory.createConnection();
0:         connection.setUseCompression(compressed);
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Topic destination = session.createTopic(destinationName);
0:         MessageProducer producer = session.createProducer(destination);
0:         StreamMessage message = session.createStreamMessage();
0:         message.writeString(builder.toString());
0:         producer.send(message);
1:     }
1: 
0:     private void sendMapMessage(boolean compressed) throws Exception {
1: 
0:         StringBuilder builder = new StringBuilder();
0:         for(int i = 0; i < 10; ++i) {
0:             builder.append(UUID.randomUUID().toString());
1:         }
1: 
0:         ActiveMQConnection connection = (ActiveMQConnection) tcpConnectionFactory.createConnection();
0:         connection.setUseCompression(compressed);
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Topic destination = session.createTopic(destinationName);
0:         MessageProducer producer = session.createProducer(destination);
0:         MapMessage message = session.createMapMessage();
0:         message.setString("content", builder.toString());
0:         producer.send(message);
1:     }
1: 
1:     @Test
0:     public void testTextMessageCompression() throws Exception {
0:         sendTextMessage(true);
1: 
1:         ActiveMQTextMessage tcpMessage = (ActiveMQTextMessage) tcpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:         ActiveMQTextMessage httpMessage = (ActiveMQTextMessage) httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1: 
1:         assertNotNull(tcpMessage);
1:         assertNotNull(httpMessage);
1: 
1:         ByteSequence tcpContent = tcpMessage.getContent();
1:         ByteSequence httpContent = httpMessage.getContent();
1: 
1:         assertNotNull(tcpContent);
1:         assertNotNull(httpContent);
1: 
1:         assertTrue(tcpMessage.isCompressed());
1:         assertTrue(httpMessage.isCompressed());
1: 
1:         int tcpCompressedSize = tcpContent.getLength();
1:         int httpCompressedSize = httpContent.getLength();
1: 
1:         assertEquals(tcpContent.getLength(), httpContent.getLength());
1:         assertEquals(tcpMessage.getText(), httpMessage.getText());
1: 
1:         LOG.info("Received Message on TCP: " + tcpMessage.toString());
1:         LOG.info("Received Message on HTTP: " + httpMessage.toString());
1: 
1:         sendTextMessage(false);
1: 
1:         ActiveMQTextMessage uncompressedHttpMessage = (ActiveMQTextMessage)
1:             httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:         int httpUncompressedSize = uncompressedHttpMessage.getContent().getLength();
1: 
1:         assertTrue(httpUncompressedSize > httpCompressedSize);
1:         assertTrue(httpUncompressedSize > tcpCompressedSize);
1:     }
1: 
1:     @Test
0:     public void testBytesMessageCompression() throws Exception {
1:         sendBytesMessage(true);
1: 
1:         ActiveMQBytesMessage tcpMessage = (ActiveMQBytesMessage) tcpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:         ActiveMQBytesMessage httpMessage = (ActiveMQBytesMessage) httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1: 
1:         assertNotNull(tcpMessage);
1:         assertNotNull(httpMessage);
1: 
1:         ByteSequence tcpContent = tcpMessage.getContent();
1:         ByteSequence httpContent = httpMessage.getContent();
1: 
1:         assertNotNull(tcpContent);
1:         assertNotNull(httpContent);
1: 
1:         assertTrue(tcpMessage.isCompressed());
1:         assertTrue(httpMessage.isCompressed());
1: 
1:         int tcpCompressedSize = tcpContent.getLength();
1:         int httpCompressedSize = httpContent.getLength();
1: 
1:         assertEquals(tcpContent.getLength(), httpContent.getLength());
1:         assertEquals(tcpMessage.readUTF(), httpMessage.readUTF());
1: 
1:         LOG.info("Received Message on TCP: " + tcpMessage.toString());
1:         LOG.info("Received Message on HTTP: " + httpMessage.toString());
1: 
1:         sendBytesMessage(false);
1: 
1:         ActiveMQBytesMessage uncompressedHttpMessage = (ActiveMQBytesMessage)
1:             httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:         int httpUncompressedSize = uncompressedHttpMessage.getContent().getLength();
1: 
1:         assertTrue(httpUncompressedSize > httpCompressedSize);
1:         assertTrue(httpUncompressedSize > tcpCompressedSize);
1:     }
1: 
1:     @Test
0:     public void testStreamMessageCompression() throws Exception {
1:         sendStreamMessage(true);
1: 
1:         ActiveMQStreamMessage tcpMessage = (ActiveMQStreamMessage) tcpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:         ActiveMQStreamMessage httpMessage = (ActiveMQStreamMessage) httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1: 
1:         assertNotNull(tcpMessage);
1:         assertNotNull(httpMessage);
1: 
1:         ByteSequence tcpContent = tcpMessage.getContent();
1:         ByteSequence httpContent = httpMessage.getContent();
1: 
1:         assertNotNull(tcpContent);
1:         assertNotNull(httpContent);
1: 
1:         assertTrue(tcpMessage.isCompressed());
1:         assertTrue(httpMessage.isCompressed());
1: 
1:         int tcpCompressedSize = tcpContent.getLength();
1:         int httpCompressedSize = httpContent.getLength();
1: 
1:         assertEquals(tcpContent.getLength(), httpContent.getLength());
1:         assertEquals(tcpMessage.readString(), httpMessage.readString());
1: 
1:         LOG.info("Received Message on TCP: " + tcpMessage.toString());
1:         LOG.info("Received Message on HTTP: " + httpMessage.toString());
1: 
1:         sendStreamMessage(false);
1: 
1:         ActiveMQStreamMessage uncompressedHttpMessage = (ActiveMQStreamMessage)
1:             httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:         int httpUncompressedSize = uncompressedHttpMessage.getContent().getLength();
1: 
1:         assertTrue(httpUncompressedSize > httpCompressedSize);
1:         assertTrue(httpUncompressedSize > tcpCompressedSize);
1:     }
1: 
1:     @Test
0:     public void testMapMessageCompression() throws Exception {
1:         sendMapMessage(true);
1: 
1:         ActiveMQMapMessage tcpMessage = (ActiveMQMapMessage) tcpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:         ActiveMQMapMessage httpMessage = (ActiveMQMapMessage) httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1: 
1:         assertNotNull(tcpMessage);
1:         assertNotNull(httpMessage);
1: 
1:         ByteSequence tcpContent = tcpMessage.getContent();
1:         ByteSequence httpContent = httpMessage.getContent();
1: 
1:         assertNotNull(tcpContent);
1:         assertNotNull(httpContent);
1: 
1:         assertTrue(tcpMessage.isCompressed());
1:         assertTrue(httpMessage.isCompressed());
1: 
1:         int tcpCompressedSize = tcpContent.getLength();
1:         int httpCompressedSize = httpContent.getLength();
1: 
1:         assertEquals(tcpContent.getLength(), httpContent.getLength());
1:         assertEquals(tcpMessage.getString("content"), httpMessage.getString("content"));
1: 
1:         LOG.info("Received Message on TCP: " + tcpMessage.toString());
1:         LOG.info("Received Message on HTTP: " + httpMessage.toString());
1: 
1:         sendMapMessage(false);
1: 
1:         ActiveMQMapMessage uncompressedHttpMessage = (ActiveMQMapMessage)
1:             httpConsumer.receive(TimeUnit.SECONDS.toMillis(3));
1:         int httpUncompressedSize = uncompressedHttpMessage.getContent().getLength();
1: 
1:         assertTrue(httpUncompressedSize > httpCompressedSize);
1:         assertTrue(httpUncompressedSize > tcpCompressedSize);
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         TransportConnector tcpConnector = broker.addConnector(tcpBindAddress);
1:         TransportConnector httpConnector = broker.addConnector(httpBindAddress);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         WaitForJettyListener.waitForJettySocketToAccept(httpConnector.getPublishableConnectString());
1: 
1:         tcpConnectionFactory = new ActiveMQConnectionFactory(tcpConnector.getPublishableConnectString());
1:         tcpConnectionFactory.setUseCompression(true);
1:         httpConnectionFactory = new ActiveMQConnectionFactory(httpConnector.getPublishableConnectString());
1:         httpConnectionFactory.setUseCompression(true);
1:         tcpConnection = (ActiveMQConnection) tcpConnectionFactory.createConnection();
1:         httpConnection = (ActiveMQConnection) httpConnectionFactory.createConnection();
1:         tcpSession = tcpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         httpSession = httpConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = tcpSession.createTopic(destinationName);
1:         tcpConsumer = tcpSession.createConsumer(destination);
1:         httpConsumer = httpSession.createConsumer(destination);
1:         tcpConnection.start();
1:         httpConnection.start();
1:     }
1: 
1:     @After
1:     public void shutDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: }
============================================================================