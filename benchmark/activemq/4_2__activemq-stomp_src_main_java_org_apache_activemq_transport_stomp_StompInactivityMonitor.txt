1:0885c60: /**
1:0885c60:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0885c60:  * contributor license agreements.  See the NOTICE file distributed with
1:0885c60:  * this work for additional information regarding copyright ownership.
1:0885c60:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0885c60:  * (the "License"); you may not use this file except in compliance with
1:0885c60:  * the License.  You may obtain a copy of the License at
1:0885c60:  *
1:0885c60:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0885c60:  *
1:0885c60:  * Unless required by applicable law or agreed to in writing, software
1:0885c60:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0885c60:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0885c60:  * See the License for the specific language governing permissions and
1:0885c60:  * limitations under the License.
1:0885c60:  */
1:0885c60: package org.apache.activemq.transport.stomp;
2:0885c60: 
1:0885c60: import java.io.IOException;
1:0885c60: 
1:0885c60: import org.apache.activemq.command.WireFormatInfo;
1:0885c60: import org.apache.activemq.transport.AbstractInactivityMonitor;
1:0885c60: import org.apache.activemq.transport.Transport;
1:0885c60: import org.apache.activemq.wireformat.WireFormat;
1:0885c60: import org.slf4j.Logger;
1:0885c60: import org.slf4j.LoggerFactory;
1:0885c60: 
1:0885c60: /**
1:0885c60:  * Used to make sure that commands are arriving periodically from the peer of
1:0885c60:  * the transport.
1:0885c60:  */
1:0885c60: public class StompInactivityMonitor extends AbstractInactivityMonitor {
1:0885c60: 
1:0885c60:     private static final Logger LOG = LoggerFactory.getLogger(StompInactivityMonitor.class);
1:0885c60: 
1:0885c60:     private boolean isConfigured = false;
1:0885c60: 
1:0885c60:     public StompInactivityMonitor(Transport next, WireFormat wireFormat) {
1:0885c60:         super(next, wireFormat);
2:0885c60:     }
1:0885c60: 
1:0885c60:     public void startMonitoring() throws IOException {
1:0885c60:         this.isConfigured = true;
1:3125cae: 
1:3125cae:         stopConnectCheckTask();
1:3125cae:         startMonitorThreads();
1:0885c60:     }
1:0885c60: 
1:0885c60:     @Override
1:0885c60:     protected void processInboundWireFormatInfo(WireFormatInfo info) throws IOException {
1:0885c60:     }
1:0885c60: 
1:0885c60:     @Override
1:c7d33ad:     protected void processOutboundWireFormatInfo(WireFormatInfo info) throws IOException {
1:0885c60:     }
1:0885c60: 
1:0885c60:     @Override
1:0885c60:     protected boolean configuredOk() throws IOException {
1:0885c60: 
1:0885c60:         if (!isConfigured) {
2:0885c60:             return false;
1:0885c60:         }
1:0885c60: 
1:c7d33ad:         LOG.debug("Stomp Inactivity Monitor read check interval: {}ms, write check interval: {}ms",
1:c7d33ad:                   getReadCheckTime(), getWriteCheckTime());
1:0885c60: 
1:c7d33ad:         return this.getReadCheckTime() >= 0 && this.getWriteCheckTime() >= 0;
1:0885c60:     }
1:0885c60: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3125cae
/////////////////////////////////////////////////////////////////////////
1: 
1:         stopConnectCheckTask();
1:         startMonitorThreads();
commit:c7d33ad
/////////////////////////////////////////////////////////////////////////
1:     protected void processOutboundWireFormatInfo(WireFormatInfo info) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("Stomp Inactivity Monitor read check interval: {}ms, write check interval: {}ms",
1:                   getReadCheckTime(), getWriteCheckTime());
1:         return this.getReadCheckTime() >= 0 && this.getWriteCheckTime() >= 0;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0885c60
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.command.WireFormatInfo;
1: import org.apache.activemq.transport.AbstractInactivityMonitor;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Used to make sure that commands are arriving periodically from the peer of
1:  * the transport.
1:  */
1: public class StompInactivityMonitor extends AbstractInactivityMonitor {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompInactivityMonitor.class);
1: 
1:     private boolean isConfigured = false;
1: 
1:     public StompInactivityMonitor(Transport next, WireFormat wireFormat) {
1:         super(next, wireFormat);
1:     }
1: 
1:     public void startMonitoring() throws IOException {
1:         this.isConfigured = true;
0:         this.startMonitorThreads();
1:     }
1: 
1:     @Override
1:     protected void processInboundWireFormatInfo(WireFormatInfo info) throws IOException {
1:     }
1: 
1:     @Override
0:     protected void processOutboundWireFormatInfo(WireFormatInfo info) throws IOException{
1:     }
1: 
1:     @Override
1:     protected boolean configuredOk() throws IOException {
1: 
1:         if (!isConfigured) {
1:             return false;
1:         }
1: 
0:         LOG.debug("Stomp Inactivity Monitor read check: " + getReadCheckTime() +
0:                   ", write check: " + getWriteCheckTime());
1: 
0:         if (this.getReadCheckTime() >= 0 && this.getWriteCheckTime() >= 0) {
0:             return true;
1:         }
1: 
1:         return false;
1:     }
1: }
============================================================================