1:c4d8d86: /**
1:c4d8d86:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c4d8d86:  * contributor license agreements.  See the NOTICE file distributed with
1:c4d8d86:  * this work for additional information regarding copyright ownership.
1:c4d8d86:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c4d8d86:  * (the "License"); you may not use this file except in compliance with
1:c4d8d86:  * the License.  You may obtain a copy of the License at
1:c4d8d86:  *
1:c4d8d86:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c4d8d86:  *
1:c4d8d86:  * Unless required by applicable law or agreed to in writing, software
1:c4d8d86:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c4d8d86:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c4d8d86:  * See the License for the specific language governing permissions and
1:c4d8d86:  * limitations under the License.
1:c4d8d86:  */
1:c4d8d86: package org.apache.activemq.transport.logwriters;
2:c4d8d86: 
1:c4d8d86: import java.io.IOException;
1:c4d8d86: 
1:c4d8d86: import org.apache.activemq.command.BaseCommand;
1:c4d8d86: import org.apache.activemq.command.ConnectionInfo;
1:c4d8d86: import org.apache.activemq.command.Message;
1:c4d8d86: import org.apache.activemq.command.MessageAck;
1:c4d8d86: import org.apache.activemq.command.MessageDispatch;
1:c4d8d86: import org.apache.activemq.command.ProducerAck;
1:c4d8d86: import org.apache.activemq.command.ProducerId;
1:c4d8d86: import org.apache.activemq.command.WireFormatInfo;
1:c4d8d86: import org.apache.activemq.transport.LogWriter;
1:8bf987b: import org.slf4j.Logger;
1:c4d8d86: 
1:c4d8d86: /**
1:c4d8d86:  * Custom implementation of LogWriter interface.
1:c4d8d86:  * 
1:c4d8d86:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
1:0bbc0ac:  * 
1:c4d8d86:  */
1:c4d8d86: public class CustomLogWriter implements LogWriter {
1:5385fd1: 
1:5385fd1:     @Override
1:5385fd1:     public void setPrefix(String prefix) {
1:5385fd1:         // for the custom case, revert to the logger per connection
1:5385fd1:     }
1:5385fd1: 
1:c4d8d86:     // doc comment inherited from LogWriter
1:8bf987b:     public void initialMessage(Logger log) {
1:c4d8d86:         
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     // doc comment inherited from LogWriter
1:8bf987b:     public void logRequest (Logger log, Object command) {
1:c4d8d86:         log.debug("$$ SENDREQ: " + CustomLogWriter.commandToString(command));
1:c4d8d86:     }
1:c4d8d86:     
1:c4d8d86:     // doc comment inherited from LogWriter
1:8bf987b:     public void logResponse (Logger log, Object response) {
1:c4d8d86:         log.debug("$$ GOT_RESPONSE: "+response);
1:c4d8d86:     }
1:c4d8d86:     
1:c4d8d86:     // doc comment inherited from LogWriter
1:8bf987b:     public void logAsyncRequest (Logger log, Object command) {
1:c4d8d86:         log.debug("$$ SENDING_ASNYC_REQUEST: "+command);
1:c4d8d86:     }
1:c4d8d86:     
1:c4d8d86:     // doc comment inherited from LogWriter
1:8bf987b:     public void logOneWay (Logger log, Object command) {
1:c4d8d86:         log.debug("$$ SENDING: " + CustomLogWriter.commandToString(command));
1:c4d8d86:     }
1:c4d8d86:     
1:c4d8d86:     // doc comment inherited from LogWriter
1:8bf987b:     public void logReceivedCommand (Logger log, Object command) {
1:c4d8d86:         log.debug("$$ RECEIVED: " + CustomLogWriter.commandToString(command));
1:c4d8d86:     }
1:c4d8d86:     
1:c4d8d86:     // doc comment inherited from LogWriter
1:8bf987b:     public void logReceivedException (Logger log, IOException error) {
1:c4d8d86:         log.debug("$$ RECEIVED_EXCEPTION: "+error, error);
1:c4d8d86:     }
1:c4d8d86:     
1:c4d8d86:     /**
1:c4d8d86:      * Transforms a command into a String
1:c4d8d86:      * @param command An object (hopefully of the BaseCommand class or subclass)
1:c4d8d86:      * to be transformed into String.
1:c4d8d86:      * @return A String which will be written by the CustomLogWriter.
1:c4d8d86:      * If the object is not a BaseCommand, the String 
1:c4d8d86:      * "Unrecognized_object " + command.toString()
1:c4d8d86:      * will be returned.
1:c4d8d86:      */
1:c4d8d86:     private static String commandToString(Object command) {
1:c4d8d86:         StringBuilder sb = new StringBuilder();
1:c4d8d86:         
1:c4d8d86:         if (command instanceof BaseCommand) {
1:c4d8d86: 
1:c4d8d86:             BaseCommand bc = (BaseCommand)command;
1:c4d8d86:             sb.append(command.getClass().getSimpleName());
1:c4d8d86:             sb.append(' ');
1:c4d8d86:             sb.append(bc.isResponseRequired() ? 'T' : 'F');
1:c4d8d86:             
1:c4d8d86:             
1:c4d8d86:             Message m = null;
1:c4d8d86:             
1:c4d8d86:             if (bc instanceof Message) {
1:c4d8d86:                 m = (Message)bc;
1:c4d8d86:             }
1:c4d8d86:             if (bc instanceof MessageDispatch){
1:c4d8d86:                 m = ((MessageDispatch)bc).getMessage();   
1:c4d8d86:             }
1:c4d8d86:                 
1:c4d8d86:             if (m != null) {
1:c4d8d86:                 sb.append(' ');
1:c4d8d86:                 sb.append(m.getMessageId());
1:c4d8d86:                 sb.append(',');
1:c4d8d86:                 sb.append(m.getCommandId());
1:c4d8d86:                 ProducerId pid = m.getProducerId();
1:c4d8d86:                 long sid = pid.getSessionId();
1:c4d8d86:                 sb.append(',');
1:c4d8d86:                 sb.append(pid.getConnectionId());
1:c4d8d86:                 sb.append(',');
1:c4d8d86:                 sb.append(sid);
1:c4d8d86:                 sb.append(',');
1:c4d8d86:                 sb.append(pid.getValue());
1:c4d8d86:                 sb.append(',');
1:c4d8d86:                 sb.append(m.getCorrelationId());
1:c4d8d86:                 sb.append(',');
1:c4d8d86:                 sb.append(m.getType());
1:c4d8d86:             }
1:c4d8d86:             
1:c4d8d86:             if (bc instanceof MessageDispatch){
1:c4d8d86:                 sb.append(" toConsumer:");
1:c4d8d86:                 sb.append(((MessageDispatch)bc).getConsumerId());
1:c4d8d86:             }
1:c4d8d86:             
1:c4d8d86:             if (bc instanceof ProducerAck) {
1:c4d8d86:                 sb.append(" ProducerId:");
1:c4d8d86:                 sb.append(((ProducerAck)bc).getProducerId());
1:c4d8d86:             }
1:c4d8d86:             
1:c4d8d86:             if (bc instanceof MessageAck) {
1:c4d8d86:                 MessageAck ma = (MessageAck)bc;
1:c4d8d86:                 sb.append(" ConsumerID:");
1:c4d8d86:                 sb.append(ma.getConsumerId());
1:c4d8d86:                 sb.append(" ack:");
1:c4d8d86:                 sb.append(ma.getFirstMessageId());
1:c4d8d86:                 sb.append('-');
1:c4d8d86:                 sb.append(ma.getLastMessageId());
1:c4d8d86:             }
1:c4d8d86:             
1:c4d8d86:             if (bc instanceof ConnectionInfo) {
1:c4d8d86:                 ConnectionInfo ci = (ConnectionInfo)bc;
1:c4d8d86:                 
1:c4d8d86:                 sb.append(' ');
1:c4d8d86:                 sb.append(ci.getConnectionId());
1:c4d8d86:             }
1:c4d8d86:             
1:c4d8d86:         } else if (command instanceof WireFormatInfo){
1:c4d8d86:             sb.append("WireFormatInfo");
1:c4d8d86:             
1:c4d8d86:         } else {
1:c4d8d86:             sb.append("Unrecognized_object ");
1:c4d8d86:             sb.append(command.toString());
1:c4d8d86:         }
1:c4d8d86:         
1:c4d8d86:         return sb.toString();
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5385fd1
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void setPrefix(String prefix) {
1:         // for the custom case, revert to the logger per connection
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.logwriters;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.command.BaseCommand;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.command.ProducerAck;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.WireFormatInfo;
1: import org.apache.activemq.transport.LogWriter;
0: import org.apache.commons.logging.Log;
1: 
1: /**
1:  * Custom implementation of LogWriter interface.
1:  * 
1:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
0:  * @version $Revision$
1:  */
1: public class CustomLogWriter implements LogWriter {
1:     
1:     // doc comment inherited from LogWriter
0:     public void initialMessage(Log log) {
1:         
1:     }
1: 
1:     // doc comment inherited from LogWriter
0:     public void logRequest (Log log, Object command) {
1:         log.debug("$$ SENDREQ: " + CustomLogWriter.commandToString(command));
1:     }
1:     
1:     // doc comment inherited from LogWriter
0:     public void logResponse (Log log, Object response) {
1:         log.debug("$$ GOT_RESPONSE: "+response);
1:     }
1:     
1:     // doc comment inherited from LogWriter
0:     public void logAsyncRequest (Log log, Object command) {
1:         log.debug("$$ SENDING_ASNYC_REQUEST: "+command);
1:     }
1:     
1:     // doc comment inherited from LogWriter
0:     public void logOneWay (Log log, Object command) {
1:         log.debug("$$ SENDING: " + CustomLogWriter.commandToString(command));
1:     }
1:     
1:     // doc comment inherited from LogWriter
0:     public void logReceivedCommand (Log log, Object command) {
1:         log.debug("$$ RECEIVED: " + CustomLogWriter.commandToString(command));
1:     }
1:     
1:     // doc comment inherited from LogWriter
0:     public void logReceivedException (Log log, IOException error) {
1:         log.debug("$$ RECEIVED_EXCEPTION: "+error, error);
1:     }
1:     
1:     /**
1:      * Transforms a command into a String
1:      * @param command An object (hopefully of the BaseCommand class or subclass)
1:      * to be transformed into String.
1:      * @return A String which will be written by the CustomLogWriter.
1:      * If the object is not a BaseCommand, the String 
1:      * "Unrecognized_object " + command.toString()
1:      * will be returned.
1:      */
1:     private static String commandToString(Object command) {
1:         StringBuilder sb = new StringBuilder();
1:         
1:         if (command instanceof BaseCommand) {
1: 
1:             BaseCommand bc = (BaseCommand)command;
1:             sb.append(command.getClass().getSimpleName());
1:             sb.append(' ');
1:             sb.append(bc.isResponseRequired() ? 'T' : 'F');
1:             
1:             
1:             Message m = null;
1:             
1:             if (bc instanceof Message) {
1:                 m = (Message)bc;
1:             }
1:             if (bc instanceof MessageDispatch){
1:                 m = ((MessageDispatch)bc).getMessage();   
1:             }
1:                 
1:             if (m != null) {
1:                 sb.append(' ');
1:                 sb.append(m.getMessageId());
1:                 sb.append(',');
1:                 sb.append(m.getCommandId());
1:                 ProducerId pid = m.getProducerId();
1:                 long sid = pid.getSessionId();
1:                 sb.append(',');
1:                 sb.append(pid.getConnectionId());
1:                 sb.append(',');
1:                 sb.append(sid);
1:                 sb.append(',');
1:                 sb.append(pid.getValue());
1:                 sb.append(',');
1:                 sb.append(m.getCorrelationId());
1:                 sb.append(',');
1:                 sb.append(m.getType());
1:             }
1:             
1:             if (bc instanceof MessageDispatch){
1:                 sb.append(" toConsumer:");
1:                 sb.append(((MessageDispatch)bc).getConsumerId());
1:             }
1:             
1:             if (bc instanceof ProducerAck) {
1:                 sb.append(" ProducerId:");
1:                 sb.append(((ProducerAck)bc).getProducerId());
1:             }
1:             
1:             if (bc instanceof MessageAck) {
1:                 MessageAck ma = (MessageAck)bc;
1:                 sb.append(" ConsumerID:");
1:                 sb.append(ma.getConsumerId());
1:                 sb.append(" ack:");
1:                 sb.append(ma.getFirstMessageId());
1:                 sb.append('-');
1:                 sb.append(ma.getLastMessageId());
1:             }
1:             
1:             if (bc instanceof ConnectionInfo) {
1:                 ConnectionInfo ci = (ConnectionInfo)bc;
1:                 
1:                 sb.append(' ');
1:                 sb.append(ci.getConnectionId());
1:             }
1:             
1:         } else if (command instanceof WireFormatInfo){
1:             sb.append("WireFormatInfo");
1:             
1:         } else {
1:             sb.append("Unrecognized_object ");
1:             sb.append(command.toString());
1:         }
1:         
1:         return sb.toString();
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
/////////////////////////////////////////////////////////////////////////
1:     public void initialMessage(Logger log) {
1:     public void logRequest (Logger log, Object command) {
1:     public void logResponse (Logger log, Object response) {
1:     public void logAsyncRequest (Logger log, Object command) {
1:     public void logOneWay (Logger log, Object command) {
1:     public void logReceivedCommand (Logger log, Object command) {
1:     public void logReceivedException (Logger log, IOException error) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:19a83ae
/////////////////////////////////////////////////////////////////////////
commit:df6b542
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.transport.logwriters;
0: 
0: import java.io.IOException;
0: 
0: import org.apache.activemq.command.BaseCommand;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageAck;
0: import org.apache.activemq.command.MessageDispatch;
0: import org.apache.activemq.command.ProducerAck;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.command.WireFormatInfo;
0: import org.apache.activemq.transport.LogWriter;
0: import org.apache.commons.logging.Log;
0: 
0: /**
0:  * Custom implementation of LogWriter interface.
0:  */
0: public class CustomLogWriter implements LogWriter {
0:     
0:     // doc comment inherited from LogWriter
0:     public void initialMessage(Log log) {
0:         
0:     }
0: 
0:     // doc comment inherited from LogWriter
0:     public void logRequest (Log log, Object command) {
0:         log.debug("$$ SENDREQ: " + CustomLogWriter.commandToString(command));
0:     }
0:     
0:     // doc comment inherited from LogWriter
0:     public void logResponse (Log log, Object response) {
0:         log.debug("$$ GOT_RESPONSE: "+response);
0:     }
0:     
0:     // doc comment inherited from LogWriter
0:     public void logAsyncRequest (Log log, Object command) {
0:         log.debug("$$ SENDING_ASNYC_REQUEST: "+command);
0:     }
0:     
0:     // doc comment inherited from LogWriter
0:     public void logOneWay (Log log, Object command) {
0:         log.debug("$$ SENDING: " + CustomLogWriter.commandToString(command));
0:     }
0:     
0:     // doc comment inherited from LogWriter
0:     public void logReceivedCommand (Log log, Object command) {
0:         log.debug("$$ RECEIVED: " + CustomLogWriter.commandToString(command));
0:     }
0:     
0:     // doc comment inherited from LogWriter
0:     public void logReceivedException (Log log, IOException error) {
0:         log.debug("$$ RECEIVED_EXCEPTION: "+error, error);
0:     }
0:     
0:     /**
0:      * Transforms a command into a String
0:      * @param command An object (hopefully of the BaseCommand class or subclass)
0:      * to be transformed into String.
0:      * @return A String which will be written by the CustomLogWriter.
0:      * If the object is not a BaseCommand, the String 
0:      * "Unrecognized_object " + command.toString()
0:      * will be returned.
0:      */
0:     private static String commandToString(Object command) {
0:         StringBuilder sb = new StringBuilder();
0:         
0:         if (command instanceof BaseCommand) {
0: 
0:             BaseCommand bc = (BaseCommand)command;
0:             sb.append(command.getClass().getSimpleName());
0:             sb.append(' ');
0:             sb.append(bc.isResponseRequired() ? 'T' : 'F');
0:             
0:             
0:             Message m = null;
0:             
0:             if (bc instanceof Message) {
0:                 m = (Message)bc;
0:             }
0:             if (bc instanceof MessageDispatch){
0:                 m = ((MessageDispatch)bc).getMessage();   
0:             }
0:                 
0:             if (m != null) {
0:                 sb.append(' ');
0:                 sb.append(m.getMessageId());
0:                 sb.append(',');
0:                 sb.append(m.getCommandId());
0:                 ProducerId pid = m.getProducerId();
0:                 long sid = pid.getSessionId();
0:                 sb.append(',');
0:                 sb.append(pid.getConnectionId());
0:                 sb.append(',');
0:                 sb.append(sid);
0:                 sb.append(',');
0:                 sb.append(pid.getValue());
0:                 sb.append(',');
0:                 sb.append(m.getCorrelationId());
0:                 sb.append(',');
0:                 sb.append(m.getType());
0:             }
0:             
0:             if (bc instanceof MessageDispatch){
0:                 sb.append(" toConsumer:");
0:                 sb.append(((MessageDispatch)bc).getConsumerId());
0:             }
0:             
0:             if (bc instanceof ProducerAck) {
0:                 sb.append(" ProducerId:");
0:                 sb.append(((ProducerAck)bc).getProducerId());
0:             }
0:             
0:             if (bc instanceof MessageAck) {
0:                 MessageAck ma = (MessageAck)bc;
0:                 sb.append(" ConsumerID:");
0:                 sb.append(ma.getConsumerId());
0:                 sb.append(" ack:");
0:                 sb.append(ma.getFirstMessageId());
0:                 sb.append('-');
0:                 sb.append(ma.getLastMessageId());
0:             }
0:             
0:             if (bc instanceof ConnectionInfo) {
0:                 ConnectionInfo ci = (ConnectionInfo)bc;
0:                 
0:                 sb.append(' ');
0:                 sb.append(ci.getConnectionId());
0:             }
0:             
0:         } else if (command instanceof WireFormatInfo){
0:             sb.append("WireFormatInfo");
0:             
0:         } else {
0:             sb.append("Unrecognized_object ");
0:             sb.append(command.toString());
0:         }
0:         
0:         return sb.toString();
0:     }
0: 
0: }
============================================================================