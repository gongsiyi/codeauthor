1:da67a38: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:48764be:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:da67a38:  * Unless required by applicable law or agreed to in writing, software
1:da67a38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:da67a38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da67a38:  * See the License for the specific language governing permissions and
1:da67a38:  * limitations under the License.
1:da67a38:  */
1:da67a38: package org.apache.activemq.broker.region;
1:f812e34: 
1:f812e34: import java.io.IOException;
1:947659c: import java.util.List;
1:f812e34: import java.util.Set;
1:0054941: 
1:da67a38: import org.apache.activemq.broker.Broker;
1:da67a38: import org.apache.activemq.broker.ConnectionContext;
1:4569d7d: import org.apache.activemq.broker.ProducerBrokerExchange;
1:da67a38: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:383d12e: import org.apache.activemq.broker.region.policy.SlowConsumerStrategy;
1:da67a38: import org.apache.activemq.command.ActiveMQDestination;
1:da67a38: import org.apache.activemq.command.Message;
1:da67a38: import org.apache.activemq.command.MessageAck;
1:f9d5449: import org.apache.activemq.command.MessageDispatchNotification;
1:634da7a: import org.apache.activemq.command.ProducerInfo;
1:2728ccb: import org.apache.activemq.store.MessageStore;
1:6d8e2c5: import org.apache.activemq.usage.MemoryUsage;
1:cdc2fd3: import org.apache.activemq.usage.Usage;
1:ba37cbb: import org.apache.activemq.util.SubscriptionKey;
1:48764be: 
1:da67a38: /**
1:b5a1916:  *
1:b5a1916:  *
1:da67a38:  */
1:da67a38: public class DestinationFilter implements Destination {
1:48764be: 
1:0054941:     protected final Destination next;
1:48764be: 
1:da67a38:     public DestinationFilter(Destination next) {
1:da67a38:         this.next = next;
1:48764be:     }
1:ba37cbb: 
1:f92d45b:     @Override
1:48764be:     public void acknowledge(ConnectionContext context, Subscription sub, MessageAck ack, MessageReference node) throws IOException {
1:da67a38:         next.acknowledge(context, sub, ack, node);
1:8a524d5:     }
1:2728ccb: 
1:0054941:     @Override
1:da67a38:     public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:da67a38:         next.addSubscription(context, sub);
1:e1f170d:     }
1:fe63c29: 
1:0054941:     @Override
1:da67a38:     public Message[] browse() {
1:da67a38:         return next.browse();
1:48764be:     }
1:47cfa55: 
1:0054941:     @Override
1:da67a38:     public void dispose(ConnectionContext context) throws IOException {
1:da67a38:         next.dispose(context);
1:48764be:     }
1:cdc2fd3: 
1:0054941:     @Override
1:b5a1916:     public boolean isDisposed() {
1:b5a1916:         return next.isDisposed();
1:b5a1916:     }
1:b5a1916: 
1:0054941:     @Override
1:da67a38:     public void gc() {
1:da67a38:         next.gc();
1:48764be:     }
1:cdc2fd3: 
1:0054941:     @Override
1:17995e6:     public void markForGC(long timeStamp) {
1:17995e6:         next.markForGC(timeStamp);
1:17995e6:     }
1:17995e6: 
1:0054941:     @Override
1:17995e6:     public boolean canGC() {
1:17995e6:         return next.canGC();
1:17995e6:     }
1:17995e6: 
1:0054941:     @Override
1:b9fd189:     public long getInactiveTimeoutBeforeGC() {
1:b9fd189:         return next.getInactiveTimeoutBeforeGC();
1:17995e6:     }
1:17995e6: 
1:0054941:     @Override
1:da67a38:     public ActiveMQDestination getActiveMQDestination() {
1:da67a38:         return next.getActiveMQDestination();
1:48764be:     }
1:cdc2fd3: 
1:0054941:     @Override
1:da67a38:     public DeadLetterStrategy getDeadLetterStrategy() {
1:da67a38:         return next.getDeadLetterStrategy();
1:48764be:     }
1:cdc2fd3: 
1:0054941:     @Override
1:da67a38:     public DestinationStatistics getDestinationStatistics() {
1:da67a38:         return next.getDestinationStatistics();
23:da67a38:     }
1:cdc2fd3: 
1:0054941:     @Override
1:da67a38:     public String getName() {
1:da67a38:         return next.getName();
1:da67a38:     }
1:634da7a: 
1:0054941:     @Override
1:83c3dca:     public MemoryUsage getMemoryUsage() {
1:83c3dca:         return next.getMemoryUsage();
1:1898869:     }
1:0da68b4: 
1:0054941:     @Override
1:0054941:     public void setMemoryUsage(MemoryUsage memoryUsage) {
1:0054941:         next.setMemoryUsage(memoryUsage);
1:0054941:     }
1:1898869: 
1:0054941:     @Override
1:3b08860:     public void removeSubscription(ConnectionContext context, Subscription sub, long lastDeliveredSequenceId) throws Exception {
1:3b08860:         next.removeSubscription(context, sub, lastDeliveredSequenceId);
1:da67a38:     }
1:0da68b4: 
1:0054941:     @Override
1:4569d7d:     public void send(ProducerBrokerExchange context, Message messageSend) throws Exception {
1:da67a38:         next.send(context, messageSend);
1:da67a38:     }
1:48764be: 
1:0054941:     @Override
1:da67a38:     public void start() throws Exception {
1:da67a38:         next.start();
1:da67a38:     }
1:48764be: 
1:0054941:     @Override
1:da67a38:     public void stop() throws Exception {
1:da67a38:         next.stop();
1:da67a38:     }
1:48764be: 
1:0054941:     @Override
1:947659c:     public List<Subscription> getConsumers() {
1:947659c:         return next.getConsumers();
1:947659c:     }
1:48764be: 
1:da67a38:     /**
1:da67a38:      * Sends a message to the given destination which may be a wildcard
1:b5a1916:      *
1:34acbdc:      * @param context broker context
1:34acbdc:      * @param message message to send
1:34acbdc:      * @param destination possibly wildcard destination to send the message to
1:34acbdc:      * @throws Exception on error
1:da67a38:      */
1:4569d7d:     protected void send(ProducerBrokerExchange context, Message message, ActiveMQDestination destination) throws Exception {
1:4569d7d:         Broker broker = context.getConnectionContext().getBroker();
1:34acbdc:         Set<Destination> destinations = broker.getDestinations(destination);
1:48764be: 
1:34acbdc:         for (Destination dest : destinations) {
1:349466b:             dest.send(context, message.copy());
1:da67a38:         }
1:da67a38:     }
1:48764be: 
1:0054941:     @Override
1:f812e34:     public MessageStore getMessageStore() {
1:f812e34:         return next.getMessageStore();
1:f812e34:     }
1:0da68b4: 
1:0054941:     @Override
1:0da68b4:     public boolean isProducerFlowControl() {
1:0da68b4:         return next.isProducerFlowControl();
1:2728ccb:     }
1:0da68b4: 
1:0054941:     @Override
1:48764be:     public void setProducerFlowControl(boolean value) {
1:0da68b4:         next.setProducerFlowControl(value);
1:0da68b4:     }
1:17995e6: 
1:0054941:     @Override
1:fe63c29:     public boolean isAlwaysRetroactive() {
1:17995e6:         return next.isAlwaysRetroactive();
1:fe63c29:     }
1:17995e6: 
1:0054941:     @Override
1:fe63c29:     public void setAlwaysRetroactive(boolean value) {
1:17995e6:         next.setAlwaysRetroactive(value);
1:fe63c29:     }
1:fe63c29: 
1:0054941:     @Override
1:48764be:     public void setBlockedProducerWarningInterval(long blockedProducerWarningInterval) {
1:48764be:         next.setBlockedProducerWarningInterval(blockedProducerWarningInterval);
1:0da68b4:     }
1:b5a1916: 
1:0054941:     @Override
1:48764be:     public long getBlockedProducerWarningInterval() {
1:48764be:         return next.getBlockedProducerWarningInterval();
1:48764be:     }
1:634da7a: 
1:0054941:     @Override
1:48764be:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:634da7a:         next.addProducer(context, info);
1:634da7a:     }
1:634da7a: 
1:0054941:     @Override
1:48764be:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:634da7a:         next.removeProducer(context, info);
1:634da7a:     }
1:83c3dca: 
1:0054941:     @Override
1:83c3dca:     public int getMaxAuditDepth() {
1:83c3dca:         return next.getMaxAuditDepth();
1:83c3dca:     }
1:83c3dca: 
1:0054941:     @Override
1:83c3dca:     public int getMaxProducersToAudit() {
1:83c3dca:         return next.getMaxProducersToAudit();
1:83c3dca:     }
1:83c3dca: 
1:0054941:     @Override
1:83c3dca:     public boolean isEnableAudit() {
1:83c3dca:         return next.isEnableAudit();
1:83c3dca:     }
1:83c3dca: 
1:0054941:     @Override
1:83c3dca:     public void setEnableAudit(boolean enableAudit) {
1:83c3dca:         next.setEnableAudit(enableAudit);
1:83c3dca:     }
1:83c3dca: 
1:0054941:     @Override
1:83c3dca:     public void setMaxAuditDepth(int maxAuditDepth) {
1:83c3dca:         next.setMaxAuditDepth(maxAuditDepth);
1:83c3dca:     }
1:83c3dca: 
1:0054941:     @Override
1:83c3dca:     public void setMaxProducersToAudit(int maxProducersToAudit) {
1:83c3dca:         next.setMaxProducersToAudit(maxProducersToAudit);
1:83c3dca:     }
1:83c3dca: 
1:0054941:     @Override
1:83c3dca:     public boolean isActive() {
1:83c3dca:         return next.isActive();
1:83c3dca:     }
1:d0f3d4d: 
1:0054941:     @Override
1:d0f3d4d:     public int getMaxPageSize() {
1:d0f3d4d:         return next.getMaxPageSize();
1:d0f3d4d:     }
1:d0f3d4d: 
1:0054941:     @Override
1:d0f3d4d:     public void setMaxPageSize(int maxPageSize) {
1:d0f3d4d:         next.setMaxPageSize(maxPageSize);
1:d0f3d4d:     }
1:6d0c552: 
1:0054941:     @Override
1:6d0c552:     public boolean isUseCache() {
1:6d0c552:         return next.isUseCache();
1:6d0c552:     }
1:6d0c552: 
1:0054941:     @Override
1:6d0c552:     public void setUseCache(boolean useCache) {
1:6d0c552:         next.setUseCache(useCache);
1:6d0c552:     }
1:6d0c552: 
1:0054941:     @Override
1:6d0c552:     public int getMinimumMessageSize() {
1:6d0c552:         return next.getMinimumMessageSize();
1:6d0c552:     }
1:6d0c552: 
1:0054941:     @Override
1:6d0c552:     public void setMinimumMessageSize(int minimumMessageSize) {
1:6d0c552:         next.setMinimumMessageSize(minimumMessageSize);
1:044c07d:     }
1:044c07d: 
1:0054941:     @Override
1:044c07d:     public void wakeup() {
1:044c07d:         next.wakeup();
1:044c07d:     }
1:044c07d: 
1:0054941:     @Override
1:044c07d:     public boolean isLazyDispatch() {
1:044c07d:         return next.isLazyDispatch();
1:044c07d:     }
1:044c07d: 
1:0054941:     @Override
1:044c07d:     public void setLazyDispatch(boolean value) {
1:044c07d:         next.setLazyDispatch(value);
1:044c07d:     }
1:a9ba595: 
1:a9ba595:     public void messageExpired(ConnectionContext context, PrefetchSubscription prefetchSubscription, MessageReference node) {
1:a9ba595:         next.messageExpired(context, prefetchSubscription, node);
1:a9ba595:     }
1:2a328ed: 
1:0054941:     @Override
1:2a328ed:     public boolean iterate() {
1:2a328ed:         return next.iterate();
1:2a328ed:     }
1:cdc2fd3: 
1:0054941:     @Override
1:48764be:     public void fastProducer(ConnectionContext context, ProducerInfo producerInfo) {
1:cdc2fd3:         next.fastProducer(context, producerInfo);
1:cdc2fd3:     }
1:cdc2fd3: 
1:0054941:     @Override
1:17995e6:     public void isFull(ConnectionContext context, Usage<?> usage) {
1:cdc2fd3:         next.isFull(context, usage);
1:cdc2fd3:     }
1:cdc2fd3: 
1:0054941:     @Override
1:48764be:     public void messageConsumed(ConnectionContext context, MessageReference messageReference) {
1:cdc2fd3:         next.messageConsumed(context, messageReference);
1:cdc2fd3:     }
1:cdc2fd3: 
1:0054941:     @Override
1:48764be:     public void messageDelivered(ConnectionContext context, MessageReference messageReference) {
1:cdc2fd3:         next.messageDelivered(context, messageReference);
1:cdc2fd3:     }
1:cdc2fd3: 
1:0054941:     @Override
1:3e4fc0a:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
1:3e4fc0a:         next.messageDiscarded(context, sub, messageReference);
1:cdc2fd3:     }
1:cdc2fd3: 
1:0054941:     @Override
1:cdc2fd3:     public void slowConsumer(ConnectionContext context, Subscription subs) {
1:cdc2fd3:         next.slowConsumer(context, subs);
1:0d85869:     }
1:0d85869: 
1:0054941:     @Override
1:48764be:     public void messageExpired(ConnectionContext context, Subscription subs, MessageReference node) {
1:48764be:         next.messageExpired(context, subs, node);
1:cdc2fd3:     }
1:0d85869: 
1:0054941:     @Override
1:47cfa55:     public int getMaxBrowsePageSize() {
1:47cfa55:         return next.getMaxBrowsePageSize();
1:47cfa55:     }
1:47cfa55: 
1:0054941:     @Override
1:47cfa55:     public void setMaxBrowsePageSize(int maxPageSize) {
1:47cfa55:         next.setMaxBrowsePageSize(maxPageSize);
1:47cfa55:     }
1:f9d5449: 
1:0054941:     @Override
1:48764be:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:f9d5449:         next.processDispatchNotification(messageDispatchNotification);
1:f9d5449:     }
1:785454a: 
1:0054941:     @Override
1:785454a:     public int getCursorMemoryHighWaterMark() {
1:785454a:         return next.getCursorMemoryHighWaterMark();
1:785454a:     }
1:785454a: 
1:0054941:     @Override
1:785454a:     public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark) {
1:785454a:         next.setCursorMemoryHighWaterMark(cursorMemoryHighWaterMark);
1:785454a:     }
1:00879cf: 
1:0054941:     @Override
1:00879cf:     public boolean isPrioritizedMessages() {
1:00879cf:         return next.isPrioritizedMessages();
1:00879cf:     }
1:383d12e: 
1:0054941:     @Override
1:383d12e:     public SlowConsumerStrategy getSlowConsumerStrategy() {
1:383d12e:         return next.getSlowConsumerStrategy();
1:383d12e:     }
1:17995e6: 
1:0054941:     @Override
1:f4d4c3b:     public boolean isDoOptimzeMessageStorage() {
1:f4d4c3b:         return next.isDoOptimzeMessageStorage();
1:f4d4c3b:     }
1:f4d4c3b: 
1:0054941:     @Override
1:f4d4c3b:     public void setDoOptimzeMessageStorage(boolean doOptimzeMessageStorage) {
1:f4d4c3b:         next.setDoOptimzeMessageStorage(doOptimzeMessageStorage);
1:64f3492:     }
1:64f3492: 
1:0054941:     @Override
1:ea70e82:     public void clearPendingMessages(int pendingAdditionsCount) {
1:01384c7:         next.clearPendingMessages(pendingAdditionsCount);
1:f4d4c3b:     }
1:f4d4c3b: 
1:1898869:     @Override
1:f92d45b:     public void duplicateFromStore(Message message, Subscription subscription) {
1:f92d45b:         next.duplicateFromStore(message, subscription);
1:f92d45b:     }
1:f92d45b: 
1:ba37cbb:     public void deleteSubscription(ConnectionContext context, SubscriptionKey key) throws Exception {
1:66a99fb:         if (next instanceof DestinationFilter) {
1:66a99fb:             DestinationFilter filter = (DestinationFilter) next;
1:66a99fb:             filter.deleteSubscription(context, key);
1:66a99fb:         } else if (next instanceof Topic) {
1:66a99fb:             Topic topic = (Topic)next;
1:8a524d5:             topic.deleteSubscription(context, key);
1:ba37cbb:         }
1:ba37cbb:     }
1:14fcd7c: 
1:14fcd7c:     public Destination getNext() {
1:14fcd7c:         return next;
1:14fcd7c:     }
1:f55edcf: 
1:f55edcf:     public <T> T getAdaptor(Class <? extends T> clazz) {
1:f55edcf:         if (clazz.isInstance(this)) {
1:f55edcf:             return clazz.cast(this);
1:f55edcf:         } else if (next != null && clazz.isInstance(next)) {
1:f55edcf:             return clazz.cast(next);
1:f55edcf:         } else if (next instanceof DestinationFilter) {
1:f55edcf:             return ((DestinationFilter)next).getAdaptor(clazz);
1:f55edcf:         }
1:f55edcf:         return null;
1:f55edcf:     }
1:6d0c552: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:01384c7
/////////////////////////////////////////////////////////////////////////
1:         next.clearPendingMessages(pendingAdditionsCount);
commit:ea70e82
/////////////////////////////////////////////////////////////////////////
1:     public void clearPendingMessages(int pendingAdditionsCount) {
0:         next.clearPendingMessages(0);
commit:be919fb
/////////////////////////////////////////////////////////////////////////
commit:f92d45b
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void duplicateFromStore(Message message, Subscription subscription) {
1:         next.duplicateFromStore(message, subscription);
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f55edcf
/////////////////////////////////////////////////////////////////////////
1: 
1:     public <T> T getAdaptor(Class <? extends T> clazz) {
1:         if (clazz.isInstance(this)) {
1:             return clazz.cast(this);
1:         } else if (next != null && clazz.isInstance(next)) {
1:             return clazz.cast(next);
1:         } else if (next instanceof DestinationFilter) {
1:             return ((DestinationFilter)next).getAdaptor(clazz);
1:         }
1:         return null;
1:     }
commit:b9fd189
/////////////////////////////////////////////////////////////////////////
1:     public long getInactiveTimeoutBeforeGC() {
1:         return next.getInactiveTimeoutBeforeGC();
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:14fcd7c
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Destination getNext() {
1:         return next;
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:66a99fb
/////////////////////////////////////////////////////////////////////////
1:         if (next instanceof DestinationFilter) {
1:             DestinationFilter filter = (DestinationFilter) next;
1:             filter.deleteSubscription(context, key);
1:         } else if (next instanceof Topic) {
1:             Topic topic = (Topic)next;
commit:8a524d5
/////////////////////////////////////////////////////////////////////////
0:         Destination target = next;
0:         while (target instanceof DestinationFilter) {
0:             target = ((DestinationFilter) target).next;
1:         }
0:         if (target instanceof Topic) {
0:             Topic topic = (Topic)target;
1:             topic.deleteSubscription(context, key);
commit:ba37cbb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.SubscriptionKey;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void deleteSubscription(ConnectionContext context, SubscriptionKey key) throws Exception {
0:         if (next instanceof Topic) {
0:             ((Topic) next).deleteSubscription(context, key);
1:         }
1:     }
commit:0054941
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected final Destination next;
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public void setMemoryUsage(MemoryUsage memoryUsage) {
1:         next.setMemoryUsage(memoryUsage);
1:     }
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
commit:1898869
/////////////////////////////////////////////////////////////////////////
1: 	@Override
0: 	public void setMemoryUsage(MemoryUsage memoryUsage) {
0: 		next.setMemoryUsage(memoryUsage);
1: 	}
1: 
commit:17995e6
/////////////////////////////////////////////////////////////////////////
1:     public void markForGC(long timeStamp) {
1:         next.markForGC(timeStamp);
1:     }
1: 
1:     public boolean canGC() {
1:         return next.canGC();
1:     }
1: 
0:     public long getInactiveTimoutBeforeGC() {
0:         return next.getInactiveTimoutBeforeGC();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         return next.isAlwaysRetroactive();
1: 
1:         next.setAlwaysRetroactive(value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void isFull(ConnectionContext context, Usage<?> usage) {
/////////////////////////////////////////////////////////////////////////
1: 
commit:b5a1916
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     public boolean isDisposed() {
1:         return next.isDisposed();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e1f170d
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public boolean isDLQ() {
0:         return next.isDLQ();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:349466b
/////////////////////////////////////////////////////////////////////////
1:             dest.send(context, message.copy());
commit:2a328ed
/////////////////////////////////////////////////////////////////////////
1: 
1: 	public boolean iterate() {
1: 		return next.iterate();
1: 	}
commit:a9ba595
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void messageExpired(ConnectionContext context, PrefetchSubscription prefetchSubscription, MessageReference node) {
1:         next.messageExpired(context, prefetchSubscription, node);        
1:     }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import java.util.Iterator;
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConnectionContext context, Subscription sub, MessageAck ack, MessageReference node)
0:         throws IOException {
/////////////////////////////////////////////////////////////////////////
0:     protected void send(ProducerBrokerExchange context, Message message, ActiveMQDestination destination)
0:         throws Exception {
0:             Destination dest = (Destination)iter.next();
1:     public MessageStore getMessageStore() {
1:         return next.getMessageStore();
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.MessageStore;
/////////////////////////////////////////////////////////////////////////
1: 
0: 	public MessageStore getMessageStore() {
0: 		return next.getMessageStore();
1: 	}
commit:4569d7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
1:     public void send(ProducerBrokerExchange context, Message messageSend) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     protected void send(ProducerBrokerExchange context, Message message, ActiveMQDestination destination) throws Exception {
1:         Broker broker = context.getConnectionContext().getBroker();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:64f3492
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public void clearPendingMessages() {
0:         next.clearPendingMessages();
1:     }
1: 
commit:fe63c29
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isAlwaysRetroactive() {
0:     	return next.isAlwaysRetroactive();
1:     }
1:     
1:     public void setAlwaysRetroactive(boolean value) {
0:     	next.setAlwaysRetroactive(value);
1:     }
commit:383d12e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.SlowConsumerStrategy;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public SlowConsumerStrategy getSlowConsumerStrategy() {
1:         return next.getSlowConsumerStrategy();
1:     }
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
1:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
1:         next.messageDiscarded(context, sub, messageReference);
commit:f9d5449
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void processDispatchNotification(
0:             MessageDispatchNotification messageDispatchNotification) throws Exception {
1:         next.processDispatchNotification(messageDispatchNotification);   
1:     }
commit:3b08860
/////////////////////////////////////////////////////////////////////////
1:     public void removeSubscription(ConnectionContext context, Subscription sub, long lastDeliveredSequenceId) throws Exception {
1:         next.removeSubscription(context, sub, lastDeliveredSequenceId);
author:Robert Davies
-------------------------------------------------------------------------------
commit:f4d4c3b
/////////////////////////////////////////////////////////////////////////
1:     public boolean isDoOptimzeMessageStorage() {
1:         return next.isDoOptimzeMessageStorage();
1:     }
1: 
1:     public void setDoOptimzeMessageStorage(boolean doOptimzeMessageStorage) {
1:         next.setDoOptimzeMessageStorage(doOptimzeMessageStorage);
1:     }
1: 
commit:00879cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private final Destination next;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isPrioritizedMessages() {
1:         return next.isPrioritizedMessages();
1:     }
commit:785454a
/////////////////////////////////////////////////////////////////////////
1: 
1: 	public int getCursorMemoryHighWaterMark() {
1: 		return next.getCursorMemoryHighWaterMark();
1: 	}
1: 
1: 	public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark) {
1: 		next.setCursorMemoryHighWaterMark(cursorMemoryHighWaterMark);
1: 	}
commit:47cfa55
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getMaxBrowsePageSize() {
1:        return next.getMaxBrowsePageSize();
1:     }
1: 
1:     public void setMaxBrowsePageSize(int maxPageSize) {
1:         next.setMaxBrowsePageSize(maxPageSize);
1:     }
commit:0d85869
/////////////////////////////////////////////////////////////////////////
1: 
1:    
0:     public void messageExpired(ConnectionContext context, Subscription subs,MessageReference node) {
0:        next.messageExpired(context,subs, node);    
1:     }
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.Usage;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
1:        next.fastProducer(context, producerInfo);       
1:     }
1: 
1:    
0:     public void isFull(ConnectionContext context, Usage usage) {
1:        next.isFull(context, usage);
1:     }
1: 
1:    
0:     public void messageConsumed(ConnectionContext context,MessageReference messageReference) {
1:         next.messageConsumed(context, messageReference);
1:     }
1: 
1:     
0:     public void messageDelivered(ConnectionContext context,MessageReference messageReference) {
1:         next.messageDelivered(context, messageReference);
1:     }
1: 
1:     
0:     public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {
0:         next.messageDiscarded(context, messageReference);
1:     }
1: 
1:     
1:     public void slowConsumer(ConnectionContext context, Subscription subs) {
1:        next.slowConsumer(context, subs);
1:     }
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:044c07d
/////////////////////////////////////////////////////////////////////////
1:     }   
1:     
1:     public void wakeup() {
1:         next.wakeup();
1:     }
1: 
1:     public boolean isLazyDispatch() {
1:        return next.isLazyDispatch();
1:     }
1: 
1:     public void setLazyDispatch(boolean value) {
1:       next.setLazyDispatch(value);        
1:     }
commit:d4382e4
/////////////////////////////////////////////////////////////////////////
commit:6d0c552
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isUseCache() {
1:         return next.isUseCache();
1:     }
1: 
1:     public void setUseCache(boolean useCache) {
1:         next.setUseCache(useCache);
1:     }   
1:     
1:     public int getMinimumMessageSize() {
1:         return next.getMinimumMessageSize();
1:     }
1: 
1:     public void setMinimumMessageSize(int minimumMessageSize) {
1:         next.setMinimumMessageSize(minimumMessageSize);
1:     }    
commit:d0f3d4d
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getMaxPageSize() {
1:         return next.getMaxPageSize();
1:     }
1: 
1:     public void setMaxPageSize(int maxPageSize) {
1:         next.setMaxPageSize(maxPageSize);
1:     }
commit:83c3dca
/////////////////////////////////////////////////////////////////////////
1:     public MemoryUsage getMemoryUsage() {
1:         return next.getMemoryUsage();
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getMaxAuditDepth() {
1:        return next.getMaxAuditDepth();
1:     }
1: 
1:     public int getMaxProducersToAudit() {
1:         return next.getMaxProducersToAudit();
1:     }
1: 
1:     public boolean isEnableAudit() {
1:         return next.isEnableAudit();
1:     }
1: 
1:     public void setEnableAudit(boolean enableAudit) {
1:         next.setEnableAudit(enableAudit);
1:     }
1: 
1:     public void setMaxAuditDepth(int maxAuditDepth) {
1:        next.setMaxAuditDepth(maxAuditDepth);
1:     }
1: 
1:     public void setMaxProducersToAudit(int maxProducersToAudit) {
1:        next.setMaxProducersToAudit(maxProducersToAudit);
1:     }
1:     
1:     public boolean isActive() {
1:         return next.isActive();
1:     }
commit:634da7a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ProducerInfo;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void addProducer(ConnectionContext context, ProducerInfo info)
0:             throws Exception {
1:         next.addProducer(context, info);
1:         
1:     }
1: 
0:     public void removeProducer(ConnectionContext context, ProducerInfo info)
0:             throws Exception {
1:        next.removeProducer(context, info);
1:     }
commit:0da68b4
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isProducerFlowControl() {
1:         return next.isProducerFlowControl();
1:     }
1:     
0:     public void setProducerFlowControl(boolean value){
1:         next.setProducerFlowControl(value);
1:     }
1:     
1:     
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.MemoryUsage;
0: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
0:     public MemoryUsage getBrokerMemoryUsage() {
0:         return next.getBrokerMemoryUsage();
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Colin W Macnaughton
-------------------------------------------------------------------------------
commit:48764be
/////////////////////////////////////////////////////////////////////////
1:     public void acknowledge(ConnectionContext context, Subscription sub, MessageAck ack, MessageReference node) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:      * 
0:     protected void send(ProducerBrokerExchange context, Message message, ActiveMQDestination destination) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setProducerFlowControl(boolean value) {
1:     public void setBlockedProducerWarningInterval(long blockedProducerWarningInterval) {
1:         next.setBlockedProducerWarningInterval(blockedProducerWarningInterval);
1:     }
1:     
1:     public long getBlockedProducerWarningInterval() {
1:         return next.getBlockedProducerWarningInterval();
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:         next.addProducer(context, info);
1: 
1:     }
1: 
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:         next.removeProducer(context, info);
0:         return next.getMaxAuditDepth();
/////////////////////////////////////////////////////////////////////////
1: 
0:         next.setMaxAuditDepth(maxAuditDepth);
0:         next.setMaxProducersToAudit(maxProducersToAudit);
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     }
1: 
0:         return next.isLazyDispatch();
0:         next.setLazyDispatch(value);
0:         next.messageExpired(context, prefetchSubscription, node);
0:     public boolean iterate() {
0:         return next.iterate();
1:     public void fastProducer(ConnectionContext context, ProducerInfo producerInfo) {
0:         next.fastProducer(context, producerInfo);
1:     }
1: 
0:         next.isFull(context, usage);
1:     public void messageConsumed(ConnectionContext context, MessageReference messageReference) {
1:     public void messageDelivered(ConnectionContext context, MessageReference messageReference) {
0:     public void messageDiscarded(ConnectionContext context, MessageReference messageReference) {
0:         next.slowConsumer(context, subs);
1:     public void messageExpired(ConnectionContext context, Subscription subs, MessageReference node) {
1:         next.messageExpired(context, subs, node);
0:         return next.getMaxBrowsePageSize();
1:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
0:         next.processDispatchNotification(messageDispatchNotification);
0:     public int getCursorMemoryHighWaterMark() {
0:         return next.getCursorMemoryHighWaterMark();
1:     }
0:     public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark) {
0:         next.setCursorMemoryHighWaterMark(cursorMemoryHighWaterMark);
1:     }
author:David Jencks
-------------------------------------------------------------------------------
commit:34acbdc
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:      * @param context broker context
1:      * @param message message to send
1:      * @param destination possibly wildcard destination to send the message to
1:      * @throws Exception on error
1:         Set<Destination> destinations = broker.getDestinations(destination);
1:         for (Destination dest : destinations) {
author:James Strachan
-------------------------------------------------------------------------------
commit:947659c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public List<Subscription> getConsumers() {
1:         return next.getConsumers();
1:     }
0: 
commit:da67a38
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
0: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.memory.UsageManager;
0: import org.apache.activemq.store.MessageStore;
0: 
0: import java.io.IOException;
0: import java.util.Iterator;
0: import java.util.Set;
0: 
1: /**
0:  * 
0:  * @version $Revision$
1:  */
1: public class DestinationFilter implements Destination {
0: 
0:     private Destination next;
0: 
1:     public DestinationFilter(Destination next) {
1:         this.next = next;
1:     }
0: 
0:     public void acknowledge(ConnectionContext context, Subscription sub, MessageAck ack, MessageReference node) throws IOException {
1:         next.acknowledge(context, sub, ack, node);
1:     }
0: 
1:     public void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:         next.addSubscription(context, sub);
1:     }
0: 
1:     public Message[] browse() {
1:         return next.browse();
1:     }
0: 
1:     public void dispose(ConnectionContext context) throws IOException {
1:         next.dispose(context);
1:     }
0: 
1:     public void gc() {
1:         next.gc();
1:     }
0: 
1:     public ActiveMQDestination getActiveMQDestination() {
1:         return next.getActiveMQDestination();
1:     }
0: 
0:     public long getConsumerCount() {
0:         return next.getConsumerCount();
1:     }
0: 
1:     public DeadLetterStrategy getDeadLetterStrategy() {
1:         return next.getDeadLetterStrategy();
1:     }
0: 
0:     public long getDequeueCount() {
0:         return next.getDequeueCount();
1:     }
0: 
1:     public DestinationStatistics getDestinationStatistics() {
1:         return next.getDestinationStatistics();
1:     }
0: 
0:     public long getEnqueueCount() {
0:         return next.getEnqueueCount();
1:     }
0: 
0:     public long getMemoryLimit() {
0:         return next.getMemoryLimit();
1:     }
0: 
0:     public int getMemoryPercentageUsed() {
0:         return next.getMemoryPercentageUsed();
1:     }
0: 
0:     public long getMessagesCached() {
0:         return next.getMessagesCached();
1:     }
0: 
0:     public MessageStore getMessageStore() {
0:         return next.getMessageStore();
1:     }
0: 
1:     public String getName() {
1:         return next.getName();
1:     }
0: 
0:     public long getQueueSize() {
0:         return next.getQueueSize();
1:     }
0: 
0:     public UsageManager getUsageManager() {
0:         return next.getUsageManager();
1:     }
0: 
0:     public Message loadMessage(MessageId messageId) throws IOException {
0:         return next.loadMessage(messageId);
1:     }
0: 
0:     public boolean lock(MessageReference node, LockOwner lockOwner) {
0:         return next.lock(node, lockOwner);
1:     }
0: 
0:     public void removeSubscription(ConnectionContext context, Subscription sub) throws Exception {
0:         next.removeSubscription(context, sub);
1:     }
0: 
0:     public void resetStatistics() {
0:         next.resetStatistics();
1:     }
0: 
0:     public void send(ConnectionContext context, Message messageSend) throws Exception {
1:         next.send(context, messageSend);
1:     }
0: 
0:     public void setMemoryLimit(long limit) {
0:         next.setMemoryLimit(limit);
1:     }
0: 
1:     public void start() throws Exception {
1:         next.start();
1:     }
0: 
1:     public void stop() throws Exception {
1:         next.stop();
1:     }
0: 
1:     /**
1:      * Sends a message to the given destination which may be a wildcard
1:      */
0:     protected void send(ConnectionContext context, Message message, ActiveMQDestination destination) throws Exception {
0:         Broker broker = context.getBroker();
0:         Set destinations = broker.getDestinations(destination);
0: 
0:         for (Iterator iter = destinations.iterator(); iter.hasNext();) {
0:             Destination dest = (Destination) iter.next();
0:             dest.send(context, message);
1:         }
1:     }
1: }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:36de58b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================