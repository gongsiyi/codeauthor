1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:230a86c:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
11:d29ca2a: 
1:74a7a8b: import java.io.DataInputStream;
1:74a7a8b: import java.io.DataOutputStream;
1:74a7a8b: import java.io.EOFException;
1:74a7a8b: import java.io.IOException;
1:74a7a8b: import java.io.InputStream;
1:74a7a8b: import java.io.OutputStream;
1:44bb9fb: import java.util.Arrays;
1:d29ca2a: import java.util.zip.Deflater;
1:44bb9fb: import java.util.zip.Inflater;
1:d29ca2a: 
1:74a7a8b: import javax.jms.BytesMessage;
1:74a7a8b: import javax.jms.JMSException;
1:c899492: import javax.jms.MessageEOFException;
1:74a7a8b: import javax.jms.MessageFormatException;
1:74a7a8b: import javax.jms.MessageNotReadableException;
1:c899492: import javax.jms.MessageNotWriteableException;
1:74a7a8b: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnection;
1:74a7a8b: import org.apache.activemq.util.ByteArrayInputStream;
1:74a7a8b: import org.apache.activemq.util.ByteArrayOutputStream;
1:74a7a8b: import org.apache.activemq.util.ByteSequence;
1:74a7a8b: import org.apache.activemq.util.ByteSequenceData;
1:74a7a8b: import org.apache.activemq.util.JMSExceptionSupport;
1:74a7a8b: 
1:d29ca2a: /**
1:230a86c:  * A <CODE>BytesMessage</CODE> object is used to send a message containing a
1:230a86c:  * stream of uninterpreted bytes. It inherits from the <CODE>Message</CODE>
1:230a86c:  * interface and adds a bytes message body. The receiver of the message supplies
1:230a86c:  * the interpretation of the bytes.
1:230a86c:  * <P>
1:230a86c:  * The <CODE>BytesMessage</CODE> methods are based largely on those found in
1:230a86c:  * <CODE>java.io.DataInputStream</CODE> and
1:230a86c:  * <CODE>java.io.DataOutputStream</CODE>.
1:230a86c:  * <P>
1:230a86c:  * This message type is for client encoding of existing message formats. If
1:230a86c:  * possible, one of the other self-defining message types should be used
1:230a86c:  * instead.
1:230a86c:  * <P>
1:230a86c:  * Although the JMS API allows the use of message properties with byte messages,
1:230a86c:  * they are typically not used, since the inclusion of properties may affect the
1:230a86c:  * format.
1:230a86c:  * <P>
1:230a86c:  * The primitive types can be written explicitly using methods for each type.
1:230a86c:  * They may also be written generically as objects. For instance, a call to
1:230a86c:  * <CODE>BytesMessage.writeInt(6)</CODE> is equivalent to
1:230a86c:  * <CODE> BytesMessage.writeObject(new Integer(6))</CODE>. Both forms are
1:230a86c:  * provided, because the explicit form is convenient for static programming, and
1:230a86c:  * the object form is needed when types are not known at compile time.
1:230a86c:  * <P>
1:230a86c:  * When the message is first created, and when <CODE>clearBody</CODE> is
1:230a86c:  * called, the body of the message is in write-only mode. After the first call
1:230a86c:  * to <CODE>reset</CODE> has been made, the message body is in read-only mode.
1:230a86c:  * After a message has been sent, the client that sent it can retain and modify
1:230a86c:  * it without affecting the message that has been sent. The same message object
1:230a86c:  * can be sent multiple times. When a message has been received, the provider
1:230a86c:  * has called <CODE>reset</CODE> so that the message body is in read-only mode
1:230a86c:  * for the client.
1:230a86c:  * <P>
1:230a86c:  * If <CODE>clearBody</CODE> is called on a message in read-only mode, the
1:230a86c:  * message body is cleared and the message is in write-only mode.
1:230a86c:  * <P>
1:230a86c:  * If a client attempts to read a message in write-only mode, a
1:230a86c:  * <CODE>MessageNotReadableException</CODE> is thrown.
1:230a86c:  * <P>
1:230a86c:  * If a client attempts to write a message in read-only mode, a
1:d29ca2a:  * <CODE>MessageNotWriteableException</CODE> is thrown.
1:c0c55ae:  *
1:4afa5d6:  * @openwire:marshaller code=24
1:d29ca2a:  * @see javax.jms.Session#createBytesMessage()
1:d29ca2a:  * @see javax.jms.MapMessage
1:d29ca2a:  * @see javax.jms.Message
1:d29ca2a:  * @see javax.jms.ObjectMessage
1:d29ca2a:  * @see javax.jms.StreamMessage
1:d29ca2a:  * @see javax.jms.TextMessage
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQBytesMessage extends ActiveMQMessage implements BytesMessage {
1:d29ca2a: 
1:d29ca2a:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_BYTES_MESSAGE;
1:d29ca2a: 
1:fc00993:     protected transient DataOutputStream dataOut;
1:fc00993:     protected transient ByteArrayOutputStream bytesOut;
1:fc00993:     protected transient DataInputStream dataIn;
1:fc00993:     protected transient int length;
1:d29ca2a: 
1:c899492:     @Override
1:d29ca2a:     public Message copy() {
1:d29ca2a:         ActiveMQBytesMessage copy = new ActiveMQBytesMessage();
1:d29ca2a:         copy(copy);
1:d29ca2a:         return copy;
13:d29ca2a:     }
1:cb5c29d: 
1:d29ca2a:     private void copy(ActiveMQBytesMessage copy) {
1:d29ca2a:         storeContent();
1:d29ca2a:         super.copy(copy);
1:d29ca2a:         copy.dataOut = null;
1:d29ca2a:         copy.bytesOut = null;
1:d29ca2a:         copy.dataIn = null;
1:d29ca2a:     }
1:c899492: 
1:c899492:     @Override
1:8cf4795:     public void onSend() throws JMSException {
1:d29ca2a:         super.onSend();
1:d29ca2a:         storeContent();
1:d29ca2a:     }
1:230a86c: 
1:c899492:     @Override
1:41c9366:     public void storeContent() {
1:44bb9fb:         if (dataOut != null) {
1:cb5c29d:             try {
1:41c9366:                 dataOut.close();
1:d29ca2a:                 ByteSequence bs = bytesOut.toByteSequence();
1:d29ca2a:                 setContent(bs);
1:6c4f15e: 
1:6c4f15e:                 ActiveMQConnection connection = getConnection();
1:6c4f15e:                 if (connection != null && connection.isUseCompression()) {
1:44bb9fb:                     doCompress();
1:44bb9fb:                 }
1:44bb9fb:             } catch (IOException ioe) {
1:44bb9fb:                 throw new RuntimeException(ioe.getMessage(), ioe);
1:44bb9fb:             } finally {
1:44bb9fb:                 try {
1:44bb9fb:                     if (bytesOut != null) {
1:44bb9fb:                         bytesOut.close();
1:44bb9fb:                         bytesOut = null;
1:44bb9fb:                     }
1:44bb9fb:                     if (dataOut != null) {
1:44bb9fb:                         dataOut.close();
1:44bb9fb:                         dataOut = null;
1:44bb9fb:                     }
1:44bb9fb:                 } catch (IOException ioe) {
1:44bb9fb:                 }
1:44bb9fb:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:c899492:     @Override
1:f82993d:     public boolean isContentMarshalled() {
1:f82993d:         return content != null || dataOut == null;
1:f82993d:     }
1:f82993d: 
1:f82993d:     @Override
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:230a86c: 
1:c899492:     @Override
1:05a8cba:     public String getJMSXMimeType() {
1:05a8cba:         return "jms/bytes-message";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Clears out the message body. Clearing a message's body does not clear its
1:230a86c:      * header values or property entries.
1:230a86c:      * <P>
1:230a86c:      * If this message body was read-only, calling this method leaves the
1:230a86c:      * message body in the same state as an empty body in a newly created
1:230a86c:      * message.
1:c0c55ae:      *
1:230a86c:      * @throws JMSException if the JMS provider fails to clear the message body
1:230a86c:      *                 due to some internal error.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void clearBody() throws JMSException {
1:d29ca2a:         super.clearBody();
2:d29ca2a:         this.dataOut = null;
2:d29ca2a:         this.dataIn = null;
2:d29ca2a:         this.bytesOut = null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Gets the number of bytes of the message body when the message is in
1:230a86c:      * read-only mode. The value returned can be used to allocate a byte array.
1:230a86c:      * The value returned is the entire length of the message body, regardless
1:230a86c:      * of where the pointer for reading the message is currently located.
1:c0c55ae:      *
1:d29ca2a:      * @return number of bytes in the message
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      * @since 1.1
1:d29ca2a:      */
1:d29ca2a: 
1:c899492:     @Override
1:d29ca2a:     public long getBodyLength() throws JMSException {
1:d29ca2a:         initializeReading();
1:230a86c:         return length;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a <code>boolean</code> from the bytes message stream.
1:c0c55ae:      *
1:d29ca2a:      * @return the <code>boolean</code> value read
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public boolean readBoolean() throws JMSException {
1:d29ca2a:         initializeReading();
1:44bb9fb:         try {
1:d29ca2a:             return this.dataIn.readBoolean();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:cb5c29d:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a signed 8-bit value from the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @return the next byte from the bytes message stream as a signed 8-bit
1:230a86c:      *         <code>byte</code>
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public byte readByte() throws JMSException {
1:d29ca2a:         initializeReading();
1:c899492:         try {
1:d29ca2a:             return this.dataIn.readByte();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
4:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads an unsigned 8-bit number from the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @return the next byte from the bytes message stream, interpreted as an
1:230a86c:      *         unsigned 8-bit number
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public int readUnsignedByte() throws JMSException {
1:d29ca2a:         initializeReading();
1:c899492:         try {
1:d29ca2a:             return this.dataIn.readUnsignedByte();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a signed 16-bit number from the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @return the next two bytes from the bytes message stream, interpreted as
1:230a86c:      *         a signed 16-bit number
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public short readShort() throws JMSException {
1:d29ca2a:         initializeReading();
6:d29ca2a:         try {
1:d29ca2a:             return this.dataIn.readShort();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads an unsigned 16-bit number from the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @return the next two bytes from the bytes message stream, interpreted as
1:230a86c:      *         an unsigned 16-bit integer
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public int readUnsignedShort() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             return this.dataIn.readUnsignedShort();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a Unicode character value from the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @return the next two bytes from the bytes message stream as a Unicode
1:230a86c:      *         character
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public char readChar() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             return this.dataIn.readChar();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a signed 32-bit integer from the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @return the next four bytes from the bytes message stream, interpreted as
1:230a86c:      *         an <code>int</code>
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public int readInt() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             return this.dataIn.readInt();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a signed 64-bit integer from the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @return the next eight bytes from the bytes message stream, interpreted
1:230a86c:      *         as a <code>long</code>
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public long readLong() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             return this.dataIn.readLong();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a <code>float</code> from the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @return the next four bytes from the bytes message stream, interpreted as
1:230a86c:      *         a <code>float</code>
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public float readFloat() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             return this.dataIn.readFloat();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a <code>double</code> from the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @return the next eight bytes from the bytes message stream, interpreted
1:230a86c:      *         as a <code>double</code>
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public double readDouble() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             return this.dataIn.readDouble();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Reads a string that has been encoded using a modified UTF-8 format from
1:230a86c:      * the bytes message stream.
1:230a86c:      * <P>
1:230a86c:      * For more information on the UTF-8 format, see "File System Safe UCS
1:230a86c:      * Transformation Format (FSS_UTF)", X/Open Preliminary Specification,
1:230a86c:      * X/Open Company Ltd., Document Number: P316. This information also appears
1:230a86c:      * in ISO/IEC 10646, Annex P.
1:c0c55ae:      *
1:d29ca2a:      * @return a Unicode string from the bytes message stream
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:230a86c:      *                 reached.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public String readUTF() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             return this.dataIn.readUTF();
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Reads a byte array from the bytes message stream.
1:230a86c:      * <P>
1:230a86c:      * If the length of array <code>value</code> is less than the number of
1:230a86c:      * bytes remaining to be read from the stream, the array should be filled. A
1:230a86c:      * subsequent call reads the next increment, and so on.
1:230a86c:      * <P>
1:230a86c:      * If the number of bytes remaining in the stream is less than the length of
1:230a86c:      * array <code>value</code>, the bytes should be read into the array. The
1:230a86c:      * return value of the total number of bytes read will be less than the
1:230a86c:      * length of the array, indicating that there are no more bytes left to be
1:230a86c:      * read from the stream. The next read of the stream returns -1.
1:c0c55ae:      *
1:d29ca2a:      * @param value the buffer into which the data is read
1:230a86c:      * @return the total number of bytes read into the buffer, or -1 if there is
1:230a86c:      *         no more data because the end of the stream has been reached
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public int readBytes(byte[] value) throws JMSException {
1:d29ca2a:         return readBytes(value, value.length);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Reads a portion of the bytes message stream.
1:230a86c:      * <P>
1:230a86c:      * If the length of array <code>value</code> is less than the number of
1:230a86c:      * bytes remaining to be read from the stream, the array should be filled. A
1:230a86c:      * subsequent call reads the next increment, and so on.
1:230a86c:      * <P>
1:230a86c:      * If the number of bytes remaining in the stream is less than the length of
1:230a86c:      * array <code>value</code>, the bytes should be read into the array. The
1:230a86c:      * return value of the total number of bytes read will be less than the
1:230a86c:      * length of the array, indicating that there are no more bytes left to be
1:230a86c:      * read from the stream. The next read of the stream returns -1. <p/> If
1:230a86c:      * <code>length</code> is negative, or <code>length</code> is greater
1:230a86c:      * than the length of the array <code>value</code>, then an
1:230a86c:      * <code>IndexOutOfBoundsException</code> is thrown. No bytes will be read
1:230a86c:      * from the stream for this exception case.
1:c0c55ae:      *
1:230a86c:      * @param value the buffer into which the data is read
1:230a86c:      * @param length the number of bytes to read; must be less than or equal to
1:230a86c:      *                <code>value.length</code>
1:230a86c:      * @return the total number of bytes read into the buffer, or -1 if there is
1:230a86c:      *         no more data because the end of the stream has been reached
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:d29ca2a:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public int readBytes(byte[] value, int length) throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             int n = 0;
1:d29ca2a:             while (n < length) {
1:d29ca2a:                 int count = this.dataIn.read(value, n, length - n);
1:d29ca2a:                 if (count < 0) {
1:d29ca2a:                     break;
1:d29ca2a:                 }
1:d29ca2a:                 n += count;
1:d29ca2a:             }
1:d29ca2a:             if (n == 0 && length > 0) {
1:d29ca2a:                 n = -1;
1:d29ca2a:             }
1:d29ca2a:             return n;
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Writes a <code>boolean</code> to the bytes message stream as a 1-byte
1:230a86c:      * value. The value <code>true</code> is written as the value
1:230a86c:      * <code>(byte)1</code>; the value <code>false</code> is written as the
1:230a86c:      * value <code>(byte)0</code>.
1:c0c55ae:      *
1:d29ca2a:      * @param value the <code>boolean</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeBoolean(boolean value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.writeBoolean(value);
2:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Writes a <code>byte</code> to the bytes message stream as a 1-byte
1:230a86c:      * value.
1:c0c55ae:      *
1:d29ca2a:      * @param value the <code>byte</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeByte(byte value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.writeByte(value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Writes a <code>short</code> to the bytes message stream as two bytes,
1:230a86c:      * high byte first.
1:c0c55ae:      *
1:d29ca2a:      * @param value the <code>short</code> to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeShort(short value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.writeShort(value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Writes a <code>char</code> to the bytes message stream as a 2-byte
1:230a86c:      * value, high byte first.
1:c0c55ae:      *
1:d29ca2a:      * @param value the <code>char</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeChar(char value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.writeChar(value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Writes an <code>int</code> to the bytes message stream as four bytes,
1:230a86c:      * high byte first.
1:c0c55ae:      *
1:d29ca2a:      * @param value the <code>int</code> to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeInt(int value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.writeInt(value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Writes a <code>long</code> to the bytes message stream as eight bytes,
1:230a86c:      * high byte first.
1:c0c55ae:      *
1:d29ca2a:      * @param value the <code>long</code> to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeLong(long value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.writeLong(value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Converts the <code>float</code> argument to an <code>int</code> using
1:230a86c:      * the <code>floatToIntBits</code> method in class <code>Float</code>,
1:230a86c:      * and then writes that <code>int</code> value to the bytes message stream
1:230a86c:      * as a 4-byte quantity, high byte first.
1:c0c55ae:      *
1:d29ca2a:      * @param value the <code>float</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeFloat(float value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.writeFloat(value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Converts the <code>double</code> argument to a <code>long</code>
1:230a86c:      * using the <code>doubleToLongBits</code> method in class
1:230a86c:      * <code>Double</code>, and then writes that <code>long</code> value to
1:230a86c:      * the bytes message stream as an 8-byte quantity, high byte first.
1:c0c55ae:      *
1:d29ca2a:      * @param value the <code>double</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeDouble(double value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.writeDouble(value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Writes a string to the bytes message stream using UTF-8 encoding in a
1:230a86c:      * machine-independent manner.
1:230a86c:      * <P>
1:230a86c:      * For more information on the UTF-8 format, see "File System Safe UCS
1:230a86c:      * Transformation Format (FSS_UTF)", X/Open Preliminary Specification,
1:230a86c:      * X/Open Company Ltd., Document Number: P316. This information also appears
1:230a86c:      * in ISO/IEC 10646, Annex P.
1:c0c55ae:      *
1:d29ca2a:      * @param value the <code>String</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeUTF(String value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.writeUTF(value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a byte array to the bytes message stream.
1:c0c55ae:      *
1:d29ca2a:      * @param value the byte array to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeBytes(byte[] value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.write(value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a portion of a byte array to the bytes message stream.
1:c0c55ae:      *
1:230a86c:      * @param value the byte array value to be written
1:d29ca2a:      * @param offset the initial offset within the byte array
1:d29ca2a:      * @param length the number of bytes to use
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:d29ca2a:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeBytes(byte[] value, int offset, int length) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             this.dataOut.write(value, offset, length);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Writes an object to the bytes message stream.
1:230a86c:      * <P>
1:230a86c:      * This method works only for the objectified primitive object types (<code>Integer</code>,<code>Double</code>,
1:230a86c:      * <code>Long</code> &nbsp;...), <code>String</code> objects, and byte
1:230a86c:      * arrays.
1:c0c55ae:      *
1:230a86c:      * @param value the object in the Java programming language ("Java object")
1:230a86c:      *                to be written; it must not be null
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageFormatException if the object is of an invalid type.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:230a86c:      * @throws java.lang.NullPointerException if the parameter
1:230a86c:      *                 <code>value</code> is null.
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void writeObject(Object value) throws JMSException {
1:d29ca2a:         if (value == null) {
1:d29ca2a:             throw new NullPointerException();
1:d29ca2a:         }
1:d29ca2a:         initializeWriting();
1:d29ca2a:         if (value instanceof Boolean) {
1:230a86c:             writeBoolean(((Boolean)value).booleanValue());
1:d29ca2a:         } else if (value instanceof Character) {
1:230a86c:             writeChar(((Character)value).charValue());
1:d29ca2a:         } else if (value instanceof Byte) {
1:230a86c:             writeByte(((Byte)value).byteValue());
1:d29ca2a:         } else if (value instanceof Short) {
1:230a86c:             writeShort(((Short)value).shortValue());
1:d29ca2a:         } else if (value instanceof Integer) {
1:230a86c:             writeInt(((Integer)value).intValue());
1:d29ca2a:         } else if (value instanceof Long) {
1:230a86c:             writeLong(((Long)value).longValue());
1:d29ca2a:         } else if (value instanceof Float) {
1:230a86c:             writeFloat(((Float)value).floatValue());
1:d29ca2a:         } else if (value instanceof Double) {
1:230a86c:             writeDouble(((Double)value).doubleValue());
1:d29ca2a:         } else if (value instanceof String) {
1:d29ca2a:             writeUTF(value.toString());
1:d29ca2a:         } else if (value instanceof byte[]) {
1:230a86c:             writeBytes((byte[])value);
2:d29ca2a:         } else {
1:d29ca2a:             throw new MessageFormatException("Cannot write non-primitive type:" + value.getClass());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Puts the message body in read-only mode and repositions the stream of
1:230a86c:      * bytes to the beginning.
1:c0c55ae:      *
1:d29ca2a:      * @throws JMSException if an internal error occurs
1:d29ca2a:      */
1:c899492:     @Override
1:d29ca2a:     public void reset() throws JMSException {
1:d29ca2a:         storeContent();
1:d29ca2a:         setReadOnlyBody(true);
1:44bb9fb:         try {
1:44bb9fb:             if (bytesOut != null) {
1:44bb9fb:                 bytesOut.close();
1:44bb9fb:                 bytesOut = null;
1:44bb9fb:             }
1:44bb9fb:             if (dataIn != null) {
1:44bb9fb:                 dataIn.close();
1:44bb9fb:                 dataIn = null;
1:44bb9fb:             }
1:44bb9fb:             if (dataOut != null) {
1:44bb9fb:                 dataOut.close();
1:44bb9fb:                 dataOut = null;
1:44bb9fb:             }
1:44bb9fb:         } catch (IOException ioe) {
1:44bb9fb:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void initializeWriting() throws JMSException {
1:d29ca2a:         checkReadOnlyBody();
1:d29ca2a:         if (this.dataOut == null) {
1:d29ca2a:             this.bytesOut = new ByteArrayOutputStream();
1:d29ca2a:             OutputStream os = bytesOut;
1:d29ca2a:             this.dataOut = new DataOutputStream(os);
1:44bb9fb:         }
1:44bb9fb: 
1:cb5c29d:         restoreOldContent();
1:cb5c29d:     }
1:cb5c29d: 
1:cb5c29d:     private void restoreOldContent() throws JMSException {
1:cb5c29d:         // For a message that already had a body and was sent we need to restore the content
1:cb5c29d:         // if the message is used again without having its clearBody method called.
1:cb5c29d:         if (this.content != null && this.content.length > 0) {
1:cb5c29d:             try {
1:cb5c29d:                 ByteSequence toRestore = this.content;
1:7a61718:                 if (isCompressed()) {
1:44bb9fb:                     toRestore = new ByteSequence(decompress(this.content));
1:7a61718:                     compressed = false;
1:cb5c29d:                 }
1:cb5c29d: 
1:cb5c29d:                 this.dataOut.write(toRestore.getData(), toRestore.getOffset(), toRestore.getLength());
1:cb5c29d:                 // Free up the buffer from the old content, will be re-written when
1:cb5c29d:                 // the message is sent again and storeContent() is called.
1:cb5c29d:                 this.content = null;
1:cb5c29d:             } catch (IOException ioe) {
1:cb5c29d:                 throw JMSExceptionSupport.create(ioe);
1:cb5c29d:             }
1:cb5c29d:         }
1:cb5c29d:     }
1:cb5c29d: 
1:d29ca2a:     protected void checkWriteOnlyBody() throws MessageNotReadableException {
1:d29ca2a:         if (!readOnlyBody) {
1:d29ca2a:             throw new MessageNotReadableException("Message body is write-only");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void initializeReading() throws JMSException {
1:d29ca2a:         checkWriteOnlyBody();
1:230a86c:         if (dataIn == null) {
1:44bb9fb:             try {
1:7a61718:                 ByteSequence data = getContent();
1:7a61718:                 if (data == null) {
1:7a61718:                     data = new ByteSequence(new byte[] {}, 0, 0);
1:ecf89a6:                 }
1:7a61718:                 InputStream is = new ByteArrayInputStream(data);
1:7a61718:                 if (isCompressed()) {
1:7a61718:                     if (data.length != 0) {
1:7a61718:                         is = new ByteArrayInputStream(decompress(data));
1:7a61718:                     }
1:7a61718:                 } else {
1:7a61718:                     length = data.getLength();
1:7a61718:                 }
1:44bb9fb: 
1:7a61718:                 dataIn = new DataInputStream(is);
1:44bb9fb:             } catch (IOException ioe) {
1:44bb9fb:                 throw JMSExceptionSupport.create(ioe);
1:44bb9fb:             }
1:44bb9fb:         }
1:44bb9fb:     }
1:44bb9fb: 
1:44bb9fb:     protected byte[] decompress(ByteSequence dataSequence) throws IOException {
1:44bb9fb:         Inflater inflater = new Inflater();
1:44bb9fb:         ByteArrayOutputStream decompressed = new ByteArrayOutputStream();
1:44bb9fb:         try {
1:44bb9fb:             length = ByteSequenceData.readIntBig(dataSequence);
1:44bb9fb:             dataSequence.offset = 0;
1:44bb9fb:             byte[] data = Arrays.copyOfRange(dataSequence.getData(), 4, dataSequence.getLength());
1:44bb9fb:             inflater.setInput(data);
1:cb5c29d:             byte[] buffer = new byte[length];
1:44bb9fb:             int count = inflater.inflate(buffer);
1:44bb9fb:             decompressed.write(buffer, 0, count);
1:44bb9fb:             return decompressed.toByteArray();
1:44bb9fb:         } catch (Exception e) {
1:44bb9fb:             throw new IOException(e);
1:44bb9fb:         } finally {
1:44bb9fb:             inflater.end();
1:44bb9fb:             decompressed.close();
1:c899492:         }
1:c899492:     }
1:230a86c: 
1:c899492:     @Override
1:d29ca2a:     public void setObjectProperty(String name, Object value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         super.setObjectProperty(name, value);
1:d29ca2a:     }
1:d29ca2a: 
1:c899492:     @Override
1:d29ca2a:     public String toString() {
1:230a86c:         return super.toString() + " ActiveMQBytesMessage{ " + "bytesOut = " + bytesOut + ", dataOut = " + dataOut + ", dataIn = " + dataIn + " }";
1:d29ca2a:     }
1:41c9366: 
2:c899492:     @Override
1:41c9366:     protected void doCompress() throws IOException {
1:44bb9fb:         compressed = true;
1:41c9366:         ByteSequence bytes = getContent();
1:44bb9fb:         if (bytes != null) {
1:44bb9fb:             int length = bytes.getLength();
1:44bb9fb:             ByteArrayOutputStream compressed = new ByteArrayOutputStream();
1:44bb9fb:             compressed.write(new byte[4]);
1:44bb9fb:             Deflater deflater = new Deflater();
1:d29ca2a:             try {
1:44bb9fb:                 deflater.setInput(bytes.data);
1:44bb9fb:                 deflater.finish();
1:44bb9fb:                 byte[] buffer = new byte[1024];
1:44bb9fb:                 while (!deflater.finished()) {
1:44bb9fb:                     int count = deflater.deflate(buffer);
1:44bb9fb:                     compressed.write(buffer, 0, count);
1:44bb9fb:                 }
1:44bb9fb: 
1:44bb9fb:                 bytes = compressed.toByteSequence();
1:44bb9fb:                 ByteSequenceData.writeIntBig(bytes, length);
1:44bb9fb:                 bytes.offset = 0;
1:44bb9fb:                 setContent(bytes);
1:44bb9fb:             } finally {
1:44bb9fb:                 deflater.end();
1:44bb9fb:                 compressed.close();
1:c899492:             }
1:c899492:         }
1:c899492:     }
1:41c9366: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f82993d
/////////////////////////////////////////////////////////////////////////
1:     public boolean isContentMarshalled() {
1:         return content != null || dataOut == null;
1:     }
1: 
1:     @Override
commit:e69c2cb
/////////////////////////////////////////////////////////////////////////
commit:5f7a81f
/////////////////////////////////////////////////////////////////////////
0:             //copy to prevent a race condition - AMQ-6142
0:             dataSequence = new ByteSequence(dataSequence.getData(), dataSequence.getOffset(), dataSequence.getLength());
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Brian D. Johnson
-------------------------------------------------------------------------------
commit:7a61718
/////////////////////////////////////////////////////////////////////////
1:                 if (isCompressed()) {
1:                     compressed = false;
/////////////////////////////////////////////////////////////////////////
1:                 ByteSequence data = getContent();
1:                 if (data == null) {
1:                     data = new ByteSequence(new byte[] {}, 0, 0);
1:                 InputStream is = new ByteArrayInputStream(data);
1:                 if (isCompressed()) {
1:                     if (data.length != 0) {
1:                         is = new ByteArrayInputStream(decompress(data));
1:                     }
1:                 } else {
1:                     length = data.getLength();
1:                 }
1:                 dataIn = new DataInputStream(is);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6c4f15e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:                 ActiveMQConnection connection = getConnection();
1:                 if (connection != null && connection.isUseCompression()) {
/////////////////////////////////////////////////////////////////////////
commit:cb5c29d
/////////////////////////////////////////////////////////////////////////
1: 
1:         restoreOldContent();
1:     }
1: 
1:     private void restoreOldContent() throws JMSException {
1:         // For a message that already had a body and was sent we need to restore the content
1:         // if the message is used again without having its clearBody method called.
1:         if (this.content != null && this.content.length > 0) {
1:             try {
1:                 ByteSequence toRestore = this.content;
0:                 if (compressed) {
0:                     InputStream is = new ByteArrayInputStream(toRestore);
0:                     int length = 0;
1:                     try {
0:                         DataInputStream dis = new DataInputStream(is);
0:                         length = dis.readInt();
0:                         dis.close();
1:                     } catch (IOException e) {
0:                         throw JMSExceptionSupport.create(e);
1:                     }
0:                     is = new InflaterInputStream(is);
0:                     DataInputStream input = new DataInputStream(is);
1: 
1:                     byte[] buffer = new byte[length];
0:                     input.readFully(buffer);
0:                     toRestore = new ByteSequence(buffer);
1:                 }
1: 
1:                 this.dataOut.write(toRestore.getData(), toRestore.getOffset(), toRestore.getLength());
1:                 // Free up the buffer from the old content, will be re-written when
1:                 // the message is sent again and storeContent() is called.
1:                 this.content = null;
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:         }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:44bb9fb
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.zip.Inflater;
/////////////////////////////////////////////////////////////////////////
1:         if (dataOut != null) {
1:             try {
0:                 if (compressed) {
1:                     doCompress();
1:                 }
1:             } catch (IOException ioe) {
1:                 throw new RuntimeException(ioe.getMessage(), ioe);
1:             } finally {
1:                 try {
1:                     if (bytesOut != null) {
1:                         bytesOut.close();
1:                         bytesOut = null;
1:                     }
1:                     if (dataOut != null) {
1:                         dataOut.close();
1:                         dataOut = null;
1:                     }
1:                 } catch (IOException ioe) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             if (bytesOut != null) {
1:                 bytesOut.close();
1:                 bytesOut = null;
1:             }
1:             if (dataIn != null) {
1:                 dataIn.close();
1:                 dataIn = null;
1:             }
1:             if (dataOut != null) {
1:                 dataOut.close();
1:                 dataOut = null;
1:             }
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQConnection connection = getConnection();
0:         if (connection != null && connection.isUseCompression()) {
1:             compressed = true;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:                     toRestore = new ByteSequence(decompress(this.content));
/////////////////////////////////////////////////////////////////////////
1:             try {
0:                 if (data.length != 0) {
0:                     is = new ByteArrayInputStream(decompress(data));
1: 
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:         }
1:     }
1: 
1:     protected byte[] decompress(ByteSequence dataSequence) throws IOException {
1:         Inflater inflater = new Inflater();
1:         ByteArrayOutputStream decompressed = new ByteArrayOutputStream();
1:         try {
1:             length = ByteSequenceData.readIntBig(dataSequence);
1:             dataSequence.offset = 0;
1:             byte[] data = Arrays.copyOfRange(dataSequence.getData(), 4, dataSequence.getLength());
1:             inflater.setInput(data);
0:             byte[] buffer = new byte[length];
1:             int count = inflater.inflate(buffer);
1:             decompressed.write(buffer, 0, count);
1:             return decompressed.toByteArray();
1:         } catch (Exception e) {
1:             throw new IOException(e);
1:         } finally {
1:             inflater.end();
1:             decompressed.close();
/////////////////////////////////////////////////////////////////////////
1:         if (bytes != null) {
1:             int length = bytes.getLength();
1:             ByteArrayOutputStream compressed = new ByteArrayOutputStream();
1:             compressed.write(new byte[4]);
1:             Deflater deflater = new Deflater();
1:                 deflater.setInput(bytes.data);
1:                 deflater.finish();
1:                 byte[] buffer = new byte[1024];
1:                 while (!deflater.finished()) {
1:                     int count = deflater.deflate(buffer);
1:                     compressed.write(buffer, 0, count);
1:                 }
1: 
1:                 bytes = compressed.toByteSequence();
1:                 ByteSequenceData.writeIntBig(bytes, length);
1:                 bytes.offset = 0;
1:                 setContent(bytes);
1:             } finally {
1:                 deflater.end();
1:                 compressed.close();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c899492
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageEOFException;
1: import javax.jms.MessageNotWriteableException;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:         if (dataIn != null) {
1:             try {
0:                 // Eagerly release potential Inflater memory buffers.
0:                 dataIn.close();
0:             } catch (Exception e) {
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:                     @Override
1:                     @Override
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
0:     protected void finalize() throws Throwable {
0:         // Attempt to do eager close in case of compressed data which uses a
0:         // wrapped InflaterInputStream.
0:         if (dataIn != null) {
1:             try {
0:                 dataIn.close();
0:             } catch(Exception e) {
1:             }
1:         }
1:     }
commit:41c9366
/////////////////////////////////////////////////////////////////////////
0:     @Override
1:     public void storeContent() {
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
1:     protected void doCompress() throws IOException {
0:         compressed = true;
1:         ByteSequence bytes = getContent();
0:         int length = bytes.getLength();
0:         ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
0:         bytesOut.write(new byte[4]);
0:         DeflaterOutputStream os = new DeflaterOutputStream(bytesOut);
0:         DataOutputStream dataOut = new DataOutputStream(os);
0:         dataOut.write(bytes.data, bytes.offset, bytes.length);
0:         dataOut.flush();
1:         dataOut.close();
0:         bytes = bytesOut.toByteSequence();
0:         ByteSequenceData.writeIntBig(bytes, length);
0:         bytes.offset = 0;
0:         setContent(bytes);
1:     }
commit:c0c55ae
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:                         deflater.end();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:             if (data == null) {
1:             }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     protected transient DataOutputStream dataOut;
1:     protected transient ByteArrayOutputStream bytesOut;
1:     protected transient DataInputStream dataIn;
1:     protected transient int length;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.EOFException;
0: import java.io.FilterOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import javax.jms.BytesMessage;
1: import javax.jms.JMSException;
1: import javax.jms.MessageFormatException;
1: import javax.jms.MessageNotReadableException;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.ByteSequenceData;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A <CODE>BytesMessage</CODE> object is used to send a message containing a
1:  * stream of uninterpreted bytes. It inherits from the <CODE>Message</CODE>
1:  * interface and adds a bytes message body. The receiver of the message supplies
1:  * the interpretation of the bytes.
1:  * <P>
1:  * The <CODE>BytesMessage</CODE> methods are based largely on those found in
1:  * <CODE>java.io.DataInputStream</CODE> and
1:  * <CODE>java.io.DataOutputStream</CODE>.
1:  * <P>
1:  * This message type is for client encoding of existing message formats. If
1:  * possible, one of the other self-defining message types should be used
1:  * instead.
1:  * <P>
1:  * Although the JMS API allows the use of message properties with byte messages,
1:  * they are typically not used, since the inclusion of properties may affect the
1:  * format.
1:  * <P>
1:  * The primitive types can be written explicitly using methods for each type.
1:  * They may also be written generically as objects. For instance, a call to
1:  * <CODE>BytesMessage.writeInt(6)</CODE> is equivalent to
1:  * <CODE> BytesMessage.writeObject(new Integer(6))</CODE>. Both forms are
1:  * provided, because the explicit form is convenient for static programming, and
1:  * the object form is needed when types are not known at compile time.
1:  * <P>
1:  * When the message is first created, and when <CODE>clearBody</CODE> is
1:  * called, the body of the message is in write-only mode. After the first call
1:  * to <CODE>reset</CODE> has been made, the message body is in read-only mode.
1:  * After a message has been sent, the client that sent it can retain and modify
1:  * it without affecting the message that has been sent. The same message object
1:  * can be sent multiple times. When a message has been received, the provider
1:  * has called <CODE>reset</CODE> so that the message body is in read-only mode
1:  * for the client.
1:  * <P>
1:  * If <CODE>clearBody</CODE> is called on a message in read-only mode, the
1:  * message body is cleared and the message is in write-only mode.
1:  * <P>
1:  * If a client attempts to read a message in write-only mode, a
1:  * <CODE>MessageNotReadableException</CODE> is thrown.
1:  * <P>
1:  * If a client attempts to write a message in read-only mode, a
1:  * 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:                 if (compressed) {
0:                     int pos = bs.offset;
/////////////////////////////////////////////////////////////////////////
0:             throw new RuntimeException(ioe.getMessage(), ioe); // TODO verify
0:                                                                 // RuntimeException
1: 
1:      * Clears out the message body. Clearing a message's body does not clear its
1:      * header values or property entries.
1:      * <P>
1:      * If this message body was read-only, calling this method leaves the
1:      * message body in the same state as an empty body in a newly created
1:      * message.
1:      * 
1:      * @throws JMSException if the JMS provider fails to clear the message body
1:      *                 due to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Gets the number of bytes of the message body when the message is in
1:      * read-only mode. The value returned can be used to allocate a byte array.
1:      * The value returned is the entire length of the message body, regardless
1:      * of where the pointer for reading the message is currently located.
0:      * 
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:         return length;
0:      * 
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the next byte from the bytes message stream as a signed 8-bit
1:      *         <code>byte</code>
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the next byte from the bytes message stream, interpreted as an
1:      *         unsigned 8-bit number
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the next two bytes from the bytes message stream, interpreted as
1:      *         a signed 16-bit number
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the next two bytes from the bytes message stream, interpreted as
1:      *         an unsigned 16-bit integer
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the next two bytes from the bytes message stream as a Unicode
1:      *         character
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the next four bytes from the bytes message stream, interpreted as
1:      *         an <code>int</code>
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the next eight bytes from the bytes message stream, interpreted
1:      *         as a <code>long</code>
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the next four bytes from the bytes message stream, interpreted as
1:      *         a <code>float</code>
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @return the next eight bytes from the bytes message stream, interpreted
1:      *         as a <code>double</code>
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
1:      * Reads a string that has been encoded using a modified UTF-8 format from
1:      * the bytes message stream.
1:      * <P>
1:      * For more information on the UTF-8 format, see "File System Safe UCS
1:      * Transformation Format (FSS_UTF)", X/Open Preliminary Specification,
1:      * X/Open Company Ltd., Document Number: P316. This information also appears
1:      * in ISO/IEC 10646, Annex P.
0:      * 
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of bytes stream has been
1:      *                 reached.
/////////////////////////////////////////////////////////////////////////
1:      * Reads a byte array from the bytes message stream.
1:      * <P>
1:      * If the length of array <code>value</code> is less than the number of
1:      * bytes remaining to be read from the stream, the array should be filled. A
1:      * subsequent call reads the next increment, and so on.
1:      * <P>
1:      * If the number of bytes remaining in the stream is less than the length of
1:      * array <code>value</code>, the bytes should be read into the array. The
1:      * return value of the total number of bytes read will be less than the
1:      * length of the array, indicating that there are no more bytes left to be
1:      * read from the stream. The next read of the stream returns -1.
0:      * 
1:      * @return the total number of bytes read into the buffer, or -1 if there is
1:      *         no more data because the end of the stream has been reached
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Reads a portion of the bytes message stream.
1:      * <P>
1:      * If the length of array <code>value</code> is less than the number of
1:      * bytes remaining to be read from the stream, the array should be filled. A
1:      * subsequent call reads the next increment, and so on.
1:      * <P>
1:      * If the number of bytes remaining in the stream is less than the length of
1:      * array <code>value</code>, the bytes should be read into the array. The
1:      * return value of the total number of bytes read will be less than the
1:      * length of the array, indicating that there are no more bytes left to be
1:      * read from the stream. The next read of the stream returns -1. <p/> If
1:      * <code>length</code> is negative, or <code>length</code> is greater
1:      * than the length of the array <code>value</code>, then an
1:      * <code>IndexOutOfBoundsException</code> is thrown. No bytes will be read
1:      * from the stream for this exception case.
0:      * 
1:      * @param value the buffer into which the data is read
1:      * @param length the number of bytes to read; must be less than or equal to
1:      *                <code>value.length</code>
1:      * @return the total number of bytes read into the buffer, or -1 if there is
1:      *         no more data because the end of the stream has been reached
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Writes a <code>boolean</code> to the bytes message stream as a 1-byte
1:      * value. The value <code>true</code> is written as the value
1:      * <code>(byte)1</code>; the value <code>false</code> is written as the
1:      * value <code>(byte)0</code>.
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Writes a <code>byte</code> to the bytes message stream as a 1-byte
1:      * value.
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Writes a <code>short</code> to the bytes message stream as two bytes,
1:      * high byte first.
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Writes a <code>char</code> to the bytes message stream as a 2-byte
1:      * value, high byte first.
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Writes an <code>int</code> to the bytes message stream as four bytes,
1:      * high byte first.
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Writes a <code>long</code> to the bytes message stream as eight bytes,
1:      * high byte first.
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Converts the <code>float</code> argument to an <code>int</code> using
1:      * the <code>floatToIntBits</code> method in class <code>Float</code>,
1:      * and then writes that <code>int</code> value to the bytes message stream
1:      * as a 4-byte quantity, high byte first.
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Converts the <code>double</code> argument to a <code>long</code>
1:      * using the <code>doubleToLongBits</code> method in class
1:      * <code>Double</code>, and then writes that <code>long</code> value to
1:      * the bytes message stream as an 8-byte quantity, high byte first.
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Writes a string to the bytes message stream using UTF-8 encoding in a
1:      * machine-independent manner.
1:      * <P>
1:      * For more information on the UTF-8 format, see "File System Safe UCS
1:      * Transformation Format (FSS_UTF)", X/Open Preliminary Specification,
1:      * X/Open Company Ltd., Document Number: P316. This information also appears
1:      * in ISO/IEC 10646, Annex P.
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @param value the byte array value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Writes an object to the bytes message stream.
1:      * <P>
1:      * This method works only for the objectified primitive object types (<code>Integer</code>,<code>Double</code>,
1:      * <code>Long</code> &nbsp;...), <code>String</code> objects, and byte
1:      * arrays.
0:      * 
1:      * @param value the object in the Java programming language ("Java object")
1:      *                to be written; it must not be null
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageFormatException if the object is of an invalid type.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      * @throws java.lang.NullPointerException if the parameter
1:      *                 <code>value</code> is null.
/////////////////////////////////////////////////////////////////////////
1:             writeBoolean(((Boolean)value).booleanValue());
1:             writeChar(((Character)value).charValue());
1:             writeByte(((Byte)value).byteValue());
1:             writeShort(((Short)value).shortValue());
1:             writeInt(((Integer)value).intValue());
1:             writeLong(((Long)value).longValue());
1:             writeFloat(((Float)value).floatValue());
1:             writeDouble(((Double)value).doubleValue());
1:             writeBytes((byte[])value);
1:      * Puts the message body in read-only mode and repositions the stream of
1:      * bytes to the beginning.
0:      * 
/////////////////////////////////////////////////////////////////////////
0:             if (connection != null && connection.isUseCompression()) {
/////////////////////////////////////////////////////////////////////////
0:                 length = 0;
0:                 os = new FilterOutputStream(new DeflaterOutputStream(os, deflater)) {
0:                         length += arg0.length;
1: 
0:                         length += arg2;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (dataIn == null) {
0:             if (data == null)
0:                 data = new ByteSequence(new byte[] {}, 0, 0);
0:             if (isCompressed()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         return super.toString() + " ActiveMQBytesMessage{ " + "bytesOut = " + bytesOut + ", dataOut = " + dataOut + ", dataIn = " + dataIn + " }";
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.ByteArrayInputStream;
0: import org.apache.activemq.util.ByteArrayOutputStream;
0: import org.apache.activemq.util.ByteSequence;
0: import org.apache.activemq.util.ByteSequenceData;
/////////////////////////////////////////////////////////////////////////
0:                 	int pos = bs.offset;
0:                     ByteSequenceData.writeIntBig(bs, length);
0:                     bs.offset = pos;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.packet.ByteArrayPacket;
0: import org.apache.activeio.packet.ByteSequence;
0: import org.apache.activeio.packet.PacketData;
0: import org.apache.activeio.util.ByteArrayInputStream;
0: import org.apache.activeio.util.ByteArrayOutputStream;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.EOFException;
0: import java.io.FilterOutputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
1: import java.util.zip.Deflater;
0: import java.util.zip.DeflaterOutputStream;
0: import java.util.zip.InflaterInputStream;
1: 
0: import javax.jms.BytesMessage;
0: import javax.jms.JMSException;
0: import javax.jms.MessageEOFException;
0: import javax.jms.MessageFormatException;
0: import javax.jms.MessageNotReadableException;
0: import javax.jms.MessageNotWriteableException;
1: 
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
0: import org.activeio.ByteSequence;
0: import org.activeio.PacketData;
0: import org.activeio.packet.ByteArrayPacket;
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.util.JMSExceptionSupport;
1: 
1: /**
0:  * A <CODE>BytesMessage</CODE> object is used to send a message containing a stream of uninterpreted bytes. It inherits
0:  * from the <CODE>Message</CODE> interface and adds a bytes message body. The receiver of the message supplies the
0:  * interpretation of the bytes. <P> The <CODE>BytesMessage</CODE> methods are based largely on those found in
0:  * <CODE>java.io.DataInputStream</CODE> and <CODE>java.io.DataOutputStream</CODE>. <P> This message type is for client
0:  * encoding of existing message formats. If possible, one of the other self-defining message types should be used
0:  * instead. <P> Although the JMS API allows the use of message properties with byte messages, they are typically not
0:  * used, since the inclusion of properties may affect the format. <P> The primitive types can be written explicitly
0:  * using methods for each type. They may also be written generically as objects. For instance, a call to
0:  * <CODE>BytesMessage.writeInt(6)</CODE> is equivalent to <CODE> BytesMessage.writeObject(new Integer(6))</CODE>. Both
0:  * forms are provided, because the explicit form is convenient for static programming, and the object form is needed
0:  * when types are not known at compile time. <P> When the message is first created, and when <CODE>clearBody</CODE> is
0:  * called, the body of the message is in write-only mode. After the first call to <CODE>reset</CODE> has been made, the
0:  * message body is in read-only mode. After a message has been sent, the client that sent it can retain and modify it
0:  * without affecting the message that has been sent. The same message object can be sent multiple times. When a message
0:  * has been received, the provider has called <CODE>reset</CODE> so that the message body is in read-only mode for the
0:  * client. <P> If <CODE>clearBody</CODE> is called on a message in read-only mode, the message body is cleared and the
0:  * message is in write-only mode. <P> If a client attempts to read a message in write-only mode, a
0:  * <CODE>MessageNotReadableException</CODE> is thrown. <P> If a client attempts to write a message in read-only mode, a
1:  * <CODE>MessageNotWriteableException</CODE> is thrown.
0:  *
0:  * @openwire:marshaller
1:  * @see javax.jms.Session#createBytesMessage()
1:  * @see javax.jms.MapMessage
1:  * @see javax.jms.Message
1:  * @see javax.jms.ObjectMessage
1:  * @see javax.jms.StreamMessage
1:  * @see javax.jms.TextMessage
1:  */
1: public class ActiveMQBytesMessage extends ActiveMQMessage implements BytesMessage {
1: 
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_BYTES_MESSAGE;
1: 
0:     transient protected DataOutputStream dataOut;
0:     transient protected ByteArrayOutputStream bytesOut;
0:     transient protected DataInputStream dataIn;
0:     transient protected int length;
1: 
1:     public Message copy() {
1:         ActiveMQBytesMessage copy = new ActiveMQBytesMessage();
1:         copy(copy);
1:         return copy;
1:     }
1: 
1:     private void copy(ActiveMQBytesMessage copy) {
1:         storeContent();
1:         super.copy(copy);
1:         copy.dataOut = null;
1:         copy.bytesOut = null;
1:         copy.dataIn = null;
1:     }
1:     
0:     public void onSend() {
1:         super.onSend();
1:         storeContent();
1:     }
1: 
0:     private void storeContent() {
1:         try {
0:             if (dataOut != null) {
0:                 dataOut.close();
1:                 ByteSequence bs = bytesOut.toByteSequence();
0:                 if( compressed ) {
0:                     // Prefix the real length
0:                     ByteArrayPacket packet = new ByteArrayPacket(bs);
0:                     PacketData.writeIntBig(packet, length);
1:                 }
1:                 setContent(bs);
0:                 bytesOut = null;
0:                 dataOut = null;
1:             }
1:         } catch (IOException ioe) {
0:             throw new RuntimeException(ioe.getMessage(), ioe); //TODO verify RuntimeException
1:         }
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     /**
0:      * Clears out the message body. Clearing a message's body does not clear its header values or property entries. <P>
0:      * If this message body was read-only, calling this method leaves the message body in the same state as an empty
0:      * body in a newly created message.
0:      *
0:      * @throws JMSException if the JMS provider fails to clear the message body due to some internal error.
1:      */
1:     public void clearBody() throws JMSException {
1:         super.clearBody();
1:         this.dataOut = null;
1:         this.dataIn = null;
1:         this.bytesOut = null;
1:     }
1: 
1:     /**
0:      * Gets the number of bytes of the message body when the message is in read-only mode. The value returned can be
0:      * used to allocate a byte array. The value returned is the entire length of the message body, regardless of where
0:      * the pointer for reading the message is currently located.
0:      *
1:      * @return number of bytes in the message
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      * @since 1.1
1:      */
1: 
1:     public long getBodyLength() throws JMSException {
1:         initializeReading();
0:         return length;        
1:     }
1: 
1:     /**
1:      * Reads a <code>boolean</code> from the bytes message stream.
0:      *
1:      * @return the <code>boolean</code> value read
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public boolean readBoolean() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readBoolean();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a signed 8-bit value from the bytes message stream.
0:      *
0:      * @return the next byte from the bytes message stream as a signed 8-bit <code>byte</code>
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public byte readByte() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readByte();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads an unsigned 8-bit number from the bytes message stream.
0:      *
0:      * @return the next byte from the bytes message stream, interpreted as an unsigned 8-bit number
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public int readUnsignedByte() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readUnsignedByte();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a signed 16-bit number from the bytes message stream.
0:      *
0:      * @return the next two bytes from the bytes message stream, interpreted as a signed 16-bit number
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public short readShort() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readShort();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads an unsigned 16-bit number from the bytes message stream.
0:      *
0:      * @return the next two bytes from the bytes message stream, interpreted as an unsigned 16-bit integer
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public int readUnsignedShort() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readUnsignedShort();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a Unicode character value from the bytes message stream.
0:      *
0:      * @return the next two bytes from the bytes message stream as a Unicode character
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public char readChar() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readChar();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a signed 32-bit integer from the bytes message stream.
0:      *
0:      * @return the next four bytes from the bytes message stream, interpreted as an <code>int</code>
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public int readInt() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readInt();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a signed 64-bit integer from the bytes message stream.
0:      *
0:      * @return the next eight bytes from the bytes message stream, interpreted as a <code>long</code>
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public long readLong() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readLong();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a <code>float</code> from the bytes message stream.
0:      *
0:      * @return the next four bytes from the bytes message stream, interpreted as a <code>float</code>
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public float readFloat() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readFloat();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a <code>double</code> from the bytes message stream.
0:      *
0:      * @return the next eight bytes from the bytes message stream, interpreted as a <code>double</code>
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public double readDouble() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readDouble();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
0:      * Reads a string that has been encoded using a modified UTF-8 format from the bytes message stream. <P> For more
0:      * information on the UTF-8 format, see "File System Safe UCS Transformation Format (FSS_UTF)", X/Open Preliminary
0:      * Specification, X/Open Company Ltd., Document Number: P316. This information also appears in ISO/IEC 10646, Annex
0:      * P.
0:      *
1:      * @return a Unicode string from the bytes message stream
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
0:      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public String readUTF() throws JMSException {
1:         initializeReading();
1:         try {
1:             return this.dataIn.readUTF();
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
0:      * Reads a byte array from the bytes message stream. <P> If the length of array <code>value</code> is less than the
0:      * number of bytes remaining to be read from the stream, the array should be filled. A subsequent call reads the
0:      * next increment, and so on. <P> If the number of bytes remaining in the stream is less than the length of array
0:      * <code>value</code>, the bytes should be read into the array. The return value of the total number of bytes read
0:      * will be less than the length of the array, indicating that there are no more bytes left to be read from the
0:      * stream. The next read of the stream returns -1.
0:      *
1:      * @param value the buffer into which the data is read
0:      * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the
0:      *         stream has been reached
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public int readBytes(byte[] value) throws JMSException {
1:         return readBytes(value, value.length);
1:     }
1: 
1:     /**
0:      * Reads a portion of the bytes message stream. <P> If the length of array <code>value</code> is less than the
0:      * number of bytes remaining to be read from the stream, the array should be filled. A subsequent call reads the
0:      * next increment, and so on. <P> If the number of bytes remaining in the stream is less than the length of array
0:      * <code>value</code>, the bytes should be read into the array. The return value of the total number of bytes read
0:      * will be less than the length of the array, indicating that there are no more bytes left to be read from the
0:      * stream. The next read of the stream returns -1.
0:      * <p/>
0:      * If <code>length</code> is negative, or <code>length</code> is greater than the length of the array
0:      * <code>value</code>, then an <code>IndexOutOfBoundsException</code> is thrown. No bytes will be read from the
0:      * stream for this exception case.
0:      *
0:      * @param value  the buffer into which the data is read
0:      * @param length the number of bytes to read; must be less than or equal to <code>value.length</code>
0:      * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the
0:      *         stream has been reached
0:      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
1:      */
1:     public int readBytes(byte[] value, int length) throws JMSException {
1:         initializeReading();
1:         try {
1:             int n = 0;
1:             while (n < length) {
1:                 int count = this.dataIn.read(value, n, length - n);
1:                 if (count < 0) {
1:                     break;
1:                 }
1:                 n += count;
1:             }
1:             if (n == 0 && length > 0) {
1:                 n = -1;
1:             }
1:             return n;
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
0:      * Writes a <code>boolean</code> to the bytes message stream as a 1-byte value. The value <code>true</code> is
0:      * written as the value <code>(byte)1</code>; the value <code>false</code> is written as the value
0:      * <code>(byte)0</code>.
0:      *
1:      * @param value the <code>boolean</code> value to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeBoolean(boolean value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.writeBoolean(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
0:      * Writes a <code>byte</code> to the bytes message stream as a 1-byte value.
0:      *
1:      * @param value the <code>byte</code> value to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeByte(byte value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.writeByte(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
0:      * Writes a <code>short</code> to the bytes message stream as two bytes, high byte first.
0:      *
1:      * @param value the <code>short</code> to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeShort(short value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.writeShort(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
0:      * Writes a <code>char</code> to the bytes message stream as a 2-byte value, high byte first.
0:      *
1:      * @param value the <code>char</code> value to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeChar(char value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.writeChar(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
0:      * Writes an <code>int</code> to the bytes message stream as four bytes, high byte first.
0:      *
1:      * @param value the <code>int</code> to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeInt(int value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.writeInt(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
0:      * Writes a <code>long</code> to the bytes message stream as eight bytes, high byte first.
0:      *
1:      * @param value the <code>long</code> to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeLong(long value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.writeLong(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
0:      * Converts the <code>float</code> argument to an <code>int</code> using the <code>floatToIntBits</code> method in
0:      * class <code>Float</code>, and then writes that <code>int</code> value to the bytes message stream as a 4-byte
0:      * quantity, high byte first.
0:      *
1:      * @param value the <code>float</code> value to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeFloat(float value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.writeFloat(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
0:      * Converts the <code>double</code> argument to a <code>long</code> using the <code>doubleToLongBits</code> method
0:      * in class <code>Double</code>, and then writes that <code>long</code> value to the bytes message stream as an
0:      * 8-byte quantity, high byte first.
0:      *
1:      * @param value the <code>double</code> value to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeDouble(double value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.writeDouble(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
0:      * Writes a string to the bytes message stream using UTF-8 encoding in a machine-independent manner. <P> For more
0:      * information on the UTF-8 format, see "File System Safe UCS Transformation Format (FSS_UTF)", X/Open Preliminary
0:      * Specification, X/Open Company Ltd., Document Number: P316. This information also appears in ISO/IEC 10646, Annex
0:      * P.
0:      *
1:      * @param value the <code>String</code> value to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeUTF(String value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.writeUTF(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a byte array to the bytes message stream.
0:      *
1:      * @param value the byte array to be written
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeBytes(byte[] value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.write(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a portion of a byte array to the bytes message stream.
0:      *
0:      * @param value  the byte array value to be written
1:      * @param offset the initial offset within the byte array
1:      * @param length the number of bytes to use
0:      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:      */
1:     public void writeBytes(byte[] value, int offset, int length) throws JMSException {
1:         initializeWriting();
1:         try {
1:             this.dataOut.write(value, offset, length);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
0:      * Writes an object to the bytes message stream. <P> This method works only for the objectified primitive object
0:      * types (<code>Integer</code>,<code>Double</code>, <code>Long</code> &nbsp;...), <code>String</code> objects, and
0:      * byte arrays.
0:      *
0:      * @param value the object in the Java programming language ("Java object") to be written; it must not be null
0:      * @throws JMSException                   if the JMS provider fails to write the message due to some internal
0:      *                                        error.
0:      * @throws MessageFormatException         if the object is of an invalid type.
0:      * @throws MessageNotWriteableException   if the message is in read-only mode.
0:      * @throws java.lang.NullPointerException if the parameter <code>value</code> is null.
1:      */
1:     public void writeObject(Object value) throws JMSException {
1:         if (value == null) {
1:             throw new NullPointerException();
1:         }
1:         initializeWriting();
1:         if (value instanceof Boolean) {
0:             writeBoolean(((Boolean) value).booleanValue());
1:         } else if (value instanceof Character) {
0:             writeChar(((Character) value).charValue());
1:         } else if (value instanceof Byte) {
0:             writeByte(((Byte) value).byteValue());
1:         } else if (value instanceof Short) {
0:             writeShort(((Short) value).shortValue());
1:         } else if (value instanceof Integer) {
0:             writeInt(((Integer) value).intValue());
1:         } else if (value instanceof Long) {
0:             writeLong(((Long) value).longValue());
1:         } else if (value instanceof Float) {
0:             writeFloat(((Float) value).floatValue());
1:         } else if (value instanceof Double) {
0:             writeDouble(((Double) value).doubleValue());
1:         } else if (value instanceof String) {
1:             writeUTF(value.toString());
1:         } else if (value instanceof byte[]) {
0:             writeBytes((byte[]) value);
1:         } else {
1:             throw new MessageFormatException("Cannot write non-primitive type:" + value.getClass());
1:         }
1:     }
1: 
1:     /**
0:      * Puts the message body in read-only mode and repositions the stream of bytes to the beginning.
0:      *
1:      * @throws JMSException if an internal error occurs
1:      */
1:     public void reset() throws JMSException {
1:         storeContent();
1:         this.bytesOut = null;
1:         this.dataIn = null;
1:         this.dataOut = null;
1:         setReadOnlyBody(true);
1:     }
1: 
1:     private void initializeWriting() throws JMSException {
1:         checkReadOnlyBody();
1:         if (this.dataOut == null) {
1:             this.bytesOut = new ByteArrayOutputStream();
1:             OutputStream os = bytesOut;
0:             ActiveMQConnection connection = getConnection();
0:             if( connection!=null && connection.isUseCompression() ) {
0:                 // keep track of the real length of the content if
0:                 // we are compressed.
1:                 try {
0:                     os.write(new byte[4]);
1:                 } catch (IOException e) {
0:                     throw JMSExceptionSupport.create(e);
1:                 }
0:                 length=0;
0:                 compressed = true;
0:                 Deflater deflater = new Deflater(Deflater.BEST_SPEED);
0:                 os = new FilterOutputStream(new DeflaterOutputStream(os,deflater)) {
0:                     public void write(byte[] arg0) throws IOException {
0:                         length+=arg0.length;
0:                         out.write(arg0);
1:                     }
0:                     public void write(byte[] arg0, int arg1, int arg2) throws IOException {
0:                         length+=arg2;
0:                         out.write(arg0, arg1, arg2);
1:                     }
0:                     public void write(int arg0) throws IOException {
0:                         length++;
0:                         out.write(arg0);
1:                     }
0:                 };
1:             }
1:             this.dataOut = new DataOutputStream(os);
1:         }
1:     }
1:     
1:     protected void checkWriteOnlyBody() throws MessageNotReadableException {
1:         if (!readOnlyBody) {
1:             throw new MessageNotReadableException("Message body is write-only");
1:         }
1:     }
1: 
1:     private void initializeReading() throws JMSException {
1:         checkWriteOnlyBody();
0:         if (dataIn == null ) {
0:             ByteSequence data = getContent();
0:             if( data==null )
0:                 data = new ByteSequence(new byte[]{}, 0, 0);
0:             InputStream is = new ByteArrayInputStream(data);
0:             if( isCompressed() ) {
0:                 // keep track of the real length of the content if
0:                 // we are compressed.
1:                 try {
0:                     DataInputStream dis = new DataInputStream(is);
0:                     length = dis.readInt();
0:                     dis.close();
1:                 } catch (IOException e) {
0:                     throw JMSExceptionSupport.create(e);
1:                 }
0:                 is = new InflaterInputStream(is);
1:             } else {
0:                 length = data.getLength();
1:             }
0:             dataIn = new DataInputStream(is);
1:         }
1:     }
1:     
1:     public void setObjectProperty(String name, Object value) throws JMSException {
1:         initializeWriting();
1:         super.setObjectProperty(name, value);
1:     }
1: 
1:     public String toString() {
0:         return super.toString() + " ActiveMQBytesMessage{ " +
0:                 "bytesOut = " + bytesOut +
0:                 ", dataOut = " + dataOut +
0:                 ", dataIn = " + dataIn +
0:                 " }";
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a0b0176
/////////////////////////////////////////////////////////////////////////
0:                 final Deflater deflater = new Deflater(Deflater.BEST_SPEED);
/////////////////////////////////////////////////////////////////////////
0: 
0:                     @Override
0:                     public void close() throws IOException {
0:                         deflater.end();
0:                         super.close();
0:                     }
author:James Strachan
-------------------------------------------------------------------------------
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String getJMSXMimeType() {
1:         return "jms/bytes-message";
0:     }
0: 
commit:8cf4795
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.*;
0: 
0: import javax.jms.*;
0: import java.io.*;
0: import java.util.zip.Deflater;
0: import java.util.zip.DeflaterOutputStream;
0: import java.util.zip.InflaterInputStream;
/////////////////////////////////////////////////////////////////////////
1:     public void onSend() throws JMSException {
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code=24
============================================================================