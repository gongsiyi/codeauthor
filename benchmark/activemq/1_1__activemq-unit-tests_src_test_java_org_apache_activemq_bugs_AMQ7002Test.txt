1:e0aa091: /*
1:e0aa091:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e0aa091:  * contributor license agreements.  See the NOTICE file distributed with
1:e0aa091:  * this work for additional information regarding copyright ownership.
1:e0aa091:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e0aa091:  * (the "License"); you may not use this file except in compliance with
1:e0aa091:  * the License.  You may obtain a copy of the License at
1:e0aa091:  *
1:e0aa091:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e0aa091:  *
1:e0aa091:  * Unless required by applicable law or agreed to in writing, software
1:e0aa091:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e0aa091:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e0aa091:  * See the License for the specific language governing permissions and
1:e0aa091:  * limitations under the License.
1:e0aa091:  */
1:e0aa091: 
1:e0aa091: package org.apache.activemq.bugs;
1:e0aa091: 
1:e0aa091: import org.apache.activemq.ActiveMQConnection;
1:e0aa091: import org.apache.activemq.ActiveMQConnectionFactory;
1:e0aa091: import org.apache.activemq.RedeliveryPolicy;
1:e0aa091: import org.apache.activemq.broker.BrokerPlugin;
1:e0aa091: import org.apache.activemq.broker.BrokerService;
1:e0aa091: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1:e0aa091: import org.apache.activemq.broker.scheduler.Job;
1:e0aa091: import org.apache.activemq.broker.scheduler.JobScheduler;
1:e0aa091: import org.apache.activemq.broker.util.RedeliveryPlugin;
1:e0aa091: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1:e0aa091: import org.apache.activemq.util.IOHelper;
1:e0aa091: import org.junit.After;
1:e0aa091: import org.junit.Before;
1:e0aa091: import org.junit.Test;
1:e0aa091: import org.slf4j.Logger;
1:e0aa091: import org.slf4j.LoggerFactory;
1:e0aa091: import javax.jms.*;
1:e0aa091: import java.io.File;
1:e0aa091: import java.util.List;
1:e0aa091: import static junit.framework.TestCase.assertNotNull;
1:e0aa091: import static org.junit.Assert.*;
1:e0aa091: 
1:e0aa091: public class AMQ7002Test {
1:e0aa091:     static final Logger LOG = LoggerFactory.getLogger(AMQ7002Test.class);
1:e0aa091:     protected ActiveMQConnection connection;
1:e0aa091:     protected ActiveMQConnectionFactory connectionFactory;
1:e0aa091:     private BrokerService brokerService;
1:e0aa091:     private JobSchedulerStoreImpl store;
1:e0aa091: 
1:e0aa091:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:e0aa091:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:e0aa091:     }
1:e0aa091:     protected Connection createConnection() throws Exception {
1:e0aa091:         return getConnectionFactory().createConnection();
1:e0aa091:     }
1:e0aa091:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:e0aa091:         if (connectionFactory == null) {
1:e0aa091:             connectionFactory = createConnectionFactory();
1:e0aa091:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:e0aa091:         }
1:e0aa091:         return connectionFactory;
1:e0aa091:     }
1:e0aa091:     protected BrokerService createBroker() throws Exception {
1:e0aa091:         File directory = new File("target/test/ScheduledJobsDB");
1:e0aa091:         IOHelper.mkdirs(directory);
1:e0aa091:         IOHelper.deleteChildren(directory);
1:e0aa091:         createSchedulerStore(directory);
1:e0aa091: 
1:e0aa091:         BrokerService service = new BrokerService();
1:e0aa091:         service.setPersistent(true);
1:e0aa091:         service.setUseJmx(false);
1:e0aa091:         service.setJobSchedulerStore(store);
1:e0aa091:         service.setSchedulerSupport(true);
1:e0aa091:         service.setDeleteAllMessagesOnStartup(true);
1:e0aa091:         RedeliveryPlugin redeliveryPlugin = new RedeliveryPlugin();
1:e0aa091:         RedeliveryPolicy brokerRedeliveryPolicy = new RedeliveryPolicy();
1:e0aa091:         brokerRedeliveryPolicy.setInitialRedeliveryDelay(60000);
1:e0aa091:         brokerRedeliveryPolicy.setMaximumRedeliveries(20);
1:e0aa091:         brokerRedeliveryPolicy.setMaximumRedeliveryDelay(300000);
1:e0aa091:         brokerRedeliveryPolicy.setBackOffMultiplier(2);
1:e0aa091:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:e0aa091:         redeliveryPolicyMap.setDefaultEntry(brokerRedeliveryPolicy);
1:e0aa091:         redeliveryPlugin.setRedeliveryPolicyMap(redeliveryPolicyMap);
1:e0aa091:         service.setPlugins(new BrokerPlugin[]{redeliveryPlugin});
1:e0aa091:         service.start();
1:e0aa091:         service.waitUntilStarted();
1:e0aa091:         return service;
1:e0aa091:     }
1:e0aa091:     protected ConsumerObject getConsumer(int id) throws Exception {
1:e0aa091:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:e0aa091:         redeliveryPolicy.setInitialRedeliveryDelay(0);
1:e0aa091:         redeliveryPolicy.setMaximumRedeliveries(0);
1:e0aa091:         ActiveMQConnection consumerConnection = (ActiveMQConnection) createConnection();
1:e0aa091:         consumerConnection.setRedeliveryPolicy(redeliveryPolicy);
1:e0aa091:         consumerConnection.start();
1:e0aa091:         Session consumerSession = consumerConnection.createSession(true, Session.SESSION_TRANSACTED);
1:e0aa091:         MessageConsumer consumer = consumerSession.createConsumer(consumerSession.createQueue("Consumer." + id + ".VirtualTopic.Orders"));
1:e0aa091:         LOG.info(consumer.toString());
1:e0aa091:         ConsumerObject co = new ConsumerObject(consumerSession, consumer, consumerConnection);
1:e0aa091:         return co;
1:e0aa091:     }
1:e0aa091:     @Before
1:e0aa091:     public void before() throws Exception {
1:e0aa091:         brokerService = createBroker();
1:e0aa091:     }
1:e0aa091:     @After
1:e0aa091:     public void after() throws Exception {
1:e0aa091:         brokerService.stop();
1:e0aa091:         brokerService.waitUntilStopped();
1:e0aa091:     }
1:e0aa091:     @Test
1:e0aa091:     public void TestDuplicateJobIDs() throws Exception {
1:e0aa091:         ConsumerObject consumer1 = getConsumer(1);
1:e0aa091:         ConsumerObject consumer2 = getConsumer(2);
1:e0aa091:         ActiveMQConnection producerConnection = (ActiveMQConnection) createConnection();
1:e0aa091:         producerConnection.start();
1:e0aa091:         //Session session = producerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:e0aa091:         Session session = producerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:e0aa091:         Destination dest = session.createTopic("VirtualTopic.Orders");
1:e0aa091:         MessageProducer producer = session.createProducer(dest);
1:e0aa091:         TextMessage msg = session.createTextMessage("Test Me");
1:e0aa091:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:e0aa091:         producer.send(msg);
1:e0aa091:         Message message1 = consumer1.getConsumer().receive();
1:e0aa091:         assertNotNull("got message", message1);
1:e0aa091:         LOG.info("got: " + message1);
1:e0aa091:         Message message2 = consumer2.getConsumer().receive();
1:e0aa091:         assertNotNull("got message", message2);
1:e0aa091:         LOG.info("got: " + message2);
1:e0aa091:         //Force rollback
1:e0aa091:         consumer1.getSession().rollback();
1:e0aa091:         consumer2.getSession().rollback();
1:e0aa091:         // Check the scheduled jobs here //
1:e0aa091:         Thread.sleep(2000);
1:e0aa091:         JobScheduler js = brokerService.getJobSchedulerStore().getJobScheduler("JMS");
1:e0aa091:         List<Job> jobList = js.getAllJobs();
1:e0aa091:         assertNotNull(jobList);
1:e0aa091:         assertEquals(2, jobList.size());
1:e0aa091:         String jobId1 = jobList.get(0).getJobId();
1:e0aa091:         String jobId2 = jobList.get(1).getJobId();
1:e0aa091:         assertFalse("FAIL: JobIDs are duplicates!",jobId1.equals(jobId2));
1:e0aa091:     }
1:e0aa091:     private class ConsumerObject {
1:e0aa091:         Session session;
1:e0aa091:         MessageConsumer consumer;
1:e0aa091:         Connection connection;
1:e0aa091:         public ConsumerObject(Session session, MessageConsumer consumer, Connection connection) {
1:e0aa091:             this.session = session;
1:e0aa091:             this.consumer = consumer;
1:e0aa091:             this.connection = connection;
1:e0aa091:         }
1:e0aa091:         public Session getSession() {
1:e0aa091:             return session;
1:e0aa091:         }
1:e0aa091:         public void setSession(Session session) {
1:e0aa091:             this.session = session;
1:e0aa091:         }
1:e0aa091:         public MessageConsumer getConsumer() {
1:e0aa091:             return consumer;
1:e0aa091:         }
1:e0aa091:         public void setConsumer(MessageConsumer consumer) {
1:e0aa091:             this.consumer = consumer;
1:e0aa091:         }
1:e0aa091:         public Connection getConnection() {
1:e0aa091:             return connection;
1:e0aa091:         }
1:e0aa091:         public void setConnection(Connection connection) {
1:e0aa091:             this.connection = connection;
1:e0aa091:         }
1:e0aa091:     }
1:e0aa091: 
1:e0aa091:     protected void createSchedulerStore(File directory) throws Exception {
1:e0aa091:         store = new JobSchedulerStoreImpl();
1:e0aa091:         store.setDirectory(directory);
1:e0aa091:         store.setCheckpointInterval(5000);
1:e0aa091:         store.setCleanupInterval(10000);
1:e0aa091:         //store.setJournalMaxFileLength(10 * 1024);
1:e0aa091:     }
1:e0aa091: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e0aa091
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1: import org.apache.activemq.broker.scheduler.Job;
1: import org.apache.activemq.broker.scheduler.JobScheduler;
1: import org.apache.activemq.broker.util.RedeliveryPlugin;
1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import javax.jms.*;
1: import java.io.File;
1: import java.util.List;
1: import static junit.framework.TestCase.assertNotNull;
1: import static org.junit.Assert.*;
1: 
1: public class AMQ7002Test {
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ7002Test.class);
1:     protected ActiveMQConnection connection;
1:     protected ActiveMQConnectionFactory connectionFactory;
1:     private BrokerService brokerService;
1:     private JobSchedulerStoreImpl store;
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:     }
1:     protected Connection createConnection() throws Exception {
1:         return getConnectionFactory().createConnection();
1:     }
1:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:         if (connectionFactory == null) {
1:             connectionFactory = createConnectionFactory();
1:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:         }
1:         return connectionFactory;
1:     }
1:     protected BrokerService createBroker() throws Exception {
1:         File directory = new File("target/test/ScheduledJobsDB");
1:         IOHelper.mkdirs(directory);
1:         IOHelper.deleteChildren(directory);
1:         createSchedulerStore(directory);
1: 
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(true);
1:         service.setUseJmx(false);
1:         service.setJobSchedulerStore(store);
1:         service.setSchedulerSupport(true);
1:         service.setDeleteAllMessagesOnStartup(true);
1:         RedeliveryPlugin redeliveryPlugin = new RedeliveryPlugin();
1:         RedeliveryPolicy brokerRedeliveryPolicy = new RedeliveryPolicy();
1:         brokerRedeliveryPolicy.setInitialRedeliveryDelay(60000);
1:         brokerRedeliveryPolicy.setMaximumRedeliveries(20);
1:         brokerRedeliveryPolicy.setMaximumRedeliveryDelay(300000);
1:         brokerRedeliveryPolicy.setBackOffMultiplier(2);
1:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:         redeliveryPolicyMap.setDefaultEntry(brokerRedeliveryPolicy);
1:         redeliveryPlugin.setRedeliveryPolicyMap(redeliveryPolicyMap);
1:         service.setPlugins(new BrokerPlugin[]{redeliveryPlugin});
1:         service.start();
1:         service.waitUntilStarted();
1:         return service;
1:     }
1:     protected ConsumerObject getConsumer(int id) throws Exception {
1:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:         redeliveryPolicy.setInitialRedeliveryDelay(0);
1:         redeliveryPolicy.setMaximumRedeliveries(0);
1:         ActiveMQConnection consumerConnection = (ActiveMQConnection) createConnection();
1:         consumerConnection.setRedeliveryPolicy(redeliveryPolicy);
1:         consumerConnection.start();
1:         Session consumerSession = consumerConnection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = consumerSession.createConsumer(consumerSession.createQueue("Consumer." + id + ".VirtualTopic.Orders"));
1:         LOG.info(consumer.toString());
1:         ConsumerObject co = new ConsumerObject(consumerSession, consumer, consumerConnection);
1:         return co;
1:     }
1:     @Before
1:     public void before() throws Exception {
1:         brokerService = createBroker();
1:     }
1:     @After
1:     public void after() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1:     @Test
1:     public void TestDuplicateJobIDs() throws Exception {
1:         ConsumerObject consumer1 = getConsumer(1);
1:         ConsumerObject consumer2 = getConsumer(2);
1:         ActiveMQConnection producerConnection = (ActiveMQConnection) createConnection();
1:         producerConnection.start();
1:         //Session session = producerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Session session = producerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Destination dest = session.createTopic("VirtualTopic.Orders");
1:         MessageProducer producer = session.createProducer(dest);
1:         TextMessage msg = session.createTextMessage("Test Me");
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         producer.send(msg);
1:         Message message1 = consumer1.getConsumer().receive();
1:         assertNotNull("got message", message1);
1:         LOG.info("got: " + message1);
1:         Message message2 = consumer2.getConsumer().receive();
1:         assertNotNull("got message", message2);
1:         LOG.info("got: " + message2);
1:         //Force rollback
1:         consumer1.getSession().rollback();
1:         consumer2.getSession().rollback();
1:         // Check the scheduled jobs here //
1:         Thread.sleep(2000);
1:         JobScheduler js = brokerService.getJobSchedulerStore().getJobScheduler("JMS");
1:         List<Job> jobList = js.getAllJobs();
1:         assertNotNull(jobList);
1:         assertEquals(2, jobList.size());
1:         String jobId1 = jobList.get(0).getJobId();
1:         String jobId2 = jobList.get(1).getJobId();
1:         assertFalse("FAIL: JobIDs are duplicates!",jobId1.equals(jobId2));
1:     }
1:     private class ConsumerObject {
1:         Session session;
1:         MessageConsumer consumer;
1:         Connection connection;
1:         public ConsumerObject(Session session, MessageConsumer consumer, Connection connection) {
1:             this.session = session;
1:             this.consumer = consumer;
1:             this.connection = connection;
1:         }
1:         public Session getSession() {
1:             return session;
1:         }
1:         public void setSession(Session session) {
1:             this.session = session;
1:         }
1:         public MessageConsumer getConsumer() {
1:             return consumer;
1:         }
1:         public void setConsumer(MessageConsumer consumer) {
1:             this.consumer = consumer;
1:         }
1:         public Connection getConnection() {
1:             return connection;
1:         }
1:         public void setConnection(Connection connection) {
1:             this.connection = connection;
1:         }
1:     }
1: 
1:     protected void createSchedulerStore(File directory) throws Exception {
1:         store = new JobSchedulerStoreImpl();
1:         store.setDirectory(directory);
1:         store.setCheckpointInterval(5000);
1:         store.setCleanupInterval(10000);
1:         //store.setJournalMaxFileLength(10 * 1024);
1:     }
1: }
============================================================================