1:cb1d21f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:cb1d21f:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cb1d21f:  *
1:cb1d21f:  * Unless required by applicable law or agreed to in writing, software
1:cb1d21f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cb1d21f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cb1d21f:  * See the License for the specific language governing permissions and
1:cb1d21f:  * limitations under the License.
1:cb1d21f:  */
1:cb1d21f: package org.apache.activemq.advisory;
13:cb1d21f: 
1:74a7a8b: import java.util.concurrent.ArrayBlockingQueue;
1:74a7a8b: import java.util.concurrent.BlockingQueue;
1:74a7a8b: import java.util.concurrent.TimeUnit;
1:74a7a8b: 
1:cb1d21f: import javax.jms.Connection;
1:cb1d21f: import javax.jms.Destination;
1:cb1d21f: import javax.jms.JMSException;
1:cb1d21f: import javax.jms.Message;
1:cb1d21f: import javax.jms.MessageConsumer;
1:cb1d21f: import javax.jms.MessageListener;
1:cb1d21f: import javax.jms.Session;
1:cb1d21f: import javax.jms.Topic;
1:cb1d21f: 
1:cb1d21f: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:cb1d21f: import org.apache.activemq.broker.region.RegionBroker;
1:cb1d21f: import org.apache.activemq.command.ActiveMQTempQueue;
1:cb1d21f: import org.apache.activemq.command.ActiveMQTempTopic;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:cb1d21f: 
1:cb1d21f: /**
1:0bbc0ac:  * 
1:cb1d21f:  */
1:cb1d21f: public class TempDestDeleteTest extends EmbeddedBrokerTestSupport implements ConsumerListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TempDestDeleteTest.class);
1:cb1d21f: 
1:cb1d21f:     protected int consumerCounter;
1:cb1d21f:     protected ConsumerEventSource topicConsumerEventSource;
1:933eb2f:     protected BlockingQueue<ConsumerEvent> eventQueue = new ArrayBlockingQueue<ConsumerEvent>(1000);
1:933eb2f:     
1:cb1d21f:     private ConsumerEventSource queueConsumerEventSource;
1:cb1d21f:     private Connection connection;
1:cb1d21f:     private Session session;
1:cb1d21f:     private ActiveMQTempTopic tempTopic;
1:cb1d21f:     private ActiveMQTempQueue tempQueue;
1:cb1d21f: 
1:cb1d21f:     public void testDeleteTempTopicDeletesAvisoryTopics() throws Exception {
1:cb1d21f:         topicConsumerEventSource.start();
1:cb1d21f: 
1:cb1d21f:         MessageConsumer consumer = createConsumer(tempTopic);
1:cb1d21f:         assertConsumerEvent(1, true);
1:cb1d21f: 
1:cb1d21f:         Topic advisoryTopic = AdvisorySupport.getConsumerAdvisoryTopic(tempTopic);
1:ecf89a6:         assertTrue(destinationExists(advisoryTopic));
1:ecf89a6: 
1:cb1d21f:         consumer.close();
1:ecf89a6: 
1:ecf89a6:         // Once we delete the topic, the advisory topic for the destination
1:ecf89a6:         // should also be deleted.
1:cb1d21f:         tempTopic.delete();
1:ecf89a6: 
1:ecf89a6:         assertFalse(destinationExists(advisoryTopic));
1:cb1d21f:     }
1:cb1d21f: 
1:cb1d21f:     public void testDeleteTempQueueDeletesAvisoryTopics() throws Exception {
1:cb1d21f:         queueConsumerEventSource.start();
1:cb1d21f: 
1:cb1d21f:         MessageConsumer consumer = createConsumer(tempQueue);
1:cb1d21f:         assertConsumerEvent(1, true);
1:cb1d21f: 
1:cb1d21f:         Topic advisoryTopic = AdvisorySupport.getConsumerAdvisoryTopic(tempQueue);
1:ecf89a6:         assertTrue(destinationExists(advisoryTopic));
1:ecf89a6: 
1:cb1d21f:         consumer.close();
1:ecf89a6: 
1:ecf89a6:         // Once we delete the queue, the advisory topic for the destination
1:ecf89a6:         // should also be deleted.
1:cb1d21f:         tempQueue.delete();
1:ecf89a6: 
1:ecf89a6:         assertFalse(destinationExists(advisoryTopic));
1:cb1d21f:     }
1:cb1d21f: 
1:cb1d21f:     private boolean destinationExists(Destination dest) throws Exception {
1:ecf89a6:         RegionBroker rb = (RegionBroker)broker.getBroker().getAdaptor(RegionBroker.class);
1:ecf89a6:         return rb.getTopicRegion().getDestinationMap().containsKey(dest) || rb.getQueueRegion().getDestinationMap().containsKey(dest)
1:ecf89a6:                || rb.getTempTopicRegion().getDestinationMap().containsKey(dest) || rb.getTempQueueRegion().getDestinationMap().containsKey(dest);
1:cb1d21f:     }
1:cb1d21f: 
1:cb1d21f:     public void onConsumerEvent(ConsumerEvent event) {
1:cb1d21f:         eventQueue.add(event);
1:cb1d21f:     }
1:cb1d21f: 
1:cb1d21f:     protected void setUp() throws Exception {
1:cb1d21f:         super.setUp();
1:cb1d21f:         connection = createConnection();
1:cb1d21f:         connection.start();
1:ecf89a6: 
1:a881781:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ecf89a6: 
1:ecf89a6:         tempTopic = (ActiveMQTempTopic)session.createTemporaryTopic();
1:cb1d21f:         topicConsumerEventSource = new ConsumerEventSource(connection, tempTopic);
1:cb1d21f:         topicConsumerEventSource.setConsumerListener(this);
1:ecf89a6: 
1:ecf89a6:         tempQueue = (ActiveMQTempQueue)session.createTemporaryQueue();
1:cb1d21f:         queueConsumerEventSource = new ConsumerEventSource(connection, tempQueue);
1:cb1d21f:         queueConsumerEventSource.setConsumerListener(this);
1:cb1d21f:     }
1:cb1d21f: 
1:cb1d21f:     protected void tearDown() throws Exception {
1:cb1d21f:         if (connection != null) {
1:cb1d21f:             connection.close();
1:cb1d21f:         }
1:cb1d21f:         super.tearDown();
1:cb1d21f:     }
1:cb1d21f: 
1:cb1d21f:     protected void assertConsumerEvent(int count, boolean started) throws InterruptedException {
1:cb1d21f:         ConsumerEvent event = waitForConsumerEvent();
1:cb1d21f:         assertEquals("Consumer count", count, event.getConsumerCount());
1:cb1d21f:         assertEquals("started", started, event.isStarted());
1:cb1d21f:     }
1:cb1d21f: 
1:cb1d21f:     protected MessageConsumer createConsumer(Destination dest) throws JMSException {
1:cb1d21f:         final String consumerText = "Consumer: " + (++consumerCounter);
1:230a86c:         LOG.info("Creating consumer: " + consumerText + " on destination: " + dest);
1:ecf89a6: 
1:cb1d21f:         MessageConsumer consumer = session.createConsumer(dest);
1:cb1d21f:         consumer.setMessageListener(new MessageListener() {
1:cb1d21f:             public void onMessage(Message message) {
1:230a86c:                 LOG.info("Received message by: " + consumerText + " message: " + message);
1:cb1d21f:             }
1:cb1d21f:         });
1:cb1d21f:         return consumer;
1:cb1d21f:     }
1:cb1d21f: 
1:cb1d21f:     protected ConsumerEvent waitForConsumerEvent() throws InterruptedException {
1:933eb2f:         ConsumerEvent answer = eventQueue.poll(1000, TimeUnit.MILLISECONDS);
1:cb1d21f:         assertTrue("Should have received a consumer event!", answer != null);
1:cb1d21f:         return answer;
1:cb1d21f:     }
1:cb1d21f: 
1:cb1d21f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected BlockingQueue<ConsumerEvent> eventQueue = new ArrayBlockingQueue<ConsumerEvent>(1000);
1:     
/////////////////////////////////////////////////////////////////////////
1:         ConsumerEvent answer = eventQueue.poll(1000, TimeUnit.MILLISECONDS);
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(destinationExists(advisoryTopic));
1: 
1: 
1:         // Once we delete the topic, the advisory topic for the destination
1:         // should also be deleted.
1: 
1:         assertFalse(destinationExists(advisoryTopic));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(destinationExists(advisoryTopic));
1: 
1: 
1:         // Once we delete the queue, the advisory topic for the destination
1:         // should also be deleted.
1: 
1:         assertFalse(destinationExists(advisoryTopic));
1:         RegionBroker rb = (RegionBroker)broker.getBroker().getAdaptor(RegionBroker.class);
1:         return rb.getTopicRegion().getDestinationMap().containsKey(dest) || rb.getQueueRegion().getDestinationMap().containsKey(dest)
1:                || rb.getTempTopicRegion().getDestinationMap().containsKey(dest) || rb.getTempQueueRegion().getDestinationMap().containsKey(dest);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         tempTopic = (ActiveMQTempTopic)session.createTemporaryTopic();
1: 
1:         tempQueue = (ActiveMQTempQueue)session.createTemporaryQueue();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         ConsumerEvent answer = (ConsumerEvent)eventQueue.poll(1000, TimeUnit.MILLISECONDS);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(TempDestDeleteTest.class);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ArrayBlockingQueue;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Creating consumer: " + consumerText + " on destination: " + dest);
1:                 LOG.info("Received message by: " + consumerText + " message: " + message);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ArrayBlockingQueue;
0: import java.util.concurrent.BlockingQueue;
0: import java.util.concurrent.TimeUnit;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:cb1d21f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQTempQueue;
1: import org.apache.activemq.command.ActiveMQTempTopic;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue;
0: import edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * 
0:  * @version $Revision: 397249 $
1:  */
1: public class TempDestDeleteTest extends EmbeddedBrokerTestSupport implements ConsumerListener {
1: 
1:     protected int consumerCounter;
1:     protected ConsumerEventSource topicConsumerEventSource;
1:     private ConsumerEventSource queueConsumerEventSource;
1: 
0:     protected BlockingQueue eventQueue = new ArrayBlockingQueue(1000);
1:     private Connection connection;
1:     private Session session;
1:     private ActiveMQTempTopic tempTopic;
1:     private ActiveMQTempQueue tempQueue;
1: 
1:     public void testDeleteTempTopicDeletesAvisoryTopics() throws Exception {
1:         topicConsumerEventSource.start();
1: 
1:         MessageConsumer consumer = createConsumer(tempTopic);
1:         assertConsumerEvent(1, true);
1: 
1:         Topic advisoryTopic = AdvisorySupport.getConsumerAdvisoryTopic(tempTopic);
0:         assertTrue( destinationExists(advisoryTopic) );
1:         
1:         consumer.close();
1:         
0:         // Once we delete the topic, the advisory topic for the destination should also be deleted.
1:         tempTopic.delete();
1:         
0:         assertFalse( destinationExists(advisoryTopic) );
1:     }
1: 
1:     public void testDeleteTempQueueDeletesAvisoryTopics() throws Exception {
1:         queueConsumerEventSource.start();
1: 
1:         MessageConsumer consumer = createConsumer(tempQueue);
1:         assertConsumerEvent(1, true);
1: 
1:         Topic advisoryTopic = AdvisorySupport.getConsumerAdvisoryTopic(tempQueue);
0:         assertTrue( destinationExists(advisoryTopic) );
1:         
1:         consumer.close();
1:         
0:         // Once we delete the queue, the advisory topic for the destination should also be deleted.
1:         tempQueue.delete();
1:         
0:         assertFalse( destinationExists(advisoryTopic) );
1:     }
1: 
1:     private boolean destinationExists(Destination dest) throws Exception {
0:         RegionBroker rb = (RegionBroker) broker.getBroker().getAdaptor(RegionBroker.class);
0:         return rb.getTopicRegion().getDestinationMap().containsKey(dest)
0:                 || rb.getQueueRegion().getDestinationMap().containsKey(dest)
0:                 || rb.getTempTopicRegion().getDestinationMap().containsKey(dest)
0:                 || rb.getTempQueueRegion().getDestinationMap().containsKey(dest);
1:     }
1: 
1:     public void onConsumerEvent(ConsumerEvent event) {
1:         eventQueue.add(event);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         connection = createConnection();
1:         connection.start();
1:         
0:         session = connection.createSession(false, 0);
1:         
0:         tempTopic = (ActiveMQTempTopic) session.createTemporaryTopic();
1:         topicConsumerEventSource = new ConsumerEventSource(connection, tempTopic);
1:         topicConsumerEventSource.setConsumerListener(this);
1:     
0:         tempQueue = (ActiveMQTempQueue) session.createTemporaryQueue();
1:         queueConsumerEventSource = new ConsumerEventSource(connection, tempQueue);
1:         queueConsumerEventSource.setConsumerListener(this);
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected void assertConsumerEvent(int count, boolean started) throws InterruptedException {
1:         ConsumerEvent event = waitForConsumerEvent();
1:         assertEquals("Consumer count", count, event.getConsumerCount());
1:         assertEquals("started", started, event.isStarted());
1:     }
1: 
1:     protected MessageConsumer createConsumer(Destination dest) throws JMSException {
1:         final String consumerText = "Consumer: " + (++consumerCounter);
0:         log.info("Creating consumer: " + consumerText + " on destination: " + dest);
1:         
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
0:                 log.info("Received message by: " + consumerText + " message: " + message);
1:             }
1:         });
1:         return consumer;
1:     }
1: 
1:     protected ConsumerEvent waitForConsumerEvent() throws InterruptedException {
0:         ConsumerEvent answer = (ConsumerEvent) eventQueue.poll(1000, TimeUnit.MILLISECONDS);
1:         assertTrue("Should have received a consumer event!", answer != null);
1:         return answer;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TempDestDeleteTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:a881781
/////////////////////////////////////////////////////////////////////////
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
============================================================================