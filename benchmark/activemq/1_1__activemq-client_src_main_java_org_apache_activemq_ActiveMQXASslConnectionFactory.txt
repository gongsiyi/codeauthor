1:016ae05: /**
1:016ae05:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:016ae05:  * contributor license agreements.  See the NOTICE file distributed with
1:016ae05:  * this work for additional information regarding copyright ownership.
1:016ae05:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:016ae05:  * (the "License"); you may not use this file except in compliance with
1:016ae05:  * the License.  You may obtain a copy of the License at
1:016ae05:  *
1:016ae05:  *      http://www.apache.org/licenses/LICENSE-2.0
1:016ae05:  *
1:016ae05:  * Unless required by applicable law or agreed to in writing, software
1:016ae05:  * distributed under the License is distributed on an "AS IS" BASIS,
1:016ae05:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:016ae05:  * See the License for the specific language governing permissions and
1:016ae05:  * limitations under the License.
1:016ae05:  */
1:016ae05: package org.apache.activemq;
1:016ae05: 
1:016ae05: import java.net.URI;
1:016ae05: import java.util.Properties;
1:016ae05: 
1:016ae05: import javax.jms.JMSException;
1:016ae05: import javax.jms.XAConnection;
1:016ae05: import javax.jms.XAConnectionFactory;
1:016ae05: import javax.jms.XAQueueConnection;
1:016ae05: import javax.jms.XAQueueConnectionFactory;
1:016ae05: import javax.jms.XATopicConnection;
1:016ae05: import javax.jms.XATopicConnectionFactory;
1:016ae05: 
1:016ae05: import org.apache.activemq.management.JMSStatsImpl;
1:016ae05: import org.apache.activemq.transport.Transport;
1:016ae05: 
1:016ae05: public class ActiveMQXASslConnectionFactory extends ActiveMQSslConnectionFactory implements XAConnectionFactory, XAQueueConnectionFactory, XATopicConnectionFactory {
1:016ae05: 
1:016ae05:     public ActiveMQXASslConnectionFactory() {
1:016ae05:     }
1:016ae05: 
1:016ae05:     public ActiveMQXASslConnectionFactory(String brokerURL) {
1:016ae05:         super(brokerURL);
1:016ae05:     }
1:016ae05: 
1:016ae05:     public ActiveMQXASslConnectionFactory(URI brokerURL) {
1:016ae05:         super(brokerURL);
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     public XAConnection createXAConnection() throws JMSException {
1:016ae05:         return (XAConnection) createActiveMQConnection();
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     public XAConnection createXAConnection(String userName, String password) throws JMSException {
1:016ae05:         return (XAConnection) createActiveMQConnection(userName, password);
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     public XAQueueConnection createXAQueueConnection() throws JMSException {
1:016ae05:         return (XAQueueConnection) createActiveMQConnection();
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     public XAQueueConnection createXAQueueConnection(String userName, String password) throws JMSException {
1:016ae05:         return (XAQueueConnection) createActiveMQConnection(userName, password);
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     public XATopicConnection createXATopicConnection() throws JMSException {
1:016ae05:         return (XATopicConnection) createActiveMQConnection();
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     public XATopicConnection createXATopicConnection(String userName, String password) throws JMSException {
1:016ae05:         return (XATopicConnection) createActiveMQConnection(userName, password);
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     protected ActiveMQConnection createActiveMQConnection(Transport transport, JMSStatsImpl stats) throws Exception {
1:016ae05:         ActiveMQXAConnection connection = new ActiveMQXAConnection(transport, getClientIdGenerator(), getConnectionIdGenerator(), stats);
1:016ae05:         configureXAConnection(connection);
1:016ae05:         return connection;
1:016ae05:     }
1:016ae05: 
1:016ae05:     private void configureXAConnection(ActiveMQXAConnection connection) {
1:016ae05:         connection.setXaAckMode(xaAckMode);
1:016ae05:     }
1:016ae05: 
1:016ae05:     public int getXaAckMode() {
1:016ae05:         return xaAckMode;
1:016ae05:     }
1:016ae05: 
1:016ae05:     public void setXaAckMode(int xaAckMode) {
1:016ae05:         this.xaAckMode = xaAckMode;
1:016ae05:     }
1:016ae05: 
1:016ae05:     @Override
1:016ae05:     public void populateProperties(Properties props) {
1:016ae05:         super.populateProperties(props);
1:016ae05:         props.put("xaAckMode", Integer.toString(xaAckMode));
1:016ae05:     }
1:016ae05: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:016ae05
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.net.URI;
1: import java.util.Properties;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.XAConnection;
1: import javax.jms.XAConnectionFactory;
1: import javax.jms.XAQueueConnection;
1: import javax.jms.XAQueueConnectionFactory;
1: import javax.jms.XATopicConnection;
1: import javax.jms.XATopicConnectionFactory;
1: 
1: import org.apache.activemq.management.JMSStatsImpl;
1: import org.apache.activemq.transport.Transport;
1: 
1: public class ActiveMQXASslConnectionFactory extends ActiveMQSslConnectionFactory implements XAConnectionFactory, XAQueueConnectionFactory, XATopicConnectionFactory {
1: 
1:     public ActiveMQXASslConnectionFactory() {
1:     }
1: 
1:     public ActiveMQXASslConnectionFactory(String brokerURL) {
1:         super(brokerURL);
1:     }
1: 
1:     public ActiveMQXASslConnectionFactory(URI brokerURL) {
1:         super(brokerURL);
1:     }
1: 
1:     @Override
1:     public XAConnection createXAConnection() throws JMSException {
1:         return (XAConnection) createActiveMQConnection();
1:     }
1: 
1:     @Override
1:     public XAConnection createXAConnection(String userName, String password) throws JMSException {
1:         return (XAConnection) createActiveMQConnection(userName, password);
1:     }
1: 
1:     @Override
1:     public XAQueueConnection createXAQueueConnection() throws JMSException {
1:         return (XAQueueConnection) createActiveMQConnection();
1:     }
1: 
1:     @Override
1:     public XAQueueConnection createXAQueueConnection(String userName, String password) throws JMSException {
1:         return (XAQueueConnection) createActiveMQConnection(userName, password);
1:     }
1: 
1:     @Override
1:     public XATopicConnection createXATopicConnection() throws JMSException {
1:         return (XATopicConnection) createActiveMQConnection();
1:     }
1: 
1:     @Override
1:     public XATopicConnection createXATopicConnection(String userName, String password) throws JMSException {
1:         return (XATopicConnection) createActiveMQConnection(userName, password);
1:     }
1: 
1:     @Override
1:     protected ActiveMQConnection createActiveMQConnection(Transport transport, JMSStatsImpl stats) throws Exception {
1:         ActiveMQXAConnection connection = new ActiveMQXAConnection(transport, getClientIdGenerator(), getConnectionIdGenerator(), stats);
1:         configureXAConnection(connection);
1:         return connection;
1:     }
1: 
1:     private void configureXAConnection(ActiveMQXAConnection connection) {
1:         connection.setXaAckMode(xaAckMode);
1:     }
1: 
1:     public int getXaAckMode() {
1:         return xaAckMode;
1:     }
1: 
1:     public void setXaAckMode(int xaAckMode) {
1:         this.xaAckMode = xaAckMode;
1:     }
1: 
1:     @Override
1:     public void populateProperties(Properties props) {
1:         super.populateProperties(props);
1:         props.put("xaAckMode", Integer.toString(xaAckMode));
1:     }
1: }
============================================================================