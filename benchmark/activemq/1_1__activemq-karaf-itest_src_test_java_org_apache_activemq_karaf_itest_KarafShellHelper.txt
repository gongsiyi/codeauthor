1:50ea308: /**
1:50ea308:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:50ea308:  * contributor license agreements.  See the NOTICE file distributed with
1:50ea308:  * this work for additional information regarding copyright ownership.
1:50ea308:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:50ea308:  * (the "License"); you may not use this file except in compliance with
1:50ea308:  * the License.  You may obtain a copy of the License at
1:50ea308:  *
1:50ea308:  *      http://www.apache.org/licenses/LICENSE-2.0
1:50ea308:  *
1:50ea308:  * Unless required by applicable law or agreed to in writing, software
1:50ea308:  * distributed under the License is distributed on an "AS IS" BASIS,
1:50ea308:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:50ea308:  * See the License for the specific language governing permissions and
1:50ea308:  * limitations under the License.
1:50ea308:  */
1:50ea308: package org.apache.activemq.karaf.itest;
1:50ea308: 
1:50ea308: import java.io.ByteArrayOutputStream;
1:50ea308: import java.io.PrintStream;
1:50ea308: import java.security.PrivilegedAction;
1:50ea308: import java.util.concurrent.Callable;
1:50ea308: import java.util.concurrent.Executors;
1:50ea308: import java.util.concurrent.FutureTask;
1:50ea308: import java.util.concurrent.TimeUnit;
1:50ea308: 
1:50ea308: import javax.security.auth.Subject;
1:50ea308: 
1:50ea308: import org.apache.karaf.jaas.boot.principal.RolePrincipal;
1:50ea308: import org.apache.karaf.jaas.boot.principal.UserPrincipal;
1:50ea308: import org.apache.karaf.shell.api.console.Session;
1:50ea308: import org.apache.karaf.shell.api.console.SessionFactory;
1:50ea308: import org.slf4j.Logger;
1:50ea308: import org.slf4j.LoggerFactory;
1:50ea308: 
1:50ea308: public class KarafShellHelper {
1:50ea308:     public static final Logger LOG = LoggerFactory.getLogger(KarafShellHelper.class);
1:50ea308: 
1:50ea308:     public static final String USER = "karaf";
1:50ea308:     public static final String PASSWORD = "karaf";
1:50ea308:     public static final long COMMAND_TIMEOUT = 30000L;
1:50ea308: 
1:50ea308:     public static String executeCommand(SessionFactory sessionFactory, final String command, final Long timeout, final Boolean silent) {
1:50ea308:         String response;
1:50ea308:         final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
1:50ea308:         final PrintStream printStream = new PrintStream(byteArrayOutputStream);
1:50ea308:         final Session commandSession = sessionFactory.create(System.in, printStream, printStream);
1:50ea308:         commandSession.put("APPLICATION", System.getProperty("karaf.name", "root"));
1:50ea308:         commandSession.put("USER", USER);
1:50ea308:         FutureTask<String> commandFuture = new FutureTask<String>(
1:50ea308:                 new Callable<String>() {
1:50ea308:                     @Override
1:50ea308:                     public String call() {
1:50ea308: 
1:50ea308:                         Subject subject = new Subject();
1:50ea308:                         subject.getPrincipals().add(new UserPrincipal("admin"));
1:50ea308:                         subject.getPrincipals().add(new RolePrincipal("admin"));
1:50ea308:                         subject.getPrincipals().add(new RolePrincipal("manager"));
1:50ea308:                         subject.getPrincipals().add(new RolePrincipal("viewer"));
1:50ea308:                         return Subject.doAs(subject, new PrivilegedAction<String>() {
1:50ea308:                             @Override
1:50ea308:                             public String run() {
1:50ea308:                                 try {
1:50ea308:                                     if (!silent) {
1:50ea308:                                         System.out.println(command);
1:50ea308:                                         System.out.flush();
1:50ea308:                                     }
1:50ea308:                                     commandSession.execute(command);
1:50ea308:                                 } catch (Exception e) {
1:50ea308:                                     e.printStackTrace(System.err);
1:50ea308:                                 }
1:50ea308:                                 printStream.flush();
1:50ea308:                                 return byteArrayOutputStream.toString();
1:50ea308:                             }
1:50ea308:                         });
1:50ea308:                     }});
1:50ea308: 
1:50ea308:         try {
1:50ea308:             Executors.newSingleThreadExecutor().submit(commandFuture);
1:50ea308:             response = commandFuture.get(timeout, TimeUnit.MILLISECONDS);
1:50ea308:         } catch (Exception e) {
1:50ea308:             e.printStackTrace(System.err);
1:50ea308:             response = "SHELL COMMAND TIMED OUT: ";
1:50ea308:         }
1:50ea308:         LOG.info("Execute: " + command + " - Response:" + response);
1:50ea308:         return response;
1:50ea308:     }
1:50ea308: 
1:50ea308:     public static String executeCommand(SessionFactory sessionFactory, final String command) {
1:50ea308:         return executeCommand(sessionFactory, command, COMMAND_TIMEOUT, false);
1:50ea308:     }
1:50ea308: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:50ea308
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.karaf.itest;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.PrintStream;
1: import java.security.PrivilegedAction;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.FutureTask;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.security.auth.Subject;
1: 
1: import org.apache.karaf.jaas.boot.principal.RolePrincipal;
1: import org.apache.karaf.jaas.boot.principal.UserPrincipal;
1: import org.apache.karaf.shell.api.console.Session;
1: import org.apache.karaf.shell.api.console.SessionFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class KarafShellHelper {
1:     public static final Logger LOG = LoggerFactory.getLogger(KarafShellHelper.class);
1: 
1:     public static final String USER = "karaf";
1:     public static final String PASSWORD = "karaf";
1:     public static final long COMMAND_TIMEOUT = 30000L;
1: 
1:     public static String executeCommand(SessionFactory sessionFactory, final String command, final Long timeout, final Boolean silent) {
1:         String response;
1:         final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
1:         final PrintStream printStream = new PrintStream(byteArrayOutputStream);
1:         final Session commandSession = sessionFactory.create(System.in, printStream, printStream);
1:         commandSession.put("APPLICATION", System.getProperty("karaf.name", "root"));
1:         commandSession.put("USER", USER);
1:         FutureTask<String> commandFuture = new FutureTask<String>(
1:                 new Callable<String>() {
1:                     @Override
1:                     public String call() {
1: 
1:                         Subject subject = new Subject();
1:                         subject.getPrincipals().add(new UserPrincipal("admin"));
1:                         subject.getPrincipals().add(new RolePrincipal("admin"));
1:                         subject.getPrincipals().add(new RolePrincipal("manager"));
1:                         subject.getPrincipals().add(new RolePrincipal("viewer"));
1:                         return Subject.doAs(subject, new PrivilegedAction<String>() {
1:                             @Override
1:                             public String run() {
1:                                 try {
1:                                     if (!silent) {
1:                                         System.out.println(command);
1:                                         System.out.flush();
1:                                     }
1:                                     commandSession.execute(command);
1:                                 } catch (Exception e) {
1:                                     e.printStackTrace(System.err);
1:                                 }
1:                                 printStream.flush();
1:                                 return byteArrayOutputStream.toString();
1:                             }
1:                         });
1:                     }});
1: 
1:         try {
1:             Executors.newSingleThreadExecutor().submit(commandFuture);
1:             response = commandFuture.get(timeout, TimeUnit.MILLISECONDS);
1:         } catch (Exception e) {
1:             e.printStackTrace(System.err);
1:             response = "SHELL COMMAND TIMED OUT: ";
1:         }
1:         LOG.info("Execute: " + command + " - Response:" + response);
1:         return response;
1:     }
1: 
1:     public static String executeCommand(SessionFactory sessionFactory, final String command) {
1:         return executeCommand(sessionFactory, command, COMMAND_TIMEOUT, false);
1:     }
1: }
============================================================================