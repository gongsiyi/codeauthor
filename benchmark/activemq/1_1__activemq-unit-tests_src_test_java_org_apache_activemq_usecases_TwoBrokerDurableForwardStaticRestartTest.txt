1:3c0a4d9: /**
1:3c0a4d9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3c0a4d9:  * contributor license agreements.  See the NOTICE file distributed with
1:3c0a4d9:  * this work for additional information regarding copyright ownership.
1:3c0a4d9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3c0a4d9:  * (the "License"); you may not use this file except in compliance with
1:3c0a4d9:  * the License.  You may obtain a copy of the License at
1:3c0a4d9:  *
1:3c0a4d9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3c0a4d9:  *
1:3c0a4d9:  * Unless required by applicable law or agreed to in writing, software
1:3c0a4d9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c0a4d9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c0a4d9:  * See the License for the specific language governing permissions and
1:3c0a4d9:  * limitations under the License.
1:3c0a4d9:  */
1:3c0a4d9: package org.apache.activemq.usecases;
1:3c0a4d9: 
1:3c0a4d9: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:3c0a4d9: import org.apache.activemq.broker.BrokerService;
1:3c0a4d9: import org.apache.activemq.broker.TransportConnector;
1:3c0a4d9: import org.apache.activemq.command.ActiveMQTopic;
1:3c0a4d9: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:3c0a4d9: import org.apache.activemq.network.NetworkConnector;
1:3c0a4d9: import org.apache.activemq.util.IOHelper;
1:3c0a4d9: import org.apache.activemq.util.MessageIdList;
1:3c0a4d9: import org.apache.activemq.util.Wait;
1:3c0a4d9: import org.slf4j.Logger;
1:3c0a4d9: import org.slf4j.LoggerFactory;
1:3c0a4d9: 
1:3c0a4d9: import javax.jms.Connection;
1:3c0a4d9: import javax.jms.MessageConsumer;
1:3c0a4d9: import javax.jms.Session;
1:3c0a4d9: import javax.jms.TopicSubscriber;
1:3c0a4d9: import java.io.File;
1:3c0a4d9: import java.net.URI;
1:3c0a4d9: import java.util.List;
1:3c0a4d9: 
1:3c0a4d9: public class TwoBrokerDurableForwardStaticRestartTest extends JmsMultipleBrokersTestSupport {
1:3c0a4d9:     protected static final Logger LOG = LoggerFactory.getLogger(TwoBrokerDurableForwardStaticRestartTest.class);
1:3c0a4d9:     final ActiveMQTopic dest = new ActiveMQTopic("TEST.FOO");
1:3c0a4d9: 
1:3c0a4d9:     public void testNonDurableReceiveThrougRestart() throws Exception {
1:3c0a4d9: 
1:3c0a4d9:         bridgeBrokerPair("BrokerA", "BrokerB");
1:3c0a4d9:         bridgeBrokerPair("BrokerB", "BrokerC");
1:3c0a4d9: 
1:3c0a4d9:         registerDurableForwardSub("BrokerA", dest, "BrokerB");
1:3c0a4d9:         registerDurableForwardSub("BrokerB", dest, "BrokerC");
1:3c0a4d9: 
1:3c0a4d9:         startAllBrokers();
1:3c0a4d9:         waitForBridgeFormation();
1:3c0a4d9: 
1:3c0a4d9:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:3c0a4d9:         
1:3c0a4d9:         // Send messages
1:3c0a4d9:         sendMessages("BrokerA", dest, 100);
1:3c0a4d9: 
1:3c0a4d9:         // Get message count
1:3c0a4d9:         final MessageIdList messagesFromC = getConsumerMessages("BrokerC", clientC);
1:3c0a4d9: 
1:3c0a4d9:         Wait.waitFor(new Wait.Condition() {
1:3c0a4d9:             public boolean isSatisified() throws Exception {
1:3c0a4d9:                 return messagesFromC.getMessageCount() == 100;
1:3c0a4d9:             }});
1:3c0a4d9:         
1:3c0a4d9:         LOG.info("B got: " +  messagesFromC.getMessageCount());
1:3c0a4d9: 
1:3c0a4d9:         assertEquals(100, messagesFromC.getMessageCount());
1:3c0a4d9: 
1:3c0a4d9:         destroyBroker("BrokerB");
1:3c0a4d9: 
1:3c0a4d9:         // Send messages
1:3c0a4d9:         sendMessages("BrokerA", dest, 100);
1:3c0a4d9: 
1:3c0a4d9:         BrokerService broker = createBroker(new URI(
1:3c0a4d9:                 "broker:(tcp://0.0.0.0:61616)/BrokerB"));
1:3c0a4d9:         bridgeBrokerPair("BrokerB", "BrokerC");
1:3c0a4d9:         broker.start();
1:3c0a4d9: 
1:3c0a4d9:         Wait.waitFor(new Wait.Condition() {
1:3c0a4d9:             public boolean isSatisified() throws Exception {
1:3c0a4d9:                 return messagesFromC.getMessageCount() == 200;
1:3c0a4d9:             }});
1:3c0a4d9: 
1:3c0a4d9:         LOG.info("B got: " +  messagesFromC.getMessageCount());
1:3c0a4d9: 
1:3c0a4d9:         assertEquals(200, messagesFromC.getMessageCount());
1:3c0a4d9:     }
1:3c0a4d9: 
1:3c0a4d9:     @Override
1:3c0a4d9:     protected void configureBroker(BrokerService broker) {
1:3c0a4d9:         broker.getManagementContext().setCreateConnector(false);
1:3c0a4d9:         broker.setAdvisorySupport(false);
1:3c0a4d9:     }
1:3c0a4d9: 
1:3c0a4d9:     private void registerDurableForwardSub(String brokerName, ActiveMQTopic dest, String remoteBrokerName) throws Exception {
1:3c0a4d9: 
1:3c0a4d9:         // need to match the durable sub that would be created by the bridge in response to a remote durable sub advisory
1:3c0a4d9:         String clientId = "NC_" + remoteBrokerName + "_inbound_" + brokerName;
1:3c0a4d9:         String subName = "NC-DS_" + brokerName + "_" + dest.getPhysicalName();
1:3c0a4d9:         BrokerItem brokerItem = brokers.get(brokerName);
1:3c0a4d9:         //brokerItem.broker.getAdminView().createDurableSubscriber(clientId, subName, dest.getPhysicalName(), null);
1:3c0a4d9: 
1:3c0a4d9:         Connection c = brokerItem.factory.createConnection();
1:3c0a4d9:         c.setClientID(clientId);
1:3c0a4d9:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3c0a4d9:         TopicSubscriber topicSubscriber = session.createDurableSubscriber(dest, subName);
1:3c0a4d9:         topicSubscriber.close();
1:3c0a4d9:         c.close();
1:3c0a4d9:     }
1:3c0a4d9: 
1:3c0a4d9:     protected NetworkConnector bridgeBrokerPair(String localBrokerName, String remoteBrokerName) throws Exception {
1:3c0a4d9:         BrokerService localBroker = brokers.get(localBrokerName).broker;
1:3c0a4d9:         BrokerService remoteBroker = brokers.get(remoteBrokerName).broker;
1:3c0a4d9: 
1:3c0a4d9:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:3c0a4d9:         URI remoteURI;
1:3c0a4d9:         if (!transportConnectors.isEmpty()) {
1:3c0a4d9:             remoteURI = transportConnectors.get(0).getConnectUri();
1:3c0a4d9:             String uri = "static:(" + remoteURI + ")";
1:3c0a4d9:             NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:3c0a4d9:             connector.setDynamicOnly(false); // so matching durable subs are loaded on start
1:3c0a4d9:             connector.setMessageTTL(2);
1:3c0a4d9:             connector.setStaticBridge(true);
1:3c0a4d9:             localBroker.addNetworkConnector(connector);
1:3c0a4d9:             return connector;
1:3c0a4d9:         } else {
1:3c0a4d9:             throw new Exception("Remote broker has no registered connectors.");
1:3c0a4d9:         }
1:3c0a4d9:     }
1:3c0a4d9: 
1:3c0a4d9:     public void setUp() throws Exception {
1:3c0a4d9:         File dataDir = new File(IOHelper.getDefaultDataDirectory());
1:3c0a4d9:         LOG.info("Delete dataDir.." + dataDir.getCanonicalPath());
1:3c0a4d9:         org.apache.activemq.TestSupport.recursiveDelete(dataDir);
1:3c0a4d9:         super.setAutoFail(true);
1:3c0a4d9:         super.setUp();
1:3c0a4d9:         createBroker(new URI(
1:3c0a4d9:                 "broker:(tcp://0.0.0.0:0)/BrokerA"));
1:3c0a4d9:         createBroker(new URI(
1:3c0a4d9:                 "broker:(tcp://0.0.0.0:61616)/BrokerB"));
1:3c0a4d9:         createBroker(new URI(
1:3c0a4d9:                 "broker:(tcp://0.0.0.0:0)/BrokerC"));
1:3c0a4d9: 
1:3c0a4d9:     }
1:3c0a4d9: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:3c0a4d9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.MessageIdList;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
1: import java.io.File;
1: import java.net.URI;
1: import java.util.List;
1: 
1: public class TwoBrokerDurableForwardStaticRestartTest extends JmsMultipleBrokersTestSupport {
1:     protected static final Logger LOG = LoggerFactory.getLogger(TwoBrokerDurableForwardStaticRestartTest.class);
1:     final ActiveMQTopic dest = new ActiveMQTopic("TEST.FOO");
1: 
1:     public void testNonDurableReceiveThrougRestart() throws Exception {
1: 
1:         bridgeBrokerPair("BrokerA", "BrokerB");
1:         bridgeBrokerPair("BrokerB", "BrokerC");
1: 
1:         registerDurableForwardSub("BrokerA", dest, "BrokerB");
1:         registerDurableForwardSub("BrokerB", dest, "BrokerC");
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation();
1: 
1:         MessageConsumer clientC = createConsumer("BrokerC", dest);
1:         
1:         // Send messages
1:         sendMessages("BrokerA", dest, 100);
1: 
1:         // Get message count
1:         final MessageIdList messagesFromC = getConsumerMessages("BrokerC", clientC);
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return messagesFromC.getMessageCount() == 100;
1:             }});
1:         
1:         LOG.info("B got: " +  messagesFromC.getMessageCount());
1: 
1:         assertEquals(100, messagesFromC.getMessageCount());
1: 
1:         destroyBroker("BrokerB");
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, 100);
1: 
1:         BrokerService broker = createBroker(new URI(
1:                 "broker:(tcp://0.0.0.0:61616)/BrokerB"));
1:         bridgeBrokerPair("BrokerB", "BrokerC");
1:         broker.start();
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return messagesFromC.getMessageCount() == 200;
1:             }});
1: 
1:         LOG.info("B got: " +  messagesFromC.getMessageCount());
1: 
1:         assertEquals(200, messagesFromC.getMessageCount());
1:     }
1: 
1:     @Override
1:     protected void configureBroker(BrokerService broker) {
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setAdvisorySupport(false);
1:     }
1: 
1:     private void registerDurableForwardSub(String brokerName, ActiveMQTopic dest, String remoteBrokerName) throws Exception {
1: 
1:         // need to match the durable sub that would be created by the bridge in response to a remote durable sub advisory
1:         String clientId = "NC_" + remoteBrokerName + "_inbound_" + brokerName;
1:         String subName = "NC-DS_" + brokerName + "_" + dest.getPhysicalName();
1:         BrokerItem brokerItem = brokers.get(brokerName);
1:         //brokerItem.broker.getAdminView().createDurableSubscriber(clientId, subName, dest.getPhysicalName(), null);
1: 
1:         Connection c = brokerItem.factory.createConnection();
1:         c.setClientID(clientId);
1:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber topicSubscriber = session.createDurableSubscriber(dest, subName);
1:         topicSubscriber.close();
1:         c.close();
1:     }
1: 
1:     protected NetworkConnector bridgeBrokerPair(String localBrokerName, String remoteBrokerName) throws Exception {
1:         BrokerService localBroker = brokers.get(localBrokerName).broker;
1:         BrokerService remoteBroker = brokers.get(remoteBrokerName).broker;
1: 
1:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:         URI remoteURI;
1:         if (!transportConnectors.isEmpty()) {
1:             remoteURI = transportConnectors.get(0).getConnectUri();
1:             String uri = "static:(" + remoteURI + ")";
1:             NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:             connector.setDynamicOnly(false); // so matching durable subs are loaded on start
1:             connector.setMessageTTL(2);
1:             connector.setStaticBridge(true);
1:             localBroker.addNetworkConnector(connector);
1:             return connector;
1:         } else {
1:             throw new Exception("Remote broker has no registered connectors.");
1:         }
1:     }
1: 
1:     public void setUp() throws Exception {
1:         File dataDir = new File(IOHelper.getDefaultDataDirectory());
1:         LOG.info("Delete dataDir.." + dataDir.getCanonicalPath());
1:         org.apache.activemq.TestSupport.recursiveDelete(dataDir);
1:         super.setAutoFail(true);
1:         super.setUp();
1:         createBroker(new URI(
1:                 "broker:(tcp://0.0.0.0:0)/BrokerA"));
1:         createBroker(new URI(
1:                 "broker:(tcp://0.0.0.0:61616)/BrokerB"));
1:         createBroker(new URI(
1:                 "broker:(tcp://0.0.0.0:0)/BrokerC"));
1: 
1:     }
1: }
============================================================================