1:2ecf41d: /**
1:2ecf41d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2ecf41d:  * contributor license agreements.  See the NOTICE file distributed with
1:2ecf41d:  * this work for additional information regarding copyright ownership.
1:2ecf41d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2ecf41d:  * (the "License"); you may not use this file except in compliance with
1:2ecf41d:  * the License.  You may obtain a copy of the License at
1:2ecf41d:  *
1:2ecf41d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2ecf41d:  *
1:2ecf41d:  * Unless required by applicable law or agreed to in writing, software
1:2ecf41d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ecf41d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ecf41d:  * See the License for the specific language governing permissions and
1:2ecf41d:  * limitations under the License.
1:2ecf41d:  */
1:2ecf41d: package example;
1:2ecf41d: 
1:2ecf41d: import org.fusesource.hawtbuf.AsciiBuffer;
1:2ecf41d: import org.fusesource.hawtbuf.Buffer;
1:2ecf41d: import org.fusesource.hawtbuf.UTF8Buffer;
1:2ecf41d: import org.fusesource.mqtt.client.Future;
1:2ecf41d: import org.fusesource.mqtt.client.FutureConnection;
1:2ecf41d: import org.fusesource.mqtt.client.MQTT;
1:2ecf41d: import org.fusesource.mqtt.client.QoS;
1:2ecf41d: 
1:2ecf41d: import java.util.LinkedList;
1:2ecf41d: 
1:2ecf41d: /**
1:2ecf41d:  * Uses a Future based API to MQTT.
1:2ecf41d:  */
1:2ecf41d: class Publisher {
1:2ecf41d: 
1:2ecf41d:     public static void main(String []args) throws Exception {
1:2ecf41d: 
1:2ecf41d:         String user = env("ACTIVEMQ_USER", "admin");
1:2ecf41d:         String password = env("ACTIVEMQ_PASSWORD", "password");
1:2ecf41d:         String host = env("ACTIVEMQ_HOST", "localhost");
1:2ecf41d:         int port = Integer.parseInt(env("ACTIVEMQ_PORT", "1883"));
1:2ecf41d:         final String destination = arg(args, 0, "/topic/event");
1:2ecf41d: 
1:2ecf41d:         int messages = 10000;
1:2ecf41d:         int size = 256;
1:2ecf41d: 
1:2ecf41d:         String DATA = "abcdefghijklmnopqrstuvwxyz";
1:2ecf41d:         String body = "";
1:2ecf41d:         for( int i=0; i < size; i ++) {
1:2ecf41d:             body += DATA.charAt(i%DATA.length());
1:2ecf41d:         }
1:2ecf41d:        Buffer msg = new AsciiBuffer(body);
1:2ecf41d: 
1:2ecf41d:         MQTT mqtt = new MQTT();
1:2ecf41d:         mqtt.setHost(host, port);
1:2ecf41d:         mqtt.setUserName(user);
1:2ecf41d:         mqtt.setPassword(password);
1:2ecf41d: 
1:2ecf41d:         FutureConnection connection = mqtt.futureConnection();
1:2ecf41d:         connection.connect().await();
1:2ecf41d: 
1:2ecf41d:         final LinkedList<Future<Void>> queue = new LinkedList<Future<Void>>();
1:2ecf41d:         UTF8Buffer topic = new UTF8Buffer(destination);
1:2ecf41d:         for( int i=1; i <= messages; i ++) {
1:2ecf41d: 
1:2ecf41d:             // Send the publish without waiting for it to complete. This allows us
1:2ecf41d:             // to send multiple message without blocking..
1:2ecf41d:             queue.add(connection.publish(topic, msg, QoS.AT_LEAST_ONCE, false));
1:2ecf41d: 
1:2ecf41d:             // Eventually we start waiting for old publish futures to complete
1:2ecf41d:             // so that we don't create a large in memory buffer of outgoing message.s
1:2ecf41d:             if( queue.size() >= 1000 ) {
1:2ecf41d:                 queue.removeFirst().await();
1:2ecf41d:             }
1:2ecf41d: 
1:6773b8f:             if( i % 1000 == 0 ) {
1:6773b8f:                 System.out.println(String.format("Sent %d messages.", i));
1:6773b8f:             }
1:2ecf41d:         }
1:2ecf41d: 
1:2ecf41d:         queue.add(connection.publish(topic, new AsciiBuffer("SHUTDOWN"), QoS.AT_LEAST_ONCE, false));
1:2ecf41d:         while( !queue.isEmpty() ) {
1:2ecf41d:             queue.removeFirst().await();
1:2ecf41d:         }
1:2ecf41d: 
1:2ecf41d:         connection.disconnect().await();
1:2ecf41d: 
1:2ecf41d:         System.exit(0);
1:2ecf41d:     }
1:2ecf41d: 
1:2ecf41d:     private static String env(String key, String defaultValue) {
1:2ecf41d:         String rc = System.getenv(key);
1:2ecf41d:         if( rc== null )
1:2ecf41d:             return defaultValue;
1:2ecf41d:         return rc;
1:2ecf41d:     }
1:2ecf41d: 
1:2ecf41d:     private static String arg(String []args, int index, String defaultValue) {
1:2ecf41d:         if( index < args.length )
1:2ecf41d:             return args[index];
1:2ecf41d:         else
1:2ecf41d:             return defaultValue;
1:2ecf41d:     }
1:2ecf41d: 
1:2ecf41d: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:6773b8f
/////////////////////////////////////////////////////////////////////////
1:             if( i % 1000 == 0 ) {
1:                 System.out.println(String.format("Sent %d messages.", i));
1:             }
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package example;
1: 
1: import org.fusesource.hawtbuf.AsciiBuffer;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.fusesource.hawtbuf.UTF8Buffer;
1: import org.fusesource.mqtt.client.Future;
1: import org.fusesource.mqtt.client.FutureConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.fusesource.mqtt.client.QoS;
1: 
1: import java.util.LinkedList;
1: 
1: /**
1:  * Uses a Future based API to MQTT.
1:  */
1: class Publisher {
1: 
1:     public static void main(String []args) throws Exception {
1: 
1:         String user = env("ACTIVEMQ_USER", "admin");
1:         String password = env("ACTIVEMQ_PASSWORD", "password");
1:         String host = env("ACTIVEMQ_HOST", "localhost");
1:         int port = Integer.parseInt(env("ACTIVEMQ_PORT", "1883"));
1:         final String destination = arg(args, 0, "/topic/event");
1: 
1:         int messages = 10000;
1:         int size = 256;
1: 
1:         String DATA = "abcdefghijklmnopqrstuvwxyz";
1:         String body = "";
1:         for( int i=0; i < size; i ++) {
1:             body += DATA.charAt(i%DATA.length());
1:         }
1:        Buffer msg = new AsciiBuffer(body);
1: 
1:         MQTT mqtt = new MQTT();
1:         mqtt.setHost(host, port);
1:         mqtt.setUserName(user);
1:         mqtt.setPassword(password);
1: 
1:         FutureConnection connection = mqtt.futureConnection();
1:         connection.connect().await();
1: 
1:         final LinkedList<Future<Void>> queue = new LinkedList<Future<Void>>();
1:         UTF8Buffer topic = new UTF8Buffer(destination);
1:         for( int i=1; i <= messages; i ++) {
1: 
1:             // Send the publish without waiting for it to complete. This allows us
1:             // to send multiple message without blocking..
1:             queue.add(connection.publish(topic, msg, QoS.AT_LEAST_ONCE, false));
1: 
1:             // Eventually we start waiting for old publish futures to complete
1:             // so that we don't create a large in memory buffer of outgoing message.s
1:             if( queue.size() >= 1000 ) {
1:                 queue.removeFirst().await();
1:             }
1: 
1:         }
1: 
1:         queue.add(connection.publish(topic, new AsciiBuffer("SHUTDOWN"), QoS.AT_LEAST_ONCE, false));
1:         while( !queue.isEmpty() ) {
1:             queue.removeFirst().await();
1:         }
1: 
1:         connection.disconnect().await();
1: 
1:         System.exit(0);
1:     }
1: 
1:     private static String env(String key, String defaultValue) {
1:         String rc = System.getenv(key);
1:         if( rc== null )
1:             return defaultValue;
1:         return rc;
1:     }
1: 
1:     private static String arg(String []args, int index, String defaultValue) {
1:         if( index < args.length )
1:             return args[index];
1:         else
1:             return defaultValue;
1:     }
1: 
1: }
============================================================================