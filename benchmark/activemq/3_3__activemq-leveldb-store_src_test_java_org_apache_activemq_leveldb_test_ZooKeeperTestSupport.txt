1:3ed52ef: /**
1:3ed52ef:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3ed52ef:  * contributor license agreements.  See the NOTICE file distributed with
1:3ed52ef:  * this work for additional information regarding copyright ownership.
1:3ed52ef:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3ed52ef:  * (the "License"); you may not use this file except in compliance with
1:3ed52ef:  * the License.  You may obtain a copy of the License at
1:3ed52ef:  *
1:3ed52ef:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3ed52ef:  *
1:3ed52ef:  * Unless required by applicable law or agreed to in writing, software
1:3ed52ef:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3ed52ef:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3ed52ef:  * See the License for the specific language governing permissions and
1:3ed52ef:  * limitations under the License.
1:3ed52ef:  */
1:3ed52ef: package org.apache.activemq.leveldb.test;
1:3ed52ef: 
1:3ed52ef: import org.apache.activemq.leveldb.CountDownFuture;
1:3ed52ef: import org.apache.activemq.leveldb.util.FileSupport;
1:5315389: import org.apache.commons.io.FileUtils;
1:a39e51e: import org.apache.zookeeper.server.TestServerCnxnFactory;
1:3ed52ef: import org.apache.zookeeper.server.ZooKeeperServer;
1:3ed52ef: import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
1:3ed52ef: import org.junit.After;
1:3ed52ef: import org.junit.Before;
1:3ed52ef: 
1:3ed52ef: import java.io.File;
1:3ed52ef: import java.net.InetSocketAddress;
1:3ed52ef: import java.util.concurrent.TimeUnit;
1:3ed52ef: 
1:3ed52ef: /**
1:3ed52ef:  * Created by chirino on 10/30/13.
1:3ed52ef:  */
1:3ed52ef: public class ZooKeeperTestSupport {
1:3ed52ef: 
1:a39e51e:     protected TestServerCnxnFactory connector;
1:3ed52ef: 
1:3ed52ef:     static File data_dir() {
1:3ed52ef:         return new File("target/activemq-data/leveldb-elections");
1:3ed52ef:     }
1:5315389: 
1:3ed52ef: 
1:3ed52ef:     @Before
1:3ed52ef:     public void startZooKeeper() throws Exception {
1:3ed52ef:         FileSupport.toRichFile(data_dir()).recursiveDelete();
1:3ed52ef: 
1:3ed52ef:         System.out.println("Starting ZooKeeper");
1:3ed52ef:         ZooKeeperServer zk_server = new ZooKeeperServer();
1:3ed52ef:         zk_server.setTickTime(500);
1:3ed52ef:         zk_server.setTxnLogFactory(new FileTxnSnapLog(new File(data_dir(), "zk-log"), new File(data_dir(), "zk-data")));
1:a39e51e:         connector = new TestServerCnxnFactory();
1:3ed52ef:         connector.configure(new InetSocketAddress(0), 100);
1:3ed52ef:         connector.startup(zk_server);
1:3ed52ef:         System.out.println("ZooKeeper started");
1:3ed52ef:     }
1:3ed52ef: 
1:3ed52ef:     @After
1:3ed52ef:     public void stopZooKeeper() throws Exception {
1:3ed52ef:         if( connector!=null ) {
1:3ed52ef:           connector.shutdown();
1:3ed52ef:           connector = null;
1:3ed52ef:         }
1:5315389:         deleteDirectory("zk-log");
1:5315389:         deleteDirectory("zk-data");
1:3ed52ef:     }
1:3ed52ef: 
1:3ed52ef: 
1:3ed52ef:     protected static interface Task {
1:3ed52ef:         public void run() throws Exception;
1:3ed52ef:     }
1:3ed52ef: 
1:3ed52ef:     protected  void within(int time, TimeUnit unit, Task task) throws InterruptedException {
1:3ed52ef:         long timeMS = unit.toMillis(time);
1:3ed52ef:         long deadline = System.currentTimeMillis() + timeMS;
1:3ed52ef:         while (true) {
1:3ed52ef:             try {
1:3ed52ef:                 task.run();
1:3ed52ef:                 return;
1:3ed52ef:             } catch (Throwable e) {
1:3ed52ef:                 long remaining = deadline - System.currentTimeMillis();
1:3ed52ef:                 if( remaining <=0 ) {
1:3ed52ef:                     if( e instanceof RuntimeException ) {
1:3ed52ef:                         throw (RuntimeException)e;
1:3ed52ef:                     }
1:3ed52ef:                     if( e instanceof Error ) {
1:3ed52ef:                         throw (Error)e;
1:3ed52ef:                     }
1:3ed52ef:                     throw new RuntimeException(e);
1:3ed52ef:                 }
1:3ed52ef:                 Thread.sleep(Math.min(timeMS/10, remaining));
1:3ed52ef:             }
1:3ed52ef:         }
1:3ed52ef:     }
1:3ed52ef: 
1:3ed52ef:     protected CountDownFuture waitFor(int timeout, CountDownFuture... futures) throws InterruptedException {
1:3ed52ef:         long deadline =  System.currentTimeMillis()+timeout;
1:3ed52ef:         while( true ) {
1:3ed52ef:             for (CountDownFuture f:futures) {
1:3ed52ef:                 if( f.await(1, TimeUnit.MILLISECONDS) ) {
1:3ed52ef:                     return f;
1:3ed52ef:                 }
1:3ed52ef:             }
1:3ed52ef:             long remaining = deadline - System.currentTimeMillis();
1:3ed52ef:             if( remaining < 0 ) {
1:3ed52ef:                 return null;
1:3ed52ef:             } else {
1:3ed52ef:                 Thread.sleep(Math.min(remaining / 10, 100L));
1:3ed52ef:             }
1:3ed52ef:         }
1:3ed52ef:     }
1:3ed52ef: 
1:5315389:     protected void deleteDirectory(String s) throws java.io.IOException {
1:5315389:         try {
1:5315389:             FileUtils.deleteDirectory(new File(data_dir(), s));
1:5315389:         } catch (java.io.IOException e) {
1:5315389:         }
1:5315389:     }
1:3ed52ef: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:a39e51e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.zookeeper.server.TestServerCnxnFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected TestServerCnxnFactory connector;
/////////////////////////////////////////////////////////////////////////
1:         connector = new TestServerCnxnFactory();
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:5315389
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.FileUtils;
/////////////////////////////////////////////////////////////////////////
1:         deleteDirectory("zk-log");
1:         deleteDirectory("zk-data");
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void deleteDirectory(String s) throws java.io.IOException {
1:         try {
1:             FileUtils.deleteDirectory(new File(data_dir(), s));
1:         } catch (java.io.IOException e) {
1:         }
1:     }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:3ed52ef
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.leveldb.test;
1: 
1: import org.apache.activemq.leveldb.CountDownFuture;
1: import org.apache.activemq.leveldb.util.FileSupport;
0: import org.apache.zookeeper.server.NIOServerCnxnFactory;
1: import org.apache.zookeeper.server.ZooKeeperServer;
1: import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
1: import org.junit.After;
1: import org.junit.Before;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.io.File;
1: import java.net.InetSocketAddress;
1: import java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * Created by chirino on 10/30/13.
1:  */
1: public class ZooKeeperTestSupport {
1: 
0:     protected NIOServerCnxnFactory connector;
1: 
1:     static File data_dir() {
1:         return new File("target/activemq-data/leveldb-elections");
1:     }
1: 
1: 
1:     @Before
1:     public void startZooKeeper() throws Exception {
1:         FileSupport.toRichFile(data_dir()).recursiveDelete();
1: 
1:         System.out.println("Starting ZooKeeper");
1:         ZooKeeperServer zk_server = new ZooKeeperServer();
1:         zk_server.setTickTime(500);
1:         zk_server.setTxnLogFactory(new FileTxnSnapLog(new File(data_dir(), "zk-log"), new File(data_dir(), "zk-data")));
0:         connector = new NIOServerCnxnFactory();
1:         connector.configure(new InetSocketAddress(0), 100);
1:         connector.startup(zk_server);
1:         System.out.println("ZooKeeper started");
1:     }
1: 
1:     @After
1:     public void stopZooKeeper() throws Exception {
1:         if( connector!=null ) {
1:           connector.shutdown();
1:           connector = null;
1:         }
1:     }
1: 
1: 
1:     protected static interface Task {
1:         public void run() throws Exception;
1:     }
1: 
1:     protected  void within(int time, TimeUnit unit, Task task) throws InterruptedException {
1:         long timeMS = unit.toMillis(time);
1:         long deadline = System.currentTimeMillis() + timeMS;
1:         while (true) {
1:             try {
1:                 task.run();
1:                 return;
1:             } catch (Throwable e) {
1:                 long remaining = deadline - System.currentTimeMillis();
1:                 if( remaining <=0 ) {
1:                     if( e instanceof RuntimeException ) {
1:                         throw (RuntimeException)e;
1:                     }
1:                     if( e instanceof Error ) {
1:                         throw (Error)e;
1:                     }
1:                     throw new RuntimeException(e);
1:                 }
1:                 Thread.sleep(Math.min(timeMS/10, remaining));
1:             }
1:         }
1:     }
1: 
1:     protected CountDownFuture waitFor(int timeout, CountDownFuture... futures) throws InterruptedException {
1:         long deadline =  System.currentTimeMillis()+timeout;
1:         while( true ) {
1:             for (CountDownFuture f:futures) {
1:                 if( f.await(1, TimeUnit.MILLISECONDS) ) {
1:                     return f;
1:                 }
1:             }
1:             long remaining = deadline - System.currentTimeMillis();
1:             if( remaining < 0 ) {
1:                 return null;
1:             } else {
1:                 Thread.sleep(Math.min(remaining / 10, 100L));
1:             }
1:         }
1:     }
1: }
============================================================================