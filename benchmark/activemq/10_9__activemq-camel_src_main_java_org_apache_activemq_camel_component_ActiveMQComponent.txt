2:5f96839: /**
1:5f96839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5f96839:  * contributor license agreements.  See the NOTICE file distributed with
1:5f96839:  * this work for additional information regarding copyright ownership.
1:5f96839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5f96839:  * (the "License"); you may not use this file except in compliance with
1:5f96839:  * the License.  You may obtain a copy of the License at
4:5f96839:  *
1:5f96839:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:5f96839:  * Unless required by applicable law or agreed to in writing, software
1:5f96839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f96839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f96839:  * See the License for the specific language governing permissions and
1:5f96839:  * limitations under the License.
2:5f96839:  */
1:5f96839: package org.apache.activemq.camel.component;
1:5f96839: 
1:5cf4ada: import java.net.URISyntaxException;
1:b2a91b9: import java.util.*;
1:75a32e4: import java.util.concurrent.CopyOnWriteArrayList;
1:75a32e4: 
1:b2a91b9: import org.apache.activemq.EnhancedConnection;
1:75a32e4: import org.apache.activemq.Service;
1:b2a91b9: import org.apache.activemq.advisory.DestinationSource;
1:b2a91b9: import org.apache.activemq.command.ActiveMQDestination;
1:5f96839: import org.apache.camel.CamelContext;
1:b2a91b9: import org.apache.camel.ComponentConfiguration;
1:5f96839: import org.apache.camel.component.jms.JmsComponent;
1:5f96839: import org.apache.camel.component.jms.JmsConfiguration;
1:b2a91b9: import org.apache.camel.spi.EndpointCompleter;
1:5cf4ada: import org.apache.camel.util.IntrospectionSupport;
1:5cf4ada: import org.apache.camel.util.ObjectHelper;
1:5cf4ada: import org.apache.camel.util.URISupport;
1:edd8166: import org.slf4j.Logger;
1:edd8166: import org.slf4j.LoggerFactory;
1:75a32e4: import org.springframework.jms.connection.SingleConnectionFactory;
1:df868fe: import org.springframework.jms.core.JmsTemplate;
1:5f96839: 
1:b2a91b9: import javax.jms.Connection;
1:b2a91b9: 
1:5f96839: /**
1:5f96839:  * The <a href="http://activemq.apache.org/camel/activemq.html">ActiveMQ Component</a>
1:5f96839:  */
1:b2a91b9: public class ActiveMQComponent extends JmsComponent implements EndpointCompleter {
1:75a32e4:     private final CopyOnWriteArrayList<SingleConnectionFactory> singleConnectionFactoryList =
1:75a32e4:         new CopyOnWriteArrayList<SingleConnectionFactory>();
1:75a32e4:     private final CopyOnWriteArrayList<Service> pooledConnectionFactoryServiceList =
1:75a32e4:         new CopyOnWriteArrayList<Service>();
1:edd8166:     private static final transient Logger LOG = LoggerFactory.getLogger(ActiveMQComponent.class);
1:26eedea:     private boolean exposeAllQueues;
1:26eedea:     private CamelEndpointLoader endpointLoader;
1:5f96839: 
1:b2a91b9:     private EnhancedConnection connection;
1:b2a91b9:     DestinationSource source;
1:edd8166:     boolean sourceInitialized = false;
1:b2a91b9: 
1:5f96839:     /**
1:3c39b5d:      * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ Component</a>
1:5f96839:      *
1:5f96839:      * @return the created component
1:5f96839:      */
1:5f96839:     public static ActiveMQComponent activeMQComponent() {
1:5f96839:         return new ActiveMQComponent();
1:b2a91b9:     }
1:b2a91b9: 
1:50dc586:     /**
1:3c39b5d:      * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ Component</a>
1:5f96839:      * connecting to the given <a href="http://activemq.apache.org/configuring-transports.html">broker URL</a>
1:4437393:      *
1:5f96839:      * @param brokerURL the URL to connect to
1:5f96839:      * @return the created component
1:50dc586:      */
1:5f96839:     public static ActiveMQComponent activeMQComponent(String brokerURL) {
1:5f96839:         ActiveMQComponent answer = new ActiveMQComponent();
1:e40e2ac:         if (answer.getConfiguration() instanceof ActiveMQConfiguration) {
1:e40e2ac:             ((ActiveMQConfiguration) answer.getConfiguration())
1:e40e2ac:                     .setBrokerURL(brokerURL);
1:b2a91b9:         }
1:5f96839: 
1:5f96839:         return answer;
1:50dc586:     }
1:50dc586: 
1:5f96839:     public ActiveMQComponent() {
1:b2a91b9:     }
1:50dc586: 
1:5f96839:     public ActiveMQComponent(CamelContext context) {
1:5f96839:         super(context);
1:b2a91b9:     }
1:b2a91b9: 
1:5f96839:     public ActiveMQComponent(ActiveMQConfiguration configuration) {
1:dfd168b:         super();
1:dfd168b:         setConfiguration(configuration);
1:5f96839:     }
1:5f96839: 
1:df868fe:     /**
1:df868fe:      * Sets the broker URL to use to connect to ActiveMQ using the
1:df868fe:      * <a href="http://activemq.apache.org/configuring-transports.html">ActiveMQ URI format</a>
1:df868fe:      */
1:5f96839:     public void setBrokerURL(String brokerURL) {
1:e40e2ac:         if (getConfiguration() instanceof ActiveMQConfiguration) {
1:e40e2ac:             ((ActiveMQConfiguration)getConfiguration()).setBrokerURL(brokerURL);
1:5f96839:         }
1:5f96839:     }
1:5f96839: 
1:df868fe:     /**
1:395a48d:      * @deprecated - use JmsComponent#setUsername(String)
1:395a48d:      * @see JmsComponent#setUsername(String)
1:df868fe:      */
1:926ce53:     public void setUserName(String userName) {
1:395a48d:         setUsername(userName);
1:5f96839:     }
1:5f96839: 
1:40ecf22:     public void setTrustAllPackages(boolean trustAllPackages) {
1:40ecf22:         if (getConfiguration() instanceof ActiveMQConfiguration) {
1:40ecf22:             ((ActiveMQConfiguration)getConfiguration()).setTrustAllPackages(trustAllPackages);
1:40ecf22:         }
1:40ecf22:     }
1:40ecf22: 
1:26eedea:     public boolean isExposeAllQueues() {
1:26eedea:         return exposeAllQueues;
1:5f96839:     }
1:5f96839: 
1:df868fe:     /**
1:26eedea:      * If enabled this will cause all Queues in the ActiveMQ broker to be eagerly populated into the CamelContext
1:26eedea:      * so that they can be easily browsed by any Camel tooling. This option is disabled by default.
1:df868fe:      */
1:26eedea:     public void setExposeAllQueues(boolean exposeAllQueues) {
1:26eedea:         this.exposeAllQueues = exposeAllQueues;
1:e40e2ac:     }
1:be9bdab: 
1:df868fe:     /**
1:df868fe:      * Enables or disables whether a PooledConnectionFactory will be used so that when
1:df868fe:      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather
1:df868fe:      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer
1:df868fe:      * for each message then close them all down again.
1:df868fe:      * <p/>
1:df868fe:      * The default value is true. Note that this requires an extra dependency on commons-pool2.
1:df868fe:      */
1:80722e4:     public void setUsePooledConnection(boolean usePooledConnection) {
1:e40e2ac:         if (getConfiguration() instanceof ActiveMQConfiguration) {
1:e40e2ac:             ((ActiveMQConfiguration)getConfiguration()).setUsePooledConnection(usePooledConnection);
1:e40e2ac:         }
1:e40e2ac:     }
1:be9bdab: 
1:df868fe:     /**
1:df868fe:      * Enables or disables whether a Spring {@link SingleConnectionFactory} will be used so that when
1:df868fe:      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather
1:df868fe:      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer
1:df868fe:      * for each message then close them all down again.
1:df868fe:      * <p/>
1:df868fe:      * The default value is false and a pooled connection is used by default.
1:df868fe:      */
1:80722e4:     public void setUseSingleConnection(boolean useSingleConnection) {
1:e40e2ac:         if (getConfiguration() instanceof ActiveMQConfiguration) {
1:e40e2ac:             ((ActiveMQConfiguration)getConfiguration()).setUseSingleConnection(useSingleConnection);
1:e40e2ac:         }
2:e40e2ac:     }
1:e40e2ac: 
1:75a32e4:     protected void addPooledConnectionFactoryService(Service pooledConnectionFactoryService) {
1:75a32e4:         pooledConnectionFactoryServiceList.add(pooledConnectionFactoryService);
1:75a32e4:     }
1:75a32e4: 
1:75a32e4:     protected void addSingleConnectionFactory(SingleConnectionFactory singleConnectionFactory) {
1:75a32e4:         singleConnectionFactoryList.add(singleConnectionFactory);
1:75a32e4:     }
1:75a32e4: 
1:395a48d:     @Override
1:5cf4ada:     @SuppressWarnings("unchecked")
1:5cf4ada:     protected String convertPathToActualDestination(String path, Map<String, Object> parameters) {
1:5cf4ada:         // support ActiveMQ destination options using the destination. prefix
1:5cf4ada:         // http://activemq.apache.org/destination-options.html
1:5cf4ada:         Map options = IntrospectionSupport.extractProperties(parameters, "destination.");
1:5cf4ada: 
1:5cf4ada:         String query;
1:5cf4ada:         try {
1:5cf4ada:             query = URISupport.createQueryString(options);
1:5cf4ada:         } catch (URISyntaxException e) {
1:5cf4ada:             throw ObjectHelper.wrapRuntimeCamelException(e);
1:5cf4ada:         }
1:5cf4ada: 
1:5cf4ada:         // if we have destination options then append them to the destination name
1:5cf4ada:         if (ObjectHelper.isNotEmpty(query)) {
1:5cf4ada:             return path + "?" + query;
1:5cf4ada:         } else {
1:5cf4ada:             return path;
1:5cf4ada:         }
1:5cf4ada:     }
1:5cf4ada: 
1:5cf4ada:     @Override
1:26eedea:     protected void doStart() throws Exception {
1:26eedea:         super.doStart();
1:b2a91b9: 
1:26eedea:         if (isExposeAllQueues()) {
1:edd8166:             createDestinationSource();
1:b2a91b9:             endpointLoader = new CamelEndpointLoader(getCamelContext(), source);
1:26eedea:             endpointLoader.afterPropertiesSet();
1:5f96839:         }
1:f490ab5: 
1:f490ab5:         // use OriginalDestinationPropagateStrategy by default if no custom stategy has been set
1:f490ab5:         if (getMessageCreatedStrategy() == null) {
1:f490ab5:             setMessageCreatedStrategy(new OriginalDestinationPropagateStrategy());
1:f490ab5:         }
1:5f96839:     }
1:5f96839: 
1:edd8166:     protected void createDestinationSource() {
1:edd8166:         try {
1:edd8166:             if (source == null) {
1:edd8166:                 if (connection == null) {
1:edd8166:                     Connection value = getConfiguration().getConnectionFactory().createConnection();
1:edd8166:                     if (value instanceof EnhancedConnection) {
1:edd8166:                         connection = (EnhancedConnection) value;
1:edd8166:                     } else {
1:edd8166:                         throw new IllegalArgumentException("Created JMS Connection is not an EnhancedConnection: " + value);
1:edd8166:                     }
1:edd8166:                     connection.start();
1:edd8166:                 }
1:edd8166:                 source = connection.getDestinationSource();
1:edd8166:             }
1:edd8166:         } catch (Throwable t) {
1:edd8166:             LOG.info("Can't get destination source, endpoint completer will not work", t);
1:edd8166:         }
1:edd8166:     }
1:edd8166: 
1:5f96839:     @Override
1:26eedea:     protected void doStop() throws Exception {
1:edd8166:         if (source != null) {
1:edd8166:             source.stop();
1:edd8166:             source = null;
1:edd8166:         }
1:b2a91b9:         if (connection != null) {
1:b2a91b9:             connection.close();
1:b2a91b9:             connection = null;
1:5f96839:         }
1:75a32e4:         for (Service s : pooledConnectionFactoryServiceList) {
1:75a32e4:             s.stop();
1:75a32e4:         }
1:75a32e4:         pooledConnectionFactoryServiceList.clear();
1:75a32e4:         for (SingleConnectionFactory s : singleConnectionFactoryList) {
1:75a32e4:             s.destroy();
1:75a32e4:         }
1:75a32e4:         singleConnectionFactoryList.clear();
1:26eedea:         super.doStop();
1:5f96839:     }
1:5f96839: 
1:5f96839:     @Override
1:75a32e4:     public void setConfiguration(JmsConfiguration configuration) {
1:75a32e4:         if (configuration instanceof ActiveMQConfiguration) {
1:75a32e4:             ((ActiveMQConfiguration) configuration).setActiveMQComponent(this);
1:75a32e4:         }
1:75a32e4:         super.setConfiguration(configuration);
1:75a32e4:     }
1:75a32e4: 
1:75a32e4:     @Override
1:5f96839:     protected JmsConfiguration createConfiguration() {
1:75a32e4:         ActiveMQConfiguration answer = new ActiveMQConfiguration();
1:75a32e4:         answer.setActiveMQComponent(this);
1:75a32e4:         return answer;
1:b2a91b9:     }
1:b2a91b9: 
1:b2a91b9:     @Override
1:b2a91b9:     public List<String> completeEndpointPath(ComponentConfiguration componentConfiguration, String completionText) {
1:edd8166:         // try to initialize destination source only the first time
1:edd8166:         if (!sourceInitialized) {
1:edd8166:             createDestinationSource();
1:edd8166:             sourceInitialized = true;
1:b2a91b9:         }
1:b2a91b9:         ArrayList<String> answer = new ArrayList<String>();
1:edd8166:         if (source != null) {
1:edd8166:             Set candidates = source.getQueues();
1:edd8166:             String destinationName = completionText;
1:edd8166:             if (completionText.startsWith("topic:")) {
1:edd8166:                 candidates = source.getTopics();
1:edd8166:                 destinationName = completionText.substring(6);
1:edd8166:             } else if (completionText.startsWith("queue:")) {
1:edd8166:                 destinationName = completionText.substring(6);
1:edd8166:             }
1:edd8166: 
1:edd8166:             Iterator it = candidates.iterator();
1:edd8166: 
1:edd8166:             while (it.hasNext()) {
1:edd8166:                 ActiveMQDestination destination = (ActiveMQDestination) it.next();
1:edd8166:                 if (destination.getPhysicalName().startsWith(destinationName)) {
1:edd8166:                     answer.add(destination.getPhysicalName());
1:edd8166:                 }
1:edd8166:             }
1:b2a91b9:         }
1:b2a91b9:         return answer;
1:b2a91b9:     }
1:b2a91b9: 
1:b2a91b9: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:bdad06f
/////////////////////////////////////////////////////////////////////////
commit:4437393
/////////////////////////////////////////////////////////////////////////
0:      * We don't want to ever auto-wire the connection factory from the spring app context (requires Camel 2.18 onwards)
1:      *
0:     public boolean isAllowAutoWiredConnectionFactory() {
commit:f490ab5
/////////////////////////////////////////////////////////////////////////
1: 
1:         // use OriginalDestinationPropagateStrategy by default if no custom stategy has been set
1:         if (getMessageCreatedStrategy() == null) {
1:             setMessageCreatedStrategy(new OriginalDestinationPropagateStrategy());
1:         }
commit:40ecf22
/////////////////////////////////////////////////////////////////////////
1:     public void setTrustAllPackages(boolean trustAllPackages) {
1:         if (getConfiguration() instanceof ActiveMQConfiguration) {
1:             ((ActiveMQConfiguration)getConfiguration()).setTrustAllPackages(trustAllPackages);
1:         }
1:     }
1: 
commit:df868fe
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.jms.core.JmsTemplate;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sets the broker URL to use to connect to ActiveMQ using the
1:      * <a href="http://activemq.apache.org/configuring-transports.html">ActiveMQ URI format</a>
1:      */
1:     /**
0:      * Sets the username to be used to login to ActiveMQ
1:      */
1:     /**
0:      * Sets the password/passcode used to login to ActiveMQ
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Enables or disables whether a PooledConnectionFactory will be used so that when
1:      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather
1:      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer
1:      * for each message then close them all down again.
1:      * <p/>
1:      * The default value is true. Note that this requires an extra dependency on commons-pool2.
1:      */
1:     /**
1:      * Enables or disables whether a Spring {@link SingleConnectionFactory} will be used so that when
1:      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather
1:      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer
1:      * for each message then close them all down again.
1:      * <p/>
1:      * The default value is false and a pooled connection is used by default.
1:      */
commit:dfd168b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         super();
1:         setConfiguration(configuration);
commit:48d615d
/////////////////////////////////////////////////////////////////////////
commit:5cf4ada
/////////////////////////////////////////////////////////////////////////
1: import java.net.URISyntaxException;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.util.IntrospectionSupport;
1: import org.apache.camel.util.ObjectHelper;
1: import org.apache.camel.util.URISupport;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:     protected String convertPathToActualDestination(String path, Map<String, Object> parameters) {
1:         // support ActiveMQ destination options using the destination. prefix
1:         // http://activemq.apache.org/destination-options.html
1:         Map options = IntrospectionSupport.extractProperties(parameters, "destination.");
1: 
1:         String query;
1:         try {
1:             query = URISupport.createQueryString(options);
1:         } catch (URISyntaxException e) {
1:             throw ObjectHelper.wrapRuntimeCamelException(e);
1:         }
1: 
1:         // if we have destination options then append them to the destination name
1:         if (ObjectHelper.isNotEmpty(query)) {
1:             return path + "?" + query;
1:         } else {
1:             return path;
1:         }
1:     }
1: 
1:     @Override
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:395a48d
/////////////////////////////////////////////////////////////////////////
1:      * @deprecated - use JmsComponent#setUsername(String)
1:      * @see JmsComponent#setUsername(String)
1:         setUsername(userName);
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:50dc586
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * We don't want to ever auto-wire the connection factory from the spring app context.
0:      * @return false
1:      */
0:     public boolean getAllowAutoWiredConnectionFactory() {
0:         return false;
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:edd8166
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(ActiveMQComponent.class);
1:     boolean sourceInitialized = false;
/////////////////////////////////////////////////////////////////////////
1:             createDestinationSource();
1:     protected void createDestinationSource() {
1:         try {
1:             if (source == null) {
1:                 if (connection == null) {
1:                     Connection value = getConfiguration().getConnectionFactory().createConnection();
1:                     if (value instanceof EnhancedConnection) {
1:                         connection = (EnhancedConnection) value;
1:                     } else {
1:                         throw new IllegalArgumentException("Created JMS Connection is not an EnhancedConnection: " + value);
1:                     }
1:                     connection.start();
1:                 }
1:                 source = connection.getDestinationSource();
1:             }
1:         } catch (Throwable t) {
1:             LOG.info("Can't get destination source, endpoint completer will not work", t);
1:         }
1:     }
1: 
1:         if (source != null) {
1:             source.stop();
1:             source = null;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         // try to initialize destination source only the first time
1:         if (!sourceInitialized) {
1:             createDestinationSource();
1:             sourceInitialized = true;
1:         if (source != null) {
1:             Set candidates = source.getQueues();
1:             String destinationName = completionText;
1:             if (completionText.startsWith("topic:")) {
1:                 candidates = source.getTopics();
1:                 destinationName = completionText.substring(6);
1:             } else if (completionText.startsWith("queue:")) {
1:                 destinationName = completionText.substring(6);
1:             }
1: 
1:             Iterator it = candidates.iterator();
1: 
1:             while (it.hasNext()) {
1:                 ActiveMQDestination destination = (ActiveMQDestination) it.next();
1:                 if (destination.getPhysicalName().startsWith(destinationName)) {
1:                     answer.add(destination.getPhysicalName());
1:                 }
1:             }
commit:b2a91b9
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: import org.apache.activemq.EnhancedConnection;
1: import org.apache.activemq.advisory.DestinationSource;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.camel.ComponentConfiguration;
1: import org.apache.camel.spi.EndpointCompleter;
1: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
1: 
1: public class ActiveMQComponent extends JmsComponent implements EndpointCompleter {
/////////////////////////////////////////////////////////////////////////
1:     private EnhancedConnection connection;
0:     private ConnectionFactory connectionFactory;
1:     DestinationSource source;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (connection == null) {
0:             Connection value = getConnectionFactory().createConnection();
0:             if (value instanceof EnhancedConnection) {
0:                 connection = (EnhancedConnection) value;
1:             }
0:             else {
0:                 throw new IllegalArgumentException("Created JMS Connection is not an EnhancedConnection: " + value);
1:             }
1:         }
0:         connection.start();
0:         source = connection.getDestinationSource();
1: 
1:             endpointLoader = new CamelEndpointLoader(getCamelContext(), source);
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public ConnectionFactory getConnectionFactory() {
0:         if (connectionFactory == null
0:                 && getConfiguration() instanceof ActiveMQConfiguration) {
0:             connectionFactory = ((ActiveMQConfiguration)getConfiguration()).createConnectionFactory();
1:         }
0:         return connectionFactory;
1:     }
1: 
1:     @Override
1:     public List<String> completeEndpointPath(ComponentConfiguration componentConfiguration, String completionText) {
0:         Set candidates = source.getQueues();
0:         String destinationName = completionText;
0:         if (completionText.startsWith("topic:")) {
0:             candidates = source.getTopics();
0:             destinationName = completionText.substring(6);
0:         } else if (completionText.startsWith("queue:")) {
0:             destinationName = completionText.substring(6);
1:         }
1: 
0:         Iterator it = candidates.iterator();
1:         ArrayList<String> answer = new ArrayList<String>();
0:         while (it.hasNext()) {
0:            ActiveMQDestination destination = (ActiveMQDestination)it.next();
0:            if (destination.getPhysicalName().startsWith(destinationName)) {
0:                answer.add(destination.getPhysicalName());
1:            }
1:         }
1:         return answer;
1:     }
commit:75a32e4
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import org.apache.activemq.Service;
1: import org.springframework.jms.connection.SingleConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     private final CopyOnWriteArrayList<SingleConnectionFactory> singleConnectionFactoryList =
1:         new CopyOnWriteArrayList<SingleConnectionFactory>();
1:     private final CopyOnWriteArrayList<Service> pooledConnectionFactoryServiceList =
1:         new CopyOnWriteArrayList<Service>();
/////////////////////////////////////////////////////////////////////////
1:     protected void addPooledConnectionFactoryService(Service pooledConnectionFactoryService) {
1:         pooledConnectionFactoryServiceList.add(pooledConnectionFactoryService);
1:     }
1: 
1:     protected void addSingleConnectionFactory(SingleConnectionFactory singleConnectionFactory) {
1:         singleConnectionFactoryList.add(singleConnectionFactory);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (Service s : pooledConnectionFactoryServiceList) {
1:             s.stop();
1:         }
1:         pooledConnectionFactoryServiceList.clear();
1:         for (SingleConnectionFactory s : singleConnectionFactoryList) {
1:             s.destroy();
1:         }
1:         singleConnectionFactoryList.clear();
1:     public void setConfiguration(JmsConfiguration configuration) {
1:         if (configuration instanceof ActiveMQConfiguration) {
1:             ((ActiveMQConfiguration) configuration).setActiveMQComponent(this);
1:         }
1:         super.setConfiguration(configuration);
1:     }
1: 
1:     @Override
1:         ActiveMQConfiguration answer = new ActiveMQConfiguration();
1:         answer.setActiveMQComponent(this);
1:         return answer;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:5f96839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
1: import org.apache.camel.CamelContext;
1: import org.apache.camel.component.jms.JmsComponent;
1: import org.apache.camel.component.jms.JmsConfiguration;
1: 
1: /**
1:  * The <a href="http://activemq.apache.org/camel/activemq.html">ActiveMQ Component</a>
1:  *
0:  * @version $Revision$
1:  */
0: public class ActiveMQComponent extends JmsComponent {
1:     /**
0:      * Creates an <a href="http://activemq.apache.org/camel/activemq.html">ActiveMQ Component</a>
1:      *
1:      * @return the created component
1:      */
1:     public static ActiveMQComponent activeMQComponent() {
1:         return new ActiveMQComponent();
1:     }
1: 
1:     /**
0:      * Creates an <a href="http://activemq.apache.org/camel/activemq.html">ActiveMQ Component</a>
1:      * connecting to the given <a href="http://activemq.apache.org/configuring-transports.html">broker URL</a>
1:      *
1:      * @param brokerURL the URL to connect to
1:      * @return the created component
1:      */
1:     public static ActiveMQComponent activeMQComponent(String brokerURL) {
1:         ActiveMQComponent answer = new ActiveMQComponent();
0:         answer.getConfiguration().setBrokerURL(brokerURL);
1:         return answer;
1:     }
1: 
1:     public ActiveMQComponent() {
1:     }
1: 
1:     public ActiveMQComponent(CamelContext context) {
1:         super(context);
1:     }
1: 
1:     public ActiveMQComponent(ActiveMQConfiguration configuration) {
0:         super(configuration);
1:     }
1: 
1:     @Override
0:     public ActiveMQConfiguration getConfiguration() {
0:         return (ActiveMQConfiguration) super.getConfiguration();
1:     }
1: 
1:     public void setBrokerURL(String brokerURL) {
0:         getConfiguration().setBrokerURL(brokerURL);
1:     }
1: 
1: 
1:     @Override
1:     protected JmsConfiguration createConfiguration() {
0:         return new ActiveMQConfiguration();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:be9bdab
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1: 
0:         // set the connection factory with the provided broker url
0:         answer.setConnectionFactory(new ActiveMQConnectionFactory(brokerURL));
/////////////////////////////////////////////////////////////////////////
1: 
author:Willem Ning Jiang
-------------------------------------------------------------------------------
commit:3c39b5d
/////////////////////////////////////////////////////////////////////////
1:      * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ Component</a>
/////////////////////////////////////////////////////////////////////////
1:      * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ Component</a>
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
author:Robert Davies
-------------------------------------------------------------------------------
commit:e40e2ac
/////////////////////////////////////////////////////////////////////////
1:         if (answer.getConfiguration() instanceof ActiveMQConfiguration) {
1:             ((ActiveMQConfiguration) answer.getConfiguration())
1:                     .setBrokerURL(brokerURL);
1:         }
/////////////////////////////////////////////////////////////////////////
1:    
1:         if (getConfiguration() instanceof ActiveMQConfiguration) {
1:             ((ActiveMQConfiguration)getConfiguration()).setBrokerURL(brokerURL);
1:         }
1:         if (getConfiguration() instanceof ActiveMQConfiguration) {
0:             ((ActiveMQConfiguration)getConfiguration()).setUserName(userName);
1:         }
1:         if (getConfiguration() instanceof ActiveMQConfiguration) {
0:             ((ActiveMQConfiguration)getConfiguration()).setPassword(password);
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (getConfiguration() instanceof ActiveMQConfiguration) {
1:             ((ActiveMQConfiguration)getConfiguration()).setUsePooledConnection(usePooledConnection);
1:         }
0:         if (getConfiguration() instanceof ActiveMQConfiguration) {
1:             ((ActiveMQConfiguration)getConfiguration()).setUseSingleConnection(useSingleConnection);
1:         }
author:James Strachan
-------------------------------------------------------------------------------
commit:926ce53
/////////////////////////////////////////////////////////////////////////
1:     public void setUserName(String userName) {
0:         getConfiguration().setUserName(userName);
0:     }
0: 
0:     public void setPassword(String password) {
0:         getConfiguration().setPassword(password);
0:     }
0: 
commit:80722e4
/////////////////////////////////////////////////////////////////////////
1:     public void setUsePooledConnection(boolean usePooledConnection) {
0:         getConfiguration().setUsePooledConnection(usePooledConnection);
0:     }
0: 
1:     public void setUseSingleConnection(boolean useSingleConnection) {
0:         getConfiguration().setUseSingleConnection(useSingleConnection);
0:     }
0: 
commit:26eedea
/////////////////////////////////////////////////////////////////////////
1:     private boolean exposeAllQueues;
1:     private CamelEndpointLoader endpointLoader;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean isExposeAllQueues() {
1:         return exposeAllQueues;
0:     }
0: 
0:     /**
1:      * If enabled this will cause all Queues in the ActiveMQ broker to be eagerly populated into the CamelContext
1:      * so that they can be easily browsed by any Camel tooling. This option is disabled by default.
0:      *
0:      * @param exposeAllQueues
0:      */
1:     public void setExposeAllQueues(boolean exposeAllQueues) {
1:         this.exposeAllQueues = exposeAllQueues;
0:     }
0: 
0:     @Override
1:     protected void doStart() throws Exception {
1:         super.doStart();
1:         if (isExposeAllQueues()) {
0:             endpointLoader = new CamelEndpointLoader(getCamelContext());
1:             endpointLoader.afterPropertiesSet();
0:         }
0:     }
0: 
0: 
0:     @Override
1:     protected void doStop() throws Exception {
0:         if (endpointLoader != null) {
0:             endpointLoader.destroy();
0:             endpointLoader = null;
0:         }
1:         super.doStop();
0:     }
============================================================================