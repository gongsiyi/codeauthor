22:d7355e7: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:8733d17:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8733d17:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:40a7d3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40a7d3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a7d3b:  * See the License for the specific language governing permissions and
1:40a7d3b:  * limitations under the License.
22:d7355e7:  */
1:fd4bb60: package org.apache.activemq.ra;
1:32446c1: 
1:8733d17: import java.io.IOException;
1:8733d17: import java.io.ObjectInputStream;
1:8733d17: import java.io.ObjectOutputStream;
1:40a7d3b: import java.io.PrintWriter;
1:8733d17: import java.io.Serializable;
1:40a7d3b: import java.util.Iterator;
1:40a7d3b: import java.util.Set;
19:205ac11: 
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.resource.ResourceException;
1:40a7d3b: import javax.resource.spi.ConnectionManager;
1:40a7d3b: import javax.resource.spi.ConnectionRequestInfo;
1:40a7d3b: import javax.resource.spi.ManagedConnection;
1:40a7d3b: import javax.resource.spi.ManagedConnectionFactory;
1:40a7d3b: import javax.resource.spi.ResourceAdapter;
1:40a7d3b: import javax.resource.spi.ResourceAdapterAssociation;
1:40a7d3b: import javax.security.auth.Subject;
1:da36f78: 
1:8bf987b: import org.slf4j.LoggerFactory;
1:205ac11: 
1:d7355e7: /**
1:540dd5c:  * @version $Revisio n$ TODO: Must override equals and hashCode (JCA spec 16.4)
1:540dd5c:  * @org.apache.xbean.XBean element="managedConnectionFactory"
1:d7355e7:  */
1:da36f78: public class ActiveMQManagedConnectionFactory extends ActiveMQConnectionSupport implements ManagedConnectionFactory, ResourceAdapterAssociation {
1:205ac11: 
1:40a7d3b:     private static final long serialVersionUID = 6196921962230582875L;
1:40a7d3b:     private PrintWriter logWriter;
1:205ac11: 
1:d7355e7:     /**
1:d7355e7:      * @see javax.resource.spi.ResourceAdapterAssociation#setResourceAdapter(javax.resource.spi.ResourceAdapter)
1:d7355e7:      */
1:da36f78:     @Override
1:40a7d3b:     public void setResourceAdapter(ResourceAdapter adapter) throws ResourceException {
1:d7355e7:         if (!(adapter instanceof MessageResourceAdapter)) {
1:d7355e7:             throw new ResourceException("ResourceAdapter is not of type: " + MessageResourceAdapter.class.getName());
1:da36f78:         } else {
1:da36f78:             if (log.isDebugEnabled()) {
1:9e13901:                 log.debug(this + ", copying standard ResourceAdapter configuration properties");
1:1e57750:             }
1:1e57750: 
1:8733d17:             ActiveMQConnectionRequestInfo baseInfo = ((MessageResourceAdapter) adapter).getInfo().copy();
1:8733d17:             if (getClientid() == null) {
1:8733d17:                 setClientid(baseInfo.getClientid());
1:1e57750:             }
1:8733d17:             if (getPassword() == null) {
1:8733d17:                 setPassword(baseInfo.getPassword());
1:1e57750:             }
1:8733d17:             if (getServerUrl() == null) {
1:8733d17:                 setServerUrl(baseInfo.getServerUrl());
1:1e57750:             }
1:8733d17:             if (getUseInboundSession() == null) {
1:8733d17:                 setUseInboundSession(baseInfo.getUseInboundSession());
1:1e57750:             }
1:9e13901:             if (getUseSessionArgs() == null) {
1:9e13901:                 setUseSessionArgs(baseInfo.isUseSessionArgs());
1:9e13901:             }
1:8733d17:             if (getUserName() == null) {
1:8733d17:                 setUserName(baseInfo.getUserName());
1:1e57750:             }
1:e39db56:             if (getDurableTopicPrefetch() == null) {
1:1e57750:                 setDurableTopicPrefetch(baseInfo.getDurableTopicPrefetch());
1:1e57750:             }
1:e39db56:             if (getOptimizeDurableTopicPrefetch() == null) {
1:1e57750:                 setOptimizeDurableTopicPrefetch(baseInfo.getOptimizeDurableTopicPrefetch());
1:1e57750:             }
1:e39db56:             if (getQueuePrefetch() == null) {
1:1e57750:                 setQueuePrefetch(baseInfo.getQueuePrefetch());
1:1e57750:             }
1:e39db56:             if (getQueueBrowserPrefetch() == null) {
1:1e57750:                 setQueueBrowserPrefetch(baseInfo.getQueueBrowserPrefetch());
1:1e57750:             }
1:e39db56:             if (getTopicPrefetch() == null) {
1:1e57750:                 setTopicPrefetch(baseInfo.getTopicPrefetch());
1:1e57750:             }
1:e39db56:             if (getKeyStore() == null) {
1:e39db56:                 setKeyStore(baseInfo.getKeyStore());
1:e39db56:             }
1:e39db56:             if (getKeyStorePassword() == null) {
1:e39db56:                 setKeyStorePassword(baseInfo.getKeyStorePassword());
1:e39db56:             }
1:e39db56:             if (getTrustStore() == null) {
1:e39db56:                 setTrustStore(baseInfo.getTrustStore());
1:e39db56:             }
1:e39db56:             if (getTrustStorePassword() == null) {
1:e39db56:                 setTrustStorePassword(baseInfo.getTrustStorePassword());
1:e39db56:             }
1:1e57750:         }
1:8733d17:     }
1:8733d17: 
1:8733d17:     /**
1:8733d17:      * @see javax.resource.spi.ResourceAdapterAssociation#getResourceAdapter()
1:8733d17:      */
1:da36f78:     @Override
1:8733d17:     public ResourceAdapter getResourceAdapter() {
1:8733d17:         return null;
1:8733d17:     }
1:540dd5c: 
1:d7355e7:     /**
1:d7355e7:      * @see java.lang.Object#equals(java.lang.Object)
1:d7355e7:      */
1:d7355e7:     @Override
1:32446c1:     public boolean equals(Object object) {
1:540dd5c:         if (object == null || object.getClass() != ActiveMQManagedConnectionFactory.class) {
1:32446c1:             return false;
1:8733d17:         }
1:da36f78:         return ((ActiveMQManagedConnectionFactory) object).getInfo().equals(getInfo());
1:540dd5c:     }
1:540dd5c: 
1:d7355e7:     /**
1:d7355e7:      * @see java.lang.Object#hashCode()
1:d7355e7:      */
1:d7355e7:     @Override
1:32446c1:     public int hashCode() {
1:8733d17:         return getInfo().hashCode();
1:540dd5c:     }
1:32446c1: 
1:d7355e7:     /**
1:da36f78:      * Writes this factory during serialization along with the superclass'
1:da36f78:      * <i>info</i> property. This needs to be done manually since the superclass
1:da36f78:      * is not serializable itself.
1:da36f78:      *
1:da36f78:      * @param out
1:da36f78:      *        the stream to write object state to
1:da36f78:      * @throws java.io.IOException
1:da36f78:      *         if the object cannot be serialized
1:d7355e7:      */
1:8733d17:     private void writeObject(ObjectOutputStream out) throws IOException {
1:da36f78:         if (logWriter != null && !(logWriter instanceof Serializable)) {
1:8733d17:             // if the PrintWriter injected by the application server is not
1:8733d17:             // serializable we just drop the reference and let the application
1:8733d17:             // server re-inject a PrintWriter later (after this factory has been
1:8733d17:             // deserialized again) using the standard setLogWriter() method
1:8733d17:             logWriter = null;
1:da36f78:         }
1:8733d17:         out.defaultWriteObject();
1:8733d17:         out.writeObject(getInfo());
1:8733d17:     }
1:32446c1: 
1:d7355e7:     /**
1:8733d17:      * Restores this factory along with the superclass' <i>info</i> property.
1:da36f78:      * This needs to be done manually since the superclass is not serializable
1:da36f78:      * itself.
1:da36f78:      *
1:da36f78:      * @param in
1:da36f78:      *        the stream to read object state from
1:da36f78:      * @throws java.io.IOException
1:da36f78:      *         if the object state could not be restored
1:da36f78:      * @throws java.lang.ClassNotFoundException
1:da36f78:      *         if the object state could not be restored
1:8733d17:      */
1:8733d17:     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
1:8733d17:         in.defaultReadObject();
1:8733d17:         setInfo((ActiveMQConnectionRequestInfo) in.readObject());
1:8bf987b:         log = LoggerFactory.getLogger(getClass());
1:8733d17:     }
1:da36f78: 
1:8733d17:     /**
1:40a7d3b:      * @see javax.resource.spi.ManagedConnectionFactory#createConnectionFactory(javax.resource.spi.ConnectionManager)
1:d7355e7:      */
1:da36f78:     @Override
1:40a7d3b:     public Object createConnectionFactory(ConnectionManager manager) throws ResourceException {
1:8733d17:         return new ActiveMQConnectionFactory(this, manager, getInfo());
1:540dd5c:     }
1:8733d17: 
1:d7355e7:     /**
1:205ac11:      * This is used when not running in an app server. For now we are creating a
1:40a7d3b:      * ConnectionFactory that has our SimpleConnectionManager implementation but
1:205ac11:      * it may be a better idea to not support this. The JMS api will have many
1:205ac11:      * quirks the user may not expect when running through the resource adapter.
1:da36f78:      *
1:40a7d3b:      * @see javax.resource.spi.ManagedConnectionFactory#createConnectionFactory()
1:d7355e7:      */
1:da36f78:     @Override
1:40a7d3b:     public Object createConnectionFactory() throws ResourceException {
1:8733d17:         return new ActiveMQConnectionFactory(this, new SimpleConnectionManager(), getInfo());
1:540dd5c:     }
1:f73e209: 
1:d7355e7:     /**
1:40a7d3b:      * @see javax.resource.spi.ManagedConnectionFactory#createManagedConnection(javax.security.auth.Subject,
2:40a7d3b:      *      javax.resource.spi.ConnectionRequestInfo)
1:d7355e7:      */
1:da36f78:     @Override
1:da36f78:     public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo connectionRequestInfo) throws ResourceException {
1:8733d17:         ActiveMQConnectionRequestInfo amqInfo = getInfo();
1:da36f78:         if (connectionRequestInfo instanceof ActiveMQConnectionRequestInfo) {
1:8733d17:             amqInfo = (ActiveMQConnectionRequestInfo) connectionRequestInfo;
1:da36f78:         }
1:8733d17:         try {
1:8733d17:             return new ActiveMQManagedConnection(subject, makeConnection(amqInfo), amqInfo);
1:540dd5c:         } catch (JMSException e) {
1:40a7d3b:             throw new ResourceException("Could not create connection.", e);
1:540dd5c:         }
1:67064db:     }
1:f73e209: 
1:d7355e7:     /**
1:40a7d3b:      * @see javax.resource.spi.ManagedConnectionFactory#matchManagedConnections(java.util.Set,
1:205ac11:      *      javax.security.auth.Subject,
1:205ac11:      *      javax.resource.spi.ConnectionRequestInfo)
1:d7355e7:      */
1:da36f78:     @Override
1:da36f78:     public ManagedConnection matchManagedConnections(Set connections, Subject subject, ConnectionRequestInfo connectionRequestInfo) throws ResourceException {
1:40a7d3b:         Iterator iterator = connections.iterator();
1:40a7d3b:         while (iterator.hasNext()) {
1:da36f78:             ActiveMQManagedConnection c = (ActiveMQManagedConnection) iterator.next();
1:8733d17:             if (c.matches(subject, connectionRequestInfo)) {
2:40a7d3b:                 try {
1:8733d17:                     c.associate(subject, (ActiveMQConnectionRequestInfo) connectionRequestInfo);
1:40a7d3b:                     return c;
1:540dd5c:                 } catch (JMSException e) {
1:40a7d3b:                     throw new ResourceException(e);
1:32446c1:                 }
1:32446c1:             }
1:32446c1:         }
1:40a7d3b:         return null;
1:d7355e7:     }
1:f73e209: 
1:d7355e7:     /**
1:40a7d3b:      * @see javax.resource.spi.ManagedConnectionFactory#setLogWriter(java.io.PrintWriter)
1:d7355e7:      */
1:da36f78:     @Override
1:8733d17:     public void setLogWriter(PrintWriter aLogWriter) throws ResourceException {
1:da36f78:         if (log.isTraceEnabled()) {
1:8733d17:             log.trace("setting log writer [" + aLogWriter + "]");
1:da36f78:         }
1:8733d17:         this.logWriter = aLogWriter;
1:8733d17:     }
1:205ac11: 
1:d7355e7:     /**
1:40a7d3b:      * @see javax.resource.spi.ManagedConnectionFactory#getLogWriter()
1:d7355e7:      */
1:da36f78:     @Override
1:40a7d3b:     public PrintWriter getLogWriter() throws ResourceException {
1:da36f78:         if (log.isTraceEnabled()) {
1:8733d17:             log.trace("getting log writer [" + logWriter + "]");
1:8733d17:         }
1:40a7d3b:         return logWriter;
1:da36f78:     }
1:f73e209: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e39db56
/////////////////////////////////////////////////////////////////////////
1:             if (getDurableTopicPrefetch() == null) {
1:             if (getOptimizeDurableTopicPrefetch() == null) {
1:             if (getQueuePrefetch() == null) {
1:             if (getQueueBrowserPrefetch() == null) {
1:             if (getTopicPrefetch() == null) {
1:             if (getKeyStore() == null) {
1:                 setKeyStore(baseInfo.getKeyStore());
1:             }
1:             if (getKeyStorePassword() == null) {
1:                 setKeyStorePassword(baseInfo.getKeyStorePassword());
1:             }
1:             if (getTrustStore() == null) {
1:                 setTrustStore(baseInfo.getTrustStore());
1:             }
1:             if (getTrustStorePassword() == null) {
1:                 setTrustStorePassword(baseInfo.getTrustStorePassword());
1:             }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:da36f78
/////////////////////////////////////////////////////////////////////////
1: 
1: public class ActiveMQManagedConnectionFactory extends ActiveMQConnectionSupport implements ManagedConnectionFactory, ResourceAdapterAssociation {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         } else {
1:             if (log.isDebugEnabled()) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         return ((ActiveMQManagedConnectionFactory) object).getInfo().equals(getInfo());
/////////////////////////////////////////////////////////////////////////
1:      * Writes this factory during serialization along with the superclass'
1:      * <i>info</i> property. This needs to be done manually since the superclass
1:      * is not serializable itself.
1:      *
1:      * @param out
1:      *        the stream to write object state to
1:      * @throws java.io.IOException
1:      *         if the object cannot be serialized
1:         if (logWriter != null && !(logWriter instanceof Serializable)) {
1:         }
1:      * This needs to be done manually since the superclass is not serializable
1:      * itself.
1:      *
1:      * @param in
1:      *        the stream to read object state from
1:      * @throws java.io.IOException
1:      *         if the object state could not be restored
1:      * @throws java.lang.ClassNotFoundException
1:      *         if the object state could not be restored
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo connectionRequestInfo) throws ResourceException {
1:         if (connectionRequestInfo instanceof ActiveMQConnectionRequestInfo) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public ManagedConnection matchManagedConnections(Set connections, Subject subject, ConnectionRequestInfo connectionRequestInfo) throws ResourceException {
1:             ActiveMQManagedConnection c = (ActiveMQManagedConnection) iterator.next();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         if (log.isTraceEnabled()) {
1:         }
1:     @Override
1:         if (log.isTraceEnabled()) {
1: }
author:gtully
-------------------------------------------------------------------------------
commit:9e13901
/////////////////////////////////////////////////////////////////////////
1:                 log.debug(this + ", copying standard ResourceAdapter configuration properties");
/////////////////////////////////////////////////////////////////////////
1:             if (getUseSessionArgs() == null) {
1:                 setUseSessionArgs(baseInfo.isUseSessionArgs());
1:             }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1e57750
/////////////////////////////////////////////////////////////////////////
1:             }
1: 
1:             }
1:             }
1:             }
1:             }
1:             }
0:             if (getDurableTopicPrefetch() != null) {
1:                 setDurableTopicPrefetch(baseInfo.getDurableTopicPrefetch());
1:             }
0:             if (getOptimizeDurableTopicPrefetch() != null) {
1:                 setOptimizeDurableTopicPrefetch(baseInfo.getOptimizeDurableTopicPrefetch());
1:             }
0:             if (getQueuePrefetch() != null) {
1:                 setQueuePrefetch(baseInfo.getQueuePrefetch());
1:             }
0:             if (getQueueBrowserPrefetch() != null) {
1:                 setQueueBrowserPrefetch(baseInfo.getQueueBrowserPrefetch());
1:             }
0:             if (getTopicPrefetch() != null) {
1:                 setTopicPrefetch(baseInfo.getTopicPrefetch());
1:             }
0:             if (getInputStreamPrefetch() != null) {
0:                 setInputStreamPrefetch(baseInfo.getInputStreamPrefetch());
1:             }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:         log = LoggerFactory.getLogger(getClass());
author:Robert Davies
-------------------------------------------------------------------------------
commit:8733d17
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.LogFactory;
0: public class ActiveMQManagedConnectionFactory extends ActiveMQConnectionSupport
0:         implements ManagedConnectionFactory, ResourceAdapterAssociation {
/////////////////////////////////////////////////////////////////////////
0:         else
0:         {
0:             if ( log.isDebugEnabled() ) {
0:                 log.debug("copying standard ResourceAdapter configuration properties");
1:             ActiveMQConnectionRequestInfo baseInfo = ((MessageResourceAdapter) adapter).getInfo().copy();
1:             if (getClientid() == null) {
1:                 setClientid(baseInfo.getClientid());
1:             if (getPassword() == null) {
1:                 setPassword(baseInfo.getPassword());
1:             if (getServerUrl() == null) {
1:                 setServerUrl(baseInfo.getServerUrl());
1:             if (getUseInboundSession() == null) {
1:                 setUseInboundSession(baseInfo.getUseInboundSession());
1:             if (getUserName() == null) {
1:                 setUserName(baseInfo.getUserName());
1:     }
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ResourceAdapterAssociation#getResourceAdapter()
1:      */
1:     public ResourceAdapter getResourceAdapter() {
1:         return null;
/////////////////////////////////////////////////////////////////////////
0:         return ((ActiveMQManagedConnectionFactory)object).getInfo().equals(getInfo());
/////////////////////////////////////////////////////////////////////////
1:         return getInfo().hashCode();
0:      * Writes this factory during serialization along with the superclass' <i>info</i> property.
0:      * This needs to be done manually since the superclass is not serializable itself.
1:      * 
0:      * @param out the stream to write object state to
0:      * @throws java.io.IOException if the object cannot be serialized
1:     private void writeObject(ObjectOutputStream out) throws IOException {
0:         if ( logWriter != null && !(logWriter instanceof Serializable) ) {
1:             // if the PrintWriter injected by the application server is not
1:             // serializable we just drop the reference and let the application
1:             // server re-inject a PrintWriter later (after this factory has been
1:             // deserialized again) using the standard setLogWriter() method
1:             logWriter = null;
1:     }
1:         out.defaultWriteObject();
1:         out.writeObject(getInfo());
1:      * Restores this factory along with the superclass' <i>info</i> property.
0:      * This needs to be done manually since the superclass is not serializable itself.
1:      * 
0:      * @param in the stream to read object state from
0:      * @throws java.io.IOException if the object state could not be restored
0:      * @throws java.lang.ClassNotFoundException if the object state could not be restored
1:      */
1:     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
1:         in.defaultReadObject();
1:         setInfo((ActiveMQConnectionRequestInfo) in.readObject());
0:         log = LogFactory.getLog(getClass());
1:     }
1:     
1:     /**
1:         return new ActiveMQConnectionFactory(this, manager, getInfo());
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQConnectionFactory(this, new SimpleConnectionManager(), getInfo());
0:     public ManagedConnection createManagedConnection(
0:             Subject subject, 
0:             ConnectionRequestInfo connectionRequestInfo) throws ResourceException {
1:         ActiveMQConnectionRequestInfo amqInfo = getInfo();
0:         if ( connectionRequestInfo instanceof ActiveMQConnectionRequestInfo ) {
1:             amqInfo = (ActiveMQConnectionRequestInfo) connectionRequestInfo;
1:         try {
1:             return new ActiveMQManagedConnection(subject, makeConnection(amqInfo), amqInfo);
/////////////////////////////////////////////////////////////////////////
0:     public ManagedConnection matchManagedConnections(
0:             Set connections, 
0:             Subject subject, 
0:             ConnectionRequestInfo connectionRequestInfo) throws ResourceException {
1:             if (c.matches(subject, connectionRequestInfo)) {
1:                     c.associate(subject, (ActiveMQConnectionRequestInfo) connectionRequestInfo);
/////////////////////////////////////////////////////////////////////////
1:     public void setLogWriter(PrintWriter aLogWriter) throws ResourceException {
0:         if ( log.isTraceEnabled() ) {
1:             log.trace("setting log writer [" + aLogWriter + "]");
1:     }
1:         this.logWriter = aLogWriter;
0:         if ( log.isTraceEnabled() ) {
1:             log.trace("getting log writer [" + logWriter + "]");
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  * @version $Revisio n$ TODO: Must override equals and hashCode (JCA spec 16.4)
1:  * @org.apache.xbean.XBean element="managedConnectionFactory"
/////////////////////////////////////////////////////////////////////////
0:         this.adapter = (MessageResourceAdapter)adapter;
0:         if (info.getClientid() == null) {
1:         }
0:         if (info.getPassword() == null) {
1:         }
0:         if (info.getServerUrl() == null) {
1:         }
0:         if (info.getUseInboundSession() == null) {
1:         }
0:         if (info.getUserName() == null) {
1:         }
1: 
1:         if (object == null || object.getClass() != ActiveMQManagedConnectionFactory.class) {
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if (info == null) {
0:             ActiveMQConnectionRequestInfo amqInfo = (ActiveMQConnectionRequestInfo)info;
1:         } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQManagedConnection c = (ActiveMQManagedConnection)iterator.next();
0:                     c.associate(subject, (ActiveMQConnectionRequestInfo)info);
1:                 } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:67064db
/////////////////////////////////////////////////////////////////////////
0:             if( info == null ) {
0:                 info = this.info;
1:             }
commit:32446c1
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean equals(Object object) {
0:         if( object == null || object.getClass()!=ActiveMQManagedConnectionFactory.class ) {
1:             return false;
1:         }
0:         return ((ActiveMQManagedConnectionFactory)object).info.equals(info);
1:     }
1:     
1:     public int hashCode() {
0:         return info.hashCode();
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
author:James Strachan
-------------------------------------------------------------------------------
commit:d7355e7
/////////////////////////////////////////////////////////////////////////
0:     private MessageResourceAdapter adapter;
1:     /**
1:      * @see javax.resource.spi.ResourceAdapterAssociation#setResourceAdapter(javax.resource.spi.ResourceAdapter)
1:      */
1:         if (!(adapter instanceof MessageResourceAdapter)) {
1:             throw new ResourceException("ResourceAdapter is not of type: " + MessageResourceAdapter.class.getName());
1:         }
0:         this.adapter = (MessageResourceAdapter) adapter;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see java.lang.Object#equals(java.lang.Object)
1:      */
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see java.lang.Object#hashCode()
1:      */
1:     @Override
1:     /**
0:      * @see javax.resource.spi.ResourceAdapterAssociation#getResourceAdapter()
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * 
1:      */
1:     /**
0:      * @param topicPrefetch
1:      */
commit:f73e209
/////////////////////////////////////////////////////////////////////////
0:     public boolean isUseInboundSessionEnabled() {
0:         return info.isUseInboundSessionEnabled();
1:     }
1: 
0:     // Redelivery policy configuration
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void setRedeliveryUseExponentialBackOff(Boolean value) {
0:         info.setRedeliveryUseExponentialBackOff(value);
0:     }
1: 
1: 
0:     // Prefetch policy configuration
/////////////////////////////////////////////////////////////////////////
commit:205ac11
/////////////////////////////////////////////////////////////////////////
0:  * @version $Revisio n$
0:  * TODO: Must override equals and hashCode (JCA spec 16.4)
0: public class ActiveMQManagedConnectionFactory implements ManagedConnectionFactory, ResourceAdapterAssociation {
1: 
1: 
0:         if (info.getClientid() == null)
0:         if (info.getPassword() == null)
0:         if (info.getServerUrl() == null)
0:         if (info.getUseInboundSession() == null)
0:         if (info.getUserName() == null)
/////////////////////////////////////////////////////////////////////////
1:      * This is used when not running in an app server. For now we are creating a
1:      * it may be a better idea to not support this. The JMS api will have many
1:      * quirks the user may not expect when running through the resource adapter.
0:      * 
/////////////////////////////////////////////////////////////////////////
0:             ActiveMQConnectionRequestInfo amqInfo = (ActiveMQConnectionRequestInfo) info;
0:         }
0:         catch (JMSException e) {
1:      *      javax.security.auth.Subject,
1:      *      javax.resource.spi.ConnectionRequestInfo)
/////////////////////////////////////////////////////////////////////////
0:                 }
0:                 catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
0:     // /////////////////////////////////////////////////////////////////////////
0:     // /////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Long getInitialRedeliveryDelay() {
0:         return info.getInitialRedeliveryDelay();
0:     }
1: 
0:     public Integer getMaximumRedeliveries() {
0:         return info.getMaximumRedeliveries();
0:     }
1: 
0:     public Short getRedeliveryBackOffMultiplier() {
0:         return info.getRedeliveryBackOffMultiplier();
0:     }
1: 
0:     public Boolean getRedeliveryUseExponentialBackOff() {
0:         return info.getRedeliveryUseExponentialBackOff();
0:     }
1: 
0:     public boolean isUseInboundSessionEnabled() {
0:         return info.isUseInboundSessionEnabled();
0:     }
1: 
0:     public void setInitialRedeliveryDelay(Long value) {
0:         info.setInitialRedeliveryDelay(value);
0:     }
1: 
0:     public void setMaximumRedeliveries(Integer value) {
0:         info.setMaximumRedeliveries(value);
0:     }
1: 
0:     public void setRedeliveryBackOffMultiplier(Short value) {
0:         info.setRedeliveryBackOffMultiplier(value);
0:     }
1: 
0:     public Integer getDurableTopicPrefetch() {
0:         return info.getDurableTopicPrefetch();
0:     }
1: 
0:     public Integer getInputStreamPrefetch() {
0:         return info.getInputStreamPrefetch();
0:     }
1: 
0:     public Integer getQueueBrowserPrefetch() {
0:         return info.getQueueBrowserPrefetch();
0:     }
1: 
0:     public Integer getQueuePrefetch() {
0:         return info.getQueuePrefetch();
0:     }
1: 
0:     public Integer getTopicPrefetch() {
0:         return info.getTopicPrefetch();
0:     }
1: 
0:     public void setAllPrefetchValues(Integer i) {
0:         info.setAllPrefetchValues(i);
0:     }
1: 
0:     public void setDurableTopicPrefetch(Integer durableTopicPrefetch) {
0:         info.setDurableTopicPrefetch(durableTopicPrefetch);
0:     }
1: 
0:     public void setInputStreamPrefetch(Integer inputStreamPrefetch) {
0:         info.setInputStreamPrefetch(inputStreamPrefetch);
0:     }
1: 
0:     public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) {
0:         info.setQueueBrowserPrefetch(queueBrowserPrefetch);
0:     }
1: 
0:     public void setQueuePrefetch(Integer queuePrefetch) {
0:         info.setQueuePrefetch(queuePrefetch);
0:     }
1: 
0:     public void setRedeliveryUseExponentialBackOff(Boolean value) {
0:         info.setRedeliveryUseExponentialBackOff(value);
0:     }
1: 
0:     public void setTopicPrefetch(Integer topicPrefetch) {
0:         info.setTopicPrefetch(topicPrefetch);
0:     }
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  *
0:  **/
0: package org.activemq.ra;
0: 
1: import java.io.PrintWriter;
1: import java.util.Iterator;
1: import java.util.Set;
0: 
1: import javax.jms.JMSException;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.ConnectionManager;
1: import javax.resource.spi.ConnectionRequestInfo;
1: import javax.resource.spi.ManagedConnection;
1: import javax.resource.spi.ManagedConnectionFactory;
1: import javax.resource.spi.ResourceAdapter;
1: import javax.resource.spi.ResourceAdapterAssociation;
1: import javax.security.auth.Subject;
0: 
0: /**
0:  * @version $Revisio    n$
0:  * 
0:  * TODO: Must override equals and hashCode (JCA spec 16.4) 
0:  */
0: public class ActiveMQManagedConnectionFactory implements
0:         ManagedConnectionFactory, ResourceAdapterAssociation {
0: 
1:     private static final long serialVersionUID = 6196921962230582875L;
0:     
0:     private ActiveMQResourceAdapter adapter;
1:     private PrintWriter logWriter;
0:     private ActiveMQConnectionRequestInfo info = new ActiveMQConnectionRequestInfo();
0:     
1:     public void setResourceAdapter(ResourceAdapter adapter) throws ResourceException {
0:         this.adapter = (ActiveMQResourceAdapter) adapter;
0:         ActiveMQConnectionRequestInfo baseInfo = this.adapter.getInfo().copy();
0:         if( info.getClientid()==null ) 
0:             info.setClientid(baseInfo.getClientid());
0:         if( info.getPassword()==null )
0:             info.setPassword(baseInfo.getPassword());
0:         if( info.getServerUrl()==null )
0:             info.setServerUrl(baseInfo.getServerUrl());
0:         if( info.getUseInboundSession()==null )
0:             info.setUseInboundSession(baseInfo.getUseInboundSession());
0:         if( info.getUserName()==null )
0:             info.setUserName(baseInfo.getUserName());
0:     }
0: 
0:     public ResourceAdapter getResourceAdapter() {
0:         return adapter;
0:     }
0: 
0:     /**
1:      * @see javax.resource.spi.ManagedConnectionFactory#createConnectionFactory(javax.resource.spi.ConnectionManager)
0:      */
1:     public Object createConnectionFactory(ConnectionManager manager) throws ResourceException {
0:         return new ActiveMQConnectionFactory(this, manager, info);
0:     }
0: 
0:     /**
0:      * This is used when not running in an app server.  For now we are creating a
1:      * ConnectionFactory that has our SimpleConnectionManager implementation but
0:      * it may be a better idea to not support this.  The JMS api will have many quirks
0:      * the user may not expect when running through the resource adapter.
0:      *
1:      * @see javax.resource.spi.ManagedConnectionFactory#createConnectionFactory()
0:      */
1:     public Object createConnectionFactory() throws ResourceException {
0:         return new ActiveMQConnectionFactory(this, new SimpleConnectionManager(), info);
0:     }
0: 
0:     /**
1:      * @see javax.resource.spi.ManagedConnectionFactory#createManagedConnection(javax.security.auth.Subject,
1:      *      javax.resource.spi.ConnectionRequestInfo)
0:      */
0:     public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo info) throws ResourceException {
1:         try {
0:             ActiveMQConnectionRequestInfo amqInfo = (ActiveMQConnectionRequestInfo)info;
0:             return new ActiveMQManagedConnection(subject, adapter.makeConnection(amqInfo), amqInfo);
0:         } catch (JMSException e) {
1:             throw new ResourceException("Could not create connection.", e);
0:         }
0:     }
0: 
0:     /**
1:      * @see javax.resource.spi.ManagedConnectionFactory#matchManagedConnections(java.util.Set,
0:             *      javax.security.auth.Subject,
1:             *      javax.resource.spi.ConnectionRequestInfo)
0:      */
0:     public ManagedConnection matchManagedConnections(Set connections, Subject subject, ConnectionRequestInfo info) throws ResourceException {
1:         Iterator iterator = connections.iterator();
1:         while (iterator.hasNext()) {
0:             ActiveMQManagedConnection c = (ActiveMQManagedConnection) iterator.next();
0:             if (c.matches(subject, info)) {
1:                 try {
0:                     c.associate(subject, (ActiveMQConnectionRequestInfo) info);
1:                     return c;
0:                 } catch (JMSException e) {
1:                     throw new ResourceException(e);
0:                 }
0:             }
0:         }
1:         return null;
0:     }
0: 
0:     /**
1:      * @see javax.resource.spi.ManagedConnectionFactory#setLogWriter(java.io.PrintWriter)
0:      */
0:     public void setLogWriter(PrintWriter logWriter) throws ResourceException {
0:         this.logWriter = logWriter;
0:     }
0: 
0:     /**
1:      * @see javax.resource.spi.ManagedConnectionFactory#getLogWriter()
0:      */
1:     public PrintWriter getLogWriter() throws ResourceException {
1:         return logWriter;
0:     }
0: 
0:     ///////////////////////////////////////////////////////////////////////////
0:     //
0:     // Bean setters and getters.
0:     //
0:     ///////////////////////////////////////////////////////////////////////////
0:     
0:     public String getClientid() {
0:         return info.getClientid();
0:     }
0: 
0:     public String getPassword() {
0:         return info.getPassword();
0:     }
0: 
0:     public String getServerUrl() {
0:         return info.getServerUrl();
0:     }
0: 
0:     public String getUserName() {
0:         return info.getUserName();
0:     }
0: 
0:     public void setClientid(String clientid) {
0:         info.setClientid(clientid);
0:     }
0: 
0:     public void setPassword(String password) {
0:         info.setPassword(password);
0:     }
0: 
0:     public void setServerUrl(String url) {
0:         info.setServerUrl(url);
0:     }
0: 
0:     public void setUserName(String userid) {
0:         info.setUserName(userid);
0:     }
0: 
0:     public Boolean getUseInboundSession() {
0:         return info.getUseInboundSession();
0:     }
0: 
0:     public void setUseInboundSession(Boolean useInboundSession) {
0:         info.setUseInboundSession(useInboundSession);
0:     }
0: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:29459ed
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * @org.apache.xbean.XBean element="managedConnectionFactory"  
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2004 The Apache Software Foundation
/////////////////////////////////////////////////////////////////////////
0:  */
============================================================================