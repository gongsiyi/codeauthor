1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network;
18:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: 
1:230a86c: import junit.framework.Test;
1:c7d559f: 
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:25e3c1b: import org.apache.activemq.broker.region.DestinationStatistics;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:4fa1035: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:763e331: import org.apache.activemq.util.Wait;
1:d29ca2a: 
1:d29ca2a: public class DemandForwardingBridgeTest extends NetworkTestSupport {
1:230a86c: 
1:d29ca2a:     public ActiveMQDestination destination;
1:d29ca2a:     public byte destinationType;
1:d29ca2a:     public int deliveryMode;
1:d29ca2a:     private DemandForwardingBridge bridge;
1:d29ca2a: 
1:230a86c:     public void initCombosForTestSendThenAddConsumer() {
1:230a86c:         addCombinationValues("deliveryMode", new Object[] {new Integer(DeliveryMode.NON_PERSISTENT), new Integer(DeliveryMode.PERSISTENT)});
1:230a86c:         addCombinationValues("destinationType", new Object[] {new Byte(ActiveMQDestination.QUEUE_TYPE)});
5:d29ca2a:     }
1:230a86c: 
1:7f5213b:     public void testSendThenAddConsumer() throws Exception {
1:230a86c: 
1:230a86c:         // Start a producer on local broker
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.send(producerInfo);
1:d29ca2a: 
1:d29ca2a:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
1:d29ca2a: 
1:d29ca2a:         // Start a consumer on a remote broker
1:763e331:         final StubConnection connection2 = createRemoteConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:230a86c: 
1:d29ca2a:         // Send the message to the local broker.
2:d29ca2a:         connection1.send(createMessage(producerInfo, destination, deliveryMode));
1:230a86c: 
1:d29ca2a:         // Verify that the message stayed on the local broker.
1:230a86c:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         connection1.send(consumerInfo1);
1:d29ca2a:         Message m = receiveMessage(connection1);
3:d29ca2a:         assertNotNull(m);
1:d29ca2a:         // Close consumer to cause the message to rollback.
1:d29ca2a:         connection1.send(consumerInfo1.createRemoveCommand());
1:230a86c: 
1:25e3c1b:         final DestinationStatistics destinationStatistics = broker.getDestination(destination).getDestinationStatistics();
1:7dc522d: 
1:7dc522d:         Wait.waitFor(new Wait.Condition() {
1:7dc522d:             @Override
1:7dc522d:             public boolean isSatisified() throws Exception {
1:7dc522d:                 return 1 == destinationStatistics.getDispatched().getCount();
1:7dc522d:             }
1:7dc522d:         });
1:25e3c1b:         assertEquals("broker dest stat dispatched", 1, destinationStatistics.getDispatched().getCount());
1:25e3c1b:         assertEquals("broker dest stat dequeues", 0, destinationStatistics.getDequeues().getCount());
1:25e3c1b:         assertEquals("broker dest stat forwards", 0, destinationStatistics.getForwards().getCount());
1:25e3c1b: 
1:230a86c:         // Now create remote consumer that should cause message to move to this
1:230a86c:         // remote consumer.
1:4fa1035:         final ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:763e331:         connection2.request(consumerInfo2);
1:230a86c: 
1:d29ca2a:         // Make sure the message was delivered via the remote.
1:763e331:         assertTrue("message was received", Wait.waitFor(new Wait.Condition() {
1:c7d559f:             @Override
1:763e331:             public boolean isSatisified() throws Exception {
1:4fa1035:                 Message msg = receiveMessage(connection2);
1:4fa1035:                 if (msg != null) {
1:4fa1035:                     connection2.request(createAck(consumerInfo2, msg, 1, MessageAck.STANDARD_ACK_TYPE));
1:4fa1035:                     return true;
1:4fa1035:                 }
1:4fa1035: 
1:4fa1035:                 return false;
1:c7d559f:             }
1:763e331:         }));
1:25e3c1b: 
1:25e3c1b:         assertTrue("broker dest stat forwards", Wait.waitFor(new Wait.Condition() {
1:25e3c1b:             @Override
1:25e3c1b:             public boolean isSatisified() throws Exception {
1:25e3c1b:                 return 1 == destinationStatistics.getForwards().getCount();
1:25e3c1b:             }
1:25e3c1b:         }));
1:4fa1035: 
1:25e3c1b:         assertEquals("broker dest stat dequeues", 1, destinationStatistics.getDequeues().getCount());
1:763e331:     }
1:d29ca2a: 
1:230a86c:     public void initCombosForTestAddConsumerThenSend() {
1:230a86c:         addCombinationValues("deliveryMode", new Object[] {new Integer(DeliveryMode.NON_PERSISTENT), new Integer(DeliveryMode.PERSISTENT)});
1:230a86c:         addCombinationValues("destinationType", new Object[] {new Byte(ActiveMQDestination.QUEUE_TYPE), new Byte(ActiveMQDestination.TOPIC_TYPE)});
1:230a86c:     }
1:230a86c: 
1:7f5213b:     public void testAddConsumerThenSend() throws Exception {
1:230a86c: 
1:230a86c:         // Start a producer on local broker
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.send(producerInfo);
1:d29ca2a: 
1:d29ca2a:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
1:d29ca2a: 
1:d29ca2a:         // Start a consumer on a remote broker
2:d29ca2a:         StubConnection connection2 = createRemoteConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:230a86c:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:230a86c:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo2, destination);
1:d29ca2a:         connection2.send(consumerInfo);
1:230a86c: 
1:230a86c:         // Give demand forwarding bridge a chance to finish forwarding the
1:230a86c:         // subscriptions.
1:3a7c673:         try {
1:3a7c673:             Thread.sleep(1000);
1:3a7c673:         } catch (InterruptedException ie) {
1:3a7c673:             ie.printStackTrace();
1:3a7c673:         }
1:230a86c: 
1:d29ca2a:         // Send the message to the local boker.
1:d7a1483:         connection1.request(createMessage(producerInfo, destination, deliveryMode));
1:d29ca2a:         // Make sure the message was delivered via the remote.
1:c7d559f:         receiveMessage(connection2);
1:230a86c:     }
1:3a7c673: 
1:c7d559f:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:ae73f86:         NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
1:54114cc:         config.setBrokerName("local");
1:ae73f86:         config.setDispatchAsync(false);
1:230a86c:         bridge = new DemandForwardingBridge(config, createTransport(), createRemoteTransport());
1:301203e:         bridge.setBrokerService(broker);
1:230a86c:         bridge.start();
1:d29ca2a:     }
1:230a86c: 
1:c7d559f:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         bridge.stop();
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(DemandForwardingBridgeTest.class);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:3a7c673: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:gtully
-------------------------------------------------------------------------------
commit:7dc522d
/////////////////////////////////////////////////////////////////////////
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == destinationStatistics.getDispatched().getCount();
1:             }
1:         });
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
commit:25e3c1b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DestinationStatistics;
/////////////////////////////////////////////////////////////////////////
1:         final DestinationStatistics destinationStatistics = broker.getDestination(destination).getDestinationStatistics();
1:         assertEquals("broker dest stat dispatched", 1, destinationStatistics.getDispatched().getCount());
1:         assertEquals("broker dest stat dequeues", 0, destinationStatistics.getDequeues().getCount());
1:         assertEquals("broker dest stat forwards", 0, destinationStatistics.getForwards().getCount());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTrue("broker dest stat forwards", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == destinationStatistics.getForwards().getCount();
1:             }
1:         }));
1:         assertEquals("broker dest stat dequeues", 1, destinationStatistics.getDequeues().getCount());
0:         assertEquals("remote broker dest stat dequeues", 1, remoteBroker.getDestination(destination).getDestinationStatistics().getDequeues().getCount());
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4fa1035
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageAck;
/////////////////////////////////////////////////////////////////////////
1:         final ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:                 Message msg = receiveMessage(connection2);
1:                 if (msg != null) {
1:                     connection2.request(createAck(consumerInfo2, msg, 1, MessageAck.STANDARD_ACK_TYPE));
1:                     return true;
1:                 }
1: 
1:                 return false;
/////////////////////////////////////////////////////////////////////////
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             }
/////////////////////////////////////////////////////////////////////////
1:         receiveMessage(connection2);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:763e331
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         final StubConnection connection2 = createRemoteConnection();
/////////////////////////////////////////////////////////////////////////
1:         connection2.request(consumerInfo2);
1:         assertTrue("message was received", Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
0:                 return receiveMessage(connection2) != null;
1:             }            
1:         }));
commit:301203e
/////////////////////////////////////////////////////////////////////////
1:         bridge.setBrokerService(broker);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void initCombosForTestSendThenAddConsumer() {
1:         addCombinationValues("deliveryMode", new Object[] {new Integer(DeliveryMode.NON_PERSISTENT), new Integer(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destinationType", new Object[] {new Byte(ActiveMQDestination.QUEUE_TYPE)});
1: 
1: 
1:         // Start a producer on local broker
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
/////////////////////////////////////////////////////////////////////////
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1: 
1: 
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1: 
1:         // Now create remote consumer that should cause message to move to this
1:         // remote consumer.
0:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1: 
1:     public void initCombosForTestAddConsumerThenSend() {
1:         addCombinationValues("deliveryMode", new Object[] {new Integer(DeliveryMode.NON_PERSISTENT), new Integer(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destinationType", new Object[] {new Byte(ActiveMQDestination.QUEUE_TYPE), new Byte(ActiveMQDestination.TOPIC_TYPE)});
1:     }
1: 
1: 
1:         // Start a producer on local broker
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
/////////////////////////////////////////////////////////////////////////
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo2, destination);
1: 
1:         // Give demand forwarding bridge a chance to finish forwarding the
1:         // subscriptions.
1: 
1:     }
1:         bridge = new DemandForwardingBridge(config, createTransport(), createRemoteTransport());
1:         bridge.start();
1: 
1: 
1: 
commit:3a7c673
/////////////////////////////////////////////////////////////////////////
0:         // Give demand forwarding bridge a chance to finish forwarding the subscriptions.
1:         try {
1:             Thread.sleep(1000);
1:         } catch (InterruptedException ie) {
1:             ie.printStackTrace();
1:         }
1:         
1:         
/////////////////////////////////////////////////////////////////////////
0:         bridge.start();        
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testSendThenAddConsumer() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testAddConsumerThenSend() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import javax.jms.DeliveryMode;
1: 
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
0: import org.apache.activemq.network.DemandForwardingBridge;
1: 
0: import junit.framework.Test;
1: 
1: 
1: public class DemandForwardingBridgeTest extends NetworkTestSupport {
1:     
1:     public ActiveMQDestination destination;
1:     public byte destinationType;
1:     public int deliveryMode;
1:     private DemandForwardingBridge bridge;
1: 
0:     public void initCombosForTestSendThenAddConsumer() {    
0:         addCombinationValues( "deliveryMode", new Object[]{ 
0:                 new Integer(DeliveryMode.NON_PERSISTENT), 
0:                 new Integer(DeliveryMode.PERSISTENT)} );        
0:         addCombinationValues( "destinationType", new Object[]{ 
0:                 new Byte(ActiveMQDestination.QUEUE_TYPE), 
0:                 } );
1:     }
0:     public void testSendThenAddConsumer() throws Throwable {
1:         
0:         // Start a producer on local broker 
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
0:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);        
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.send(producerInfo);
1: 
1:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
1: 
1:         // Start a consumer on a remote broker
1:         StubConnection connection2 = createRemoteConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
0:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);        
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         
1:         // Send the message to the local broker.
1:         connection1.send(createMessage(producerInfo, destination, deliveryMode));
1:         
1:         // Verify that the message stayed on the local broker.
0:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);        
1:         connection1.send(consumerInfo1);
1:         Message m = receiveMessage(connection1);
1:         assertNotNull(m);
1:         // Close consumer to cause the message to rollback.
1:         connection1.send(consumerInfo1.createRemoveCommand());
1:         
0:         // Now create remote consumer that should cause message to move to this remote consumer.
0:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);        
0:         connection2.send(consumerInfo2);
1:         
1:         // Make sure the message was delivered via the remote.
0:         m = receiveMessage(connection2);
1:         assertNotNull(m);
1:     }
1: 
0:     public void initCombosForTestAddConsumerThenSend() {    
0:         addCombinationValues( "deliveryMode", new Object[]{ 
0:                 new Integer(DeliveryMode.NON_PERSISTENT), 
0:                 new Integer(DeliveryMode.PERSISTENT)} );        
0:         addCombinationValues( "destinationType", new Object[]{ 
0:                 new Byte(ActiveMQDestination.QUEUE_TYPE), 
0:                 new Byte(ActiveMQDestination.TOPIC_TYPE), 
0:                 } );
1:     }    
0:     public void testAddConsumerThenSend() throws Throwable {
1:         
0:         // Start a producer on local broker 
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
0:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);        
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.send(producerInfo);
1: 
1:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
1: 
1:         // Start a consumer on a remote broker
1:         StubConnection connection2 = createRemoteConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
0:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);        
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
0:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo2, destination);        
1:         connection2.send(consumerInfo);
1:         
1:         // Send the message to the local boker.
1:         connection1.send(createMessage(producerInfo, destination, deliveryMode));
1:         
1:         // Make sure the message was delivered via the remote.
0:         Message m = receiveMessage(connection2);
1:         assertNotNull(m);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
0:         bridge = new DemandForwardingBridge(createTransport(), createRemoteTransport());
0:         bridge.setClientId("local-remote-bridge");
0:         bridge.setDispatchAsync(false);
0:         bridge.start();
1:         
0:         // PATCH: Give demand forwarding bridge a chance to finish setting up
0:         try {
0:             Thread.sleep(1000);
0:         } catch (InterruptedException ie) {
0:             ie.printStackTrace();
1:         }
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         bridge.stop();
1:         super.tearDown();
1:     }
1:     
1:     public static Test suite() {
1:         return suite(DemandForwardingBridgeTest.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:54114cc
/////////////////////////////////////////////////////////////////////////
1:         config.setBrokerName("local");
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
1:         NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
0:         config.setLocalBrokerName("local");
1:         config.setDispatchAsync(false);
0:         bridge = new DemandForwardingBridge(config,createTransport(), createRemoteTransport()); 
commit:d7a1483
/////////////////////////////////////////////////////////////////////////
1:         connection1.request(createMessage(producerInfo, destination, deliveryMode));
0:      }
commit:5a429d9
/////////////////////////////////////////////////////////////////////////
0:         bridge.setLocalBrokerName("local");
============================================================================