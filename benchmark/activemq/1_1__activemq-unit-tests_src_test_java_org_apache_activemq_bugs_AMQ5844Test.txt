1:ffef4dc: /**
1:ffef4dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ffef4dc:  * contributor license agreements.  See the NOTICE file distributed with
1:ffef4dc:  * this work for additional information regarding copyright ownership.
1:ffef4dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ffef4dc:  * (the "License"); you may not use this file except in compliance with
1:ffef4dc:  * the License.  You may obtain a copy of the License at
1:ffef4dc:  *
1:ffef4dc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ffef4dc:  *
1:ffef4dc:  * Unless required by applicable law or agreed to in writing, software
1:ffef4dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ffef4dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ffef4dc:  * See the License for the specific language governing permissions and
1:ffef4dc:  * limitations under the License.
1:ffef4dc:  */
1:ffef4dc: package org.apache.activemq.bugs;
1:ffef4dc: 
1:ffef4dc: import org.apache.activemq.ActiveMQConnection;
1:ffef4dc: import org.apache.activemq.ActiveMQConnectionFactory;
1:ffef4dc: import org.apache.activemq.ActiveMQMessageConsumer;
1:ffef4dc: import org.apache.activemq.broker.TransportConnector;
1:ffef4dc: import org.junit.After;
1:ffef4dc: import org.junit.Before;
1:ffef4dc: import org.junit.Test;
1:ffef4dc: import org.junit.BeforeClass;
1:ffef4dc: 
1:ffef4dc: import static org.junit.Assert.assertNull;
1:ffef4dc: import static org.junit.Assert.assertNotNull;
1:ffef4dc: import static org.junit.Assert.assertTrue;
1:ffef4dc: import static org.junit.Assert.fail;
1:ffef4dc: 
1:ffef4dc: import org.apache.log4j.Appender;
1:ffef4dc: import org.apache.log4j.spi.LoggingEvent;
1:ffef4dc: 
1:ffef4dc: import org.apache.activemq.broker.BrokerService;
1:ffef4dc: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1:ffef4dc: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ffef4dc: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ffef4dc: import org.apache.activemq.transport.failover.FailoverTransport;
1:ffef4dc: import org.apache.activemq.util.DefaultIOExceptionHandler;
1:ffef4dc: import org.apache.activemq.util.DefaultTestAppender;
1:ffef4dc: import org.apache.activemq.util.Wait;
1:ffef4dc: 
1:ffef4dc: import org.slf4j.Logger;
1:ffef4dc: import org.slf4j.LoggerFactory;
1:ffef4dc: 
1:ffef4dc: import javax.jms.Connection;
1:ffef4dc: import javax.jms.DeliveryMode;
1:ffef4dc: import javax.jms.Destination;
1:ffef4dc: import javax.jms.Message;
1:ffef4dc: import javax.jms.MessageProducer;
1:ffef4dc: import javax.jms.Session;
1:ffef4dc: import javax.jms.TextMessage;
1:ffef4dc: import javax.jms.TransactionRolledBackException;
1:ffef4dc: import java.io.IOException;
1:ffef4dc: 
1:ffef4dc: /**
1:ffef4dc:  * The FailoverTransport maintains state is the ConnectionStateTracker object. Aborted slow consumers must be removed
1:ffef4dc:  * from this state tracker so that the FailoverTransport does not re-register the aborted slow consumers.
1:ffef4dc:  */
1:ffef4dc: public class AMQ5844Test {
1:ffef4dc: 
1:ffef4dc:     static final Logger LOG = LoggerFactory.getLogger(AMQ5844Test.class);
1:ffef4dc: 
1:ffef4dc:     protected BrokerService broker;
1:ffef4dc: 
1:ffef4dc:     protected long checkPeriod = 2 * 1000;
1:ffef4dc:     protected long maxSlowDuration = 4 * 1000;
1:ffef4dc: 
1:ffef4dc:     private String uri;
1:ffef4dc: 
1:ffef4dc:     private final static String QUEUE_NAME = "TEST.QUEUE";
1:ffef4dc: 
1:ffef4dc:     static boolean abortingSlowConsumer = false;
1:ffef4dc:     static boolean successfullyReconnected = false;
1:ffef4dc: 
1:ffef4dc:     static final Appender appender = new DefaultTestAppender() {
1:ffef4dc:         @Override
1:ffef4dc:         public void doAppend(LoggingEvent event) {
1:ffef4dc:             if(event.getMessage().toString().contains("aborting slow consumer")) {
1:ffef4dc:                 abortingSlowConsumer = true;
1:ffef4dc:             }
1:ffef4dc: 
1:ffef4dc:             if(event.getMessage().toString().contains("Successfully reconnected to")) {
1:ffef4dc:                 successfullyReconnected = true;
1:ffef4dc:             }
1:ffef4dc:         }
1:ffef4dc:     };
1:ffef4dc: 
1:ffef4dc:     @BeforeClass
1:ffef4dc:     public static void setUp() throws Exception {
1:ffef4dc:         org.apache.log4j.Logger.getRootLogger().addAppender(appender);
1:ffef4dc:     }
1:ffef4dc: 
1:ffef4dc: 
1:ffef4dc:     @Before
1:ffef4dc:     /**
1:ffef4dc:      * Sets a AbortSlowConsumerStrategy policy entry on the broker and starts the broker.
1:ffef4dc:      */
1:ffef4dc:     public void createMaster() throws Exception{
1:ffef4dc:         broker = new BrokerService();
1:ffef4dc:         broker.setDeleteAllMessagesOnStartup(true);
1:ffef4dc:         TransportConnector transportConnector = broker.addConnector("tcp://0.0.0.0:0");
1:ffef4dc: 
1:ffef4dc:         DefaultIOExceptionHandler defaultIOExceptionHandler = new DefaultIOExceptionHandler();
1:ffef4dc:         broker.setIoExceptionHandler(defaultIOExceptionHandler);
1:ffef4dc:         broker.setBrokerName("Main");
1:ffef4dc: 
1:ffef4dc:         PolicyEntry policy = new PolicyEntry();
1:ffef4dc:         AbortSlowConsumerStrategy abortSlowConsumerStrategy = new AbortSlowConsumerStrategy();
1:ffef4dc:         abortSlowConsumerStrategy.setAbortConnection(false);
1:ffef4dc:         //time in milliseconds between checks for slow subscriptions
1:ffef4dc:         abortSlowConsumerStrategy.setCheckPeriod(checkPeriod);
1:ffef4dc:         //time in milliseconds that a sub can remain slow before triggering an abort
1:ffef4dc:         abortSlowConsumerStrategy.setMaxSlowDuration(maxSlowDuration);
1:ffef4dc: 
1:ffef4dc:         policy.setSlowConsumerStrategy(abortSlowConsumerStrategy);
1:ffef4dc:         policy.setQueuePrefetch(0);
1:ffef4dc:         PolicyMap pMap = new PolicyMap();
1:ffef4dc:         pMap.setDefaultEntry(policy);
1:ffef4dc:         broker.setDestinationPolicy(pMap);
1:ffef4dc: 
1:ffef4dc:         broker.start();
1:ffef4dc:         uri = transportConnector.getPublishableConnectString();
1:ffef4dc:     }
1:ffef4dc: 
1:ffef4dc:     @After
1:ffef4dc:     public void stopBroker() throws Exception {
1:ffef4dc:         if (broker != null) {
1:ffef4dc:             broker.stop();
1:ffef4dc:             broker.waitUntilStopped();
1:ffef4dc:         }
1:ffef4dc:         org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
1:ffef4dc:     }
1:ffef4dc: 
1:ffef4dc:     @Test
1:ffef4dc:     public void testRecreateAbortedConsumer() throws Exception {
1:ffef4dc:         String failoverTransportURL = "failover:(" + uri + ")";
1:ffef4dc: 
1:ffef4dc:         ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(failoverTransportURL);
1:ffef4dc:         amq.setWatchTopicAdvisories(false);
1:ffef4dc: 
1:ffef4dc:         Connection jmsConnection = amq.createConnection();
1:ffef4dc: 
1:ffef4dc:         ActiveMQConnection connection = (ActiveMQConnection) jmsConnection;
1:ffef4dc: 
1:ffef4dc:         connection.start();
1:ffef4dc: 
1:ffef4dc:         // Create a Session that is transacted
1:ffef4dc:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:ffef4dc: 
1:ffef4dc:         //Create the destination Queue
1:ffef4dc:         Destination destination = session.createQueue(QUEUE_NAME);
1:ffef4dc: 
1:ffef4dc:         //Create a MessageProducer from the Session to the Queue
1:ffef4dc:         MessageProducer producer = session.createProducer(destination);
1:ffef4dc: 
1:ffef4dc:         // Create message, send and close producer
1:ffef4dc:         StringBuilder stringBuilder = new StringBuilder();
1:ffef4dc:         stringBuilder.append("Plain Text Message");
1:ffef4dc: 
1:ffef4dc:         String text = stringBuilder.toString();
1:ffef4dc:         TextMessage message = session.createTextMessage(text);
1:ffef4dc: 
1:ffef4dc:         //Send 2 non-persistent text messages
1:ffef4dc:         producer.send(message, DeliveryMode.NON_PERSISTENT, 1, 0);
1:ffef4dc:         producer.send(message, DeliveryMode.NON_PERSISTENT, 1, 0);
1:ffef4dc:         //Commit the session so the messages get delivered to the broker
1:ffef4dc:         session.commit();
1:ffef4dc:         //close the producer and get it out of the way
1:ffef4dc:         producer.close();
1:ffef4dc: 
1:ffef4dc:         //Start consuming the messages.
1:ffef4dc:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(destination);
1:ffef4dc:         Message mess = consumer.receive();
1:ffef4dc:         //First message received successfully.
1:ffef4dc:         assertNotNull(mess);
1:ffef4dc: 
1:ffef4dc:         //The AbortSlowConsumerStrategy kicks in here and sends a message down to the client to close itself.
1:ffef4dc:         //The client does not close because it is in the middle of the transaction. Meanwhile the FailoverTransport
1:ffef4dc:         //detects the close command and removes the consumer from its state.
1:ffef4dc: 
1:ffef4dc:         assertTrue("The browser aborts the slow consumer", Wait.waitFor(new Wait.Condition() {
1:ffef4dc:             @Override
1:ffef4dc:             public boolean isSatisified() throws Exception {
1:ffef4dc:                 return abortingSlowConsumer;
1:ffef4dc:             }
1:ffef4dc:         }, 10 * 1000));
1:ffef4dc: 
1:ffef4dc:         //We intentionally fail the transport just to make sure that the slow consumer that was aborted is not
1:ffef4dc:         //re-registered by the FailoverTransport
1:ffef4dc:         FailoverTransport failoverTransport = connection.getTransport().narrow(FailoverTransport.class);
1:ffef4dc:         failoverTransport.handleTransportFailure(new IOException());
1:ffef4dc: 
1:ffef4dc:         assertTrue("The broker aborts the slow consumer", Wait.waitFor(new Wait.Condition() {
1:ffef4dc:             @Override
1:ffef4dc:             public boolean isSatisified() throws Exception {
1:ffef4dc:                 return successfullyReconnected;
1:ffef4dc:             }
1:ffef4dc:         }, 4 * 1000));
1:ffef4dc: 
1:ffef4dc:         try {
1:ffef4dc:             mess = consumer.receive(2 * 1000);
1:ffef4dc:             //This message must be null because the slow consumer has already been deleted on the broker side.
1:ffef4dc:             assertNull(mess);
1:ffef4dc:             session.commit();
1:ffef4dc:             fail("Expect the commit to fail and a rollback to happen");
1:ffef4dc:         }
1:ffef4dc:         catch (TransactionRolledBackException expected) {
1:ffef4dc:             assertTrue(expected.getMessage().contains("rolling back transaction"));
1:ffef4dc:         }
1:ffef4dc: 
1:ffef4dc:         connection.close();
1:ffef4dc:     }
1:ffef4dc: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ffef4dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageConsumer;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.BeforeClass;
1: 
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.spi.LoggingEvent;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.transport.failover.FailoverTransport;
1: import org.apache.activemq.util.DefaultIOExceptionHandler;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.activemq.util.Wait;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.TransactionRolledBackException;
1: import java.io.IOException;
1: 
1: /**
1:  * The FailoverTransport maintains state is the ConnectionStateTracker object. Aborted slow consumers must be removed
1:  * from this state tracker so that the FailoverTransport does not re-register the aborted slow consumers.
1:  */
1: public class AMQ5844Test {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ5844Test.class);
1: 
1:     protected BrokerService broker;
1: 
1:     protected long checkPeriod = 2 * 1000;
1:     protected long maxSlowDuration = 4 * 1000;
1: 
1:     private String uri;
1: 
1:     private final static String QUEUE_NAME = "TEST.QUEUE";
1: 
1:     static boolean abortingSlowConsumer = false;
1:     static boolean successfullyReconnected = false;
1: 
1:     static final Appender appender = new DefaultTestAppender() {
1:         @Override
1:         public void doAppend(LoggingEvent event) {
1:             if(event.getMessage().toString().contains("aborting slow consumer")) {
1:                 abortingSlowConsumer = true;
1:             }
1: 
1:             if(event.getMessage().toString().contains("Successfully reconnected to")) {
1:                 successfullyReconnected = true;
1:             }
1:         }
1:     };
1: 
1:     @BeforeClass
1:     public static void setUp() throws Exception {
1:         org.apache.log4j.Logger.getRootLogger().addAppender(appender);
1:     }
1: 
1: 
1:     @Before
1:     /**
1:      * Sets a AbortSlowConsumerStrategy policy entry on the broker and starts the broker.
1:      */
1:     public void createMaster() throws Exception{
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         TransportConnector transportConnector = broker.addConnector("tcp://0.0.0.0:0");
1: 
1:         DefaultIOExceptionHandler defaultIOExceptionHandler = new DefaultIOExceptionHandler();
1:         broker.setIoExceptionHandler(defaultIOExceptionHandler);
1:         broker.setBrokerName("Main");
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         AbortSlowConsumerStrategy abortSlowConsumerStrategy = new AbortSlowConsumerStrategy();
1:         abortSlowConsumerStrategy.setAbortConnection(false);
1:         //time in milliseconds between checks for slow subscriptions
1:         abortSlowConsumerStrategy.setCheckPeriod(checkPeriod);
1:         //time in milliseconds that a sub can remain slow before triggering an abort
1:         abortSlowConsumerStrategy.setMaxSlowDuration(maxSlowDuration);
1: 
1:         policy.setSlowConsumerStrategy(abortSlowConsumerStrategy);
1:         policy.setQueuePrefetch(0);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(pMap);
1: 
1:         broker.start();
1:         uri = transportConnector.getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:         org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
1:     }
1: 
1:     @Test
1:     public void testRecreateAbortedConsumer() throws Exception {
1:         String failoverTransportURL = "failover:(" + uri + ")";
1: 
1:         ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(failoverTransportURL);
1:         amq.setWatchTopicAdvisories(false);
1: 
1:         Connection jmsConnection = amq.createConnection();
1: 
1:         ActiveMQConnection connection = (ActiveMQConnection) jmsConnection;
1: 
1:         connection.start();
1: 
1:         // Create a Session that is transacted
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:         //Create the destination Queue
1:         Destination destination = session.createQueue(QUEUE_NAME);
1: 
1:         //Create a MessageProducer from the Session to the Queue
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // Create message, send and close producer
1:         StringBuilder stringBuilder = new StringBuilder();
1:         stringBuilder.append("Plain Text Message");
1: 
1:         String text = stringBuilder.toString();
1:         TextMessage message = session.createTextMessage(text);
1: 
1:         //Send 2 non-persistent text messages
1:         producer.send(message, DeliveryMode.NON_PERSISTENT, 1, 0);
1:         producer.send(message, DeliveryMode.NON_PERSISTENT, 1, 0);
1:         //Commit the session so the messages get delivered to the broker
1:         session.commit();
1:         //close the producer and get it out of the way
1:         producer.close();
1: 
1:         //Start consuming the messages.
1:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(destination);
1:         Message mess = consumer.receive();
1:         //First message received successfully.
1:         assertNotNull(mess);
1: 
1:         //The AbortSlowConsumerStrategy kicks in here and sends a message down to the client to close itself.
1:         //The client does not close because it is in the middle of the transaction. Meanwhile the FailoverTransport
1:         //detects the close command and removes the consumer from its state.
1: 
1:         assertTrue("The browser aborts the slow consumer", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return abortingSlowConsumer;
1:             }
1:         }, 10 * 1000));
1: 
1:         //We intentionally fail the transport just to make sure that the slow consumer that was aborted is not
1:         //re-registered by the FailoverTransport
1:         FailoverTransport failoverTransport = connection.getTransport().narrow(FailoverTransport.class);
1:         failoverTransport.handleTransportFailure(new IOException());
1: 
1:         assertTrue("The broker aborts the slow consumer", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return successfullyReconnected;
1:             }
1:         }, 4 * 1000));
1: 
1:         try {
1:             mess = consumer.receive(2 * 1000);
1:             //This message must be null because the slow consumer has already been deleted on the broker side.
1:             assertNull(mess);
1:             session.commit();
1:             fail("Expect the commit to fail and a rollback to happen");
1:         }
1:         catch (TransactionRolledBackException expected) {
1:             assertTrue(expected.getMessage().contains("rolling back transaction"));
1:         }
1: 
1:         connection.close();
1:     }
1: }
============================================================================