32:230a86c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
35:230a86c:  */
1:d29ca2a: package org.apache.activemq;
1:230a86c: 
1:d29ca2a: import java.io.Serializable;
1:230a86c: 
1:d29ca2a: import javax.jms.BytesMessage;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.IllegalStateException;
1:d29ca2a: import javax.jms.InvalidDestinationException;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MapMessage;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.ObjectMessage;
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.QueueBrowser;
1:d29ca2a: import javax.jms.QueueReceiver;
1:d29ca2a: import javax.jms.QueueSender;
1:d29ca2a: import javax.jms.QueueSession;
1:d29ca2a: import javax.jms.StreamMessage;
1:d29ca2a: import javax.jms.TemporaryQueue;
1:d29ca2a: import javax.jms.TemporaryTopic;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: import javax.jms.TopicSubscriber;
1:230a86c: 
1:230a86c: /**
1:230a86c:  * A QueueSession implementation that throws IllegalStateExceptions when Topic
1:230a86c:  * operations are attempted but which delegates to another QueueSession for all
1:230a86c:  * other operations. The ActiveMQSessions implement both Topic and Queue
1:61b2f6b:  * Sessions methods but the specification states that Queue session should throw
1:230a86c:  * Exceptions if topic operations are attempted on it.
1:230a86c:  */
1:d29ca2a: public class ActiveMQQueueSession implements QueueSession {
3:d29ca2a: 
1:230a86c:     private final QueueSession next;
1:d29ca2a: 
1:230a86c:     public ActiveMQQueueSession(QueueSession next) {
1:230a86c:         this.next = next;
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public void close() throws JMSException {
1:230a86c:         next.close();
1:230a86c:     }
1:d29ca2a: 
1:61b2f6b:     @Override
1:230a86c:     public void commit() throws JMSException {
1:230a86c:         next.commit();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public QueueBrowser createBrowser(Queue queue) throws JMSException {
1:230a86c:         return next.createBrowser(queue);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public QueueBrowser createBrowser(Queue queue, String messageSelector) throws JMSException {
1:230a86c:         return next.createBrowser(queue, messageSelector);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public BytesMessage createBytesMessage() throws JMSException {
1:230a86c:         return next.createBytesMessage();
1:230a86c:     }
1:d29ca2a: 
1:61b2f6b:     @Override
1:230a86c:     public MessageConsumer createConsumer(Destination destination) throws JMSException {
1:ecf89a6:         if (destination instanceof Topic) {
1:230a86c:             throw new InvalidDestinationException("Topics are not supported by a QueueSession");
1:ecf89a6:         }
1:230a86c:         return next.createConsumer(destination);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public MessageConsumer createConsumer(Destination destination, String messageSelector) throws JMSException {
1:ecf89a6:         if (destination instanceof Topic) {
1:230a86c:             throw new InvalidDestinationException("Topics are not supported by a QueueSession");
1:ecf89a6:         }
1:230a86c:         return next.createConsumer(destination, messageSelector);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:fc00993:     public MessageConsumer createConsumer(Destination destination, String messageSelector, boolean noLocal) throws JMSException {
1:fc00993:         if (destination instanceof Topic) {
1:230a86c:             throw new InvalidDestinationException("Topics are not supported by a QueueSession");
1:fc00993:         }
1:fc00993:         return next.createConsumer(destination, messageSelector, noLocal);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public TopicSubscriber createDurableSubscriber(Topic topic, String name) throws JMSException {
1:230a86c:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public TopicSubscriber createDurableSubscriber(Topic topic, String name, String messageSelector, boolean noLocal) throws JMSException {
1:230a86c:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public MapMessage createMapMessage() throws JMSException {
1:230a86c:         return next.createMapMessage();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public Message createMessage() throws JMSException {
1:230a86c:         return next.createMessage();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public ObjectMessage createObjectMessage() throws JMSException {
1:230a86c:         return next.createObjectMessage();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public ObjectMessage createObjectMessage(Serializable object) throws JMSException {
1:230a86c:         return next.createObjectMessage(object);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public MessageProducer createProducer(Destination destination) throws JMSException {
1:ecf89a6:         if (destination instanceof Topic) {
1:230a86c:             throw new InvalidDestinationException("Topics are not supported by a QueueSession");
1:ecf89a6:         }
1:230a86c:         return next.createProducer(destination);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public Queue createQueue(String queueName) throws JMSException {
1:230a86c:         return next.createQueue(queueName);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public QueueReceiver createReceiver(Queue queue) throws JMSException {
1:230a86c:         return next.createReceiver(queue);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public QueueReceiver createReceiver(Queue queue, String messageSelector) throws JMSException {
1:230a86c:         return next.createReceiver(queue, messageSelector);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public QueueSender createSender(Queue queue) throws JMSException {
1:230a86c:         return next.createSender(queue);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public StreamMessage createStreamMessage() throws JMSException {
1:230a86c:         return next.createStreamMessage();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public TemporaryQueue createTemporaryQueue() throws JMSException {
1:230a86c:         return next.createTemporaryQueue();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public TemporaryTopic createTemporaryTopic() throws JMSException {
1:230a86c:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public TextMessage createTextMessage() throws JMSException {
1:230a86c:         return next.createTextMessage();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public TextMessage createTextMessage(String text) throws JMSException {
1:230a86c:         return next.createTextMessage(text);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public Topic createTopic(String topicName) throws JMSException {
1:230a86c:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public boolean equals(Object arg0) {
1:5b5d494:         if(this != arg0) {
1:230a86c:             return next.equals(arg0);
1:230a86c:         }
1:230a86c: 
1:5b5d494:         return true;
37:d29ca2a:     }
1:d29ca2a: 
1:61b2f6b:     @Override
1:230a86c:     public int getAcknowledgeMode() throws JMSException {
1:230a86c:         return next.getAcknowledgeMode();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public MessageListener getMessageListener() throws JMSException {
1:230a86c:         return next.getMessageListener();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public boolean getTransacted() throws JMSException {
1:230a86c:         return next.getTransacted();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public int hashCode() {
1:230a86c:         return next.hashCode();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public void recover() throws JMSException {
1:230a86c:         next.recover();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public void rollback() throws JMSException {
1:230a86c:         next.rollback();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public void run() {
1:230a86c:         next.run();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public void setMessageListener(MessageListener listener) throws JMSException {
1:230a86c:         next.setMessageListener(listener);
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public String toString() {
1:230a86c:         return next.toString();
1:230a86c:     }
1:230a86c: 
1:61b2f6b:     @Override
1:230a86c:     public void unsubscribe(String name) throws JMSException {
1:230a86c:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:230a86c:     }
1:d29ca2a: 
1:d29ca2a:     public QueueSession getNext() {
1:d29ca2a:         return next;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:61b2f6b
/////////////////////////////////////////////////////////////////////////
1:  * Sessions methods but the specification states that Queue session should throw
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (destination instanceof Topic) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (destination instanceof Topic) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (destination instanceof Topic) {
1:         }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:      * @param noLocal
1:     public MessageConsumer createConsumer(Destination destination, String messageSelector, boolean noLocal) throws JMSException {
1:         if (destination instanceof Topic) {
1:         }
1:         return next.createConsumer(destination, messageSelector, noLocal);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A QueueSession implementation that throws IllegalStateExceptions when Topic
1:  * operations are attempted but which delegates to another QueueSession for all
1:  * other operations. The ActiveMQSessions implement both Topic and Queue
0:  * Sessions methods but the spec states that Queue session should throw
1:  * Exceptions if topic operations are attempted on it.
1:     private final QueueSession next;
1: 
1:     public ActiveMQQueueSession(QueueSession next) {
1:         this.next = next;
1:     }
1: 
1:     /**
0:      * @throws JMSException
1:      */
1:     public void close() throws JMSException {
1:         next.close();
1:     }
1: 
1:     /**
0:      * @throws JMSException
1:      */
1:     public void commit() throws JMSException {
1:         next.commit();
1:     }
1: 
1:     /**
0:      * @param queue
0:      * @return
0:      * @throws JMSException
1:      */
1:     public QueueBrowser createBrowser(Queue queue) throws JMSException {
1:         return next.createBrowser(queue);
1:     }
1: 
1:     /**
0:      * @param queue
0:      * @param messageSelector
0:      * @return
0:      * @throws JMSException
1:      */
1:     public QueueBrowser createBrowser(Queue queue, String messageSelector) throws JMSException {
1:         return next.createBrowser(queue, messageSelector);
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public BytesMessage createBytesMessage() throws JMSException {
1:         return next.createBytesMessage();
1:     }
1: 
1:     /**
0:      * @param destination
0:      * @return
0:      * @throws JMSException
1:      */
1:     public MessageConsumer createConsumer(Destination destination) throws JMSException {
0:         if (destination instanceof Topic)
1:             throw new InvalidDestinationException("Topics are not supported by a QueueSession");
1:         return next.createConsumer(destination);
1:     }
1: 
1:     /**
0:      * @param destination
0:      * @param messageSelector
0:      * @return
0:      * @throws JMSException
1:      */
1:     public MessageConsumer createConsumer(Destination destination, String messageSelector) throws JMSException {
0:         if (destination instanceof Topic)
1:             throw new InvalidDestinationException("Topics are not supported by a QueueSession");
1:         return next.createConsumer(destination, messageSelector);
1:     }
1: 
1:     /**
0:      * @param destination
0:      * @param messageSelector
0:      * @param NoLocal
0:      * @return
0:      * @throws JMSException
1:      */
0:     public MessageConsumer createConsumer(Destination destination, String messageSelector, boolean NoLocal) throws JMSException {
0:         if (destination instanceof Topic)
1:             throw new InvalidDestinationException("Topics are not supported by a QueueSession");
0:         return next.createConsumer(destination, messageSelector, NoLocal);
1:     }
1: 
1:     /**
0:      * @param topic
0:      * @param name
0:      * @return
0:      * @throws JMSException
1:      */
1:     public TopicSubscriber createDurableSubscriber(Topic topic, String name) throws JMSException {
1:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:     }
1: 
1:     /**
0:      * @param topic
0:      * @param name
0:      * @param messageSelector
0:      * @param noLocal
0:      * @return
0:      * @throws JMSException
1:      */
1:     public TopicSubscriber createDurableSubscriber(Topic topic, String name, String messageSelector, boolean noLocal) throws JMSException {
1:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public MapMessage createMapMessage() throws JMSException {
1:         return next.createMapMessage();
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public Message createMessage() throws JMSException {
1:         return next.createMessage();
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public ObjectMessage createObjectMessage() throws JMSException {
1:         return next.createObjectMessage();
1:     }
1: 
1:     /**
0:      * @param object
0:      * @return
0:      * @throws JMSException
1:      */
1:     public ObjectMessage createObjectMessage(Serializable object) throws JMSException {
1:         return next.createObjectMessage(object);
1:     }
1: 
1:     /**
0:      * @param destination
0:      * @return
0:      * @throws JMSException
1:      */
1:     public MessageProducer createProducer(Destination destination) throws JMSException {
0:         if (destination instanceof Topic)
1:             throw new InvalidDestinationException("Topics are not supported by a QueueSession");
1:         return next.createProducer(destination);
1:     }
1: 
1:     /**
0:      * @param queueName
0:      * @return
0:      * @throws JMSException
1:      */
1:     public Queue createQueue(String queueName) throws JMSException {
1:         return next.createQueue(queueName);
1:     }
1: 
1:     /**
0:      * @param queue
0:      * @return
0:      * @throws JMSException
1:      */
1:     public QueueReceiver createReceiver(Queue queue) throws JMSException {
1:         return next.createReceiver(queue);
1:     }
1: 
1:     /**
0:      * @param queue
0:      * @param messageSelector
0:      * @return
0:      * @throws JMSException
1:      */
1:     public QueueReceiver createReceiver(Queue queue, String messageSelector) throws JMSException {
1:         return next.createReceiver(queue, messageSelector);
1:     }
1: 
1:     /**
0:      * @param queue
0:      * @return
0:      * @throws JMSException
1:      */
1:     public QueueSender createSender(Queue queue) throws JMSException {
1:         return next.createSender(queue);
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public StreamMessage createStreamMessage() throws JMSException {
1:         return next.createStreamMessage();
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public TemporaryQueue createTemporaryQueue() throws JMSException {
1:         return next.createTemporaryQueue();
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public TemporaryTopic createTemporaryTopic() throws JMSException {
1:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public TextMessage createTextMessage() throws JMSException {
1:         return next.createTextMessage();
1:     }
1: 
1:     /**
0:      * @param text
0:      * @return
0:      * @throws JMSException
1:      */
1:     public TextMessage createTextMessage(String text) throws JMSException {
1:         return next.createTextMessage(text);
1:     }
1: 
1:     /**
0:      * @param topicName
0:      * @return
0:      * @throws JMSException
1:      */
1:     public Topic createTopic(String topicName) throws JMSException {
1:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:     }
1: 
0:     /*
0:      * (non-Javadoc)
1:      * 
0:      * @see java.lang.Object#equals(java.lang.Object)
1:      */
1:     public boolean equals(Object arg0) {
1:         return next.equals(arg0);
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public int getAcknowledgeMode() throws JMSException {
1:         return next.getAcknowledgeMode();
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public MessageListener getMessageListener() throws JMSException {
1:         return next.getMessageListener();
1:     }
1: 
1:     /**
0:      * @return
0:      * @throws JMSException
1:      */
1:     public boolean getTransacted() throws JMSException {
1:         return next.getTransacted();
1:     }
1: 
0:     /*
0:      * (non-Javadoc)
1:      * 
0:      * @see java.lang.Object#hashCode()
1:      */
1:     public int hashCode() {
1:         return next.hashCode();
1:     }
1: 
1:     /**
0:      * @throws JMSException
1:      */
1:     public void recover() throws JMSException {
1:         next.recover();
1:     }
1: 
1:     /**
0:      * @throws JMSException
1:      */
1:     public void rollback() throws JMSException {
1:         next.rollback();
1:     }
1: 
1:     /**
1:      * 
1:      */
1:     public void run() {
1:         next.run();
1:     }
1: 
1:     /**
0:      * @param listener
0:      * @throws JMSException
1:      */
1:     public void setMessageListener(MessageListener listener) throws JMSException {
1:         next.setMessageListener(listener);
1:     }
1: 
0:     /*
0:      * (non-Javadoc)
1:      * 
0:      * @see java.lang.Object#toString()
1:      */
1:     public String toString() {
1:         return next.toString();
1:     }
1: 
1:     /**
0:      * @param name
0:      * @throws JMSException
1:      */
1:     public void unsubscribe(String name) throws JMSException {
1:         throw new IllegalStateException("Operation not supported by a QueueSession");
1:     }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq;
1: 
1: import java.io.Serializable;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Destination;
1: import javax.jms.IllegalStateException;
1: import javax.jms.InvalidDestinationException;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.QueueReceiver;
1: import javax.jms.QueueSender;
1: import javax.jms.QueueSession;
1: import javax.jms.StreamMessage;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TemporaryTopic;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: 
0: /**
0:  * A QueueSession implementation that throws IllegalStateExceptions
0:  * when Topic operations are attempted but which delegates 
0:  * to another QueueSession for all other operations.
0:  * 
0:  * The ActiveMQSessions implement both Topic and Queue Sessions 
0:  * methods but the spec states that Queue session should throw Exceptions 
0:  * if topic operations are attempted on it.  
0:  * 
0:  * @version $Revision: 1.2 $
0:  */
1: public class ActiveMQQueueSession implements QueueSession {
1: 
0: 	private final QueueSession next;
1: 	
0: 	public ActiveMQQueueSession(QueueSession next) {
0: 		this.next = next;
1: 	}
1: 	
0: 	/**
0: 	 * @throws JMSException
0: 	 */
0: 	public void close() throws JMSException {
0: 		next.close();
1: 	}
0: 	/**
0: 	 * @throws JMSException
0: 	 */
0: 	public void commit() throws JMSException {
0: 		next.commit();
1: 	}
0: 	/**
0: 	 * @param queue
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public QueueBrowser createBrowser(Queue queue) throws JMSException {
0: 		return next.createBrowser(queue);
1: 	}
0: 	/**
0: 	 * @param queue
0: 	 * @param messageSelector
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public QueueBrowser createBrowser(Queue queue, String messageSelector)
0: 			throws JMSException {
0: 		return next.createBrowser(queue, messageSelector);
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public BytesMessage createBytesMessage() throws JMSException {
0: 		return next.createBytesMessage();
1: 	}
0: 	/**
0: 	 * @param destination
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public MessageConsumer createConsumer(Destination destination)
0: 			throws JMSException {
0: 		if( destination instanceof Topic )
0: 			throw new InvalidDestinationException("Topics are not supported by a QueueSession");
0: 		return next.createConsumer(destination);
1: 	}
0: 	/**
0: 	 * @param destination
0: 	 * @param messageSelector
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public MessageConsumer createConsumer(Destination destination,
0: 			String messageSelector) throws JMSException {
0: 		if( destination instanceof Topic )
0: 			throw new InvalidDestinationException("Topics are not supported by a QueueSession");
0: 		return next.createConsumer(destination, messageSelector);
1: 	}
0: 	/**
0: 	 * @param destination
0: 	 * @param messageSelector
0: 	 * @param NoLocal
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public MessageConsumer createConsumer(Destination destination,
0: 			String messageSelector, boolean NoLocal) throws JMSException {
0: 		if( destination instanceof Topic )
0: 			throw new InvalidDestinationException("Topics are not supported by a QueueSession");
0: 		return next.createConsumer(destination, messageSelector, NoLocal);
1: 	}
0: 	/**
0: 	 * @param topic
0: 	 * @param name
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public TopicSubscriber createDurableSubscriber(Topic topic, String name)
0: 			throws JMSException {
0: 		throw new IllegalStateException("Operation not supported by a QueueSession");
1: 	}
0: 	/**
0: 	 * @param topic
0: 	 * @param name
0: 	 * @param messageSelector
0: 	 * @param noLocal
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public TopicSubscriber createDurableSubscriber(Topic topic, String name,
0: 			String messageSelector, boolean noLocal) throws JMSException {
0: 		throw new IllegalStateException("Operation not supported by a QueueSession");
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public MapMessage createMapMessage() throws JMSException {
0: 		return next.createMapMessage();
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public Message createMessage() throws JMSException {
0: 		return next.createMessage();
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public ObjectMessage createObjectMessage() throws JMSException {
0: 		return next.createObjectMessage();
1: 	}
0: 	/**
0: 	 * @param object
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public ObjectMessage createObjectMessage(Serializable object)
0: 			throws JMSException {
0: 		return next.createObjectMessage(object);
1: 	}
0: 	/**
0: 	 * @param destination
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public MessageProducer createProducer(Destination destination)
0: 			throws JMSException {
0: 		if( destination instanceof Topic )
0: 			throw new InvalidDestinationException("Topics are not supported by a QueueSession");
0: 		return next.createProducer(destination);
1: 	}
0: 	/**
0: 	 * @param queueName
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public Queue createQueue(String queueName) throws JMSException {
0: 		return next.createQueue(queueName);
1: 	}
0: 	/**
0: 	 * @param queue
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public QueueReceiver createReceiver(Queue queue) throws JMSException {
0: 		return next.createReceiver(queue);
1: 	}
0: 	/**
0: 	 * @param queue
0: 	 * @param messageSelector
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public QueueReceiver createReceiver(Queue queue, String messageSelector)
0: 			throws JMSException {
0: 		return next.createReceiver(queue, messageSelector);
1: 	}
0: 	/**
0: 	 * @param queue
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public QueueSender createSender(Queue queue) throws JMSException {
0: 		return next.createSender(queue);
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public StreamMessage createStreamMessage() throws JMSException {
0: 		return next.createStreamMessage();
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public TemporaryQueue createTemporaryQueue() throws JMSException {
0: 		return next.createTemporaryQueue();
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public TemporaryTopic createTemporaryTopic() throws JMSException {
0: 		throw new IllegalStateException("Operation not supported by a QueueSession");
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public TextMessage createTextMessage() throws JMSException {
0: 		return next.createTextMessage();
1: 	}
0: 	/**
0: 	 * @param text
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public TextMessage createTextMessage(String text) throws JMSException {
0: 		return next.createTextMessage(text);
1: 	}
0: 	/**
0: 	 * @param topicName
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public Topic createTopic(String topicName) throws JMSException {
0: 		throw new IllegalStateException("Operation not supported by a QueueSession");
1: 	}
0: 	/* (non-Javadoc)
0: 	 * @see java.lang.Object#equals(java.lang.Object)
0: 	 */
0: 	public boolean equals(Object arg0) {
0: 		return next.equals(arg0);
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public int getAcknowledgeMode() throws JMSException {
0: 		return next.getAcknowledgeMode();
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public MessageListener getMessageListener() throws JMSException {
0: 		return next.getMessageListener();
1: 	}
0: 	/**
0: 	 * @return
0: 	 * @throws JMSException
0: 	 */
0: 	public boolean getTransacted() throws JMSException {
0: 		return next.getTransacted();
1: 	}
0: 	/* (non-Javadoc)
0: 	 * @see java.lang.Object#hashCode()
0: 	 */
0: 	public int hashCode() {
0: 		return next.hashCode();
1: 	}
0: 	/**
0: 	 * @throws JMSException
0: 	 */
0: 	public void recover() throws JMSException {
0: 		next.recover();
1: 	}
0: 	/**
0: 	 * @throws JMSException
0: 	 */
0: 	public void rollback() throws JMSException {
0: 		next.rollback();
1: 	}
0: 	/**
0: 	 * 
0: 	 */
0: 	public void run() {
0: 		next.run();
1: 	}
0: 	/**
0: 	 * @param listener
0: 	 * @throws JMSException
0: 	 */
0: 	public void setMessageListener(MessageListener listener)
0: 			throws JMSException {
0: 		next.setMessageListener(listener);
1: 	}
0: 	/* (non-Javadoc)
0: 	 * @see java.lang.Object#toString()
0: 	 */
0: 	public String toString() {
0: 		return next.toString();
1: 	}
0: 	/**
0: 	 * @param name
0: 	 * @throws JMSException
0: 	 */
0: 	public void unsubscribe(String name) throws JMSException {
0: 		throw new IllegalStateException("Operation not supported by a QueueSession");
1: 	}
1: 
1:     public QueueSession getNext() {
1:         return next;
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5b5d494
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0:      *
1:         if(this != arg0) {
0:             return next.equals(arg0);
0:         }
0: 
1:         return true;
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
============================================================================