1:d779c4a: /**
1:d779c4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d779c4a:  * contributor license agreements.  See the NOTICE file distributed with
1:d779c4a:  * this work for additional information regarding copyright ownership.
1:d779c4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d779c4a:  * (the "License"); you may not use this file except in compliance with
1:d779c4a:  * the License.  You may obtain a copy of the License at
1:d779c4a:  *
1:d779c4a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d779c4a:  *
1:d779c4a:  * Unless required by applicable law or agreed to in writing, software
1:d779c4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d779c4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d779c4a:  * See the License for the specific language governing permissions and
1:d779c4a:  * limitations under the License.
1:d779c4a:  */
1:d779c4a: package org.apache.activemq.plugin;
1:d779c4a: 
1:d779c4a: 
1:d779c4a: import org.apache.activemq.broker.Broker;
1:d779c4a: import org.apache.activemq.broker.BrokerFilter;
1:d779c4a: import org.apache.activemq.broker.ProducerBrokerExchange;
1:d779c4a: import org.apache.activemq.command.Message;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d779c4a: 
1:d779c4a: 
1:d779c4a: /**
1:d779c4a:  * A Plugin which allows to force every incoming message to be PERSISTENT or NON-PERSISTENT. 
1:d779c4a:  * 
1:d779c4a:  * Useful, if you have set the broker usage policy to process ONLY persistent or ONLY non-persistent
1:d779c4a:  * messages. 
1:356c39d:  * @org.apache.xbean.XBean element="forcePersistencyModeBroker"
1:d779c4a:  */
1:d779c4a: public class ForcePersistencyModeBroker extends BrokerFilter{
1:8bf987b:   public static Logger log = LoggerFactory.getLogger(ForcePersistencyModeBroker.class);
1:d779c4a:   private boolean persistence = false;
1:d779c4a:   
1:d779c4a:   /**
1:d779c4a:    * @return the persistenceFlag
1:d779c4a:    */
1:d779c4a:   public boolean isPersistent() {
1:d779c4a:     return persistence;
1:d779c4a:   }
1:d779c4a: 
1:d779c4a:   /**
1:d779c4a:    * @param persistenceFlag the persistenceFlag to set
1:d779c4a:    */
1:d779c4a:   public void setPersistenceFlag(boolean mode) {
1:d779c4a:     this.persistence = mode;
1:d779c4a:   }
1:d779c4a: 
1:d779c4a:   /**
1:d779c4a:    * Constructor
1:d779c4a:    * @param next
1:d779c4a:    */
1:d779c4a:   public ForcePersistencyModeBroker(Broker next) {
1:d779c4a:     super(next);
1:d779c4a:     System.out.println(this.getBrokerSequenceId());
1:d779c4a:   }
1:d779c4a:   
1:d779c4a:   /** Sets the persistence mode
1:d779c4a:    * @see org.apache.activemq.broker.BrokerFilter#send(org.apache.activemq.broker.ProducerBrokerExchange, org.apache.activemq.command.Message)
1:d779c4a:    */
1:d779c4a:   public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:d779c4a:     messageSend.getMessage().setPersistent(isPersistent());
1:d779c4a:     next.send(producerExchange, messageSend);
1:d779c4a:   }
1:d779c4a:   
1:d779c4a: }
1:d779c4a: 
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:   public static Logger log = LoggerFactory.getLogger(ForcePersistencyModeBroker.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:356c39d
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="forcePersistencyModeBroker"
author:Robert Davies
-------------------------------------------------------------------------------
commit:d779c4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.command.Message;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: /**
1:  * A Plugin which allows to force every incoming message to be PERSISTENT or NON-PERSISTENT. 
1:  * 
1:  * Useful, if you have set the broker usage policy to process ONLY persistent or ONLY non-persistent
1:  * messages. 
1:  */
1: public class ForcePersistencyModeBroker extends BrokerFilter{
0:   public static Log log = LogFactory.getLog(ForcePersistencyModeBroker.class);
1:   private boolean persistence = false;
1:   
1:   /**
1:    * @return the persistenceFlag
1:    */
1:   public boolean isPersistent() {
1:     return persistence;
1:   }
1: 
1:   /**
1:    * @param persistenceFlag the persistenceFlag to set
1:    */
1:   public void setPersistenceFlag(boolean mode) {
1:     this.persistence = mode;
1:   }
1: 
1:   /**
1:    * Constructor
1:    * @param next
1:    */
1:   public ForcePersistencyModeBroker(Broker next) {
1:     super(next);
1:     System.out.println(this.getBrokerSequenceId());
1:   }
1:   
1:   /** Sets the persistence mode
1:    * @see org.apache.activemq.broker.BrokerFilter#send(org.apache.activemq.broker.ProducerBrokerExchange, org.apache.activemq.command.Message)
1:    */
1:   public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:     messageSend.getMessage().setPersistent(isPersistent());
1:     next.send(producerExchange, messageSend);
1:   }
1:   
1: }
1: 
============================================================================