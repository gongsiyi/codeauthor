1:42ee51f: /**
1:42ee51f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:42ee51f:  * contributor license agreements.  See the NOTICE file distributed with
1:42ee51f:  * this work for additional information regarding copyright ownership.
1:42ee51f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:42ee51f:  * (the "License"); you may not use this file except in compliance with
1:42ee51f:  * the License.  You may obtain a copy of the License at
1:42ee51f:  *
1:42ee51f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:42ee51f:  *
1:42ee51f:  * Unless required by applicable law or agreed to in writing, software
1:42ee51f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:42ee51f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:42ee51f:  * See the License for the specific language governing permissions and
1:42ee51f:  * limitations under the License.
1:42ee51f:  */
1:42ee51f: package org.apache.activemq;
5:42ee51f: 
1:42ee51f: import javax.jms.Connection;
1:42ee51f: import javax.jms.ConnectionFactory;
1:42ee51f: import javax.jms.JMSException;
1:42ee51f: import javax.jms.Message;
1:42ee51f: import javax.jms.MessageConsumer;
1:42ee51f: import javax.jms.MessageProducer;
1:42ee51f: import javax.jms.Session;
1:c7d559f: 
1:42ee51f: import org.apache.activemq.broker.BrokerService;
1:42ee51f: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:42ee51f: import org.apache.activemq.broker.region.policy.PolicyMap;
1:42ee51f: import org.apache.activemq.command.ActiveMQQueue;
1:42ee51f: 
1:42ee51f: public class ExclusiveConsumerStartupDestinationTest extends EmbeddedBrokerTestSupport{
1:42ee51f: 
1:42ee51f:     private static final String VM_BROKER_URL = "vm://localhost";
1:42ee51f: 
1:c7d559f:     @Override
1:42ee51f:     protected BrokerService createBroker() throws Exception {
1:42ee51f:         BrokerService answer = new BrokerService();
1:42ee51f:         answer.setPersistent(false);
1:42ee51f:         PolicyMap map = new PolicyMap();
1:42ee51f:         PolicyEntry entry = new PolicyEntry();
1:42ee51f:         entry.setAllConsumersExclusiveByDefault(true);
1:42ee51f:         map.setDefaultEntry(entry);
1:c7d559f:         answer.setDestinationPolicy(map);
1:42ee51f:         return answer;
1:42ee51f:     }
1:42ee51f: 
1:42ee51f:     protected String getBrokerConfigUri() {
1:42ee51f:         return "org/apache/activemq/broker/exclusive-consumer-startup-destination.xml";
1:42ee51f:     }
1:42ee51f: 
1:42ee51f:     private Connection createConnection(final boolean start) throws JMSException {
1:42ee51f:         ConnectionFactory cf = new ActiveMQConnectionFactory(VM_BROKER_URL);
1:42ee51f:         Connection conn = cf.createConnection();
1:42ee51f:         if (start) {
1:42ee51f:             conn.start();
1:42ee51f:         }
1:42ee51f:         return conn;
1:42ee51f:     }
1:42ee51f: 
1:42ee51f:     public void testExclusiveConsumerSelectedCreatedFirst() throws JMSException, InterruptedException {
1:42ee51f:         Connection conn = createConnection(true);
1:42ee51f: 
1:42ee51f:         Session exclusiveSession = null;
1:42ee51f:         Session fallbackSession = null;
1:42ee51f:         Session senderSession = null;
1:42ee51f: 
1:42ee51f:         try {
1:42ee51f: 
1:42ee51f:             exclusiveSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f:             fallbackSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f:             senderSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f: 
1:42ee51f:             ActiveMQQueue exclusiveQueue = new ActiveMQQueue("TEST.QUEUE1");
1:42ee51f:             MessageConsumer exclusiveConsumer = exclusiveSession.createConsumer(exclusiveQueue);
1:42ee51f: 
1:42ee51f:             ActiveMQQueue fallbackQueue = new ActiveMQQueue("TEST.QUEUE1");
1:42ee51f:             MessageConsumer fallbackConsumer = fallbackSession.createConsumer(fallbackQueue);
1:42ee51f: 
1:42ee51f:             ActiveMQQueue senderQueue = new ActiveMQQueue("TEST.QUEUE1");
1:42ee51f: 
1:42ee51f:             MessageProducer producer = senderSession.createProducer(senderQueue);
1:42ee51f: 
1:42ee51f:             Message msg = senderSession.createTextMessage("test");
1:42ee51f:             producer.send(msg);
1:42ee51f:             // TODO need two send a 2nd message - bug AMQ-1024
1:42ee51f:             // producer.send(msg);
1:42ee51f:             Thread.sleep(100);
1:42ee51f: 
1:42ee51f:             // Verify exclusive consumer receives the message.
1:c7d559f:             assertNotNull(exclusiveConsumer.receive(100));
1:c7d559f:             assertNull(fallbackConsumer.receive(100));
1:42ee51f:         } finally {
1:42ee51f:             fallbackSession.close();
1:42ee51f:             senderSession.close();
1:42ee51f:             conn.close();
1:42ee51f:         }
1:42ee51f:     }
1:42ee51f: 
1:42ee51f:     public void testFailoverToAnotherExclusiveConsumerCreatedFirst() throws JMSException,
1:42ee51f:         InterruptedException {
1:42ee51f:         Connection conn = createConnection(true);
1:42ee51f: 
1:42ee51f:         Session exclusiveSession1 = null;
1:42ee51f:         Session exclusiveSession2 = null;
1:42ee51f:         Session fallbackSession = null;
1:42ee51f:         Session senderSession = null;
1:42ee51f: 
1:42ee51f:         try {
1:42ee51f: 
1:42ee51f:             exclusiveSession1 = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f:             exclusiveSession2 = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f:             fallbackSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f:             senderSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f: 
1:42ee51f:             // This creates the exclusive consumer first which avoids AMQ-1024
1:42ee51f:             // bug.
1:42ee51f:             ActiveMQQueue exclusiveQueue = new ActiveMQQueue("TEST.QUEUE2");
1:42ee51f:             MessageConsumer exclusiveConsumer1 = exclusiveSession1.createConsumer(exclusiveQueue);
1:42ee51f:             MessageConsumer exclusiveConsumer2 = exclusiveSession2.createConsumer(exclusiveQueue);
1:42ee51f: 
1:42ee51f:             ActiveMQQueue fallbackQueue = new ActiveMQQueue("TEST.QUEUE2");
1:42ee51f:             MessageConsumer fallbackConsumer = fallbackSession.createConsumer(fallbackQueue);
1:42ee51f: 
1:42ee51f:             ActiveMQQueue senderQueue = new ActiveMQQueue("TEST.QUEUE2");
1:42ee51f: 
1:42ee51f:             MessageProducer producer = senderSession.createProducer(senderQueue);
1:42ee51f: 
1:42ee51f:             Message msg = senderSession.createTextMessage("test");
1:42ee51f:             producer.send(msg);
1:42ee51f:             Thread.sleep(100);
1:42ee51f: 
1:42ee51f:             // Verify exclusive consumer receives the message.
1:c7d559f:             assertNotNull(exclusiveConsumer1.receive(100));
1:c7d559f:             assertNull(exclusiveConsumer2.receive(100));
1:c7d559f:             assertNull(fallbackConsumer.receive(100));
1:42ee51f: 
1:42ee51f:             // Close the exclusive consumer to verify the non-exclusive consumer
1:42ee51f:             // takes over
1:42ee51f:             exclusiveConsumer1.close();
1:42ee51f: 
1:42ee51f:             producer.send(msg);
1:42ee51f:             producer.send(msg);
1:42ee51f: 
1:c7d559f:             assertNotNull("Should have received a message", exclusiveConsumer2.receive(100));
1:c7d559f:             assertNull("Should not have received a message", fallbackConsumer.receive(100));
1:42ee51f: 
1:42ee51f:         } finally {
1:42ee51f:             fallbackSession.close();
1:42ee51f:             senderSession.close();
1:42ee51f:             conn.close();
1:42ee51f:         }
1:42ee51f: 
1:42ee51f:     }
1:42ee51f: 
1:42ee51f:     public void testFailoverToNonExclusiveConsumer() throws JMSException, InterruptedException {
1:42ee51f:         Connection conn = createConnection(true);
1:42ee51f: 
1:42ee51f:         Session exclusiveSession = null;
1:42ee51f:         Session fallbackSession = null;
1:42ee51f:         Session senderSession = null;
1:42ee51f: 
1:42ee51f:         try {
1:42ee51f: 
1:42ee51f:             exclusiveSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f:             fallbackSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f:             senderSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:42ee51f: 
1:42ee51f:             // This creates the exclusive consumer first which avoids AMQ-1024
1:42ee51f:             // bug.
1:42ee51f:             ActiveMQQueue exclusiveQueue = new ActiveMQQueue("TEST.QUEUE3");
1:42ee51f:             MessageConsumer exclusiveConsumer = exclusiveSession.createConsumer(exclusiveQueue);
1:42ee51f: 
1:42ee51f:             ActiveMQQueue fallbackQueue = new ActiveMQQueue("TEST.QUEUE3");
1:42ee51f:             MessageConsumer fallbackConsumer = fallbackSession.createConsumer(fallbackQueue);
1:42ee51f: 
1:42ee51f:             ActiveMQQueue senderQueue = new ActiveMQQueue("TEST.QUEUE3");
1:42ee51f: 
1:42ee51f:             MessageProducer producer = senderSession.createProducer(senderQueue);
1:42ee51f: 
1:42ee51f:             Message msg = senderSession.createTextMessage("test");
1:42ee51f:             producer.send(msg);
1:42ee51f:             Thread.sleep(100);
1:42ee51f: 
1:42ee51f:             // Verify exclusive consumer receives the message.
1:c7d559f:             assertNotNull(exclusiveConsumer.receive(100));
1:c7d559f:             assertNull(fallbackConsumer.receive(100));
1:42ee51f: 
1:42ee51f:             // Close the exclusive consumer to verify the non-exclusive consumer
1:42ee51f:             // takes over
1:42ee51f:             exclusiveConsumer.close();
1:42ee51f: 
1:42ee51f:             producer.send(msg);
1:42ee51f: 
1:c7d559f:             assertNotNull(fallbackConsumer.receive(100));
1:42ee51f: 
1:42ee51f:         } finally {
1:42ee51f:             fallbackSession.close();
1:42ee51f:             senderSession.close();
1:42ee51f:             conn.close();
1:42ee51f:         }
1:42ee51f:     }
1:42ee51f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         answer.setDestinationPolicy(map);
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull(exclusiveConsumer.receive(100));
1:             assertNull(fallbackConsumer.receive(100));
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull(exclusiveConsumer1.receive(100));
1:             assertNull(exclusiveConsumer2.receive(100));
1:             assertNull(fallbackConsumer.receive(100));
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull("Should have received a message", exclusiveConsumer2.receive(100));
1:             assertNull("Should not have received a message", fallbackConsumer.receive(100));
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull(exclusiveConsumer.receive(100));
1:             assertNull(fallbackConsumer.receive(100));
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull(fallbackConsumer.receive(100));
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:42ee51f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import junit.framework.Assert;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: public class ExclusiveConsumerStartupDestinationTest extends EmbeddedBrokerTestSupport{
1: 
1:     private static final String VM_BROKER_URL = "vm://localhost";
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(false);
1:         PolicyMap map = new PolicyMap();
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setAllConsumersExclusiveByDefault(true);
1:         map.setDefaultEntry(entry);
0:         answer.setDestinationPolicy(map);        
1:         return answer;
1:     }
1: 
1:     protected String getBrokerConfigUri() {
1:         return "org/apache/activemq/broker/exclusive-consumer-startup-destination.xml";
1:     }
1: 
1:     private Connection createConnection(final boolean start) throws JMSException {
1:         ConnectionFactory cf = new ActiveMQConnectionFactory(VM_BROKER_URL);
1:         Connection conn = cf.createConnection();
1:         if (start) {
1:             conn.start();
1:         }
1:         return conn;
1:     }
1: 
1:     public void testExclusiveConsumerSelectedCreatedFirst() throws JMSException, InterruptedException {
1:         Connection conn = createConnection(true);
1: 
1:         Session exclusiveSession = null;
1:         Session fallbackSession = null;
1:         Session senderSession = null;
1: 
1:         try {
1: 
1:             exclusiveSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             fallbackSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             senderSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             ActiveMQQueue exclusiveQueue = new ActiveMQQueue("TEST.QUEUE1");
1:             MessageConsumer exclusiveConsumer = exclusiveSession.createConsumer(exclusiveQueue);
1: 
1:             ActiveMQQueue fallbackQueue = new ActiveMQQueue("TEST.QUEUE1");
1:             MessageConsumer fallbackConsumer = fallbackSession.createConsumer(fallbackQueue);
1: 
1:             ActiveMQQueue senderQueue = new ActiveMQQueue("TEST.QUEUE1");
1: 
1:             MessageProducer producer = senderSession.createProducer(senderQueue);
1: 
1:             Message msg = senderSession.createTextMessage("test");
1:             producer.send(msg);
1:             // TODO need two send a 2nd message - bug AMQ-1024
1:             // producer.send(msg);
1:             Thread.sleep(100);
1: 
1:             // Verify exclusive consumer receives the message.
0:             Assert.assertNotNull(exclusiveConsumer.receive(100));
0:             Assert.assertNull(fallbackConsumer.receive(100));
1: 
1:         } finally {
1:             fallbackSession.close();
1:             senderSession.close();
1:             conn.close();
1:         }
1: 
1:     }
1: 
1:     public void testFailoverToAnotherExclusiveConsumerCreatedFirst() throws JMSException,
1:         InterruptedException {
1:         Connection conn = createConnection(true);
1: 
1:         Session exclusiveSession1 = null;
1:         Session exclusiveSession2 = null;
1:         Session fallbackSession = null;
1:         Session senderSession = null;
1: 
1:         try {
1: 
1:             exclusiveSession1 = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             exclusiveSession2 = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             fallbackSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             senderSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             // This creates the exclusive consumer first which avoids AMQ-1024
1:             // bug.
1:             ActiveMQQueue exclusiveQueue = new ActiveMQQueue("TEST.QUEUE2");
1:             MessageConsumer exclusiveConsumer1 = exclusiveSession1.createConsumer(exclusiveQueue);
1:             MessageConsumer exclusiveConsumer2 = exclusiveSession2.createConsumer(exclusiveQueue);
1: 
1:             ActiveMQQueue fallbackQueue = new ActiveMQQueue("TEST.QUEUE2");
1:             MessageConsumer fallbackConsumer = fallbackSession.createConsumer(fallbackQueue);
1: 
1:             ActiveMQQueue senderQueue = new ActiveMQQueue("TEST.QUEUE2");
1: 
1:             MessageProducer producer = senderSession.createProducer(senderQueue);
1: 
1:             Message msg = senderSession.createTextMessage("test");
1:             producer.send(msg);
1:             Thread.sleep(100);
1: 
1:             // Verify exclusive consumer receives the message.
0:             Assert.assertNotNull(exclusiveConsumer1.receive(100));
0:             Assert.assertNull(exclusiveConsumer2.receive(100));
0:             Assert.assertNull(fallbackConsumer.receive(100));
1: 
1:             // Close the exclusive consumer to verify the non-exclusive consumer
1:             // takes over
1:             exclusiveConsumer1.close();
1: 
1:             producer.send(msg);
1:             producer.send(msg);
1: 
0:             Assert.assertNotNull("Should have received a message", exclusiveConsumer2.receive(100));
0:             Assert.assertNull("Should not have received a message", fallbackConsumer.receive(100));
1: 
1:         } finally {
1:             fallbackSession.close();
1:             senderSession.close();
1:             conn.close();
1:         }
1: 
1:     }
1: 
1:     public void testFailoverToNonExclusiveConsumer() throws JMSException, InterruptedException {
1:         Connection conn = createConnection(true);
1: 
1:         Session exclusiveSession = null;
1:         Session fallbackSession = null;
1:         Session senderSession = null;
1: 
1:         try {
1: 
1:             exclusiveSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             fallbackSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             senderSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             // This creates the exclusive consumer first which avoids AMQ-1024
1:             // bug.
1:             ActiveMQQueue exclusiveQueue = new ActiveMQQueue("TEST.QUEUE3");
1:             MessageConsumer exclusiveConsumer = exclusiveSession.createConsumer(exclusiveQueue);
1: 
1:             ActiveMQQueue fallbackQueue = new ActiveMQQueue("TEST.QUEUE3");
1:             MessageConsumer fallbackConsumer = fallbackSession.createConsumer(fallbackQueue);
1: 
1:             ActiveMQQueue senderQueue = new ActiveMQQueue("TEST.QUEUE3");
1: 
1:             MessageProducer producer = senderSession.createProducer(senderQueue);
1: 
1:             Message msg = senderSession.createTextMessage("test");
1:             producer.send(msg);
1:             Thread.sleep(100);
1: 
1:             // Verify exclusive consumer receives the message.
0:             Assert.assertNotNull(exclusiveConsumer.receive(100));
0:             Assert.assertNull(fallbackConsumer.receive(100));
1: 
1:             // Close the exclusive consumer to verify the non-exclusive consumer
1:             // takes over
1:             exclusiveConsumer.close();
1: 
1:             producer.send(msg);
1: 
0:             Assert.assertNotNull(fallbackConsumer.receive(100));
1: 
1:         } finally {
1:             fallbackSession.close();
1:             senderSession.close();
1:             conn.close();
1:         }
1: 
1:     }
1: 
1: }
============================================================================