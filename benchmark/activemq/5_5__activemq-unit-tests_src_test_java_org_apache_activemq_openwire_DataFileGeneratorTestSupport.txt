1:4311267: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:4311267:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4311267:  *
1:4311267:  * Unless required by applicable law or agreed to in writing, software
1:4311267:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4311267:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4311267:  * See the License for the specific language governing permissions and
1:4311267:  * limitations under the License.
1:4311267:  */
1:4311267: package org.apache.activemq.openwire;
15:4311267: 
1:446629b: import java.beans.BeanInfo;
1:446629b: import java.beans.Introspector;
1:446629b: import java.beans.PropertyDescriptor;
1:446629b: import java.io.ByteArrayInputStream;
1:446629b: import java.io.ByteArrayOutputStream;
1:446629b: import java.io.DataInputStream;
1:446629b: import java.io.DataOutputStream;
1:446629b: import java.io.File;
1:446629b: import java.io.FileInputStream;
1:446629b: import java.io.FileOutputStream;
1:446629b: import java.io.InputStream;
1:446629b: import java.lang.reflect.Array;
1:446629b: import java.lang.reflect.Method;
1:446629b: import java.net.URI;
1:446629b: import java.net.URL;
1:4842547: import java.util.Enumeration;
1:446629b: import java.util.HashSet;
1:446629b: import java.util.Set;
1:446629b: 
1:4311267: import org.apache.activemq.command.ActiveMQDestination;
1:4311267: import org.apache.activemq.command.ActiveMQQueue;
1:4311267: import org.apache.activemq.command.ActiveMQTextMessage;
1:4311267: import org.apache.activemq.command.BrokerId;
1:4311267: import org.apache.activemq.command.BrokerInfo;
1:4311267: import org.apache.activemq.command.ConnectionId;
1:4311267: import org.apache.activemq.command.ConsumerId;
1:4311267: import org.apache.activemq.command.DataStructure;
1:4311267: import org.apache.activemq.command.LocalTransactionId;
1:4311267: import org.apache.activemq.command.Message;
1:4311267: import org.apache.activemq.command.MessageAck;
1:4311267: import org.apache.activemq.command.MessageId;
1:446629b: import org.apache.activemq.command.NetworkBridgeFilter;
1:4311267: import org.apache.activemq.command.ProducerId;
1:4311267: import org.apache.activemq.command.SessionId;
1:4311267: import org.apache.activemq.command.TransactionId;
1:446629b: import org.apache.activemq.filter.BooleanExpression;
1:4311267: import org.apache.activemq.openwire.v1.ActiveMQTextMessageTest;
1:4311267: import org.apache.activemq.openwire.v1.BrokerInfoTest;
1:4311267: import org.apache.activemq.openwire.v1.MessageAckTest;
1:6ce83ac: import org.apache.activemq.test.TestSupport;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:9f9fe90: 
1:6ce83ac: public abstract class DataFileGeneratorTestSupport extends TestSupport {
1:230a86c: 
1:6ce83ac:     protected static final Object[] EMPTY_ARGUMENTS = {};
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DataFileGeneratorTestSupport.class);
1:6ce83ac: 
1:fc00993:     private static final Throwable SINGLETON_EXCEPTION = new Exception("shared exception");
1:fc00993:     private static final File MODULE_BASE_DIR;
1:fc00993:     private static final File CONTROL_DIR;
1:fc00993: 
1:6ce83ac: 
1:4311267:     static {
1:4311267:         File basedir = null;
1:4311267:         try {
1:4311267:             URL resource = DataFileGeneratorTestSupport.class.getResource("DataFileGeneratorTestSupport.class");
1:4311267:             URI baseURI = new URI(resource.toString()).resolve("../../../../..");
1:4311267:             basedir = new File(baseURI).getCanonicalFile();
1:230a86c:         } catch (Exception e) {
1:4311267:             throw new RuntimeException(e);
1:6ce83ac:         }
1:fc00993:         MODULE_BASE_DIR = basedir;
1:fc00993:         CONTROL_DIR = new File(MODULE_BASE_DIR, "src/test/resources/openwire-control");
1:6ce83ac:     }
1:446629b: 
1:4311267:     private int counter;
1:4311267:     private OpenWireFormat openWireformat;
1:4842547: 
1:fc00993:     public void xtestControlFileIsValid() throws Exception {
1:4311267:         generateControlFile();
1:4311267:         assertControlFileIsEqual();
1:6ce83ac:     }
1:6ce83ac: 
1:f680f3a:     public void testGenerateAndReParsingIsTheSame() throws Exception {
1:4311267:         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:4311267:         DataOutputStream ds = new DataOutputStream(buffer);
1:4311267:         Object expected = createObject();
1:fc00993:         LOG.info("Created: " + expected);
1:4311267:         openWireformat.marshal(expected, ds);
1:4311267:         ds.close();
1:6ce83ac: 
1:4311267:         // now lets try parse it back again
1:4311267:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:4311267:         DataInputStream dis = new DataInputStream(in);
1:4311267:         Object actual = openWireformat.unmarshal(dis);
1:b625db2:         assertBeansEqual("", new HashSet<Object>(), expected, actual);
1:6ce83ac: 
1:fc00993:         LOG.info("Parsed: " + actual);
1:6ce83ac:     }
1:6ce83ac: 
1:933eb2f:     protected void assertBeansEqual(String message, Set<Object> comparedObjects, Object expected, Object actual) throws Exception {
1:6ce83ac:         assertNotNull("Actual object should be equal to: " + expected + " but was null", actual);
1:6ce83ac:         if (comparedObjects.contains(expected)) {
1:6ce83ac:             return;
1:6ce83ac:         }
1:6ce83ac:         comparedObjects.add(expected);
1:933eb2f:         Class<? extends Object> type = expected.getClass();
1:6ce83ac:         assertEquals("Should be of same type", type, actual.getClass());
1:6ce83ac:         BeanInfo beanInfo = Introspector.getBeanInfo(type);
1:6ce83ac:         PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
1:6ce83ac:         for (int i = 0; i < descriptors.length; i++) {
1:6ce83ac:             PropertyDescriptor descriptor = descriptors[i];
1:6ce83ac:             Method method = descriptor.getReadMethod();
1:6ce83ac:             if (method != null) {
1:6ce83ac:                 String name = descriptor.getName();
1:6ce83ac:                 Object expectedValue = null;
1:6ce83ac:                 Object actualValue = null;
1:6ce83ac:                 try {
1:6ce83ac:                     expectedValue = method.invoke(expected, EMPTY_ARGUMENTS);
1:6ce83ac:                     actualValue = method.invoke(actual, EMPTY_ARGUMENTS);
1:230a86c:                 } catch (Exception e) {
1:fc00993:                     LOG.info("Failed to access property: " + name);
1:6ce83ac:                 }
1:6ce83ac:                 assertPropertyValuesEqual(message + name, comparedObjects, expectedValue, actualValue);
1:6ce83ac:             }
1:6ce83ac:         }
1:6ce83ac:     }
1:6ce83ac: 
1:933eb2f:     protected void assertPropertyValuesEqual(String name, Set<Object> comparedObjects, Object expectedValue, Object actualValue) throws Exception {
1:6ce83ac:         String message = "Property " + name + " not equal";
1:6ce83ac:         if (expectedValue == null) {
1:6ce83ac:             assertNull("Property " + name + " should be null", actualValue);
1:230a86c:         } else if (expectedValue instanceof Object[]) {
1:230a86c:             assertArrayEqual(message, comparedObjects, (Object[])expectedValue, (Object[])actualValue);
1:230a86c:         } else if (expectedValue.getClass().isArray()) {
1:6ce83ac:             assertPrimitiveArrayEqual(message, comparedObjects, expectedValue, actualValue);
1:230a86c:         } else {
1:6ce83ac:             if (expectedValue instanceof Exception) {
1:230a86c:                 assertExceptionsEqual(message, (Exception)expectedValue, actualValue);
1:230a86c:             } else if (expectedValue instanceof ByteSequence) {
1:230a86c:                 assertByteSequencesEqual(message, (ByteSequence)expectedValue, actualValue);
1:230a86c:             } else if (expectedValue instanceof DataStructure) {
1:6ce83ac:                 assertBeansEqual(message + name, comparedObjects, expectedValue, actualValue);
1:4842547:             } else if (expectedValue instanceof Enumeration) {
1:c7d559f:                 assertEnumerationEqual(message + name, comparedObjects, (Enumeration<?>)expectedValue, (Enumeration<?>)actualValue);
1:230a86c:             } else {
1:6ce83ac:                 assertEquals(message, expectedValue, actualValue);
1:6ce83ac:             }
1:230a86c: 
1:6ce83ac:         }
1:6ce83ac:     }
1:6ce83ac: 
1:933eb2f:     protected void assertArrayEqual(String message, Set<Object> comparedObjects, Object[] expected, Object[] actual) throws Exception {
1:6ce83ac:         assertEquals(message + ". Array length", expected.length, actual.length);
1:6ce83ac:         for (int i = 0; i < expected.length; i++) {
1:6ce83ac:             assertPropertyValuesEqual(message + ". element: " + i, comparedObjects, expected[i], actual[i]);
1:6ce83ac:         }
1:6ce83ac:     }
1:c7d559f: 
1:c7d559f:     protected void assertEnumerationEqual(String message, Set<Object> comparedObjects, Enumeration<?> expected, Enumeration<?> actual) throws Exception {
1:4842547:         while (expected.hasMoreElements()) {
1:c7d559f:             Object expectedElem = expected.nextElement();
1:c7d559f:             Object actualElem = actual.nextElement();
1:c7d559f:             assertPropertyValuesEqual(message + ". element: " + expectedElem, comparedObjects, expectedElem, actualElem);
1:4842547:         }
1:4842547:     }
1:230a86c: 
1:933eb2f:     protected void assertPrimitiveArrayEqual(String message, Set<Object> comparedObjects, Object expected, Object actual) throws ArrayIndexOutOfBoundsException, IllegalArgumentException,
1:230a86c:         Exception {
1:6ce83ac:         int length = Array.getLength(expected);
1:6ce83ac:         assertEquals(message + ". Array length", length, Array.getLength(actual));
1:6ce83ac:         for (int i = 0; i < length; i++) {
1:6ce83ac:             assertPropertyValuesEqual(message + ". element: " + i, comparedObjects, Array.get(expected, i), Array.get(actual, i));
1:6ce83ac:         }
1:6ce83ac:     }
1:230a86c: 
1:6ce83ac:     protected void assertByteSequencesEqual(String message, ByteSequence expected, Object actualValue) {
1:6ce83ac:         assertTrue(message + ". Actual value should be a ByteSequence but was: " + actualValue, actualValue instanceof ByteSequence);
1:230a86c:         ByteSequence actual = (ByteSequence)actualValue;
1:6ce83ac:         int length = expected.getLength();
1:6ce83ac:         assertEquals(message + ". Length", length, actual.getLength());
1:6ce83ac:         int offset = expected.getOffset();
1:6ce83ac:         assertEquals(message + ". Offset", offset, actual.getOffset());
1:6ce83ac:         byte[] data = expected.getData();
1:6ce83ac:         byte[] actualData = actual.getData();
1:6ce83ac:         for (int i = 0; i < length; i++) {
1:6ce83ac:             assertEquals(message + ". Offset " + i, data[offset + i], actualData[offset + i]);
1:6ce83ac:         }
1:6ce83ac:     }
1:6ce83ac: 
1:6ce83ac:     protected void assertExceptionsEqual(String message, Exception expected, Object actualValue) {
1:6ce83ac:         assertTrue(message + ". Actual value should be an exception but was: " + actualValue, actualValue instanceof Exception);
1:230a86c:         Exception actual = (Exception)actualValue;
1:6ce83ac:         assertEquals(message, expected.getMessage(), actual.getMessage());
1:6ce83ac:     }
1:6ce83ac: 
1:c7d559f:     @Override
1:4311267:     protected void setUp() throws Exception {
1:4311267:         super.setUp();
1:4311267:         openWireformat = createOpenWireFormat();
1:6ce83ac:     }
1:6ce83ac: 
1:4311267:     public void generateControlFile() throws Exception {
1:fc00993:         CONTROL_DIR.mkdirs();
1:fc00993:         File dataFile = new File(CONTROL_DIR, getClass().getName() + ".bin");
1:f680f3a: 
1:4311267:         FileOutputStream os = new FileOutputStream(dataFile);
1:4311267:         DataOutputStream ds = new DataOutputStream(os);
1:4311267:         openWireformat.marshal(createObject(), ds);
1:4311267:         ds.close();
1:6ce83ac:     }
1:4311267: 
1:4311267:     public InputStream generateInputStream() throws Exception {
1:4311267: 
1:4311267:         ByteArrayOutputStream os = new ByteArrayOutputStream();
1:4311267:         DataOutputStream ds = new DataOutputStream(os);
1:4311267:         openWireformat.marshal(createObject(), ds);
1:4311267:         ds.close();
1:4311267: 
1:4311267:         return new ByteArrayInputStream(os.toByteArray());
1:6ce83ac:     }
1:4311267: 
1:4311267:     public void assertControlFileIsEqual() throws Exception {
1:fc00993:         File dataFile = new File(CONTROL_DIR, getClass().getName() + ".bin");
1:4311267:         FileInputStream is1 = new FileInputStream(dataFile);
1:4311267:         int pos = 0;
1:4311267:         try {
1:4311267:             InputStream is2 = generateInputStream();
1:4311267:             int a = is1.read();
1:4311267:             int b = is2.read();
1:4311267:             pos++;
1:4311267:             assertEquals("Data does not match control file: " + dataFile + " at byte position " + pos, a, b);
1:4311267:             while (a >= 0 && b >= 0) {
1:4311267:                 a = is1.read();
1:4311267:                 b = is2.read();
1:4311267:                 pos++;
1:4311267:                 assertEquals("Data does not match control file: " + dataFile + " at byte position " + pos, a, b);
10:4311267:             }
1:4311267:             is2.close();
1:230a86c:         } finally {
1:4311267:             is1.close();
1:4311267:         }
1:4311267:     }
1:4311267: 
1:4311267:     protected abstract Object createObject() throws Exception;
1:4311267: 
1:4311267:     protected void populateObject(Object info) throws Exception {
1:4311267:         // empty method to allow derived classes to call super
1:4311267:         // to simplify generated code
1:4311267:     }
1:4311267: 
1:4311267:     protected OpenWireFormat createOpenWireFormat() {
1:4311267:         OpenWireFormat wf = new OpenWireFormat();
1:4311267:         wf.setCacheEnabled(true);
1:4311267:         wf.setStackTraceEnabled(false);
1:eb22a02:         wf.setVersion(OpenWireFormat.DEFAULT_WIRE_VERSION);
1:4311267:         return wf;
1:4311267:     }
1:4311267: 
1:4311267:     protected BrokerId createBrokerId(String text) {
1:4311267:         return new BrokerId(text);
1:4311267:     }
1:4311267: 
1:4311267:     protected TransactionId createTransactionId(String string) {
1:4311267:         return new LocalTransactionId(createConnectionId(string), ++counter);
1:4311267:     }
1:4311267: 
1:4311267:     protected ConnectionId createConnectionId(String string) {
1:4311267:         return new ConnectionId(string);
1:4311267:     }
1:4311267: 
1:4311267:     protected SessionId createSessionId(String string) {
1:4311267:         return new SessionId(createConnectionId(string), ++counter);
1:4311267:     }
1:4311267: 
1:4311267:     protected ProducerId createProducerId(String string) {
1:4311267:         return new ProducerId(createSessionId(string), ++counter);
1:4311267:     }
1:4311267: 
1:4311267:     protected ConsumerId createConsumerId(String string) {
1:4311267:         return new ConsumerId(createSessionId(string), ++counter);
1:4311267:     }
1:4311267: 
1:4311267:     protected MessageId createMessageId(String string) {
1:4311267:         return new MessageId(createProducerId(string), ++counter);
1:4311267:     }
1:4311267: 
1:4311267:     protected ActiveMQDestination createActiveMQDestination(String string) {
1:4311267:         return new ActiveMQQueue(string);
1:4311267:     }
1:4311267: 
1:4311267:     protected Message createMessage(String string) throws Exception {
1:230a86c:         ActiveMQTextMessage message = (ActiveMQTextMessage)ActiveMQTextMessageTest.SINGLETON.createObject();
1:4311267:         message.setText(string);
1:4311267:         return message;
1:4311267:     }
1:4311267: 
1:4311267:     protected BrokerInfo createBrokerInfo(String string) throws Exception {
1:230a86c:         return (BrokerInfo)BrokerInfoTest.SINGLETON.createObject();
1:4311267:     }
1:4311267: 
1:4311267:     protected MessageAck createMessageAck(String string) throws Exception {
1:230a86c:         return (MessageAck)MessageAckTest.SINGLETON.createObject();
1:4311267:     }
1:4311267: 
1:4311267:     protected DataStructure createDataStructure(String string) throws Exception {
1:4311267:         return createBrokerInfo(string);
1:4311267:     }
1:4311267: 
1:4311267:     protected Throwable createThrowable(String string) {
1:4311267:         // we have issues with stack frames not being equal so share the same
1:4311267:         // exception each time
1:fc00993:         return SINGLETON_EXCEPTION;
1:4311267:     }
1:230a86c: 
1:446629b:     protected BooleanExpression createBooleanExpression(String string) {
1:a95c6db:         return new NetworkBridgeFilter(null, new BrokerId(string), 10, 10);
1:446629b:     }
1:446629b: 
1:4311267: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
1:         return new NetworkBridgeFilter(null, new BrokerId(string), 10, 10);
commit:8012f28
/////////////////////////////////////////////////////////////////////////
0:         return new NetworkBridgeFilter(null, new BrokerId(string), 10);
commit:eb22a02
/////////////////////////////////////////////////////////////////////////
1:         wf.setVersion(OpenWireFormat.DEFAULT_WIRE_VERSION);
commit:b625db2
/////////////////////////////////////////////////////////////////////////
1:         assertBeansEqual("", new HashSet<Object>(), expected, actual);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:                 assertEnumerationEqual(message + name, comparedObjects, (Enumeration<?>)expectedValue, (Enumeration<?>)actualValue);
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void assertEnumerationEqual(String message, Set<Object> comparedObjects, Enumeration<?> expected, Enumeration<?> actual) throws Exception {
1:             Object expectedElem = expected.nextElement();
1:             Object actualElem = actual.nextElement();
1:             assertPropertyValuesEqual(message + ". element: " + expectedElem, comparedObjects, expectedElem, actualElem);
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         assertBeansEqual("", new HashSet<Object>(), expected, actual);
1:     protected void assertBeansEqual(String message, Set<Object> comparedObjects, Object expected, Object actual) throws Exception {
1:         Class<? extends Object> type = expected.getClass();
/////////////////////////////////////////////////////////////////////////
1:     protected void assertPropertyValuesEqual(String name, Set<Object> comparedObjects, Object expectedValue, Object actualValue) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     protected void assertArrayEqual(String message, Set<Object> comparedObjects, Object[] expected, Object[] actual) throws Exception {
1:     protected void assertPrimitiveArrayEqual(String message, Set<Object> comparedObjects, Object expected, Object actual) throws ArrayIndexOutOfBoundsException, IllegalArgumentException,
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DataFileGeneratorTestSupport.class);
1:     private static final Throwable SINGLETON_EXCEPTION = new Exception("shared exception");
1:     private static final File MODULE_BASE_DIR;
1:     private static final File CONTROL_DIR;
0:     private static final File CLASS_FILE_DIR;
1: 
/////////////////////////////////////////////////////////////////////////
1:         MODULE_BASE_DIR = basedir;
1:         CONTROL_DIR = new File(MODULE_BASE_DIR, "src/test/resources/openwire-control");
0:         CLASS_FILE_DIR = new File(MODULE_BASE_DIR, "src/test/java/org/activemq/openwire");
1:     public void xtestControlFileIsValid() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created: " + expected);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Parsed: " + actual);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Failed to access property: " + name);
/////////////////////////////////////////////////////////////////////////
1:         CONTROL_DIR.mkdirs();
1:         File dataFile = new File(CONTROL_DIR, getClass().getName() + ".bin");
/////////////////////////////////////////////////////////////////////////
1:         File dataFile = new File(CONTROL_DIR, getClass().getName() + ".bin");
/////////////////////////////////////////////////////////////////////////
1:         return SINGLETON_EXCEPTION;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:                 } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:         } else if (expectedValue instanceof Object[]) {
1:             assertArrayEqual(message, comparedObjects, (Object[])expectedValue, (Object[])actualValue);
1:         } else if (expectedValue.getClass().isArray()) {
1:         } else {
1:                 assertExceptionsEqual(message, (Exception)expectedValue, actualValue);
1:             } else if (expectedValue instanceof ByteSequence) {
1:                 assertByteSequencesEqual(message, (ByteSequence)expectedValue, actualValue);
1:             } else if (expectedValue instanceof DataStructure) {
1:             } else {
1: 
0:     protected void assertArrayEqual(String message, Set comparedObjects, Object[] expected, Object[] actual) throws Exception {
1: 
0:     protected void assertPrimitiveArrayEqual(String message, Set comparedObjects, Object expected, Object actual) throws ArrayIndexOutOfBoundsException, IllegalArgumentException,
1:         Exception {
1: 
1:         ByteSequence actual = (ByteSequence)actualValue;
/////////////////////////////////////////////////////////////////////////
1:         Exception actual = (Exception)actualValue;
/////////////////////////////////////////////////////////////////////////
1:         } finally {
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQTextMessage message = (ActiveMQTextMessage)ActiveMQTextMessageTest.SINGLETON.createObject();
1:         return (BrokerInfo)BrokerInfoTest.SINGLETON.createObject();
1:         return (MessageAck)MessageAckTest.SINGLETON.createObject();
/////////////////////////////////////////////////////////////////////////
1: 
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteSequence;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.packet.ByteSequence;
commit:446629b
/////////////////////////////////////////////////////////////////////////
1: import java.beans.BeanInfo;
1: import java.beans.Introspector;
1: import java.beans.PropertyDescriptor;
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.InputStream;
1: import java.lang.reflect.Array;
1: import java.lang.reflect.Method;
1: import java.net.URI;
1: import java.net.URL;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.NetworkBridgeFilter;
1: import org.apache.activemq.filter.BooleanExpression;
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected BooleanExpression createBooleanExpression(String string) {
0:         return new NetworkBridgeFilter(new BrokerId(string), 10);
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DataFileGeneratorTestSupport.class);
commit:610d527
/////////////////////////////////////////////////////////////////////////
0:         assertBeansEqual("", new HashSet<Object>(), expected, actual);
commit:4842547
/////////////////////////////////////////////////////////////////////////
1: import java.util.Enumeration;
0: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Parsed: " + actual);
/////////////////////////////////////////////////////////////////////////
1:             } else if (expectedValue instanceof Enumeration) {
0:             	assertEnumerationEqual(message + name, comparedObjects, (Enumeration)expectedValue, (Enumeration)actualValue);
/////////////////////////////////////////////////////////////////////////
1:     
0:     protected void assertEnumerationEqual(String message, Set<Object> comparedObjects, Enumeration expected, Enumeration actual) throws Exception {
1:         while (expected.hasMoreElements()) {
0:         	Object expectedElem = expected.nextElement();
0:         	Object actualElem = actual.nextElement();
0:         	assertPropertyValuesEqual(message + ". element: " + expectedElem, comparedObjects, expectedElem, actualElem);
1:         }
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:c0fb0c5
/////////////////////////////////////////////////////////////////////////
0:         wf.setVersion(OpenWireFormat.DEFAULT_VERSION);
commit:06c560c
/////////////////////////////////////////////////////////////////////////
0:         wf.setVersion(2);
commit:9f9fe90
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log log = LogFactory.getLog(DataFileGeneratorTestSupport.class);
1:     
/////////////////////////////////////////////////////////////////////////
0:         log.info("Created: " + expected);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Parsed: " + actual);
/////////////////////////////////////////////////////////////////////////
0:                     log.info("Failed to access property: " + name);
commit:6ce83ac
/////////////////////////////////////////////////////////////////////////
0: import org.activeio.ByteSequence;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.test.TestSupport;
0: import java.beans.BeanInfo;
0: import java.beans.Introspector;
0: import java.beans.PropertyDescriptor;
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.Array;
0: import java.lang.reflect.InvocationTargetException;
0: import java.lang.reflect.Method;
0: import java.util.*;
1: public abstract class DataFileGeneratorTestSupport extends TestSupport {
1: 
1:     protected static final Object[] EMPTY_ARGUMENTS = {};
0:     private static Throwable singletonException = new Exception("shared exception");
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
0:         assertBeansEqual("", new HashSet(), expected, actual);
1:     }
1: 
0:     protected void assertBeansEqual(String message, Set comparedObjects, Object expected, Object actual) throws Exception {
1:         assertNotNull("Actual object should be equal to: " + expected + " but was null", actual);
1:         if (comparedObjects.contains(expected)) {
1:             return;
1:         }
1:         comparedObjects.add(expected);
0:         Class type = expected.getClass();
1:         assertEquals("Should be of same type", type, actual.getClass());
1:         BeanInfo beanInfo = Introspector.getBeanInfo(type);
1:         PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
1:         for (int i = 0; i < descriptors.length; i++) {
1:             PropertyDescriptor descriptor = descriptors[i];
1:             Method method = descriptor.getReadMethod();
1:             if (method != null) {
1:                 String name = descriptor.getName();
1:                 Object expectedValue = null;
1:                 Object actualValue = null;
1:                 try {
1:                     expectedValue = method.invoke(expected, EMPTY_ARGUMENTS);
1:                     actualValue = method.invoke(actual, EMPTY_ARGUMENTS);
1:                 }
0:                 catch (Exception e) {
0:                     System.out.println("Failed to access property: " + name);
1:                 }
1:                 assertPropertyValuesEqual(message + name, comparedObjects, expectedValue, actualValue);
1:             }
1:         }
1:     }
1: 
0:     protected void assertPropertyValuesEqual(String name, Set comparedObjects, Object expectedValue, Object actualValue) throws Exception {
1:         String message = "Property " + name + " not equal";
1:         if (expectedValue == null) {
1:             assertNull("Property " + name + " should be null", actualValue);
1:         }
0:         else if (expectedValue instanceof Object[]) {
0:             assertArrayEqual(message, comparedObjects, (Object[]) expectedValue, (Object[]) actualValue);
1:         }
0:         else if (expectedValue.getClass().isArray()) {
1:             assertPrimitiveArrayEqual(message, comparedObjects, expectedValue, actualValue);
1:         }
0:         else {
1:             if (expectedValue instanceof Exception) {
0:                 assertExceptionsEqual(message, (Exception) expectedValue, actualValue);
1:             }
0:             else if (expectedValue instanceof ByteSequence) {
0:                 assertByteSequencesEqual(message, (ByteSequence) expectedValue, actualValue);
1:             }
0:             else if (expectedValue instanceof DataStructure) {
1:                 assertBeansEqual(message + name, comparedObjects, expectedValue, actualValue);
1:             }
0:             else {
1:                 assertEquals(message, expectedValue, actualValue);
1:             }
1:                 
1:         }
1:     }
1: 
0:     protected void assertArrayEqual(String message,Set comparedObjects,  Object[] expected, Object[] actual) throws Exception {
1:         assertEquals(message + ". Array length", expected.length, actual.length);
1:         for (int i = 0; i < expected.length; i++) {
1:             assertPropertyValuesEqual(message + ". element: " + i, comparedObjects, expected[i], actual[i]);
1:         }
1:     }
1:     
0:     protected void assertPrimitiveArrayEqual(String message, Set comparedObjects, Object expected, Object actual) throws ArrayIndexOutOfBoundsException, IllegalArgumentException, Exception {
1:         int length = Array.getLength(expected);
1:         assertEquals(message + ". Array length", length, Array.getLength(actual));
1:         for (int i = 0; i < length; i++) {
1:             assertPropertyValuesEqual(message + ". element: " + i, comparedObjects, Array.get(expected, i), Array.get(actual, i));
1:         }
1:     }
1:     protected void assertByteSequencesEqual(String message, ByteSequence expected, Object actualValue) {
1:         assertTrue(message + ". Actual value should be a ByteSequence but was: " + actualValue, actualValue instanceof ByteSequence);
0:         ByteSequence actual = (ByteSequence) actualValue;
1:         int length = expected.getLength();
1:         assertEquals(message + ". Length", length, actual.getLength());
1:         int offset = expected.getOffset();
1:         assertEquals(message + ". Offset", offset, actual.getOffset());
1:         byte[] data = expected.getData();
1:         byte[] actualData = actual.getData();
1:         for (int i = 0; i < length; i++) {
1:             assertEquals(message + ". Offset " + i, data[offset + i], actualData[offset + i]);
1:         }
1:     }
1: 
1:     protected void assertExceptionsEqual(String message, Exception expected, Object actualValue) {
1:         assertTrue(message + ". Actual value should be an exception but was: " + actualValue, actualValue instanceof Exception);
0:         Exception actual = (Exception) actualValue;
1:         assertEquals(message, expected.getMessage(), actual.getMessage());
commit:f680f3a
/////////////////////////////////////////////////////////////////////////
0:     public void XXXX_testControlFileIsValid() throws Exception {
1:     public void testGenerateAndReParsingIsTheSame() throws Exception {
0:         System.out.println("Created: " + expected);
/////////////////////////////////////////////////////////////////////////
0:         System.out.println("Parsed: " + actual);
1:         
0:         assertEquals("Objects should be equal", expected.toString(), actual.toString());
commit:4311267
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.BrokerId;
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.DataStructure;
1: import org.apache.activemq.command.LocalTransactionId;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.SessionId;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.openwire.v1.ActiveMQTextMessageTest;
1: import org.apache.activemq.openwire.v1.BrokerInfoTest;
1: import org.apache.activemq.openwire.v1.MessageAckTest;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.io.InputStream;
0: import java.net.URI;
0: import java.net.URL;
1: 
0: import junit.framework.TestCase;
1: 
0: public abstract class DataFileGeneratorTestSupport extends TestCase {
1: 
0:     static final File moduleBaseDir;
0:     static final File controlDir;
0:     static final File classFileDir;
0:     private static Throwable singletonException = new Exception("shared exception");
1: 
1:     static {
1:         File basedir = null;
1:         try {
1:             URL resource = DataFileGeneratorTestSupport.class.getResource("DataFileGeneratorTestSupport.class");
1:             URI baseURI = new URI(resource.toString()).resolve("../../../../..");
1:             basedir = new File(baseURI).getCanonicalFile();
1:         }
0:         catch (Exception e) {
1:             throw new RuntimeException(e);
1:         }
0:         moduleBaseDir = basedir;
0:         controlDir = new File(moduleBaseDir, "src/test/resources/openwire-control");
0:         classFileDir = new File(moduleBaseDir, "src/test/java/org/activemq/openwire");
1:     }
1: 
1:     private int counter;
1:     private OpenWireFormat openWireformat;
1: 
0:     public void testControlFileIsValid() throws Exception {
1:         generateControlFile();
1:         assertControlFileIsEqual();
1:     }
1:     
0:     public void XXX_testGenerateAndReParsingIsTheSame() throws Exception {
1:         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:         DataOutputStream ds = new DataOutputStream(buffer);
1:         Object expected = createObject();
1:         openWireformat.marshal(expected, ds);
1:         ds.close();
1:         
1:         // now lets try parse it back again
1:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:         DataInputStream dis = new DataInputStream(in);
1:         Object actual = openWireformat.unmarshal(dis);
1:         
0:         assertEquals("Objects should be equal", expected, actual);
1:         
0:         // TODO generate a property based equality method?
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         openWireformat = createOpenWireFormat();
1:     }
1: 
1:     public void generateControlFile() throws Exception {
0:         controlDir.mkdirs();
0:         File dataFile = new File(controlDir, getClass().getName() + ".bin");
1: 
1:         FileOutputStream os = new FileOutputStream(dataFile);
1:         DataOutputStream ds = new DataOutputStream(os);
1:         openWireformat.marshal(createObject(), ds);
1:         ds.close();
1:     }
1: 
1:     public InputStream generateInputStream() throws Exception {
1: 
1:         ByteArrayOutputStream os = new ByteArrayOutputStream();
1:         DataOutputStream ds = new DataOutputStream(os);
1:         openWireformat.marshal(createObject(), ds);
1:         ds.close();
1: 
1:         return new ByteArrayInputStream(os.toByteArray());
1:     }
1: 
1:     public void assertControlFileIsEqual() throws Exception {
0:         File dataFile = new File(controlDir, getClass().getName() + ".bin");
1:         FileInputStream is1 = new FileInputStream(dataFile);
1:         int pos = 0;
1:         try {
1:             InputStream is2 = generateInputStream();
1:             int a = is1.read();
1:             int b = is2.read();
1:             pos++;
1:             assertEquals("Data does not match control file: " + dataFile + " at byte position " + pos, a, b);
1:             while (a >= 0 && b >= 0) {
1:                 a = is1.read();
1:                 b = is2.read();
1:                 pos++;
1:                 assertEquals("Data does not match control file: " + dataFile + " at byte position " + pos, a, b);
1:             }
1:             is2.close();
1:         }
0:         finally {
1:             is1.close();
1:         }
1:     }
1: 
1:     protected abstract Object createObject() throws Exception;
1: 
1:     protected void populateObject(Object info) throws Exception {
1:         // empty method to allow derived classes to call super
1:         // to simplify generated code
1:     }
1: 
1:     protected OpenWireFormat createOpenWireFormat() {
1:         OpenWireFormat wf = new OpenWireFormat();
1:         wf.setCacheEnabled(true);
1:         wf.setStackTraceEnabled(false);
0:         wf.setVersion(1);
1:         return wf;
1:     }
1: 
1:     protected BrokerId createBrokerId(String text) {
1:         return new BrokerId(text);
1:     }
1: 
1:     protected TransactionId createTransactionId(String string) {
1:         return new LocalTransactionId(createConnectionId(string), ++counter);
1:     }
1: 
1:     protected ConnectionId createConnectionId(String string) {
1:         return new ConnectionId(string);
1:     }
1: 
1:     protected SessionId createSessionId(String string) {
1:         return new SessionId(createConnectionId(string), ++counter);
1:     }
1: 
1:     protected ProducerId createProducerId(String string) {
1:         return new ProducerId(createSessionId(string), ++counter);
1:     }
1: 
1:     protected ConsumerId createConsumerId(String string) {
1:         return new ConsumerId(createSessionId(string), ++counter);
1:     }
1: 
1:     protected MessageId createMessageId(String string) {
1:         return new MessageId(createProducerId(string), ++counter);
1:     }
1: 
1:     protected ActiveMQDestination createActiveMQDestination(String string) {
1:         return new ActiveMQQueue(string);
1:     }
1: 
1:     protected Message createMessage(String string) throws Exception {
0:         ActiveMQTextMessage message = (ActiveMQTextMessage) ActiveMQTextMessageTest.SINGLETON.createObject();
1:         message.setText(string);
1:         return message;
1:     }
1: 
1:     protected BrokerInfo createBrokerInfo(String string) throws Exception {
0:         return (BrokerInfo) BrokerInfoTest.SINGLETON.createObject();
1:     }
1: 
1:     protected MessageAck createMessageAck(String string) throws Exception {
0:         return (MessageAck) MessageAckTest.SINGLETON.createObject();
1:     }
1: 
1:     protected DataStructure createDataStructure(String string) throws Exception {
1:         return createBrokerInfo(string);
1:     }
1: 
1:     protected Throwable createThrowable(String string) {
1:         // we have issues with stack frames not being equal so share the same
1:         // exception each time
0:         return singletonException;
1:     }
1: }
============================================================================