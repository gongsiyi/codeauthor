3:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
12:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: package org.apache.activemq.transport.tcp;
1:d29ca2a: 
1:d29ca2a: import java.io.FilterOutputStream;
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.OutputStream;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * An optimized buffered outputstream for Tcp
1:b0c2a40:  * 
1:f812e34:  * 
1:d29ca2a:  */
1:d29ca2a: 
1:2189100: public class TcpBufferedOutputStream extends FilterOutputStream implements TimeStampStream {
1:fc00993:     private static final int BUFFER_SIZE = 8192;
1:d29ca2a:     private byte[] buffer;
1:fdcc973:     private int bufferlen;
1:d29ca2a:     private int count;
1:f561d6b:     private volatile long writeTimestamp = -1;//concurrent reads of this value
1:d29ca2a:     
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Constructor
1:f812e34:      * 
1:d29ca2a:      * @param out
1:d29ca2a:      */
1:d29ca2a:     public TcpBufferedOutputStream(OutputStream out) {
1:d29ca2a:         this(out, BUFFER_SIZE);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Creates a new buffered output stream to write data to the specified
1:f812e34:      * underlying output stream with the specified buffer size.
1:f812e34:      * 
1:f812e34:      * @param out the underlying output stream.
1:d29ca2a:      * @param size the buffer size.
1:d29ca2a:      * @throws IllegalArgumentException if size <= 0.
1:d29ca2a:      */
1:d29ca2a:     public TcpBufferedOutputStream(OutputStream out, int size) {
1:d29ca2a:         super(out);
1:d29ca2a:         if (size <= 0) {
1:d29ca2a:             throw new IllegalArgumentException("Buffer size <= 0");
1:d29ca2a:         }
1:d29ca2a:         buffer = new byte[size];
1:f812e34:         bufferlen = size;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * write a byte on to the stream
1:f812e34:      * 
1:d29ca2a:      * @param b - byte to write
2:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:d29ca2a:     public void write(int b) throws IOException {
1:f812e34:         if ((bufferlen - count) < 1) {
1:d29ca2a:             flush();
1:d29ca2a:         }
1:f812e34:         buffer[count++] = (byte)b;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * write a byte array to the stream
1:f812e34:      * 
1:f812e34:      * @param b the byte buffer
1:d29ca2a:      * @param off the offset into the buffer
1:d29ca2a:      * @param len the length of data to write
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:d29ca2a:     public void write(byte b[], int off, int len) throws IOException {
1:bca91bb:         if (b != null) {
1:f812e34:             if ((bufferlen - count) < len) {
1:d29ca2a:                 flush();
1:d29ca2a:             }
1:d29ca2a:             if (buffer.length >= len) {
1:d29ca2a:                 System.arraycopy(b, off, buffer, count, len);
1:d29ca2a:                 count += len;
1:f812e34:             } else {
1:f561d6b:                 try {
1:f561d6b:                     writeTimestamp = System.currentTimeMillis();
1:d29ca2a:                     out.write(b, off, len);
1:f561d6b:                 } finally {
1:f8eed48:                     writeTimestamp = -1;
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:f561d6b:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * flush the data to the output stream This doesn't call flush on the
1:f812e34:      * underlying outputstream, because Tcp is particularly efficent at doing
1:f812e34:      * this itself ....
1:f812e34:      * 
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:d29ca2a:     public void flush() throws IOException {
1:d29ca2a:         if (count > 0 && out != null) {
1:f561d6b:             try {
1:f561d6b:                 writeTimestamp = System.currentTimeMillis();
1:d29ca2a:                 out.write(buffer, 0, count);
1:f561d6b:             } finally {
1:f561d6b:             	writeTimestamp = -1;
1:d29ca2a:             }
1:d29ca2a:             count = 0;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * close this stream
1:f812e34:      * 
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:d29ca2a:     public void close() throws IOException {
1:d29ca2a:         super.close();
1:d29ca2a:     }
1:d29ca2a: 
1:2189100:     /* (non-Javadoc)
1:2189100:      * @see org.apache.activemq.transport.tcp.TimeStampStream#isWriting()
1:d29ca2a:      */
1:f561d6b:     public boolean isWriting() {
1:f561d6b:         return writeTimestamp > 0;
1:d29ca2a:     }
1:d29ca2a:     
1:2189100:     /* (non-Javadoc)
1:2189100:      * @see org.apache.activemq.transport.tcp.TimeStampStream#getWriteTimestamp()
1:d29ca2a:      */
1:f561d6b:     public long getWriteTimestamp() {
1:f561d6b:     	return writeTimestamp;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final int BUFFER_SIZE = 8192;
/////////////////////////////////////////////////////////////////////////
0:     private void checkClosed() throws IOException {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Creates a new buffered output stream to write data to the specified
1:      * underlying output stream with the specified buffer size.
1:      * 
1:      * @param out the underlying output stream.
/////////////////////////////////////////////////////////////////////////
1:         bufferlen = size;
1:      * 
1:         if ((bufferlen - count) < 1) {
1:         buffer[count++] = (byte)b;
1:      * 
1:      * @param b the byte buffer
1:         if ((bufferlen - count) < len) {
1:         } else {
1:      * flush the data to the output stream This doesn't call flush on the
1:      * underlying outputstream, because Tcp is particularly efficent at doing
1:      * this itself ....
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.tcp;
1: 
0: import java.io.EOFException;
1: import java.io.FilterOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: 
1: /**
1:  * An optimized buffered outputstream for Tcp
1:  *
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: 
0: public class TcpBufferedOutputStream extends FilterOutputStream {
0:     private final static int BUFFER_SIZE = 8192;
1:     private byte[] buffer;
1:     private int count;
0:     private boolean closed;
1: 
1:     /**
1:      * Constructor
1:      *
1:      * @param out
1:      */
1:     public TcpBufferedOutputStream(OutputStream out) {
1:         this(out, BUFFER_SIZE);
1:     }
1: 
1:     /**
0:      * Creates a new buffered output stream to write data to the specified underlying output stream with the specified
0:      * buffer size.
1:      *
0:      * @param out  the underlying output stream.
1:      * @param size the buffer size.
1:      * @throws IllegalArgumentException if size <= 0.
1:      */
1:     public TcpBufferedOutputStream(OutputStream out, int size) {
1:         super(out);
1:         if (size <= 0) {
1:             throw new IllegalArgumentException("Buffer size <= 0");
1:         }
1:         buffer = new byte[size];
1:     }
1: 
1:     /**
1:      * write a byte on to the stream
1:      *
1:      * @param b - byte to write
1:      * @throws IOException
1:      */
1:     public void write(int b) throws IOException {
0:         checkClosed();
0:         if (availableBufferToWrite() < 1) {
1:             flush();
1:         }
0:         buffer[count++] = (byte) b;
1:     }
1: 
1: 
1:     /**
1:      * write a byte array to the stream
1:      *
0:      * @param b   the byte buffer
1:      * @param off the offset into the buffer
1:      * @param len the length of data to write
1:      * @throws IOException
1:      */
1:     public void write(byte b[], int off, int len) throws IOException {
0:         checkClosed();
0:         if (availableBufferToWrite() < len) {
1:             flush();
1:         }
1:         if (buffer.length >= len) {
1:             System.arraycopy(b, off, buffer, count, len);
1:             count += len;
1:         }
0:         else {
1:             out.write(b, off, len);
1:         }
1:     }
1: 
1:     /**
0:      * flush the data to the output stream
0:      * This doesn't call flush on the underlying outputstream, because
0:      * Tcp is particularly efficent at doing this itself ....
1:      *
1:      * @throws IOException
1:      */
1:     public void flush() throws IOException {
1:         if (count > 0 && out != null) {
1:             out.write(buffer, 0, count);
1:             count = 0;
1:         }
1:     }
1: 
1:     /**
1:      * close this stream
1:      *
1:      * @throws IOException
1:      */
1:     public void close() throws IOException {
1:         super.close();
0:         closed = true;
1:     }
1: 
1: 
1:     /**
0:      * Checks that the stream has not been closed
1:      *
1:      * @throws IOException
1:      */
0:     protected void checkClosed() throws IOException {
0:         if (closed) {
0:             throw new EOFException("Cannot write to the stream any more it has already been closed");
1:         }
1:     }
1: 
1:     /**
0:      * @return the amount free space in the buffer
1:      */
0:     private int availableBufferToWrite() {
0:         return buffer.length - count;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:2189100
/////////////////////////////////////////////////////////////////////////
1: public class TcpBufferedOutputStream extends FilterOutputStream implements TimeStampStream {
/////////////////////////////////////////////////////////////////////////
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.transport.tcp.TimeStampStream#isWriting()
0:      */
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.transport.tcp.TimeStampStream#getWriteTimestamp()
0:      */
commit:f8eed48
/////////////////////////////////////////////////////////////////////////
1:                     writeTimestamp = -1;
commit:f561d6b
/////////////////////////////////////////////////////////////////////////
1:     private volatile long writeTimestamp = -1;//concurrent reads of this value
0:     
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     writeTimestamp = System.currentTimeMillis();
0:                     out.write(b, off, len);
1:                 } finally {
1:                     writeTimestamp = System.currentTimeMillis();
1:                 }
/////////////////////////////////////////////////////////////////////////
1:             try {
0:                 writeTimestamp = System.currentTimeMillis();
0:                 out.write(buffer, 0, count);
1:             } finally {
1:             	writeTimestamp = -1;
0:             }
/////////////////////////////////////////////////////////////////////////
1:     public boolean isWriting() {
1:         return writeTimestamp > 0;
0:     }
0:     
1:     public long getWriteTimestamp() {
1:     	return writeTimestamp;
0:     }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:34c530c
/////////////////////////////////////////////////////////////////////////
commit:bca91bb
/////////////////////////////////////////////////////////////////////////
1:         if (b != null) {
0:             if ((bufferlen - count) < len) {
0:                 flush();
0:             }
0:             if (buffer.length >= len) {
0:                 System.arraycopy(b, off, buffer, count, len);
0:                 count += len;
0:             } else {
0:                 out.write(b, off, len);
0:             }
commit:fdcc973
/////////////////////////////////////////////////////////////////////////
1:     private int bufferlen;
/////////////////////////////////////////////////////////////////////////
0:         bufferlen=size;
/////////////////////////////////////////////////////////////////////////
0:         if ((bufferlen-count) < 1) {
/////////////////////////////////////////////////////////////////////////
0:         if ((bufferlen-count) < len) {
/////////////////////////////////////////////////////////////////////////
0:     private final void checkClosed() throws IOException {
============================================================================