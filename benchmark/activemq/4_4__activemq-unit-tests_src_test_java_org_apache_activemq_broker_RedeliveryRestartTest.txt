1:2030097: /**
1:2030097:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2030097:  * contributor license agreements.  See the NOTICE file distributed with
1:2030097:  * this work for additional information regarding copyright ownership.
1:2030097:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2030097:  * (the "License"); you may not use this file except in compliance with
1:2030097:  * the License.  You may obtain a copy of the License at
1:2030097:  *
1:2030097:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2030097:  *
1:2030097:  * Unless required by applicable law or agreed to in writing, software
1:2030097:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2030097:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2030097:  * See the License for the specific language governing permissions and
1:2030097:  * limitations under the License.
1:2030097:  */
1:2030097: package org.apache.activemq.broker;
14:2030097: 
1:266d23e: import java.util.Arrays;
1:2030097: import javax.jms.ConnectionFactory;
1:2030097: import javax.jms.Destination;
1:2030097: import javax.jms.JMSException;
1:2030097: import javax.jms.MessageConsumer;
1:2030097: import javax.jms.MessageProducer;
1:2030097: import javax.jms.Session;
1:2030097: import javax.jms.TextMessage;
1:75eb814: import javax.jms.TopicSubscriber;
1:2030097: import org.apache.activemq.ActiveMQConnection;
1:2030097: import org.apache.activemq.ActiveMQConnectionFactory;
1:266d23e: import org.apache.activemq.TestSupport;
1:266d23e: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:266d23e: import org.apache.activemq.broker.region.policy.PolicyMap;
1:75eb814: import org.apache.activemq.command.ActiveMQTopic;
1:2030097: import org.apache.activemq.transport.failover.FailoverTransport;
1:266d23e: import org.junit.After;
1:266d23e: import org.junit.Before;
1:266d23e: import org.junit.runner.RunWith;
1:266d23e: import org.junit.runners.Parameterized;
1:2030097: import org.slf4j.Logger;
1:2030097: import org.slf4j.LoggerFactory;
1:f4d51e0: 
1:266d23e: @RunWith(value = Parameterized.class)
1:266d23e: public class RedeliveryRestartTest extends TestSupport {
1:d8aca93: 
1:2030097:     private static final transient Logger LOG = LoggerFactory.getLogger(RedeliveryRestartTest.class);
1:266d23e:     ActiveMQConnection connection;
1:266d23e:     BrokerService broker = null;
1:266d23e:     String queueName = "redeliveryRestartQ";
1:d8aca93: 
1:266d23e:     @Parameterized.Parameter
1:266d23e:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice = PersistenceAdapterChoice.KahaDB;
1:d8aca93: 
1:266d23e:     @Parameterized.Parameters(name="Store={0}")
1:266d23e:     public static Iterable<Object[]> data() {
1:266d23e:         return Arrays.asList(new Object[][]{{TestSupport.PersistenceAdapterChoice.KahaDB},{TestSupport.PersistenceAdapterChoice.JDBC},{TestSupport.PersistenceAdapterChoice.LevelDB}});
1:d8aca93:     }
1:d8aca93: 
1:d8aca93:     @Override
1:266d23e:     @Before
1:266d23e:     public void setUp() throws Exception {
1:266d23e:         super.setUp();
1:266d23e:         broker = new BrokerService();
1:266d23e:         configureBroker(broker);
1:266d23e:         broker.setDeleteAllMessagesOnStartup(true);
1:266d23e:         broker.start();
1:266d23e:     }
1:266d23e: 
1:266d23e:     @Override
1:266d23e:     @After
1:266d23e:     public void tearDown() throws Exception {
1:266d23e:         if (connection != null) {
1:266d23e:             connection.close();
1:266d23e:         }
1:266d23e:         broker.stop();
1:266d23e:         super.tearDown();
1:266d23e:     }
1:266d23e: 
1:2030097:     protected void configureBroker(BrokerService broker) throws Exception {
1:266d23e:         PolicyMap policyMap = new PolicyMap();
1:266d23e:         PolicyEntry policy = new PolicyEntry();
1:266d23e:         policy.setPersistJMSRedelivered(true);
1:266d23e:         policyMap.setDefaultEntry(policy);
1:266d23e:         broker.setDestinationPolicy(policyMap);
1:266d23e:         setPersistenceAdapter(broker, persistenceAdapterChoice);
1:2030097:         broker.addConnector("tcp://0.0.0.0:0");
3:2030097:     }
1:f4d51e0: 
1:266d23e:     @org.junit.Test
1:266d23e:     public void testValidateRedeliveryFlagAfterRestartNoTx() throws Exception {
1:266d23e: 
1:266d23e:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString()
1:266d23e:             + ")?jms.prefetchPolicy.all=0");
1:266d23e:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:266d23e:         connection.start();
1:266d23e: 
1:266d23e:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:266d23e:         Destination destination = session.createQueue(queueName);
1:75eb814:         populateDestination(10, destination, connection);
1:266d23e: 
1:266d23e:         MessageConsumer consumer = session.createConsumer(destination);
1:266d23e:         TextMessage msg = null;
1:266d23e:         for (int i = 0; i < 5; i++) {
1:266d23e:             msg = (TextMessage) consumer.receive(20000);
1:266d23e:             LOG.info("not redelivered? got: " + msg);
1:266d23e:             assertNotNull("got the message", msg);
1:266d23e:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:266d23e:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:266d23e:         }
1:266d23e:         consumer.close();
1:266d23e: 
1:266d23e:         restartBroker();
1:266d23e: 
1:266d23e:         // make failover aware of the restarted auto assigned port
1:266d23e:         connection.getTransport().narrow(FailoverTransport.class).add(true, broker.getTransportConnectors().get(0)
1:266d23e:                 .getPublishableConnectString());
1:266d23e: 
1:266d23e:         consumer = session.createConsumer(destination);
1:266d23e:         for (int i = 0; i < 5; i++) {
1:266d23e:             msg = (TextMessage) consumer.receive(4000);
1:266d23e:             LOG.info("redelivered? got: " + msg);
1:266d23e:             assertNotNull("got the message again", msg);
1:266d23e:             assertEquals("re delivery flag", true, msg.getJMSRedelivered());
1:266d23e:             assertEquals("redelivery count survives restart", 2, msg.getLongProperty("JMSXDeliveryCount"));
1:266d23e:             msg.acknowledge();
1:266d23e:         }
1:266d23e: 
1:266d23e:         // consume the rest that were not redeliveries
1:266d23e:         for (int i = 0; i < 5; i++) {
1:266d23e:             msg = (TextMessage) consumer.receive(20000);
1:266d23e:             LOG.info("not redelivered? got: " + msg);
1:266d23e:             assertNotNull("got the message", msg);
1:266d23e:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:266d23e:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:266d23e:             msg.acknowledge();
1:266d23e:         }
1:266d23e:         connection.close();
1:266d23e:     }
1:266d23e: 
1:266d23e:     @org.junit.Test
1:75eb814:     public void testDurableSubRedeliveryFlagAfterRestartNotSupported() throws Exception {
1:75eb814: 
1:75eb814:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString()
1:75eb814:             + ")?jms.prefetchPolicy.all=0");
1:75eb814:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:75eb814:         connection.setClientID("id");
1:75eb814:         connection.start();
1:75eb814: 
1:75eb814:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:75eb814:         ActiveMQTopic destination = new ActiveMQTopic(queueName);
1:75eb814: 
1:75eb814:         TopicSubscriber durableSub = session.createDurableSubscriber(destination, "id");
1:75eb814: 
1:75eb814:         populateDestination(10, destination, connection);
1:75eb814: 
1:75eb814:         TextMessage msg = null;
1:75eb814:         for (int i = 0; i < 5; i++) {
1:75eb814:             msg = (TextMessage) durableSub.receive(20000);
1:75eb814:             LOG.info("not redelivered? got: " + msg);
1:75eb814:             assertNotNull("got the message", msg);
1:75eb814:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:75eb814:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:75eb814:         }
1:75eb814:         durableSub.close();
1:75eb814: 
1:75eb814:         restartBroker();
1:75eb814: 
1:75eb814:         // make failover aware of the restarted auto assigned port
1:75eb814:         connection.getTransport().narrow(FailoverTransport.class).add(true, broker.getTransportConnectors().get(0)
1:75eb814:                 .getPublishableConnectString());
1:75eb814: 
1:75eb814:         durableSub = session.createDurableSubscriber(destination, "id");
1:75eb814:         for (int i = 0; i < 10; i++) {
1:75eb814:             msg = (TextMessage) durableSub.receive(4000);
1:75eb814:             LOG.info("redelivered? got: " + msg);
1:75eb814:             assertNotNull("got the message again", msg);
1:75eb814:             assertEquals("no reDelivery flag", false, msg.getJMSRedelivered());
1:75eb814:             msg.acknowledge();
1:75eb814:         }
1:75eb814:         connection.close();
1:75eb814:     }
1:75eb814: 
1:75eb814:     @org.junit.Test
1:2030097:     public void testValidateRedeliveryFlagAfterRestart() throws Exception {
1:266d23e: 
1:d8aca93:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString()
1:266d23e:             + ")?jms.prefetchPolicy.all=0");
1:266d23e:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:2030097:         connection.start();
1:d8aca93: 
1:2030097:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:2030097:         Destination destination = session.createQueue(queueName);
1:75eb814:         populateDestination(10, destination, connection);
1:2030097: 
1:2030097:         MessageConsumer consumer = session.createConsumer(destination);
1:2030097:         TextMessage msg = null;
1:d8aca93:         for (int i = 0; i < 5; i++) {
1:2030097:             msg = (TextMessage) consumer.receive(20000);
1:2030097:             LOG.info("not redelivered? got: " + msg);
1:2030097:             assertNotNull("got the message", msg);
1:2030097:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:2030097:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:2030097:         }
1:2030097:         session.rollback();
1:2030097:         consumer.close();
1:2030097: 
1:2030097:         restartBroker();
1:2030097: 
1:2030097:         // make failover aware of the restarted auto assigned port
1:d8aca93:         connection.getTransport().narrow(FailoverTransport.class).add(true, broker.getTransportConnectors().get(0)
1:f4d51e0:                 .getPublishableConnectString());
1:2030097: 
1:2030097:         consumer = session.createConsumer(destination);
1:d8aca93:         for (int i = 0; i < 5; i++) {
1:2030097:             msg = (TextMessage) consumer.receive(4000);
1:2030097:             LOG.info("redelivered? got: " + msg);
1:2030097:             assertNotNull("got the message again", msg);
1:2030097:             assertEquals("redelivery count survives restart", 2, msg.getLongProperty("JMSXDeliveryCount"));
1:2030097:             assertEquals("re delivery flag", true, msg.getJMSRedelivered());
1:2030097:         }
1:2030097:         session.commit();
1:2030097: 
1:2030097:         // consume the rest that were not redeliveries
1:d8aca93:         for (int i = 0; i < 5; i++) {
1:2030097:             msg = (TextMessage) consumer.receive(20000);
1:2030097:             LOG.info("not redelivered? got: " + msg);
1:2030097:             assertNotNull("got the message", msg);
1:2030097:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:2030097:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:2030097:         }
1:2030097:         session.commit();
1:2030097: 
1:2030097:         connection.close();
1:2030097:     }
1:2030097: 
1:266d23e:     @org.junit.Test
1:2030097:     public void testValidateRedeliveryFlagAfterRecovery() throws Exception {
1:d8aca93:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()
1:266d23e:             + "?jms.prefetchPolicy.all=0");
1:266d23e:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:2030097:         connection.start();
1:2030097: 
1:2030097:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:2030097:         Destination destination = session.createQueue(queueName);
1:75eb814:         populateDestination(1, destination, connection);
1:2030097: 
1:2030097:         MessageConsumer consumer = session.createConsumer(destination);
1:266d23e:         TextMessage msg = (TextMessage) consumer.receive(5000);
1:2030097:         LOG.info("got: " + msg);
1:2030097:         assertNotNull("got the message", msg);
1:2030097:         assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:2030097:         assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:2030097: 
1:266d23e:         stopBrokerWithStoreFailure(broker, persistenceAdapterChoice);
1:2030097: 
1:2030097:         broker = createRestartedBroker();
1:2030097:         broker.start();
1:266d23e: 
1:266d23e:         connection.close();
1:2030097: 
1:266d23e:         connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:2030097:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:2030097:         connection.start();
1:2030097: 
1:2030097:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:2030097:         consumer = session.createConsumer(destination);
1:2030097:         msg = (TextMessage) consumer.receive(10000);
1:2030097:         assertNotNull("got the message again", msg);
1:2030097:         assertEquals("redelivery count survives restart", 2, msg.getLongProperty("JMSXDeliveryCount"));
1:2030097:         assertEquals("re delivery flag", true, msg.getJMSRedelivered());
1:2030097: 
1:2030097:         session.commit();
1:2030097:         connection.close();
1:2030097:     }
1:2030097: 
1:266d23e:     private void restartBroker() throws Exception {
1:266d23e:         broker.stop();
1:f4d51e0:         broker.waitUntilStopped();
1:266d23e:         broker = createRestartedBroker();
1:266d23e:         broker.start();
1:266d23e:     }
1:266d23e: 
1:266d23e:     private BrokerService createRestartedBroker() throws Exception {
1:266d23e:         broker = new BrokerService();
1:266d23e:         configureBroker(broker);
1:266d23e:         return broker;
1:f4d51e0:     }
1:f4d51e0: 
1:75eb814:     private void populateDestination(final int nbMessages, final Destination destination, javax.jms.Connection connection) throws JMSException {
1:2030097:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2030097:         MessageProducer producer = session.createProducer(destination);
1:2030097:         for (int i = 1; i <= nbMessages; i++) {
1:2030097:             producer.send(session.createTextMessage("<hello id='" + i + "'/>"));
1:2030097:         }
1:2030097:         producer.close();
1:2030097:         session.close();
1:2030097:     }
1:2030097: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:75eb814
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.TopicSubscriber;
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1:         populateDestination(10, destination, connection);
/////////////////////////////////////////////////////////////////////////
1:     public void testDurableSubRedeliveryFlagAfterRestartNotSupported() throws Exception {
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString()
1:             + ")?jms.prefetchPolicy.all=0");
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.setClientID("id");
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         ActiveMQTopic destination = new ActiveMQTopic(queueName);
1: 
1:         TopicSubscriber durableSub = session.createDurableSubscriber(destination, "id");
1: 
1:         populateDestination(10, destination, connection);
1: 
1:         TextMessage msg = null;
1:         for (int i = 0; i < 5; i++) {
1:             msg = (TextMessage) durableSub.receive(20000);
1:             LOG.info("not redelivered? got: " + msg);
1:             assertNotNull("got the message", msg);
1:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:         }
1:         durableSub.close();
1: 
1:         restartBroker();
1: 
1:         // make failover aware of the restarted auto assigned port
1:         connection.getTransport().narrow(FailoverTransport.class).add(true, broker.getTransportConnectors().get(0)
1:                 .getPublishableConnectString());
1: 
1:         durableSub = session.createDurableSubscriber(destination, "id");
1:         for (int i = 0; i < 10; i++) {
1:             msg = (TextMessage) durableSub.receive(4000);
1:             LOG.info("redelivered? got: " + msg);
1:             assertNotNull("got the message again", msg);
1:             assertEquals("no reDelivery flag", false, msg.getJMSRedelivered());
1:             msg.acknowledge();
1:         }
1:         connection.close();
1:     }
1: 
1:     @org.junit.Test
/////////////////////////////////////////////////////////////////////////
1:         populateDestination(10, destination, connection);
/////////////////////////////////////////////////////////////////////////
1:         populateDestination(1, destination, connection);
/////////////////////////////////////////////////////////////////////////
1:     private void populateDestination(final int nbMessages, final Destination destination, javax.jms.Connection connection) throws JMSException {
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: @RunWith(value = Parameterized.class)
1: public class RedeliveryRestartTest extends TestSupport {
1:     ActiveMQConnection connection;
1:     BrokerService broker = null;
1:     String queueName = "redeliveryRestartQ";
1:     @Parameterized.Parameter
1:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice = PersistenceAdapterChoice.KahaDB;
1:     @Parameterized.Parameters(name="Store={0}")
1:     public static Iterable<Object[]> data() {
1:         return Arrays.asList(new Object[][]{{TestSupport.PersistenceAdapterChoice.KahaDB},{TestSupport.PersistenceAdapterChoice.JDBC},{TestSupport.PersistenceAdapterChoice.LevelDB}});
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         broker = new BrokerService();
1:         configureBroker(broker);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.start();
1:     }
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         broker.stop();
1:         super.tearDown();
1:     }
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setPersistJMSRedelivered(true);
1:         policyMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(policyMap);
1:         setPersistenceAdapter(broker, persistenceAdapterChoice);
1:     @org.junit.Test
1:     public void testValidateRedeliveryFlagAfterRestartNoTx() throws Exception {
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString()
1:             + ")?jms.prefetchPolicy.all=0");
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
0:         populateDestination(10, queueName, connection);
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(queueName);
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         TextMessage msg = null;
1:         for (int i = 0; i < 5; i++) {
1:             msg = (TextMessage) consumer.receive(20000);
1:             LOG.info("not redelivered? got: " + msg);
1:             assertNotNull("got the message", msg);
1:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:         }
1:         consumer.close();
1: 
1:         restartBroker();
1: 
1:         // make failover aware of the restarted auto assigned port
1:         connection.getTransport().narrow(FailoverTransport.class).add(true, broker.getTransportConnectors().get(0)
1:                 .getPublishableConnectString());
1: 
1:         consumer = session.createConsumer(destination);
1:         for (int i = 0; i < 5; i++) {
1:             msg = (TextMessage) consumer.receive(4000);
1:             LOG.info("redelivered? got: " + msg);
1:             assertNotNull("got the message again", msg);
1:             assertEquals("re delivery flag", true, msg.getJMSRedelivered());
1:             assertEquals("redelivery count survives restart", 2, msg.getLongProperty("JMSXDeliveryCount"));
1:             msg.acknowledge();
1:         }
1: 
1:         // consume the rest that were not redeliveries
1:         for (int i = 0; i < 5; i++) {
1:             msg = (TextMessage) consumer.receive(20000);
1:             LOG.info("not redelivered? got: " + msg);
1:             assertNotNull("got the message", msg);
1:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:             msg.acknowledge();
1:         }
1:         connection.close();
1:     }
1: 
1:     @org.junit.Test
1:             + ")?jms.prefetchPolicy.all=0");
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
/////////////////////////////////////////////////////////////////////////
1:     @org.junit.Test
1:             + "?jms.prefetchPolicy.all=0");
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
/////////////////////////////////////////////////////////////////////////
1:         TextMessage msg = (TextMessage) consumer.receive(5000);
1:         stopBrokerWithStoreFailure(broker, persistenceAdapterChoice);
1:         connection.close();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
/////////////////////////////////////////////////////////////////////////
1:     private void restartBroker() throws Exception {
1:         broker.stop();
1:         broker = createRestartedBroker();
1:         broker.start();
1:     }
1: 
1:     private BrokerService createRestartedBroker() throws Exception {
1:         broker = new BrokerService();
1:         configureBroker(broker);
1:         return broker;
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:f4d51e0
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 .getPublishableConnectString());
/////////////////////////////////////////////////////////////////////////
0:         stopBrokerWithStoreFailure();
/////////////////////////////////////////////////////////////////////////
0:     protected void stopBrokerWithStoreFailure() throws Exception {
0:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1: 
0:         // have the broker stop with an IOException on next checkpoint so it has a pending local transaction to recover
0:         kahaDBPersistenceAdapter.getStore().getJournal().close();
1:         broker.waitUntilStopped();
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d8aca93
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected void setUp() throws Exception {
0:         setAutoFail(true);
0:         setMaxTestTime(2 * 60 * 1000);
0:         super.setUp();
1: 
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString()
0:             + ")?jms.transactedIndividualAck=true");
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 5; i++) {
/////////////////////////////////////////////////////////////////////////
1:         connection.getTransport().narrow(FailoverTransport.class).add(true, broker.getTransportConnectors().get(0)
0:             .getPublishableConnectString());
1:         for (int i = 0; i < 5; i++) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 5; i++) {
/////////////////////////////////////////////////////////////////////////
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()
0:             + "?jms.transactedIndividualAck=true");
/////////////////////////////////////////////////////////////////////////
0:         connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()
0:             + "?jms.transactedIndividualAck=true");
/////////////////////////////////////////////////////////////////////////
0:     private void populateDestination(final int nbMessages, final String destinationName, javax.jms.Connection connection) throws JMSException {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:9ee2967
/////////////////////////////////////////////////////////////////////////
0:         kahaDBPersistenceAdapter.setCleanupInterval(500);
commit:601f54f
/////////////////////////////////////////////////////////////////////////
0:                 new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString() + ")?jms.transactedIndividualAck=true");
/////////////////////////////////////////////////////////////////////////
0:                 new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString() + "?jms.transactedIndividualAck=true");
/////////////////////////////////////////////////////////////////////////
0:                 new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString() + "?jms.transactedIndividualAck=true");
commit:2030097
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.transport.failover.FailoverTransport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class RedeliveryRestartTest extends BrokerRestartTestSupport {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(RedeliveryRestartTest.class);
1: 
0:     @Override
1:     protected void configureBroker(BrokerService broker) throws Exception {
0:         super.configureBroker(broker);
0:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
0:         kahaDBPersistenceAdapter.setRewriteOnRedelivery(true);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:     }
1: 
1:     public void testValidateRedeliveryFlagAfterRestart() throws Exception {
1: 
0:         ConnectionFactory connectionFactory =
0:                 new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString() + ")?jms.immediateAck=true");
0:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
0:         populateDestination(10, queueName, connection);
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Destination destination = session.createQueue(queueName);
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         TextMessage msg = null;
0:         for (int i=0; i<5;i++) {
1:             msg = (TextMessage) consumer.receive(20000);
1:             LOG.info("not redelivered? got: " + msg);
1:             assertNotNull("got the message", msg);
1:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:         }
1:         session.rollback();
1:         consumer.close();
1: 
1:         restartBroker();
1: 
1:         // make failover aware of the restarted auto assigned port
0:         ((FailoverTransport) connection.getTransport().narrow(FailoverTransport.class)).add(true, broker.getTransportConnectors().get(0).getPublishableConnectString());
1: 
1:         consumer = session.createConsumer(destination);
0:         for (int i=0; i<5;i++) {
1:             msg = (TextMessage) consumer.receive(4000);
1:             LOG.info("redelivered? got: " + msg);
1:             assertNotNull("got the message again", msg);
1:             assertEquals("redelivery count survives restart", 2, msg.getLongProperty("JMSXDeliveryCount"));
1:             assertEquals("re delivery flag", true, msg.getJMSRedelivered());
1:         }
1:         session.commit();
1: 
1:         // consume the rest that were not redeliveries
0:         for (int i=0; i<5;i++) {
1:             msg = (TextMessage) consumer.receive(20000);
1:             LOG.info("not redelivered? got: " + msg);
1:             assertNotNull("got the message", msg);
1:             assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:             assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1:         }
1:         session.commit();
1: 
1:         connection.close();
1:     }
1: 
1:     public void testValidateRedeliveryFlagAfterRecovery() throws Exception {
0:         ConnectionFactory connectionFactory =
0:                 new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString() + "?jms.immediateAck=true");
0:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
0:         populateDestination(1, queueName, connection);
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Destination destination = session.createQueue(queueName);
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
0:         TextMessage msg = (TextMessage) consumer.receive(20000);
1:         LOG.info("got: " + msg);
1:         assertNotNull("got the message", msg);
1:         assertEquals("first delivery", 1, msg.getLongProperty("JMSXDeliveryCount"));
1:         assertEquals("not a redelivery", false, msg.getJMSRedelivered());
1: 
0:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1: 
0:         // have the broker stop with an IOException on next checkpoint so it has a pending local transaction to recover
0:         kahaDBPersistenceAdapter.getStore().getJournal().close();
0:         broker.waitUntilStopped();
1: 
1:         broker = createRestartedBroker();
1:         broker.start();
1: 
0:         connectionFactory =
0:                 new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString() + "?jms.immediateAck=true");
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
1: 
1:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         consumer = session.createConsumer(destination);
1:         msg = (TextMessage) consumer.receive(10000);
1:         assertNotNull("got the message again", msg);
1:         assertEquals("redelivery count survives restart", 2, msg.getLongProperty("JMSXDeliveryCount"));
1:         assertEquals("re delivery flag", true, msg.getJMSRedelivered());
1: 
1:         session.commit();
1:         connection.close();
1:     }
1: 
0:     private void populateDestination(final int nbMessages,
0:                                      final String destinationName, javax.jms.Connection connection)
0:             throws JMSException {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         Destination destination = session.createQueue(destinationName);
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 1; i <= nbMessages; i++) {
1:             producer.send(session.createTextMessage("<hello id='" + i + "'/>"));
1:         }
1:         producer.close();
1:         session.close();
1:     }
1: 
1: 
0:     public static Test suite() {
0:         return suite(RedeliveryRestartTest.class);
1:     }
1: 
0:     public static void main(String[] args) {
0:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
============================================================================