1:6892f8c: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:6892f8c:  */
1:6892f8c: package org.apache.activemq.perf;
3:6e7e3ab: 
1:6892f8c: import javax.jms.ConnectionFactory;
1:6e7e3ab: import javax.jms.DeliveryMode;
1:6892f8c: import javax.jms.Destination;
1:6892f8c: import javax.jms.JMSException;
1:6892f8c: import org.apache.activemq.ActiveMQConnectionFactory;
1:6e7e3ab: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:6892f8c: import org.apache.activemq.broker.BrokerService;
1:6892f8c: import org.apache.activemq.xbean.BrokerFactoryBean;
1:6892f8c: import org.springframework.core.io.ClassPathResource;
1:6892f8c: import org.springframework.core.io.Resource;
1:6e7e3ab: 
1:6892f8c: /**
1:b0c2a40:  * 
1:6892f8c:  */
1:230a86c: public class SlowConsumerTopicTest extends SimpleTopicTest {
1:6e7e3ab: 
1:6892f8c:     protected PerfConsumer[] slowConsumers;
1:7f0583d:     
1:230a86c:     protected void setUp() throws Exception {
1:7f0583d:         
1:230a86c:         playloadSize = 10 * 1024;
1:6892f8c:         super.setUp();
3:6892f8c:     }
1:7f0583d:    
1:6e7e3ab: 
1:7f0583d:     protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
1:63e3f41:         PerfConsumer result = new SlowConsumer(fac, dest);
1:63e3f41:         return result;
1:6892f8c:     }
1:6e7e3ab: 
1:230a86c:     protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException {
1:230a86c:         PerfProducer result = super.createProducer(fac, dest, number, payload);
1:6e7e3ab:         result.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:63e3f41:         result.setSleep(10);
1:6e7e3ab:         return result;
1:6e7e3ab:     }
1:6e7e3ab: 
1:63e3f41:     protected BrokerService createBroker(String url) throws Exception {
1:230a86c:         Resource resource = new ClassPathResource("org/apache/activemq/perf/slowConsumerBroker.xml");
1:63e3f41:         System.err.println("CREATE BROKER FROM " + resource);
1:230a86c:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:6892f8c:         factory.afterPropertiesSet();
1:230a86c:         BrokerService broker = factory.getBroker();
1:63e3f41:         
1:6892f8c:         broker.start();
1:6892f8c:         return broker;
1:86cbdfd:     }
1:230a86c: 
1:63e3f41:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:63e3f41:         ActiveMQConnectionFactory result = super.createConnectionFactory(uri);
1:6e7e3ab:         ActiveMQPrefetchPolicy policy = new ActiveMQPrefetchPolicy();
1:63e3f41:         policy.setTopicPrefetch(10);
1:6e7e3ab:         result.setPrefetchPolicy(policy);
1:6e7e3ab:         return result;
1:6e7e3ab:     }
1:6892f8c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
0:     protected int numberOfSlowConsumers = 1;
0:         slowConsumers = new SlowConsumer[numberOfSlowConsumers];
0:         for (int i = 0; i < numberOfSlowConsumers; i++) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: public class SlowConsumerTopicTest extends SimpleTopicTest {
0:     protected int NUMBER_OF_SLOW_CONSUMERS = 1;
1:     protected void setUp() throws Exception {
0:         numberOfConsumers = 0;
1:         playloadSize = 10 * 1024;
0:         slowConsumers = new SlowConsumer[NUMBER_OF_SLOW_CONSUMERS];
0:         for (int i = 0; i < NUMBER_OF_SLOW_CONSUMERS; i++) {
0:             slowConsumers[i] = createSlowConsumer(factory, destination, i);
0:     protected PerfConsumer createSlowConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
0:         return new SlowConsumer(fac, dest);
1:     protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException {
1:         PerfProducer result = super.createProducer(fac, dest, number, payload);
0:     protected BrokerService createBroker() throws Exception {
1:         Resource resource = new ClassPathResource("org/apache/activemq/perf/slowConsumerBroker.xml");
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         BrokerService broker = factory.getBroker();
1: 
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
author:Robert Davies
-------------------------------------------------------------------------------
commit:63e3f41
/////////////////////////////////////////////////////////////////////////
1:         PerfConsumer result = new SlowConsumer(fac, dest);
1:         return result;
1:         result.setSleep(10);
1:     protected BrokerService createBroker(String url) throws Exception {
1:         System.err.println("CREATE BROKER FROM " + resource);
1:         
1:     protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception {
1:         ActiveMQConnectionFactory result = super.createConnectionFactory(uri);
1:         policy.setTopicPrefetch(10);
commit:7f0583d
/////////////////////////////////////////////////////////////////////////
1:     
1:         
1:    
1:     protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
commit:5582cc1
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQConnectionFactory result = super.createConnectionFactory(bindAddress);
commit:6e7e3ab
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1: 
1: import javax.jms.DeliveryMode;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: 
1: 
1: 
0:         NUMBER_OF_CONSUMERS=0;
0:         PAYLOAD_SIZE=10 * 1024;
0:             slowConsumers[i]=createSlowConsumer(factory,destination,i);
0:             slowConsumers[i].start();
1: 
1: 
0:     protected PerfProducer createProducer(ConnectionFactory fac,Destination dest,int number,byte[] payload)
0:             throws JMSException{
0:         PerfProducer result=super.createProducer(fac,dest,number,payload);
1:         result.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         return result;
1:     }
1: 
0:         BrokerService broker=factory.getBroker();
1:     
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception{
0:         ActiveMQConnectionFactory result = super.createConnectionFactory();
1:         ActiveMQPrefetchPolicy policy = new ActiveMQPrefetchPolicy();
0:         policy.setTopicPrefetch(1000);
1:         result.setPrefetchPolicy(policy);
1:         return result;
1:     }
commit:6892f8c
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
0: 
0: import javax.jms.BytesMessage;
0: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
0: import javax.jms.Session;
0: import junit.framework.TestCase;
0: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.Resource;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class SlowConsumerTopicTest extends SimpleTopicTest{
1:     protected PerfConsumer[] slowConsumers;
0:     protected int NUMBER_OF_SLOW_CONSUMERS=1;
0:     
0:     
0:     protected void setUp() throws Exception{
1:         super.setUp();
0:         
0:         slowConsumers=new SlowConsumer[NUMBER_OF_SLOW_CONSUMERS];
0:         for(int i=0;i<NUMBER_OF_SLOW_CONSUMERS;i++){
0:             consumers[i]=createSlowConsumer(factory,destination,i);
0:             consumers[i].start();
1:         }
1:     }
0:     
0:     protected PerfConsumer createSlowConsumer(ConnectionFactory fac,Destination dest,int number) throws JMSException{
0:         return new SlowConsumer(fac,dest);
1:     }
0:     
0:     protected BrokerService createBroker() throws Exception{
0:         Resource resource=new ClassPathResource("org/apache/activemq/perf/slowConsumerBroker.xml");
0:         BrokerFactoryBean factory=new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
0:         BrokerService broker =factory.getBroker();
1:         broker.start();
1:         return broker;
1:     }
1: }
============================================================================