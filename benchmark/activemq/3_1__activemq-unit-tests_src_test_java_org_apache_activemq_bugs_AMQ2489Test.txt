1:83df5ce: /**
1:83df5ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:83df5ce:  * contributor license agreements.  See the NOTICE file distributed with
1:83df5ce:  * this work for additional information regarding copyright ownership.
1:83df5ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:83df5ce:  * (the "License"); you may not use this file except in compliance with
1:83df5ce:  * the License.  You may obtain a copy of the License at
1:83df5ce:  *
1:83df5ce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:83df5ce:  *
1:83df5ce:  * Unless required by applicable law or agreed to in writing, software
1:83df5ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:83df5ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:83df5ce:  * See the License for the specific language governing permissions and
1:83df5ce:  * limitations under the License.
1:83df5ce:  */
1:83df5ce: package org.apache.activemq.bugs;
1:83df5ce: 
1:83df5ce: import java.util.ArrayList;
1:83df5ce: import java.util.List;
1:83df5ce: import java.util.concurrent.ConcurrentLinkedQueue;
1:83df5ce: import java.util.concurrent.CountDownLatch;
1:83df5ce: import java.util.concurrent.TimeUnit;
1:83df5ce: 
1:83df5ce: import javax.jms.Connection;
1:83df5ce: import javax.jms.DeliveryMode;
1:83df5ce: import javax.jms.ExceptionListener;
1:83df5ce: import javax.jms.JMSException;
1:83df5ce: import javax.jms.Message;
1:83df5ce: import javax.jms.MessageConsumer;
1:83df5ce: import javax.jms.MessageListener;
1:83df5ce: import javax.jms.MessageProducer;
1:83df5ce: import javax.jms.Queue;
1:83df5ce: import javax.jms.Session;
1:83df5ce: 
1:83df5ce: import org.apache.activemq.ActiveMQSession;
1:83df5ce: import org.apache.activemq.TestSupport;
1:83df5ce: import org.apache.activemq.command.ActiveMQQueue;
1:83df5ce: 
1:83df5ce: /**
1:83df5ce:  * In CLIENT_ACKNOWLEDGE and INDIVIDUAL_ACKNOWLEDGE modes following exception
1:83df5ce:  * occurs when ASYNCH consumers acknowledges messages in not in order they
1:83df5ce:  * received the messages.
1:83df5ce:  * <p>
1:83df5ce:  * Exception thrown on broker side:
1:83df5ce:  * <p>
1:83df5ce:  * {@code javax.jms.JMSException: Could not correlate acknowledgment with
1:83df5ce:  * dispatched message: MessageAck}
1:83df5ce:  * 
1:83df5ce:  * @author daroo
1:83df5ce:  */
1:83df5ce: public class AMQ2489Test extends TestSupport {
1:83df5ce:     private final static String SEQ_NUM_PROPERTY = "seqNum";
1:83df5ce: 
1:83df5ce:     private final static int TOTAL_MESSAGES_CNT = 2;
1:83df5ce:     private final static int CONSUMERS_CNT = 2;
1:83df5ce: 
1:83df5ce:     private final CountDownLatch LATCH = new CountDownLatch(TOTAL_MESSAGES_CNT);
1:83df5ce: 
1:83df5ce:     private Connection connection;
1:83df5ce: 
1:83df5ce:     protected void setUp() throws Exception {
1:83df5ce:         super.setUp();
1:83df5ce:         connection = createConnection();
1:83df5ce:     }
1:83df5ce: 
1:83df5ce:     protected void tearDown() throws Exception {
1:83df5ce:         if (connection != null) {
1:83df5ce:             connection.close();
1:83df5ce:             connection = null;
1:83df5ce:         }
1:83df5ce:         super.tearDown();
1:83df5ce:     }
1:83df5ce: 
1:83df5ce:     public void testUnorderedClientAcknowledge() throws Exception {
1:83df5ce:         doUnorderedAck(Session.CLIENT_ACKNOWLEDGE);
1:83df5ce:     }
1:83df5ce: 
1:83df5ce:     public void testUnorderedIndividualAcknowledge() throws Exception {
1:83df5ce:         doUnorderedAck(ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:83df5ce:     }
1:83df5ce: 
1:83df5ce:     /**
1:83df5ce:      * Main test method
1:83df5ce:      * 
1:83df5ce:      * @param acknowledgmentMode
1:83df5ce:      *            - ACK mode to be used by consumers
1:83df5ce:      * @throws Exception
1:83df5ce:      */
1:83df5ce:     protected void doUnorderedAck(int acknowledgmentMode) throws Exception {
1:83df5ce:         List<Consumer> consumers = null;
1:83df5ce:         Session producerSession = null;
1:83df5ce: 
1:83df5ce:         connection.start();
1:83df5ce:         // Because exception is thrown on broker side only, let's set up
1:83df5ce:         // exception listener to get it
1:83df5ce:         final TestExceptionListener exceptionListener = new TestExceptionListener();
1:83df5ce:         connection.setExceptionListener(exceptionListener);
1:83df5ce:         try {
1:83df5ce:             consumers = new ArrayList<Consumer>();
1:83df5ce:             // start customers
1:83df5ce:             for (int i = 0; i < CONSUMERS_CNT; i++) {
1:83df5ce:                 consumers.add(new Consumer(acknowledgmentMode));
1:83df5ce:             }
1:83df5ce: 
1:83df5ce:             // produce few test messages
1:83df5ce:             producerSession = connection.createSession(false,
1:83df5ce:                     Session.AUTO_ACKNOWLEDGE);
1:83df5ce:             final MessageProducer producer = producerSession
1:83df5ce:                     .createProducer(new ActiveMQQueue(getQueueName()));
1:83df5ce:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:83df5ce:             for (int i = 0; i < TOTAL_MESSAGES_CNT; i++) {
1:83df5ce:                 final Message message = producerSession
1:83df5ce:                         .createTextMessage("test");
1:83df5ce:                 // assign each message sequence number
1:83df5ce:                 message.setIntProperty(SEQ_NUM_PROPERTY, i);
1:83df5ce:                 producer.send(message);
1:83df5ce:             }
1:83df5ce: 
1:83df5ce:             // during each onMessage() calls consumers decreases the LATCH
1:83df5ce:             // counter.
1:83df5ce:             // 
1:83df5ce:             // so, let's wait till all messages are consumed.
1:83df5ce:             //
1:83df5ce:             LATCH.await();
1:83df5ce: 
1:83df5ce:             // wait a bit more to give exception listener a chance be populated
1:83df5ce:             // with
1:83df5ce:             // broker's error
1:83df5ce:             TimeUnit.SECONDS.sleep(1);
1:83df5ce: 
1:83df5ce:             assertFalse(exceptionListener.getStatusText(), exceptionListener.hasExceptions());
1:83df5ce: 
1:83df5ce:         } finally {
1:83df5ce:             if (producerSession != null)
1:83df5ce:                 producerSession.close();
1:83df5ce: 
1:83df5ce:             if (consumers != null) {
1:83df5ce:                 for (Consumer c : consumers) {
1:83df5ce:                     c.close();
1:83df5ce:                 }
1:83df5ce:             }
1:83df5ce:         }
1:83df5ce:     }
1:83df5ce: 
1:83df5ce:     protected String getQueueName() {
1:83df5ce:         return getClass().getName() + "." + getName();
1:83df5ce:     }
1:83df5ce: 
1:83df5ce:     public final class Consumer implements MessageListener {
1:83df5ce:         final Session session;
1:83df5ce: 
1:83df5ce:         private Consumer(int acknowledgmentMode) {
1:83df5ce:             try {
1:83df5ce:                 session = connection.createSession(false, acknowledgmentMode);
1:83df5ce:                 final Queue queue = session.createQueue(getQueueName()
1:83df5ce:                         + "?consumer.prefetchSize=1");
1:83df5ce:                 final MessageConsumer consumer = session.createConsumer(queue);
1:83df5ce:                 consumer.setMessageListener(this);
1:83df5ce:             } catch (JMSException e) {
1:83df5ce:                 e.printStackTrace();
1:83df5ce:                 throw new RuntimeException(e);
1:83df5ce:             }
1:83df5ce:         }
1:83df5ce: 
1:83df5ce:         public void onMessage(Message message) {
1:83df5ce:             try {
1:83df5ce:                 // retrieve sequence number assigned by producer...
1:83df5ce:                 final int seqNum = message.getIntProperty(SEQ_NUM_PROPERTY);
1:83df5ce: 
1:83df5ce:                 // ...and let's delay every second message a little bit before
1:83df5ce:                 // acknowledgment
1:83df5ce:                 if ((seqNum % 2) == 0) {
1:83df5ce:                     System.out.println("Delayed message sequence numeber: "
1:83df5ce:                             + seqNum);
1:83df5ce:                     try {
1:83df5ce:                         TimeUnit.SECONDS.sleep(1);
1:83df5ce:                     } catch (InterruptedException e) {
1:83df5ce:                         Thread.currentThread().interrupt();
1:83df5ce:                     }
1:83df5ce:                 }
1:83df5ce: 
1:83df5ce:                 message.acknowledge();
1:83df5ce:             } catch (JMSException e) {
1:83df5ce:                 e.printStackTrace();
1:83df5ce:                 throw new RuntimeException(e);
1:83df5ce:             } finally {
1:83df5ce:                 // decrease LATCH counter in the main test method.
1:83df5ce:                 LATCH.countDown();
1:83df5ce:             }
1:83df5ce:         }
1:83df5ce: 
1:83df5ce:         private void close() {
1:83df5ce:             if (session != null) {
1:83df5ce:                 try {
1:83df5ce:                     session.close();
1:83df5ce:                 } catch (JMSException e) {
1:83df5ce:                     e.printStackTrace();
1:83df5ce:                     throw new RuntimeException(e);
1:83df5ce:                 }
1:83df5ce:             }
1:83df5ce:         }
1:83df5ce:     }
1:83df5ce: 
1:83df5ce:     public final class TestExceptionListener implements ExceptionListener {
1:83df5ce:         private final java.util.Queue<Exception> exceptions = new ConcurrentLinkedQueue<Exception>();
1:83df5ce: 
1:83df5ce:         public void onException(JMSException e) {
1:83df5ce:             exceptions.add(e);
1:83df5ce:         }
1:83df5ce: 
1:83df5ce:         public boolean hasExceptions() {
1:83df5ce:             return exceptions.isEmpty() == false;
1:83df5ce:         }
1:83df5ce: 
1:83df5ce:         public String getStatusText() {
1:83df5ce:             final StringBuilder str = new StringBuilder();
1:83df5ce:             str.append("Exceptions count on broker side: " + exceptions.size()
1:83df5ce:                     + ".\nMessages:\n");
1:83df5ce:             for (Exception e : exceptions) {
1:83df5ce:                 str.append(e.getMessage() + "\n\n");
1:83df5ce:             }
1:83df5ce:             return str.toString();
1:83df5ce:         }
1:83df5ce:     }
1:83df5ce: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:83df5ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: /**
1:  * In CLIENT_ACKNOWLEDGE and INDIVIDUAL_ACKNOWLEDGE modes following exception
1:  * occurs when ASYNCH consumers acknowledges messages in not in order they
1:  * received the messages.
1:  * <p>
1:  * Exception thrown on broker side:
1:  * <p>
1:  * {@code javax.jms.JMSException: Could not correlate acknowledgment with
1:  * dispatched message: MessageAck}
1:  * 
1:  * @author daroo
1:  */
1: public class AMQ2489Test extends TestSupport {
1:     private final static String SEQ_NUM_PROPERTY = "seqNum";
1: 
1:     private final static int TOTAL_MESSAGES_CNT = 2;
1:     private final static int CONSUMERS_CNT = 2;
1: 
1:     private final CountDownLatch LATCH = new CountDownLatch(TOTAL_MESSAGES_CNT);
1: 
1:     private Connection connection;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         connection = createConnection();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     public void testUnorderedClientAcknowledge() throws Exception {
1:         doUnorderedAck(Session.CLIENT_ACKNOWLEDGE);
1:     }
1: 
1:     public void testUnorderedIndividualAcknowledge() throws Exception {
1:         doUnorderedAck(ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:     }
1: 
1:     /**
1:      * Main test method
1:      * 
1:      * @param acknowledgmentMode
1:      *            - ACK mode to be used by consumers
1:      * @throws Exception
1:      */
1:     protected void doUnorderedAck(int acknowledgmentMode) throws Exception {
1:         List<Consumer> consumers = null;
1:         Session producerSession = null;
1: 
1:         connection.start();
1:         // Because exception is thrown on broker side only, let's set up
1:         // exception listener to get it
1:         final TestExceptionListener exceptionListener = new TestExceptionListener();
1:         connection.setExceptionListener(exceptionListener);
1:         try {
1:             consumers = new ArrayList<Consumer>();
1:             // start customers
1:             for (int i = 0; i < CONSUMERS_CNT; i++) {
1:                 consumers.add(new Consumer(acknowledgmentMode));
1:             }
1: 
1:             // produce few test messages
1:             producerSession = connection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE);
1:             final MessageProducer producer = producerSession
1:                     .createProducer(new ActiveMQQueue(getQueueName()));
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:             for (int i = 0; i < TOTAL_MESSAGES_CNT; i++) {
1:                 final Message message = producerSession
1:                         .createTextMessage("test");
1:                 // assign each message sequence number
1:                 message.setIntProperty(SEQ_NUM_PROPERTY, i);
1:                 producer.send(message);
1:             }
1: 
1:             // during each onMessage() calls consumers decreases the LATCH
1:             // counter.
1:             // 
1:             // so, let's wait till all messages are consumed.
1:             //
1:             LATCH.await();
1: 
1:             // wait a bit more to give exception listener a chance be populated
1:             // with
1:             // broker's error
1:             TimeUnit.SECONDS.sleep(1);
1: 
1:             assertFalse(exceptionListener.getStatusText(), exceptionListener.hasExceptions());
1: 
1:         } finally {
1:             if (producerSession != null)
1:                 producerSession.close();
1: 
1:             if (consumers != null) {
1:                 for (Consumer c : consumers) {
1:                     c.close();
1:                 }
1:             }
1:         }
1:     }
1: 
1:     protected String getQueueName() {
1:         return getClass().getName() + "." + getName();
1:     }
1: 
1:     public final class Consumer implements MessageListener {
1:         final Session session;
1: 
1:         private Consumer(int acknowledgmentMode) {
1:             try {
1:                 session = connection.createSession(false, acknowledgmentMode);
1:                 final Queue queue = session.createQueue(getQueueName()
1:                         + "?consumer.prefetchSize=1");
1:                 final MessageConsumer consumer = session.createConsumer(queue);
1:                 consumer.setMessageListener(this);
1:             } catch (JMSException e) {
1:                 e.printStackTrace();
1:                 throw new RuntimeException(e);
1:             }
1:         }
1: 
1:         public void onMessage(Message message) {
1:             try {
1:                 // retrieve sequence number assigned by producer...
1:                 final int seqNum = message.getIntProperty(SEQ_NUM_PROPERTY);
1: 
1:                 // ...and let's delay every second message a little bit before
1:                 // acknowledgment
1:                 if ((seqNum % 2) == 0) {
1:                     System.out.println("Delayed message sequence numeber: "
1:                             + seqNum);
1:                     try {
1:                         TimeUnit.SECONDS.sleep(1);
1:                     } catch (InterruptedException e) {
1:                         Thread.currentThread().interrupt();
1:                     }
1:                 }
1: 
1:                 message.acknowledge();
1:             } catch (JMSException e) {
1:                 e.printStackTrace();
1:                 throw new RuntimeException(e);
1:             } finally {
1:                 // decrease LATCH counter in the main test method.
1:                 LATCH.countDown();
1:             }
1:         }
1: 
1:         private void close() {
1:             if (session != null) {
1:                 try {
1:                     session.close();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                     throw new RuntimeException(e);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public final class TestExceptionListener implements ExceptionListener {
1:         private final java.util.Queue<Exception> exceptions = new ConcurrentLinkedQueue<Exception>();
1: 
1:         public void onException(JMSException e) {
1:             exceptions.add(e);
1:         }
1: 
1:         public boolean hasExceptions() {
1:             return exceptions.isEmpty() == false;
1:         }
1: 
1:         public String getStatusText() {
1:             final StringBuilder str = new StringBuilder();
1:             str.append("Exceptions count on broker side: " + exceptions.size()
1:                     + ".\nMessages:\n");
1:             for (Exception e : exceptions) {
1:                 str.append(e.getMessage() + "\n\n");
1:             }
1:             return str.toString();
1:         }
1:     }
1: }
============================================================================