1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
5:d29ca2a: 
1:86cbdfd: import java.util.Queue;
1:86cbdfd: import java.util.concurrent.ConcurrentLinkedQueue;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:0bbc0ac:  * 
1:d29ca2a:  */
1:fc00993: public class JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest extends JmsQueueSendReceiveTwoConnectionsTest {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest.class);
1:d29ca2a: 
1:933eb2f:     private Queue<Exception> errors = new ConcurrentLinkedQueue<Exception>();
1:d29ca2a:     private int delayBeforeStartingBroker = 1000;
1:d29ca2a:     private BrokerService broker;
1:d29ca2a: 
1:d29ca2a:     public void startBroker() {
1:d29ca2a:         // Initialize the broker
1:fc00993:         LOG.info("Lets wait: " + delayBeforeStartingBroker + " millis  before creating the broker");
1:d29ca2a:         try {
1:d29ca2a:             Thread.sleep(delayBeforeStartingBroker);
1:230a86c:         } catch (InterruptedException e) {
1:d29ca2a:             e.printStackTrace();
3:d29ca2a:         }
1:230a86c: 
1:fc00993:         LOG.info("Now starting the broker");
1:d29ca2a:         try {
1:d29ca2a:             broker = new BrokerService();
1:d29ca2a:             broker.setPersistent(false);
1:d29ca2a:             broker.addConnector("tcp://localhost:61616");
1:d29ca2a:             broker.start();
1:230a86c:         } catch (Exception e) {
1:fc00993:             LOG.info("Caught: " + e);
1:d29ca2a:             errors.add(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:fc00993:         return new ActiveMQConnectionFactory("failover:(tcp://localhost:61616)?maxReconnectAttempts=10&useExponentialBackOff=false&initialReconnectDelay=200");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:32c06a0:         setAutoFail(true);
1:d29ca2a:         // now lets asynchronously start a broker
1:d29ca2a:         Thread thread = new Thread() {
1:d29ca2a:             public void run() {
1:d29ca2a:                 startBroker();
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:         thread.start();
1:d29ca2a: 
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         super.tearDown();
1:d29ca2a: 
1:d29ca2a:         if (broker != null) {
1:d29ca2a:             broker.stop();
1:d29ca2a:         }
1:d29ca2a:         if (!errors.isEmpty()) {
1:933eb2f:             Exception e = errors.remove();
1:d29ca2a:             throw e;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:32c06a0
/////////////////////////////////////////////////////////////////////////
1:         setAutoFail(true);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private Queue<Exception> errors = new ConcurrentLinkedQueue<Exception>();
/////////////////////////////////////////////////////////////////////////
1:             Exception e = errors.remove();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: public class JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest extends JmsQueueSendReceiveTwoConnectionsTest {
0:     private static final Log LOG = LogFactory.getLog(JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Lets wait: " + delayBeforeStartingBroker + " millis  before creating the broker");
1:         LOG.info("Now starting the broker");
1:             LOG.info("Caught: " + e);
1:         return new ActiveMQConnectionFactory("failover:(tcp://localhost:61616)?maxReconnectAttempts=10&useExponentialBackOff=false&initialReconnectDelay=200");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: public class JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest extends
0:     JmsQueueSendReceiveTwoConnectionsTest {
/////////////////////////////////////////////////////////////////////////
1:         } catch (InterruptedException e) {
1: 
1:         } catch (Exception e) {
1: 
0:         return new ActiveMQConnectionFactory(
0:                                              "failover:(tcp://localhost:61616)?maxReconnectAttempts=10&useExponentialBackOff=false&initialReconnectDelay=200");
/////////////////////////////////////////////////////////////////////////
0:             Exception e = (Exception)errors.remove();
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.Queue;
1: import java.util.concurrent.ConcurrentLinkedQueue;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Lets wait: " + delayBeforeStartingBroker + " millis  before creating the broker");
/////////////////////////////////////////////////////////////////////////
0:         log.info("Now starting the broker");
/////////////////////////////////////////////////////////////////////////
0:             log.info("Caught: " + e);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import edu.emory.mathcs.backport.java.util.Queue;
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentLinkedQueue;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest extends JmsQueueSendReceiveTwoConnectionsTest {
1: 
0:     private Queue errors = new ConcurrentLinkedQueue();
1:     private int delayBeforeStartingBroker = 1000;
1:     private BrokerService broker;
1: 
1:     public void startBroker() {
1:         // Initialize the broker
0:         System.out.println("Lets wait: " + delayBeforeStartingBroker + " millis  before creating the broker");
1:         try {
1:             Thread.sleep(delayBeforeStartingBroker);
1:         }
0:         catch (InterruptedException e) {
1:             e.printStackTrace();
1:         }
1:         
0:         System.out.println("Now starting the broker");
1:         try {
1:             broker = new BrokerService();
1:             broker.setPersistent(false);
1:             broker.addConnector("tcp://localhost:61616");
1:             broker.start();
1:         }
0:         catch (Exception e) {
0:             System.out.println("Caught: " + e);
1:             errors.add(e);
1:         }
1:     }
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory("failover:(tcp://localhost:61616)?maxReconnectAttempts=10&useExponentialBackOff=false&initialReconnectDelay=200");
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         // now lets asynchronously start a broker
1:         Thread thread = new Thread() {
1:             public void run() {
1:                 startBroker();
1:             }
1:         };
1:         thread.start();
1: 
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1: 
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:         if (!errors.isEmpty()) {
0:             Exception e = (Exception) errors.remove();
1:             throw e;
1:         }
1:     }
1:     
1:     
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest.class);
============================================================================