1:0771df3: /**
1:0771df3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0771df3:  * contributor license agreements.  See the NOTICE file distributed with
1:0771df3:  * this work for additional information regarding copyright ownership.
1:0771df3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0771df3:  * (the "License"); you may not use this file except in compliance with
1:0771df3:  * the License.  You may obtain a copy of the License at
3:0771df3:  *
1:0771df3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0771df3:  *
1:0771df3:  * Unless required by applicable law or agreed to in writing, software
1:0771df3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0771df3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0771df3:  * See the License for the specific language governing permissions and
1:0771df3:  * limitations under the License.
1:0771df3:  */
7:0771df3: 
1:3f82625: package org.apache.activemq.transport.ws.jetty9;
1:3f82625: 
1:0771df3: import java.io.IOException;
1:31c55f7: import java.net.URI;
1:31c55f7: import java.util.ArrayList;
1:31c55f7: import java.util.Collections;
1:31c55f7: import java.util.Comparator;
1:31c55f7: import java.util.HashMap;
1:31c55f7: import java.util.List;
1:31c55f7: import java.util.Map;
1:913f644: import java.util.concurrent.ConcurrentHashMap;
1:3f82625: 
1:0771df3: import javax.servlet.ServletException;
1:0771df3: import javax.servlet.http.HttpServletRequest;
1:0771df3: import javax.servlet.http.HttpServletResponse;
1:0771df3: 
1:31c55f7: import org.apache.activemq.broker.BrokerService;
1:31c55f7: import org.apache.activemq.broker.BrokerServiceAware;
1:8ca6341: import org.apache.activemq.transport.Transport;
1:0771df3: import org.apache.activemq.transport.TransportAcceptListener;
1:31c55f7: import org.apache.activemq.transport.TransportFactory;
1:be10b86: import org.apache.activemq.transport.util.HttpTransportUtils;
1:31c55f7: import org.apache.activemq.transport.ws.WSTransportProxy;
1:3f82625: import org.eclipse.jetty.websocket.api.WebSocketListener;
1:3f82625: import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;
1:3f82625: import org.eclipse.jetty.websocket.servlet.ServletUpgradeResponse;
1:3f82625: import org.eclipse.jetty.websocket.servlet.WebSocketCreator;
1:8ca6341: import org.eclipse.jetty.websocket.servlet.WebSocketServlet;
1:3f82625: import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
1:0771df3: 
1:0771df3: /**
1:0771df3:  * Handle connection upgrade requests and creates web sockets
1:0771df3:  */
1:31c55f7: public class WSServlet extends WebSocketServlet implements BrokerServiceAware {
1:8ca6341: 
1:0771df3:     private static final long serialVersionUID = -4716657876092884139L;
1:0771df3: 
1:0771df3:     private TransportAcceptListener listener;
1:913f644: 
1:31c55f7:     private final static Map<String, Integer> stompProtocols = new ConcurrentHashMap<>();
1:31c55f7:     private final static Map<String, Integer> mqttProtocols = new ConcurrentHashMap<>();
1:0771df3: 
1:34eb1ee:     private Map<String, Object> transportOptions;
1:31c55f7:     private BrokerService brokerService;
1:31c55f7: 
1:31c55f7:     private enum Protocol {
1:31c55f7:         MQTT, STOMP, UNKNOWN
1:31c55f7:     }
1:34eb1ee: 
1:913f644:     static {
1:913f644:         stompProtocols.put("v12.stomp", 3);
1:913f644:         stompProtocols.put("v11.stomp", 2);
1:913f644:         stompProtocols.put("v10.stomp", 1);
1:913f644:         stompProtocols.put("stomp", 0);
1:913f644: 
1:913f644:         mqttProtocols.put("mqttv3.1", 1);
1:913f644:         mqttProtocols.put("mqtt", 0);
1:913f644:     }
1:913f644: 
1:8ca6341:     @Override
1:0771df3:     public void init() throws ServletException {
1:0771df3:         super.init();
1:8ca6341:         listener = (TransportAcceptListener) getServletContext().getAttribute("acceptListener");
1:0771df3:         if (listener == null) {
1:0771df3:             throw new ServletException("No such attribute 'acceptListener' available in the ServletContext");
1:33ec1cf:         }
3:0771df3:     }
1:3f82625: 
1:8ca6341:     @Override
1:8ca6341:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:f40532a:         //return empty response - AMQ-6491
1:0771df3:     }
1:3f82625: 
1:8ca6341:     @Override
1:3f82625:     public void configure(WebSocketServletFactory factory) {
1:3f82625:         factory.setCreator(new WebSocketCreator() {
1:3f82625:             @Override
1:3f82625:             public Object createWebSocket(ServletUpgradeRequest req, ServletUpgradeResponse resp) {
1:3f82625:                 WebSocketListener socket;
1:31c55f7:                 Protocol requestedProtocol = Protocol.UNKNOWN;
1:31c55f7: 
1:31c55f7:                 // When no sub-protocol is requested we default to STOMP for legacy reasons.
1:31c55f7:                 if (!req.getSubProtocols().isEmpty()) {
1:31c55f7:                     for (String subProtocol : req.getSubProtocols()) {
1:31c55f7:                         if (subProtocol.startsWith("mqtt")) {
1:31c55f7:                             requestedProtocol = Protocol.MQTT;
1:31c55f7:                         } else if (subProtocol.contains("stomp")) {
1:31c55f7:                             requestedProtocol = Protocol.STOMP;
1:31c55f7:                         }
1:f44c3d2:                     }
1:3f82625:                 } else {
1:31c55f7:                     requestedProtocol = Protocol.STOMP;
1:f8bfff0:                 }
1:31c55f7: 
1:31c55f7:                 switch (requestedProtocol) {
1:31c55f7:                     case MQTT:
1:31c55f7:                         socket = new MQTTSocket(HttpTransportUtils.generateWsRemoteAddress(req.getHttpServletRequest()));
1:2e2d5dd:                         ((MQTTSocket) socket).setTransportOptions(new HashMap<>(transportOptions));
1:31c55f7:                         ((MQTTSocket) socket).setPeerCertificates(req.getCertificates());
1:31c55f7:                         resp.setAcceptedSubProtocol(getAcceptedSubProtocol(mqttProtocols, req.getSubProtocols(), "mqtt"));
1:31c55f7:                         break;
1:31c55f7:                     case UNKNOWN:
1:31c55f7:                         socket = findWSTransport(req, resp);
1:31c55f7:                         if (socket != null) {
1:31c55f7:                             break;
1:31c55f7:                         }
1:31c55f7:                     case STOMP:
1:31c55f7:                         socket = new StompSocket(HttpTransportUtils.generateWsRemoteAddress(req.getHttpServletRequest()));
1:31c55f7:                         ((StompSocket) socket).setPeerCertificates(req.getCertificates());
1:31c55f7:                         resp.setAcceptedSubProtocol(getAcceptedSubProtocol(stompProtocols, req.getSubProtocols(), "stomp"));
1:31c55f7:                         break;
1:31c55f7:                     default:
1:31c55f7:                         socket = null;
1:31c55f7:                         listener.onAcceptError(new IOException("Unknown protocol requested"));
1:31c55f7:                         break;
1:31c55f7:                 }
1:31c55f7: 
1:31c55f7:                 if (socket != null) {
1:31c55f7:                     listener.onAccept((Transport) socket);
1:31c55f7:                 }
1:31c55f7: 
1:3f82625:                 return socket;
1:3f82625:             }
1:3f82625:         });
1:3f82625:     }
1:913f644: 
1:31c55f7:     private WebSocketListener findWSTransport(ServletUpgradeRequest request, ServletUpgradeResponse response) {
1:31c55f7:         WSTransportProxy proxy = null;
1:31c55f7: 
1:31c55f7:         for (String subProtocol : request.getSubProtocols()) {
1:31c55f7:             try {
1:31c55f7:                 String remoteAddress = HttpTransportUtils.generateWsRemoteAddress(request.getHttpServletRequest(), subProtocol);
1:31c55f7:                 URI remoteURI = new URI(remoteAddress);
1:31c55f7: 
1:31c55f7:                 TransportFactory factory = TransportFactory.findTransportFactory(remoteURI);
1:31c55f7: 
1:31c55f7:                 if (factory instanceof BrokerServiceAware) {
1:31c55f7:                     ((BrokerServiceAware) factory).setBrokerService(brokerService);
1:31c55f7:                 }
1:31c55f7: 
1:31c55f7:                 Transport transport = factory.doConnect(remoteURI);
1:31c55f7: 
1:31c55f7:                 proxy = new WSTransportProxy(remoteAddress, transport);
1:31c55f7:                 proxy.setPeerCertificates(request.getCertificates());
1:31c55f7:                 proxy.setTransportOptions(transportOptions);
1:31c55f7: 
1:31c55f7:                 response.setAcceptedSubProtocol(proxy.getSubProtocol());
1:31c55f7:             } catch (Exception e) {
1:31c55f7:                 proxy = null;
1:31c55f7: 
1:31c55f7:                 // Keep going and try any other sub-protocols present.
1:31c55f7:                 continue;
1:31c55f7:             }
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         return proxy;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     private String getAcceptedSubProtocol(final Map<String, Integer> protocols, List<String> subProtocols, String defaultProtocol) {
1:913f644:         List<SubProtocol> matchedProtocols = new ArrayList<>();
1:913f644:         if (subProtocols != null && subProtocols.size() > 0) {
1:31c55f7:             // detect which subprotocols match accepted protocols and add to the
1:31c55f7:             // list
1:913f644:             for (String subProtocol : subProtocols) {
1:913f644:                 Integer priority = protocols.get(subProtocol);
1:31c55f7:                 if (subProtocol != null && priority != null) {
1:31c55f7:                     // only insert if both subProtocol and priority are not null
1:913f644:                     matchedProtocols.add(new SubProtocol(subProtocol, priority));
1:913f644:                 }
1:913f644:             }
1:31c55f7:             // sort the list by priority
1:913f644:             if (matchedProtocols.size() > 0) {
1:913f644:                 Collections.sort(matchedProtocols, new Comparator<SubProtocol>() {
1:913f644:                     @Override
1:913f644:                     public int compare(SubProtocol s1, SubProtocol s2) {
1:913f644:                         return s2.priority.compareTo(s1.priority);
1:913f644:                     }
1:913f644:                 });
1:913f644:                 return matchedProtocols.get(0).protocol;
1:913f644:             }
1:913f644:         }
1:913f644:         return defaultProtocol;
1:913f644:     }
1:913f644: 
1:913f644:     private class SubProtocol {
1:913f644:         private String protocol;
1:913f644:         private Integer priority;
1:31c55f7: 
1:913f644:         public SubProtocol(String protocol, Integer priority) {
1:913f644:             this.protocol = protocol;
1:913f644:             this.priority = priority;
1:913f644:         }
1:913f644:     }
1:34eb1ee: 
1:34eb1ee:     public void setTransportOptions(Map<String, Object> transportOptions) {
1:34eb1ee:         this.transportOptions = transportOptions;
1:34eb1ee:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setBrokerService(BrokerService brokerService) {
1:31c55f7:         this.brokerService = brokerService;
1:31c55f7:     }
1:0771df3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1:                         ((MQTTSocket) socket).setTransportOptions(new HashMap<>(transportOptions));
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.ws.WSTransportProxy;
/////////////////////////////////////////////////////////////////////////
1: public class WSServlet extends WebSocketServlet implements BrokerServiceAware {
1:     private final static Map<String, Integer> stompProtocols = new ConcurrentHashMap<>();
1:     private final static Map<String, Integer> mqttProtocols = new ConcurrentHashMap<>();
1:     private BrokerService brokerService;
1: 
1:     private enum Protocol {
1:         MQTT, STOMP, UNKNOWN
1:     }
/////////////////////////////////////////////////////////////////////////
1:                 Protocol requestedProtocol = Protocol.UNKNOWN;
1: 
1:                 // When no sub-protocol is requested we default to STOMP for legacy reasons.
1:                 if (!req.getSubProtocols().isEmpty()) {
1:                     for (String subProtocol : req.getSubProtocols()) {
1:                         if (subProtocol.startsWith("mqtt")) {
1:                             requestedProtocol = Protocol.MQTT;
1:                         } else if (subProtocol.contains("stomp")) {
1:                             requestedProtocol = Protocol.STOMP;
1:                         }
1:                     requestedProtocol = Protocol.STOMP;
1: 
1:                 switch (requestedProtocol) {
1:                     case MQTT:
1:                         socket = new MQTTSocket(HttpTransportUtils.generateWsRemoteAddress(req.getHttpServletRequest()));
0:                         ((MQTTSocket) socket).setTransportOptions(new HashMap<String, Object>(transportOptions));
1:                         ((MQTTSocket) socket).setPeerCertificates(req.getCertificates());
1:                         resp.setAcceptedSubProtocol(getAcceptedSubProtocol(mqttProtocols, req.getSubProtocols(), "mqtt"));
1:                         break;
1:                     case UNKNOWN:
1:                         socket = findWSTransport(req, resp);
1:                         if (socket != null) {
1:                             break;
1:                         }
1:                     case STOMP:
1:                         socket = new StompSocket(HttpTransportUtils.generateWsRemoteAddress(req.getHttpServletRequest()));
1:                         ((StompSocket) socket).setPeerCertificates(req.getCertificates());
1:                         resp.setAcceptedSubProtocol(getAcceptedSubProtocol(stompProtocols, req.getSubProtocols(), "stomp"));
1:                         break;
1:                     default:
1:                         socket = null;
1:                         listener.onAcceptError(new IOException("Unknown protocol requested"));
1:                         break;
1:                 }
1: 
1:                 if (socket != null) {
1:                     listener.onAccept((Transport) socket);
1:                 }
1: 
1:     private WebSocketListener findWSTransport(ServletUpgradeRequest request, ServletUpgradeResponse response) {
1:         WSTransportProxy proxy = null;
1: 
1:         for (String subProtocol : request.getSubProtocols()) {
1:             try {
1:                 String remoteAddress = HttpTransportUtils.generateWsRemoteAddress(request.getHttpServletRequest(), subProtocol);
1:                 URI remoteURI = new URI(remoteAddress);
1: 
1:                 TransportFactory factory = TransportFactory.findTransportFactory(remoteURI);
1: 
1:                 if (factory instanceof BrokerServiceAware) {
1:                     ((BrokerServiceAware) factory).setBrokerService(brokerService);
1:                 }
1: 
1:                 Transport transport = factory.doConnect(remoteURI);
1: 
1:                 proxy = new WSTransportProxy(remoteAddress, transport);
1:                 proxy.setPeerCertificates(request.getCertificates());
1:                 proxy.setTransportOptions(transportOptions);
1: 
1:                 response.setAcceptedSubProtocol(proxy.getSubProtocol());
1:             } catch (Exception e) {
1:                 proxy = null;
1: 
1:                 // Keep going and try any other sub-protocols present.
1:                 continue;
1:             }
1:         }
1: 
1:         return proxy;
1:     }
1: 
1:     private String getAcceptedSubProtocol(final Map<String, Integer> protocols, List<String> subProtocols, String defaultProtocol) {
1:             // detect which subprotocols match accepted protocols and add to the
1:             // list
1:                 if (subProtocol != null && priority != null) {
1:                     // only insert if both subProtocol and priority are not null
1:             // sort the list by priority
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void setBrokerService(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
commit:8ca6341
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.Transport;
1: import org.eclipse.jetty.websocket.servlet.WebSocketServlet;
1: 
1:     @Override
1:         listener = (TransportAcceptListener) getServletContext().getAttribute("acceptListener");
1:     @Override
1:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
0:         getServletContext().getNamedDispatcher("default").forward(request, response);
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:                     resp.setAcceptedSubProtocol("mqtt");
0:                     resp.setAcceptedSubProtocol("stomp");
0:                 listener.onAccept((Transport) socket);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f40532a
/////////////////////////////////////////////////////////////////////////
1:         //return empty response - AMQ-6491
commit:913f644
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.Comparator;
0: import java.util.List;
0: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
0:     private final static Map<String, Integer> stompProtocols = new ConcurrentHashMap<> ();
0:     private final static Map<String, Integer> mqttProtocols = new ConcurrentHashMap<> ();
1: 
1:     static {
1:         stompProtocols.put("v12.stomp", 3);
1:         stompProtocols.put("v11.stomp", 2);
1:         stompProtocols.put("v10.stomp", 1);
1:         stompProtocols.put("stomp", 0);
1: 
1:         mqttProtocols.put("mqttv3.1", 1);
1:         mqttProtocols.put("mqtt", 0);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:                     resp.setAcceptedSubProtocol(getAcceptedSubProtocol(mqttProtocols,req.getSubProtocols(), "mqtt"));
0:                     resp.setAcceptedSubProtocol(getAcceptedSubProtocol(stompProtocols,req.getSubProtocols(), "stomp"));
1: 
0:     private String getAcceptedSubProtocol(final Map<String, Integer> protocols,
0:             List<String> subProtocols, String defaultProtocol) {
1:         List<SubProtocol> matchedProtocols = new ArrayList<>();
1:         if (subProtocols != null && subProtocols.size() > 0) {
0:             //detect which subprotocols match accepted protocols and add to the list
1:             for (String subProtocol : subProtocols) {
1:                 Integer priority = protocols.get(subProtocol);
0:                 if(subProtocol != null && priority != null) {
0:                     //only insert if both subProtocol and priority are not null
1:                     matchedProtocols.add(new SubProtocol(subProtocol, priority));
1:                 }
1:             }
0:             //sort the list by priority
1:             if (matchedProtocols.size() > 0) {
1:                 Collections.sort(matchedProtocols, new Comparator<SubProtocol>() {
1:                     @Override
1:                     public int compare(SubProtocol s1, SubProtocol s2) {
1:                         return s2.priority.compareTo(s1.priority);
1:                     }
1:                 });
1:                 return matchedProtocols.get(0).protocol;
1:             }
1:         }
1:         return defaultProtocol;
1:     }
1: 
1:     private class SubProtocol {
1:         private String protocol;
1:         private Integer priority;
1:         public SubProtocol(String protocol, Integer priority) {
1:             this.protocol = protocol;
1:             this.priority = priority;
1:         }
1:     }
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
0:                 boolean isMqtt = false;
0:                 for (String subProtocol : req.getSubProtocols()) {
0:                     subProtocol.startsWith("mqtt");
0:                     isMqtt = true;
1:                 }
0:                 if (isMqtt) {
commit:be10b86
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.util.HttpTransportUtils;
/////////////////////////////////////////////////////////////////////////
0:                     socket = new MQTTSocket(HttpTransportUtils.generateWsRemoteAddress(req.getHttpServletRequest()));
0:                     socket = new StompSocket(HttpTransportUtils.generateWsRemoteAddress(req.getHttpServletRequest()));
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:34eb1ee
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
0: import org.apache.activemq.jms.pool.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, Object> transportOptions;
1: 
/////////////////////////////////////////////////////////////////////////
0:                     ((MQTTSocket)socket).setTransportOptions(new HashMap(transportOptions));
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setTransportOptions(Map<String, Object> transportOptions) {
1:         this.transportOptions = transportOptions;
1:     }
commit:f8bfff0
/////////////////////////////////////////////////////////////////////////
0:                     if (subProtocol.startsWith("mqtt")) {
0:                         isMqtt = true;
1:                     }
0:                     ((MQTTSocket)socket).setPeerCertificates(req.getCertificates());
0:                     ((StompSocket)socket).setCertificates(req.getCertificates());
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3f82625
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.ws.jetty9;
1: 
1: import org.eclipse.jetty.websocket.api.WebSocketListener;
1: import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;
1: import org.eclipse.jetty.websocket.servlet.ServletUpgradeResponse;
0: import org.eclipse.jetty.websocket.servlet.WebSocketServlet;
1: import org.eclipse.jetty.websocket.servlet.WebSocketCreator;
1: import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void configure(WebSocketServletFactory factory) {
1:         factory.setCreator(new WebSocketCreator() {
1:             @Override
1:             public Object createWebSocket(ServletUpgradeRequest req, ServletUpgradeResponse resp) {
1:                 WebSocketListener socket;
0:                 if (req.getSubProtocols().contains("mqtt")) {
0:                     socket = new MQTTSocket();
1:                 } else {
0:                     socket = new StompSocket();
1:                 }
1:                 return socket;
1:             }
1:         });
1:         
1: 
author:Kevin Earls
-------------------------------------------------------------------------------
commit:692428e
/////////////////////////////////////////////////////////////////////////
0:         if (protocol != null && protocol.startsWith("mqtt")) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:33ec1cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.Transport;
/////////////////////////////////////////////////////////////////////////
0: public class WSServlet extends WebSocketServlet {
/////////////////////////////////////////////////////////////////////////
0:         WebSocket socket;
0:         if (protocol.startsWith("mqtt")) {
0:             socket = new MQTTSocket();
0:         } else {
0:             socket = new StompSocket();
1:         }
0:         listener.onAccept((Transport)socket);
commit:0771df3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.activemq.transport.ws;
1: 
1: import java.io.IOException;
1: 
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
1: import org.apache.activemq.transport.TransportAcceptListener;
0: import org.eclipse.jetty.websocket.WebSocket;
0: import org.eclipse.jetty.websocket.WebSocketServlet;
1: 
1: /**
1:  * 
1:  * Handle connection upgrade requests and creates web sockets
1:  *
1:  */
0: public class StompServlet extends WebSocketServlet {
1: 
1:     private static final long serialVersionUID = -4716657876092884139L;
1:     
1:     private TransportAcceptListener listener;
1:     
1:     public void init() throws ServletException {
1:         super.init();
0:         listener = (TransportAcceptListener)getServletContext().getAttribute("acceptListener");
1:         if (listener == null) {
1:             throw new ServletException("No such attribute 'acceptListener' available in the ServletContext");
1:         }
1:     }
1: 
0:     protected void doGet(HttpServletRequest request, HttpServletResponse response) 
0:         throws ServletException ,IOException  {
0:         getServletContext().getNamedDispatcher("default").forward(request,response);
1:     }
1:     
0:     protected WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
0:         StompSocket socket = new StompSocket();
0:         listener.onAccept(socket);
0:         return socket;
1:     }
1:     
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:e778467
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:     protected void doGet(HttpServletRequest request, HttpServletResponse response)
0: 
0:     @Override
0:     public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
============================================================================