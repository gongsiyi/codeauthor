1:190a44b: /**
1:190a44b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:190a44b:  * contributor license agreements.  See the NOTICE file distributed with
1:190a44b:  * this work for additional information regarding copyright ownership.
1:190a44b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:190a44b:  * (the "License"); you may not use this file except in compliance with
1:190a44b:  * the License.  You may obtain a copy of the License at
1:190a44b:  *
1:190a44b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:190a44b:  *
1:190a44b:  * Unless required by applicable law or agreed to in writing, software
1:190a44b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:190a44b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:190a44b:  * See the License for the specific language governing permissions and
1:190a44b:  * limitations under the License.
1:190a44b:  */
1:190a44b: package org.apache.activemq.broker;
1:190a44b: 
1:190a44b: import org.apache.activemq.ActiveMQConnectionFactory;
1:190a44b: import org.junit.After;
1:190a44b: import org.junit.Before;
1:190a44b: import org.junit.Test;
1:190a44b: 
1:190a44b: import javax.jms.Connection;
1:190a44b: import java.net.URI;
1:190a44b: import java.util.concurrent.CopyOnWriteArrayList;
1:190a44b: 
1:190a44b: import static org.junit.Assert.assertEquals;
1:190a44b: import static org.junit.Assert.assertNotNull;
1:190a44b: 
1:190a44b: /**
1:190a44b:  */
1:190a44b: public class OpenwireConnectionTest {
1:190a44b:     BrokerService broker;
1:190a44b:     URI brokerConnectURI;
1:190a44b: 
1:190a44b:     @Before
1:190a44b:     public void startBroker() throws Exception {
1:190a44b:         broker = new BrokerService();
1:190a44b:         broker.setPersistent(false);
1:190a44b: 
1:190a44b:         TransportConnector connector = broker.addConnector(new TransportConnector());
1:190a44b:         connector.setUri(new URI("tcp://0.0.0.0:0"));
1:190a44b:         connector.setName("tcp");
1:190a44b: 
1:190a44b:         broker.start();
1:190a44b:         broker.waitUntilStarted();
1:190a44b: 
1:190a44b:         brokerConnectURI = broker.getConnectorByName("tcp").getConnectUri();
1:190a44b:     }
1:190a44b: 
1:190a44b:     @After
1:190a44b:     public void stopBroker() throws Exception {
1:190a44b:         broker.stop();
1:190a44b:         broker.waitUntilStopped();
1:190a44b:     }
1:190a44b: 
1:190a44b:     @Test
1:190a44b:     public void testAMQ5050DefaultHost() throws Exception {
1:190a44b:         // Let verify a host header is added to the connection.
1:190a44b:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:190a44b:         connection.start();
1:190a44b: 
1:190a44b:         CopyOnWriteArrayList<TransportConnection> connections = broker.getConnectorByName("tcp").getConnections();
1:190a44b:         assertEquals(1, connections.size());
1:190a44b:         assertNotNull(connections.get(0).getRemoteWireFormatInfo().getHost());
1:190a44b:         connection.stop();
1:190a44b:     }
1:190a44b: 
1:190a44b:     @Test
1:190a44b:     public void testAMQ5050WithManualSpecifiedHost() throws Exception {
1:190a44b:         // Let verify a host header is added to the connection.
1:190a44b:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI+"?wireFormat.host=foo").createConnection();
1:190a44b:         connection.start();
1:190a44b: 
1:190a44b:         CopyOnWriteArrayList<TransportConnection> connections = broker.getConnectorByName("tcp").getConnections();
1:190a44b:         assertEquals(1, connections.size());
1:190a44b:         assertEquals("foo", connections.get(0).getRemoteWireFormatInfo().getHost());
1:190a44b:         connection.stop();
1:190a44b:     }
1:190a44b: 
1:190a44b: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:190a44b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import javax.jms.Connection;
1: import java.net.URI;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: /**
1:  */
1: public class OpenwireConnectionTest {
1:     BrokerService broker;
1:     URI brokerConnectURI;
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1: 
1:         TransportConnector connector = broker.addConnector(new TransportConnector());
1:         connector.setUri(new URI("tcp://0.0.0.0:0"));
1:         connector.setName("tcp");
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         brokerConnectURI = broker.getConnectorByName("tcp").getConnectUri();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testAMQ5050DefaultHost() throws Exception {
1:         // Let verify a host header is added to the connection.
1:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI).createConnection();
1:         connection.start();
1: 
1:         CopyOnWriteArrayList<TransportConnection> connections = broker.getConnectorByName("tcp").getConnections();
1:         assertEquals(1, connections.size());
1:         assertNotNull(connections.get(0).getRemoteWireFormatInfo().getHost());
1:         connection.stop();
1:     }
1: 
1:     @Test
1:     public void testAMQ5050WithManualSpecifiedHost() throws Exception {
1:         // Let verify a host header is added to the connection.
1:         Connection connection = new ActiveMQConnectionFactory(brokerConnectURI+"?wireFormat.host=foo").createConnection();
1:         connection.start();
1: 
1:         CopyOnWriteArrayList<TransportConnection> connections = broker.getConnectorByName("tcp").getConnections();
1:         assertEquals(1, connections.size());
1:         assertEquals("foo", connections.get(0).getRemoteWireFormatInfo().getHost());
1:         connection.stop();
1:     }
1: 
1: }
============================================================================