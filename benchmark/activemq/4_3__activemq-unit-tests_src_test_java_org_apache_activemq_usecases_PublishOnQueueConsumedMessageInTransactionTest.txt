1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
12:a677c21: 
1:74a7a8b: import java.io.File;
1:74a7a8b: import java.util.ArrayList;
1:74a7a8b: import java.util.Collections;
1:74a7a8b: import java.util.List;
1:74a7a8b: 
1:74a7a8b: import javax.jms.Connection;
1:74a7a8b: import javax.jms.Destination;
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.Message;
1:74a7a8b: import javax.jms.MessageConsumer;
1:74a7a8b: import javax.jms.MessageListener;
1:74a7a8b: import javax.jms.MessageProducer;
1:74a7a8b: import javax.jms.ObjectMessage;
1:74a7a8b: import javax.jms.Session;
1:74a7a8b: 
1:a677c21: import junit.framework.TestCase;
1:a677c21: import org.apache.activemq.ActiveMQConnectionFactory;
1:a677c21: import org.apache.activemq.command.ActiveMQQueue;
1:74a7a8b: import org.apache.activemq.util.IOHelper;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a677c21: 
1:a677c21: public final class PublishOnQueueConsumedMessageInTransactionTest extends TestCase implements MessageListener {
1:230a86c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(PublishOnQueueConsumedMessageInTransactionTest.class);
1:a677c21: 
1:a677c21:     private Session producerSession;
1:a677c21:     private Session consumerSession;
1:a677c21:     private Destination queue;
1:a677c21:     private ActiveMQConnectionFactory factory;
1:a677c21:     private MessageProducer producer;
1:a677c21:     private MessageConsumer consumer;
1:a677c21:     private Connection connection;
1:230a86c:     private ObjectMessage objectMessage;
1:933eb2f:     private List<Message> messages = createConcurrentList();
1:a677c21:     private final Object lock = new Object();
1:a677c21:     private String[] data;
1:fc00993:     private String dataFileRoot = IOHelper.getDefaultDataDirectory();
1:a677c21:     private int messageCount = 3;
1:a677c21:     private String url = "vm://localhost";
1:a677c21: 
1:230a86c:     // Invalid acknowledgment warning can be viewed on the console of a remote
1:230a86c:     // broker
1:a677c21:     // The warning message is not thrown back to the client
1:230a86c:     // private String url = "tcp://localhost:61616";
1:a677c21: 
1:a677c21:     protected void setUp() throws Exception {
1:fc00993:         File dataFile = new File(dataFileRoot);
1:a677c21:         recursiveDelete(dataFile);
1:a677c21:         try {
1:a677c21:             factory = new ActiveMQConnectionFactory(url);
1:a677c21:             connection = factory.createConnection();
1:a677c21:             producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:a677c21:             consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:a677c21:             queue = new ActiveMQQueue("FOO.BAR");
1:a677c21:             data = new String[messageCount];
1:a677c21: 
1:a677c21:             for (int i = 0; i < messageCount; i++) {
1:a677c21:                 data[i] = "Message : " + i;
2:a677c21:             }
1:a677c21:         } catch (JMSException je) {
1:a677c21:             fail("Error setting up connection : " + je.toString());
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testSendReceive() throws Exception {
1:a677c21:         sendMessage();
1:a677c21: 
1:a677c21:         connection.start();
1:a677c21:         consumer = consumerSession.createConsumer(queue);
1:a677c21:         consumer.setMessageListener(this);
1:a677c21:         waitForMessagesToBeDelivered();
1:230a86c:         assertEquals("Messages received doesn't equal messages sent", messages.size(), data.length);
1:a677c21: 
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void sendMessage() throws JMSException {
1:a677c21:         messages.clear();
1:a677c21:         try {
1:a677c21:             for (int i = 0; i < data.length; ++i) {
1:a677c21:                 producer = producerSession.createProducer(queue);
1:a677c21:                 objectMessage = producerSession.createObjectMessage(data[i]);
1:a677c21:                 producer.send(objectMessage);
1:a677c21:                 producerSession.commit();
1:230a86c:                 LOG.info("sending message :" + objectMessage);
1:a677c21:             }
1:a677c21:         } catch (Exception e) {
1:a677c21:             if (producerSession != null) {
1:a677c21:                 producerSession.rollback();
1:230a86c:                 LOG.info("rollback");
1:a677c21:                 producerSession.close();
1:a677c21:             }
1:a677c21: 
1:a677c21:             e.printStackTrace();
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     public synchronized void onMessage(Message m) {
1:a677c21:         try {
1:230a86c:             objectMessage = (ObjectMessage)m;
1:230a86c:             consumeMessage(objectMessage, messages);
1:a677c21: 
1:230a86c:             LOG.info("consumer received message :" + objectMessage);
1:a677c21:             consumerSession.commit();
1:a677c21: 
1:a677c21:         } catch (Exception e) {
1:a677c21:             try {
1:a677c21:                 consumerSession.rollback();
1:230a86c:                 LOG.info("rolled back transaction");
1:a677c21:             } catch (JMSException e1) {
1:8bf987b:                 LOG.info(e1.toString());
1:a677c21:                 e1.printStackTrace();
1:a677c21:             }
1:8bf987b:             LOG.info(e.toString());
1:a677c21:             e.printStackTrace();
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:933eb2f:     protected void consumeMessage(Message message, List<Message> messageList) {
1:a677c21:         messageList.add(message);
1:a677c21:         if (messageList.size() >= data.length) {
1:a677c21:             synchronized (lock) {
1:a677c21:                 lock.notifyAll();
1:a677c21:             }
1:a677c21:         }
1:a677c21: 
1:a677c21:     }
1:a677c21: 
1:933eb2f:     protected List<Message> createConcurrentList() {
1:933eb2f:         return Collections.synchronizedList(new ArrayList<Message>());
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void waitForMessagesToBeDelivered() {
1:a677c21:         long maxWaitTime = 5000;
1:a677c21:         long waitTime = maxWaitTime;
1:a677c21:         long start = (maxWaitTime <= 0) ? 0 : System.currentTimeMillis();
1:a677c21: 
1:a677c21:         synchronized (lock) {
1:a677c21:             while (messages.size() <= data.length && waitTime >= 0) {
1:a677c21:                 try {
1:a677c21:                     lock.wait(200);
1:a677c21:                 } catch (InterruptedException e) {
1:a677c21:                     e.printStackTrace();
1:a677c21:                 }
1:a677c21: 
1:a677c21:                 waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:a677c21:             }
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected static void recursiveDelete(File file) {
1:230a86c:         if (file.isDirectory()) {
1:a677c21:             File[] files = file.listFiles();
1:a677c21:             for (int i = 0; i < files.length; i++) {
1:a677c21:                 recursiveDelete(files[i]);
1:a677c21:             }
1:a677c21:         }
1:a677c21:         file.delete();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void tearDown() throws Exception {
1:a677c21:         if (connection != null) {
1:a677c21:             connection.close();
1:a677c21:         }
1:a677c21: 
1:a677c21:         super.tearDown();
1:86cbdfd:     }
1:a677c21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(PublishOnQueueConsumedMessageInTransactionTest.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info(e1.toString());
1:             LOG.info(e.toString());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private List<Message> messages = createConcurrentList();
/////////////////////////////////////////////////////////////////////////
1:     protected void consumeMessage(Message message, List<Message> messageList) {
/////////////////////////////////////////////////////////////////////////
1:     protected List<Message> createConcurrentList() {
1:         return Collections.synchronizedList(new ArrayList<Message>());
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private String dataFileRoot = IOHelper.getDefaultDataDirectory();
/////////////////////////////////////////////////////////////////////////
1:         File dataFile = new File(dataFileRoot);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.util.IOHelper;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(PublishOnQueueConsumedMessageInTransactionTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     private ObjectMessage objectMessage;
/////////////////////////////////////////////////////////////////////////
1:     // Invalid acknowledgment warning can be viewed on the console of a remote
1:     // broker
1:     // private String url = "tcp://localhost:61616";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Messages received doesn't equal messages sent", messages.size(), data.length);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("sending message :" + objectMessage);
1:                 LOG.info("rollback");
/////////////////////////////////////////////////////////////////////////
1:             objectMessage = (ObjectMessage)m;
1:             consumeMessage(objectMessage, messages);
1:             LOG.info("consumer received message :" + objectMessage);
1:                 LOG.info("rolled back transaction");
0:                 LOG.info(e1);
0:             LOG.info(e);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (file.isDirectory()) {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:9583b5f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.IOHelper;
/////////////////////////////////////////////////////////////////////////
0:     private String DATAFILE_ROOT = IOHelper.getDefaultDataDirectory();
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.jms.*;
0: import java.util.List;
0: import java.util.Collections;
0: import java.util.ArrayList;
0: import java.io.File;
1: 
1: 
1: public final class PublishOnQueueConsumedMessageInTransactionTest extends TestCase implements MessageListener {
1: 
0:     private static final Log log = LogFactory.getLog(PublishOnQueueConsumedMessageInTransactionTest.class);
1:     
1:     private Session producerSession;
1:     private Session consumerSession;
1:     private Destination queue;
1:     private ActiveMQConnectionFactory factory;
1:     private MessageProducer producer;
1:     private MessageConsumer consumer;
1:     private Connection connection;
0:     private ObjectMessage objectMessage = null;
0:     private List messages = createConcurrentList();
1:     private final Object lock = new Object();
1:     private String[] data;
0:     private String DATAFILE_ROOT =  "activemq-data";
1:     private int messageCount = 3;
1:     private String url = "vm://localhost";
1: 
0:     // Invalid acknowledgment warning can be viewed on the console of  a remote broker
1:     // The warning message is not thrown back to the client
0:     //private String url = "tcp://localhost:61616";
1: 
1: 
1:     protected void setUp() throws Exception {
0:         File dataFile = new File(DATAFILE_ROOT);
1:         recursiveDelete(dataFile);
1:         try {
1:             factory = new ActiveMQConnectionFactory(url);
1:             connection = factory.createConnection();
1:             producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             queue = new ActiveMQQueue("FOO.BAR");
1:             data = new String[messageCount];
1: 
1:             for (int i = 0; i < messageCount; i++) {
1:                 data[i] = "Message : " + i;
1:             }
1:         } catch (JMSException je) {
1:             fail("Error setting up connection : " + je.toString());
1:         }
1:     }
1: 
1: 
1:     public void testSendReceive() throws Exception {
1:         sendMessage();
1: 
1:         connection.start();
1:         consumer = consumerSession.createConsumer(queue);
1:         consumer.setMessageListener(this);
1:         waitForMessagesToBeDelivered();
0:         assertEquals("Messages received doesn't equal messages sent", messages.size(),data.length);
1: 
1:     }
1: 
1: 
1:     protected void sendMessage() throws JMSException {
1:         messages.clear();
1:         try {
1:             for (int i = 0; i < data.length; ++i) {
1:                 producer = producerSession.createProducer(queue);
1:                 objectMessage = producerSession.createObjectMessage(data[i]);
1:                 producer.send(objectMessage);
1:                 producerSession.commit();
0:                 log.info("sending message :" + objectMessage);
1:             }
1:         } catch (Exception e) {
1:             if (producerSession != null) {
1:                 producerSession.rollback();
0:                 log.info("rollback");
1:                 producerSession.close();
1:             }
1: 
1:             e.printStackTrace();
1:         }
1:     }
1: 
1: 
1:     public synchronized void onMessage(Message m) {
1:         try {
0:             objectMessage = (ObjectMessage) m;
0:             consumeMessage(objectMessage,messages);
1: 
0:             log.info("consumer received message :" + objectMessage);
1:             consumerSession.commit();
1: 
1:         } catch (Exception e) {
1:             try {
1:                 consumerSession.rollback();
0:                 log.info("rolled back transaction");
1:             } catch (JMSException e1) {
0:                 log.info(e1);
1:                 e1.printStackTrace();
1:             }
0:             log.info(e);
1:             e.printStackTrace();
1:         }
1:     }
1: 
1: 
0:     protected void consumeMessage(Message message, List messageList) {
1:         messageList.add(message);
1:         if (messageList.size() >= data.length) {
1:             synchronized (lock) {
1:                 lock.notifyAll();
1:             }
1:         }
1: 
1:     }
1: 
1: 
0:     protected List createConcurrentList() {
0:         return Collections.synchronizedList(new ArrayList());
1:     }
1: 
1: 
1:     protected void waitForMessagesToBeDelivered() {
1:         long maxWaitTime = 5000;
1:         long waitTime = maxWaitTime;
1:         long start = (maxWaitTime <= 0) ? 0 : System.currentTimeMillis();
1: 
1:         synchronized (lock) {
1:             while (messages.size() <= data.length && waitTime >= 0) {
1:                 try {
1:                     lock.wait(200);
1:                 } catch (InterruptedException e) {
1:                     e.printStackTrace();
1:                 }
1: 
1:                 waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:             }
1:         }
1:     }
1: 
1: 
1:     protected static void recursiveDelete(File file) {
0:         if( file.isDirectory() ) {
1:             File[] files = file.listFiles();
1:             for (int i = 0; i < files.length; i++) {
1:                 recursiveDelete(files[i]);
1:             }
1:         }
1:         file.delete();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1: 
1:         super.tearDown();
1:     }
1: }
============================================================================