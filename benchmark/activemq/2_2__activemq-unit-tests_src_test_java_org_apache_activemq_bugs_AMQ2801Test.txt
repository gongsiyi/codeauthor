1:3a18150: /**
1:3a18150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3a18150:  * contributor license agreements.  See the NOTICE file distributed with
1:3a18150:  * this work for additional information regarding copyright ownership.
1:3a18150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3a18150:  * (the "License"); you may not use this file except in compliance with
1:3a18150:  * the License.  You may obtain a copy of the License at
1:3a18150:  *
1:3a18150:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3a18150:  *
1:3a18150:  * Unless required by applicable law or agreed to in writing, software
1:3a18150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3a18150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a18150:  * See the License for the specific language governing permissions and
1:3a18150:  * limitations under the License.
1:3a18150:  */
2:3a18150: 
1:3a18150: package org.apache.activemq.bugs;
1:3a18150: 
1:3a18150: import static org.junit.Assert.*;
1:3a18150: 
1:3a18150: import java.io.File;
1:3a18150: import java.util.ArrayList;
1:3a18150: import java.util.List;
1:3a18150: 
1:3a18150: import javax.jms.BytesMessage;
1:3a18150: import javax.jms.Connection;
1:3a18150: import javax.jms.DeliveryMode;
1:3a18150: import javax.jms.MessageConsumer;
1:3a18150: import javax.jms.Session;
1:3a18150: import javax.jms.Topic;
1:3a18150: import javax.jms.TopicConnection;
1:3a18150: import javax.jms.TopicPublisher;
1:3a18150: import javax.jms.TopicSession;
1:3a18150: import javax.management.ObjectName;
1:3a18150: 
1:3a18150: import org.apache.activemq.ActiveMQConnectionFactory;
1:3a18150: import org.apache.activemq.broker.BrokerService;
1:3a18150: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:3a18150: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1:3a18150: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:3a18150: import org.apache.activemq.broker.region.policy.PolicyMap;
1:3a18150: import org.apache.activemq.usage.SystemUsage;
1:3a18150: import org.junit.After;
1:3a18150: import org.junit.Before;
1:3a18150: import org.junit.Test;
1:3a18150: import org.slf4j.Logger;
1:3a18150: import org.slf4j.LoggerFactory;
1:3a18150: 
1:3a18150: public class AMQ2801Test
1:3a18150: {
1:3a18150:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2801Test.class);
1:3a18150: 
1:3a18150:     private static final String TOPICNAME = "InvalidPendingQueueTest";
1:3a18150:     private static final String SELECTOR1 = "JMS_ID" + " = '" + "TEST" + "'";
1:3a18150:     private static final String SELECTOR2 = "JMS_ID" + " = '" + "TEST2" + "'";
1:3a18150:     private static final String SUBSCRIPTION1 = "InvalidPendingQueueTest_1";
1:3a18150:     private static final String SUBSCRIPTION2 = "InvalidPendingQueueTest_2";
1:3a18150:     private static final int MSG_COUNT = 2500;
1:3a18150:     private Session session1;
1:3a18150:     private Connection conn1;
1:3a18150:     private Topic topic1;
1:3a18150:     private MessageConsumer consumer1;
1:3a18150:     private Session session2;
1:3a18150:     private Connection conn2;
1:3a18150:     private Topic topic2;
1:3a18150:     private MessageConsumer consumer2;
1:3a18150:     private BrokerService broker;
1:3a18150:     private String connectionUri;
1:3a18150: 
1:3a18150:     @Before
1:3a18150:     public void setUp() throws Exception {
1:3a18150:         broker = new BrokerService();
1:3a18150:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:3a18150:         broker.setPersistent(true);
1:3a18150:         broker.setUseJmx(true);
1:3a18150:         broker.setAdvisorySupport(false);
1:3a18150:         broker.setDeleteAllMessagesOnStartup(true);
1:3a18150:         broker.addConnector("tcp://localhost:0").setName("Default");
1:3a18150:         applyMemoryLimitPolicy(broker);
1:3a18150:         broker.start();
1:3a18150: 
1:3a18150:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:3a18150:     }
1:3a18150: 
1:3a18150:     private void applyMemoryLimitPolicy(BrokerService broker) {
1:3a18150:         final SystemUsage memoryManager = new SystemUsage();
1:3a18150:         memoryManager.getMemoryUsage().setLimit(5818230784L);
1:3a18150:         memoryManager.getStoreUsage().setLimit(6442450944L);
1:3a18150:         memoryManager.getTempUsage().setLimit(3221225472L);
1:3a18150:         broker.setSystemUsage(memoryManager);
1:3a18150: 
1:3a18150:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:3a18150:         final PolicyEntry entry = new PolicyEntry();
1:3a18150:         entry.setQueue(">");
1:3a18150:         entry.setProducerFlowControl(false);
1:3a18150:         entry.setMemoryLimit(504857608);
1:3a18150:         entry.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:3a18150:         policyEntries.add(entry);
1:3a18150: 
1:3a18150:         final PolicyMap policyMap = new PolicyMap();
1:3a18150:         policyMap.setPolicyEntries(policyEntries);
1:3a18150:         broker.setDestinationPolicy(policyMap);
1:3a18150:     }
1:3a18150: 
1:3a18150:     @After
1:3a18150:     public void tearDown() throws Exception {
1:3a18150:         conn1.close();
1:3a18150:         conn2.close();
1:3a18150:         if (broker != null) {
1:3a18150:             broker.stop();
1:3a18150:         }
1:3a18150:     }
1:3a18150: 
1:3a18150:     private void produceMessages() throws Exception {
1:3a18150:         TopicConnection connection = createConnection();
1:3a18150:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:3a18150:         Topic topic = session.createTopic(TOPICNAME);
1:3a18150:         TopicPublisher producer = session.createPublisher(topic);
1:3a18150:         connection.start();
1:3a18150:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:3a18150:         long tStamp = System.currentTimeMillis();
1:3a18150:         BytesMessage message = session2.createBytesMessage();
1:3a18150:         for (int i = 1; i <= MSG_COUNT; i++)
1:3a18150:         {
1:3a18150:             message.setStringProperty("JMS_ID", "TEST");
1:3a18150:             message.setIntProperty("Type", i);
1:3a18150:             producer.publish(message);
1:3a18150:             if (i%100 == 0) {
1:3a18150:                 LOG.info("sent: " + i + " @ " + ((System.currentTimeMillis() - tStamp) / 100)  + "m/ms");
1:3a18150:                 tStamp = System.currentTimeMillis() ;
1:3a18150:             }
1:3a18150:         }
1:3a18150:     }
1:3a18150: 
1:3a18150:     private void activeateSubscribers() throws Exception {
1:3a18150:         // First consumer
1:3a18150:         conn1 = createConnection();
1:3a18150:         conn1.setClientID(SUBSCRIPTION1);
1:3a18150:         session1 = conn1.createSession(true, Session.SESSION_TRANSACTED);
1:3a18150:         topic1 = session1.createTopic(TOPICNAME);
1:3a18150:         consumer1 = session1.createDurableSubscriber(topic1, SUBSCRIPTION1, SELECTOR1, false);
1:3a18150:         conn1.start();
1:3a18150: 
1:3a18150:         // Second consumer that just exists
1:3a18150:         conn2 = createConnection();
1:3a18150:         conn2.setClientID(SUBSCRIPTION2);
1:3a18150:         session2 = conn2.createSession(true, Session.SESSION_TRANSACTED);
1:3a18150:         topic2 = session2.createTopic(TOPICNAME);
1:3a18150:         consumer2 = session2.createDurableSubscriber(topic2, SUBSCRIPTION2, SELECTOR2, false);
1:3a18150:         conn2.start();
1:3a18150:     }
1:3a18150: 
1:3a18150:     @Test
1:3a18150:     public void testInvalidPendingQueue() throws Exception {
1:3a18150: 
1:3a18150:         activeateSubscribers();
1:3a18150: 
1:3a18150:         assertNotNull(consumer1);
1:3a18150:         assertNotNull(consumer2);
1:3a18150: 
1:3a18150:         produceMessages();
1:3a18150:         LOG.debug("Sent messages to a single subscriber");
1:3a18150:         Thread.sleep(2000);
1:3a18150: 
1:3a18150:         LOG.debug("Closing durable subscriber connections");
1:3a18150:         conn1.close();
1:3a18150:         conn2.close();
1:3a18150:         LOG.debug("Closed durable subscriber connections");
1:3a18150: 
1:3a18150:         Thread.sleep(2000);
1:3a18150:         LOG.debug("Re-starting durable subscriber connections");
1:3a18150: 
1:3a18150:         activeateSubscribers();
1:3a18150:         LOG.debug("Started up durable subscriber connections - now view activemq console to see pending queue size on the other subscriber");
1:3a18150: 
1:3a18150:         ObjectName[] subs = broker.getAdminView().getDurableTopicSubscribers();
1:3a18150: 
1:3a18150:         for (int i = 0; i < subs.length; i++) {
1:3a18150:             ObjectName subName = subs[i];
1:3a18150:             DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:3a18150:                 broker.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:3a18150: 
1:d41f40a:             LOG.info(sub.getSubscriptionName() + ": pending = " + sub.getPendingQueueSize() + ", dispatched: " + sub.getDispatchedQueueSize());
1:3a18150:             if(sub.getSubscriptionName().equals(SUBSCRIPTION1)) {
1:d41f40a:                 assertEquals("Incorrect number of pending messages", MSG_COUNT, sub.getPendingQueueSize() + sub.getDispatchedQueueSize());
1:3a18150:             } else {
1:3a18150:                 assertEquals("Incorrect number of pending messages", 0, sub.getPendingQueueSize());
1:3a18150:             }
1:3a18150:         }
1:3a18150:     }
1:3a18150: 
1:3a18150:     private TopicConnection createConnection() throws Exception
1:3a18150:     {
1:3a18150:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();
1:3a18150:         connectionFactory.setBrokerURL(connectionUri);
1:3a18150:         TopicConnection conn = connectionFactory.createTopicConnection();
1:3a18150:         return conn;
1:3a18150:     }
1:3a18150: 
1:3a18150: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:3a18150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ2801Test
1: {
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2801Test.class);
1: 
1:     private static final String TOPICNAME = "InvalidPendingQueueTest";
1:     private static final String SELECTOR1 = "JMS_ID" + " = '" + "TEST" + "'";
1:     private static final String SELECTOR2 = "JMS_ID" + " = '" + "TEST2" + "'";
1:     private static final String SUBSCRIPTION1 = "InvalidPendingQueueTest_1";
1:     private static final String SUBSCRIPTION2 = "InvalidPendingQueueTest_2";
1:     private static final int MSG_COUNT = 2500;
1:     private Session session1;
1:     private Connection conn1;
1:     private Topic topic1;
1:     private MessageConsumer consumer1;
1:     private Session session2;
1:     private Connection conn2;
1:     private Topic topic2;
1:     private MessageConsumer consumer2;
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector("tcp://localhost:0").setName("Default");
1:         applyMemoryLimitPolicy(broker);
1:         broker.start();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     private void applyMemoryLimitPolicy(BrokerService broker) {
1:         final SystemUsage memoryManager = new SystemUsage();
1:         memoryManager.getMemoryUsage().setLimit(5818230784L);
1:         memoryManager.getStoreUsage().setLimit(6442450944L);
1:         memoryManager.getTempUsage().setLimit(3221225472L);
1:         broker.setSystemUsage(memoryManager);
1: 
1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         final PolicyEntry entry = new PolicyEntry();
1:         entry.setQueue(">");
1:         entry.setProducerFlowControl(false);
1:         entry.setMemoryLimit(504857608);
1:         entry.setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy());
1:         policyEntries.add(entry);
1: 
1:         final PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(policyEntries);
1:         broker.setDestinationPolicy(policyMap);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1: 
1:         conn1.close();
1:         conn2.close();
1:     }
1: 
1:     private void produceMessages() throws Exception {
1:         TopicConnection connection = createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(TOPICNAME);
1:         TopicPublisher producer = session.createPublisher(topic);
1:         connection.start();
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         long tStamp = System.currentTimeMillis();
1:         BytesMessage message = session2.createBytesMessage();
1:         for (int i = 1; i <= MSG_COUNT; i++)
1:         {
1:             message.setStringProperty("JMS_ID", "TEST");
1:             message.setIntProperty("Type", i);
1:             producer.publish(message);
1:             if (i%100 == 0) {
1:                 LOG.info("sent: " + i + " @ " + ((System.currentTimeMillis() - tStamp) / 100)  + "m/ms");
1:                 tStamp = System.currentTimeMillis() ;
1:             }
1:         }
1:     }
1: 
1:     private void activeateSubscribers() throws Exception {
1:         // First consumer
1:         conn1 = createConnection();
1:         conn1.setClientID(SUBSCRIPTION1);
1:         session1 = conn1.createSession(true, Session.SESSION_TRANSACTED);
1:         topic1 = session1.createTopic(TOPICNAME);
1:         consumer1 = session1.createDurableSubscriber(topic1, SUBSCRIPTION1, SELECTOR1, false);
1:         conn1.start();
1: 
1:         // Second consumer that just exists
1:         conn2 = createConnection();
1:         conn2.setClientID(SUBSCRIPTION2);
1:         session2 = conn2.createSession(true, Session.SESSION_TRANSACTED);
1:         topic2 = session2.createTopic(TOPICNAME);
1:         consumer2 = session2.createDurableSubscriber(topic2, SUBSCRIPTION2, SELECTOR2, false);
1:         conn2.start();
1:     }
1: 
1:     @Test
1:     public void testInvalidPendingQueue() throws Exception {
1: 
1:         activeateSubscribers();
1: 
1:         assertNotNull(consumer1);
1:         assertNotNull(consumer2);
1: 
1:         produceMessages();
1:         LOG.debug("Sent messages to a single subscriber");
1:         Thread.sleep(2000);
1: 
1:         LOG.debug("Closing durable subscriber connections");
1:         conn1.close();
1:         conn2.close();
1:         LOG.debug("Closed durable subscriber connections");
1: 
1:         Thread.sleep(2000);
1:         LOG.debug("Re-starting durable subscriber connections");
1: 
1:         activeateSubscribers();
1:         LOG.debug("Started up durable subscriber connections - now view activemq console to see pending queue size on the other subscriber");
1: 
1:         ObjectName[] subs = broker.getAdminView().getDurableTopicSubscribers();
1: 
1:         for (int i = 0; i < subs.length; i++) {
1:             ObjectName subName = subs[i];
1:             DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:                 broker.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1: 
0:             LOG.info(sub.getSubscriptionName() + ": pending = " + sub.getPendingQueueSize());
1:             if(sub.getSubscriptionName().equals(SUBSCRIPTION1)) {
0:                 assertEquals("Incorrect number of pending messages", MSG_COUNT, sub.getPendingQueueSize());
1:             } else {
1:                 assertEquals("Incorrect number of pending messages", 0, sub.getPendingQueueSize());
1:             }
1:         }
1:     }
1: 
1:     private TopicConnection createConnection() throws Exception
1:     {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();
1:         connectionFactory.setBrokerURL(connectionUri);
1:         TopicConnection conn = connectionFactory.createTopicConnection();
1:         return conn;
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:d41f40a
/////////////////////////////////////////////////////////////////////////
1:             LOG.info(sub.getSubscriptionName() + ": pending = " + sub.getPendingQueueSize() + ", dispatched: " + sub.getDispatchedQueueSize());
1:                 assertEquals("Incorrect number of pending messages", MSG_COUNT, sub.getPendingQueueSize() + sub.getDispatchedQueueSize());
commit:6bec2aa
/////////////////////////////////////////////////////////////////////////
0:         conn1.close();
0:         conn2.close();
============================================================================