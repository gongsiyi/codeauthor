1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client.sasl;
1:72839b7: 
1:72839b7: import java.util.ArrayList;
1:72839b7: import java.util.Collections;
1:72839b7: import java.util.List;
1:72839b7: 
1:72839b7: import javax.jms.JMSSecurityException;
1:72839b7: import javax.security.sasl.SaslException;
1:72839b7: 
1:72839b7: import org.apache.qpid.proton.engine.Sasl;
1:72839b7: import org.slf4j.Logger;
1:72839b7: import org.slf4j.LoggerFactory;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Manage the SASL authentication process
1:72839b7:  */
1:72839b7: public class SaslAuthenticator {
1:72839b7: 
1:72839b7:     private static final Logger LOG = LoggerFactory.getLogger(SaslAuthenticator.class);
1:72839b7: 
1:72839b7:     private final Sasl sasl;
1:72839b7:     private final String username;
1:72839b7:     private final String password;
1:ce5628a:     private final String authzid;
1:72839b7:     private Mechanism mechanism;
1:ce5628a:     private String mechanismRestriction;
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Create the authenticator and initialize it.
1:72839b7:      *
1:72839b7:      * @param sasl
1:72839b7:      *        The Proton SASL entry point this class will use to manage the authentication.
1:72839b7:      * @param username
1:72839b7:      *        The user name that will be used to authenticate.
1:72839b7:      * @param password
1:72839b7:      *        The password that will be used to authenticate.
1:ce5628a:      * @param authzid
1:ce5628a:      *        The authzid used when authenticating (currently only with PLAIN)
1:ce5628a:      * @param mechanismRestriction
1:ce5628a:      *        A particular mechanism to use (if offered by the server) or null to allow selection.
1:72839b7:      */
1:ce5628a:     public SaslAuthenticator(Sasl sasl, String username, String password, String authzid, String mechanismRestriction) {
1:72839b7:         this.sasl = sasl;
1:72839b7:         this.username = username;
1:72839b7:         this.password = password;
1:ce5628a:         this.authzid = authzid;
1:ce5628a:         this.mechanismRestriction = mechanismRestriction;
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Process the SASL authentication cycle until such time as an outcome is determine. This
1:72839b7:      * method must be called by the managing entity until the return value is true indicating a
1:72839b7:      * successful authentication or a JMSSecurityException is thrown indicating that the
1:72839b7:      * handshake failed.
1:72839b7:      *
1:72839b7:      * @throws JMSSecurityException
1:72839b7:      */
1:72839b7:     public boolean authenticate() throws SecurityException {
1:72839b7:         switch (sasl.getState()) {
1:72839b7:             case PN_SASL_IDLE:
1:72839b7:                 handleSaslInit();
1:72839b7:                 break;
1:72839b7:             case PN_SASL_STEP:
1:72839b7:                 handleSaslStep();
1:72839b7:                 break;
1:72839b7:             case PN_SASL_FAIL:
1:72839b7:                 handleSaslFail();
1:72839b7:                 break;
1:72839b7:             case PN_SASL_PASS:
1:72839b7:                 return true;
1:72839b7:             default:
1:72839b7:         }
1:72839b7: 
1:72839b7:         return false;
1:72839b7:     }
1:72839b7: 
1:72839b7:     private void handleSaslInit() throws SecurityException {
1:72839b7:         try {
1:72839b7:             String[] remoteMechanisms = sasl.getRemoteMechanisms();
1:72839b7:             if (remoteMechanisms != null && remoteMechanisms.length != 0) {
1:72839b7:                 mechanism = findMatchingMechanism(remoteMechanisms);
1:72839b7:                 if (mechanism != null) {
1:72839b7:                     mechanism.setUsername(username);
1:72839b7:                     mechanism.setPassword(password);
1:ce5628a:                     mechanism.setAuthzid(authzid);
1:72839b7:                     // TODO - set additional options from URI.
1:72839b7:                     // TODO - set a host value.
1:72839b7: 
1:72839b7:                     sasl.setMechanisms(mechanism.getName());
1:72839b7:                     byte[] response = mechanism.getInitialResponse();
1:72839b7:                     if (response != null && response.length != 0) {
1:72839b7:                         sasl.send(response, 0, response.length);
1:72839b7:                     }
1:72839b7:                 } else {
1:72839b7:                     // TODO - Better error message.
1:72839b7:                     throw new SecurityException("Could not find a matching SASL mechanism for the remote peer.");
1:72839b7:                 }
1:72839b7:             }
1:72839b7:         } catch (SaslException se) {
1:72839b7:             // TODO - Better error message.
1:72839b7:             SecurityException jmsse = new SecurityException("Exception while processing SASL init.");
1:72839b7:             jmsse.initCause(se);
1:72839b7:             throw jmsse;
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     private Mechanism findMatchingMechanism(String...remoteMechanisms) {
1:72839b7: 
1:72839b7:         Mechanism match = null;
1:72839b7:         List<Mechanism> found = new ArrayList<Mechanism>();
1:72839b7: 
1:72839b7:         for (String remoteMechanism : remoteMechanisms) {
1:ce5628a:             if(mechanismRestriction != null && !mechanismRestriction.equals(remoteMechanism)) {
1:ce5628a:                 LOG.debug("Skipping {} mechanism because it is not the configured mechanism restriction {}", remoteMechanism, mechanismRestriction);
1:ce5628a:                 continue;
1:ce5628a:             }
1:ce5628a: 
1:b5dd0a1:             Mechanism mechanism = null;
1:72839b7:             if (remoteMechanism.equalsIgnoreCase("PLAIN")) {
1:b5dd0a1:                 mechanism = new PlainMechanism();
1:72839b7:             } else if (remoteMechanism.equalsIgnoreCase("ANONYMOUS")) {
1:b5dd0a1:                 mechanism = new AnonymousMechanism();
1:72839b7:             } else if (remoteMechanism.equalsIgnoreCase("CRAM-MD5")) {
1:b5dd0a1:                 mechanism = new CramMD5Mechanism();
1:72839b7:             } else {
1:72839b7:                 LOG.debug("Unknown remote mechanism {}, skipping", remoteMechanism);
1:b5dd0a1:                 continue;
1:b5dd0a1:             }
1:b5dd0a1: 
1:b5dd0a1:             if (mechanism.isApplicable(username, password)) {
1:b5dd0a1:                 found.add(mechanism);
1:72839b7:             }
1:72839b7:         }
1:72839b7: 
1:72839b7:         if (!found.isEmpty()) {
1:72839b7:             // Sorts by priority using Mechanism comparison and return the last value in
1:72839b7:             // list which is the Mechanism deemed to be the highest priority match.
1:72839b7:             Collections.sort(found);
1:72839b7:             match = found.get(found.size() - 1);
1:72839b7:         }
1:72839b7: 
1:72839b7:         LOG.info("Best match for SASL auth was: {}", match);
1:72839b7: 
1:72839b7:         return match;
1:72839b7:     }
1:72839b7: 
1:72839b7:     private void handleSaslStep() throws SecurityException {
1:72839b7:         try {
1:72839b7:             if (sasl.pending() != 0) {
1:72839b7:                 byte[] challenge = new byte[sasl.pending()];
1:72839b7:                 sasl.recv(challenge, 0, challenge.length);
1:72839b7:                 byte[] response = mechanism.getChallengeResponse(challenge);
1:72839b7:                 sasl.send(response, 0, response.length);
1:72839b7:             }
1:72839b7:         } catch (SaslException se) {
1:72839b7:             // TODO - Better error message.
1:72839b7:             SecurityException jmsse = new SecurityException("Exception while processing SASL step.");
1:72839b7:             jmsse.initCause(se);
1:72839b7:             throw jmsse;
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     private void handleSaslFail() throws SecurityException {
1:72839b7:         // TODO - Better error message.
1:72839b7:         throw new SecurityException("Client failed to authenticate");
1:72839b7:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b5dd0a1
/////////////////////////////////////////////////////////////////////////
1:             Mechanism mechanism = null;
1:                 mechanism = new PlainMechanism();
1:                 mechanism = new AnonymousMechanism();
1:                 mechanism = new CramMD5Mechanism();
1:                 continue;
1:             }
1: 
1:             if (mechanism.isApplicable(username, password)) {
1:                 found.add(mechanism);
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.sasl;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import javax.jms.JMSSecurityException;
1: import javax.security.sasl.SaslException;
1: 
1: import org.apache.qpid.proton.engine.Sasl;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Manage the SASL authentication process
1:  */
1: public class SaslAuthenticator {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(SaslAuthenticator.class);
1: 
1:     private final Sasl sasl;
1:     private final String username;
1:     private final String password;
1:     private Mechanism mechanism;
1: 
1:     /**
1:      * Create the authenticator and initialize it.
1:      *
1:      * @param sasl
1:      *        The Proton SASL entry point this class will use to manage the authentication.
1:      * @param username
1:      *        The user name that will be used to authenticate.
1:      * @param password
1:      *        The password that will be used to authenticate.
1:      */
0:     public SaslAuthenticator(Sasl sasl, String username, String password) {
1:         this.sasl = sasl;
1:         this.username = username;
1:         this.password = password;
1:     }
1: 
1:     /**
1:      * Process the SASL authentication cycle until such time as an outcome is determine. This
1:      * method must be called by the managing entity until the return value is true indicating a
1:      * successful authentication or a JMSSecurityException is thrown indicating that the
1:      * handshake failed.
1:      *
1:      * @throws JMSSecurityException
1:      */
1:     public boolean authenticate() throws SecurityException {
1:         switch (sasl.getState()) {
1:             case PN_SASL_IDLE:
1:                 handleSaslInit();
1:                 break;
1:             case PN_SASL_STEP:
1:                 handleSaslStep();
1:                 break;
1:             case PN_SASL_FAIL:
1:                 handleSaslFail();
1:                 break;
1:             case PN_SASL_PASS:
1:                 return true;
1:             default:
1:         }
1: 
1:         return false;
1:     }
1: 
1:     private void handleSaslInit() throws SecurityException {
1:         try {
1:             String[] remoteMechanisms = sasl.getRemoteMechanisms();
1:             if (remoteMechanisms != null && remoteMechanisms.length != 0) {
1:                 mechanism = findMatchingMechanism(remoteMechanisms);
1:                 if (mechanism != null) {
1:                     mechanism.setUsername(username);
1:                     mechanism.setPassword(password);
1:                     // TODO - set additional options from URI.
1:                     // TODO - set a host value.
1: 
1:                     sasl.setMechanisms(mechanism.getName());
1:                     byte[] response = mechanism.getInitialResponse();
1:                     if (response != null && response.length != 0) {
1:                         sasl.send(response, 0, response.length);
1:                     }
1:                 } else {
1:                     // TODO - Better error message.
1:                     throw new SecurityException("Could not find a matching SASL mechanism for the remote peer.");
1:                 }
1:             }
1:         } catch (SaslException se) {
1:             // TODO - Better error message.
1:             SecurityException jmsse = new SecurityException("Exception while processing SASL init.");
1:             jmsse.initCause(se);
1:             throw jmsse;
1:         }
1:     }
1: 
1:     private Mechanism findMatchingMechanism(String...remoteMechanisms) {
1: 
1:         Mechanism match = null;
1:         List<Mechanism> found = new ArrayList<Mechanism>();
1: 
1:         for (String remoteMechanism : remoteMechanisms) {
1:             if (remoteMechanism.equalsIgnoreCase("PLAIN")) {
0:                 found.add(new PlainMechanism());
1:             } else if (remoteMechanism.equalsIgnoreCase("ANONYMOUS")) {
0:                 found.add(new AnonymousMechanism());
1:             } else if (remoteMechanism.equalsIgnoreCase("CRAM-MD5")) {
0:                 found.add(new CramMD5Mechanism());
1:             } else {
1:                 LOG.debug("Unknown remote mechanism {}, skipping", remoteMechanism);
1:             }
1:         }
1: 
1:         if (!found.isEmpty()) {
1:             // Sorts by priority using Mechanism comparison and return the last value in
1:             // list which is the Mechanism deemed to be the highest priority match.
1:             Collections.sort(found);
1:             match = found.get(found.size() - 1);
1:         }
1: 
1:         LOG.info("Best match for SASL auth was: {}", match);
1: 
1:         return match;
1:     }
1: 
1:     private void handleSaslStep() throws SecurityException {
1:         try {
1:             if (sasl.pending() != 0) {
1:                 byte[] challenge = new byte[sasl.pending()];
1:                 sasl.recv(challenge, 0, challenge.length);
1:                 byte[] response = mechanism.getChallengeResponse(challenge);
1:                 sasl.send(response, 0, response.length);
1:             }
1:         } catch (SaslException se) {
1:             // TODO - Better error message.
1:             SecurityException jmsse = new SecurityException("Exception while processing SASL step.");
1:             jmsse.initCause(se);
1:             throw jmsse;
1:         }
1:     }
1: 
1:     private void handleSaslFail() throws SecurityException {
1:         // TODO - Better error message.
1:         throw new SecurityException("Client failed to authenticate");
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:ce5628a
/////////////////////////////////////////////////////////////////////////
1:     private final String authzid;
1:     private String mechanismRestriction;
/////////////////////////////////////////////////////////////////////////
1:      * @param authzid
1:      *        The authzid used when authenticating (currently only with PLAIN)
1:      * @param mechanismRestriction
1:      *        A particular mechanism to use (if offered by the server) or null to allow selection.
1:     public SaslAuthenticator(Sasl sasl, String username, String password, String authzid, String mechanismRestriction) {
1:         this.authzid = authzid;
1:         this.mechanismRestriction = mechanismRestriction;
/////////////////////////////////////////////////////////////////////////
1:                     mechanism.setAuthzid(authzid);
/////////////////////////////////////////////////////////////////////////
1:             if(mechanismRestriction != null && !mechanismRestriction.equals(remoteMechanism)) {
1:                 LOG.debug("Skipping {} mechanism because it is not the configured mechanism restriction {}", remoteMechanism, mechanismRestriction);
1:                 continue;
1:             }
1: 
============================================================================