1:f392884: /**
1:f392884:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f392884:  * contributor license agreements.  See the NOTICE file distributed with
1:f392884:  * this work for additional information regarding copyright ownership.
1:f392884:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f392884:  * (the "License"); you may not use this file except in compliance with
1:f392884:  * the License.  You may obtain a copy of the License at
1:f392884:  *
1:f392884:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f392884:  *
1:f392884:  * Unless required by applicable law or agreed to in writing, software
1:f392884:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f392884:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f392884:  * See the License for the specific language governing permissions and
1:f392884:  * limitations under the License.
1:f392884:  */
1:f392884: package org.apache.activemq.transport.failover;
1:0ed0ba5: 
1:f392884: import java.net.URI;
1:f392884: import java.util.ArrayList;
1:f392884: import java.util.HashSet;
1:f392884: import java.util.List;
1:f392884: import java.util.Set;
1:f392884: import javax.jms.Connection;
1:f392884: import javax.jms.MessageConsumer;
1:f392884: import javax.jms.Queue;
1:f392884: import javax.jms.Session;
1:f392884: import junit.framework.TestCase;
1:f392884: import org.apache.activemq.ActiveMQConnection;
1:f392884: import org.apache.activemq.ActiveMQConnectionFactory;
1:f392884: import org.apache.activemq.broker.BrokerService;
1:f392884: import org.apache.activemq.broker.TransportConnector;
1:f392884: import org.apache.activemq.network.NetworkConnector;
14:f392884: 
1:f392884: public class FailoverClusterTest extends TestCase {
1:f392884: 
1:c752230:     private static final int NUMBER = 10;
1:228abac:     private static final String BROKER_BIND_ADDRESS = "tcp://0.0.0.0:0";
1:c752230:     private static final String BROKER_A_NAME = "BROKERA";
1:c752230:     private static final String BROKER_B_NAME = "BROKERB";
1:c752230:     private BrokerService brokerA;
1:c752230:     private BrokerService brokerB;
1:c752230:     private String clientUrl;
1:c752230: 
1:c752230:     private final List<ActiveMQConnection> connections = new ArrayList<ActiveMQConnection>();
1:f392884: 
1:04ee70a:     protected String getBindAddress() {
1:04ee70a:         return BROKER_BIND_ADDRESS;
1:04ee70a:     }
1:04ee70a: 
1:c752230:     public void testClusterConnectedAfterClients() throws Exception {
1:c752230:         createClients();
1:c752230:         if (brokerB == null) {
1:04ee70a:             brokerB = createBrokerB(getBindAddress());
1:c752230:         }
1:c752230:         Thread.sleep(3000);
1:c752230:         Set<String> set = new HashSet<String>();
1:c752230:         for (ActiveMQConnection c : connections) {
1:c752230:             set.add(c.getTransportChannel().getRemoteAddress());
1:c752230:         }
1:c752230:         assertTrue(set.size() > 1);
1:c752230:     }
1:c752230: 
1:c752230:     public void testClusterURIOptionsStrip() throws Exception {
1:0ed0ba5:         createClients();
1:0ed0ba5:         if (brokerB == null) {
1:0ed0ba5:             // add in server side only url param, should not be propagated
1:04ee70a:             brokerB = createBrokerB(getBindAddress() + "?transport.closeAsync=false");
1:0ed0ba5:         }
1:0ed0ba5:         Thread.sleep(3000);
1:0ed0ba5:         Set<String> set = new HashSet<String>();
1:c752230:         for (ActiveMQConnection c : connections) {
1:0ed0ba5:             set.add(c.getTransportChannel().getRemoteAddress());
1:0ed0ba5:         }
1:0ed0ba5:         assertTrue(set.size() > 1);
1:0ed0ba5:     }
1:0ed0ba5: 
1:c752230:     public void testClusterConnectedBeforeClients() throws Exception {
1:c752230: 
1:c752230:         if (brokerB == null) {
1:04ee70a:             brokerB = createBrokerB(getBindAddress());
1:c752230:         }
1:c752230:         Thread.sleep(5000);
1:c752230:         createClients();
1:c752230:         Thread.sleep(2000);
1:c752230:         brokerA.stop();
1:c752230:         Thread.sleep(2000);
1:c752230: 
1:228abac:         URI brokerBURI = new URI( brokerB.getTransportConnectors().get(0).getPublishableConnectString());
1:c752230:         for (ActiveMQConnection c : connections) {
1:c752230:             String addr = c.getTransportChannel().getRemoteAddress();
1:c752230:             assertTrue(addr.indexOf("" + brokerBURI.getPort()) > 0);
1:c752230:         }
1:c752230:     }
1:f392884: 
1:f392884:     @Override
1:f392884:     protected void setUp() throws Exception {
1:f392884:         if (brokerA == null) {
1:04ee70a:             brokerA = createBrokerA(getBindAddress() + "?transport.closeAsync=false");
1:c752230:             clientUrl = "failover://(" + brokerA.getTransportConnectors().get(0).getPublishableConnectString() + ")";
8:f392884:         }
1:f392884:     }
1:f392884: 
1:f392884:     @Override
1:f392884:     protected void tearDown() throws Exception {
1:c752230:         for (Connection c : connections) {
1:f392884:             c.close();
1:c752230:         }
1:f392884:         if (brokerB != null) {
1:f392884:             brokerB.stop();
1:f392884:             brokerB = null;
1:f392884:         }
1:f392884:         if (brokerA != null) {
2:f392884:             brokerA.stop();
1:f392884:             brokerA = null;
1:f392884:         }
1:f392884:     }
1:c752230: 
1:f392884:     protected BrokerService createBrokerA(String uri) throws Exception {
1:f392884:         BrokerService answer = new BrokerService();
1:0ed0ba5:         answer.setUseJmx(false);
1:c752230:         configureConsumerBroker(answer, uri);
1:f392884:         answer.start();
1:f392884:         return answer;
1:f392884:     }
1:c752230: 
1:c752230:     protected void configureConsumerBroker(BrokerService answer, String uri) throws Exception {
1:f392884:         answer.setBrokerName(BROKER_A_NAME);
1:f392884:         answer.setPersistent(false);
1:f392884:         TransportConnector connector = answer.addConnector(uri);
1:f392884:         connector.setRebalanceClusterClients(true);
1:f392884:         connector.setUpdateClusterClients(true);
1:f392884:         answer.setUseShutdownHook(false);
1:f392884:     }
1:c752230: 
1:f392884:     protected BrokerService createBrokerB(String uri) throws Exception {
1:f392884:         BrokerService answer = new BrokerService();
1:0ed0ba5:         answer.setUseJmx(false);
1:c752230:         configureNetwork(answer, uri);
1:f392884:         answer.start();
1:f392884:         return answer;
1:f392884:     }
1:c752230: 
1:c752230:     protected void configureNetwork(BrokerService answer, String uri) throws Exception {
1:f392884:         answer.setBrokerName(BROKER_B_NAME);
1:f392884:         answer.setPersistent(false);
1:228abac:         NetworkConnector network = answer.addNetworkConnector("static://" + brokerA.getTransportConnectors().get(0).getPublishableConnectString());
1:f392884:         network.setDuplex(true);
1:c752230:         TransportConnector connector = answer.addConnector(uri);
1:f392884:         connector.setRebalanceClusterClients(true);
1:f392884:         connector.setUpdateClusterClients(true);
1:f392884:         answer.setUseShutdownHook(false);
1:f392884:     }
1:c752230: 
1:7d8ce02:     @SuppressWarnings("unused")
1:f392884:     protected void createClients() throws Exception {
1:c752230:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(clientUrl);
1:c752230:         for (int i = 0; i < NUMBER; i++) {
1:f392884:             ActiveMQConnection c = (ActiveMQConnection) factory.createConnection();
1:f392884:             c.start();
1:f392884:             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c752230:             Queue queue = s.createQueue(getClass().getName());
1:f392884:             MessageConsumer consumer = s.createConsumer(queue);
1:f392884:             connections.add(c);
1:f392884:         }
1:f392884:     }
1:f392884: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1:     protected String getBindAddress() {
1:         return BROKER_BIND_ADDRESS;
1:     }
1: 
1:             brokerB = createBrokerB(getBindAddress());
/////////////////////////////////////////////////////////////////////////
1:             brokerB = createBrokerB(getBindAddress() + "?transport.closeAsync=false");
/////////////////////////////////////////////////////////////////////////
1:             brokerB = createBrokerB(getBindAddress());
/////////////////////////////////////////////////////////////////////////
1:             brokerA = createBrokerA(getBindAddress() + "?transport.closeAsync=false");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:7d8ce02
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unused")
author:Gary Tully
-------------------------------------------------------------------------------
commit:228abac
/////////////////////////////////////////////////////////////////////////
1:     private static final String BROKER_BIND_ADDRESS = "tcp://0.0.0.0:0";
/////////////////////////////////////////////////////////////////////////
0:             brokerB = createBrokerB(BROKER_BIND_ADDRESS);
/////////////////////////////////////////////////////////////////////////
0:             brokerB = createBrokerB(BROKER_BIND_ADDRESS + "?transport.closeAsync=false");
/////////////////////////////////////////////////////////////////////////
0:             brokerB = createBrokerB(BROKER_BIND_ADDRESS);
/////////////////////////////////////////////////////////////////////////
1:         URI brokerBURI = new URI( brokerB.getTransportConnectors().get(0).getPublishableConnectString());
/////////////////////////////////////////////////////////////////////////
0:             brokerA = createBrokerA(BROKER_BIND_ADDRESS + "?transport.closeAsync=false");
/////////////////////////////////////////////////////////////////////////
1:         NetworkConnector network = answer.addNetworkConnector("static://" + brokerA.getTransportConnectors().get(0).getPublishableConnectString());
commit:c752230
/////////////////////////////////////////////////////////////////////////
1:     private static final int NUMBER = 10;
0:     private static final String BROKER_A_BIND_ADDRESS = "tcp://0.0.0.0:61616";
0:     private static final String BROKER_B_BIND_ADDRESS = "tcp://0.0.0.0:61617";
1:     private static final String BROKER_A_NAME = "BROKERA";
1:     private static final String BROKER_B_NAME = "BROKERB";
1:     private BrokerService brokerA;
1:     private BrokerService brokerB;
1:     private String clientUrl;
1: 
1:     private final List<ActiveMQConnection> connections = new ArrayList<ActiveMQConnection>();
1:     public void testClusterConnectedAfterClients() throws Exception {
1:         createClients();
1:         if (brokerB == null) {
0:             brokerB = createBrokerB(BROKER_B_BIND_ADDRESS);
1:         }
1:         Thread.sleep(3000);
1:         Set<String> set = new HashSet<String>();
1:         for (ActiveMQConnection c : connections) {
1:             set.add(c.getTransportChannel().getRemoteAddress());
1:         }
1:         assertTrue(set.size() > 1);
1:     }
1:     public void testClusterURIOptionsStrip() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         for (ActiveMQConnection c : connections) {
1: 
1:     public void testClusterConnectedBeforeClients() throws Exception {
1: 
1:         if (brokerB == null) {
0:             brokerB = createBrokerB(BROKER_B_BIND_ADDRESS);
1:         }
1:         Thread.sleep(5000);
1:         createClients();
1:         Thread.sleep(2000);
1:         brokerA.stop();
1:         Thread.sleep(2000);
1: 
0:         URI brokerBURI = new URI(BROKER_B_BIND_ADDRESS);
1:         for (ActiveMQConnection c : connections) {
1:             String addr = c.getTransportChannel().getRemoteAddress();
1:             assertTrue(addr.indexOf("" + brokerBURI.getPort()) > 0);
1:         }
1:     }
0:             brokerA = createBrokerA(BROKER_A_BIND_ADDRESS + "?transport.closeAsync=false");
1:             clientUrl = "failover://(" + brokerA.getTransportConnectors().get(0).getPublishableConnectString() + ")";
1:         for (Connection c : connections) {
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:         configureConsumerBroker(answer, uri);
1: 
1:     protected void configureConsumerBroker(BrokerService answer, String uri) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:         configureNetwork(answer, uri);
1: 
1:     protected void configureNetwork(BrokerService answer, String uri) throws Exception {
0:         NetworkConnector network = answer.addNetworkConnector("static://" + BROKER_A_BIND_ADDRESS);
1:         TransportConnector connector = answer.addConnector(uri);
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(clientUrl);
1:         for (int i = 0; i < NUMBER; i++) {
1:             Queue queue = s.createQueue(getClass().getName());
commit:0ed0ba5
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void testClusterURIOptionsStrip() throws Exception{
1:         createClients();
1:         if (brokerB == null) {
1:             // add in server side only url param, should not be propagated
0:             brokerB = createBrokerB(BROKER_B_BIND_ADDRESS + "?transport.closeAsync=false");
1:         }
1:         Thread.sleep(3000);
1:         Set<String> set = new HashSet<String>();
0:         for (ActiveMQConnection c:connections) {
1:             set.add(c.getTransportChannel().getRemoteAddress());
1:         }
1:         assertTrue(set.size() > 1);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:            brokerA = createBrokerA(BROKER_A_BIND_ADDRESS + "?transport.closeAsync=false");
/////////////////////////////////////////////////////////////////////////
1:         answer.setUseJmx(false);
/////////////////////////////////////////////////////////////////////////
1:         answer.setUseJmx(false);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6c09e84
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(3000);
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(3000);
commit:373417c
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(5000);
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(5000);
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: 
1: 
1: public class FailoverClusterTest extends TestCase {
1: 
0: private static final int NUMBER = 10;
0: private static final String BROKER_A_BIND_ADDRESS = "tcp://0.0.0.0:61616";
0: private static final String BROKER_B_BIND_ADDRESS = "tcp://0.0.0.0:61617";
0: private static final String CLIENT_URL = "failover://("+BROKER_A_BIND_ADDRESS+")";
0: private static final String BROKER_A_NAME = "BROKERA";
0: private static final String BROKER_B_NAME = "BROKERB";
0: private BrokerService brokerA;
0: private BrokerService brokerB;
0: private final List<ActiveMQConnection>connections = new ArrayList<ActiveMQConnection>();
1: 
1: 
0:   public void testClusterConnectedAfterClients() throws Exception{
0:       createClients();
0:       if (brokerB == null) {
0:           brokerB = createBrokerB(BROKER_B_BIND_ADDRESS);
1:       }
0:       Thread.sleep(3000);
0:       Set<String> set = new HashSet<String>();
0:       for (ActiveMQConnection c:connections) {
0:           set.add(c.getTransportChannel().getRemoteAddress());
1:       }
0:       assertTrue(set.size() > 1);
1:   }
1:   
0:   public void testClusterConnectedBeforeClients() throws Exception{
1:       
0:       if (brokerB == null) {
0:           brokerB = createBrokerB(BROKER_B_BIND_ADDRESS);
1:       }
0:       Thread.sleep(5000);
0:       createClients();
0:       Thread.sleep(2000);
1:       brokerA.stop();
0:       Thread.sleep(2000);
1:      
0:       URI brokerBURI = new URI(BROKER_B_BIND_ADDRESS);
0:       for (ActiveMQConnection c:connections) {
0:           String addr = c.getTransportChannel().getRemoteAddress();    
0:           assertTrue(addr.indexOf(""+brokerBURI.getPort()) > 0);
1:       }
1:   }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         if (brokerA == null) {
0:            brokerA = createBrokerA(BROKER_A_BIND_ADDRESS);
1:         }
1:         
1:         
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
0:         for (Connection c:connections) {
1:             c.close();
1:         }     
1:         if (brokerB != null) {
1:             brokerB.stop();
1:             brokerB = null;
1:         }
1:         if (brokerA != null) {
1:             brokerA.stop();
1:             brokerA = null;
1:         }
1:     }
1:     
1:     protected BrokerService createBrokerA(String uri) throws Exception {
1:         BrokerService answer = new BrokerService();
0:         configureConsumerBroker(answer,uri);
1:         answer.start();
1:         return answer;
1:     }
1:     
0:     protected void configureConsumerBroker(BrokerService answer,String uri) throws Exception {
1:         answer.setBrokerName(BROKER_A_NAME);
1:         answer.setPersistent(false);
1:         TransportConnector connector = answer.addConnector(uri);
1:         connector.setRebalanceClusterClients(true);
1:         connector.setUpdateClusterClients(true);
1:         answer.setUseShutdownHook(false);
1:     }
1:     
1:     protected BrokerService createBrokerB(String uri) throws Exception {
1:         BrokerService answer = new BrokerService();
0:         configureNetwork(answer,uri);
1:         answer.start();
1:         return answer;
1:     }
1:     
0:     protected void configureNetwork(BrokerService answer,String uri) throws Exception {
1:         answer.setBrokerName(BROKER_B_NAME);
1:         answer.setPersistent(false);
0:         NetworkConnector network = answer.addNetworkConnector("static://"+BROKER_A_BIND_ADDRESS);
1:         network.setDuplex(true);
0:         TransportConnector connector =answer.addConnector(uri);
1:         connector.setRebalanceClusterClients(true);
1:         connector.setUpdateClusterClients(true);
1:         answer.setUseShutdownHook(false);
1:     }
1:     
1:     protected void createClients() throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(CLIENT_URL);
0:         for (int i =0;i < NUMBER; i++) {
1:             ActiveMQConnection c = (ActiveMQConnection) factory.createConnection();
1:             c.start();
1:             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             Queue queue  = s.createQueue(getClass().getName());
1:             MessageConsumer consumer = s.createConsumer(queue);
1:             connections.add(c);
1:         }
1:     }
1: }
============================================================================