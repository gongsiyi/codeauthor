1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
2:a677c21: 
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: 
1:a677c21: import org.apache.activemq.ActiveMQConnectionFactory;
1:a677c21: import org.apache.activemq.broker.BrokerService;
1:a677c21: 
1:a677c21: /**
1:b0c2a40:  * 
1:a677c21:  */
1:a677c21: public class TwoBrokerTopicSendReceiveUsingJavaConfigurationTest extends TwoBrokerTopicSendReceiveTest {
1:a677c21:     BrokerService receiveBroker;
1:a677c21:     BrokerService sendBroker;
1:a677c21: 
1:a677c21:     protected ActiveMQConnectionFactory createReceiverConnectionFactory() throws JMSException {
1:a677c21:         try {
1:a677c21:             receiveBroker = new BrokerService();
1:4878341:             receiveBroker.setBrokerName("receiveBroker");
1:a677c21:             receiveBroker.setUseJmx(false);
1:a677c21:             receiveBroker.setPersistent(false);
1:a677c21:             receiveBroker.addConnector("tcp://localhost:62002");
1:a677c21:             receiveBroker.addNetworkConnector("static:failover:tcp://localhost:62001");
1:a677c21:             receiveBroker.start();
1:a677c21: 
1:a677c21:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:62002");
1:a677c21:             return factory;
1:a677c21:         } catch (Exception e) {
1:a677c21:             e.printStackTrace();
1:a677c21:             return null;
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected ActiveMQConnectionFactory createSenderConnectionFactory() throws JMSException {
1:a677c21:         try {
1:a677c21:             sendBroker = new BrokerService();
1:4878341:             sendBroker.setBrokerName("sendBroker");
1:a677c21:             sendBroker.setUseJmx(false);
1:a677c21:             sendBroker.setPersistent(false);
1:a677c21:             sendBroker.addConnector("tcp://localhost:62001");
1:a677c21:             sendBroker.addNetworkConnector("static:failover:tcp://localhost:62002");
1:a677c21:             sendBroker.start();
1:a677c21: 
1:a677c21:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:62001");
1:a677c21:             return factory;
1:a677c21:         } catch (Exception e) {
1:a677c21:             e.printStackTrace();
1:a677c21:             return null;
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void tearDown() throws Exception {
1:a677c21:         super.tearDown();
1:a677c21:         if (sendBroker != null) {
1:a677c21:             sendBroker.stop();
1:a677c21:         }
1:a677c21:         if (receiveBroker != null) {
1:a677c21:             receiveBroker.stop();
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:4878341
/////////////////////////////////////////////////////////////////////////
1:             receiveBroker.setBrokerName("receiveBroker");
/////////////////////////////////////////////////////////////////////////
1:             sendBroker.setBrokerName("sendBroker");
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: 
0: import javax.jms.JMSException;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class TwoBrokerTopicSendReceiveUsingJavaConfigurationTest extends TwoBrokerTopicSendReceiveTest {
1:     BrokerService receiveBroker;
1:     BrokerService sendBroker;
1: 
1:     protected ActiveMQConnectionFactory createReceiverConnectionFactory() throws JMSException {
1:         try {
1:             receiveBroker = new BrokerService();
1:             receiveBroker.setUseJmx(false);
1:             receiveBroker.setPersistent(false);
1:             receiveBroker.addConnector("tcp://localhost:62002");
1:             receiveBroker.addNetworkConnector("static:failover:tcp://localhost:62001");
1:             receiveBroker.start();
1: 
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:62002");
1:             return factory;
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:             return null;
1:         }
1:     }
1: 
1:     protected ActiveMQConnectionFactory createSenderConnectionFactory() throws JMSException {
1:         try {
1:             sendBroker = new BrokerService();
1:             sendBroker.setUseJmx(false);
1:             sendBroker.setPersistent(false);
1:             sendBroker.addConnector("tcp://localhost:62001");
1:             sendBroker.addNetworkConnector("static:failover:tcp://localhost:62002");
1:             sendBroker.start();
1: 
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:62001");
1:             return factory;
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:             return null;
1:         }
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (sendBroker != null) {
1:             sendBroker.stop();
1:         }
1:         if (receiveBroker != null) {
1:             receiveBroker.stop();
1:         }
1:     }
1: 
1: }
============================================================================