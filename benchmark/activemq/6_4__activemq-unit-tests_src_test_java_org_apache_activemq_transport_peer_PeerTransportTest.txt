1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:ecf89a6: 
1:d29ca2a: package org.apache.activemq.transport.peer;
1:230a86c: 
1:74a7a8b: import javax.jms.Connection;
1:74a7a8b: import javax.jms.DeliveryMode;
1:74a7a8b: import javax.jms.Destination;
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.MessageConsumer;
1:74a7a8b: import javax.jms.MessageProducer;
1:74a7a8b: import javax.jms.Session;
1:74a7a8b: import javax.jms.TextMessage;
1:74a7a8b: 
1:74a7a8b: import junit.framework.TestCase;
1:4743a20: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnectionFactory;
1:38f7b12: import org.apache.activemq.advisory.AdvisorySupport;
1:38f7b12: import org.apache.activemq.command.ActiveMQDestination;
1:38f7b12: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTextMessage;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:38f7b12: import org.apache.activemq.command.ConsumerInfo;
1:3d95025: import org.apache.activemq.util.MessageIdList;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:38f7b12: 
1:d29ca2a: /**
1:4743a20:  *
1:d29ca2a:  */
1:d29ca2a: public class PeerTransportTest extends TestCase {
1:d36c0d4:     protected static final int MESSAGE_COUNT = 50;
1:d36c0d4:     protected static final int NUMBER_IN_CLUSTER = 3;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(PeerTransportTest.class);
1:4743a20: 
1:ecf89a6:     protected ActiveMQDestination destination;
1:ecf89a6:     protected boolean topic = true;
1:d29ca2a:     protected int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:d29ca2a:     protected MessageProducer[] producers;
1:d29ca2a:     protected Connection[] connections;
1:3d95025:     protected MessageIdList messageIdList[];
1:38f7b12: 
1:4743a20:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:230a86c: 
1:d29ca2a:         connections = new Connection[NUMBER_IN_CLUSTER];
1:d29ca2a:         producers = new MessageProducer[NUMBER_IN_CLUSTER];
1:3d95025:         messageIdList = new MessageIdList[NUMBER_IN_CLUSTER];
1:38f7b12:         ActiveMQDestination destination = createDestination();
1:38f7b12: 
1:230a86c:         for (int i = 0; i < NUMBER_IN_CLUSTER; i++) {
1:d29ca2a:             connections[i] = createConnection(i);
1:d29ca2a:             connections[i].setClientID("ClusterTest" + i);
1:d29ca2a:             connections[i].start();
15:d29ca2a: 
1:d29ca2a:             Session session = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:             producers[i] = session.createProducer(destination);
1:d29ca2a:             producers[i].setDeliveryMode(deliveryMode);
1:d29ca2a:             MessageConsumer consumer = createMessageConsumer(session, destination);
1:3d95025:             messageIdList[i] = new MessageIdList();
1:3d95025:             consumer.setMessageListener(messageIdList[i]);
3:d29ca2a:         }
1:230a86c: 
1:ecf89a6:         LOG.info("Waiting for cluster to be fully connected");
1:230a86c: 
1:230a86c:         // Each connection should see that NUMBER_IN_CLUSTER consumers get
1:230a86c:         // registered on the destination.
1:38f7b12:         ActiveMQDestination advisoryDest = AdvisorySupport.getConsumerAdvisoryTopic(destination);
1:230a86c:         for (int i = 0; i < NUMBER_IN_CLUSTER; i++) {
1:38f7b12:             Session session = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1:38f7b12:             MessageConsumer consumer = createMessageConsumer(session, advisoryDest);
1:230a86c: 
1:230a86c:             int j = 0;
1:230a86c:             while (j < NUMBER_IN_CLUSTER) {
1:230a86c:                 ActiveMQMessage message = (ActiveMQMessage)consumer.receive(1000);
1:230a86c:                 if (message == null) {
1:230a86c:                     fail("Connection " + i + " saw " + j + " consumers, expected: " + NUMBER_IN_CLUSTER);
1:38f7b12:                 }
1:230a86c:                 if (message.getDataStructure() != null && message.getDataStructure().getDataStructureType() == ConsumerInfo.DATA_STRUCTURE_TYPE) {
1:38f7b12:                     j++;
1:38f7b12:                 }
1:38f7b12:             }
1:230a86c: 
1:38f7b12:             session.close();
1:38f7b12:         }
1:230a86c: 
1:ecf89a6:         LOG.info("Cluster is online.");
1:d29ca2a:     }
1:38f7b12: 
1:4743a20:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         if (connections != null) {
1:230a86c:             for (int i = 0; i < connections.length; i++) {
1:d29ca2a:                 connections[i].close();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:38f7b12: 
1:d29ca2a:     protected MessageConsumer createMessageConsumer(Session session, Destination destination) throws JMSException {
1:d29ca2a:         return session.createConsumer(destination);
1:d29ca2a:     }
1:38f7b12: 
1:d29ca2a:     protected Connection createConnection(int i) throws JMSException {
1:ecf89a6:         LOG.info("creating connection ....");
1:230a86c:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("peer://" + getClass().getName() + "/node" + i);
1:d29ca2a:         return fac.createConnection();
1:d29ca2a:     }
1:d29ca2a: 
1:38f7b12:     protected ActiveMQDestination createDestination() {
1:d29ca2a:         return createDestination(getClass().getName());
1:d29ca2a:     }
1:d29ca2a: 
1:38f7b12:     protected ActiveMQDestination createDestination(String name) {
1:d29ca2a:         if (topic) {
1:d29ca2a:             return new ActiveMQTopic(name);
1:230a86c:         } else {
1:d29ca2a:             return new ActiveMQQueue(name);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testSendReceive() throws Exception {
1:230a86c:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:230a86c:             for (int x = 0; x < producers.length; x++) {
1:d29ca2a:                 TextMessage textMessage = new ActiveMQTextMessage();
1:d29ca2a:                 textMessage.setText("MSG-NO: " + i + " in cluster: " + x);
1:d29ca2a:                 producers[x].send(textMessage);
1:d29ca2a:             }
1:d29ca2a:         }
1:230a86c: 
1:230a86c:         for (int i = 0; i < NUMBER_IN_CLUSTER; i++) {
1:3d95025:             messageIdList[i].assertMessagesReceived(expectedReceiveCount());
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected int expectedReceiveCount() {
1:d29ca2a:         return MESSAGE_COUNT * NUMBER_IN_CLUSTER;
1:86cbdfd:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(PeerTransportTest.class);
1:     
1:     protected ActiveMQDestination destination;
1:     protected boolean topic = true;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Waiting for cluster to be fully connected");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Cluster is online.");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("creating connection ....");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < NUMBER_IN_CLUSTER; i++) {
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         // Each connection should see that NUMBER_IN_CLUSTER consumers get
1:         // registered on the destination.
1:         for (int i = 0; i < NUMBER_IN_CLUSTER; i++) {
1: 
1:             int j = 0;
1:             while (j < NUMBER_IN_CLUSTER) {
1:                 ActiveMQMessage message = (ActiveMQMessage)consumer.receive(1000);
1:                 if (message == null) {
1:                     fail("Connection " + i + " saw " + j + " consumers, expected: " + NUMBER_IN_CLUSTER);
1:                 if (message.getDataStructure() != null && message.getDataStructure().getDataStructureType() == ConsumerInfo.DATA_STRUCTURE_TYPE) {
1: 
1: 
1:             for (int i = 0; i < connections.length; i++) {
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("peer://" + getClass().getName() + "/node" + i);
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             for (int x = 0; x < producers.length; x++) {
1: 
1:         for (int i = 0; i < NUMBER_IN_CLUSTER; i++) {
1: 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Waiting for cluster to be fully connected");
/////////////////////////////////////////////////////////////////////////
0:         log.info("Cluster is online.");
commit:38f7b12
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ConsumerInfo;
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Message;
/////////////////////////////////////////////////////////////////////////
0:     protected ActiveMQDestination destination;
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination destination = createDestination();
1:         
/////////////////////////////////////////////////////////////////////////
1:         
0:         System.out.println("Waiting for cluster to be fully connected");
1:         
0:         // Each connection should see that NUMBER_IN_CLUSTER consumers get registered on the destination.
1:         ActiveMQDestination advisoryDest = AdvisorySupport.getConsumerAdvisoryTopic(destination);
0:         for (int i = 0;i < NUMBER_IN_CLUSTER;i++) {
1:             Session session = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer consumer = createMessageConsumer(session, advisoryDest);
1:             
0:             int j=0;
0:             while(j < NUMBER_IN_CLUSTER) {
0:                 ActiveMQMessage message = (ActiveMQMessage) consumer.receive(1000);
0:                 if( message == null ) {
0:                     fail("Connection "+i+" saw "+j+" consumers, expected: "+NUMBER_IN_CLUSTER);
1:                 }
0:                 if( message.getDataStructure()!=null && message.getDataStructure().getDataStructureType()==ConsumerInfo.DATA_STRUCTURE_TYPE ) {
1:                     j++;
1:                 }
1:             }
1:             
1:             session.close();
1:         }
1:         
0:         System.out.println("Cluster is online.");
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQDestination createDestination() {
1:     protected ActiveMQDestination createDestination(String name) {
commit:3d95025
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.MessageIdList;
/////////////////////////////////////////////////////////////////////////
1:     protected MessageIdList messageIdList[];
1:         messageIdList = new MessageIdList[NUMBER_IN_CLUSTER];
/////////////////////////////////////////////////////////////////////////
1:             messageIdList[i] = new MessageIdList();
1:             consumer.setMessageListener(messageIdList[i]);
/////////////////////////////////////////////////////////////////////////
1:             messageIdList[i].assertMessagesReceived(expectedReceiveCount());
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.peer;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.util.MessageList;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.DeliveryMode;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class PeerTransportTest extends TestCase {
0:     protected Log log = LogFactory.getLog(getClass());
0:     protected Destination destination;
0:     protected boolean topic = true;
0:     protected static int MESSAGE_COUNT = 50;
0:     protected static int NUMBER_IN_CLUSTER = 3;
1:     protected int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:     protected MessageProducer[] producers;
1:     protected Connection[] connections;
0:     protected MessageList messageList[];
1: 
1:     protected void setUp() throws Exception {
1:         
1:         connections = new Connection[NUMBER_IN_CLUSTER];
1:         producers = new MessageProducer[NUMBER_IN_CLUSTER];
0:         messageList = new MessageList[NUMBER_IN_CLUSTER];
0:         Destination destination = createDestination();
1: 
0:         String root = System.getProperty("activemq.store.dir");
1: 
0:         for (int i = 0;i < NUMBER_IN_CLUSTER;i++) {
1:             connections[i] = createConnection(i);
1:             connections[i].setClientID("ClusterTest" + i);
1:             connections[i].start();
1: 
1:             Session session = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             producers[i] = session.createProducer(destination);
1:             producers[i].setDeliveryMode(deliveryMode);
1:             MessageConsumer consumer = createMessageConsumer(session, destination);
0:             messageList[i] = new MessageList();
0:             consumer.setMessageListener(messageList[i]);
1:         }
0:         System.out.println("Sleeping to ensure cluster is fully connected");
0:         Thread.sleep(10000);
0:         System.out.println("Finished sleeping");
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connections != null) {
0:             for (int i = 0;i < connections.length;i++) {
1:                 connections[i].close();
1:             }
1:         }
1:     }
1: 
1:     protected MessageConsumer createMessageConsumer(Session session, Destination destination) throws JMSException {
1:         return session.createConsumer(destination);
1:     }
1: 
1:     protected Connection createConnection(int i) throws JMSException {
0:         System.err.println("creating connection ....");
0:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("peer://" + getClass().getName()+"/node"+i);
1:         return fac.createConnection();
1:     }
1: 
0:     protected Destination createDestination() {
1:         return createDestination(getClass().getName());
1:     }
1: 
0:     protected Destination createDestination(String name) {
1:         if (topic) {
1:             return new ActiveMQTopic(name);
1:         }
0:         else {
1:             return new ActiveMQQueue(name);
1:         }
1:     }
1: 
1: 
1:     /**
1:      * @throws Exception
1:      */
1:     public void testSendReceive() throws Exception {
0:         for (int i = 0;i < MESSAGE_COUNT;i++) {
0:             for (int x = 0;x < producers.length;x++) {
1:                 TextMessage textMessage = new ActiveMQTextMessage();
1:                 textMessage.setText("MSG-NO: " + i + " in cluster: " + x);
1:                 producers[x].send(textMessage);
1:             }
1:         }
1:         
0:         for (int i = 0;i < NUMBER_IN_CLUSTER;i++) {
0:             messageList[i].assertMessagesReceived(expectedReceiveCount());
1:         }
1:     }
1:     
1:     protected int expectedReceiveCount() {
1:         return MESSAGE_COUNT * NUMBER_IN_CLUSTER;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(PeerTransportTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:     protected static final int MESSAGE_COUNT = 50;
1:     protected static final int NUMBER_IN_CLUSTER = 3;
author:James Strachan
-------------------------------------------------------------------------------
commit:2faad43
/////////////////////////////////////////////////////////////////////////
0:         log.info("creating connection ....");
============================================================================