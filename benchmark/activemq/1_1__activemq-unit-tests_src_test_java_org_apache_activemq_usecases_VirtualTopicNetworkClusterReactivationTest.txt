1:aa32dbd: /**
1:aa32dbd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:aa32dbd:  * contributor license agreements.  See the NOTICE file distributed with
1:aa32dbd:  * this work for additional information regarding copyright ownership.
1:aa32dbd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:aa32dbd:  * (the "License"); you may not use this file except in compliance with
1:aa32dbd:  * the License.  You may obtain a copy of the License at
1:aa32dbd:  *
1:aa32dbd:  * http://www.apache.org/licenses/LICENSE-2.0
1:aa32dbd:  *
1:aa32dbd:  * Unless required by applicable law or agreed to in writing, software
1:aa32dbd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:aa32dbd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aa32dbd:  * See the License for the specific language governing permissions and
1:aa32dbd:  * limitations under the License.
1:aa32dbd:  */
1:aa32dbd: package org.apache.activemq.usecases;
1:aa32dbd: 
1:aa32dbd: import org.apache.activemq.ActiveMQConnectionFactory;
1:aa32dbd: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:aa32dbd: import org.apache.activemq.broker.BrokerService;
1:aa32dbd: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:aa32dbd: import org.apache.activemq.broker.region.policy.PolicyMap;
1:aa32dbd: import org.apache.activemq.command.ActiveMQDestination;
1:aa32dbd: import org.apache.activemq.command.ActiveMQQueue;
1:aa32dbd: import org.apache.activemq.command.ActiveMQTopic;
1:aa32dbd: import org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory;
1:aa32dbd: 
1:aa32dbd: import javax.jms.*;
1:aa32dbd: import java.net.URI;
1:aa32dbd: 
1:aa32dbd: /**
1:aa32dbd:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:aa32dbd:  */
1:aa32dbd: public class VirtualTopicNetworkClusterReactivationTest extends JmsMultipleBrokersTestSupport {
1:aa32dbd: 
1:aa32dbd:     private static final String BROKER_A = "brokerA";
1:aa32dbd:     private static final String BROKER_B = "brokerB";
1:aa32dbd:     private static final String BROKER_A_TRANSPORT_URL = "tcp://localhost:61616";
1:aa32dbd:     private static final String BROKER_B_TRANSPORT_URL = "tcp://localhost:61617";
1:aa32dbd:     private static final long DEFAULT_SLEEP_MS = 1000;
1:aa32dbd: 
1:aa32dbd:     private ActiveMQTopic topic = new ActiveMQTopic("VirtualTopic.FOO.TEST");
1:aa32dbd:     private ActiveMQQueue queue = new ActiveMQQueue("Consumer.FOO.VirtualTopic.FOO.TEST");
1:aa32dbd: 
1:aa32dbd: 
1:aa32dbd:     /**
1:aa32dbd:      * This test shows how to use pub/sub to mimic durable subscribers in a network of brokers.
1:aa32dbd:      *
1:aa32dbd:      * When using durable subscribers in a broker cluster, you can encounter a situation where a
1:aa32dbd:      * subscription gets orphaned on a broker when the client disconnects and reattaches to another
1:aa32dbd:      * broker in the cluster. Since the clientID/durableName only need to be unique within a single
1:aa32dbd:      * broker, it's possible to have a durable sub on multiple brokers in a cluster.
1:aa32dbd:      *
1:aa32dbd:      * FOR EXAMPLE:
1:aa32dbd:      * Broker A and B are networked together in both directions to form a full mesh. If durable
1:aa32dbd:      * subscriber 'foo' subscribes to failover(A,B) and ends up on B, and a producer on A, messages
1:aa32dbd:      * will be demand forwarded from A to B. But if the durable sub 'foo' disconnects from B,
1:aa32dbd:      * then reconnects to failover(A,B) but this time gets connected to A, the subscription on
1:aa32dbd:      * B will still be there are continue to receive messages (and possibly have missed messages
1:aa32dbd:      * sent there while gone)
1:aa32dbd:      *
1:aa32dbd:      * We can avoid all of this mess with virtual topics as seen below:
1:aa32dbd:      *
1:aa32dbd:      *
1:aa32dbd:      * @throws JMSException
1:aa32dbd:      */
1:aa32dbd:     public void testDurableSubReconnectFromAtoB() throws JMSException {
1:aa32dbd:         // create consumer on broker B
1:aa32dbd:         ActiveMQConnectionFactory bConnFactory = new ActiveMQConnectionFactory(BROKER_B_TRANSPORT_URL+ "?jms.prefetchPolicy.queuePrefetch=0");
1:aa32dbd:         Connection bConn = bConnFactory.createConnection();
1:aa32dbd:         bConn.start();
1:aa32dbd:         Session bSession = bConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:aa32dbd:         MessageConsumer bSessionConsumer = bSession.createConsumer(queue);
1:aa32dbd: 
1:aa32dbd: 
1:aa32dbd:         // create producer on A
1:aa32dbd:         ActiveMQConnectionFactory aConnFactory = new ActiveMQConnectionFactory(BROKER_A_TRANSPORT_URL);
1:aa32dbd:         Connection aProducerConn = aConnFactory.createConnection();
1:aa32dbd:         aProducerConn.start();
1:aa32dbd: 
1:aa32dbd:         Session aProducerSession = aProducerConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:aa32dbd:         MessageProducer producer = aProducerSession.createProducer(topic);
1:aa32dbd:         produce(producer, aProducerSession, 5);
1:aa32dbd: 
1:aa32dbd:         // sleep for a sec to let the messages get bridged over to broker B
1:aa32dbd:         sleep();
1:aa32dbd: 
1:aa32dbd:         // consumer on B has not consumed any messages, and for some reason goes away:
1:aa32dbd:         bSessionConsumer.close();
1:aa32dbd:         bSession.close();
1:aa32dbd:         bConn.close();
1:aa32dbd: 
1:aa32dbd:         // let the bridge catch up
1:aa32dbd:         sleep();
1:aa32dbd: 
1:aa32dbd:         // and now consumer reattaches to A and wants the messages that were sent to B
1:aa32dbd:         Connection aConsumerConn = aConnFactory.createConnection();
1:aa32dbd:         aConsumerConn.start();
1:aa32dbd:         Session aConsumerSession = aConsumerConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:aa32dbd:         MessageConsumer aSessionConsumer = aConsumerSession.createConsumer(queue);
1:aa32dbd: 
1:aa32dbd:         sleep();
1:aa32dbd: 
1:aa32dbd:         // they should all be there
1:aa32dbd:         consume(aSessionConsumer, 5);
1:aa32dbd: 
1:aa32dbd:     }
1:aa32dbd: 
1:aa32dbd: 
1:aa32dbd:     private void consume(MessageConsumer durable, int numMessagesExpected) throws JMSException {
1:aa32dbd:         for (int i = 0; i < numMessagesExpected; i++) {
1:aa32dbd:             Message message = durable.receive(1000);
1:aa32dbd:             assertNotNull(message);
1:aa32dbd:             TextMessage textMessage = (TextMessage) message;
1:aa32dbd:             System.out.println("received: " + textMessage.getText());
1:aa32dbd:             assertEquals("message: " +i, textMessage.getText());
1:aa32dbd:         }
1:aa32dbd:     }
1:aa32dbd: 
1:aa32dbd:     private void produce(MessageProducer producer, Session sess, int numMessages) throws JMSException {
1:aa32dbd:         for (int i = 0; i < numMessages; i++) {
1:aa32dbd:             producer.send(sess.createTextMessage("message: " + i));
1:aa32dbd:         }
1:aa32dbd:     }
1:aa32dbd: 
1:aa32dbd:     @Override
1:aa32dbd:     protected void setUp() throws Exception {
1:aa32dbd:         maxSetupTime = 1000;
1:aa32dbd:         super.setAutoFail(true);
1:aa32dbd:         super.setUp();
1:aa32dbd:         final String options = "?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true";
1:aa32dbd: 
1:aa32dbd:         BrokerService brokerServiceA = createBroker(new URI(String.format("broker:(%s)/%s%s", BROKER_A_TRANSPORT_URL, BROKER_A, options)));
1:aa32dbd:         brokerServiceA.setDestinationPolicy(buildPolicyMap());
1:aa32dbd:         brokerServiceA.setDestinations(new ActiveMQDestination[]{queue});
1:aa32dbd: 
1:aa32dbd:         BrokerService brokerServiceB = createBroker(new URI(String.format("broker:(%s)/%s%s", BROKER_B_TRANSPORT_URL, BROKER_B, options)));
1:aa32dbd:         brokerServiceB.setDestinationPolicy(buildPolicyMap());
1:aa32dbd:         brokerServiceB.setDestinations(new ActiveMQDestination[]{queue});
1:aa32dbd: 
1:aa32dbd: 
1:aa32dbd: 
1:aa32dbd:         // bridge brokers to each other statically (static: discovery)
1:aa32dbd:         bridgeBrokers(BROKER_A, BROKER_B);
1:aa32dbd:         bridgeBrokers(BROKER_B, BROKER_A);
1:aa32dbd: 
1:aa32dbd:         startAllBrokers();
1:aa32dbd:     }
1:aa32dbd: 
1:aa32dbd:     private PolicyMap buildPolicyMap() {
1:aa32dbd:         PolicyMap policyMap = new PolicyMap();
1:aa32dbd:         PolicyEntry policyEntry = new PolicyEntry();
1:aa32dbd:         policyEntry.setOptimizedDispatch(true);
1:aa32dbd:         ConditionalNetworkBridgeFilterFactory networkBridgeFilterFactory = new ConditionalNetworkBridgeFilterFactory();
1:aa32dbd:         networkBridgeFilterFactory.setReplayWhenNoConsumers(true);
1:aa32dbd:         policyEntry.setNetworkBridgeFilterFactory(networkBridgeFilterFactory);
1:aa32dbd:         policyEntry.setEnableAudit(false);
1:aa32dbd:         policyMap.put(new ActiveMQQueue("Consumer.*.VirtualTopic.>"), policyEntry);
1:aa32dbd:         return policyMap;
1:aa32dbd:     }
1:aa32dbd: 
1:aa32dbd:     private void sleep() {
1:aa32dbd:         try {
1:aa32dbd:             Thread.sleep(DEFAULT_SLEEP_MS);
1:aa32dbd:         } catch (InterruptedException igonred) {
1:aa32dbd:         }
1:aa32dbd:     }
1:aa32dbd: 
1:aa32dbd:     private void sleep(int milliSecondTime) {
1:aa32dbd:         try {
1:aa32dbd:             Thread.sleep(milliSecondTime);
1:aa32dbd:         } catch (InterruptedException igonred) {
1:aa32dbd:         }
1:aa32dbd:     }
1:aa32dbd: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:aa32dbd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory;
1: 
1: import javax.jms.*;
1: import java.net.URI;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class VirtualTopicNetworkClusterReactivationTest extends JmsMultipleBrokersTestSupport {
1: 
1:     private static final String BROKER_A = "brokerA";
1:     private static final String BROKER_B = "brokerB";
1:     private static final String BROKER_A_TRANSPORT_URL = "tcp://localhost:61616";
1:     private static final String BROKER_B_TRANSPORT_URL = "tcp://localhost:61617";
1:     private static final long DEFAULT_SLEEP_MS = 1000;
1: 
1:     private ActiveMQTopic topic = new ActiveMQTopic("VirtualTopic.FOO.TEST");
1:     private ActiveMQQueue queue = new ActiveMQQueue("Consumer.FOO.VirtualTopic.FOO.TEST");
1: 
1: 
1:     /**
1:      * This test shows how to use pub/sub to mimic durable subscribers in a network of brokers.
1:      *
1:      * When using durable subscribers in a broker cluster, you can encounter a situation where a
1:      * subscription gets orphaned on a broker when the client disconnects and reattaches to another
1:      * broker in the cluster. Since the clientID/durableName only need to be unique within a single
1:      * broker, it's possible to have a durable sub on multiple brokers in a cluster.
1:      *
1:      * FOR EXAMPLE:
1:      * Broker A and B are networked together in both directions to form a full mesh. If durable
1:      * subscriber 'foo' subscribes to failover(A,B) and ends up on B, and a producer on A, messages
1:      * will be demand forwarded from A to B. But if the durable sub 'foo' disconnects from B,
1:      * then reconnects to failover(A,B) but this time gets connected to A, the subscription on
1:      * B will still be there are continue to receive messages (and possibly have missed messages
1:      * sent there while gone)
1:      *
1:      * We can avoid all of this mess with virtual topics as seen below:
1:      *
1:      *
1:      * @throws JMSException
1:      */
1:     public void testDurableSubReconnectFromAtoB() throws JMSException {
1:         // create consumer on broker B
1:         ActiveMQConnectionFactory bConnFactory = new ActiveMQConnectionFactory(BROKER_B_TRANSPORT_URL+ "?jms.prefetchPolicy.queuePrefetch=0");
1:         Connection bConn = bConnFactory.createConnection();
1:         bConn.start();
1:         Session bSession = bConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer bSessionConsumer = bSession.createConsumer(queue);
1: 
1: 
1:         // create producer on A
1:         ActiveMQConnectionFactory aConnFactory = new ActiveMQConnectionFactory(BROKER_A_TRANSPORT_URL);
1:         Connection aProducerConn = aConnFactory.createConnection();
1:         aProducerConn.start();
1: 
1:         Session aProducerSession = aProducerConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = aProducerSession.createProducer(topic);
1:         produce(producer, aProducerSession, 5);
1: 
1:         // sleep for a sec to let the messages get bridged over to broker B
1:         sleep();
1: 
1:         // consumer on B has not consumed any messages, and for some reason goes away:
1:         bSessionConsumer.close();
1:         bSession.close();
1:         bConn.close();
1: 
1:         // let the bridge catch up
1:         sleep();
1: 
1:         // and now consumer reattaches to A and wants the messages that were sent to B
1:         Connection aConsumerConn = aConnFactory.createConnection();
1:         aConsumerConn.start();
1:         Session aConsumerSession = aConsumerConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer aSessionConsumer = aConsumerSession.createConsumer(queue);
1: 
1:         sleep();
1: 
1:         // they should all be there
1:         consume(aSessionConsumer, 5);
1: 
1:     }
1: 
1: 
1:     private void consume(MessageConsumer durable, int numMessagesExpected) throws JMSException {
1:         for (int i = 0; i < numMessagesExpected; i++) {
1:             Message message = durable.receive(1000);
1:             assertNotNull(message);
1:             TextMessage textMessage = (TextMessage) message;
1:             System.out.println("received: " + textMessage.getText());
1:             assertEquals("message: " +i, textMessage.getText());
1:         }
1:     }
1: 
1:     private void produce(MessageProducer producer, Session sess, int numMessages) throws JMSException {
1:         for (int i = 0; i < numMessages; i++) {
1:             producer.send(sess.createTextMessage("message: " + i));
1:         }
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         maxSetupTime = 1000;
1:         super.setAutoFail(true);
1:         super.setUp();
1:         final String options = "?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true";
1: 
1:         BrokerService brokerServiceA = createBroker(new URI(String.format("broker:(%s)/%s%s", BROKER_A_TRANSPORT_URL, BROKER_A, options)));
1:         brokerServiceA.setDestinationPolicy(buildPolicyMap());
1:         brokerServiceA.setDestinations(new ActiveMQDestination[]{queue});
1: 
1:         BrokerService brokerServiceB = createBroker(new URI(String.format("broker:(%s)/%s%s", BROKER_B_TRANSPORT_URL, BROKER_B, options)));
1:         brokerServiceB.setDestinationPolicy(buildPolicyMap());
1:         brokerServiceB.setDestinations(new ActiveMQDestination[]{queue});
1: 
1: 
1: 
1:         // bridge brokers to each other statically (static: discovery)
1:         bridgeBrokers(BROKER_A, BROKER_B);
1:         bridgeBrokers(BROKER_B, BROKER_A);
1: 
1:         startAllBrokers();
1:     }
1: 
1:     private PolicyMap buildPolicyMap() {
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setOptimizedDispatch(true);
1:         ConditionalNetworkBridgeFilterFactory networkBridgeFilterFactory = new ConditionalNetworkBridgeFilterFactory();
1:         networkBridgeFilterFactory.setReplayWhenNoConsumers(true);
1:         policyEntry.setNetworkBridgeFilterFactory(networkBridgeFilterFactory);
1:         policyEntry.setEnableAudit(false);
1:         policyMap.put(new ActiveMQQueue("Consumer.*.VirtualTopic.>"), policyEntry);
1:         return policyMap;
1:     }
1: 
1:     private void sleep() {
1:         try {
1:             Thread.sleep(DEFAULT_SLEEP_MS);
1:         } catch (InterruptedException igonred) {
1:         }
1:     }
1: 
1:     private void sleep(int milliSecondTime) {
1:         try {
1:             Thread.sleep(milliSecondTime);
1:         } catch (InterruptedException igonred) {
1:         }
1:     }
1: }
============================================================================