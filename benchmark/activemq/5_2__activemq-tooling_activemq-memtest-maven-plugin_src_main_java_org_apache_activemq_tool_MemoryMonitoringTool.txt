1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool;
6:a88906f: 
1:a88906f: import java.io.DataOutputStream;
1:a88906f: import java.lang.management.ManagementFactory;
1:540dd5c: import java.lang.management.MemoryMXBean;
1:540dd5c: import java.util.Properties;
1:540dd5c: import java.util.concurrent.atomic.AtomicBoolean;
1:a88906f: 
1:a88906f: public class MemoryMonitoringTool implements Runnable {
1:a88906f: 
1:a88906f:     protected Properties testSettings = new Properties();
1:a88906f:     protected ReportGenerator reportGenerator = new ReportGenerator();
1:540dd5c: 
1:540dd5c:     private long checkpointInterval = 5000;          // 5 sec sample checkpointInterval
1:540dd5c:     private long resultIndex;
1:540dd5c:     private AtomicBoolean isRunning = new AtomicBoolean(false);
1:540dd5c:     private DataOutputStream dataDoutputStream;
1:a88906f:     private MemoryMXBean memoryBean;
1:a88906f: 
1:a88906f:     public Properties getTestSettings() {
1:a88906f:         return testSettings;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setTestSettings(Properties sysTestSettings) {
1:a88906f:         this.testSettings = sysTestSettings;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public DataOutputStream getDataOutputStream() {
1:a88906f:         return dataDoutputStream;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setDataOutputStream(DataOutputStream dataDoutputStream) {
1:a88906f:         this.dataDoutputStream = dataDoutputStream;
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f:     public void stopMonitor() {
1:a88906f:         isRunning.set(false);
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f:     public long getCheckpointInterval() {
1:a88906f:         return checkpointInterval;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setCheckpointInterval(long checkpointInterval) {
1:a88906f:         this.checkpointInterval = checkpointInterval;
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f:     public Thread startMonitor() {
1:a88906f: 
1:a88906f:         String intervalStr = this.getTestSettings().getProperty("checkpoint_interval");
1:a88906f:         checkpointInterval = new Integer(intervalStr).intValue();
1:a88906f:         this.getTestSettings().remove("checkpoint_interval");
1:a88906f: 
1:a88906f:         memoryBean = ManagementFactory.getMemoryMXBean();
1:a88906f:         reportGenerator.setTestSettings(getTestSettings());
1:a88906f:         addTestInformation();
1:a88906f: 
1:a88906f:         Thread t = new Thread(this);
1:a88906f:         t.setName("Memory monitoring tool");
1:a88906f:         isRunning.set(true);
1:a88906f:         t.start();
1:a88906f: 
1:a88906f:         return t;
1:a88906f: 
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f:     public void addTestInformation() {
1:a88906f:         reportGenerator.setReportName(this.getTestSettings().getProperty("report_name"));
1:a88906f:         reportGenerator.setReportDirectory(this.getTestSettings().getProperty("report_directory"));
1:a88906f:         reportGenerator.startGenerateReport();
1:a88906f: 
1:a88906f:         reportGenerator.addTestInformation();
1:a88906f:         reportGenerator.writeWithIndent(4, "<jvm_memory_settings>");
1:a88906f:         reportGenerator.writeWithIndent(6, "<heap_memory>");
1:a88906f:         reportGenerator.writeWithIndent(8, "<committed>" + memoryBean.getHeapMemoryUsage().getCommitted() + "</committed>");
1:a88906f:         reportGenerator.writeWithIndent(8, "<max>" + memoryBean.getHeapMemoryUsage().getMax() + "</max>");
1:a88906f:         reportGenerator.writeWithIndent(6, "</heap_memory>");
1:a88906f:         reportGenerator.writeWithIndent(6, "<non_heap_memory>");
1:a88906f:         reportGenerator.writeWithIndent(8, "<committed>" + memoryBean.getNonHeapMemoryUsage().getCommitted() + "</committed>");
1:a88906f:         reportGenerator.writeWithIndent(8, "<max>" + memoryBean.getNonHeapMemoryUsage().getMax() + "</max>");
1:a88906f:         reportGenerator.writeWithIndent(6, "</non_heap_memory>");
1:a88906f:         reportGenerator.writeWithIndent(4, "</jvm_memory_settings>");
1:a88906f: 
1:a88906f:         reportGenerator.addClientSettings();
1:a88906f:         reportGenerator.endTestInformation();
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f:     public void run() {
1:a88906f: 
1:a88906f:         long nonHeapMB = 0;
1:a88906f:         long heapMB = 0;
1:a88906f:         long oneMB = 1024 * 1024;
1:a88906f: 
1:a88906f:         reportGenerator.startTestResult(getCheckpointInterval());
1:a88906f:         while (isRunning.get()) {
1:a88906f: 
1:a88906f:             try {
1:a88906f:                 //wait every check point before getting the next memory usage
1:a88906f:                 Thread.sleep(checkpointInterval);
1:a88906f: 
1:a88906f:                 nonHeapMB = memoryBean.getNonHeapMemoryUsage().getUsed() / oneMB;
1:a88906f:                 heapMB = memoryBean.getHeapMemoryUsage().getUsed() / oneMB;
1:a88906f: 
1:8f55d40:                 reportGenerator.writeWithIndent(6, "<memory_usage index='" + resultIndex
1:8f55d40:                                                 + "' non_heap_mb='" + nonHeapMB
1:8f55d40:                                                 + "' non_heap_bytes='"
1:8f55d40:                                                 + memoryBean.getNonHeapMemoryUsage().getUsed()
1:8f55d40:                                                 + "' heap_mb='" + heapMB
1:8f55d40:                                                 + "' heap_bytes='" + memoryBean.getHeapMemoryUsage().getUsed() + "'/>");
1:a88906f: 
1:a88906f:                 resultIndex++;
1:a88906f: 
1:a88906f:             } catch (Exception e) {
1:a88906f:                 e.printStackTrace();
1:a88906f: 
1:a88906f:             }
1:a88906f: 
1:a88906f: 
1:a88906f:         }
1:a88906f:         reportGenerator.endTestResult();
1:a88906f:         reportGenerator.stopGenerateReport();
1:a88906f: 
1:a88906f:     }
1:a88906f: 
1:a88906f: 
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Robert Davies
-------------------------------------------------------------------------------
commit:8f55d40
/////////////////////////////////////////////////////////////////////////
1:                 reportGenerator.writeWithIndent(6, "<memory_usage index='" + resultIndex
1:                                                 + "' non_heap_mb='" + nonHeapMB
1:                                                 + "' non_heap_bytes='"
1:                                                 + memoryBean.getNonHeapMemoryUsage().getUsed()
1:                                                 + "' heap_mb='" + heapMB
1:                                                 + "' heap_bytes='" + memoryBean.getHeapMemoryUsage().getUsed() + "'/>");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.lang.management.MemoryMXBean;
1: import java.util.Properties;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1:     private long checkpointInterval = 5000;          // 5 sec sample checkpointInterval
1:     private long resultIndex;
1:     private AtomicBoolean isRunning = new AtomicBoolean(false);
1:     private DataOutputStream dataDoutputStream;
/////////////////////////////////////////////////////////////////////////
0:                 reportGenerator.writeWithIndent(6, "<memory_usage index=" + resultIndex 
0:                                                 + " non_heap_mb=" + nonHeapMB 
0:                                                 + " non_heap_bytes=" 
0:                                                 + memoryBean.getNonHeapMemoryUsage().getUsed() 
0:                                                 + " heap_mb=" + heapMB 
0:                                                 + " heap_bytes=" + memoryBean.getHeapMemoryUsage().getUsed() + "/>");
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
1: 
1: import java.io.DataOutputStream;
0: import java.util.Properties;
0: import java.lang.management.MemoryMXBean;
1: import java.lang.management.ManagementFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: public class MemoryMonitoringTool implements Runnable {
1: 
0:     private long checkpointInterval = 5000;          // 5 sec sample checkpointInterval
0:     private long resultIndex = 0;
1: 
0:     private AtomicBoolean isRunning = new AtomicBoolean(false);
0:     private DataOutputStream dataDoutputStream = null;
1: 
1:     protected Properties testSettings = new Properties();
1:     protected ReportGenerator reportGenerator = new ReportGenerator();
1:     private MemoryMXBean memoryBean;
1: 
1:     public Properties getTestSettings() {
1:         return testSettings;
1:     }
1: 
1:     public void setTestSettings(Properties sysTestSettings) {
1:         this.testSettings = sysTestSettings;
1:     }
1: 
1:     public DataOutputStream getDataOutputStream() {
1:         return dataDoutputStream;
1:     }
1: 
1:     public void setDataOutputStream(DataOutputStream dataDoutputStream) {
1:         this.dataDoutputStream = dataDoutputStream;
1:     }
1: 
1: 
1:     public void stopMonitor() {
1:         isRunning.set(false);
1:     }
1: 
1: 
1:     public long getCheckpointInterval() {
1:         return checkpointInterval;
1:     }
1: 
1:     public void setCheckpointInterval(long checkpointInterval) {
1:         this.checkpointInterval = checkpointInterval;
1:     }
1: 
1: 
1:     public Thread startMonitor() {
1: 
1:         String intervalStr = this.getTestSettings().getProperty("checkpoint_interval");
1:         checkpointInterval = new Integer(intervalStr).intValue();
1:         this.getTestSettings().remove("checkpoint_interval");
1: 
1:         memoryBean = ManagementFactory.getMemoryMXBean();
1:         reportGenerator.setTestSettings(getTestSettings());
1:         addTestInformation();
1: 
1:         Thread t = new Thread(this);
1:         t.setName("Memory monitoring tool");
1:         isRunning.set(true);
1:         t.start();
1: 
1:         return t;
1: 
1:     }
1: 
1: 
1:     public void addTestInformation() {
1:         reportGenerator.setReportName(this.getTestSettings().getProperty("report_name"));
1:         reportGenerator.setReportDirectory(this.getTestSettings().getProperty("report_directory"));
1:         reportGenerator.startGenerateReport();
1: 
1:         reportGenerator.addTestInformation();
1:         reportGenerator.writeWithIndent(4, "<jvm_memory_settings>");
1:         reportGenerator.writeWithIndent(6, "<heap_memory>");
1:         reportGenerator.writeWithIndent(8, "<committed>" + memoryBean.getHeapMemoryUsage().getCommitted() + "</committed>");
1:         reportGenerator.writeWithIndent(8, "<max>" + memoryBean.getHeapMemoryUsage().getMax() + "</max>");
1:         reportGenerator.writeWithIndent(6, "</heap_memory>");
1:         reportGenerator.writeWithIndent(6, "<non_heap_memory>");
1:         reportGenerator.writeWithIndent(8, "<committed>" + memoryBean.getNonHeapMemoryUsage().getCommitted() + "</committed>");
1:         reportGenerator.writeWithIndent(8, "<max>" + memoryBean.getNonHeapMemoryUsage().getMax() + "</max>");
1:         reportGenerator.writeWithIndent(6, "</non_heap_memory>");
1:         reportGenerator.writeWithIndent(4, "</jvm_memory_settings>");
1: 
1:         reportGenerator.addClientSettings();
1:         reportGenerator.endTestInformation();
1:     }
1: 
1: 
1:     public void run() {
1: 
1:         long nonHeapMB = 0;
1:         long heapMB = 0;
1:         long oneMB = 1024 * 1024;
1: 
1:         reportGenerator.startTestResult(getCheckpointInterval());
1:         while (isRunning.get()) {
1: 
1:             try {
1:                 //wait every check point before getting the next memory usage
1:                 Thread.sleep(checkpointInterval);
1: 
1:                 nonHeapMB = memoryBean.getNonHeapMemoryUsage().getUsed() / oneMB;
1:                 heapMB = memoryBean.getHeapMemoryUsage().getUsed() / oneMB;
1: 
0:                 reportGenerator.writeWithIndent(6, "<memory_usage index=" + resultIndex + " non_heap_mb=" + nonHeapMB + " non_heap_bytes=" + memoryBean.getNonHeapMemoryUsage().getUsed() + " heap_mb=" + heapMB + " heap_bytes=" + memoryBean.getHeapMemoryUsage().getUsed() + "/>");
1: 
1:                 resultIndex++;
1: 
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1: 
1:             }
1: 
1: 
1:         }
1:         reportGenerator.endTestResult();
1:         reportGenerator.stopGenerateReport();
1: 
1:     }
1: 
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:2054392
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: 
0: 
0: import java.io.DataOutputStream;
0: import java.util.Properties;
0: import java.lang.management.MemoryMXBean;
0: import java.lang.management.ManagementFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: 
0: public class MemoryMonitoringTool implements Runnable {
0: 
0:     private long checkpointInterval = 5000;          // 5 sec sample checkpointInterval
0:     private long resultIndex = 0;
0: 
0:     private AtomicBoolean isRunning = new AtomicBoolean(false);
0:     private DataOutputStream dataDoutputStream = null;
0: 
0:     protected Properties testSettings = new Properties();
0:     protected ReportGenerator reportGenerator = new ReportGenerator();
0:     private MemoryMXBean memoryBean;
0: 
0:     public Properties getTestSettings() {
0:         return testSettings;
0:     }
0: 
0:     public void setTestSettings(Properties sysTestSettings) {
0:         this.testSettings = sysTestSettings;
0:     }
0: 
0:     public DataOutputStream getDataOutputStream() {
0:         return dataDoutputStream;
0:     }
0: 
0:     public void setDataOutputStream(DataOutputStream dataDoutputStream) {
0:         this.dataDoutputStream = dataDoutputStream;
0:     }
0: 
0: 
0:     public void stopMonitor() {
0:         isRunning.set(false);
0:     }
0: 
0: 
0:     public long getCheckpointInterval() {
0:         return checkpointInterval;
0:     }
0: 
0:     public void setCheckpointInterval(long checkpointInterval) {
0:         this.checkpointInterval = checkpointInterval;
0:     }
0: 
0: 
0:     public Thread startMonitor() {
0: 
0:         String intervalStr = this.getTestSettings().getProperty("checkpoint_interval");
0:         checkpointInterval = new Integer(intervalStr).intValue();
0:         this.getTestSettings().remove("checkpoint_interval");
0: 
0:         memoryBean = ManagementFactory.getMemoryMXBean();
0:         reportGenerator.setTestSettings(getTestSettings());
0:         addTestInformation();
0: 
0:         Thread t = new Thread(this);
0:         t.setName("Memory monitoring tool");
0:         isRunning.set(true);
0:         t.start();
0: 
0:         return t;
0: 
0:     }
0: 
0: 
0:     public void addTestInformation() {
0:         reportGenerator.setReportName(this.getTestSettings().getProperty("report_name"));
0:         reportGenerator.setReportDirectory(this.getTestSettings().getProperty("report_directory"));
0:         reportGenerator.startGenerateReport();
0: 
0:         reportGenerator.addTestInformation();
0:         reportGenerator.writeWithIndent(4, "<jvm_memory_settings>");
0:         reportGenerator.writeWithIndent(6, "<heap_memory>");
0:         reportGenerator.writeWithIndent(8, "<committed>" + memoryBean.getHeapMemoryUsage().getCommitted() + "</committed>");
0:         reportGenerator.writeWithIndent(8, "<max>" + memoryBean.getHeapMemoryUsage().getMax() + "</max>");
0:         reportGenerator.writeWithIndent(6, "</heap_memory>");
0:         reportGenerator.writeWithIndent(6, "<non_heap_memory>");
0:         reportGenerator.writeWithIndent(8, "<committed>" + memoryBean.getNonHeapMemoryUsage().getCommitted() + "</committed>");
0:         reportGenerator.writeWithIndent(8, "<max>" + memoryBean.getNonHeapMemoryUsage().getMax() + "</max>");
0:         reportGenerator.writeWithIndent(6, "</non_heap_memory>");
0:         reportGenerator.writeWithIndent(4, "</jvm_memory_settings>");
0: 
0:         reportGenerator.addClientSettings();
0:         reportGenerator.endTestInformation();
0:     }
0: 
0: 
0:     public void run() {
0: 
0:         long nonHeapMB = 0;
0:         long heapMB = 0;
0:         long oneMB = 1024 * 1024;
0: 
0:         reportGenerator.startTestResult(getCheckpointInterval());
0:         while (isRunning.get()) {
0: 
0:             try {
0:                 //wait every check point before getting the next memory usage
0:                 Thread.sleep(checkpointInterval);
0: 
0:                 nonHeapMB = memoryBean.getNonHeapMemoryUsage().getUsed() / oneMB;
0:                 heapMB = memoryBean.getHeapMemoryUsage().getUsed() / oneMB;
0: 
0:                 reportGenerator.writeWithIndent(6, "<memory_usage index=" + resultIndex + " non_heap_mb=" + nonHeapMB + " non_heap_bytes=" + memoryBean.getNonHeapMemoryUsage().getUsed() + " heap_mb=" + heapMB + " heap_bytes=" + memoryBean.getHeapMemoryUsage().getUsed() + "/>");
0: 
0:                 resultIndex++;
0: 
0:             } catch (Exception e) {
0:                 e.printStackTrace();
0: 
0:             }
0: 
0: 
0:         }
0:         reportGenerator.endTestResult();
0:         reportGenerator.stopGenerateReport();
0: 
0:     }
0: 
0: 
0: }
============================================================================