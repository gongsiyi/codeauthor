1:6595dc4: /**
1:6595dc4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6595dc4:  * contributor license agreements.  See the NOTICE file distributed with
1:6595dc4:  * this work for additional information regarding copyright ownership.
1:6595dc4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6595dc4:  * (the "License"); you may not use this file except in compliance with
1:6595dc4:  * the License.  You may obtain a copy of the License at
1:6595dc4:  *
1:6595dc4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6595dc4:  *
1:6595dc4:  * Unless required by applicable law or agreed to in writing, software
1:6595dc4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6595dc4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6595dc4:  * See the License for the specific language governing permissions and
1:6595dc4:  * limitations under the License.
1:6595dc4:  */
1:6595dc4: 
1:6595dc4: package org.apache.activemq.bugs;
1:6595dc4: 
1:6595dc4: import java.io.IOException;
1:6595dc4: 
1:6595dc4: import javax.jms.MessageProducer;
1:6595dc4: import javax.jms.Session;
1:6595dc4: 
1:6595dc4: import org.apache.activemq.ActiveMQConnection;
1:6595dc4: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:6595dc4: import org.apache.activemq.broker.BrokerService;
1:6595dc4: import org.apache.activemq.command.ShutdownInfo;
1:6595dc4: import org.apache.activemq.transport.Transport;
1:6595dc4: import org.apache.activemq.transport.TransportFactory;
1:6595dc4: import org.apache.activemq.transport.TransportListener;
1:6595dc4: import org.apache.commons.logging.Log;
1:6595dc4: import org.apache.commons.logging.LogFactory;
1:6595dc4: 
1:6595dc4: public class VMTransportClosureTest extends EmbeddedBrokerTestSupport {
1:6595dc4: 	private static final Log LOG = LogFactory
1:6595dc4: 			.getLog(VMTransportClosureTest.class);
1:6595dc4: 	private static final long MAX_TEST_TIME_MILLIS = 300000; // 5min
1:6595dc4: 	private static final int NUM_ATTEMPTS = 100000;
1:6595dc4: 
1:6595dc4: 	public void setUp() throws Exception {
1:6595dc4: 		setAutoFail(true);
1:6595dc4: 		setMaxTestTime(MAX_TEST_TIME_MILLIS);
1:6595dc4: 		super.setUp();
1:6595dc4: 	}
1:6595dc4: 
1:6595dc4: 	/**
1:6595dc4: 	 * EmbeddedBrokerTestSupport.createBroker() binds the broker to a VM
1:6595dc4: 	 * transport address, which results in a call to
1:6595dc4: 	 * VMTransportFactory.doBind(location):
1:6595dc4: 	 * <p>
1:6595dc4: 	 * <code>
1:6595dc4: 	 *     public TransportServer doBind(URI location) throws IOException {
1:6595dc4: 	 *        return bind(location, false);
1:6595dc4: 	 *}
1:6595dc4: 	 *</code>
1:6595dc4: 	 * </p>
1:6595dc4: 	 * As a result, VMTransportServer.disposeOnDisconnect is <code>false</code>.
1:6595dc4: 	 * To expose the bug, we need to have VMTransportServer.disposeOnDisconnect
1:6595dc4: 	 * <code>true</code>, which is the case when the VMTransportServer is not
1:6595dc4: 	 * already bound when the first connection is made.
1:6595dc4: 	 */
1:6595dc4: 	@Override
1:6595dc4: 	protected BrokerService createBroker() throws Exception {
1:6595dc4: 		BrokerService answer = new BrokerService();
1:6595dc4: 		answer.setPersistent(isPersistent());
1:6595dc4: 		// answer.addConnector(bindAddress);
1:6595dc4: 		return answer;
1:6595dc4: 	}
1:6595dc4: 
1:6595dc4: 	/**
1:6595dc4: 	 * This test demonstrates how the "disposeOnDisonnect" feature of
1:6595dc4: 	 * VMTransportServer can incorrectly close all VM connections to the local
1:6595dc4: 	 * broker.
1:6595dc4: 	 */
1:6595dc4: 	public void testPrematureClosure() throws Exception {
1:6595dc4: 
1:6595dc4: 		// Open a persistent connection to the local broker. The persistent
1:6595dc4: 		// connection is maintained through the test and should prevent the
1:6595dc4: 		// VMTransportServer from stopping itself when the local transport is
1:6595dc4: 		// closed.
1:6595dc4: 		ActiveMQConnection persistentConn = (ActiveMQConnection) createConnection();
1:6595dc4: 		persistentConn.start();
1:6595dc4: 		Session session = persistentConn.createSession(true,
1:6595dc4: 				Session.SESSION_TRANSACTED);
1:6595dc4: 		MessageProducer producer = session.createProducer(destination);
1:6595dc4: 
1:6595dc4: 		for (int i = 0; i < NUM_ATTEMPTS; i++) {
1:6595dc4: 			LOG.info("Attempt: " + i);
1:6595dc4: 
1:6595dc4: 			// Open and close a local transport connection. As is done by by
1:6595dc4: 			// most users of the transport, ensure that the transport is stopped
1:6595dc4: 			// when closed by the peer (via ShutdownInfo). Closing the local
1:6595dc4: 			// transport should not affect the persistent connection.
1:6595dc4: 			final Transport localTransport = TransportFactory.connect(broker
1:6595dc4: 					.getVmConnectorURI());
1:6595dc4: 			localTransport.setTransportListener(new TransportListener() {
1:6595dc4: 				public void onCommand(Object command) {
1:6595dc4: 					if (command instanceof ShutdownInfo) {
1:6595dc4: 						try {
1:6595dc4: 							localTransport.stop();
1:6595dc4: 						} catch (Exception ex) {
1:6595dc4: 							throw new RuntimeException(ex);
1:6595dc4: 						}
1:6595dc4: 					}
1:6595dc4: 				}
1:6595dc4: 
1:6595dc4: 				public void onException(IOException error) {
1:6595dc4: 					// ignore
1:6595dc4: 				}
1:6595dc4: 
1:6595dc4: 				public void transportInterupted() {
1:6595dc4: 					// ignore
1:6595dc4: 				}
1:6595dc4: 
1:6595dc4: 				public void transportResumed() {
1:6595dc4: 					// ignore
1:6595dc4: 				}
1:6595dc4: 			});
1:6595dc4: 
1:6595dc4: 			localTransport.start();
1:6595dc4: 			localTransport.stop();
1:6595dc4: 
1:6595dc4: 			// Ensure that the persistent connection is still usable.
1:6595dc4: 			producer.send(session.createMessage());
1:6595dc4: 			session.rollback();
1:6595dc4: 		}
1:6595dc4: 
1:6595dc4: 		persistentConn.close();
1:6595dc4: 	}
1:6595dc4: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:6595dc4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ShutdownInfo;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportListener;
1: import org.apache.commons.logging.Log;
1: import org.apache.commons.logging.LogFactory;
1: 
1: public class VMTransportClosureTest extends EmbeddedBrokerTestSupport {
1: 	private static final Log LOG = LogFactory
1: 			.getLog(VMTransportClosureTest.class);
1: 	private static final long MAX_TEST_TIME_MILLIS = 300000; // 5min
1: 	private static final int NUM_ATTEMPTS = 100000;
1: 
1: 	public void setUp() throws Exception {
1: 		setAutoFail(true);
1: 		setMaxTestTime(MAX_TEST_TIME_MILLIS);
1: 		super.setUp();
1: 	}
1: 
1: 	/**
1: 	 * EmbeddedBrokerTestSupport.createBroker() binds the broker to a VM
1: 	 * transport address, which results in a call to
1: 	 * VMTransportFactory.doBind(location):
1: 	 * <p>
1: 	 * <code>
1: 	 *     public TransportServer doBind(URI location) throws IOException {
1: 	 *        return bind(location, false);
1: 	 *}
1: 	 *</code>
1: 	 * </p>
1: 	 * As a result, VMTransportServer.disposeOnDisconnect is <code>false</code>.
1: 	 * To expose the bug, we need to have VMTransportServer.disposeOnDisconnect
1: 	 * <code>true</code>, which is the case when the VMTransportServer is not
1: 	 * already bound when the first connection is made.
1: 	 */
1: 	@Override
1: 	protected BrokerService createBroker() throws Exception {
1: 		BrokerService answer = new BrokerService();
1: 		answer.setPersistent(isPersistent());
1: 		// answer.addConnector(bindAddress);
1: 		return answer;
1: 	}
1: 
1: 	/**
1: 	 * This test demonstrates how the "disposeOnDisonnect" feature of
1: 	 * VMTransportServer can incorrectly close all VM connections to the local
1: 	 * broker.
1: 	 */
1: 	public void testPrematureClosure() throws Exception {
1: 
1: 		// Open a persistent connection to the local broker. The persistent
1: 		// connection is maintained through the test and should prevent the
1: 		// VMTransportServer from stopping itself when the local transport is
1: 		// closed.
1: 		ActiveMQConnection persistentConn = (ActiveMQConnection) createConnection();
1: 		persistentConn.start();
1: 		Session session = persistentConn.createSession(true,
1: 				Session.SESSION_TRANSACTED);
1: 		MessageProducer producer = session.createProducer(destination);
1: 
1: 		for (int i = 0; i < NUM_ATTEMPTS; i++) {
1: 			LOG.info("Attempt: " + i);
1: 
1: 			// Open and close a local transport connection. As is done by by
1: 			// most users of the transport, ensure that the transport is stopped
1: 			// when closed by the peer (via ShutdownInfo). Closing the local
1: 			// transport should not affect the persistent connection.
1: 			final Transport localTransport = TransportFactory.connect(broker
1: 					.getVmConnectorURI());
1: 			localTransport.setTransportListener(new TransportListener() {
1: 				public void onCommand(Object command) {
1: 					if (command instanceof ShutdownInfo) {
1: 						try {
1: 							localTransport.stop();
1: 						} catch (Exception ex) {
1: 							throw new RuntimeException(ex);
1: 						}
1: 					}
1: 				}
1: 
1: 				public void onException(IOException error) {
1: 					// ignore
1: 				}
1: 
1: 				public void transportInterupted() {
1: 					// ignore
1: 				}
1: 
1: 				public void transportResumed() {
1: 					// ignore
1: 				}
1: 			});
1: 
1: 			localTransport.start();
1: 			localTransport.stop();
1: 
1: 			// Ensure that the persistent connection is still usable.
1: 			producer.send(session.createMessage());
1: 			session.rollback();
1: 		}
1: 
1: 		persistentConn.close();
1: 	}
1: }
============================================================================