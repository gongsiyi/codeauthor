2:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
2:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.journal;
2:456a2ba: 
1:456a2ba: import java.io.DataInput;
1:456a2ba: import java.io.DataOutput;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.util.concurrent.CountDownLatch;
1:ec6fa19: import java.util.concurrent.atomic.AtomicReference;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Used as a location in the data store.
1:0bbc0ac:  * 
1:456a2ba:  * 
1:456a2ba:  */
1:456a2ba: public final class Location implements Comparable<Location> {
1:456a2ba: 
1:456a2ba:     public static final byte USER_TYPE = 1;
1:456a2ba:     public static final byte NOT_SET_TYPE = 0;
1:456a2ba:     public static final int NOT_SET = -1;
1:456a2ba: 
1:456a2ba:     private int dataFileId = NOT_SET;
1:456a2ba:     private int offset = NOT_SET;
1:456a2ba:     private int size = NOT_SET;
1:456a2ba:     private byte type = NOT_SET_TYPE;
1:ec6fa19:     private CountDownLatch latch;
1:ec6fa19:     private AtomicReference<IOException> exception;
1:456a2ba: 
1:456a2ba:     public Location() {
2:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Location(Location item) {
1:456a2ba:         this.dataFileId = item.dataFileId;
1:456a2ba:         this.offset = item.offset;
1:456a2ba:         this.size = item.size;
1:456a2ba:         this.type = item.type;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Location(int dataFileId, int offset) {
1:456a2ba:         this.dataFileId=dataFileId;
1:456a2ba:         this.offset=offset;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     boolean isValid() {
1:456a2ba:         return dataFileId != NOT_SET;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @return the size of the data record including the header.
1:456a2ba:      */
1:456a2ba:     public int getSize() {
1:456a2ba:         return size;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @param size the size of the data record including the header.
1:456a2ba:      */
1:456a2ba:     public void setSize(int size) {
1:456a2ba:         this.size = size;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public int getOffset() {
1:456a2ba:         return offset;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setOffset(int offset) {
1:456a2ba:         this.offset = offset;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public int getDataFileId() {
1:456a2ba:         return dataFileId;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setDataFileId(int file) {
1:456a2ba:         this.dataFileId = file;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public byte getType() {
1:456a2ba:         return type;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setType(byte type) {
1:456a2ba:         this.type = type;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public String toString() {
1:456a2ba:         return dataFileId+":"+offset;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void writeExternal(DataOutput dos) throws IOException {
1:456a2ba:         dos.writeInt(dataFileId);
1:456a2ba:         dos.writeInt(offset);
1:456a2ba:         dos.writeInt(size);
1:456a2ba:         dos.writeByte(type);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void readExternal(DataInput dis) throws IOException {
1:456a2ba:         dataFileId = dis.readInt();
1:456a2ba:         offset = dis.readInt();
1:456a2ba:         size = dis.readInt();
1:456a2ba:         type = dis.readByte();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public CountDownLatch getLatch() {
1:ec6fa19:         return latch;
1:456a2ba:     }
1:456a2ba: 
1:8c3ef6c:     public void setBatch(DataFileAppender.WriteBatch batch) {
1:ec6fa19:         this.latch = batch.latch;
1:ec6fa19:         this.exception = batch.exception;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public int compareTo(Location o) {
1:456a2ba:         Location l = (Location)o;
1:456a2ba:         if (dataFileId == l.dataFileId) {
1:456a2ba:             int rc = offset - l.offset;
1:456a2ba:             return rc;
1:456a2ba:         }
1:456a2ba:         return dataFileId - l.dataFileId;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public boolean equals(Object o) {
1:456a2ba:         boolean result = false;
1:456a2ba:         if (o instanceof Location) {
1:456a2ba:             result = compareTo((Location)o) == 0;
1:456a2ba:         }
1:456a2ba:         return result;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public int hashCode() {
1:456a2ba:         return dataFileId ^ offset;
1:8c3ef6c:     }
1:456a2ba: 
1:ec6fa19:     public AtomicReference<IOException> getException() {
1:ec6fa19:         return exception;
1:456a2ba:     }
1:456a2ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ec6fa19
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicReference;
/////////////////////////////////////////////////////////////////////////
1:     private CountDownLatch latch;
1:     private AtomicReference<IOException> exception;
/////////////////////////////////////////////////////////////////////////
1:         return latch;
1:         this.latch = batch.latch;
1:         this.exception = batch.exception;
/////////////////////////////////////////////////////////////////////////
1:     public AtomicReference<IOException> getException() {
1:         return exception;
commit:8c3ef6c
/////////////////////////////////////////////////////////////////////////
0:     private DataFileAppender.WriteBatch batch;
/////////////////////////////////////////////////////////////////////////
0:         return batch.latch;
1:     public void setBatch(DataFileAppender.WriteBatch batch) {
0:         this.batch = batch;
/////////////////////////////////////////////////////////////////////////
0:     public DataFileAppender.WriteBatch getBatch() {
0:         return batch;
1:     }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.journal;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f73b622
/////////////////////////////////////////////////////////////////////////
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.journal;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: 
1: /**
1:  * Used as a location in the data store.
1:  * 
0:  * @version $Revision$
1:  */
1: public final class Location implements Comparable<Location> {
1: 
1:     public static final byte USER_TYPE = 1;
1:     public static final byte NOT_SET_TYPE = 0;
1:     public static final int NOT_SET = -1;
1: 
1:     private int dataFileId = NOT_SET;
1:     private int offset = NOT_SET;
1:     private int size = NOT_SET;
1:     private byte type = NOT_SET_TYPE;
0:     private CountDownLatch latch;
1: 
1:     public Location() {
1:     }
1: 
1:     public Location(Location item) {
1:         this.dataFileId = item.dataFileId;
1:         this.offset = item.offset;
1:         this.size = item.size;
1:         this.type = item.type;
1:     }
1: 
1:     public Location(int dataFileId, int offset) {
1:         this.dataFileId=dataFileId;
1:         this.offset=offset;
1:     }
1: 
1:     boolean isValid() {
1:         return dataFileId != NOT_SET;
1:     }
1: 
1:     /**
1:      * @return the size of the data record including the header.
1:      */
1:     public int getSize() {
1:         return size;
1:     }
1: 
1:     /**
1:      * @param size the size of the data record including the header.
1:      */
1:     public void setSize(int size) {
1:         this.size = size;
1:     }
1: 
1:     /**
0:      * @return the size of the payload of the record.
1:      */
0:     public int getPaylodSize() {
0:         return size - Journal.ITEM_HEAD_FOOT_SPACE;
1:     }
1: 
1:     public int getOffset() {
1:         return offset;
1:     }
1: 
1:     public void setOffset(int offset) {
1:         this.offset = offset;
1:     }
1: 
1:     public int getDataFileId() {
1:         return dataFileId;
1:     }
1: 
1:     public void setDataFileId(int file) {
1:         this.dataFileId = file;
1:     }
1: 
1:     public byte getType() {
1:         return type;
1:     }
1: 
1:     public void setType(byte type) {
1:         this.type = type;
1:     }
1: 
1:     public String toString() {
1:         return dataFileId+":"+offset;
1:     }
1: 
1:     public void writeExternal(DataOutput dos) throws IOException {
1:         dos.writeInt(dataFileId);
1:         dos.writeInt(offset);
1:         dos.writeInt(size);
1:         dos.writeByte(type);
1:     }
1: 
1:     public void readExternal(DataInput dis) throws IOException {
1:         dataFileId = dis.readInt();
1:         offset = dis.readInt();
1:         size = dis.readInt();
1:         type = dis.readByte();
1:     }
1: 
1:     public CountDownLatch getLatch() {
0:         return latch;
1:     }
1: 
0:     public void setLatch(CountDownLatch latch) {
0:         this.latch = latch;
1:     }
1: 
1:     public int compareTo(Location o) {
1:         Location l = (Location)o;
1:         if (dataFileId == l.dataFileId) {
1:             int rc = offset - l.offset;
1:             return rc;
1:         }
1:         return dataFileId - l.dataFileId;
1:     }
1: 
1:     public boolean equals(Object o) {
1:         boolean result = false;
1:         if (o instanceof Location) {
1:             result = compareTo((Location)o) == 0;
1:         }
1:         return result;
1:     }
1: 
1:     public int hashCode() {
1:         return dataFileId ^ offset;
1:     }
1: 
1: }
============================================================================