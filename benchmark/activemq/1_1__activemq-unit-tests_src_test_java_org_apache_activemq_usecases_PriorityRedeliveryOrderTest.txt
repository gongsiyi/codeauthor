1:2a8218a: /**
1:2a8218a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2a8218a:  * contributor license agreements.  See the NOTICE file distributed with
1:2a8218a:  * this work for additional information regarding copyright ownership.
1:2a8218a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2a8218a:  * (the "License"); you may not use this file except in compliance with
1:2a8218a:  * the License.  You may obtain a copy of the License at
1:2a8218a:  * <p/>
1:2a8218a:  * http://www.apache.org/licenses/LICENSE-2.0
1:2a8218a:  * <p/>
1:2a8218a:  * Unless required by applicable law or agreed to in writing, software
1:2a8218a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a8218a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a8218a:  * See the License for the specific language governing permissions and
1:2a8218a:  * limitations under the License.
1:2a8218a:  */
1:2a8218a: package org.apache.activemq.usecases;
1:2a8218a: 
1:2a8218a: import java.util.ArrayList;
1:2a8218a: import java.util.List;
1:2a8218a: import javax.jms.Connection;
1:2a8218a: import javax.jms.ConnectionFactory;
1:2a8218a: import javax.jms.Message;
1:2a8218a: import javax.jms.MessageConsumer;
1:2a8218a: import javax.jms.MessageProducer;
1:2a8218a: import javax.jms.Session;
1:2a8218a: import org.apache.activemq.ActiveMQConnection;
1:2a8218a: import org.apache.activemq.ActiveMQConnectionFactory;
1:2a8218a: import org.apache.activemq.broker.BrokerService;
1:2a8218a: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:2a8218a: import org.apache.activemq.broker.region.policy.PolicyMap;
1:2a8218a: import org.junit.After;
1:2a8218a: import org.junit.Before;
1:2a8218a: import org.junit.Test;
1:2a8218a: import org.slf4j.Logger;
1:2a8218a: import org.slf4j.LoggerFactory;
1:2a8218a: 
1:2a8218a: 
1:2a8218a: import static org.junit.Assert.assertEquals;
1:2a8218a: import static org.junit.Assert.fail;
1:2a8218a: 
1:2a8218a: 
1:2a8218a: /**
1:2a8218a:  * Sends X messages with a sequence number held in a JMS property "appId"
1:2a8218a:  * Uses all priority 4 message (normal priority)
1:2a8218a:  * closed the consumer connection multiple times so the already prefetched messages will be available
1:2a8218a:  * for dispatch again.
1:2a8218a:  */
1:2a8218a: 
1:2a8218a: public class PriorityRedeliveryOrderTest {
1:2a8218a: 
1:2a8218a:     private static final Logger LOG = LoggerFactory.getLogger(PriorityRedeliveryOrderTest.class);
1:2a8218a: 
1:2a8218a:     private static final String DESTINATION = "testQ1";
1:2a8218a:     private static final int MESSAGES_TO_SEND = 1000;
1:2a8218a:     private static final int MESSAGES_PER_CONSUMER = 200;
1:2a8218a:     private int consumedAppId = -1;
1:2a8218a:     private int totalConsumed;
1:2a8218a:     BrokerService broker;
1:2a8218a: 
1:2a8218a:     @Before
1:2a8218a:     public void createBroker() throws Exception {
1:2a8218a: 
1:2a8218a:         broker = new BrokerService();
1:2a8218a:         broker.setDeleteAllMessagesOnStartup(true);
1:2a8218a: 
1:2a8218a:         PolicyMap policyMap = new PolicyMap();
1:2a8218a:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:2a8218a:         PolicyEntry pe = new PolicyEntry();
1:2a8218a: 
1:2a8218a:         pe.setPrioritizedMessages(true);
1:2a8218a: 
1:2a8218a:         pe.setQueue(">");
1:2a8218a:         entries.add(pe);
1:2a8218a:         policyMap.setPolicyEntries(entries);
1:2a8218a:         broker.setDestinationPolicy(policyMap);
1:2a8218a: 
1:2a8218a: 
1:2a8218a:         broker.addConnector("tcp://0.0.0.0:0");
1:2a8218a: 
1:2a8218a:         broker.start();
1:2a8218a:         broker.waitUntilStarted();
1:2a8218a:     }
1:2a8218a: 
1:2a8218a:     @After
1:2a8218a:     public void stopBroker() throws Exception {
1:2a8218a:         broker.stop();
1:2a8218a:         broker.waitUntilStopped();
1:2a8218a:     }
1:2a8218a: 
1:2a8218a:     @Test
1:2a8218a:     public void testMessageDeliveryOrderAfterPrefetch() throws Exception {
1:2a8218a: 
1:2a8218a:         //send X messages with with a sequence number number in the message property.
1:2a8218a:         sendMessages(MESSAGES_TO_SEND);
1:2a8218a: 
1:2a8218a:         for (int i = 0; i < (MESSAGES_TO_SEND / MESSAGES_PER_CONSUMER); i++) {
1:2a8218a:             totalConsumed += consumeMessages(MESSAGES_PER_CONSUMER);
1:2a8218a:         }
1:2a8218a:         assertEquals("number of messages consumed should be equal to number of messages sent", MESSAGES_TO_SEND, totalConsumed);
1:2a8218a:     }
1:2a8218a: 
1:2a8218a:     private Long sendMessages(int messageCount) throws Exception {
1:2a8218a: 
1:2a8218a:         long numberOfMessageSent = 0;
1:2a8218a: 
1:2a8218a:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:2a8218a: 
1:2a8218a:         Connection connection = connectionFactory.createConnection();
1:2a8218a:         connection.start();
1:2a8218a: 
1:2a8218a:         try {
1:2a8218a: 
1:2a8218a:             Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:2a8218a:             MessageProducer jmsProducer = producerSession.createProducer(producerSession.createQueue(DESTINATION));
1:2a8218a: 
1:2a8218a:             Message sendMessage = producerSession.createTextMessage("test_message");
1:2a8218a: 
1:2a8218a:             for (int i = 0; i < messageCount; i++) {
1:2a8218a: 
1:2a8218a:                 sendMessage.setIntProperty("appID", i);
1:2a8218a:                 jmsProducer.send(sendMessage);
1:2a8218a:                 producerSession.commit();
1:2a8218a:                 numberOfMessageSent++;
1:2a8218a: 
1:2a8218a:             }
1:2a8218a: 
1:2a8218a:             LOG.info(" Finished after producing : " + numberOfMessageSent);
1:2a8218a:             return numberOfMessageSent;
1:2a8218a: 
1:2a8218a:         } catch (Exception ex) {
1:2a8218a:             LOG.info("Exception received producing ", ex);
1:2a8218a:             LOG.info("finishing after exception :" + numberOfMessageSent);
1:2a8218a:             return numberOfMessageSent;
1:2a8218a:         } finally {
1:2a8218a:             if (connection != null) {
1:2a8218a:                 connection.close();
1:2a8218a:             }
1:2a8218a:         }
1:2a8218a:     }
1:2a8218a: 
1:2a8218a:     /*
1:2a8218a:      Ensure messages are consumed in the expected sequence
1:2a8218a:      */
1:2a8218a: 
1:2a8218a:     private int consumeMessages(int numberOfMessage) throws Exception {
1:2a8218a: 
1:2a8218a:         LOG.info("Creating new consumer for:" + numberOfMessage);
1:2a8218a: 
1:2a8218a: 
1:2a8218a:         int numberConsumedMessage = 0;
1:2a8218a:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:2a8218a:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:2a8218a: 
1:2a8218a:         try {
1:2a8218a: 
1:2a8218a:             connection.start();
1:2a8218a:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:2a8218a:             MessageConsumer jmsConsumer = session.createConsumer(session.createQueue(DESTINATION));
1:2a8218a:             boolean consume = true;
1:2a8218a: 
1:2a8218a: 
1:2a8218a:             while (consume) {
1:2a8218a: 
1:2a8218a:                 Message message = jmsConsumer.receive(4000);
1:2a8218a: 
1:2a8218a:                 if (message == null) {
1:2a8218a:                     LOG.info("Break on:" + numberConsumedMessage);
1:2a8218a:                     break;
1:2a8218a:                 }
1:2a8218a: 
1:2a8218a: 
1:2a8218a:                 int newAppId = message.getIntProperty("appID");
1:2a8218a: 
1:2a8218a:                 numberConsumedMessage++;
1:2a8218a: 
1:2a8218a:                 LOG.debug("Message newAppID" + newAppId);
1:2a8218a: 
1:2a8218a:                 //check it is next appID in sequence
1:2a8218a: 
1:2a8218a:                 if (newAppId != (consumedAppId + 1)) {
1:2a8218a:                     fail(" newAppId is " + newAppId + " expected " + (consumedAppId + 1));
1:2a8218a:                 }
1:2a8218a: 
1:2a8218a:                 //increase next AppID
1:2a8218a:                 consumedAppId = newAppId;
1:2a8218a: 
1:2a8218a:                 session.commit();
1:2a8218a: 
1:2a8218a:                 if (numberConsumedMessage == numberOfMessage) {
1:2a8218a:                     LOG.info("closing consumer after 200 message, consumedAppID is " + consumedAppId);
1:2a8218a:                     return numberConsumedMessage;
1:2a8218a:                 }
1:2a8218a: 
1:2a8218a:             }
1:2a8218a:         } finally {
1:2a8218a: 
1:2a8218a:             if (connection != null) {
1:2a8218a:                 try {
1:2a8218a:                     connection.close();
1:2a8218a:                 } catch (Exception ex) {
1:2a8218a: 
1:2a8218a:                 }
1:2a8218a:             }
1:2a8218a:         }
1:2a8218a:         return numberConsumedMessage;
1:2a8218a:     }
1:2a8218a: 
1:2a8218a: }
1:2a8218a: 
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:2a8218a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: 
1: /**
1:  * Sends X messages with a sequence number held in a JMS property "appId"
1:  * Uses all priority 4 message (normal priority)
1:  * closed the consumer connection multiple times so the already prefetched messages will be available
1:  * for dispatch again.
1:  */
1: 
1: public class PriorityRedeliveryOrderTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(PriorityRedeliveryOrderTest.class);
1: 
1:     private static final String DESTINATION = "testQ1";
1:     private static final int MESSAGES_TO_SEND = 1000;
1:     private static final int MESSAGES_PER_CONSUMER = 200;
1:     private int consumedAppId = -1;
1:     private int totalConsumed;
1:     BrokerService broker;
1: 
1:     @Before
1:     public void createBroker() throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1:         pe.setPrioritizedMessages(true);
1: 
1:         pe.setQueue(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1: 
1:         broker.addConnector("tcp://0.0.0.0:0");
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testMessageDeliveryOrderAfterPrefetch() throws Exception {
1: 
1:         //send X messages with with a sequence number number in the message property.
1:         sendMessages(MESSAGES_TO_SEND);
1: 
1:         for (int i = 0; i < (MESSAGES_TO_SEND / MESSAGES_PER_CONSUMER); i++) {
1:             totalConsumed += consumeMessages(MESSAGES_PER_CONSUMER);
1:         }
1:         assertEquals("number of messages consumed should be equal to number of messages sent", MESSAGES_TO_SEND, totalConsumed);
1:     }
1: 
1:     private Long sendMessages(int messageCount) throws Exception {
1: 
1:         long numberOfMessageSent = 0;
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1: 
1:         try {
1: 
1:             Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             MessageProducer jmsProducer = producerSession.createProducer(producerSession.createQueue(DESTINATION));
1: 
1:             Message sendMessage = producerSession.createTextMessage("test_message");
1: 
1:             for (int i = 0; i < messageCount; i++) {
1: 
1:                 sendMessage.setIntProperty("appID", i);
1:                 jmsProducer.send(sendMessage);
1:                 producerSession.commit();
1:                 numberOfMessageSent++;
1: 
1:             }
1: 
1:             LOG.info(" Finished after producing : " + numberOfMessageSent);
1:             return numberOfMessageSent;
1: 
1:         } catch (Exception ex) {
1:             LOG.info("Exception received producing ", ex);
1:             LOG.info("finishing after exception :" + numberOfMessageSent);
1:             return numberOfMessageSent;
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1:     /*
1:      Ensure messages are consumed in the expected sequence
1:      */
1: 
1:     private int consumeMessages(int numberOfMessage) throws Exception {
1: 
1:         LOG.info("Creating new consumer for:" + numberOfMessage);
1: 
1: 
1:         int numberConsumedMessage = 0;
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1: 
1:         try {
1: 
1:             connection.start();
1:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             MessageConsumer jmsConsumer = session.createConsumer(session.createQueue(DESTINATION));
1:             boolean consume = true;
1: 
1: 
1:             while (consume) {
1: 
1:                 Message message = jmsConsumer.receive(4000);
1: 
1:                 if (message == null) {
1:                     LOG.info("Break on:" + numberConsumedMessage);
1:                     break;
1:                 }
1: 
1: 
1:                 int newAppId = message.getIntProperty("appID");
1: 
1:                 numberConsumedMessage++;
1: 
1:                 LOG.debug("Message newAppID" + newAppId);
1: 
1:                 //check it is next appID in sequence
1: 
1:                 if (newAppId != (consumedAppId + 1)) {
1:                     fail(" newAppId is " + newAppId + " expected " + (consumedAppId + 1));
1:                 }
1: 
1:                 //increase next AppID
1:                 consumedAppId = newAppId;
1: 
1:                 session.commit();
1: 
1:                 if (numberConsumedMessage == numberOfMessage) {
1:                     LOG.info("closing consumer after 200 message, consumedAppID is " + consumedAppId);
1:                     return numberConsumedMessage;
1:                 }
1: 
1:             }
1:         } finally {
1: 
1:             if (connection != null) {
1:                 try {
1:                     connection.close();
1:                 } catch (Exception ex) {
1: 
1:                 }
1:             }
1:         }
1:         return numberConsumedMessage;
1:     }
1: 
1: }
1: 
============================================================================