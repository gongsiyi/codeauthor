1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.subject;
1:f9451e5: 
1:f9451e5: import org.apache.shiro.authc.AuthenticationException;
1:f9451e5: import org.apache.shiro.authc.AuthenticationToken;
1:f9451e5: import org.apache.shiro.authz.AuthorizationException;
1:f9451e5: import org.apache.shiro.authz.Permission;
1:f9451e5: import org.apache.shiro.session.Session;
1:f9451e5: import org.apache.shiro.subject.ExecutionException;
1:f9451e5: import org.apache.shiro.subject.PrincipalCollection;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: 
1:f9451e5: import java.util.Collection;
1:f9451e5: import java.util.List;
1:f9451e5: import java.util.concurrent.Callable;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class SubjectAdapter implements Subject {
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Object getPrincipal() {
1:f9451e5:         return null;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public PrincipalCollection getPrincipals() {
1:f9451e5:         return null;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean isPermitted(String permission) {
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean isPermitted(Permission permission) {
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean[] isPermitted(String... permissions) {
1:f9451e5:         return new boolean[0];
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean[] isPermitted(List<Permission> permissions) {
1:f9451e5:         return new boolean[0];
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean isPermittedAll(String... permissions) {
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean isPermittedAll(Collection<Permission> permissions) {
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void checkPermission(String permission) throws AuthorizationException {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void checkPermission(Permission permission) throws AuthorizationException {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void checkPermissions(String... permissions) throws AuthorizationException {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void checkPermissions(Collection<Permission> permissions) throws AuthorizationException {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean hasRole(String roleIdentifier) {
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean[] hasRoles(List<String> roleIdentifiers) {
1:f9451e5:         return new boolean[0];  //To change body of implemented methods use File | Settings | File Templates.
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean hasAllRoles(Collection<String> roleIdentifiers) {
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void checkRole(String roleIdentifier) throws AuthorizationException {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void checkRoles(Collection<String> roleIdentifiers) throws AuthorizationException {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void checkRoles(String... roleIdentifiers) throws AuthorizationException {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void login(AuthenticationToken token) throws AuthenticationException {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean isAuthenticated() {
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean isRemembered() {
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Session getSession() {
1:f9451e5:         return null;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Session getSession(boolean create) {
1:f9451e5:         return null;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void logout() {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public <V> V execute(Callable<V> callable) throws ExecutionException {
1:f9451e5:         return null;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void execute(Runnable runnable) {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public <V> Callable<V> associateWith(Callable<V> callable) {
1:f9451e5:         return null;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Runnable associateWith(Runnable runnable) {
1:f9451e5:         return runnable;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void runAs(PrincipalCollection principals) throws NullPointerException, IllegalStateException {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean isRunAs() {
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public PrincipalCollection getPreviousPrincipals() {
1:f9451e5:         return null;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public PrincipalCollection releaseRunAs() {
1:f9451e5:         return null;
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.subject;
1: 
1: import org.apache.shiro.authc.AuthenticationException;
1: import org.apache.shiro.authc.AuthenticationToken;
1: import org.apache.shiro.authz.AuthorizationException;
1: import org.apache.shiro.authz.Permission;
1: import org.apache.shiro.session.Session;
1: import org.apache.shiro.subject.ExecutionException;
1: import org.apache.shiro.subject.PrincipalCollection;
1: import org.apache.shiro.subject.Subject;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.concurrent.Callable;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class SubjectAdapter implements Subject {
1: 
1:     @Override
1:     public Object getPrincipal() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public PrincipalCollection getPrincipals() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public boolean isPermitted(String permission) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean isPermitted(Permission permission) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean[] isPermitted(String... permissions) {
1:         return new boolean[0];
1:     }
1: 
1:     @Override
1:     public boolean[] isPermitted(List<Permission> permissions) {
1:         return new boolean[0];
1:     }
1: 
1:     @Override
1:     public boolean isPermittedAll(String... permissions) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean isPermittedAll(Collection<Permission> permissions) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public void checkPermission(String permission) throws AuthorizationException {
1:     }
1: 
1:     @Override
1:     public void checkPermission(Permission permission) throws AuthorizationException {
1:     }
1: 
1:     @Override
1:     public void checkPermissions(String... permissions) throws AuthorizationException {
1:     }
1: 
1:     @Override
1:     public void checkPermissions(Collection<Permission> permissions) throws AuthorizationException {
1:     }
1: 
1:     @Override
1:     public boolean hasRole(String roleIdentifier) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean[] hasRoles(List<String> roleIdentifiers) {
1:         return new boolean[0];  //To change body of implemented methods use File | Settings | File Templates.
1:     }
1: 
1:     @Override
1:     public boolean hasAllRoles(Collection<String> roleIdentifiers) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public void checkRole(String roleIdentifier) throws AuthorizationException {
1:     }
1: 
1:     @Override
1:     public void checkRoles(Collection<String> roleIdentifiers) throws AuthorizationException {
1:     }
1: 
1:     @Override
1:     public void checkRoles(String... roleIdentifiers) throws AuthorizationException {
1:     }
1: 
1:     @Override
1:     public void login(AuthenticationToken token) throws AuthenticationException {
1:     }
1: 
1:     @Override
1:     public boolean isAuthenticated() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean isRemembered() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public Session getSession() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public Session getSession(boolean create) {
1:         return null;
1:     }
1: 
1:     @Override
1:     public void logout() {
1:     }
1: 
1:     @Override
1:     public <V> V execute(Callable<V> callable) throws ExecutionException {
1:         return null;
1:     }
1: 
1:     @Override
1:     public void execute(Runnable runnable) {
1:     }
1: 
1:     @Override
1:     public <V> Callable<V> associateWith(Callable<V> callable) {
1:         return null;
1:     }
1: 
1:     @Override
1:     public Runnable associateWith(Runnable runnable) {
1:         return runnable;
1:     }
1: 
1:     @Override
1:     public void runAs(PrincipalCollection principals) throws NullPointerException, IllegalStateException {
1:     }
1: 
1:     @Override
1:     public boolean isRunAs() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public PrincipalCollection getPreviousPrincipals() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public PrincipalCollection releaseRunAs() {
1:         return null;
1:     }
1: }
============================================================================