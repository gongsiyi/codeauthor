1:4c38b03: /**
1:4c38b03:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4c38b03:  * contributor license agreements.  See the NOTICE file distributed with
1:4c38b03:  * this work for additional information regarding copyright ownership.
1:4c38b03:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4c38b03:  * (the "License"); you may not use this file except in compliance with
1:4c38b03:  * the License.  You may obtain a copy of the License at
1:4c38b03:  *
1:4c38b03:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4c38b03:  *
1:4c38b03:  * Unless required by applicable law or agreed to in writing, software
1:4c38b03:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4c38b03:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4c38b03:  * See the License for the specific language governing permissions and
1:4c38b03:  * limitations under the License.
1:4c38b03:  */
1:4c38b03: package org.apache.activemq.bugs;
1:4c38b03: 
1:4c38b03: import static org.junit.Assert.assertNotNull;
1:4c38b03: 
1:4c38b03: import javax.jms.Connection;
1:4c38b03: import javax.jms.MessageConsumer;
1:4c38b03: import javax.jms.Session;
1:4c38b03: import javax.jms.Topic;
1:4c38b03: import javax.management.MalformedObjectNameException;
1:4c38b03: import javax.management.ObjectName;
1:4c38b03: 
1:4c38b03: import org.apache.activemq.ActiveMQConnectionFactory;
1:4c38b03: import org.apache.activemq.broker.BrokerFactory;
1:4c38b03: import org.apache.activemq.broker.BrokerService;
1:4c38b03: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:4c38b03: import org.junit.After;
1:4c38b03: import org.junit.Before;
1:4c38b03: import org.junit.Test;
1:4c38b03: 
1:4c38b03: public class AMQ5035Test {
1:4c38b03: 
1:4c38b03:     private static final String CLIENT_ID = "amq-test-client-id";
1:4c38b03:     private static final String DURABLE_SUB_NAME = "testDurable";
1:4c38b03: 
1:4c38b03:     private final String xbean = "xbean:";
1:4c38b03:     private final String confBase = "src/test/resources/org/apache/activemq/bugs/amq5035";
1:4c38b03: 
1:4c38b03:     private static BrokerService brokerService;
1:4c38b03:     private String connectionUri;
1:4c38b03: 
1:4c38b03:     @Before
1:4c38b03:     public void setUp() throws Exception {
1:4c38b03:         brokerService = BrokerFactory.createBroker(xbean + confBase + "/activemq.xml");
1:4c38b03:         connectionUri = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:314b6e1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:5667e4d:         brokerService.getManagementContext().setCreateConnector(false);
1:4c38b03:         brokerService.start();
1:4c38b03:         brokerService.waitUntilStarted();
1:4c38b03:     }
1:4c38b03: 
1:4c38b03:     @After
1:4c38b03:     public void tearDown() throws Exception {
1:4c38b03:         brokerService.stop();
1:4c38b03:         brokerService.waitUntilStopped();
1:4c38b03:     }
1:4c38b03: 
1:4c38b03:     @Test
1:4c38b03:     public void testFoo() throws Exception {
1:4c38b03:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:4c38b03:         Connection connection = factory.createConnection();
1:4c38b03:         connection.setClientID(CLIENT_ID);
1:4c38b03:         connection.start();
1:4c38b03:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4c38b03:         Topic topic = session.createTopic("Test.Topic");
1:4c38b03:         MessageConsumer consumer = session.createDurableSubscriber(topic, DURABLE_SUB_NAME);
1:4c38b03:         consumer.close();
1:4c38b03: 
1:4c38b03:         BrokerViewMBean brokerView = getBrokerView(DURABLE_SUB_NAME);
1:4c38b03:         brokerView.destroyDurableSubscriber(CLIENT_ID, DURABLE_SUB_NAME);
1:4c38b03:     }
1:4c38b03: 
1:4c38b03:     private BrokerViewMBean getBrokerView(String testDurable) throws MalformedObjectNameException {
1:4c38b03:         ObjectName brokerName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost");
1:4c38b03:         BrokerViewMBean view = (BrokerViewMBean) brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1:4c38b03:         assertNotNull(view);
1:4c38b03:         return view;
1:4c38b03:     }
1:4c38b03: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5667e4d
/////////////////////////////////////////////////////////////////////////
1:         brokerService.getManagementContext().setCreateConnector(false);
commit:314b6e1
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setDeleteAllMessagesOnStartup(true);
commit:4c38b03
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ5035Test {
1: 
1:     private static final String CLIENT_ID = "amq-test-client-id";
1:     private static final String DURABLE_SUB_NAME = "testDurable";
1: 
1:     private final String xbean = "xbean:";
1:     private final String confBase = "src/test/resources/org/apache/activemq/bugs/amq5035";
1: 
1:     private static BrokerService brokerService;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = BrokerFactory.createBroker(xbean + confBase + "/activemq.xml");
1:         connectionUri = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testFoo() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         Connection connection = factory.createConnection();
1:         connection.setClientID(CLIENT_ID);
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("Test.Topic");
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, DURABLE_SUB_NAME);
1:         consumer.close();
1: 
1:         BrokerViewMBean brokerView = getBrokerView(DURABLE_SUB_NAME);
1:         brokerView.destroyDurableSubscriber(CLIENT_ID, DURABLE_SUB_NAME);
1:     }
1: 
1:     private BrokerViewMBean getBrokerView(String testDurable) throws MalformedObjectNameException {
1:         ObjectName brokerName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost");
1:         BrokerViewMBean view = (BrokerViewMBean) brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1:         assertNotNull(view);
1:         return view;
1:     }
1: }
============================================================================