1:a9119ec: /**
1:a9119ec:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a9119ec:  * contributor license agreements.  See the NOTICE file distributed with
1:a9119ec:  * this work for additional information regarding copyright ownership.
1:a9119ec:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a9119ec:  * (the "License"); you may not use this file except in compliance with
1:a9119ec:  * the License.  You may obtain a copy of the License at
1:a9119ec:  *
1:a9119ec:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a9119ec:  *
1:a9119ec:  * Unless required by applicable law or agreed to in writing, software
1:a9119ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a9119ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a9119ec:  * See the License for the specific language governing permissions and
1:a9119ec:  * limitations under the License.
1:a9119ec:  */
1:a9119ec: package org.apache.activemq.broker;
1:a9119ec: 
1:a9119ec: import java.util.ArrayList;
1:a9119ec: import java.util.HashMap;
1:a9119ec: import java.util.Iterator;
1:a9119ec: import java.util.List;
1:a9119ec: import java.util.Map;
1:a9119ec: import java.util.Map.Entry;
1:a9119ec: 
1:a9119ec: import org.apache.activemq.command.ConnectionId;
1:a9119ec: import org.apache.activemq.command.ConsumerId;
1:a9119ec: import org.apache.activemq.command.ProducerId;
1:a9119ec: import org.apache.activemq.command.SessionId;
1:a9119ec: 
1:a9119ec: /**
1:b0c2a40:  * 
1:a9119ec:  */
1:a9119ec: 
1:a9119ec: public class SingleTransportConnectionStateRegister  implements TransportConnectionStateRegister{
1:a9119ec: 
1:a9119ec:     private  TransportConnectionState connectionState;
1:a9119ec:     private ConnectionId connectionId;
1:a9119ec: 
1:a9119ec:     public TransportConnectionState registerConnectionState(ConnectionId connectionId,
1:a9119ec:                                                                TransportConnectionState state) {
1:a9119ec:         TransportConnectionState rc = connectionState;
1:a9119ec:         connectionState = state;
1:a9119ec:         this.connectionId = connectionId;
1:a9119ec:         return rc;
2:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public synchronized TransportConnectionState unregisterConnectionState(ConnectionId connectionId) {
1:a9119ec:         TransportConnectionState rc = null;
1:a9119ec:         
1:a9119ec:        
1:a9119ec:         if (connectionId != null && connectionState != null && this.connectionId!=null){
1:a9119ec:         if (this.connectionId.equals(connectionId)){
1:a9119ec: 			rc = connectionState;
1:a9119ec: 			connectionState = null;
1:a9119ec: 			connectionId = null;
1:a9119ec: 		}
1:a9119ec:         }
1:a9119ec:         return rc;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public synchronized List<TransportConnectionState> listConnectionStates() {
1:a9119ec:         List<TransportConnectionState> rc = new ArrayList<TransportConnectionState>();
1:a9119ec:         if (connectionState != null) {
1:a9119ec:             rc.add(connectionState);
1:a9119ec:         }
1:a9119ec:         return rc;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public synchronized TransportConnectionState lookupConnectionState(String connectionId) {
1:a9119ec:         TransportConnectionState cs = connectionState;
2:a9119ec:         if (cs == null) {
1:a9119ec:             throw new IllegalStateException(
1:a9119ec:                                             "Cannot lookup a connectionId for a connection that had not been registered: "
2:a9119ec:                                                 + connectionId);
1:a9119ec:         }
1:a9119ec:         return cs;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public synchronized TransportConnectionState lookupConnectionState(ConsumerId id) {
1:a9119ec:         TransportConnectionState cs = connectionState;
1:a9119ec:         if (cs == null) {
1:a9119ec:             throw new IllegalStateException(
1:a9119ec:                                             "Cannot lookup a consumer from a connection that had not been registered: "
1:a9119ec:                                                 + id.getParentId().getParentId());
1:a9119ec:         }
1:a9119ec:         return cs;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public synchronized TransportConnectionState lookupConnectionState(ProducerId id) {
1:a9119ec:         TransportConnectionState cs = connectionState;
1:a9119ec:         if (cs == null) {
1:a9119ec:             throw new IllegalStateException(
1:a9119ec:                                             "Cannot lookup a producer from a connection that had not been registered: "
1:a9119ec:                                                 + id.getParentId().getParentId());
1:a9119ec:         }
1:a9119ec:         return cs;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public synchronized TransportConnectionState lookupConnectionState(SessionId id) {
1:a9119ec:         TransportConnectionState cs = connectionState;
1:a9119ec:         if (cs == null) {
1:a9119ec:             throw new IllegalStateException(
1:a9119ec:                                             "Cannot lookup a session from a connection that had not been registered: "
1:a9119ec:                                                 + id.getParentId());
1:a9119ec:         }
1:a9119ec:         return cs;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public synchronized TransportConnectionState lookupConnectionState(ConnectionId connectionId) {
1:a9119ec:         TransportConnectionState cs = connectionState;
1:a9119ec:         return cs;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec: 	public synchronized boolean doesHandleMultipleConnectionStates() {
1:a9119ec: 		return false;
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public synchronized boolean isEmpty() {
1:a9119ec: 		return connectionState == null;
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public void intialize(TransportConnectionStateRegister other) {
1:a9119ec: 		
1:a9119ec: 		if (other.isEmpty()){
1:a9119ec: 			clear();
1:a9119ec: 		}else{
1:a9119ec: 			Map map = other.mapStates();
1:a9119ec: 			Iterator i = map.entrySet().iterator();
1:a9119ec: 			Map.Entry<ConnectionId, TransportConnectionState> entry = (Entry<ConnectionId, TransportConnectionState>) i.next();
1:a9119ec: 			connectionId = entry.getKey();
1:a9119ec: 			connectionState =entry.getValue();
1:a9119ec: 		}
1:a9119ec: 		
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public Map<ConnectionId, TransportConnectionState> mapStates() {
1:a9119ec: 		Map<ConnectionId, TransportConnectionState> map = new HashMap<ConnectionId, TransportConnectionState>();
1:a9119ec: 		if (!isEmpty()) {
1:a9119ec: 			map.put(connectionId, connectionState);
1:a9119ec: 		}
1:a9119ec: 		return map;
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public void clear() {
1:a9119ec: 		connectionState=null;
1:a9119ec: 		connectionId=null;
1:a9119ec: 		
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:5e747b0
/////////////////////////////////////////////////////////////////////////
commit:a9119ec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: 
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.SessionId;
1: 
1: /**
0:  * @version $Revision: 1.8 $
1:  */
1: 
1: public class SingleTransportConnectionStateRegister  implements TransportConnectionStateRegister{
1: 
1:     private  TransportConnectionState connectionState;
1:     private ConnectionId connectionId;
1: 
1:     public TransportConnectionState registerConnectionState(ConnectionId connectionId,
1:                                                                TransportConnectionState state) {
1:         TransportConnectionState rc = connectionState;
1:         connectionState = state;
1:         this.connectionId = connectionId;
1:         return rc;
1:     }
1: 
1:     public synchronized TransportConnectionState unregisterConnectionState(ConnectionId connectionId) {
1:         TransportConnectionState rc = null;
1:         
1:        
1:         if (connectionId != null && connectionState != null && this.connectionId!=null){
1:         if (this.connectionId.equals(connectionId)){
1: 			rc = connectionState;
1: 			connectionState = null;
1: 			connectionId = null;
1: 		}
1:         }
1:         return rc;
1:     }
1: 
1:     public synchronized List<TransportConnectionState> listConnectionStates() {
1:         List<TransportConnectionState> rc = new ArrayList<TransportConnectionState>();
1:         if (connectionState != null) {
1:             rc.add(connectionState);
1:         }
1:         return rc;
1:     }
1: 
1:     public synchronized TransportConnectionState lookupConnectionState(String connectionId) {
1:         TransportConnectionState cs = connectionState;
1:         if (cs == null) {
1:             throw new IllegalStateException(
1:                                             "Cannot lookup a connectionId for a connection that had not been registered: "
1:                                                 + connectionId);
1:         }
1:         return cs;
1:     }
1: 
1:     public synchronized TransportConnectionState lookupConnectionState(ConsumerId id) {
1:         TransportConnectionState cs = connectionState;
1:         if (cs == null) {
1:             throw new IllegalStateException(
1:                                             "Cannot lookup a consumer from a connection that had not been registered: "
1:                                                 + id.getParentId().getParentId());
1:         }
1:         return cs;
1:     }
1: 
1:     public synchronized TransportConnectionState lookupConnectionState(ProducerId id) {
1:         TransportConnectionState cs = connectionState;
1:         if (cs == null) {
1:             throw new IllegalStateException(
1:                                             "Cannot lookup a producer from a connection that had not been registered: "
1:                                                 + id.getParentId().getParentId());
1:         }
1:         return cs;
1:     }
1: 
1:     public synchronized TransportConnectionState lookupConnectionState(SessionId id) {
1:         TransportConnectionState cs = connectionState;
1:         if (cs == null) {
1:             throw new IllegalStateException(
1:                                             "Cannot lookup a session from a connection that had not been registered: "
1:                                                 + id.getParentId());
1:         }
1:         return cs;
1:     }
1: 
1:     public synchronized TransportConnectionState lookupConnectionState(ConnectionId connectionId) {
1:         TransportConnectionState cs = connectionState;
1:         if (cs == null) {
0:             throw new IllegalStateException("Cannot lookup a connection that had not been registered: "
1:                                             + connectionId);
1:         }
1:         return cs;
1:     }
1: 
1: 	public synchronized boolean doesHandleMultipleConnectionStates() {
1: 		return false;
1: 	}
1: 
1: 	public synchronized boolean isEmpty() {
1: 		return connectionState == null;
1: 	}
1: 
1: 	public void intialize(TransportConnectionStateRegister other) {
1: 		
1: 		if (other.isEmpty()){
1: 			clear();
1: 		}else{
1: 			Map map = other.mapStates();
1: 			Iterator i = map.entrySet().iterator();
1: 			Map.Entry<ConnectionId, TransportConnectionState> entry = (Entry<ConnectionId, TransportConnectionState>) i.next();
1: 			connectionId = entry.getKey();
1: 			connectionState =entry.getValue();
1: 		}
1: 		
1: 	}
1: 
1: 	public Map<ConnectionId, TransportConnectionState> mapStates() {
1: 		Map<ConnectionId, TransportConnectionState> map = new HashMap<ConnectionId, TransportConnectionState>();
1: 		if (!isEmpty()) {
1: 			map.put(connectionId, connectionState);
1: 		}
1: 		return map;
1: 	}
1: 
1: 	public void clear() {
1: 		connectionState=null;
1: 		connectionId=null;
1: 		
1: 	}
1: 
1: }
============================================================================