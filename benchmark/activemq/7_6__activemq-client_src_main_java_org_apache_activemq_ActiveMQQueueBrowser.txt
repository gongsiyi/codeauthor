2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
8:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
15:d29ca2a: 
1:d29ca2a: import java.util.Enumeration;
1:74a7a8b: import java.util.concurrent.atomic.AtomicBoolean;
1:d29ca2a: 
1:6b305ba: import javax.jms.*;
1:d29ca2a: import javax.jms.IllegalStateException;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.command.MessageDispatch;
1:6b305ba: import org.apache.activemq.selector.SelectorParser;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A client uses a <CODE>QueueBrowser</CODE> object to look at messages on a
1:230a86c:  * queue without removing them. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * The <CODE>getEnumeration</CODE> method returns a <CODE>
1:230a86c:  * java.util.Enumeration</CODE>
1:230a86c:  * that is used to scan the queue's messages. It may be an enumeration of the
1:230a86c:  * entire content of a queue, or it may contain only the messages matching a
1:230a86c:  * message selector. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Messages may be arriving and expiring while the scan is done. The JMS API
1:d29ca2a:  * does not require the content of an enumeration to be a static snapshot of
1:d29ca2a:  * queue content. Whether these changes are visible or not depends on the JMS
1:230a86c:  * provider. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * A <CODE>QueueBrowser</CODE> can be created from either a <CODE>Session
1:230a86c:  * </CODE>
1:230a86c:  * or a <CODE>QueueSession</CODE>.
1:230a86c:  *
1:d29ca2a:  * @see javax.jms.Session#createBrowser
1:d29ca2a:  * @see javax.jms.QueueSession#createBrowser
1:d29ca2a:  * @see javax.jms.QueueBrowser
1:d29ca2a:  * @see javax.jms.QueueReceiver
1:d29ca2a:  */
1:d29ca2a: 
1:230a86c: public class ActiveMQQueueBrowser implements QueueBrowser, Enumeration {
1:d29ca2a: 
1:d29ca2a:     private final ActiveMQSession session;
1:d29ca2a:     private final ActiveMQDestination destination;
1:d29ca2a:     private final String selector;
1:230a86c: 
1:d29ca2a:     private ActiveMQMessageConsumer consumer;
1:d29ca2a:     private boolean closed;
1:d29ca2a:     private final ConsumerId consumerId;
1:d29ca2a:     private final AtomicBoolean browseDone = new AtomicBoolean(true);
1:d29ca2a:     private final boolean dispatchAsync;
1:d29ca2a:     private Object semaphore = new Object();
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Constructor for an ActiveMQQueueBrowser - used internally
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     protected ActiveMQQueueBrowser(ActiveMQSession session, ConsumerId consumerId, ActiveMQDestination destination, String selector, boolean dispatchAsync) throws JMSException {
1:6b305ba:         if (destination == null) {
1:6b305ba:             throw new InvalidDestinationException("Don't understand null destinations");
1:6b305ba:         } else if (destination.getPhysicalName() == null) {
1:6b305ba:             throw new InvalidDestinationException("The destination object was not given a physical name.");
1:6b305ba:         }
1:6b305ba:         if (selector != null && selector.trim().length() != 0) {
1:6b305ba:             // Validate the selector
1:6b305ba:             SelectorParser.parse(selector);
1:6b305ba:         }
1:6b305ba: 
1:d29ca2a:         this.session = session;
1:d29ca2a:         this.consumerId = consumerId;
1:d29ca2a:         this.destination = destination;
1:d29ca2a:         this.selector = selector;
1:230a86c:         this.dispatchAsync = dispatchAsync;
4:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     private ActiveMQMessageConsumer createConsumer() throws JMSException {
1:d29ca2a:         browseDone.set(false);
1:bed10aa:         ActiveMQPrefetchPolicy prefetchPolicy = session.connection.getPrefetchPolicy();
1:d29ca2a: 
1:230a86c:         return new ActiveMQMessageConsumer(session, consumerId, destination, null, selector, prefetchPolicy.getQueueBrowserPrefetch(), prefetchPolicy
1:fba0742:             .getMaximumPendingMessageLimit(), false, true, dispatchAsync, null) {
1:d29ca2a:             public void dispatch(MessageDispatch md) {
1:230a86c:                 if (md.getMessage() == null) {
1:d29ca2a:                     browseDone.set(true);
1:d29ca2a:                 } else {
1:d29ca2a:                     super.dispatch(md);
1:d29ca2a:                 }
1:d29ca2a:                 notifyMessageAvailable();
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void destroyConsumer() {
1:ecf89a6:         if (consumer == null) {
1:230a86c:             return;
1:ecf89a6:         }
1:d29ca2a:         try {
1:8fdf345:             if (session.getTransacted() && session.getTransactionContext().isInLocalTransaction()) {
1:1554954:                 session.commit();
1:1554954:             }
1:d29ca2a:             consumer.close();
1:230a86c:             consumer = null;
1:d29ca2a:         } catch (JMSException e) {
1:d29ca2a:             e.printStackTrace();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets an enumeration for browsing the current queue messages in the order
1:d29ca2a:      * they would be received.
1:230a86c:      *
1:d29ca2a:      * @return an enumeration for browsing the messages
1:230a86c:      * @throws JMSException if the JMS provider fails to get the enumeration for
1:230a86c:      *                 this browser due to some internal error.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public Enumeration getEnumeration() throws JMSException {
1:d29ca2a:         checkClosed();
1:ecf89a6:         if (consumer == null) {
1:d29ca2a:             consumer = createConsumer();
1:ecf89a6:         }
1:d29ca2a:         return this;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void checkClosed() throws IllegalStateException {
1:d29ca2a:         if (closed) {
1:d29ca2a:             throw new IllegalStateException("The Consumer is closed");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if more messages to process
1:d29ca2a:      */
1:d29ca2a:     public boolean hasMoreElements() {
1:230a86c:         while (true) {
1:230a86c: 
1:230a86c:             synchronized (this) {
1:ecf89a6:                 if (consumer == null) {
1:d29ca2a:                     return false;
1:ecf89a6:                 }
1:d29ca2a:             }
1:230a86c: 
1:230a86c:             if (consumer.getMessageSize() > 0) {
1:d29ca2a:                 return true;
1:d29ca2a:             }
1:230a86c: 
1:230a86c:             if (browseDone.get() || !session.isRunning()) {
1:d29ca2a:                 destroyConsumer();
1:d29ca2a:                 return false;
1:d29ca2a:             }
1:d29ca2a: 
1:230a86c:             waitForMessage();
1:230a86c:         }
1:230a86c:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the next message
1:d29ca2a:      */
1:d29ca2a:     public Object nextElement() {
1:230a86c:         while (true) {
1:230a86c: 
1:230a86c:             synchronized (this) {
1:ecf89a6:                 if (consumer == null) {
1:d29ca2a:                     return null;
1:ecf89a6:                 }
1:d29ca2a:             }
1:230a86c: 
1:d29ca2a:             try {
1:6b305ba:                 javax.jms.Message answer = consumer.receiveNoWait();
1:ecf89a6:                 if (answer != null) {
1:d29ca2a:                     return answer;
1:ecf89a6:                 }
1:d29ca2a:             } catch (JMSException e) {
1:0acf545:                 this.session.connection.onClientInternalException(e);
1:d29ca2a:                 return null;
1:230a86c:             }
1:230a86c: 
1:230a86c:             if (browseDone.get() || !session.isRunning()) {
1:d29ca2a:                 destroyConsumer();
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:230a86c: 
2:d29ca2a:             waitForMessage();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     public synchronized void close() throws JMSException {
1:915333e:         browseDone.set(true);
1:d29ca2a:         destroyConsumer();
1:230a86c:         closed = true;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the queue associated with this queue browser.
1:230a86c:      *
1:d29ca2a:      * @return the queue
1:230a86c:      * @throws JMSException if the JMS provider fails to get the queue
1:230a86c:      *                 associated with this browser due to some internal error.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public Queue getQueue() throws JMSException {
1:230a86c:         return (Queue)destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getMessageSelector() throws JMSException {
1:d29ca2a:         return selector;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // Implementation methods
1:d29ca2a:     // -------------------------------------------------------------------------
1:d29ca2a: 
1:230a86c:     /**
1:230a86c:      * Wait on a semaphore for a fixed amount of time for a message to come in.
1:751ba90:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     protected void waitForMessage() {
1:d29ca2a:         try {
1:751ba90:             consumer.sendPullCommand(-1);
1:cfbb3c8:             synchronized (semaphore) {
1:d29ca2a:                 semaphore.wait(2000);
1:d29ca2a:             }
1:230a86c:         } catch (InterruptedException e) {
1:cfbb3c8:             Thread.currentThread().interrupt();
1:751ba90:         } catch (JMSException e) {
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void notifyMessageAvailable() {
1:230a86c:         synchronized (semaphore) {
1:d29ca2a:             semaphore.notifyAll();
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public String toString() {
1:230a86c:         return "ActiveMQQueueBrowser { value=" + consumerId + " }";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:915333e
/////////////////////////////////////////////////////////////////////////
1:         browseDone.set(true);
commit:1554954
/////////////////////////////////////////////////////////////////////////
0:             if (session.getTransacted()) {
1:                 session.commit();
1:             }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:6b305ba
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.*;
1: import org.apache.activemq.selector.SelectorParser;
/////////////////////////////////////////////////////////////////////////
1:         if (destination == null) {
1:             throw new InvalidDestinationException("Don't understand null destinations");
1:         } else if (destination.getPhysicalName() == null) {
1:             throw new InvalidDestinationException("The destination object was not given a physical name.");
1:         }
1:         if (selector != null && selector.trim().length() != 0) {
1:             // Validate the selector
1:             SelectorParser.parse(selector);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:                 javax.jms.Message answer = consumer.receiveNoWait();
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (consumer == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (consumer == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 if (consumer == null) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                 if (consumer == null) {
1:                 }
1:                 if (answer != null) {
1:                 }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void close() throws JMSException {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * queue without removing them. <p/>
1:  * java.util.Enumeration</CODE>
1:  * that is used to scan the queue's messages. It may be an enumeration of the
1:  * entire content of a queue, or it may contain only the messages matching a
1:  * message selector. <p/>
1:  * provider. <p/>
1:  * </CODE>
1:  * or a <CODE>QueueSession</CODE>.
1:  * 
1: public class ActiveMQQueueBrowser implements QueueBrowser, Enumeration {
1: 
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         this.dispatchAsync = dispatchAsync;
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQMessageConsumer(session, consumerId, destination, null, selector, prefetchPolicy.getQueueBrowserPrefetch(), prefetchPolicy
0:             .getMaximumPendingMessageLimit(), false, true, dispatchAsync) {
1:                 if (md.getMessage() == null) {
/////////////////////////////////////////////////////////////////////////
0:         if (consumer == null)
1:             return;
1:             consumer = null;
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @throws JMSException if the JMS provider fails to get the enumeration for
1:      *                 this browser due to some internal error.
0:         if (consumer == null)
/////////////////////////////////////////////////////////////////////////
1:         while (true) {
1: 
1:             synchronized (this) {
0:                 if (consumer == null)
1: 
1:             if (consumer.getMessageSize() > 0) {
1: 
1:             if (browseDone.get() || !session.isRunning()) {
1:             waitForMessage();
1:         }
1:     }
1:         while (true) {
1: 
1:             synchronized (this) {
0:                 if (consumer == null)
1: 
0:                 if (answer != null)
1: 
1:             if (browseDone.get() || !session.isRunning()) {
1: 
1:         }
1:         closed = true;
1:      * 
1:      * @throws JMSException if the JMS provider fails to get the queue
1:      *                 associated with this browser due to some internal error.
1:         return (Queue)destination;
1:     /**
1:      * Wait on a semaphore for a fixed amount of time for a message to come in.
1:         } catch (InterruptedException e) {
1: 
1:         synchronized (semaphore) {
1: 
1:         return "ActiveMQQueueBrowser { value=" + consumerId + " }";
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c59246d
/////////////////////////////////////////////////////////////////////////
0:         return "ActiveMQQueueBrowser { value=" +consumerId+" }";
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.Enumeration;
1: 
1: import javax.jms.IllegalStateException;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.Queue;
0: import javax.jms.QueueBrowser;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.MessageDispatch;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
1: /**
1:  * A client uses a <CODE>QueueBrowser</CODE> object to look at messages on a
0:  * queue without removing them.
0:  * <p/>
1:  * <P>
1:  * The <CODE>getEnumeration</CODE> method returns a <CODE>
0:  * java.util.Enumeration</CODE> that is used to scan the queue's messages. It
0:  * may be an enumeration of the entire content of a queue, or it may contain
0:  * only the messages matching a message selector.
0:  * <p/>
1:  * <P>
1:  * Messages may be arriving and expiring while the scan is done. The JMS API
1:  * does not require the content of an enumeration to be a static snapshot of
1:  * queue content. Whether these changes are visible or not depends on the JMS
0:  * provider.
0:  * <p/>
1:  * <P>
1:  * A <CODE>QueueBrowser</CODE> can be created from either a <CODE>Session
0:  * </CODE> or a <CODE>QueueSession</CODE>.
1:  *
1:  * @see javax.jms.Session#createBrowser
1:  * @see javax.jms.QueueSession#createBrowser
1:  * @see javax.jms.QueueBrowser
1:  * @see javax.jms.QueueReceiver
1:  */
1: 
0: public class ActiveMQQueueBrowser implements
0:         QueueBrowser, Enumeration {
1: 
1:     private final ActiveMQSession session;
1:     private final ActiveMQDestination destination;
1:     private final String selector;
1:     
1:     private ActiveMQMessageConsumer consumer;
1:     private boolean closed;
1:     private final ConsumerId consumerId;
1:     private final AtomicBoolean browseDone = new AtomicBoolean(true);
1:     private final boolean dispatchAsync;
1:     private Object semaphore = new Object();
1:     
1:     /**
1:      * Constructor for an ActiveMQQueueBrowser - used internally
1:      *
0:      * @param theSession
0:      * @param dest
0:      * @param selector
1:      * @throws JMSException
1:      */
1:     protected ActiveMQQueueBrowser(ActiveMQSession session, ConsumerId consumerId, ActiveMQDestination destination, String selector, boolean dispatchAsync) throws JMSException {
1:         this.session = session;
1:         this.consumerId = consumerId;
1:         this.destination = destination;
1:         this.selector = selector;
0:         this.dispatchAsync=dispatchAsync;
0:         this.consumer = createConsumer();
1:     }
1: 
1:     /**
0:      * @param session
0:      * @param originalDestination
0:      * @param selector
0:      * @param cnum
0:      * @return
1:      * @throws JMSException
1:      */
1:     private ActiveMQMessageConsumer createConsumer() throws JMSException {
1:         browseDone.set(false);
0:         return new ActiveMQMessageConsumer(session, consumerId, destination, null, selector, session.connection.getPrefetchPolicy().getQueueBrowserPrefetch(), false, true, dispatchAsync) {
1:             public void dispatch(MessageDispatch md) {
0:                 if( md.getMessage()==null ) {
1:                     browseDone.set(true);
1:                 } else {
1:                     super.dispatch(md);
1:                 }
1:                 notifyMessageAvailable();
1:             }
1:         };
1:     }
1: 
1:     private void destroyConsumer() {
0:         if( consumer == null )
0:             return;        
1:         try {
1:             consumer.close();
0:             consumer=null;
1:         } catch (JMSException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     /**
1:      * Gets an enumeration for browsing the current queue messages in the order
1:      * they would be received.
1:      *
1:      * @return an enumeration for browsing the messages
0:      * @throws JMSException if the JMS provider fails to get the enumeration for this
0:      *                      browser due to some internal error.
1:      */
1: 
1:     public Enumeration getEnumeration() throws JMSException {
1:         checkClosed();
0:         if( consumer==null )
1:             consumer = createConsumer();
1:         return this;
1:     }
1: 
1:     private void checkClosed() throws IllegalStateException {
1:         if (closed) {
1:             throw new IllegalStateException("The Consumer is closed");
1:         }
1:     }
1: 
1:     /**
1:      * @return true if more messages to process
1:      */
1:     public boolean hasMoreElements() {
0:         while( true ) {
1:             
0:             synchronized(this) {
0:                 if( consumer==null )
1:                     return false;
1:             }
1:             
0:             if( consumer.getMessageSize() > 0 ) {
1:                 return true;
1:             }
1:             
0:             if( browseDone.get() || !session.isRunning() ) {
1:                 destroyConsumer();
1:                 return false;
1:             }
1:             
1:             waitForMessage();
1:         }            
1:     }
1: 
1: 
1:     /**
1:      * @return the next message
1:      */
1:     public Object nextElement() {
0:         while( true ) {
1:             
0:             synchronized(this) {
0:                 if( consumer==null )
1:                     return null;
1:             }
1:             
1:             try {
0:                 Message answer = consumer.receiveNoWait();
0:                 if( answer!=null )
1:                     return answer;
1:             } catch (JMSException e) {
0:                 this.session.connection.onAsyncException(e);
1:                 return null;
1:             }
1:             
0:             if( browseDone.get() || !session.isRunning() ) {
1:                 destroyConsumer();
1:                 return null;
1:             }
1:             
1:             waitForMessage();
1:         }            
1:     }
1: 
0:     synchronized public void close() throws JMSException {
1:         destroyConsumer();
0:         closed=true;
1:     }
1: 
1:     /**
1:      * Gets the queue associated with this queue browser.
1:      *
1:      * @return the queue
0:      * @throws JMSException if the JMS provider fails to get the queue associated
0:      *                      with this browser due to some internal error.
1:      */
1: 
1:     public Queue getQueue() throws JMSException {
0:         return (Queue) destination;
1:     }
1: 
1: 
1:     public String getMessageSelector() throws JMSException {
1:         return selector;
1:     }
1: 
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1: 
1:     /** 
0:      *  Wait on a semaphore for a fixed amount of time for a message to come in.
1:      */
1:     protected void waitForMessage() {
1:         try {
0:             synchronized (semaphore ) {
1:                 semaphore.wait(2000);
1:             }
0:         } catch (InterruptedException e) {
1:         }
1:     }
1:     
1:     
1:     protected void notifyMessageAvailable() {
0:         synchronized (semaphore ) {
1:             semaphore.notifyAll();
1:         }
1:     }
1:     
1:     public String toString() {
0:         return "ActiveMQQueueBrowser { consumerId=" +consumerId+" }";
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:751ba90
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException
1:             consumer.sendPullCommand(-1);
1:         } catch (JMSException e) {
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:8fdf345
/////////////////////////////////////////////////////////////////////////
1:             if (session.getTransacted() && session.getTransactionContext().isInLocalTransaction()) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:0acf545
/////////////////////////////////////////////////////////////////////////
1:                 this.session.connection.onClientInternalException(e);
author:James Strachan
-------------------------------------------------------------------------------
commit:fba0742
/////////////////////////////////////////////////////////////////////////
1:             .getMaximumPendingMessageLimit(), false, true, dispatchAsync, null) {
commit:cfbb3c8
/////////////////////////////////////////////////////////////////////////
1:             synchronized (semaphore) {
0:         }
0:         catch (InterruptedException e) {
1:             Thread.currentThread().interrupt();
commit:5371cf5
/////////////////////////////////////////////////////////////////////////
0:      * @param selectorExpression
commit:bed10aa
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQPrefetchPolicy prefetchPolicy = session.connection.getPrefetchPolicy();
0:         return new ActiveMQMessageConsumer(session, consumerId, destination, null, selector, prefetchPolicy.getQueueBrowserPrefetch(), 
0:                 prefetchPolicy.getMaximumPendingMessageLimit(), false, true, dispatchAsync) {
============================================================================