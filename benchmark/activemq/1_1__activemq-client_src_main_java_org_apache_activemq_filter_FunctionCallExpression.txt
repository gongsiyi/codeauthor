1:bf07137: /**
1:bf07137:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bf07137:  * contributor license agreements.  See the NOTICE file distributed with
1:bf07137:  * this work for additional information regarding copyright ownership.
1:bf07137:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bf07137:  * (the "License"); you may not use this file except in compliance with
1:bf07137:  * the License.  You may obtain a copy of the License at
1:bf07137:  *
1:bf07137:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bf07137:  *
1:bf07137:  * Unless required by applicable law or agreed to in writing, software
1:bf07137:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf07137:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf07137:  * See the License for the specific language governing permissions and
1:bf07137:  * limitations under the License.
1:bf07137:  */
1:bf07137: package org.apache.activemq.filter;
1:bf07137: 
1:bf07137: import java.util.HashMap;
1:bf07137: import java.util.List;
1:bf07137: import org.apache.activemq.filter.function.FilterFunction;
1:bf07137: 
1:bf07137: /**
1:bf07137:  * Function call expression for use in selector expressions.  Includes an extensible interface to allow custom
1:bf07137:  * functions to be added without changes to the core.
1:bf07137:  * <p/>
1:bf07137:  * Use registerFunction() to register new function implementations for use in selectors.
1:bf07137:  */
1:bf07137: 
1:bf07137: public class FunctionCallExpression implements Expression {
1:bf07137:     protected static final HashMap<String, functionRegistration> functionRegistry = new HashMap();
1:bf07137: 
1:bf07137:     protected String functionName;
1:bf07137:     protected java.util.ArrayList arguments;
1:bf07137:     protected FilterFunction filterFunc;
1:bf07137: 
1:bf07137:     static {
1:bf07137:         // Register the built-in functions.  It would be nice to just have each function class register
1:bf07137:         //  itself, but that only works when the classes are loaded, which may be never.
1:bf07137: 
1:bf07137:         org.apache.activemq.filter.function.BuiltinFunctionRegistry.register();
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Register the function with the specified name.
1:bf07137:      *
1:bf07137:      * @param    name - the function name, as used in selector expressions.  Case Sensitive.
1:bf07137:      * @param    impl - class which implements the function interface, including parse-time and evaluation-time
1:bf07137:      * operations.
1:bf07137:      * @return true - if the function is successfully registered; false - if a function with the same name is
1:bf07137:      * already registered.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public static boolean registerFunction(String name, FilterFunction impl) {
1:bf07137:         boolean result;
1:bf07137: 
1:bf07137:         result = true;
1:bf07137: 
1:bf07137:         synchronized (functionRegistry) {
1:bf07137:             if (functionRegistry.containsKey(name))
1:bf07137:                 result = false;
1:bf07137:             else
1:bf07137:                 functionRegistry.put(name, new functionRegistration(impl));
1:bf07137:         }
1:bf07137: 
1:bf07137:         return result;
1:bf07137:     }
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Remove the registration of the function with the specified name.
1:bf07137:      * <p/>
1:bf07137:      * Note that parsed expressions using this function will still access its implementation after this call.
1:bf07137:      *
1:bf07137:      * @param    name - name of the function to remove.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public static void deregisterFunction(String name) {
1:bf07137:         synchronized (functionRegistry) {
1:bf07137:             functionRegistry.remove(name);
1:bf07137:         }
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Constructs a function call expression with the named function and argument list.
1:bf07137:      * <p/>
1:bf07137:      * Use createFunctionCall() to create instances.
1:bf07137:      *
1:bf07137:      * @exception invalidFunctionExpressionException - if the function name is not valid.
1:bf07137:      */
1:bf07137: 
1:bf07137:     protected FunctionCallExpression(String func_name, List<Expression> args)
1:bf07137:             throws invalidFunctionExpressionException {
1:bf07137:         functionRegistration func_reg;
1:bf07137: 
1:bf07137:         synchronized (functionRegistry) {
1:bf07137:             func_reg = functionRegistry.get(func_name);
1:bf07137:         }
1:bf07137: 
1:bf07137:         if (func_reg != null) {
1:bf07137:             this.arguments = new java.util.ArrayList();
1:bf07137:             this.arguments.addAll(args);
1:bf07137:             this.functionName = func_name;
1:bf07137:             this.filterFunc = func_reg.getFilterFunction();
1:bf07137:         } else {
1:bf07137:             throw new invalidFunctionExpressionException("invalid function name, \"" + func_name + "\"");
1:bf07137:         }
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Create a function call expression for the named function and argument list, returning a Boolean function
1:bf07137:      * call expression if the function returns a boolean value so that it may be used in boolean contexts.
1:bf07137:      * Used by the parser when a function call is identified.  Note that the function call is created after all
1:bf07137:      * argument expressions so that the function call can properly detect whether it evaluates to a Boolean value.
1:bf07137:      *
1:bf07137:      * @param    func_name - name of the function, as used in selectors.
1:bf07137:      * @param    args - list of argument expressions passed to the function.
1:bf07137:      * @return an instance of a BooleanFunctionCallExpr if the function returns a boolean value in this call,
1:bf07137:      * or a FunctionCallExpression otherwise.
1:bf07137:      * @exception invalidFunctionExpression - if the function name is not valid, or the given argument list is
1:bf07137:      * not valid for the function.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public static FunctionCallExpression createFunctionCall(String func_name, List<Expression> args)
1:bf07137:             throws invalidFunctionExpressionException {
1:bf07137:         FunctionCallExpression result;
1:bf07137: 
1:bf07137:         //
1:bf07137:         // Create a function call expression by default to use with validating the function call
1:bf07137:         //  expression and checking whether it returns a boolean result.
1:bf07137:         //
1:bf07137: 
1:bf07137:         result = new FunctionCallExpression(func_name, args);
1:bf07137: 
1:bf07137: 
1:bf07137:         //
1:bf07137:         // Check wether the function accepts this expression.  I.E. are the arguments valid?
1:bf07137:         //
1:bf07137: 
1:bf07137:         if (result.filterFunc.isValid(result)) {
1:bf07137:             //
1:bf07137:             // If the result of the call is known to alwyas return a boolean value, wrap this
1:bf07137:             //  expression as a valid BooleanExpression so it will be accepted as a boolean result
1:bf07137:             //  by the selector grammar.
1:bf07137:             //
1:bf07137: 
1:bf07137:             if (result.filterFunc.returnsBoolean(result))
1:bf07137:                 result = new BooleanFunctionCallExpr(func_name, args);
1:bf07137:         } else {
1:bf07137:             //
1:bf07137:             // Function does not like this expression.
1:bf07137:             //
1:bf07137: 
1:bf07137:             throw new invalidFunctionExpressionException("invalid call of function " + func_name);
1:bf07137:         }
1:bf07137: 
1:bf07137:         return result;
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Retrieve the number of arguments for the function call defined in this expression.
1:bf07137:      *
1:bf07137:      * @return the number of arguments being passed to the function.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public int getNumArguments() {
1:bf07137:         return arguments.size();
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Retrieve the argument at the specified index; the first argument is index 0.  Used by implementations of
1:bf07137:      * FilterFunction objects to check arguments and evaluate them, as needed.
1:bf07137:      *
1:bf07137:      * @param    which - number of the argument to retrieve; the first is 0.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public Expression getArgument(int which) {
1:bf07137:         return (Expression) arguments.get(which);
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Evaluate the function call expression in the context given.
1:bf07137:      *
1:bf07137:      * @see    Expression#evaluate
1:bf07137:      */
1:bf07137: 
1:bf07137:     public Object evaluate(MessageEvaluationContext message_ctx)
1:bf07137:             throws javax.jms.JMSException {
1:bf07137:         return this.filterFunc.evaluate(this, message_ctx);
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Translate the expression back into text in a form similar to the input to the selector parser.
1:bf07137:      */
1:bf07137: 
1:bf07137:     @Override
1:bf07137:     public String toString() {
1:bf07137:         StringBuilder result;
1:bf07137:         boolean first_f;
1:bf07137: 
1:bf07137:         result = new StringBuilder();
1:bf07137: 
1:bf07137:         result.append(functionName);
1:bf07137:         result.append("(");
1:bf07137:         first_f = true;
1:bf07137: 
1:bf07137:         for (Object arg : arguments) {
1:bf07137:             if (first_f)
1:bf07137:                 first_f = false;
1:bf07137:             else
1:bf07137:                 result.append(", ");
1:bf07137: 
1:bf07137:             result.append(arg.toString());
1:bf07137:         }
1:bf07137: 
1:bf07137:         result.append(")");
1:bf07137: 
1:bf07137:         return result.toString();
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     ////                         ////
1:bf07137:     ////  FUNCTION REGISTRATION  ////
1:bf07137:     ////                         ////
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Maintain a single function registration.
1:bf07137:      */
1:bf07137: 
1:bf07137:     protected static class functionRegistration {
1:bf07137:         protected FilterFunction filterFunction;
1:bf07137: 
1:bf07137:         /**
1:bf07137:          * Constructs a function registration for the given function implementation.
1:bf07137:          */
1:bf07137: 
1:bf07137:         public functionRegistration(FilterFunction func) {
1:bf07137:             this.filterFunction = func;
1:bf07137:         }
1:bf07137: 
1:bf07137: 
1:bf07137:         /**
1:bf07137:          * Retrieve the filter function implementation.
1:bf07137:          */
1:bf07137: 
1:bf07137:         public FilterFunction getFilterFunction() {
1:bf07137:             return filterFunction;
1:bf07137:         }
1:bf07137: 
1:bf07137: 
1:bf07137:         /**
1:bf07137:          * Set the filter function implementation for this registration.
1:bf07137:          */
1:bf07137: 
1:bf07137:         public void setFilterFunction(FilterFunction func) {
1:bf07137:             filterFunction = func;
1:bf07137:         }
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Exception indicating that an invalid function call expression was created, usually by the selector parser.
1:bf07137:      * Conditions include invalid function names and invalid function arguments.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public static class invalidFunctionExpressionException extends java.lang.Exception {
1:bf07137:         public invalidFunctionExpressionException(String msg) {
1:bf07137:             super(msg);
1:bf07137:         }
1:bf07137: 
1:bf07137:         public invalidFunctionExpressionException(String msg, java.lang.Throwable cause) {
1:bf07137:             super(msg, cause);
1:bf07137:         }
1:bf07137:     }
1:bf07137: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.util.HashMap;
1: import java.util.List;
1: import org.apache.activemq.filter.function.FilterFunction;
1: 
1: /**
1:  * Function call expression for use in selector expressions.  Includes an extensible interface to allow custom
1:  * functions to be added without changes to the core.
1:  * <p/>
1:  * Use registerFunction() to register new function implementations for use in selectors.
1:  */
1: 
1: public class FunctionCallExpression implements Expression {
1:     protected static final HashMap<String, functionRegistration> functionRegistry = new HashMap();
1: 
1:     protected String functionName;
1:     protected java.util.ArrayList arguments;
1:     protected FilterFunction filterFunc;
1: 
1:     static {
1:         // Register the built-in functions.  It would be nice to just have each function class register
1:         //  itself, but that only works when the classes are loaded, which may be never.
1: 
1:         org.apache.activemq.filter.function.BuiltinFunctionRegistry.register();
1:     }
1: 
1: 
1:     /**
1:      * Register the function with the specified name.
1:      *
1:      * @param    name - the function name, as used in selector expressions.  Case Sensitive.
1:      * @param    impl - class which implements the function interface, including parse-time and evaluation-time
1:      * operations.
1:      * @return true - if the function is successfully registered; false - if a function with the same name is
1:      * already registered.
1:      */
1: 
1:     public static boolean registerFunction(String name, FilterFunction impl) {
1:         boolean result;
1: 
1:         result = true;
1: 
1:         synchronized (functionRegistry) {
1:             if (functionRegistry.containsKey(name))
1:                 result = false;
1:             else
1:                 functionRegistry.put(name, new functionRegistration(impl));
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * Remove the registration of the function with the specified name.
1:      * <p/>
1:      * Note that parsed expressions using this function will still access its implementation after this call.
1:      *
1:      * @param    name - name of the function to remove.
1:      */
1: 
1:     public static void deregisterFunction(String name) {
1:         synchronized (functionRegistry) {
1:             functionRegistry.remove(name);
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Constructs a function call expression with the named function and argument list.
1:      * <p/>
1:      * Use createFunctionCall() to create instances.
1:      *
1:      * @exception invalidFunctionExpressionException - if the function name is not valid.
1:      */
1: 
1:     protected FunctionCallExpression(String func_name, List<Expression> args)
1:             throws invalidFunctionExpressionException {
1:         functionRegistration func_reg;
1: 
1:         synchronized (functionRegistry) {
1:             func_reg = functionRegistry.get(func_name);
1:         }
1: 
1:         if (func_reg != null) {
1:             this.arguments = new java.util.ArrayList();
1:             this.arguments.addAll(args);
1:             this.functionName = func_name;
1:             this.filterFunc = func_reg.getFilterFunction();
1:         } else {
1:             throw new invalidFunctionExpressionException("invalid function name, \"" + func_name + "\"");
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Create a function call expression for the named function and argument list, returning a Boolean function
1:      * call expression if the function returns a boolean value so that it may be used in boolean contexts.
1:      * Used by the parser when a function call is identified.  Note that the function call is created after all
1:      * argument expressions so that the function call can properly detect whether it evaluates to a Boolean value.
1:      *
1:      * @param    func_name - name of the function, as used in selectors.
1:      * @param    args - list of argument expressions passed to the function.
1:      * @return an instance of a BooleanFunctionCallExpr if the function returns a boolean value in this call,
1:      * or a FunctionCallExpression otherwise.
1:      * @exception invalidFunctionExpression - if the function name is not valid, or the given argument list is
1:      * not valid for the function.
1:      */
1: 
1:     public static FunctionCallExpression createFunctionCall(String func_name, List<Expression> args)
1:             throws invalidFunctionExpressionException {
1:         FunctionCallExpression result;
1: 
1:         //
1:         // Create a function call expression by default to use with validating the function call
1:         //  expression and checking whether it returns a boolean result.
1:         //
1: 
1:         result = new FunctionCallExpression(func_name, args);
1: 
1: 
1:         //
1:         // Check wether the function accepts this expression.  I.E. are the arguments valid?
1:         //
1: 
1:         if (result.filterFunc.isValid(result)) {
1:             //
1:             // If the result of the call is known to alwyas return a boolean value, wrap this
1:             //  expression as a valid BooleanExpression so it will be accepted as a boolean result
1:             //  by the selector grammar.
1:             //
1: 
1:             if (result.filterFunc.returnsBoolean(result))
1:                 result = new BooleanFunctionCallExpr(func_name, args);
1:         } else {
1:             //
1:             // Function does not like this expression.
1:             //
1: 
1:             throw new invalidFunctionExpressionException("invalid call of function " + func_name);
1:         }
1: 
1:         return result;
1:     }
1: 
1: 
1:     /**
1:      * Retrieve the number of arguments for the function call defined in this expression.
1:      *
1:      * @return the number of arguments being passed to the function.
1:      */
1: 
1:     public int getNumArguments() {
1:         return arguments.size();
1:     }
1: 
1: 
1:     /**
1:      * Retrieve the argument at the specified index; the first argument is index 0.  Used by implementations of
1:      * FilterFunction objects to check arguments and evaluate them, as needed.
1:      *
1:      * @param    which - number of the argument to retrieve; the first is 0.
1:      */
1: 
1:     public Expression getArgument(int which) {
1:         return (Expression) arguments.get(which);
1:     }
1: 
1: 
1:     /**
1:      * Evaluate the function call expression in the context given.
1:      *
1:      * @see    Expression#evaluate
1:      */
1: 
1:     public Object evaluate(MessageEvaluationContext message_ctx)
1:             throws javax.jms.JMSException {
1:         return this.filterFunc.evaluate(this, message_ctx);
1:     }
1: 
1: 
1:     /**
1:      * Translate the expression back into text in a form similar to the input to the selector parser.
1:      */
1: 
1:     @Override
1:     public String toString() {
1:         StringBuilder result;
1:         boolean first_f;
1: 
1:         result = new StringBuilder();
1: 
1:         result.append(functionName);
1:         result.append("(");
1:         first_f = true;
1: 
1:         for (Object arg : arguments) {
1:             if (first_f)
1:                 first_f = false;
1:             else
1:                 result.append(", ");
1: 
1:             result.append(arg.toString());
1:         }
1: 
1:         result.append(")");
1: 
1:         return result.toString();
1:     }
1: 
1: 
1:     ////                         ////
1:     ////  FUNCTION REGISTRATION  ////
1:     ////                         ////
1: 
1:     /**
1:      * Maintain a single function registration.
1:      */
1: 
1:     protected static class functionRegistration {
1:         protected FilterFunction filterFunction;
1: 
1:         /**
1:          * Constructs a function registration for the given function implementation.
1:          */
1: 
1:         public functionRegistration(FilterFunction func) {
1:             this.filterFunction = func;
1:         }
1: 
1: 
1:         /**
1:          * Retrieve the filter function implementation.
1:          */
1: 
1:         public FilterFunction getFilterFunction() {
1:             return filterFunction;
1:         }
1: 
1: 
1:         /**
1:          * Set the filter function implementation for this registration.
1:          */
1: 
1:         public void setFilterFunction(FilterFunction func) {
1:             filterFunction = func;
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Exception indicating that an invalid function call expression was created, usually by the selector parser.
1:      * Conditions include invalid function names and invalid function arguments.
1:      */
1: 
1:     public static class invalidFunctionExpressionException extends java.lang.Exception {
1:         public invalidFunctionExpressionException(String msg) {
1:             super(msg);
1:         }
1: 
1:         public invalidFunctionExpressionException(String msg, java.lang.Throwable cause) {
1:             super(msg, cause);
1:         }
1:     }
1: }
============================================================================