1:6e57f3a: /**
1:6e57f3a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e57f3a:  * contributor license agreements.  See the NOTICE file distributed with
1:6e57f3a:  * this work for additional information regarding copyright ownership.
1:6e57f3a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e57f3a:  * (the "License"); you may not use this file except in compliance with
1:6e57f3a:  * the License.  You may obtain a copy of the License at
1:6e57f3a:  *
1:6e57f3a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e57f3a:  *
1:6e57f3a:  * Unless required by applicable law or agreed to in writing, software
1:6e57f3a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e57f3a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e57f3a:  * See the License for the specific language governing permissions and
1:6e57f3a:  * limitations under the License.
1:6e57f3a:  */
1:6e57f3a: package org.apache.activemq.broker.virtual;
1:6e57f3a: 
1:6e57f3a: import java.io.IOException;
1:6e57f3a: import java.net.URI;
1:6e57f3a: 
1:6e57f3a: import javax.jms.Connection;
1:6e57f3a: import javax.jms.Session;
1:6e57f3a: import javax.jms.Topic;
1:6e57f3a: import javax.jms.TopicSubscriber;
1:6e57f3a: import javax.management.InstanceNotFoundException;
1:6e57f3a: import javax.management.MBeanServerConnection;
1:6e57f3a: import javax.management.ObjectInstance;
1:6e57f3a: import javax.management.ObjectName;
1:6e57f3a: import javax.management.remote.JMXConnector;
1:6e57f3a: import javax.management.remote.JMXConnectorFactory;
1:6e57f3a: import javax.management.remote.JMXServiceURL;
1:6e57f3a: 
1:6e57f3a: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:6e57f3a: 
1:6e57f3a: import org.apache.activemq.broker.Broker;
1:6e57f3a: import org.apache.activemq.broker.BrokerService;
1:6e57f3a: import org.apache.activemq.broker.ConnectionContext;
1:6e57f3a: import org.apache.activemq.broker.ProducerBrokerExchange;
1:6e57f3a: import org.apache.activemq.broker.region.Destination;
1:6e57f3a: import org.apache.activemq.broker.region.DestinationFilter;
1:6e57f3a: import org.apache.activemq.broker.region.DestinationInterceptor;
1:6e57f3a: import org.apache.activemq.command.ActiveMQDestination;
1:6e57f3a: import org.apache.activemq.command.Message;
1:6e57f3a: import org.apache.activemq.xbean.XBeanBrokerFactory;
1:6e57f3a: 
1:6e57f3a: import org.slf4j.Logger;
1:6e57f3a: import org.slf4j.LoggerFactory;
1:6e57f3a: 
1:6e57f3a: 
1:6e57f3a: /**
1:6e57f3a:  * Test for AMQ-4571.
1:6e57f3a:  * checks that durable subscription is fully unregistered 
1:6e57f3a:  * when using nested destination interceptors.
1:6e57f3a:  */
1:6e57f3a: public class DestinationInterceptorDurableSubTest extends EmbeddedBrokerTestSupport {
1:6e57f3a: 
1:6e57f3a:     private static final transient Logger LOG = LoggerFactory.getLogger(DestinationInterceptorDurableSubTest.class);
1:6e57f3a:     private MBeanServerConnection mbsc = null;
1:6e57f3a:     public static final String JMX_CONTEXT_BASE_NAME = "org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName=";
1:6e57f3a: 
1:6e57f3a:     /**
1:6e57f3a:      * Tests AMQ-4571.
1:6e57f3a:      * @throws Exception
1:6e57f3a:      */
1:6e57f3a:     public void testVirtualTopicRemoval() throws Exception {
1:6e57f3a: 
1:6e57f3a:         LOG.debug("Running testVirtualTopicRemoval()");
1:6e57f3a:         String clientId1 = "myId1";
1:6e57f3a:         String clientId2 = "myId2";
1:6e57f3a: 
1:6e57f3a:         Connection conn = null;
1:6e57f3a:         Session session = null;
1:6e57f3a: 
1:6e57f3a:         try {
1:6e57f3a:             assertTrue(broker.isStarted());
1:6e57f3a: 
1:6e57f3a:             // create durable sub 1
1:6e57f3a:             conn = createConnection();
1:6e57f3a:             conn.setClientID(clientId1);
1:6e57f3a:             conn.start();
1:6e57f3a:             session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6e57f3a:             // Topic topic = session.createTopic(destination.getPhysicalName());
1:6e57f3a:             TopicSubscriber sub1 = session.createDurableSubscriber((Topic) destination, clientId1);
1:6e57f3a: 
1:6e57f3a:             // create durable sub 2
1:6e57f3a:             TopicSubscriber sub2 = session.createDurableSubscriber((Topic) destination, clientId2);
1:6e57f3a: 
1:6e57f3a:             // verify two subs registered in JMX 
1:6e57f3a:             assertSubscriptionCount(destination.getPhysicalName(), 2);
1:6e57f3a:             assertTrue(isSubRegisteredInJmx(destination.getPhysicalName(), clientId1));
1:6e57f3a:             assertTrue(isSubRegisteredInJmx(destination.getPhysicalName(), clientId2));
1:6e57f3a: 
1:6e57f3a:             // delete sub 1
1:6e57f3a:             sub1.close();
1:6e57f3a:             session.unsubscribe(clientId1);
1:6e57f3a: 
1:6e57f3a:             // verify only one sub registered in JMX
1:6e57f3a:             assertSubscriptionCount(destination.getPhysicalName(), 1);
1:6e57f3a:             assertFalse(isSubRegisteredInJmx(destination.getPhysicalName(), clientId1));
1:6e57f3a:             assertTrue(isSubRegisteredInJmx(destination.getPhysicalName(), clientId2));
1:6e57f3a: 
1:6e57f3a:             // delete sub 2
1:6e57f3a:             sub2.close();
1:6e57f3a:             session.unsubscribe(clientId2);
1:6e57f3a: 
1:6e57f3a:             // verify no sub registered in JMX
1:6e57f3a:             assertSubscriptionCount(destination.getPhysicalName(), 0);
1:6e57f3a:             assertFalse(isSubRegisteredInJmx(destination.getPhysicalName(), clientId1));
1:6e57f3a:             assertFalse(isSubRegisteredInJmx(destination.getPhysicalName(), clientId2));
1:6e57f3a:         } finally {
1:6e57f3a:             session.close();
1:6e57f3a:             conn.close();
1:6e57f3a:         }
1:6e57f3a:     }
1:6e57f3a: 
1:6e57f3a: 
1:6e57f3a:     /**
1:6e57f3a:      * Connects to broker using JMX
1:6e57f3a:      * @return The JMX connection
1:6e57f3a:      * @throws IOException in case of any errors
1:6e57f3a:      */
1:6e57f3a:     protected MBeanServerConnection connectJMXBroker() throws IOException {
1:6e57f3a:         // connect to broker via JMX
1:6e57f3a:         JMXServiceURL url =  new JMXServiceURL("service:jmx:rmi:///jndi/rmi://:1299/jmxrmi");
1:6e57f3a:         JMXConnector jmxc = JMXConnectorFactory.connect(url, null);
1:6e57f3a:         MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();
1:6e57f3a:         LOG.debug("JMX connection established");
1:6e57f3a:         return mbsc;
1:6e57f3a:     }
1:6e57f3a: 
1:6e57f3a:     /**
1:6e57f3a:      * Asserts that the Subscriptions JMX attribute of a topic has the expected
1:6e57f3a:      * count. 
1:6e57f3a:      * @param topicName name of the topic destination
1:6e57f3a:      * @param expectedCount expected number of subscriptions
1:6e57f3a:      * @return
1:6e57f3a:      */
1:6e57f3a:     protected boolean assertSubscriptionCount(String topicName, int expectedCount) {
1:6e57f3a:         try {
1:6e57f3a:             if (mbsc == null) {
1:6e57f3a:                 mbsc = connectJMXBroker();
1:6e57f3a:             }
1:6e57f3a:             // query broker queue size
1:6e57f3a:             ObjectName[] tmp = (ObjectName[])mbsc.getAttribute(new ObjectName(JMX_CONTEXT_BASE_NAME + topicName), "Subscriptions");
1:6e57f3a:             assertEquals(expectedCount, tmp.length);
1:6e57f3a:         } catch (Exception ex) {
1:6e57f3a:             LOG.error(ex.getMessage());
1:6e57f3a:             return false;
1:6e57f3a:         }
1:6e57f3a:         return true;
1:6e57f3a:     }
1:6e57f3a: 
1:6e57f3a:     /**
1:6e57f3a:      * Checks if a subscriptions for topic topicName with subName is registered in JMX
1:6e57f3a:      * 
1:6e57f3a:      * @param topicName physical name of topic destination (excluding prefix 'topic://')
1:6e57f3a:      * @param subName name of the durable subscription
1:6e57f3a:      * @return true if registered, false otherwise
1:6e57f3a:      */
1:6e57f3a:     protected boolean isSubRegisteredInJmx(String topicName, String subName) {
1:6e57f3a: 
1:6e57f3a:         try {
1:6e57f3a:             if (mbsc == null) {
1:6e57f3a:                 mbsc = connectJMXBroker();
1:6e57f3a:             }
1:6e57f3a: 
1:6e57f3a:             // A durable sub is registered under the Subscriptions JMX attribute of the topic and 
1:6e57f3a:             // as its own ObjectInstance under the topic's Consumer namespace.
1:6e57f3a:             // AMQ-4571 only removed the latter not the former on unsubscribe(), so we need 
1:6e57f3a:             // to check against both.
1:6e57f3a:             ObjectName[] names = (ObjectName[])mbsc.getAttribute(new ObjectName(JMX_CONTEXT_BASE_NAME + topicName), "Subscriptions");
1:6e57f3a:             ObjectInstance instance = (ObjectInstance)mbsc.getObjectInstance(
1:6e57f3a:                 new ObjectName(JMX_CONTEXT_BASE_NAME + 
1:6e57f3a:                     topicName + 
1:6e57f3a:                     ",endpoint=Consumer,clientId=myId1,consumerId=Durable(myId1_" + 
1:6e57f3a:                     subName + 
1:6e57f3a:                     ")")
1:6e57f3a:             );
1:6e57f3a: 
1:6e57f3a:             if (instance == null) 
1:6e57f3a:                 return false;
1:6e57f3a: 
1:6e57f3a:             for (int i=0; i < names.length; i++) {
1:6e57f3a:                 if (names[i].toString().contains(subName))
1:6e57f3a:                     return true;
1:6e57f3a:             }
1:6e57f3a:         } catch (InstanceNotFoundException ine) {
1:6e57f3a:             //this may be expected so log at info level
1:6e57f3a:             LOG.info(ine.toString());
1:6e57f3a:             return false;
1:6e57f3a:         }
1:6e57f3a:         catch (Exception ex) {
1:6e57f3a:             LOG.error(ex.toString());
1:6e57f3a:             return false;
1:6e57f3a:         }
1:6e57f3a:         return false;
1:6e57f3a:     }
1:6e57f3a: 
1:6e57f3a: 
1:6e57f3a:     protected void tearDown() throws Exception {
1:6e57f3a:         super.tearDown();
1:6e57f3a:     }
1:6e57f3a: 
1:6e57f3a: 
1:6e57f3a:     protected BrokerService createBroker() throws Exception {
1:6e57f3a:         XBeanBrokerFactory factory = new XBeanBrokerFactory();
1:6e57f3a:         BrokerService answer = factory.createBroker(new URI(getBrokerConfigUri()));
1:6e57f3a: 
1:6e57f3a:         // lets disable persistence as we are a test
1:6e57f3a:         answer.setPersistent(false);
1:6e57f3a:         useTopic = true;
1:6e57f3a:         return answer;
1:6e57f3a:     }
1:6e57f3a: 
1:6e57f3a: 
1:6e57f3a:     protected String getBrokerConfigUri() {
1:6e57f3a:         return "org/apache/activemq/broker/virtual/virtual-topics-and-interceptor.xml";
1:6e57f3a:     }
1:6e57f3a: 
1:6e57f3a: 
1:6e57f3a:     /**
1:6e57f3a:      * Simple but custom topic interceptor.
1:6e57f3a:      * To be used for testing nested interceptors in conjunction with 
1:6e57f3a:      * virtual topic interceptor.
1:6e57f3a:      */
1:6e57f3a:     public static class SimpleDestinationInterceptor implements DestinationInterceptor {
1:6e57f3a: 
1:6e57f3a:         private final Logger LOG = LoggerFactory.getLogger(SimpleDestinationInterceptor.class);
1:6e57f3a:         private BrokerService broker;
1:6e57f3a: 
1:6e57f3a:         public SimpleDestinationInterceptor() {
1:6e57f3a:         }
1:6e57f3a: 
1:6e57f3a:         /* (non-Javadoc)
1:6e57f3a:          * @see org.apache.activemq.broker.BrokerServiceAware#setBrokerService(org.apache.activemq.broker.BrokerService)
1:6e57f3a:          */
1:6e57f3a:         public void setBrokerService(BrokerService brokerService) {
1:6e57f3a:             LOG.info("setBrokerService()");
1:6e57f3a:             this.broker = brokerService;
1:6e57f3a:         }
1:6e57f3a: 
1:6e57f3a:         /* (non-Javadoc)
1:6e57f3a:          * @see org.apache.activemq.broker.region.DestinationInterceptor#intercept(org.apache.activemq.broker.region.Destination)
1:6e57f3a:          */
1:6e57f3a:         public Destination intercept(final Destination destination) {
1:6e57f3a:             LOG.info("intercept({})", destination.getName());
1:6e57f3a: 
1:6e57f3a:             if (!destination.getActiveMQDestination().getPhysicalName().startsWith("ActiveMQ")) {
1:6e57f3a:                 return new DestinationFilter(destination) {
1:6e57f3a:                   public void send(ProducerBrokerExchange context, Message message) throws Exception {
1:6e57f3a:                     // Send message to Destination
1:6e57f3a:                     if (LOG.isDebugEnabled()) {
1:6e57f3a:                       LOG.debug("SimpleDestinationInterceptor: Sending message to destination:"
1:6e57f3a:                           + this.getActiveMQDestination().getPhysicalName());
1:6e57f3a:                     }
1:6e57f3a:                     // message.setDestination(destination.getActiveMQDestination());
1:6e57f3a:                     super.send(context, message);
1:6e57f3a:                   }
1:6e57f3a:                 };
1:6e57f3a:               }
1:6e57f3a:               return destination;
1:6e57f3a:         }
1:6e57f3a: 
1:6e57f3a: 
1:6e57f3a:         /* (non-Javadoc)
1:6e57f3a:          * @see org.apache.activemq.broker.region.DestinationInterceptor#remove(org.apache.activemq.broker.region.Destination)
1:6e57f3a:          */
1:6e57f3a:         public void remove(Destination destination) {
1:6e57f3a:             LOG.info("remove({})", destination.getName());
1:6e57f3a:             this.broker = null;
1:6e57f3a:         }
1:6e57f3a: 
1:6e57f3a: 
1:6e57f3a:         /* (non-Javadoc)
1:6e57f3a:          * @see org.apache.activemq.broker.region.DestinationInterceptor#create(org.apache.activemq.broker.Broker, org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ActiveMQDestination)
1:6e57f3a:          */
1:6e57f3a:         public void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
1:6e57f3a:             LOG.info("create("+ broker.getBrokerName() + ", " + context.toString() + ", " + destination.getPhysicalName());
1:6e57f3a:         }
1:6e57f3a:     }
1:6e57f3a: }
============================================================================
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:6e57f3a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: import javax.management.remote.JMXConnector;
1: import javax.management.remote.JMXConnectorFactory;
1: import javax.management.remote.JMXServiceURL;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.xbean.XBeanBrokerFactory;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: /**
1:  * Test for AMQ-4571.
1:  * checks that durable subscription is fully unregistered 
1:  * when using nested destination interceptors.
1:  */
1: public class DestinationInterceptorDurableSubTest extends EmbeddedBrokerTestSupport {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(DestinationInterceptorDurableSubTest.class);
1:     private MBeanServerConnection mbsc = null;
1:     public static final String JMX_CONTEXT_BASE_NAME = "org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName=";
1: 
1:     /**
1:      * Tests AMQ-4571.
1:      * @throws Exception
1:      */
1:     public void testVirtualTopicRemoval() throws Exception {
1: 
1:         LOG.debug("Running testVirtualTopicRemoval()");
1:         String clientId1 = "myId1";
1:         String clientId2 = "myId2";
1: 
1:         Connection conn = null;
1:         Session session = null;
1: 
1:         try {
1:             assertTrue(broker.isStarted());
1: 
1:             // create durable sub 1
1:             conn = createConnection();
1:             conn.setClientID(clientId1);
1:             conn.start();
1:             session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             // Topic topic = session.createTopic(destination.getPhysicalName());
1:             TopicSubscriber sub1 = session.createDurableSubscriber((Topic) destination, clientId1);
1: 
1:             // create durable sub 2
1:             TopicSubscriber sub2 = session.createDurableSubscriber((Topic) destination, clientId2);
1: 
1:             // verify two subs registered in JMX 
1:             assertSubscriptionCount(destination.getPhysicalName(), 2);
1:             assertTrue(isSubRegisteredInJmx(destination.getPhysicalName(), clientId1));
1:             assertTrue(isSubRegisteredInJmx(destination.getPhysicalName(), clientId2));
1: 
1:             // delete sub 1
1:             sub1.close();
1:             session.unsubscribe(clientId1);
1: 
1:             // verify only one sub registered in JMX
1:             assertSubscriptionCount(destination.getPhysicalName(), 1);
1:             assertFalse(isSubRegisteredInJmx(destination.getPhysicalName(), clientId1));
1:             assertTrue(isSubRegisteredInJmx(destination.getPhysicalName(), clientId2));
1: 
1:             // delete sub 2
1:             sub2.close();
1:             session.unsubscribe(clientId2);
1: 
1:             // verify no sub registered in JMX
1:             assertSubscriptionCount(destination.getPhysicalName(), 0);
1:             assertFalse(isSubRegisteredInJmx(destination.getPhysicalName(), clientId1));
1:             assertFalse(isSubRegisteredInJmx(destination.getPhysicalName(), clientId2));
1:         } finally {
1:             session.close();
1:             conn.close();
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Connects to broker using JMX
1:      * @return The JMX connection
1:      * @throws IOException in case of any errors
1:      */
1:     protected MBeanServerConnection connectJMXBroker() throws IOException {
1:         // connect to broker via JMX
1:         JMXServiceURL url =  new JMXServiceURL("service:jmx:rmi:///jndi/rmi://:1299/jmxrmi");
1:         JMXConnector jmxc = JMXConnectorFactory.connect(url, null);
1:         MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();
1:         LOG.debug("JMX connection established");
1:         return mbsc;
1:     }
1: 
1:     /**
1:      * Asserts that the Subscriptions JMX attribute of a topic has the expected
1:      * count. 
1:      * @param topicName name of the topic destination
1:      * @param expectedCount expected number of subscriptions
1:      * @return
1:      */
1:     protected boolean assertSubscriptionCount(String topicName, int expectedCount) {
1:         try {
1:             if (mbsc == null) {
1:                 mbsc = connectJMXBroker();
1:             }
1:             // query broker queue size
1:             ObjectName[] tmp = (ObjectName[])mbsc.getAttribute(new ObjectName(JMX_CONTEXT_BASE_NAME + topicName), "Subscriptions");
1:             assertEquals(expectedCount, tmp.length);
1:         } catch (Exception ex) {
1:             LOG.error(ex.getMessage());
1:             return false;
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Checks if a subscriptions for topic topicName with subName is registered in JMX
1:      * 
1:      * @param topicName physical name of topic destination (excluding prefix 'topic://')
1:      * @param subName name of the durable subscription
1:      * @return true if registered, false otherwise
1:      */
1:     protected boolean isSubRegisteredInJmx(String topicName, String subName) {
1: 
1:         try {
1:             if (mbsc == null) {
1:                 mbsc = connectJMXBroker();
1:             }
1: 
1:             // A durable sub is registered under the Subscriptions JMX attribute of the topic and 
1:             // as its own ObjectInstance under the topic's Consumer namespace.
1:             // AMQ-4571 only removed the latter not the former on unsubscribe(), so we need 
1:             // to check against both.
1:             ObjectName[] names = (ObjectName[])mbsc.getAttribute(new ObjectName(JMX_CONTEXT_BASE_NAME + topicName), "Subscriptions");
1:             ObjectInstance instance = (ObjectInstance)mbsc.getObjectInstance(
1:                 new ObjectName(JMX_CONTEXT_BASE_NAME + 
1:                     topicName + 
1:                     ",endpoint=Consumer,clientId=myId1,consumerId=Durable(myId1_" + 
1:                     subName + 
1:                     ")")
1:             );
1: 
1:             if (instance == null) 
1:                 return false;
1: 
1:             for (int i=0; i < names.length; i++) {
1:                 if (names[i].toString().contains(subName))
1:                     return true;
1:             }
1:         } catch (InstanceNotFoundException ine) {
1:             //this may be expected so log at info level
1:             LOG.info(ine.toString());
1:             return false;
1:         }
1:         catch (Exception ex) {
1:             LOG.error(ex.toString());
1:             return false;
1:         }
1:         return false;
1:     }
1: 
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         XBeanBrokerFactory factory = new XBeanBrokerFactory();
1:         BrokerService answer = factory.createBroker(new URI(getBrokerConfigUri()));
1: 
1:         // lets disable persistence as we are a test
1:         answer.setPersistent(false);
1:         useTopic = true;
1:         return answer;
1:     }
1: 
1: 
1:     protected String getBrokerConfigUri() {
1:         return "org/apache/activemq/broker/virtual/virtual-topics-and-interceptor.xml";
1:     }
1: 
1: 
1:     /**
1:      * Simple but custom topic interceptor.
1:      * To be used for testing nested interceptors in conjunction with 
1:      * virtual topic interceptor.
1:      */
1:     public static class SimpleDestinationInterceptor implements DestinationInterceptor {
1: 
1:         private final Logger LOG = LoggerFactory.getLogger(SimpleDestinationInterceptor.class);
1:         private BrokerService broker;
1: 
1:         public SimpleDestinationInterceptor() {
1:         }
1: 
1:         /* (non-Javadoc)
1:          * @see org.apache.activemq.broker.BrokerServiceAware#setBrokerService(org.apache.activemq.broker.BrokerService)
1:          */
1:         public void setBrokerService(BrokerService brokerService) {
1:             LOG.info("setBrokerService()");
1:             this.broker = brokerService;
1:         }
1: 
1:         /* (non-Javadoc)
1:          * @see org.apache.activemq.broker.region.DestinationInterceptor#intercept(org.apache.activemq.broker.region.Destination)
1:          */
1:         public Destination intercept(final Destination destination) {
1:             LOG.info("intercept({})", destination.getName());
1: 
1:             if (!destination.getActiveMQDestination().getPhysicalName().startsWith("ActiveMQ")) {
1:                 return new DestinationFilter(destination) {
1:                   public void send(ProducerBrokerExchange context, Message message) throws Exception {
1:                     // Send message to Destination
1:                     if (LOG.isDebugEnabled()) {
1:                       LOG.debug("SimpleDestinationInterceptor: Sending message to destination:"
1:                           + this.getActiveMQDestination().getPhysicalName());
1:                     }
1:                     // message.setDestination(destination.getActiveMQDestination());
1:                     super.send(context, message);
1:                   }
1:                 };
1:               }
1:               return destination;
1:         }
1: 
1: 
1:         /* (non-Javadoc)
1:          * @see org.apache.activemq.broker.region.DestinationInterceptor#remove(org.apache.activemq.broker.region.Destination)
1:          */
1:         public void remove(Destination destination) {
1:             LOG.info("remove({})", destination.getName());
1:             this.broker = null;
1:         }
1: 
1: 
1:         /* (non-Javadoc)
1:          * @see org.apache.activemq.broker.region.DestinationInterceptor#create(org.apache.activemq.broker.Broker, org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ActiveMQDestination)
1:          */
1:         public void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
1:             LOG.info("create("+ broker.getBrokerName() + ", " + context.toString() + ", " + destination.getPhysicalName());
1:         }
1:     }
1: }
============================================================================