1:b514d3f: /**
1:87f75b2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:87f75b2:  * contributor license agreements.  See the NOTICE file distributed with
1:87f75b2:  * this work for additional information regarding copyright ownership.
1:87f75b2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:87f75b2:  * (the "License"); you may not use this file except in compliance with
1:87f75b2:  * the License.  You may obtain a copy of the License at
1:540dd5c:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:87f75b2:  * Unless required by applicable law or agreed to in writing, software
1:87f75b2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:87f75b2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:87f75b2:  * See the License for the specific language governing permissions and
1:87f75b2:  * limitations under the License.
3:87f75b2:  */
1:87f75b2: package org.apache.activemq.web;
17:87f75b2: 
1:540dd5c: import java.io.IOException;
1:540dd5c: import java.util.ArrayList;
1:540dd5c: import java.util.Collection;
1:540dd5c: import java.util.HashMap;
1:d2836d1: import java.util.HashSet;
1:540dd5c: import java.util.List;
1:b514d3f: import java.util.Map;
1:540dd5c: import java.util.Set;
1:87f75b2: 
1:87f75b2: import javax.management.MBeanServerConnection;
1:87f75b2: import javax.management.MBeanServerInvocationHandler;
1:87f75b2: import javax.management.MalformedObjectNameException;
1:87f75b2: import javax.management.ObjectName;
1:1f35514: import javax.management.QueryExp;
1:87f75b2: import javax.management.remote.JMXConnector;
1:87f75b2: import javax.management.remote.JMXConnectorFactory;
1:87f75b2: import javax.management.remote.JMXServiceURL;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:540dd5c: import org.apache.activemq.broker.jmx.ManagementContext;
1:540dd5c: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:540dd5c: import org.apache.activemq.command.ActiveMQDestination;
1:b514d3f: import org.apache.activemq.web.config.WebConsoleConfiguration;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:87f75b2: 
1:88dfd77: /**
1:87f75b2:  * A {@link BrokerFacade} which uses a JMX-Connection to communicate with a
1:87f75b2:  * broker
1:87f75b2:  */
1:87f75b2: public class RemoteJMXBrokerFacade extends BrokerFacadeSupport {
1:b0b3a16: 
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(RemoteJMXBrokerFacade.class);
1:b0b3a16: 
1:87f75b2:     private String brokerName;
1:87f75b2:     private JMXConnector connector;
1:b514d3f:     private WebConsoleConfiguration configuration;
1:540dd5c: 
1:87f75b2:     public void setBrokerName(String brokerName) {
1:87f75b2:         this.brokerName = brokerName;
1:88dfd77:     }
1:540dd5c: 
1:88dfd77:     public WebConsoleConfiguration getConfiguration() {
1:b0b3a16:         return configuration;
1:b0b3a16:     }
1:88dfd77: 
1:b0b3a16:     public void setConfiguration(WebConsoleConfiguration configuration) {
1:b0b3a16:         this.configuration = configuration;
1:b0b3a16:     }
1:88dfd77: 
1:b0b3a16:     /**
1:87f75b2:      * Shutdown this facade aka close any open connection.
1:b514d3f:      */
1:87f75b2:     public void shutdown() {
1:87f75b2:         closeConnection();
1:88dfd77:     }
1:0d27c49: 
1:b0b3a16:     @Override
1:87f75b2:     public BrokerViewMBean getBrokerAdmin() throws Exception {
1:88dfd77:         MBeanServerConnection connection = getMBeanServerConnection();
1:b514d3f: 
1:b0b3a16:         Set<ObjectName> brokers = findBrokers(connection);
1:b514d3f:         if (brokers.size() == 0) {
1:b514d3f:             throw new IOException("No broker could be found in the JMX.");
1:1f35514:         }
1:b0b3a16:         ObjectName name = brokers.iterator().next();
1:b0b3a16:         BrokerViewMBean mbean = MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
1:87f75b2:         return mbean;
1:b514d3f:     }
1:b514d3f: 
1:b0b3a16:     @Override
1:b0b3a16:     public String getBrokerName() throws Exception, MalformedObjectNameException {
1:88dfd77:         return getBrokerAdmin().getBrokerName();
1:88dfd77:     }
1:b0b3a16: 
1:88dfd77:     protected MBeanServerConnection getMBeanServerConnection() throws Exception {
1:87f75b2:         JMXConnector connector = this.connector;
1:87f75b2:         if (isConnectionActive(connector)) {
1:87f75b2:             return connector.getMBeanServerConnection();
1:b514d3f:         }
1:fccb3cc: 
1:87f75b2:         synchronized (this) {
1:87f75b2:             closeConnection();
1:540dd5c:             LOG.debug("Creating a new JMX-Connection to the broker");
1:87f75b2:             this.connector = createConnection();
1:87f75b2:             return this.connector.getMBeanServerConnection();
1:b514d3f:         }
1:b514d3f:     }
1:fccb3cc: 
1:87f75b2:     protected boolean isConnectionActive(JMXConnector connector) {
1:87f75b2:         if (connector == null) {
1:87f75b2:             return false;
8:b514d3f:         }
1:87f75b2: 
1:b514d3f:         try {
2:540dd5c:             MBeanServerConnection connection = connector.getMBeanServerConnection();
1:87f75b2:             int brokerCount = findBrokers(connection).size();
1:87f75b2:             return brokerCount > 0;
2:540dd5c:         } catch (Exception e) {
1:87f75b2:             return false;
1:b514d3f:         }
1:b514d3f:     }
1:87f75b2: 
1:87f75b2:     protected JMXConnector createConnection() {
1:fccb3cc: 
1:b514d3f:         Map<String, Object> env = new HashMap<String, Object>();
1:b0b3a16:         if (this.configuration.getJmxUser() != null) {
1:b0b3a16:             env.put("jmx.remote.credentials", new String[] { this.configuration.getJmxUser(), this.configuration.getJmxPassword() });
1:b0b3a16:         }
1:b514d3f:         Collection<JMXServiceURL> jmxUrls = this.configuration.getJmxUrls();
1:87f75b2: 
1:87f75b2:         Exception exception = null;
1:b0b3a16:         for (JMXServiceURL url : jmxUrls) {
1:b0b3a16:             try {
1:b0b3a16:                 JMXConnector connector = JMXConnectorFactory.connect(url, env);
1:b0b3a16:                 connector.connect();
1:b0b3a16:                 MBeanServerConnection connection = connector.getMBeanServerConnection();
1:87f75b2: 
1:b0b3a16:                 Set<ObjectName> brokers = findBrokers(connection);
1:b0b3a16:                 if (brokers.size() > 0) {
1:b0b3a16:                     LOG.info("Connected via JMX to the broker at " + url);
1:b0b3a16:                     return connector;
1:b0b3a16:                 }
1:b0b3a16:             } catch (Exception e) {
1:b0b3a16:                 // Keep the exception for later
1:b0b3a16:                 exception = e;
1:b0b3a16:             }
1:b0b3a16:         }
1:b0b3a16:         if (exception != null) {
1:b0b3a16:             if (exception instanceof RuntimeException) {
1:b0b3a16:                 throw (RuntimeException) exception;
1:b0b3a16:             } else {
1:b0b3a16:                 throw new RuntimeException(exception);
1:b0b3a16:             }
1:b0b3a16:         }
1:b0b3a16:         throw new IllegalStateException("No broker is found at any of the " + jmxUrls.size() + " configured urls");
1:b0b3a16:     }
1:87f75b2: 
1:87f75b2:     protected synchronized void closeConnection() {
1:87f75b2:         if (connector != null) {
1:b514d3f:             try {
1:540dd5c:                 LOG.debug("Closing a connection to a broker (" + connector.getConnectionId() + ")");
1:87f75b2:                 connector.close();
1:540dd5c:             } catch (IOException e) {
1:b0b3a16:                 // Ignore the exception, since it most likly won't matter anymore
1:b514d3f:             }
1:b514d3f:         }
1:b514d3f:     }
1:87f75b2: 
1:b0b3a16:     /**
1:b0b3a16:      * Finds all ActiveMQ-Brokers registered on a certain JMX-Server or, if a
1:b0b3a16:      * JMX-BrokerName has been set, the broker with that name.
1:b0b3a16:      *
1:b0b3a16:      * @param connection
1:b0b3a16:      *            not <code>null</code>
1:b0b3a16:      * @return Set with ObjectName-elements
1:b0b3a16:      * @throws IOException
1:b0b3a16:      * @throws MalformedObjectNameException
1:b0b3a16:      */
1:b0b3a16:     protected Set<ObjectName> findBrokers(MBeanServerConnection connection) throws IOException, MalformedObjectNameException {
1:b0b3a16:         ObjectName name;
1:b0b3a16:         if (this.brokerName == null) {
1:b0b3a16:             name = new ObjectName("org.apache.activemq:type=Broker,brokerName=*");
1:b0b3a16:         } else {
1:b0b3a16:             name = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + this.brokerName);
1:b0b3a16:         }
1:b514d3f: 
1:b0b3a16:         Set<ObjectName> brokers = connection.queryNames(name, null);
1:b0b3a16:         Set<ObjectName> masterBrokers = new HashSet<ObjectName>();
1:b0b3a16:         for (ObjectName objectName : brokers) {
1:b0b3a16:             BrokerViewMBean mbean = MBeanServerInvocationHandler.newProxyInstance(connection, objectName, BrokerViewMBean.class, true);
1:b0b3a16:             if (!mbean.isSlave())
1:b0b3a16:                 masterBrokers.add(objectName);
1:b0b3a16:         }
1:b0b3a16:         return masterBrokers;
1:b0b3a16:     }
1:88dfd77: 
1:b0b3a16:     @Override
1:b0b3a16:     public void purgeQueue(ActiveMQDestination destination) throws Exception {
1:b0b3a16:         QueueViewMBean queue = getQueue(destination.getPhysicalName());
1:b0b3a16:         queue.purge();
1:b0b3a16:     }
1:88dfd77: 
1:b0b3a16:     @Override
1:b0b3a16:     public ManagementContext getManagementContext() {
1:b0b3a16:         throw new IllegalStateException("not supported");
1:b0b3a16:     }
1:b0b3a16: 
1:b0b3a16:     @Override
1:b0b3a16:     protected <T> Collection<T> getManagedObjects(ObjectName[] names, Class<T> type) {
1:b0b3a16:         MBeanServerConnection connection;
1:b0b3a16:         try {
1:b0b3a16:             connection = getMBeanServerConnection();
1:b0b3a16:         } catch (Exception e) {
1:b0b3a16:             throw new RuntimeException(e);
1:b0b3a16:         }
1:b0b3a16: 
1:b0b3a16:         List<T> answer = new ArrayList<T>();
1:b0b3a16:         if (connection != null) {
1:b0b3a16:             for (int i = 0; i < names.length; i++) {
1:b0b3a16:                 ObjectName name = names[i];
1:b0b3a16:                 T value = MBeanServerInvocationHandler.newProxyInstance(connection, name, type, true);
1:b0b3a16:                 if (value != null) {
1:b0b3a16:                     answer.add(value);
1:b0b3a16:                 }
1:b0b3a16:             }
1:b0b3a16:         }
1:b0b3a16:         return answer;
1:d2836d1:     }
1:1f35514: 
1:1f35514:     @Override
1:1f35514:     public Set queryNames(ObjectName name, QueryExp query) throws Exception {
1:1f35514:         return getMBeanServerConnection().queryNames(name, query);
1:540dd5c:     }
1:1f35514: 
1:1f35514:     @Override
1:b0b3a16:     public Object newProxyInstance(ObjectName objectName, Class interfaceClass, boolean notificationBroadcaster) throws Exception {
1:1f35514:         return MBeanServerInvocationHandler.newProxyInstance(getMBeanServerConnection(), objectName, interfaceClass, notificationBroadcaster);
1:1f35514:     }
1:b514d3f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b0b3a16
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         return configuration;
1:     }
1:     public void setConfiguration(WebConsoleConfiguration configuration) {
1:         this.configuration = configuration;
1:     }
1:     /**
1:     @Override
1:         Set<ObjectName> brokers = findBrokers(connection);
1:         ObjectName name = brokers.iterator().next();
1:         BrokerViewMBean mbean = MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
1:     @Override
1:     public String getBrokerName() throws Exception, MalformedObjectNameException {
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (this.configuration.getJmxUser() != null) {
1:             env.put("jmx.remote.credentials", new String[] { this.configuration.getJmxUser(), this.configuration.getJmxPassword() });
1:         }
1:         for (JMXServiceURL url : jmxUrls) {
1:             try {
1:                 JMXConnector connector = JMXConnectorFactory.connect(url, env);
1:                 connector.connect();
1:                 MBeanServerConnection connection = connector.getMBeanServerConnection();
1:                 Set<ObjectName> brokers = findBrokers(connection);
1:                 if (brokers.size() > 0) {
1:                     LOG.info("Connected via JMX to the broker at " + url);
1:                     return connector;
1:                 }
1:             } catch (Exception e) {
1:                 // Keep the exception for later
1:                 exception = e;
1:             }
1:         }
1:         if (exception != null) {
1:             if (exception instanceof RuntimeException) {
1:                 throw (RuntimeException) exception;
1:             } else {
1:                 throw new RuntimeException(exception);
1:             }
1:         }
1:         throw new IllegalStateException("No broker is found at any of the " + jmxUrls.size() + " configured urls");
1:     }
1:                 // Ignore the exception, since it most likly won't matter anymore
1:     /**
1:      * Finds all ActiveMQ-Brokers registered on a certain JMX-Server or, if a
1:      * JMX-BrokerName has been set, the broker with that name.
1:      *
1:      * @param connection
1:      *            not <code>null</code>
1:      * @return Set with ObjectName-elements
1:      * @throws IOException
1:      * @throws MalformedObjectNameException
1:      */
1:     protected Set<ObjectName> findBrokers(MBeanServerConnection connection) throws IOException, MalformedObjectNameException {
1:         ObjectName name;
1:         if (this.brokerName == null) {
1:             name = new ObjectName("org.apache.activemq:type=Broker,brokerName=*");
1:         } else {
1:             name = new ObjectName("org.apache.activemq:type=Broker,brokerName=" + this.brokerName);
1:         }
1:         Set<ObjectName> brokers = connection.queryNames(name, null);
1:         Set<ObjectName> masterBrokers = new HashSet<ObjectName>();
1:         for (ObjectName objectName : brokers) {
1:             BrokerViewMBean mbean = MBeanServerInvocationHandler.newProxyInstance(connection, objectName, BrokerViewMBean.class, true);
1:             if (!mbean.isSlave())
1:                 masterBrokers.add(objectName);
1:         }
1:         return masterBrokers;
1:     }
1:     @Override
1:     public void purgeQueue(ActiveMQDestination destination) throws Exception {
1:         QueueViewMBean queue = getQueue(destination.getPhysicalName());
1:         queue.purge();
1:     }
1:     @Override
1:     public ManagementContext getManagementContext() {
1:         throw new IllegalStateException("not supported");
1:     }
1: 
1:     @Override
1:     protected <T> Collection<T> getManagedObjects(ObjectName[] names, Class<T> type) {
1:         MBeanServerConnection connection;
1:         try {
1:             connection = getMBeanServerConnection();
1:         } catch (Exception e) {
1:             throw new RuntimeException(e);
1:         }
1: 
1:         List<T> answer = new ArrayList<T>();
1:         if (connection != null) {
1:             for (int i = 0; i < names.length; i++) {
1:                 ObjectName name = names[i];
1:                 T value = MBeanServerInvocationHandler.newProxyInstance(connection, name, type, true);
1:                 if (value != null) {
1:                     answer.add(value);
1:                 }
1:             }
1:         }
1:         return answer;
/////////////////////////////////////////////////////////////////////////
1:     public Object newProxyInstance(ObjectName objectName, Class interfaceClass, boolean notificationBroadcaster) throws Exception {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:d2836d1
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
0: 		Set<ObjectName> masterBrokers = new HashSet<ObjectName>();
0: 		for (ObjectName objectName : brokers) {
0: 			BrokerViewMBean mbean = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(connection, objectName, BrokerViewMBean.class, true);
0: 			if (!mbean.isSlave()) masterBrokers.add(objectName);
1: 		}
0: 		return masterBrokers;
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1:  * 
1:     
0:     private static final transient Log LOG = LogFactory.getLog(RemoteJMXBrokerFacade.class);
1:     
/////////////////////////////////////////////////////////////////////////
0:         ObjectName name = (ObjectName)brokers.iterator().next();
0:         BrokerViewMBean mbean = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Creating a new JMX-Connection to the broker");
/////////////////////////////////////////////////////////////////////////
1:             MBeanServerConnection connection = connector.getMBeanServerConnection();
1:         } catch (Exception e) {
0:         HashMap env = new HashMap();
0:         env.put("jmx.remote.credentials", new String[] {
0:             this.jmxRole, this.jmxPassword
0:         });
0:             urls = new String[] {
0:                 this.jmxUrl
0:             };
0:                 JMXConnector connector = JMXConnectorFactory.connect(new JMXServiceURL(urls[i]), env);
1:                 MBeanServerConnection connection = connector.getMBeanServerConnection();
0:                     LOG.info("Connected via JMX to the broker at " + urls[i]);
1:             } catch (Exception e) {
0:                 throw (RuntimeException)exception;
0:             } else {
0:         throw new IllegalStateException("No broker is found at any of the urls " + this.jmxUrl);
1:                 LOG.debug("Closing a connection to a broker (" + connector.getConnectionId() + ")");
1:             } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
0:      * 
0:     protected Set findBrokers(MBeanServerConnection connection) throws IOException, MalformedObjectNameException {
0:         } else {
0:             name = new ObjectName("org.apache.activemq:BrokerName=" + this.brokerName + ",Type=Broker");
/////////////////////////////////////////////////////////////////////////
0:         } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
0:                 Object value = MBeanServerInvocationHandler.newProxyInstance(connection, name, type, true);
0:         return answer;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0d27c49
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: 			name = new ObjectName("org.apache.activemq:type=Broker,brokerName=*");
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(RemoteJMXBrokerFacade.class);
commit:1f35514
/////////////////////////////////////////////////////////////////////////
1: import javax.management.QueryExp;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Set queryNames(ObjectName name, QueryExp query) throws Exception {
1:         return getMBeanServerConnection().queryNames(name, query);
1:     }
1: 
1:     @Override
0:     public Object newProxyInstance(ObjectName objectName, Class interfaceClass,boolean notificationBroadcaster) throws Exception {
1:         return MBeanServerInvocationHandler.newProxyInstance(getMBeanServerConnection(), objectName, interfaceClass, notificationBroadcaster);
1:     }
1: 
commit:88dfd77
/////////////////////////////////////////////////////////////////////////
1:     public WebConsoleConfiguration getConfiguration() {
0: 		return configuration;
1: 	}
1: 
0: 	public void setConfiguration(WebConsoleConfiguration configuration) {
0: 		this.configuration = configuration;
1: 	}
1: 
1: 	/**
/////////////////////////////////////////////////////////////////////////
1:         MBeanServerConnection connection = getMBeanServerConnection();
/////////////////////////////////////////////////////////////////////////
1:         return getBrokerAdmin().getBrokerName();
1:     }
1:     protected MBeanServerConnection getMBeanServerConnection() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	
commit:b514d3f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.web.config.WebConsoleConfiguration;
/////////////////////////////////////////////////////////////////////////
1:     private WebConsoleConfiguration configuration;
1:     
0:     private ObjectName getBrokerObjectName(MBeanServerConnection connection)
0: 			throws IOException, MalformedObjectNameException {
0: 		Set<ObjectName> brokers = findBrokers(connection);
1: 		if (brokers.size() == 0) {
1: 			throw new IOException("No broker could be found in the JMX.");
1: 		}
0: 		ObjectName name = brokers.iterator().next();
0: 		return name;
1: 	}
/////////////////////////////////////////////////////////////////////////
0:     public String getBrokerName() throws Exception,
0: 			MalformedObjectNameException {
0: 		MBeanServerConnection connection = getMBeanServerConnection();
0: 		ObjectName brokerObjectName = getBrokerObjectName(connection);
0: 		String brokerName = brokerObjectName.getKeyProperty("BrokerName");
0: 		return brokerName;
1: 	}
1:     
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> env = new HashMap<String, Object>();
0: 		if (this.configuration.getJmxUser() != null) {
0: 			env.put("jmx.remote.credentials", new String[] {
0: 					this.configuration.getJmxUser(),
0: 					this.configuration.getJmxPassword() });
1: 		}
1:         Collection<JMXServiceURL> jmxUrls = this.configuration.getJmxUrls();
0: 		for (JMXServiceURL url : jmxUrls) {
1: 			try {
0: 				JMXConnector connector = JMXConnectorFactory.connect(url, env);
0: 				connector.connect();
0: 				MBeanServerConnection connection = connector
0: 						.getMBeanServerConnection();
0: 				Set<ObjectName> brokers = findBrokers(connection);
0: 				if (brokers.size() > 0) {
0: 					LOG.info("Connected via JMX to the broker at " + url);
0: 					return connector;
1: 				}
0: 			} catch (Exception e) {
0: 				// Keep the exception for later
0: 				exception = e;
1: 			}
1: 		}
0: 		if (exception != null) {
0: 			if (exception instanceof RuntimeException) {
0: 				throw (RuntimeException) exception;
0: 			} else {
0: 				throw new RuntimeException(exception);
1: 			}
1: 		}
0: 		throw new IllegalStateException("No broker is found at any of the "
0: 				+ jmxUrls.size() + " configured urls");
1: 	}
/////////////////////////////////////////////////////////////////////////
1: 	/**
0: 	 * Finds all ActiveMQ-Brokers registered on a certain JMX-Server or, if a
0: 	 * JMX-BrokerName has been set, the broker with that name.
0: 	 * 
0: 	 * @param connection
0: 	 *            not <code>null</code>
0: 	 * @return Set with ObjectName-elements
0: 	 * @throws IOException
0: 	 * @throws MalformedObjectNameException
1: 	 */
0: 	@SuppressWarnings("unchecked")
0: 	protected Set<ObjectName> findBrokers(MBeanServerConnection connection)
0: 			throws IOException, MalformedObjectNameException {
0: 		ObjectName name;
0: 		if (this.brokerName == null) {
0: 			name = new ObjectName("org.apache.activemq:Type=Broker,*");
0: 		} else {
0: 			name = new ObjectName("org.apache.activemq:BrokerName="
0: 					+ this.brokerName + ",Type=Broker");
1: 		}
0: 		Set<ObjectName> brokers = connection.queryNames(name, null);
0: 		return brokers;
1: 	}
0: 	public void purgeQueue(ActiveMQDestination destination) throws Exception {
0: 		QueueViewMBean queue = getQueue(destination.getPhysicalName());
0: 		queue.purge();
1: 	}
0: 	public ManagementContext getManagementContext() {
0: 		throw new IllegalStateException("not supported");
1: 	}
1: 	
0: 	@SuppressWarnings("unchecked")
0: 	protected <T> Collection<T> getManagedObjects(ObjectName[] names,
0: 			Class<T> type) {
0: 		MBeanServerConnection connection;
1: 		try {
0: 			connection = getMBeanServerConnection();
0: 		} catch (Exception e) {
0: 			throw new RuntimeException(e);
1: 		}
0: 		List<T> answer = new ArrayList<T>();
0: 		if (connection != null) {
0: 			for (int i = 0; i < names.length; i++) {
0: 				ObjectName name = names[i];
0: 				T value = (T) MBeanServerInvocationHandler.newProxyInstance(
0: 						connection, name, type, true);
0: 				if (value != null) {
0: 					answer.add(value);
1: 				}
1: 			}
1: 		}
0: 		return answer;
author:Christian Posta
-------------------------------------------------------------------------------
commit:43e2083
/////////////////////////////////////////////////////////////////////////
0: 			name = new ObjectName("org.apache.activemq:type=Broker,*");
0: 			name = new ObjectName("org.apache.activemq:brokerName="
0: 					+ this.brokerName + ",Type=broker");
author:James Strachan
-------------------------------------------------------------------------------
commit:5a5056e
commit:fccb3cc
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0:     private String jmxRole;
0:     private String jmxPassword;
/////////////////////////////////////////////////////////////////////////
0:     public void setJmxRole(String role) {
0:         this.jmxRole = role;
0:     }
1: 
0:     public void setJmxPassword(String password) {
0:         this.jmxPassword = password;
0:     }
1: 
/////////////////////////////////////////////////////////////////////////
0: 	HashMap env = new HashMap();
0: 	env.put("jmx.remote.credentials",
0: 		new String[] {this.jmxRole, this.jmxPassword});
1: 
/////////////////////////////////////////////////////////////////////////
0:                         .connect(new JMXServiceURL(urls[i]), env);
commit:87f75b2
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
0: import org.apache.activemq.broker.jmx.BrokerViewMBean;
0: import org.apache.activemq.broker.jmx.ManagementContext;
0: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.management.MBeanServerConnection;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.remote.JMXConnector;
1: import javax.management.remote.JMXConnectorFactory;
1: import javax.management.remote.JMXServiceURL;
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.List;
0: import java.util.Set;
1: 
0: /**
1:  * A {@link BrokerFacade} which uses a JMX-Connection to communicate with a
1:  * broker
0:  *
0:  * @version $Revision: 1.1 $
1:  */
1: public class RemoteJMXBrokerFacade extends BrokerFacadeSupport {
0:     private static final transient Log log = LogFactory.getLog(RemoteJMXBrokerFacade.class);
0:     private String jmxUrl;
1:     private String brokerName;
1:     private JMXConnector connector;
1: 
1:     public void setBrokerName(String brokerName) {
1:         this.brokerName = brokerName;
0:     }
1: 
0:     public void setJmxUrl(String url) {
0:         this.jmxUrl = url;
0:     }
1: 
0:     /**
1:      * Shutdown this facade aka close any open connection.
1:      */
1:     public void shutdown() {
1:         closeConnection();
0:     }
1: 
1:     public BrokerViewMBean getBrokerAdmin() throws Exception {
0:         MBeanServerConnection connection = getConnection();
1: 
0:         Set brokers = findBrokers(connection);
0:         if (brokers.size() == 0) {
0:             throw new IOException("No broker could be found in the JMX.");
0:         }
0:         ObjectName name = (ObjectName) brokers.iterator().next();
0:         BrokerViewMBean mbean = (BrokerViewMBean) MBeanServerInvocationHandler
0:                 .newProxyInstance(connection, name, BrokerViewMBean.class, true);
1:         return mbean;
0:     }
1: 
0:     protected MBeanServerConnection getConnection() throws IOException {
1:         JMXConnector connector = this.connector;
1:         if (isConnectionActive(connector)) {
1:             return connector.getMBeanServerConnection();
0:         }
1: 
1:         synchronized (this) {
1:             closeConnection();
1: 
0:             log.debug("Creating a new JMX-Connection to the broker");
1:             this.connector = createConnection();
1:             return this.connector.getMBeanServerConnection();
0:         }
0:     }
1: 
1:     protected boolean isConnectionActive(JMXConnector connector) {
1:         if (connector == null) {
1:             return false;
0:         }
1: 
0:         try {
0:             MBeanServerConnection connection = connector
0:                     .getMBeanServerConnection();
1:             int brokerCount = findBrokers(connection).size();
1:             return brokerCount > 0;
0:         }
0:         catch (Exception e) {
1:             return false;
0:         }
0:     }
1: 
1:     protected JMXConnector createConnection() {
0:         String[] urls = this.jmxUrl.split(",");
0:         if (urls == null || urls.length == 0) {
0:             urls = new String[]{this.jmxUrl};
0:         }
1: 
1:         Exception exception = null;
0:         for (int i = 0; i < urls.length; i++) {
0:             try {
0:                 JMXConnector connector = JMXConnectorFactory
0:                         .connect(new JMXServiceURL(urls[i]));
0:                 connector.connect();
0:                 MBeanServerConnection connection = connector
0:                         .getMBeanServerConnection();
1: 
0:                 Set brokers = findBrokers(connection);
0:                 if (brokers.size() > 0) {
0:                     log
0:                             .info("Connected via JMX to the broker at "
0:                                     + urls[i]);
0:                     return connector;
0:                 }
0:             }
0:             catch (Exception e) {
0:                 // Keep the exception for later
0:                 exception = e;
0:             }
0:         }
0:         if (exception != null) {
0:             if (exception instanceof RuntimeException) {
0:                 throw (RuntimeException) exception;
0:             }
0:             else {
0:                 throw new RuntimeException(exception);
0:             }
0:         }
0:         throw new IllegalStateException(
0:                 "No broker is found at any of the urls " + this.jmxUrl);
0:     }
1: 
1:     protected synchronized void closeConnection() {
1:         if (connector != null) {
0:             try {
0:                 log.debug("Closing a connection to a broker ("
0:                         + connector.getConnectionId() + ")");
1: 
1:                 connector.close();
0:             }
0:             catch (IOException e) {
0:                 // Ignore the exception, since it most likly won't matter
0:                 // anymore
0:             }
0:         }
0:     }
1: 
0:     /**
0:      * Finds all ActiveMQ-Brokers registered on a certain JMX-Server or, if a
0:      * JMX-BrokerName has been set, the broker with that name.
0:      *
0:      * @param connection not <code>null</code>
0:      * @return Set with ObjectName-elements
0:      * @throws IOException
0:      * @throws MalformedObjectNameException
1:      */
0:     protected Set findBrokers(MBeanServerConnection connection)
0:             throws IOException, MalformedObjectNameException {
0:         ObjectName name;
0:         if (this.brokerName == null) {
0:             name = new ObjectName("org.apache.activemq:Type=Broker,*");
0:         }
0:         else {
0:             name = new ObjectName("org.apache.activemq:BrokerName="
0:                     + this.brokerName + ",Type=Broker");
0:         }
1: 
0:         Set brokers = connection.queryNames(name, null);
0:         return brokers;
0:     }
1: 
0:     public void purgeQueue(ActiveMQDestination destination) throws Exception {
0:         QueueViewMBean queue = getQueue(destination.getPhysicalName());
0:         queue.purge();
0:     }
1: 
0:     public ManagementContext getManagementContext() {
0:         throw new IllegalStateException("not supported");
0:     }
1: 
0:     protected Collection getManagedObjects(ObjectName[] names, Class type) {
0:         MBeanServerConnection connection;
0:         try {
0:             connection = getConnection();
0:         }
0:         catch (IOException e) {
0:             throw new RuntimeException(e);
0:         }
1: 
0:         List answer = new ArrayList();
0:         if (connection != null) {
0:             for (int i = 0; i < names.length; i++) {
0:                 ObjectName name = names[i];
0:                 Object value = MBeanServerInvocationHandler.newProxyInstance(
0:                         connection, name, type, true);
0:                 if (value != null) {
0:                     answer.add(value);
0:                 }
0:             }
0:         }
0: 		return answer;
0: 	}
1: 
0: }
============================================================================