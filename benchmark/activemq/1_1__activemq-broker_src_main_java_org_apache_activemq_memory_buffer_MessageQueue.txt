1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory.buffer;
2:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.LinkedList;
1:d29ca2a: import java.util.List;
1:d29ca2a: 
1:74a7a8b: import org.apache.activemq.broker.region.MessageReference;
1:74a7a8b: import org.apache.activemq.command.ActiveMQMessage;
1:74a7a8b: import org.apache.activemq.command.Message;
1:74a7a8b: 
1:d29ca2a: /**
1:d29ca2a:  * Allows messages to be added to the end of the buffer such that they are kept
1:d29ca2a:  * around and evicted in a FIFO manner.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class MessageQueue {
1:d29ca2a: 
1:d29ca2a:     private MessageBuffer buffer;
1:933eb2f:     private LinkedList<MessageReference> list = new LinkedList<MessageReference>();
1:d29ca2a:     private int size;
1:d29ca2a:     private Object lock = new Object();
1:d29ca2a:     private int position;
1:d29ca2a: 
1:d29ca2a:     public MessageQueue(MessageBuffer buffer) {
1:d29ca2a:         this.buffer = buffer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void add(MessageReference messageRef) {
1:d29ca2a:         Message message = messageRef.getMessageHardRef();
1:d29ca2a:         int delta = message.getSize();
1:d29ca2a:         int newSize = 0;
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             list.add(messageRef);
1:d29ca2a:             size += delta;
1:d29ca2a:             newSize = size;
1:d29ca2a:         }
1:d29ca2a:         buffer.onSizeChanged(this, delta, newSize);
1:d29ca2a:     }
1:d29ca2a:     
1:d29ca2a:     public void add(ActiveMQMessage message) {
1:d29ca2a:         int delta = message.getSize();
1:d29ca2a:         int newSize = 0;
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             list.add(message);
1:d29ca2a:             size += delta;
1:d29ca2a:             newSize = size;
1:d29ca2a:         }
1:d29ca2a:         buffer.onSizeChanged(this, delta, newSize);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int evictMessage() {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             if (!list.isEmpty()) {
1:d29ca2a:                 ActiveMQMessage message = (ActiveMQMessage) list.removeFirst();
1:d29ca2a:                 int messageSize = message.getSize();
1:d29ca2a:                 size -= messageSize;
1:d29ca2a:                 return messageSize;
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return 0;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns a copy of the list
1:d29ca2a:      */
1:933eb2f:     public List<MessageReference> getList() {
1:d29ca2a:         synchronized (lock) {
1:933eb2f:             return new ArrayList<MessageReference>(list);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     public void appendMessages(List<MessageReference> answer) {
1:d29ca2a:         synchronized (lock) {
1:933eb2f:             for (Iterator<MessageReference> iter = list.iterator(); iter.hasNext();) {
1:d29ca2a:                 answer.add(iter.next());
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int getSize() {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             return size;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int getPosition() {
1:d29ca2a:         return position;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setPosition(int position) {
1:d29ca2a:         this.position = position;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void clear() {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             list.clear();
1:d29ca2a:             size = 0;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private LinkedList<MessageReference> list = new LinkedList<MessageReference>();
/////////////////////////////////////////////////////////////////////////
1:     public List<MessageReference> getList() {
1:             return new ArrayList<MessageReference>(list);
1:     public void appendMessages(List<MessageReference> answer) {
1:             for (Iterator<MessageReference> iter = list.iterator(); iter.hasNext();) {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.Message;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory.buffer;
1: 
0: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.Message;
1: 
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: /**
1:  * Allows messages to be added to the end of the buffer such that they are kept
1:  * around and evicted in a FIFO manner.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class MessageQueue {
1: 
1:     private MessageBuffer buffer;
0:     private LinkedList list = new LinkedList();
1:     private int size;
1:     private Object lock = new Object();
1:     private int position;
1: 
1:     public MessageQueue(MessageBuffer buffer) {
1:         this.buffer = buffer;
1:     }
1: 
1:     public void add(MessageReference messageRef) {
1:         Message message = messageRef.getMessageHardRef();
1:         int delta = message.getSize();
1:         int newSize = 0;
1:         synchronized (lock) {
1:             list.add(messageRef);
1:             size += delta;
1:             newSize = size;
1:         }
1:         buffer.onSizeChanged(this, delta, newSize);
1:     }
1:     
1:     public void add(ActiveMQMessage message) {
1:         int delta = message.getSize();
1:         int newSize = 0;
1:         synchronized (lock) {
1:             list.add(message);
1:             size += delta;
1:             newSize = size;
1:         }
1:         buffer.onSizeChanged(this, delta, newSize);
1:     }
1: 
1:     public int evictMessage() {
1:         synchronized (lock) {
1:             if (!list.isEmpty()) {
1:                 ActiveMQMessage message = (ActiveMQMessage) list.removeFirst();
1:                 int messageSize = message.getSize();
1:                 size -= messageSize;
1:                 return messageSize;
1:             }
1:         }
1:         return 0;
1:     }
1: 
1:     /**
1:      * Returns a copy of the list
1:      */
0:     public List getList() {
1:         synchronized (lock) {
0:             return new ArrayList(list);
1:         }
1:     }
1: 
0:     public void appendMessages(List answer) {
1:         synchronized (lock) {
0:             for (Iterator iter = list.iterator(); iter.hasNext();) {
1:                 answer.add(iter.next());
1:             }
1:         }
1:     }
1: 
1:     public int getSize() {
1:         synchronized (lock) {
1:             return size;
1:         }
1:     }
1: 
1:     public int getPosition() {
1:         return position;
1:     }
1: 
1:     public void setPosition(int position) {
1:         this.position = position;
1:     }
1: 
1:     public void clear() {
1:         synchronized (lock) {
1:             list.clear();
1:             size = 0;
1:         }
1:     }
1: 
1: }
============================================================================